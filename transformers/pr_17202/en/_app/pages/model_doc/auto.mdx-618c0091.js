import{S as myt,i as gyt,s as hyt,e as a,k as l,w as F,t as o,M as pyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as uyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as $jr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function _yt(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,K6,hf,qe,Xe,fi,An,Z6,yn,Ln,eA,mi,xn,oA,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),K6=o(")."),hf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),Z6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),eA=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),oA=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var F$=s(p);m=r(F$,"NewModelConfig"),F$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var T$=s(ii);gf=r(T$,"model_type"),T$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var M$=s(di);ci=r(M$,'"new-model"'),M$.forEach(t),K6=r(Ae,")."),Ae.forEach(t),hf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),Z6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var E$=s(yn);Ln=r(E$,"PreTrainedModel"),E$.forEach(t),eA=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),oA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var C$=s(gi);pf=r(C$,"NewModelConfig"),C$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,K6),b(ze,hf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,An),e(qe,Z6),e(qe,yn),e(yn,Ln),e(qe,eA),e(qe,mi),e(mi,xn),e(qe,oA),e(qe,gi),e(gi,pf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(qe)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,K6,hf,qe,Xe,fi,An,Z6,yn,Ln,eA,mi,xn,oA,gi,pf,Ma,ze,Ae,F$,hi,T$,M$,Eo,Ea,E$,uf,C$,TDe,cIe,pi,_f,mee,rA,MDe,gee,EDe,fIe,$n,CDe,hee,wDe,ADe,pee,yDe,LDe,mIe,tA,gIe,w$,xDe,hIe,bf,pIe,ui,vf,uee,aA,$De,_ee,kDe,uIe,Co,nA,SDe,sA,RDe,A$,BDe,PDe,IDe,lA,qDe,bee,NDe,jDe,DDe,Er,iA,GDe,vee,ODe,VDe,_i,XDe,Fee,zDe,QDe,Tee,WDe,HDe,UDe,A,Ff,Mee,JDe,YDe,y$,KDe,ZDe,eGe,Tf,Eee,oGe,rGe,L$,tGe,aGe,nGe,Mf,Cee,sGe,lGe,x$,iGe,dGe,cGe,Ef,wee,fGe,mGe,$$,gGe,hGe,pGe,Cf,Aee,uGe,_Ge,k$,bGe,vGe,FGe,wf,yee,TGe,MGe,S$,EGe,CGe,wGe,Af,Lee,AGe,yGe,R$,LGe,xGe,$Ge,yf,xee,kGe,SGe,B$,RGe,BGe,PGe,Lf,$ee,IGe,qGe,P$,NGe,jGe,DGe,xf,kee,GGe,OGe,I$,VGe,XGe,zGe,$f,See,QGe,WGe,q$,HGe,UGe,JGe,kf,Ree,YGe,KGe,N$,ZGe,eOe,oOe,Sf,Bee,rOe,tOe,j$,aOe,nOe,sOe,Rf,Pee,lOe,iOe,D$,dOe,cOe,fOe,Bf,Iee,mOe,gOe,G$,hOe,pOe,uOe,Pf,qee,_Oe,bOe,O$,vOe,FOe,TOe,If,Nee,MOe,EOe,V$,COe,wOe,AOe,qf,jee,yOe,LOe,X$,xOe,$Oe,kOe,Nf,Dee,SOe,ROe,z$,BOe,POe,IOe,jf,Gee,qOe,NOe,Q$,jOe,DOe,GOe,Df,Oee,OOe,VOe,W$,XOe,zOe,QOe,Gf,Vee,WOe,HOe,H$,UOe,JOe,YOe,Of,Xee,KOe,ZOe,U$,eVe,oVe,rVe,Vf,zee,tVe,aVe,J$,nVe,sVe,lVe,Xf,Qee,iVe,dVe,Y$,cVe,fVe,mVe,zf,Wee,gVe,hVe,K$,pVe,uVe,_Ve,Qf,Hee,bVe,vVe,Z$,FVe,TVe,MVe,Wf,Uee,EVe,CVe,ek,wVe,AVe,yVe,Hf,Jee,LVe,xVe,ok,$Ve,kVe,SVe,Uf,Yee,RVe,BVe,rk,PVe,IVe,qVe,Jf,Kee,NVe,jVe,tk,DVe,GVe,OVe,Yf,Zee,VVe,XVe,ak,zVe,QVe,WVe,Kf,eoe,HVe,UVe,nk,JVe,YVe,KVe,Zf,ooe,ZVe,eXe,sk,oXe,rXe,tXe,em,roe,aXe,nXe,lk,sXe,lXe,iXe,om,toe,dXe,cXe,ik,fXe,mXe,gXe,rm,aoe,hXe,pXe,dk,uXe,_Xe,bXe,tm,noe,vXe,FXe,ck,TXe,MXe,EXe,am,soe,CXe,wXe,fk,AXe,yXe,LXe,nm,loe,xXe,$Xe,mk,kXe,SXe,RXe,sm,ioe,BXe,PXe,gk,IXe,qXe,NXe,lm,doe,jXe,DXe,hk,GXe,OXe,VXe,im,coe,XXe,zXe,pk,QXe,WXe,HXe,dm,foe,UXe,JXe,uk,YXe,KXe,ZXe,cm,moe,eze,oze,_k,rze,tze,aze,fm,goe,nze,sze,bk,lze,ize,dze,mm,hoe,cze,fze,vk,mze,gze,hze,gm,poe,pze,uze,Fk,_ze,bze,vze,hm,uoe,Fze,Tze,Tk,Mze,Eze,Cze,pm,_oe,wze,Aze,Mk,yze,Lze,xze,um,boe,$ze,kze,Ek,Sze,Rze,Bze,_m,voe,Pze,Ize,Ck,qze,Nze,jze,bm,Foe,Dze,Gze,wk,Oze,Vze,Xze,vm,Toe,zze,Qze,Ak,Wze,Hze,Uze,Fm,Moe,Jze,Yze,yk,Kze,Zze,eQe,Tm,Eoe,oQe,rQe,Lk,tQe,aQe,nQe,Mm,Coe,sQe,lQe,xk,iQe,dQe,cQe,Em,woe,fQe,mQe,$k,gQe,hQe,pQe,Cm,Aoe,uQe,_Qe,kk,bQe,vQe,FQe,wm,yoe,TQe,MQe,Sk,EQe,CQe,wQe,Am,Loe,AQe,yQe,Rk,LQe,xQe,$Qe,ym,xoe,kQe,SQe,Bk,RQe,BQe,PQe,Lm,$oe,IQe,qQe,Pk,NQe,jQe,DQe,xm,koe,GQe,OQe,Ik,VQe,XQe,zQe,$m,Soe,QQe,WQe,qk,HQe,UQe,JQe,km,Roe,YQe,KQe,Nk,ZQe,eWe,oWe,Sm,Boe,rWe,tWe,jk,aWe,nWe,sWe,Rm,Poe,lWe,iWe,Dk,dWe,cWe,fWe,Bm,Ioe,mWe,gWe,Gk,hWe,pWe,uWe,Pm,qoe,_We,bWe,Ok,vWe,FWe,TWe,Im,Noe,MWe,EWe,Vk,CWe,wWe,AWe,qm,joe,yWe,LWe,Xk,xWe,$We,kWe,Nm,Doe,SWe,RWe,zk,BWe,PWe,IWe,jm,Goe,qWe,NWe,Qk,jWe,DWe,GWe,Dm,Ooe,OWe,VWe,Wk,XWe,zWe,QWe,Gm,Voe,WWe,HWe,Hk,UWe,JWe,YWe,Om,Xoe,KWe,ZWe,Uk,eHe,oHe,rHe,Vm,zoe,tHe,aHe,Jk,nHe,sHe,lHe,Xm,Qoe,iHe,dHe,Yk,cHe,fHe,mHe,zm,Woe,gHe,hHe,Kk,pHe,uHe,_He,Qm,Hoe,bHe,vHe,Zk,FHe,THe,MHe,Wm,Uoe,EHe,CHe,eS,wHe,AHe,yHe,Hm,Joe,LHe,xHe,oS,$He,kHe,SHe,Um,Yoe,RHe,BHe,rS,PHe,IHe,qHe,Jm,Koe,NHe,jHe,tS,DHe,GHe,OHe,Ym,Zoe,VHe,XHe,aS,zHe,QHe,WHe,Km,ere,HHe,UHe,nS,JHe,YHe,KHe,Zm,ore,ZHe,eUe,sS,oUe,rUe,tUe,eg,rre,aUe,nUe,lS,sUe,lUe,iUe,og,tre,dUe,cUe,iS,fUe,mUe,gUe,rg,are,hUe,pUe,dS,uUe,_Ue,bUe,tg,nre,vUe,FUe,cS,TUe,MUe,EUe,ag,sre,CUe,wUe,fS,AUe,yUe,LUe,ng,lre,xUe,$Ue,mS,kUe,SUe,RUe,sg,ire,BUe,PUe,gS,IUe,qUe,NUe,lg,dre,jUe,DUe,hS,GUe,OUe,VUe,ig,cre,XUe,zUe,pS,QUe,WUe,HUe,dg,fre,UUe,JUe,uS,YUe,KUe,ZUe,cg,mre,eJe,oJe,_S,rJe,tJe,aJe,fg,gre,nJe,sJe,bS,lJe,iJe,dJe,mg,hre,cJe,fJe,vS,mJe,gJe,hJe,gg,pre,pJe,uJe,FS,_Je,bJe,vJe,hg,ure,FJe,TJe,TS,MJe,EJe,CJe,pg,_re,wJe,AJe,MS,yJe,LJe,xJe,ug,bre,$Je,kJe,ES,SJe,RJe,BJe,_g,vre,PJe,IJe,CS,qJe,NJe,jJe,bg,DJe,vg,dA,GJe,Fre,OJe,_Ie,bi,Fg,Tre,cA,VJe,Mre,XJe,bIe,wo,fA,zJe,mA,QJe,wS,WJe,HJe,UJe,gA,JJe,Ere,YJe,KJe,ZJe,Cr,hA,eYe,Cre,oYe,rYe,Ca,tYe,wre,aYe,nYe,Are,sYe,lYe,yre,iYe,dYe,cYe,k,kn,Lre,fYe,mYe,AS,gYe,hYe,yS,pYe,uYe,_Ye,Sn,xre,bYe,vYe,LS,FYe,TYe,xS,MYe,EYe,CYe,Rn,$re,wYe,AYe,$S,yYe,LYe,kS,xYe,$Ye,kYe,Tg,kre,SYe,RYe,SS,BYe,PYe,IYe,Bn,Sre,qYe,NYe,RS,jYe,DYe,BS,GYe,OYe,VYe,Mg,Rre,XYe,zYe,PS,QYe,WYe,HYe,Eg,Bre,UYe,JYe,IS,YYe,KYe,ZYe,Cg,Pre,eKe,oKe,qS,rKe,tKe,aKe,Pn,Ire,nKe,sKe,NS,lKe,iKe,jS,dKe,cKe,fKe,In,qre,mKe,gKe,DS,hKe,pKe,GS,uKe,_Ke,bKe,qn,Nre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,Nn,jre,AKe,yKe,XS,LKe,xKe,zS,$Ke,kKe,SKe,wg,Dre,RKe,BKe,QS,PKe,IKe,qKe,Ag,Gre,NKe,jKe,WS,DKe,GKe,OKe,jn,Ore,VKe,XKe,HS,zKe,QKe,US,WKe,HKe,UKe,yg,Vre,JKe,YKe,JS,KKe,ZKe,eZe,Dn,Xre,oZe,rZe,YS,tZe,aZe,KS,nZe,sZe,lZe,Gn,zre,iZe,dZe,ZS,cZe,fZe,eR,mZe,gZe,hZe,On,Qre,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,Lg,Wre,MZe,EZe,tR,CZe,wZe,AZe,Vn,Hre,yZe,LZe,aR,xZe,$Ze,nR,kZe,SZe,RZe,Xn,Ure,BZe,PZe,sR,IZe,qZe,lR,NZe,jZe,DZe,zn,Jre,GZe,OZe,iR,VZe,XZe,dR,zZe,QZe,WZe,Qn,Yre,HZe,UZe,cR,JZe,YZe,fR,KZe,ZZe,eeo,Wn,Kre,oeo,reo,mR,teo,aeo,gR,neo,seo,leo,Hn,Zre,ieo,deo,hR,ceo,feo,pR,meo,geo,heo,xg,ete,peo,ueo,uR,_eo,beo,veo,Un,ote,Feo,Teo,_R,Meo,Eeo,bR,Ceo,weo,Aeo,$g,rte,yeo,Leo,vR,xeo,$eo,keo,Jn,tte,Seo,Reo,FR,Beo,Peo,TR,Ieo,qeo,Neo,Yn,ate,jeo,Deo,MR,Geo,Oeo,ER,Veo,Xeo,zeo,Kn,nte,Qeo,Weo,CR,Heo,Ueo,wR,Jeo,Yeo,Keo,Zn,ste,Zeo,eoo,AR,ooo,roo,yR,too,aoo,noo,es,lte,soo,loo,LR,ioo,doo,xR,coo,foo,moo,kg,ite,goo,hoo,$R,poo,uoo,_oo,os,dte,boo,voo,kR,Foo,Too,SR,Moo,Eoo,Coo,rs,cte,woo,Aoo,RR,yoo,Loo,BR,xoo,$oo,koo,ts,fte,Soo,Roo,PR,Boo,Poo,IR,Ioo,qoo,Noo,as,mte,joo,Doo,qR,Goo,Ooo,NR,Voo,Xoo,zoo,ns,gte,Qoo,Woo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,ss,hte,Zoo,ero,GR,oro,rro,OR,tro,aro,nro,Sg,pte,sro,lro,VR,iro,dro,cro,ls,ute,fro,mro,XR,gro,hro,zR,pro,uro,_ro,Rg,_te,bro,vro,QR,Fro,Tro,Mro,Bg,bte,Ero,Cro,WR,wro,Aro,yro,is,vte,Lro,xro,HR,$ro,kro,UR,Sro,Rro,Bro,ds,Fte,Pro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,cs,Tte,Oro,Vro,KR,Xro,zro,ZR,Qro,Wro,Hro,Pg,Mte,Uro,Jro,eB,Yro,Kro,Zro,fs,Ete,eto,oto,oB,rto,tto,rB,ato,nto,sto,ms,Cte,lto,ito,tB,dto,cto,aB,fto,mto,gto,gs,wte,hto,pto,nB,uto,_to,sB,bto,vto,Fto,hs,Ate,Tto,Mto,lB,Eto,Cto,iB,wto,Ato,yto,ps,yte,Lto,xto,dB,$to,kto,cB,Sto,Rto,Bto,Ig,Lte,Pto,Ito,fB,qto,Nto,jto,us,xte,Dto,Gto,mB,Oto,Vto,gB,Xto,zto,Qto,qg,$te,Wto,Hto,hB,Uto,Jto,Yto,Ng,kte,Kto,Zto,pB,eao,oao,rao,jg,Ste,tao,aao,uB,nao,sao,lao,Dg,Rte,iao,dao,_B,cao,fao,mao,_s,Bte,gao,hao,bB,pao,uao,vB,_ao,bao,vao,Gg,Pte,Fao,Tao,FB,Mao,Eao,Cao,bs,Ite,wao,Aao,TB,yao,Lao,MB,xao,$ao,kao,vs,qte,Sao,Rao,EB,Bao,Pao,CB,Iao,qao,Nao,Fs,Nte,jao,Dao,wB,Gao,Oao,AB,Vao,Xao,zao,Ts,jte,Qao,Wao,yB,Hao,Uao,LB,Jao,Yao,Kao,Ms,Dte,Zao,eno,xB,ono,rno,$B,tno,ano,nno,Es,Gte,sno,lno,kB,ino,dno,SB,cno,fno,mno,Og,Ote,gno,hno,RB,pno,uno,_no,Vg,Vte,bno,vno,BB,Fno,Tno,Mno,Cs,Xte,Eno,Cno,PB,wno,Ano,IB,yno,Lno,xno,ws,zte,$no,kno,qB,Sno,Rno,NB,Bno,Pno,Ino,As,Qte,qno,Nno,jB,jno,Dno,DB,Gno,Ono,Vno,Xg,Wte,Xno,zno,GB,Qno,Wno,Hno,zg,Hte,Uno,Jno,OB,Yno,Kno,Zno,Qg,Ute,eso,oso,VB,rso,tso,aso,ys,Jte,nso,sso,XB,lso,iso,zB,dso,cso,fso,Wg,Yte,mso,gso,QB,hso,pso,uso,Hg,Kte,_so,bso,WB,vso,Fso,Tso,Ls,Zte,Mso,Eso,HB,Cso,wso,UB,Aso,yso,Lso,Ug,eae,xso,$so,JB,kso,Sso,Rso,Jg,oae,Bso,Pso,YB,Iso,qso,Nso,xs,rae,jso,Dso,KB,Gso,Oso,ZB,Vso,Xso,zso,$s,tae,Qso,Wso,eP,Hso,Uso,oP,Jso,Yso,Kso,ks,aae,Zso,elo,rP,olo,rlo,tP,tlo,alo,nlo,Ss,nae,slo,llo,aP,ilo,dlo,nP,clo,flo,mlo,Yg,glo,Kg,pA,hlo,sae,plo,vIe,vi,Zg,lae,uA,ulo,iae,_lo,FIe,Ao,_A,blo,bA,vlo,sP,Flo,Tlo,Mlo,vA,Elo,dae,Clo,wlo,Alo,Qe,FA,ylo,cae,Llo,xlo,wa,$lo,fae,klo,Slo,mae,Rlo,Blo,gae,Plo,Ilo,qlo,oe,eh,hae,Nlo,jlo,lP,Dlo,Glo,Olo,oh,pae,Vlo,Xlo,iP,zlo,Qlo,Wlo,rh,uae,Hlo,Ulo,dP,Jlo,Ylo,Klo,th,_ae,Zlo,eio,cP,oio,rio,tio,ah,bae,aio,nio,fP,sio,lio,iio,nh,vae,dio,cio,mP,fio,mio,gio,sh,Fae,hio,pio,gP,uio,_io,bio,lh,Tae,vio,Fio,hP,Tio,Mio,Eio,ih,Mae,Cio,wio,pP,Aio,yio,Lio,dh,Eae,xio,$io,uP,kio,Sio,Rio,ch,Cae,Bio,Pio,_P,Iio,qio,Nio,fh,wae,jio,Dio,bP,Gio,Oio,Vio,mh,Aae,Xio,zio,vP,Qio,Wio,Hio,gh,yae,Uio,Jio,FP,Yio,Kio,Zio,hh,Lae,edo,odo,TP,rdo,tdo,ado,ph,xae,ndo,sdo,MP,ldo,ido,ddo,uh,$ae,cdo,fdo,EP,mdo,gdo,hdo,_h,kae,pdo,udo,CP,_do,bdo,vdo,bh,Sae,Fdo,Tdo,wP,Mdo,Edo,Cdo,vh,Rae,wdo,Ado,AP,ydo,Ldo,xdo,Fh,Bae,$do,kdo,yP,Sdo,Rdo,Bdo,Th,Pae,Pdo,Ido,LP,qdo,Ndo,jdo,Mh,Iae,Ddo,Gdo,xP,Odo,Vdo,Xdo,Eh,qae,zdo,Qdo,$P,Wdo,Hdo,Udo,Ch,Nae,Jdo,Ydo,kP,Kdo,Zdo,eco,wh,oco,Ah,rco,yh,TA,tco,jae,aco,TIe,Fi,Lh,Dae,MA,nco,Gae,sco,MIe,yo,EA,lco,CA,ico,SP,dco,cco,fco,wA,mco,Oae,gco,hco,pco,We,AA,uco,Vae,_co,bco,Ti,vco,Xae,Fco,Tco,zae,Mco,Eco,Cco,be,xh,Qae,wco,Aco,RP,yco,Lco,xco,$h,Wae,$co,kco,Hae,Sco,Rco,Bco,kh,Uae,Pco,Ico,BP,qco,Nco,jco,Sh,Jae,Dco,Gco,PP,Oco,Vco,Xco,Rh,Yae,zco,Qco,IP,Wco,Hco,Uco,Bh,Kae,Jco,Yco,qP,Kco,Zco,efo,Ph,Zae,ofo,rfo,NP,tfo,afo,nfo,Ih,ene,sfo,lfo,jP,ifo,dfo,cfo,qh,one,ffo,mfo,DP,gfo,hfo,pfo,Nh,rne,ufo,_fo,GP,bfo,vfo,Ffo,jh,tne,Tfo,Mfo,OP,Efo,Cfo,wfo,Dh,ane,Afo,yfo,VP,Lfo,xfo,$fo,Gh,nne,kfo,Sfo,XP,Rfo,Bfo,Pfo,Oh,sne,Ifo,qfo,zP,Nfo,jfo,Dfo,Vh,lne,Gfo,Ofo,QP,Vfo,Xfo,zfo,Xh,Qfo,zh,Wfo,Qh,yA,Hfo,ine,Ufo,EIe,Mi,Wh,dne,LA,Jfo,cne,Yfo,CIe,Lo,xA,Kfo,Ei,Zfo,WP,emo,omo,HP,rmo,tmo,amo,$A,nmo,fne,smo,lmo,imo,ot,kA,dmo,mne,cmo,fmo,Ci,mmo,gne,gmo,hmo,UP,pmo,umo,_mo,Hh,bmo,He,SA,vmo,hne,Fmo,Tmo,Aa,Mmo,pne,Emo,Cmo,une,wmo,Amo,_ne,ymo,Lmo,xmo,x,Uh,bne,$mo,kmo,JP,Smo,Rmo,Bmo,Jh,vne,Pmo,Imo,YP,qmo,Nmo,jmo,Yh,Fne,Dmo,Gmo,KP,Omo,Vmo,Xmo,Kh,Tne,zmo,Qmo,ZP,Wmo,Hmo,Umo,Zh,Mne,Jmo,Ymo,eI,Kmo,Zmo,ego,ep,Ene,ogo,rgo,oI,tgo,ago,ngo,op,Cne,sgo,lgo,rI,igo,dgo,cgo,rp,wne,fgo,mgo,tI,ggo,hgo,pgo,tp,Ane,ugo,_go,aI,bgo,vgo,Fgo,ap,yne,Tgo,Mgo,nI,Ego,Cgo,wgo,np,Lne,Ago,ygo,sI,Lgo,xgo,$go,sp,xne,kgo,Sgo,lI,Rgo,Bgo,Pgo,lp,$ne,Igo,qgo,iI,Ngo,jgo,Dgo,ip,kne,Ggo,Ogo,dI,Vgo,Xgo,zgo,dp,Sne,Qgo,Wgo,cI,Hgo,Ugo,Jgo,cp,Rne,Ygo,Kgo,fI,Zgo,eho,oho,fp,Bne,rho,tho,mI,aho,nho,sho,mp,Pne,lho,iho,gI,dho,cho,fho,gp,Ine,mho,gho,hI,hho,pho,uho,hp,qne,_ho,bho,pI,vho,Fho,Tho,pp,Nne,Mho,Eho,uI,Cho,who,Aho,up,jne,yho,Lho,_I,xho,$ho,kho,_p,Dne,Sho,Rho,bI,Bho,Pho,Iho,bp,Gne,qho,Nho,vI,jho,Dho,Gho,vp,One,Oho,Vho,FI,Xho,zho,Qho,Fp,Vne,Who,Hho,TI,Uho,Jho,Yho,Tp,Xne,Kho,Zho,MI,epo,opo,rpo,Mp,zne,tpo,apo,EI,npo,spo,lpo,Ep,Qne,ipo,dpo,CI,cpo,fpo,mpo,Cp,Wne,gpo,hpo,wI,ppo,upo,_po,wp,Hne,bpo,vpo,AI,Fpo,Tpo,Mpo,Ap,Une,Epo,Cpo,yI,wpo,Apo,ypo,Rs,Jne,Lpo,xpo,LI,$po,kpo,xI,Spo,Rpo,Bpo,yp,Yne,Ppo,Ipo,$I,qpo,Npo,jpo,Lp,Kne,Dpo,Gpo,kI,Opo,Vpo,Xpo,xp,Zne,zpo,Qpo,SI,Wpo,Hpo,Upo,$p,ese,Jpo,Ypo,RI,Kpo,Zpo,euo,kp,ose,ouo,ruo,BI,tuo,auo,nuo,Sp,rse,suo,luo,PI,iuo,duo,cuo,Rp,tse,fuo,muo,II,guo,huo,puo,Bp,ase,uuo,_uo,qI,buo,vuo,Fuo,Pp,nse,Tuo,Muo,NI,Euo,Cuo,wuo,Ip,sse,Auo,yuo,jI,Luo,xuo,$uo,qp,lse,kuo,Suo,DI,Ruo,Buo,Puo,Np,ise,Iuo,quo,GI,Nuo,juo,Duo,jp,dse,Guo,Ouo,OI,Vuo,Xuo,zuo,Dp,cse,Quo,Wuo,VI,Huo,Uuo,Juo,Gp,fse,Yuo,Kuo,XI,Zuo,e_o,o_o,Op,mse,r_o,t_o,zI,a_o,n_o,s_o,Vp,gse,l_o,i_o,QI,d_o,c_o,f_o,Xp,hse,m_o,g_o,WI,h_o,p_o,u_o,zp,pse,__o,b_o,HI,v_o,F_o,T_o,Qp,use,M_o,E_o,UI,C_o,w_o,A_o,Wp,_se,y_o,L_o,JI,x_o,$_o,k_o,Hp,bse,S_o,R_o,YI,B_o,P_o,I_o,Up,vse,q_o,N_o,KI,j_o,D_o,G_o,Jp,Fse,O_o,V_o,ZI,X_o,z_o,Q_o,Yp,Tse,W_o,H_o,eq,U_o,J_o,Y_o,Kp,Mse,K_o,Z_o,oq,e2o,o2o,r2o,Zp,Ese,t2o,a2o,rq,n2o,s2o,l2o,eu,Cse,i2o,d2o,tq,c2o,f2o,m2o,ou,wse,g2o,h2o,aq,p2o,u2o,_2o,ru,Ase,b2o,v2o,nq,F2o,T2o,M2o,tu,yse,E2o,C2o,sq,w2o,A2o,y2o,au,Lse,L2o,x2o,lq,$2o,k2o,S2o,nu,xse,R2o,B2o,iq,P2o,I2o,q2o,su,$se,N2o,j2o,dq,D2o,G2o,O2o,lu,kse,V2o,X2o,cq,z2o,Q2o,W2o,iu,Sse,H2o,U2o,fq,J2o,Y2o,K2o,du,Rse,Z2o,e1o,mq,o1o,r1o,t1o,cu,Bse,a1o,n1o,gq,s1o,l1o,i1o,fu,Pse,d1o,c1o,hq,f1o,m1o,g1o,mu,Ise,h1o,p1o,pq,u1o,_1o,b1o,gu,qse,v1o,F1o,uq,T1o,M1o,E1o,hu,Nse,C1o,w1o,_q,A1o,y1o,L1o,pu,jse,x1o,$1o,bq,k1o,S1o,R1o,uu,Dse,B1o,P1o,vq,I1o,q1o,N1o,_u,Gse,j1o,D1o,Fq,G1o,O1o,V1o,bu,Ose,X1o,z1o,Tq,Q1o,W1o,H1o,vu,Vse,U1o,J1o,Mq,Y1o,K1o,Z1o,Fu,Xse,ebo,obo,Eq,rbo,tbo,abo,Tu,zse,nbo,sbo,Cq,lbo,ibo,dbo,Mu,Qse,cbo,fbo,wq,mbo,gbo,hbo,Eu,Wse,pbo,ubo,Aq,_bo,bbo,vbo,Cu,Hse,Fbo,Tbo,yq,Mbo,Ebo,Cbo,wu,Use,wbo,Abo,Lq,ybo,Lbo,xbo,Au,Jse,$bo,kbo,xq,Sbo,Rbo,Bbo,yu,Yse,Pbo,Ibo,$q,qbo,Nbo,jbo,Lu,Kse,Dbo,Gbo,kq,Obo,Vbo,Xbo,xu,Zse,zbo,Qbo,Sq,Wbo,Hbo,Ubo,$u,ele,Jbo,Ybo,Rq,Kbo,Zbo,evo,ku,ole,ovo,rvo,Bq,tvo,avo,nvo,Su,rle,svo,lvo,Pq,ivo,dvo,cvo,Ru,tle,fvo,mvo,Iq,gvo,hvo,pvo,Bu,ale,uvo,_vo,qq,bvo,vvo,Fvo,Pu,nle,Tvo,Mvo,Nq,Evo,Cvo,wvo,Iu,sle,Avo,yvo,jq,Lvo,xvo,$vo,qu,lle,kvo,Svo,Dq,Rvo,Bvo,Pvo,Nu,Ivo,ile,qvo,Nvo,dle,jvo,Dvo,ju,wIe,wi,Du,cle,RA,Gvo,fle,Ovo,AIe,xo,BA,Vvo,Ai,Xvo,Gq,zvo,Qvo,Oq,Wvo,Hvo,Uvo,PA,Jvo,mle,Yvo,Kvo,Zvo,rt,IA,eFo,gle,oFo,rFo,yi,tFo,hle,aFo,nFo,Vq,sFo,lFo,iFo,Gu,dFo,Ue,qA,cFo,ple,fFo,mFo,ya,gFo,ule,hFo,pFo,_le,uFo,_Fo,ble,bFo,vFo,FFo,G,Ou,vle,TFo,MFo,Xq,EFo,CFo,wFo,Vu,Fle,AFo,yFo,zq,LFo,xFo,$Fo,Xu,Tle,kFo,SFo,Qq,RFo,BFo,PFo,zu,Mle,IFo,qFo,Wq,NFo,jFo,DFo,Qu,Ele,GFo,OFo,Hq,VFo,XFo,zFo,Wu,Cle,QFo,WFo,Uq,HFo,UFo,JFo,Hu,wle,YFo,KFo,Jq,ZFo,e0o,o0o,Uu,Ale,r0o,t0o,Yq,a0o,n0o,s0o,Ju,yle,l0o,i0o,Kq,d0o,c0o,f0o,Yu,Lle,m0o,g0o,Zq,h0o,p0o,u0o,Ku,xle,_0o,b0o,eN,v0o,F0o,T0o,Zu,$le,M0o,E0o,oN,C0o,w0o,A0o,e_,kle,y0o,L0o,rN,x0o,$0o,k0o,o_,Sle,S0o,R0o,tN,B0o,P0o,I0o,r_,Rle,q0o,N0o,aN,j0o,D0o,G0o,t_,Ble,O0o,V0o,nN,X0o,z0o,Q0o,a_,Ple,W0o,H0o,sN,U0o,J0o,Y0o,n_,Ile,K0o,Z0o,lN,eTo,oTo,rTo,s_,qle,tTo,aTo,iN,nTo,sTo,lTo,l_,Nle,iTo,dTo,dN,cTo,fTo,mTo,i_,jle,gTo,hTo,cN,pTo,uTo,_To,d_,Dle,bTo,vTo,fN,FTo,TTo,MTo,c_,Gle,ETo,CTo,mN,wTo,ATo,yTo,f_,Ole,LTo,xTo,gN,$To,kTo,STo,m_,Vle,RTo,BTo,hN,PTo,ITo,qTo,g_,Xle,NTo,jTo,pN,DTo,GTo,OTo,h_,zle,VTo,XTo,uN,zTo,QTo,WTo,p_,Qle,HTo,UTo,_N,JTo,YTo,KTo,u_,Wle,ZTo,e7o,bN,o7o,r7o,t7o,__,Hle,a7o,n7o,vN,s7o,l7o,i7o,b_,Ule,d7o,c7o,FN,f7o,m7o,g7o,v_,Jle,h7o,p7o,TN,u7o,_7o,b7o,F_,Yle,v7o,F7o,MN,T7o,M7o,E7o,T_,Kle,C7o,w7o,EN,A7o,y7o,L7o,M_,Zle,x7o,$7o,CN,k7o,S7o,R7o,E_,eie,B7o,P7o,wN,I7o,q7o,N7o,C_,oie,j7o,D7o,AN,G7o,O7o,V7o,w_,rie,X7o,z7o,yN,Q7o,W7o,H7o,A_,tie,U7o,J7o,LN,Y7o,K7o,Z7o,y_,aie,eMo,oMo,xN,rMo,tMo,aMo,L_,nie,nMo,sMo,$N,lMo,iMo,dMo,x_,cMo,sie,fMo,mMo,lie,gMo,hMo,$_,yIe,Li,k_,iie,NA,pMo,die,uMo,LIe,$o,jA,_Mo,xi,bMo,kN,vMo,FMo,SN,TMo,MMo,EMo,DA,CMo,cie,wMo,AMo,yMo,tt,GA,LMo,fie,xMo,$Mo,$i,kMo,mie,SMo,RMo,RN,BMo,PMo,IMo,S_,qMo,Je,OA,NMo,gie,jMo,DMo,La,GMo,hie,OMo,VMo,pie,XMo,zMo,uie,QMo,WMo,HMo,z,R_,_ie,UMo,JMo,BN,YMo,KMo,ZMo,B_,bie,e4o,o4o,PN,r4o,t4o,a4o,P_,vie,n4o,s4o,IN,l4o,i4o,d4o,I_,Fie,c4o,f4o,qN,m4o,g4o,h4o,q_,Tie,p4o,u4o,NN,_4o,b4o,v4o,N_,Mie,F4o,T4o,jN,M4o,E4o,C4o,j_,Eie,w4o,A4o,DN,y4o,L4o,x4o,D_,Cie,$4o,k4o,GN,S4o,R4o,B4o,G_,wie,P4o,I4o,ON,q4o,N4o,j4o,O_,Aie,D4o,G4o,VN,O4o,V4o,X4o,V_,yie,z4o,Q4o,XN,W4o,H4o,U4o,X_,Lie,J4o,Y4o,zN,K4o,Z4o,eEo,z_,xie,oEo,rEo,QN,tEo,aEo,nEo,Q_,$ie,sEo,lEo,WN,iEo,dEo,cEo,W_,kie,fEo,mEo,HN,gEo,hEo,pEo,H_,Sie,uEo,_Eo,UN,bEo,vEo,FEo,U_,Rie,TEo,MEo,JN,EEo,CEo,wEo,J_,Bie,AEo,yEo,YN,LEo,xEo,$Eo,Y_,Pie,kEo,SEo,KN,REo,BEo,PEo,K_,Iie,IEo,qEo,ZN,NEo,jEo,DEo,Z_,qie,GEo,OEo,ej,VEo,XEo,zEo,e2,Nie,QEo,WEo,oj,HEo,UEo,JEo,o2,jie,YEo,KEo,rj,ZEo,e5o,o5o,r2,Die,r5o,t5o,tj,a5o,n5o,s5o,t2,Gie,l5o,i5o,aj,d5o,c5o,f5o,a2,Oie,m5o,g5o,nj,h5o,p5o,u5o,n2,Vie,_5o,b5o,sj,v5o,F5o,T5o,s2,Xie,M5o,E5o,lj,C5o,w5o,A5o,l2,zie,y5o,L5o,ij,x5o,$5o,k5o,i2,Qie,S5o,R5o,dj,B5o,P5o,I5o,d2,Wie,q5o,N5o,cj,j5o,D5o,G5o,c2,Hie,O5o,V5o,fj,X5o,z5o,Q5o,f2,Uie,W5o,H5o,mj,U5o,J5o,Y5o,m2,Jie,K5o,Z5o,gj,eCo,oCo,rCo,g2,Yie,tCo,aCo,hj,nCo,sCo,lCo,h2,Kie,iCo,dCo,pj,cCo,fCo,mCo,p2,Zie,gCo,hCo,uj,pCo,uCo,_Co,u2,bCo,ede,vCo,FCo,ode,TCo,MCo,_2,xIe,ki,b2,rde,VA,ECo,tde,CCo,$Ie,ko,XA,wCo,Si,ACo,_j,yCo,LCo,bj,xCo,$Co,kCo,zA,SCo,ade,RCo,BCo,PCo,at,QA,ICo,nde,qCo,NCo,Ri,jCo,sde,DCo,GCo,vj,OCo,VCo,XCo,v2,zCo,Ye,WA,QCo,lde,WCo,HCo,xa,UCo,ide,JCo,YCo,dde,KCo,ZCo,cde,e3o,o3o,r3o,W,F2,fde,t3o,a3o,Fj,n3o,s3o,l3o,T2,mde,i3o,d3o,Tj,c3o,f3o,m3o,M2,gde,g3o,h3o,Mj,p3o,u3o,_3o,E2,hde,b3o,v3o,Ej,F3o,T3o,M3o,C2,pde,E3o,C3o,Cj,w3o,A3o,y3o,w2,ude,L3o,x3o,wj,$3o,k3o,S3o,A2,_de,R3o,B3o,Aj,P3o,I3o,q3o,y2,bde,N3o,j3o,yj,D3o,G3o,O3o,L2,vde,V3o,X3o,Lj,z3o,Q3o,W3o,x2,Fde,H3o,U3o,xj,J3o,Y3o,K3o,$2,Tde,Z3o,ewo,$j,owo,rwo,two,k2,Mde,awo,nwo,kj,swo,lwo,iwo,S2,Ede,dwo,cwo,Sj,fwo,mwo,gwo,R2,Cde,hwo,pwo,Rj,uwo,_wo,bwo,B2,wde,vwo,Fwo,Bj,Two,Mwo,Ewo,P2,Ade,Cwo,wwo,Pj,Awo,ywo,Lwo,I2,yde,xwo,$wo,Ij,kwo,Swo,Rwo,q2,Lde,Bwo,Pwo,qj,Iwo,qwo,Nwo,N2,xde,jwo,Dwo,Nj,Gwo,Owo,Vwo,j2,$de,Xwo,zwo,jj,Qwo,Wwo,Hwo,D2,kde,Uwo,Jwo,Dj,Ywo,Kwo,Zwo,G2,Sde,e6o,o6o,Gj,r6o,t6o,a6o,O2,Rde,n6o,s6o,Oj,l6o,i6o,d6o,V2,Bde,c6o,f6o,Vj,m6o,g6o,h6o,X2,Pde,p6o,u6o,Xj,_6o,b6o,v6o,z2,Ide,F6o,T6o,zj,M6o,E6o,C6o,Q2,qde,w6o,A6o,Qj,y6o,L6o,x6o,W2,Nde,$6o,k6o,Wj,S6o,R6o,B6o,H2,jde,P6o,I6o,Hj,q6o,N6o,j6o,U2,Dde,D6o,G6o,Uj,O6o,V6o,X6o,J2,Gde,z6o,Q6o,Ode,W6o,H6o,U6o,Y2,Vde,J6o,Y6o,Jj,K6o,Z6o,eAo,K2,Xde,oAo,rAo,Yj,tAo,aAo,nAo,Z2,zde,sAo,lAo,Kj,iAo,dAo,cAo,e1,Qde,fAo,mAo,Zj,gAo,hAo,pAo,o1,uAo,Wde,_Ao,bAo,Hde,vAo,FAo,r1,kIe,Bi,t1,Ude,HA,TAo,Jde,MAo,SIe,So,UA,EAo,Pi,CAo,eD,wAo,AAo,oD,yAo,LAo,xAo,JA,$Ao,Yde,kAo,SAo,RAo,nt,YA,BAo,Kde,PAo,IAo,Ii,qAo,Zde,NAo,jAo,rD,DAo,GAo,OAo,a1,VAo,Ke,KA,XAo,ece,zAo,QAo,$a,WAo,oce,HAo,UAo,rce,JAo,YAo,tce,KAo,ZAo,eyo,he,n1,ace,oyo,ryo,tD,tyo,ayo,nyo,s1,nce,syo,lyo,aD,iyo,dyo,cyo,l1,sce,fyo,myo,nD,gyo,hyo,pyo,i1,lce,uyo,_yo,sD,byo,vyo,Fyo,d1,ice,Tyo,Myo,lD,Eyo,Cyo,wyo,c1,dce,Ayo,yyo,iD,Lyo,xyo,$yo,f1,cce,kyo,Syo,dD,Ryo,Byo,Pyo,m1,fce,Iyo,qyo,cD,Nyo,jyo,Dyo,g1,mce,Gyo,Oyo,fD,Vyo,Xyo,zyo,h1,gce,Qyo,Wyo,mD,Hyo,Uyo,Jyo,p1,hce,Yyo,Kyo,gD,Zyo,eLo,oLo,u1,pce,rLo,tLo,hD,aLo,nLo,sLo,_1,uce,lLo,iLo,pD,dLo,cLo,fLo,b1,_ce,mLo,gLo,uD,hLo,pLo,uLo,v1,bce,_Lo,bLo,_D,vLo,FLo,TLo,F1,vce,MLo,ELo,bD,CLo,wLo,ALo,T1,Fce,yLo,LLo,vD,xLo,$Lo,kLo,M1,SLo,Tce,RLo,BLo,Mce,PLo,ILo,E1,RIe,qi,C1,Ece,ZA,qLo,Cce,NLo,BIe,Ro,ey,jLo,Ni,DLo,FD,GLo,OLo,TD,VLo,XLo,zLo,oy,QLo,wce,WLo,HLo,ULo,st,ry,JLo,Ace,YLo,KLo,ji,ZLo,yce,e8o,o8o,MD,r8o,t8o,a8o,w1,n8o,Ze,ty,s8o,Lce,l8o,i8o,ka,d8o,xce,c8o,f8o,$ce,m8o,g8o,kce,h8o,p8o,u8o,q,A1,Sce,_8o,b8o,ED,v8o,F8o,T8o,y1,Rce,M8o,E8o,CD,C8o,w8o,A8o,L1,Bce,y8o,L8o,wD,x8o,$8o,k8o,x1,Pce,S8o,R8o,AD,B8o,P8o,I8o,$1,Ice,q8o,N8o,yD,j8o,D8o,G8o,k1,qce,O8o,V8o,LD,X8o,z8o,Q8o,S1,Nce,W8o,H8o,xD,U8o,J8o,Y8o,R1,jce,K8o,Z8o,$D,exo,oxo,rxo,B1,Dce,txo,axo,kD,nxo,sxo,lxo,P1,Gce,ixo,dxo,SD,cxo,fxo,mxo,I1,Oce,gxo,hxo,RD,pxo,uxo,_xo,q1,Vce,bxo,vxo,BD,Fxo,Txo,Mxo,N1,Xce,Exo,Cxo,PD,wxo,Axo,yxo,j1,zce,Lxo,xxo,ID,$xo,kxo,Sxo,D1,Qce,Rxo,Bxo,qD,Pxo,Ixo,qxo,G1,Wce,Nxo,jxo,ND,Dxo,Gxo,Oxo,O1,Hce,Vxo,Xxo,jD,zxo,Qxo,Wxo,V1,Uce,Hxo,Uxo,DD,Jxo,Yxo,Kxo,X1,Jce,Zxo,e9o,GD,o9o,r9o,t9o,z1,Yce,a9o,n9o,OD,s9o,l9o,i9o,Q1,Kce,d9o,c9o,VD,f9o,m9o,g9o,W1,Zce,h9o,p9o,XD,u9o,_9o,b9o,H1,efe,v9o,F9o,zD,T9o,M9o,E9o,U1,ofe,C9o,w9o,QD,A9o,y9o,L9o,J1,rfe,x9o,$9o,WD,k9o,S9o,R9o,Y1,tfe,B9o,P9o,HD,I9o,q9o,N9o,K1,afe,j9o,D9o,UD,G9o,O9o,V9o,Z1,nfe,X9o,z9o,JD,Q9o,W9o,H9o,eb,sfe,U9o,J9o,YD,Y9o,K9o,Z9o,ob,lfe,e$o,o$o,KD,r$o,t$o,a$o,rb,ife,n$o,s$o,ZD,l$o,i$o,d$o,tb,dfe,c$o,f$o,eG,m$o,g$o,h$o,ab,cfe,p$o,u$o,oG,_$o,b$o,v$o,nb,ffe,F$o,T$o,rG,M$o,E$o,C$o,sb,mfe,w$o,A$o,tG,y$o,L$o,x$o,lb,gfe,$$o,k$o,aG,S$o,R$o,B$o,ib,hfe,P$o,I$o,nG,q$o,N$o,j$o,db,pfe,D$o,G$o,sG,O$o,V$o,X$o,cb,ufe,z$o,Q$o,lG,W$o,H$o,U$o,fb,_fe,J$o,Y$o,iG,K$o,Z$o,eko,mb,bfe,oko,rko,dG,tko,ako,nko,gb,vfe,sko,lko,cG,iko,dko,cko,hb,Ffe,fko,mko,fG,gko,hko,pko,pb,Tfe,uko,_ko,mG,bko,vko,Fko,ub,Mfe,Tko,Mko,gG,Eko,Cko,wko,_b,Efe,Ako,yko,hG,Lko,xko,$ko,bb,Cfe,kko,Sko,pG,Rko,Bko,Pko,vb,Iko,wfe,qko,Nko,Afe,jko,Dko,Fb,PIe,Di,Tb,yfe,ay,Gko,Lfe,Oko,IIe,Bo,ny,Vko,Gi,Xko,uG,zko,Qko,_G,Wko,Hko,Uko,sy,Jko,xfe,Yko,Kko,Zko,lt,ly,eSo,$fe,oSo,rSo,Oi,tSo,kfe,aSo,nSo,bG,sSo,lSo,iSo,Mb,dSo,eo,iy,cSo,Sfe,fSo,mSo,Sa,gSo,Rfe,hSo,pSo,Bfe,uSo,_So,Pfe,bSo,vSo,FSo,Y,Eb,Ife,TSo,MSo,vG,ESo,CSo,wSo,Cb,qfe,ASo,ySo,FG,LSo,xSo,$So,wb,Nfe,kSo,SSo,TG,RSo,BSo,PSo,Ab,jfe,ISo,qSo,MG,NSo,jSo,DSo,yb,Dfe,GSo,OSo,EG,VSo,XSo,zSo,Lb,Gfe,QSo,WSo,CG,HSo,USo,JSo,xb,Ofe,YSo,KSo,wG,ZSo,eRo,oRo,$b,Vfe,rRo,tRo,AG,aRo,nRo,sRo,kb,Xfe,lRo,iRo,yG,dRo,cRo,fRo,Sb,zfe,mRo,gRo,LG,hRo,pRo,uRo,Rb,Qfe,_Ro,bRo,xG,vRo,FRo,TRo,Bb,Wfe,MRo,ERo,$G,CRo,wRo,ARo,Pb,Hfe,yRo,LRo,kG,xRo,$Ro,kRo,Ib,Ufe,SRo,RRo,SG,BRo,PRo,IRo,qb,Jfe,qRo,NRo,RG,jRo,DRo,GRo,Nb,Yfe,ORo,VRo,BG,XRo,zRo,QRo,jb,Kfe,WRo,HRo,PG,URo,JRo,YRo,Db,Zfe,KRo,ZRo,IG,eBo,oBo,rBo,Gb,eme,tBo,aBo,qG,nBo,sBo,lBo,Ob,ome,iBo,dBo,NG,cBo,fBo,mBo,Vb,rme,gBo,hBo,jG,pBo,uBo,_Bo,Xb,tme,bBo,vBo,DG,FBo,TBo,MBo,zb,ame,EBo,CBo,GG,wBo,ABo,yBo,Qb,nme,LBo,xBo,OG,$Bo,kBo,SBo,Wb,sme,RBo,BBo,VG,PBo,IBo,qBo,Hb,lme,NBo,jBo,XG,DBo,GBo,OBo,Ub,ime,VBo,XBo,zG,zBo,QBo,WBo,Jb,dme,HBo,UBo,QG,JBo,YBo,KBo,Yb,cme,ZBo,ePo,WG,oPo,rPo,tPo,Kb,aPo,fme,nPo,sPo,mme,lPo,iPo,Zb,qIe,Vi,ev,gme,dy,dPo,hme,cPo,NIe,Po,cy,fPo,Xi,mPo,HG,gPo,hPo,UG,pPo,uPo,_Po,fy,bPo,pme,vPo,FPo,TPo,it,my,MPo,ume,EPo,CPo,zi,wPo,_me,APo,yPo,JG,LPo,xPo,$Po,ov,kPo,oo,gy,SPo,bme,RPo,BPo,Ra,PPo,vme,IPo,qPo,Fme,NPo,jPo,Tme,DPo,GPo,OPo,Yr,rv,Mme,VPo,XPo,YG,zPo,QPo,WPo,tv,Eme,HPo,UPo,KG,JPo,YPo,KPo,av,Cme,ZPo,eIo,ZG,oIo,rIo,tIo,nv,wme,aIo,nIo,eO,sIo,lIo,iIo,sv,Ame,dIo,cIo,oO,fIo,mIo,gIo,lv,hIo,yme,pIo,uIo,Lme,_Io,bIo,iv,jIe,Qi,dv,xme,hy,vIo,$me,FIo,DIe,Io,py,TIo,Wi,MIo,rO,EIo,CIo,tO,wIo,AIo,yIo,uy,LIo,kme,xIo,$Io,kIo,dt,_y,SIo,Sme,RIo,BIo,Hi,PIo,Rme,IIo,qIo,aO,NIo,jIo,DIo,cv,GIo,ro,by,OIo,Bme,VIo,XIo,Ba,zIo,Pme,QIo,WIo,Ime,HIo,UIo,qme,JIo,YIo,KIo,U,fv,Nme,ZIo,eqo,nO,oqo,rqo,tqo,mv,jme,aqo,nqo,sO,sqo,lqo,iqo,gv,Dme,dqo,cqo,lO,fqo,mqo,gqo,hv,Gme,hqo,pqo,iO,uqo,_qo,bqo,pv,Ome,vqo,Fqo,dO,Tqo,Mqo,Eqo,uv,Vme,Cqo,wqo,cO,Aqo,yqo,Lqo,_v,Xme,xqo,$qo,fO,kqo,Sqo,Rqo,bv,zme,Bqo,Pqo,mO,Iqo,qqo,Nqo,vv,Qme,jqo,Dqo,gO,Gqo,Oqo,Vqo,Fv,Wme,Xqo,zqo,hO,Qqo,Wqo,Hqo,Tv,Hme,Uqo,Jqo,pO,Yqo,Kqo,Zqo,Mv,Ume,eNo,oNo,uO,rNo,tNo,aNo,Ev,Jme,nNo,sNo,_O,lNo,iNo,dNo,Cv,Yme,cNo,fNo,bO,mNo,gNo,hNo,wv,Kme,pNo,uNo,vO,_No,bNo,vNo,Av,Zme,FNo,TNo,FO,MNo,ENo,CNo,yv,ege,wNo,ANo,TO,yNo,LNo,xNo,Lv,oge,$No,kNo,MO,SNo,RNo,BNo,xv,rge,PNo,INo,EO,qNo,NNo,jNo,$v,tge,DNo,GNo,CO,ONo,VNo,XNo,kv,age,zNo,QNo,wO,WNo,HNo,UNo,Sv,nge,JNo,YNo,AO,KNo,ZNo,ejo,Rv,sge,ojo,rjo,yO,tjo,ajo,njo,Bv,lge,sjo,ljo,LO,ijo,djo,cjo,Pv,ige,fjo,mjo,xO,gjo,hjo,pjo,Iv,dge,ujo,_jo,$O,bjo,vjo,Fjo,qv,cge,Tjo,Mjo,kO,Ejo,Cjo,wjo,Nv,fge,Ajo,yjo,SO,Ljo,xjo,$jo,jv,mge,kjo,Sjo,RO,Rjo,Bjo,Pjo,Dv,gge,Ijo,qjo,BO,Njo,jjo,Djo,Gv,hge,Gjo,Ojo,PO,Vjo,Xjo,zjo,Ov,pge,Qjo,Wjo,IO,Hjo,Ujo,Jjo,Vv,uge,Yjo,Kjo,qO,Zjo,eDo,oDo,Xv,rDo,_ge,tDo,aDo,bge,nDo,sDo,zv,GIe,Ui,Qv,vge,vy,lDo,Fge,iDo,OIe,qo,Fy,dDo,Ji,cDo,NO,fDo,mDo,jO,gDo,hDo,pDo,Ty,uDo,Tge,_Do,bDo,vDo,ct,My,FDo,Mge,TDo,MDo,Yi,EDo,Ege,CDo,wDo,DO,ADo,yDo,LDo,Wv,xDo,to,Ey,$Do,Cge,kDo,SDo,Pa,RDo,wge,BDo,PDo,Age,IDo,qDo,yge,NDo,jDo,DDo,V,Hv,Lge,GDo,ODo,GO,VDo,XDo,zDo,Uv,xge,QDo,WDo,OO,HDo,UDo,JDo,Jv,$ge,YDo,KDo,VO,ZDo,eGo,oGo,Yv,kge,rGo,tGo,XO,aGo,nGo,sGo,Kv,Sge,lGo,iGo,zO,dGo,cGo,fGo,Zv,Rge,mGo,gGo,QO,hGo,pGo,uGo,eF,Bge,_Go,bGo,WO,vGo,FGo,TGo,oF,Pge,MGo,EGo,HO,CGo,wGo,AGo,rF,Ige,yGo,LGo,UO,xGo,$Go,kGo,tF,qge,SGo,RGo,JO,BGo,PGo,IGo,aF,Nge,qGo,NGo,YO,jGo,DGo,GGo,nF,jge,OGo,VGo,KO,XGo,zGo,QGo,sF,Dge,WGo,HGo,ZO,UGo,JGo,YGo,lF,Gge,KGo,ZGo,eV,eOo,oOo,rOo,iF,Oge,tOo,aOo,oV,nOo,sOo,lOo,dF,Vge,iOo,dOo,rV,cOo,fOo,mOo,cF,Xge,gOo,hOo,tV,pOo,uOo,_Oo,fF,zge,bOo,vOo,aV,FOo,TOo,MOo,mF,Qge,EOo,COo,nV,wOo,AOo,yOo,gF,Wge,LOo,xOo,sV,$Oo,kOo,SOo,hF,Hge,ROo,BOo,lV,POo,IOo,qOo,pF,Uge,NOo,jOo,iV,DOo,GOo,OOo,uF,Jge,VOo,XOo,dV,zOo,QOo,WOo,_F,Yge,HOo,UOo,cV,JOo,YOo,KOo,bF,Kge,ZOo,eVo,fV,oVo,rVo,tVo,vF,Zge,aVo,nVo,mV,sVo,lVo,iVo,FF,ehe,dVo,cVo,gV,fVo,mVo,gVo,TF,ohe,hVo,pVo,hV,uVo,_Vo,bVo,MF,rhe,vVo,FVo,pV,TVo,MVo,EVo,EF,the,CVo,wVo,uV,AVo,yVo,LVo,CF,ahe,xVo,$Vo,_V,kVo,SVo,RVo,wF,nhe,BVo,PVo,bV,IVo,qVo,NVo,AF,she,jVo,DVo,vV,GVo,OVo,VVo,yF,lhe,XVo,zVo,FV,QVo,WVo,HVo,LF,ihe,UVo,JVo,TV,YVo,KVo,ZVo,xF,dhe,eXo,oXo,MV,rXo,tXo,aXo,$F,che,nXo,sXo,EV,lXo,iXo,dXo,kF,fhe,cXo,fXo,CV,mXo,gXo,hXo,SF,mhe,pXo,uXo,wV,_Xo,bXo,vXo,RF,FXo,ghe,TXo,MXo,hhe,EXo,CXo,BF,VIe,Ki,PF,phe,Cy,wXo,uhe,AXo,XIe,No,wy,yXo,Zi,LXo,AV,xXo,$Xo,yV,kXo,SXo,RXo,Ay,BXo,_he,PXo,IXo,qXo,ft,yy,NXo,bhe,jXo,DXo,ed,GXo,vhe,OXo,VXo,LV,XXo,zXo,QXo,IF,WXo,ao,Ly,HXo,Fhe,UXo,JXo,Ia,YXo,The,KXo,ZXo,Mhe,ezo,ozo,Ehe,rzo,tzo,azo,Che,qF,whe,nzo,szo,xV,lzo,izo,dzo,NF,czo,Ahe,fzo,mzo,yhe,gzo,hzo,jF,zIe,od,DF,Lhe,xy,pzo,xhe,uzo,QIe,jo,$y,_zo,rd,bzo,$V,vzo,Fzo,kV,Tzo,Mzo,Ezo,ky,Czo,$he,wzo,Azo,yzo,mt,Sy,Lzo,khe,xzo,$zo,td,kzo,She,Szo,Rzo,SV,Bzo,Pzo,Izo,GF,qzo,no,Ry,Nzo,Rhe,jzo,Dzo,qa,Gzo,Bhe,Ozo,Vzo,Phe,Xzo,zzo,Ihe,Qzo,Wzo,Hzo,Fe,OF,qhe,Uzo,Jzo,RV,Yzo,Kzo,Zzo,VF,Nhe,eQo,oQo,BV,rQo,tQo,aQo,XF,jhe,nQo,sQo,PV,lQo,iQo,dQo,Bs,Dhe,cQo,fQo,IV,mQo,gQo,qV,hQo,pQo,uQo,zF,Ghe,_Qo,bQo,NV,vQo,FQo,TQo,gt,Ohe,MQo,EQo,jV,CQo,wQo,DV,AQo,yQo,GV,LQo,xQo,$Qo,QF,Vhe,kQo,SQo,OV,RQo,BQo,PQo,WF,Xhe,IQo,qQo,VV,NQo,jQo,DQo,HF,zhe,GQo,OQo,XV,VQo,XQo,zQo,UF,Qhe,QQo,WQo,zV,HQo,UQo,JQo,JF,Whe,YQo,KQo,QV,ZQo,eWo,oWo,YF,Hhe,rWo,tWo,WV,aWo,nWo,sWo,KF,Uhe,lWo,iWo,HV,dWo,cWo,fWo,ZF,mWo,Jhe,gWo,hWo,Yhe,pWo,uWo,e0,WIe,ad,o0,Khe,By,_Wo,Zhe,bWo,HIe,Do,Py,vWo,nd,FWo,UV,TWo,MWo,JV,EWo,CWo,wWo,Iy,AWo,epe,yWo,LWo,xWo,ht,qy,$Wo,ope,kWo,SWo,sd,RWo,rpe,BWo,PWo,YV,IWo,qWo,NWo,r0,jWo,so,Ny,DWo,tpe,GWo,OWo,Na,VWo,ape,XWo,zWo,npe,QWo,WWo,spe,HWo,UWo,JWo,lpe,t0,ipe,YWo,KWo,KV,ZWo,eHo,oHo,a0,rHo,dpe,tHo,aHo,cpe,nHo,sHo,n0,UIe,ld,s0,fpe,jy,lHo,mpe,iHo,JIe,Go,Dy,dHo,id,cHo,ZV,fHo,mHo,eX,gHo,hHo,pHo,Gy,uHo,gpe,_Ho,bHo,vHo,pt,Oy,FHo,hpe,THo,MHo,dd,EHo,ppe,CHo,wHo,oX,AHo,yHo,LHo,l0,xHo,lo,Vy,$Ho,upe,kHo,SHo,ja,RHo,_pe,BHo,PHo,bpe,IHo,qHo,vpe,NHo,jHo,DHo,Ne,i0,Fpe,GHo,OHo,rX,VHo,XHo,zHo,d0,Tpe,QHo,WHo,tX,HHo,UHo,JHo,c0,Mpe,YHo,KHo,aX,ZHo,eUo,oUo,f0,Epe,rUo,tUo,nX,aUo,nUo,sUo,m0,Cpe,lUo,iUo,sX,dUo,cUo,fUo,g0,wpe,mUo,gUo,lX,hUo,pUo,uUo,h0,Ape,_Uo,bUo,iX,vUo,FUo,TUo,p0,ype,MUo,EUo,dX,CUo,wUo,AUo,u0,yUo,Lpe,LUo,xUo,xpe,$Uo,kUo,_0,YIe,cd,b0,$pe,Xy,SUo,kpe,RUo,KIe,Oo,zy,BUo,fd,PUo,cX,IUo,qUo,fX,NUo,jUo,DUo,Qy,GUo,Spe,OUo,VUo,XUo,ut,Wy,zUo,Rpe,QUo,WUo,md,HUo,Bpe,UUo,JUo,mX,YUo,KUo,ZUo,v0,eJo,io,Hy,oJo,Ppe,rJo,tJo,Da,aJo,Ipe,nJo,sJo,qpe,lJo,iJo,Npe,dJo,cJo,fJo,Ga,F0,jpe,mJo,gJo,gX,hJo,pJo,uJo,T0,Dpe,_Jo,bJo,hX,vJo,FJo,TJo,M0,Gpe,MJo,EJo,pX,CJo,wJo,AJo,E0,Ope,yJo,LJo,uX,xJo,$Jo,kJo,C0,SJo,Vpe,RJo,BJo,Xpe,PJo,IJo,w0,ZIe,gd,A0,zpe,Uy,qJo,Qpe,NJo,eqe,Vo,Jy,jJo,hd,DJo,_X,GJo,OJo,bX,VJo,XJo,zJo,Yy,QJo,Wpe,WJo,HJo,UJo,_t,Ky,JJo,Hpe,YJo,KJo,pd,ZJo,Upe,eYo,oYo,vX,rYo,tYo,aYo,y0,nYo,co,Zy,sYo,Jpe,lYo,iYo,Oa,dYo,Ype,cYo,fYo,Kpe,mYo,gYo,Zpe,hYo,pYo,uYo,je,L0,eue,_Yo,bYo,FX,vYo,FYo,TYo,x0,oue,MYo,EYo,TX,CYo,wYo,AYo,$0,rue,yYo,LYo,MX,xYo,$Yo,kYo,k0,tue,SYo,RYo,EX,BYo,PYo,IYo,S0,aue,qYo,NYo,CX,jYo,DYo,GYo,R0,nue,OYo,VYo,wX,XYo,zYo,QYo,B0,sue,WYo,HYo,AX,UYo,JYo,YYo,P0,lue,KYo,ZYo,yX,eKo,oKo,rKo,I0,tKo,iue,aKo,nKo,due,sKo,lKo,q0,oqe,ud,N0,cue,eL,iKo,fue,dKo,rqe,Xo,oL,cKo,_d,fKo,LX,mKo,gKo,xX,hKo,pKo,uKo,rL,_Ko,mue,bKo,vKo,FKo,bt,tL,TKo,gue,MKo,EKo,bd,CKo,hue,wKo,AKo,$X,yKo,LKo,xKo,j0,$Ko,fo,aL,kKo,pue,SKo,RKo,Va,BKo,uue,PKo,IKo,_ue,qKo,NKo,bue,jKo,DKo,GKo,nL,D0,vue,OKo,VKo,kX,XKo,zKo,QKo,G0,Fue,WKo,HKo,SX,UKo,JKo,YKo,O0,KKo,Tue,ZKo,eZo,Mue,oZo,rZo,V0,tqe,vd,X0,Eue,sL,tZo,Cue,aZo,aqe,zo,lL,nZo,Fd,sZo,RX,lZo,iZo,BX,dZo,cZo,fZo,iL,mZo,wue,gZo,hZo,pZo,vt,dL,uZo,Aue,_Zo,bZo,Td,vZo,yue,FZo,TZo,PX,MZo,EZo,CZo,z0,wZo,mo,cL,AZo,Lue,yZo,LZo,Xa,xZo,xue,$Zo,kZo,$ue,SZo,RZo,kue,BZo,PZo,IZo,za,Q0,Sue,qZo,NZo,IX,jZo,DZo,GZo,W0,Rue,OZo,VZo,qX,XZo,zZo,QZo,H0,Bue,WZo,HZo,NX,UZo,JZo,YZo,U0,Pue,KZo,ZZo,jX,eer,oer,rer,J0,ter,Iue,aer,ner,que,ser,ler,Y0,nqe,Md,K0,Nue,fL,ier,jue,der,sqe,Qo,mL,cer,Ed,fer,DX,mer,ger,GX,her,per,uer,gL,_er,Due,ber,ver,Fer,Ft,hL,Ter,Gue,Mer,Eer,Cd,Cer,Oue,wer,Aer,OX,yer,Ler,xer,Z0,$er,go,pL,ker,Vue,Ser,Rer,Qa,Ber,Xue,Per,Ier,zue,qer,Ner,Que,jer,Der,Ger,wd,eT,Wue,Oer,Ver,VX,Xer,zer,Qer,oT,Hue,Wer,Her,XX,Uer,Jer,Yer,rT,Uue,Ker,Zer,zX,eor,oor,ror,tT,tor,Jue,aor,nor,Yue,sor,lor,aT,lqe,Ad,nT,Kue,uL,ior,Zue,dor,iqe,Wo,_L,cor,yd,mor,QX,gor,hor,WX,por,uor,_or,bL,bor,e_e,vor,For,Tor,Tt,vL,Mor,o_e,Eor,Cor,Ld,wor,r_e,Aor,yor,HX,Lor,xor,$or,sT,kor,ho,FL,Sor,t_e,Ror,Bor,Wa,Por,a_e,Ior,qor,n_e,Nor,jor,s_e,Dor,Gor,Oor,TL,lT,l_e,Vor,Xor,UX,zor,Qor,Wor,iT,i_e,Hor,Uor,JX,Jor,Yor,Kor,dT,Zor,d_e,err,orr,c_e,rrr,trr,cT,dqe,xd,fT,f_e,ML,arr,m_e,nrr,cqe,Ho,EL,srr,$d,lrr,YX,irr,drr,KX,crr,frr,mrr,CL,grr,g_e,hrr,prr,urr,Mt,wL,_rr,h_e,brr,vrr,kd,Frr,p_e,Trr,Mrr,ZX,Err,Crr,wrr,mT,Arr,po,AL,yrr,u_e,Lrr,xrr,Ha,$rr,__e,krr,Srr,b_e,Rrr,Brr,v_e,Prr,Irr,qrr,F_e,gT,T_e,Nrr,jrr,ez,Drr,Grr,Orr,hT,Vrr,M_e,Xrr,zrr,E_e,Qrr,Wrr,pT,fqe,Sd,uT,C_e,yL,Hrr,w_e,Urr,mqe,Uo,LL,Jrr,Rd,Yrr,oz,Krr,Zrr,rz,etr,otr,rtr,xL,ttr,A_e,atr,ntr,str,Et,$L,ltr,y_e,itr,dtr,Bd,ctr,L_e,ftr,mtr,tz,gtr,htr,ptr,_T,utr,uo,kL,_tr,x_e,btr,vtr,Ua,Ftr,$_e,Ttr,Mtr,k_e,Etr,Ctr,S_e,wtr,Atr,ytr,Ja,bT,R_e,Ltr,xtr,az,$tr,ktr,Str,vT,B_e,Rtr,Btr,nz,Ptr,Itr,qtr,FT,P_e,Ntr,jtr,sz,Dtr,Gtr,Otr,TT,I_e,Vtr,Xtr,lz,ztr,Qtr,Wtr,MT,Htr,q_e,Utr,Jtr,N_e,Ytr,Ktr,ET,gqe,Pd,CT,j_e,SL,Ztr,D_e,ear,hqe,Jo,RL,oar,Id,rar,iz,tar,aar,dz,nar,sar,lar,BL,iar,G_e,dar,car,far,Ct,PL,mar,O_e,gar,har,qd,par,V_e,uar,_ar,cz,bar,Far,Tar,wT,Mar,_o,IL,Ear,X_e,Car,war,Ya,Aar,z_e,yar,Lar,Q_e,xar,$ar,W_e,kar,Sar,Rar,H_e,AT,U_e,Bar,Par,fz,Iar,qar,Nar,yT,jar,J_e,Dar,Gar,Y_e,Oar,Var,LT,pqe,Nd,xT,K_e,qL,Xar,Z_e,zar,uqe,Yo,NL,Qar,jd,War,mz,Har,Uar,gz,Jar,Yar,Kar,jL,Zar,e2e,enr,onr,rnr,wt,DL,tnr,o2e,anr,nnr,Dd,snr,r2e,lnr,inr,hz,dnr,cnr,fnr,$T,mnr,wr,GL,gnr,t2e,hnr,pnr,Ka,unr,a2e,_nr,bnr,n2e,vnr,Fnr,s2e,Tnr,Mnr,Enr,j,kT,l2e,Cnr,wnr,pz,Anr,ynr,Lnr,ST,i2e,xnr,$nr,uz,knr,Snr,Rnr,RT,d2e,Bnr,Pnr,_z,Inr,qnr,Nnr,BT,c2e,jnr,Dnr,bz,Gnr,Onr,Vnr,PT,f2e,Xnr,znr,vz,Qnr,Wnr,Hnr,IT,m2e,Unr,Jnr,Fz,Ynr,Knr,Znr,qT,g2e,esr,osr,Tz,rsr,tsr,asr,NT,h2e,nsr,ssr,Mz,lsr,isr,dsr,jT,p2e,csr,fsr,Ez,msr,gsr,hsr,DT,u2e,psr,usr,Cz,_sr,bsr,vsr,GT,_2e,Fsr,Tsr,wz,Msr,Esr,Csr,OT,b2e,wsr,Asr,Az,ysr,Lsr,xsr,VT,v2e,$sr,ksr,yz,Ssr,Rsr,Bsr,XT,F2e,Psr,Isr,Lz,qsr,Nsr,jsr,zT,T2e,Dsr,Gsr,xz,Osr,Vsr,Xsr,QT,M2e,zsr,Qsr,$z,Wsr,Hsr,Usr,WT,E2e,Jsr,Ysr,kz,Ksr,Zsr,elr,Ps,C2e,olr,rlr,Sz,tlr,alr,Rz,nlr,slr,llr,HT,w2e,ilr,dlr,Bz,clr,flr,mlr,UT,A2e,glr,hlr,Pz,plr,ulr,_lr,JT,y2e,blr,vlr,Iz,Flr,Tlr,Mlr,YT,L2e,Elr,Clr,qz,wlr,Alr,ylr,KT,x2e,Llr,xlr,Nz,$lr,klr,Slr,ZT,$2e,Rlr,Blr,jz,Plr,Ilr,qlr,e7,k2e,Nlr,jlr,Dz,Dlr,Glr,Olr,o7,S2e,Vlr,Xlr,Gz,zlr,Qlr,Wlr,r7,R2e,Hlr,Ulr,Oz,Jlr,Ylr,Klr,t7,B2e,Zlr,eir,Vz,oir,rir,tir,a7,P2e,air,nir,Xz,sir,lir,iir,n7,I2e,dir,cir,zz,fir,mir,gir,s7,q2e,hir,pir,Qz,uir,_ir,bir,l7,N2e,vir,Fir,Wz,Tir,Mir,Eir,i7,j2e,Cir,wir,Hz,Air,yir,Lir,d7,D2e,xir,$ir,Uz,kir,Sir,Rir,c7,G2e,Bir,Pir,Jz,Iir,qir,Nir,f7,O2e,jir,Dir,Yz,Gir,Oir,Vir,m7,V2e,Xir,zir,Kz,Qir,Wir,Hir,g7,X2e,Uir,Jir,Zz,Yir,Kir,Zir,h7,z2e,edr,odr,eQ,rdr,tdr,adr,p7,Q2e,ndr,sdr,oQ,ldr,idr,ddr,u7,W2e,cdr,fdr,rQ,mdr,gdr,hdr,_7,H2e,pdr,udr,tQ,_dr,bdr,vdr,b7,U2e,Fdr,Tdr,aQ,Mdr,Edr,Cdr,v7,J2e,wdr,Adr,nQ,ydr,Ldr,xdr,F7,Y2e,$dr,kdr,sQ,Sdr,Rdr,Bdr,T7,_qe,Gd,M7,K2e,OL,Pdr,Z2e,Idr,bqe,Ko,VL,qdr,Od,Ndr,lQ,jdr,Ddr,iQ,Gdr,Odr,Vdr,XL,Xdr,e1e,zdr,Qdr,Wdr,At,zL,Hdr,o1e,Udr,Jdr,Vd,Ydr,r1e,Kdr,Zdr,dQ,ecr,ocr,rcr,E7,tcr,Ar,QL,acr,t1e,ncr,scr,Za,lcr,a1e,icr,dcr,n1e,ccr,fcr,s1e,mcr,gcr,hcr,se,C7,l1e,pcr,ucr,cQ,_cr,bcr,vcr,w7,i1e,Fcr,Tcr,fQ,Mcr,Ecr,Ccr,A7,d1e,wcr,Acr,mQ,ycr,Lcr,xcr,y7,c1e,$cr,kcr,gQ,Scr,Rcr,Bcr,L7,f1e,Pcr,Icr,hQ,qcr,Ncr,jcr,x7,m1e,Dcr,Gcr,pQ,Ocr,Vcr,Xcr,$7,g1e,zcr,Qcr,uQ,Wcr,Hcr,Ucr,k7,h1e,Jcr,Ycr,_Q,Kcr,Zcr,efr,S7,p1e,ofr,rfr,bQ,tfr,afr,nfr,R7,u1e,sfr,lfr,vQ,ifr,dfr,cfr,B7,_1e,ffr,mfr,FQ,gfr,hfr,pfr,P7,b1e,ufr,_fr,TQ,bfr,vfr,Ffr,I7,v1e,Tfr,Mfr,MQ,Efr,Cfr,wfr,q7,F1e,Afr,yfr,EQ,Lfr,xfr,$fr,N7,T1e,kfr,Sfr,CQ,Rfr,Bfr,Pfr,j7,M1e,Ifr,qfr,wQ,Nfr,jfr,Dfr,D7,E1e,Gfr,Ofr,AQ,Vfr,Xfr,zfr,G7,C1e,Qfr,Wfr,yQ,Hfr,Ufr,Jfr,O7,w1e,Yfr,Kfr,LQ,Zfr,emr,omr,V7,A1e,rmr,tmr,xQ,amr,nmr,smr,X7,y1e,lmr,imr,$Q,dmr,cmr,fmr,z7,L1e,mmr,gmr,kQ,hmr,pmr,umr,Q7,x1e,_mr,bmr,SQ,vmr,Fmr,Tmr,W7,vqe,Xd,H7,$1e,WL,Mmr,k1e,Emr,Fqe,Zo,HL,Cmr,zd,wmr,RQ,Amr,ymr,BQ,Lmr,xmr,$mr,UL,kmr,S1e,Smr,Rmr,Bmr,yt,JL,Pmr,R1e,Imr,qmr,Qd,Nmr,B1e,jmr,Dmr,PQ,Gmr,Omr,Vmr,U7,Xmr,yr,YL,zmr,P1e,Qmr,Wmr,en,Hmr,I1e,Umr,Jmr,q1e,Ymr,Kmr,N1e,Zmr,egr,ogr,Te,J7,j1e,rgr,tgr,IQ,agr,ngr,sgr,Y7,D1e,lgr,igr,qQ,dgr,cgr,fgr,K7,G1e,mgr,ggr,NQ,hgr,pgr,ugr,Z7,O1e,_gr,bgr,jQ,vgr,Fgr,Tgr,eM,V1e,Mgr,Egr,DQ,Cgr,wgr,Agr,oM,X1e,ygr,Lgr,GQ,xgr,$gr,kgr,rM,z1e,Sgr,Rgr,OQ,Bgr,Pgr,Igr,tM,Q1e,qgr,Ngr,VQ,jgr,Dgr,Ggr,aM,W1e,Ogr,Vgr,XQ,Xgr,zgr,Qgr,nM,H1e,Wgr,Hgr,zQ,Ugr,Jgr,Ygr,sM,U1e,Kgr,Zgr,QQ,ehr,ohr,rhr,lM,J1e,thr,ahr,WQ,nhr,shr,lhr,iM,Tqe,Wd,dM,Y1e,KL,ihr,K1e,dhr,Mqe,er,ZL,chr,Hd,fhr,HQ,mhr,ghr,UQ,hhr,phr,uhr,e8,_hr,Z1e,bhr,vhr,Fhr,Lt,o8,Thr,ebe,Mhr,Ehr,Ud,Chr,obe,whr,Ahr,JQ,yhr,Lhr,xhr,cM,$hr,Lr,r8,khr,rbe,Shr,Rhr,on,Bhr,tbe,Phr,Ihr,abe,qhr,Nhr,nbe,jhr,Dhr,Ghr,Jd,fM,sbe,Ohr,Vhr,YQ,Xhr,zhr,Qhr,mM,lbe,Whr,Hhr,KQ,Uhr,Jhr,Yhr,gM,ibe,Khr,Zhr,ZQ,epr,opr,rpr,hM,Eqe,Yd,pM,dbe,t8,tpr,cbe,apr,Cqe,or,a8,npr,Kd,spr,eW,lpr,ipr,oW,dpr,cpr,fpr,n8,mpr,fbe,gpr,hpr,ppr,xt,s8,upr,mbe,_pr,bpr,Zd,vpr,gbe,Fpr,Tpr,rW,Mpr,Epr,Cpr,uM,wpr,xr,l8,Apr,hbe,ypr,Lpr,rn,xpr,pbe,$pr,kpr,ube,Spr,Rpr,_be,Bpr,Ppr,Ipr,ie,_M,bbe,qpr,Npr,tW,jpr,Dpr,Gpr,bM,vbe,Opr,Vpr,aW,Xpr,zpr,Qpr,vM,Fbe,Wpr,Hpr,nW,Upr,Jpr,Ypr,FM,Tbe,Kpr,Zpr,sW,eur,our,rur,TM,Mbe,tur,aur,lW,nur,sur,lur,MM,Ebe,iur,dur,iW,cur,fur,mur,EM,Cbe,gur,hur,dW,pur,uur,_ur,CM,wbe,bur,vur,cW,Fur,Tur,Mur,wM,Abe,Eur,Cur,fW,wur,Aur,yur,AM,ybe,Lur,xur,mW,$ur,kur,Sur,yM,Lbe,Rur,Bur,gW,Pur,Iur,qur,LM,xbe,Nur,jur,hW,Dur,Gur,Our,xM,$be,Vur,Xur,pW,zur,Qur,Wur,$M,kbe,Hur,Uur,uW,Jur,Yur,Kur,kM,Sbe,Zur,e_r,_W,o_r,r_r,t_r,SM,Rbe,a_r,n_r,bW,s_r,l_r,i_r,RM,Bbe,d_r,c_r,vW,f_r,m_r,g_r,BM,Pbe,h_r,p_r,FW,u_r,__r,b_r,PM,Ibe,v_r,F_r,TW,T_r,M_r,E_r,IM,qbe,C_r,w_r,MW,A_r,y_r,L_r,qM,wqe,ec,NM,Nbe,i8,x_r,jbe,$_r,Aqe,rr,d8,k_r,oc,S_r,EW,R_r,B_r,CW,P_r,I_r,q_r,c8,N_r,Dbe,j_r,D_r,G_r,$t,f8,O_r,Gbe,V_r,X_r,rc,z_r,Obe,Q_r,W_r,wW,H_r,U_r,J_r,jM,Y_r,$r,m8,K_r,Vbe,Z_r,e2r,tn,o2r,Xbe,r2r,t2r,zbe,a2r,n2r,Qbe,s2r,l2r,i2r,ye,DM,Wbe,d2r,c2r,AW,f2r,m2r,g2r,GM,Hbe,h2r,p2r,yW,u2r,_2r,b2r,OM,Ube,v2r,F2r,LW,T2r,M2r,E2r,VM,Jbe,C2r,w2r,xW,A2r,y2r,L2r,XM,Ybe,x2r,$2r,$W,k2r,S2r,R2r,zM,Kbe,B2r,P2r,kW,I2r,q2r,N2r,QM,Zbe,j2r,D2r,SW,G2r,O2r,V2r,WM,eve,X2r,z2r,RW,Q2r,W2r,H2r,HM,ove,U2r,J2r,BW,Y2r,K2r,Z2r,UM,rve,e1r,o1r,PW,r1r,t1r,a1r,JM,yqe,tc,YM,tve,g8,n1r,ave,s1r,Lqe,tr,h8,l1r,ac,i1r,IW,d1r,c1r,qW,f1r,m1r,g1r,p8,h1r,nve,p1r,u1r,_1r,kt,u8,b1r,sve,v1r,F1r,nc,T1r,lve,M1r,E1r,NW,C1r,w1r,A1r,KM,y1r,kr,_8,L1r,ive,x1r,$1r,an,k1r,dve,S1r,R1r,cve,B1r,P1r,fve,I1r,q1r,N1r,Z,ZM,mve,j1r,D1r,jW,G1r,O1r,V1r,e4,gve,X1r,z1r,DW,Q1r,W1r,H1r,o4,hve,U1r,J1r,GW,Y1r,K1r,Z1r,r4,pve,ebr,obr,OW,rbr,tbr,abr,t4,uve,nbr,sbr,VW,lbr,ibr,dbr,a4,_ve,cbr,fbr,XW,mbr,gbr,hbr,n4,bve,pbr,ubr,zW,_br,bbr,vbr,s4,vve,Fbr,Tbr,QW,Mbr,Ebr,Cbr,l4,Fve,wbr,Abr,WW,ybr,Lbr,xbr,i4,Tve,$br,kbr,HW,Sbr,Rbr,Bbr,d4,Mve,Pbr,Ibr,UW,qbr,Nbr,jbr,c4,Eve,Dbr,Gbr,JW,Obr,Vbr,Xbr,f4,Cve,zbr,Qbr,YW,Wbr,Hbr,Ubr,m4,wve,Jbr,Ybr,KW,Kbr,Zbr,evr,g4,Ave,ovr,rvr,ZW,tvr,avr,nvr,h4,yve,svr,lvr,eH,ivr,dvr,cvr,p4,Lve,fvr,mvr,oH,gvr,hvr,pvr,u4,xve,uvr,_vr,rH,bvr,vvr,Fvr,_4,$ve,Tvr,Mvr,tH,Evr,Cvr,wvr,b4,kve,Avr,yvr,aH,Lvr,xvr,$vr,v4,Sve,kvr,Svr,nH,Rvr,Bvr,Pvr,F4,Rve,Ivr,qvr,sH,Nvr,jvr,Dvr,T4,Bve,Gvr,Ovr,lH,Vvr,Xvr,zvr,M4,Pve,Qvr,Wvr,iH,Hvr,Uvr,Jvr,E4,Ive,Yvr,Kvr,dH,Zvr,eFr,oFr,C4,qve,rFr,tFr,cH,aFr,nFr,sFr,w4,xqe,sc,A4,Nve,b8,lFr,jve,iFr,$qe,ar,v8,dFr,lc,cFr,fH,fFr,mFr,mH,gFr,hFr,pFr,F8,uFr,Dve,_Fr,bFr,vFr,St,T8,FFr,Gve,TFr,MFr,ic,EFr,Ove,CFr,wFr,gH,AFr,yFr,LFr,y4,xFr,Sr,M8,$Fr,Vve,kFr,SFr,nn,RFr,Xve,BFr,PFr,zve,IFr,qFr,Qve,NFr,jFr,DFr,pe,L4,Wve,GFr,OFr,hH,VFr,XFr,zFr,x4,Hve,QFr,WFr,pH,HFr,UFr,JFr,$4,Uve,YFr,KFr,uH,ZFr,e0r,o0r,k4,Jve,r0r,t0r,_H,a0r,n0r,s0r,S4,Yve,l0r,i0r,bH,d0r,c0r,f0r,R4,Kve,m0r,g0r,vH,h0r,p0r,u0r,B4,Zve,_0r,b0r,FH,v0r,F0r,T0r,P4,eFe,M0r,E0r,TH,C0r,w0r,A0r,I4,oFe,y0r,L0r,MH,x0r,$0r,k0r,q4,rFe,S0r,R0r,EH,B0r,P0r,I0r,N4,tFe,q0r,N0r,CH,j0r,D0r,G0r,j4,aFe,O0r,V0r,wH,X0r,z0r,Q0r,D4,nFe,W0r,H0r,AH,U0r,J0r,Y0r,G4,sFe,K0r,Z0r,yH,eTr,oTr,rTr,O4,lFe,tTr,aTr,LH,nTr,sTr,lTr,V4,iFe,iTr,dTr,xH,cTr,fTr,mTr,X4,dFe,gTr,hTr,$H,pTr,uTr,_Tr,z4,kqe,dc,Q4,cFe,E8,bTr,fFe,vTr,Sqe,nr,C8,FTr,cc,TTr,kH,MTr,ETr,SH,CTr,wTr,ATr,w8,yTr,mFe,LTr,xTr,$Tr,Rt,A8,kTr,gFe,STr,RTr,fc,BTr,hFe,PTr,ITr,RH,qTr,NTr,jTr,W4,DTr,Rr,y8,GTr,pFe,OTr,VTr,sn,XTr,uFe,zTr,QTr,_Fe,WTr,HTr,bFe,UTr,JTr,YTr,L8,H4,vFe,KTr,ZTr,BH,e7r,o7r,r7r,U4,FFe,t7r,a7r,PH,n7r,s7r,l7r,J4,Rqe,mc,Y4,TFe,x8,i7r,MFe,d7r,Bqe,sr,$8,c7r,gc,f7r,IH,m7r,g7r,qH,h7r,p7r,u7r,k8,_7r,EFe,b7r,v7r,F7r,Bt,S8,T7r,CFe,M7r,E7r,hc,C7r,wFe,w7r,A7r,NH,y7r,L7r,x7r,K4,$7r,Br,R8,k7r,AFe,S7r,R7r,ln,B7r,yFe,P7r,I7r,LFe,q7r,N7r,xFe,j7r,D7r,G7r,$Fe,Z4,kFe,O7r,V7r,jH,X7r,z7r,Q7r,eE,Pqe,pc,oE,SFe,B8,W7r,RFe,H7r,Iqe,lr,P8,U7r,uc,J7r,DH,Y7r,K7r,GH,Z7r,eMr,oMr,I8,rMr,BFe,tMr,aMr,nMr,Pt,q8,sMr,PFe,lMr,iMr,_c,dMr,IFe,cMr,fMr,OH,mMr,gMr,hMr,rE,pMr,Pr,N8,uMr,qFe,_Mr,bMr,dn,vMr,NFe,FMr,TMr,jFe,MMr,EMr,DFe,CMr,wMr,AMr,de,tE,GFe,yMr,LMr,VH,xMr,$Mr,kMr,aE,OFe,SMr,RMr,XH,BMr,PMr,IMr,nE,VFe,qMr,NMr,zH,jMr,DMr,GMr,sE,XFe,OMr,VMr,QH,XMr,zMr,QMr,lE,zFe,WMr,HMr,WH,UMr,JMr,YMr,iE,QFe,KMr,ZMr,HH,e4r,o4r,r4r,dE,WFe,t4r,a4r,UH,n4r,s4r,l4r,cE,HFe,i4r,d4r,JH,c4r,f4r,m4r,fE,UFe,g4r,h4r,YH,p4r,u4r,_4r,mE,JFe,b4r,v4r,KH,F4r,T4r,M4r,gE,YFe,E4r,C4r,ZH,w4r,A4r,y4r,hE,KFe,L4r,x4r,eU,$4r,k4r,S4r,pE,ZFe,R4r,B4r,oU,P4r,I4r,q4r,uE,e0e,N4r,j4r,rU,D4r,G4r,O4r,_E,o0e,V4r,X4r,tU,z4r,Q4r,W4r,bE,r0e,H4r,U4r,aU,J4r,Y4r,K4r,vE,t0e,Z4r,eEr,nU,oEr,rEr,tEr,FE,a0e,aEr,nEr,sU,sEr,lEr,iEr,TE,n0e,dEr,cEr,lU,fEr,mEr,gEr,ME,s0e,hEr,pEr,iU,uEr,_Er,bEr,EE,qqe,bc,CE,l0e,j8,vEr,i0e,FEr,Nqe,ir,D8,TEr,vc,MEr,dU,EEr,CEr,cU,wEr,AEr,yEr,G8,LEr,d0e,xEr,$Er,kEr,It,O8,SEr,c0e,REr,BEr,Fc,PEr,f0e,IEr,qEr,fU,NEr,jEr,DEr,wE,GEr,Ir,V8,OEr,m0e,VEr,XEr,cn,zEr,g0e,QEr,WEr,h0e,HEr,UEr,p0e,JEr,YEr,KEr,ce,AE,u0e,ZEr,e5r,mU,o5r,r5r,t5r,yE,_0e,a5r,n5r,gU,s5r,l5r,i5r,LE,b0e,d5r,c5r,hU,f5r,m5r,g5r,xE,v0e,h5r,p5r,pU,u5r,_5r,b5r,$E,F0e,v5r,F5r,uU,T5r,M5r,E5r,kE,T0e,C5r,w5r,_U,A5r,y5r,L5r,SE,M0e,x5r,$5r,bU,k5r,S5r,R5r,RE,E0e,B5r,P5r,vU,I5r,q5r,N5r,BE,C0e,j5r,D5r,FU,G5r,O5r,V5r,PE,w0e,X5r,z5r,TU,Q5r,W5r,H5r,IE,A0e,U5r,J5r,MU,Y5r,K5r,Z5r,qE,y0e,eCr,oCr,EU,rCr,tCr,aCr,NE,L0e,nCr,sCr,CU,lCr,iCr,dCr,jE,x0e,cCr,fCr,wU,mCr,gCr,hCr,DE,$0e,pCr,uCr,AU,_Cr,bCr,vCr,GE,k0e,FCr,TCr,yU,MCr,ECr,CCr,OE,S0e,wCr,ACr,LU,yCr,LCr,xCr,VE,R0e,$Cr,kCr,xU,SCr,RCr,BCr,XE,B0e,PCr,ICr,$U,qCr,NCr,jCr,zE,P0e,DCr,GCr,kU,OCr,VCr,XCr,QE,jqe,Tc,WE,I0e,X8,zCr,q0e,QCr,Dqe,dr,z8,WCr,Mc,HCr,SU,UCr,JCr,RU,YCr,KCr,ZCr,Q8,e3r,N0e,o3r,r3r,t3r,qt,W8,a3r,j0e,n3r,s3r,Ec,l3r,D0e,i3r,d3r,BU,c3r,f3r,m3r,HE,g3r,qr,H8,h3r,G0e,p3r,u3r,fn,_3r,O0e,b3r,v3r,V0e,F3r,T3r,X0e,M3r,E3r,C3r,z0e,UE,Q0e,w3r,A3r,PU,y3r,L3r,x3r,JE,Gqe,Cc,YE,W0e,U8,$3r,H0e,k3r,Oqe,cr,J8,S3r,wc,R3r,IU,B3r,P3r,qU,I3r,q3r,N3r,Y8,j3r,U0e,D3r,G3r,O3r,Nt,K8,V3r,J0e,X3r,z3r,Ac,Q3r,Y0e,W3r,H3r,NU,U3r,J3r,Y3r,KE,K3r,Nr,Z8,Z3r,K0e,ewr,owr,mn,rwr,Z0e,twr,awr,eTe,nwr,swr,oTe,lwr,iwr,dwr,rTe,ZE,tTe,cwr,fwr,jU,mwr,gwr,hwr,e5,Vqe,yc,o5,aTe,ex,pwr,nTe,uwr,Xqe,fr,ox,_wr,Lc,bwr,DU,vwr,Fwr,GU,Twr,Mwr,Ewr,rx,Cwr,sTe,wwr,Awr,ywr,jt,tx,Lwr,lTe,xwr,$wr,xc,kwr,iTe,Swr,Rwr,OU,Bwr,Pwr,Iwr,r5,qwr,jr,ax,Nwr,dTe,jwr,Dwr,gn,Gwr,cTe,Owr,Vwr,fTe,Xwr,zwr,mTe,Qwr,Wwr,Hwr,re,t5,gTe,Uwr,Jwr,VU,Ywr,Kwr,Zwr,a5,hTe,e6r,o6r,XU,r6r,t6r,a6r,n5,pTe,n6r,s6r,zU,l6r,i6r,d6r,s5,uTe,c6r,f6r,QU,m6r,g6r,h6r,l5,_Te,p6r,u6r,WU,_6r,b6r,v6r,i5,bTe,F6r,T6r,HU,M6r,E6r,C6r,d5,vTe,w6r,A6r,UU,y6r,L6r,x6r,c5,FTe,$6r,k6r,JU,S6r,R6r,B6r,f5,TTe,P6r,I6r,YU,q6r,N6r,j6r,m5,MTe,D6r,G6r,KU,O6r,V6r,X6r,g5,ETe,z6r,Q6r,ZU,W6r,H6r,U6r,h5,CTe,J6r,Y6r,eJ,K6r,Z6r,eAr,p5,wTe,oAr,rAr,oJ,tAr,aAr,nAr,u5,ATe,sAr,lAr,rJ,iAr,dAr,cAr,_5,yTe,fAr,mAr,tJ,gAr,hAr,pAr,b5,LTe,uAr,_Ar,aJ,bAr,vAr,FAr,v5,xTe,TAr,MAr,nJ,EAr,CAr,wAr,F5,$Te,AAr,yAr,sJ,LAr,xAr,$Ar,T5,kTe,kAr,SAr,lJ,RAr,BAr,PAr,M5,STe,IAr,qAr,iJ,NAr,jAr,DAr,E5,RTe,GAr,OAr,dJ,VAr,XAr,zAr,C5,BTe,QAr,WAr,cJ,HAr,UAr,JAr,w5,PTe,YAr,KAr,fJ,ZAr,eyr,oyr,A5,ITe,ryr,tyr,mJ,ayr,nyr,syr,y5,qTe,lyr,iyr,gJ,dyr,cyr,fyr,L5,zqe,$c,x5,NTe,nx,myr,jTe,gyr,Qqe,mr,sx,hyr,kc,pyr,hJ,uyr,_yr,pJ,byr,vyr,Fyr,lx,Tyr,DTe,Myr,Eyr,Cyr,Dt,ix,wyr,GTe,Ayr,yyr,Sc,Lyr,OTe,xyr,$yr,uJ,kyr,Syr,Ryr,$5,Byr,Dr,dx,Pyr,VTe,Iyr,qyr,hn,Nyr,XTe,jyr,Dyr,zTe,Gyr,Oyr,QTe,Vyr,Xyr,zyr,ke,k5,WTe,Qyr,Wyr,_J,Hyr,Uyr,Jyr,S5,HTe,Yyr,Kyr,bJ,Zyr,eLr,oLr,R5,UTe,rLr,tLr,vJ,aLr,nLr,sLr,B5,JTe,lLr,iLr,FJ,dLr,cLr,fLr,P5,YTe,mLr,gLr,TJ,hLr,pLr,uLr,I5,KTe,_Lr,bLr,MJ,vLr,FLr,TLr,q5,ZTe,MLr,ELr,EJ,CLr,wLr,ALr,N5,e7e,yLr,LLr,CJ,xLr,$Lr,kLr,j5,o7e,SLr,RLr,wJ,BLr,PLr,ILr,D5,Wqe,Rc,G5,r7e,cx,qLr,t7e,NLr,Hqe,gr,fx,jLr,Bc,DLr,AJ,GLr,OLr,yJ,VLr,XLr,zLr,mx,QLr,a7e,WLr,HLr,ULr,Gt,gx,JLr,n7e,YLr,KLr,Pc,ZLr,s7e,e8r,o8r,LJ,r8r,t8r,a8r,O5,n8r,Gr,hx,s8r,l7e,l8r,i8r,pn,d8r,i7e,c8r,f8r,d7e,m8r,g8r,c7e,h8r,p8r,u8r,Me,V5,f7e,_8r,b8r,xJ,v8r,F8r,T8r,X5,m7e,M8r,E8r,$J,C8r,w8r,A8r,z5,g7e,y8r,L8r,kJ,x8r,$8r,k8r,Q5,h7e,S8r,R8r,SJ,B8r,P8r,I8r,W5,p7e,q8r,N8r,RJ,j8r,D8r,G8r,H5,u7e,O8r,V8r,BJ,X8r,z8r,Q8r,U5,_7e,W8r,H8r,PJ,U8r,J8r,Y8r,J5,b7e,K8r,Z8r,IJ,exr,oxr,rxr,Y5,v7e,txr,axr,qJ,nxr,sxr,lxr,K5,F7e,ixr,dxr,NJ,cxr,fxr,mxr,Z5,T7e,gxr,hxr,jJ,pxr,uxr,_xr,eC,M7e,bxr,vxr,DJ,Fxr,Txr,Mxr,oC,Uqe,Ic,rC,E7e,px,Exr,C7e,Cxr,Jqe,hr,ux,wxr,qc,Axr,GJ,yxr,Lxr,OJ,xxr,$xr,kxr,_x,Sxr,w7e,Rxr,Bxr,Pxr,Ot,bx,Ixr,A7e,qxr,Nxr,Nc,jxr,y7e,Dxr,Gxr,VJ,Oxr,Vxr,Xxr,tC,zxr,Or,vx,Qxr,L7e,Wxr,Hxr,un,Uxr,x7e,Jxr,Yxr,$7e,Kxr,Zxr,k7e,e9r,o9r,r9r,Le,aC,S7e,t9r,a9r,XJ,n9r,s9r,l9r,nC,R7e,i9r,d9r,zJ,c9r,f9r,m9r,sC,B7e,g9r,h9r,QJ,p9r,u9r,_9r,lC,P7e,b9r,v9r,WJ,F9r,T9r,M9r,iC,I7e,E9r,C9r,HJ,w9r,A9r,y9r,dC,q7e,L9r,x9r,UJ,$9r,k9r,S9r,cC,N7e,R9r,B9r,JJ,P9r,I9r,q9r,fC,j7e,N9r,j9r,YJ,D9r,G9r,O9r,mC,D7e,V9r,X9r,KJ,z9r,Q9r,W9r,gC,G7e,H9r,U9r,ZJ,J9r,Y9r,K9r,hC,Yqe,jc,pC,O7e,Fx,Z9r,V7e,e$r,Kqe,pr,Tx,o$r,Dc,r$r,eY,t$r,a$r,oY,n$r,s$r,l$r,Mx,i$r,X7e,d$r,c$r,f$r,Vt,Ex,m$r,z7e,g$r,h$r,Gc,p$r,Q7e,u$r,_$r,rY,b$r,v$r,F$r,uC,T$r,Vr,Cx,M$r,W7e,E$r,C$r,_n,w$r,H7e,A$r,y$r,U7e,L$r,x$r,J7e,$$r,k$r,S$r,Se,_C,Y7e,R$r,B$r,tY,P$r,I$r,q$r,bC,K7e,N$r,j$r,aY,D$r,G$r,O$r,vC,Z7e,V$r,X$r,nY,z$r,Q$r,W$r,FC,eMe,H$r,U$r,sY,J$r,Y$r,K$r,TC,oMe,Z$r,ekr,lY,okr,rkr,tkr,MC,rMe,akr,nkr,iY,skr,lkr,ikr,EC,tMe,dkr,ckr,dY,fkr,mkr,gkr,CC,aMe,hkr,pkr,cY,ukr,_kr,bkr,wC,nMe,vkr,Fkr,fY,Tkr,Mkr,Ekr,AC,Zqe,Oc,yC,sMe,wx,Ckr,lMe,wkr,eNe,ur,Ax,Akr,Vc,ykr,mY,Lkr,xkr,gY,$kr,kkr,Skr,yx,Rkr,iMe,Bkr,Pkr,Ikr,Xt,Lx,qkr,dMe,Nkr,jkr,Xc,Dkr,cMe,Gkr,Okr,hY,Vkr,Xkr,zkr,LC,Qkr,Xr,xx,Wkr,fMe,Hkr,Ukr,bn,Jkr,mMe,Ykr,Kkr,gMe,Zkr,eSr,hMe,oSr,rSr,tSr,xe,xC,pMe,aSr,nSr,pY,sSr,lSr,iSr,$C,uMe,dSr,cSr,uY,fSr,mSr,gSr,kC,_Me,hSr,pSr,_Y,uSr,_Sr,bSr,SC,bMe,vSr,FSr,bY,TSr,MSr,ESr,RC,vMe,CSr,wSr,vY,ASr,ySr,LSr,BC,FMe,xSr,$Sr,FY,kSr,SSr,RSr,PC,TMe,BSr,PSr,TY,ISr,qSr,NSr,IC,MMe,jSr,DSr,MY,GSr,OSr,VSr,qC,EMe,XSr,zSr,EY,QSr,WSr,HSr,NC,CMe,USr,JSr,CY,YSr,KSr,ZSr,jC,oNe,zc,DC,wMe,$x,eRr,AMe,oRr,rNe,_r,kx,rRr,Qc,tRr,wY,aRr,nRr,AY,sRr,lRr,iRr,Sx,dRr,yMe,cRr,fRr,mRr,zt,Rx,gRr,LMe,hRr,pRr,Wc,uRr,xMe,_Rr,bRr,yY,vRr,FRr,TRr,GC,MRr,zr,Bx,ERr,$Me,CRr,wRr,vn,ARr,kMe,yRr,LRr,SMe,xRr,$Rr,RMe,kRr,SRr,RRr,$e,OC,BMe,BRr,PRr,LY,IRr,qRr,NRr,VC,PMe,jRr,DRr,xY,GRr,ORr,VRr,XC,IMe,XRr,zRr,$Y,QRr,WRr,HRr,zC,qMe,URr,JRr,kY,YRr,KRr,ZRr,QC,NMe,eBr,oBr,SY,rBr,tBr,aBr,WC,jMe,nBr,sBr,RY,lBr,iBr,dBr,HC,DMe,cBr,fBr,BY,mBr,gBr,hBr,UC,GMe,pBr,uBr,PY,_Br,bBr,vBr,JC,OMe,FBr,TBr,IY,MBr,EBr,CBr,YC,VMe,wBr,ABr,qY,yBr,LBr,xBr,KC,tNe,Hc,ZC,XMe,Px,$Br,zMe,kBr,aNe,br,Ix,SBr,Uc,RBr,NY,BBr,PBr,jY,IBr,qBr,NBr,qx,jBr,QMe,DBr,GBr,OBr,Qt,Nx,VBr,WMe,XBr,zBr,Jc,QBr,HMe,WBr,HBr,DY,UBr,JBr,YBr,e3,KBr,Qr,jx,ZBr,UMe,ePr,oPr,Fn,rPr,JMe,tPr,aPr,YMe,nPr,sPr,KMe,lPr,iPr,dPr,De,o3,ZMe,cPr,fPr,GY,mPr,gPr,hPr,r3,e4e,pPr,uPr,OY,_Pr,bPr,vPr,t3,o4e,FPr,TPr,VY,MPr,EPr,CPr,a3,r4e,wPr,APr,XY,yPr,LPr,xPr,n3,t4e,$Pr,kPr,zY,SPr,RPr,BPr,s3,a4e,PPr,IPr,QY,qPr,NPr,jPr,l3,n4e,DPr,GPr,WY,OPr,VPr,XPr,i3,s4e,zPr,QPr,HY,WPr,HPr,UPr,d3,nNe,Yc,c3,l4e,Dx,JPr,i4e,YPr,sNe,vr,Gx,KPr,Kc,ZPr,UY,eIr,oIr,JY,rIr,tIr,aIr,Ox,nIr,d4e,sIr,lIr,iIr,Wt,Vx,dIr,c4e,cIr,fIr,Zc,mIr,f4e,gIr,hIr,YY,pIr,uIr,_Ir,f3,bIr,Wr,Xx,vIr,m4e,FIr,TIr,Tn,MIr,g4e,EIr,CIr,h4e,wIr,AIr,p4e,yIr,LIr,xIr,Ge,m3,u4e,$Ir,kIr,KY,SIr,RIr,BIr,g3,_4e,PIr,IIr,ZY,qIr,NIr,jIr,h3,b4e,DIr,GIr,eK,OIr,VIr,XIr,p3,v4e,zIr,QIr,oK,WIr,HIr,UIr,u3,F4e,JIr,YIr,rK,KIr,ZIr,eqr,_3,T4e,oqr,rqr,tK,tqr,aqr,nqr,b3,M4e,sqr,lqr,aK,iqr,dqr,cqr,v3,E4e,fqr,mqr,nK,gqr,hqr,pqr,F3,lNe,ef,T3,C4e,zx,uqr,w4e,_qr,iNe,Fr,Qx,bqr,of,vqr,sK,Fqr,Tqr,lK,Mqr,Eqr,Cqr,Wx,wqr,A4e,Aqr,yqr,Lqr,Ht,Hx,xqr,y4e,$qr,kqr,rf,Sqr,L4e,Rqr,Bqr,iK,Pqr,Iqr,qqr,M3,Nqr,Hr,Ux,jqr,x4e,Dqr,Gqr,Mn,Oqr,$4e,Vqr,Xqr,k4e,zqr,Qqr,S4e,Wqr,Hqr,Uqr,R4e,E3,B4e,Jqr,Yqr,dK,Kqr,Zqr,eNr,C3,dNe,tf,w3,P4e,Jx,oNr,I4e,rNr,cNe,Tr,Yx,tNr,af,aNr,cK,nNr,sNr,fK,lNr,iNr,dNr,Kx,cNr,q4e,fNr,mNr,gNr,Ut,Zx,hNr,N4e,pNr,uNr,nf,_Nr,j4e,bNr,vNr,mK,FNr,TNr,MNr,A3,ENr,Ur,e9,CNr,D4e,wNr,ANr,En,yNr,G4e,LNr,xNr,O4e,$Nr,kNr,V4e,SNr,RNr,BNr,o9,y3,X4e,PNr,INr,gK,qNr,NNr,jNr,L3,z4e,DNr,GNr,hK,ONr,VNr,XNr,x3,fNe,sf,$3,Q4e,r9,zNr,W4e,QNr,mNe,Mr,t9,WNr,lf,HNr,pK,UNr,JNr,uK,YNr,KNr,ZNr,a9,ejr,H4e,ojr,rjr,tjr,Jt,n9,ajr,U4e,njr,sjr,df,ljr,J4e,ijr,djr,_K,cjr,fjr,mjr,k3,gjr,Jr,s9,hjr,Y4e,pjr,ujr,Cn,_jr,K4e,bjr,vjr,Z4e,Fjr,Tjr,eEe,Mjr,Ejr,Cjr,oEe,S3,rEe,wjr,Ajr,bK,yjr,Ljr,xjr,R3,gNe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),rA=new ee({}),tA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new $jr({props:{warning:!0,$$slots:{default:[_yt]},$$scope:{ctx:L}}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L572"}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L595"}}),bg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),dA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L717"}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L382"}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L396"}}),Yg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),pA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L592"}}),uA=new ee({}),_A=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),wh=new $jr({props:{$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),Ah=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),TA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),MA=new ee({}),EA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L77"}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L91"}}),Xh=new $jr({props:{$$slots:{default:[Myt]},$$scope:{ctx:L}}}),zh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),yA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L244"}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L725"}}),kA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BConfig">BigScience176BConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BModel">BigScience176BModel</a> (BigScience176B model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Hh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),RA=new ee({}),BA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L732"}}),IA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BConfig">BigScience176BConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BLMHeadModel">BigScience176BLMHeadModel</a> (BigScience176B model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),NA=new ee({}),jA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L747"}}),GA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BConfig">BigScience176BConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BLMHeadModel">BigScience176BLMHeadModel</a> (BigScience176B model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),S_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L754"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L761"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),ZA=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L770"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L804"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L811"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L797"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L779"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L786"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L820"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L859"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L866"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L889"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L873"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L880"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L898"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L905"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L852"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L827"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L834"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L843"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),Jx=new ee({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),r9=new ee({}),t9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),K6=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),Z6=o("AutoConfig"),yn=o(", "),Ln=a("a"),eA=o("AutoModel"),mi=o(`, and
`),xn=a("a"),oA=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),F$=o("will create a model that is an instance of "),hi=a("a"),T$=o("BertModel"),M$=o("."),Eo=l(),Ea=a("p"),E$=o("There is one class of "),uf=a("code"),C$=o("AutoModel"),TDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cIe=l(),pi=a("h2"),_f=a("a"),mee=a("span"),F(rA.$$.fragment),MDe=l(),gee=a("span"),EDe=o("Extending the Auto Classes"),fIe=l(),$n=a("p"),CDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hee=a("code"),wDe=o("NewModel"),ADe=o(", make sure you have a "),pee=a("code"),yDe=o("NewModelConfig"),LDe=o(` then you can add those to the auto
classes like this:`),mIe=l(),F(tA.$$.fragment),gIe=l(),w$=a("p"),xDe=o("You will then be able to use the auto classes like you would usually do!"),hIe=l(),F(bf.$$.fragment),pIe=l(),ui=a("h2"),vf=a("a"),uee=a("span"),F(aA.$$.fragment),$De=l(),_ee=a("span"),kDe=o("AutoConfig"),uIe=l(),Co=a("div"),F(nA.$$.fragment),SDe=l(),sA=a("p"),RDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A$=a("a"),BDe=o("from_pretrained()"),PDe=o(" class method."),IDe=l(),lA=a("p"),qDe=o("This class cannot be instantiated directly using "),bee=a("code"),NDe=o("__init__()"),jDe=o(" (throws an error)."),DDe=l(),Er=a("div"),F(iA.$$.fragment),GDe=l(),vee=a("p"),ODe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),VDe=l(),_i=a("p"),XDe=o("The configuration class to instantiate is selected based on the "),Fee=a("code"),zDe=o("model_type"),QDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Tee=a("code"),WDe=o("pretrained_model_name_or_path"),HDe=o(":"),UDe=l(),A=a("ul"),Ff=a("li"),Mee=a("strong"),JDe=o("albert"),YDe=o(" \u2014 "),y$=a("a"),KDe=o("AlbertConfig"),ZDe=o(" (ALBERT model)"),eGe=l(),Tf=a("li"),Eee=a("strong"),oGe=o("bart"),rGe=o(" \u2014 "),L$=a("a"),tGe=o("BartConfig"),aGe=o(" (BART model)"),nGe=l(),Mf=a("li"),Cee=a("strong"),sGe=o("beit"),lGe=o(" \u2014 "),x$=a("a"),iGe=o("BeitConfig"),dGe=o(" (BEiT model)"),cGe=l(),Ef=a("li"),wee=a("strong"),fGe=o("bert"),mGe=o(" \u2014 "),$$=a("a"),gGe=o("BertConfig"),hGe=o(" (BERT model)"),pGe=l(),Cf=a("li"),Aee=a("strong"),uGe=o("bert-generation"),_Ge=o(" \u2014 "),k$=a("a"),bGe=o("BertGenerationConfig"),vGe=o(" (Bert Generation model)"),FGe=l(),wf=a("li"),yee=a("strong"),TGe=o("big_bird"),MGe=o(" \u2014 "),S$=a("a"),EGe=o("BigBirdConfig"),CGe=o(" (BigBird model)"),wGe=l(),Af=a("li"),Lee=a("strong"),AGe=o("bigbird_pegasus"),yGe=o(" \u2014 "),R$=a("a"),LGe=o("BigBirdPegasusConfig"),xGe=o(" (BigBirdPegasus model)"),$Ge=l(),yf=a("li"),xee=a("strong"),kGe=o("bigscience176b"),SGe=o(" \u2014 "),B$=a("a"),RGe=o("BigScience176BConfig"),BGe=o(" (BigScience176B model)"),PGe=l(),Lf=a("li"),$ee=a("strong"),IGe=o("blenderbot"),qGe=o(" \u2014 "),P$=a("a"),NGe=o("BlenderbotConfig"),jGe=o(" (Blenderbot model)"),DGe=l(),xf=a("li"),kee=a("strong"),GGe=o("blenderbot-small"),OGe=o(" \u2014 "),I$=a("a"),VGe=o("BlenderbotSmallConfig"),XGe=o(" (BlenderbotSmall model)"),zGe=l(),$f=a("li"),See=a("strong"),QGe=o("camembert"),WGe=o(" \u2014 "),q$=a("a"),HGe=o("CamembertConfig"),UGe=o(" (CamemBERT model)"),JGe=l(),kf=a("li"),Ree=a("strong"),YGe=o("canine"),KGe=o(" \u2014 "),N$=a("a"),ZGe=o("CanineConfig"),eOe=o(" (Canine model)"),oOe=l(),Sf=a("li"),Bee=a("strong"),rOe=o("clip"),tOe=o(" \u2014 "),j$=a("a"),aOe=o("CLIPConfig"),nOe=o(" (CLIP model)"),sOe=l(),Rf=a("li"),Pee=a("strong"),lOe=o("convbert"),iOe=o(" \u2014 "),D$=a("a"),dOe=o("ConvBertConfig"),cOe=o(" (ConvBERT model)"),fOe=l(),Bf=a("li"),Iee=a("strong"),mOe=o("convnext"),gOe=o(" \u2014 "),G$=a("a"),hOe=o("ConvNextConfig"),pOe=o(" (ConvNext model)"),uOe=l(),Pf=a("li"),qee=a("strong"),_Oe=o("ctrl"),bOe=o(" \u2014 "),O$=a("a"),vOe=o("CTRLConfig"),FOe=o(" (CTRL model)"),TOe=l(),If=a("li"),Nee=a("strong"),MOe=o("data2vec-audio"),EOe=o(" \u2014 "),V$=a("a"),COe=o("Data2VecAudioConfig"),wOe=o(" (Data2VecAudio model)"),AOe=l(),qf=a("li"),jee=a("strong"),yOe=o("data2vec-text"),LOe=o(" \u2014 "),X$=a("a"),xOe=o("Data2VecTextConfig"),$Oe=o(" (Data2VecText model)"),kOe=l(),Nf=a("li"),Dee=a("strong"),SOe=o("data2vec-vision"),ROe=o(" \u2014 "),z$=a("a"),BOe=o("Data2VecVisionConfig"),POe=o(" (Data2VecVision model)"),IOe=l(),jf=a("li"),Gee=a("strong"),qOe=o("deberta"),NOe=o(" \u2014 "),Q$=a("a"),jOe=o("DebertaConfig"),DOe=o(" (DeBERTa model)"),GOe=l(),Df=a("li"),Oee=a("strong"),OOe=o("deberta-v2"),VOe=o(" \u2014 "),W$=a("a"),XOe=o("DebertaV2Config"),zOe=o(" (DeBERTa-v2 model)"),QOe=l(),Gf=a("li"),Vee=a("strong"),WOe=o("decision_transformer"),HOe=o(" \u2014 "),H$=a("a"),UOe=o("DecisionTransformerConfig"),JOe=o(" (Decision Transformer model)"),YOe=l(),Of=a("li"),Xee=a("strong"),KOe=o("deit"),ZOe=o(" \u2014 "),U$=a("a"),eVe=o("DeiTConfig"),oVe=o(" (DeiT model)"),rVe=l(),Vf=a("li"),zee=a("strong"),tVe=o("detr"),aVe=o(" \u2014 "),J$=a("a"),nVe=o("DetrConfig"),sVe=o(" (DETR model)"),lVe=l(),Xf=a("li"),Qee=a("strong"),iVe=o("distilbert"),dVe=o(" \u2014 "),Y$=a("a"),cVe=o("DistilBertConfig"),fVe=o(" (DistilBERT model)"),mVe=l(),zf=a("li"),Wee=a("strong"),gVe=o("dpr"),hVe=o(" \u2014 "),K$=a("a"),pVe=o("DPRConfig"),uVe=o(" (DPR model)"),_Ve=l(),Qf=a("li"),Hee=a("strong"),bVe=o("dpt"),vVe=o(" \u2014 "),Z$=a("a"),FVe=o("DPTConfig"),TVe=o(" (DPT model)"),MVe=l(),Wf=a("li"),Uee=a("strong"),EVe=o("electra"),CVe=o(" \u2014 "),ek=a("a"),wVe=o("ElectraConfig"),AVe=o(" (ELECTRA model)"),yVe=l(),Hf=a("li"),Jee=a("strong"),LVe=o("encoder-decoder"),xVe=o(" \u2014 "),ok=a("a"),$Ve=o("EncoderDecoderConfig"),kVe=o(" (Encoder decoder model)"),SVe=l(),Uf=a("li"),Yee=a("strong"),RVe=o("flaubert"),BVe=o(" \u2014 "),rk=a("a"),PVe=o("FlaubertConfig"),IVe=o(" (FlauBERT model)"),qVe=l(),Jf=a("li"),Kee=a("strong"),NVe=o("flava"),jVe=o(" \u2014 "),tk=a("a"),DVe=o("FlavaConfig"),GVe=o(" (Flava model)"),OVe=l(),Yf=a("li"),Zee=a("strong"),VVe=o("fnet"),XVe=o(" \u2014 "),ak=a("a"),zVe=o("FNetConfig"),QVe=o(" (FNet model)"),WVe=l(),Kf=a("li"),eoe=a("strong"),HVe=o("fsmt"),UVe=o(" \u2014 "),nk=a("a"),JVe=o("FSMTConfig"),YVe=o(" (FairSeq Machine-Translation model)"),KVe=l(),Zf=a("li"),ooe=a("strong"),ZVe=o("funnel"),eXe=o(" \u2014 "),sk=a("a"),oXe=o("FunnelConfig"),rXe=o(" (Funnel Transformer model)"),tXe=l(),em=a("li"),roe=a("strong"),aXe=o("glpn"),nXe=o(" \u2014 "),lk=a("a"),sXe=o("GLPNConfig"),lXe=o(" (GLPN model)"),iXe=l(),om=a("li"),toe=a("strong"),dXe=o("gpt2"),cXe=o(" \u2014 "),ik=a("a"),fXe=o("GPT2Config"),mXe=o(" (OpenAI GPT-2 model)"),gXe=l(),rm=a("li"),aoe=a("strong"),hXe=o("gpt_neo"),pXe=o(" \u2014 "),dk=a("a"),uXe=o("GPTNeoConfig"),_Xe=o(" (GPT Neo model)"),bXe=l(),tm=a("li"),noe=a("strong"),vXe=o("gptj"),FXe=o(" \u2014 "),ck=a("a"),TXe=o("GPTJConfig"),MXe=o(" (GPT-J model)"),EXe=l(),am=a("li"),soe=a("strong"),CXe=o("hubert"),wXe=o(" \u2014 "),fk=a("a"),AXe=o("HubertConfig"),yXe=o(" (Hubert model)"),LXe=l(),nm=a("li"),loe=a("strong"),xXe=o("ibert"),$Xe=o(" \u2014 "),mk=a("a"),kXe=o("IBertConfig"),SXe=o(" (I-BERT model)"),RXe=l(),sm=a("li"),ioe=a("strong"),BXe=o("imagegpt"),PXe=o(" \u2014 "),gk=a("a"),IXe=o("ImageGPTConfig"),qXe=o(" (ImageGPT model)"),NXe=l(),lm=a("li"),doe=a("strong"),jXe=o("layoutlm"),DXe=o(" \u2014 "),hk=a("a"),GXe=o("LayoutLMConfig"),OXe=o(" (LayoutLM model)"),VXe=l(),im=a("li"),coe=a("strong"),XXe=o("layoutlmv2"),zXe=o(" \u2014 "),pk=a("a"),QXe=o("LayoutLMv2Config"),WXe=o(" (LayoutLMv2 model)"),HXe=l(),dm=a("li"),foe=a("strong"),UXe=o("led"),JXe=o(" \u2014 "),uk=a("a"),YXe=o("LEDConfig"),KXe=o(" (LED model)"),ZXe=l(),cm=a("li"),moe=a("strong"),eze=o("longformer"),oze=o(" \u2014 "),_k=a("a"),rze=o("LongformerConfig"),tze=o(" (Longformer model)"),aze=l(),fm=a("li"),goe=a("strong"),nze=o("luke"),sze=o(" \u2014 "),bk=a("a"),lze=o("LukeConfig"),ize=o(" (LUKE model)"),dze=l(),mm=a("li"),hoe=a("strong"),cze=o("lxmert"),fze=o(" \u2014 "),vk=a("a"),mze=o("LxmertConfig"),gze=o(" (LXMERT model)"),hze=l(),gm=a("li"),poe=a("strong"),pze=o("m2m_100"),uze=o(" \u2014 "),Fk=a("a"),_ze=o("M2M100Config"),bze=o(" (M2M100 model)"),vze=l(),hm=a("li"),uoe=a("strong"),Fze=o("marian"),Tze=o(" \u2014 "),Tk=a("a"),Mze=o("MarianConfig"),Eze=o(" (Marian model)"),Cze=l(),pm=a("li"),_oe=a("strong"),wze=o("maskformer"),Aze=o(" \u2014 "),Mk=a("a"),yze=o("MaskFormerConfig"),Lze=o(" (MaskFormer model)"),xze=l(),um=a("li"),boe=a("strong"),$ze=o("mbart"),kze=o(" \u2014 "),Ek=a("a"),Sze=o("MBartConfig"),Rze=o(" (mBART model)"),Bze=l(),_m=a("li"),voe=a("strong"),Pze=o("megatron-bert"),Ize=o(" \u2014 "),Ck=a("a"),qze=o("MegatronBertConfig"),Nze=o(" (MegatronBert model)"),jze=l(),bm=a("li"),Foe=a("strong"),Dze=o("mobilebert"),Gze=o(" \u2014 "),wk=a("a"),Oze=o("MobileBertConfig"),Vze=o(" (MobileBERT model)"),Xze=l(),vm=a("li"),Toe=a("strong"),zze=o("mpnet"),Qze=o(" \u2014 "),Ak=a("a"),Wze=o("MPNetConfig"),Hze=o(" (MPNet model)"),Uze=l(),Fm=a("li"),Moe=a("strong"),Jze=o("mt5"),Yze=o(" \u2014 "),yk=a("a"),Kze=o("MT5Config"),Zze=o(" (mT5 model)"),eQe=l(),Tm=a("li"),Eoe=a("strong"),oQe=o("nystromformer"),rQe=o(" \u2014 "),Lk=a("a"),tQe=o("NystromformerConfig"),aQe=o(" (Nystromformer model)"),nQe=l(),Mm=a("li"),Coe=a("strong"),sQe=o("openai-gpt"),lQe=o(" \u2014 "),xk=a("a"),iQe=o("OpenAIGPTConfig"),dQe=o(" (OpenAI GPT model)"),cQe=l(),Em=a("li"),woe=a("strong"),fQe=o("opt"),mQe=o(" \u2014 "),$k=a("a"),gQe=o("OPTConfig"),hQe=o(" (OPT model)"),pQe=l(),Cm=a("li"),Aoe=a("strong"),uQe=o("pegasus"),_Qe=o(" \u2014 "),kk=a("a"),bQe=o("PegasusConfig"),vQe=o(" (Pegasus model)"),FQe=l(),wm=a("li"),yoe=a("strong"),TQe=o("perceiver"),MQe=o(" \u2014 "),Sk=a("a"),EQe=o("PerceiverConfig"),CQe=o(" (Perceiver model)"),wQe=l(),Am=a("li"),Loe=a("strong"),AQe=o("plbart"),yQe=o(" \u2014 "),Rk=a("a"),LQe=o("PLBartConfig"),xQe=o(" (PLBart model)"),$Qe=l(),ym=a("li"),xoe=a("strong"),kQe=o("poolformer"),SQe=o(" \u2014 "),Bk=a("a"),RQe=o("PoolFormerConfig"),BQe=o(" (PoolFormer model)"),PQe=l(),Lm=a("li"),$oe=a("strong"),IQe=o("prophetnet"),qQe=o(" \u2014 "),Pk=a("a"),NQe=o("ProphetNetConfig"),jQe=o(" (ProphetNet model)"),DQe=l(),xm=a("li"),koe=a("strong"),GQe=o("qdqbert"),OQe=o(" \u2014 "),Ik=a("a"),VQe=o("QDQBertConfig"),XQe=o(" (QDQBert model)"),zQe=l(),$m=a("li"),Soe=a("strong"),QQe=o("rag"),WQe=o(" \u2014 "),qk=a("a"),HQe=o("RagConfig"),UQe=o(" (RAG model)"),JQe=l(),km=a("li"),Roe=a("strong"),YQe=o("realm"),KQe=o(" \u2014 "),Nk=a("a"),ZQe=o("RealmConfig"),eWe=o(" (Realm model)"),oWe=l(),Sm=a("li"),Boe=a("strong"),rWe=o("reformer"),tWe=o(" \u2014 "),jk=a("a"),aWe=o("ReformerConfig"),nWe=o(" (Reformer model)"),sWe=l(),Rm=a("li"),Poe=a("strong"),lWe=o("regnet"),iWe=o(" \u2014 "),Dk=a("a"),dWe=o("RegNetConfig"),cWe=o(" (RegNet model)"),fWe=l(),Bm=a("li"),Ioe=a("strong"),mWe=o("rembert"),gWe=o(" \u2014 "),Gk=a("a"),hWe=o("RemBertConfig"),pWe=o(" (RemBERT model)"),uWe=l(),Pm=a("li"),qoe=a("strong"),_We=o("resnet"),bWe=o(" \u2014 "),Ok=a("a"),vWe=o("ResNetConfig"),FWe=o(" (ResNet model)"),TWe=l(),Im=a("li"),Noe=a("strong"),MWe=o("retribert"),EWe=o(" \u2014 "),Vk=a("a"),CWe=o("RetriBertConfig"),wWe=o(" (RetriBERT model)"),AWe=l(),qm=a("li"),joe=a("strong"),yWe=o("roberta"),LWe=o(" \u2014 "),Xk=a("a"),xWe=o("RobertaConfig"),$We=o(" (RoBERTa model)"),kWe=l(),Nm=a("li"),Doe=a("strong"),SWe=o("roformer"),RWe=o(" \u2014 "),zk=a("a"),BWe=o("RoFormerConfig"),PWe=o(" (RoFormer model)"),IWe=l(),jm=a("li"),Goe=a("strong"),qWe=o("segformer"),NWe=o(" \u2014 "),Qk=a("a"),jWe=o("SegformerConfig"),DWe=o(" (SegFormer model)"),GWe=l(),Dm=a("li"),Ooe=a("strong"),OWe=o("sew"),VWe=o(" \u2014 "),Wk=a("a"),XWe=o("SEWConfig"),zWe=o(" (SEW model)"),QWe=l(),Gm=a("li"),Voe=a("strong"),WWe=o("sew-d"),HWe=o(" \u2014 "),Hk=a("a"),UWe=o("SEWDConfig"),JWe=o(" (SEW-D model)"),YWe=l(),Om=a("li"),Xoe=a("strong"),KWe=o("speech-encoder-decoder"),ZWe=o(" \u2014 "),Uk=a("a"),eHe=o("SpeechEncoderDecoderConfig"),oHe=o(" (Speech Encoder decoder model)"),rHe=l(),Vm=a("li"),zoe=a("strong"),tHe=o("speech_to_text"),aHe=o(" \u2014 "),Jk=a("a"),nHe=o("Speech2TextConfig"),sHe=o(" (Speech2Text model)"),lHe=l(),Xm=a("li"),Qoe=a("strong"),iHe=o("speech_to_text_2"),dHe=o(" \u2014 "),Yk=a("a"),cHe=o("Speech2Text2Config"),fHe=o(" (Speech2Text2 model)"),mHe=l(),zm=a("li"),Woe=a("strong"),gHe=o("splinter"),hHe=o(" \u2014 "),Kk=a("a"),pHe=o("SplinterConfig"),uHe=o(" (Splinter model)"),_He=l(),Qm=a("li"),Hoe=a("strong"),bHe=o("squeezebert"),vHe=o(" \u2014 "),Zk=a("a"),FHe=o("SqueezeBertConfig"),THe=o(" (SqueezeBERT model)"),MHe=l(),Wm=a("li"),Uoe=a("strong"),EHe=o("swin"),CHe=o(" \u2014 "),eS=a("a"),wHe=o("SwinConfig"),AHe=o(" (Swin model)"),yHe=l(),Hm=a("li"),Joe=a("strong"),LHe=o("t5"),xHe=o(" \u2014 "),oS=a("a"),$He=o("T5Config"),kHe=o(" (T5 model)"),SHe=l(),Um=a("li"),Yoe=a("strong"),RHe=o("tapas"),BHe=o(" \u2014 "),rS=a("a"),PHe=o("TapasConfig"),IHe=o(" (TAPAS model)"),qHe=l(),Jm=a("li"),Koe=a("strong"),NHe=o("tapex"),jHe=o(" \u2014 "),tS=a("a"),DHe=o("BartConfig"),GHe=o(" (TAPEX model)"),OHe=l(),Ym=a("li"),Zoe=a("strong"),VHe=o("transfo-xl"),XHe=o(" \u2014 "),aS=a("a"),zHe=o("TransfoXLConfig"),QHe=o(" (Transformer-XL model)"),WHe=l(),Km=a("li"),ere=a("strong"),HHe=o("trocr"),UHe=o(" \u2014 "),nS=a("a"),JHe=o("TrOCRConfig"),YHe=o(" (TrOCR model)"),KHe=l(),Zm=a("li"),ore=a("strong"),ZHe=o("unispeech"),eUe=o(" \u2014 "),sS=a("a"),oUe=o("UniSpeechConfig"),rUe=o(" (UniSpeech model)"),tUe=l(),eg=a("li"),rre=a("strong"),aUe=o("unispeech-sat"),nUe=o(" \u2014 "),lS=a("a"),sUe=o("UniSpeechSatConfig"),lUe=o(" (UniSpeechSat model)"),iUe=l(),og=a("li"),tre=a("strong"),dUe=o("van"),cUe=o(" \u2014 "),iS=a("a"),fUe=o("VanConfig"),mUe=o(" (VAN model)"),gUe=l(),rg=a("li"),are=a("strong"),hUe=o("vilt"),pUe=o(" \u2014 "),dS=a("a"),uUe=o("ViltConfig"),_Ue=o(" (ViLT model)"),bUe=l(),tg=a("li"),nre=a("strong"),vUe=o("vision-encoder-decoder"),FUe=o(" \u2014 "),cS=a("a"),TUe=o("VisionEncoderDecoderConfig"),MUe=o(" (Vision Encoder decoder model)"),EUe=l(),ag=a("li"),sre=a("strong"),CUe=o("vision-text-dual-encoder"),wUe=o(" \u2014 "),fS=a("a"),AUe=o("VisionTextDualEncoderConfig"),yUe=o(" (VisionTextDualEncoder model)"),LUe=l(),ng=a("li"),lre=a("strong"),xUe=o("visual_bert"),$Ue=o(" \u2014 "),mS=a("a"),kUe=o("VisualBertConfig"),SUe=o(" (VisualBert model)"),RUe=l(),sg=a("li"),ire=a("strong"),BUe=o("vit"),PUe=o(" \u2014 "),gS=a("a"),IUe=o("ViTConfig"),qUe=o(" (ViT model)"),NUe=l(),lg=a("li"),dre=a("strong"),jUe=o("vit_mae"),DUe=o(" \u2014 "),hS=a("a"),GUe=o("ViTMAEConfig"),OUe=o(" (ViTMAE model)"),VUe=l(),ig=a("li"),cre=a("strong"),XUe=o("wav2vec2"),zUe=o(" \u2014 "),pS=a("a"),QUe=o("Wav2Vec2Config"),WUe=o(" (Wav2Vec2 model)"),HUe=l(),dg=a("li"),fre=a("strong"),UUe=o("wavlm"),JUe=o(" \u2014 "),uS=a("a"),YUe=o("WavLMConfig"),KUe=o(" (WavLM model)"),ZUe=l(),cg=a("li"),mre=a("strong"),eJe=o("xglm"),oJe=o(" \u2014 "),_S=a("a"),rJe=o("XGLMConfig"),tJe=o(" (XGLM model)"),aJe=l(),fg=a("li"),gre=a("strong"),nJe=o("xlm"),sJe=o(" \u2014 "),bS=a("a"),lJe=o("XLMConfig"),iJe=o(" (XLM model)"),dJe=l(),mg=a("li"),hre=a("strong"),cJe=o("xlm-prophetnet"),fJe=o(" \u2014 "),vS=a("a"),mJe=o("XLMProphetNetConfig"),gJe=o(" (XLMProphetNet model)"),hJe=l(),gg=a("li"),pre=a("strong"),pJe=o("xlm-roberta"),uJe=o(" \u2014 "),FS=a("a"),_Je=o("XLMRobertaConfig"),bJe=o(" (XLM-RoBERTa model)"),vJe=l(),hg=a("li"),ure=a("strong"),FJe=o("xlm-roberta-xl"),TJe=o(" \u2014 "),TS=a("a"),MJe=o("XLMRobertaXLConfig"),EJe=o(" (XLM-RoBERTa-XL model)"),CJe=l(),pg=a("li"),_re=a("strong"),wJe=o("xlnet"),AJe=o(" \u2014 "),MS=a("a"),yJe=o("XLNetConfig"),LJe=o(" (XLNet model)"),xJe=l(),ug=a("li"),bre=a("strong"),$Je=o("yolos"),kJe=o(" \u2014 "),ES=a("a"),SJe=o("YolosConfig"),RJe=o(" (YOLOS model)"),BJe=l(),_g=a("li"),vre=a("strong"),PJe=o("yoso"),IJe=o(" \u2014 "),CS=a("a"),qJe=o("YosoConfig"),NJe=o(" (YOSO model)"),jJe=l(),F(bg.$$.fragment),DJe=l(),vg=a("div"),F(dA.$$.fragment),GJe=l(),Fre=a("p"),OJe=o("Register a new configuration for this class."),_Ie=l(),bi=a("h2"),Fg=a("a"),Tre=a("span"),F(cA.$$.fragment),VJe=l(),Mre=a("span"),XJe=o("AutoTokenizer"),bIe=l(),wo=a("div"),F(fA.$$.fragment),zJe=l(),mA=a("p"),QJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wS=a("a"),WJe=o("AutoTokenizer.from_pretrained()"),HJe=o(" class method."),UJe=l(),gA=a("p"),JJe=o("This class cannot be instantiated directly using "),Ere=a("code"),YJe=o("__init__()"),KJe=o(" (throws an error)."),ZJe=l(),Cr=a("div"),F(hA.$$.fragment),eYe=l(),Cre=a("p"),oYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rYe=l(),Ca=a("p"),tYe=o("The tokenizer class to instantiate is selected based on the "),wre=a("code"),aYe=o("model_type"),nYe=o(` property of the config object (either
passed as an argument or loaded from `),Are=a("code"),sYe=o("pretrained_model_name_or_path"),lYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=a("code"),iYe=o("pretrained_model_name_or_path"),dYe=o(":"),cYe=l(),k=a("ul"),kn=a("li"),Lre=a("strong"),fYe=o("albert"),mYe=o(" \u2014 "),AS=a("a"),gYe=o("AlbertTokenizer"),hYe=o(" or "),yS=a("a"),pYe=o("AlbertTokenizerFast"),uYe=o(" (ALBERT model)"),_Ye=l(),Sn=a("li"),xre=a("strong"),bYe=o("bart"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("BartTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("BartTokenizerFast"),EYe=o(" (BART model)"),CYe=l(),Rn=a("li"),$re=a("strong"),wYe=o("barthez"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("BarthezTokenizer"),LYe=o(" or "),kS=a("a"),xYe=o("BarthezTokenizerFast"),$Ye=o(" (BARThez model)"),kYe=l(),Tg=a("li"),kre=a("strong"),SYe=o("bartpho"),RYe=o(" \u2014 "),SS=a("a"),BYe=o("BartphoTokenizer"),PYe=o(" (BARTpho model)"),IYe=l(),Bn=a("li"),Sre=a("strong"),qYe=o("bert"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("BertTokenizer"),DYe=o(" or "),BS=a("a"),GYe=o("BertTokenizerFast"),OYe=o(" (BERT model)"),VYe=l(),Mg=a("li"),Rre=a("strong"),XYe=o("bert-generation"),zYe=o(" \u2014 "),PS=a("a"),QYe=o("BertGenerationTokenizer"),WYe=o(" (Bert Generation model)"),HYe=l(),Eg=a("li"),Bre=a("strong"),UYe=o("bert-japanese"),JYe=o(" \u2014 "),IS=a("a"),YYe=o("BertJapaneseTokenizer"),KYe=o(" (BertJapanese model)"),ZYe=l(),Cg=a("li"),Pre=a("strong"),eKe=o("bertweet"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("BertweetTokenizer"),tKe=o(" (Bertweet model)"),aKe=l(),Pn=a("li"),Ire=a("strong"),nKe=o("big_bird"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("BigBirdTokenizer"),iKe=o(" or "),jS=a("a"),dKe=o("BigBirdTokenizerFast"),cKe=o(" (BigBird model)"),fKe=l(),In=a("li"),qre=a("strong"),mKe=o("bigbird_pegasus"),gKe=o(" \u2014 "),DS=a("a"),hKe=o("PegasusTokenizer"),pKe=o(" or "),GS=a("a"),uKe=o("PegasusTokenizerFast"),_Ke=o(" (BigBirdPegasus model)"),bKe=l(),qn=a("li"),Nre=a("strong"),vKe=o("bigscience176b"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("BigScience176BTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("BigScience176BTokenizerFast"),CKe=o(" (BigScience176B model)"),wKe=l(),Nn=a("li"),jre=a("strong"),AKe=o("blenderbot"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BlenderbotTokenizer"),xKe=o(" or "),zS=a("a"),$Ke=o("BlenderbotTokenizerFast"),kKe=o(" (Blenderbot model)"),SKe=l(),wg=a("li"),Dre=a("strong"),RKe=o("blenderbot-small"),BKe=o(" \u2014 "),QS=a("a"),PKe=o("BlenderbotSmallTokenizer"),IKe=o(" (BlenderbotSmall model)"),qKe=l(),Ag=a("li"),Gre=a("strong"),NKe=o("byt5"),jKe=o(" \u2014 "),WS=a("a"),DKe=o("ByT5Tokenizer"),GKe=o(" (ByT5 model)"),OKe=l(),jn=a("li"),Ore=a("strong"),VKe=o("camembert"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("CamembertTokenizer"),QKe=o(" or "),US=a("a"),WKe=o("CamembertTokenizerFast"),HKe=o(" (CamemBERT model)"),UKe=l(),yg=a("li"),Vre=a("strong"),JKe=o("canine"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("CanineTokenizer"),ZKe=o(" (Canine model)"),eZe=l(),Dn=a("li"),Xre=a("strong"),oZe=o("clip"),rZe=o(" \u2014 "),YS=a("a"),tZe=o("CLIPTokenizer"),aZe=o(" or "),KS=a("a"),nZe=o("CLIPTokenizerFast"),sZe=o(" (CLIP model)"),lZe=l(),Gn=a("li"),zre=a("strong"),iZe=o("convbert"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("ConvBertTokenizer"),fZe=o(" or "),eR=a("a"),mZe=o("ConvBertTokenizerFast"),gZe=o(" (ConvBERT model)"),hZe=l(),On=a("li"),Qre=a("strong"),pZe=o("cpm"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("CpmTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("CpmTokenizerFast"),FZe=o(" (CPM model)"),TZe=l(),Lg=a("li"),Wre=a("strong"),MZe=o("ctrl"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("CTRLTokenizer"),wZe=o(" (CTRL model)"),AZe=l(),Vn=a("li"),Hre=a("strong"),yZe=o("data2vec-text"),LZe=o(" \u2014 "),aR=a("a"),xZe=o("RobertaTokenizer"),$Ze=o(" or "),nR=a("a"),kZe=o("RobertaTokenizerFast"),SZe=o(" (Data2VecText model)"),RZe=l(),Xn=a("li"),Ure=a("strong"),BZe=o("deberta"),PZe=o(" \u2014 "),sR=a("a"),IZe=o("DebertaTokenizer"),qZe=o(" or "),lR=a("a"),NZe=o("DebertaTokenizerFast"),jZe=o(" (DeBERTa model)"),DZe=l(),zn=a("li"),Jre=a("strong"),GZe=o("deberta-v2"),OZe=o(" \u2014 "),iR=a("a"),VZe=o("DebertaV2Tokenizer"),XZe=o(" or "),dR=a("a"),zZe=o("DebertaV2TokenizerFast"),QZe=o(" (DeBERTa-v2 model)"),WZe=l(),Qn=a("li"),Yre=a("strong"),HZe=o("distilbert"),UZe=o(" \u2014 "),cR=a("a"),JZe=o("DistilBertTokenizer"),YZe=o(" or "),fR=a("a"),KZe=o("DistilBertTokenizerFast"),ZZe=o(" (DistilBERT model)"),eeo=l(),Wn=a("li"),Kre=a("strong"),oeo=o("dpr"),reo=o(" \u2014 "),mR=a("a"),teo=o("DPRQuestionEncoderTokenizer"),aeo=o(" or "),gR=a("a"),neo=o("DPRQuestionEncoderTokenizerFast"),seo=o(" (DPR model)"),leo=l(),Hn=a("li"),Zre=a("strong"),ieo=o("electra"),deo=o(" \u2014 "),hR=a("a"),ceo=o("ElectraTokenizer"),feo=o(" or "),pR=a("a"),meo=o("ElectraTokenizerFast"),geo=o(" (ELECTRA model)"),heo=l(),xg=a("li"),ete=a("strong"),peo=o("flaubert"),ueo=o(" \u2014 "),uR=a("a"),_eo=o("FlaubertTokenizer"),beo=o(" (FlauBERT model)"),veo=l(),Un=a("li"),ote=a("strong"),Feo=o("fnet"),Teo=o(" \u2014 "),_R=a("a"),Meo=o("FNetTokenizer"),Eeo=o(" or "),bR=a("a"),Ceo=o("FNetTokenizerFast"),weo=o(" (FNet model)"),Aeo=l(),$g=a("li"),rte=a("strong"),yeo=o("fsmt"),Leo=o(" \u2014 "),vR=a("a"),xeo=o("FSMTTokenizer"),$eo=o(" (FairSeq Machine-Translation model)"),keo=l(),Jn=a("li"),tte=a("strong"),Seo=o("funnel"),Reo=o(" \u2014 "),FR=a("a"),Beo=o("FunnelTokenizer"),Peo=o(" or "),TR=a("a"),Ieo=o("FunnelTokenizerFast"),qeo=o(" (Funnel Transformer model)"),Neo=l(),Yn=a("li"),ate=a("strong"),jeo=o("gpt2"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("GPT2Tokenizer"),Oeo=o(" or "),ER=a("a"),Veo=o("GPT2TokenizerFast"),Xeo=o(" (OpenAI GPT-2 model)"),zeo=l(),Kn=a("li"),nte=a("strong"),Qeo=o("gpt_neo"),Weo=o(" \u2014 "),CR=a("a"),Heo=o("GPT2Tokenizer"),Ueo=o(" or "),wR=a("a"),Jeo=o("GPT2TokenizerFast"),Yeo=o(" (GPT Neo model)"),Keo=l(),Zn=a("li"),ste=a("strong"),Zeo=o("gptj"),eoo=o(" \u2014 "),AR=a("a"),ooo=o("GPT2Tokenizer"),roo=o(" or "),yR=a("a"),too=o("GPT2TokenizerFast"),aoo=o(" (GPT-J model)"),noo=l(),es=a("li"),lte=a("strong"),soo=o("herbert"),loo=o(" \u2014 "),LR=a("a"),ioo=o("HerbertTokenizer"),doo=o(" or "),xR=a("a"),coo=o("HerbertTokenizerFast"),foo=o(" (HerBERT model)"),moo=l(),kg=a("li"),ite=a("strong"),goo=o("hubert"),hoo=o(" \u2014 "),$R=a("a"),poo=o("Wav2Vec2CTCTokenizer"),uoo=o(" (Hubert model)"),_oo=l(),os=a("li"),dte=a("strong"),boo=o("ibert"),voo=o(" \u2014 "),kR=a("a"),Foo=o("RobertaTokenizer"),Too=o(" or "),SR=a("a"),Moo=o("RobertaTokenizerFast"),Eoo=o(" (I-BERT model)"),Coo=l(),rs=a("li"),cte=a("strong"),woo=o("layoutlm"),Aoo=o(" \u2014 "),RR=a("a"),yoo=o("LayoutLMTokenizer"),Loo=o(" or "),BR=a("a"),xoo=o("LayoutLMTokenizerFast"),$oo=o(" (LayoutLM model)"),koo=l(),ts=a("li"),fte=a("strong"),Soo=o("layoutlmv2"),Roo=o(" \u2014 "),PR=a("a"),Boo=o("LayoutLMv2Tokenizer"),Poo=o(" or "),IR=a("a"),Ioo=o("LayoutLMv2TokenizerFast"),qoo=o(" (LayoutLMv2 model)"),Noo=l(),as=a("li"),mte=a("strong"),joo=o("layoutxlm"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("LayoutXLMTokenizer"),Ooo=o(" or "),NR=a("a"),Voo=o("LayoutXLMTokenizerFast"),Xoo=o(" (LayoutXLM model)"),zoo=l(),ns=a("li"),gte=a("strong"),Qoo=o("led"),Woo=o(" \u2014 "),jR=a("a"),Hoo=o("LEDTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("LEDTokenizerFast"),Yoo=o(" (LED model)"),Koo=l(),ss=a("li"),hte=a("strong"),Zoo=o("longformer"),ero=o(" \u2014 "),GR=a("a"),oro=o("LongformerTokenizer"),rro=o(" or "),OR=a("a"),tro=o("LongformerTokenizerFast"),aro=o(" (Longformer model)"),nro=l(),Sg=a("li"),pte=a("strong"),sro=o("luke"),lro=o(" \u2014 "),VR=a("a"),iro=o("LukeTokenizer"),dro=o(" (LUKE model)"),cro=l(),ls=a("li"),ute=a("strong"),fro=o("lxmert"),mro=o(" \u2014 "),XR=a("a"),gro=o("LxmertTokenizer"),hro=o(" or "),zR=a("a"),pro=o("LxmertTokenizerFast"),uro=o(" (LXMERT model)"),_ro=l(),Rg=a("li"),_te=a("strong"),bro=o("m2m_100"),vro=o(" \u2014 "),QR=a("a"),Fro=o("M2M100Tokenizer"),Tro=o(" (M2M100 model)"),Mro=l(),Bg=a("li"),bte=a("strong"),Ero=o("marian"),Cro=o(" \u2014 "),WR=a("a"),wro=o("MarianTokenizer"),Aro=o(" (Marian model)"),yro=l(),is=a("li"),vte=a("strong"),Lro=o("mbart"),xro=o(" \u2014 "),HR=a("a"),$ro=o("MBartTokenizer"),kro=o(" or "),UR=a("a"),Sro=o("MBartTokenizerFast"),Rro=o(" (mBART model)"),Bro=l(),ds=a("li"),Fte=a("strong"),Pro=o("mbart50"),Iro=o(" \u2014 "),JR=a("a"),qro=o("MBart50Tokenizer"),Nro=o(" or "),YR=a("a"),jro=o("MBart50TokenizerFast"),Dro=o(" (mBART-50 model)"),Gro=l(),cs=a("li"),Tte=a("strong"),Oro=o("megatron-bert"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("BertTokenizer"),zro=o(" or "),ZR=a("a"),Qro=o("BertTokenizerFast"),Wro=o(" (MegatronBert model)"),Hro=l(),Pg=a("li"),Mte=a("strong"),Uro=o("mluke"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("MLukeTokenizer"),Kro=o(" (mLUKE model)"),Zro=l(),fs=a("li"),Ete=a("strong"),eto=o("mobilebert"),oto=o(" \u2014 "),oB=a("a"),rto=o("MobileBertTokenizer"),tto=o(" or "),rB=a("a"),ato=o("MobileBertTokenizerFast"),nto=o(" (MobileBERT model)"),sto=l(),ms=a("li"),Cte=a("strong"),lto=o("mpnet"),ito=o(" \u2014 "),tB=a("a"),dto=o("MPNetTokenizer"),cto=o(" or "),aB=a("a"),fto=o("MPNetTokenizerFast"),mto=o(" (MPNet model)"),gto=l(),gs=a("li"),wte=a("strong"),hto=o("mt5"),pto=o(" \u2014 "),nB=a("a"),uto=o("MT5Tokenizer"),_to=o(" or "),sB=a("a"),bto=o("MT5TokenizerFast"),vto=o(" (mT5 model)"),Fto=l(),hs=a("li"),Ate=a("strong"),Tto=o("nystromformer"),Mto=o(" \u2014 "),lB=a("a"),Eto=o("AlbertTokenizer"),Cto=o(" or "),iB=a("a"),wto=o("AlbertTokenizerFast"),Ato=o(" (Nystromformer model)"),yto=l(),ps=a("li"),yte=a("strong"),Lto=o("openai-gpt"),xto=o(" \u2014 "),dB=a("a"),$to=o("OpenAIGPTTokenizer"),kto=o(" or "),cB=a("a"),Sto=o("OpenAIGPTTokenizerFast"),Rto=o(" (OpenAI GPT model)"),Bto=l(),Ig=a("li"),Lte=a("strong"),Pto=o("opt"),Ito=o(" \u2014 "),fB=a("a"),qto=o("GPT2Tokenizer"),Nto=o(" (OPT model)"),jto=l(),us=a("li"),xte=a("strong"),Dto=o("pegasus"),Gto=o(" \u2014 "),mB=a("a"),Oto=o("PegasusTokenizer"),Vto=o(" or "),gB=a("a"),Xto=o("PegasusTokenizerFast"),zto=o(" (Pegasus model)"),Qto=l(),qg=a("li"),$te=a("strong"),Wto=o("perceiver"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("PerceiverTokenizer"),Jto=o(" (Perceiver model)"),Yto=l(),Ng=a("li"),kte=a("strong"),Kto=o("phobert"),Zto=o(" \u2014 "),pB=a("a"),eao=o("PhobertTokenizer"),oao=o(" (PhoBERT model)"),rao=l(),jg=a("li"),Ste=a("strong"),tao=o("plbart"),aao=o(" \u2014 "),uB=a("a"),nao=o("PLBartTokenizer"),sao=o(" (PLBart model)"),lao=l(),Dg=a("li"),Rte=a("strong"),iao=o("prophetnet"),dao=o(" \u2014 "),_B=a("a"),cao=o("ProphetNetTokenizer"),fao=o(" (ProphetNet model)"),mao=l(),_s=a("li"),Bte=a("strong"),gao=o("qdqbert"),hao=o(" \u2014 "),bB=a("a"),pao=o("BertTokenizer"),uao=o(" or "),vB=a("a"),_ao=o("BertTokenizerFast"),bao=o(" (QDQBert model)"),vao=l(),Gg=a("li"),Pte=a("strong"),Fao=o("rag"),Tao=o(" \u2014 "),FB=a("a"),Mao=o("RagTokenizer"),Eao=o(" (RAG model)"),Cao=l(),bs=a("li"),Ite=a("strong"),wao=o("realm"),Aao=o(" \u2014 "),TB=a("a"),yao=o("RealmTokenizer"),Lao=o(" or "),MB=a("a"),xao=o("RealmTokenizerFast"),$ao=o(" (Realm model)"),kao=l(),vs=a("li"),qte=a("strong"),Sao=o("reformer"),Rao=o(" \u2014 "),EB=a("a"),Bao=o("ReformerTokenizer"),Pao=o(" or "),CB=a("a"),Iao=o("ReformerTokenizerFast"),qao=o(" (Reformer model)"),Nao=l(),Fs=a("li"),Nte=a("strong"),jao=o("rembert"),Dao=o(" \u2014 "),wB=a("a"),Gao=o("RemBertTokenizer"),Oao=o(" or "),AB=a("a"),Vao=o("RemBertTokenizerFast"),Xao=o(" (RemBERT model)"),zao=l(),Ts=a("li"),jte=a("strong"),Qao=o("retribert"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("RetriBertTokenizer"),Uao=o(" or "),LB=a("a"),Jao=o("RetriBertTokenizerFast"),Yao=o(" (RetriBERT model)"),Kao=l(),Ms=a("li"),Dte=a("strong"),Zao=o("roberta"),eno=o(" \u2014 "),xB=a("a"),ono=o("RobertaTokenizer"),rno=o(" or "),$B=a("a"),tno=o("RobertaTokenizerFast"),ano=o(" (RoBERTa model)"),nno=l(),Es=a("li"),Gte=a("strong"),sno=o("roformer"),lno=o(" \u2014 "),kB=a("a"),ino=o("RoFormerTokenizer"),dno=o(" or "),SB=a("a"),cno=o("RoFormerTokenizerFast"),fno=o(" (RoFormer model)"),mno=l(),Og=a("li"),Ote=a("strong"),gno=o("speech_to_text"),hno=o(" \u2014 "),RB=a("a"),pno=o("Speech2TextTokenizer"),uno=o(" (Speech2Text model)"),_no=l(),Vg=a("li"),Vte=a("strong"),bno=o("speech_to_text_2"),vno=o(" \u2014 "),BB=a("a"),Fno=o("Speech2Text2Tokenizer"),Tno=o(" (Speech2Text2 model)"),Mno=l(),Cs=a("li"),Xte=a("strong"),Eno=o("splinter"),Cno=o(" \u2014 "),PB=a("a"),wno=o("SplinterTokenizer"),Ano=o(" or "),IB=a("a"),yno=o("SplinterTokenizerFast"),Lno=o(" (Splinter model)"),xno=l(),ws=a("li"),zte=a("strong"),$no=o("squeezebert"),kno=o(" \u2014 "),qB=a("a"),Sno=o("SqueezeBertTokenizer"),Rno=o(" or "),NB=a("a"),Bno=o("SqueezeBertTokenizerFast"),Pno=o(" (SqueezeBERT model)"),Ino=l(),As=a("li"),Qte=a("strong"),qno=o("t5"),Nno=o(" \u2014 "),jB=a("a"),jno=o("T5Tokenizer"),Dno=o(" or "),DB=a("a"),Gno=o("T5TokenizerFast"),Ono=o(" (T5 model)"),Vno=l(),Xg=a("li"),Wte=a("strong"),Xno=o("tapas"),zno=o(" \u2014 "),GB=a("a"),Qno=o("TapasTokenizer"),Wno=o(" (TAPAS model)"),Hno=l(),zg=a("li"),Hte=a("strong"),Uno=o("tapex"),Jno=o(" \u2014 "),OB=a("a"),Yno=o("TapexTokenizer"),Kno=o(" (TAPEX model)"),Zno=l(),Qg=a("li"),Ute=a("strong"),eso=o("transfo-xl"),oso=o(" \u2014 "),VB=a("a"),rso=o("TransfoXLTokenizer"),tso=o(" (Transformer-XL model)"),aso=l(),ys=a("li"),Jte=a("strong"),nso=o("visual_bert"),sso=o(" \u2014 "),XB=a("a"),lso=o("BertTokenizer"),iso=o(" or "),zB=a("a"),dso=o("BertTokenizerFast"),cso=o(" (VisualBert model)"),fso=l(),Wg=a("li"),Yte=a("strong"),mso=o("wav2vec2"),gso=o(" \u2014 "),QB=a("a"),hso=o("Wav2Vec2CTCTokenizer"),pso=o(" (Wav2Vec2 model)"),uso=l(),Hg=a("li"),Kte=a("strong"),_so=o("wav2vec2_phoneme"),bso=o(" \u2014 "),WB=a("a"),vso=o("Wav2Vec2PhonemeCTCTokenizer"),Fso=o(" (Wav2Vec2Phoneme model)"),Tso=l(),Ls=a("li"),Zte=a("strong"),Mso=o("xglm"),Eso=o(" \u2014 "),HB=a("a"),Cso=o("XGLMTokenizer"),wso=o(" or "),UB=a("a"),Aso=o("XGLMTokenizerFast"),yso=o(" (XGLM model)"),Lso=l(),Ug=a("li"),eae=a("strong"),xso=o("xlm"),$so=o(" \u2014 "),JB=a("a"),kso=o("XLMTokenizer"),Sso=o(" (XLM model)"),Rso=l(),Jg=a("li"),oae=a("strong"),Bso=o("xlm-prophetnet"),Pso=o(" \u2014 "),YB=a("a"),Iso=o("XLMProphetNetTokenizer"),qso=o(" (XLMProphetNet model)"),Nso=l(),xs=a("li"),rae=a("strong"),jso=o("xlm-roberta"),Dso=o(" \u2014 "),KB=a("a"),Gso=o("XLMRobertaTokenizer"),Oso=o(" or "),ZB=a("a"),Vso=o("XLMRobertaTokenizerFast"),Xso=o(" (XLM-RoBERTa model)"),zso=l(),$s=a("li"),tae=a("strong"),Qso=o("xlm-roberta-xl"),Wso=o(" \u2014 "),eP=a("a"),Hso=o("RobertaTokenizer"),Uso=o(" or "),oP=a("a"),Jso=o("RobertaTokenizerFast"),Yso=o(" (XLM-RoBERTa-XL model)"),Kso=l(),ks=a("li"),aae=a("strong"),Zso=o("xlnet"),elo=o(" \u2014 "),rP=a("a"),olo=o("XLNetTokenizer"),rlo=o(" or "),tP=a("a"),tlo=o("XLNetTokenizerFast"),alo=o(" (XLNet model)"),nlo=l(),Ss=a("li"),nae=a("strong"),slo=o("yoso"),llo=o(" \u2014 "),aP=a("a"),ilo=o("AlbertTokenizer"),dlo=o(" or "),nP=a("a"),clo=o("AlbertTokenizerFast"),flo=o(" (YOSO model)"),mlo=l(),F(Yg.$$.fragment),glo=l(),Kg=a("div"),F(pA.$$.fragment),hlo=l(),sae=a("p"),plo=o("Register a new tokenizer in this mapping."),vIe=l(),vi=a("h2"),Zg=a("a"),lae=a("span"),F(uA.$$.fragment),ulo=l(),iae=a("span"),_lo=o("AutoFeatureExtractor"),FIe=l(),Ao=a("div"),F(_A.$$.fragment),blo=l(),bA=a("p"),vlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),sP=a("a"),Flo=o("AutoFeatureExtractor.from_pretrained()"),Tlo=o(" class method."),Mlo=l(),vA=a("p"),Elo=o("This class cannot be instantiated directly using "),dae=a("code"),Clo=o("__init__()"),wlo=o(" (throws an error)."),Alo=l(),Qe=a("div"),F(FA.$$.fragment),ylo=l(),cae=a("p"),Llo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xlo=l(),wa=a("p"),$lo=o("The feature extractor class to instantiate is selected based on the "),fae=a("code"),klo=o("model_type"),Slo=o(` property of the config object
(either passed as an argument or loaded from `),mae=a("code"),Rlo=o("pretrained_model_name_or_path"),Blo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gae=a("code"),Plo=o("pretrained_model_name_or_path"),Ilo=o(":"),qlo=l(),oe=a("ul"),eh=a("li"),hae=a("strong"),Nlo=o("beit"),jlo=o(" \u2014 "),lP=a("a"),Dlo=o("BeitFeatureExtractor"),Glo=o(" (BEiT model)"),Olo=l(),oh=a("li"),pae=a("strong"),Vlo=o("clip"),Xlo=o(" \u2014 "),iP=a("a"),zlo=o("CLIPFeatureExtractor"),Qlo=o(" (CLIP model)"),Wlo=l(),rh=a("li"),uae=a("strong"),Hlo=o("convnext"),Ulo=o(" \u2014 "),dP=a("a"),Jlo=o("ConvNextFeatureExtractor"),Ylo=o(" (ConvNext model)"),Klo=l(),th=a("li"),_ae=a("strong"),Zlo=o("data2vec-audio"),eio=o(" \u2014 "),cP=a("a"),oio=o("Wav2Vec2FeatureExtractor"),rio=o(" (Data2VecAudio model)"),tio=l(),ah=a("li"),bae=a("strong"),aio=o("data2vec-vision"),nio=o(" \u2014 "),fP=a("a"),sio=o("BeitFeatureExtractor"),lio=o(" (Data2VecVision model)"),iio=l(),nh=a("li"),vae=a("strong"),dio=o("deit"),cio=o(" \u2014 "),mP=a("a"),fio=o("DeiTFeatureExtractor"),mio=o(" (DeiT model)"),gio=l(),sh=a("li"),Fae=a("strong"),hio=o("detr"),pio=o(" \u2014 "),gP=a("a"),uio=o("DetrFeatureExtractor"),_io=o(" (DETR model)"),bio=l(),lh=a("li"),Tae=a("strong"),vio=o("dpt"),Fio=o(" \u2014 "),hP=a("a"),Tio=o("DPTFeatureExtractor"),Mio=o(" (DPT model)"),Eio=l(),ih=a("li"),Mae=a("strong"),Cio=o("flava"),wio=o(" \u2014 "),pP=a("a"),Aio=o("FlavaFeatureExtractor"),yio=o(" (Flava model)"),Lio=l(),dh=a("li"),Eae=a("strong"),xio=o("glpn"),$io=o(" \u2014 "),uP=a("a"),kio=o("GLPNFeatureExtractor"),Sio=o(" (GLPN model)"),Rio=l(),ch=a("li"),Cae=a("strong"),Bio=o("hubert"),Pio=o(" \u2014 "),_P=a("a"),Iio=o("Wav2Vec2FeatureExtractor"),qio=o(" (Hubert model)"),Nio=l(),fh=a("li"),wae=a("strong"),jio=o("layoutlmv2"),Dio=o(" \u2014 "),bP=a("a"),Gio=o("LayoutLMv2FeatureExtractor"),Oio=o(" (LayoutLMv2 model)"),Vio=l(),mh=a("li"),Aae=a("strong"),Xio=o("maskformer"),zio=o(" \u2014 "),vP=a("a"),Qio=o("MaskFormerFeatureExtractor"),Wio=o(" (MaskFormer model)"),Hio=l(),gh=a("li"),yae=a("strong"),Uio=o("perceiver"),Jio=o(" \u2014 "),FP=a("a"),Yio=o("PerceiverFeatureExtractor"),Kio=o(" (Perceiver model)"),Zio=l(),hh=a("li"),Lae=a("strong"),edo=o("poolformer"),odo=o(" \u2014 "),TP=a("a"),rdo=o("PoolFormerFeatureExtractor"),tdo=o(" (PoolFormer model)"),ado=l(),ph=a("li"),xae=a("strong"),ndo=o("regnet"),sdo=o(" \u2014 "),MP=a("a"),ldo=o("ConvNextFeatureExtractor"),ido=o(" (RegNet model)"),ddo=l(),uh=a("li"),$ae=a("strong"),cdo=o("resnet"),fdo=o(" \u2014 "),EP=a("a"),mdo=o("ConvNextFeatureExtractor"),gdo=o(" (ResNet model)"),hdo=l(),_h=a("li"),kae=a("strong"),pdo=o("segformer"),udo=o(" \u2014 "),CP=a("a"),_do=o("SegformerFeatureExtractor"),bdo=o(" (SegFormer model)"),vdo=l(),bh=a("li"),Sae=a("strong"),Fdo=o("speech_to_text"),Tdo=o(" \u2014 "),wP=a("a"),Mdo=o("Speech2TextFeatureExtractor"),Edo=o(" (Speech2Text model)"),Cdo=l(),vh=a("li"),Rae=a("strong"),wdo=o("swin"),Ado=o(" \u2014 "),AP=a("a"),ydo=o("ViTFeatureExtractor"),Ldo=o(" (Swin model)"),xdo=l(),Fh=a("li"),Bae=a("strong"),$do=o("van"),kdo=o(" \u2014 "),yP=a("a"),Sdo=o("ConvNextFeatureExtractor"),Rdo=o(" (VAN model)"),Bdo=l(),Th=a("li"),Pae=a("strong"),Pdo=o("vit"),Ido=o(" \u2014 "),LP=a("a"),qdo=o("ViTFeatureExtractor"),Ndo=o(" (ViT model)"),jdo=l(),Mh=a("li"),Iae=a("strong"),Ddo=o("vit_mae"),Gdo=o(" \u2014 "),xP=a("a"),Odo=o("ViTFeatureExtractor"),Vdo=o(" (ViTMAE model)"),Xdo=l(),Eh=a("li"),qae=a("strong"),zdo=o("wav2vec2"),Qdo=o(" \u2014 "),$P=a("a"),Wdo=o("Wav2Vec2FeatureExtractor"),Hdo=o(" (Wav2Vec2 model)"),Udo=l(),Ch=a("li"),Nae=a("strong"),Jdo=o("yolos"),Ydo=o(" \u2014 "),kP=a("a"),Kdo=o("YolosFeatureExtractor"),Zdo=o(" (YOLOS model)"),eco=l(),F(wh.$$.fragment),oco=l(),F(Ah.$$.fragment),rco=l(),yh=a("div"),F(TA.$$.fragment),tco=l(),jae=a("p"),aco=o("Register a new feature extractor for this class."),TIe=l(),Fi=a("h2"),Lh=a("a"),Dae=a("span"),F(MA.$$.fragment),nco=l(),Gae=a("span"),sco=o("AutoProcessor"),MIe=l(),yo=a("div"),F(EA.$$.fragment),lco=l(),CA=a("p"),ico=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SP=a("a"),dco=o("AutoProcessor.from_pretrained()"),cco=o(" class method."),fco=l(),wA=a("p"),mco=o("This class cannot be instantiated directly using "),Oae=a("code"),gco=o("__init__()"),hco=o(" (throws an error)."),pco=l(),We=a("div"),F(AA.$$.fragment),uco=l(),Vae=a("p"),_co=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bco=l(),Ti=a("p"),vco=o("The processor class to instantiate is selected based on the "),Xae=a("code"),Fco=o("model_type"),Tco=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),Mco=o("pretrained_model_name_or_path"),Eco=o(" if possible):"),Cco=l(),be=a("ul"),xh=a("li"),Qae=a("strong"),wco=o("clip"),Aco=o(" \u2014 "),RP=a("a"),yco=o("CLIPProcessor"),Lco=o(" (CLIP model)"),xco=l(),$h=a("li"),Wae=a("strong"),$co=o("flava"),kco=o(" \u2014 "),Hae=a("code"),Sco=o("FLAVAProcessor"),Rco=o(" (Flava model)"),Bco=l(),kh=a("li"),Uae=a("strong"),Pco=o("layoutlmv2"),Ico=o(" \u2014 "),BP=a("a"),qco=o("LayoutLMv2Processor"),Nco=o(" (LayoutLMv2 model)"),jco=l(),Sh=a("li"),Jae=a("strong"),Dco=o("layoutxlm"),Gco=o(" \u2014 "),PP=a("a"),Oco=o("LayoutXLMProcessor"),Vco=o(" (LayoutXLM model)"),Xco=l(),Rh=a("li"),Yae=a("strong"),zco=o("sew"),Qco=o(" \u2014 "),IP=a("a"),Wco=o("Wav2Vec2Processor"),Hco=o(" (SEW model)"),Uco=l(),Bh=a("li"),Kae=a("strong"),Jco=o("sew-d"),Yco=o(" \u2014 "),qP=a("a"),Kco=o("Wav2Vec2Processor"),Zco=o(" (SEW-D model)"),efo=l(),Ph=a("li"),Zae=a("strong"),ofo=o("speech_to_text"),rfo=o(" \u2014 "),NP=a("a"),tfo=o("Speech2TextProcessor"),afo=o(" (Speech2Text model)"),nfo=l(),Ih=a("li"),ene=a("strong"),sfo=o("speech_to_text_2"),lfo=o(" \u2014 "),jP=a("a"),ifo=o("Speech2Text2Processor"),dfo=o(" (Speech2Text2 model)"),cfo=l(),qh=a("li"),one=a("strong"),ffo=o("trocr"),mfo=o(" \u2014 "),DP=a("a"),gfo=o("TrOCRProcessor"),hfo=o(" (TrOCR model)"),pfo=l(),Nh=a("li"),rne=a("strong"),ufo=o("unispeech"),_fo=o(" \u2014 "),GP=a("a"),bfo=o("Wav2Vec2Processor"),vfo=o(" (UniSpeech model)"),Ffo=l(),jh=a("li"),tne=a("strong"),Tfo=o("unispeech-sat"),Mfo=o(" \u2014 "),OP=a("a"),Efo=o("Wav2Vec2Processor"),Cfo=o(" (UniSpeechSat model)"),wfo=l(),Dh=a("li"),ane=a("strong"),Afo=o("vilt"),yfo=o(" \u2014 "),VP=a("a"),Lfo=o("ViltProcessor"),xfo=o(" (ViLT model)"),$fo=l(),Gh=a("li"),nne=a("strong"),kfo=o("vision-text-dual-encoder"),Sfo=o(" \u2014 "),XP=a("a"),Rfo=o("VisionTextDualEncoderProcessor"),Bfo=o(" (VisionTextDualEncoder model)"),Pfo=l(),Oh=a("li"),sne=a("strong"),Ifo=o("wav2vec2"),qfo=o(" \u2014 "),zP=a("a"),Nfo=o("Wav2Vec2Processor"),jfo=o(" (Wav2Vec2 model)"),Dfo=l(),Vh=a("li"),lne=a("strong"),Gfo=o("wavlm"),Ofo=o(" \u2014 "),QP=a("a"),Vfo=o("Wav2Vec2Processor"),Xfo=o(" (WavLM model)"),zfo=l(),F(Xh.$$.fragment),Qfo=l(),F(zh.$$.fragment),Wfo=l(),Qh=a("div"),F(yA.$$.fragment),Hfo=l(),ine=a("p"),Ufo=o("Register a new processor for this class."),EIe=l(),Mi=a("h2"),Wh=a("a"),dne=a("span"),F(LA.$$.fragment),Jfo=l(),cne=a("span"),Yfo=o("AutoModel"),CIe=l(),Lo=a("div"),F(xA.$$.fragment),Kfo=l(),Ei=a("p"),Zfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WP=a("a"),emo=o("from_pretrained()"),omo=o(" class method or the "),HP=a("a"),rmo=o("from_config()"),tmo=o(` class
method.`),amo=l(),$A=a("p"),nmo=o("This class cannot be instantiated directly using "),fne=a("code"),smo=o("__init__()"),lmo=o(" (throws an error)."),imo=l(),ot=a("div"),F(kA.$$.fragment),dmo=l(),mne=a("p"),cmo=o("Instantiates one of the base model classes of the library from a configuration."),fmo=l(),Ci=a("p"),mmo=o(`Note:
Loading a model from its configuration file does `),gne=a("strong"),gmo=o("not"),hmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UP=a("a"),pmo=o("from_pretrained()"),umo=o(" to load the model weights."),_mo=l(),F(Hh.$$.fragment),bmo=l(),He=a("div"),F(SA.$$.fragment),vmo=l(),hne=a("p"),Fmo=o("Instantiate one of the base model classes of the library from a pretrained model."),Tmo=l(),Aa=a("p"),Mmo=o("The model class to instantiate is selected based on the "),pne=a("code"),Emo=o("model_type"),Cmo=o(` property of the config object (either
passed as an argument or loaded from `),une=a("code"),wmo=o("pretrained_model_name_or_path"),Amo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=a("code"),ymo=o("pretrained_model_name_or_path"),Lmo=o(":"),xmo=l(),x=a("ul"),Uh=a("li"),bne=a("strong"),$mo=o("albert"),kmo=o(" \u2014 "),JP=a("a"),Smo=o("AlbertModel"),Rmo=o(" (ALBERT model)"),Bmo=l(),Jh=a("li"),vne=a("strong"),Pmo=o("bart"),Imo=o(" \u2014 "),YP=a("a"),qmo=o("BartModel"),Nmo=o(" (BART model)"),jmo=l(),Yh=a("li"),Fne=a("strong"),Dmo=o("beit"),Gmo=o(" \u2014 "),KP=a("a"),Omo=o("BeitModel"),Vmo=o(" (BEiT model)"),Xmo=l(),Kh=a("li"),Tne=a("strong"),zmo=o("bert"),Qmo=o(" \u2014 "),ZP=a("a"),Wmo=o("BertModel"),Hmo=o(" (BERT model)"),Umo=l(),Zh=a("li"),Mne=a("strong"),Jmo=o("bert-generation"),Ymo=o(" \u2014 "),eI=a("a"),Kmo=o("BertGenerationEncoder"),Zmo=o(" (Bert Generation model)"),ego=l(),ep=a("li"),Ene=a("strong"),ogo=o("big_bird"),rgo=o(" \u2014 "),oI=a("a"),tgo=o("BigBirdModel"),ago=o(" (BigBird model)"),ngo=l(),op=a("li"),Cne=a("strong"),sgo=o("bigbird_pegasus"),lgo=o(" \u2014 "),rI=a("a"),igo=o("BigBirdPegasusModel"),dgo=o(" (BigBirdPegasus model)"),cgo=l(),rp=a("li"),wne=a("strong"),fgo=o("bigscience176b"),mgo=o(" \u2014 "),tI=a("a"),ggo=o("BigScience176BModel"),hgo=o(" (BigScience176B model)"),pgo=l(),tp=a("li"),Ane=a("strong"),ugo=o("blenderbot"),_go=o(" \u2014 "),aI=a("a"),bgo=o("BlenderbotModel"),vgo=o(" (Blenderbot model)"),Fgo=l(),ap=a("li"),yne=a("strong"),Tgo=o("blenderbot-small"),Mgo=o(" \u2014 "),nI=a("a"),Ego=o("BlenderbotSmallModel"),Cgo=o(" (BlenderbotSmall model)"),wgo=l(),np=a("li"),Lne=a("strong"),Ago=o("camembert"),ygo=o(" \u2014 "),sI=a("a"),Lgo=o("CamembertModel"),xgo=o(" (CamemBERT model)"),$go=l(),sp=a("li"),xne=a("strong"),kgo=o("canine"),Sgo=o(" \u2014 "),lI=a("a"),Rgo=o("CanineModel"),Bgo=o(" (Canine model)"),Pgo=l(),lp=a("li"),$ne=a("strong"),Igo=o("clip"),qgo=o(" \u2014 "),iI=a("a"),Ngo=o("CLIPModel"),jgo=o(" (CLIP model)"),Dgo=l(),ip=a("li"),kne=a("strong"),Ggo=o("convbert"),Ogo=o(" \u2014 "),dI=a("a"),Vgo=o("ConvBertModel"),Xgo=o(" (ConvBERT model)"),zgo=l(),dp=a("li"),Sne=a("strong"),Qgo=o("convnext"),Wgo=o(" \u2014 "),cI=a("a"),Hgo=o("ConvNextModel"),Ugo=o(" (ConvNext model)"),Jgo=l(),cp=a("li"),Rne=a("strong"),Ygo=o("ctrl"),Kgo=o(" \u2014 "),fI=a("a"),Zgo=o("CTRLModel"),eho=o(" (CTRL model)"),oho=l(),fp=a("li"),Bne=a("strong"),rho=o("data2vec-audio"),tho=o(" \u2014 "),mI=a("a"),aho=o("Data2VecAudioModel"),nho=o(" (Data2VecAudio model)"),sho=l(),mp=a("li"),Pne=a("strong"),lho=o("data2vec-text"),iho=o(" \u2014 "),gI=a("a"),dho=o("Data2VecTextModel"),cho=o(" (Data2VecText model)"),fho=l(),gp=a("li"),Ine=a("strong"),mho=o("data2vec-vision"),gho=o(" \u2014 "),hI=a("a"),hho=o("Data2VecVisionModel"),pho=o(" (Data2VecVision model)"),uho=l(),hp=a("li"),qne=a("strong"),_ho=o("deberta"),bho=o(" \u2014 "),pI=a("a"),vho=o("DebertaModel"),Fho=o(" (DeBERTa model)"),Tho=l(),pp=a("li"),Nne=a("strong"),Mho=o("deberta-v2"),Eho=o(" \u2014 "),uI=a("a"),Cho=o("DebertaV2Model"),who=o(" (DeBERTa-v2 model)"),Aho=l(),up=a("li"),jne=a("strong"),yho=o("decision_transformer"),Lho=o(" \u2014 "),_I=a("a"),xho=o("DecisionTransformerModel"),$ho=o(" (Decision Transformer model)"),kho=l(),_p=a("li"),Dne=a("strong"),Sho=o("deit"),Rho=o(" \u2014 "),bI=a("a"),Bho=o("DeiTModel"),Pho=o(" (DeiT model)"),Iho=l(),bp=a("li"),Gne=a("strong"),qho=o("detr"),Nho=o(" \u2014 "),vI=a("a"),jho=o("DetrModel"),Dho=o(" (DETR model)"),Gho=l(),vp=a("li"),One=a("strong"),Oho=o("distilbert"),Vho=o(" \u2014 "),FI=a("a"),Xho=o("DistilBertModel"),zho=o(" (DistilBERT model)"),Qho=l(),Fp=a("li"),Vne=a("strong"),Who=o("dpr"),Hho=o(" \u2014 "),TI=a("a"),Uho=o("DPRQuestionEncoder"),Jho=o(" (DPR model)"),Yho=l(),Tp=a("li"),Xne=a("strong"),Kho=o("dpt"),Zho=o(" \u2014 "),MI=a("a"),epo=o("DPTModel"),opo=o(" (DPT model)"),rpo=l(),Mp=a("li"),zne=a("strong"),tpo=o("electra"),apo=o(" \u2014 "),EI=a("a"),npo=o("ElectraModel"),spo=o(" (ELECTRA model)"),lpo=l(),Ep=a("li"),Qne=a("strong"),ipo=o("flaubert"),dpo=o(" \u2014 "),CI=a("a"),cpo=o("FlaubertModel"),fpo=o(" (FlauBERT model)"),mpo=l(),Cp=a("li"),Wne=a("strong"),gpo=o("flava"),hpo=o(" \u2014 "),wI=a("a"),ppo=o("FlavaModel"),upo=o(" (Flava model)"),_po=l(),wp=a("li"),Hne=a("strong"),bpo=o("fnet"),vpo=o(" \u2014 "),AI=a("a"),Fpo=o("FNetModel"),Tpo=o(" (FNet model)"),Mpo=l(),Ap=a("li"),Une=a("strong"),Epo=o("fsmt"),Cpo=o(" \u2014 "),yI=a("a"),wpo=o("FSMTModel"),Apo=o(" (FairSeq Machine-Translation model)"),ypo=l(),Rs=a("li"),Jne=a("strong"),Lpo=o("funnel"),xpo=o(" \u2014 "),LI=a("a"),$po=o("FunnelModel"),kpo=o(" or "),xI=a("a"),Spo=o("FunnelBaseModel"),Rpo=o(" (Funnel Transformer model)"),Bpo=l(),yp=a("li"),Yne=a("strong"),Ppo=o("glpn"),Ipo=o(" \u2014 "),$I=a("a"),qpo=o("GLPNModel"),Npo=o(" (GLPN model)"),jpo=l(),Lp=a("li"),Kne=a("strong"),Dpo=o("gpt2"),Gpo=o(" \u2014 "),kI=a("a"),Opo=o("GPT2Model"),Vpo=o(" (OpenAI GPT-2 model)"),Xpo=l(),xp=a("li"),Zne=a("strong"),zpo=o("gpt_neo"),Qpo=o(" \u2014 "),SI=a("a"),Wpo=o("GPTNeoModel"),Hpo=o(" (GPT Neo model)"),Upo=l(),$p=a("li"),ese=a("strong"),Jpo=o("gptj"),Ypo=o(" \u2014 "),RI=a("a"),Kpo=o("GPTJModel"),Zpo=o(" (GPT-J model)"),euo=l(),kp=a("li"),ose=a("strong"),ouo=o("hubert"),ruo=o(" \u2014 "),BI=a("a"),tuo=o("HubertModel"),auo=o(" (Hubert model)"),nuo=l(),Sp=a("li"),rse=a("strong"),suo=o("ibert"),luo=o(" \u2014 "),PI=a("a"),iuo=o("IBertModel"),duo=o(" (I-BERT model)"),cuo=l(),Rp=a("li"),tse=a("strong"),fuo=o("imagegpt"),muo=o(" \u2014 "),II=a("a"),guo=o("ImageGPTModel"),huo=o(" (ImageGPT model)"),puo=l(),Bp=a("li"),ase=a("strong"),uuo=o("layoutlm"),_uo=o(" \u2014 "),qI=a("a"),buo=o("LayoutLMModel"),vuo=o(" (LayoutLM model)"),Fuo=l(),Pp=a("li"),nse=a("strong"),Tuo=o("layoutlmv2"),Muo=o(" \u2014 "),NI=a("a"),Euo=o("LayoutLMv2Model"),Cuo=o(" (LayoutLMv2 model)"),wuo=l(),Ip=a("li"),sse=a("strong"),Auo=o("led"),yuo=o(" \u2014 "),jI=a("a"),Luo=o("LEDModel"),xuo=o(" (LED model)"),$uo=l(),qp=a("li"),lse=a("strong"),kuo=o("longformer"),Suo=o(" \u2014 "),DI=a("a"),Ruo=o("LongformerModel"),Buo=o(" (Longformer model)"),Puo=l(),Np=a("li"),ise=a("strong"),Iuo=o("luke"),quo=o(" \u2014 "),GI=a("a"),Nuo=o("LukeModel"),juo=o(" (LUKE model)"),Duo=l(),jp=a("li"),dse=a("strong"),Guo=o("lxmert"),Ouo=o(" \u2014 "),OI=a("a"),Vuo=o("LxmertModel"),Xuo=o(" (LXMERT model)"),zuo=l(),Dp=a("li"),cse=a("strong"),Quo=o("m2m_100"),Wuo=o(" \u2014 "),VI=a("a"),Huo=o("M2M100Model"),Uuo=o(" (M2M100 model)"),Juo=l(),Gp=a("li"),fse=a("strong"),Yuo=o("marian"),Kuo=o(" \u2014 "),XI=a("a"),Zuo=o("MarianModel"),e_o=o(" (Marian model)"),o_o=l(),Op=a("li"),mse=a("strong"),r_o=o("maskformer"),t_o=o(" \u2014 "),zI=a("a"),a_o=o("MaskFormerModel"),n_o=o(" (MaskFormer model)"),s_o=l(),Vp=a("li"),gse=a("strong"),l_o=o("mbart"),i_o=o(" \u2014 "),QI=a("a"),d_o=o("MBartModel"),c_o=o(" (mBART model)"),f_o=l(),Xp=a("li"),hse=a("strong"),m_o=o("megatron-bert"),g_o=o(" \u2014 "),WI=a("a"),h_o=o("MegatronBertModel"),p_o=o(" (MegatronBert model)"),u_o=l(),zp=a("li"),pse=a("strong"),__o=o("mobilebert"),b_o=o(" \u2014 "),HI=a("a"),v_o=o("MobileBertModel"),F_o=o(" (MobileBERT model)"),T_o=l(),Qp=a("li"),use=a("strong"),M_o=o("mpnet"),E_o=o(" \u2014 "),UI=a("a"),C_o=o("MPNetModel"),w_o=o(" (MPNet model)"),A_o=l(),Wp=a("li"),_se=a("strong"),y_o=o("mt5"),L_o=o(" \u2014 "),JI=a("a"),x_o=o("MT5Model"),$_o=o(" (mT5 model)"),k_o=l(),Hp=a("li"),bse=a("strong"),S_o=o("nystromformer"),R_o=o(" \u2014 "),YI=a("a"),B_o=o("NystromformerModel"),P_o=o(" (Nystromformer model)"),I_o=l(),Up=a("li"),vse=a("strong"),q_o=o("openai-gpt"),N_o=o(" \u2014 "),KI=a("a"),j_o=o("OpenAIGPTModel"),D_o=o(" (OpenAI GPT model)"),G_o=l(),Jp=a("li"),Fse=a("strong"),O_o=o("opt"),V_o=o(" \u2014 "),ZI=a("a"),X_o=o("OPTModel"),z_o=o(" (OPT model)"),Q_o=l(),Yp=a("li"),Tse=a("strong"),W_o=o("pegasus"),H_o=o(" \u2014 "),eq=a("a"),U_o=o("PegasusModel"),J_o=o(" (Pegasus model)"),Y_o=l(),Kp=a("li"),Mse=a("strong"),K_o=o("perceiver"),Z_o=o(" \u2014 "),oq=a("a"),e2o=o("PerceiverModel"),o2o=o(" (Perceiver model)"),r2o=l(),Zp=a("li"),Ese=a("strong"),t2o=o("plbart"),a2o=o(" \u2014 "),rq=a("a"),n2o=o("PLBartModel"),s2o=o(" (PLBart model)"),l2o=l(),eu=a("li"),Cse=a("strong"),i2o=o("poolformer"),d2o=o(" \u2014 "),tq=a("a"),c2o=o("PoolFormerModel"),f2o=o(" (PoolFormer model)"),m2o=l(),ou=a("li"),wse=a("strong"),g2o=o("prophetnet"),h2o=o(" \u2014 "),aq=a("a"),p2o=o("ProphetNetModel"),u2o=o(" (ProphetNet model)"),_2o=l(),ru=a("li"),Ase=a("strong"),b2o=o("qdqbert"),v2o=o(" \u2014 "),nq=a("a"),F2o=o("QDQBertModel"),T2o=o(" (QDQBert model)"),M2o=l(),tu=a("li"),yse=a("strong"),E2o=o("reformer"),C2o=o(" \u2014 "),sq=a("a"),w2o=o("ReformerModel"),A2o=o(" (Reformer model)"),y2o=l(),au=a("li"),Lse=a("strong"),L2o=o("regnet"),x2o=o(" \u2014 "),lq=a("a"),$2o=o("RegNetModel"),k2o=o(" (RegNet model)"),S2o=l(),nu=a("li"),xse=a("strong"),R2o=o("rembert"),B2o=o(" \u2014 "),iq=a("a"),P2o=o("RemBertModel"),I2o=o(" (RemBERT model)"),q2o=l(),su=a("li"),$se=a("strong"),N2o=o("resnet"),j2o=o(" \u2014 "),dq=a("a"),D2o=o("ResNetModel"),G2o=o(" (ResNet model)"),O2o=l(),lu=a("li"),kse=a("strong"),V2o=o("retribert"),X2o=o(" \u2014 "),cq=a("a"),z2o=o("RetriBertModel"),Q2o=o(" (RetriBERT model)"),W2o=l(),iu=a("li"),Sse=a("strong"),H2o=o("roberta"),U2o=o(" \u2014 "),fq=a("a"),J2o=o("RobertaModel"),Y2o=o(" (RoBERTa model)"),K2o=l(),du=a("li"),Rse=a("strong"),Z2o=o("roformer"),e1o=o(" \u2014 "),mq=a("a"),o1o=o("RoFormerModel"),r1o=o(" (RoFormer model)"),t1o=l(),cu=a("li"),Bse=a("strong"),a1o=o("segformer"),n1o=o(" \u2014 "),gq=a("a"),s1o=o("SegformerModel"),l1o=o(" (SegFormer model)"),i1o=l(),fu=a("li"),Pse=a("strong"),d1o=o("sew"),c1o=o(" \u2014 "),hq=a("a"),f1o=o("SEWModel"),m1o=o(" (SEW model)"),g1o=l(),mu=a("li"),Ise=a("strong"),h1o=o("sew-d"),p1o=o(" \u2014 "),pq=a("a"),u1o=o("SEWDModel"),_1o=o(" (SEW-D model)"),b1o=l(),gu=a("li"),qse=a("strong"),v1o=o("speech_to_text"),F1o=o(" \u2014 "),uq=a("a"),T1o=o("Speech2TextModel"),M1o=o(" (Speech2Text model)"),E1o=l(),hu=a("li"),Nse=a("strong"),C1o=o("splinter"),w1o=o(" \u2014 "),_q=a("a"),A1o=o("SplinterModel"),y1o=o(" (Splinter model)"),L1o=l(),pu=a("li"),jse=a("strong"),x1o=o("squeezebert"),$1o=o(" \u2014 "),bq=a("a"),k1o=o("SqueezeBertModel"),S1o=o(" (SqueezeBERT model)"),R1o=l(),uu=a("li"),Dse=a("strong"),B1o=o("swin"),P1o=o(" \u2014 "),vq=a("a"),I1o=o("SwinModel"),q1o=o(" (Swin model)"),N1o=l(),_u=a("li"),Gse=a("strong"),j1o=o("t5"),D1o=o(" \u2014 "),Fq=a("a"),G1o=o("T5Model"),O1o=o(" (T5 model)"),V1o=l(),bu=a("li"),Ose=a("strong"),X1o=o("tapas"),z1o=o(" \u2014 "),Tq=a("a"),Q1o=o("TapasModel"),W1o=o(" (TAPAS model)"),H1o=l(),vu=a("li"),Vse=a("strong"),U1o=o("transfo-xl"),J1o=o(" \u2014 "),Mq=a("a"),Y1o=o("TransfoXLModel"),K1o=o(" (Transformer-XL model)"),Z1o=l(),Fu=a("li"),Xse=a("strong"),ebo=o("unispeech"),obo=o(" \u2014 "),Eq=a("a"),rbo=o("UniSpeechModel"),tbo=o(" (UniSpeech model)"),abo=l(),Tu=a("li"),zse=a("strong"),nbo=o("unispeech-sat"),sbo=o(" \u2014 "),Cq=a("a"),lbo=o("UniSpeechSatModel"),ibo=o(" (UniSpeechSat model)"),dbo=l(),Mu=a("li"),Qse=a("strong"),cbo=o("van"),fbo=o(" \u2014 "),wq=a("a"),mbo=o("VanModel"),gbo=o(" (VAN model)"),hbo=l(),Eu=a("li"),Wse=a("strong"),pbo=o("vilt"),ubo=o(" \u2014 "),Aq=a("a"),_bo=o("ViltModel"),bbo=o(" (ViLT model)"),vbo=l(),Cu=a("li"),Hse=a("strong"),Fbo=o("vision-text-dual-encoder"),Tbo=o(" \u2014 "),yq=a("a"),Mbo=o("VisionTextDualEncoderModel"),Ebo=o(" (VisionTextDualEncoder model)"),Cbo=l(),wu=a("li"),Use=a("strong"),wbo=o("visual_bert"),Abo=o(" \u2014 "),Lq=a("a"),ybo=o("VisualBertModel"),Lbo=o(" (VisualBert model)"),xbo=l(),Au=a("li"),Jse=a("strong"),$bo=o("vit"),kbo=o(" \u2014 "),xq=a("a"),Sbo=o("ViTModel"),Rbo=o(" (ViT model)"),Bbo=l(),yu=a("li"),Yse=a("strong"),Pbo=o("vit_mae"),Ibo=o(" \u2014 "),$q=a("a"),qbo=o("ViTMAEModel"),Nbo=o(" (ViTMAE model)"),jbo=l(),Lu=a("li"),Kse=a("strong"),Dbo=o("wav2vec2"),Gbo=o(" \u2014 "),kq=a("a"),Obo=o("Wav2Vec2Model"),Vbo=o(" (Wav2Vec2 model)"),Xbo=l(),xu=a("li"),Zse=a("strong"),zbo=o("wavlm"),Qbo=o(" \u2014 "),Sq=a("a"),Wbo=o("WavLMModel"),Hbo=o(" (WavLM model)"),Ubo=l(),$u=a("li"),ele=a("strong"),Jbo=o("xglm"),Ybo=o(" \u2014 "),Rq=a("a"),Kbo=o("XGLMModel"),Zbo=o(" (XGLM model)"),evo=l(),ku=a("li"),ole=a("strong"),ovo=o("xlm"),rvo=o(" \u2014 "),Bq=a("a"),tvo=o("XLMModel"),avo=o(" (XLM model)"),nvo=l(),Su=a("li"),rle=a("strong"),svo=o("xlm-prophetnet"),lvo=o(" \u2014 "),Pq=a("a"),ivo=o("XLMProphetNetModel"),dvo=o(" (XLMProphetNet model)"),cvo=l(),Ru=a("li"),tle=a("strong"),fvo=o("xlm-roberta"),mvo=o(" \u2014 "),Iq=a("a"),gvo=o("XLMRobertaModel"),hvo=o(" (XLM-RoBERTa model)"),pvo=l(),Bu=a("li"),ale=a("strong"),uvo=o("xlm-roberta-xl"),_vo=o(" \u2014 "),qq=a("a"),bvo=o("XLMRobertaXLModel"),vvo=o(" (XLM-RoBERTa-XL model)"),Fvo=l(),Pu=a("li"),nle=a("strong"),Tvo=o("xlnet"),Mvo=o(" \u2014 "),Nq=a("a"),Evo=o("XLNetModel"),Cvo=o(" (XLNet model)"),wvo=l(),Iu=a("li"),sle=a("strong"),Avo=o("yolos"),yvo=o(" \u2014 "),jq=a("a"),Lvo=o("YolosModel"),xvo=o(" (YOLOS model)"),$vo=l(),qu=a("li"),lle=a("strong"),kvo=o("yoso"),Svo=o(" \u2014 "),Dq=a("a"),Rvo=o("YosoModel"),Bvo=o(" (YOSO model)"),Pvo=l(),Nu=a("p"),Ivo=o("The model is set in evaluation mode by default using "),ile=a("code"),qvo=o("model.eval()"),Nvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),jvo=o("model.train()"),Dvo=l(),F(ju.$$.fragment),wIe=l(),wi=a("h2"),Du=a("a"),cle=a("span"),F(RA.$$.fragment),Gvo=l(),fle=a("span"),Ovo=o("AutoModelForPreTraining"),AIe=l(),xo=a("div"),F(BA.$$.fragment),Vvo=l(),Ai=a("p"),Xvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gq=a("a"),zvo=o("from_pretrained()"),Qvo=o(" class method or the "),Oq=a("a"),Wvo=o("from_config()"),Hvo=o(` class
method.`),Uvo=l(),PA=a("p"),Jvo=o("This class cannot be instantiated directly using "),mle=a("code"),Yvo=o("__init__()"),Kvo=o(" (throws an error)."),Zvo=l(),rt=a("div"),F(IA.$$.fragment),eFo=l(),gle=a("p"),oFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rFo=l(),yi=a("p"),tFo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),aFo=o("not"),nFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=a("a"),sFo=o("from_pretrained()"),lFo=o(" to load the model weights."),iFo=l(),F(Gu.$$.fragment),dFo=l(),Ue=a("div"),F(qA.$$.fragment),cFo=l(),ple=a("p"),fFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mFo=l(),ya=a("p"),gFo=o("The model class to instantiate is selected based on the "),ule=a("code"),hFo=o("model_type"),pFo=o(` property of the config object (either
passed as an argument or loaded from `),_le=a("code"),uFo=o("pretrained_model_name_or_path"),_Fo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),bFo=o("pretrained_model_name_or_path"),vFo=o(":"),FFo=l(),G=a("ul"),Ou=a("li"),vle=a("strong"),TFo=o("albert"),MFo=o(" \u2014 "),Xq=a("a"),EFo=o("AlbertForPreTraining"),CFo=o(" (ALBERT model)"),wFo=l(),Vu=a("li"),Fle=a("strong"),AFo=o("bart"),yFo=o(" \u2014 "),zq=a("a"),LFo=o("BartForConditionalGeneration"),xFo=o(" (BART model)"),$Fo=l(),Xu=a("li"),Tle=a("strong"),kFo=o("bert"),SFo=o(" \u2014 "),Qq=a("a"),RFo=o("BertForPreTraining"),BFo=o(" (BERT model)"),PFo=l(),zu=a("li"),Mle=a("strong"),IFo=o("big_bird"),qFo=o(" \u2014 "),Wq=a("a"),NFo=o("BigBirdForPreTraining"),jFo=o(" (BigBird model)"),DFo=l(),Qu=a("li"),Ele=a("strong"),GFo=o("bigscience176b"),OFo=o(" \u2014 "),Hq=a("a"),VFo=o("BigScience176BLMHeadModel"),XFo=o(" (BigScience176B model)"),zFo=l(),Wu=a("li"),Cle=a("strong"),QFo=o("camembert"),WFo=o(" \u2014 "),Uq=a("a"),HFo=o("CamembertForMaskedLM"),UFo=o(" (CamemBERT model)"),JFo=l(),Hu=a("li"),wle=a("strong"),YFo=o("ctrl"),KFo=o(" \u2014 "),Jq=a("a"),ZFo=o("CTRLLMHeadModel"),e0o=o(" (CTRL model)"),o0o=l(),Uu=a("li"),Ale=a("strong"),r0o=o("data2vec-text"),t0o=o(" \u2014 "),Yq=a("a"),a0o=o("Data2VecTextForMaskedLM"),n0o=o(" (Data2VecText model)"),s0o=l(),Ju=a("li"),yle=a("strong"),l0o=o("deberta"),i0o=o(" \u2014 "),Kq=a("a"),d0o=o("DebertaForMaskedLM"),c0o=o(" (DeBERTa model)"),f0o=l(),Yu=a("li"),Lle=a("strong"),m0o=o("deberta-v2"),g0o=o(" \u2014 "),Zq=a("a"),h0o=o("DebertaV2ForMaskedLM"),p0o=o(" (DeBERTa-v2 model)"),u0o=l(),Ku=a("li"),xle=a("strong"),_0o=o("distilbert"),b0o=o(" \u2014 "),eN=a("a"),v0o=o("DistilBertForMaskedLM"),F0o=o(" (DistilBERT model)"),T0o=l(),Zu=a("li"),$le=a("strong"),M0o=o("electra"),E0o=o(" \u2014 "),oN=a("a"),C0o=o("ElectraForPreTraining"),w0o=o(" (ELECTRA model)"),A0o=l(),e_=a("li"),kle=a("strong"),y0o=o("flaubert"),L0o=o(" \u2014 "),rN=a("a"),x0o=o("FlaubertWithLMHeadModel"),$0o=o(" (FlauBERT model)"),k0o=l(),o_=a("li"),Sle=a("strong"),S0o=o("flava"),R0o=o(" \u2014 "),tN=a("a"),B0o=o("FlavaForPreTraining"),P0o=o(" (Flava model)"),I0o=l(),r_=a("li"),Rle=a("strong"),q0o=o("fnet"),N0o=o(" \u2014 "),aN=a("a"),j0o=o("FNetForPreTraining"),D0o=o(" (FNet model)"),G0o=l(),t_=a("li"),Ble=a("strong"),O0o=o("fsmt"),V0o=o(" \u2014 "),nN=a("a"),X0o=o("FSMTForConditionalGeneration"),z0o=o(" (FairSeq Machine-Translation model)"),Q0o=l(),a_=a("li"),Ple=a("strong"),W0o=o("funnel"),H0o=o(" \u2014 "),sN=a("a"),U0o=o("FunnelForPreTraining"),J0o=o(" (Funnel Transformer model)"),Y0o=l(),n_=a("li"),Ile=a("strong"),K0o=o("gpt2"),Z0o=o(" \u2014 "),lN=a("a"),eTo=o("GPT2LMHeadModel"),oTo=o(" (OpenAI GPT-2 model)"),rTo=l(),s_=a("li"),qle=a("strong"),tTo=o("ibert"),aTo=o(" \u2014 "),iN=a("a"),nTo=o("IBertForMaskedLM"),sTo=o(" (I-BERT model)"),lTo=l(),l_=a("li"),Nle=a("strong"),iTo=o("layoutlm"),dTo=o(" \u2014 "),dN=a("a"),cTo=o("LayoutLMForMaskedLM"),fTo=o(" (LayoutLM model)"),mTo=l(),i_=a("li"),jle=a("strong"),gTo=o("longformer"),hTo=o(" \u2014 "),cN=a("a"),pTo=o("LongformerForMaskedLM"),uTo=o(" (Longformer model)"),_To=l(),d_=a("li"),Dle=a("strong"),bTo=o("lxmert"),vTo=o(" \u2014 "),fN=a("a"),FTo=o("LxmertForPreTraining"),TTo=o(" (LXMERT model)"),MTo=l(),c_=a("li"),Gle=a("strong"),ETo=o("megatron-bert"),CTo=o(" \u2014 "),mN=a("a"),wTo=o("MegatronBertForPreTraining"),ATo=o(" (MegatronBert model)"),yTo=l(),f_=a("li"),Ole=a("strong"),LTo=o("mobilebert"),xTo=o(" \u2014 "),gN=a("a"),$To=o("MobileBertForPreTraining"),kTo=o(" (MobileBERT model)"),STo=l(),m_=a("li"),Vle=a("strong"),RTo=o("mpnet"),BTo=o(" \u2014 "),hN=a("a"),PTo=o("MPNetForMaskedLM"),ITo=o(" (MPNet model)"),qTo=l(),g_=a("li"),Xle=a("strong"),NTo=o("openai-gpt"),jTo=o(" \u2014 "),pN=a("a"),DTo=o("OpenAIGPTLMHeadModel"),GTo=o(" (OpenAI GPT model)"),OTo=l(),h_=a("li"),zle=a("strong"),VTo=o("retribert"),XTo=o(" \u2014 "),uN=a("a"),zTo=o("RetriBertModel"),QTo=o(" (RetriBERT model)"),WTo=l(),p_=a("li"),Qle=a("strong"),HTo=o("roberta"),UTo=o(" \u2014 "),_N=a("a"),JTo=o("RobertaForMaskedLM"),YTo=o(" (RoBERTa model)"),KTo=l(),u_=a("li"),Wle=a("strong"),ZTo=o("squeezebert"),e7o=o(" \u2014 "),bN=a("a"),o7o=o("SqueezeBertForMaskedLM"),r7o=o(" (SqueezeBERT model)"),t7o=l(),__=a("li"),Hle=a("strong"),a7o=o("t5"),n7o=o(" \u2014 "),vN=a("a"),s7o=o("T5ForConditionalGeneration"),l7o=o(" (T5 model)"),i7o=l(),b_=a("li"),Ule=a("strong"),d7o=o("tapas"),c7o=o(" \u2014 "),FN=a("a"),f7o=o("TapasForMaskedLM"),m7o=o(" (TAPAS model)"),g7o=l(),v_=a("li"),Jle=a("strong"),h7o=o("transfo-xl"),p7o=o(" \u2014 "),TN=a("a"),u7o=o("TransfoXLLMHeadModel"),_7o=o(" (Transformer-XL model)"),b7o=l(),F_=a("li"),Yle=a("strong"),v7o=o("unispeech"),F7o=o(" \u2014 "),MN=a("a"),T7o=o("UniSpeechForPreTraining"),M7o=o(" (UniSpeech model)"),E7o=l(),T_=a("li"),Kle=a("strong"),C7o=o("unispeech-sat"),w7o=o(" \u2014 "),EN=a("a"),A7o=o("UniSpeechSatForPreTraining"),y7o=o(" (UniSpeechSat model)"),L7o=l(),M_=a("li"),Zle=a("strong"),x7o=o("visual_bert"),$7o=o(" \u2014 "),CN=a("a"),k7o=o("VisualBertForPreTraining"),S7o=o(" (VisualBert model)"),R7o=l(),E_=a("li"),eie=a("strong"),B7o=o("vit_mae"),P7o=o(" \u2014 "),wN=a("a"),I7o=o("ViTMAEForPreTraining"),q7o=o(" (ViTMAE model)"),N7o=l(),C_=a("li"),oie=a("strong"),j7o=o("wav2vec2"),D7o=o(" \u2014 "),AN=a("a"),G7o=o("Wav2Vec2ForPreTraining"),O7o=o(" (Wav2Vec2 model)"),V7o=l(),w_=a("li"),rie=a("strong"),X7o=o("xlm"),z7o=o(" \u2014 "),yN=a("a"),Q7o=o("XLMWithLMHeadModel"),W7o=o(" (XLM model)"),H7o=l(),A_=a("li"),tie=a("strong"),U7o=o("xlm-roberta"),J7o=o(" \u2014 "),LN=a("a"),Y7o=o("XLMRobertaForMaskedLM"),K7o=o(" (XLM-RoBERTa model)"),Z7o=l(),y_=a("li"),aie=a("strong"),eMo=o("xlm-roberta-xl"),oMo=o(" \u2014 "),xN=a("a"),rMo=o("XLMRobertaXLForMaskedLM"),tMo=o(" (XLM-RoBERTa-XL model)"),aMo=l(),L_=a("li"),nie=a("strong"),nMo=o("xlnet"),sMo=o(" \u2014 "),$N=a("a"),lMo=o("XLNetLMHeadModel"),iMo=o(" (XLNet model)"),dMo=l(),x_=a("p"),cMo=o("The model is set in evaluation mode by default using "),sie=a("code"),fMo=o("model.eval()"),mMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=a("code"),gMo=o("model.train()"),hMo=l(),F($_.$$.fragment),yIe=l(),Li=a("h2"),k_=a("a"),iie=a("span"),F(NA.$$.fragment),pMo=l(),die=a("span"),uMo=o("AutoModelForCausalLM"),LIe=l(),$o=a("div"),F(jA.$$.fragment),_Mo=l(),xi=a("p"),bMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kN=a("a"),vMo=o("from_pretrained()"),FMo=o(" class method or the "),SN=a("a"),TMo=o("from_config()"),MMo=o(` class
method.`),EMo=l(),DA=a("p"),CMo=o("This class cannot be instantiated directly using "),cie=a("code"),wMo=o("__init__()"),AMo=o(" (throws an error)."),yMo=l(),tt=a("div"),F(GA.$$.fragment),LMo=l(),fie=a("p"),xMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Mo=l(),$i=a("p"),kMo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),SMo=o("not"),RMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=a("a"),BMo=o("from_pretrained()"),PMo=o(" to load the model weights."),IMo=l(),F(S_.$$.fragment),qMo=l(),Je=a("div"),F(OA.$$.fragment),NMo=l(),gie=a("p"),jMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DMo=l(),La=a("p"),GMo=o("The model class to instantiate is selected based on the "),hie=a("code"),OMo=o("model_type"),VMo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),XMo=o("pretrained_model_name_or_path"),zMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),QMo=o("pretrained_model_name_or_path"),WMo=o(":"),HMo=l(),z=a("ul"),R_=a("li"),_ie=a("strong"),UMo=o("bart"),JMo=o(" \u2014 "),BN=a("a"),YMo=o("BartForCausalLM"),KMo=o(" (BART model)"),ZMo=l(),B_=a("li"),bie=a("strong"),e4o=o("bert"),o4o=o(" \u2014 "),PN=a("a"),r4o=o("BertLMHeadModel"),t4o=o(" (BERT model)"),a4o=l(),P_=a("li"),vie=a("strong"),n4o=o("bert-generation"),s4o=o(" \u2014 "),IN=a("a"),l4o=o("BertGenerationDecoder"),i4o=o(" (Bert Generation model)"),d4o=l(),I_=a("li"),Fie=a("strong"),c4o=o("big_bird"),f4o=o(" \u2014 "),qN=a("a"),m4o=o("BigBirdForCausalLM"),g4o=o(" (BigBird model)"),h4o=l(),q_=a("li"),Tie=a("strong"),p4o=o("bigbird_pegasus"),u4o=o(" \u2014 "),NN=a("a"),_4o=o("BigBirdPegasusForCausalLM"),b4o=o(" (BigBirdPegasus model)"),v4o=l(),N_=a("li"),Mie=a("strong"),F4o=o("bigscience176b"),T4o=o(" \u2014 "),jN=a("a"),M4o=o("BigScience176BLMHeadModel"),E4o=o(" (BigScience176B model)"),C4o=l(),j_=a("li"),Eie=a("strong"),w4o=o("blenderbot"),A4o=o(" \u2014 "),DN=a("a"),y4o=o("BlenderbotForCausalLM"),L4o=o(" (Blenderbot model)"),x4o=l(),D_=a("li"),Cie=a("strong"),$4o=o("blenderbot-small"),k4o=o(" \u2014 "),GN=a("a"),S4o=o("BlenderbotSmallForCausalLM"),R4o=o(" (BlenderbotSmall model)"),B4o=l(),G_=a("li"),wie=a("strong"),P4o=o("camembert"),I4o=o(" \u2014 "),ON=a("a"),q4o=o("CamembertForCausalLM"),N4o=o(" (CamemBERT model)"),j4o=l(),O_=a("li"),Aie=a("strong"),D4o=o("ctrl"),G4o=o(" \u2014 "),VN=a("a"),O4o=o("CTRLLMHeadModel"),V4o=o(" (CTRL model)"),X4o=l(),V_=a("li"),yie=a("strong"),z4o=o("data2vec-text"),Q4o=o(" \u2014 "),XN=a("a"),W4o=o("Data2VecTextForCausalLM"),H4o=o(" (Data2VecText model)"),U4o=l(),X_=a("li"),Lie=a("strong"),J4o=o("electra"),Y4o=o(" \u2014 "),zN=a("a"),K4o=o("ElectraForCausalLM"),Z4o=o(" (ELECTRA model)"),eEo=l(),z_=a("li"),xie=a("strong"),oEo=o("gpt2"),rEo=o(" \u2014 "),QN=a("a"),tEo=o("GPT2LMHeadModel"),aEo=o(" (OpenAI GPT-2 model)"),nEo=l(),Q_=a("li"),$ie=a("strong"),sEo=o("gpt_neo"),lEo=o(" \u2014 "),WN=a("a"),iEo=o("GPTNeoForCausalLM"),dEo=o(" (GPT Neo model)"),cEo=l(),W_=a("li"),kie=a("strong"),fEo=o("gptj"),mEo=o(" \u2014 "),HN=a("a"),gEo=o("GPTJForCausalLM"),hEo=o(" (GPT-J model)"),pEo=l(),H_=a("li"),Sie=a("strong"),uEo=o("marian"),_Eo=o(" \u2014 "),UN=a("a"),bEo=o("MarianForCausalLM"),vEo=o(" (Marian model)"),FEo=l(),U_=a("li"),Rie=a("strong"),TEo=o("mbart"),MEo=o(" \u2014 "),JN=a("a"),EEo=o("MBartForCausalLM"),CEo=o(" (mBART model)"),wEo=l(),J_=a("li"),Bie=a("strong"),AEo=o("megatron-bert"),yEo=o(" \u2014 "),YN=a("a"),LEo=o("MegatronBertForCausalLM"),xEo=o(" (MegatronBert model)"),$Eo=l(),Y_=a("li"),Pie=a("strong"),kEo=o("openai-gpt"),SEo=o(" \u2014 "),KN=a("a"),REo=o("OpenAIGPTLMHeadModel"),BEo=o(" (OpenAI GPT model)"),PEo=l(),K_=a("li"),Iie=a("strong"),IEo=o("opt"),qEo=o(" \u2014 "),ZN=a("a"),NEo=o("OPTForCausalLM"),jEo=o(" (OPT model)"),DEo=l(),Z_=a("li"),qie=a("strong"),GEo=o("pegasus"),OEo=o(" \u2014 "),ej=a("a"),VEo=o("PegasusForCausalLM"),XEo=o(" (Pegasus model)"),zEo=l(),e2=a("li"),Nie=a("strong"),QEo=o("plbart"),WEo=o(" \u2014 "),oj=a("a"),HEo=o("PLBartForCausalLM"),UEo=o(" (PLBart model)"),JEo=l(),o2=a("li"),jie=a("strong"),YEo=o("prophetnet"),KEo=o(" \u2014 "),rj=a("a"),ZEo=o("ProphetNetForCausalLM"),e5o=o(" (ProphetNet model)"),o5o=l(),r2=a("li"),Die=a("strong"),r5o=o("qdqbert"),t5o=o(" \u2014 "),tj=a("a"),a5o=o("QDQBertLMHeadModel"),n5o=o(" (QDQBert model)"),s5o=l(),t2=a("li"),Gie=a("strong"),l5o=o("reformer"),i5o=o(" \u2014 "),aj=a("a"),d5o=o("ReformerModelWithLMHead"),c5o=o(" (Reformer model)"),f5o=l(),a2=a("li"),Oie=a("strong"),m5o=o("rembert"),g5o=o(" \u2014 "),nj=a("a"),h5o=o("RemBertForCausalLM"),p5o=o(" (RemBERT model)"),u5o=l(),n2=a("li"),Vie=a("strong"),_5o=o("roberta"),b5o=o(" \u2014 "),sj=a("a"),v5o=o("RobertaForCausalLM"),F5o=o(" (RoBERTa model)"),T5o=l(),s2=a("li"),Xie=a("strong"),M5o=o("roformer"),E5o=o(" \u2014 "),lj=a("a"),C5o=o("RoFormerForCausalLM"),w5o=o(" (RoFormer model)"),A5o=l(),l2=a("li"),zie=a("strong"),y5o=o("speech_to_text_2"),L5o=o(" \u2014 "),ij=a("a"),x5o=o("Speech2Text2ForCausalLM"),$5o=o(" (Speech2Text2 model)"),k5o=l(),i2=a("li"),Qie=a("strong"),S5o=o("transfo-xl"),R5o=o(" \u2014 "),dj=a("a"),B5o=o("TransfoXLLMHeadModel"),P5o=o(" (Transformer-XL model)"),I5o=l(),d2=a("li"),Wie=a("strong"),q5o=o("trocr"),N5o=o(" \u2014 "),cj=a("a"),j5o=o("TrOCRForCausalLM"),D5o=o(" (TrOCR model)"),G5o=l(),c2=a("li"),Hie=a("strong"),O5o=o("xglm"),V5o=o(" \u2014 "),fj=a("a"),X5o=o("XGLMForCausalLM"),z5o=o(" (XGLM model)"),Q5o=l(),f2=a("li"),Uie=a("strong"),W5o=o("xlm"),H5o=o(" \u2014 "),mj=a("a"),U5o=o("XLMWithLMHeadModel"),J5o=o(" (XLM model)"),Y5o=l(),m2=a("li"),Jie=a("strong"),K5o=o("xlm-prophetnet"),Z5o=o(" \u2014 "),gj=a("a"),eCo=o("XLMProphetNetForCausalLM"),oCo=o(" (XLMProphetNet model)"),rCo=l(),g2=a("li"),Yie=a("strong"),tCo=o("xlm-roberta"),aCo=o(" \u2014 "),hj=a("a"),nCo=o("XLMRobertaForCausalLM"),sCo=o(" (XLM-RoBERTa model)"),lCo=l(),h2=a("li"),Kie=a("strong"),iCo=o("xlm-roberta-xl"),dCo=o(" \u2014 "),pj=a("a"),cCo=o("XLMRobertaXLForCausalLM"),fCo=o(" (XLM-RoBERTa-XL model)"),mCo=l(),p2=a("li"),Zie=a("strong"),gCo=o("xlnet"),hCo=o(" \u2014 "),uj=a("a"),pCo=o("XLNetLMHeadModel"),uCo=o(" (XLNet model)"),_Co=l(),u2=a("p"),bCo=o("The model is set in evaluation mode by default using "),ede=a("code"),vCo=o("model.eval()"),FCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),TCo=o("model.train()"),MCo=l(),F(_2.$$.fragment),xIe=l(),ki=a("h2"),b2=a("a"),rde=a("span"),F(VA.$$.fragment),ECo=l(),tde=a("span"),CCo=o("AutoModelForMaskedLM"),$Ie=l(),ko=a("div"),F(XA.$$.fragment),wCo=l(),Si=a("p"),ACo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_j=a("a"),yCo=o("from_pretrained()"),LCo=o(" class method or the "),bj=a("a"),xCo=o("from_config()"),$Co=o(` class
method.`),kCo=l(),zA=a("p"),SCo=o("This class cannot be instantiated directly using "),ade=a("code"),RCo=o("__init__()"),BCo=o(" (throws an error)."),PCo=l(),at=a("div"),F(QA.$$.fragment),ICo=l(),nde=a("p"),qCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NCo=l(),Ri=a("p"),jCo=o(`Note:
Loading a model from its configuration file does `),sde=a("strong"),DCo=o("not"),GCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vj=a("a"),OCo=o("from_pretrained()"),VCo=o(" to load the model weights."),XCo=l(),F(v2.$$.fragment),zCo=l(),Ye=a("div"),F(WA.$$.fragment),QCo=l(),lde=a("p"),WCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HCo=l(),xa=a("p"),UCo=o("The model class to instantiate is selected based on the "),ide=a("code"),JCo=o("model_type"),YCo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),KCo=o("pretrained_model_name_or_path"),ZCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),e3o=o("pretrained_model_name_or_path"),o3o=o(":"),r3o=l(),W=a("ul"),F2=a("li"),fde=a("strong"),t3o=o("albert"),a3o=o(" \u2014 "),Fj=a("a"),n3o=o("AlbertForMaskedLM"),s3o=o(" (ALBERT model)"),l3o=l(),T2=a("li"),mde=a("strong"),i3o=o("bart"),d3o=o(" \u2014 "),Tj=a("a"),c3o=o("BartForConditionalGeneration"),f3o=o(" (BART model)"),m3o=l(),M2=a("li"),gde=a("strong"),g3o=o("bert"),h3o=o(" \u2014 "),Mj=a("a"),p3o=o("BertForMaskedLM"),u3o=o(" (BERT model)"),_3o=l(),E2=a("li"),hde=a("strong"),b3o=o("big_bird"),v3o=o(" \u2014 "),Ej=a("a"),F3o=o("BigBirdForMaskedLM"),T3o=o(" (BigBird model)"),M3o=l(),C2=a("li"),pde=a("strong"),E3o=o("camembert"),C3o=o(" \u2014 "),Cj=a("a"),w3o=o("CamembertForMaskedLM"),A3o=o(" (CamemBERT model)"),y3o=l(),w2=a("li"),ude=a("strong"),L3o=o("convbert"),x3o=o(" \u2014 "),wj=a("a"),$3o=o("ConvBertForMaskedLM"),k3o=o(" (ConvBERT model)"),S3o=l(),A2=a("li"),_de=a("strong"),R3o=o("data2vec-text"),B3o=o(" \u2014 "),Aj=a("a"),P3o=o("Data2VecTextForMaskedLM"),I3o=o(" (Data2VecText model)"),q3o=l(),y2=a("li"),bde=a("strong"),N3o=o("deberta"),j3o=o(" \u2014 "),yj=a("a"),D3o=o("DebertaForMaskedLM"),G3o=o(" (DeBERTa model)"),O3o=l(),L2=a("li"),vde=a("strong"),V3o=o("deberta-v2"),X3o=o(" \u2014 "),Lj=a("a"),z3o=o("DebertaV2ForMaskedLM"),Q3o=o(" (DeBERTa-v2 model)"),W3o=l(),x2=a("li"),Fde=a("strong"),H3o=o("distilbert"),U3o=o(" \u2014 "),xj=a("a"),J3o=o("DistilBertForMaskedLM"),Y3o=o(" (DistilBERT model)"),K3o=l(),$2=a("li"),Tde=a("strong"),Z3o=o("electra"),ewo=o(" \u2014 "),$j=a("a"),owo=o("ElectraForMaskedLM"),rwo=o(" (ELECTRA model)"),two=l(),k2=a("li"),Mde=a("strong"),awo=o("flaubert"),nwo=o(" \u2014 "),kj=a("a"),swo=o("FlaubertWithLMHeadModel"),lwo=o(" (FlauBERT model)"),iwo=l(),S2=a("li"),Ede=a("strong"),dwo=o("fnet"),cwo=o(" \u2014 "),Sj=a("a"),fwo=o("FNetForMaskedLM"),mwo=o(" (FNet model)"),gwo=l(),R2=a("li"),Cde=a("strong"),hwo=o("funnel"),pwo=o(" \u2014 "),Rj=a("a"),uwo=o("FunnelForMaskedLM"),_wo=o(" (Funnel Transformer model)"),bwo=l(),B2=a("li"),wde=a("strong"),vwo=o("ibert"),Fwo=o(" \u2014 "),Bj=a("a"),Two=o("IBertForMaskedLM"),Mwo=o(" (I-BERT model)"),Ewo=l(),P2=a("li"),Ade=a("strong"),Cwo=o("layoutlm"),wwo=o(" \u2014 "),Pj=a("a"),Awo=o("LayoutLMForMaskedLM"),ywo=o(" (LayoutLM model)"),Lwo=l(),I2=a("li"),yde=a("strong"),xwo=o("longformer"),$wo=o(" \u2014 "),Ij=a("a"),kwo=o("LongformerForMaskedLM"),Swo=o(" (Longformer model)"),Rwo=l(),q2=a("li"),Lde=a("strong"),Bwo=o("mbart"),Pwo=o(" \u2014 "),qj=a("a"),Iwo=o("MBartForConditionalGeneration"),qwo=o(" (mBART model)"),Nwo=l(),N2=a("li"),xde=a("strong"),jwo=o("megatron-bert"),Dwo=o(" \u2014 "),Nj=a("a"),Gwo=o("MegatronBertForMaskedLM"),Owo=o(" (MegatronBert model)"),Vwo=l(),j2=a("li"),$de=a("strong"),Xwo=o("mobilebert"),zwo=o(" \u2014 "),jj=a("a"),Qwo=o("MobileBertForMaskedLM"),Wwo=o(" (MobileBERT model)"),Hwo=l(),D2=a("li"),kde=a("strong"),Uwo=o("mpnet"),Jwo=o(" \u2014 "),Dj=a("a"),Ywo=o("MPNetForMaskedLM"),Kwo=o(" (MPNet model)"),Zwo=l(),G2=a("li"),Sde=a("strong"),e6o=o("nystromformer"),o6o=o(" \u2014 "),Gj=a("a"),r6o=o("NystromformerForMaskedLM"),t6o=o(" (Nystromformer model)"),a6o=l(),O2=a("li"),Rde=a("strong"),n6o=o("perceiver"),s6o=o(" \u2014 "),Oj=a("a"),l6o=o("PerceiverForMaskedLM"),i6o=o(" (Perceiver model)"),d6o=l(),V2=a("li"),Bde=a("strong"),c6o=o("qdqbert"),f6o=o(" \u2014 "),Vj=a("a"),m6o=o("QDQBertForMaskedLM"),g6o=o(" (QDQBert model)"),h6o=l(),X2=a("li"),Pde=a("strong"),p6o=o("reformer"),u6o=o(" \u2014 "),Xj=a("a"),_6o=o("ReformerForMaskedLM"),b6o=o(" (Reformer model)"),v6o=l(),z2=a("li"),Ide=a("strong"),F6o=o("rembert"),T6o=o(" \u2014 "),zj=a("a"),M6o=o("RemBertForMaskedLM"),E6o=o(" (RemBERT model)"),C6o=l(),Q2=a("li"),qde=a("strong"),w6o=o("roberta"),A6o=o(" \u2014 "),Qj=a("a"),y6o=o("RobertaForMaskedLM"),L6o=o(" (RoBERTa model)"),x6o=l(),W2=a("li"),Nde=a("strong"),$6o=o("roformer"),k6o=o(" \u2014 "),Wj=a("a"),S6o=o("RoFormerForMaskedLM"),R6o=o(" (RoFormer model)"),B6o=l(),H2=a("li"),jde=a("strong"),P6o=o("squeezebert"),I6o=o(" \u2014 "),Hj=a("a"),q6o=o("SqueezeBertForMaskedLM"),N6o=o(" (SqueezeBERT model)"),j6o=l(),U2=a("li"),Dde=a("strong"),D6o=o("tapas"),G6o=o(" \u2014 "),Uj=a("a"),O6o=o("TapasForMaskedLM"),V6o=o(" (TAPAS model)"),X6o=l(),J2=a("li"),Gde=a("strong"),z6o=o("wav2vec2"),Q6o=o(" \u2014 "),Ode=a("code"),W6o=o("Wav2Vec2ForMaskedLM"),H6o=o(" (Wav2Vec2 model)"),U6o=l(),Y2=a("li"),Vde=a("strong"),J6o=o("xlm"),Y6o=o(" \u2014 "),Jj=a("a"),K6o=o("XLMWithLMHeadModel"),Z6o=o(" (XLM model)"),eAo=l(),K2=a("li"),Xde=a("strong"),oAo=o("xlm-roberta"),rAo=o(" \u2014 "),Yj=a("a"),tAo=o("XLMRobertaForMaskedLM"),aAo=o(" (XLM-RoBERTa model)"),nAo=l(),Z2=a("li"),zde=a("strong"),sAo=o("xlm-roberta-xl"),lAo=o(" \u2014 "),Kj=a("a"),iAo=o("XLMRobertaXLForMaskedLM"),dAo=o(" (XLM-RoBERTa-XL model)"),cAo=l(),e1=a("li"),Qde=a("strong"),fAo=o("yoso"),mAo=o(" \u2014 "),Zj=a("a"),gAo=o("YosoForMaskedLM"),hAo=o(" (YOSO model)"),pAo=l(),o1=a("p"),uAo=o("The model is set in evaluation mode by default using "),Wde=a("code"),_Ao=o("model.eval()"),bAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=a("code"),vAo=o("model.train()"),FAo=l(),F(r1.$$.fragment),kIe=l(),Bi=a("h2"),t1=a("a"),Ude=a("span"),F(HA.$$.fragment),TAo=l(),Jde=a("span"),MAo=o("AutoModelForSeq2SeqLM"),SIe=l(),So=a("div"),F(UA.$$.fragment),EAo=l(),Pi=a("p"),CAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eD=a("a"),wAo=o("from_pretrained()"),AAo=o(" class method or the "),oD=a("a"),yAo=o("from_config()"),LAo=o(` class
method.`),xAo=l(),JA=a("p"),$Ao=o("This class cannot be instantiated directly using "),Yde=a("code"),kAo=o("__init__()"),SAo=o(" (throws an error)."),RAo=l(),nt=a("div"),F(YA.$$.fragment),BAo=l(),Kde=a("p"),PAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IAo=l(),Ii=a("p"),qAo=o(`Note:
Loading a model from its configuration file does `),Zde=a("strong"),NAo=o("not"),jAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),DAo=o("from_pretrained()"),GAo=o(" to load the model weights."),OAo=l(),F(a1.$$.fragment),VAo=l(),Ke=a("div"),F(KA.$$.fragment),XAo=l(),ece=a("p"),zAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QAo=l(),$a=a("p"),WAo=o("The model class to instantiate is selected based on the "),oce=a("code"),HAo=o("model_type"),UAo=o(` property of the config object (either
passed as an argument or loaded from `),rce=a("code"),JAo=o("pretrained_model_name_or_path"),YAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=a("code"),KAo=o("pretrained_model_name_or_path"),ZAo=o(":"),eyo=l(),he=a("ul"),n1=a("li"),ace=a("strong"),oyo=o("bart"),ryo=o(" \u2014 "),tD=a("a"),tyo=o("BartForConditionalGeneration"),ayo=o(" (BART model)"),nyo=l(),s1=a("li"),nce=a("strong"),syo=o("bigbird_pegasus"),lyo=o(" \u2014 "),aD=a("a"),iyo=o("BigBirdPegasusForConditionalGeneration"),dyo=o(" (BigBirdPegasus model)"),cyo=l(),l1=a("li"),sce=a("strong"),fyo=o("blenderbot"),myo=o(" \u2014 "),nD=a("a"),gyo=o("BlenderbotForConditionalGeneration"),hyo=o(" (Blenderbot model)"),pyo=l(),i1=a("li"),lce=a("strong"),uyo=o("blenderbot-small"),_yo=o(" \u2014 "),sD=a("a"),byo=o("BlenderbotSmallForConditionalGeneration"),vyo=o(" (BlenderbotSmall model)"),Fyo=l(),d1=a("li"),ice=a("strong"),Tyo=o("encoder-decoder"),Myo=o(" \u2014 "),lD=a("a"),Eyo=o("EncoderDecoderModel"),Cyo=o(" (Encoder decoder model)"),wyo=l(),c1=a("li"),dce=a("strong"),Ayo=o("fsmt"),yyo=o(" \u2014 "),iD=a("a"),Lyo=o("FSMTForConditionalGeneration"),xyo=o(" (FairSeq Machine-Translation model)"),$yo=l(),f1=a("li"),cce=a("strong"),kyo=o("led"),Syo=o(" \u2014 "),dD=a("a"),Ryo=o("LEDForConditionalGeneration"),Byo=o(" (LED model)"),Pyo=l(),m1=a("li"),fce=a("strong"),Iyo=o("m2m_100"),qyo=o(" \u2014 "),cD=a("a"),Nyo=o("M2M100ForConditionalGeneration"),jyo=o(" (M2M100 model)"),Dyo=l(),g1=a("li"),mce=a("strong"),Gyo=o("marian"),Oyo=o(" \u2014 "),fD=a("a"),Vyo=o("MarianMTModel"),Xyo=o(" (Marian model)"),zyo=l(),h1=a("li"),gce=a("strong"),Qyo=o("mbart"),Wyo=o(" \u2014 "),mD=a("a"),Hyo=o("MBartForConditionalGeneration"),Uyo=o(" (mBART model)"),Jyo=l(),p1=a("li"),hce=a("strong"),Yyo=o("mt5"),Kyo=o(" \u2014 "),gD=a("a"),Zyo=o("MT5ForConditionalGeneration"),eLo=o(" (mT5 model)"),oLo=l(),u1=a("li"),pce=a("strong"),rLo=o("pegasus"),tLo=o(" \u2014 "),hD=a("a"),aLo=o("PegasusForConditionalGeneration"),nLo=o(" (Pegasus model)"),sLo=l(),_1=a("li"),uce=a("strong"),lLo=o("plbart"),iLo=o(" \u2014 "),pD=a("a"),dLo=o("PLBartForConditionalGeneration"),cLo=o(" (PLBart model)"),fLo=l(),b1=a("li"),_ce=a("strong"),mLo=o("prophetnet"),gLo=o(" \u2014 "),uD=a("a"),hLo=o("ProphetNetForConditionalGeneration"),pLo=o(" (ProphetNet model)"),uLo=l(),v1=a("li"),bce=a("strong"),_Lo=o("t5"),bLo=o(" \u2014 "),_D=a("a"),vLo=o("T5ForConditionalGeneration"),FLo=o(" (T5 model)"),TLo=l(),F1=a("li"),vce=a("strong"),MLo=o("tapex"),ELo=o(" \u2014 "),bD=a("a"),CLo=o("BartForConditionalGeneration"),wLo=o(" (TAPEX model)"),ALo=l(),T1=a("li"),Fce=a("strong"),yLo=o("xlm-prophetnet"),LLo=o(" \u2014 "),vD=a("a"),xLo=o("XLMProphetNetForConditionalGeneration"),$Lo=o(" (XLMProphetNet model)"),kLo=l(),M1=a("p"),SLo=o("The model is set in evaluation mode by default using "),Tce=a("code"),RLo=o("model.eval()"),BLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),PLo=o("model.train()"),ILo=l(),F(E1.$$.fragment),RIe=l(),qi=a("h2"),C1=a("a"),Ece=a("span"),F(ZA.$$.fragment),qLo=l(),Cce=a("span"),NLo=o("AutoModelForSequenceClassification"),BIe=l(),Ro=a("div"),F(ey.$$.fragment),jLo=l(),Ni=a("p"),DLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FD=a("a"),GLo=o("from_pretrained()"),OLo=o(" class method or the "),TD=a("a"),VLo=o("from_config()"),XLo=o(` class
method.`),zLo=l(),oy=a("p"),QLo=o("This class cannot be instantiated directly using "),wce=a("code"),WLo=o("__init__()"),HLo=o(" (throws an error)."),ULo=l(),st=a("div"),F(ry.$$.fragment),JLo=l(),Ace=a("p"),YLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KLo=l(),ji=a("p"),ZLo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),e8o=o("not"),o8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),r8o=o("from_pretrained()"),t8o=o(" to load the model weights."),a8o=l(),F(w1.$$.fragment),n8o=l(),Ze=a("div"),F(ty.$$.fragment),s8o=l(),Lce=a("p"),l8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i8o=l(),ka=a("p"),d8o=o("The model class to instantiate is selected based on the "),xce=a("code"),c8o=o("model_type"),f8o=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),m8o=o("pretrained_model_name_or_path"),g8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),h8o=o("pretrained_model_name_or_path"),p8o=o(":"),u8o=l(),q=a("ul"),A1=a("li"),Sce=a("strong"),_8o=o("albert"),b8o=o(" \u2014 "),ED=a("a"),v8o=o("AlbertForSequenceClassification"),F8o=o(" (ALBERT model)"),T8o=l(),y1=a("li"),Rce=a("strong"),M8o=o("bart"),E8o=o(" \u2014 "),CD=a("a"),C8o=o("BartForSequenceClassification"),w8o=o(" (BART model)"),A8o=l(),L1=a("li"),Bce=a("strong"),y8o=o("bert"),L8o=o(" \u2014 "),wD=a("a"),x8o=o("BertForSequenceClassification"),$8o=o(" (BERT model)"),k8o=l(),x1=a("li"),Pce=a("strong"),S8o=o("big_bird"),R8o=o(" \u2014 "),AD=a("a"),B8o=o("BigBirdForSequenceClassification"),P8o=o(" (BigBird model)"),I8o=l(),$1=a("li"),Ice=a("strong"),q8o=o("bigbird_pegasus"),N8o=o(" \u2014 "),yD=a("a"),j8o=o("BigBirdPegasusForSequenceClassification"),D8o=o(" (BigBirdPegasus model)"),G8o=l(),k1=a("li"),qce=a("strong"),O8o=o("camembert"),V8o=o(" \u2014 "),LD=a("a"),X8o=o("CamembertForSequenceClassification"),z8o=o(" (CamemBERT model)"),Q8o=l(),S1=a("li"),Nce=a("strong"),W8o=o("canine"),H8o=o(" \u2014 "),xD=a("a"),U8o=o("CanineForSequenceClassification"),J8o=o(" (Canine model)"),Y8o=l(),R1=a("li"),jce=a("strong"),K8o=o("convbert"),Z8o=o(" \u2014 "),$D=a("a"),exo=o("ConvBertForSequenceClassification"),oxo=o(" (ConvBERT model)"),rxo=l(),B1=a("li"),Dce=a("strong"),txo=o("ctrl"),axo=o(" \u2014 "),kD=a("a"),nxo=o("CTRLForSequenceClassification"),sxo=o(" (CTRL model)"),lxo=l(),P1=a("li"),Gce=a("strong"),ixo=o("data2vec-text"),dxo=o(" \u2014 "),SD=a("a"),cxo=o("Data2VecTextForSequenceClassification"),fxo=o(" (Data2VecText model)"),mxo=l(),I1=a("li"),Oce=a("strong"),gxo=o("deberta"),hxo=o(" \u2014 "),RD=a("a"),pxo=o("DebertaForSequenceClassification"),uxo=o(" (DeBERTa model)"),_xo=l(),q1=a("li"),Vce=a("strong"),bxo=o("deberta-v2"),vxo=o(" \u2014 "),BD=a("a"),Fxo=o("DebertaV2ForSequenceClassification"),Txo=o(" (DeBERTa-v2 model)"),Mxo=l(),N1=a("li"),Xce=a("strong"),Exo=o("distilbert"),Cxo=o(" \u2014 "),PD=a("a"),wxo=o("DistilBertForSequenceClassification"),Axo=o(" (DistilBERT model)"),yxo=l(),j1=a("li"),zce=a("strong"),Lxo=o("electra"),xxo=o(" \u2014 "),ID=a("a"),$xo=o("ElectraForSequenceClassification"),kxo=o(" (ELECTRA model)"),Sxo=l(),D1=a("li"),Qce=a("strong"),Rxo=o("flaubert"),Bxo=o(" \u2014 "),qD=a("a"),Pxo=o("FlaubertForSequenceClassification"),Ixo=o(" (FlauBERT model)"),qxo=l(),G1=a("li"),Wce=a("strong"),Nxo=o("fnet"),jxo=o(" \u2014 "),ND=a("a"),Dxo=o("FNetForSequenceClassification"),Gxo=o(" (FNet model)"),Oxo=l(),O1=a("li"),Hce=a("strong"),Vxo=o("funnel"),Xxo=o(" \u2014 "),jD=a("a"),zxo=o("FunnelForSequenceClassification"),Qxo=o(" (Funnel Transformer model)"),Wxo=l(),V1=a("li"),Uce=a("strong"),Hxo=o("gpt2"),Uxo=o(" \u2014 "),DD=a("a"),Jxo=o("GPT2ForSequenceClassification"),Yxo=o(" (OpenAI GPT-2 model)"),Kxo=l(),X1=a("li"),Jce=a("strong"),Zxo=o("gpt_neo"),e9o=o(" \u2014 "),GD=a("a"),o9o=o("GPTNeoForSequenceClassification"),r9o=o(" (GPT Neo model)"),t9o=l(),z1=a("li"),Yce=a("strong"),a9o=o("gptj"),n9o=o(" \u2014 "),OD=a("a"),s9o=o("GPTJForSequenceClassification"),l9o=o(" (GPT-J model)"),i9o=l(),Q1=a("li"),Kce=a("strong"),d9o=o("ibert"),c9o=o(" \u2014 "),VD=a("a"),f9o=o("IBertForSequenceClassification"),m9o=o(" (I-BERT model)"),g9o=l(),W1=a("li"),Zce=a("strong"),h9o=o("layoutlm"),p9o=o(" \u2014 "),XD=a("a"),u9o=o("LayoutLMForSequenceClassification"),_9o=o(" (LayoutLM model)"),b9o=l(),H1=a("li"),efe=a("strong"),v9o=o("layoutlmv2"),F9o=o(" \u2014 "),zD=a("a"),T9o=o("LayoutLMv2ForSequenceClassification"),M9o=o(" (LayoutLMv2 model)"),E9o=l(),U1=a("li"),ofe=a("strong"),C9o=o("led"),w9o=o(" \u2014 "),QD=a("a"),A9o=o("LEDForSequenceClassification"),y9o=o(" (LED model)"),L9o=l(),J1=a("li"),rfe=a("strong"),x9o=o("longformer"),$9o=o(" \u2014 "),WD=a("a"),k9o=o("LongformerForSequenceClassification"),S9o=o(" (Longformer model)"),R9o=l(),Y1=a("li"),tfe=a("strong"),B9o=o("mbart"),P9o=o(" \u2014 "),HD=a("a"),I9o=o("MBartForSequenceClassification"),q9o=o(" (mBART model)"),N9o=l(),K1=a("li"),afe=a("strong"),j9o=o("megatron-bert"),D9o=o(" \u2014 "),UD=a("a"),G9o=o("MegatronBertForSequenceClassification"),O9o=o(" (MegatronBert model)"),V9o=l(),Z1=a("li"),nfe=a("strong"),X9o=o("mobilebert"),z9o=o(" \u2014 "),JD=a("a"),Q9o=o("MobileBertForSequenceClassification"),W9o=o(" (MobileBERT model)"),H9o=l(),eb=a("li"),sfe=a("strong"),U9o=o("mpnet"),J9o=o(" \u2014 "),YD=a("a"),Y9o=o("MPNetForSequenceClassification"),K9o=o(" (MPNet model)"),Z9o=l(),ob=a("li"),lfe=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),KD=a("a"),r$o=o("NystromformerForSequenceClassification"),t$o=o(" (Nystromformer model)"),a$o=l(),rb=a("li"),ife=a("strong"),n$o=o("openai-gpt"),s$o=o(" \u2014 "),ZD=a("a"),l$o=o("OpenAIGPTForSequenceClassification"),i$o=o(" (OpenAI GPT model)"),d$o=l(),tb=a("li"),dfe=a("strong"),c$o=o("perceiver"),f$o=o(" \u2014 "),eG=a("a"),m$o=o("PerceiverForSequenceClassification"),g$o=o(" (Perceiver model)"),h$o=l(),ab=a("li"),cfe=a("strong"),p$o=o("plbart"),u$o=o(" \u2014 "),oG=a("a"),_$o=o("PLBartForSequenceClassification"),b$o=o(" (PLBart model)"),v$o=l(),nb=a("li"),ffe=a("strong"),F$o=o("qdqbert"),T$o=o(" \u2014 "),rG=a("a"),M$o=o("QDQBertForSequenceClassification"),E$o=o(" (QDQBert model)"),C$o=l(),sb=a("li"),mfe=a("strong"),w$o=o("reformer"),A$o=o(" \u2014 "),tG=a("a"),y$o=o("ReformerForSequenceClassification"),L$o=o(" (Reformer model)"),x$o=l(),lb=a("li"),gfe=a("strong"),$$o=o("rembert"),k$o=o(" \u2014 "),aG=a("a"),S$o=o("RemBertForSequenceClassification"),R$o=o(" (RemBERT model)"),B$o=l(),ib=a("li"),hfe=a("strong"),P$o=o("roberta"),I$o=o(" \u2014 "),nG=a("a"),q$o=o("RobertaForSequenceClassification"),N$o=o(" (RoBERTa model)"),j$o=l(),db=a("li"),pfe=a("strong"),D$o=o("roformer"),G$o=o(" \u2014 "),sG=a("a"),O$o=o("RoFormerForSequenceClassification"),V$o=o(" (RoFormer model)"),X$o=l(),cb=a("li"),ufe=a("strong"),z$o=o("squeezebert"),Q$o=o(" \u2014 "),lG=a("a"),W$o=o("SqueezeBertForSequenceClassification"),H$o=o(" (SqueezeBERT model)"),U$o=l(),fb=a("li"),_fe=a("strong"),J$o=o("tapas"),Y$o=o(" \u2014 "),iG=a("a"),K$o=o("TapasForSequenceClassification"),Z$o=o(" (TAPAS model)"),eko=l(),mb=a("li"),bfe=a("strong"),oko=o("tapex"),rko=o(" \u2014 "),dG=a("a"),tko=o("BartForSequenceClassification"),ako=o(" (TAPEX model)"),nko=l(),gb=a("li"),vfe=a("strong"),sko=o("transfo-xl"),lko=o(" \u2014 "),cG=a("a"),iko=o("TransfoXLForSequenceClassification"),dko=o(" (Transformer-XL model)"),cko=l(),hb=a("li"),Ffe=a("strong"),fko=o("xlm"),mko=o(" \u2014 "),fG=a("a"),gko=o("XLMForSequenceClassification"),hko=o(" (XLM model)"),pko=l(),pb=a("li"),Tfe=a("strong"),uko=o("xlm-roberta"),_ko=o(" \u2014 "),mG=a("a"),bko=o("XLMRobertaForSequenceClassification"),vko=o(" (XLM-RoBERTa model)"),Fko=l(),ub=a("li"),Mfe=a("strong"),Tko=o("xlm-roberta-xl"),Mko=o(" \u2014 "),gG=a("a"),Eko=o("XLMRobertaXLForSequenceClassification"),Cko=o(" (XLM-RoBERTa-XL model)"),wko=l(),_b=a("li"),Efe=a("strong"),Ako=o("xlnet"),yko=o(" \u2014 "),hG=a("a"),Lko=o("XLNetForSequenceClassification"),xko=o(" (XLNet model)"),$ko=l(),bb=a("li"),Cfe=a("strong"),kko=o("yoso"),Sko=o(" \u2014 "),pG=a("a"),Rko=o("YosoForSequenceClassification"),Bko=o(" (YOSO model)"),Pko=l(),vb=a("p"),Iko=o("The model is set in evaluation mode by default using "),wfe=a("code"),qko=o("model.eval()"),Nko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),jko=o("model.train()"),Dko=l(),F(Fb.$$.fragment),PIe=l(),Di=a("h2"),Tb=a("a"),yfe=a("span"),F(ay.$$.fragment),Gko=l(),Lfe=a("span"),Oko=o("AutoModelForMultipleChoice"),IIe=l(),Bo=a("div"),F(ny.$$.fragment),Vko=l(),Gi=a("p"),Xko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uG=a("a"),zko=o("from_pretrained()"),Qko=o(" class method or the "),_G=a("a"),Wko=o("from_config()"),Hko=o(` class
method.`),Uko=l(),sy=a("p"),Jko=o("This class cannot be instantiated directly using "),xfe=a("code"),Yko=o("__init__()"),Kko=o(" (throws an error)."),Zko=l(),lt=a("div"),F(ly.$$.fragment),eSo=l(),$fe=a("p"),oSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rSo=l(),Oi=a("p"),tSo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),aSo=o("not"),nSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),sSo=o("from_pretrained()"),lSo=o(" to load the model weights."),iSo=l(),F(Mb.$$.fragment),dSo=l(),eo=a("div"),F(iy.$$.fragment),cSo=l(),Sfe=a("p"),fSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mSo=l(),Sa=a("p"),gSo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),hSo=o("model_type"),pSo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),uSo=o("pretrained_model_name_or_path"),_So=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),bSo=o("pretrained_model_name_or_path"),vSo=o(":"),FSo=l(),Y=a("ul"),Eb=a("li"),Ife=a("strong"),TSo=o("albert"),MSo=o(" \u2014 "),vG=a("a"),ESo=o("AlbertForMultipleChoice"),CSo=o(" (ALBERT model)"),wSo=l(),Cb=a("li"),qfe=a("strong"),ASo=o("bert"),ySo=o(" \u2014 "),FG=a("a"),LSo=o("BertForMultipleChoice"),xSo=o(" (BERT model)"),$So=l(),wb=a("li"),Nfe=a("strong"),kSo=o("big_bird"),SSo=o(" \u2014 "),TG=a("a"),RSo=o("BigBirdForMultipleChoice"),BSo=o(" (BigBird model)"),PSo=l(),Ab=a("li"),jfe=a("strong"),ISo=o("camembert"),qSo=o(" \u2014 "),MG=a("a"),NSo=o("CamembertForMultipleChoice"),jSo=o(" (CamemBERT model)"),DSo=l(),yb=a("li"),Dfe=a("strong"),GSo=o("canine"),OSo=o(" \u2014 "),EG=a("a"),VSo=o("CanineForMultipleChoice"),XSo=o(" (Canine model)"),zSo=l(),Lb=a("li"),Gfe=a("strong"),QSo=o("convbert"),WSo=o(" \u2014 "),CG=a("a"),HSo=o("ConvBertForMultipleChoice"),USo=o(" (ConvBERT model)"),JSo=l(),xb=a("li"),Ofe=a("strong"),YSo=o("data2vec-text"),KSo=o(" \u2014 "),wG=a("a"),ZSo=o("Data2VecTextForMultipleChoice"),eRo=o(" (Data2VecText model)"),oRo=l(),$b=a("li"),Vfe=a("strong"),rRo=o("deberta-v2"),tRo=o(" \u2014 "),AG=a("a"),aRo=o("DebertaV2ForMultipleChoice"),nRo=o(" (DeBERTa-v2 model)"),sRo=l(),kb=a("li"),Xfe=a("strong"),lRo=o("distilbert"),iRo=o(" \u2014 "),yG=a("a"),dRo=o("DistilBertForMultipleChoice"),cRo=o(" (DistilBERT model)"),fRo=l(),Sb=a("li"),zfe=a("strong"),mRo=o("electra"),gRo=o(" \u2014 "),LG=a("a"),hRo=o("ElectraForMultipleChoice"),pRo=o(" (ELECTRA model)"),uRo=l(),Rb=a("li"),Qfe=a("strong"),_Ro=o("flaubert"),bRo=o(" \u2014 "),xG=a("a"),vRo=o("FlaubertForMultipleChoice"),FRo=o(" (FlauBERT model)"),TRo=l(),Bb=a("li"),Wfe=a("strong"),MRo=o("fnet"),ERo=o(" \u2014 "),$G=a("a"),CRo=o("FNetForMultipleChoice"),wRo=o(" (FNet model)"),ARo=l(),Pb=a("li"),Hfe=a("strong"),yRo=o("funnel"),LRo=o(" \u2014 "),kG=a("a"),xRo=o("FunnelForMultipleChoice"),$Ro=o(" (Funnel Transformer model)"),kRo=l(),Ib=a("li"),Ufe=a("strong"),SRo=o("ibert"),RRo=o(" \u2014 "),SG=a("a"),BRo=o("IBertForMultipleChoice"),PRo=o(" (I-BERT model)"),IRo=l(),qb=a("li"),Jfe=a("strong"),qRo=o("longformer"),NRo=o(" \u2014 "),RG=a("a"),jRo=o("LongformerForMultipleChoice"),DRo=o(" (Longformer model)"),GRo=l(),Nb=a("li"),Yfe=a("strong"),ORo=o("megatron-bert"),VRo=o(" \u2014 "),BG=a("a"),XRo=o("MegatronBertForMultipleChoice"),zRo=o(" (MegatronBert model)"),QRo=l(),jb=a("li"),Kfe=a("strong"),WRo=o("mobilebert"),HRo=o(" \u2014 "),PG=a("a"),URo=o("MobileBertForMultipleChoice"),JRo=o(" (MobileBERT model)"),YRo=l(),Db=a("li"),Zfe=a("strong"),KRo=o("mpnet"),ZRo=o(" \u2014 "),IG=a("a"),eBo=o("MPNetForMultipleChoice"),oBo=o(" (MPNet model)"),rBo=l(),Gb=a("li"),eme=a("strong"),tBo=o("nystromformer"),aBo=o(" \u2014 "),qG=a("a"),nBo=o("NystromformerForMultipleChoice"),sBo=o(" (Nystromformer model)"),lBo=l(),Ob=a("li"),ome=a("strong"),iBo=o("qdqbert"),dBo=o(" \u2014 "),NG=a("a"),cBo=o("QDQBertForMultipleChoice"),fBo=o(" (QDQBert model)"),mBo=l(),Vb=a("li"),rme=a("strong"),gBo=o("rembert"),hBo=o(" \u2014 "),jG=a("a"),pBo=o("RemBertForMultipleChoice"),uBo=o(" (RemBERT model)"),_Bo=l(),Xb=a("li"),tme=a("strong"),bBo=o("roberta"),vBo=o(" \u2014 "),DG=a("a"),FBo=o("RobertaForMultipleChoice"),TBo=o(" (RoBERTa model)"),MBo=l(),zb=a("li"),ame=a("strong"),EBo=o("roformer"),CBo=o(" \u2014 "),GG=a("a"),wBo=o("RoFormerForMultipleChoice"),ABo=o(" (RoFormer model)"),yBo=l(),Qb=a("li"),nme=a("strong"),LBo=o("squeezebert"),xBo=o(" \u2014 "),OG=a("a"),$Bo=o("SqueezeBertForMultipleChoice"),kBo=o(" (SqueezeBERT model)"),SBo=l(),Wb=a("li"),sme=a("strong"),RBo=o("xlm"),BBo=o(" \u2014 "),VG=a("a"),PBo=o("XLMForMultipleChoice"),IBo=o(" (XLM model)"),qBo=l(),Hb=a("li"),lme=a("strong"),NBo=o("xlm-roberta"),jBo=o(" \u2014 "),XG=a("a"),DBo=o("XLMRobertaForMultipleChoice"),GBo=o(" (XLM-RoBERTa model)"),OBo=l(),Ub=a("li"),ime=a("strong"),VBo=o("xlm-roberta-xl"),XBo=o(" \u2014 "),zG=a("a"),zBo=o("XLMRobertaXLForMultipleChoice"),QBo=o(" (XLM-RoBERTa-XL model)"),WBo=l(),Jb=a("li"),dme=a("strong"),HBo=o("xlnet"),UBo=o(" \u2014 "),QG=a("a"),JBo=o("XLNetForMultipleChoice"),YBo=o(" (XLNet model)"),KBo=l(),Yb=a("li"),cme=a("strong"),ZBo=o("yoso"),ePo=o(" \u2014 "),WG=a("a"),oPo=o("YosoForMultipleChoice"),rPo=o(" (YOSO model)"),tPo=l(),Kb=a("p"),aPo=o("The model is set in evaluation mode by default using "),fme=a("code"),nPo=o("model.eval()"),sPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),lPo=o("model.train()"),iPo=l(),F(Zb.$$.fragment),qIe=l(),Vi=a("h2"),ev=a("a"),gme=a("span"),F(dy.$$.fragment),dPo=l(),hme=a("span"),cPo=o("AutoModelForNextSentencePrediction"),NIe=l(),Po=a("div"),F(cy.$$.fragment),fPo=l(),Xi=a("p"),mPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HG=a("a"),gPo=o("from_pretrained()"),hPo=o(" class method or the "),UG=a("a"),pPo=o("from_config()"),uPo=o(` class
method.`),_Po=l(),fy=a("p"),bPo=o("This class cannot be instantiated directly using "),pme=a("code"),vPo=o("__init__()"),FPo=o(" (throws an error)."),TPo=l(),it=a("div"),F(my.$$.fragment),MPo=l(),ume=a("p"),EPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CPo=l(),zi=a("p"),wPo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),APo=o("not"),yPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),LPo=o("from_pretrained()"),xPo=o(" to load the model weights."),$Po=l(),F(ov.$$.fragment),kPo=l(),oo=a("div"),F(gy.$$.fragment),SPo=l(),bme=a("p"),RPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BPo=l(),Ra=a("p"),PPo=o("The model class to instantiate is selected based on the "),vme=a("code"),IPo=o("model_type"),qPo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),NPo=o("pretrained_model_name_or_path"),jPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),DPo=o("pretrained_model_name_or_path"),GPo=o(":"),OPo=l(),Yr=a("ul"),rv=a("li"),Mme=a("strong"),VPo=o("bert"),XPo=o(" \u2014 "),YG=a("a"),zPo=o("BertForNextSentencePrediction"),QPo=o(" (BERT model)"),WPo=l(),tv=a("li"),Eme=a("strong"),HPo=o("fnet"),UPo=o(" \u2014 "),KG=a("a"),JPo=o("FNetForNextSentencePrediction"),YPo=o(" (FNet model)"),KPo=l(),av=a("li"),Cme=a("strong"),ZPo=o("megatron-bert"),eIo=o(" \u2014 "),ZG=a("a"),oIo=o("MegatronBertForNextSentencePrediction"),rIo=o(" (MegatronBert model)"),tIo=l(),nv=a("li"),wme=a("strong"),aIo=o("mobilebert"),nIo=o(" \u2014 "),eO=a("a"),sIo=o("MobileBertForNextSentencePrediction"),lIo=o(" (MobileBERT model)"),iIo=l(),sv=a("li"),Ame=a("strong"),dIo=o("qdqbert"),cIo=o(" \u2014 "),oO=a("a"),fIo=o("QDQBertForNextSentencePrediction"),mIo=o(" (QDQBert model)"),gIo=l(),lv=a("p"),hIo=o("The model is set in evaluation mode by default using "),yme=a("code"),pIo=o("model.eval()"),uIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),_Io=o("model.train()"),bIo=l(),F(iv.$$.fragment),jIe=l(),Qi=a("h2"),dv=a("a"),xme=a("span"),F(hy.$$.fragment),vIo=l(),$me=a("span"),FIo=o("AutoModelForTokenClassification"),DIe=l(),Io=a("div"),F(py.$$.fragment),TIo=l(),Wi=a("p"),MIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rO=a("a"),EIo=o("from_pretrained()"),CIo=o(" class method or the "),tO=a("a"),wIo=o("from_config()"),AIo=o(` class
method.`),yIo=l(),uy=a("p"),LIo=o("This class cannot be instantiated directly using "),kme=a("code"),xIo=o("__init__()"),$Io=o(" (throws an error)."),kIo=l(),dt=a("div"),F(_y.$$.fragment),SIo=l(),Sme=a("p"),RIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BIo=l(),Hi=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),IIo=o("not"),qIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),NIo=o("from_pretrained()"),jIo=o(" to load the model weights."),DIo=l(),F(cv.$$.fragment),GIo=l(),ro=a("div"),F(by.$$.fragment),OIo=l(),Bme=a("p"),VIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XIo=l(),Ba=a("p"),zIo=o("The model class to instantiate is selected based on the "),Pme=a("code"),QIo=o("model_type"),WIo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),HIo=o("pretrained_model_name_or_path"),UIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),JIo=o("pretrained_model_name_or_path"),YIo=o(":"),KIo=l(),U=a("ul"),fv=a("li"),Nme=a("strong"),ZIo=o("albert"),eqo=o(" \u2014 "),nO=a("a"),oqo=o("AlbertForTokenClassification"),rqo=o(" (ALBERT model)"),tqo=l(),mv=a("li"),jme=a("strong"),aqo=o("bert"),nqo=o(" \u2014 "),sO=a("a"),sqo=o("BertForTokenClassification"),lqo=o(" (BERT model)"),iqo=l(),gv=a("li"),Dme=a("strong"),dqo=o("big_bird"),cqo=o(" \u2014 "),lO=a("a"),fqo=o("BigBirdForTokenClassification"),mqo=o(" (BigBird model)"),gqo=l(),hv=a("li"),Gme=a("strong"),hqo=o("camembert"),pqo=o(" \u2014 "),iO=a("a"),uqo=o("CamembertForTokenClassification"),_qo=o(" (CamemBERT model)"),bqo=l(),pv=a("li"),Ome=a("strong"),vqo=o("canine"),Fqo=o(" \u2014 "),dO=a("a"),Tqo=o("CanineForTokenClassification"),Mqo=o(" (Canine model)"),Eqo=l(),uv=a("li"),Vme=a("strong"),Cqo=o("convbert"),wqo=o(" \u2014 "),cO=a("a"),Aqo=o("ConvBertForTokenClassification"),yqo=o(" (ConvBERT model)"),Lqo=l(),_v=a("li"),Xme=a("strong"),xqo=o("data2vec-text"),$qo=o(" \u2014 "),fO=a("a"),kqo=o("Data2VecTextForTokenClassification"),Sqo=o(" (Data2VecText model)"),Rqo=l(),bv=a("li"),zme=a("strong"),Bqo=o("deberta"),Pqo=o(" \u2014 "),mO=a("a"),Iqo=o("DebertaForTokenClassification"),qqo=o(" (DeBERTa model)"),Nqo=l(),vv=a("li"),Qme=a("strong"),jqo=o("deberta-v2"),Dqo=o(" \u2014 "),gO=a("a"),Gqo=o("DebertaV2ForTokenClassification"),Oqo=o(" (DeBERTa-v2 model)"),Vqo=l(),Fv=a("li"),Wme=a("strong"),Xqo=o("distilbert"),zqo=o(" \u2014 "),hO=a("a"),Qqo=o("DistilBertForTokenClassification"),Wqo=o(" (DistilBERT model)"),Hqo=l(),Tv=a("li"),Hme=a("strong"),Uqo=o("electra"),Jqo=o(" \u2014 "),pO=a("a"),Yqo=o("ElectraForTokenClassification"),Kqo=o(" (ELECTRA model)"),Zqo=l(),Mv=a("li"),Ume=a("strong"),eNo=o("flaubert"),oNo=o(" \u2014 "),uO=a("a"),rNo=o("FlaubertForTokenClassification"),tNo=o(" (FlauBERT model)"),aNo=l(),Ev=a("li"),Jme=a("strong"),nNo=o("fnet"),sNo=o(" \u2014 "),_O=a("a"),lNo=o("FNetForTokenClassification"),iNo=o(" (FNet model)"),dNo=l(),Cv=a("li"),Yme=a("strong"),cNo=o("funnel"),fNo=o(" \u2014 "),bO=a("a"),mNo=o("FunnelForTokenClassification"),gNo=o(" (Funnel Transformer model)"),hNo=l(),wv=a("li"),Kme=a("strong"),pNo=o("gpt2"),uNo=o(" \u2014 "),vO=a("a"),_No=o("GPT2ForTokenClassification"),bNo=o(" (OpenAI GPT-2 model)"),vNo=l(),Av=a("li"),Zme=a("strong"),FNo=o("ibert"),TNo=o(" \u2014 "),FO=a("a"),MNo=o("IBertForTokenClassification"),ENo=o(" (I-BERT model)"),CNo=l(),yv=a("li"),ege=a("strong"),wNo=o("layoutlm"),ANo=o(" \u2014 "),TO=a("a"),yNo=o("LayoutLMForTokenClassification"),LNo=o(" (LayoutLM model)"),xNo=l(),Lv=a("li"),oge=a("strong"),$No=o("layoutlmv2"),kNo=o(" \u2014 "),MO=a("a"),SNo=o("LayoutLMv2ForTokenClassification"),RNo=o(" (LayoutLMv2 model)"),BNo=l(),xv=a("li"),rge=a("strong"),PNo=o("longformer"),INo=o(" \u2014 "),EO=a("a"),qNo=o("LongformerForTokenClassification"),NNo=o(" (Longformer model)"),jNo=l(),$v=a("li"),tge=a("strong"),DNo=o("megatron-bert"),GNo=o(" \u2014 "),CO=a("a"),ONo=o("MegatronBertForTokenClassification"),VNo=o(" (MegatronBert model)"),XNo=l(),kv=a("li"),age=a("strong"),zNo=o("mobilebert"),QNo=o(" \u2014 "),wO=a("a"),WNo=o("MobileBertForTokenClassification"),HNo=o(" (MobileBERT model)"),UNo=l(),Sv=a("li"),nge=a("strong"),JNo=o("mpnet"),YNo=o(" \u2014 "),AO=a("a"),KNo=o("MPNetForTokenClassification"),ZNo=o(" (MPNet model)"),ejo=l(),Rv=a("li"),sge=a("strong"),ojo=o("nystromformer"),rjo=o(" \u2014 "),yO=a("a"),tjo=o("NystromformerForTokenClassification"),ajo=o(" (Nystromformer model)"),njo=l(),Bv=a("li"),lge=a("strong"),sjo=o("qdqbert"),ljo=o(" \u2014 "),LO=a("a"),ijo=o("QDQBertForTokenClassification"),djo=o(" (QDQBert model)"),cjo=l(),Pv=a("li"),ige=a("strong"),fjo=o("rembert"),mjo=o(" \u2014 "),xO=a("a"),gjo=o("RemBertForTokenClassification"),hjo=o(" (RemBERT model)"),pjo=l(),Iv=a("li"),dge=a("strong"),ujo=o("roberta"),_jo=o(" \u2014 "),$O=a("a"),bjo=o("RobertaForTokenClassification"),vjo=o(" (RoBERTa model)"),Fjo=l(),qv=a("li"),cge=a("strong"),Tjo=o("roformer"),Mjo=o(" \u2014 "),kO=a("a"),Ejo=o("RoFormerForTokenClassification"),Cjo=o(" (RoFormer model)"),wjo=l(),Nv=a("li"),fge=a("strong"),Ajo=o("squeezebert"),yjo=o(" \u2014 "),SO=a("a"),Ljo=o("SqueezeBertForTokenClassification"),xjo=o(" (SqueezeBERT model)"),$jo=l(),jv=a("li"),mge=a("strong"),kjo=o("xlm"),Sjo=o(" \u2014 "),RO=a("a"),Rjo=o("XLMForTokenClassification"),Bjo=o(" (XLM model)"),Pjo=l(),Dv=a("li"),gge=a("strong"),Ijo=o("xlm-roberta"),qjo=o(" \u2014 "),BO=a("a"),Njo=o("XLMRobertaForTokenClassification"),jjo=o(" (XLM-RoBERTa model)"),Djo=l(),Gv=a("li"),hge=a("strong"),Gjo=o("xlm-roberta-xl"),Ojo=o(" \u2014 "),PO=a("a"),Vjo=o("XLMRobertaXLForTokenClassification"),Xjo=o(" (XLM-RoBERTa-XL model)"),zjo=l(),Ov=a("li"),pge=a("strong"),Qjo=o("xlnet"),Wjo=o(" \u2014 "),IO=a("a"),Hjo=o("XLNetForTokenClassification"),Ujo=o(" (XLNet model)"),Jjo=l(),Vv=a("li"),uge=a("strong"),Yjo=o("yoso"),Kjo=o(" \u2014 "),qO=a("a"),Zjo=o("YosoForTokenClassification"),eDo=o(" (YOSO model)"),oDo=l(),Xv=a("p"),rDo=o("The model is set in evaluation mode by default using "),_ge=a("code"),tDo=o("model.eval()"),aDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),nDo=o("model.train()"),sDo=l(),F(zv.$$.fragment),GIe=l(),Ui=a("h2"),Qv=a("a"),vge=a("span"),F(vy.$$.fragment),lDo=l(),Fge=a("span"),iDo=o("AutoModelForQuestionAnswering"),OIe=l(),qo=a("div"),F(Fy.$$.fragment),dDo=l(),Ji=a("p"),cDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NO=a("a"),fDo=o("from_pretrained()"),mDo=o(" class method or the "),jO=a("a"),gDo=o("from_config()"),hDo=o(` class
method.`),pDo=l(),Ty=a("p"),uDo=o("This class cannot be instantiated directly using "),Tge=a("code"),_Do=o("__init__()"),bDo=o(" (throws an error)."),vDo=l(),ct=a("div"),F(My.$$.fragment),FDo=l(),Mge=a("p"),TDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MDo=l(),Yi=a("p"),EDo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),CDo=o("not"),wDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),ADo=o("from_pretrained()"),yDo=o(" to load the model weights."),LDo=l(),F(Wv.$$.fragment),xDo=l(),to=a("div"),F(Ey.$$.fragment),$Do=l(),Cge=a("p"),kDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SDo=l(),Pa=a("p"),RDo=o("The model class to instantiate is selected based on the "),wge=a("code"),BDo=o("model_type"),PDo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),IDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),NDo=o("pretrained_model_name_or_path"),jDo=o(":"),DDo=l(),V=a("ul"),Hv=a("li"),Lge=a("strong"),GDo=o("albert"),ODo=o(" \u2014 "),GO=a("a"),VDo=o("AlbertForQuestionAnswering"),XDo=o(" (ALBERT model)"),zDo=l(),Uv=a("li"),xge=a("strong"),QDo=o("bart"),WDo=o(" \u2014 "),OO=a("a"),HDo=o("BartForQuestionAnswering"),UDo=o(" (BART model)"),JDo=l(),Jv=a("li"),$ge=a("strong"),YDo=o("bert"),KDo=o(" \u2014 "),VO=a("a"),ZDo=o("BertForQuestionAnswering"),eGo=o(" (BERT model)"),oGo=l(),Yv=a("li"),kge=a("strong"),rGo=o("big_bird"),tGo=o(" \u2014 "),XO=a("a"),aGo=o("BigBirdForQuestionAnswering"),nGo=o(" (BigBird model)"),sGo=l(),Kv=a("li"),Sge=a("strong"),lGo=o("bigbird_pegasus"),iGo=o(" \u2014 "),zO=a("a"),dGo=o("BigBirdPegasusForQuestionAnswering"),cGo=o(" (BigBirdPegasus model)"),fGo=l(),Zv=a("li"),Rge=a("strong"),mGo=o("camembert"),gGo=o(" \u2014 "),QO=a("a"),hGo=o("CamembertForQuestionAnswering"),pGo=o(" (CamemBERT model)"),uGo=l(),eF=a("li"),Bge=a("strong"),_Go=o("canine"),bGo=o(" \u2014 "),WO=a("a"),vGo=o("CanineForQuestionAnswering"),FGo=o(" (Canine model)"),TGo=l(),oF=a("li"),Pge=a("strong"),MGo=o("convbert"),EGo=o(" \u2014 "),HO=a("a"),CGo=o("ConvBertForQuestionAnswering"),wGo=o(" (ConvBERT model)"),AGo=l(),rF=a("li"),Ige=a("strong"),yGo=o("data2vec-text"),LGo=o(" \u2014 "),UO=a("a"),xGo=o("Data2VecTextForQuestionAnswering"),$Go=o(" (Data2VecText model)"),kGo=l(),tF=a("li"),qge=a("strong"),SGo=o("deberta"),RGo=o(" \u2014 "),JO=a("a"),BGo=o("DebertaForQuestionAnswering"),PGo=o(" (DeBERTa model)"),IGo=l(),aF=a("li"),Nge=a("strong"),qGo=o("deberta-v2"),NGo=o(" \u2014 "),YO=a("a"),jGo=o("DebertaV2ForQuestionAnswering"),DGo=o(" (DeBERTa-v2 model)"),GGo=l(),nF=a("li"),jge=a("strong"),OGo=o("distilbert"),VGo=o(" \u2014 "),KO=a("a"),XGo=o("DistilBertForQuestionAnswering"),zGo=o(" (DistilBERT model)"),QGo=l(),sF=a("li"),Dge=a("strong"),WGo=o("electra"),HGo=o(" \u2014 "),ZO=a("a"),UGo=o("ElectraForQuestionAnswering"),JGo=o(" (ELECTRA model)"),YGo=l(),lF=a("li"),Gge=a("strong"),KGo=o("flaubert"),ZGo=o(" \u2014 "),eV=a("a"),eOo=o("FlaubertForQuestionAnsweringSimple"),oOo=o(" (FlauBERT model)"),rOo=l(),iF=a("li"),Oge=a("strong"),tOo=o("fnet"),aOo=o(" \u2014 "),oV=a("a"),nOo=o("FNetForQuestionAnswering"),sOo=o(" (FNet model)"),lOo=l(),dF=a("li"),Vge=a("strong"),iOo=o("funnel"),dOo=o(" \u2014 "),rV=a("a"),cOo=o("FunnelForQuestionAnswering"),fOo=o(" (Funnel Transformer model)"),mOo=l(),cF=a("li"),Xge=a("strong"),gOo=o("gptj"),hOo=o(" \u2014 "),tV=a("a"),pOo=o("GPTJForQuestionAnswering"),uOo=o(" (GPT-J model)"),_Oo=l(),fF=a("li"),zge=a("strong"),bOo=o("ibert"),vOo=o(" \u2014 "),aV=a("a"),FOo=o("IBertForQuestionAnswering"),TOo=o(" (I-BERT model)"),MOo=l(),mF=a("li"),Qge=a("strong"),EOo=o("layoutlmv2"),COo=o(" \u2014 "),nV=a("a"),wOo=o("LayoutLMv2ForQuestionAnswering"),AOo=o(" (LayoutLMv2 model)"),yOo=l(),gF=a("li"),Wge=a("strong"),LOo=o("led"),xOo=o(" \u2014 "),sV=a("a"),$Oo=o("LEDForQuestionAnswering"),kOo=o(" (LED model)"),SOo=l(),hF=a("li"),Hge=a("strong"),ROo=o("longformer"),BOo=o(" \u2014 "),lV=a("a"),POo=o("LongformerForQuestionAnswering"),IOo=o(" (Longformer model)"),qOo=l(),pF=a("li"),Uge=a("strong"),NOo=o("lxmert"),jOo=o(" \u2014 "),iV=a("a"),DOo=o("LxmertForQuestionAnswering"),GOo=o(" (LXMERT model)"),OOo=l(),uF=a("li"),Jge=a("strong"),VOo=o("mbart"),XOo=o(" \u2014 "),dV=a("a"),zOo=o("MBartForQuestionAnswering"),QOo=o(" (mBART model)"),WOo=l(),_F=a("li"),Yge=a("strong"),HOo=o("megatron-bert"),UOo=o(" \u2014 "),cV=a("a"),JOo=o("MegatronBertForQuestionAnswering"),YOo=o(" (MegatronBert model)"),KOo=l(),bF=a("li"),Kge=a("strong"),ZOo=o("mobilebert"),eVo=o(" \u2014 "),fV=a("a"),oVo=o("MobileBertForQuestionAnswering"),rVo=o(" (MobileBERT model)"),tVo=l(),vF=a("li"),Zge=a("strong"),aVo=o("mpnet"),nVo=o(" \u2014 "),mV=a("a"),sVo=o("MPNetForQuestionAnswering"),lVo=o(" (MPNet model)"),iVo=l(),FF=a("li"),ehe=a("strong"),dVo=o("nystromformer"),cVo=o(" \u2014 "),gV=a("a"),fVo=o("NystromformerForQuestionAnswering"),mVo=o(" (Nystromformer model)"),gVo=l(),TF=a("li"),ohe=a("strong"),hVo=o("qdqbert"),pVo=o(" \u2014 "),hV=a("a"),uVo=o("QDQBertForQuestionAnswering"),_Vo=o(" (QDQBert model)"),bVo=l(),MF=a("li"),rhe=a("strong"),vVo=o("reformer"),FVo=o(" \u2014 "),pV=a("a"),TVo=o("ReformerForQuestionAnswering"),MVo=o(" (Reformer model)"),EVo=l(),EF=a("li"),the=a("strong"),CVo=o("rembert"),wVo=o(" \u2014 "),uV=a("a"),AVo=o("RemBertForQuestionAnswering"),yVo=o(" (RemBERT model)"),LVo=l(),CF=a("li"),ahe=a("strong"),xVo=o("roberta"),$Vo=o(" \u2014 "),_V=a("a"),kVo=o("RobertaForQuestionAnswering"),SVo=o(" (RoBERTa model)"),RVo=l(),wF=a("li"),nhe=a("strong"),BVo=o("roformer"),PVo=o(" \u2014 "),bV=a("a"),IVo=o("RoFormerForQuestionAnswering"),qVo=o(" (RoFormer model)"),NVo=l(),AF=a("li"),she=a("strong"),jVo=o("splinter"),DVo=o(" \u2014 "),vV=a("a"),GVo=o("SplinterForQuestionAnswering"),OVo=o(" (Splinter model)"),VVo=l(),yF=a("li"),lhe=a("strong"),XVo=o("squeezebert"),zVo=o(" \u2014 "),FV=a("a"),QVo=o("SqueezeBertForQuestionAnswering"),WVo=o(" (SqueezeBERT model)"),HVo=l(),LF=a("li"),ihe=a("strong"),UVo=o("xlm"),JVo=o(" \u2014 "),TV=a("a"),YVo=o("XLMForQuestionAnsweringSimple"),KVo=o(" (XLM model)"),ZVo=l(),xF=a("li"),dhe=a("strong"),eXo=o("xlm-roberta"),oXo=o(" \u2014 "),MV=a("a"),rXo=o("XLMRobertaForQuestionAnswering"),tXo=o(" (XLM-RoBERTa model)"),aXo=l(),$F=a("li"),che=a("strong"),nXo=o("xlm-roberta-xl"),sXo=o(" \u2014 "),EV=a("a"),lXo=o("XLMRobertaXLForQuestionAnswering"),iXo=o(" (XLM-RoBERTa-XL model)"),dXo=l(),kF=a("li"),fhe=a("strong"),cXo=o("xlnet"),fXo=o(" \u2014 "),CV=a("a"),mXo=o("XLNetForQuestionAnsweringSimple"),gXo=o(" (XLNet model)"),hXo=l(),SF=a("li"),mhe=a("strong"),pXo=o("yoso"),uXo=o(" \u2014 "),wV=a("a"),_Xo=o("YosoForQuestionAnswering"),bXo=o(" (YOSO model)"),vXo=l(),RF=a("p"),FXo=o("The model is set in evaluation mode by default using "),ghe=a("code"),TXo=o("model.eval()"),MXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),EXo=o("model.train()"),CXo=l(),F(BF.$$.fragment),VIe=l(),Ki=a("h2"),PF=a("a"),phe=a("span"),F(Cy.$$.fragment),wXo=l(),uhe=a("span"),AXo=o("AutoModelForTableQuestionAnswering"),XIe=l(),No=a("div"),F(wy.$$.fragment),yXo=l(),Zi=a("p"),LXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AV=a("a"),xXo=o("from_pretrained()"),$Xo=o(" class method or the "),yV=a("a"),kXo=o("from_config()"),SXo=o(` class
method.`),RXo=l(),Ay=a("p"),BXo=o("This class cannot be instantiated directly using "),_he=a("code"),PXo=o("__init__()"),IXo=o(" (throws an error)."),qXo=l(),ft=a("div"),F(yy.$$.fragment),NXo=l(),bhe=a("p"),jXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DXo=l(),ed=a("p"),GXo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),OXo=o("not"),VXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),XXo=o("from_pretrained()"),zXo=o(" to load the model weights."),QXo=l(),F(IF.$$.fragment),WXo=l(),ao=a("div"),F(Ly.$$.fragment),HXo=l(),Fhe=a("p"),UXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JXo=l(),Ia=a("p"),YXo=o("The model class to instantiate is selected based on the "),The=a("code"),KXo=o("model_type"),ZXo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(":"),azo=l(),Che=a("ul"),qF=a("li"),whe=a("strong"),nzo=o("tapas"),szo=o(" \u2014 "),xV=a("a"),lzo=o("TapasForQuestionAnswering"),izo=o(" (TAPAS model)"),dzo=l(),NF=a("p"),czo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),fzo=o("model.eval()"),mzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),gzo=o("model.train()"),hzo=l(),F(jF.$$.fragment),zIe=l(),od=a("h2"),DF=a("a"),Lhe=a("span"),F(xy.$$.fragment),pzo=l(),xhe=a("span"),uzo=o("AutoModelForImageClassification"),QIe=l(),jo=a("div"),F($y.$$.fragment),_zo=l(),rd=a("p"),bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=a("a"),vzo=o("from_pretrained()"),Fzo=o(" class method or the "),kV=a("a"),Tzo=o("from_config()"),Mzo=o(` class
method.`),Ezo=l(),ky=a("p"),Czo=o("This class cannot be instantiated directly using "),$he=a("code"),wzo=o("__init__()"),Azo=o(" (throws an error)."),yzo=l(),mt=a("div"),F(Sy.$$.fragment),Lzo=l(),khe=a("p"),xzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$zo=l(),td=a("p"),kzo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),Szo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),Bzo=o("from_pretrained()"),Pzo=o(" to load the model weights."),Izo=l(),F(GF.$$.fragment),qzo=l(),no=a("div"),F(Ry.$$.fragment),Nzo=l(),Rhe=a("p"),jzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dzo=l(),qa=a("p"),Gzo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),Ozo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),Qzo=o("pretrained_model_name_or_path"),Wzo=o(":"),Hzo=l(),Fe=a("ul"),OF=a("li"),qhe=a("strong"),Uzo=o("beit"),Jzo=o(" \u2014 "),RV=a("a"),Yzo=o("BeitForImageClassification"),Kzo=o(" (BEiT model)"),Zzo=l(),VF=a("li"),Nhe=a("strong"),eQo=o("convnext"),oQo=o(" \u2014 "),BV=a("a"),rQo=o("ConvNextForImageClassification"),tQo=o(" (ConvNext model)"),aQo=l(),XF=a("li"),jhe=a("strong"),nQo=o("data2vec-vision"),sQo=o(" \u2014 "),PV=a("a"),lQo=o("Data2VecVisionForImageClassification"),iQo=o(" (Data2VecVision model)"),dQo=l(),Bs=a("li"),Dhe=a("strong"),cQo=o("deit"),fQo=o(" \u2014 "),IV=a("a"),mQo=o("DeiTForImageClassification"),gQo=o(" or "),qV=a("a"),hQo=o("DeiTForImageClassificationWithTeacher"),pQo=o(" (DeiT model)"),uQo=l(),zF=a("li"),Ghe=a("strong"),_Qo=o("imagegpt"),bQo=o(" \u2014 "),NV=a("a"),vQo=o("ImageGPTForImageClassification"),FQo=o(" (ImageGPT model)"),TQo=l(),gt=a("li"),Ohe=a("strong"),MQo=o("perceiver"),EQo=o(" \u2014 "),jV=a("a"),CQo=o("PerceiverForImageClassificationLearned"),wQo=o(" or "),DV=a("a"),AQo=o("PerceiverForImageClassificationFourier"),yQo=o(" or "),GV=a("a"),LQo=o("PerceiverForImageClassificationConvProcessing"),xQo=o(" (Perceiver model)"),$Qo=l(),QF=a("li"),Vhe=a("strong"),kQo=o("poolformer"),SQo=o(" \u2014 "),OV=a("a"),RQo=o("PoolFormerForImageClassification"),BQo=o(" (PoolFormer model)"),PQo=l(),WF=a("li"),Xhe=a("strong"),IQo=o("regnet"),qQo=o(" \u2014 "),VV=a("a"),NQo=o("RegNetForImageClassification"),jQo=o(" (RegNet model)"),DQo=l(),HF=a("li"),zhe=a("strong"),GQo=o("resnet"),OQo=o(" \u2014 "),XV=a("a"),VQo=o("ResNetForImageClassification"),XQo=o(" (ResNet model)"),zQo=l(),UF=a("li"),Qhe=a("strong"),QQo=o("segformer"),WQo=o(" \u2014 "),zV=a("a"),HQo=o("SegformerForImageClassification"),UQo=o(" (SegFormer model)"),JQo=l(),JF=a("li"),Whe=a("strong"),YQo=o("swin"),KQo=o(" \u2014 "),QV=a("a"),ZQo=o("SwinForImageClassification"),eWo=o(" (Swin model)"),oWo=l(),YF=a("li"),Hhe=a("strong"),rWo=o("van"),tWo=o(" \u2014 "),WV=a("a"),aWo=o("VanForImageClassification"),nWo=o(" (VAN model)"),sWo=l(),KF=a("li"),Uhe=a("strong"),lWo=o("vit"),iWo=o(" \u2014 "),HV=a("a"),dWo=o("ViTForImageClassification"),cWo=o(" (ViT model)"),fWo=l(),ZF=a("p"),mWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),gWo=o("model.eval()"),hWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),pWo=o("model.train()"),uWo=l(),F(e0.$$.fragment),WIe=l(),ad=a("h2"),o0=a("a"),Khe=a("span"),F(By.$$.fragment),_Wo=l(),Zhe=a("span"),bWo=o("AutoModelForVision2Seq"),HIe=l(),Do=a("div"),F(Py.$$.fragment),vWo=l(),nd=a("p"),FWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UV=a("a"),TWo=o("from_pretrained()"),MWo=o(" class method or the "),JV=a("a"),EWo=o("from_config()"),CWo=o(` class
method.`),wWo=l(),Iy=a("p"),AWo=o("This class cannot be instantiated directly using "),epe=a("code"),yWo=o("__init__()"),LWo=o(" (throws an error)."),xWo=l(),ht=a("div"),F(qy.$$.fragment),$Wo=l(),ope=a("p"),kWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SWo=l(),sd=a("p"),RWo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),BWo=o("not"),PWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),IWo=o("from_pretrained()"),qWo=o(" to load the model weights."),NWo=l(),F(r0.$$.fragment),jWo=l(),so=a("div"),F(Ny.$$.fragment),DWo=l(),tpe=a("p"),GWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OWo=l(),Na=a("p"),VWo=o("The model class to instantiate is selected based on the "),ape=a("code"),XWo=o("model_type"),zWo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),QWo=o("pretrained_model_name_or_path"),WWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),HWo=o("pretrained_model_name_or_path"),UWo=o(":"),JWo=l(),lpe=a("ul"),t0=a("li"),ipe=a("strong"),YWo=o("vision-encoder-decoder"),KWo=o(" \u2014 "),KV=a("a"),ZWo=o("VisionEncoderDecoderModel"),eHo=o(" (Vision Encoder decoder model)"),oHo=l(),a0=a("p"),rHo=o("The model is set in evaluation mode by default using "),dpe=a("code"),tHo=o("model.eval()"),aHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),nHo=o("model.train()"),sHo=l(),F(n0.$$.fragment),UIe=l(),ld=a("h2"),s0=a("a"),fpe=a("span"),F(jy.$$.fragment),lHo=l(),mpe=a("span"),iHo=o("AutoModelForAudioClassification"),JIe=l(),Go=a("div"),F(Dy.$$.fragment),dHo=l(),id=a("p"),cHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZV=a("a"),fHo=o("from_pretrained()"),mHo=o(" class method or the "),eX=a("a"),gHo=o("from_config()"),hHo=o(` class
method.`),pHo=l(),Gy=a("p"),uHo=o("This class cannot be instantiated directly using "),gpe=a("code"),_Ho=o("__init__()"),bHo=o(" (throws an error)."),vHo=l(),pt=a("div"),F(Oy.$$.fragment),FHo=l(),hpe=a("p"),THo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),MHo=l(),dd=a("p"),EHo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),CHo=o("not"),wHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),AHo=o("from_pretrained()"),yHo=o(" to load the model weights."),LHo=l(),F(l0.$$.fragment),xHo=l(),lo=a("div"),F(Vy.$$.fragment),$Ho=l(),upe=a("p"),kHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),SHo=l(),ja=a("p"),RHo=o("The model class to instantiate is selected based on the "),_pe=a("code"),BHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),IHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(":"),DHo=l(),Ne=a("ul"),i0=a("li"),Fpe=a("strong"),GHo=o("data2vec-audio"),OHo=o(" \u2014 "),rX=a("a"),VHo=o("Data2VecAudioForSequenceClassification"),XHo=o(" (Data2VecAudio model)"),zHo=l(),d0=a("li"),Tpe=a("strong"),QHo=o("hubert"),WHo=o(" \u2014 "),tX=a("a"),HHo=o("HubertForSequenceClassification"),UHo=o(" (Hubert model)"),JHo=l(),c0=a("li"),Mpe=a("strong"),YHo=o("sew"),KHo=o(" \u2014 "),aX=a("a"),ZHo=o("SEWForSequenceClassification"),eUo=o(" (SEW model)"),oUo=l(),f0=a("li"),Epe=a("strong"),rUo=o("sew-d"),tUo=o(" \u2014 "),nX=a("a"),aUo=o("SEWDForSequenceClassification"),nUo=o(" (SEW-D model)"),sUo=l(),m0=a("li"),Cpe=a("strong"),lUo=o("unispeech"),iUo=o(" \u2014 "),sX=a("a"),dUo=o("UniSpeechForSequenceClassification"),cUo=o(" (UniSpeech model)"),fUo=l(),g0=a("li"),wpe=a("strong"),mUo=o("unispeech-sat"),gUo=o(" \u2014 "),lX=a("a"),hUo=o("UniSpeechSatForSequenceClassification"),pUo=o(" (UniSpeechSat model)"),uUo=l(),h0=a("li"),Ape=a("strong"),_Uo=o("wav2vec2"),bUo=o(" \u2014 "),iX=a("a"),vUo=o("Wav2Vec2ForSequenceClassification"),FUo=o(" (Wav2Vec2 model)"),TUo=l(),p0=a("li"),ype=a("strong"),MUo=o("wavlm"),EUo=o(" \u2014 "),dX=a("a"),CUo=o("WavLMForSequenceClassification"),wUo=o(" (WavLM model)"),AUo=l(),u0=a("p"),yUo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),LUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),$Uo=o("model.train()"),kUo=l(),F(_0.$$.fragment),YIe=l(),cd=a("h2"),b0=a("a"),$pe=a("span"),F(Xy.$$.fragment),SUo=l(),kpe=a("span"),RUo=o("AutoModelForAudioFrameClassification"),KIe=l(),Oo=a("div"),F(zy.$$.fragment),BUo=l(),fd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cX=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),fX=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),Qy=a("p"),GUo=o("This class cannot be instantiated directly using "),Spe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),ut=a("div"),F(Wy.$$.fragment),zUo=l(),Rpe=a("p"),QUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WUo=l(),md=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(v0.$$.fragment),eJo=l(),io=a("div"),F(Hy.$$.fragment),oJo=l(),Ppe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tJo=l(),Da=a("p"),aJo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),Ga=a("ul"),F0=a("li"),jpe=a("strong"),mJo=o("data2vec-audio"),gJo=o(" \u2014 "),gX=a("a"),hJo=o("Data2VecAudioForAudioFrameClassification"),pJo=o(" (Data2VecAudio model)"),uJo=l(),T0=a("li"),Dpe=a("strong"),_Jo=o("unispeech-sat"),bJo=o(" \u2014 "),hX=a("a"),vJo=o("UniSpeechSatForAudioFrameClassification"),FJo=o(" (UniSpeechSat model)"),TJo=l(),M0=a("li"),Gpe=a("strong"),MJo=o("wav2vec2"),EJo=o(" \u2014 "),pX=a("a"),CJo=o("Wav2Vec2ForAudioFrameClassification"),wJo=o(" (Wav2Vec2 model)"),AJo=l(),E0=a("li"),Ope=a("strong"),yJo=o("wavlm"),LJo=o(" \u2014 "),uX=a("a"),xJo=o("WavLMForAudioFrameClassification"),$Jo=o(" (WavLM model)"),kJo=l(),C0=a("p"),SJo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),RJo=o("model.eval()"),BJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),PJo=o("model.train()"),IJo=l(),F(w0.$$.fragment),ZIe=l(),gd=a("h2"),A0=a("a"),zpe=a("span"),F(Uy.$$.fragment),qJo=l(),Qpe=a("span"),NJo=o("AutoModelForCTC"),eqe=l(),Vo=a("div"),F(Jy.$$.fragment),jJo=l(),hd=a("p"),DJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=a("a"),GJo=o("from_pretrained()"),OJo=o(" class method or the "),bX=a("a"),VJo=o("from_config()"),XJo=o(` class
method.`),zJo=l(),Yy=a("p"),QJo=o("This class cannot be instantiated directly using "),Wpe=a("code"),WJo=o("__init__()"),HJo=o(" (throws an error)."),UJo=l(),_t=a("div"),F(Ky.$$.fragment),JJo=l(),Hpe=a("p"),YJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),KJo=l(),pd=a("p"),ZJo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),eYo=o("not"),oYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),rYo=o("from_pretrained()"),tYo=o(" to load the model weights."),aYo=l(),F(y0.$$.fragment),nYo=l(),co=a("div"),F(Zy.$$.fragment),sYo=l(),Jpe=a("p"),lYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),iYo=l(),Oa=a("p"),dYo=o("The model class to instantiate is selected based on the "),Ype=a("code"),cYo=o("model_type"),fYo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),mYo=o("pretrained_model_name_or_path"),gYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),hYo=o("pretrained_model_name_or_path"),pYo=o(":"),uYo=l(),je=a("ul"),L0=a("li"),eue=a("strong"),_Yo=o("data2vec-audio"),bYo=o(" \u2014 "),FX=a("a"),vYo=o("Data2VecAudioForCTC"),FYo=o(" (Data2VecAudio model)"),TYo=l(),x0=a("li"),oue=a("strong"),MYo=o("hubert"),EYo=o(" \u2014 "),TX=a("a"),CYo=o("HubertForCTC"),wYo=o(" (Hubert model)"),AYo=l(),$0=a("li"),rue=a("strong"),yYo=o("sew"),LYo=o(" \u2014 "),MX=a("a"),xYo=o("SEWForCTC"),$Yo=o(" (SEW model)"),kYo=l(),k0=a("li"),tue=a("strong"),SYo=o("sew-d"),RYo=o(" \u2014 "),EX=a("a"),BYo=o("SEWDForCTC"),PYo=o(" (SEW-D model)"),IYo=l(),S0=a("li"),aue=a("strong"),qYo=o("unispeech"),NYo=o(" \u2014 "),CX=a("a"),jYo=o("UniSpeechForCTC"),DYo=o(" (UniSpeech model)"),GYo=l(),R0=a("li"),nue=a("strong"),OYo=o("unispeech-sat"),VYo=o(" \u2014 "),wX=a("a"),XYo=o("UniSpeechSatForCTC"),zYo=o(" (UniSpeechSat model)"),QYo=l(),B0=a("li"),sue=a("strong"),WYo=o("wav2vec2"),HYo=o(" \u2014 "),AX=a("a"),UYo=o("Wav2Vec2ForCTC"),JYo=o(" (Wav2Vec2 model)"),YYo=l(),P0=a("li"),lue=a("strong"),KYo=o("wavlm"),ZYo=o(" \u2014 "),yX=a("a"),eKo=o("WavLMForCTC"),oKo=o(" (WavLM model)"),rKo=l(),I0=a("p"),tKo=o("The model is set in evaluation mode by default using "),iue=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),sKo=o("model.train()"),lKo=l(),F(q0.$$.fragment),oqe=l(),ud=a("h2"),N0=a("a"),cue=a("span"),F(eL.$$.fragment),iKo=l(),fue=a("span"),dKo=o("AutoModelForSpeechSeq2Seq"),rqe=l(),Xo=a("div"),F(oL.$$.fragment),cKo=l(),_d=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LX=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),xX=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),uKo=l(),rL=a("p"),_Ko=o("This class cannot be instantiated directly using "),mue=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),bt=a("div"),F(tL.$$.fragment),TKo=l(),gue=a("p"),MKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EKo=l(),bd=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),yKo=o("from_pretrained()"),LKo=o(" to load the model weights."),xKo=l(),F(j0.$$.fragment),$Ko=l(),fo=a("div"),F(aL.$$.fragment),kKo=l(),pue=a("p"),SKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RKo=l(),Va=a("p"),BKo=o("The model class to instantiate is selected based on the "),uue=a("code"),PKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),qKo=o("pretrained_model_name_or_path"),NKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),nL=a("ul"),D0=a("li"),vue=a("strong"),OKo=o("speech-encoder-decoder"),VKo=o(" \u2014 "),kX=a("a"),XKo=o("SpeechEncoderDecoderModel"),zKo=o(" (Speech Encoder decoder model)"),QKo=l(),G0=a("li"),Fue=a("strong"),WKo=o("speech_to_text"),HKo=o(" \u2014 "),SX=a("a"),UKo=o("Speech2TextForConditionalGeneration"),JKo=o(" (Speech2Text model)"),YKo=l(),O0=a("p"),KKo=o("The model is set in evaluation mode by default using "),Tue=a("code"),ZKo=o("model.eval()"),eZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),oZo=o("model.train()"),rZo=l(),F(V0.$$.fragment),tqe=l(),vd=a("h2"),X0=a("a"),Eue=a("span"),F(sL.$$.fragment),tZo=l(),Cue=a("span"),aZo=o("AutoModelForAudioXVector"),aqe=l(),zo=a("div"),F(lL.$$.fragment),nZo=l(),Fd=a("p"),sZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RX=a("a"),lZo=o("from_pretrained()"),iZo=o(" class method or the "),BX=a("a"),dZo=o("from_config()"),cZo=o(` class
method.`),fZo=l(),iL=a("p"),mZo=o("This class cannot be instantiated directly using "),wue=a("code"),gZo=o("__init__()"),hZo=o(" (throws an error)."),pZo=l(),vt=a("div"),F(dL.$$.fragment),uZo=l(),Aue=a("p"),_Zo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bZo=l(),Td=a("p"),vZo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),FZo=o("not"),TZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),MZo=o("from_pretrained()"),EZo=o(" to load the model weights."),CZo=l(),F(z0.$$.fragment),wZo=l(),mo=a("div"),F(cL.$$.fragment),AZo=l(),Lue=a("p"),yZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),LZo=l(),Xa=a("p"),xZo=o("The model class to instantiate is selected based on the "),xue=a("code"),$Zo=o("model_type"),kZo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),SZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(":"),IZo=l(),za=a("ul"),Q0=a("li"),Sue=a("strong"),qZo=o("data2vec-audio"),NZo=o(" \u2014 "),IX=a("a"),jZo=o("Data2VecAudioForXVector"),DZo=o(" (Data2VecAudio model)"),GZo=l(),W0=a("li"),Rue=a("strong"),OZo=o("unispeech-sat"),VZo=o(" \u2014 "),qX=a("a"),XZo=o("UniSpeechSatForXVector"),zZo=o(" (UniSpeechSat model)"),QZo=l(),H0=a("li"),Bue=a("strong"),WZo=o("wav2vec2"),HZo=o(" \u2014 "),NX=a("a"),UZo=o("Wav2Vec2ForXVector"),JZo=o(" (Wav2Vec2 model)"),YZo=l(),U0=a("li"),Pue=a("strong"),KZo=o("wavlm"),ZZo=o(" \u2014 "),jX=a("a"),eer=o("WavLMForXVector"),oer=o(" (WavLM model)"),rer=l(),J0=a("p"),ter=o("The model is set in evaluation mode by default using "),Iue=a("code"),aer=o("model.eval()"),ner=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),ser=o("model.train()"),ler=l(),F(Y0.$$.fragment),nqe=l(),Md=a("h2"),K0=a("a"),Nue=a("span"),F(fL.$$.fragment),ier=l(),jue=a("span"),der=o("AutoModelForMaskedImageModeling"),sqe=l(),Qo=a("div"),F(mL.$$.fragment),cer=l(),Ed=a("p"),fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DX=a("a"),mer=o("from_pretrained()"),ger=o(" class method or the "),GX=a("a"),her=o("from_config()"),per=o(` class
method.`),uer=l(),gL=a("p"),_er=o("This class cannot be instantiated directly using "),Due=a("code"),ber=o("__init__()"),ver=o(" (throws an error)."),Fer=l(),Ft=a("div"),F(hL.$$.fragment),Ter=l(),Gue=a("p"),Mer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eer=l(),Cd=a("p"),Cer=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),wer=o("not"),Aer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),yer=o("from_pretrained()"),Ler=o(" to load the model weights."),xer=l(),F(Z0.$$.fragment),$er=l(),go=a("div"),F(pL.$$.fragment),ker=l(),Vue=a("p"),Ser=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rer=l(),Qa=a("p"),Ber=o("The model class to instantiate is selected based on the "),Xue=a("code"),Per=o("model_type"),Ier=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),qer=o("pretrained_model_name_or_path"),Ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(":"),Ger=l(),wd=a("ul"),eT=a("li"),Wue=a("strong"),Oer=o("deit"),Ver=o(" \u2014 "),VX=a("a"),Xer=o("DeiTForMaskedImageModeling"),zer=o(" (DeiT model)"),Qer=l(),oT=a("li"),Hue=a("strong"),Wer=o("swin"),Her=o(" \u2014 "),XX=a("a"),Uer=o("SwinForMaskedImageModeling"),Jer=o(" (Swin model)"),Yer=l(),rT=a("li"),Uue=a("strong"),Ker=o("vit"),Zer=o(" \u2014 "),zX=a("a"),eor=o("ViTForMaskedImageModeling"),oor=o(" (ViT model)"),ror=l(),tT=a("p"),tor=o("The model is set in evaluation mode by default using "),Jue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),sor=o("model.train()"),lor=l(),F(aT.$$.fragment),lqe=l(),Ad=a("h2"),nT=a("a"),Kue=a("span"),F(uL.$$.fragment),ior=l(),Zue=a("span"),dor=o("AutoModelForObjectDetection"),iqe=l(),Wo=a("div"),F(_L.$$.fragment),cor=l(),yd=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QX=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),WX=a("a"),por=o("from_config()"),uor=o(` class
method.`),_or=l(),bL=a("p"),bor=o("This class cannot be instantiated directly using "),e_e=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),Tt=a("div"),F(vL.$$.fragment),Mor=l(),o_e=a("p"),Eor=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Cor=l(),Ld=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Aor=o("not"),yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),Lor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(sT.$$.fragment),kor=l(),ho=a("div"),F(FL.$$.fragment),Sor=l(),t_e=a("p"),Ror=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bor=l(),Wa=a("p"),Por=o("The model class to instantiate is selected based on the "),a_e=a("code"),Ior=o("model_type"),qor=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),Nor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),TL=a("ul"),lT=a("li"),l_e=a("strong"),Vor=o("detr"),Xor=o(" \u2014 "),UX=a("a"),zor=o("DetrForObjectDetection"),Qor=o(" (DETR model)"),Wor=l(),iT=a("li"),i_e=a("strong"),Hor=o("yolos"),Uor=o(" \u2014 "),JX=a("a"),Jor=o("YolosForObjectDetection"),Yor=o(" (YOLOS model)"),Kor=l(),dT=a("p"),Zor=o("The model is set in evaluation mode by default using "),d_e=a("code"),err=o("model.eval()"),orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=a("code"),rrr=o("model.train()"),trr=l(),F(cT.$$.fragment),dqe=l(),xd=a("h2"),fT=a("a"),f_e=a("span"),F(ML.$$.fragment),arr=l(),m_e=a("span"),nrr=o("AutoModelForImageSegmentation"),cqe=l(),Ho=a("div"),F(EL.$$.fragment),srr=l(),$d=a("p"),lrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YX=a("a"),irr=o("from_pretrained()"),drr=o(" class method or the "),KX=a("a"),crr=o("from_config()"),frr=o(` class
method.`),mrr=l(),CL=a("p"),grr=o("This class cannot be instantiated directly using "),g_e=a("code"),hrr=o("__init__()"),prr=o(" (throws an error)."),urr=l(),Mt=a("div"),F(wL.$$.fragment),_rr=l(),h_e=a("p"),brr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vrr=l(),kd=a("p"),Frr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Trr=o("not"),Mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Err=o("from_pretrained()"),Crr=o(" to load the model weights."),wrr=l(),F(mT.$$.fragment),Arr=l(),po=a("div"),F(AL.$$.fragment),yrr=l(),u_e=a("p"),Lrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xrr=l(),Ha=a("p"),$rr=o("The model class to instantiate is selected based on the "),__e=a("code"),krr=o("model_type"),Srr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),Rrr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Prr=o("pretrained_model_name_or_path"),Irr=o(":"),qrr=l(),F_e=a("ul"),gT=a("li"),T_e=a("strong"),Nrr=o("detr"),jrr=o(" \u2014 "),ez=a("a"),Drr=o("DetrForSegmentation"),Grr=o(" (DETR model)"),Orr=l(),hT=a("p"),Vrr=o("The model is set in evaluation mode by default using "),M_e=a("code"),Xrr=o("model.eval()"),zrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),Qrr=o("model.train()"),Wrr=l(),F(pT.$$.fragment),fqe=l(),Sd=a("h2"),uT=a("a"),C_e=a("span"),F(yL.$$.fragment),Hrr=l(),w_e=a("span"),Urr=o("AutoModelForSemanticSegmentation"),mqe=l(),Uo=a("div"),F(LL.$$.fragment),Jrr=l(),Rd=a("p"),Yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oz=a("a"),Krr=o("from_pretrained()"),Zrr=o(" class method or the "),rz=a("a"),etr=o("from_config()"),otr=o(` class
method.`),rtr=l(),xL=a("p"),ttr=o("This class cannot be instantiated directly using "),A_e=a("code"),atr=o("__init__()"),ntr=o(" (throws an error)."),str=l(),Et=a("div"),F($L.$$.fragment),ltr=l(),y_e=a("p"),itr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dtr=l(),Bd=a("p"),ctr=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),ftr=o("not"),mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),gtr=o("from_pretrained()"),htr=o(" to load the model weights."),ptr=l(),F(_T.$$.fragment),utr=l(),uo=a("div"),F(kL.$$.fragment),_tr=l(),x_e=a("p"),btr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vtr=l(),Ua=a("p"),Ftr=o("The model class to instantiate is selected based on the "),$_e=a("code"),Ttr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),Etr=o("pretrained_model_name_or_path"),Ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),ytr=l(),Ja=a("ul"),bT=a("li"),R_e=a("strong"),Ltr=o("beit"),xtr=o(" \u2014 "),az=a("a"),$tr=o("BeitForSemanticSegmentation"),ktr=o(" (BEiT model)"),Str=l(),vT=a("li"),B_e=a("strong"),Rtr=o("data2vec-vision"),Btr=o(" \u2014 "),nz=a("a"),Ptr=o("Data2VecVisionForSemanticSegmentation"),Itr=o(" (Data2VecVision model)"),qtr=l(),FT=a("li"),P_e=a("strong"),Ntr=o("dpt"),jtr=o(" \u2014 "),sz=a("a"),Dtr=o("DPTForSemanticSegmentation"),Gtr=o(" (DPT model)"),Otr=l(),TT=a("li"),I_e=a("strong"),Vtr=o("segformer"),Xtr=o(" \u2014 "),lz=a("a"),ztr=o("SegformerForSemanticSegmentation"),Qtr=o(" (SegFormer model)"),Wtr=l(),MT=a("p"),Htr=o("The model is set in evaluation mode by default using "),q_e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(ET.$$.fragment),gqe=l(),Pd=a("h2"),CT=a("a"),j_e=a("span"),F(SL.$$.fragment),Ztr=l(),D_e=a("span"),ear=o("AutoModelForInstanceSegmentation"),hqe=l(),Jo=a("div"),F(RL.$$.fragment),oar=l(),Id=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),dz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),BL=a("p"),iar=o("This class cannot be instantiated directly using "),G_e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Ct=a("div"),F(PL.$$.fragment),mar=l(),O_e=a("p"),gar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),har=l(),qd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),uar=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(wT.$$.fragment),Mar=l(),_o=a("div"),F(IL.$$.fragment),Ear=l(),X_e=a("p"),Car=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),war=l(),Ya=a("p"),Aar=o("The model class to instantiate is selected based on the "),z_e=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),H_e=a("ul"),AT=a("li"),U_e=a("strong"),Bar=o("maskformer"),Par=o(" \u2014 "),fz=a("a"),Iar=o("MaskFormerForInstanceSegmentation"),qar=o(" (MaskFormer model)"),Nar=l(),yT=a("p"),jar=o("The model is set in evaluation mode by default using "),J_e=a("code"),Dar=o("model.eval()"),Gar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),Oar=o("model.train()"),Var=l(),F(LT.$$.fragment),pqe=l(),Nd=a("h2"),xT=a("a"),K_e=a("span"),F(qL.$$.fragment),Xar=l(),Z_e=a("span"),zar=o("TFAutoModel"),uqe=l(),Yo=a("div"),F(NL.$$.fragment),Qar=l(),jd=a("p"),War=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mz=a("a"),Har=o("from_pretrained()"),Uar=o(" class method or the "),gz=a("a"),Jar=o("from_config()"),Yar=o(` class
method.`),Kar=l(),jL=a("p"),Zar=o("This class cannot be instantiated directly using "),e2e=a("code"),enr=o("__init__()"),onr=o(" (throws an error)."),rnr=l(),wt=a("div"),F(DL.$$.fragment),tnr=l(),o2e=a("p"),anr=o("Instantiates one of the base model classes of the library from a configuration."),nnr=l(),Dd=a("p"),snr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),lnr=o("not"),inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),dnr=o("from_pretrained()"),cnr=o(" to load the model weights."),fnr=l(),F($T.$$.fragment),mnr=l(),wr=a("div"),F(GL.$$.fragment),gnr=l(),t2e=a("p"),hnr=o("Instantiate one of the base model classes of the library from a pretrained model."),pnr=l(),Ka=a("p"),unr=o("The model class to instantiate is selected based on the "),a2e=a("code"),_nr=o("model_type"),bnr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),vnr=o("pretrained_model_name_or_path"),Fnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Tnr=o("pretrained_model_name_or_path"),Mnr=o(":"),Enr=l(),j=a("ul"),kT=a("li"),l2e=a("strong"),Cnr=o("albert"),wnr=o(" \u2014 "),pz=a("a"),Anr=o("TFAlbertModel"),ynr=o(" (ALBERT model)"),Lnr=l(),ST=a("li"),i2e=a("strong"),xnr=o("bart"),$nr=o(" \u2014 "),uz=a("a"),knr=o("TFBartModel"),Snr=o(" (BART model)"),Rnr=l(),RT=a("li"),d2e=a("strong"),Bnr=o("bert"),Pnr=o(" \u2014 "),_z=a("a"),Inr=o("TFBertModel"),qnr=o(" (BERT model)"),Nnr=l(),BT=a("li"),c2e=a("strong"),jnr=o("blenderbot"),Dnr=o(" \u2014 "),bz=a("a"),Gnr=o("TFBlenderbotModel"),Onr=o(" (Blenderbot model)"),Vnr=l(),PT=a("li"),f2e=a("strong"),Xnr=o("blenderbot-small"),znr=o(" \u2014 "),vz=a("a"),Qnr=o("TFBlenderbotSmallModel"),Wnr=o(" (BlenderbotSmall model)"),Hnr=l(),IT=a("li"),m2e=a("strong"),Unr=o("camembert"),Jnr=o(" \u2014 "),Fz=a("a"),Ynr=o("TFCamembertModel"),Knr=o(" (CamemBERT model)"),Znr=l(),qT=a("li"),g2e=a("strong"),esr=o("clip"),osr=o(" \u2014 "),Tz=a("a"),rsr=o("TFCLIPModel"),tsr=o(" (CLIP model)"),asr=l(),NT=a("li"),h2e=a("strong"),nsr=o("convbert"),ssr=o(" \u2014 "),Mz=a("a"),lsr=o("TFConvBertModel"),isr=o(" (ConvBERT model)"),dsr=l(),jT=a("li"),p2e=a("strong"),csr=o("convnext"),fsr=o(" \u2014 "),Ez=a("a"),msr=o("TFConvNextModel"),gsr=o(" (ConvNext model)"),hsr=l(),DT=a("li"),u2e=a("strong"),psr=o("ctrl"),usr=o(" \u2014 "),Cz=a("a"),_sr=o("TFCTRLModel"),bsr=o(" (CTRL model)"),vsr=l(),GT=a("li"),_2e=a("strong"),Fsr=o("data2vec-vision"),Tsr=o(" \u2014 "),wz=a("a"),Msr=o("TFData2VecVisionModel"),Esr=o(" (Data2VecVision model)"),Csr=l(),OT=a("li"),b2e=a("strong"),wsr=o("deberta"),Asr=o(" \u2014 "),Az=a("a"),ysr=o("TFDebertaModel"),Lsr=o(" (DeBERTa model)"),xsr=l(),VT=a("li"),v2e=a("strong"),$sr=o("deberta-v2"),ksr=o(" \u2014 "),yz=a("a"),Ssr=o("TFDebertaV2Model"),Rsr=o(" (DeBERTa-v2 model)"),Bsr=l(),XT=a("li"),F2e=a("strong"),Psr=o("distilbert"),Isr=o(" \u2014 "),Lz=a("a"),qsr=o("TFDistilBertModel"),Nsr=o(" (DistilBERT model)"),jsr=l(),zT=a("li"),T2e=a("strong"),Dsr=o("dpr"),Gsr=o(" \u2014 "),xz=a("a"),Osr=o("TFDPRQuestionEncoder"),Vsr=o(" (DPR model)"),Xsr=l(),QT=a("li"),M2e=a("strong"),zsr=o("electra"),Qsr=o(" \u2014 "),$z=a("a"),Wsr=o("TFElectraModel"),Hsr=o(" (ELECTRA model)"),Usr=l(),WT=a("li"),E2e=a("strong"),Jsr=o("flaubert"),Ysr=o(" \u2014 "),kz=a("a"),Ksr=o("TFFlaubertModel"),Zsr=o(" (FlauBERT model)"),elr=l(),Ps=a("li"),C2e=a("strong"),olr=o("funnel"),rlr=o(" \u2014 "),Sz=a("a"),tlr=o("TFFunnelModel"),alr=o(" or "),Rz=a("a"),nlr=o("TFFunnelBaseModel"),slr=o(" (Funnel Transformer model)"),llr=l(),HT=a("li"),w2e=a("strong"),ilr=o("gpt2"),dlr=o(" \u2014 "),Bz=a("a"),clr=o("TFGPT2Model"),flr=o(" (OpenAI GPT-2 model)"),mlr=l(),UT=a("li"),A2e=a("strong"),glr=o("gptj"),hlr=o(" \u2014 "),Pz=a("a"),plr=o("TFGPTJModel"),ulr=o(" (GPT-J model)"),_lr=l(),JT=a("li"),y2e=a("strong"),blr=o("hubert"),vlr=o(" \u2014 "),Iz=a("a"),Flr=o("TFHubertModel"),Tlr=o(" (Hubert model)"),Mlr=l(),YT=a("li"),L2e=a("strong"),Elr=o("layoutlm"),Clr=o(" \u2014 "),qz=a("a"),wlr=o("TFLayoutLMModel"),Alr=o(" (LayoutLM model)"),ylr=l(),KT=a("li"),x2e=a("strong"),Llr=o("led"),xlr=o(" \u2014 "),Nz=a("a"),$lr=o("TFLEDModel"),klr=o(" (LED model)"),Slr=l(),ZT=a("li"),$2e=a("strong"),Rlr=o("longformer"),Blr=o(" \u2014 "),jz=a("a"),Plr=o("TFLongformerModel"),Ilr=o(" (Longformer model)"),qlr=l(),e7=a("li"),k2e=a("strong"),Nlr=o("lxmert"),jlr=o(" \u2014 "),Dz=a("a"),Dlr=o("TFLxmertModel"),Glr=o(" (LXMERT model)"),Olr=l(),o7=a("li"),S2e=a("strong"),Vlr=o("marian"),Xlr=o(" \u2014 "),Gz=a("a"),zlr=o("TFMarianModel"),Qlr=o(" (Marian model)"),Wlr=l(),r7=a("li"),R2e=a("strong"),Hlr=o("mbart"),Ulr=o(" \u2014 "),Oz=a("a"),Jlr=o("TFMBartModel"),Ylr=o(" (mBART model)"),Klr=l(),t7=a("li"),B2e=a("strong"),Zlr=o("mobilebert"),eir=o(" \u2014 "),Vz=a("a"),oir=o("TFMobileBertModel"),rir=o(" (MobileBERT model)"),tir=l(),a7=a("li"),P2e=a("strong"),air=o("mpnet"),nir=o(" \u2014 "),Xz=a("a"),sir=o("TFMPNetModel"),lir=o(" (MPNet model)"),iir=l(),n7=a("li"),I2e=a("strong"),dir=o("mt5"),cir=o(" \u2014 "),zz=a("a"),fir=o("TFMT5Model"),mir=o(" (mT5 model)"),gir=l(),s7=a("li"),q2e=a("strong"),hir=o("openai-gpt"),pir=o(" \u2014 "),Qz=a("a"),uir=o("TFOpenAIGPTModel"),_ir=o(" (OpenAI GPT model)"),bir=l(),l7=a("li"),N2e=a("strong"),vir=o("pegasus"),Fir=o(" \u2014 "),Wz=a("a"),Tir=o("TFPegasusModel"),Mir=o(" (Pegasus model)"),Eir=l(),i7=a("li"),j2e=a("strong"),Cir=o("rembert"),wir=o(" \u2014 "),Hz=a("a"),Air=o("TFRemBertModel"),yir=o(" (RemBERT model)"),Lir=l(),d7=a("li"),D2e=a("strong"),xir=o("roberta"),$ir=o(" \u2014 "),Uz=a("a"),kir=o("TFRobertaModel"),Sir=o(" (RoBERTa model)"),Rir=l(),c7=a("li"),G2e=a("strong"),Bir=o("roformer"),Pir=o(" \u2014 "),Jz=a("a"),Iir=o("TFRoFormerModel"),qir=o(" (RoFormer model)"),Nir=l(),f7=a("li"),O2e=a("strong"),jir=o("speech_to_text"),Dir=o(" \u2014 "),Yz=a("a"),Gir=o("TFSpeech2TextModel"),Oir=o(" (Speech2Text model)"),Vir=l(),m7=a("li"),V2e=a("strong"),Xir=o("t5"),zir=o(" \u2014 "),Kz=a("a"),Qir=o("TFT5Model"),Wir=o(" (T5 model)"),Hir=l(),g7=a("li"),X2e=a("strong"),Uir=o("tapas"),Jir=o(" \u2014 "),Zz=a("a"),Yir=o("TFTapasModel"),Kir=o(" (TAPAS model)"),Zir=l(),h7=a("li"),z2e=a("strong"),edr=o("transfo-xl"),odr=o(" \u2014 "),eQ=a("a"),rdr=o("TFTransfoXLModel"),tdr=o(" (Transformer-XL model)"),adr=l(),p7=a("li"),Q2e=a("strong"),ndr=o("vit"),sdr=o(" \u2014 "),oQ=a("a"),ldr=o("TFViTModel"),idr=o(" (ViT model)"),ddr=l(),u7=a("li"),W2e=a("strong"),cdr=o("vit_mae"),fdr=o(" \u2014 "),rQ=a("a"),mdr=o("TFViTMAEModel"),gdr=o(" (ViTMAE model)"),hdr=l(),_7=a("li"),H2e=a("strong"),pdr=o("wav2vec2"),udr=o(" \u2014 "),tQ=a("a"),_dr=o("TFWav2Vec2Model"),bdr=o(" (Wav2Vec2 model)"),vdr=l(),b7=a("li"),U2e=a("strong"),Fdr=o("xlm"),Tdr=o(" \u2014 "),aQ=a("a"),Mdr=o("TFXLMModel"),Edr=o(" (XLM model)"),Cdr=l(),v7=a("li"),J2e=a("strong"),wdr=o("xlm-roberta"),Adr=o(" \u2014 "),nQ=a("a"),ydr=o("TFXLMRobertaModel"),Ldr=o(" (XLM-RoBERTa model)"),xdr=l(),F7=a("li"),Y2e=a("strong"),$dr=o("xlnet"),kdr=o(" \u2014 "),sQ=a("a"),Sdr=o("TFXLNetModel"),Rdr=o(" (XLNet model)"),Bdr=l(),F(T7.$$.fragment),_qe=l(),Gd=a("h2"),M7=a("a"),K2e=a("span"),F(OL.$$.fragment),Pdr=l(),Z2e=a("span"),Idr=o("TFAutoModelForPreTraining"),bqe=l(),Ko=a("div"),F(VL.$$.fragment),qdr=l(),Od=a("p"),Ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lQ=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),iQ=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),XL=a("p"),Xdr=o("This class cannot be instantiated directly using "),e1e=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),At=a("div"),F(zL.$$.fragment),Hdr=l(),o1e=a("p"),Udr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jdr=l(),Vd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(E7.$$.fragment),tcr=l(),Ar=a("div"),F(QL.$$.fragment),acr=l(),t1e=a("p"),ncr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),scr=l(),Za=a("p"),lcr=o("The model class to instantiate is selected based on the "),a1e=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),se=a("ul"),C7=a("li"),l1e=a("strong"),pcr=o("albert"),ucr=o(" \u2014 "),cQ=a("a"),_cr=o("TFAlbertForPreTraining"),bcr=o(" (ALBERT model)"),vcr=l(),w7=a("li"),i1e=a("strong"),Fcr=o("bart"),Tcr=o(" \u2014 "),fQ=a("a"),Mcr=o("TFBartForConditionalGeneration"),Ecr=o(" (BART model)"),Ccr=l(),A7=a("li"),d1e=a("strong"),wcr=o("bert"),Acr=o(" \u2014 "),mQ=a("a"),ycr=o("TFBertForPreTraining"),Lcr=o(" (BERT model)"),xcr=l(),y7=a("li"),c1e=a("strong"),$cr=o("camembert"),kcr=o(" \u2014 "),gQ=a("a"),Scr=o("TFCamembertForMaskedLM"),Rcr=o(" (CamemBERT model)"),Bcr=l(),L7=a("li"),f1e=a("strong"),Pcr=o("ctrl"),Icr=o(" \u2014 "),hQ=a("a"),qcr=o("TFCTRLLMHeadModel"),Ncr=o(" (CTRL model)"),jcr=l(),x7=a("li"),m1e=a("strong"),Dcr=o("distilbert"),Gcr=o(" \u2014 "),pQ=a("a"),Ocr=o("TFDistilBertForMaskedLM"),Vcr=o(" (DistilBERT model)"),Xcr=l(),$7=a("li"),g1e=a("strong"),zcr=o("electra"),Qcr=o(" \u2014 "),uQ=a("a"),Wcr=o("TFElectraForPreTraining"),Hcr=o(" (ELECTRA model)"),Ucr=l(),k7=a("li"),h1e=a("strong"),Jcr=o("flaubert"),Ycr=o(" \u2014 "),_Q=a("a"),Kcr=o("TFFlaubertWithLMHeadModel"),Zcr=o(" (FlauBERT model)"),efr=l(),S7=a("li"),p1e=a("strong"),ofr=o("funnel"),rfr=o(" \u2014 "),bQ=a("a"),tfr=o("TFFunnelForPreTraining"),afr=o(" (Funnel Transformer model)"),nfr=l(),R7=a("li"),u1e=a("strong"),sfr=o("gpt2"),lfr=o(" \u2014 "),vQ=a("a"),ifr=o("TFGPT2LMHeadModel"),dfr=o(" (OpenAI GPT-2 model)"),cfr=l(),B7=a("li"),_1e=a("strong"),ffr=o("layoutlm"),mfr=o(" \u2014 "),FQ=a("a"),gfr=o("TFLayoutLMForMaskedLM"),hfr=o(" (LayoutLM model)"),pfr=l(),P7=a("li"),b1e=a("strong"),ufr=o("lxmert"),_fr=o(" \u2014 "),TQ=a("a"),bfr=o("TFLxmertForPreTraining"),vfr=o(" (LXMERT model)"),Ffr=l(),I7=a("li"),v1e=a("strong"),Tfr=o("mobilebert"),Mfr=o(" \u2014 "),MQ=a("a"),Efr=o("TFMobileBertForPreTraining"),Cfr=o(" (MobileBERT model)"),wfr=l(),q7=a("li"),F1e=a("strong"),Afr=o("mpnet"),yfr=o(" \u2014 "),EQ=a("a"),Lfr=o("TFMPNetForMaskedLM"),xfr=o(" (MPNet model)"),$fr=l(),N7=a("li"),T1e=a("strong"),kfr=o("openai-gpt"),Sfr=o(" \u2014 "),CQ=a("a"),Rfr=o("TFOpenAIGPTLMHeadModel"),Bfr=o(" (OpenAI GPT model)"),Pfr=l(),j7=a("li"),M1e=a("strong"),Ifr=o("roberta"),qfr=o(" \u2014 "),wQ=a("a"),Nfr=o("TFRobertaForMaskedLM"),jfr=o(" (RoBERTa model)"),Dfr=l(),D7=a("li"),E1e=a("strong"),Gfr=o("t5"),Ofr=o(" \u2014 "),AQ=a("a"),Vfr=o("TFT5ForConditionalGeneration"),Xfr=o(" (T5 model)"),zfr=l(),G7=a("li"),C1e=a("strong"),Qfr=o("tapas"),Wfr=o(" \u2014 "),yQ=a("a"),Hfr=o("TFTapasForMaskedLM"),Ufr=o(" (TAPAS model)"),Jfr=l(),O7=a("li"),w1e=a("strong"),Yfr=o("transfo-xl"),Kfr=o(" \u2014 "),LQ=a("a"),Zfr=o("TFTransfoXLLMHeadModel"),emr=o(" (Transformer-XL model)"),omr=l(),V7=a("li"),A1e=a("strong"),rmr=o("vit_mae"),tmr=o(" \u2014 "),xQ=a("a"),amr=o("TFViTMAEForPreTraining"),nmr=o(" (ViTMAE model)"),smr=l(),X7=a("li"),y1e=a("strong"),lmr=o("xlm"),imr=o(" \u2014 "),$Q=a("a"),dmr=o("TFXLMWithLMHeadModel"),cmr=o(" (XLM model)"),fmr=l(),z7=a("li"),L1e=a("strong"),mmr=o("xlm-roberta"),gmr=o(" \u2014 "),kQ=a("a"),hmr=o("TFXLMRobertaForMaskedLM"),pmr=o(" (XLM-RoBERTa model)"),umr=l(),Q7=a("li"),x1e=a("strong"),_mr=o("xlnet"),bmr=o(" \u2014 "),SQ=a("a"),vmr=o("TFXLNetLMHeadModel"),Fmr=o(" (XLNet model)"),Tmr=l(),F(W7.$$.fragment),vqe=l(),Xd=a("h2"),H7=a("a"),$1e=a("span"),F(WL.$$.fragment),Mmr=l(),k1e=a("span"),Emr=o("TFAutoModelForCausalLM"),Fqe=l(),Zo=a("div"),F(HL.$$.fragment),Cmr=l(),zd=a("p"),wmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RQ=a("a"),Amr=o("from_pretrained()"),ymr=o(" class method or the "),BQ=a("a"),Lmr=o("from_config()"),xmr=o(` class
method.`),$mr=l(),UL=a("p"),kmr=o("This class cannot be instantiated directly using "),S1e=a("code"),Smr=o("__init__()"),Rmr=o(" (throws an error)."),Bmr=l(),yt=a("div"),F(JL.$$.fragment),Pmr=l(),R1e=a("p"),Imr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qmr=l(),Qd=a("p"),Nmr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),jmr=o("not"),Dmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Gmr=o("from_pretrained()"),Omr=o(" to load the model weights."),Vmr=l(),F(U7.$$.fragment),Xmr=l(),yr=a("div"),F(YL.$$.fragment),zmr=l(),P1e=a("p"),Qmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wmr=l(),en=a("p"),Hmr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Umr=o("model_type"),Jmr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Zmr=o("pretrained_model_name_or_path"),egr=o(":"),ogr=l(),Te=a("ul"),J7=a("li"),j1e=a("strong"),rgr=o("bert"),tgr=o(" \u2014 "),IQ=a("a"),agr=o("TFBertLMHeadModel"),ngr=o(" (BERT model)"),sgr=l(),Y7=a("li"),D1e=a("strong"),lgr=o("camembert"),igr=o(" \u2014 "),qQ=a("a"),dgr=o("TFCamembertForCausalLM"),cgr=o(" (CamemBERT model)"),fgr=l(),K7=a("li"),G1e=a("strong"),mgr=o("ctrl"),ggr=o(" \u2014 "),NQ=a("a"),hgr=o("TFCTRLLMHeadModel"),pgr=o(" (CTRL model)"),ugr=l(),Z7=a("li"),O1e=a("strong"),_gr=o("gpt2"),bgr=o(" \u2014 "),jQ=a("a"),vgr=o("TFGPT2LMHeadModel"),Fgr=o(" (OpenAI GPT-2 model)"),Tgr=l(),eM=a("li"),V1e=a("strong"),Mgr=o("gptj"),Egr=o(" \u2014 "),DQ=a("a"),Cgr=o("TFGPTJForCausalLM"),wgr=o(" (GPT-J model)"),Agr=l(),oM=a("li"),X1e=a("strong"),ygr=o("openai-gpt"),Lgr=o(" \u2014 "),GQ=a("a"),xgr=o("TFOpenAIGPTLMHeadModel"),$gr=o(" (OpenAI GPT model)"),kgr=l(),rM=a("li"),z1e=a("strong"),Sgr=o("rembert"),Rgr=o(" \u2014 "),OQ=a("a"),Bgr=o("TFRemBertForCausalLM"),Pgr=o(" (RemBERT model)"),Igr=l(),tM=a("li"),Q1e=a("strong"),qgr=o("roberta"),Ngr=o(" \u2014 "),VQ=a("a"),jgr=o("TFRobertaForCausalLM"),Dgr=o(" (RoBERTa model)"),Ggr=l(),aM=a("li"),W1e=a("strong"),Ogr=o("roformer"),Vgr=o(" \u2014 "),XQ=a("a"),Xgr=o("TFRoFormerForCausalLM"),zgr=o(" (RoFormer model)"),Qgr=l(),nM=a("li"),H1e=a("strong"),Wgr=o("transfo-xl"),Hgr=o(" \u2014 "),zQ=a("a"),Ugr=o("TFTransfoXLLMHeadModel"),Jgr=o(" (Transformer-XL model)"),Ygr=l(),sM=a("li"),U1e=a("strong"),Kgr=o("xlm"),Zgr=o(" \u2014 "),QQ=a("a"),ehr=o("TFXLMWithLMHeadModel"),ohr=o(" (XLM model)"),rhr=l(),lM=a("li"),J1e=a("strong"),thr=o("xlnet"),ahr=o(" \u2014 "),WQ=a("a"),nhr=o("TFXLNetLMHeadModel"),shr=o(" (XLNet model)"),lhr=l(),F(iM.$$.fragment),Tqe=l(),Wd=a("h2"),dM=a("a"),Y1e=a("span"),F(KL.$$.fragment),ihr=l(),K1e=a("span"),dhr=o("TFAutoModelForImageClassification"),Mqe=l(),er=a("div"),F(ZL.$$.fragment),chr=l(),Hd=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=a("a"),mhr=o("from_pretrained()"),ghr=o(" class method or the "),UQ=a("a"),hhr=o("from_config()"),phr=o(` class
method.`),uhr=l(),e8=a("p"),_hr=o("This class cannot be instantiated directly using "),Z1e=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Fhr=l(),Lt=a("div"),F(o8.$$.fragment),Thr=l(),ebe=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ehr=l(),Ud=a("p"),Chr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),yhr=o("from_pretrained()"),Lhr=o(" to load the model weights."),xhr=l(),F(cM.$$.fragment),$hr=l(),Lr=a("div"),F(r8.$$.fragment),khr=l(),rbe=a("p"),Shr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rhr=l(),on=a("p"),Bhr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Phr=o("model_type"),Ihr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),qhr=o("pretrained_model_name_or_path"),Nhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(":"),Ghr=l(),Jd=a("ul"),fM=a("li"),sbe=a("strong"),Ohr=o("convnext"),Vhr=o(" \u2014 "),YQ=a("a"),Xhr=o("TFConvNextForImageClassification"),zhr=o(" (ConvNext model)"),Qhr=l(),mM=a("li"),lbe=a("strong"),Whr=o("data2vec-vision"),Hhr=o(" \u2014 "),KQ=a("a"),Uhr=o("TFData2VecVisionForImageClassification"),Jhr=o(" (Data2VecVision model)"),Yhr=l(),gM=a("li"),ibe=a("strong"),Khr=o("vit"),Zhr=o(" \u2014 "),ZQ=a("a"),epr=o("TFViTForImageClassification"),opr=o(" (ViT model)"),rpr=l(),F(hM.$$.fragment),Eqe=l(),Yd=a("h2"),pM=a("a"),dbe=a("span"),F(t8.$$.fragment),tpr=l(),cbe=a("span"),apr=o("TFAutoModelForMaskedLM"),Cqe=l(),or=a("div"),F(a8.$$.fragment),npr=l(),Kd=a("p"),spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eW=a("a"),lpr=o("from_pretrained()"),ipr=o(" class method or the "),oW=a("a"),dpr=o("from_config()"),cpr=o(` class
method.`),fpr=l(),n8=a("p"),mpr=o("This class cannot be instantiated directly using "),fbe=a("code"),gpr=o("__init__()"),hpr=o(" (throws an error)."),ppr=l(),xt=a("div"),F(s8.$$.fragment),upr=l(),mbe=a("p"),_pr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bpr=l(),Zd=a("p"),vpr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),Fpr=o("not"),Tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),Mpr=o("from_pretrained()"),Epr=o(" to load the model weights."),Cpr=l(),F(uM.$$.fragment),wpr=l(),xr=a("div"),F(l8.$$.fragment),Apr=l(),hbe=a("p"),ypr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lpr=l(),rn=a("p"),xpr=o("The model class to instantiate is selected based on the "),pbe=a("code"),$pr=o("model_type"),kpr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Spr=o("pretrained_model_name_or_path"),Rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Bpr=o("pretrained_model_name_or_path"),Ppr=o(":"),Ipr=l(),ie=a("ul"),_M=a("li"),bbe=a("strong"),qpr=o("albert"),Npr=o(" \u2014 "),tW=a("a"),jpr=o("TFAlbertForMaskedLM"),Dpr=o(" (ALBERT model)"),Gpr=l(),bM=a("li"),vbe=a("strong"),Opr=o("bert"),Vpr=o(" \u2014 "),aW=a("a"),Xpr=o("TFBertForMaskedLM"),zpr=o(" (BERT model)"),Qpr=l(),vM=a("li"),Fbe=a("strong"),Wpr=o("camembert"),Hpr=o(" \u2014 "),nW=a("a"),Upr=o("TFCamembertForMaskedLM"),Jpr=o(" (CamemBERT model)"),Ypr=l(),FM=a("li"),Tbe=a("strong"),Kpr=o("convbert"),Zpr=o(" \u2014 "),sW=a("a"),eur=o("TFConvBertForMaskedLM"),our=o(" (ConvBERT model)"),rur=l(),TM=a("li"),Mbe=a("strong"),tur=o("deberta"),aur=o(" \u2014 "),lW=a("a"),nur=o("TFDebertaForMaskedLM"),sur=o(" (DeBERTa model)"),lur=l(),MM=a("li"),Ebe=a("strong"),iur=o("deberta-v2"),dur=o(" \u2014 "),iW=a("a"),cur=o("TFDebertaV2ForMaskedLM"),fur=o(" (DeBERTa-v2 model)"),mur=l(),EM=a("li"),Cbe=a("strong"),gur=o("distilbert"),hur=o(" \u2014 "),dW=a("a"),pur=o("TFDistilBertForMaskedLM"),uur=o(" (DistilBERT model)"),_ur=l(),CM=a("li"),wbe=a("strong"),bur=o("electra"),vur=o(" \u2014 "),cW=a("a"),Fur=o("TFElectraForMaskedLM"),Tur=o(" (ELECTRA model)"),Mur=l(),wM=a("li"),Abe=a("strong"),Eur=o("flaubert"),Cur=o(" \u2014 "),fW=a("a"),wur=o("TFFlaubertWithLMHeadModel"),Aur=o(" (FlauBERT model)"),yur=l(),AM=a("li"),ybe=a("strong"),Lur=o("funnel"),xur=o(" \u2014 "),mW=a("a"),$ur=o("TFFunnelForMaskedLM"),kur=o(" (Funnel Transformer model)"),Sur=l(),yM=a("li"),Lbe=a("strong"),Rur=o("layoutlm"),Bur=o(" \u2014 "),gW=a("a"),Pur=o("TFLayoutLMForMaskedLM"),Iur=o(" (LayoutLM model)"),qur=l(),LM=a("li"),xbe=a("strong"),Nur=o("longformer"),jur=o(" \u2014 "),hW=a("a"),Dur=o("TFLongformerForMaskedLM"),Gur=o(" (Longformer model)"),Our=l(),xM=a("li"),$be=a("strong"),Vur=o("mobilebert"),Xur=o(" \u2014 "),pW=a("a"),zur=o("TFMobileBertForMaskedLM"),Qur=o(" (MobileBERT model)"),Wur=l(),$M=a("li"),kbe=a("strong"),Hur=o("mpnet"),Uur=o(" \u2014 "),uW=a("a"),Jur=o("TFMPNetForMaskedLM"),Yur=o(" (MPNet model)"),Kur=l(),kM=a("li"),Sbe=a("strong"),Zur=o("rembert"),e_r=o(" \u2014 "),_W=a("a"),o_r=o("TFRemBertForMaskedLM"),r_r=o(" (RemBERT model)"),t_r=l(),SM=a("li"),Rbe=a("strong"),a_r=o("roberta"),n_r=o(" \u2014 "),bW=a("a"),s_r=o("TFRobertaForMaskedLM"),l_r=o(" (RoBERTa model)"),i_r=l(),RM=a("li"),Bbe=a("strong"),d_r=o("roformer"),c_r=o(" \u2014 "),vW=a("a"),f_r=o("TFRoFormerForMaskedLM"),m_r=o(" (RoFormer model)"),g_r=l(),BM=a("li"),Pbe=a("strong"),h_r=o("tapas"),p_r=o(" \u2014 "),FW=a("a"),u_r=o("TFTapasForMaskedLM"),__r=o(" (TAPAS model)"),b_r=l(),PM=a("li"),Ibe=a("strong"),v_r=o("xlm"),F_r=o(" \u2014 "),TW=a("a"),T_r=o("TFXLMWithLMHeadModel"),M_r=o(" (XLM model)"),E_r=l(),IM=a("li"),qbe=a("strong"),C_r=o("xlm-roberta"),w_r=o(" \u2014 "),MW=a("a"),A_r=o("TFXLMRobertaForMaskedLM"),y_r=o(" (XLM-RoBERTa model)"),L_r=l(),F(qM.$$.fragment),wqe=l(),ec=a("h2"),NM=a("a"),Nbe=a("span"),F(i8.$$.fragment),x_r=l(),jbe=a("span"),$_r=o("TFAutoModelForSeq2SeqLM"),Aqe=l(),rr=a("div"),F(d8.$$.fragment),k_r=l(),oc=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=a("a"),R_r=o("from_pretrained()"),B_r=o(" class method or the "),CW=a("a"),P_r=o("from_config()"),I_r=o(` class
method.`),q_r=l(),c8=a("p"),N_r=o("This class cannot be instantiated directly using "),Dbe=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),$t=a("div"),F(f8.$$.fragment),O_r=l(),Gbe=a("p"),V_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X_r=l(),rc=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Q_r=o("not"),W_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(jM.$$.fragment),Y_r=l(),$r=a("div"),F(m8.$$.fragment),K_r=l(),Vbe=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e2r=l(),tn=a("p"),o2r=o("The model class to instantiate is selected based on the "),Xbe=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),ye=a("ul"),DM=a("li"),Wbe=a("strong"),d2r=o("bart"),c2r=o(" \u2014 "),AW=a("a"),f2r=o("TFBartForConditionalGeneration"),m2r=o(" (BART model)"),g2r=l(),GM=a("li"),Hbe=a("strong"),h2r=o("blenderbot"),p2r=o(" \u2014 "),yW=a("a"),u2r=o("TFBlenderbotForConditionalGeneration"),_2r=o(" (Blenderbot model)"),b2r=l(),OM=a("li"),Ube=a("strong"),v2r=o("blenderbot-small"),F2r=o(" \u2014 "),LW=a("a"),T2r=o("TFBlenderbotSmallForConditionalGeneration"),M2r=o(" (BlenderbotSmall model)"),E2r=l(),VM=a("li"),Jbe=a("strong"),C2r=o("encoder-decoder"),w2r=o(" \u2014 "),xW=a("a"),A2r=o("TFEncoderDecoderModel"),y2r=o(" (Encoder decoder model)"),L2r=l(),XM=a("li"),Ybe=a("strong"),x2r=o("led"),$2r=o(" \u2014 "),$W=a("a"),k2r=o("TFLEDForConditionalGeneration"),S2r=o(" (LED model)"),R2r=l(),zM=a("li"),Kbe=a("strong"),B2r=o("marian"),P2r=o(" \u2014 "),kW=a("a"),I2r=o("TFMarianMTModel"),q2r=o(" (Marian model)"),N2r=l(),QM=a("li"),Zbe=a("strong"),j2r=o("mbart"),D2r=o(" \u2014 "),SW=a("a"),G2r=o("TFMBartForConditionalGeneration"),O2r=o(" (mBART model)"),V2r=l(),WM=a("li"),eve=a("strong"),X2r=o("mt5"),z2r=o(" \u2014 "),RW=a("a"),Q2r=o("TFMT5ForConditionalGeneration"),W2r=o(" (mT5 model)"),H2r=l(),HM=a("li"),ove=a("strong"),U2r=o("pegasus"),J2r=o(" \u2014 "),BW=a("a"),Y2r=o("TFPegasusForConditionalGeneration"),K2r=o(" (Pegasus model)"),Z2r=l(),UM=a("li"),rve=a("strong"),e1r=o("t5"),o1r=o(" \u2014 "),PW=a("a"),r1r=o("TFT5ForConditionalGeneration"),t1r=o(" (T5 model)"),a1r=l(),F(JM.$$.fragment),yqe=l(),tc=a("h2"),YM=a("a"),tve=a("span"),F(g8.$$.fragment),n1r=l(),ave=a("span"),s1r=o("TFAutoModelForSequenceClassification"),Lqe=l(),tr=a("div"),F(h8.$$.fragment),l1r=l(),ac=a("p"),i1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IW=a("a"),d1r=o("from_pretrained()"),c1r=o(" class method or the "),qW=a("a"),f1r=o("from_config()"),m1r=o(` class
method.`),g1r=l(),p8=a("p"),h1r=o("This class cannot be instantiated directly using "),nve=a("code"),p1r=o("__init__()"),u1r=o(" (throws an error)."),_1r=l(),kt=a("div"),F(u8.$$.fragment),b1r=l(),sve=a("p"),v1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F1r=l(),nc=a("p"),T1r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),M1r=o("not"),E1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),C1r=o("from_pretrained()"),w1r=o(" to load the model weights."),A1r=l(),F(KM.$$.fragment),y1r=l(),kr=a("div"),F(_8.$$.fragment),L1r=l(),ive=a("p"),x1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$1r=l(),an=a("p"),k1r=o("The model class to instantiate is selected based on the "),dve=a("code"),S1r=o("model_type"),R1r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),B1r=o("pretrained_model_name_or_path"),P1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),I1r=o("pretrained_model_name_or_path"),q1r=o(":"),N1r=l(),Z=a("ul"),ZM=a("li"),mve=a("strong"),j1r=o("albert"),D1r=o(" \u2014 "),jW=a("a"),G1r=o("TFAlbertForSequenceClassification"),O1r=o(" (ALBERT model)"),V1r=l(),e4=a("li"),gve=a("strong"),X1r=o("bert"),z1r=o(" \u2014 "),DW=a("a"),Q1r=o("TFBertForSequenceClassification"),W1r=o(" (BERT model)"),H1r=l(),o4=a("li"),hve=a("strong"),U1r=o("camembert"),J1r=o(" \u2014 "),GW=a("a"),Y1r=o("TFCamembertForSequenceClassification"),K1r=o(" (CamemBERT model)"),Z1r=l(),r4=a("li"),pve=a("strong"),ebr=o("convbert"),obr=o(" \u2014 "),OW=a("a"),rbr=o("TFConvBertForSequenceClassification"),tbr=o(" (ConvBERT model)"),abr=l(),t4=a("li"),uve=a("strong"),nbr=o("ctrl"),sbr=o(" \u2014 "),VW=a("a"),lbr=o("TFCTRLForSequenceClassification"),ibr=o(" (CTRL model)"),dbr=l(),a4=a("li"),_ve=a("strong"),cbr=o("deberta"),fbr=o(" \u2014 "),XW=a("a"),mbr=o("TFDebertaForSequenceClassification"),gbr=o(" (DeBERTa model)"),hbr=l(),n4=a("li"),bve=a("strong"),pbr=o("deberta-v2"),ubr=o(" \u2014 "),zW=a("a"),_br=o("TFDebertaV2ForSequenceClassification"),bbr=o(" (DeBERTa-v2 model)"),vbr=l(),s4=a("li"),vve=a("strong"),Fbr=o("distilbert"),Tbr=o(" \u2014 "),QW=a("a"),Mbr=o("TFDistilBertForSequenceClassification"),Ebr=o(" (DistilBERT model)"),Cbr=l(),l4=a("li"),Fve=a("strong"),wbr=o("electra"),Abr=o(" \u2014 "),WW=a("a"),ybr=o("TFElectraForSequenceClassification"),Lbr=o(" (ELECTRA model)"),xbr=l(),i4=a("li"),Tve=a("strong"),$br=o("flaubert"),kbr=o(" \u2014 "),HW=a("a"),Sbr=o("TFFlaubertForSequenceClassification"),Rbr=o(" (FlauBERT model)"),Bbr=l(),d4=a("li"),Mve=a("strong"),Pbr=o("funnel"),Ibr=o(" \u2014 "),UW=a("a"),qbr=o("TFFunnelForSequenceClassification"),Nbr=o(" (Funnel Transformer model)"),jbr=l(),c4=a("li"),Eve=a("strong"),Dbr=o("gpt2"),Gbr=o(" \u2014 "),JW=a("a"),Obr=o("TFGPT2ForSequenceClassification"),Vbr=o(" (OpenAI GPT-2 model)"),Xbr=l(),f4=a("li"),Cve=a("strong"),zbr=o("gptj"),Qbr=o(" \u2014 "),YW=a("a"),Wbr=o("TFGPTJForSequenceClassification"),Hbr=o(" (GPT-J model)"),Ubr=l(),m4=a("li"),wve=a("strong"),Jbr=o("layoutlm"),Ybr=o(" \u2014 "),KW=a("a"),Kbr=o("TFLayoutLMForSequenceClassification"),Zbr=o(" (LayoutLM model)"),evr=l(),g4=a("li"),Ave=a("strong"),ovr=o("longformer"),rvr=o(" \u2014 "),ZW=a("a"),tvr=o("TFLongformerForSequenceClassification"),avr=o(" (Longformer model)"),nvr=l(),h4=a("li"),yve=a("strong"),svr=o("mobilebert"),lvr=o(" \u2014 "),eH=a("a"),ivr=o("TFMobileBertForSequenceClassification"),dvr=o(" (MobileBERT model)"),cvr=l(),p4=a("li"),Lve=a("strong"),fvr=o("mpnet"),mvr=o(" \u2014 "),oH=a("a"),gvr=o("TFMPNetForSequenceClassification"),hvr=o(" (MPNet model)"),pvr=l(),u4=a("li"),xve=a("strong"),uvr=o("openai-gpt"),_vr=o(" \u2014 "),rH=a("a"),bvr=o("TFOpenAIGPTForSequenceClassification"),vvr=o(" (OpenAI GPT model)"),Fvr=l(),_4=a("li"),$ve=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),tH=a("a"),Evr=o("TFRemBertForSequenceClassification"),Cvr=o(" (RemBERT model)"),wvr=l(),b4=a("li"),kve=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),aH=a("a"),Lvr=o("TFRobertaForSequenceClassification"),xvr=o(" (RoBERTa model)"),$vr=l(),v4=a("li"),Sve=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),nH=a("a"),Rvr=o("TFRoFormerForSequenceClassification"),Bvr=o(" (RoFormer model)"),Pvr=l(),F4=a("li"),Rve=a("strong"),Ivr=o("tapas"),qvr=o(" \u2014 "),sH=a("a"),Nvr=o("TFTapasForSequenceClassification"),jvr=o(" (TAPAS model)"),Dvr=l(),T4=a("li"),Bve=a("strong"),Gvr=o("transfo-xl"),Ovr=o(" \u2014 "),lH=a("a"),Vvr=o("TFTransfoXLForSequenceClassification"),Xvr=o(" (Transformer-XL model)"),zvr=l(),M4=a("li"),Pve=a("strong"),Qvr=o("xlm"),Wvr=o(" \u2014 "),iH=a("a"),Hvr=o("TFXLMForSequenceClassification"),Uvr=o(" (XLM model)"),Jvr=l(),E4=a("li"),Ive=a("strong"),Yvr=o("xlm-roberta"),Kvr=o(" \u2014 "),dH=a("a"),Zvr=o("TFXLMRobertaForSequenceClassification"),eFr=o(" (XLM-RoBERTa model)"),oFr=l(),C4=a("li"),qve=a("strong"),rFr=o("xlnet"),tFr=o(" \u2014 "),cH=a("a"),aFr=o("TFXLNetForSequenceClassification"),nFr=o(" (XLNet model)"),sFr=l(),F(w4.$$.fragment),xqe=l(),sc=a("h2"),A4=a("a"),Nve=a("span"),F(b8.$$.fragment),lFr=l(),jve=a("span"),iFr=o("TFAutoModelForMultipleChoice"),$qe=l(),ar=a("div"),F(v8.$$.fragment),dFr=l(),lc=a("p"),cFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fH=a("a"),fFr=o("from_pretrained()"),mFr=o(" class method or the "),mH=a("a"),gFr=o("from_config()"),hFr=o(` class
method.`),pFr=l(),F8=a("p"),uFr=o("This class cannot be instantiated directly using "),Dve=a("code"),_Fr=o("__init__()"),bFr=o(" (throws an error)."),vFr=l(),St=a("div"),F(T8.$$.fragment),FFr=l(),Gve=a("p"),TFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MFr=l(),ic=a("p"),EFr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),CFr=o("not"),wFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),AFr=o("from_pretrained()"),yFr=o(" to load the model weights."),LFr=l(),F(y4.$$.fragment),xFr=l(),Sr=a("div"),F(M8.$$.fragment),$Fr=l(),Vve=a("p"),kFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SFr=l(),nn=a("p"),RFr=o("The model class to instantiate is selected based on the "),Xve=a("code"),BFr=o("model_type"),PFr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),IFr=o("pretrained_model_name_or_path"),qFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),NFr=o("pretrained_model_name_or_path"),jFr=o(":"),DFr=l(),pe=a("ul"),L4=a("li"),Wve=a("strong"),GFr=o("albert"),OFr=o(" \u2014 "),hH=a("a"),VFr=o("TFAlbertForMultipleChoice"),XFr=o(" (ALBERT model)"),zFr=l(),x4=a("li"),Hve=a("strong"),QFr=o("bert"),WFr=o(" \u2014 "),pH=a("a"),HFr=o("TFBertForMultipleChoice"),UFr=o(" (BERT model)"),JFr=l(),$4=a("li"),Uve=a("strong"),YFr=o("camembert"),KFr=o(" \u2014 "),uH=a("a"),ZFr=o("TFCamembertForMultipleChoice"),e0r=o(" (CamemBERT model)"),o0r=l(),k4=a("li"),Jve=a("strong"),r0r=o("convbert"),t0r=o(" \u2014 "),_H=a("a"),a0r=o("TFConvBertForMultipleChoice"),n0r=o(" (ConvBERT model)"),s0r=l(),S4=a("li"),Yve=a("strong"),l0r=o("distilbert"),i0r=o(" \u2014 "),bH=a("a"),d0r=o("TFDistilBertForMultipleChoice"),c0r=o(" (DistilBERT model)"),f0r=l(),R4=a("li"),Kve=a("strong"),m0r=o("electra"),g0r=o(" \u2014 "),vH=a("a"),h0r=o("TFElectraForMultipleChoice"),p0r=o(" (ELECTRA model)"),u0r=l(),B4=a("li"),Zve=a("strong"),_0r=o("flaubert"),b0r=o(" \u2014 "),FH=a("a"),v0r=o("TFFlaubertForMultipleChoice"),F0r=o(" (FlauBERT model)"),T0r=l(),P4=a("li"),eFe=a("strong"),M0r=o("funnel"),E0r=o(" \u2014 "),TH=a("a"),C0r=o("TFFunnelForMultipleChoice"),w0r=o(" (Funnel Transformer model)"),A0r=l(),I4=a("li"),oFe=a("strong"),y0r=o("longformer"),L0r=o(" \u2014 "),MH=a("a"),x0r=o("TFLongformerForMultipleChoice"),$0r=o(" (Longformer model)"),k0r=l(),q4=a("li"),rFe=a("strong"),S0r=o("mobilebert"),R0r=o(" \u2014 "),EH=a("a"),B0r=o("TFMobileBertForMultipleChoice"),P0r=o(" (MobileBERT model)"),I0r=l(),N4=a("li"),tFe=a("strong"),q0r=o("mpnet"),N0r=o(" \u2014 "),CH=a("a"),j0r=o("TFMPNetForMultipleChoice"),D0r=o(" (MPNet model)"),G0r=l(),j4=a("li"),aFe=a("strong"),O0r=o("rembert"),V0r=o(" \u2014 "),wH=a("a"),X0r=o("TFRemBertForMultipleChoice"),z0r=o(" (RemBERT model)"),Q0r=l(),D4=a("li"),nFe=a("strong"),W0r=o("roberta"),H0r=o(" \u2014 "),AH=a("a"),U0r=o("TFRobertaForMultipleChoice"),J0r=o(" (RoBERTa model)"),Y0r=l(),G4=a("li"),sFe=a("strong"),K0r=o("roformer"),Z0r=o(" \u2014 "),yH=a("a"),eTr=o("TFRoFormerForMultipleChoice"),oTr=o(" (RoFormer model)"),rTr=l(),O4=a("li"),lFe=a("strong"),tTr=o("xlm"),aTr=o(" \u2014 "),LH=a("a"),nTr=o("TFXLMForMultipleChoice"),sTr=o(" (XLM model)"),lTr=l(),V4=a("li"),iFe=a("strong"),iTr=o("xlm-roberta"),dTr=o(" \u2014 "),xH=a("a"),cTr=o("TFXLMRobertaForMultipleChoice"),fTr=o(" (XLM-RoBERTa model)"),mTr=l(),X4=a("li"),dFe=a("strong"),gTr=o("xlnet"),hTr=o(" \u2014 "),$H=a("a"),pTr=o("TFXLNetForMultipleChoice"),uTr=o(" (XLNet model)"),_Tr=l(),F(z4.$$.fragment),kqe=l(),dc=a("h2"),Q4=a("a"),cFe=a("span"),F(E8.$$.fragment),bTr=l(),fFe=a("span"),vTr=o("TFAutoModelForNextSentencePrediction"),Sqe=l(),nr=a("div"),F(C8.$$.fragment),FTr=l(),cc=a("p"),TTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kH=a("a"),MTr=o("from_pretrained()"),ETr=o(" class method or the "),SH=a("a"),CTr=o("from_config()"),wTr=o(` class
method.`),ATr=l(),w8=a("p"),yTr=o("This class cannot be instantiated directly using "),mFe=a("code"),LTr=o("__init__()"),xTr=o(" (throws an error)."),$Tr=l(),Rt=a("div"),F(A8.$$.fragment),kTr=l(),gFe=a("p"),STr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RTr=l(),fc=a("p"),BTr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),PTr=o("not"),ITr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),qTr=o("from_pretrained()"),NTr=o(" to load the model weights."),jTr=l(),F(W4.$$.fragment),DTr=l(),Rr=a("div"),F(y8.$$.fragment),GTr=l(),pFe=a("p"),OTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VTr=l(),sn=a("p"),XTr=o("The model class to instantiate is selected based on the "),uFe=a("code"),zTr=o("model_type"),QTr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),WTr=o("pretrained_model_name_or_path"),HTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),UTr=o("pretrained_model_name_or_path"),JTr=o(":"),YTr=l(),L8=a("ul"),H4=a("li"),vFe=a("strong"),KTr=o("bert"),ZTr=o(" \u2014 "),BH=a("a"),e7r=o("TFBertForNextSentencePrediction"),o7r=o(" (BERT model)"),r7r=l(),U4=a("li"),FFe=a("strong"),t7r=o("mobilebert"),a7r=o(" \u2014 "),PH=a("a"),n7r=o("TFMobileBertForNextSentencePrediction"),s7r=o(" (MobileBERT model)"),l7r=l(),F(J4.$$.fragment),Rqe=l(),mc=a("h2"),Y4=a("a"),TFe=a("span"),F(x8.$$.fragment),i7r=l(),MFe=a("span"),d7r=o("TFAutoModelForTableQuestionAnswering"),Bqe=l(),sr=a("div"),F($8.$$.fragment),c7r=l(),gc=a("p"),f7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IH=a("a"),m7r=o("from_pretrained()"),g7r=o(" class method or the "),qH=a("a"),h7r=o("from_config()"),p7r=o(` class
method.`),u7r=l(),k8=a("p"),_7r=o("This class cannot be instantiated directly using "),EFe=a("code"),b7r=o("__init__()"),v7r=o(" (throws an error)."),F7r=l(),Bt=a("div"),F(S8.$$.fragment),T7r=l(),CFe=a("p"),M7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E7r=l(),hc=a("p"),C7r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),w7r=o("not"),A7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),y7r=o("from_pretrained()"),L7r=o(" to load the model weights."),x7r=l(),F(K4.$$.fragment),$7r=l(),Br=a("div"),F(R8.$$.fragment),k7r=l(),AFe=a("p"),S7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R7r=l(),ln=a("p"),B7r=o("The model class to instantiate is selected based on the "),yFe=a("code"),P7r=o("model_type"),I7r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),q7r=o("pretrained_model_name_or_path"),N7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(":"),G7r=l(),$Fe=a("ul"),Z4=a("li"),kFe=a("strong"),O7r=o("tapas"),V7r=o(" \u2014 "),jH=a("a"),X7r=o("TFTapasForQuestionAnswering"),z7r=o(" (TAPAS model)"),Q7r=l(),F(eE.$$.fragment),Pqe=l(),pc=a("h2"),oE=a("a"),SFe=a("span"),F(B8.$$.fragment),W7r=l(),RFe=a("span"),H7r=o("TFAutoModelForTokenClassification"),Iqe=l(),lr=a("div"),F(P8.$$.fragment),U7r=l(),uc=a("p"),J7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DH=a("a"),Y7r=o("from_pretrained()"),K7r=o(" class method or the "),GH=a("a"),Z7r=o("from_config()"),eMr=o(` class
method.`),oMr=l(),I8=a("p"),rMr=o("This class cannot be instantiated directly using "),BFe=a("code"),tMr=o("__init__()"),aMr=o(" (throws an error)."),nMr=l(),Pt=a("div"),F(q8.$$.fragment),sMr=l(),PFe=a("p"),lMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iMr=l(),_c=a("p"),dMr=o(`Note:
Loading a model from its configuration file does `),IFe=a("strong"),cMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),mMr=o("from_pretrained()"),gMr=o(" to load the model weights."),hMr=l(),F(rE.$$.fragment),pMr=l(),Pr=a("div"),F(N8.$$.fragment),uMr=l(),qFe=a("p"),_Mr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bMr=l(),dn=a("p"),vMr=o("The model class to instantiate is selected based on the "),NFe=a("code"),FMr=o("model_type"),TMr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(":"),AMr=l(),de=a("ul"),tE=a("li"),GFe=a("strong"),yMr=o("albert"),LMr=o(" \u2014 "),VH=a("a"),xMr=o("TFAlbertForTokenClassification"),$Mr=o(" (ALBERT model)"),kMr=l(),aE=a("li"),OFe=a("strong"),SMr=o("bert"),RMr=o(" \u2014 "),XH=a("a"),BMr=o("TFBertForTokenClassification"),PMr=o(" (BERT model)"),IMr=l(),nE=a("li"),VFe=a("strong"),qMr=o("camembert"),NMr=o(" \u2014 "),zH=a("a"),jMr=o("TFCamembertForTokenClassification"),DMr=o(" (CamemBERT model)"),GMr=l(),sE=a("li"),XFe=a("strong"),OMr=o("convbert"),VMr=o(" \u2014 "),QH=a("a"),XMr=o("TFConvBertForTokenClassification"),zMr=o(" (ConvBERT model)"),QMr=l(),lE=a("li"),zFe=a("strong"),WMr=o("deberta"),HMr=o(" \u2014 "),WH=a("a"),UMr=o("TFDebertaForTokenClassification"),JMr=o(" (DeBERTa model)"),YMr=l(),iE=a("li"),QFe=a("strong"),KMr=o("deberta-v2"),ZMr=o(" \u2014 "),HH=a("a"),e4r=o("TFDebertaV2ForTokenClassification"),o4r=o(" (DeBERTa-v2 model)"),r4r=l(),dE=a("li"),WFe=a("strong"),t4r=o("distilbert"),a4r=o(" \u2014 "),UH=a("a"),n4r=o("TFDistilBertForTokenClassification"),s4r=o(" (DistilBERT model)"),l4r=l(),cE=a("li"),HFe=a("strong"),i4r=o("electra"),d4r=o(" \u2014 "),JH=a("a"),c4r=o("TFElectraForTokenClassification"),f4r=o(" (ELECTRA model)"),m4r=l(),fE=a("li"),UFe=a("strong"),g4r=o("flaubert"),h4r=o(" \u2014 "),YH=a("a"),p4r=o("TFFlaubertForTokenClassification"),u4r=o(" (FlauBERT model)"),_4r=l(),mE=a("li"),JFe=a("strong"),b4r=o("funnel"),v4r=o(" \u2014 "),KH=a("a"),F4r=o("TFFunnelForTokenClassification"),T4r=o(" (Funnel Transformer model)"),M4r=l(),gE=a("li"),YFe=a("strong"),E4r=o("layoutlm"),C4r=o(" \u2014 "),ZH=a("a"),w4r=o("TFLayoutLMForTokenClassification"),A4r=o(" (LayoutLM model)"),y4r=l(),hE=a("li"),KFe=a("strong"),L4r=o("longformer"),x4r=o(" \u2014 "),eU=a("a"),$4r=o("TFLongformerForTokenClassification"),k4r=o(" (Longformer model)"),S4r=l(),pE=a("li"),ZFe=a("strong"),R4r=o("mobilebert"),B4r=o(" \u2014 "),oU=a("a"),P4r=o("TFMobileBertForTokenClassification"),I4r=o(" (MobileBERT model)"),q4r=l(),uE=a("li"),e0e=a("strong"),N4r=o("mpnet"),j4r=o(" \u2014 "),rU=a("a"),D4r=o("TFMPNetForTokenClassification"),G4r=o(" (MPNet model)"),O4r=l(),_E=a("li"),o0e=a("strong"),V4r=o("rembert"),X4r=o(" \u2014 "),tU=a("a"),z4r=o("TFRemBertForTokenClassification"),Q4r=o(" (RemBERT model)"),W4r=l(),bE=a("li"),r0e=a("strong"),H4r=o("roberta"),U4r=o(" \u2014 "),aU=a("a"),J4r=o("TFRobertaForTokenClassification"),Y4r=o(" (RoBERTa model)"),K4r=l(),vE=a("li"),t0e=a("strong"),Z4r=o("roformer"),eEr=o(" \u2014 "),nU=a("a"),oEr=o("TFRoFormerForTokenClassification"),rEr=o(" (RoFormer model)"),tEr=l(),FE=a("li"),a0e=a("strong"),aEr=o("xlm"),nEr=o(" \u2014 "),sU=a("a"),sEr=o("TFXLMForTokenClassification"),lEr=o(" (XLM model)"),iEr=l(),TE=a("li"),n0e=a("strong"),dEr=o("xlm-roberta"),cEr=o(" \u2014 "),lU=a("a"),fEr=o("TFXLMRobertaForTokenClassification"),mEr=o(" (XLM-RoBERTa model)"),gEr=l(),ME=a("li"),s0e=a("strong"),hEr=o("xlnet"),pEr=o(" \u2014 "),iU=a("a"),uEr=o("TFXLNetForTokenClassification"),_Er=o(" (XLNet model)"),bEr=l(),F(EE.$$.fragment),qqe=l(),bc=a("h2"),CE=a("a"),l0e=a("span"),F(j8.$$.fragment),vEr=l(),i0e=a("span"),FEr=o("TFAutoModelForQuestionAnswering"),Nqe=l(),ir=a("div"),F(D8.$$.fragment),TEr=l(),vc=a("p"),MEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dU=a("a"),EEr=o("from_pretrained()"),CEr=o(" class method or the "),cU=a("a"),wEr=o("from_config()"),AEr=o(` class
method.`),yEr=l(),G8=a("p"),LEr=o("This class cannot be instantiated directly using "),d0e=a("code"),xEr=o("__init__()"),$Er=o(" (throws an error)."),kEr=l(),It=a("div"),F(O8.$$.fragment),SEr=l(),c0e=a("p"),REr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BEr=l(),Fc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),IEr=o("not"),qEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),NEr=o("from_pretrained()"),jEr=o(" to load the model weights."),DEr=l(),F(wE.$$.fragment),GEr=l(),Ir=a("div"),F(V8.$$.fragment),OEr=l(),m0e=a("p"),VEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XEr=l(),cn=a("p"),zEr=o("The model class to instantiate is selected based on the "),g0e=a("code"),QEr=o("model_type"),WEr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),HEr=o("pretrained_model_name_or_path"),UEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(":"),KEr=l(),ce=a("ul"),AE=a("li"),u0e=a("strong"),ZEr=o("albert"),e5r=o(" \u2014 "),mU=a("a"),o5r=o("TFAlbertForQuestionAnswering"),r5r=o(" (ALBERT model)"),t5r=l(),yE=a("li"),_0e=a("strong"),a5r=o("bert"),n5r=o(" \u2014 "),gU=a("a"),s5r=o("TFBertForQuestionAnswering"),l5r=o(" (BERT model)"),i5r=l(),LE=a("li"),b0e=a("strong"),d5r=o("camembert"),c5r=o(" \u2014 "),hU=a("a"),f5r=o("TFCamembertForQuestionAnswering"),m5r=o(" (CamemBERT model)"),g5r=l(),xE=a("li"),v0e=a("strong"),h5r=o("convbert"),p5r=o(" \u2014 "),pU=a("a"),u5r=o("TFConvBertForQuestionAnswering"),_5r=o(" (ConvBERT model)"),b5r=l(),$E=a("li"),F0e=a("strong"),v5r=o("deberta"),F5r=o(" \u2014 "),uU=a("a"),T5r=o("TFDebertaForQuestionAnswering"),M5r=o(" (DeBERTa model)"),E5r=l(),kE=a("li"),T0e=a("strong"),C5r=o("deberta-v2"),w5r=o(" \u2014 "),_U=a("a"),A5r=o("TFDebertaV2ForQuestionAnswering"),y5r=o(" (DeBERTa-v2 model)"),L5r=l(),SE=a("li"),M0e=a("strong"),x5r=o("distilbert"),$5r=o(" \u2014 "),bU=a("a"),k5r=o("TFDistilBertForQuestionAnswering"),S5r=o(" (DistilBERT model)"),R5r=l(),RE=a("li"),E0e=a("strong"),B5r=o("electra"),P5r=o(" \u2014 "),vU=a("a"),I5r=o("TFElectraForQuestionAnswering"),q5r=o(" (ELECTRA model)"),N5r=l(),BE=a("li"),C0e=a("strong"),j5r=o("flaubert"),D5r=o(" \u2014 "),FU=a("a"),G5r=o("TFFlaubertForQuestionAnsweringSimple"),O5r=o(" (FlauBERT model)"),V5r=l(),PE=a("li"),w0e=a("strong"),X5r=o("funnel"),z5r=o(" \u2014 "),TU=a("a"),Q5r=o("TFFunnelForQuestionAnswering"),W5r=o(" (Funnel Transformer model)"),H5r=l(),IE=a("li"),A0e=a("strong"),U5r=o("gptj"),J5r=o(" \u2014 "),MU=a("a"),Y5r=o("TFGPTJForQuestionAnswering"),K5r=o(" (GPT-J model)"),Z5r=l(),qE=a("li"),y0e=a("strong"),eCr=o("longformer"),oCr=o(" \u2014 "),EU=a("a"),rCr=o("TFLongformerForQuestionAnswering"),tCr=o(" (Longformer model)"),aCr=l(),NE=a("li"),L0e=a("strong"),nCr=o("mobilebert"),sCr=o(" \u2014 "),CU=a("a"),lCr=o("TFMobileBertForQuestionAnswering"),iCr=o(" (MobileBERT model)"),dCr=l(),jE=a("li"),x0e=a("strong"),cCr=o("mpnet"),fCr=o(" \u2014 "),wU=a("a"),mCr=o("TFMPNetForQuestionAnswering"),gCr=o(" (MPNet model)"),hCr=l(),DE=a("li"),$0e=a("strong"),pCr=o("rembert"),uCr=o(" \u2014 "),AU=a("a"),_Cr=o("TFRemBertForQuestionAnswering"),bCr=o(" (RemBERT model)"),vCr=l(),GE=a("li"),k0e=a("strong"),FCr=o("roberta"),TCr=o(" \u2014 "),yU=a("a"),MCr=o("TFRobertaForQuestionAnswering"),ECr=o(" (RoBERTa model)"),CCr=l(),OE=a("li"),S0e=a("strong"),wCr=o("roformer"),ACr=o(" \u2014 "),LU=a("a"),yCr=o("TFRoFormerForQuestionAnswering"),LCr=o(" (RoFormer model)"),xCr=l(),VE=a("li"),R0e=a("strong"),$Cr=o("xlm"),kCr=o(" \u2014 "),xU=a("a"),SCr=o("TFXLMForQuestionAnsweringSimple"),RCr=o(" (XLM model)"),BCr=l(),XE=a("li"),B0e=a("strong"),PCr=o("xlm-roberta"),ICr=o(" \u2014 "),$U=a("a"),qCr=o("TFXLMRobertaForQuestionAnswering"),NCr=o(" (XLM-RoBERTa model)"),jCr=l(),zE=a("li"),P0e=a("strong"),DCr=o("xlnet"),GCr=o(" \u2014 "),kU=a("a"),OCr=o("TFXLNetForQuestionAnsweringSimple"),VCr=o(" (XLNet model)"),XCr=l(),F(QE.$$.fragment),jqe=l(),Tc=a("h2"),WE=a("a"),I0e=a("span"),F(X8.$$.fragment),zCr=l(),q0e=a("span"),QCr=o("TFAutoModelForVision2Seq"),Dqe=l(),dr=a("div"),F(z8.$$.fragment),WCr=l(),Mc=a("p"),HCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SU=a("a"),UCr=o("from_pretrained()"),JCr=o(" class method or the "),RU=a("a"),YCr=o("from_config()"),KCr=o(` class
method.`),ZCr=l(),Q8=a("p"),e3r=o("This class cannot be instantiated directly using "),N0e=a("code"),o3r=o("__init__()"),r3r=o(" (throws an error)."),t3r=l(),qt=a("div"),F(W8.$$.fragment),a3r=l(),j0e=a("p"),n3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s3r=l(),Ec=a("p"),l3r=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),i3r=o("not"),d3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),c3r=o("from_pretrained()"),f3r=o(" to load the model weights."),m3r=l(),F(HE.$$.fragment),g3r=l(),qr=a("div"),F(H8.$$.fragment),h3r=l(),G0e=a("p"),p3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u3r=l(),fn=a("p"),_3r=o("The model class to instantiate is selected based on the "),O0e=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(":"),C3r=l(),z0e=a("ul"),UE=a("li"),Q0e=a("strong"),w3r=o("vision-encoder-decoder"),A3r=o(" \u2014 "),PU=a("a"),y3r=o("TFVisionEncoderDecoderModel"),L3r=o(" (Vision Encoder decoder model)"),x3r=l(),F(JE.$$.fragment),Gqe=l(),Cc=a("h2"),YE=a("a"),W0e=a("span"),F(U8.$$.fragment),$3r=l(),H0e=a("span"),k3r=o("TFAutoModelForSpeechSeq2Seq"),Oqe=l(),cr=a("div"),F(J8.$$.fragment),S3r=l(),wc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IU=a("a"),B3r=o("from_pretrained()"),P3r=o(" class method or the "),qU=a("a"),I3r=o("from_config()"),q3r=o(` class
method.`),N3r=l(),Y8=a("p"),j3r=o("This class cannot be instantiated directly using "),U0e=a("code"),D3r=o("__init__()"),G3r=o(" (throws an error)."),O3r=l(),Nt=a("div"),F(K8.$$.fragment),V3r=l(),J0e=a("p"),X3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z3r=l(),Ac=a("p"),Q3r=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),W3r=o("not"),H3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),U3r=o("from_pretrained()"),J3r=o(" to load the model weights."),Y3r=l(),F(KE.$$.fragment),K3r=l(),Nr=a("div"),F(Z8.$$.fragment),Z3r=l(),K0e=a("p"),ewr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),owr=l(),mn=a("p"),rwr=o("The model class to instantiate is selected based on the "),Z0e=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),rTe=a("ul"),ZE=a("li"),tTe=a("strong"),cwr=o("speech_to_text"),fwr=o(" \u2014 "),jU=a("a"),mwr=o("TFSpeech2TextForConditionalGeneration"),gwr=o(" (Speech2Text model)"),hwr=l(),F(e5.$$.fragment),Vqe=l(),yc=a("h2"),o5=a("a"),aTe=a("span"),F(ex.$$.fragment),pwr=l(),nTe=a("span"),uwr=o("FlaxAutoModel"),Xqe=l(),fr=a("div"),F(ox.$$.fragment),_wr=l(),Lc=a("p"),bwr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DU=a("a"),vwr=o("from_pretrained()"),Fwr=o(" class method or the "),GU=a("a"),Twr=o("from_config()"),Mwr=o(` class
method.`),Ewr=l(),rx=a("p"),Cwr=o("This class cannot be instantiated directly using "),sTe=a("code"),wwr=o("__init__()"),Awr=o(" (throws an error)."),ywr=l(),jt=a("div"),F(tx.$$.fragment),Lwr=l(),lTe=a("p"),xwr=o("Instantiates one of the base model classes of the library from a configuration."),$wr=l(),xc=a("p"),kwr=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),Swr=o("not"),Rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" to load the model weights."),Iwr=l(),F(r5.$$.fragment),qwr=l(),jr=a("div"),F(ax.$$.fragment),Nwr=l(),dTe=a("p"),jwr=o("Instantiate one of the base model classes of the library from a pretrained model."),Dwr=l(),gn=a("p"),Gwr=o("The model class to instantiate is selected based on the "),cTe=a("code"),Owr=o("model_type"),Vwr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),Xwr=o("pretrained_model_name_or_path"),zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),Qwr=o("pretrained_model_name_or_path"),Wwr=o(":"),Hwr=l(),re=a("ul"),t5=a("li"),gTe=a("strong"),Uwr=o("albert"),Jwr=o(" \u2014 "),VU=a("a"),Ywr=o("FlaxAlbertModel"),Kwr=o(" (ALBERT model)"),Zwr=l(),a5=a("li"),hTe=a("strong"),e6r=o("bart"),o6r=o(" \u2014 "),XU=a("a"),r6r=o("FlaxBartModel"),t6r=o(" (BART model)"),a6r=l(),n5=a("li"),pTe=a("strong"),n6r=o("beit"),s6r=o(" \u2014 "),zU=a("a"),l6r=o("FlaxBeitModel"),i6r=o(" (BEiT model)"),d6r=l(),s5=a("li"),uTe=a("strong"),c6r=o("bert"),f6r=o(" \u2014 "),QU=a("a"),m6r=o("FlaxBertModel"),g6r=o(" (BERT model)"),h6r=l(),l5=a("li"),_Te=a("strong"),p6r=o("big_bird"),u6r=o(" \u2014 "),WU=a("a"),_6r=o("FlaxBigBirdModel"),b6r=o(" (BigBird model)"),v6r=l(),i5=a("li"),bTe=a("strong"),F6r=o("blenderbot"),T6r=o(" \u2014 "),HU=a("a"),M6r=o("FlaxBlenderbotModel"),E6r=o(" (Blenderbot model)"),C6r=l(),d5=a("li"),vTe=a("strong"),w6r=o("blenderbot-small"),A6r=o(" \u2014 "),UU=a("a"),y6r=o("FlaxBlenderbotSmallModel"),L6r=o(" (BlenderbotSmall model)"),x6r=l(),c5=a("li"),FTe=a("strong"),$6r=o("clip"),k6r=o(" \u2014 "),JU=a("a"),S6r=o("FlaxCLIPModel"),R6r=o(" (CLIP model)"),B6r=l(),f5=a("li"),TTe=a("strong"),P6r=o("distilbert"),I6r=o(" \u2014 "),YU=a("a"),q6r=o("FlaxDistilBertModel"),N6r=o(" (DistilBERT model)"),j6r=l(),m5=a("li"),MTe=a("strong"),D6r=o("electra"),G6r=o(" \u2014 "),KU=a("a"),O6r=o("FlaxElectraModel"),V6r=o(" (ELECTRA model)"),X6r=l(),g5=a("li"),ETe=a("strong"),z6r=o("gpt2"),Q6r=o(" \u2014 "),ZU=a("a"),W6r=o("FlaxGPT2Model"),H6r=o(" (OpenAI GPT-2 model)"),U6r=l(),h5=a("li"),CTe=a("strong"),J6r=o("gpt_neo"),Y6r=o(" \u2014 "),eJ=a("a"),K6r=o("FlaxGPTNeoModel"),Z6r=o(" (GPT Neo model)"),eAr=l(),p5=a("li"),wTe=a("strong"),oAr=o("gptj"),rAr=o(" \u2014 "),oJ=a("a"),tAr=o("FlaxGPTJModel"),aAr=o(" (GPT-J model)"),nAr=l(),u5=a("li"),ATe=a("strong"),sAr=o("marian"),lAr=o(" \u2014 "),rJ=a("a"),iAr=o("FlaxMarianModel"),dAr=o(" (Marian model)"),cAr=l(),_5=a("li"),yTe=a("strong"),fAr=o("mbart"),mAr=o(" \u2014 "),tJ=a("a"),gAr=o("FlaxMBartModel"),hAr=o(" (mBART model)"),pAr=l(),b5=a("li"),LTe=a("strong"),uAr=o("mt5"),_Ar=o(" \u2014 "),aJ=a("a"),bAr=o("FlaxMT5Model"),vAr=o(" (mT5 model)"),FAr=l(),v5=a("li"),xTe=a("strong"),TAr=o("pegasus"),MAr=o(" \u2014 "),nJ=a("a"),EAr=o("FlaxPegasusModel"),CAr=o(" (Pegasus model)"),wAr=l(),F5=a("li"),$Te=a("strong"),AAr=o("roberta"),yAr=o(" \u2014 "),sJ=a("a"),LAr=o("FlaxRobertaModel"),xAr=o(" (RoBERTa model)"),$Ar=l(),T5=a("li"),kTe=a("strong"),kAr=o("roformer"),SAr=o(" \u2014 "),lJ=a("a"),RAr=o("FlaxRoFormerModel"),BAr=o(" (RoFormer model)"),PAr=l(),M5=a("li"),STe=a("strong"),IAr=o("t5"),qAr=o(" \u2014 "),iJ=a("a"),NAr=o("FlaxT5Model"),jAr=o(" (T5 model)"),DAr=l(),E5=a("li"),RTe=a("strong"),GAr=o("vision-text-dual-encoder"),OAr=o(" \u2014 "),dJ=a("a"),VAr=o("FlaxVisionTextDualEncoderModel"),XAr=o(" (VisionTextDualEncoder model)"),zAr=l(),C5=a("li"),BTe=a("strong"),QAr=o("vit"),WAr=o(" \u2014 "),cJ=a("a"),HAr=o("FlaxViTModel"),UAr=o(" (ViT model)"),JAr=l(),w5=a("li"),PTe=a("strong"),YAr=o("wav2vec2"),KAr=o(" \u2014 "),fJ=a("a"),ZAr=o("FlaxWav2Vec2Model"),eyr=o(" (Wav2Vec2 model)"),oyr=l(),A5=a("li"),ITe=a("strong"),ryr=o("xglm"),tyr=o(" \u2014 "),mJ=a("a"),ayr=o("FlaxXGLMModel"),nyr=o(" (XGLM model)"),syr=l(),y5=a("li"),qTe=a("strong"),lyr=o("xlm-roberta"),iyr=o(" \u2014 "),gJ=a("a"),dyr=o("FlaxXLMRobertaModel"),cyr=o(" (XLM-RoBERTa model)"),fyr=l(),F(L5.$$.fragment),zqe=l(),$c=a("h2"),x5=a("a"),NTe=a("span"),F(nx.$$.fragment),myr=l(),jTe=a("span"),gyr=o("FlaxAutoModelForCausalLM"),Qqe=l(),mr=a("div"),F(sx.$$.fragment),hyr=l(),kc=a("p"),pyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hJ=a("a"),uyr=o("from_pretrained()"),_yr=o(" class method or the "),pJ=a("a"),byr=o("from_config()"),vyr=o(` class
method.`),Fyr=l(),lx=a("p"),Tyr=o("This class cannot be instantiated directly using "),DTe=a("code"),Myr=o("__init__()"),Eyr=o(" (throws an error)."),Cyr=l(),Dt=a("div"),F(ix.$$.fragment),wyr=l(),GTe=a("p"),Ayr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yyr=l(),Sc=a("p"),Lyr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),xyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" to load the model weights."),Ryr=l(),F($5.$$.fragment),Byr=l(),Dr=a("div"),F(dx.$$.fragment),Pyr=l(),VTe=a("p"),Iyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qyr=l(),hn=a("p"),Nyr=o("The model class to instantiate is selected based on the "),XTe=a("code"),jyr=o("model_type"),Dyr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),Vyr=o("pretrained_model_name_or_path"),Xyr=o(":"),zyr=l(),ke=a("ul"),k5=a("li"),WTe=a("strong"),Qyr=o("bart"),Wyr=o(" \u2014 "),_J=a("a"),Hyr=o("FlaxBartForCausalLM"),Uyr=o(" (BART model)"),Jyr=l(),S5=a("li"),HTe=a("strong"),Yyr=o("bert"),Kyr=o(" \u2014 "),bJ=a("a"),Zyr=o("FlaxBertForCausalLM"),eLr=o(" (BERT model)"),oLr=l(),R5=a("li"),UTe=a("strong"),rLr=o("big_bird"),tLr=o(" \u2014 "),vJ=a("a"),aLr=o("FlaxBigBirdForCausalLM"),nLr=o(" (BigBird model)"),sLr=l(),B5=a("li"),JTe=a("strong"),lLr=o("electra"),iLr=o(" \u2014 "),FJ=a("a"),dLr=o("FlaxElectraForCausalLM"),cLr=o(" (ELECTRA model)"),fLr=l(),P5=a("li"),YTe=a("strong"),mLr=o("gpt2"),gLr=o(" \u2014 "),TJ=a("a"),hLr=o("FlaxGPT2LMHeadModel"),pLr=o(" (OpenAI GPT-2 model)"),uLr=l(),I5=a("li"),KTe=a("strong"),_Lr=o("gpt_neo"),bLr=o(" \u2014 "),MJ=a("a"),vLr=o("FlaxGPTNeoForCausalLM"),FLr=o(" (GPT Neo model)"),TLr=l(),q5=a("li"),ZTe=a("strong"),MLr=o("gptj"),ELr=o(" \u2014 "),EJ=a("a"),CLr=o("FlaxGPTJForCausalLM"),wLr=o(" (GPT-J model)"),ALr=l(),N5=a("li"),e7e=a("strong"),yLr=o("roberta"),LLr=o(" \u2014 "),CJ=a("a"),xLr=o("FlaxRobertaForCausalLM"),$Lr=o(" (RoBERTa model)"),kLr=l(),j5=a("li"),o7e=a("strong"),SLr=o("xglm"),RLr=o(" \u2014 "),wJ=a("a"),BLr=o("FlaxXGLMForCausalLM"),PLr=o(" (XGLM model)"),ILr=l(),F(D5.$$.fragment),Wqe=l(),Rc=a("h2"),G5=a("a"),r7e=a("span"),F(cx.$$.fragment),qLr=l(),t7e=a("span"),NLr=o("FlaxAutoModelForPreTraining"),Hqe=l(),gr=a("div"),F(fx.$$.fragment),jLr=l(),Bc=a("p"),DLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AJ=a("a"),GLr=o("from_pretrained()"),OLr=o(" class method or the "),yJ=a("a"),VLr=o("from_config()"),XLr=o(` class
method.`),zLr=l(),mx=a("p"),QLr=o("This class cannot be instantiated directly using "),a7e=a("code"),WLr=o("__init__()"),HLr=o(" (throws an error)."),ULr=l(),Gt=a("div"),F(gx.$$.fragment),JLr=l(),n7e=a("p"),YLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KLr=l(),Pc=a("p"),ZLr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),e8r=o("not"),o8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),r8r=o("from_pretrained()"),t8r=o(" to load the model weights."),a8r=l(),F(O5.$$.fragment),n8r=l(),Gr=a("div"),F(hx.$$.fragment),s8r=l(),l7e=a("p"),l8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i8r=l(),pn=a("p"),d8r=o("The model class to instantiate is selected based on the "),i7e=a("code"),c8r=o("model_type"),f8r=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),h8r=o("pretrained_model_name_or_path"),p8r=o(":"),u8r=l(),Me=a("ul"),V5=a("li"),f7e=a("strong"),_8r=o("albert"),b8r=o(" \u2014 "),xJ=a("a"),v8r=o("FlaxAlbertForPreTraining"),F8r=o(" (ALBERT model)"),T8r=l(),X5=a("li"),m7e=a("strong"),M8r=o("bart"),E8r=o(" \u2014 "),$J=a("a"),C8r=o("FlaxBartForConditionalGeneration"),w8r=o(" (BART model)"),A8r=l(),z5=a("li"),g7e=a("strong"),y8r=o("bert"),L8r=o(" \u2014 "),kJ=a("a"),x8r=o("FlaxBertForPreTraining"),$8r=o(" (BERT model)"),k8r=l(),Q5=a("li"),h7e=a("strong"),S8r=o("big_bird"),R8r=o(" \u2014 "),SJ=a("a"),B8r=o("FlaxBigBirdForPreTraining"),P8r=o(" (BigBird model)"),I8r=l(),W5=a("li"),p7e=a("strong"),q8r=o("electra"),N8r=o(" \u2014 "),RJ=a("a"),j8r=o("FlaxElectraForPreTraining"),D8r=o(" (ELECTRA model)"),G8r=l(),H5=a("li"),u7e=a("strong"),O8r=o("mbart"),V8r=o(" \u2014 "),BJ=a("a"),X8r=o("FlaxMBartForConditionalGeneration"),z8r=o(" (mBART model)"),Q8r=l(),U5=a("li"),_7e=a("strong"),W8r=o("mt5"),H8r=o(" \u2014 "),PJ=a("a"),U8r=o("FlaxMT5ForConditionalGeneration"),J8r=o(" (mT5 model)"),Y8r=l(),J5=a("li"),b7e=a("strong"),K8r=o("roberta"),Z8r=o(" \u2014 "),IJ=a("a"),exr=o("FlaxRobertaForMaskedLM"),oxr=o(" (RoBERTa model)"),rxr=l(),Y5=a("li"),v7e=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),qJ=a("a"),nxr=o("FlaxRoFormerForMaskedLM"),sxr=o(" (RoFormer model)"),lxr=l(),K5=a("li"),F7e=a("strong"),ixr=o("t5"),dxr=o(" \u2014 "),NJ=a("a"),cxr=o("FlaxT5ForConditionalGeneration"),fxr=o(" (T5 model)"),mxr=l(),Z5=a("li"),T7e=a("strong"),gxr=o("wav2vec2"),hxr=o(" \u2014 "),jJ=a("a"),pxr=o("FlaxWav2Vec2ForPreTraining"),uxr=o(" (Wav2Vec2 model)"),_xr=l(),eC=a("li"),M7e=a("strong"),bxr=o("xlm-roberta"),vxr=o(" \u2014 "),DJ=a("a"),Fxr=o("FlaxXLMRobertaForMaskedLM"),Txr=o(" (XLM-RoBERTa model)"),Mxr=l(),F(oC.$$.fragment),Uqe=l(),Ic=a("h2"),rC=a("a"),E7e=a("span"),F(px.$$.fragment),Exr=l(),C7e=a("span"),Cxr=o("FlaxAutoModelForMaskedLM"),Jqe=l(),hr=a("div"),F(ux.$$.fragment),wxr=l(),qc=a("p"),Axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GJ=a("a"),yxr=o("from_pretrained()"),Lxr=o(" class method or the "),OJ=a("a"),xxr=o("from_config()"),$xr=o(` class
method.`),kxr=l(),_x=a("p"),Sxr=o("This class cannot be instantiated directly using "),w7e=a("code"),Rxr=o("__init__()"),Bxr=o(" (throws an error)."),Pxr=l(),Ot=a("div"),F(bx.$$.fragment),Ixr=l(),A7e=a("p"),qxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nxr=l(),Nc=a("p"),jxr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),Dxr=o("not"),Gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" to load the model weights."),Xxr=l(),F(tC.$$.fragment),zxr=l(),Or=a("div"),F(vx.$$.fragment),Qxr=l(),L7e=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hxr=l(),un=a("p"),Uxr=o("The model class to instantiate is selected based on the "),x7e=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),$7e=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(":"),r9r=l(),Le=a("ul"),aC=a("li"),S7e=a("strong"),t9r=o("albert"),a9r=o(" \u2014 "),XJ=a("a"),n9r=o("FlaxAlbertForMaskedLM"),s9r=o(" (ALBERT model)"),l9r=l(),nC=a("li"),R7e=a("strong"),i9r=o("bart"),d9r=o(" \u2014 "),zJ=a("a"),c9r=o("FlaxBartForConditionalGeneration"),f9r=o(" (BART model)"),m9r=l(),sC=a("li"),B7e=a("strong"),g9r=o("bert"),h9r=o(" \u2014 "),QJ=a("a"),p9r=o("FlaxBertForMaskedLM"),u9r=o(" (BERT model)"),_9r=l(),lC=a("li"),P7e=a("strong"),b9r=o("big_bird"),v9r=o(" \u2014 "),WJ=a("a"),F9r=o("FlaxBigBirdForMaskedLM"),T9r=o(" (BigBird model)"),M9r=l(),iC=a("li"),I7e=a("strong"),E9r=o("distilbert"),C9r=o(" \u2014 "),HJ=a("a"),w9r=o("FlaxDistilBertForMaskedLM"),A9r=o(" (DistilBERT model)"),y9r=l(),dC=a("li"),q7e=a("strong"),L9r=o("electra"),x9r=o(" \u2014 "),UJ=a("a"),$9r=o("FlaxElectraForMaskedLM"),k9r=o(" (ELECTRA model)"),S9r=l(),cC=a("li"),N7e=a("strong"),R9r=o("mbart"),B9r=o(" \u2014 "),JJ=a("a"),P9r=o("FlaxMBartForConditionalGeneration"),I9r=o(" (mBART model)"),q9r=l(),fC=a("li"),j7e=a("strong"),N9r=o("roberta"),j9r=o(" \u2014 "),YJ=a("a"),D9r=o("FlaxRobertaForMaskedLM"),G9r=o(" (RoBERTa model)"),O9r=l(),mC=a("li"),D7e=a("strong"),V9r=o("roformer"),X9r=o(" \u2014 "),KJ=a("a"),z9r=o("FlaxRoFormerForMaskedLM"),Q9r=o(" (RoFormer model)"),W9r=l(),gC=a("li"),G7e=a("strong"),H9r=o("xlm-roberta"),U9r=o(" \u2014 "),ZJ=a("a"),J9r=o("FlaxXLMRobertaForMaskedLM"),Y9r=o(" (XLM-RoBERTa model)"),K9r=l(),F(hC.$$.fragment),Yqe=l(),jc=a("h2"),pC=a("a"),O7e=a("span"),F(Fx.$$.fragment),Z9r=l(),V7e=a("span"),e$r=o("FlaxAutoModelForSeq2SeqLM"),Kqe=l(),pr=a("div"),F(Tx.$$.fragment),o$r=l(),Dc=a("p"),r$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eY=a("a"),t$r=o("from_pretrained()"),a$r=o(" class method or the "),oY=a("a"),n$r=o("from_config()"),s$r=o(` class
method.`),l$r=l(),Mx=a("p"),i$r=o("This class cannot be instantiated directly using "),X7e=a("code"),d$r=o("__init__()"),c$r=o(" (throws an error)."),f$r=l(),Vt=a("div"),F(Ex.$$.fragment),m$r=l(),z7e=a("p"),g$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h$r=l(),Gc=a("p"),p$r=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),u$r=o("not"),_$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),b$r=o("from_pretrained()"),v$r=o(" to load the model weights."),F$r=l(),F(uC.$$.fragment),T$r=l(),Vr=a("div"),F(Cx.$$.fragment),M$r=l(),W7e=a("p"),E$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C$r=l(),_n=a("p"),w$r=o("The model class to instantiate is selected based on the "),H7e=a("code"),A$r=o("model_type"),y$r=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),L$r=o("pretrained_model_name_or_path"),x$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(":"),S$r=l(),Se=a("ul"),_C=a("li"),Y7e=a("strong"),R$r=o("bart"),B$r=o(" \u2014 "),tY=a("a"),P$r=o("FlaxBartForConditionalGeneration"),I$r=o(" (BART model)"),q$r=l(),bC=a("li"),K7e=a("strong"),N$r=o("blenderbot"),j$r=o(" \u2014 "),aY=a("a"),D$r=o("FlaxBlenderbotForConditionalGeneration"),G$r=o(" (Blenderbot model)"),O$r=l(),vC=a("li"),Z7e=a("strong"),V$r=o("blenderbot-small"),X$r=o(" \u2014 "),nY=a("a"),z$r=o("FlaxBlenderbotSmallForConditionalGeneration"),Q$r=o(" (BlenderbotSmall model)"),W$r=l(),FC=a("li"),eMe=a("strong"),H$r=o("encoder-decoder"),U$r=o(" \u2014 "),sY=a("a"),J$r=o("FlaxEncoderDecoderModel"),Y$r=o(" (Encoder decoder model)"),K$r=l(),TC=a("li"),oMe=a("strong"),Z$r=o("marian"),ekr=o(" \u2014 "),lY=a("a"),okr=o("FlaxMarianMTModel"),rkr=o(" (Marian model)"),tkr=l(),MC=a("li"),rMe=a("strong"),akr=o("mbart"),nkr=o(" \u2014 "),iY=a("a"),skr=o("FlaxMBartForConditionalGeneration"),lkr=o(" (mBART model)"),ikr=l(),EC=a("li"),tMe=a("strong"),dkr=o("mt5"),ckr=o(" \u2014 "),dY=a("a"),fkr=o("FlaxMT5ForConditionalGeneration"),mkr=o(" (mT5 model)"),gkr=l(),CC=a("li"),aMe=a("strong"),hkr=o("pegasus"),pkr=o(" \u2014 "),cY=a("a"),ukr=o("FlaxPegasusForConditionalGeneration"),_kr=o(" (Pegasus model)"),bkr=l(),wC=a("li"),nMe=a("strong"),vkr=o("t5"),Fkr=o(" \u2014 "),fY=a("a"),Tkr=o("FlaxT5ForConditionalGeneration"),Mkr=o(" (T5 model)"),Ekr=l(),F(AC.$$.fragment),Zqe=l(),Oc=a("h2"),yC=a("a"),sMe=a("span"),F(wx.$$.fragment),Ckr=l(),lMe=a("span"),wkr=o("FlaxAutoModelForSequenceClassification"),eNe=l(),ur=a("div"),F(Ax.$$.fragment),Akr=l(),Vc=a("p"),ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mY=a("a"),Lkr=o("from_pretrained()"),xkr=o(" class method or the "),gY=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),yx=a("p"),Rkr=o("This class cannot be instantiated directly using "),iMe=a("code"),Bkr=o("__init__()"),Pkr=o(" (throws an error)."),Ikr=l(),Xt=a("div"),F(Lx.$$.fragment),qkr=l(),dMe=a("p"),Nkr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jkr=l(),Xc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(LC.$$.fragment),Qkr=l(),Xr=a("div"),F(xx.$$.fragment),Wkr=l(),fMe=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ukr=l(),bn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),mMe=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),xe=a("ul"),xC=a("li"),pMe=a("strong"),aSr=o("albert"),nSr=o(" \u2014 "),pY=a("a"),sSr=o("FlaxAlbertForSequenceClassification"),lSr=o(" (ALBERT model)"),iSr=l(),$C=a("li"),uMe=a("strong"),dSr=o("bart"),cSr=o(" \u2014 "),uY=a("a"),fSr=o("FlaxBartForSequenceClassification"),mSr=o(" (BART model)"),gSr=l(),kC=a("li"),_Me=a("strong"),hSr=o("bert"),pSr=o(" \u2014 "),_Y=a("a"),uSr=o("FlaxBertForSequenceClassification"),_Sr=o(" (BERT model)"),bSr=l(),SC=a("li"),bMe=a("strong"),vSr=o("big_bird"),FSr=o(" \u2014 "),bY=a("a"),TSr=o("FlaxBigBirdForSequenceClassification"),MSr=o(" (BigBird model)"),ESr=l(),RC=a("li"),vMe=a("strong"),CSr=o("distilbert"),wSr=o(" \u2014 "),vY=a("a"),ASr=o("FlaxDistilBertForSequenceClassification"),ySr=o(" (DistilBERT model)"),LSr=l(),BC=a("li"),FMe=a("strong"),xSr=o("electra"),$Sr=o(" \u2014 "),FY=a("a"),kSr=o("FlaxElectraForSequenceClassification"),SSr=o(" (ELECTRA model)"),RSr=l(),PC=a("li"),TMe=a("strong"),BSr=o("mbart"),PSr=o(" \u2014 "),TY=a("a"),ISr=o("FlaxMBartForSequenceClassification"),qSr=o(" (mBART model)"),NSr=l(),IC=a("li"),MMe=a("strong"),jSr=o("roberta"),DSr=o(" \u2014 "),MY=a("a"),GSr=o("FlaxRobertaForSequenceClassification"),OSr=o(" (RoBERTa model)"),VSr=l(),qC=a("li"),EMe=a("strong"),XSr=o("roformer"),zSr=o(" \u2014 "),EY=a("a"),QSr=o("FlaxRoFormerForSequenceClassification"),WSr=o(" (RoFormer model)"),HSr=l(),NC=a("li"),CMe=a("strong"),USr=o("xlm-roberta"),JSr=o(" \u2014 "),CY=a("a"),YSr=o("FlaxXLMRobertaForSequenceClassification"),KSr=o(" (XLM-RoBERTa model)"),ZSr=l(),F(jC.$$.fragment),oNe=l(),zc=a("h2"),DC=a("a"),wMe=a("span"),F($x.$$.fragment),eRr=l(),AMe=a("span"),oRr=o("FlaxAutoModelForQuestionAnswering"),rNe=l(),_r=a("div"),F(kx.$$.fragment),rRr=l(),Qc=a("p"),tRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wY=a("a"),aRr=o("from_pretrained()"),nRr=o(" class method or the "),AY=a("a"),sRr=o("from_config()"),lRr=o(` class
method.`),iRr=l(),Sx=a("p"),dRr=o("This class cannot be instantiated directly using "),yMe=a("code"),cRr=o("__init__()"),fRr=o(" (throws an error)."),mRr=l(),zt=a("div"),F(Rx.$$.fragment),gRr=l(),LMe=a("p"),hRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pRr=l(),Wc=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),_Rr=o("not"),bRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),vRr=o("from_pretrained()"),FRr=o(" to load the model weights."),TRr=l(),F(GC.$$.fragment),MRr=l(),zr=a("div"),F(Bx.$$.fragment),ERr=l(),$Me=a("p"),CRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wRr=l(),vn=a("p"),ARr=o("The model class to instantiate is selected based on the "),kMe=a("code"),yRr=o("model_type"),LRr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),xRr=o("pretrained_model_name_or_path"),$Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(":"),RRr=l(),$e=a("ul"),OC=a("li"),BMe=a("strong"),BRr=o("albert"),PRr=o(" \u2014 "),LY=a("a"),IRr=o("FlaxAlbertForQuestionAnswering"),qRr=o(" (ALBERT model)"),NRr=l(),VC=a("li"),PMe=a("strong"),jRr=o("bart"),DRr=o(" \u2014 "),xY=a("a"),GRr=o("FlaxBartForQuestionAnswering"),ORr=o(" (BART model)"),VRr=l(),XC=a("li"),IMe=a("strong"),XRr=o("bert"),zRr=o(" \u2014 "),$Y=a("a"),QRr=o("FlaxBertForQuestionAnswering"),WRr=o(" (BERT model)"),HRr=l(),zC=a("li"),qMe=a("strong"),URr=o("big_bird"),JRr=o(" \u2014 "),kY=a("a"),YRr=o("FlaxBigBirdForQuestionAnswering"),KRr=o(" (BigBird model)"),ZRr=l(),QC=a("li"),NMe=a("strong"),eBr=o("distilbert"),oBr=o(" \u2014 "),SY=a("a"),rBr=o("FlaxDistilBertForQuestionAnswering"),tBr=o(" (DistilBERT model)"),aBr=l(),WC=a("li"),jMe=a("strong"),nBr=o("electra"),sBr=o(" \u2014 "),RY=a("a"),lBr=o("FlaxElectraForQuestionAnswering"),iBr=o(" (ELECTRA model)"),dBr=l(),HC=a("li"),DMe=a("strong"),cBr=o("mbart"),fBr=o(" \u2014 "),BY=a("a"),mBr=o("FlaxMBartForQuestionAnswering"),gBr=o(" (mBART model)"),hBr=l(),UC=a("li"),GMe=a("strong"),pBr=o("roberta"),uBr=o(" \u2014 "),PY=a("a"),_Br=o("FlaxRobertaForQuestionAnswering"),bBr=o(" (RoBERTa model)"),vBr=l(),JC=a("li"),OMe=a("strong"),FBr=o("roformer"),TBr=o(" \u2014 "),IY=a("a"),MBr=o("FlaxRoFormerForQuestionAnswering"),EBr=o(" (RoFormer model)"),CBr=l(),YC=a("li"),VMe=a("strong"),wBr=o("xlm-roberta"),ABr=o(" \u2014 "),qY=a("a"),yBr=o("FlaxXLMRobertaForQuestionAnswering"),LBr=o(" (XLM-RoBERTa model)"),xBr=l(),F(KC.$$.fragment),tNe=l(),Hc=a("h2"),ZC=a("a"),XMe=a("span"),F(Px.$$.fragment),$Br=l(),zMe=a("span"),kBr=o("FlaxAutoModelForTokenClassification"),aNe=l(),br=a("div"),F(Ix.$$.fragment),SBr=l(),Uc=a("p"),RBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NY=a("a"),BBr=o("from_pretrained()"),PBr=o(" class method or the "),jY=a("a"),IBr=o("from_config()"),qBr=o(` class
method.`),NBr=l(),qx=a("p"),jBr=o("This class cannot be instantiated directly using "),QMe=a("code"),DBr=o("__init__()"),GBr=o(" (throws an error)."),OBr=l(),Qt=a("div"),F(Nx.$$.fragment),VBr=l(),WMe=a("p"),XBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zBr=l(),Jc=a("p"),QBr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),WBr=o("not"),HBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),UBr=o("from_pretrained()"),JBr=o(" to load the model weights."),YBr=l(),F(e3.$$.fragment),KBr=l(),Qr=a("div"),F(jx.$$.fragment),ZBr=l(),UMe=a("p"),ePr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oPr=l(),Fn=a("p"),rPr=o("The model class to instantiate is selected based on the "),JMe=a("code"),tPr=o("model_type"),aPr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),nPr=o("pretrained_model_name_or_path"),sPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(":"),dPr=l(),De=a("ul"),o3=a("li"),ZMe=a("strong"),cPr=o("albert"),fPr=o(" \u2014 "),GY=a("a"),mPr=o("FlaxAlbertForTokenClassification"),gPr=o(" (ALBERT model)"),hPr=l(),r3=a("li"),e4e=a("strong"),pPr=o("bert"),uPr=o(" \u2014 "),OY=a("a"),_Pr=o("FlaxBertForTokenClassification"),bPr=o(" (BERT model)"),vPr=l(),t3=a("li"),o4e=a("strong"),FPr=o("big_bird"),TPr=o(" \u2014 "),VY=a("a"),MPr=o("FlaxBigBirdForTokenClassification"),EPr=o(" (BigBird model)"),CPr=l(),a3=a("li"),r4e=a("strong"),wPr=o("distilbert"),APr=o(" \u2014 "),XY=a("a"),yPr=o("FlaxDistilBertForTokenClassification"),LPr=o(" (DistilBERT model)"),xPr=l(),n3=a("li"),t4e=a("strong"),$Pr=o("electra"),kPr=o(" \u2014 "),zY=a("a"),SPr=o("FlaxElectraForTokenClassification"),RPr=o(" (ELECTRA model)"),BPr=l(),s3=a("li"),a4e=a("strong"),PPr=o("roberta"),IPr=o(" \u2014 "),QY=a("a"),qPr=o("FlaxRobertaForTokenClassification"),NPr=o(" (RoBERTa model)"),jPr=l(),l3=a("li"),n4e=a("strong"),DPr=o("roformer"),GPr=o(" \u2014 "),WY=a("a"),OPr=o("FlaxRoFormerForTokenClassification"),VPr=o(" (RoFormer model)"),XPr=l(),i3=a("li"),s4e=a("strong"),zPr=o("xlm-roberta"),QPr=o(" \u2014 "),HY=a("a"),WPr=o("FlaxXLMRobertaForTokenClassification"),HPr=o(" (XLM-RoBERTa model)"),UPr=l(),F(d3.$$.fragment),nNe=l(),Yc=a("h2"),c3=a("a"),l4e=a("span"),F(Dx.$$.fragment),JPr=l(),i4e=a("span"),YPr=o("FlaxAutoModelForMultipleChoice"),sNe=l(),vr=a("div"),F(Gx.$$.fragment),KPr=l(),Kc=a("p"),ZPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UY=a("a"),eIr=o("from_pretrained()"),oIr=o(" class method or the "),JY=a("a"),rIr=o("from_config()"),tIr=o(` class
method.`),aIr=l(),Ox=a("p"),nIr=o("This class cannot be instantiated directly using "),d4e=a("code"),sIr=o("__init__()"),lIr=o(" (throws an error)."),iIr=l(),Wt=a("div"),F(Vx.$$.fragment),dIr=l(),c4e=a("p"),cIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fIr=l(),Zc=a("p"),mIr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),gIr=o("not"),hIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),pIr=o("from_pretrained()"),uIr=o(" to load the model weights."),_Ir=l(),F(f3.$$.fragment),bIr=l(),Wr=a("div"),F(Xx.$$.fragment),vIr=l(),m4e=a("p"),FIr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TIr=l(),Tn=a("p"),MIr=o("The model class to instantiate is selected based on the "),g4e=a("code"),EIr=o("model_type"),CIr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),wIr=o("pretrained_model_name_or_path"),AIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),yIr=o("pretrained_model_name_or_path"),LIr=o(":"),xIr=l(),Ge=a("ul"),m3=a("li"),u4e=a("strong"),$Ir=o("albert"),kIr=o(" \u2014 "),KY=a("a"),SIr=o("FlaxAlbertForMultipleChoice"),RIr=o(" (ALBERT model)"),BIr=l(),g3=a("li"),_4e=a("strong"),PIr=o("bert"),IIr=o(" \u2014 "),ZY=a("a"),qIr=o("FlaxBertForMultipleChoice"),NIr=o(" (BERT model)"),jIr=l(),h3=a("li"),b4e=a("strong"),DIr=o("big_bird"),GIr=o(" \u2014 "),eK=a("a"),OIr=o("FlaxBigBirdForMultipleChoice"),VIr=o(" (BigBird model)"),XIr=l(),p3=a("li"),v4e=a("strong"),zIr=o("distilbert"),QIr=o(" \u2014 "),oK=a("a"),WIr=o("FlaxDistilBertForMultipleChoice"),HIr=o(" (DistilBERT model)"),UIr=l(),u3=a("li"),F4e=a("strong"),JIr=o("electra"),YIr=o(" \u2014 "),rK=a("a"),KIr=o("FlaxElectraForMultipleChoice"),ZIr=o(" (ELECTRA model)"),eqr=l(),_3=a("li"),T4e=a("strong"),oqr=o("roberta"),rqr=o(" \u2014 "),tK=a("a"),tqr=o("FlaxRobertaForMultipleChoice"),aqr=o(" (RoBERTa model)"),nqr=l(),b3=a("li"),M4e=a("strong"),sqr=o("roformer"),lqr=o(" \u2014 "),aK=a("a"),iqr=o("FlaxRoFormerForMultipleChoice"),dqr=o(" (RoFormer model)"),cqr=l(),v3=a("li"),E4e=a("strong"),fqr=o("xlm-roberta"),mqr=o(" \u2014 "),nK=a("a"),gqr=o("FlaxXLMRobertaForMultipleChoice"),hqr=o(" (XLM-RoBERTa model)"),pqr=l(),F(F3.$$.fragment),lNe=l(),ef=a("h2"),T3=a("a"),C4e=a("span"),F(zx.$$.fragment),uqr=l(),w4e=a("span"),_qr=o("FlaxAutoModelForNextSentencePrediction"),iNe=l(),Fr=a("div"),F(Qx.$$.fragment),bqr=l(),of=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sK=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),lK=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),Wx=a("p"),wqr=o("This class cannot be instantiated directly using "),A4e=a("code"),Aqr=o("__init__()"),yqr=o(" (throws an error)."),Lqr=l(),Ht=a("div"),F(Hx.$$.fragment),xqr=l(),y4e=a("p"),$qr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kqr=l(),rf=a("p"),Sqr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),Rqr=o("not"),Bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),Pqr=o("from_pretrained()"),Iqr=o(" to load the model weights."),qqr=l(),F(M3.$$.fragment),Nqr=l(),Hr=a("div"),F(Ux.$$.fragment),jqr=l(),x4e=a("p"),Dqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gqr=l(),Mn=a("p"),Oqr=o("The model class to instantiate is selected based on the "),$4e=a("code"),Vqr=o("model_type"),Xqr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),zqr=o("pretrained_model_name_or_path"),Qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),Wqr=o("pretrained_model_name_or_path"),Hqr=o(":"),Uqr=l(),R4e=a("ul"),E3=a("li"),B4e=a("strong"),Jqr=o("bert"),Yqr=o(" \u2014 "),dK=a("a"),Kqr=o("FlaxBertForNextSentencePrediction"),Zqr=o(" (BERT model)"),eNr=l(),F(C3.$$.fragment),dNe=l(),tf=a("h2"),w3=a("a"),P4e=a("span"),F(Jx.$$.fragment),oNr=l(),I4e=a("span"),rNr=o("FlaxAutoModelForImageClassification"),cNe=l(),Tr=a("div"),F(Yx.$$.fragment),tNr=l(),af=a("p"),aNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cK=a("a"),nNr=o("from_pretrained()"),sNr=o(" class method or the "),fK=a("a"),lNr=o("from_config()"),iNr=o(` class
method.`),dNr=l(),Kx=a("p"),cNr=o("This class cannot be instantiated directly using "),q4e=a("code"),fNr=o("__init__()"),mNr=o(" (throws an error)."),gNr=l(),Ut=a("div"),F(Zx.$$.fragment),hNr=l(),N4e=a("p"),pNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uNr=l(),nf=a("p"),_Nr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),bNr=o("not"),vNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),FNr=o("from_pretrained()"),TNr=o(" to load the model weights."),MNr=l(),F(A3.$$.fragment),ENr=l(),Ur=a("div"),F(e9.$$.fragment),CNr=l(),D4e=a("p"),wNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ANr=l(),En=a("p"),yNr=o("The model class to instantiate is selected based on the "),G4e=a("code"),LNr=o("model_type"),xNr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),$Nr=o("pretrained_model_name_or_path"),kNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),SNr=o("pretrained_model_name_or_path"),RNr=o(":"),BNr=l(),o9=a("ul"),y3=a("li"),X4e=a("strong"),PNr=o("beit"),INr=o(" \u2014 "),gK=a("a"),qNr=o("FlaxBeitForImageClassification"),NNr=o(" (BEiT model)"),jNr=l(),L3=a("li"),z4e=a("strong"),DNr=o("vit"),GNr=o(" \u2014 "),hK=a("a"),ONr=o("FlaxViTForImageClassification"),VNr=o(" (ViT model)"),XNr=l(),F(x3.$$.fragment),fNe=l(),sf=a("h2"),$3=a("a"),Q4e=a("span"),F(r9.$$.fragment),zNr=l(),W4e=a("span"),QNr=o("FlaxAutoModelForVision2Seq"),mNe=l(),Mr=a("div"),F(t9.$$.fragment),WNr=l(),lf=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pK=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),uK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),a9=a("p"),ejr=o("This class cannot be instantiated directly using "),H4e=a("code"),ojr=o("__init__()"),rjr=o(" (throws an error)."),tjr=l(),Jt=a("div"),F(n9.$$.fragment),ajr=l(),U4e=a("p"),njr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sjr=l(),df=a("p"),ljr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),ijr=o("not"),djr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),cjr=o("from_pretrained()"),fjr=o(" to load the model weights."),mjr=l(),F(k3.$$.fragment),gjr=l(),Jr=a("div"),F(s9.$$.fragment),hjr=l(),Y4e=a("p"),pjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ujr=l(),Cn=a("p"),_jr=o("The model class to instantiate is selected based on the "),K4e=a("code"),bjr=o("model_type"),vjr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),Mjr=o("pretrained_model_name_or_path"),Ejr=o(":"),Cjr=l(),oEe=a("ul"),S3=a("li"),rEe=a("strong"),wjr=o("vision-encoder-decoder"),Ajr=o(" \u2014 "),bK=a("a"),yjr=o("FlaxVisionEncoderDecoderModel"),Ljr=o(" (Vision Encoder decoder model)"),xjr=l(),F(R3.$$.fragment),this.h()},l(f){const _=pyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var l9=s(p);m=n(l9,"A",{id:!0,class:!0,href:!0});var tEe=s(m);u=n(tEe,"SPAN",{});var aEe=s(u);T(d.$$.fragment,aEe),aEe.forEach(t),tEe.forEach(t),h=i(l9),Mo=n(l9,"SPAN",{});var nEe=s(Mo);ii=r(nEe,"Auto Classes"),nEe.forEach(t),l9.forEach(t),gf=i(f),et=n(f,"P",{});var i9=s(et);di=r(i9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(i9,"CODE",{});var sEe=s(ci);K6=r(sEe,"from_pretrained()"),sEe.forEach(t),hf=r(i9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),i9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var lEe=s(An);Z6=r(lEe,"AutoConfig"),lEe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var iEe=s(Ln);eA=r(iEe,"AutoModel"),iEe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var dEe=s(xn);oA=r(dEe,"AutoTokenizer"),dEe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var d9=s(Ae);F$=r(d9,"will create a model that is an instance of "),hi=n(d9,"A",{href:!0});var cEe=s(hi);T$=r(cEe,"BertModel"),cEe.forEach(t),M$=r(d9,"."),d9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var c9=s(Ea);E$=r(c9,"There is one class of "),uf=n(c9,"CODE",{});var fEe=s(uf);C$=r(fEe,"AutoModel"),fEe.forEach(t),TDe=r(c9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),c9.forEach(t),cIe=i(f),pi=n(f,"H2",{class:!0});var f9=s(pi);_f=n(f9,"A",{id:!0,class:!0,href:!0});var mEe=s(_f);mee=n(mEe,"SPAN",{});var gEe=s(mee);T(rA.$$.fragment,gEe),gEe.forEach(t),mEe.forEach(t),MDe=i(f9),gee=n(f9,"SPAN",{});var hEe=s(gee);EDe=r(hEe,"Extending the Auto Classes"),hEe.forEach(t),f9.forEach(t),fIe=i(f),$n=n(f,"P",{});var cf=s($n);CDe=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hee=n(cf,"CODE",{});var pEe=s(hee);wDe=r(pEe,"NewModel"),pEe.forEach(t),ADe=r(cf,", make sure you have a "),pee=n(cf,"CODE",{});var uEe=s(pee);yDe=r(uEe,"NewModelConfig"),uEe.forEach(t),LDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),mIe=i(f),T(tA.$$.fragment,f),gIe=i(f),w$=n(f,"P",{});var _Ee=s(w$);xDe=r(_Ee,"You will then be able to use the auto classes like you would usually do!"),_Ee.forEach(t),hIe=i(f),T(bf.$$.fragment,f),pIe=i(f),ui=n(f,"H2",{class:!0});var m9=s(ui);vf=n(m9,"A",{id:!0,class:!0,href:!0});var bEe=s(vf);uee=n(bEe,"SPAN",{});var vEe=s(uee);T(aA.$$.fragment,vEe),vEe.forEach(t),bEe.forEach(t),$De=i(m9),_ee=n(m9,"SPAN",{});var FEe=s(_ee);kDe=r(FEe,"AutoConfig"),FEe.forEach(t),m9.forEach(t),uIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(nA.$$.fragment,Kr),SDe=i(Kr),sA=n(Kr,"P",{});var g9=s(sA);RDe=r(g9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A$=n(g9,"A",{href:!0});var TEe=s(A$);BDe=r(TEe,"from_pretrained()"),TEe.forEach(t),PDe=r(g9," class method."),g9.forEach(t),IDe=i(Kr),lA=n(Kr,"P",{});var h9=s(lA);qDe=r(h9,"This class cannot be instantiated directly using "),bee=n(h9,"CODE",{});var MEe=s(bee);NDe=r(MEe,"__init__()"),MEe.forEach(t),jDe=r(h9," (throws an error)."),h9.forEach(t),DDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(iA.$$.fragment,Zr),GDe=i(Zr),vee=n(Zr,"P",{});var EEe=s(vee);ODe=r(EEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),EEe.forEach(t),VDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);XDe=r(ff,"The configuration class to instantiate is selected based on the "),Fee=n(ff,"CODE",{});var CEe=s(Fee);zDe=r(CEe,"model_type"),CEe.forEach(t),QDe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Tee=n(ff,"CODE",{});var wEe=s(Tee);WDe=r(wEe,"pretrained_model_name_or_path"),wEe.forEach(t),HDe=r(ff,":"),ff.forEach(t),UDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);Ff=n(y,"LI",{});var B3=s(Ff);Mee=n(B3,"STRONG",{});var AEe=s(Mee);JDe=r(AEe,"albert"),AEe.forEach(t),YDe=r(B3," \u2014 "),y$=n(B3,"A",{href:!0});var yEe=s(y$);KDe=r(yEe,"AlbertConfig"),yEe.forEach(t),ZDe=r(B3," (ALBERT model)"),B3.forEach(t),eGe=i(y),Tf=n(y,"LI",{});var P3=s(Tf);Eee=n(P3,"STRONG",{});var LEe=s(Eee);oGe=r(LEe,"bart"),LEe.forEach(t),rGe=r(P3," \u2014 "),L$=n(P3,"A",{href:!0});var xEe=s(L$);tGe=r(xEe,"BartConfig"),xEe.forEach(t),aGe=r(P3," (BART model)"),P3.forEach(t),nGe=i(y),Mf=n(y,"LI",{});var I3=s(Mf);Cee=n(I3,"STRONG",{});var $Ee=s(Cee);sGe=r($Ee,"beit"),$Ee.forEach(t),lGe=r(I3," \u2014 "),x$=n(I3,"A",{href:!0});var kEe=s(x$);iGe=r(kEe,"BeitConfig"),kEe.forEach(t),dGe=r(I3," (BEiT model)"),I3.forEach(t),cGe=i(y),Ef=n(y,"LI",{});var q3=s(Ef);wee=n(q3,"STRONG",{});var SEe=s(wee);fGe=r(SEe,"bert"),SEe.forEach(t),mGe=r(q3," \u2014 "),$$=n(q3,"A",{href:!0});var REe=s($$);gGe=r(REe,"BertConfig"),REe.forEach(t),hGe=r(q3," (BERT model)"),q3.forEach(t),pGe=i(y),Cf=n(y,"LI",{});var N3=s(Cf);Aee=n(N3,"STRONG",{});var BEe=s(Aee);uGe=r(BEe,"bert-generation"),BEe.forEach(t),_Ge=r(N3," \u2014 "),k$=n(N3,"A",{href:!0});var PEe=s(k$);bGe=r(PEe,"BertGenerationConfig"),PEe.forEach(t),vGe=r(N3," (Bert Generation model)"),N3.forEach(t),FGe=i(y),wf=n(y,"LI",{});var j3=s(wf);yee=n(j3,"STRONG",{});var IEe=s(yee);TGe=r(IEe,"big_bird"),IEe.forEach(t),MGe=r(j3," \u2014 "),S$=n(j3,"A",{href:!0});var qEe=s(S$);EGe=r(qEe,"BigBirdConfig"),qEe.forEach(t),CGe=r(j3," (BigBird model)"),j3.forEach(t),wGe=i(y),Af=n(y,"LI",{});var D3=s(Af);Lee=n(D3,"STRONG",{});var NEe=s(Lee);AGe=r(NEe,"bigbird_pegasus"),NEe.forEach(t),yGe=r(D3," \u2014 "),R$=n(D3,"A",{href:!0});var jEe=s(R$);LGe=r(jEe,"BigBirdPegasusConfig"),jEe.forEach(t),xGe=r(D3," (BigBirdPegasus model)"),D3.forEach(t),$Ge=i(y),yf=n(y,"LI",{});var G3=s(yf);xee=n(G3,"STRONG",{});var DEe=s(xee);kGe=r(DEe,"bigscience176b"),DEe.forEach(t),SGe=r(G3," \u2014 "),B$=n(G3,"A",{href:!0});var GEe=s(B$);RGe=r(GEe,"BigScience176BConfig"),GEe.forEach(t),BGe=r(G3," (BigScience176B model)"),G3.forEach(t),PGe=i(y),Lf=n(y,"LI",{});var O3=s(Lf);$ee=n(O3,"STRONG",{});var OEe=s($ee);IGe=r(OEe,"blenderbot"),OEe.forEach(t),qGe=r(O3," \u2014 "),P$=n(O3,"A",{href:!0});var VEe=s(P$);NGe=r(VEe,"BlenderbotConfig"),VEe.forEach(t),jGe=r(O3," (Blenderbot model)"),O3.forEach(t),DGe=i(y),xf=n(y,"LI",{});var V3=s(xf);kee=n(V3,"STRONG",{});var XEe=s(kee);GGe=r(XEe,"blenderbot-small"),XEe.forEach(t),OGe=r(V3," \u2014 "),I$=n(V3,"A",{href:!0});var zEe=s(I$);VGe=r(zEe,"BlenderbotSmallConfig"),zEe.forEach(t),XGe=r(V3," (BlenderbotSmall model)"),V3.forEach(t),zGe=i(y),$f=n(y,"LI",{});var X3=s($f);See=n(X3,"STRONG",{});var QEe=s(See);QGe=r(QEe,"camembert"),QEe.forEach(t),WGe=r(X3," \u2014 "),q$=n(X3,"A",{href:!0});var WEe=s(q$);HGe=r(WEe,"CamembertConfig"),WEe.forEach(t),UGe=r(X3," (CamemBERT model)"),X3.forEach(t),JGe=i(y),kf=n(y,"LI",{});var z3=s(kf);Ree=n(z3,"STRONG",{});var HEe=s(Ree);YGe=r(HEe,"canine"),HEe.forEach(t),KGe=r(z3," \u2014 "),N$=n(z3,"A",{href:!0});var UEe=s(N$);ZGe=r(UEe,"CanineConfig"),UEe.forEach(t),eOe=r(z3," (Canine model)"),z3.forEach(t),oOe=i(y),Sf=n(y,"LI",{});var Q3=s(Sf);Bee=n(Q3,"STRONG",{});var JEe=s(Bee);rOe=r(JEe,"clip"),JEe.forEach(t),tOe=r(Q3," \u2014 "),j$=n(Q3,"A",{href:!0});var YEe=s(j$);aOe=r(YEe,"CLIPConfig"),YEe.forEach(t),nOe=r(Q3," (CLIP model)"),Q3.forEach(t),sOe=i(y),Rf=n(y,"LI",{});var W3=s(Rf);Pee=n(W3,"STRONG",{});var KEe=s(Pee);lOe=r(KEe,"convbert"),KEe.forEach(t),iOe=r(W3," \u2014 "),D$=n(W3,"A",{href:!0});var ZEe=s(D$);dOe=r(ZEe,"ConvBertConfig"),ZEe.forEach(t),cOe=r(W3," (ConvBERT model)"),W3.forEach(t),fOe=i(y),Bf=n(y,"LI",{});var H3=s(Bf);Iee=n(H3,"STRONG",{});var e5e=s(Iee);mOe=r(e5e,"convnext"),e5e.forEach(t),gOe=r(H3," \u2014 "),G$=n(H3,"A",{href:!0});var o5e=s(G$);hOe=r(o5e,"ConvNextConfig"),o5e.forEach(t),pOe=r(H3," (ConvNext model)"),H3.forEach(t),uOe=i(y),Pf=n(y,"LI",{});var U3=s(Pf);qee=n(U3,"STRONG",{});var r5e=s(qee);_Oe=r(r5e,"ctrl"),r5e.forEach(t),bOe=r(U3," \u2014 "),O$=n(U3,"A",{href:!0});var t5e=s(O$);vOe=r(t5e,"CTRLConfig"),t5e.forEach(t),FOe=r(U3," (CTRL model)"),U3.forEach(t),TOe=i(y),If=n(y,"LI",{});var J3=s(If);Nee=n(J3,"STRONG",{});var a5e=s(Nee);MOe=r(a5e,"data2vec-audio"),a5e.forEach(t),EOe=r(J3," \u2014 "),V$=n(J3,"A",{href:!0});var n5e=s(V$);COe=r(n5e,"Data2VecAudioConfig"),n5e.forEach(t),wOe=r(J3," (Data2VecAudio model)"),J3.forEach(t),AOe=i(y),qf=n(y,"LI",{});var Y3=s(qf);jee=n(Y3,"STRONG",{});var s5e=s(jee);yOe=r(s5e,"data2vec-text"),s5e.forEach(t),LOe=r(Y3," \u2014 "),X$=n(Y3,"A",{href:!0});var l5e=s(X$);xOe=r(l5e,"Data2VecTextConfig"),l5e.forEach(t),$Oe=r(Y3," (Data2VecText model)"),Y3.forEach(t),kOe=i(y),Nf=n(y,"LI",{});var K3=s(Nf);Dee=n(K3,"STRONG",{});var i5e=s(Dee);SOe=r(i5e,"data2vec-vision"),i5e.forEach(t),ROe=r(K3," \u2014 "),z$=n(K3,"A",{href:!0});var d5e=s(z$);BOe=r(d5e,"Data2VecVisionConfig"),d5e.forEach(t),POe=r(K3," (Data2VecVision model)"),K3.forEach(t),IOe=i(y),jf=n(y,"LI",{});var Z3=s(jf);Gee=n(Z3,"STRONG",{});var c5e=s(Gee);qOe=r(c5e,"deberta"),c5e.forEach(t),NOe=r(Z3," \u2014 "),Q$=n(Z3,"A",{href:!0});var f5e=s(Q$);jOe=r(f5e,"DebertaConfig"),f5e.forEach(t),DOe=r(Z3," (DeBERTa model)"),Z3.forEach(t),GOe=i(y),Df=n(y,"LI",{});var ew=s(Df);Oee=n(ew,"STRONG",{});var m5e=s(Oee);OOe=r(m5e,"deberta-v2"),m5e.forEach(t),VOe=r(ew," \u2014 "),W$=n(ew,"A",{href:!0});var g5e=s(W$);XOe=r(g5e,"DebertaV2Config"),g5e.forEach(t),zOe=r(ew," (DeBERTa-v2 model)"),ew.forEach(t),QOe=i(y),Gf=n(y,"LI",{});var ow=s(Gf);Vee=n(ow,"STRONG",{});var h5e=s(Vee);WOe=r(h5e,"decision_transformer"),h5e.forEach(t),HOe=r(ow," \u2014 "),H$=n(ow,"A",{href:!0});var p5e=s(H$);UOe=r(p5e,"DecisionTransformerConfig"),p5e.forEach(t),JOe=r(ow," (Decision Transformer model)"),ow.forEach(t),YOe=i(y),Of=n(y,"LI",{});var rw=s(Of);Xee=n(rw,"STRONG",{});var u5e=s(Xee);KOe=r(u5e,"deit"),u5e.forEach(t),ZOe=r(rw," \u2014 "),U$=n(rw,"A",{href:!0});var kjr=s(U$);eVe=r(kjr,"DeiTConfig"),kjr.forEach(t),oVe=r(rw," (DeiT model)"),rw.forEach(t),rVe=i(y),Vf=n(y,"LI",{});var _5e=s(Vf);zee=n(_5e,"STRONG",{});var Sjr=s(zee);tVe=r(Sjr,"detr"),Sjr.forEach(t),aVe=r(_5e," \u2014 "),J$=n(_5e,"A",{href:!0});var Rjr=s(J$);nVe=r(Rjr,"DetrConfig"),Rjr.forEach(t),sVe=r(_5e," (DETR model)"),_5e.forEach(t),lVe=i(y),Xf=n(y,"LI",{});var b5e=s(Xf);Qee=n(b5e,"STRONG",{});var Bjr=s(Qee);iVe=r(Bjr,"distilbert"),Bjr.forEach(t),dVe=r(b5e," \u2014 "),Y$=n(b5e,"A",{href:!0});var Pjr=s(Y$);cVe=r(Pjr,"DistilBertConfig"),Pjr.forEach(t),fVe=r(b5e," (DistilBERT model)"),b5e.forEach(t),mVe=i(y),zf=n(y,"LI",{});var v5e=s(zf);Wee=n(v5e,"STRONG",{});var Ijr=s(Wee);gVe=r(Ijr,"dpr"),Ijr.forEach(t),hVe=r(v5e," \u2014 "),K$=n(v5e,"A",{href:!0});var qjr=s(K$);pVe=r(qjr,"DPRConfig"),qjr.forEach(t),uVe=r(v5e," (DPR model)"),v5e.forEach(t),_Ve=i(y),Qf=n(y,"LI",{});var F5e=s(Qf);Hee=n(F5e,"STRONG",{});var Njr=s(Hee);bVe=r(Njr,"dpt"),Njr.forEach(t),vVe=r(F5e," \u2014 "),Z$=n(F5e,"A",{href:!0});var jjr=s(Z$);FVe=r(jjr,"DPTConfig"),jjr.forEach(t),TVe=r(F5e," (DPT model)"),F5e.forEach(t),MVe=i(y),Wf=n(y,"LI",{});var T5e=s(Wf);Uee=n(T5e,"STRONG",{});var Djr=s(Uee);EVe=r(Djr,"electra"),Djr.forEach(t),CVe=r(T5e," \u2014 "),ek=n(T5e,"A",{href:!0});var Gjr=s(ek);wVe=r(Gjr,"ElectraConfig"),Gjr.forEach(t),AVe=r(T5e," (ELECTRA model)"),T5e.forEach(t),yVe=i(y),Hf=n(y,"LI",{});var M5e=s(Hf);Jee=n(M5e,"STRONG",{});var Ojr=s(Jee);LVe=r(Ojr,"encoder-decoder"),Ojr.forEach(t),xVe=r(M5e," \u2014 "),ok=n(M5e,"A",{href:!0});var Vjr=s(ok);$Ve=r(Vjr,"EncoderDecoderConfig"),Vjr.forEach(t),kVe=r(M5e," (Encoder decoder model)"),M5e.forEach(t),SVe=i(y),Uf=n(y,"LI",{});var E5e=s(Uf);Yee=n(E5e,"STRONG",{});var Xjr=s(Yee);RVe=r(Xjr,"flaubert"),Xjr.forEach(t),BVe=r(E5e," \u2014 "),rk=n(E5e,"A",{href:!0});var zjr=s(rk);PVe=r(zjr,"FlaubertConfig"),zjr.forEach(t),IVe=r(E5e," (FlauBERT model)"),E5e.forEach(t),qVe=i(y),Jf=n(y,"LI",{});var C5e=s(Jf);Kee=n(C5e,"STRONG",{});var Qjr=s(Kee);NVe=r(Qjr,"flava"),Qjr.forEach(t),jVe=r(C5e," \u2014 "),tk=n(C5e,"A",{href:!0});var Wjr=s(tk);DVe=r(Wjr,"FlavaConfig"),Wjr.forEach(t),GVe=r(C5e," (Flava model)"),C5e.forEach(t),OVe=i(y),Yf=n(y,"LI",{});var w5e=s(Yf);Zee=n(w5e,"STRONG",{});var Hjr=s(Zee);VVe=r(Hjr,"fnet"),Hjr.forEach(t),XVe=r(w5e," \u2014 "),ak=n(w5e,"A",{href:!0});var Ujr=s(ak);zVe=r(Ujr,"FNetConfig"),Ujr.forEach(t),QVe=r(w5e," (FNet model)"),w5e.forEach(t),WVe=i(y),Kf=n(y,"LI",{});var A5e=s(Kf);eoe=n(A5e,"STRONG",{});var Jjr=s(eoe);HVe=r(Jjr,"fsmt"),Jjr.forEach(t),UVe=r(A5e," \u2014 "),nk=n(A5e,"A",{href:!0});var Yjr=s(nk);JVe=r(Yjr,"FSMTConfig"),Yjr.forEach(t),YVe=r(A5e," (FairSeq Machine-Translation model)"),A5e.forEach(t),KVe=i(y),Zf=n(y,"LI",{});var y5e=s(Zf);ooe=n(y5e,"STRONG",{});var Kjr=s(ooe);ZVe=r(Kjr,"funnel"),Kjr.forEach(t),eXe=r(y5e," \u2014 "),sk=n(y5e,"A",{href:!0});var Zjr=s(sk);oXe=r(Zjr,"FunnelConfig"),Zjr.forEach(t),rXe=r(y5e," (Funnel Transformer model)"),y5e.forEach(t),tXe=i(y),em=n(y,"LI",{});var L5e=s(em);roe=n(L5e,"STRONG",{});var eDr=s(roe);aXe=r(eDr,"glpn"),eDr.forEach(t),nXe=r(L5e," \u2014 "),lk=n(L5e,"A",{href:!0});var oDr=s(lk);sXe=r(oDr,"GLPNConfig"),oDr.forEach(t),lXe=r(L5e," (GLPN model)"),L5e.forEach(t),iXe=i(y),om=n(y,"LI",{});var x5e=s(om);toe=n(x5e,"STRONG",{});var rDr=s(toe);dXe=r(rDr,"gpt2"),rDr.forEach(t),cXe=r(x5e," \u2014 "),ik=n(x5e,"A",{href:!0});var tDr=s(ik);fXe=r(tDr,"GPT2Config"),tDr.forEach(t),mXe=r(x5e," (OpenAI GPT-2 model)"),x5e.forEach(t),gXe=i(y),rm=n(y,"LI",{});var $5e=s(rm);aoe=n($5e,"STRONG",{});var aDr=s(aoe);hXe=r(aDr,"gpt_neo"),aDr.forEach(t),pXe=r($5e," \u2014 "),dk=n($5e,"A",{href:!0});var nDr=s(dk);uXe=r(nDr,"GPTNeoConfig"),nDr.forEach(t),_Xe=r($5e," (GPT Neo model)"),$5e.forEach(t),bXe=i(y),tm=n(y,"LI",{});var k5e=s(tm);noe=n(k5e,"STRONG",{});var sDr=s(noe);vXe=r(sDr,"gptj"),sDr.forEach(t),FXe=r(k5e," \u2014 "),ck=n(k5e,"A",{href:!0});var lDr=s(ck);TXe=r(lDr,"GPTJConfig"),lDr.forEach(t),MXe=r(k5e," (GPT-J model)"),k5e.forEach(t),EXe=i(y),am=n(y,"LI",{});var S5e=s(am);soe=n(S5e,"STRONG",{});var iDr=s(soe);CXe=r(iDr,"hubert"),iDr.forEach(t),wXe=r(S5e," \u2014 "),fk=n(S5e,"A",{href:!0});var dDr=s(fk);AXe=r(dDr,"HubertConfig"),dDr.forEach(t),yXe=r(S5e," (Hubert model)"),S5e.forEach(t),LXe=i(y),nm=n(y,"LI",{});var R5e=s(nm);loe=n(R5e,"STRONG",{});var cDr=s(loe);xXe=r(cDr,"ibert"),cDr.forEach(t),$Xe=r(R5e," \u2014 "),mk=n(R5e,"A",{href:!0});var fDr=s(mk);kXe=r(fDr,"IBertConfig"),fDr.forEach(t),SXe=r(R5e," (I-BERT model)"),R5e.forEach(t),RXe=i(y),sm=n(y,"LI",{});var B5e=s(sm);ioe=n(B5e,"STRONG",{});var mDr=s(ioe);BXe=r(mDr,"imagegpt"),mDr.forEach(t),PXe=r(B5e," \u2014 "),gk=n(B5e,"A",{href:!0});var gDr=s(gk);IXe=r(gDr,"ImageGPTConfig"),gDr.forEach(t),qXe=r(B5e," (ImageGPT model)"),B5e.forEach(t),NXe=i(y),lm=n(y,"LI",{});var P5e=s(lm);doe=n(P5e,"STRONG",{});var hDr=s(doe);jXe=r(hDr,"layoutlm"),hDr.forEach(t),DXe=r(P5e," \u2014 "),hk=n(P5e,"A",{href:!0});var pDr=s(hk);GXe=r(pDr,"LayoutLMConfig"),pDr.forEach(t),OXe=r(P5e," (LayoutLM model)"),P5e.forEach(t),VXe=i(y),im=n(y,"LI",{});var I5e=s(im);coe=n(I5e,"STRONG",{});var uDr=s(coe);XXe=r(uDr,"layoutlmv2"),uDr.forEach(t),zXe=r(I5e," \u2014 "),pk=n(I5e,"A",{href:!0});var _Dr=s(pk);QXe=r(_Dr,"LayoutLMv2Config"),_Dr.forEach(t),WXe=r(I5e," (LayoutLMv2 model)"),I5e.forEach(t),HXe=i(y),dm=n(y,"LI",{});var q5e=s(dm);foe=n(q5e,"STRONG",{});var bDr=s(foe);UXe=r(bDr,"led"),bDr.forEach(t),JXe=r(q5e," \u2014 "),uk=n(q5e,"A",{href:!0});var vDr=s(uk);YXe=r(vDr,"LEDConfig"),vDr.forEach(t),KXe=r(q5e," (LED model)"),q5e.forEach(t),ZXe=i(y),cm=n(y,"LI",{});var N5e=s(cm);moe=n(N5e,"STRONG",{});var FDr=s(moe);eze=r(FDr,"longformer"),FDr.forEach(t),oze=r(N5e," \u2014 "),_k=n(N5e,"A",{href:!0});var TDr=s(_k);rze=r(TDr,"LongformerConfig"),TDr.forEach(t),tze=r(N5e," (Longformer model)"),N5e.forEach(t),aze=i(y),fm=n(y,"LI",{});var j5e=s(fm);goe=n(j5e,"STRONG",{});var MDr=s(goe);nze=r(MDr,"luke"),MDr.forEach(t),sze=r(j5e," \u2014 "),bk=n(j5e,"A",{href:!0});var EDr=s(bk);lze=r(EDr,"LukeConfig"),EDr.forEach(t),ize=r(j5e," (LUKE model)"),j5e.forEach(t),dze=i(y),mm=n(y,"LI",{});var D5e=s(mm);hoe=n(D5e,"STRONG",{});var CDr=s(hoe);cze=r(CDr,"lxmert"),CDr.forEach(t),fze=r(D5e," \u2014 "),vk=n(D5e,"A",{href:!0});var wDr=s(vk);mze=r(wDr,"LxmertConfig"),wDr.forEach(t),gze=r(D5e," (LXMERT model)"),D5e.forEach(t),hze=i(y),gm=n(y,"LI",{});var G5e=s(gm);poe=n(G5e,"STRONG",{});var ADr=s(poe);pze=r(ADr,"m2m_100"),ADr.forEach(t),uze=r(G5e," \u2014 "),Fk=n(G5e,"A",{href:!0});var yDr=s(Fk);_ze=r(yDr,"M2M100Config"),yDr.forEach(t),bze=r(G5e," (M2M100 model)"),G5e.forEach(t),vze=i(y),hm=n(y,"LI",{});var O5e=s(hm);uoe=n(O5e,"STRONG",{});var LDr=s(uoe);Fze=r(LDr,"marian"),LDr.forEach(t),Tze=r(O5e," \u2014 "),Tk=n(O5e,"A",{href:!0});var xDr=s(Tk);Mze=r(xDr,"MarianConfig"),xDr.forEach(t),Eze=r(O5e," (Marian model)"),O5e.forEach(t),Cze=i(y),pm=n(y,"LI",{});var V5e=s(pm);_oe=n(V5e,"STRONG",{});var $Dr=s(_oe);wze=r($Dr,"maskformer"),$Dr.forEach(t),Aze=r(V5e," \u2014 "),Mk=n(V5e,"A",{href:!0});var kDr=s(Mk);yze=r(kDr,"MaskFormerConfig"),kDr.forEach(t),Lze=r(V5e," (MaskFormer model)"),V5e.forEach(t),xze=i(y),um=n(y,"LI",{});var X5e=s(um);boe=n(X5e,"STRONG",{});var SDr=s(boe);$ze=r(SDr,"mbart"),SDr.forEach(t),kze=r(X5e," \u2014 "),Ek=n(X5e,"A",{href:!0});var RDr=s(Ek);Sze=r(RDr,"MBartConfig"),RDr.forEach(t),Rze=r(X5e," (mBART model)"),X5e.forEach(t),Bze=i(y),_m=n(y,"LI",{});var z5e=s(_m);voe=n(z5e,"STRONG",{});var BDr=s(voe);Pze=r(BDr,"megatron-bert"),BDr.forEach(t),Ize=r(z5e," \u2014 "),Ck=n(z5e,"A",{href:!0});var PDr=s(Ck);qze=r(PDr,"MegatronBertConfig"),PDr.forEach(t),Nze=r(z5e," (MegatronBert model)"),z5e.forEach(t),jze=i(y),bm=n(y,"LI",{});var Q5e=s(bm);Foe=n(Q5e,"STRONG",{});var IDr=s(Foe);Dze=r(IDr,"mobilebert"),IDr.forEach(t),Gze=r(Q5e," \u2014 "),wk=n(Q5e,"A",{href:!0});var qDr=s(wk);Oze=r(qDr,"MobileBertConfig"),qDr.forEach(t),Vze=r(Q5e," (MobileBERT model)"),Q5e.forEach(t),Xze=i(y),vm=n(y,"LI",{});var W5e=s(vm);Toe=n(W5e,"STRONG",{});var NDr=s(Toe);zze=r(NDr,"mpnet"),NDr.forEach(t),Qze=r(W5e," \u2014 "),Ak=n(W5e,"A",{href:!0});var jDr=s(Ak);Wze=r(jDr,"MPNetConfig"),jDr.forEach(t),Hze=r(W5e," (MPNet model)"),W5e.forEach(t),Uze=i(y),Fm=n(y,"LI",{});var H5e=s(Fm);Moe=n(H5e,"STRONG",{});var DDr=s(Moe);Jze=r(DDr,"mt5"),DDr.forEach(t),Yze=r(H5e," \u2014 "),yk=n(H5e,"A",{href:!0});var GDr=s(yk);Kze=r(GDr,"MT5Config"),GDr.forEach(t),Zze=r(H5e," (mT5 model)"),H5e.forEach(t),eQe=i(y),Tm=n(y,"LI",{});var U5e=s(Tm);Eoe=n(U5e,"STRONG",{});var ODr=s(Eoe);oQe=r(ODr,"nystromformer"),ODr.forEach(t),rQe=r(U5e," \u2014 "),Lk=n(U5e,"A",{href:!0});var VDr=s(Lk);tQe=r(VDr,"NystromformerConfig"),VDr.forEach(t),aQe=r(U5e," (Nystromformer model)"),U5e.forEach(t),nQe=i(y),Mm=n(y,"LI",{});var J5e=s(Mm);Coe=n(J5e,"STRONG",{});var XDr=s(Coe);sQe=r(XDr,"openai-gpt"),XDr.forEach(t),lQe=r(J5e," \u2014 "),xk=n(J5e,"A",{href:!0});var zDr=s(xk);iQe=r(zDr,"OpenAIGPTConfig"),zDr.forEach(t),dQe=r(J5e," (OpenAI GPT model)"),J5e.forEach(t),cQe=i(y),Em=n(y,"LI",{});var Y5e=s(Em);woe=n(Y5e,"STRONG",{});var QDr=s(woe);fQe=r(QDr,"opt"),QDr.forEach(t),mQe=r(Y5e," \u2014 "),$k=n(Y5e,"A",{href:!0});var WDr=s($k);gQe=r(WDr,"OPTConfig"),WDr.forEach(t),hQe=r(Y5e," (OPT model)"),Y5e.forEach(t),pQe=i(y),Cm=n(y,"LI",{});var K5e=s(Cm);Aoe=n(K5e,"STRONG",{});var HDr=s(Aoe);uQe=r(HDr,"pegasus"),HDr.forEach(t),_Qe=r(K5e," \u2014 "),kk=n(K5e,"A",{href:!0});var UDr=s(kk);bQe=r(UDr,"PegasusConfig"),UDr.forEach(t),vQe=r(K5e," (Pegasus model)"),K5e.forEach(t),FQe=i(y),wm=n(y,"LI",{});var Z5e=s(wm);yoe=n(Z5e,"STRONG",{});var JDr=s(yoe);TQe=r(JDr,"perceiver"),JDr.forEach(t),MQe=r(Z5e," \u2014 "),Sk=n(Z5e,"A",{href:!0});var YDr=s(Sk);EQe=r(YDr,"PerceiverConfig"),YDr.forEach(t),CQe=r(Z5e," (Perceiver model)"),Z5e.forEach(t),wQe=i(y),Am=n(y,"LI",{});var eCe=s(Am);Loe=n(eCe,"STRONG",{});var KDr=s(Loe);AQe=r(KDr,"plbart"),KDr.forEach(t),yQe=r(eCe," \u2014 "),Rk=n(eCe,"A",{href:!0});var ZDr=s(Rk);LQe=r(ZDr,"PLBartConfig"),ZDr.forEach(t),xQe=r(eCe," (PLBart model)"),eCe.forEach(t),$Qe=i(y),ym=n(y,"LI",{});var oCe=s(ym);xoe=n(oCe,"STRONG",{});var eGr=s(xoe);kQe=r(eGr,"poolformer"),eGr.forEach(t),SQe=r(oCe," \u2014 "),Bk=n(oCe,"A",{href:!0});var oGr=s(Bk);RQe=r(oGr,"PoolFormerConfig"),oGr.forEach(t),BQe=r(oCe," (PoolFormer model)"),oCe.forEach(t),PQe=i(y),Lm=n(y,"LI",{});var rCe=s(Lm);$oe=n(rCe,"STRONG",{});var rGr=s($oe);IQe=r(rGr,"prophetnet"),rGr.forEach(t),qQe=r(rCe," \u2014 "),Pk=n(rCe,"A",{href:!0});var tGr=s(Pk);NQe=r(tGr,"ProphetNetConfig"),tGr.forEach(t),jQe=r(rCe," (ProphetNet model)"),rCe.forEach(t),DQe=i(y),xm=n(y,"LI",{});var tCe=s(xm);koe=n(tCe,"STRONG",{});var aGr=s(koe);GQe=r(aGr,"qdqbert"),aGr.forEach(t),OQe=r(tCe," \u2014 "),Ik=n(tCe,"A",{href:!0});var nGr=s(Ik);VQe=r(nGr,"QDQBertConfig"),nGr.forEach(t),XQe=r(tCe," (QDQBert model)"),tCe.forEach(t),zQe=i(y),$m=n(y,"LI",{});var aCe=s($m);Soe=n(aCe,"STRONG",{});var sGr=s(Soe);QQe=r(sGr,"rag"),sGr.forEach(t),WQe=r(aCe," \u2014 "),qk=n(aCe,"A",{href:!0});var lGr=s(qk);HQe=r(lGr,"RagConfig"),lGr.forEach(t),UQe=r(aCe," (RAG model)"),aCe.forEach(t),JQe=i(y),km=n(y,"LI",{});var nCe=s(km);Roe=n(nCe,"STRONG",{});var iGr=s(Roe);YQe=r(iGr,"realm"),iGr.forEach(t),KQe=r(nCe," \u2014 "),Nk=n(nCe,"A",{href:!0});var dGr=s(Nk);ZQe=r(dGr,"RealmConfig"),dGr.forEach(t),eWe=r(nCe," (Realm model)"),nCe.forEach(t),oWe=i(y),Sm=n(y,"LI",{});var sCe=s(Sm);Boe=n(sCe,"STRONG",{});var cGr=s(Boe);rWe=r(cGr,"reformer"),cGr.forEach(t),tWe=r(sCe," \u2014 "),jk=n(sCe,"A",{href:!0});var fGr=s(jk);aWe=r(fGr,"ReformerConfig"),fGr.forEach(t),nWe=r(sCe," (Reformer model)"),sCe.forEach(t),sWe=i(y),Rm=n(y,"LI",{});var lCe=s(Rm);Poe=n(lCe,"STRONG",{});var mGr=s(Poe);lWe=r(mGr,"regnet"),mGr.forEach(t),iWe=r(lCe," \u2014 "),Dk=n(lCe,"A",{href:!0});var gGr=s(Dk);dWe=r(gGr,"RegNetConfig"),gGr.forEach(t),cWe=r(lCe," (RegNet model)"),lCe.forEach(t),fWe=i(y),Bm=n(y,"LI",{});var iCe=s(Bm);Ioe=n(iCe,"STRONG",{});var hGr=s(Ioe);mWe=r(hGr,"rembert"),hGr.forEach(t),gWe=r(iCe," \u2014 "),Gk=n(iCe,"A",{href:!0});var pGr=s(Gk);hWe=r(pGr,"RemBertConfig"),pGr.forEach(t),pWe=r(iCe," (RemBERT model)"),iCe.forEach(t),uWe=i(y),Pm=n(y,"LI",{});var dCe=s(Pm);qoe=n(dCe,"STRONG",{});var uGr=s(qoe);_We=r(uGr,"resnet"),uGr.forEach(t),bWe=r(dCe," \u2014 "),Ok=n(dCe,"A",{href:!0});var _Gr=s(Ok);vWe=r(_Gr,"ResNetConfig"),_Gr.forEach(t),FWe=r(dCe," (ResNet model)"),dCe.forEach(t),TWe=i(y),Im=n(y,"LI",{});var cCe=s(Im);Noe=n(cCe,"STRONG",{});var bGr=s(Noe);MWe=r(bGr,"retribert"),bGr.forEach(t),EWe=r(cCe," \u2014 "),Vk=n(cCe,"A",{href:!0});var vGr=s(Vk);CWe=r(vGr,"RetriBertConfig"),vGr.forEach(t),wWe=r(cCe," (RetriBERT model)"),cCe.forEach(t),AWe=i(y),qm=n(y,"LI",{});var fCe=s(qm);joe=n(fCe,"STRONG",{});var FGr=s(joe);yWe=r(FGr,"roberta"),FGr.forEach(t),LWe=r(fCe," \u2014 "),Xk=n(fCe,"A",{href:!0});var TGr=s(Xk);xWe=r(TGr,"RobertaConfig"),TGr.forEach(t),$We=r(fCe," (RoBERTa model)"),fCe.forEach(t),kWe=i(y),Nm=n(y,"LI",{});var mCe=s(Nm);Doe=n(mCe,"STRONG",{});var MGr=s(Doe);SWe=r(MGr,"roformer"),MGr.forEach(t),RWe=r(mCe," \u2014 "),zk=n(mCe,"A",{href:!0});var EGr=s(zk);BWe=r(EGr,"RoFormerConfig"),EGr.forEach(t),PWe=r(mCe," (RoFormer model)"),mCe.forEach(t),IWe=i(y),jm=n(y,"LI",{});var gCe=s(jm);Goe=n(gCe,"STRONG",{});var CGr=s(Goe);qWe=r(CGr,"segformer"),CGr.forEach(t),NWe=r(gCe," \u2014 "),Qk=n(gCe,"A",{href:!0});var wGr=s(Qk);jWe=r(wGr,"SegformerConfig"),wGr.forEach(t),DWe=r(gCe," (SegFormer model)"),gCe.forEach(t),GWe=i(y),Dm=n(y,"LI",{});var hCe=s(Dm);Ooe=n(hCe,"STRONG",{});var AGr=s(Ooe);OWe=r(AGr,"sew"),AGr.forEach(t),VWe=r(hCe," \u2014 "),Wk=n(hCe,"A",{href:!0});var yGr=s(Wk);XWe=r(yGr,"SEWConfig"),yGr.forEach(t),zWe=r(hCe," (SEW model)"),hCe.forEach(t),QWe=i(y),Gm=n(y,"LI",{});var pCe=s(Gm);Voe=n(pCe,"STRONG",{});var LGr=s(Voe);WWe=r(LGr,"sew-d"),LGr.forEach(t),HWe=r(pCe," \u2014 "),Hk=n(pCe,"A",{href:!0});var xGr=s(Hk);UWe=r(xGr,"SEWDConfig"),xGr.forEach(t),JWe=r(pCe," (SEW-D model)"),pCe.forEach(t),YWe=i(y),Om=n(y,"LI",{});var uCe=s(Om);Xoe=n(uCe,"STRONG",{});var $Gr=s(Xoe);KWe=r($Gr,"speech-encoder-decoder"),$Gr.forEach(t),ZWe=r(uCe," \u2014 "),Uk=n(uCe,"A",{href:!0});var kGr=s(Uk);eHe=r(kGr,"SpeechEncoderDecoderConfig"),kGr.forEach(t),oHe=r(uCe," (Speech Encoder decoder model)"),uCe.forEach(t),rHe=i(y),Vm=n(y,"LI",{});var _Ce=s(Vm);zoe=n(_Ce,"STRONG",{});var SGr=s(zoe);tHe=r(SGr,"speech_to_text"),SGr.forEach(t),aHe=r(_Ce," \u2014 "),Jk=n(_Ce,"A",{href:!0});var RGr=s(Jk);nHe=r(RGr,"Speech2TextConfig"),RGr.forEach(t),sHe=r(_Ce," (Speech2Text model)"),_Ce.forEach(t),lHe=i(y),Xm=n(y,"LI",{});var bCe=s(Xm);Qoe=n(bCe,"STRONG",{});var BGr=s(Qoe);iHe=r(BGr,"speech_to_text_2"),BGr.forEach(t),dHe=r(bCe," \u2014 "),Yk=n(bCe,"A",{href:!0});var PGr=s(Yk);cHe=r(PGr,"Speech2Text2Config"),PGr.forEach(t),fHe=r(bCe," (Speech2Text2 model)"),bCe.forEach(t),mHe=i(y),zm=n(y,"LI",{});var vCe=s(zm);Woe=n(vCe,"STRONG",{});var IGr=s(Woe);gHe=r(IGr,"splinter"),IGr.forEach(t),hHe=r(vCe," \u2014 "),Kk=n(vCe,"A",{href:!0});var qGr=s(Kk);pHe=r(qGr,"SplinterConfig"),qGr.forEach(t),uHe=r(vCe," (Splinter model)"),vCe.forEach(t),_He=i(y),Qm=n(y,"LI",{});var FCe=s(Qm);Hoe=n(FCe,"STRONG",{});var NGr=s(Hoe);bHe=r(NGr,"squeezebert"),NGr.forEach(t),vHe=r(FCe," \u2014 "),Zk=n(FCe,"A",{href:!0});var jGr=s(Zk);FHe=r(jGr,"SqueezeBertConfig"),jGr.forEach(t),THe=r(FCe," (SqueezeBERT model)"),FCe.forEach(t),MHe=i(y),Wm=n(y,"LI",{});var TCe=s(Wm);Uoe=n(TCe,"STRONG",{});var DGr=s(Uoe);EHe=r(DGr,"swin"),DGr.forEach(t),CHe=r(TCe," \u2014 "),eS=n(TCe,"A",{href:!0});var GGr=s(eS);wHe=r(GGr,"SwinConfig"),GGr.forEach(t),AHe=r(TCe," (Swin model)"),TCe.forEach(t),yHe=i(y),Hm=n(y,"LI",{});var MCe=s(Hm);Joe=n(MCe,"STRONG",{});var OGr=s(Joe);LHe=r(OGr,"t5"),OGr.forEach(t),xHe=r(MCe," \u2014 "),oS=n(MCe,"A",{href:!0});var VGr=s(oS);$He=r(VGr,"T5Config"),VGr.forEach(t),kHe=r(MCe," (T5 model)"),MCe.forEach(t),SHe=i(y),Um=n(y,"LI",{});var ECe=s(Um);Yoe=n(ECe,"STRONG",{});var XGr=s(Yoe);RHe=r(XGr,"tapas"),XGr.forEach(t),BHe=r(ECe," \u2014 "),rS=n(ECe,"A",{href:!0});var zGr=s(rS);PHe=r(zGr,"TapasConfig"),zGr.forEach(t),IHe=r(ECe," (TAPAS model)"),ECe.forEach(t),qHe=i(y),Jm=n(y,"LI",{});var CCe=s(Jm);Koe=n(CCe,"STRONG",{});var QGr=s(Koe);NHe=r(QGr,"tapex"),QGr.forEach(t),jHe=r(CCe," \u2014 "),tS=n(CCe,"A",{href:!0});var WGr=s(tS);DHe=r(WGr,"BartConfig"),WGr.forEach(t),GHe=r(CCe," (TAPEX model)"),CCe.forEach(t),OHe=i(y),Ym=n(y,"LI",{});var wCe=s(Ym);Zoe=n(wCe,"STRONG",{});var HGr=s(Zoe);VHe=r(HGr,"transfo-xl"),HGr.forEach(t),XHe=r(wCe," \u2014 "),aS=n(wCe,"A",{href:!0});var UGr=s(aS);zHe=r(UGr,"TransfoXLConfig"),UGr.forEach(t),QHe=r(wCe," (Transformer-XL model)"),wCe.forEach(t),WHe=i(y),Km=n(y,"LI",{});var ACe=s(Km);ere=n(ACe,"STRONG",{});var JGr=s(ere);HHe=r(JGr,"trocr"),JGr.forEach(t),UHe=r(ACe," \u2014 "),nS=n(ACe,"A",{href:!0});var YGr=s(nS);JHe=r(YGr,"TrOCRConfig"),YGr.forEach(t),YHe=r(ACe," (TrOCR model)"),ACe.forEach(t),KHe=i(y),Zm=n(y,"LI",{});var yCe=s(Zm);ore=n(yCe,"STRONG",{});var KGr=s(ore);ZHe=r(KGr,"unispeech"),KGr.forEach(t),eUe=r(yCe," \u2014 "),sS=n(yCe,"A",{href:!0});var ZGr=s(sS);oUe=r(ZGr,"UniSpeechConfig"),ZGr.forEach(t),rUe=r(yCe," (UniSpeech model)"),yCe.forEach(t),tUe=i(y),eg=n(y,"LI",{});var LCe=s(eg);rre=n(LCe,"STRONG",{});var eOr=s(rre);aUe=r(eOr,"unispeech-sat"),eOr.forEach(t),nUe=r(LCe," \u2014 "),lS=n(LCe,"A",{href:!0});var oOr=s(lS);sUe=r(oOr,"UniSpeechSatConfig"),oOr.forEach(t),lUe=r(LCe," (UniSpeechSat model)"),LCe.forEach(t),iUe=i(y),og=n(y,"LI",{});var xCe=s(og);tre=n(xCe,"STRONG",{});var rOr=s(tre);dUe=r(rOr,"van"),rOr.forEach(t),cUe=r(xCe," \u2014 "),iS=n(xCe,"A",{href:!0});var tOr=s(iS);fUe=r(tOr,"VanConfig"),tOr.forEach(t),mUe=r(xCe," (VAN model)"),xCe.forEach(t),gUe=i(y),rg=n(y,"LI",{});var $Ce=s(rg);are=n($Ce,"STRONG",{});var aOr=s(are);hUe=r(aOr,"vilt"),aOr.forEach(t),pUe=r($Ce," \u2014 "),dS=n($Ce,"A",{href:!0});var nOr=s(dS);uUe=r(nOr,"ViltConfig"),nOr.forEach(t),_Ue=r($Ce," (ViLT model)"),$Ce.forEach(t),bUe=i(y),tg=n(y,"LI",{});var kCe=s(tg);nre=n(kCe,"STRONG",{});var sOr=s(nre);vUe=r(sOr,"vision-encoder-decoder"),sOr.forEach(t),FUe=r(kCe," \u2014 "),cS=n(kCe,"A",{href:!0});var lOr=s(cS);TUe=r(lOr,"VisionEncoderDecoderConfig"),lOr.forEach(t),MUe=r(kCe," (Vision Encoder decoder model)"),kCe.forEach(t),EUe=i(y),ag=n(y,"LI",{});var SCe=s(ag);sre=n(SCe,"STRONG",{});var iOr=s(sre);CUe=r(iOr,"vision-text-dual-encoder"),iOr.forEach(t),wUe=r(SCe," \u2014 "),fS=n(SCe,"A",{href:!0});var dOr=s(fS);AUe=r(dOr,"VisionTextDualEncoderConfig"),dOr.forEach(t),yUe=r(SCe," (VisionTextDualEncoder model)"),SCe.forEach(t),LUe=i(y),ng=n(y,"LI",{});var RCe=s(ng);lre=n(RCe,"STRONG",{});var cOr=s(lre);xUe=r(cOr,"visual_bert"),cOr.forEach(t),$Ue=r(RCe," \u2014 "),mS=n(RCe,"A",{href:!0});var fOr=s(mS);kUe=r(fOr,"VisualBertConfig"),fOr.forEach(t),SUe=r(RCe," (VisualBert model)"),RCe.forEach(t),RUe=i(y),sg=n(y,"LI",{});var BCe=s(sg);ire=n(BCe,"STRONG",{});var mOr=s(ire);BUe=r(mOr,"vit"),mOr.forEach(t),PUe=r(BCe," \u2014 "),gS=n(BCe,"A",{href:!0});var gOr=s(gS);IUe=r(gOr,"ViTConfig"),gOr.forEach(t),qUe=r(BCe," (ViT model)"),BCe.forEach(t),NUe=i(y),lg=n(y,"LI",{});var PCe=s(lg);dre=n(PCe,"STRONG",{});var hOr=s(dre);jUe=r(hOr,"vit_mae"),hOr.forEach(t),DUe=r(PCe," \u2014 "),hS=n(PCe,"A",{href:!0});var pOr=s(hS);GUe=r(pOr,"ViTMAEConfig"),pOr.forEach(t),OUe=r(PCe," (ViTMAE model)"),PCe.forEach(t),VUe=i(y),ig=n(y,"LI",{});var ICe=s(ig);cre=n(ICe,"STRONG",{});var uOr=s(cre);XUe=r(uOr,"wav2vec2"),uOr.forEach(t),zUe=r(ICe," \u2014 "),pS=n(ICe,"A",{href:!0});var _Or=s(pS);QUe=r(_Or,"Wav2Vec2Config"),_Or.forEach(t),WUe=r(ICe," (Wav2Vec2 model)"),ICe.forEach(t),HUe=i(y),dg=n(y,"LI",{});var qCe=s(dg);fre=n(qCe,"STRONG",{});var bOr=s(fre);UUe=r(bOr,"wavlm"),bOr.forEach(t),JUe=r(qCe," \u2014 "),uS=n(qCe,"A",{href:!0});var vOr=s(uS);YUe=r(vOr,"WavLMConfig"),vOr.forEach(t),KUe=r(qCe," (WavLM model)"),qCe.forEach(t),ZUe=i(y),cg=n(y,"LI",{});var NCe=s(cg);mre=n(NCe,"STRONG",{});var FOr=s(mre);eJe=r(FOr,"xglm"),FOr.forEach(t),oJe=r(NCe," \u2014 "),_S=n(NCe,"A",{href:!0});var TOr=s(_S);rJe=r(TOr,"XGLMConfig"),TOr.forEach(t),tJe=r(NCe," (XGLM model)"),NCe.forEach(t),aJe=i(y),fg=n(y,"LI",{});var jCe=s(fg);gre=n(jCe,"STRONG",{});var MOr=s(gre);nJe=r(MOr,"xlm"),MOr.forEach(t),sJe=r(jCe," \u2014 "),bS=n(jCe,"A",{href:!0});var EOr=s(bS);lJe=r(EOr,"XLMConfig"),EOr.forEach(t),iJe=r(jCe," (XLM model)"),jCe.forEach(t),dJe=i(y),mg=n(y,"LI",{});var DCe=s(mg);hre=n(DCe,"STRONG",{});var COr=s(hre);cJe=r(COr,"xlm-prophetnet"),COr.forEach(t),fJe=r(DCe," \u2014 "),vS=n(DCe,"A",{href:!0});var wOr=s(vS);mJe=r(wOr,"XLMProphetNetConfig"),wOr.forEach(t),gJe=r(DCe," (XLMProphetNet model)"),DCe.forEach(t),hJe=i(y),gg=n(y,"LI",{});var GCe=s(gg);pre=n(GCe,"STRONG",{});var AOr=s(pre);pJe=r(AOr,"xlm-roberta"),AOr.forEach(t),uJe=r(GCe," \u2014 "),FS=n(GCe,"A",{href:!0});var yOr=s(FS);_Je=r(yOr,"XLMRobertaConfig"),yOr.forEach(t),bJe=r(GCe," (XLM-RoBERTa model)"),GCe.forEach(t),vJe=i(y),hg=n(y,"LI",{});var OCe=s(hg);ure=n(OCe,"STRONG",{});var LOr=s(ure);FJe=r(LOr,"xlm-roberta-xl"),LOr.forEach(t),TJe=r(OCe," \u2014 "),TS=n(OCe,"A",{href:!0});var xOr=s(TS);MJe=r(xOr,"XLMRobertaXLConfig"),xOr.forEach(t),EJe=r(OCe," (XLM-RoBERTa-XL model)"),OCe.forEach(t),CJe=i(y),pg=n(y,"LI",{});var VCe=s(pg);_re=n(VCe,"STRONG",{});var $Or=s(_re);wJe=r($Or,"xlnet"),$Or.forEach(t),AJe=r(VCe," \u2014 "),MS=n(VCe,"A",{href:!0});var kOr=s(MS);yJe=r(kOr,"XLNetConfig"),kOr.forEach(t),LJe=r(VCe," (XLNet model)"),VCe.forEach(t),xJe=i(y),ug=n(y,"LI",{});var XCe=s(ug);bre=n(XCe,"STRONG",{});var SOr=s(bre);$Je=r(SOr,"yolos"),SOr.forEach(t),kJe=r(XCe," \u2014 "),ES=n(XCe,"A",{href:!0});var ROr=s(ES);SJe=r(ROr,"YolosConfig"),ROr.forEach(t),RJe=r(XCe," (YOLOS model)"),XCe.forEach(t),BJe=i(y),_g=n(y,"LI",{});var zCe=s(_g);vre=n(zCe,"STRONG",{});var BOr=s(vre);PJe=r(BOr,"yoso"),BOr.forEach(t),IJe=r(zCe," \u2014 "),CS=n(zCe,"A",{href:!0});var POr=s(CS);qJe=r(POr,"YosoConfig"),POr.forEach(t),NJe=r(zCe," (YOSO model)"),zCe.forEach(t),y.forEach(t),jJe=i(Zr),T(bg.$$.fragment,Zr),Zr.forEach(t),DJe=i(Kr),vg=n(Kr,"DIV",{class:!0});var hNe=s(vg);T(dA.$$.fragment,hNe),GJe=i(hNe),Fre=n(hNe,"P",{});var IOr=s(Fre);OJe=r(IOr,"Register a new configuration for this class."),IOr.forEach(t),hNe.forEach(t),Kr.forEach(t),_Ie=i(f),bi=n(f,"H2",{class:!0});var pNe=s(bi);Fg=n(pNe,"A",{id:!0,class:!0,href:!0});var qOr=s(Fg);Tre=n(qOr,"SPAN",{});var NOr=s(Tre);T(cA.$$.fragment,NOr),NOr.forEach(t),qOr.forEach(t),VJe=i(pNe),Mre=n(pNe,"SPAN",{});var jOr=s(Mre);XJe=r(jOr,"AutoTokenizer"),jOr.forEach(t),pNe.forEach(t),bIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(fA.$$.fragment,Is),zJe=i(Is),mA=n(Is,"P",{});var uNe=s(mA);QJe=r(uNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wS=n(uNe,"A",{href:!0});var DOr=s(wS);WJe=r(DOr,"AutoTokenizer.from_pretrained()"),DOr.forEach(t),HJe=r(uNe," class method."),uNe.forEach(t),UJe=i(Is),gA=n(Is,"P",{});var _Ne=s(gA);JJe=r(_Ne,"This class cannot be instantiated directly using "),Ere=n(_Ne,"CODE",{});var GOr=s(Ere);YJe=r(GOr,"__init__()"),GOr.forEach(t),KJe=r(_Ne," (throws an error)."),_Ne.forEach(t),ZJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(hA.$$.fragment,qs),eYe=i(qs),Cre=n(qs,"P",{});var OOr=s(Cre);oYe=r(OOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),OOr.forEach(t),rYe=i(qs),Ca=n(qs,"P",{});var tw=s(Ca);tYe=r(tw,"The tokenizer class to instantiate is selected based on the "),wre=n(tw,"CODE",{});var VOr=s(wre);aYe=r(VOr,"model_type"),VOr.forEach(t),nYe=r(tw,` property of the config object (either
passed as an argument or loaded from `),Are=n(tw,"CODE",{});var XOr=s(Are);sYe=r(XOr,"pretrained_model_name_or_path"),XOr.forEach(t),lYe=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=n(tw,"CODE",{});var zOr=s(yre);iYe=r(zOr,"pretrained_model_name_or_path"),zOr.forEach(t),dYe=r(tw,":"),tw.forEach(t),cYe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var p9=s(kn);Lre=n(p9,"STRONG",{});var QOr=s(Lre);fYe=r(QOr,"albert"),QOr.forEach(t),mYe=r(p9," \u2014 "),AS=n(p9,"A",{href:!0});var WOr=s(AS);gYe=r(WOr,"AlbertTokenizer"),WOr.forEach(t),hYe=r(p9," or "),yS=n(p9,"A",{href:!0});var HOr=s(yS);pYe=r(HOr,"AlbertTokenizerFast"),HOr.forEach(t),uYe=r(p9," (ALBERT model)"),p9.forEach(t),_Ye=i(S),Sn=n(S,"LI",{});var u9=s(Sn);xre=n(u9,"STRONG",{});var UOr=s(xre);bYe=r(UOr,"bart"),UOr.forEach(t),vYe=r(u9," \u2014 "),LS=n(u9,"A",{href:!0});var JOr=s(LS);FYe=r(JOr,"BartTokenizer"),JOr.forEach(t),TYe=r(u9," or "),xS=n(u9,"A",{href:!0});var YOr=s(xS);MYe=r(YOr,"BartTokenizerFast"),YOr.forEach(t),EYe=r(u9," (BART model)"),u9.forEach(t),CYe=i(S),Rn=n(S,"LI",{});var _9=s(Rn);$re=n(_9,"STRONG",{});var KOr=s($re);wYe=r(KOr,"barthez"),KOr.forEach(t),AYe=r(_9," \u2014 "),$S=n(_9,"A",{href:!0});var ZOr=s($S);yYe=r(ZOr,"BarthezTokenizer"),ZOr.forEach(t),LYe=r(_9," or "),kS=n(_9,"A",{href:!0});var eVr=s(kS);xYe=r(eVr,"BarthezTokenizerFast"),eVr.forEach(t),$Ye=r(_9," (BARThez model)"),_9.forEach(t),kYe=i(S),Tg=n(S,"LI",{});var QCe=s(Tg);kre=n(QCe,"STRONG",{});var oVr=s(kre);SYe=r(oVr,"bartpho"),oVr.forEach(t),RYe=r(QCe," \u2014 "),SS=n(QCe,"A",{href:!0});var rVr=s(SS);BYe=r(rVr,"BartphoTokenizer"),rVr.forEach(t),PYe=r(QCe," (BARTpho model)"),QCe.forEach(t),IYe=i(S),Bn=n(S,"LI",{});var b9=s(Bn);Sre=n(b9,"STRONG",{});var tVr=s(Sre);qYe=r(tVr,"bert"),tVr.forEach(t),NYe=r(b9," \u2014 "),RS=n(b9,"A",{href:!0});var aVr=s(RS);jYe=r(aVr,"BertTokenizer"),aVr.forEach(t),DYe=r(b9," or "),BS=n(b9,"A",{href:!0});var nVr=s(BS);GYe=r(nVr,"BertTokenizerFast"),nVr.forEach(t),OYe=r(b9," (BERT model)"),b9.forEach(t),VYe=i(S),Mg=n(S,"LI",{});var WCe=s(Mg);Rre=n(WCe,"STRONG",{});var sVr=s(Rre);XYe=r(sVr,"bert-generation"),sVr.forEach(t),zYe=r(WCe," \u2014 "),PS=n(WCe,"A",{href:!0});var lVr=s(PS);QYe=r(lVr,"BertGenerationTokenizer"),lVr.forEach(t),WYe=r(WCe," (Bert Generation model)"),WCe.forEach(t),HYe=i(S),Eg=n(S,"LI",{});var HCe=s(Eg);Bre=n(HCe,"STRONG",{});var iVr=s(Bre);UYe=r(iVr,"bert-japanese"),iVr.forEach(t),JYe=r(HCe," \u2014 "),IS=n(HCe,"A",{href:!0});var dVr=s(IS);YYe=r(dVr,"BertJapaneseTokenizer"),dVr.forEach(t),KYe=r(HCe," (BertJapanese model)"),HCe.forEach(t),ZYe=i(S),Cg=n(S,"LI",{});var UCe=s(Cg);Pre=n(UCe,"STRONG",{});var cVr=s(Pre);eKe=r(cVr,"bertweet"),cVr.forEach(t),oKe=r(UCe," \u2014 "),qS=n(UCe,"A",{href:!0});var fVr=s(qS);rKe=r(fVr,"BertweetTokenizer"),fVr.forEach(t),tKe=r(UCe," (Bertweet model)"),UCe.forEach(t),aKe=i(S),Pn=n(S,"LI",{});var v9=s(Pn);Ire=n(v9,"STRONG",{});var mVr=s(Ire);nKe=r(mVr,"big_bird"),mVr.forEach(t),sKe=r(v9," \u2014 "),NS=n(v9,"A",{href:!0});var gVr=s(NS);lKe=r(gVr,"BigBirdTokenizer"),gVr.forEach(t),iKe=r(v9," or "),jS=n(v9,"A",{href:!0});var hVr=s(jS);dKe=r(hVr,"BigBirdTokenizerFast"),hVr.forEach(t),cKe=r(v9," (BigBird model)"),v9.forEach(t),fKe=i(S),In=n(S,"LI",{});var F9=s(In);qre=n(F9,"STRONG",{});var pVr=s(qre);mKe=r(pVr,"bigbird_pegasus"),pVr.forEach(t),gKe=r(F9," \u2014 "),DS=n(F9,"A",{href:!0});var uVr=s(DS);hKe=r(uVr,"PegasusTokenizer"),uVr.forEach(t),pKe=r(F9," or "),GS=n(F9,"A",{href:!0});var _Vr=s(GS);uKe=r(_Vr,"PegasusTokenizerFast"),_Vr.forEach(t),_Ke=r(F9," (BigBirdPegasus model)"),F9.forEach(t),bKe=i(S),qn=n(S,"LI",{});var T9=s(qn);Nre=n(T9,"STRONG",{});var bVr=s(Nre);vKe=r(bVr,"bigscience176b"),bVr.forEach(t),FKe=r(T9," \u2014 "),OS=n(T9,"A",{href:!0});var vVr=s(OS);TKe=r(vVr,"BigScience176BTokenizer"),vVr.forEach(t),MKe=r(T9," or "),VS=n(T9,"A",{href:!0});var FVr=s(VS);EKe=r(FVr,"BigScience176BTokenizerFast"),FVr.forEach(t),CKe=r(T9," (BigScience176B model)"),T9.forEach(t),wKe=i(S),Nn=n(S,"LI",{});var M9=s(Nn);jre=n(M9,"STRONG",{});var TVr=s(jre);AKe=r(TVr,"blenderbot"),TVr.forEach(t),yKe=r(M9," \u2014 "),XS=n(M9,"A",{href:!0});var MVr=s(XS);LKe=r(MVr,"BlenderbotTokenizer"),MVr.forEach(t),xKe=r(M9," or "),zS=n(M9,"A",{href:!0});var EVr=s(zS);$Ke=r(EVr,"BlenderbotTokenizerFast"),EVr.forEach(t),kKe=r(M9," (Blenderbot model)"),M9.forEach(t),SKe=i(S),wg=n(S,"LI",{});var JCe=s(wg);Dre=n(JCe,"STRONG",{});var CVr=s(Dre);RKe=r(CVr,"blenderbot-small"),CVr.forEach(t),BKe=r(JCe," \u2014 "),QS=n(JCe,"A",{href:!0});var wVr=s(QS);PKe=r(wVr,"BlenderbotSmallTokenizer"),wVr.forEach(t),IKe=r(JCe," (BlenderbotSmall model)"),JCe.forEach(t),qKe=i(S),Ag=n(S,"LI",{});var YCe=s(Ag);Gre=n(YCe,"STRONG",{});var AVr=s(Gre);NKe=r(AVr,"byt5"),AVr.forEach(t),jKe=r(YCe," \u2014 "),WS=n(YCe,"A",{href:!0});var yVr=s(WS);DKe=r(yVr,"ByT5Tokenizer"),yVr.forEach(t),GKe=r(YCe," (ByT5 model)"),YCe.forEach(t),OKe=i(S),jn=n(S,"LI",{});var E9=s(jn);Ore=n(E9,"STRONG",{});var LVr=s(Ore);VKe=r(LVr,"camembert"),LVr.forEach(t),XKe=r(E9," \u2014 "),HS=n(E9,"A",{href:!0});var xVr=s(HS);zKe=r(xVr,"CamembertTokenizer"),xVr.forEach(t),QKe=r(E9," or "),US=n(E9,"A",{href:!0});var $Vr=s(US);WKe=r($Vr,"CamembertTokenizerFast"),$Vr.forEach(t),HKe=r(E9," (CamemBERT model)"),E9.forEach(t),UKe=i(S),yg=n(S,"LI",{});var KCe=s(yg);Vre=n(KCe,"STRONG",{});var kVr=s(Vre);JKe=r(kVr,"canine"),kVr.forEach(t),YKe=r(KCe," \u2014 "),JS=n(KCe,"A",{href:!0});var SVr=s(JS);KKe=r(SVr,"CanineTokenizer"),SVr.forEach(t),ZKe=r(KCe," (Canine model)"),KCe.forEach(t),eZe=i(S),Dn=n(S,"LI",{});var C9=s(Dn);Xre=n(C9,"STRONG",{});var RVr=s(Xre);oZe=r(RVr,"clip"),RVr.forEach(t),rZe=r(C9," \u2014 "),YS=n(C9,"A",{href:!0});var BVr=s(YS);tZe=r(BVr,"CLIPTokenizer"),BVr.forEach(t),aZe=r(C9," or "),KS=n(C9,"A",{href:!0});var PVr=s(KS);nZe=r(PVr,"CLIPTokenizerFast"),PVr.forEach(t),sZe=r(C9," (CLIP model)"),C9.forEach(t),lZe=i(S),Gn=n(S,"LI",{});var w9=s(Gn);zre=n(w9,"STRONG",{});var IVr=s(zre);iZe=r(IVr,"convbert"),IVr.forEach(t),dZe=r(w9," \u2014 "),ZS=n(w9,"A",{href:!0});var qVr=s(ZS);cZe=r(qVr,"ConvBertTokenizer"),qVr.forEach(t),fZe=r(w9," or "),eR=n(w9,"A",{href:!0});var NVr=s(eR);mZe=r(NVr,"ConvBertTokenizerFast"),NVr.forEach(t),gZe=r(w9," (ConvBERT model)"),w9.forEach(t),hZe=i(S),On=n(S,"LI",{});var A9=s(On);Qre=n(A9,"STRONG",{});var jVr=s(Qre);pZe=r(jVr,"cpm"),jVr.forEach(t),uZe=r(A9," \u2014 "),oR=n(A9,"A",{href:!0});var DVr=s(oR);_Ze=r(DVr,"CpmTokenizer"),DVr.forEach(t),bZe=r(A9," or "),rR=n(A9,"A",{href:!0});var GVr=s(rR);vZe=r(GVr,"CpmTokenizerFast"),GVr.forEach(t),FZe=r(A9," (CPM model)"),A9.forEach(t),TZe=i(S),Lg=n(S,"LI",{});var ZCe=s(Lg);Wre=n(ZCe,"STRONG",{});var OVr=s(Wre);MZe=r(OVr,"ctrl"),OVr.forEach(t),EZe=r(ZCe," \u2014 "),tR=n(ZCe,"A",{href:!0});var VVr=s(tR);CZe=r(VVr,"CTRLTokenizer"),VVr.forEach(t),wZe=r(ZCe," (CTRL model)"),ZCe.forEach(t),AZe=i(S),Vn=n(S,"LI",{});var y9=s(Vn);Hre=n(y9,"STRONG",{});var XVr=s(Hre);yZe=r(XVr,"data2vec-text"),XVr.forEach(t),LZe=r(y9," \u2014 "),aR=n(y9,"A",{href:!0});var zVr=s(aR);xZe=r(zVr,"RobertaTokenizer"),zVr.forEach(t),$Ze=r(y9," or "),nR=n(y9,"A",{href:!0});var QVr=s(nR);kZe=r(QVr,"RobertaTokenizerFast"),QVr.forEach(t),SZe=r(y9," (Data2VecText model)"),y9.forEach(t),RZe=i(S),Xn=n(S,"LI",{});var L9=s(Xn);Ure=n(L9,"STRONG",{});var WVr=s(Ure);BZe=r(WVr,"deberta"),WVr.forEach(t),PZe=r(L9," \u2014 "),sR=n(L9,"A",{href:!0});var HVr=s(sR);IZe=r(HVr,"DebertaTokenizer"),HVr.forEach(t),qZe=r(L9," or "),lR=n(L9,"A",{href:!0});var UVr=s(lR);NZe=r(UVr,"DebertaTokenizerFast"),UVr.forEach(t),jZe=r(L9," (DeBERTa model)"),L9.forEach(t),DZe=i(S),zn=n(S,"LI",{});var x9=s(zn);Jre=n(x9,"STRONG",{});var JVr=s(Jre);GZe=r(JVr,"deberta-v2"),JVr.forEach(t),OZe=r(x9," \u2014 "),iR=n(x9,"A",{href:!0});var YVr=s(iR);VZe=r(YVr,"DebertaV2Tokenizer"),YVr.forEach(t),XZe=r(x9," or "),dR=n(x9,"A",{href:!0});var KVr=s(dR);zZe=r(KVr,"DebertaV2TokenizerFast"),KVr.forEach(t),QZe=r(x9," (DeBERTa-v2 model)"),x9.forEach(t),WZe=i(S),Qn=n(S,"LI",{});var $9=s(Qn);Yre=n($9,"STRONG",{});var ZVr=s(Yre);HZe=r(ZVr,"distilbert"),ZVr.forEach(t),UZe=r($9," \u2014 "),cR=n($9,"A",{href:!0});var eXr=s(cR);JZe=r(eXr,"DistilBertTokenizer"),eXr.forEach(t),YZe=r($9," or "),fR=n($9,"A",{href:!0});var oXr=s(fR);KZe=r(oXr,"DistilBertTokenizerFast"),oXr.forEach(t),ZZe=r($9," (DistilBERT model)"),$9.forEach(t),eeo=i(S),Wn=n(S,"LI",{});var k9=s(Wn);Kre=n(k9,"STRONG",{});var rXr=s(Kre);oeo=r(rXr,"dpr"),rXr.forEach(t),reo=r(k9," \u2014 "),mR=n(k9,"A",{href:!0});var tXr=s(mR);teo=r(tXr,"DPRQuestionEncoderTokenizer"),tXr.forEach(t),aeo=r(k9," or "),gR=n(k9,"A",{href:!0});var aXr=s(gR);neo=r(aXr,"DPRQuestionEncoderTokenizerFast"),aXr.forEach(t),seo=r(k9," (DPR model)"),k9.forEach(t),leo=i(S),Hn=n(S,"LI",{});var S9=s(Hn);Zre=n(S9,"STRONG",{});var nXr=s(Zre);ieo=r(nXr,"electra"),nXr.forEach(t),deo=r(S9," \u2014 "),hR=n(S9,"A",{href:!0});var sXr=s(hR);ceo=r(sXr,"ElectraTokenizer"),sXr.forEach(t),feo=r(S9," or "),pR=n(S9,"A",{href:!0});var lXr=s(pR);meo=r(lXr,"ElectraTokenizerFast"),lXr.forEach(t),geo=r(S9," (ELECTRA model)"),S9.forEach(t),heo=i(S),xg=n(S,"LI",{});var e3e=s(xg);ete=n(e3e,"STRONG",{});var iXr=s(ete);peo=r(iXr,"flaubert"),iXr.forEach(t),ueo=r(e3e," \u2014 "),uR=n(e3e,"A",{href:!0});var dXr=s(uR);_eo=r(dXr,"FlaubertTokenizer"),dXr.forEach(t),beo=r(e3e," (FlauBERT model)"),e3e.forEach(t),veo=i(S),Un=n(S,"LI",{});var R9=s(Un);ote=n(R9,"STRONG",{});var cXr=s(ote);Feo=r(cXr,"fnet"),cXr.forEach(t),Teo=r(R9," \u2014 "),_R=n(R9,"A",{href:!0});var fXr=s(_R);Meo=r(fXr,"FNetTokenizer"),fXr.forEach(t),Eeo=r(R9," or "),bR=n(R9,"A",{href:!0});var mXr=s(bR);Ceo=r(mXr,"FNetTokenizerFast"),mXr.forEach(t),weo=r(R9," (FNet model)"),R9.forEach(t),Aeo=i(S),$g=n(S,"LI",{});var o3e=s($g);rte=n(o3e,"STRONG",{});var gXr=s(rte);yeo=r(gXr,"fsmt"),gXr.forEach(t),Leo=r(o3e," \u2014 "),vR=n(o3e,"A",{href:!0});var hXr=s(vR);xeo=r(hXr,"FSMTTokenizer"),hXr.forEach(t),$eo=r(o3e," (FairSeq Machine-Translation model)"),o3e.forEach(t),keo=i(S),Jn=n(S,"LI",{});var B9=s(Jn);tte=n(B9,"STRONG",{});var pXr=s(tte);Seo=r(pXr,"funnel"),pXr.forEach(t),Reo=r(B9," \u2014 "),FR=n(B9,"A",{href:!0});var uXr=s(FR);Beo=r(uXr,"FunnelTokenizer"),uXr.forEach(t),Peo=r(B9," or "),TR=n(B9,"A",{href:!0});var _Xr=s(TR);Ieo=r(_Xr,"FunnelTokenizerFast"),_Xr.forEach(t),qeo=r(B9," (Funnel Transformer model)"),B9.forEach(t),Neo=i(S),Yn=n(S,"LI",{});var P9=s(Yn);ate=n(P9,"STRONG",{});var bXr=s(ate);jeo=r(bXr,"gpt2"),bXr.forEach(t),Deo=r(P9," \u2014 "),MR=n(P9,"A",{href:!0});var vXr=s(MR);Geo=r(vXr,"GPT2Tokenizer"),vXr.forEach(t),Oeo=r(P9," or "),ER=n(P9,"A",{href:!0});var FXr=s(ER);Veo=r(FXr,"GPT2TokenizerFast"),FXr.forEach(t),Xeo=r(P9," (OpenAI GPT-2 model)"),P9.forEach(t),zeo=i(S),Kn=n(S,"LI",{});var I9=s(Kn);nte=n(I9,"STRONG",{});var TXr=s(nte);Qeo=r(TXr,"gpt_neo"),TXr.forEach(t),Weo=r(I9," \u2014 "),CR=n(I9,"A",{href:!0});var MXr=s(CR);Heo=r(MXr,"GPT2Tokenizer"),MXr.forEach(t),Ueo=r(I9," or "),wR=n(I9,"A",{href:!0});var EXr=s(wR);Jeo=r(EXr,"GPT2TokenizerFast"),EXr.forEach(t),Yeo=r(I9," (GPT Neo model)"),I9.forEach(t),Keo=i(S),Zn=n(S,"LI",{});var q9=s(Zn);ste=n(q9,"STRONG",{});var CXr=s(ste);Zeo=r(CXr,"gptj"),CXr.forEach(t),eoo=r(q9," \u2014 "),AR=n(q9,"A",{href:!0});var wXr=s(AR);ooo=r(wXr,"GPT2Tokenizer"),wXr.forEach(t),roo=r(q9," or "),yR=n(q9,"A",{href:!0});var AXr=s(yR);too=r(AXr,"GPT2TokenizerFast"),AXr.forEach(t),aoo=r(q9," (GPT-J model)"),q9.forEach(t),noo=i(S),es=n(S,"LI",{});var N9=s(es);lte=n(N9,"STRONG",{});var yXr=s(lte);soo=r(yXr,"herbert"),yXr.forEach(t),loo=r(N9," \u2014 "),LR=n(N9,"A",{href:!0});var LXr=s(LR);ioo=r(LXr,"HerbertTokenizer"),LXr.forEach(t),doo=r(N9," or "),xR=n(N9,"A",{href:!0});var xXr=s(xR);coo=r(xXr,"HerbertTokenizerFast"),xXr.forEach(t),foo=r(N9," (HerBERT model)"),N9.forEach(t),moo=i(S),kg=n(S,"LI",{});var r3e=s(kg);ite=n(r3e,"STRONG",{});var $Xr=s(ite);goo=r($Xr,"hubert"),$Xr.forEach(t),hoo=r(r3e," \u2014 "),$R=n(r3e,"A",{href:!0});var kXr=s($R);poo=r(kXr,"Wav2Vec2CTCTokenizer"),kXr.forEach(t),uoo=r(r3e," (Hubert model)"),r3e.forEach(t),_oo=i(S),os=n(S,"LI",{});var j9=s(os);dte=n(j9,"STRONG",{});var SXr=s(dte);boo=r(SXr,"ibert"),SXr.forEach(t),voo=r(j9," \u2014 "),kR=n(j9,"A",{href:!0});var RXr=s(kR);Foo=r(RXr,"RobertaTokenizer"),RXr.forEach(t),Too=r(j9," or "),SR=n(j9,"A",{href:!0});var BXr=s(SR);Moo=r(BXr,"RobertaTokenizerFast"),BXr.forEach(t),Eoo=r(j9," (I-BERT model)"),j9.forEach(t),Coo=i(S),rs=n(S,"LI",{});var D9=s(rs);cte=n(D9,"STRONG",{});var PXr=s(cte);woo=r(PXr,"layoutlm"),PXr.forEach(t),Aoo=r(D9," \u2014 "),RR=n(D9,"A",{href:!0});var IXr=s(RR);yoo=r(IXr,"LayoutLMTokenizer"),IXr.forEach(t),Loo=r(D9," or "),BR=n(D9,"A",{href:!0});var qXr=s(BR);xoo=r(qXr,"LayoutLMTokenizerFast"),qXr.forEach(t),$oo=r(D9," (LayoutLM model)"),D9.forEach(t),koo=i(S),ts=n(S,"LI",{});var G9=s(ts);fte=n(G9,"STRONG",{});var NXr=s(fte);Soo=r(NXr,"layoutlmv2"),NXr.forEach(t),Roo=r(G9," \u2014 "),PR=n(G9,"A",{href:!0});var jXr=s(PR);Boo=r(jXr,"LayoutLMv2Tokenizer"),jXr.forEach(t),Poo=r(G9," or "),IR=n(G9,"A",{href:!0});var DXr=s(IR);Ioo=r(DXr,"LayoutLMv2TokenizerFast"),DXr.forEach(t),qoo=r(G9," (LayoutLMv2 model)"),G9.forEach(t),Noo=i(S),as=n(S,"LI",{});var O9=s(as);mte=n(O9,"STRONG",{});var GXr=s(mte);joo=r(GXr,"layoutxlm"),GXr.forEach(t),Doo=r(O9," \u2014 "),qR=n(O9,"A",{href:!0});var OXr=s(qR);Goo=r(OXr,"LayoutXLMTokenizer"),OXr.forEach(t),Ooo=r(O9," or "),NR=n(O9,"A",{href:!0});var VXr=s(NR);Voo=r(VXr,"LayoutXLMTokenizerFast"),VXr.forEach(t),Xoo=r(O9," (LayoutXLM model)"),O9.forEach(t),zoo=i(S),ns=n(S,"LI",{});var V9=s(ns);gte=n(V9,"STRONG",{});var XXr=s(gte);Qoo=r(XXr,"led"),XXr.forEach(t),Woo=r(V9," \u2014 "),jR=n(V9,"A",{href:!0});var zXr=s(jR);Hoo=r(zXr,"LEDTokenizer"),zXr.forEach(t),Uoo=r(V9," or "),DR=n(V9,"A",{href:!0});var QXr=s(DR);Joo=r(QXr,"LEDTokenizerFast"),QXr.forEach(t),Yoo=r(V9," (LED model)"),V9.forEach(t),Koo=i(S),ss=n(S,"LI",{});var X9=s(ss);hte=n(X9,"STRONG",{});var WXr=s(hte);Zoo=r(WXr,"longformer"),WXr.forEach(t),ero=r(X9," \u2014 "),GR=n(X9,"A",{href:!0});var HXr=s(GR);oro=r(HXr,"LongformerTokenizer"),HXr.forEach(t),rro=r(X9," or "),OR=n(X9,"A",{href:!0});var UXr=s(OR);tro=r(UXr,"LongformerTokenizerFast"),UXr.forEach(t),aro=r(X9," (Longformer model)"),X9.forEach(t),nro=i(S),Sg=n(S,"LI",{});var t3e=s(Sg);pte=n(t3e,"STRONG",{});var JXr=s(pte);sro=r(JXr,"luke"),JXr.forEach(t),lro=r(t3e," \u2014 "),VR=n(t3e,"A",{href:!0});var YXr=s(VR);iro=r(YXr,"LukeTokenizer"),YXr.forEach(t),dro=r(t3e," (LUKE model)"),t3e.forEach(t),cro=i(S),ls=n(S,"LI",{});var z9=s(ls);ute=n(z9,"STRONG",{});var KXr=s(ute);fro=r(KXr,"lxmert"),KXr.forEach(t),mro=r(z9," \u2014 "),XR=n(z9,"A",{href:!0});var ZXr=s(XR);gro=r(ZXr,"LxmertTokenizer"),ZXr.forEach(t),hro=r(z9," or "),zR=n(z9,"A",{href:!0});var ezr=s(zR);pro=r(ezr,"LxmertTokenizerFast"),ezr.forEach(t),uro=r(z9," (LXMERT model)"),z9.forEach(t),_ro=i(S),Rg=n(S,"LI",{});var a3e=s(Rg);_te=n(a3e,"STRONG",{});var ozr=s(_te);bro=r(ozr,"m2m_100"),ozr.forEach(t),vro=r(a3e," \u2014 "),QR=n(a3e,"A",{href:!0});var rzr=s(QR);Fro=r(rzr,"M2M100Tokenizer"),rzr.forEach(t),Tro=r(a3e," (M2M100 model)"),a3e.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var n3e=s(Bg);bte=n(n3e,"STRONG",{});var tzr=s(bte);Ero=r(tzr,"marian"),tzr.forEach(t),Cro=r(n3e," \u2014 "),WR=n(n3e,"A",{href:!0});var azr=s(WR);wro=r(azr,"MarianTokenizer"),azr.forEach(t),Aro=r(n3e," (Marian model)"),n3e.forEach(t),yro=i(S),is=n(S,"LI",{});var Q9=s(is);vte=n(Q9,"STRONG",{});var nzr=s(vte);Lro=r(nzr,"mbart"),nzr.forEach(t),xro=r(Q9," \u2014 "),HR=n(Q9,"A",{href:!0});var szr=s(HR);$ro=r(szr,"MBartTokenizer"),szr.forEach(t),kro=r(Q9," or "),UR=n(Q9,"A",{href:!0});var lzr=s(UR);Sro=r(lzr,"MBartTokenizerFast"),lzr.forEach(t),Rro=r(Q9," (mBART model)"),Q9.forEach(t),Bro=i(S),ds=n(S,"LI",{});var W9=s(ds);Fte=n(W9,"STRONG",{});var izr=s(Fte);Pro=r(izr,"mbart50"),izr.forEach(t),Iro=r(W9," \u2014 "),JR=n(W9,"A",{href:!0});var dzr=s(JR);qro=r(dzr,"MBart50Tokenizer"),dzr.forEach(t),Nro=r(W9," or "),YR=n(W9,"A",{href:!0});var czr=s(YR);jro=r(czr,"MBart50TokenizerFast"),czr.forEach(t),Dro=r(W9," (mBART-50 model)"),W9.forEach(t),Gro=i(S),cs=n(S,"LI",{});var H9=s(cs);Tte=n(H9,"STRONG",{});var fzr=s(Tte);Oro=r(fzr,"megatron-bert"),fzr.forEach(t),Vro=r(H9," \u2014 "),KR=n(H9,"A",{href:!0});var mzr=s(KR);Xro=r(mzr,"BertTokenizer"),mzr.forEach(t),zro=r(H9," or "),ZR=n(H9,"A",{href:!0});var gzr=s(ZR);Qro=r(gzr,"BertTokenizerFast"),gzr.forEach(t),Wro=r(H9," (MegatronBert model)"),H9.forEach(t),Hro=i(S),Pg=n(S,"LI",{});var s3e=s(Pg);Mte=n(s3e,"STRONG",{});var hzr=s(Mte);Uro=r(hzr,"mluke"),hzr.forEach(t),Jro=r(s3e," \u2014 "),eB=n(s3e,"A",{href:!0});var pzr=s(eB);Yro=r(pzr,"MLukeTokenizer"),pzr.forEach(t),Kro=r(s3e," (mLUKE model)"),s3e.forEach(t),Zro=i(S),fs=n(S,"LI",{});var U9=s(fs);Ete=n(U9,"STRONG",{});var uzr=s(Ete);eto=r(uzr,"mobilebert"),uzr.forEach(t),oto=r(U9," \u2014 "),oB=n(U9,"A",{href:!0});var _zr=s(oB);rto=r(_zr,"MobileBertTokenizer"),_zr.forEach(t),tto=r(U9," or "),rB=n(U9,"A",{href:!0});var bzr=s(rB);ato=r(bzr,"MobileBertTokenizerFast"),bzr.forEach(t),nto=r(U9," (MobileBERT model)"),U9.forEach(t),sto=i(S),ms=n(S,"LI",{});var J9=s(ms);Cte=n(J9,"STRONG",{});var vzr=s(Cte);lto=r(vzr,"mpnet"),vzr.forEach(t),ito=r(J9," \u2014 "),tB=n(J9,"A",{href:!0});var Fzr=s(tB);dto=r(Fzr,"MPNetTokenizer"),Fzr.forEach(t),cto=r(J9," or "),aB=n(J9,"A",{href:!0});var Tzr=s(aB);fto=r(Tzr,"MPNetTokenizerFast"),Tzr.forEach(t),mto=r(J9," (MPNet model)"),J9.forEach(t),gto=i(S),gs=n(S,"LI",{});var Y9=s(gs);wte=n(Y9,"STRONG",{});var Mzr=s(wte);hto=r(Mzr,"mt5"),Mzr.forEach(t),pto=r(Y9," \u2014 "),nB=n(Y9,"A",{href:!0});var Ezr=s(nB);uto=r(Ezr,"MT5Tokenizer"),Ezr.forEach(t),_to=r(Y9," or "),sB=n(Y9,"A",{href:!0});var Czr=s(sB);bto=r(Czr,"MT5TokenizerFast"),Czr.forEach(t),vto=r(Y9," (mT5 model)"),Y9.forEach(t),Fto=i(S),hs=n(S,"LI",{});var K9=s(hs);Ate=n(K9,"STRONG",{});var wzr=s(Ate);Tto=r(wzr,"nystromformer"),wzr.forEach(t),Mto=r(K9," \u2014 "),lB=n(K9,"A",{href:!0});var Azr=s(lB);Eto=r(Azr,"AlbertTokenizer"),Azr.forEach(t),Cto=r(K9," or "),iB=n(K9,"A",{href:!0});var yzr=s(iB);wto=r(yzr,"AlbertTokenizerFast"),yzr.forEach(t),Ato=r(K9," (Nystromformer model)"),K9.forEach(t),yto=i(S),ps=n(S,"LI",{});var Z9=s(ps);yte=n(Z9,"STRONG",{});var Lzr=s(yte);Lto=r(Lzr,"openai-gpt"),Lzr.forEach(t),xto=r(Z9," \u2014 "),dB=n(Z9,"A",{href:!0});var xzr=s(dB);$to=r(xzr,"OpenAIGPTTokenizer"),xzr.forEach(t),kto=r(Z9," or "),cB=n(Z9,"A",{href:!0});var $zr=s(cB);Sto=r($zr,"OpenAIGPTTokenizerFast"),$zr.forEach(t),Rto=r(Z9," (OpenAI GPT model)"),Z9.forEach(t),Bto=i(S),Ig=n(S,"LI",{});var l3e=s(Ig);Lte=n(l3e,"STRONG",{});var kzr=s(Lte);Pto=r(kzr,"opt"),kzr.forEach(t),Ito=r(l3e," \u2014 "),fB=n(l3e,"A",{href:!0});var Szr=s(fB);qto=r(Szr,"GPT2Tokenizer"),Szr.forEach(t),Nto=r(l3e," (OPT model)"),l3e.forEach(t),jto=i(S),us=n(S,"LI",{});var e$=s(us);xte=n(e$,"STRONG",{});var Rzr=s(xte);Dto=r(Rzr,"pegasus"),Rzr.forEach(t),Gto=r(e$," \u2014 "),mB=n(e$,"A",{href:!0});var Bzr=s(mB);Oto=r(Bzr,"PegasusTokenizer"),Bzr.forEach(t),Vto=r(e$," or "),gB=n(e$,"A",{href:!0});var Pzr=s(gB);Xto=r(Pzr,"PegasusTokenizerFast"),Pzr.forEach(t),zto=r(e$," (Pegasus model)"),e$.forEach(t),Qto=i(S),qg=n(S,"LI",{});var i3e=s(qg);$te=n(i3e,"STRONG",{});var Izr=s($te);Wto=r(Izr,"perceiver"),Izr.forEach(t),Hto=r(i3e," \u2014 "),hB=n(i3e,"A",{href:!0});var qzr=s(hB);Uto=r(qzr,"PerceiverTokenizer"),qzr.forEach(t),Jto=r(i3e," (Perceiver model)"),i3e.forEach(t),Yto=i(S),Ng=n(S,"LI",{});var d3e=s(Ng);kte=n(d3e,"STRONG",{});var Nzr=s(kte);Kto=r(Nzr,"phobert"),Nzr.forEach(t),Zto=r(d3e," \u2014 "),pB=n(d3e,"A",{href:!0});var jzr=s(pB);eao=r(jzr,"PhobertTokenizer"),jzr.forEach(t),oao=r(d3e," (PhoBERT model)"),d3e.forEach(t),rao=i(S),jg=n(S,"LI",{});var c3e=s(jg);Ste=n(c3e,"STRONG",{});var Dzr=s(Ste);tao=r(Dzr,"plbart"),Dzr.forEach(t),aao=r(c3e," \u2014 "),uB=n(c3e,"A",{href:!0});var Gzr=s(uB);nao=r(Gzr,"PLBartTokenizer"),Gzr.forEach(t),sao=r(c3e," (PLBart model)"),c3e.forEach(t),lao=i(S),Dg=n(S,"LI",{});var f3e=s(Dg);Rte=n(f3e,"STRONG",{});var Ozr=s(Rte);iao=r(Ozr,"prophetnet"),Ozr.forEach(t),dao=r(f3e," \u2014 "),_B=n(f3e,"A",{href:!0});var Vzr=s(_B);cao=r(Vzr,"ProphetNetTokenizer"),Vzr.forEach(t),fao=r(f3e," (ProphetNet model)"),f3e.forEach(t),mao=i(S),_s=n(S,"LI",{});var o$=s(_s);Bte=n(o$,"STRONG",{});var Xzr=s(Bte);gao=r(Xzr,"qdqbert"),Xzr.forEach(t),hao=r(o$," \u2014 "),bB=n(o$,"A",{href:!0});var zzr=s(bB);pao=r(zzr,"BertTokenizer"),zzr.forEach(t),uao=r(o$," or "),vB=n(o$,"A",{href:!0});var Qzr=s(vB);_ao=r(Qzr,"BertTokenizerFast"),Qzr.forEach(t),bao=r(o$," (QDQBert model)"),o$.forEach(t),vao=i(S),Gg=n(S,"LI",{});var m3e=s(Gg);Pte=n(m3e,"STRONG",{});var Wzr=s(Pte);Fao=r(Wzr,"rag"),Wzr.forEach(t),Tao=r(m3e," \u2014 "),FB=n(m3e,"A",{href:!0});var Hzr=s(FB);Mao=r(Hzr,"RagTokenizer"),Hzr.forEach(t),Eao=r(m3e," (RAG model)"),m3e.forEach(t),Cao=i(S),bs=n(S,"LI",{});var r$=s(bs);Ite=n(r$,"STRONG",{});var Uzr=s(Ite);wao=r(Uzr,"realm"),Uzr.forEach(t),Aao=r(r$," \u2014 "),TB=n(r$,"A",{href:!0});var Jzr=s(TB);yao=r(Jzr,"RealmTokenizer"),Jzr.forEach(t),Lao=r(r$," or "),MB=n(r$,"A",{href:!0});var Yzr=s(MB);xao=r(Yzr,"RealmTokenizerFast"),Yzr.forEach(t),$ao=r(r$," (Realm model)"),r$.forEach(t),kao=i(S),vs=n(S,"LI",{});var t$=s(vs);qte=n(t$,"STRONG",{});var Kzr=s(qte);Sao=r(Kzr,"reformer"),Kzr.forEach(t),Rao=r(t$," \u2014 "),EB=n(t$,"A",{href:!0});var Zzr=s(EB);Bao=r(Zzr,"ReformerTokenizer"),Zzr.forEach(t),Pao=r(t$," or "),CB=n(t$,"A",{href:!0});var eQr=s(CB);Iao=r(eQr,"ReformerTokenizerFast"),eQr.forEach(t),qao=r(t$," (Reformer model)"),t$.forEach(t),Nao=i(S),Fs=n(S,"LI",{});var a$=s(Fs);Nte=n(a$,"STRONG",{});var oQr=s(Nte);jao=r(oQr,"rembert"),oQr.forEach(t),Dao=r(a$," \u2014 "),wB=n(a$,"A",{href:!0});var rQr=s(wB);Gao=r(rQr,"RemBertTokenizer"),rQr.forEach(t),Oao=r(a$," or "),AB=n(a$,"A",{href:!0});var tQr=s(AB);Vao=r(tQr,"RemBertTokenizerFast"),tQr.forEach(t),Xao=r(a$," (RemBERT model)"),a$.forEach(t),zao=i(S),Ts=n(S,"LI",{});var n$=s(Ts);jte=n(n$,"STRONG",{});var aQr=s(jte);Qao=r(aQr,"retribert"),aQr.forEach(t),Wao=r(n$," \u2014 "),yB=n(n$,"A",{href:!0});var nQr=s(yB);Hao=r(nQr,"RetriBertTokenizer"),nQr.forEach(t),Uao=r(n$," or "),LB=n(n$,"A",{href:!0});var sQr=s(LB);Jao=r(sQr,"RetriBertTokenizerFast"),sQr.forEach(t),Yao=r(n$," (RetriBERT model)"),n$.forEach(t),Kao=i(S),Ms=n(S,"LI",{});var s$=s(Ms);Dte=n(s$,"STRONG",{});var lQr=s(Dte);Zao=r(lQr,"roberta"),lQr.forEach(t),eno=r(s$," \u2014 "),xB=n(s$,"A",{href:!0});var iQr=s(xB);ono=r(iQr,"RobertaTokenizer"),iQr.forEach(t),rno=r(s$," or "),$B=n(s$,"A",{href:!0});var dQr=s($B);tno=r(dQr,"RobertaTokenizerFast"),dQr.forEach(t),ano=r(s$," (RoBERTa model)"),s$.forEach(t),nno=i(S),Es=n(S,"LI",{});var l$=s(Es);Gte=n(l$,"STRONG",{});var cQr=s(Gte);sno=r(cQr,"roformer"),cQr.forEach(t),lno=r(l$," \u2014 "),kB=n(l$,"A",{href:!0});var fQr=s(kB);ino=r(fQr,"RoFormerTokenizer"),fQr.forEach(t),dno=r(l$," or "),SB=n(l$,"A",{href:!0});var mQr=s(SB);cno=r(mQr,"RoFormerTokenizerFast"),mQr.forEach(t),fno=r(l$," (RoFormer model)"),l$.forEach(t),mno=i(S),Og=n(S,"LI",{});var g3e=s(Og);Ote=n(g3e,"STRONG",{});var gQr=s(Ote);gno=r(gQr,"speech_to_text"),gQr.forEach(t),hno=r(g3e," \u2014 "),RB=n(g3e,"A",{href:!0});var hQr=s(RB);pno=r(hQr,"Speech2TextTokenizer"),hQr.forEach(t),uno=r(g3e," (Speech2Text model)"),g3e.forEach(t),_no=i(S),Vg=n(S,"LI",{});var h3e=s(Vg);Vte=n(h3e,"STRONG",{});var pQr=s(Vte);bno=r(pQr,"speech_to_text_2"),pQr.forEach(t),vno=r(h3e," \u2014 "),BB=n(h3e,"A",{href:!0});var uQr=s(BB);Fno=r(uQr,"Speech2Text2Tokenizer"),uQr.forEach(t),Tno=r(h3e," (Speech2Text2 model)"),h3e.forEach(t),Mno=i(S),Cs=n(S,"LI",{});var i$=s(Cs);Xte=n(i$,"STRONG",{});var _Qr=s(Xte);Eno=r(_Qr,"splinter"),_Qr.forEach(t),Cno=r(i$," \u2014 "),PB=n(i$,"A",{href:!0});var bQr=s(PB);wno=r(bQr,"SplinterTokenizer"),bQr.forEach(t),Ano=r(i$," or "),IB=n(i$,"A",{href:!0});var vQr=s(IB);yno=r(vQr,"SplinterTokenizerFast"),vQr.forEach(t),Lno=r(i$," (Splinter model)"),i$.forEach(t),xno=i(S),ws=n(S,"LI",{});var d$=s(ws);zte=n(d$,"STRONG",{});var FQr=s(zte);$no=r(FQr,"squeezebert"),FQr.forEach(t),kno=r(d$," \u2014 "),qB=n(d$,"A",{href:!0});var TQr=s(qB);Sno=r(TQr,"SqueezeBertTokenizer"),TQr.forEach(t),Rno=r(d$," or "),NB=n(d$,"A",{href:!0});var MQr=s(NB);Bno=r(MQr,"SqueezeBertTokenizerFast"),MQr.forEach(t),Pno=r(d$," (SqueezeBERT model)"),d$.forEach(t),Ino=i(S),As=n(S,"LI",{});var c$=s(As);Qte=n(c$,"STRONG",{});var EQr=s(Qte);qno=r(EQr,"t5"),EQr.forEach(t),Nno=r(c$," \u2014 "),jB=n(c$,"A",{href:!0});var CQr=s(jB);jno=r(CQr,"T5Tokenizer"),CQr.forEach(t),Dno=r(c$," or "),DB=n(c$,"A",{href:!0});var wQr=s(DB);Gno=r(wQr,"T5TokenizerFast"),wQr.forEach(t),Ono=r(c$," (T5 model)"),c$.forEach(t),Vno=i(S),Xg=n(S,"LI",{});var p3e=s(Xg);Wte=n(p3e,"STRONG",{});var AQr=s(Wte);Xno=r(AQr,"tapas"),AQr.forEach(t),zno=r(p3e," \u2014 "),GB=n(p3e,"A",{href:!0});var yQr=s(GB);Qno=r(yQr,"TapasTokenizer"),yQr.forEach(t),Wno=r(p3e," (TAPAS model)"),p3e.forEach(t),Hno=i(S),zg=n(S,"LI",{});var u3e=s(zg);Hte=n(u3e,"STRONG",{});var LQr=s(Hte);Uno=r(LQr,"tapex"),LQr.forEach(t),Jno=r(u3e," \u2014 "),OB=n(u3e,"A",{href:!0});var xQr=s(OB);Yno=r(xQr,"TapexTokenizer"),xQr.forEach(t),Kno=r(u3e," (TAPEX model)"),u3e.forEach(t),Zno=i(S),Qg=n(S,"LI",{});var _3e=s(Qg);Ute=n(_3e,"STRONG",{});var $Qr=s(Ute);eso=r($Qr,"transfo-xl"),$Qr.forEach(t),oso=r(_3e," \u2014 "),VB=n(_3e,"A",{href:!0});var kQr=s(VB);rso=r(kQr,"TransfoXLTokenizer"),kQr.forEach(t),tso=r(_3e," (Transformer-XL model)"),_3e.forEach(t),aso=i(S),ys=n(S,"LI",{});var f$=s(ys);Jte=n(f$,"STRONG",{});var SQr=s(Jte);nso=r(SQr,"visual_bert"),SQr.forEach(t),sso=r(f$," \u2014 "),XB=n(f$,"A",{href:!0});var RQr=s(XB);lso=r(RQr,"BertTokenizer"),RQr.forEach(t),iso=r(f$," or "),zB=n(f$,"A",{href:!0});var BQr=s(zB);dso=r(BQr,"BertTokenizerFast"),BQr.forEach(t),cso=r(f$," (VisualBert model)"),f$.forEach(t),fso=i(S),Wg=n(S,"LI",{});var b3e=s(Wg);Yte=n(b3e,"STRONG",{});var PQr=s(Yte);mso=r(PQr,"wav2vec2"),PQr.forEach(t),gso=r(b3e," \u2014 "),QB=n(b3e,"A",{href:!0});var IQr=s(QB);hso=r(IQr,"Wav2Vec2CTCTokenizer"),IQr.forEach(t),pso=r(b3e," (Wav2Vec2 model)"),b3e.forEach(t),uso=i(S),Hg=n(S,"LI",{});var v3e=s(Hg);Kte=n(v3e,"STRONG",{});var qQr=s(Kte);_so=r(qQr,"wav2vec2_phoneme"),qQr.forEach(t),bso=r(v3e," \u2014 "),WB=n(v3e,"A",{href:!0});var NQr=s(WB);vso=r(NQr,"Wav2Vec2PhonemeCTCTokenizer"),NQr.forEach(t),Fso=r(v3e," (Wav2Vec2Phoneme model)"),v3e.forEach(t),Tso=i(S),Ls=n(S,"LI",{});var m$=s(Ls);Zte=n(m$,"STRONG",{});var jQr=s(Zte);Mso=r(jQr,"xglm"),jQr.forEach(t),Eso=r(m$," \u2014 "),HB=n(m$,"A",{href:!0});var DQr=s(HB);Cso=r(DQr,"XGLMTokenizer"),DQr.forEach(t),wso=r(m$," or "),UB=n(m$,"A",{href:!0});var GQr=s(UB);Aso=r(GQr,"XGLMTokenizerFast"),GQr.forEach(t),yso=r(m$," (XGLM model)"),m$.forEach(t),Lso=i(S),Ug=n(S,"LI",{});var F3e=s(Ug);eae=n(F3e,"STRONG",{});var OQr=s(eae);xso=r(OQr,"xlm"),OQr.forEach(t),$so=r(F3e," \u2014 "),JB=n(F3e,"A",{href:!0});var VQr=s(JB);kso=r(VQr,"XLMTokenizer"),VQr.forEach(t),Sso=r(F3e," (XLM model)"),F3e.forEach(t),Rso=i(S),Jg=n(S,"LI",{});var T3e=s(Jg);oae=n(T3e,"STRONG",{});var XQr=s(oae);Bso=r(XQr,"xlm-prophetnet"),XQr.forEach(t),Pso=r(T3e," \u2014 "),YB=n(T3e,"A",{href:!0});var zQr=s(YB);Iso=r(zQr,"XLMProphetNetTokenizer"),zQr.forEach(t),qso=r(T3e," (XLMProphetNet model)"),T3e.forEach(t),Nso=i(S),xs=n(S,"LI",{});var g$=s(xs);rae=n(g$,"STRONG",{});var QQr=s(rae);jso=r(QQr,"xlm-roberta"),QQr.forEach(t),Dso=r(g$," \u2014 "),KB=n(g$,"A",{href:!0});var WQr=s(KB);Gso=r(WQr,"XLMRobertaTokenizer"),WQr.forEach(t),Oso=r(g$," or "),ZB=n(g$,"A",{href:!0});var HQr=s(ZB);Vso=r(HQr,"XLMRobertaTokenizerFast"),HQr.forEach(t),Xso=r(g$," (XLM-RoBERTa model)"),g$.forEach(t),zso=i(S),$s=n(S,"LI",{});var h$=s($s);tae=n(h$,"STRONG",{});var UQr=s(tae);Qso=r(UQr,"xlm-roberta-xl"),UQr.forEach(t),Wso=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var JQr=s(eP);Hso=r(JQr,"RobertaTokenizer"),JQr.forEach(t),Uso=r(h$," or "),oP=n(h$,"A",{href:!0});var YQr=s(oP);Jso=r(YQr,"RobertaTokenizerFast"),YQr.forEach(t),Yso=r(h$," (XLM-RoBERTa-XL model)"),h$.forEach(t),Kso=i(S),ks=n(S,"LI",{});var p$=s(ks);aae=n(p$,"STRONG",{});var KQr=s(aae);Zso=r(KQr,"xlnet"),KQr.forEach(t),elo=r(p$," \u2014 "),rP=n(p$,"A",{href:!0});var ZQr=s(rP);olo=r(ZQr,"XLNetTokenizer"),ZQr.forEach(t),rlo=r(p$," or "),tP=n(p$,"A",{href:!0});var eWr=s(tP);tlo=r(eWr,"XLNetTokenizerFast"),eWr.forEach(t),alo=r(p$," (XLNet model)"),p$.forEach(t),nlo=i(S),Ss=n(S,"LI",{});var u$=s(Ss);nae=n(u$,"STRONG",{});var oWr=s(nae);slo=r(oWr,"yoso"),oWr.forEach(t),llo=r(u$," \u2014 "),aP=n(u$,"A",{href:!0});var rWr=s(aP);ilo=r(rWr,"AlbertTokenizer"),rWr.forEach(t),dlo=r(u$," or "),nP=n(u$,"A",{href:!0});var tWr=s(nP);clo=r(tWr,"AlbertTokenizerFast"),tWr.forEach(t),flo=r(u$," (YOSO model)"),u$.forEach(t),S.forEach(t),mlo=i(qs),T(Yg.$$.fragment,qs),qs.forEach(t),glo=i(Is),Kg=n(Is,"DIV",{class:!0});var bNe=s(Kg);T(pA.$$.fragment,bNe),hlo=i(bNe),sae=n(bNe,"P",{});var aWr=s(sae);plo=r(aWr,"Register a new tokenizer in this mapping."),aWr.forEach(t),bNe.forEach(t),Is.forEach(t),vIe=i(f),vi=n(f,"H2",{class:!0});var vNe=s(vi);Zg=n(vNe,"A",{id:!0,class:!0,href:!0});var nWr=s(Zg);lae=n(nWr,"SPAN",{});var sWr=s(lae);T(uA.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),ulo=i(vNe),iae=n(vNe,"SPAN",{});var lWr=s(iae);_lo=r(lWr,"AutoFeatureExtractor"),lWr.forEach(t),vNe.forEach(t),FIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(_A.$$.fragment,Ns),blo=i(Ns),bA=n(Ns,"P",{});var FNe=s(bA);vlo=r(FNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),sP=n(FNe,"A",{href:!0});var iWr=s(sP);Flo=r(iWr,"AutoFeatureExtractor.from_pretrained()"),iWr.forEach(t),Tlo=r(FNe," class method."),FNe.forEach(t),Mlo=i(Ns),vA=n(Ns,"P",{});var TNe=s(vA);Elo=r(TNe,"This class cannot be instantiated directly using "),dae=n(TNe,"CODE",{});var dWr=s(dae);Clo=r(dWr,"__init__()"),dWr.forEach(t),wlo=r(TNe," (throws an error)."),TNe.forEach(t),Alo=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(FA.$$.fragment,Yt),ylo=i(Yt),cae=n(Yt,"P",{});var cWr=s(cae);Llo=r(cWr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cWr.forEach(t),xlo=i(Yt),wa=n(Yt,"P",{});var aw=s(wa);$lo=r(aw,"The feature extractor class to instantiate is selected based on the "),fae=n(aw,"CODE",{});var fWr=s(fae);klo=r(fWr,"model_type"),fWr.forEach(t),Slo=r(aw,` property of the config object
(either passed as an argument or loaded from `),mae=n(aw,"CODE",{});var mWr=s(mae);Rlo=r(mWr,"pretrained_model_name_or_path"),mWr.forEach(t),Blo=r(aw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),gae=n(aw,"CODE",{});var gWr=s(gae);Plo=r(gWr,"pretrained_model_name_or_path"),gWr.forEach(t),Ilo=r(aw,":"),aw.forEach(t),qlo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);eh=n(ae,"LI",{});var M3e=s(eh);hae=n(M3e,"STRONG",{});var hWr=s(hae);Nlo=r(hWr,"beit"),hWr.forEach(t),jlo=r(M3e," \u2014 "),lP=n(M3e,"A",{href:!0});var pWr=s(lP);Dlo=r(pWr,"BeitFeatureExtractor"),pWr.forEach(t),Glo=r(M3e," (BEiT model)"),M3e.forEach(t),Olo=i(ae),oh=n(ae,"LI",{});var E3e=s(oh);pae=n(E3e,"STRONG",{});var uWr=s(pae);Vlo=r(uWr,"clip"),uWr.forEach(t),Xlo=r(E3e," \u2014 "),iP=n(E3e,"A",{href:!0});var _Wr=s(iP);zlo=r(_Wr,"CLIPFeatureExtractor"),_Wr.forEach(t),Qlo=r(E3e," (CLIP model)"),E3e.forEach(t),Wlo=i(ae),rh=n(ae,"LI",{});var C3e=s(rh);uae=n(C3e,"STRONG",{});var bWr=s(uae);Hlo=r(bWr,"convnext"),bWr.forEach(t),Ulo=r(C3e," \u2014 "),dP=n(C3e,"A",{href:!0});var vWr=s(dP);Jlo=r(vWr,"ConvNextFeatureExtractor"),vWr.forEach(t),Ylo=r(C3e," (ConvNext model)"),C3e.forEach(t),Klo=i(ae),th=n(ae,"LI",{});var w3e=s(th);_ae=n(w3e,"STRONG",{});var FWr=s(_ae);Zlo=r(FWr,"data2vec-audio"),FWr.forEach(t),eio=r(w3e," \u2014 "),cP=n(w3e,"A",{href:!0});var TWr=s(cP);oio=r(TWr,"Wav2Vec2FeatureExtractor"),TWr.forEach(t),rio=r(w3e," (Data2VecAudio model)"),w3e.forEach(t),tio=i(ae),ah=n(ae,"LI",{});var A3e=s(ah);bae=n(A3e,"STRONG",{});var MWr=s(bae);aio=r(MWr,"data2vec-vision"),MWr.forEach(t),nio=r(A3e," \u2014 "),fP=n(A3e,"A",{href:!0});var EWr=s(fP);sio=r(EWr,"BeitFeatureExtractor"),EWr.forEach(t),lio=r(A3e," (Data2VecVision model)"),A3e.forEach(t),iio=i(ae),nh=n(ae,"LI",{});var y3e=s(nh);vae=n(y3e,"STRONG",{});var CWr=s(vae);dio=r(CWr,"deit"),CWr.forEach(t),cio=r(y3e," \u2014 "),mP=n(y3e,"A",{href:!0});var wWr=s(mP);fio=r(wWr,"DeiTFeatureExtractor"),wWr.forEach(t),mio=r(y3e," (DeiT model)"),y3e.forEach(t),gio=i(ae),sh=n(ae,"LI",{});var L3e=s(sh);Fae=n(L3e,"STRONG",{});var AWr=s(Fae);hio=r(AWr,"detr"),AWr.forEach(t),pio=r(L3e," \u2014 "),gP=n(L3e,"A",{href:!0});var yWr=s(gP);uio=r(yWr,"DetrFeatureExtractor"),yWr.forEach(t),_io=r(L3e," (DETR model)"),L3e.forEach(t),bio=i(ae),lh=n(ae,"LI",{});var x3e=s(lh);Tae=n(x3e,"STRONG",{});var LWr=s(Tae);vio=r(LWr,"dpt"),LWr.forEach(t),Fio=r(x3e," \u2014 "),hP=n(x3e,"A",{href:!0});var xWr=s(hP);Tio=r(xWr,"DPTFeatureExtractor"),xWr.forEach(t),Mio=r(x3e," (DPT model)"),x3e.forEach(t),Eio=i(ae),ih=n(ae,"LI",{});var $3e=s(ih);Mae=n($3e,"STRONG",{});var $Wr=s(Mae);Cio=r($Wr,"flava"),$Wr.forEach(t),wio=r($3e," \u2014 "),pP=n($3e,"A",{href:!0});var kWr=s(pP);Aio=r(kWr,"FlavaFeatureExtractor"),kWr.forEach(t),yio=r($3e," (Flava model)"),$3e.forEach(t),Lio=i(ae),dh=n(ae,"LI",{});var k3e=s(dh);Eae=n(k3e,"STRONG",{});var SWr=s(Eae);xio=r(SWr,"glpn"),SWr.forEach(t),$io=r(k3e," \u2014 "),uP=n(k3e,"A",{href:!0});var RWr=s(uP);kio=r(RWr,"GLPNFeatureExtractor"),RWr.forEach(t),Sio=r(k3e," (GLPN model)"),k3e.forEach(t),Rio=i(ae),ch=n(ae,"LI",{});var S3e=s(ch);Cae=n(S3e,"STRONG",{});var BWr=s(Cae);Bio=r(BWr,"hubert"),BWr.forEach(t),Pio=r(S3e," \u2014 "),_P=n(S3e,"A",{href:!0});var PWr=s(_P);Iio=r(PWr,"Wav2Vec2FeatureExtractor"),PWr.forEach(t),qio=r(S3e," (Hubert model)"),S3e.forEach(t),Nio=i(ae),fh=n(ae,"LI",{});var R3e=s(fh);wae=n(R3e,"STRONG",{});var IWr=s(wae);jio=r(IWr,"layoutlmv2"),IWr.forEach(t),Dio=r(R3e," \u2014 "),bP=n(R3e,"A",{href:!0});var qWr=s(bP);Gio=r(qWr,"LayoutLMv2FeatureExtractor"),qWr.forEach(t),Oio=r(R3e," (LayoutLMv2 model)"),R3e.forEach(t),Vio=i(ae),mh=n(ae,"LI",{});var B3e=s(mh);Aae=n(B3e,"STRONG",{});var NWr=s(Aae);Xio=r(NWr,"maskformer"),NWr.forEach(t),zio=r(B3e," \u2014 "),vP=n(B3e,"A",{href:!0});var jWr=s(vP);Qio=r(jWr,"MaskFormerFeatureExtractor"),jWr.forEach(t),Wio=r(B3e," (MaskFormer model)"),B3e.forEach(t),Hio=i(ae),gh=n(ae,"LI",{});var P3e=s(gh);yae=n(P3e,"STRONG",{});var DWr=s(yae);Uio=r(DWr,"perceiver"),DWr.forEach(t),Jio=r(P3e," \u2014 "),FP=n(P3e,"A",{href:!0});var GWr=s(FP);Yio=r(GWr,"PerceiverFeatureExtractor"),GWr.forEach(t),Kio=r(P3e," (Perceiver model)"),P3e.forEach(t),Zio=i(ae),hh=n(ae,"LI",{});var I3e=s(hh);Lae=n(I3e,"STRONG",{});var OWr=s(Lae);edo=r(OWr,"poolformer"),OWr.forEach(t),odo=r(I3e," \u2014 "),TP=n(I3e,"A",{href:!0});var VWr=s(TP);rdo=r(VWr,"PoolFormerFeatureExtractor"),VWr.forEach(t),tdo=r(I3e," (PoolFormer model)"),I3e.forEach(t),ado=i(ae),ph=n(ae,"LI",{});var q3e=s(ph);xae=n(q3e,"STRONG",{});var XWr=s(xae);ndo=r(XWr,"regnet"),XWr.forEach(t),sdo=r(q3e," \u2014 "),MP=n(q3e,"A",{href:!0});var zWr=s(MP);ldo=r(zWr,"ConvNextFeatureExtractor"),zWr.forEach(t),ido=r(q3e," (RegNet model)"),q3e.forEach(t),ddo=i(ae),uh=n(ae,"LI",{});var N3e=s(uh);$ae=n(N3e,"STRONG",{});var QWr=s($ae);cdo=r(QWr,"resnet"),QWr.forEach(t),fdo=r(N3e," \u2014 "),EP=n(N3e,"A",{href:!0});var WWr=s(EP);mdo=r(WWr,"ConvNextFeatureExtractor"),WWr.forEach(t),gdo=r(N3e," (ResNet model)"),N3e.forEach(t),hdo=i(ae),_h=n(ae,"LI",{});var j3e=s(_h);kae=n(j3e,"STRONG",{});var HWr=s(kae);pdo=r(HWr,"segformer"),HWr.forEach(t),udo=r(j3e," \u2014 "),CP=n(j3e,"A",{href:!0});var UWr=s(CP);_do=r(UWr,"SegformerFeatureExtractor"),UWr.forEach(t),bdo=r(j3e," (SegFormer model)"),j3e.forEach(t),vdo=i(ae),bh=n(ae,"LI",{});var D3e=s(bh);Sae=n(D3e,"STRONG",{});var JWr=s(Sae);Fdo=r(JWr,"speech_to_text"),JWr.forEach(t),Tdo=r(D3e," \u2014 "),wP=n(D3e,"A",{href:!0});var YWr=s(wP);Mdo=r(YWr,"Speech2TextFeatureExtractor"),YWr.forEach(t),Edo=r(D3e," (Speech2Text model)"),D3e.forEach(t),Cdo=i(ae),vh=n(ae,"LI",{});var G3e=s(vh);Rae=n(G3e,"STRONG",{});var KWr=s(Rae);wdo=r(KWr,"swin"),KWr.forEach(t),Ado=r(G3e," \u2014 "),AP=n(G3e,"A",{href:!0});var ZWr=s(AP);ydo=r(ZWr,"ViTFeatureExtractor"),ZWr.forEach(t),Ldo=r(G3e," (Swin model)"),G3e.forEach(t),xdo=i(ae),Fh=n(ae,"LI",{});var O3e=s(Fh);Bae=n(O3e,"STRONG",{});var eHr=s(Bae);$do=r(eHr,"van"),eHr.forEach(t),kdo=r(O3e," \u2014 "),yP=n(O3e,"A",{href:!0});var oHr=s(yP);Sdo=r(oHr,"ConvNextFeatureExtractor"),oHr.forEach(t),Rdo=r(O3e," (VAN model)"),O3e.forEach(t),Bdo=i(ae),Th=n(ae,"LI",{});var V3e=s(Th);Pae=n(V3e,"STRONG",{});var rHr=s(Pae);Pdo=r(rHr,"vit"),rHr.forEach(t),Ido=r(V3e," \u2014 "),LP=n(V3e,"A",{href:!0});var tHr=s(LP);qdo=r(tHr,"ViTFeatureExtractor"),tHr.forEach(t),Ndo=r(V3e," (ViT model)"),V3e.forEach(t),jdo=i(ae),Mh=n(ae,"LI",{});var X3e=s(Mh);Iae=n(X3e,"STRONG",{});var aHr=s(Iae);Ddo=r(aHr,"vit_mae"),aHr.forEach(t),Gdo=r(X3e," \u2014 "),xP=n(X3e,"A",{href:!0});var nHr=s(xP);Odo=r(nHr,"ViTFeatureExtractor"),nHr.forEach(t),Vdo=r(X3e," (ViTMAE model)"),X3e.forEach(t),Xdo=i(ae),Eh=n(ae,"LI",{});var z3e=s(Eh);qae=n(z3e,"STRONG",{});var sHr=s(qae);zdo=r(sHr,"wav2vec2"),sHr.forEach(t),Qdo=r(z3e," \u2014 "),$P=n(z3e,"A",{href:!0});var lHr=s($P);Wdo=r(lHr,"Wav2Vec2FeatureExtractor"),lHr.forEach(t),Hdo=r(z3e," (Wav2Vec2 model)"),z3e.forEach(t),Udo=i(ae),Ch=n(ae,"LI",{});var Q3e=s(Ch);Nae=n(Q3e,"STRONG",{});var iHr=s(Nae);Jdo=r(iHr,"yolos"),iHr.forEach(t),Ydo=r(Q3e," \u2014 "),kP=n(Q3e,"A",{href:!0});var dHr=s(kP);Kdo=r(dHr,"YolosFeatureExtractor"),dHr.forEach(t),Zdo=r(Q3e," (YOLOS model)"),Q3e.forEach(t),ae.forEach(t),eco=i(Yt),T(wh.$$.fragment,Yt),oco=i(Yt),T(Ah.$$.fragment,Yt),Yt.forEach(t),rco=i(Ns),yh=n(Ns,"DIV",{class:!0});var MNe=s(yh);T(TA.$$.fragment,MNe),tco=i(MNe),jae=n(MNe,"P",{});var cHr=s(jae);aco=r(cHr,"Register a new feature extractor for this class."),cHr.forEach(t),MNe.forEach(t),Ns.forEach(t),TIe=i(f),Fi=n(f,"H2",{class:!0});var ENe=s(Fi);Lh=n(ENe,"A",{id:!0,class:!0,href:!0});var fHr=s(Lh);Dae=n(fHr,"SPAN",{});var mHr=s(Dae);T(MA.$$.fragment,mHr),mHr.forEach(t),fHr.forEach(t),nco=i(ENe),Gae=n(ENe,"SPAN",{});var gHr=s(Gae);sco=r(gHr,"AutoProcessor"),gHr.forEach(t),ENe.forEach(t),MIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(EA.$$.fragment,js),lco=i(js),CA=n(js,"P",{});var CNe=s(CA);ico=r(CNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SP=n(CNe,"A",{href:!0});var hHr=s(SP);dco=r(hHr,"AutoProcessor.from_pretrained()"),hHr.forEach(t),cco=r(CNe," class method."),CNe.forEach(t),fco=i(js),wA=n(js,"P",{});var wNe=s(wA);mco=r(wNe,"This class cannot be instantiated directly using "),Oae=n(wNe,"CODE",{});var pHr=s(Oae);gco=r(pHr,"__init__()"),pHr.forEach(t),hco=r(wNe," (throws an error)."),wNe.forEach(t),pco=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(AA.$$.fragment,Kt),uco=i(Kt),Vae=n(Kt,"P",{});var uHr=s(Vae);_co=r(uHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uHr.forEach(t),bco=i(Kt),Ti=n(Kt,"P",{});var vK=s(Ti);vco=r(vK,"The processor class to instantiate is selected based on the "),Xae=n(vK,"CODE",{});var _Hr=s(Xae);Fco=r(_Hr,"model_type"),_Hr.forEach(t),Tco=r(vK,` property of the config object (either
passed as an argument or loaded from `),zae=n(vK,"CODE",{});var bHr=s(zae);Mco=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),Eco=r(vK," if possible):"),vK.forEach(t),Cco=i(Kt),be=n(Kt,"UL",{});var ve=s(be);xh=n(ve,"LI",{});var W3e=s(xh);Qae=n(W3e,"STRONG",{});var vHr=s(Qae);wco=r(vHr,"clip"),vHr.forEach(t),Aco=r(W3e," \u2014 "),RP=n(W3e,"A",{href:!0});var FHr=s(RP);yco=r(FHr,"CLIPProcessor"),FHr.forEach(t),Lco=r(W3e," (CLIP model)"),W3e.forEach(t),xco=i(ve),$h=n(ve,"LI",{});var H3e=s($h);Wae=n(H3e,"STRONG",{});var THr=s(Wae);$co=r(THr,"flava"),THr.forEach(t),kco=r(H3e," \u2014 "),Hae=n(H3e,"CODE",{});var MHr=s(Hae);Sco=r(MHr,"FLAVAProcessor"),MHr.forEach(t),Rco=r(H3e," (Flava model)"),H3e.forEach(t),Bco=i(ve),kh=n(ve,"LI",{});var U3e=s(kh);Uae=n(U3e,"STRONG",{});var EHr=s(Uae);Pco=r(EHr,"layoutlmv2"),EHr.forEach(t),Ico=r(U3e," \u2014 "),BP=n(U3e,"A",{href:!0});var CHr=s(BP);qco=r(CHr,"LayoutLMv2Processor"),CHr.forEach(t),Nco=r(U3e," (LayoutLMv2 model)"),U3e.forEach(t),jco=i(ve),Sh=n(ve,"LI",{});var J3e=s(Sh);Jae=n(J3e,"STRONG",{});var wHr=s(Jae);Dco=r(wHr,"layoutxlm"),wHr.forEach(t),Gco=r(J3e," \u2014 "),PP=n(J3e,"A",{href:!0});var AHr=s(PP);Oco=r(AHr,"LayoutXLMProcessor"),AHr.forEach(t),Vco=r(J3e," (LayoutXLM model)"),J3e.forEach(t),Xco=i(ve),Rh=n(ve,"LI",{});var Y3e=s(Rh);Yae=n(Y3e,"STRONG",{});var yHr=s(Yae);zco=r(yHr,"sew"),yHr.forEach(t),Qco=r(Y3e," \u2014 "),IP=n(Y3e,"A",{href:!0});var LHr=s(IP);Wco=r(LHr,"Wav2Vec2Processor"),LHr.forEach(t),Hco=r(Y3e," (SEW model)"),Y3e.forEach(t),Uco=i(ve),Bh=n(ve,"LI",{});var K3e=s(Bh);Kae=n(K3e,"STRONG",{});var xHr=s(Kae);Jco=r(xHr,"sew-d"),xHr.forEach(t),Yco=r(K3e," \u2014 "),qP=n(K3e,"A",{href:!0});var $Hr=s(qP);Kco=r($Hr,"Wav2Vec2Processor"),$Hr.forEach(t),Zco=r(K3e," (SEW-D model)"),K3e.forEach(t),efo=i(ve),Ph=n(ve,"LI",{});var Z3e=s(Ph);Zae=n(Z3e,"STRONG",{});var kHr=s(Zae);ofo=r(kHr,"speech_to_text"),kHr.forEach(t),rfo=r(Z3e," \u2014 "),NP=n(Z3e,"A",{href:!0});var SHr=s(NP);tfo=r(SHr,"Speech2TextProcessor"),SHr.forEach(t),afo=r(Z3e," (Speech2Text model)"),Z3e.forEach(t),nfo=i(ve),Ih=n(ve,"LI",{});var ewe=s(Ih);ene=n(ewe,"STRONG",{});var RHr=s(ene);sfo=r(RHr,"speech_to_text_2"),RHr.forEach(t),lfo=r(ewe," \u2014 "),jP=n(ewe,"A",{href:!0});var BHr=s(jP);ifo=r(BHr,"Speech2Text2Processor"),BHr.forEach(t),dfo=r(ewe," (Speech2Text2 model)"),ewe.forEach(t),cfo=i(ve),qh=n(ve,"LI",{});var owe=s(qh);one=n(owe,"STRONG",{});var PHr=s(one);ffo=r(PHr,"trocr"),PHr.forEach(t),mfo=r(owe," \u2014 "),DP=n(owe,"A",{href:!0});var IHr=s(DP);gfo=r(IHr,"TrOCRProcessor"),IHr.forEach(t),hfo=r(owe," (TrOCR model)"),owe.forEach(t),pfo=i(ve),Nh=n(ve,"LI",{});var rwe=s(Nh);rne=n(rwe,"STRONG",{});var qHr=s(rne);ufo=r(qHr,"unispeech"),qHr.forEach(t),_fo=r(rwe," \u2014 "),GP=n(rwe,"A",{href:!0});var NHr=s(GP);bfo=r(NHr,"Wav2Vec2Processor"),NHr.forEach(t),vfo=r(rwe," (UniSpeech model)"),rwe.forEach(t),Ffo=i(ve),jh=n(ve,"LI",{});var twe=s(jh);tne=n(twe,"STRONG",{});var jHr=s(tne);Tfo=r(jHr,"unispeech-sat"),jHr.forEach(t),Mfo=r(twe," \u2014 "),OP=n(twe,"A",{href:!0});var DHr=s(OP);Efo=r(DHr,"Wav2Vec2Processor"),DHr.forEach(t),Cfo=r(twe," (UniSpeechSat model)"),twe.forEach(t),wfo=i(ve),Dh=n(ve,"LI",{});var awe=s(Dh);ane=n(awe,"STRONG",{});var GHr=s(ane);Afo=r(GHr,"vilt"),GHr.forEach(t),yfo=r(awe," \u2014 "),VP=n(awe,"A",{href:!0});var OHr=s(VP);Lfo=r(OHr,"ViltProcessor"),OHr.forEach(t),xfo=r(awe," (ViLT model)"),awe.forEach(t),$fo=i(ve),Gh=n(ve,"LI",{});var nwe=s(Gh);nne=n(nwe,"STRONG",{});var VHr=s(nne);kfo=r(VHr,"vision-text-dual-encoder"),VHr.forEach(t),Sfo=r(nwe," \u2014 "),XP=n(nwe,"A",{href:!0});var XHr=s(XP);Rfo=r(XHr,"VisionTextDualEncoderProcessor"),XHr.forEach(t),Bfo=r(nwe," (VisionTextDualEncoder model)"),nwe.forEach(t),Pfo=i(ve),Oh=n(ve,"LI",{});var swe=s(Oh);sne=n(swe,"STRONG",{});var zHr=s(sne);Ifo=r(zHr,"wav2vec2"),zHr.forEach(t),qfo=r(swe," \u2014 "),zP=n(swe,"A",{href:!0});var QHr=s(zP);Nfo=r(QHr,"Wav2Vec2Processor"),QHr.forEach(t),jfo=r(swe," (Wav2Vec2 model)"),swe.forEach(t),Dfo=i(ve),Vh=n(ve,"LI",{});var lwe=s(Vh);lne=n(lwe,"STRONG",{});var WHr=s(lne);Gfo=r(WHr,"wavlm"),WHr.forEach(t),Ofo=r(lwe," \u2014 "),QP=n(lwe,"A",{href:!0});var HHr=s(QP);Vfo=r(HHr,"Wav2Vec2Processor"),HHr.forEach(t),Xfo=r(lwe," (WavLM model)"),lwe.forEach(t),ve.forEach(t),zfo=i(Kt),T(Xh.$$.fragment,Kt),Qfo=i(Kt),T(zh.$$.fragment,Kt),Kt.forEach(t),Wfo=i(js),Qh=n(js,"DIV",{class:!0});var ANe=s(Qh);T(yA.$$.fragment,ANe),Hfo=i(ANe),ine=n(ANe,"P",{});var UHr=s(ine);Ufo=r(UHr,"Register a new processor for this class."),UHr.forEach(t),ANe.forEach(t),js.forEach(t),EIe=i(f),Mi=n(f,"H2",{class:!0});var yNe=s(Mi);Wh=n(yNe,"A",{id:!0,class:!0,href:!0});var JHr=s(Wh);dne=n(JHr,"SPAN",{});var YHr=s(dne);T(LA.$$.fragment,YHr),YHr.forEach(t),JHr.forEach(t),Jfo=i(yNe),cne=n(yNe,"SPAN",{});var KHr=s(cne);Yfo=r(KHr,"AutoModel"),KHr.forEach(t),yNe.forEach(t),CIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(xA.$$.fragment,Ds),Kfo=i(Ds),Ei=n(Ds,"P",{});var FK=s(Ei);Zfo=r(FK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WP=n(FK,"A",{href:!0});var ZHr=s(WP);emo=r(ZHr,"from_pretrained()"),ZHr.forEach(t),omo=r(FK," class method or the "),HP=n(FK,"A",{href:!0});var eUr=s(HP);rmo=r(eUr,"from_config()"),eUr.forEach(t),tmo=r(FK,` class
method.`),FK.forEach(t),amo=i(Ds),$A=n(Ds,"P",{});var LNe=s($A);nmo=r(LNe,"This class cannot be instantiated directly using "),fne=n(LNe,"CODE",{});var oUr=s(fne);smo=r(oUr,"__init__()"),oUr.forEach(t),lmo=r(LNe," (throws an error)."),LNe.forEach(t),imo=i(Ds),ot=n(Ds,"DIV",{class:!0});var nw=s(ot);T(kA.$$.fragment,nw),dmo=i(nw),mne=n(nw,"P",{});var rUr=s(mne);cmo=r(rUr,"Instantiates one of the base model classes of the library from a configuration."),rUr.forEach(t),fmo=i(nw),Ci=n(nw,"P",{});var TK=s(Ci);mmo=r(TK,`Note:
Loading a model from its configuration file does `),gne=n(TK,"STRONG",{});var tUr=s(gne);gmo=r(tUr,"not"),tUr.forEach(t),hmo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UP=n(TK,"A",{href:!0});var aUr=s(UP);pmo=r(aUr,"from_pretrained()"),aUr.forEach(t),umo=r(TK," to load the model weights."),TK.forEach(t),_mo=i(nw),T(Hh.$$.fragment,nw),nw.forEach(t),bmo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(SA.$$.fragment,Zt),vmo=i(Zt),hne=n(Zt,"P",{});var nUr=s(hne);Fmo=r(nUr,"Instantiate one of the base model classes of the library from a pretrained model."),nUr.forEach(t),Tmo=i(Zt),Aa=n(Zt,"P",{});var sw=s(Aa);Mmo=r(sw,"The model class to instantiate is selected based on the "),pne=n(sw,"CODE",{});var sUr=s(pne);Emo=r(sUr,"model_type"),sUr.forEach(t),Cmo=r(sw,` property of the config object (either
passed as an argument or loaded from `),une=n(sw,"CODE",{});var lUr=s(une);wmo=r(lUr,"pretrained_model_name_or_path"),lUr.forEach(t),Amo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=n(sw,"CODE",{});var iUr=s(_ne);ymo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),Lmo=r(sw,":"),sw.forEach(t),xmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Uh=n($,"LI",{});var iwe=s(Uh);bne=n(iwe,"STRONG",{});var dUr=s(bne);$mo=r(dUr,"albert"),dUr.forEach(t),kmo=r(iwe," \u2014 "),JP=n(iwe,"A",{href:!0});var cUr=s(JP);Smo=r(cUr,"AlbertModel"),cUr.forEach(t),Rmo=r(iwe," (ALBERT model)"),iwe.forEach(t),Bmo=i($),Jh=n($,"LI",{});var dwe=s(Jh);vne=n(dwe,"STRONG",{});var fUr=s(vne);Pmo=r(fUr,"bart"),fUr.forEach(t),Imo=r(dwe," \u2014 "),YP=n(dwe,"A",{href:!0});var mUr=s(YP);qmo=r(mUr,"BartModel"),mUr.forEach(t),Nmo=r(dwe," (BART model)"),dwe.forEach(t),jmo=i($),Yh=n($,"LI",{});var cwe=s(Yh);Fne=n(cwe,"STRONG",{});var gUr=s(Fne);Dmo=r(gUr,"beit"),gUr.forEach(t),Gmo=r(cwe," \u2014 "),KP=n(cwe,"A",{href:!0});var hUr=s(KP);Omo=r(hUr,"BeitModel"),hUr.forEach(t),Vmo=r(cwe," (BEiT model)"),cwe.forEach(t),Xmo=i($),Kh=n($,"LI",{});var fwe=s(Kh);Tne=n(fwe,"STRONG",{});var pUr=s(Tne);zmo=r(pUr,"bert"),pUr.forEach(t),Qmo=r(fwe," \u2014 "),ZP=n(fwe,"A",{href:!0});var uUr=s(ZP);Wmo=r(uUr,"BertModel"),uUr.forEach(t),Hmo=r(fwe," (BERT model)"),fwe.forEach(t),Umo=i($),Zh=n($,"LI",{});var mwe=s(Zh);Mne=n(mwe,"STRONG",{});var _Ur=s(Mne);Jmo=r(_Ur,"bert-generation"),_Ur.forEach(t),Ymo=r(mwe," \u2014 "),eI=n(mwe,"A",{href:!0});var bUr=s(eI);Kmo=r(bUr,"BertGenerationEncoder"),bUr.forEach(t),Zmo=r(mwe," (Bert Generation model)"),mwe.forEach(t),ego=i($),ep=n($,"LI",{});var gwe=s(ep);Ene=n(gwe,"STRONG",{});var vUr=s(Ene);ogo=r(vUr,"big_bird"),vUr.forEach(t),rgo=r(gwe," \u2014 "),oI=n(gwe,"A",{href:!0});var FUr=s(oI);tgo=r(FUr,"BigBirdModel"),FUr.forEach(t),ago=r(gwe," (BigBird model)"),gwe.forEach(t),ngo=i($),op=n($,"LI",{});var hwe=s(op);Cne=n(hwe,"STRONG",{});var TUr=s(Cne);sgo=r(TUr,"bigbird_pegasus"),TUr.forEach(t),lgo=r(hwe," \u2014 "),rI=n(hwe,"A",{href:!0});var MUr=s(rI);igo=r(MUr,"BigBirdPegasusModel"),MUr.forEach(t),dgo=r(hwe," (BigBirdPegasus model)"),hwe.forEach(t),cgo=i($),rp=n($,"LI",{});var pwe=s(rp);wne=n(pwe,"STRONG",{});var EUr=s(wne);fgo=r(EUr,"bigscience176b"),EUr.forEach(t),mgo=r(pwe," \u2014 "),tI=n(pwe,"A",{href:!0});var CUr=s(tI);ggo=r(CUr,"BigScience176BModel"),CUr.forEach(t),hgo=r(pwe," (BigScience176B model)"),pwe.forEach(t),pgo=i($),tp=n($,"LI",{});var uwe=s(tp);Ane=n(uwe,"STRONG",{});var wUr=s(Ane);ugo=r(wUr,"blenderbot"),wUr.forEach(t),_go=r(uwe," \u2014 "),aI=n(uwe,"A",{href:!0});var AUr=s(aI);bgo=r(AUr,"BlenderbotModel"),AUr.forEach(t),vgo=r(uwe," (Blenderbot model)"),uwe.forEach(t),Fgo=i($),ap=n($,"LI",{});var _we=s(ap);yne=n(_we,"STRONG",{});var yUr=s(yne);Tgo=r(yUr,"blenderbot-small"),yUr.forEach(t),Mgo=r(_we," \u2014 "),nI=n(_we,"A",{href:!0});var LUr=s(nI);Ego=r(LUr,"BlenderbotSmallModel"),LUr.forEach(t),Cgo=r(_we," (BlenderbotSmall model)"),_we.forEach(t),wgo=i($),np=n($,"LI",{});var bwe=s(np);Lne=n(bwe,"STRONG",{});var xUr=s(Lne);Ago=r(xUr,"camembert"),xUr.forEach(t),ygo=r(bwe," \u2014 "),sI=n(bwe,"A",{href:!0});var $Ur=s(sI);Lgo=r($Ur,"CamembertModel"),$Ur.forEach(t),xgo=r(bwe," (CamemBERT model)"),bwe.forEach(t),$go=i($),sp=n($,"LI",{});var vwe=s(sp);xne=n(vwe,"STRONG",{});var kUr=s(xne);kgo=r(kUr,"canine"),kUr.forEach(t),Sgo=r(vwe," \u2014 "),lI=n(vwe,"A",{href:!0});var SUr=s(lI);Rgo=r(SUr,"CanineModel"),SUr.forEach(t),Bgo=r(vwe," (Canine model)"),vwe.forEach(t),Pgo=i($),lp=n($,"LI",{});var Fwe=s(lp);$ne=n(Fwe,"STRONG",{});var RUr=s($ne);Igo=r(RUr,"clip"),RUr.forEach(t),qgo=r(Fwe," \u2014 "),iI=n(Fwe,"A",{href:!0});var BUr=s(iI);Ngo=r(BUr,"CLIPModel"),BUr.forEach(t),jgo=r(Fwe," (CLIP model)"),Fwe.forEach(t),Dgo=i($),ip=n($,"LI",{});var Twe=s(ip);kne=n(Twe,"STRONG",{});var PUr=s(kne);Ggo=r(PUr,"convbert"),PUr.forEach(t),Ogo=r(Twe," \u2014 "),dI=n(Twe,"A",{href:!0});var IUr=s(dI);Vgo=r(IUr,"ConvBertModel"),IUr.forEach(t),Xgo=r(Twe," (ConvBERT model)"),Twe.forEach(t),zgo=i($),dp=n($,"LI",{});var Mwe=s(dp);Sne=n(Mwe,"STRONG",{});var qUr=s(Sne);Qgo=r(qUr,"convnext"),qUr.forEach(t),Wgo=r(Mwe," \u2014 "),cI=n(Mwe,"A",{href:!0});var NUr=s(cI);Hgo=r(NUr,"ConvNextModel"),NUr.forEach(t),Ugo=r(Mwe," (ConvNext model)"),Mwe.forEach(t),Jgo=i($),cp=n($,"LI",{});var Ewe=s(cp);Rne=n(Ewe,"STRONG",{});var jUr=s(Rne);Ygo=r(jUr,"ctrl"),jUr.forEach(t),Kgo=r(Ewe," \u2014 "),fI=n(Ewe,"A",{href:!0});var DUr=s(fI);Zgo=r(DUr,"CTRLModel"),DUr.forEach(t),eho=r(Ewe," (CTRL model)"),Ewe.forEach(t),oho=i($),fp=n($,"LI",{});var Cwe=s(fp);Bne=n(Cwe,"STRONG",{});var GUr=s(Bne);rho=r(GUr,"data2vec-audio"),GUr.forEach(t),tho=r(Cwe," \u2014 "),mI=n(Cwe,"A",{href:!0});var OUr=s(mI);aho=r(OUr,"Data2VecAudioModel"),OUr.forEach(t),nho=r(Cwe," (Data2VecAudio model)"),Cwe.forEach(t),sho=i($),mp=n($,"LI",{});var wwe=s(mp);Pne=n(wwe,"STRONG",{});var VUr=s(Pne);lho=r(VUr,"data2vec-text"),VUr.forEach(t),iho=r(wwe," \u2014 "),gI=n(wwe,"A",{href:!0});var XUr=s(gI);dho=r(XUr,"Data2VecTextModel"),XUr.forEach(t),cho=r(wwe," (Data2VecText model)"),wwe.forEach(t),fho=i($),gp=n($,"LI",{});var Awe=s(gp);Ine=n(Awe,"STRONG",{});var zUr=s(Ine);mho=r(zUr,"data2vec-vision"),zUr.forEach(t),gho=r(Awe," \u2014 "),hI=n(Awe,"A",{href:!0});var QUr=s(hI);hho=r(QUr,"Data2VecVisionModel"),QUr.forEach(t),pho=r(Awe," (Data2VecVision model)"),Awe.forEach(t),uho=i($),hp=n($,"LI",{});var ywe=s(hp);qne=n(ywe,"STRONG",{});var WUr=s(qne);_ho=r(WUr,"deberta"),WUr.forEach(t),bho=r(ywe," \u2014 "),pI=n(ywe,"A",{href:!0});var HUr=s(pI);vho=r(HUr,"DebertaModel"),HUr.forEach(t),Fho=r(ywe," (DeBERTa model)"),ywe.forEach(t),Tho=i($),pp=n($,"LI",{});var Lwe=s(pp);Nne=n(Lwe,"STRONG",{});var UUr=s(Nne);Mho=r(UUr,"deberta-v2"),UUr.forEach(t),Eho=r(Lwe," \u2014 "),uI=n(Lwe,"A",{href:!0});var JUr=s(uI);Cho=r(JUr,"DebertaV2Model"),JUr.forEach(t),who=r(Lwe," (DeBERTa-v2 model)"),Lwe.forEach(t),Aho=i($),up=n($,"LI",{});var xwe=s(up);jne=n(xwe,"STRONG",{});var YUr=s(jne);yho=r(YUr,"decision_transformer"),YUr.forEach(t),Lho=r(xwe," \u2014 "),_I=n(xwe,"A",{href:!0});var KUr=s(_I);xho=r(KUr,"DecisionTransformerModel"),KUr.forEach(t),$ho=r(xwe," (Decision Transformer model)"),xwe.forEach(t),kho=i($),_p=n($,"LI",{});var $we=s(_p);Dne=n($we,"STRONG",{});var ZUr=s(Dne);Sho=r(ZUr,"deit"),ZUr.forEach(t),Rho=r($we," \u2014 "),bI=n($we,"A",{href:!0});var eJr=s(bI);Bho=r(eJr,"DeiTModel"),eJr.forEach(t),Pho=r($we," (DeiT model)"),$we.forEach(t),Iho=i($),bp=n($,"LI",{});var kwe=s(bp);Gne=n(kwe,"STRONG",{});var oJr=s(Gne);qho=r(oJr,"detr"),oJr.forEach(t),Nho=r(kwe," \u2014 "),vI=n(kwe,"A",{href:!0});var rJr=s(vI);jho=r(rJr,"DetrModel"),rJr.forEach(t),Dho=r(kwe," (DETR model)"),kwe.forEach(t),Gho=i($),vp=n($,"LI",{});var Swe=s(vp);One=n(Swe,"STRONG",{});var tJr=s(One);Oho=r(tJr,"distilbert"),tJr.forEach(t),Vho=r(Swe," \u2014 "),FI=n(Swe,"A",{href:!0});var aJr=s(FI);Xho=r(aJr,"DistilBertModel"),aJr.forEach(t),zho=r(Swe," (DistilBERT model)"),Swe.forEach(t),Qho=i($),Fp=n($,"LI",{});var Rwe=s(Fp);Vne=n(Rwe,"STRONG",{});var nJr=s(Vne);Who=r(nJr,"dpr"),nJr.forEach(t),Hho=r(Rwe," \u2014 "),TI=n(Rwe,"A",{href:!0});var sJr=s(TI);Uho=r(sJr,"DPRQuestionEncoder"),sJr.forEach(t),Jho=r(Rwe," (DPR model)"),Rwe.forEach(t),Yho=i($),Tp=n($,"LI",{});var Bwe=s(Tp);Xne=n(Bwe,"STRONG",{});var lJr=s(Xne);Kho=r(lJr,"dpt"),lJr.forEach(t),Zho=r(Bwe," \u2014 "),MI=n(Bwe,"A",{href:!0});var iJr=s(MI);epo=r(iJr,"DPTModel"),iJr.forEach(t),opo=r(Bwe," (DPT model)"),Bwe.forEach(t),rpo=i($),Mp=n($,"LI",{});var Pwe=s(Mp);zne=n(Pwe,"STRONG",{});var dJr=s(zne);tpo=r(dJr,"electra"),dJr.forEach(t),apo=r(Pwe," \u2014 "),EI=n(Pwe,"A",{href:!0});var cJr=s(EI);npo=r(cJr,"ElectraModel"),cJr.forEach(t),spo=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),lpo=i($),Ep=n($,"LI",{});var Iwe=s(Ep);Qne=n(Iwe,"STRONG",{});var fJr=s(Qne);ipo=r(fJr,"flaubert"),fJr.forEach(t),dpo=r(Iwe," \u2014 "),CI=n(Iwe,"A",{href:!0});var mJr=s(CI);cpo=r(mJr,"FlaubertModel"),mJr.forEach(t),fpo=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),mpo=i($),Cp=n($,"LI",{});var qwe=s(Cp);Wne=n(qwe,"STRONG",{});var gJr=s(Wne);gpo=r(gJr,"flava"),gJr.forEach(t),hpo=r(qwe," \u2014 "),wI=n(qwe,"A",{href:!0});var hJr=s(wI);ppo=r(hJr,"FlavaModel"),hJr.forEach(t),upo=r(qwe," (Flava model)"),qwe.forEach(t),_po=i($),wp=n($,"LI",{});var Nwe=s(wp);Hne=n(Nwe,"STRONG",{});var pJr=s(Hne);bpo=r(pJr,"fnet"),pJr.forEach(t),vpo=r(Nwe," \u2014 "),AI=n(Nwe,"A",{href:!0});var uJr=s(AI);Fpo=r(uJr,"FNetModel"),uJr.forEach(t),Tpo=r(Nwe," (FNet model)"),Nwe.forEach(t),Mpo=i($),Ap=n($,"LI",{});var jwe=s(Ap);Une=n(jwe,"STRONG",{});var _Jr=s(Une);Epo=r(_Jr,"fsmt"),_Jr.forEach(t),Cpo=r(jwe," \u2014 "),yI=n(jwe,"A",{href:!0});var bJr=s(yI);wpo=r(bJr,"FSMTModel"),bJr.forEach(t),Apo=r(jwe," (FairSeq Machine-Translation model)"),jwe.forEach(t),ypo=i($),Rs=n($,"LI",{});var _$=s(Rs);Jne=n(_$,"STRONG",{});var vJr=s(Jne);Lpo=r(vJr,"funnel"),vJr.forEach(t),xpo=r(_$," \u2014 "),LI=n(_$,"A",{href:!0});var FJr=s(LI);$po=r(FJr,"FunnelModel"),FJr.forEach(t),kpo=r(_$," or "),xI=n(_$,"A",{href:!0});var TJr=s(xI);Spo=r(TJr,"FunnelBaseModel"),TJr.forEach(t),Rpo=r(_$," (Funnel Transformer model)"),_$.forEach(t),Bpo=i($),yp=n($,"LI",{});var Dwe=s(yp);Yne=n(Dwe,"STRONG",{});var MJr=s(Yne);Ppo=r(MJr,"glpn"),MJr.forEach(t),Ipo=r(Dwe," \u2014 "),$I=n(Dwe,"A",{href:!0});var EJr=s($I);qpo=r(EJr,"GLPNModel"),EJr.forEach(t),Npo=r(Dwe," (GLPN model)"),Dwe.forEach(t),jpo=i($),Lp=n($,"LI",{});var Gwe=s(Lp);Kne=n(Gwe,"STRONG",{});var CJr=s(Kne);Dpo=r(CJr,"gpt2"),CJr.forEach(t),Gpo=r(Gwe," \u2014 "),kI=n(Gwe,"A",{href:!0});var wJr=s(kI);Opo=r(wJr,"GPT2Model"),wJr.forEach(t),Vpo=r(Gwe," (OpenAI GPT-2 model)"),Gwe.forEach(t),Xpo=i($),xp=n($,"LI",{});var Owe=s(xp);Zne=n(Owe,"STRONG",{});var AJr=s(Zne);zpo=r(AJr,"gpt_neo"),AJr.forEach(t),Qpo=r(Owe," \u2014 "),SI=n(Owe,"A",{href:!0});var yJr=s(SI);Wpo=r(yJr,"GPTNeoModel"),yJr.forEach(t),Hpo=r(Owe," (GPT Neo model)"),Owe.forEach(t),Upo=i($),$p=n($,"LI",{});var Vwe=s($p);ese=n(Vwe,"STRONG",{});var LJr=s(ese);Jpo=r(LJr,"gptj"),LJr.forEach(t),Ypo=r(Vwe," \u2014 "),RI=n(Vwe,"A",{href:!0});var xJr=s(RI);Kpo=r(xJr,"GPTJModel"),xJr.forEach(t),Zpo=r(Vwe," (GPT-J model)"),Vwe.forEach(t),euo=i($),kp=n($,"LI",{});var Xwe=s(kp);ose=n(Xwe,"STRONG",{});var $Jr=s(ose);ouo=r($Jr,"hubert"),$Jr.forEach(t),ruo=r(Xwe," \u2014 "),BI=n(Xwe,"A",{href:!0});var kJr=s(BI);tuo=r(kJr,"HubertModel"),kJr.forEach(t),auo=r(Xwe," (Hubert model)"),Xwe.forEach(t),nuo=i($),Sp=n($,"LI",{});var zwe=s(Sp);rse=n(zwe,"STRONG",{});var SJr=s(rse);suo=r(SJr,"ibert"),SJr.forEach(t),luo=r(zwe," \u2014 "),PI=n(zwe,"A",{href:!0});var RJr=s(PI);iuo=r(RJr,"IBertModel"),RJr.forEach(t),duo=r(zwe," (I-BERT model)"),zwe.forEach(t),cuo=i($),Rp=n($,"LI",{});var Qwe=s(Rp);tse=n(Qwe,"STRONG",{});var BJr=s(tse);fuo=r(BJr,"imagegpt"),BJr.forEach(t),muo=r(Qwe," \u2014 "),II=n(Qwe,"A",{href:!0});var PJr=s(II);guo=r(PJr,"ImageGPTModel"),PJr.forEach(t),huo=r(Qwe," (ImageGPT model)"),Qwe.forEach(t),puo=i($),Bp=n($,"LI",{});var Wwe=s(Bp);ase=n(Wwe,"STRONG",{});var IJr=s(ase);uuo=r(IJr,"layoutlm"),IJr.forEach(t),_uo=r(Wwe," \u2014 "),qI=n(Wwe,"A",{href:!0});var qJr=s(qI);buo=r(qJr,"LayoutLMModel"),qJr.forEach(t),vuo=r(Wwe," (LayoutLM model)"),Wwe.forEach(t),Fuo=i($),Pp=n($,"LI",{});var Hwe=s(Pp);nse=n(Hwe,"STRONG",{});var NJr=s(nse);Tuo=r(NJr,"layoutlmv2"),NJr.forEach(t),Muo=r(Hwe," \u2014 "),NI=n(Hwe,"A",{href:!0});var jJr=s(NI);Euo=r(jJr,"LayoutLMv2Model"),jJr.forEach(t),Cuo=r(Hwe," (LayoutLMv2 model)"),Hwe.forEach(t),wuo=i($),Ip=n($,"LI",{});var Uwe=s(Ip);sse=n(Uwe,"STRONG",{});var DJr=s(sse);Auo=r(DJr,"led"),DJr.forEach(t),yuo=r(Uwe," \u2014 "),jI=n(Uwe,"A",{href:!0});var GJr=s(jI);Luo=r(GJr,"LEDModel"),GJr.forEach(t),xuo=r(Uwe," (LED model)"),Uwe.forEach(t),$uo=i($),qp=n($,"LI",{});var Jwe=s(qp);lse=n(Jwe,"STRONG",{});var OJr=s(lse);kuo=r(OJr,"longformer"),OJr.forEach(t),Suo=r(Jwe," \u2014 "),DI=n(Jwe,"A",{href:!0});var VJr=s(DI);Ruo=r(VJr,"LongformerModel"),VJr.forEach(t),Buo=r(Jwe," (Longformer model)"),Jwe.forEach(t),Puo=i($),Np=n($,"LI",{});var Ywe=s(Np);ise=n(Ywe,"STRONG",{});var XJr=s(ise);Iuo=r(XJr,"luke"),XJr.forEach(t),quo=r(Ywe," \u2014 "),GI=n(Ywe,"A",{href:!0});var zJr=s(GI);Nuo=r(zJr,"LukeModel"),zJr.forEach(t),juo=r(Ywe," (LUKE model)"),Ywe.forEach(t),Duo=i($),jp=n($,"LI",{});var Kwe=s(jp);dse=n(Kwe,"STRONG",{});var QJr=s(dse);Guo=r(QJr,"lxmert"),QJr.forEach(t),Ouo=r(Kwe," \u2014 "),OI=n(Kwe,"A",{href:!0});var WJr=s(OI);Vuo=r(WJr,"LxmertModel"),WJr.forEach(t),Xuo=r(Kwe," (LXMERT model)"),Kwe.forEach(t),zuo=i($),Dp=n($,"LI",{});var Zwe=s(Dp);cse=n(Zwe,"STRONG",{});var HJr=s(cse);Quo=r(HJr,"m2m_100"),HJr.forEach(t),Wuo=r(Zwe," \u2014 "),VI=n(Zwe,"A",{href:!0});var UJr=s(VI);Huo=r(UJr,"M2M100Model"),UJr.forEach(t),Uuo=r(Zwe," (M2M100 model)"),Zwe.forEach(t),Juo=i($),Gp=n($,"LI",{});var e6e=s(Gp);fse=n(e6e,"STRONG",{});var JJr=s(fse);Yuo=r(JJr,"marian"),JJr.forEach(t),Kuo=r(e6e," \u2014 "),XI=n(e6e,"A",{href:!0});var YJr=s(XI);Zuo=r(YJr,"MarianModel"),YJr.forEach(t),e_o=r(e6e," (Marian model)"),e6e.forEach(t),o_o=i($),Op=n($,"LI",{});var o6e=s(Op);mse=n(o6e,"STRONG",{});var KJr=s(mse);r_o=r(KJr,"maskformer"),KJr.forEach(t),t_o=r(o6e," \u2014 "),zI=n(o6e,"A",{href:!0});var ZJr=s(zI);a_o=r(ZJr,"MaskFormerModel"),ZJr.forEach(t),n_o=r(o6e," (MaskFormer model)"),o6e.forEach(t),s_o=i($),Vp=n($,"LI",{});var r6e=s(Vp);gse=n(r6e,"STRONG",{});var eYr=s(gse);l_o=r(eYr,"mbart"),eYr.forEach(t),i_o=r(r6e," \u2014 "),QI=n(r6e,"A",{href:!0});var oYr=s(QI);d_o=r(oYr,"MBartModel"),oYr.forEach(t),c_o=r(r6e," (mBART model)"),r6e.forEach(t),f_o=i($),Xp=n($,"LI",{});var t6e=s(Xp);hse=n(t6e,"STRONG",{});var rYr=s(hse);m_o=r(rYr,"megatron-bert"),rYr.forEach(t),g_o=r(t6e," \u2014 "),WI=n(t6e,"A",{href:!0});var tYr=s(WI);h_o=r(tYr,"MegatronBertModel"),tYr.forEach(t),p_o=r(t6e," (MegatronBert model)"),t6e.forEach(t),u_o=i($),zp=n($,"LI",{});var a6e=s(zp);pse=n(a6e,"STRONG",{});var aYr=s(pse);__o=r(aYr,"mobilebert"),aYr.forEach(t),b_o=r(a6e," \u2014 "),HI=n(a6e,"A",{href:!0});var nYr=s(HI);v_o=r(nYr,"MobileBertModel"),nYr.forEach(t),F_o=r(a6e," (MobileBERT model)"),a6e.forEach(t),T_o=i($),Qp=n($,"LI",{});var n6e=s(Qp);use=n(n6e,"STRONG",{});var sYr=s(use);M_o=r(sYr,"mpnet"),sYr.forEach(t),E_o=r(n6e," \u2014 "),UI=n(n6e,"A",{href:!0});var lYr=s(UI);C_o=r(lYr,"MPNetModel"),lYr.forEach(t),w_o=r(n6e," (MPNet model)"),n6e.forEach(t),A_o=i($),Wp=n($,"LI",{});var s6e=s(Wp);_se=n(s6e,"STRONG",{});var iYr=s(_se);y_o=r(iYr,"mt5"),iYr.forEach(t),L_o=r(s6e," \u2014 "),JI=n(s6e,"A",{href:!0});var dYr=s(JI);x_o=r(dYr,"MT5Model"),dYr.forEach(t),$_o=r(s6e," (mT5 model)"),s6e.forEach(t),k_o=i($),Hp=n($,"LI",{});var l6e=s(Hp);bse=n(l6e,"STRONG",{});var cYr=s(bse);S_o=r(cYr,"nystromformer"),cYr.forEach(t),R_o=r(l6e," \u2014 "),YI=n(l6e,"A",{href:!0});var fYr=s(YI);B_o=r(fYr,"NystromformerModel"),fYr.forEach(t),P_o=r(l6e," (Nystromformer model)"),l6e.forEach(t),I_o=i($),Up=n($,"LI",{});var i6e=s(Up);vse=n(i6e,"STRONG",{});var mYr=s(vse);q_o=r(mYr,"openai-gpt"),mYr.forEach(t),N_o=r(i6e," \u2014 "),KI=n(i6e,"A",{href:!0});var gYr=s(KI);j_o=r(gYr,"OpenAIGPTModel"),gYr.forEach(t),D_o=r(i6e," (OpenAI GPT model)"),i6e.forEach(t),G_o=i($),Jp=n($,"LI",{});var d6e=s(Jp);Fse=n(d6e,"STRONG",{});var hYr=s(Fse);O_o=r(hYr,"opt"),hYr.forEach(t),V_o=r(d6e," \u2014 "),ZI=n(d6e,"A",{href:!0});var pYr=s(ZI);X_o=r(pYr,"OPTModel"),pYr.forEach(t),z_o=r(d6e," (OPT model)"),d6e.forEach(t),Q_o=i($),Yp=n($,"LI",{});var c6e=s(Yp);Tse=n(c6e,"STRONG",{});var uYr=s(Tse);W_o=r(uYr,"pegasus"),uYr.forEach(t),H_o=r(c6e," \u2014 "),eq=n(c6e,"A",{href:!0});var _Yr=s(eq);U_o=r(_Yr,"PegasusModel"),_Yr.forEach(t),J_o=r(c6e," (Pegasus model)"),c6e.forEach(t),Y_o=i($),Kp=n($,"LI",{});var f6e=s(Kp);Mse=n(f6e,"STRONG",{});var bYr=s(Mse);K_o=r(bYr,"perceiver"),bYr.forEach(t),Z_o=r(f6e," \u2014 "),oq=n(f6e,"A",{href:!0});var vYr=s(oq);e2o=r(vYr,"PerceiverModel"),vYr.forEach(t),o2o=r(f6e," (Perceiver model)"),f6e.forEach(t),r2o=i($),Zp=n($,"LI",{});var m6e=s(Zp);Ese=n(m6e,"STRONG",{});var FYr=s(Ese);t2o=r(FYr,"plbart"),FYr.forEach(t),a2o=r(m6e," \u2014 "),rq=n(m6e,"A",{href:!0});var TYr=s(rq);n2o=r(TYr,"PLBartModel"),TYr.forEach(t),s2o=r(m6e," (PLBart model)"),m6e.forEach(t),l2o=i($),eu=n($,"LI",{});var g6e=s(eu);Cse=n(g6e,"STRONG",{});var MYr=s(Cse);i2o=r(MYr,"poolformer"),MYr.forEach(t),d2o=r(g6e," \u2014 "),tq=n(g6e,"A",{href:!0});var EYr=s(tq);c2o=r(EYr,"PoolFormerModel"),EYr.forEach(t),f2o=r(g6e," (PoolFormer model)"),g6e.forEach(t),m2o=i($),ou=n($,"LI",{});var h6e=s(ou);wse=n(h6e,"STRONG",{});var CYr=s(wse);g2o=r(CYr,"prophetnet"),CYr.forEach(t),h2o=r(h6e," \u2014 "),aq=n(h6e,"A",{href:!0});var wYr=s(aq);p2o=r(wYr,"ProphetNetModel"),wYr.forEach(t),u2o=r(h6e," (ProphetNet model)"),h6e.forEach(t),_2o=i($),ru=n($,"LI",{});var p6e=s(ru);Ase=n(p6e,"STRONG",{});var AYr=s(Ase);b2o=r(AYr,"qdqbert"),AYr.forEach(t),v2o=r(p6e," \u2014 "),nq=n(p6e,"A",{href:!0});var yYr=s(nq);F2o=r(yYr,"QDQBertModel"),yYr.forEach(t),T2o=r(p6e," (QDQBert model)"),p6e.forEach(t),M2o=i($),tu=n($,"LI",{});var u6e=s(tu);yse=n(u6e,"STRONG",{});var LYr=s(yse);E2o=r(LYr,"reformer"),LYr.forEach(t),C2o=r(u6e," \u2014 "),sq=n(u6e,"A",{href:!0});var xYr=s(sq);w2o=r(xYr,"ReformerModel"),xYr.forEach(t),A2o=r(u6e," (Reformer model)"),u6e.forEach(t),y2o=i($),au=n($,"LI",{});var _6e=s(au);Lse=n(_6e,"STRONG",{});var $Yr=s(Lse);L2o=r($Yr,"regnet"),$Yr.forEach(t),x2o=r(_6e," \u2014 "),lq=n(_6e,"A",{href:!0});var kYr=s(lq);$2o=r(kYr,"RegNetModel"),kYr.forEach(t),k2o=r(_6e," (RegNet model)"),_6e.forEach(t),S2o=i($),nu=n($,"LI",{});var b6e=s(nu);xse=n(b6e,"STRONG",{});var SYr=s(xse);R2o=r(SYr,"rembert"),SYr.forEach(t),B2o=r(b6e," \u2014 "),iq=n(b6e,"A",{href:!0});var RYr=s(iq);P2o=r(RYr,"RemBertModel"),RYr.forEach(t),I2o=r(b6e," (RemBERT model)"),b6e.forEach(t),q2o=i($),su=n($,"LI",{});var v6e=s(su);$se=n(v6e,"STRONG",{});var BYr=s($se);N2o=r(BYr,"resnet"),BYr.forEach(t),j2o=r(v6e," \u2014 "),dq=n(v6e,"A",{href:!0});var PYr=s(dq);D2o=r(PYr,"ResNetModel"),PYr.forEach(t),G2o=r(v6e," (ResNet model)"),v6e.forEach(t),O2o=i($),lu=n($,"LI",{});var F6e=s(lu);kse=n(F6e,"STRONG",{});var IYr=s(kse);V2o=r(IYr,"retribert"),IYr.forEach(t),X2o=r(F6e," \u2014 "),cq=n(F6e,"A",{href:!0});var qYr=s(cq);z2o=r(qYr,"RetriBertModel"),qYr.forEach(t),Q2o=r(F6e," (RetriBERT model)"),F6e.forEach(t),W2o=i($),iu=n($,"LI",{});var T6e=s(iu);Sse=n(T6e,"STRONG",{});var NYr=s(Sse);H2o=r(NYr,"roberta"),NYr.forEach(t),U2o=r(T6e," \u2014 "),fq=n(T6e,"A",{href:!0});var jYr=s(fq);J2o=r(jYr,"RobertaModel"),jYr.forEach(t),Y2o=r(T6e," (RoBERTa model)"),T6e.forEach(t),K2o=i($),du=n($,"LI",{});var M6e=s(du);Rse=n(M6e,"STRONG",{});var DYr=s(Rse);Z2o=r(DYr,"roformer"),DYr.forEach(t),e1o=r(M6e," \u2014 "),mq=n(M6e,"A",{href:!0});var GYr=s(mq);o1o=r(GYr,"RoFormerModel"),GYr.forEach(t),r1o=r(M6e," (RoFormer model)"),M6e.forEach(t),t1o=i($),cu=n($,"LI",{});var E6e=s(cu);Bse=n(E6e,"STRONG",{});var OYr=s(Bse);a1o=r(OYr,"segformer"),OYr.forEach(t),n1o=r(E6e," \u2014 "),gq=n(E6e,"A",{href:!0});var VYr=s(gq);s1o=r(VYr,"SegformerModel"),VYr.forEach(t),l1o=r(E6e," (SegFormer model)"),E6e.forEach(t),i1o=i($),fu=n($,"LI",{});var C6e=s(fu);Pse=n(C6e,"STRONG",{});var XYr=s(Pse);d1o=r(XYr,"sew"),XYr.forEach(t),c1o=r(C6e," \u2014 "),hq=n(C6e,"A",{href:!0});var zYr=s(hq);f1o=r(zYr,"SEWModel"),zYr.forEach(t),m1o=r(C6e," (SEW model)"),C6e.forEach(t),g1o=i($),mu=n($,"LI",{});var w6e=s(mu);Ise=n(w6e,"STRONG",{});var QYr=s(Ise);h1o=r(QYr,"sew-d"),QYr.forEach(t),p1o=r(w6e," \u2014 "),pq=n(w6e,"A",{href:!0});var WYr=s(pq);u1o=r(WYr,"SEWDModel"),WYr.forEach(t),_1o=r(w6e," (SEW-D model)"),w6e.forEach(t),b1o=i($),gu=n($,"LI",{});var A6e=s(gu);qse=n(A6e,"STRONG",{});var HYr=s(qse);v1o=r(HYr,"speech_to_text"),HYr.forEach(t),F1o=r(A6e," \u2014 "),uq=n(A6e,"A",{href:!0});var UYr=s(uq);T1o=r(UYr,"Speech2TextModel"),UYr.forEach(t),M1o=r(A6e," (Speech2Text model)"),A6e.forEach(t),E1o=i($),hu=n($,"LI",{});var y6e=s(hu);Nse=n(y6e,"STRONG",{});var JYr=s(Nse);C1o=r(JYr,"splinter"),JYr.forEach(t),w1o=r(y6e," \u2014 "),_q=n(y6e,"A",{href:!0});var YYr=s(_q);A1o=r(YYr,"SplinterModel"),YYr.forEach(t),y1o=r(y6e," (Splinter model)"),y6e.forEach(t),L1o=i($),pu=n($,"LI",{});var L6e=s(pu);jse=n(L6e,"STRONG",{});var KYr=s(jse);x1o=r(KYr,"squeezebert"),KYr.forEach(t),$1o=r(L6e," \u2014 "),bq=n(L6e,"A",{href:!0});var ZYr=s(bq);k1o=r(ZYr,"SqueezeBertModel"),ZYr.forEach(t),S1o=r(L6e," (SqueezeBERT model)"),L6e.forEach(t),R1o=i($),uu=n($,"LI",{});var x6e=s(uu);Dse=n(x6e,"STRONG",{});var eKr=s(Dse);B1o=r(eKr,"swin"),eKr.forEach(t),P1o=r(x6e," \u2014 "),vq=n(x6e,"A",{href:!0});var oKr=s(vq);I1o=r(oKr,"SwinModel"),oKr.forEach(t),q1o=r(x6e," (Swin model)"),x6e.forEach(t),N1o=i($),_u=n($,"LI",{});var $6e=s(_u);Gse=n($6e,"STRONG",{});var rKr=s(Gse);j1o=r(rKr,"t5"),rKr.forEach(t),D1o=r($6e," \u2014 "),Fq=n($6e,"A",{href:!0});var tKr=s(Fq);G1o=r(tKr,"T5Model"),tKr.forEach(t),O1o=r($6e," (T5 model)"),$6e.forEach(t),V1o=i($),bu=n($,"LI",{});var k6e=s(bu);Ose=n(k6e,"STRONG",{});var aKr=s(Ose);X1o=r(aKr,"tapas"),aKr.forEach(t),z1o=r(k6e," \u2014 "),Tq=n(k6e,"A",{href:!0});var nKr=s(Tq);Q1o=r(nKr,"TapasModel"),nKr.forEach(t),W1o=r(k6e," (TAPAS model)"),k6e.forEach(t),H1o=i($),vu=n($,"LI",{});var S6e=s(vu);Vse=n(S6e,"STRONG",{});var sKr=s(Vse);U1o=r(sKr,"transfo-xl"),sKr.forEach(t),J1o=r(S6e," \u2014 "),Mq=n(S6e,"A",{href:!0});var lKr=s(Mq);Y1o=r(lKr,"TransfoXLModel"),lKr.forEach(t),K1o=r(S6e," (Transformer-XL model)"),S6e.forEach(t),Z1o=i($),Fu=n($,"LI",{});var R6e=s(Fu);Xse=n(R6e,"STRONG",{});var iKr=s(Xse);ebo=r(iKr,"unispeech"),iKr.forEach(t),obo=r(R6e," \u2014 "),Eq=n(R6e,"A",{href:!0});var dKr=s(Eq);rbo=r(dKr,"UniSpeechModel"),dKr.forEach(t),tbo=r(R6e," (UniSpeech model)"),R6e.forEach(t),abo=i($),Tu=n($,"LI",{});var B6e=s(Tu);zse=n(B6e,"STRONG",{});var cKr=s(zse);nbo=r(cKr,"unispeech-sat"),cKr.forEach(t),sbo=r(B6e," \u2014 "),Cq=n(B6e,"A",{href:!0});var fKr=s(Cq);lbo=r(fKr,"UniSpeechSatModel"),fKr.forEach(t),ibo=r(B6e," (UniSpeechSat model)"),B6e.forEach(t),dbo=i($),Mu=n($,"LI",{});var P6e=s(Mu);Qse=n(P6e,"STRONG",{});var mKr=s(Qse);cbo=r(mKr,"van"),mKr.forEach(t),fbo=r(P6e," \u2014 "),wq=n(P6e,"A",{href:!0});var gKr=s(wq);mbo=r(gKr,"VanModel"),gKr.forEach(t),gbo=r(P6e," (VAN model)"),P6e.forEach(t),hbo=i($),Eu=n($,"LI",{});var I6e=s(Eu);Wse=n(I6e,"STRONG",{});var hKr=s(Wse);pbo=r(hKr,"vilt"),hKr.forEach(t),ubo=r(I6e," \u2014 "),Aq=n(I6e,"A",{href:!0});var pKr=s(Aq);_bo=r(pKr,"ViltModel"),pKr.forEach(t),bbo=r(I6e," (ViLT model)"),I6e.forEach(t),vbo=i($),Cu=n($,"LI",{});var q6e=s(Cu);Hse=n(q6e,"STRONG",{});var uKr=s(Hse);Fbo=r(uKr,"vision-text-dual-encoder"),uKr.forEach(t),Tbo=r(q6e," \u2014 "),yq=n(q6e,"A",{href:!0});var _Kr=s(yq);Mbo=r(_Kr,"VisionTextDualEncoderModel"),_Kr.forEach(t),Ebo=r(q6e," (VisionTextDualEncoder model)"),q6e.forEach(t),Cbo=i($),wu=n($,"LI",{});var N6e=s(wu);Use=n(N6e,"STRONG",{});var bKr=s(Use);wbo=r(bKr,"visual_bert"),bKr.forEach(t),Abo=r(N6e," \u2014 "),Lq=n(N6e,"A",{href:!0});var vKr=s(Lq);ybo=r(vKr,"VisualBertModel"),vKr.forEach(t),Lbo=r(N6e," (VisualBert model)"),N6e.forEach(t),xbo=i($),Au=n($,"LI",{});var j6e=s(Au);Jse=n(j6e,"STRONG",{});var FKr=s(Jse);$bo=r(FKr,"vit"),FKr.forEach(t),kbo=r(j6e," \u2014 "),xq=n(j6e,"A",{href:!0});var TKr=s(xq);Sbo=r(TKr,"ViTModel"),TKr.forEach(t),Rbo=r(j6e," (ViT model)"),j6e.forEach(t),Bbo=i($),yu=n($,"LI",{});var D6e=s(yu);Yse=n(D6e,"STRONG",{});var MKr=s(Yse);Pbo=r(MKr,"vit_mae"),MKr.forEach(t),Ibo=r(D6e," \u2014 "),$q=n(D6e,"A",{href:!0});var EKr=s($q);qbo=r(EKr,"ViTMAEModel"),EKr.forEach(t),Nbo=r(D6e," (ViTMAE model)"),D6e.forEach(t),jbo=i($),Lu=n($,"LI",{});var G6e=s(Lu);Kse=n(G6e,"STRONG",{});var CKr=s(Kse);Dbo=r(CKr,"wav2vec2"),CKr.forEach(t),Gbo=r(G6e," \u2014 "),kq=n(G6e,"A",{href:!0});var wKr=s(kq);Obo=r(wKr,"Wav2Vec2Model"),wKr.forEach(t),Vbo=r(G6e," (Wav2Vec2 model)"),G6e.forEach(t),Xbo=i($),xu=n($,"LI",{});var O6e=s(xu);Zse=n(O6e,"STRONG",{});var AKr=s(Zse);zbo=r(AKr,"wavlm"),AKr.forEach(t),Qbo=r(O6e," \u2014 "),Sq=n(O6e,"A",{href:!0});var yKr=s(Sq);Wbo=r(yKr,"WavLMModel"),yKr.forEach(t),Hbo=r(O6e," (WavLM model)"),O6e.forEach(t),Ubo=i($),$u=n($,"LI",{});var V6e=s($u);ele=n(V6e,"STRONG",{});var LKr=s(ele);Jbo=r(LKr,"xglm"),LKr.forEach(t),Ybo=r(V6e," \u2014 "),Rq=n(V6e,"A",{href:!0});var xKr=s(Rq);Kbo=r(xKr,"XGLMModel"),xKr.forEach(t),Zbo=r(V6e," (XGLM model)"),V6e.forEach(t),evo=i($),ku=n($,"LI",{});var X6e=s(ku);ole=n(X6e,"STRONG",{});var $Kr=s(ole);ovo=r($Kr,"xlm"),$Kr.forEach(t),rvo=r(X6e," \u2014 "),Bq=n(X6e,"A",{href:!0});var kKr=s(Bq);tvo=r(kKr,"XLMModel"),kKr.forEach(t),avo=r(X6e," (XLM model)"),X6e.forEach(t),nvo=i($),Su=n($,"LI",{});var z6e=s(Su);rle=n(z6e,"STRONG",{});var SKr=s(rle);svo=r(SKr,"xlm-prophetnet"),SKr.forEach(t),lvo=r(z6e," \u2014 "),Pq=n(z6e,"A",{href:!0});var RKr=s(Pq);ivo=r(RKr,"XLMProphetNetModel"),RKr.forEach(t),dvo=r(z6e," (XLMProphetNet model)"),z6e.forEach(t),cvo=i($),Ru=n($,"LI",{});var Q6e=s(Ru);tle=n(Q6e,"STRONG",{});var BKr=s(tle);fvo=r(BKr,"xlm-roberta"),BKr.forEach(t),mvo=r(Q6e," \u2014 "),Iq=n(Q6e,"A",{href:!0});var PKr=s(Iq);gvo=r(PKr,"XLMRobertaModel"),PKr.forEach(t),hvo=r(Q6e," (XLM-RoBERTa model)"),Q6e.forEach(t),pvo=i($),Bu=n($,"LI",{});var W6e=s(Bu);ale=n(W6e,"STRONG",{});var IKr=s(ale);uvo=r(IKr,"xlm-roberta-xl"),IKr.forEach(t),_vo=r(W6e," \u2014 "),qq=n(W6e,"A",{href:!0});var qKr=s(qq);bvo=r(qKr,"XLMRobertaXLModel"),qKr.forEach(t),vvo=r(W6e," (XLM-RoBERTa-XL model)"),W6e.forEach(t),Fvo=i($),Pu=n($,"LI",{});var H6e=s(Pu);nle=n(H6e,"STRONG",{});var NKr=s(nle);Tvo=r(NKr,"xlnet"),NKr.forEach(t),Mvo=r(H6e," \u2014 "),Nq=n(H6e,"A",{href:!0});var jKr=s(Nq);Evo=r(jKr,"XLNetModel"),jKr.forEach(t),Cvo=r(H6e," (XLNet model)"),H6e.forEach(t),wvo=i($),Iu=n($,"LI",{});var U6e=s(Iu);sle=n(U6e,"STRONG",{});var DKr=s(sle);Avo=r(DKr,"yolos"),DKr.forEach(t),yvo=r(U6e," \u2014 "),jq=n(U6e,"A",{href:!0});var GKr=s(jq);Lvo=r(GKr,"YolosModel"),GKr.forEach(t),xvo=r(U6e," (YOLOS model)"),U6e.forEach(t),$vo=i($),qu=n($,"LI",{});var J6e=s(qu);lle=n(J6e,"STRONG",{});var OKr=s(lle);kvo=r(OKr,"yoso"),OKr.forEach(t),Svo=r(J6e," \u2014 "),Dq=n(J6e,"A",{href:!0});var VKr=s(Dq);Rvo=r(VKr,"YosoModel"),VKr.forEach(t),Bvo=r(J6e," (YOSO model)"),J6e.forEach(t),$.forEach(t),Pvo=i(Zt),Nu=n(Zt,"P",{});var Y6e=s(Nu);Ivo=r(Y6e,"The model is set in evaluation mode by default using "),ile=n(Y6e,"CODE",{});var XKr=s(ile);qvo=r(XKr,"model.eval()"),XKr.forEach(t),Nvo=r(Y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(Y6e,"CODE",{});var zKr=s(dle);jvo=r(zKr,"model.train()"),zKr.forEach(t),Y6e.forEach(t),Dvo=i(Zt),T(ju.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),wIe=i(f),wi=n(f,"H2",{class:!0});var xNe=s(wi);Du=n(xNe,"A",{id:!0,class:!0,href:!0});var QKr=s(Du);cle=n(QKr,"SPAN",{});var WKr=s(cle);T(RA.$$.fragment,WKr),WKr.forEach(t),QKr.forEach(t),Gvo=i(xNe),fle=n(xNe,"SPAN",{});var HKr=s(fle);Ovo=r(HKr,"AutoModelForPreTraining"),HKr.forEach(t),xNe.forEach(t),AIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(BA.$$.fragment,Gs),Vvo=i(Gs),Ai=n(Gs,"P",{});var MK=s(Ai);Xvo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gq=n(MK,"A",{href:!0});var UKr=s(Gq);zvo=r(UKr,"from_pretrained()"),UKr.forEach(t),Qvo=r(MK," class method or the "),Oq=n(MK,"A",{href:!0});var JKr=s(Oq);Wvo=r(JKr,"from_config()"),JKr.forEach(t),Hvo=r(MK,` class
method.`),MK.forEach(t),Uvo=i(Gs),PA=n(Gs,"P",{});var $Ne=s(PA);Jvo=r($Ne,"This class cannot be instantiated directly using "),mle=n($Ne,"CODE",{});var YKr=s(mle);Yvo=r(YKr,"__init__()"),YKr.forEach(t),Kvo=r($Ne," (throws an error)."),$Ne.forEach(t),Zvo=i(Gs),rt=n(Gs,"DIV",{class:!0});var lw=s(rt);T(IA.$$.fragment,lw),eFo=i(lw),gle=n(lw,"P",{});var KKr=s(gle);oFo=r(KKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KKr.forEach(t),rFo=i(lw),yi=n(lw,"P",{});var EK=s(yi);tFo=r(EK,`Note:
Loading a model from its configuration file does `),hle=n(EK,"STRONG",{});var ZKr=s(hle);aFo=r(ZKr,"not"),ZKr.forEach(t),nFo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=n(EK,"A",{href:!0});var eZr=s(Vq);sFo=r(eZr,"from_pretrained()"),eZr.forEach(t),lFo=r(EK," to load the model weights."),EK.forEach(t),iFo=i(lw),T(Gu.$$.fragment,lw),lw.forEach(t),dFo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(qA.$$.fragment,ea),cFo=i(ea),ple=n(ea,"P",{});var oZr=s(ple);fFo=r(oZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oZr.forEach(t),mFo=i(ea),ya=n(ea,"P",{});var iw=s(ya);gFo=r(iw,"The model class to instantiate is selected based on the "),ule=n(iw,"CODE",{});var rZr=s(ule);hFo=r(rZr,"model_type"),rZr.forEach(t),pFo=r(iw,` property of the config object (either
passed as an argument or loaded from `),_le=n(iw,"CODE",{});var tZr=s(_le);uFo=r(tZr,"pretrained_model_name_or_path"),tZr.forEach(t),_Fo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(iw,"CODE",{});var aZr=s(ble);bFo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),vFo=r(iw,":"),iw.forEach(t),FFo=i(ea),G=n(ea,"UL",{});var O=s(G);Ou=n(O,"LI",{});var K6e=s(Ou);vle=n(K6e,"STRONG",{});var nZr=s(vle);TFo=r(nZr,"albert"),nZr.forEach(t),MFo=r(K6e," \u2014 "),Xq=n(K6e,"A",{href:!0});var sZr=s(Xq);EFo=r(sZr,"AlbertForPreTraining"),sZr.forEach(t),CFo=r(K6e," (ALBERT model)"),K6e.forEach(t),wFo=i(O),Vu=n(O,"LI",{});var Z6e=s(Vu);Fle=n(Z6e,"STRONG",{});var lZr=s(Fle);AFo=r(lZr,"bart"),lZr.forEach(t),yFo=r(Z6e," \u2014 "),zq=n(Z6e,"A",{href:!0});var iZr=s(zq);LFo=r(iZr,"BartForConditionalGeneration"),iZr.forEach(t),xFo=r(Z6e," (BART model)"),Z6e.forEach(t),$Fo=i(O),Xu=n(O,"LI",{});var eAe=s(Xu);Tle=n(eAe,"STRONG",{});var dZr=s(Tle);kFo=r(dZr,"bert"),dZr.forEach(t),SFo=r(eAe," \u2014 "),Qq=n(eAe,"A",{href:!0});var cZr=s(Qq);RFo=r(cZr,"BertForPreTraining"),cZr.forEach(t),BFo=r(eAe," (BERT model)"),eAe.forEach(t),PFo=i(O),zu=n(O,"LI",{});var oAe=s(zu);Mle=n(oAe,"STRONG",{});var fZr=s(Mle);IFo=r(fZr,"big_bird"),fZr.forEach(t),qFo=r(oAe," \u2014 "),Wq=n(oAe,"A",{href:!0});var mZr=s(Wq);NFo=r(mZr,"BigBirdForPreTraining"),mZr.forEach(t),jFo=r(oAe," (BigBird model)"),oAe.forEach(t),DFo=i(O),Qu=n(O,"LI",{});var rAe=s(Qu);Ele=n(rAe,"STRONG",{});var gZr=s(Ele);GFo=r(gZr,"bigscience176b"),gZr.forEach(t),OFo=r(rAe," \u2014 "),Hq=n(rAe,"A",{href:!0});var hZr=s(Hq);VFo=r(hZr,"BigScience176BLMHeadModel"),hZr.forEach(t),XFo=r(rAe," (BigScience176B model)"),rAe.forEach(t),zFo=i(O),Wu=n(O,"LI",{});var tAe=s(Wu);Cle=n(tAe,"STRONG",{});var pZr=s(Cle);QFo=r(pZr,"camembert"),pZr.forEach(t),WFo=r(tAe," \u2014 "),Uq=n(tAe,"A",{href:!0});var uZr=s(Uq);HFo=r(uZr,"CamembertForMaskedLM"),uZr.forEach(t),UFo=r(tAe," (CamemBERT model)"),tAe.forEach(t),JFo=i(O),Hu=n(O,"LI",{});var aAe=s(Hu);wle=n(aAe,"STRONG",{});var _Zr=s(wle);YFo=r(_Zr,"ctrl"),_Zr.forEach(t),KFo=r(aAe," \u2014 "),Jq=n(aAe,"A",{href:!0});var bZr=s(Jq);ZFo=r(bZr,"CTRLLMHeadModel"),bZr.forEach(t),e0o=r(aAe," (CTRL model)"),aAe.forEach(t),o0o=i(O),Uu=n(O,"LI",{});var nAe=s(Uu);Ale=n(nAe,"STRONG",{});var vZr=s(Ale);r0o=r(vZr,"data2vec-text"),vZr.forEach(t),t0o=r(nAe," \u2014 "),Yq=n(nAe,"A",{href:!0});var FZr=s(Yq);a0o=r(FZr,"Data2VecTextForMaskedLM"),FZr.forEach(t),n0o=r(nAe," (Data2VecText model)"),nAe.forEach(t),s0o=i(O),Ju=n(O,"LI",{});var sAe=s(Ju);yle=n(sAe,"STRONG",{});var TZr=s(yle);l0o=r(TZr,"deberta"),TZr.forEach(t),i0o=r(sAe," \u2014 "),Kq=n(sAe,"A",{href:!0});var MZr=s(Kq);d0o=r(MZr,"DebertaForMaskedLM"),MZr.forEach(t),c0o=r(sAe," (DeBERTa model)"),sAe.forEach(t),f0o=i(O),Yu=n(O,"LI",{});var lAe=s(Yu);Lle=n(lAe,"STRONG",{});var EZr=s(Lle);m0o=r(EZr,"deberta-v2"),EZr.forEach(t),g0o=r(lAe," \u2014 "),Zq=n(lAe,"A",{href:!0});var CZr=s(Zq);h0o=r(CZr,"DebertaV2ForMaskedLM"),CZr.forEach(t),p0o=r(lAe," (DeBERTa-v2 model)"),lAe.forEach(t),u0o=i(O),Ku=n(O,"LI",{});var iAe=s(Ku);xle=n(iAe,"STRONG",{});var wZr=s(xle);_0o=r(wZr,"distilbert"),wZr.forEach(t),b0o=r(iAe," \u2014 "),eN=n(iAe,"A",{href:!0});var AZr=s(eN);v0o=r(AZr,"DistilBertForMaskedLM"),AZr.forEach(t),F0o=r(iAe," (DistilBERT model)"),iAe.forEach(t),T0o=i(O),Zu=n(O,"LI",{});var dAe=s(Zu);$le=n(dAe,"STRONG",{});var yZr=s($le);M0o=r(yZr,"electra"),yZr.forEach(t),E0o=r(dAe," \u2014 "),oN=n(dAe,"A",{href:!0});var LZr=s(oN);C0o=r(LZr,"ElectraForPreTraining"),LZr.forEach(t),w0o=r(dAe," (ELECTRA model)"),dAe.forEach(t),A0o=i(O),e_=n(O,"LI",{});var cAe=s(e_);kle=n(cAe,"STRONG",{});var xZr=s(kle);y0o=r(xZr,"flaubert"),xZr.forEach(t),L0o=r(cAe," \u2014 "),rN=n(cAe,"A",{href:!0});var $Zr=s(rN);x0o=r($Zr,"FlaubertWithLMHeadModel"),$Zr.forEach(t),$0o=r(cAe," (FlauBERT model)"),cAe.forEach(t),k0o=i(O),o_=n(O,"LI",{});var fAe=s(o_);Sle=n(fAe,"STRONG",{});var kZr=s(Sle);S0o=r(kZr,"flava"),kZr.forEach(t),R0o=r(fAe," \u2014 "),tN=n(fAe,"A",{href:!0});var SZr=s(tN);B0o=r(SZr,"FlavaForPreTraining"),SZr.forEach(t),P0o=r(fAe," (Flava model)"),fAe.forEach(t),I0o=i(O),r_=n(O,"LI",{});var mAe=s(r_);Rle=n(mAe,"STRONG",{});var RZr=s(Rle);q0o=r(RZr,"fnet"),RZr.forEach(t),N0o=r(mAe," \u2014 "),aN=n(mAe,"A",{href:!0});var BZr=s(aN);j0o=r(BZr,"FNetForPreTraining"),BZr.forEach(t),D0o=r(mAe," (FNet model)"),mAe.forEach(t),G0o=i(O),t_=n(O,"LI",{});var gAe=s(t_);Ble=n(gAe,"STRONG",{});var PZr=s(Ble);O0o=r(PZr,"fsmt"),PZr.forEach(t),V0o=r(gAe," \u2014 "),nN=n(gAe,"A",{href:!0});var IZr=s(nN);X0o=r(IZr,"FSMTForConditionalGeneration"),IZr.forEach(t),z0o=r(gAe," (FairSeq Machine-Translation model)"),gAe.forEach(t),Q0o=i(O),a_=n(O,"LI",{});var hAe=s(a_);Ple=n(hAe,"STRONG",{});var qZr=s(Ple);W0o=r(qZr,"funnel"),qZr.forEach(t),H0o=r(hAe," \u2014 "),sN=n(hAe,"A",{href:!0});var NZr=s(sN);U0o=r(NZr,"FunnelForPreTraining"),NZr.forEach(t),J0o=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),Y0o=i(O),n_=n(O,"LI",{});var pAe=s(n_);Ile=n(pAe,"STRONG",{});var jZr=s(Ile);K0o=r(jZr,"gpt2"),jZr.forEach(t),Z0o=r(pAe," \u2014 "),lN=n(pAe,"A",{href:!0});var DZr=s(lN);eTo=r(DZr,"GPT2LMHeadModel"),DZr.forEach(t),oTo=r(pAe," (OpenAI GPT-2 model)"),pAe.forEach(t),rTo=i(O),s_=n(O,"LI",{});var uAe=s(s_);qle=n(uAe,"STRONG",{});var GZr=s(qle);tTo=r(GZr,"ibert"),GZr.forEach(t),aTo=r(uAe," \u2014 "),iN=n(uAe,"A",{href:!0});var OZr=s(iN);nTo=r(OZr,"IBertForMaskedLM"),OZr.forEach(t),sTo=r(uAe," (I-BERT model)"),uAe.forEach(t),lTo=i(O),l_=n(O,"LI",{});var _Ae=s(l_);Nle=n(_Ae,"STRONG",{});var VZr=s(Nle);iTo=r(VZr,"layoutlm"),VZr.forEach(t),dTo=r(_Ae," \u2014 "),dN=n(_Ae,"A",{href:!0});var XZr=s(dN);cTo=r(XZr,"LayoutLMForMaskedLM"),XZr.forEach(t),fTo=r(_Ae," (LayoutLM model)"),_Ae.forEach(t),mTo=i(O),i_=n(O,"LI",{});var bAe=s(i_);jle=n(bAe,"STRONG",{});var zZr=s(jle);gTo=r(zZr,"longformer"),zZr.forEach(t),hTo=r(bAe," \u2014 "),cN=n(bAe,"A",{href:!0});var QZr=s(cN);pTo=r(QZr,"LongformerForMaskedLM"),QZr.forEach(t),uTo=r(bAe," (Longformer model)"),bAe.forEach(t),_To=i(O),d_=n(O,"LI",{});var vAe=s(d_);Dle=n(vAe,"STRONG",{});var WZr=s(Dle);bTo=r(WZr,"lxmert"),WZr.forEach(t),vTo=r(vAe," \u2014 "),fN=n(vAe,"A",{href:!0});var HZr=s(fN);FTo=r(HZr,"LxmertForPreTraining"),HZr.forEach(t),TTo=r(vAe," (LXMERT model)"),vAe.forEach(t),MTo=i(O),c_=n(O,"LI",{});var FAe=s(c_);Gle=n(FAe,"STRONG",{});var UZr=s(Gle);ETo=r(UZr,"megatron-bert"),UZr.forEach(t),CTo=r(FAe," \u2014 "),mN=n(FAe,"A",{href:!0});var JZr=s(mN);wTo=r(JZr,"MegatronBertForPreTraining"),JZr.forEach(t),ATo=r(FAe," (MegatronBert model)"),FAe.forEach(t),yTo=i(O),f_=n(O,"LI",{});var TAe=s(f_);Ole=n(TAe,"STRONG",{});var YZr=s(Ole);LTo=r(YZr,"mobilebert"),YZr.forEach(t),xTo=r(TAe," \u2014 "),gN=n(TAe,"A",{href:!0});var KZr=s(gN);$To=r(KZr,"MobileBertForPreTraining"),KZr.forEach(t),kTo=r(TAe," (MobileBERT model)"),TAe.forEach(t),STo=i(O),m_=n(O,"LI",{});var MAe=s(m_);Vle=n(MAe,"STRONG",{});var ZZr=s(Vle);RTo=r(ZZr,"mpnet"),ZZr.forEach(t),BTo=r(MAe," \u2014 "),hN=n(MAe,"A",{href:!0});var eet=s(hN);PTo=r(eet,"MPNetForMaskedLM"),eet.forEach(t),ITo=r(MAe," (MPNet model)"),MAe.forEach(t),qTo=i(O),g_=n(O,"LI",{});var EAe=s(g_);Xle=n(EAe,"STRONG",{});var oet=s(Xle);NTo=r(oet,"openai-gpt"),oet.forEach(t),jTo=r(EAe," \u2014 "),pN=n(EAe,"A",{href:!0});var ret=s(pN);DTo=r(ret,"OpenAIGPTLMHeadModel"),ret.forEach(t),GTo=r(EAe," (OpenAI GPT model)"),EAe.forEach(t),OTo=i(O),h_=n(O,"LI",{});var CAe=s(h_);zle=n(CAe,"STRONG",{});var tet=s(zle);VTo=r(tet,"retribert"),tet.forEach(t),XTo=r(CAe," \u2014 "),uN=n(CAe,"A",{href:!0});var aet=s(uN);zTo=r(aet,"RetriBertModel"),aet.forEach(t),QTo=r(CAe," (RetriBERT model)"),CAe.forEach(t),WTo=i(O),p_=n(O,"LI",{});var wAe=s(p_);Qle=n(wAe,"STRONG",{});var net=s(Qle);HTo=r(net,"roberta"),net.forEach(t),UTo=r(wAe," \u2014 "),_N=n(wAe,"A",{href:!0});var set=s(_N);JTo=r(set,"RobertaForMaskedLM"),set.forEach(t),YTo=r(wAe," (RoBERTa model)"),wAe.forEach(t),KTo=i(O),u_=n(O,"LI",{});var AAe=s(u_);Wle=n(AAe,"STRONG",{});var iet=s(Wle);ZTo=r(iet,"squeezebert"),iet.forEach(t),e7o=r(AAe," \u2014 "),bN=n(AAe,"A",{href:!0});var det=s(bN);o7o=r(det,"SqueezeBertForMaskedLM"),det.forEach(t),r7o=r(AAe," (SqueezeBERT model)"),AAe.forEach(t),t7o=i(O),__=n(O,"LI",{});var yAe=s(__);Hle=n(yAe,"STRONG",{});var cet=s(Hle);a7o=r(cet,"t5"),cet.forEach(t),n7o=r(yAe," \u2014 "),vN=n(yAe,"A",{href:!0});var fet=s(vN);s7o=r(fet,"T5ForConditionalGeneration"),fet.forEach(t),l7o=r(yAe," (T5 model)"),yAe.forEach(t),i7o=i(O),b_=n(O,"LI",{});var LAe=s(b_);Ule=n(LAe,"STRONG",{});var met=s(Ule);d7o=r(met,"tapas"),met.forEach(t),c7o=r(LAe," \u2014 "),FN=n(LAe,"A",{href:!0});var get=s(FN);f7o=r(get,"TapasForMaskedLM"),get.forEach(t),m7o=r(LAe," (TAPAS model)"),LAe.forEach(t),g7o=i(O),v_=n(O,"LI",{});var xAe=s(v_);Jle=n(xAe,"STRONG",{});var het=s(Jle);h7o=r(het,"transfo-xl"),het.forEach(t),p7o=r(xAe," \u2014 "),TN=n(xAe,"A",{href:!0});var pet=s(TN);u7o=r(pet,"TransfoXLLMHeadModel"),pet.forEach(t),_7o=r(xAe," (Transformer-XL model)"),xAe.forEach(t),b7o=i(O),F_=n(O,"LI",{});var $Ae=s(F_);Yle=n($Ae,"STRONG",{});var uet=s(Yle);v7o=r(uet,"unispeech"),uet.forEach(t),F7o=r($Ae," \u2014 "),MN=n($Ae,"A",{href:!0});var _et=s(MN);T7o=r(_et,"UniSpeechForPreTraining"),_et.forEach(t),M7o=r($Ae," (UniSpeech model)"),$Ae.forEach(t),E7o=i(O),T_=n(O,"LI",{});var kAe=s(T_);Kle=n(kAe,"STRONG",{});var bet=s(Kle);C7o=r(bet,"unispeech-sat"),bet.forEach(t),w7o=r(kAe," \u2014 "),EN=n(kAe,"A",{href:!0});var vet=s(EN);A7o=r(vet,"UniSpeechSatForPreTraining"),vet.forEach(t),y7o=r(kAe," (UniSpeechSat model)"),kAe.forEach(t),L7o=i(O),M_=n(O,"LI",{});var SAe=s(M_);Zle=n(SAe,"STRONG",{});var Fet=s(Zle);x7o=r(Fet,"visual_bert"),Fet.forEach(t),$7o=r(SAe," \u2014 "),CN=n(SAe,"A",{href:!0});var Tet=s(CN);k7o=r(Tet,"VisualBertForPreTraining"),Tet.forEach(t),S7o=r(SAe," (VisualBert model)"),SAe.forEach(t),R7o=i(O),E_=n(O,"LI",{});var RAe=s(E_);eie=n(RAe,"STRONG",{});var Met=s(eie);B7o=r(Met,"vit_mae"),Met.forEach(t),P7o=r(RAe," \u2014 "),wN=n(RAe,"A",{href:!0});var Eet=s(wN);I7o=r(Eet,"ViTMAEForPreTraining"),Eet.forEach(t),q7o=r(RAe," (ViTMAE model)"),RAe.forEach(t),N7o=i(O),C_=n(O,"LI",{});var BAe=s(C_);oie=n(BAe,"STRONG",{});var Cet=s(oie);j7o=r(Cet,"wav2vec2"),Cet.forEach(t),D7o=r(BAe," \u2014 "),AN=n(BAe,"A",{href:!0});var wet=s(AN);G7o=r(wet,"Wav2Vec2ForPreTraining"),wet.forEach(t),O7o=r(BAe," (Wav2Vec2 model)"),BAe.forEach(t),V7o=i(O),w_=n(O,"LI",{});var PAe=s(w_);rie=n(PAe,"STRONG",{});var Aet=s(rie);X7o=r(Aet,"xlm"),Aet.forEach(t),z7o=r(PAe," \u2014 "),yN=n(PAe,"A",{href:!0});var yet=s(yN);Q7o=r(yet,"XLMWithLMHeadModel"),yet.forEach(t),W7o=r(PAe," (XLM model)"),PAe.forEach(t),H7o=i(O),A_=n(O,"LI",{});var IAe=s(A_);tie=n(IAe,"STRONG",{});var Let=s(tie);U7o=r(Let,"xlm-roberta"),Let.forEach(t),J7o=r(IAe," \u2014 "),LN=n(IAe,"A",{href:!0});var xet=s(LN);Y7o=r(xet,"XLMRobertaForMaskedLM"),xet.forEach(t),K7o=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),Z7o=i(O),y_=n(O,"LI",{});var qAe=s(y_);aie=n(qAe,"STRONG",{});var $et=s(aie);eMo=r($et,"xlm-roberta-xl"),$et.forEach(t),oMo=r(qAe," \u2014 "),xN=n(qAe,"A",{href:!0});var ket=s(xN);rMo=r(ket,"XLMRobertaXLForMaskedLM"),ket.forEach(t),tMo=r(qAe," (XLM-RoBERTa-XL model)"),qAe.forEach(t),aMo=i(O),L_=n(O,"LI",{});var NAe=s(L_);nie=n(NAe,"STRONG",{});var Set=s(nie);nMo=r(Set,"xlnet"),Set.forEach(t),sMo=r(NAe," \u2014 "),$N=n(NAe,"A",{href:!0});var Ret=s($N);lMo=r(Ret,"XLNetLMHeadModel"),Ret.forEach(t),iMo=r(NAe," (XLNet model)"),NAe.forEach(t),O.forEach(t),dMo=i(ea),x_=n(ea,"P",{});var jAe=s(x_);cMo=r(jAe,"The model is set in evaluation mode by default using "),sie=n(jAe,"CODE",{});var Bet=s(sie);fMo=r(Bet,"model.eval()"),Bet.forEach(t),mMo=r(jAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lie=n(jAe,"CODE",{});var Pet=s(lie);gMo=r(Pet,"model.train()"),Pet.forEach(t),jAe.forEach(t),hMo=i(ea),T($_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),yIe=i(f),Li=n(f,"H2",{class:!0});var kNe=s(Li);k_=n(kNe,"A",{id:!0,class:!0,href:!0});var Iet=s(k_);iie=n(Iet,"SPAN",{});var qet=s(iie);T(NA.$$.fragment,qet),qet.forEach(t),Iet.forEach(t),pMo=i(kNe),die=n(kNe,"SPAN",{});var Net=s(die);uMo=r(Net,"AutoModelForCausalLM"),Net.forEach(t),kNe.forEach(t),LIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(jA.$$.fragment,Os),_Mo=i(Os),xi=n(Os,"P",{});var CK=s(xi);bMo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kN=n(CK,"A",{href:!0});var jet=s(kN);vMo=r(jet,"from_pretrained()"),jet.forEach(t),FMo=r(CK," class method or the "),SN=n(CK,"A",{href:!0});var Det=s(SN);TMo=r(Det,"from_config()"),Det.forEach(t),MMo=r(CK,` class
method.`),CK.forEach(t),EMo=i(Os),DA=n(Os,"P",{});var SNe=s(DA);CMo=r(SNe,"This class cannot be instantiated directly using "),cie=n(SNe,"CODE",{});var Get=s(cie);wMo=r(Get,"__init__()"),Get.forEach(t),AMo=r(SNe," (throws an error)."),SNe.forEach(t),yMo=i(Os),tt=n(Os,"DIV",{class:!0});var dw=s(tt);T(GA.$$.fragment,dw),LMo=i(dw),fie=n(dw,"P",{});var Oet=s(fie);xMo=r(Oet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oet.forEach(t),$Mo=i(dw),$i=n(dw,"P",{});var wK=s($i);kMo=r(wK,`Note:
Loading a model from its configuration file does `),mie=n(wK,"STRONG",{});var Vet=s(mie);SMo=r(Vet,"not"),Vet.forEach(t),RMo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RN=n(wK,"A",{href:!0});var Xet=s(RN);BMo=r(Xet,"from_pretrained()"),Xet.forEach(t),PMo=r(wK," to load the model weights."),wK.forEach(t),IMo=i(dw),T(S_.$$.fragment,dw),dw.forEach(t),qMo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(OA.$$.fragment,oa),NMo=i(oa),gie=n(oa,"P",{});var zet=s(gie);jMo=r(zet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zet.forEach(t),DMo=i(oa),La=n(oa,"P",{});var cw=s(La);GMo=r(cw,"The model class to instantiate is selected based on the "),hie=n(cw,"CODE",{});var Qet=s(hie);OMo=r(Qet,"model_type"),Qet.forEach(t),VMo=r(cw,` property of the config object (either
passed as an argument or loaded from `),pie=n(cw,"CODE",{});var Wet=s(pie);XMo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),zMo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(cw,"CODE",{});var Het=s(uie);QMo=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),WMo=r(cw,":"),cw.forEach(t),HMo=i(oa),z=n(oa,"UL",{});var Q=s(z);R_=n(Q,"LI",{});var DAe=s(R_);_ie=n(DAe,"STRONG",{});var Uet=s(_ie);UMo=r(Uet,"bart"),Uet.forEach(t),JMo=r(DAe," \u2014 "),BN=n(DAe,"A",{href:!0});var Jet=s(BN);YMo=r(Jet,"BartForCausalLM"),Jet.forEach(t),KMo=r(DAe," (BART model)"),DAe.forEach(t),ZMo=i(Q),B_=n(Q,"LI",{});var GAe=s(B_);bie=n(GAe,"STRONG",{});var Yet=s(bie);e4o=r(Yet,"bert"),Yet.forEach(t),o4o=r(GAe," \u2014 "),PN=n(GAe,"A",{href:!0});var Ket=s(PN);r4o=r(Ket,"BertLMHeadModel"),Ket.forEach(t),t4o=r(GAe," (BERT model)"),GAe.forEach(t),a4o=i(Q),P_=n(Q,"LI",{});var OAe=s(P_);vie=n(OAe,"STRONG",{});var Zet=s(vie);n4o=r(Zet,"bert-generation"),Zet.forEach(t),s4o=r(OAe," \u2014 "),IN=n(OAe,"A",{href:!0});var eot=s(IN);l4o=r(eot,"BertGenerationDecoder"),eot.forEach(t),i4o=r(OAe," (Bert Generation model)"),OAe.forEach(t),d4o=i(Q),I_=n(Q,"LI",{});var VAe=s(I_);Fie=n(VAe,"STRONG",{});var oot=s(Fie);c4o=r(oot,"big_bird"),oot.forEach(t),f4o=r(VAe," \u2014 "),qN=n(VAe,"A",{href:!0});var rot=s(qN);m4o=r(rot,"BigBirdForCausalLM"),rot.forEach(t),g4o=r(VAe," (BigBird model)"),VAe.forEach(t),h4o=i(Q),q_=n(Q,"LI",{});var XAe=s(q_);Tie=n(XAe,"STRONG",{});var tot=s(Tie);p4o=r(tot,"bigbird_pegasus"),tot.forEach(t),u4o=r(XAe," \u2014 "),NN=n(XAe,"A",{href:!0});var aot=s(NN);_4o=r(aot,"BigBirdPegasusForCausalLM"),aot.forEach(t),b4o=r(XAe," (BigBirdPegasus model)"),XAe.forEach(t),v4o=i(Q),N_=n(Q,"LI",{});var zAe=s(N_);Mie=n(zAe,"STRONG",{});var not=s(Mie);F4o=r(not,"bigscience176b"),not.forEach(t),T4o=r(zAe," \u2014 "),jN=n(zAe,"A",{href:!0});var sot=s(jN);M4o=r(sot,"BigScience176BLMHeadModel"),sot.forEach(t),E4o=r(zAe," (BigScience176B model)"),zAe.forEach(t),C4o=i(Q),j_=n(Q,"LI",{});var QAe=s(j_);Eie=n(QAe,"STRONG",{});var lot=s(Eie);w4o=r(lot,"blenderbot"),lot.forEach(t),A4o=r(QAe," \u2014 "),DN=n(QAe,"A",{href:!0});var iot=s(DN);y4o=r(iot,"BlenderbotForCausalLM"),iot.forEach(t),L4o=r(QAe," (Blenderbot model)"),QAe.forEach(t),x4o=i(Q),D_=n(Q,"LI",{});var WAe=s(D_);Cie=n(WAe,"STRONG",{});var dot=s(Cie);$4o=r(dot,"blenderbot-small"),dot.forEach(t),k4o=r(WAe," \u2014 "),GN=n(WAe,"A",{href:!0});var cot=s(GN);S4o=r(cot,"BlenderbotSmallForCausalLM"),cot.forEach(t),R4o=r(WAe," (BlenderbotSmall model)"),WAe.forEach(t),B4o=i(Q),G_=n(Q,"LI",{});var HAe=s(G_);wie=n(HAe,"STRONG",{});var fot=s(wie);P4o=r(fot,"camembert"),fot.forEach(t),I4o=r(HAe," \u2014 "),ON=n(HAe,"A",{href:!0});var mot=s(ON);q4o=r(mot,"CamembertForCausalLM"),mot.forEach(t),N4o=r(HAe," (CamemBERT model)"),HAe.forEach(t),j4o=i(Q),O_=n(Q,"LI",{});var UAe=s(O_);Aie=n(UAe,"STRONG",{});var got=s(Aie);D4o=r(got,"ctrl"),got.forEach(t),G4o=r(UAe," \u2014 "),VN=n(UAe,"A",{href:!0});var hot=s(VN);O4o=r(hot,"CTRLLMHeadModel"),hot.forEach(t),V4o=r(UAe," (CTRL model)"),UAe.forEach(t),X4o=i(Q),V_=n(Q,"LI",{});var JAe=s(V_);yie=n(JAe,"STRONG",{});var pot=s(yie);z4o=r(pot,"data2vec-text"),pot.forEach(t),Q4o=r(JAe," \u2014 "),XN=n(JAe,"A",{href:!0});var uot=s(XN);W4o=r(uot,"Data2VecTextForCausalLM"),uot.forEach(t),H4o=r(JAe," (Data2VecText model)"),JAe.forEach(t),U4o=i(Q),X_=n(Q,"LI",{});var YAe=s(X_);Lie=n(YAe,"STRONG",{});var _ot=s(Lie);J4o=r(_ot,"electra"),_ot.forEach(t),Y4o=r(YAe," \u2014 "),zN=n(YAe,"A",{href:!0});var bot=s(zN);K4o=r(bot,"ElectraForCausalLM"),bot.forEach(t),Z4o=r(YAe," (ELECTRA model)"),YAe.forEach(t),eEo=i(Q),z_=n(Q,"LI",{});var KAe=s(z_);xie=n(KAe,"STRONG",{});var vot=s(xie);oEo=r(vot,"gpt2"),vot.forEach(t),rEo=r(KAe," \u2014 "),QN=n(KAe,"A",{href:!0});var Fot=s(QN);tEo=r(Fot,"GPT2LMHeadModel"),Fot.forEach(t),aEo=r(KAe," (OpenAI GPT-2 model)"),KAe.forEach(t),nEo=i(Q),Q_=n(Q,"LI",{});var ZAe=s(Q_);$ie=n(ZAe,"STRONG",{});var Tot=s($ie);sEo=r(Tot,"gpt_neo"),Tot.forEach(t),lEo=r(ZAe," \u2014 "),WN=n(ZAe,"A",{href:!0});var Mot=s(WN);iEo=r(Mot,"GPTNeoForCausalLM"),Mot.forEach(t),dEo=r(ZAe," (GPT Neo model)"),ZAe.forEach(t),cEo=i(Q),W_=n(Q,"LI",{});var eye=s(W_);kie=n(eye,"STRONG",{});var Eot=s(kie);fEo=r(Eot,"gptj"),Eot.forEach(t),mEo=r(eye," \u2014 "),HN=n(eye,"A",{href:!0});var Cot=s(HN);gEo=r(Cot,"GPTJForCausalLM"),Cot.forEach(t),hEo=r(eye," (GPT-J model)"),eye.forEach(t),pEo=i(Q),H_=n(Q,"LI",{});var oye=s(H_);Sie=n(oye,"STRONG",{});var wot=s(Sie);uEo=r(wot,"marian"),wot.forEach(t),_Eo=r(oye," \u2014 "),UN=n(oye,"A",{href:!0});var Aot=s(UN);bEo=r(Aot,"MarianForCausalLM"),Aot.forEach(t),vEo=r(oye," (Marian model)"),oye.forEach(t),FEo=i(Q),U_=n(Q,"LI",{});var rye=s(U_);Rie=n(rye,"STRONG",{});var yot=s(Rie);TEo=r(yot,"mbart"),yot.forEach(t),MEo=r(rye," \u2014 "),JN=n(rye,"A",{href:!0});var Lot=s(JN);EEo=r(Lot,"MBartForCausalLM"),Lot.forEach(t),CEo=r(rye," (mBART model)"),rye.forEach(t),wEo=i(Q),J_=n(Q,"LI",{});var tye=s(J_);Bie=n(tye,"STRONG",{});var xot=s(Bie);AEo=r(xot,"megatron-bert"),xot.forEach(t),yEo=r(tye," \u2014 "),YN=n(tye,"A",{href:!0});var $ot=s(YN);LEo=r($ot,"MegatronBertForCausalLM"),$ot.forEach(t),xEo=r(tye," (MegatronBert model)"),tye.forEach(t),$Eo=i(Q),Y_=n(Q,"LI",{});var aye=s(Y_);Pie=n(aye,"STRONG",{});var kot=s(Pie);kEo=r(kot,"openai-gpt"),kot.forEach(t),SEo=r(aye," \u2014 "),KN=n(aye,"A",{href:!0});var Sot=s(KN);REo=r(Sot,"OpenAIGPTLMHeadModel"),Sot.forEach(t),BEo=r(aye," (OpenAI GPT model)"),aye.forEach(t),PEo=i(Q),K_=n(Q,"LI",{});var nye=s(K_);Iie=n(nye,"STRONG",{});var Rot=s(Iie);IEo=r(Rot,"opt"),Rot.forEach(t),qEo=r(nye," \u2014 "),ZN=n(nye,"A",{href:!0});var Bot=s(ZN);NEo=r(Bot,"OPTForCausalLM"),Bot.forEach(t),jEo=r(nye," (OPT model)"),nye.forEach(t),DEo=i(Q),Z_=n(Q,"LI",{});var sye=s(Z_);qie=n(sye,"STRONG",{});var Pot=s(qie);GEo=r(Pot,"pegasus"),Pot.forEach(t),OEo=r(sye," \u2014 "),ej=n(sye,"A",{href:!0});var Iot=s(ej);VEo=r(Iot,"PegasusForCausalLM"),Iot.forEach(t),XEo=r(sye," (Pegasus model)"),sye.forEach(t),zEo=i(Q),e2=n(Q,"LI",{});var lye=s(e2);Nie=n(lye,"STRONG",{});var qot=s(Nie);QEo=r(qot,"plbart"),qot.forEach(t),WEo=r(lye," \u2014 "),oj=n(lye,"A",{href:!0});var Not=s(oj);HEo=r(Not,"PLBartForCausalLM"),Not.forEach(t),UEo=r(lye," (PLBart model)"),lye.forEach(t),JEo=i(Q),o2=n(Q,"LI",{});var iye=s(o2);jie=n(iye,"STRONG",{});var jot=s(jie);YEo=r(jot,"prophetnet"),jot.forEach(t),KEo=r(iye," \u2014 "),rj=n(iye,"A",{href:!0});var Dot=s(rj);ZEo=r(Dot,"ProphetNetForCausalLM"),Dot.forEach(t),e5o=r(iye," (ProphetNet model)"),iye.forEach(t),o5o=i(Q),r2=n(Q,"LI",{});var dye=s(r2);Die=n(dye,"STRONG",{});var Got=s(Die);r5o=r(Got,"qdqbert"),Got.forEach(t),t5o=r(dye," \u2014 "),tj=n(dye,"A",{href:!0});var Oot=s(tj);a5o=r(Oot,"QDQBertLMHeadModel"),Oot.forEach(t),n5o=r(dye," (QDQBert model)"),dye.forEach(t),s5o=i(Q),t2=n(Q,"LI",{});var cye=s(t2);Gie=n(cye,"STRONG",{});var Vot=s(Gie);l5o=r(Vot,"reformer"),Vot.forEach(t),i5o=r(cye," \u2014 "),aj=n(cye,"A",{href:!0});var Xot=s(aj);d5o=r(Xot,"ReformerModelWithLMHead"),Xot.forEach(t),c5o=r(cye," (Reformer model)"),cye.forEach(t),f5o=i(Q),a2=n(Q,"LI",{});var fye=s(a2);Oie=n(fye,"STRONG",{});var zot=s(Oie);m5o=r(zot,"rembert"),zot.forEach(t),g5o=r(fye," \u2014 "),nj=n(fye,"A",{href:!0});var Qot=s(nj);h5o=r(Qot,"RemBertForCausalLM"),Qot.forEach(t),p5o=r(fye," (RemBERT model)"),fye.forEach(t),u5o=i(Q),n2=n(Q,"LI",{});var mye=s(n2);Vie=n(mye,"STRONG",{});var Wot=s(Vie);_5o=r(Wot,"roberta"),Wot.forEach(t),b5o=r(mye," \u2014 "),sj=n(mye,"A",{href:!0});var Hot=s(sj);v5o=r(Hot,"RobertaForCausalLM"),Hot.forEach(t),F5o=r(mye," (RoBERTa model)"),mye.forEach(t),T5o=i(Q),s2=n(Q,"LI",{});var gye=s(s2);Xie=n(gye,"STRONG",{});var Uot=s(Xie);M5o=r(Uot,"roformer"),Uot.forEach(t),E5o=r(gye," \u2014 "),lj=n(gye,"A",{href:!0});var Jot=s(lj);C5o=r(Jot,"RoFormerForCausalLM"),Jot.forEach(t),w5o=r(gye," (RoFormer model)"),gye.forEach(t),A5o=i(Q),l2=n(Q,"LI",{});var hye=s(l2);zie=n(hye,"STRONG",{});var Yot=s(zie);y5o=r(Yot,"speech_to_text_2"),Yot.forEach(t),L5o=r(hye," \u2014 "),ij=n(hye,"A",{href:!0});var Kot=s(ij);x5o=r(Kot,"Speech2Text2ForCausalLM"),Kot.forEach(t),$5o=r(hye," (Speech2Text2 model)"),hye.forEach(t),k5o=i(Q),i2=n(Q,"LI",{});var pye=s(i2);Qie=n(pye,"STRONG",{});var Zot=s(Qie);S5o=r(Zot,"transfo-xl"),Zot.forEach(t),R5o=r(pye," \u2014 "),dj=n(pye,"A",{href:!0});var ert=s(dj);B5o=r(ert,"TransfoXLLMHeadModel"),ert.forEach(t),P5o=r(pye," (Transformer-XL model)"),pye.forEach(t),I5o=i(Q),d2=n(Q,"LI",{});var uye=s(d2);Wie=n(uye,"STRONG",{});var ort=s(Wie);q5o=r(ort,"trocr"),ort.forEach(t),N5o=r(uye," \u2014 "),cj=n(uye,"A",{href:!0});var rrt=s(cj);j5o=r(rrt,"TrOCRForCausalLM"),rrt.forEach(t),D5o=r(uye," (TrOCR model)"),uye.forEach(t),G5o=i(Q),c2=n(Q,"LI",{});var _ye=s(c2);Hie=n(_ye,"STRONG",{});var trt=s(Hie);O5o=r(trt,"xglm"),trt.forEach(t),V5o=r(_ye," \u2014 "),fj=n(_ye,"A",{href:!0});var art=s(fj);X5o=r(art,"XGLMForCausalLM"),art.forEach(t),z5o=r(_ye," (XGLM model)"),_ye.forEach(t),Q5o=i(Q),f2=n(Q,"LI",{});var bye=s(f2);Uie=n(bye,"STRONG",{});var nrt=s(Uie);W5o=r(nrt,"xlm"),nrt.forEach(t),H5o=r(bye," \u2014 "),mj=n(bye,"A",{href:!0});var srt=s(mj);U5o=r(srt,"XLMWithLMHeadModel"),srt.forEach(t),J5o=r(bye," (XLM model)"),bye.forEach(t),Y5o=i(Q),m2=n(Q,"LI",{});var vye=s(m2);Jie=n(vye,"STRONG",{});var lrt=s(Jie);K5o=r(lrt,"xlm-prophetnet"),lrt.forEach(t),Z5o=r(vye," \u2014 "),gj=n(vye,"A",{href:!0});var irt=s(gj);eCo=r(irt,"XLMProphetNetForCausalLM"),irt.forEach(t),oCo=r(vye," (XLMProphetNet model)"),vye.forEach(t),rCo=i(Q),g2=n(Q,"LI",{});var Fye=s(g2);Yie=n(Fye,"STRONG",{});var drt=s(Yie);tCo=r(drt,"xlm-roberta"),drt.forEach(t),aCo=r(Fye," \u2014 "),hj=n(Fye,"A",{href:!0});var crt=s(hj);nCo=r(crt,"XLMRobertaForCausalLM"),crt.forEach(t),sCo=r(Fye," (XLM-RoBERTa model)"),Fye.forEach(t),lCo=i(Q),h2=n(Q,"LI",{});var Tye=s(h2);Kie=n(Tye,"STRONG",{});var frt=s(Kie);iCo=r(frt,"xlm-roberta-xl"),frt.forEach(t),dCo=r(Tye," \u2014 "),pj=n(Tye,"A",{href:!0});var mrt=s(pj);cCo=r(mrt,"XLMRobertaXLForCausalLM"),mrt.forEach(t),fCo=r(Tye," (XLM-RoBERTa-XL model)"),Tye.forEach(t),mCo=i(Q),p2=n(Q,"LI",{});var Mye=s(p2);Zie=n(Mye,"STRONG",{});var grt=s(Zie);gCo=r(grt,"xlnet"),grt.forEach(t),hCo=r(Mye," \u2014 "),uj=n(Mye,"A",{href:!0});var hrt=s(uj);pCo=r(hrt,"XLNetLMHeadModel"),hrt.forEach(t),uCo=r(Mye," (XLNet model)"),Mye.forEach(t),Q.forEach(t),_Co=i(oa),u2=n(oa,"P",{});var Eye=s(u2);bCo=r(Eye,"The model is set in evaluation mode by default using "),ede=n(Eye,"CODE",{});var prt=s(ede);vCo=r(prt,"model.eval()"),prt.forEach(t),FCo=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(Eye,"CODE",{});var urt=s(ode);TCo=r(urt,"model.train()"),urt.forEach(t),Eye.forEach(t),MCo=i(oa),T(_2.$$.fragment,oa),oa.forEach(t),Os.forEach(t),xIe=i(f),ki=n(f,"H2",{class:!0});var RNe=s(ki);b2=n(RNe,"A",{id:!0,class:!0,href:!0});var _rt=s(b2);rde=n(_rt,"SPAN",{});var brt=s(rde);T(VA.$$.fragment,brt),brt.forEach(t),_rt.forEach(t),ECo=i(RNe),tde=n(RNe,"SPAN",{});var vrt=s(tde);CCo=r(vrt,"AutoModelForMaskedLM"),vrt.forEach(t),RNe.forEach(t),$Ie=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(XA.$$.fragment,Vs),wCo=i(Vs),Si=n(Vs,"P",{});var AK=s(Si);ACo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_j=n(AK,"A",{href:!0});var Frt=s(_j);yCo=r(Frt,"from_pretrained()"),Frt.forEach(t),LCo=r(AK," class method or the "),bj=n(AK,"A",{href:!0});var Trt=s(bj);xCo=r(Trt,"from_config()"),Trt.forEach(t),$Co=r(AK,` class
method.`),AK.forEach(t),kCo=i(Vs),zA=n(Vs,"P",{});var BNe=s(zA);SCo=r(BNe,"This class cannot be instantiated directly using "),ade=n(BNe,"CODE",{});var Mrt=s(ade);RCo=r(Mrt,"__init__()"),Mrt.forEach(t),BCo=r(BNe," (throws an error)."),BNe.forEach(t),PCo=i(Vs),at=n(Vs,"DIV",{class:!0});var fw=s(at);T(QA.$$.fragment,fw),ICo=i(fw),nde=n(fw,"P",{});var Ert=s(nde);qCo=r(Ert,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ert.forEach(t),NCo=i(fw),Ri=n(fw,"P",{});var yK=s(Ri);jCo=r(yK,`Note:
Loading a model from its configuration file does `),sde=n(yK,"STRONG",{});var Crt=s(sde);DCo=r(Crt,"not"),Crt.forEach(t),GCo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vj=n(yK,"A",{href:!0});var wrt=s(vj);OCo=r(wrt,"from_pretrained()"),wrt.forEach(t),VCo=r(yK," to load the model weights."),yK.forEach(t),XCo=i(fw),T(v2.$$.fragment,fw),fw.forEach(t),zCo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(WA.$$.fragment,ra),QCo=i(ra),lde=n(ra,"P",{});var Art=s(lde);WCo=r(Art,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Art.forEach(t),HCo=i(ra),xa=n(ra,"P",{});var mw=s(xa);UCo=r(mw,"The model class to instantiate is selected based on the "),ide=n(mw,"CODE",{});var yrt=s(ide);JCo=r(yrt,"model_type"),yrt.forEach(t),YCo=r(mw,` property of the config object (either
passed as an argument or loaded from `),dde=n(mw,"CODE",{});var Lrt=s(dde);KCo=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),ZCo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(mw,"CODE",{});var xrt=s(cde);e3o=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),o3o=r(mw,":"),mw.forEach(t),r3o=i(ra),W=n(ra,"UL",{});var H=s(W);F2=n(H,"LI",{});var Cye=s(F2);fde=n(Cye,"STRONG",{});var $rt=s(fde);t3o=r($rt,"albert"),$rt.forEach(t),a3o=r(Cye," \u2014 "),Fj=n(Cye,"A",{href:!0});var krt=s(Fj);n3o=r(krt,"AlbertForMaskedLM"),krt.forEach(t),s3o=r(Cye," (ALBERT model)"),Cye.forEach(t),l3o=i(H),T2=n(H,"LI",{});var wye=s(T2);mde=n(wye,"STRONG",{});var Srt=s(mde);i3o=r(Srt,"bart"),Srt.forEach(t),d3o=r(wye," \u2014 "),Tj=n(wye,"A",{href:!0});var Rrt=s(Tj);c3o=r(Rrt,"BartForConditionalGeneration"),Rrt.forEach(t),f3o=r(wye," (BART model)"),wye.forEach(t),m3o=i(H),M2=n(H,"LI",{});var Aye=s(M2);gde=n(Aye,"STRONG",{});var Brt=s(gde);g3o=r(Brt,"bert"),Brt.forEach(t),h3o=r(Aye," \u2014 "),Mj=n(Aye,"A",{href:!0});var Prt=s(Mj);p3o=r(Prt,"BertForMaskedLM"),Prt.forEach(t),u3o=r(Aye," (BERT model)"),Aye.forEach(t),_3o=i(H),E2=n(H,"LI",{});var yye=s(E2);hde=n(yye,"STRONG",{});var Irt=s(hde);b3o=r(Irt,"big_bird"),Irt.forEach(t),v3o=r(yye," \u2014 "),Ej=n(yye,"A",{href:!0});var qrt=s(Ej);F3o=r(qrt,"BigBirdForMaskedLM"),qrt.forEach(t),T3o=r(yye," (BigBird model)"),yye.forEach(t),M3o=i(H),C2=n(H,"LI",{});var Lye=s(C2);pde=n(Lye,"STRONG",{});var Nrt=s(pde);E3o=r(Nrt,"camembert"),Nrt.forEach(t),C3o=r(Lye," \u2014 "),Cj=n(Lye,"A",{href:!0});var jrt=s(Cj);w3o=r(jrt,"CamembertForMaskedLM"),jrt.forEach(t),A3o=r(Lye," (CamemBERT model)"),Lye.forEach(t),y3o=i(H),w2=n(H,"LI",{});var xye=s(w2);ude=n(xye,"STRONG",{});var Drt=s(ude);L3o=r(Drt,"convbert"),Drt.forEach(t),x3o=r(xye," \u2014 "),wj=n(xye,"A",{href:!0});var Grt=s(wj);$3o=r(Grt,"ConvBertForMaskedLM"),Grt.forEach(t),k3o=r(xye," (ConvBERT model)"),xye.forEach(t),S3o=i(H),A2=n(H,"LI",{});var $ye=s(A2);_de=n($ye,"STRONG",{});var Ort=s(_de);R3o=r(Ort,"data2vec-text"),Ort.forEach(t),B3o=r($ye," \u2014 "),Aj=n($ye,"A",{href:!0});var Vrt=s(Aj);P3o=r(Vrt,"Data2VecTextForMaskedLM"),Vrt.forEach(t),I3o=r($ye," (Data2VecText model)"),$ye.forEach(t),q3o=i(H),y2=n(H,"LI",{});var kye=s(y2);bde=n(kye,"STRONG",{});var Xrt=s(bde);N3o=r(Xrt,"deberta"),Xrt.forEach(t),j3o=r(kye," \u2014 "),yj=n(kye,"A",{href:!0});var zrt=s(yj);D3o=r(zrt,"DebertaForMaskedLM"),zrt.forEach(t),G3o=r(kye," (DeBERTa model)"),kye.forEach(t),O3o=i(H),L2=n(H,"LI",{});var Sye=s(L2);vde=n(Sye,"STRONG",{});var Qrt=s(vde);V3o=r(Qrt,"deberta-v2"),Qrt.forEach(t),X3o=r(Sye," \u2014 "),Lj=n(Sye,"A",{href:!0});var Wrt=s(Lj);z3o=r(Wrt,"DebertaV2ForMaskedLM"),Wrt.forEach(t),Q3o=r(Sye," (DeBERTa-v2 model)"),Sye.forEach(t),W3o=i(H),x2=n(H,"LI",{});var Rye=s(x2);Fde=n(Rye,"STRONG",{});var Hrt=s(Fde);H3o=r(Hrt,"distilbert"),Hrt.forEach(t),U3o=r(Rye," \u2014 "),xj=n(Rye,"A",{href:!0});var Urt=s(xj);J3o=r(Urt,"DistilBertForMaskedLM"),Urt.forEach(t),Y3o=r(Rye," (DistilBERT model)"),Rye.forEach(t),K3o=i(H),$2=n(H,"LI",{});var Bye=s($2);Tde=n(Bye,"STRONG",{});var Jrt=s(Tde);Z3o=r(Jrt,"electra"),Jrt.forEach(t),ewo=r(Bye," \u2014 "),$j=n(Bye,"A",{href:!0});var Yrt=s($j);owo=r(Yrt,"ElectraForMaskedLM"),Yrt.forEach(t),rwo=r(Bye," (ELECTRA model)"),Bye.forEach(t),two=i(H),k2=n(H,"LI",{});var Pye=s(k2);Mde=n(Pye,"STRONG",{});var Krt=s(Mde);awo=r(Krt,"flaubert"),Krt.forEach(t),nwo=r(Pye," \u2014 "),kj=n(Pye,"A",{href:!0});var Zrt=s(kj);swo=r(Zrt,"FlaubertWithLMHeadModel"),Zrt.forEach(t),lwo=r(Pye," (FlauBERT model)"),Pye.forEach(t),iwo=i(H),S2=n(H,"LI",{});var Iye=s(S2);Ede=n(Iye,"STRONG",{});var ett=s(Ede);dwo=r(ett,"fnet"),ett.forEach(t),cwo=r(Iye," \u2014 "),Sj=n(Iye,"A",{href:!0});var ott=s(Sj);fwo=r(ott,"FNetForMaskedLM"),ott.forEach(t),mwo=r(Iye," (FNet model)"),Iye.forEach(t),gwo=i(H),R2=n(H,"LI",{});var qye=s(R2);Cde=n(qye,"STRONG",{});var rtt=s(Cde);hwo=r(rtt,"funnel"),rtt.forEach(t),pwo=r(qye," \u2014 "),Rj=n(qye,"A",{href:!0});var ttt=s(Rj);uwo=r(ttt,"FunnelForMaskedLM"),ttt.forEach(t),_wo=r(qye," (Funnel Transformer model)"),qye.forEach(t),bwo=i(H),B2=n(H,"LI",{});var Nye=s(B2);wde=n(Nye,"STRONG",{});var att=s(wde);vwo=r(att,"ibert"),att.forEach(t),Fwo=r(Nye," \u2014 "),Bj=n(Nye,"A",{href:!0});var ntt=s(Bj);Two=r(ntt,"IBertForMaskedLM"),ntt.forEach(t),Mwo=r(Nye," (I-BERT model)"),Nye.forEach(t),Ewo=i(H),P2=n(H,"LI",{});var jye=s(P2);Ade=n(jye,"STRONG",{});var stt=s(Ade);Cwo=r(stt,"layoutlm"),stt.forEach(t),wwo=r(jye," \u2014 "),Pj=n(jye,"A",{href:!0});var ltt=s(Pj);Awo=r(ltt,"LayoutLMForMaskedLM"),ltt.forEach(t),ywo=r(jye," (LayoutLM model)"),jye.forEach(t),Lwo=i(H),I2=n(H,"LI",{});var Dye=s(I2);yde=n(Dye,"STRONG",{});var itt=s(yde);xwo=r(itt,"longformer"),itt.forEach(t),$wo=r(Dye," \u2014 "),Ij=n(Dye,"A",{href:!0});var dtt=s(Ij);kwo=r(dtt,"LongformerForMaskedLM"),dtt.forEach(t),Swo=r(Dye," (Longformer model)"),Dye.forEach(t),Rwo=i(H),q2=n(H,"LI",{});var Gye=s(q2);Lde=n(Gye,"STRONG",{});var ctt=s(Lde);Bwo=r(ctt,"mbart"),ctt.forEach(t),Pwo=r(Gye," \u2014 "),qj=n(Gye,"A",{href:!0});var ftt=s(qj);Iwo=r(ftt,"MBartForConditionalGeneration"),ftt.forEach(t),qwo=r(Gye," (mBART model)"),Gye.forEach(t),Nwo=i(H),N2=n(H,"LI",{});var Oye=s(N2);xde=n(Oye,"STRONG",{});var mtt=s(xde);jwo=r(mtt,"megatron-bert"),mtt.forEach(t),Dwo=r(Oye," \u2014 "),Nj=n(Oye,"A",{href:!0});var gtt=s(Nj);Gwo=r(gtt,"MegatronBertForMaskedLM"),gtt.forEach(t),Owo=r(Oye," (MegatronBert model)"),Oye.forEach(t),Vwo=i(H),j2=n(H,"LI",{});var Vye=s(j2);$de=n(Vye,"STRONG",{});var htt=s($de);Xwo=r(htt,"mobilebert"),htt.forEach(t),zwo=r(Vye," \u2014 "),jj=n(Vye,"A",{href:!0});var ptt=s(jj);Qwo=r(ptt,"MobileBertForMaskedLM"),ptt.forEach(t),Wwo=r(Vye," (MobileBERT model)"),Vye.forEach(t),Hwo=i(H),D2=n(H,"LI",{});var Xye=s(D2);kde=n(Xye,"STRONG",{});var utt=s(kde);Uwo=r(utt,"mpnet"),utt.forEach(t),Jwo=r(Xye," \u2014 "),Dj=n(Xye,"A",{href:!0});var _tt=s(Dj);Ywo=r(_tt,"MPNetForMaskedLM"),_tt.forEach(t),Kwo=r(Xye," (MPNet model)"),Xye.forEach(t),Zwo=i(H),G2=n(H,"LI",{});var zye=s(G2);Sde=n(zye,"STRONG",{});var btt=s(Sde);e6o=r(btt,"nystromformer"),btt.forEach(t),o6o=r(zye," \u2014 "),Gj=n(zye,"A",{href:!0});var vtt=s(Gj);r6o=r(vtt,"NystromformerForMaskedLM"),vtt.forEach(t),t6o=r(zye," (Nystromformer model)"),zye.forEach(t),a6o=i(H),O2=n(H,"LI",{});var Qye=s(O2);Rde=n(Qye,"STRONG",{});var Ftt=s(Rde);n6o=r(Ftt,"perceiver"),Ftt.forEach(t),s6o=r(Qye," \u2014 "),Oj=n(Qye,"A",{href:!0});var Ttt=s(Oj);l6o=r(Ttt,"PerceiverForMaskedLM"),Ttt.forEach(t),i6o=r(Qye," (Perceiver model)"),Qye.forEach(t),d6o=i(H),V2=n(H,"LI",{});var Wye=s(V2);Bde=n(Wye,"STRONG",{});var Mtt=s(Bde);c6o=r(Mtt,"qdqbert"),Mtt.forEach(t),f6o=r(Wye," \u2014 "),Vj=n(Wye,"A",{href:!0});var Ett=s(Vj);m6o=r(Ett,"QDQBertForMaskedLM"),Ett.forEach(t),g6o=r(Wye," (QDQBert model)"),Wye.forEach(t),h6o=i(H),X2=n(H,"LI",{});var Hye=s(X2);Pde=n(Hye,"STRONG",{});var Ctt=s(Pde);p6o=r(Ctt,"reformer"),Ctt.forEach(t),u6o=r(Hye," \u2014 "),Xj=n(Hye,"A",{href:!0});var wtt=s(Xj);_6o=r(wtt,"ReformerForMaskedLM"),wtt.forEach(t),b6o=r(Hye," (Reformer model)"),Hye.forEach(t),v6o=i(H),z2=n(H,"LI",{});var Uye=s(z2);Ide=n(Uye,"STRONG",{});var Att=s(Ide);F6o=r(Att,"rembert"),Att.forEach(t),T6o=r(Uye," \u2014 "),zj=n(Uye,"A",{href:!0});var ytt=s(zj);M6o=r(ytt,"RemBertForMaskedLM"),ytt.forEach(t),E6o=r(Uye," (RemBERT model)"),Uye.forEach(t),C6o=i(H),Q2=n(H,"LI",{});var Jye=s(Q2);qde=n(Jye,"STRONG",{});var Ltt=s(qde);w6o=r(Ltt,"roberta"),Ltt.forEach(t),A6o=r(Jye," \u2014 "),Qj=n(Jye,"A",{href:!0});var xtt=s(Qj);y6o=r(xtt,"RobertaForMaskedLM"),xtt.forEach(t),L6o=r(Jye," (RoBERTa model)"),Jye.forEach(t),x6o=i(H),W2=n(H,"LI",{});var Yye=s(W2);Nde=n(Yye,"STRONG",{});var $tt=s(Nde);$6o=r($tt,"roformer"),$tt.forEach(t),k6o=r(Yye," \u2014 "),Wj=n(Yye,"A",{href:!0});var ktt=s(Wj);S6o=r(ktt,"RoFormerForMaskedLM"),ktt.forEach(t),R6o=r(Yye," (RoFormer model)"),Yye.forEach(t),B6o=i(H),H2=n(H,"LI",{});var Kye=s(H2);jde=n(Kye,"STRONG",{});var Stt=s(jde);P6o=r(Stt,"squeezebert"),Stt.forEach(t),I6o=r(Kye," \u2014 "),Hj=n(Kye,"A",{href:!0});var Rtt=s(Hj);q6o=r(Rtt,"SqueezeBertForMaskedLM"),Rtt.forEach(t),N6o=r(Kye," (SqueezeBERT model)"),Kye.forEach(t),j6o=i(H),U2=n(H,"LI",{});var Zye=s(U2);Dde=n(Zye,"STRONG",{});var Btt=s(Dde);D6o=r(Btt,"tapas"),Btt.forEach(t),G6o=r(Zye," \u2014 "),Uj=n(Zye,"A",{href:!0});var Ptt=s(Uj);O6o=r(Ptt,"TapasForMaskedLM"),Ptt.forEach(t),V6o=r(Zye," (TAPAS model)"),Zye.forEach(t),X6o=i(H),J2=n(H,"LI",{});var eLe=s(J2);Gde=n(eLe,"STRONG",{});var Itt=s(Gde);z6o=r(Itt,"wav2vec2"),Itt.forEach(t),Q6o=r(eLe," \u2014 "),Ode=n(eLe,"CODE",{});var qtt=s(Ode);W6o=r(qtt,"Wav2Vec2ForMaskedLM"),qtt.forEach(t),H6o=r(eLe," (Wav2Vec2 model)"),eLe.forEach(t),U6o=i(H),Y2=n(H,"LI",{});var oLe=s(Y2);Vde=n(oLe,"STRONG",{});var Ntt=s(Vde);J6o=r(Ntt,"xlm"),Ntt.forEach(t),Y6o=r(oLe," \u2014 "),Jj=n(oLe,"A",{href:!0});var jtt=s(Jj);K6o=r(jtt,"XLMWithLMHeadModel"),jtt.forEach(t),Z6o=r(oLe," (XLM model)"),oLe.forEach(t),eAo=i(H),K2=n(H,"LI",{});var rLe=s(K2);Xde=n(rLe,"STRONG",{});var Dtt=s(Xde);oAo=r(Dtt,"xlm-roberta"),Dtt.forEach(t),rAo=r(rLe," \u2014 "),Yj=n(rLe,"A",{href:!0});var Gtt=s(Yj);tAo=r(Gtt,"XLMRobertaForMaskedLM"),Gtt.forEach(t),aAo=r(rLe," (XLM-RoBERTa model)"),rLe.forEach(t),nAo=i(H),Z2=n(H,"LI",{});var tLe=s(Z2);zde=n(tLe,"STRONG",{});var Ott=s(zde);sAo=r(Ott,"xlm-roberta-xl"),Ott.forEach(t),lAo=r(tLe," \u2014 "),Kj=n(tLe,"A",{href:!0});var Vtt=s(Kj);iAo=r(Vtt,"XLMRobertaXLForMaskedLM"),Vtt.forEach(t),dAo=r(tLe," (XLM-RoBERTa-XL model)"),tLe.forEach(t),cAo=i(H),e1=n(H,"LI",{});var aLe=s(e1);Qde=n(aLe,"STRONG",{});var Xtt=s(Qde);fAo=r(Xtt,"yoso"),Xtt.forEach(t),mAo=r(aLe," \u2014 "),Zj=n(aLe,"A",{href:!0});var ztt=s(Zj);gAo=r(ztt,"YosoForMaskedLM"),ztt.forEach(t),hAo=r(aLe," (YOSO model)"),aLe.forEach(t),H.forEach(t),pAo=i(ra),o1=n(ra,"P",{});var nLe=s(o1);uAo=r(nLe,"The model is set in evaluation mode by default using "),Wde=n(nLe,"CODE",{});var Qtt=s(Wde);_Ao=r(Qtt,"model.eval()"),Qtt.forEach(t),bAo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hde=n(nLe,"CODE",{});var Wtt=s(Hde);vAo=r(Wtt,"model.train()"),Wtt.forEach(t),nLe.forEach(t),FAo=i(ra),T(r1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),kIe=i(f),Bi=n(f,"H2",{class:!0});var PNe=s(Bi);t1=n(PNe,"A",{id:!0,class:!0,href:!0});var Htt=s(t1);Ude=n(Htt,"SPAN",{});var Utt=s(Ude);T(HA.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),TAo=i(PNe),Jde=n(PNe,"SPAN",{});var Jtt=s(Jde);MAo=r(Jtt,"AutoModelForSeq2SeqLM"),Jtt.forEach(t),PNe.forEach(t),SIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(UA.$$.fragment,Xs),EAo=i(Xs),Pi=n(Xs,"P",{});var LK=s(Pi);CAo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eD=n(LK,"A",{href:!0});var Ytt=s(eD);wAo=r(Ytt,"from_pretrained()"),Ytt.forEach(t),AAo=r(LK," class method or the "),oD=n(LK,"A",{href:!0});var Ktt=s(oD);yAo=r(Ktt,"from_config()"),Ktt.forEach(t),LAo=r(LK,` class
method.`),LK.forEach(t),xAo=i(Xs),JA=n(Xs,"P",{});var INe=s(JA);$Ao=r(INe,"This class cannot be instantiated directly using "),Yde=n(INe,"CODE",{});var Ztt=s(Yde);kAo=r(Ztt,"__init__()"),Ztt.forEach(t),SAo=r(INe," (throws an error)."),INe.forEach(t),RAo=i(Xs),nt=n(Xs,"DIV",{class:!0});var gw=s(nt);T(YA.$$.fragment,gw),BAo=i(gw),Kde=n(gw,"P",{});var eat=s(Kde);PAo=r(eat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eat.forEach(t),IAo=i(gw),Ii=n(gw,"P",{});var xK=s(Ii);qAo=r(xK,`Note:
Loading a model from its configuration file does `),Zde=n(xK,"STRONG",{});var oat=s(Zde);NAo=r(oat,"not"),oat.forEach(t),jAo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(xK,"A",{href:!0});var rat=s(rD);DAo=r(rat,"from_pretrained()"),rat.forEach(t),GAo=r(xK," to load the model weights."),xK.forEach(t),OAo=i(gw),T(a1.$$.fragment,gw),gw.forEach(t),VAo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(KA.$$.fragment,ta),XAo=i(ta),ece=n(ta,"P",{});var tat=s(ece);zAo=r(tat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tat.forEach(t),QAo=i(ta),$a=n(ta,"P",{});var hw=s($a);WAo=r(hw,"The model class to instantiate is selected based on the "),oce=n(hw,"CODE",{});var aat=s(oce);HAo=r(aat,"model_type"),aat.forEach(t),UAo=r(hw,` property of the config object (either
passed as an argument or loaded from `),rce=n(hw,"CODE",{});var nat=s(rce);JAo=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),YAo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=n(hw,"CODE",{});var sat=s(tce);KAo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),ZAo=r(hw,":"),hw.forEach(t),eyo=i(ta),he=n(ta,"UL",{});var ue=s(he);n1=n(ue,"LI",{});var sLe=s(n1);ace=n(sLe,"STRONG",{});var lat=s(ace);oyo=r(lat,"bart"),lat.forEach(t),ryo=r(sLe," \u2014 "),tD=n(sLe,"A",{href:!0});var iat=s(tD);tyo=r(iat,"BartForConditionalGeneration"),iat.forEach(t),ayo=r(sLe," (BART model)"),sLe.forEach(t),nyo=i(ue),s1=n(ue,"LI",{});var lLe=s(s1);nce=n(lLe,"STRONG",{});var dat=s(nce);syo=r(dat,"bigbird_pegasus"),dat.forEach(t),lyo=r(lLe," \u2014 "),aD=n(lLe,"A",{href:!0});var cat=s(aD);iyo=r(cat,"BigBirdPegasusForConditionalGeneration"),cat.forEach(t),dyo=r(lLe," (BigBirdPegasus model)"),lLe.forEach(t),cyo=i(ue),l1=n(ue,"LI",{});var iLe=s(l1);sce=n(iLe,"STRONG",{});var fat=s(sce);fyo=r(fat,"blenderbot"),fat.forEach(t),myo=r(iLe," \u2014 "),nD=n(iLe,"A",{href:!0});var mat=s(nD);gyo=r(mat,"BlenderbotForConditionalGeneration"),mat.forEach(t),hyo=r(iLe," (Blenderbot model)"),iLe.forEach(t),pyo=i(ue),i1=n(ue,"LI",{});var dLe=s(i1);lce=n(dLe,"STRONG",{});var gat=s(lce);uyo=r(gat,"blenderbot-small"),gat.forEach(t),_yo=r(dLe," \u2014 "),sD=n(dLe,"A",{href:!0});var hat=s(sD);byo=r(hat,"BlenderbotSmallForConditionalGeneration"),hat.forEach(t),vyo=r(dLe," (BlenderbotSmall model)"),dLe.forEach(t),Fyo=i(ue),d1=n(ue,"LI",{});var cLe=s(d1);ice=n(cLe,"STRONG",{});var pat=s(ice);Tyo=r(pat,"encoder-decoder"),pat.forEach(t),Myo=r(cLe," \u2014 "),lD=n(cLe,"A",{href:!0});var uat=s(lD);Eyo=r(uat,"EncoderDecoderModel"),uat.forEach(t),Cyo=r(cLe," (Encoder decoder model)"),cLe.forEach(t),wyo=i(ue),c1=n(ue,"LI",{});var fLe=s(c1);dce=n(fLe,"STRONG",{});var _at=s(dce);Ayo=r(_at,"fsmt"),_at.forEach(t),yyo=r(fLe," \u2014 "),iD=n(fLe,"A",{href:!0});var bat=s(iD);Lyo=r(bat,"FSMTForConditionalGeneration"),bat.forEach(t),xyo=r(fLe," (FairSeq Machine-Translation model)"),fLe.forEach(t),$yo=i(ue),f1=n(ue,"LI",{});var mLe=s(f1);cce=n(mLe,"STRONG",{});var vat=s(cce);kyo=r(vat,"led"),vat.forEach(t),Syo=r(mLe," \u2014 "),dD=n(mLe,"A",{href:!0});var Fat=s(dD);Ryo=r(Fat,"LEDForConditionalGeneration"),Fat.forEach(t),Byo=r(mLe," (LED model)"),mLe.forEach(t),Pyo=i(ue),m1=n(ue,"LI",{});var gLe=s(m1);fce=n(gLe,"STRONG",{});var Tat=s(fce);Iyo=r(Tat,"m2m_100"),Tat.forEach(t),qyo=r(gLe," \u2014 "),cD=n(gLe,"A",{href:!0});var Mat=s(cD);Nyo=r(Mat,"M2M100ForConditionalGeneration"),Mat.forEach(t),jyo=r(gLe," (M2M100 model)"),gLe.forEach(t),Dyo=i(ue),g1=n(ue,"LI",{});var hLe=s(g1);mce=n(hLe,"STRONG",{});var Eat=s(mce);Gyo=r(Eat,"marian"),Eat.forEach(t),Oyo=r(hLe," \u2014 "),fD=n(hLe,"A",{href:!0});var Cat=s(fD);Vyo=r(Cat,"MarianMTModel"),Cat.forEach(t),Xyo=r(hLe," (Marian model)"),hLe.forEach(t),zyo=i(ue),h1=n(ue,"LI",{});var pLe=s(h1);gce=n(pLe,"STRONG",{});var wat=s(gce);Qyo=r(wat,"mbart"),wat.forEach(t),Wyo=r(pLe," \u2014 "),mD=n(pLe,"A",{href:!0});var Aat=s(mD);Hyo=r(Aat,"MBartForConditionalGeneration"),Aat.forEach(t),Uyo=r(pLe," (mBART model)"),pLe.forEach(t),Jyo=i(ue),p1=n(ue,"LI",{});var uLe=s(p1);hce=n(uLe,"STRONG",{});var yat=s(hce);Yyo=r(yat,"mt5"),yat.forEach(t),Kyo=r(uLe," \u2014 "),gD=n(uLe,"A",{href:!0});var Lat=s(gD);Zyo=r(Lat,"MT5ForConditionalGeneration"),Lat.forEach(t),eLo=r(uLe," (mT5 model)"),uLe.forEach(t),oLo=i(ue),u1=n(ue,"LI",{});var _Le=s(u1);pce=n(_Le,"STRONG",{});var xat=s(pce);rLo=r(xat,"pegasus"),xat.forEach(t),tLo=r(_Le," \u2014 "),hD=n(_Le,"A",{href:!0});var $at=s(hD);aLo=r($at,"PegasusForConditionalGeneration"),$at.forEach(t),nLo=r(_Le," (Pegasus model)"),_Le.forEach(t),sLo=i(ue),_1=n(ue,"LI",{});var bLe=s(_1);uce=n(bLe,"STRONG",{});var kat=s(uce);lLo=r(kat,"plbart"),kat.forEach(t),iLo=r(bLe," \u2014 "),pD=n(bLe,"A",{href:!0});var Sat=s(pD);dLo=r(Sat,"PLBartForConditionalGeneration"),Sat.forEach(t),cLo=r(bLe," (PLBart model)"),bLe.forEach(t),fLo=i(ue),b1=n(ue,"LI",{});var vLe=s(b1);_ce=n(vLe,"STRONG",{});var Rat=s(_ce);mLo=r(Rat,"prophetnet"),Rat.forEach(t),gLo=r(vLe," \u2014 "),uD=n(vLe,"A",{href:!0});var Bat=s(uD);hLo=r(Bat,"ProphetNetForConditionalGeneration"),Bat.forEach(t),pLo=r(vLe," (ProphetNet model)"),vLe.forEach(t),uLo=i(ue),v1=n(ue,"LI",{});var FLe=s(v1);bce=n(FLe,"STRONG",{});var Pat=s(bce);_Lo=r(Pat,"t5"),Pat.forEach(t),bLo=r(FLe," \u2014 "),_D=n(FLe,"A",{href:!0});var Iat=s(_D);vLo=r(Iat,"T5ForConditionalGeneration"),Iat.forEach(t),FLo=r(FLe," (T5 model)"),FLe.forEach(t),TLo=i(ue),F1=n(ue,"LI",{});var TLe=s(F1);vce=n(TLe,"STRONG",{});var qat=s(vce);MLo=r(qat,"tapex"),qat.forEach(t),ELo=r(TLe," \u2014 "),bD=n(TLe,"A",{href:!0});var Nat=s(bD);CLo=r(Nat,"BartForConditionalGeneration"),Nat.forEach(t),wLo=r(TLe," (TAPEX model)"),TLe.forEach(t),ALo=i(ue),T1=n(ue,"LI",{});var MLe=s(T1);Fce=n(MLe,"STRONG",{});var jat=s(Fce);yLo=r(jat,"xlm-prophetnet"),jat.forEach(t),LLo=r(MLe," \u2014 "),vD=n(MLe,"A",{href:!0});var Dat=s(vD);xLo=r(Dat,"XLMProphetNetForConditionalGeneration"),Dat.forEach(t),$Lo=r(MLe," (XLMProphetNet model)"),MLe.forEach(t),ue.forEach(t),kLo=i(ta),M1=n(ta,"P",{});var ELe=s(M1);SLo=r(ELe,"The model is set in evaluation mode by default using "),Tce=n(ELe,"CODE",{});var Gat=s(Tce);RLo=r(Gat,"model.eval()"),Gat.forEach(t),BLo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(ELe,"CODE",{});var Oat=s(Mce);PLo=r(Oat,"model.train()"),Oat.forEach(t),ELe.forEach(t),ILo=i(ta),T(E1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),RIe=i(f),qi=n(f,"H2",{class:!0});var qNe=s(qi);C1=n(qNe,"A",{id:!0,class:!0,href:!0});var Vat=s(C1);Ece=n(Vat,"SPAN",{});var Xat=s(Ece);T(ZA.$$.fragment,Xat),Xat.forEach(t),Vat.forEach(t),qLo=i(qNe),Cce=n(qNe,"SPAN",{});var zat=s(Cce);NLo=r(zat,"AutoModelForSequenceClassification"),zat.forEach(t),qNe.forEach(t),BIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(ey.$$.fragment,zs),jLo=i(zs),Ni=n(zs,"P",{});var $K=s(Ni);DLo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FD=n($K,"A",{href:!0});var Qat=s(FD);GLo=r(Qat,"from_pretrained()"),Qat.forEach(t),OLo=r($K," class method or the "),TD=n($K,"A",{href:!0});var Wat=s(TD);VLo=r(Wat,"from_config()"),Wat.forEach(t),XLo=r($K,` class
method.`),$K.forEach(t),zLo=i(zs),oy=n(zs,"P",{});var NNe=s(oy);QLo=r(NNe,"This class cannot be instantiated directly using "),wce=n(NNe,"CODE",{});var Hat=s(wce);WLo=r(Hat,"__init__()"),Hat.forEach(t),HLo=r(NNe," (throws an error)."),NNe.forEach(t),ULo=i(zs),st=n(zs,"DIV",{class:!0});var pw=s(st);T(ry.$$.fragment,pw),JLo=i(pw),Ace=n(pw,"P",{});var Uat=s(Ace);YLo=r(Uat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uat.forEach(t),KLo=i(pw),ji=n(pw,"P",{});var kK=s(ji);ZLo=r(kK,`Note:
Loading a model from its configuration file does `),yce=n(kK,"STRONG",{});var Jat=s(yce);e8o=r(Jat,"not"),Jat.forEach(t),o8o=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(kK,"A",{href:!0});var Yat=s(MD);r8o=r(Yat,"from_pretrained()"),Yat.forEach(t),t8o=r(kK," to load the model weights."),kK.forEach(t),a8o=i(pw),T(w1.$$.fragment,pw),pw.forEach(t),n8o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(ty.$$.fragment,aa),s8o=i(aa),Lce=n(aa,"P",{});var Kat=s(Lce);l8o=r(Kat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kat.forEach(t),i8o=i(aa),ka=n(aa,"P",{});var uw=s(ka);d8o=r(uw,"The model class to instantiate is selected based on the "),xce=n(uw,"CODE",{});var Zat=s(xce);c8o=r(Zat,"model_type"),Zat.forEach(t),f8o=r(uw,` property of the config object (either
passed as an argument or loaded from `),$ce=n(uw,"CODE",{});var ent=s($ce);m8o=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),g8o=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(uw,"CODE",{});var ont=s(kce);h8o=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),p8o=r(uw,":"),uw.forEach(t),u8o=i(aa),q=n(aa,"UL",{});var N=s(q);A1=n(N,"LI",{});var CLe=s(A1);Sce=n(CLe,"STRONG",{});var rnt=s(Sce);_8o=r(rnt,"albert"),rnt.forEach(t),b8o=r(CLe," \u2014 "),ED=n(CLe,"A",{href:!0});var tnt=s(ED);v8o=r(tnt,"AlbertForSequenceClassification"),tnt.forEach(t),F8o=r(CLe," (ALBERT model)"),CLe.forEach(t),T8o=i(N),y1=n(N,"LI",{});var wLe=s(y1);Rce=n(wLe,"STRONG",{});var ant=s(Rce);M8o=r(ant,"bart"),ant.forEach(t),E8o=r(wLe," \u2014 "),CD=n(wLe,"A",{href:!0});var nnt=s(CD);C8o=r(nnt,"BartForSequenceClassification"),nnt.forEach(t),w8o=r(wLe," (BART model)"),wLe.forEach(t),A8o=i(N),L1=n(N,"LI",{});var ALe=s(L1);Bce=n(ALe,"STRONG",{});var snt=s(Bce);y8o=r(snt,"bert"),snt.forEach(t),L8o=r(ALe," \u2014 "),wD=n(ALe,"A",{href:!0});var lnt=s(wD);x8o=r(lnt,"BertForSequenceClassification"),lnt.forEach(t),$8o=r(ALe," (BERT model)"),ALe.forEach(t),k8o=i(N),x1=n(N,"LI",{});var yLe=s(x1);Pce=n(yLe,"STRONG",{});var int=s(Pce);S8o=r(int,"big_bird"),int.forEach(t),R8o=r(yLe," \u2014 "),AD=n(yLe,"A",{href:!0});var dnt=s(AD);B8o=r(dnt,"BigBirdForSequenceClassification"),dnt.forEach(t),P8o=r(yLe," (BigBird model)"),yLe.forEach(t),I8o=i(N),$1=n(N,"LI",{});var LLe=s($1);Ice=n(LLe,"STRONG",{});var cnt=s(Ice);q8o=r(cnt,"bigbird_pegasus"),cnt.forEach(t),N8o=r(LLe," \u2014 "),yD=n(LLe,"A",{href:!0});var fnt=s(yD);j8o=r(fnt,"BigBirdPegasusForSequenceClassification"),fnt.forEach(t),D8o=r(LLe," (BigBirdPegasus model)"),LLe.forEach(t),G8o=i(N),k1=n(N,"LI",{});var xLe=s(k1);qce=n(xLe,"STRONG",{});var mnt=s(qce);O8o=r(mnt,"camembert"),mnt.forEach(t),V8o=r(xLe," \u2014 "),LD=n(xLe,"A",{href:!0});var gnt=s(LD);X8o=r(gnt,"CamembertForSequenceClassification"),gnt.forEach(t),z8o=r(xLe," (CamemBERT model)"),xLe.forEach(t),Q8o=i(N),S1=n(N,"LI",{});var $Le=s(S1);Nce=n($Le,"STRONG",{});var hnt=s(Nce);W8o=r(hnt,"canine"),hnt.forEach(t),H8o=r($Le," \u2014 "),xD=n($Le,"A",{href:!0});var pnt=s(xD);U8o=r(pnt,"CanineForSequenceClassification"),pnt.forEach(t),J8o=r($Le," (Canine model)"),$Le.forEach(t),Y8o=i(N),R1=n(N,"LI",{});var kLe=s(R1);jce=n(kLe,"STRONG",{});var unt=s(jce);K8o=r(unt,"convbert"),unt.forEach(t),Z8o=r(kLe," \u2014 "),$D=n(kLe,"A",{href:!0});var _nt=s($D);exo=r(_nt,"ConvBertForSequenceClassification"),_nt.forEach(t),oxo=r(kLe," (ConvBERT model)"),kLe.forEach(t),rxo=i(N),B1=n(N,"LI",{});var SLe=s(B1);Dce=n(SLe,"STRONG",{});var bnt=s(Dce);txo=r(bnt,"ctrl"),bnt.forEach(t),axo=r(SLe," \u2014 "),kD=n(SLe,"A",{href:!0});var vnt=s(kD);nxo=r(vnt,"CTRLForSequenceClassification"),vnt.forEach(t),sxo=r(SLe," (CTRL model)"),SLe.forEach(t),lxo=i(N),P1=n(N,"LI",{});var RLe=s(P1);Gce=n(RLe,"STRONG",{});var Fnt=s(Gce);ixo=r(Fnt,"data2vec-text"),Fnt.forEach(t),dxo=r(RLe," \u2014 "),SD=n(RLe,"A",{href:!0});var Tnt=s(SD);cxo=r(Tnt,"Data2VecTextForSequenceClassification"),Tnt.forEach(t),fxo=r(RLe," (Data2VecText model)"),RLe.forEach(t),mxo=i(N),I1=n(N,"LI",{});var BLe=s(I1);Oce=n(BLe,"STRONG",{});var Mnt=s(Oce);gxo=r(Mnt,"deberta"),Mnt.forEach(t),hxo=r(BLe," \u2014 "),RD=n(BLe,"A",{href:!0});var Ent=s(RD);pxo=r(Ent,"DebertaForSequenceClassification"),Ent.forEach(t),uxo=r(BLe," (DeBERTa model)"),BLe.forEach(t),_xo=i(N),q1=n(N,"LI",{});var PLe=s(q1);Vce=n(PLe,"STRONG",{});var Cnt=s(Vce);bxo=r(Cnt,"deberta-v2"),Cnt.forEach(t),vxo=r(PLe," \u2014 "),BD=n(PLe,"A",{href:!0});var wnt=s(BD);Fxo=r(wnt,"DebertaV2ForSequenceClassification"),wnt.forEach(t),Txo=r(PLe," (DeBERTa-v2 model)"),PLe.forEach(t),Mxo=i(N),N1=n(N,"LI",{});var ILe=s(N1);Xce=n(ILe,"STRONG",{});var Ant=s(Xce);Exo=r(Ant,"distilbert"),Ant.forEach(t),Cxo=r(ILe," \u2014 "),PD=n(ILe,"A",{href:!0});var ynt=s(PD);wxo=r(ynt,"DistilBertForSequenceClassification"),ynt.forEach(t),Axo=r(ILe," (DistilBERT model)"),ILe.forEach(t),yxo=i(N),j1=n(N,"LI",{});var qLe=s(j1);zce=n(qLe,"STRONG",{});var Lnt=s(zce);Lxo=r(Lnt,"electra"),Lnt.forEach(t),xxo=r(qLe," \u2014 "),ID=n(qLe,"A",{href:!0});var xnt=s(ID);$xo=r(xnt,"ElectraForSequenceClassification"),xnt.forEach(t),kxo=r(qLe," (ELECTRA model)"),qLe.forEach(t),Sxo=i(N),D1=n(N,"LI",{});var NLe=s(D1);Qce=n(NLe,"STRONG",{});var $nt=s(Qce);Rxo=r($nt,"flaubert"),$nt.forEach(t),Bxo=r(NLe," \u2014 "),qD=n(NLe,"A",{href:!0});var knt=s(qD);Pxo=r(knt,"FlaubertForSequenceClassification"),knt.forEach(t),Ixo=r(NLe," (FlauBERT model)"),NLe.forEach(t),qxo=i(N),G1=n(N,"LI",{});var jLe=s(G1);Wce=n(jLe,"STRONG",{});var Snt=s(Wce);Nxo=r(Snt,"fnet"),Snt.forEach(t),jxo=r(jLe," \u2014 "),ND=n(jLe,"A",{href:!0});var Rnt=s(ND);Dxo=r(Rnt,"FNetForSequenceClassification"),Rnt.forEach(t),Gxo=r(jLe," (FNet model)"),jLe.forEach(t),Oxo=i(N),O1=n(N,"LI",{});var DLe=s(O1);Hce=n(DLe,"STRONG",{});var Bnt=s(Hce);Vxo=r(Bnt,"funnel"),Bnt.forEach(t),Xxo=r(DLe," \u2014 "),jD=n(DLe,"A",{href:!0});var Pnt=s(jD);zxo=r(Pnt,"FunnelForSequenceClassification"),Pnt.forEach(t),Qxo=r(DLe," (Funnel Transformer model)"),DLe.forEach(t),Wxo=i(N),V1=n(N,"LI",{});var GLe=s(V1);Uce=n(GLe,"STRONG",{});var Int=s(Uce);Hxo=r(Int,"gpt2"),Int.forEach(t),Uxo=r(GLe," \u2014 "),DD=n(GLe,"A",{href:!0});var qnt=s(DD);Jxo=r(qnt,"GPT2ForSequenceClassification"),qnt.forEach(t),Yxo=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),Kxo=i(N),X1=n(N,"LI",{});var OLe=s(X1);Jce=n(OLe,"STRONG",{});var Nnt=s(Jce);Zxo=r(Nnt,"gpt_neo"),Nnt.forEach(t),e9o=r(OLe," \u2014 "),GD=n(OLe,"A",{href:!0});var jnt=s(GD);o9o=r(jnt,"GPTNeoForSequenceClassification"),jnt.forEach(t),r9o=r(OLe," (GPT Neo model)"),OLe.forEach(t),t9o=i(N),z1=n(N,"LI",{});var VLe=s(z1);Yce=n(VLe,"STRONG",{});var Dnt=s(Yce);a9o=r(Dnt,"gptj"),Dnt.forEach(t),n9o=r(VLe," \u2014 "),OD=n(VLe,"A",{href:!0});var Gnt=s(OD);s9o=r(Gnt,"GPTJForSequenceClassification"),Gnt.forEach(t),l9o=r(VLe," (GPT-J model)"),VLe.forEach(t),i9o=i(N),Q1=n(N,"LI",{});var XLe=s(Q1);Kce=n(XLe,"STRONG",{});var Ont=s(Kce);d9o=r(Ont,"ibert"),Ont.forEach(t),c9o=r(XLe," \u2014 "),VD=n(XLe,"A",{href:!0});var Vnt=s(VD);f9o=r(Vnt,"IBertForSequenceClassification"),Vnt.forEach(t),m9o=r(XLe," (I-BERT model)"),XLe.forEach(t),g9o=i(N),W1=n(N,"LI",{});var zLe=s(W1);Zce=n(zLe,"STRONG",{});var Xnt=s(Zce);h9o=r(Xnt,"layoutlm"),Xnt.forEach(t),p9o=r(zLe," \u2014 "),XD=n(zLe,"A",{href:!0});var znt=s(XD);u9o=r(znt,"LayoutLMForSequenceClassification"),znt.forEach(t),_9o=r(zLe," (LayoutLM model)"),zLe.forEach(t),b9o=i(N),H1=n(N,"LI",{});var QLe=s(H1);efe=n(QLe,"STRONG",{});var Qnt=s(efe);v9o=r(Qnt,"layoutlmv2"),Qnt.forEach(t),F9o=r(QLe," \u2014 "),zD=n(QLe,"A",{href:!0});var Wnt=s(zD);T9o=r(Wnt,"LayoutLMv2ForSequenceClassification"),Wnt.forEach(t),M9o=r(QLe," (LayoutLMv2 model)"),QLe.forEach(t),E9o=i(N),U1=n(N,"LI",{});var WLe=s(U1);ofe=n(WLe,"STRONG",{});var Hnt=s(ofe);C9o=r(Hnt,"led"),Hnt.forEach(t),w9o=r(WLe," \u2014 "),QD=n(WLe,"A",{href:!0});var Unt=s(QD);A9o=r(Unt,"LEDForSequenceClassification"),Unt.forEach(t),y9o=r(WLe," (LED model)"),WLe.forEach(t),L9o=i(N),J1=n(N,"LI",{});var HLe=s(J1);rfe=n(HLe,"STRONG",{});var Jnt=s(rfe);x9o=r(Jnt,"longformer"),Jnt.forEach(t),$9o=r(HLe," \u2014 "),WD=n(HLe,"A",{href:!0});var Ynt=s(WD);k9o=r(Ynt,"LongformerForSequenceClassification"),Ynt.forEach(t),S9o=r(HLe," (Longformer model)"),HLe.forEach(t),R9o=i(N),Y1=n(N,"LI",{});var ULe=s(Y1);tfe=n(ULe,"STRONG",{});var Knt=s(tfe);B9o=r(Knt,"mbart"),Knt.forEach(t),P9o=r(ULe," \u2014 "),HD=n(ULe,"A",{href:!0});var Znt=s(HD);I9o=r(Znt,"MBartForSequenceClassification"),Znt.forEach(t),q9o=r(ULe," (mBART model)"),ULe.forEach(t),N9o=i(N),K1=n(N,"LI",{});var JLe=s(K1);afe=n(JLe,"STRONG",{});var est=s(afe);j9o=r(est,"megatron-bert"),est.forEach(t),D9o=r(JLe," \u2014 "),UD=n(JLe,"A",{href:!0});var ost=s(UD);G9o=r(ost,"MegatronBertForSequenceClassification"),ost.forEach(t),O9o=r(JLe," (MegatronBert model)"),JLe.forEach(t),V9o=i(N),Z1=n(N,"LI",{});var YLe=s(Z1);nfe=n(YLe,"STRONG",{});var rst=s(nfe);X9o=r(rst,"mobilebert"),rst.forEach(t),z9o=r(YLe," \u2014 "),JD=n(YLe,"A",{href:!0});var tst=s(JD);Q9o=r(tst,"MobileBertForSequenceClassification"),tst.forEach(t),W9o=r(YLe," (MobileBERT model)"),YLe.forEach(t),H9o=i(N),eb=n(N,"LI",{});var KLe=s(eb);sfe=n(KLe,"STRONG",{});var ast=s(sfe);U9o=r(ast,"mpnet"),ast.forEach(t),J9o=r(KLe," \u2014 "),YD=n(KLe,"A",{href:!0});var nst=s(YD);Y9o=r(nst,"MPNetForSequenceClassification"),nst.forEach(t),K9o=r(KLe," (MPNet model)"),KLe.forEach(t),Z9o=i(N),ob=n(N,"LI",{});var ZLe=s(ob);lfe=n(ZLe,"STRONG",{});var sst=s(lfe);e$o=r(sst,"nystromformer"),sst.forEach(t),o$o=r(ZLe," \u2014 "),KD=n(ZLe,"A",{href:!0});var lst=s(KD);r$o=r(lst,"NystromformerForSequenceClassification"),lst.forEach(t),t$o=r(ZLe," (Nystromformer model)"),ZLe.forEach(t),a$o=i(N),rb=n(N,"LI",{});var e8e=s(rb);ife=n(e8e,"STRONG",{});var ist=s(ife);n$o=r(ist,"openai-gpt"),ist.forEach(t),s$o=r(e8e," \u2014 "),ZD=n(e8e,"A",{href:!0});var dst=s(ZD);l$o=r(dst,"OpenAIGPTForSequenceClassification"),dst.forEach(t),i$o=r(e8e," (OpenAI GPT model)"),e8e.forEach(t),d$o=i(N),tb=n(N,"LI",{});var o8e=s(tb);dfe=n(o8e,"STRONG",{});var cst=s(dfe);c$o=r(cst,"perceiver"),cst.forEach(t),f$o=r(o8e," \u2014 "),eG=n(o8e,"A",{href:!0});var fst=s(eG);m$o=r(fst,"PerceiverForSequenceClassification"),fst.forEach(t),g$o=r(o8e," (Perceiver model)"),o8e.forEach(t),h$o=i(N),ab=n(N,"LI",{});var r8e=s(ab);cfe=n(r8e,"STRONG",{});var mst=s(cfe);p$o=r(mst,"plbart"),mst.forEach(t),u$o=r(r8e," \u2014 "),oG=n(r8e,"A",{href:!0});var gst=s(oG);_$o=r(gst,"PLBartForSequenceClassification"),gst.forEach(t),b$o=r(r8e," (PLBart model)"),r8e.forEach(t),v$o=i(N),nb=n(N,"LI",{});var t8e=s(nb);ffe=n(t8e,"STRONG",{});var hst=s(ffe);F$o=r(hst,"qdqbert"),hst.forEach(t),T$o=r(t8e," \u2014 "),rG=n(t8e,"A",{href:!0});var pst=s(rG);M$o=r(pst,"QDQBertForSequenceClassification"),pst.forEach(t),E$o=r(t8e," (QDQBert model)"),t8e.forEach(t),C$o=i(N),sb=n(N,"LI",{});var a8e=s(sb);mfe=n(a8e,"STRONG",{});var ust=s(mfe);w$o=r(ust,"reformer"),ust.forEach(t),A$o=r(a8e," \u2014 "),tG=n(a8e,"A",{href:!0});var _st=s(tG);y$o=r(_st,"ReformerForSequenceClassification"),_st.forEach(t),L$o=r(a8e," (Reformer model)"),a8e.forEach(t),x$o=i(N),lb=n(N,"LI",{});var n8e=s(lb);gfe=n(n8e,"STRONG",{});var bst=s(gfe);$$o=r(bst,"rembert"),bst.forEach(t),k$o=r(n8e," \u2014 "),aG=n(n8e,"A",{href:!0});var vst=s(aG);S$o=r(vst,"RemBertForSequenceClassification"),vst.forEach(t),R$o=r(n8e," (RemBERT model)"),n8e.forEach(t),B$o=i(N),ib=n(N,"LI",{});var s8e=s(ib);hfe=n(s8e,"STRONG",{});var Fst=s(hfe);P$o=r(Fst,"roberta"),Fst.forEach(t),I$o=r(s8e," \u2014 "),nG=n(s8e,"A",{href:!0});var Tst=s(nG);q$o=r(Tst,"RobertaForSequenceClassification"),Tst.forEach(t),N$o=r(s8e," (RoBERTa model)"),s8e.forEach(t),j$o=i(N),db=n(N,"LI",{});var l8e=s(db);pfe=n(l8e,"STRONG",{});var Mst=s(pfe);D$o=r(Mst,"roformer"),Mst.forEach(t),G$o=r(l8e," \u2014 "),sG=n(l8e,"A",{href:!0});var Est=s(sG);O$o=r(Est,"RoFormerForSequenceClassification"),Est.forEach(t),V$o=r(l8e," (RoFormer model)"),l8e.forEach(t),X$o=i(N),cb=n(N,"LI",{});var i8e=s(cb);ufe=n(i8e,"STRONG",{});var Cst=s(ufe);z$o=r(Cst,"squeezebert"),Cst.forEach(t),Q$o=r(i8e," \u2014 "),lG=n(i8e,"A",{href:!0});var wst=s(lG);W$o=r(wst,"SqueezeBertForSequenceClassification"),wst.forEach(t),H$o=r(i8e," (SqueezeBERT model)"),i8e.forEach(t),U$o=i(N),fb=n(N,"LI",{});var d8e=s(fb);_fe=n(d8e,"STRONG",{});var Ast=s(_fe);J$o=r(Ast,"tapas"),Ast.forEach(t),Y$o=r(d8e," \u2014 "),iG=n(d8e,"A",{href:!0});var yst=s(iG);K$o=r(yst,"TapasForSequenceClassification"),yst.forEach(t),Z$o=r(d8e," (TAPAS model)"),d8e.forEach(t),eko=i(N),mb=n(N,"LI",{});var c8e=s(mb);bfe=n(c8e,"STRONG",{});var Lst=s(bfe);oko=r(Lst,"tapex"),Lst.forEach(t),rko=r(c8e," \u2014 "),dG=n(c8e,"A",{href:!0});var xst=s(dG);tko=r(xst,"BartForSequenceClassification"),xst.forEach(t),ako=r(c8e," (TAPEX model)"),c8e.forEach(t),nko=i(N),gb=n(N,"LI",{});var f8e=s(gb);vfe=n(f8e,"STRONG",{});var $st=s(vfe);sko=r($st,"transfo-xl"),$st.forEach(t),lko=r(f8e," \u2014 "),cG=n(f8e,"A",{href:!0});var kst=s(cG);iko=r(kst,"TransfoXLForSequenceClassification"),kst.forEach(t),dko=r(f8e," (Transformer-XL model)"),f8e.forEach(t),cko=i(N),hb=n(N,"LI",{});var m8e=s(hb);Ffe=n(m8e,"STRONG",{});var Sst=s(Ffe);fko=r(Sst,"xlm"),Sst.forEach(t),mko=r(m8e," \u2014 "),fG=n(m8e,"A",{href:!0});var Rst=s(fG);gko=r(Rst,"XLMForSequenceClassification"),Rst.forEach(t),hko=r(m8e," (XLM model)"),m8e.forEach(t),pko=i(N),pb=n(N,"LI",{});var g8e=s(pb);Tfe=n(g8e,"STRONG",{});var Bst=s(Tfe);uko=r(Bst,"xlm-roberta"),Bst.forEach(t),_ko=r(g8e," \u2014 "),mG=n(g8e,"A",{href:!0});var Pst=s(mG);bko=r(Pst,"XLMRobertaForSequenceClassification"),Pst.forEach(t),vko=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),Fko=i(N),ub=n(N,"LI",{});var h8e=s(ub);Mfe=n(h8e,"STRONG",{});var Ist=s(Mfe);Tko=r(Ist,"xlm-roberta-xl"),Ist.forEach(t),Mko=r(h8e," \u2014 "),gG=n(h8e,"A",{href:!0});var qst=s(gG);Eko=r(qst,"XLMRobertaXLForSequenceClassification"),qst.forEach(t),Cko=r(h8e," (XLM-RoBERTa-XL model)"),h8e.forEach(t),wko=i(N),_b=n(N,"LI",{});var p8e=s(_b);Efe=n(p8e,"STRONG",{});var Nst=s(Efe);Ako=r(Nst,"xlnet"),Nst.forEach(t),yko=r(p8e," \u2014 "),hG=n(p8e,"A",{href:!0});var jst=s(hG);Lko=r(jst,"XLNetForSequenceClassification"),jst.forEach(t),xko=r(p8e," (XLNet model)"),p8e.forEach(t),$ko=i(N),bb=n(N,"LI",{});var u8e=s(bb);Cfe=n(u8e,"STRONG",{});var Dst=s(Cfe);kko=r(Dst,"yoso"),Dst.forEach(t),Sko=r(u8e," \u2014 "),pG=n(u8e,"A",{href:!0});var Gst=s(pG);Rko=r(Gst,"YosoForSequenceClassification"),Gst.forEach(t),Bko=r(u8e," (YOSO model)"),u8e.forEach(t),N.forEach(t),Pko=i(aa),vb=n(aa,"P",{});var _8e=s(vb);Iko=r(_8e,"The model is set in evaluation mode by default using "),wfe=n(_8e,"CODE",{});var Ost=s(wfe);qko=r(Ost,"model.eval()"),Ost.forEach(t),Nko=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(_8e,"CODE",{});var Vst=s(Afe);jko=r(Vst,"model.train()"),Vst.forEach(t),_8e.forEach(t),Dko=i(aa),T(Fb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),PIe=i(f),Di=n(f,"H2",{class:!0});var jNe=s(Di);Tb=n(jNe,"A",{id:!0,class:!0,href:!0});var Xst=s(Tb);yfe=n(Xst,"SPAN",{});var zst=s(yfe);T(ay.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),Gko=i(jNe),Lfe=n(jNe,"SPAN",{});var Qst=s(Lfe);Oko=r(Qst,"AutoModelForMultipleChoice"),Qst.forEach(t),jNe.forEach(t),IIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(ny.$$.fragment,Qs),Vko=i(Qs),Gi=n(Qs,"P",{});var SK=s(Gi);Xko=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uG=n(SK,"A",{href:!0});var Wst=s(uG);zko=r(Wst,"from_pretrained()"),Wst.forEach(t),Qko=r(SK," class method or the "),_G=n(SK,"A",{href:!0});var Hst=s(_G);Wko=r(Hst,"from_config()"),Hst.forEach(t),Hko=r(SK,` class
method.`),SK.forEach(t),Uko=i(Qs),sy=n(Qs,"P",{});var DNe=s(sy);Jko=r(DNe,"This class cannot be instantiated directly using "),xfe=n(DNe,"CODE",{});var Ust=s(xfe);Yko=r(Ust,"__init__()"),Ust.forEach(t),Kko=r(DNe," (throws an error)."),DNe.forEach(t),Zko=i(Qs),lt=n(Qs,"DIV",{class:!0});var _w=s(lt);T(ly.$$.fragment,_w),eSo=i(_w),$fe=n(_w,"P",{});var Jst=s($fe);oSo=r(Jst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jst.forEach(t),rSo=i(_w),Oi=n(_w,"P",{});var RK=s(Oi);tSo=r(RK,`Note:
Loading a model from its configuration file does `),kfe=n(RK,"STRONG",{});var Yst=s(kfe);aSo=r(Yst,"not"),Yst.forEach(t),nSo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(RK,"A",{href:!0});var Kst=s(bG);sSo=r(Kst,"from_pretrained()"),Kst.forEach(t),lSo=r(RK," to load the model weights."),RK.forEach(t),iSo=i(_w),T(Mb.$$.fragment,_w),_w.forEach(t),dSo=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(iy.$$.fragment,na),cSo=i(na),Sfe=n(na,"P",{});var Zst=s(Sfe);fSo=r(Zst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zst.forEach(t),mSo=i(na),Sa=n(na,"P",{});var bw=s(Sa);gSo=r(bw,"The model class to instantiate is selected based on the "),Rfe=n(bw,"CODE",{});var elt=s(Rfe);hSo=r(elt,"model_type"),elt.forEach(t),pSo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(bw,"CODE",{});var olt=s(Bfe);uSo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),_So=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(bw,"CODE",{});var rlt=s(Pfe);bSo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),vSo=r(bw,":"),bw.forEach(t),FSo=i(na),Y=n(na,"UL",{});var K=s(Y);Eb=n(K,"LI",{});var b8e=s(Eb);Ife=n(b8e,"STRONG",{});var tlt=s(Ife);TSo=r(tlt,"albert"),tlt.forEach(t),MSo=r(b8e," \u2014 "),vG=n(b8e,"A",{href:!0});var alt=s(vG);ESo=r(alt,"AlbertForMultipleChoice"),alt.forEach(t),CSo=r(b8e," (ALBERT model)"),b8e.forEach(t),wSo=i(K),Cb=n(K,"LI",{});var v8e=s(Cb);qfe=n(v8e,"STRONG",{});var nlt=s(qfe);ASo=r(nlt,"bert"),nlt.forEach(t),ySo=r(v8e," \u2014 "),FG=n(v8e,"A",{href:!0});var slt=s(FG);LSo=r(slt,"BertForMultipleChoice"),slt.forEach(t),xSo=r(v8e," (BERT model)"),v8e.forEach(t),$So=i(K),wb=n(K,"LI",{});var F8e=s(wb);Nfe=n(F8e,"STRONG",{});var llt=s(Nfe);kSo=r(llt,"big_bird"),llt.forEach(t),SSo=r(F8e," \u2014 "),TG=n(F8e,"A",{href:!0});var ilt=s(TG);RSo=r(ilt,"BigBirdForMultipleChoice"),ilt.forEach(t),BSo=r(F8e," (BigBird model)"),F8e.forEach(t),PSo=i(K),Ab=n(K,"LI",{});var T8e=s(Ab);jfe=n(T8e,"STRONG",{});var dlt=s(jfe);ISo=r(dlt,"camembert"),dlt.forEach(t),qSo=r(T8e," \u2014 "),MG=n(T8e,"A",{href:!0});var clt=s(MG);NSo=r(clt,"CamembertForMultipleChoice"),clt.forEach(t),jSo=r(T8e," (CamemBERT model)"),T8e.forEach(t),DSo=i(K),yb=n(K,"LI",{});var M8e=s(yb);Dfe=n(M8e,"STRONG",{});var flt=s(Dfe);GSo=r(flt,"canine"),flt.forEach(t),OSo=r(M8e," \u2014 "),EG=n(M8e,"A",{href:!0});var mlt=s(EG);VSo=r(mlt,"CanineForMultipleChoice"),mlt.forEach(t),XSo=r(M8e," (Canine model)"),M8e.forEach(t),zSo=i(K),Lb=n(K,"LI",{});var E8e=s(Lb);Gfe=n(E8e,"STRONG",{});var glt=s(Gfe);QSo=r(glt,"convbert"),glt.forEach(t),WSo=r(E8e," \u2014 "),CG=n(E8e,"A",{href:!0});var hlt=s(CG);HSo=r(hlt,"ConvBertForMultipleChoice"),hlt.forEach(t),USo=r(E8e," (ConvBERT model)"),E8e.forEach(t),JSo=i(K),xb=n(K,"LI",{});var C8e=s(xb);Ofe=n(C8e,"STRONG",{});var plt=s(Ofe);YSo=r(plt,"data2vec-text"),plt.forEach(t),KSo=r(C8e," \u2014 "),wG=n(C8e,"A",{href:!0});var ult=s(wG);ZSo=r(ult,"Data2VecTextForMultipleChoice"),ult.forEach(t),eRo=r(C8e," (Data2VecText model)"),C8e.forEach(t),oRo=i(K),$b=n(K,"LI",{});var w8e=s($b);Vfe=n(w8e,"STRONG",{});var _lt=s(Vfe);rRo=r(_lt,"deberta-v2"),_lt.forEach(t),tRo=r(w8e," \u2014 "),AG=n(w8e,"A",{href:!0});var blt=s(AG);aRo=r(blt,"DebertaV2ForMultipleChoice"),blt.forEach(t),nRo=r(w8e," (DeBERTa-v2 model)"),w8e.forEach(t),sRo=i(K),kb=n(K,"LI",{});var A8e=s(kb);Xfe=n(A8e,"STRONG",{});var vlt=s(Xfe);lRo=r(vlt,"distilbert"),vlt.forEach(t),iRo=r(A8e," \u2014 "),yG=n(A8e,"A",{href:!0});var Flt=s(yG);dRo=r(Flt,"DistilBertForMultipleChoice"),Flt.forEach(t),cRo=r(A8e," (DistilBERT model)"),A8e.forEach(t),fRo=i(K),Sb=n(K,"LI",{});var y8e=s(Sb);zfe=n(y8e,"STRONG",{});var Tlt=s(zfe);mRo=r(Tlt,"electra"),Tlt.forEach(t),gRo=r(y8e," \u2014 "),LG=n(y8e,"A",{href:!0});var Mlt=s(LG);hRo=r(Mlt,"ElectraForMultipleChoice"),Mlt.forEach(t),pRo=r(y8e," (ELECTRA model)"),y8e.forEach(t),uRo=i(K),Rb=n(K,"LI",{});var L8e=s(Rb);Qfe=n(L8e,"STRONG",{});var Elt=s(Qfe);_Ro=r(Elt,"flaubert"),Elt.forEach(t),bRo=r(L8e," \u2014 "),xG=n(L8e,"A",{href:!0});var Clt=s(xG);vRo=r(Clt,"FlaubertForMultipleChoice"),Clt.forEach(t),FRo=r(L8e," (FlauBERT model)"),L8e.forEach(t),TRo=i(K),Bb=n(K,"LI",{});var x8e=s(Bb);Wfe=n(x8e,"STRONG",{});var wlt=s(Wfe);MRo=r(wlt,"fnet"),wlt.forEach(t),ERo=r(x8e," \u2014 "),$G=n(x8e,"A",{href:!0});var Alt=s($G);CRo=r(Alt,"FNetForMultipleChoice"),Alt.forEach(t),wRo=r(x8e," (FNet model)"),x8e.forEach(t),ARo=i(K),Pb=n(K,"LI",{});var $8e=s(Pb);Hfe=n($8e,"STRONG",{});var ylt=s(Hfe);yRo=r(ylt,"funnel"),ylt.forEach(t),LRo=r($8e," \u2014 "),kG=n($8e,"A",{href:!0});var Llt=s(kG);xRo=r(Llt,"FunnelForMultipleChoice"),Llt.forEach(t),$Ro=r($8e," (Funnel Transformer model)"),$8e.forEach(t),kRo=i(K),Ib=n(K,"LI",{});var k8e=s(Ib);Ufe=n(k8e,"STRONG",{});var xlt=s(Ufe);SRo=r(xlt,"ibert"),xlt.forEach(t),RRo=r(k8e," \u2014 "),SG=n(k8e,"A",{href:!0});var $lt=s(SG);BRo=r($lt,"IBertForMultipleChoice"),$lt.forEach(t),PRo=r(k8e," (I-BERT model)"),k8e.forEach(t),IRo=i(K),qb=n(K,"LI",{});var S8e=s(qb);Jfe=n(S8e,"STRONG",{});var klt=s(Jfe);qRo=r(klt,"longformer"),klt.forEach(t),NRo=r(S8e," \u2014 "),RG=n(S8e,"A",{href:!0});var Slt=s(RG);jRo=r(Slt,"LongformerForMultipleChoice"),Slt.forEach(t),DRo=r(S8e," (Longformer model)"),S8e.forEach(t),GRo=i(K),Nb=n(K,"LI",{});var R8e=s(Nb);Yfe=n(R8e,"STRONG",{});var Rlt=s(Yfe);ORo=r(Rlt,"megatron-bert"),Rlt.forEach(t),VRo=r(R8e," \u2014 "),BG=n(R8e,"A",{href:!0});var Blt=s(BG);XRo=r(Blt,"MegatronBertForMultipleChoice"),Blt.forEach(t),zRo=r(R8e," (MegatronBert model)"),R8e.forEach(t),QRo=i(K),jb=n(K,"LI",{});var B8e=s(jb);Kfe=n(B8e,"STRONG",{});var Plt=s(Kfe);WRo=r(Plt,"mobilebert"),Plt.forEach(t),HRo=r(B8e," \u2014 "),PG=n(B8e,"A",{href:!0});var Ilt=s(PG);URo=r(Ilt,"MobileBertForMultipleChoice"),Ilt.forEach(t),JRo=r(B8e," (MobileBERT model)"),B8e.forEach(t),YRo=i(K),Db=n(K,"LI",{});var P8e=s(Db);Zfe=n(P8e,"STRONG",{});var qlt=s(Zfe);KRo=r(qlt,"mpnet"),qlt.forEach(t),ZRo=r(P8e," \u2014 "),IG=n(P8e,"A",{href:!0});var Nlt=s(IG);eBo=r(Nlt,"MPNetForMultipleChoice"),Nlt.forEach(t),oBo=r(P8e," (MPNet model)"),P8e.forEach(t),rBo=i(K),Gb=n(K,"LI",{});var I8e=s(Gb);eme=n(I8e,"STRONG",{});var jlt=s(eme);tBo=r(jlt,"nystromformer"),jlt.forEach(t),aBo=r(I8e," \u2014 "),qG=n(I8e,"A",{href:!0});var Dlt=s(qG);nBo=r(Dlt,"NystromformerForMultipleChoice"),Dlt.forEach(t),sBo=r(I8e," (Nystromformer model)"),I8e.forEach(t),lBo=i(K),Ob=n(K,"LI",{});var q8e=s(Ob);ome=n(q8e,"STRONG",{});var Glt=s(ome);iBo=r(Glt,"qdqbert"),Glt.forEach(t),dBo=r(q8e," \u2014 "),NG=n(q8e,"A",{href:!0});var Olt=s(NG);cBo=r(Olt,"QDQBertForMultipleChoice"),Olt.forEach(t),fBo=r(q8e," (QDQBert model)"),q8e.forEach(t),mBo=i(K),Vb=n(K,"LI",{});var N8e=s(Vb);rme=n(N8e,"STRONG",{});var Vlt=s(rme);gBo=r(Vlt,"rembert"),Vlt.forEach(t),hBo=r(N8e," \u2014 "),jG=n(N8e,"A",{href:!0});var Xlt=s(jG);pBo=r(Xlt,"RemBertForMultipleChoice"),Xlt.forEach(t),uBo=r(N8e," (RemBERT model)"),N8e.forEach(t),_Bo=i(K),Xb=n(K,"LI",{});var j8e=s(Xb);tme=n(j8e,"STRONG",{});var zlt=s(tme);bBo=r(zlt,"roberta"),zlt.forEach(t),vBo=r(j8e," \u2014 "),DG=n(j8e,"A",{href:!0});var Qlt=s(DG);FBo=r(Qlt,"RobertaForMultipleChoice"),Qlt.forEach(t),TBo=r(j8e," (RoBERTa model)"),j8e.forEach(t),MBo=i(K),zb=n(K,"LI",{});var D8e=s(zb);ame=n(D8e,"STRONG",{});var Wlt=s(ame);EBo=r(Wlt,"roformer"),Wlt.forEach(t),CBo=r(D8e," \u2014 "),GG=n(D8e,"A",{href:!0});var Hlt=s(GG);wBo=r(Hlt,"RoFormerForMultipleChoice"),Hlt.forEach(t),ABo=r(D8e," (RoFormer model)"),D8e.forEach(t),yBo=i(K),Qb=n(K,"LI",{});var G8e=s(Qb);nme=n(G8e,"STRONG",{});var Ult=s(nme);LBo=r(Ult,"squeezebert"),Ult.forEach(t),xBo=r(G8e," \u2014 "),OG=n(G8e,"A",{href:!0});var Jlt=s(OG);$Bo=r(Jlt,"SqueezeBertForMultipleChoice"),Jlt.forEach(t),kBo=r(G8e," (SqueezeBERT model)"),G8e.forEach(t),SBo=i(K),Wb=n(K,"LI",{});var O8e=s(Wb);sme=n(O8e,"STRONG",{});var Ylt=s(sme);RBo=r(Ylt,"xlm"),Ylt.forEach(t),BBo=r(O8e," \u2014 "),VG=n(O8e,"A",{href:!0});var Klt=s(VG);PBo=r(Klt,"XLMForMultipleChoice"),Klt.forEach(t),IBo=r(O8e," (XLM model)"),O8e.forEach(t),qBo=i(K),Hb=n(K,"LI",{});var V8e=s(Hb);lme=n(V8e,"STRONG",{});var Zlt=s(lme);NBo=r(Zlt,"xlm-roberta"),Zlt.forEach(t),jBo=r(V8e," \u2014 "),XG=n(V8e,"A",{href:!0});var eit=s(XG);DBo=r(eit,"XLMRobertaForMultipleChoice"),eit.forEach(t),GBo=r(V8e," (XLM-RoBERTa model)"),V8e.forEach(t),OBo=i(K),Ub=n(K,"LI",{});var X8e=s(Ub);ime=n(X8e,"STRONG",{});var oit=s(ime);VBo=r(oit,"xlm-roberta-xl"),oit.forEach(t),XBo=r(X8e," \u2014 "),zG=n(X8e,"A",{href:!0});var rit=s(zG);zBo=r(rit,"XLMRobertaXLForMultipleChoice"),rit.forEach(t),QBo=r(X8e," (XLM-RoBERTa-XL model)"),X8e.forEach(t),WBo=i(K),Jb=n(K,"LI",{});var z8e=s(Jb);dme=n(z8e,"STRONG",{});var tit=s(dme);HBo=r(tit,"xlnet"),tit.forEach(t),UBo=r(z8e," \u2014 "),QG=n(z8e,"A",{href:!0});var ait=s(QG);JBo=r(ait,"XLNetForMultipleChoice"),ait.forEach(t),YBo=r(z8e," (XLNet model)"),z8e.forEach(t),KBo=i(K),Yb=n(K,"LI",{});var Q8e=s(Yb);cme=n(Q8e,"STRONG",{});var nit=s(cme);ZBo=r(nit,"yoso"),nit.forEach(t),ePo=r(Q8e," \u2014 "),WG=n(Q8e,"A",{href:!0});var sit=s(WG);oPo=r(sit,"YosoForMultipleChoice"),sit.forEach(t),rPo=r(Q8e," (YOSO model)"),Q8e.forEach(t),K.forEach(t),tPo=i(na),Kb=n(na,"P",{});var W8e=s(Kb);aPo=r(W8e,"The model is set in evaluation mode by default using "),fme=n(W8e,"CODE",{});var lit=s(fme);nPo=r(lit,"model.eval()"),lit.forEach(t),sPo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(W8e,"CODE",{});var iit=s(mme);lPo=r(iit,"model.train()"),iit.forEach(t),W8e.forEach(t),iPo=i(na),T(Zb.$$.fragment,na),na.forEach(t),Qs.forEach(t),qIe=i(f),Vi=n(f,"H2",{class:!0});var GNe=s(Vi);ev=n(GNe,"A",{id:!0,class:!0,href:!0});var dit=s(ev);gme=n(dit,"SPAN",{});var cit=s(gme);T(dy.$$.fragment,cit),cit.forEach(t),dit.forEach(t),dPo=i(GNe),hme=n(GNe,"SPAN",{});var fit=s(hme);cPo=r(fit,"AutoModelForNextSentencePrediction"),fit.forEach(t),GNe.forEach(t),NIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(cy.$$.fragment,Ws),fPo=i(Ws),Xi=n(Ws,"P",{});var BK=s(Xi);mPo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HG=n(BK,"A",{href:!0});var mit=s(HG);gPo=r(mit,"from_pretrained()"),mit.forEach(t),hPo=r(BK," class method or the "),UG=n(BK,"A",{href:!0});var git=s(UG);pPo=r(git,"from_config()"),git.forEach(t),uPo=r(BK,` class
method.`),BK.forEach(t),_Po=i(Ws),fy=n(Ws,"P",{});var ONe=s(fy);bPo=r(ONe,"This class cannot be instantiated directly using "),pme=n(ONe,"CODE",{});var hit=s(pme);vPo=r(hit,"__init__()"),hit.forEach(t),FPo=r(ONe," (throws an error)."),ONe.forEach(t),TPo=i(Ws),it=n(Ws,"DIV",{class:!0});var vw=s(it);T(my.$$.fragment,vw),MPo=i(vw),ume=n(vw,"P",{});var pit=s(ume);EPo=r(pit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pit.forEach(t),CPo=i(vw),zi=n(vw,"P",{});var PK=s(zi);wPo=r(PK,`Note:
Loading a model from its configuration file does `),_me=n(PK,"STRONG",{});var uit=s(_me);APo=r(uit,"not"),uit.forEach(t),yPo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(PK,"A",{href:!0});var _it=s(JG);LPo=r(_it,"from_pretrained()"),_it.forEach(t),xPo=r(PK," to load the model weights."),PK.forEach(t),$Po=i(vw),T(ov.$$.fragment,vw),vw.forEach(t),kPo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(gy.$$.fragment,sa),SPo=i(sa),bme=n(sa,"P",{});var bit=s(bme);RPo=r(bit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bit.forEach(t),BPo=i(sa),Ra=n(sa,"P",{});var Fw=s(Ra);PPo=r(Fw,"The model class to instantiate is selected based on the "),vme=n(Fw,"CODE",{});var vit=s(vme);IPo=r(vit,"model_type"),vit.forEach(t),qPo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Fme=n(Fw,"CODE",{});var Fit=s(Fme);NPo=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),jPo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(Fw,"CODE",{});var Tit=s(Tme);DPo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),GPo=r(Fw,":"),Fw.forEach(t),OPo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);rv=n(Hs,"LI",{});var H8e=s(rv);Mme=n(H8e,"STRONG",{});var Mit=s(Mme);VPo=r(Mit,"bert"),Mit.forEach(t),XPo=r(H8e," \u2014 "),YG=n(H8e,"A",{href:!0});var Eit=s(YG);zPo=r(Eit,"BertForNextSentencePrediction"),Eit.forEach(t),QPo=r(H8e," (BERT model)"),H8e.forEach(t),WPo=i(Hs),tv=n(Hs,"LI",{});var U8e=s(tv);Eme=n(U8e,"STRONG",{});var Cit=s(Eme);HPo=r(Cit,"fnet"),Cit.forEach(t),UPo=r(U8e," \u2014 "),KG=n(U8e,"A",{href:!0});var wit=s(KG);JPo=r(wit,"FNetForNextSentencePrediction"),wit.forEach(t),YPo=r(U8e," (FNet model)"),U8e.forEach(t),KPo=i(Hs),av=n(Hs,"LI",{});var J8e=s(av);Cme=n(J8e,"STRONG",{});var Ait=s(Cme);ZPo=r(Ait,"megatron-bert"),Ait.forEach(t),eIo=r(J8e," \u2014 "),ZG=n(J8e,"A",{href:!0});var yit=s(ZG);oIo=r(yit,"MegatronBertForNextSentencePrediction"),yit.forEach(t),rIo=r(J8e," (MegatronBert model)"),J8e.forEach(t),tIo=i(Hs),nv=n(Hs,"LI",{});var Y8e=s(nv);wme=n(Y8e,"STRONG",{});var Lit=s(wme);aIo=r(Lit,"mobilebert"),Lit.forEach(t),nIo=r(Y8e," \u2014 "),eO=n(Y8e,"A",{href:!0});var xit=s(eO);sIo=r(xit,"MobileBertForNextSentencePrediction"),xit.forEach(t),lIo=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),iIo=i(Hs),sv=n(Hs,"LI",{});var K8e=s(sv);Ame=n(K8e,"STRONG",{});var $it=s(Ame);dIo=r($it,"qdqbert"),$it.forEach(t),cIo=r(K8e," \u2014 "),oO=n(K8e,"A",{href:!0});var kit=s(oO);fIo=r(kit,"QDQBertForNextSentencePrediction"),kit.forEach(t),mIo=r(K8e," (QDQBert model)"),K8e.forEach(t),Hs.forEach(t),gIo=i(sa),lv=n(sa,"P",{});var Z8e=s(lv);hIo=r(Z8e,"The model is set in evaluation mode by default using "),yme=n(Z8e,"CODE",{});var Sit=s(yme);pIo=r(Sit,"model.eval()"),Sit.forEach(t),uIo=r(Z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(Z8e,"CODE",{});var Rit=s(Lme);_Io=r(Rit,"model.train()"),Rit.forEach(t),Z8e.forEach(t),bIo=i(sa),T(iv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),jIe=i(f),Qi=n(f,"H2",{class:!0});var VNe=s(Qi);dv=n(VNe,"A",{id:!0,class:!0,href:!0});var Bit=s(dv);xme=n(Bit,"SPAN",{});var Pit=s(xme);T(hy.$$.fragment,Pit),Pit.forEach(t),Bit.forEach(t),vIo=i(VNe),$me=n(VNe,"SPAN",{});var Iit=s($me);FIo=r(Iit,"AutoModelForTokenClassification"),Iit.forEach(t),VNe.forEach(t),DIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(py.$$.fragment,Us),TIo=i(Us),Wi=n(Us,"P",{});var IK=s(Wi);MIo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rO=n(IK,"A",{href:!0});var qit=s(rO);EIo=r(qit,"from_pretrained()"),qit.forEach(t),CIo=r(IK," class method or the "),tO=n(IK,"A",{href:!0});var Nit=s(tO);wIo=r(Nit,"from_config()"),Nit.forEach(t),AIo=r(IK,` class
method.`),IK.forEach(t),yIo=i(Us),uy=n(Us,"P",{});var XNe=s(uy);LIo=r(XNe,"This class cannot be instantiated directly using "),kme=n(XNe,"CODE",{});var jit=s(kme);xIo=r(jit,"__init__()"),jit.forEach(t),$Io=r(XNe," (throws an error)."),XNe.forEach(t),kIo=i(Us),dt=n(Us,"DIV",{class:!0});var Tw=s(dt);T(_y.$$.fragment,Tw),SIo=i(Tw),Sme=n(Tw,"P",{});var Dit=s(Sme);RIo=r(Dit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dit.forEach(t),BIo=i(Tw),Hi=n(Tw,"P",{});var qK=s(Hi);PIo=r(qK,`Note:
Loading a model from its configuration file does `),Rme=n(qK,"STRONG",{});var Git=s(Rme);IIo=r(Git,"not"),Git.forEach(t),qIo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(qK,"A",{href:!0});var Oit=s(aO);NIo=r(Oit,"from_pretrained()"),Oit.forEach(t),jIo=r(qK," to load the model weights."),qK.forEach(t),DIo=i(Tw),T(cv.$$.fragment,Tw),Tw.forEach(t),GIo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(by.$$.fragment,la),OIo=i(la),Bme=n(la,"P",{});var Vit=s(Bme);VIo=r(Vit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vit.forEach(t),XIo=i(la),Ba=n(la,"P",{});var Mw=s(Ba);zIo=r(Mw,"The model class to instantiate is selected based on the "),Pme=n(Mw,"CODE",{});var Xit=s(Pme);QIo=r(Xit,"model_type"),Xit.forEach(t),WIo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Ime=n(Mw,"CODE",{});var zit=s(Ime);HIo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),UIo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(Mw,"CODE",{});var Qit=s(qme);JIo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),YIo=r(Mw,":"),Mw.forEach(t),KIo=i(la),U=n(la,"UL",{});var J=s(U);fv=n(J,"LI",{});var exe=s(fv);Nme=n(exe,"STRONG",{});var Wit=s(Nme);ZIo=r(Wit,"albert"),Wit.forEach(t),eqo=r(exe," \u2014 "),nO=n(exe,"A",{href:!0});var Hit=s(nO);oqo=r(Hit,"AlbertForTokenClassification"),Hit.forEach(t),rqo=r(exe," (ALBERT model)"),exe.forEach(t),tqo=i(J),mv=n(J,"LI",{});var oxe=s(mv);jme=n(oxe,"STRONG",{});var Uit=s(jme);aqo=r(Uit,"bert"),Uit.forEach(t),nqo=r(oxe," \u2014 "),sO=n(oxe,"A",{href:!0});var Jit=s(sO);sqo=r(Jit,"BertForTokenClassification"),Jit.forEach(t),lqo=r(oxe," (BERT model)"),oxe.forEach(t),iqo=i(J),gv=n(J,"LI",{});var rxe=s(gv);Dme=n(rxe,"STRONG",{});var Yit=s(Dme);dqo=r(Yit,"big_bird"),Yit.forEach(t),cqo=r(rxe," \u2014 "),lO=n(rxe,"A",{href:!0});var Kit=s(lO);fqo=r(Kit,"BigBirdForTokenClassification"),Kit.forEach(t),mqo=r(rxe," (BigBird model)"),rxe.forEach(t),gqo=i(J),hv=n(J,"LI",{});var txe=s(hv);Gme=n(txe,"STRONG",{});var Zit=s(Gme);hqo=r(Zit,"camembert"),Zit.forEach(t),pqo=r(txe," \u2014 "),iO=n(txe,"A",{href:!0});var edt=s(iO);uqo=r(edt,"CamembertForTokenClassification"),edt.forEach(t),_qo=r(txe," (CamemBERT model)"),txe.forEach(t),bqo=i(J),pv=n(J,"LI",{});var axe=s(pv);Ome=n(axe,"STRONG",{});var odt=s(Ome);vqo=r(odt,"canine"),odt.forEach(t),Fqo=r(axe," \u2014 "),dO=n(axe,"A",{href:!0});var rdt=s(dO);Tqo=r(rdt,"CanineForTokenClassification"),rdt.forEach(t),Mqo=r(axe," (Canine model)"),axe.forEach(t),Eqo=i(J),uv=n(J,"LI",{});var nxe=s(uv);Vme=n(nxe,"STRONG",{});var tdt=s(Vme);Cqo=r(tdt,"convbert"),tdt.forEach(t),wqo=r(nxe," \u2014 "),cO=n(nxe,"A",{href:!0});var adt=s(cO);Aqo=r(adt,"ConvBertForTokenClassification"),adt.forEach(t),yqo=r(nxe," (ConvBERT model)"),nxe.forEach(t),Lqo=i(J),_v=n(J,"LI",{});var sxe=s(_v);Xme=n(sxe,"STRONG",{});var ndt=s(Xme);xqo=r(ndt,"data2vec-text"),ndt.forEach(t),$qo=r(sxe," \u2014 "),fO=n(sxe,"A",{href:!0});var sdt=s(fO);kqo=r(sdt,"Data2VecTextForTokenClassification"),sdt.forEach(t),Sqo=r(sxe," (Data2VecText model)"),sxe.forEach(t),Rqo=i(J),bv=n(J,"LI",{});var lxe=s(bv);zme=n(lxe,"STRONG",{});var ldt=s(zme);Bqo=r(ldt,"deberta"),ldt.forEach(t),Pqo=r(lxe," \u2014 "),mO=n(lxe,"A",{href:!0});var idt=s(mO);Iqo=r(idt,"DebertaForTokenClassification"),idt.forEach(t),qqo=r(lxe," (DeBERTa model)"),lxe.forEach(t),Nqo=i(J),vv=n(J,"LI",{});var ixe=s(vv);Qme=n(ixe,"STRONG",{});var ddt=s(Qme);jqo=r(ddt,"deberta-v2"),ddt.forEach(t),Dqo=r(ixe," \u2014 "),gO=n(ixe,"A",{href:!0});var cdt=s(gO);Gqo=r(cdt,"DebertaV2ForTokenClassification"),cdt.forEach(t),Oqo=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),Vqo=i(J),Fv=n(J,"LI",{});var dxe=s(Fv);Wme=n(dxe,"STRONG",{});var fdt=s(Wme);Xqo=r(fdt,"distilbert"),fdt.forEach(t),zqo=r(dxe," \u2014 "),hO=n(dxe,"A",{href:!0});var mdt=s(hO);Qqo=r(mdt,"DistilBertForTokenClassification"),mdt.forEach(t),Wqo=r(dxe," (DistilBERT model)"),dxe.forEach(t),Hqo=i(J),Tv=n(J,"LI",{});var cxe=s(Tv);Hme=n(cxe,"STRONG",{});var gdt=s(Hme);Uqo=r(gdt,"electra"),gdt.forEach(t),Jqo=r(cxe," \u2014 "),pO=n(cxe,"A",{href:!0});var hdt=s(pO);Yqo=r(hdt,"ElectraForTokenClassification"),hdt.forEach(t),Kqo=r(cxe," (ELECTRA model)"),cxe.forEach(t),Zqo=i(J),Mv=n(J,"LI",{});var fxe=s(Mv);Ume=n(fxe,"STRONG",{});var pdt=s(Ume);eNo=r(pdt,"flaubert"),pdt.forEach(t),oNo=r(fxe," \u2014 "),uO=n(fxe,"A",{href:!0});var udt=s(uO);rNo=r(udt,"FlaubertForTokenClassification"),udt.forEach(t),tNo=r(fxe," (FlauBERT model)"),fxe.forEach(t),aNo=i(J),Ev=n(J,"LI",{});var mxe=s(Ev);Jme=n(mxe,"STRONG",{});var _dt=s(Jme);nNo=r(_dt,"fnet"),_dt.forEach(t),sNo=r(mxe," \u2014 "),_O=n(mxe,"A",{href:!0});var bdt=s(_O);lNo=r(bdt,"FNetForTokenClassification"),bdt.forEach(t),iNo=r(mxe," (FNet model)"),mxe.forEach(t),dNo=i(J),Cv=n(J,"LI",{});var gxe=s(Cv);Yme=n(gxe,"STRONG",{});var vdt=s(Yme);cNo=r(vdt,"funnel"),vdt.forEach(t),fNo=r(gxe," \u2014 "),bO=n(gxe,"A",{href:!0});var Fdt=s(bO);mNo=r(Fdt,"FunnelForTokenClassification"),Fdt.forEach(t),gNo=r(gxe," (Funnel Transformer model)"),gxe.forEach(t),hNo=i(J),wv=n(J,"LI",{});var hxe=s(wv);Kme=n(hxe,"STRONG",{});var Tdt=s(Kme);pNo=r(Tdt,"gpt2"),Tdt.forEach(t),uNo=r(hxe," \u2014 "),vO=n(hxe,"A",{href:!0});var Mdt=s(vO);_No=r(Mdt,"GPT2ForTokenClassification"),Mdt.forEach(t),bNo=r(hxe," (OpenAI GPT-2 model)"),hxe.forEach(t),vNo=i(J),Av=n(J,"LI",{});var pxe=s(Av);Zme=n(pxe,"STRONG",{});var Edt=s(Zme);FNo=r(Edt,"ibert"),Edt.forEach(t),TNo=r(pxe," \u2014 "),FO=n(pxe,"A",{href:!0});var Cdt=s(FO);MNo=r(Cdt,"IBertForTokenClassification"),Cdt.forEach(t),ENo=r(pxe," (I-BERT model)"),pxe.forEach(t),CNo=i(J),yv=n(J,"LI",{});var uxe=s(yv);ege=n(uxe,"STRONG",{});var wdt=s(ege);wNo=r(wdt,"layoutlm"),wdt.forEach(t),ANo=r(uxe," \u2014 "),TO=n(uxe,"A",{href:!0});var Adt=s(TO);yNo=r(Adt,"LayoutLMForTokenClassification"),Adt.forEach(t),LNo=r(uxe," (LayoutLM model)"),uxe.forEach(t),xNo=i(J),Lv=n(J,"LI",{});var _xe=s(Lv);oge=n(_xe,"STRONG",{});var ydt=s(oge);$No=r(ydt,"layoutlmv2"),ydt.forEach(t),kNo=r(_xe," \u2014 "),MO=n(_xe,"A",{href:!0});var Ldt=s(MO);SNo=r(Ldt,"LayoutLMv2ForTokenClassification"),Ldt.forEach(t),RNo=r(_xe," (LayoutLMv2 model)"),_xe.forEach(t),BNo=i(J),xv=n(J,"LI",{});var bxe=s(xv);rge=n(bxe,"STRONG",{});var xdt=s(rge);PNo=r(xdt,"longformer"),xdt.forEach(t),INo=r(bxe," \u2014 "),EO=n(bxe,"A",{href:!0});var $dt=s(EO);qNo=r($dt,"LongformerForTokenClassification"),$dt.forEach(t),NNo=r(bxe," (Longformer model)"),bxe.forEach(t),jNo=i(J),$v=n(J,"LI",{});var vxe=s($v);tge=n(vxe,"STRONG",{});var kdt=s(tge);DNo=r(kdt,"megatron-bert"),kdt.forEach(t),GNo=r(vxe," \u2014 "),CO=n(vxe,"A",{href:!0});var Sdt=s(CO);ONo=r(Sdt,"MegatronBertForTokenClassification"),Sdt.forEach(t),VNo=r(vxe," (MegatronBert model)"),vxe.forEach(t),XNo=i(J),kv=n(J,"LI",{});var Fxe=s(kv);age=n(Fxe,"STRONG",{});var Rdt=s(age);zNo=r(Rdt,"mobilebert"),Rdt.forEach(t),QNo=r(Fxe," \u2014 "),wO=n(Fxe,"A",{href:!0});var Bdt=s(wO);WNo=r(Bdt,"MobileBertForTokenClassification"),Bdt.forEach(t),HNo=r(Fxe," (MobileBERT model)"),Fxe.forEach(t),UNo=i(J),Sv=n(J,"LI",{});var Txe=s(Sv);nge=n(Txe,"STRONG",{});var Pdt=s(nge);JNo=r(Pdt,"mpnet"),Pdt.forEach(t),YNo=r(Txe," \u2014 "),AO=n(Txe,"A",{href:!0});var Idt=s(AO);KNo=r(Idt,"MPNetForTokenClassification"),Idt.forEach(t),ZNo=r(Txe," (MPNet model)"),Txe.forEach(t),ejo=i(J),Rv=n(J,"LI",{});var Mxe=s(Rv);sge=n(Mxe,"STRONG",{});var qdt=s(sge);ojo=r(qdt,"nystromformer"),qdt.forEach(t),rjo=r(Mxe," \u2014 "),yO=n(Mxe,"A",{href:!0});var Ndt=s(yO);tjo=r(Ndt,"NystromformerForTokenClassification"),Ndt.forEach(t),ajo=r(Mxe," (Nystromformer model)"),Mxe.forEach(t),njo=i(J),Bv=n(J,"LI",{});var Exe=s(Bv);lge=n(Exe,"STRONG",{});var jdt=s(lge);sjo=r(jdt,"qdqbert"),jdt.forEach(t),ljo=r(Exe," \u2014 "),LO=n(Exe,"A",{href:!0});var Ddt=s(LO);ijo=r(Ddt,"QDQBertForTokenClassification"),Ddt.forEach(t),djo=r(Exe," (QDQBert model)"),Exe.forEach(t),cjo=i(J),Pv=n(J,"LI",{});var Cxe=s(Pv);ige=n(Cxe,"STRONG",{});var Gdt=s(ige);fjo=r(Gdt,"rembert"),Gdt.forEach(t),mjo=r(Cxe," \u2014 "),xO=n(Cxe,"A",{href:!0});var Odt=s(xO);gjo=r(Odt,"RemBertForTokenClassification"),Odt.forEach(t),hjo=r(Cxe," (RemBERT model)"),Cxe.forEach(t),pjo=i(J),Iv=n(J,"LI",{});var wxe=s(Iv);dge=n(wxe,"STRONG",{});var Vdt=s(dge);ujo=r(Vdt,"roberta"),Vdt.forEach(t),_jo=r(wxe," \u2014 "),$O=n(wxe,"A",{href:!0});var Xdt=s($O);bjo=r(Xdt,"RobertaForTokenClassification"),Xdt.forEach(t),vjo=r(wxe," (RoBERTa model)"),wxe.forEach(t),Fjo=i(J),qv=n(J,"LI",{});var Axe=s(qv);cge=n(Axe,"STRONG",{});var zdt=s(cge);Tjo=r(zdt,"roformer"),zdt.forEach(t),Mjo=r(Axe," \u2014 "),kO=n(Axe,"A",{href:!0});var Qdt=s(kO);Ejo=r(Qdt,"RoFormerForTokenClassification"),Qdt.forEach(t),Cjo=r(Axe," (RoFormer model)"),Axe.forEach(t),wjo=i(J),Nv=n(J,"LI",{});var yxe=s(Nv);fge=n(yxe,"STRONG",{});var Wdt=s(fge);Ajo=r(Wdt,"squeezebert"),Wdt.forEach(t),yjo=r(yxe," \u2014 "),SO=n(yxe,"A",{href:!0});var Hdt=s(SO);Ljo=r(Hdt,"SqueezeBertForTokenClassification"),Hdt.forEach(t),xjo=r(yxe," (SqueezeBERT model)"),yxe.forEach(t),$jo=i(J),jv=n(J,"LI",{});var Lxe=s(jv);mge=n(Lxe,"STRONG",{});var Udt=s(mge);kjo=r(Udt,"xlm"),Udt.forEach(t),Sjo=r(Lxe," \u2014 "),RO=n(Lxe,"A",{href:!0});var Jdt=s(RO);Rjo=r(Jdt,"XLMForTokenClassification"),Jdt.forEach(t),Bjo=r(Lxe," (XLM model)"),Lxe.forEach(t),Pjo=i(J),Dv=n(J,"LI",{});var xxe=s(Dv);gge=n(xxe,"STRONG",{});var Ydt=s(gge);Ijo=r(Ydt,"xlm-roberta"),Ydt.forEach(t),qjo=r(xxe," \u2014 "),BO=n(xxe,"A",{href:!0});var Kdt=s(BO);Njo=r(Kdt,"XLMRobertaForTokenClassification"),Kdt.forEach(t),jjo=r(xxe," (XLM-RoBERTa model)"),xxe.forEach(t),Djo=i(J),Gv=n(J,"LI",{});var $xe=s(Gv);hge=n($xe,"STRONG",{});var Zdt=s(hge);Gjo=r(Zdt,"xlm-roberta-xl"),Zdt.forEach(t),Ojo=r($xe," \u2014 "),PO=n($xe,"A",{href:!0});var ect=s(PO);Vjo=r(ect,"XLMRobertaXLForTokenClassification"),ect.forEach(t),Xjo=r($xe," (XLM-RoBERTa-XL model)"),$xe.forEach(t),zjo=i(J),Ov=n(J,"LI",{});var kxe=s(Ov);pge=n(kxe,"STRONG",{});var oct=s(pge);Qjo=r(oct,"xlnet"),oct.forEach(t),Wjo=r(kxe," \u2014 "),IO=n(kxe,"A",{href:!0});var rct=s(IO);Hjo=r(rct,"XLNetForTokenClassification"),rct.forEach(t),Ujo=r(kxe," (XLNet model)"),kxe.forEach(t),Jjo=i(J),Vv=n(J,"LI",{});var Sxe=s(Vv);uge=n(Sxe,"STRONG",{});var tct=s(uge);Yjo=r(tct,"yoso"),tct.forEach(t),Kjo=r(Sxe," \u2014 "),qO=n(Sxe,"A",{href:!0});var act=s(qO);Zjo=r(act,"YosoForTokenClassification"),act.forEach(t),eDo=r(Sxe," (YOSO model)"),Sxe.forEach(t),J.forEach(t),oDo=i(la),Xv=n(la,"P",{});var Rxe=s(Xv);rDo=r(Rxe,"The model is set in evaluation mode by default using "),_ge=n(Rxe,"CODE",{});var nct=s(_ge);tDo=r(nct,"model.eval()"),nct.forEach(t),aDo=r(Rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Rxe,"CODE",{});var sct=s(bge);nDo=r(sct,"model.train()"),sct.forEach(t),Rxe.forEach(t),sDo=i(la),T(zv.$$.fragment,la),la.forEach(t),Us.forEach(t),GIe=i(f),Ui=n(f,"H2",{class:!0});var zNe=s(Ui);Qv=n(zNe,"A",{id:!0,class:!0,href:!0});var lct=s(Qv);vge=n(lct,"SPAN",{});var ict=s(vge);T(vy.$$.fragment,ict),ict.forEach(t),lct.forEach(t),lDo=i(zNe),Fge=n(zNe,"SPAN",{});var dct=s(Fge);iDo=r(dct,"AutoModelForQuestionAnswering"),dct.forEach(t),zNe.forEach(t),OIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Fy.$$.fragment,Js),dDo=i(Js),Ji=n(Js,"P",{});var NK=s(Ji);cDo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NO=n(NK,"A",{href:!0});var cct=s(NO);fDo=r(cct,"from_pretrained()"),cct.forEach(t),mDo=r(NK," class method or the "),jO=n(NK,"A",{href:!0});var fct=s(jO);gDo=r(fct,"from_config()"),fct.forEach(t),hDo=r(NK,` class
method.`),NK.forEach(t),pDo=i(Js),Ty=n(Js,"P",{});var QNe=s(Ty);uDo=r(QNe,"This class cannot be instantiated directly using "),Tge=n(QNe,"CODE",{});var mct=s(Tge);_Do=r(mct,"__init__()"),mct.forEach(t),bDo=r(QNe," (throws an error)."),QNe.forEach(t),vDo=i(Js),ct=n(Js,"DIV",{class:!0});var Ew=s(ct);T(My.$$.fragment,Ew),FDo=i(Ew),Mge=n(Ew,"P",{});var gct=s(Mge);TDo=r(gct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gct.forEach(t),MDo=i(Ew),Yi=n(Ew,"P",{});var jK=s(Yi);EDo=r(jK,`Note:
Loading a model from its configuration file does `),Ege=n(jK,"STRONG",{});var hct=s(Ege);CDo=r(hct,"not"),hct.forEach(t),wDo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(jK,"A",{href:!0});var pct=s(DO);ADo=r(pct,"from_pretrained()"),pct.forEach(t),yDo=r(jK," to load the model weights."),jK.forEach(t),LDo=i(Ew),T(Wv.$$.fragment,Ew),Ew.forEach(t),xDo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(Ey.$$.fragment,ia),$Do=i(ia),Cge=n(ia,"P",{});var uct=s(Cge);kDo=r(uct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uct.forEach(t),SDo=i(ia),Pa=n(ia,"P",{});var Cw=s(Pa);RDo=r(Cw,"The model class to instantiate is selected based on the "),wge=n(Cw,"CODE",{});var _ct=s(wge);BDo=r(_ct,"model_type"),_ct.forEach(t),PDo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Age=n(Cw,"CODE",{});var bct=s(Age);IDo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),qDo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(Cw,"CODE",{});var vct=s(yge);NDo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),jDo=r(Cw,":"),Cw.forEach(t),DDo=i(ia),V=n(ia,"UL",{});var X=s(V);Hv=n(X,"LI",{});var Bxe=s(Hv);Lge=n(Bxe,"STRONG",{});var Fct=s(Lge);GDo=r(Fct,"albert"),Fct.forEach(t),ODo=r(Bxe," \u2014 "),GO=n(Bxe,"A",{href:!0});var Tct=s(GO);VDo=r(Tct,"AlbertForQuestionAnswering"),Tct.forEach(t),XDo=r(Bxe," (ALBERT model)"),Bxe.forEach(t),zDo=i(X),Uv=n(X,"LI",{});var Pxe=s(Uv);xge=n(Pxe,"STRONG",{});var Mct=s(xge);QDo=r(Mct,"bart"),Mct.forEach(t),WDo=r(Pxe," \u2014 "),OO=n(Pxe,"A",{href:!0});var Ect=s(OO);HDo=r(Ect,"BartForQuestionAnswering"),Ect.forEach(t),UDo=r(Pxe," (BART model)"),Pxe.forEach(t),JDo=i(X),Jv=n(X,"LI",{});var Ixe=s(Jv);$ge=n(Ixe,"STRONG",{});var Cct=s($ge);YDo=r(Cct,"bert"),Cct.forEach(t),KDo=r(Ixe," \u2014 "),VO=n(Ixe,"A",{href:!0});var wct=s(VO);ZDo=r(wct,"BertForQuestionAnswering"),wct.forEach(t),eGo=r(Ixe," (BERT model)"),Ixe.forEach(t),oGo=i(X),Yv=n(X,"LI",{});var qxe=s(Yv);kge=n(qxe,"STRONG",{});var Act=s(kge);rGo=r(Act,"big_bird"),Act.forEach(t),tGo=r(qxe," \u2014 "),XO=n(qxe,"A",{href:!0});var yct=s(XO);aGo=r(yct,"BigBirdForQuestionAnswering"),yct.forEach(t),nGo=r(qxe," (BigBird model)"),qxe.forEach(t),sGo=i(X),Kv=n(X,"LI",{});var Nxe=s(Kv);Sge=n(Nxe,"STRONG",{});var Lct=s(Sge);lGo=r(Lct,"bigbird_pegasus"),Lct.forEach(t),iGo=r(Nxe," \u2014 "),zO=n(Nxe,"A",{href:!0});var xct=s(zO);dGo=r(xct,"BigBirdPegasusForQuestionAnswering"),xct.forEach(t),cGo=r(Nxe," (BigBirdPegasus model)"),Nxe.forEach(t),fGo=i(X),Zv=n(X,"LI",{});var jxe=s(Zv);Rge=n(jxe,"STRONG",{});var $ct=s(Rge);mGo=r($ct,"camembert"),$ct.forEach(t),gGo=r(jxe," \u2014 "),QO=n(jxe,"A",{href:!0});var kct=s(QO);hGo=r(kct,"CamembertForQuestionAnswering"),kct.forEach(t),pGo=r(jxe," (CamemBERT model)"),jxe.forEach(t),uGo=i(X),eF=n(X,"LI",{});var Dxe=s(eF);Bge=n(Dxe,"STRONG",{});var Sct=s(Bge);_Go=r(Sct,"canine"),Sct.forEach(t),bGo=r(Dxe," \u2014 "),WO=n(Dxe,"A",{href:!0});var Rct=s(WO);vGo=r(Rct,"CanineForQuestionAnswering"),Rct.forEach(t),FGo=r(Dxe," (Canine model)"),Dxe.forEach(t),TGo=i(X),oF=n(X,"LI",{});var Gxe=s(oF);Pge=n(Gxe,"STRONG",{});var Bct=s(Pge);MGo=r(Bct,"convbert"),Bct.forEach(t),EGo=r(Gxe," \u2014 "),HO=n(Gxe,"A",{href:!0});var Pct=s(HO);CGo=r(Pct,"ConvBertForQuestionAnswering"),Pct.forEach(t),wGo=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),AGo=i(X),rF=n(X,"LI",{});var Oxe=s(rF);Ige=n(Oxe,"STRONG",{});var Ict=s(Ige);yGo=r(Ict,"data2vec-text"),Ict.forEach(t),LGo=r(Oxe," \u2014 "),UO=n(Oxe,"A",{href:!0});var qct=s(UO);xGo=r(qct,"Data2VecTextForQuestionAnswering"),qct.forEach(t),$Go=r(Oxe," (Data2VecText model)"),Oxe.forEach(t),kGo=i(X),tF=n(X,"LI",{});var Vxe=s(tF);qge=n(Vxe,"STRONG",{});var Nct=s(qge);SGo=r(Nct,"deberta"),Nct.forEach(t),RGo=r(Vxe," \u2014 "),JO=n(Vxe,"A",{href:!0});var jct=s(JO);BGo=r(jct,"DebertaForQuestionAnswering"),jct.forEach(t),PGo=r(Vxe," (DeBERTa model)"),Vxe.forEach(t),IGo=i(X),aF=n(X,"LI",{});var Xxe=s(aF);Nge=n(Xxe,"STRONG",{});var Dct=s(Nge);qGo=r(Dct,"deberta-v2"),Dct.forEach(t),NGo=r(Xxe," \u2014 "),YO=n(Xxe,"A",{href:!0});var Gct=s(YO);jGo=r(Gct,"DebertaV2ForQuestionAnswering"),Gct.forEach(t),DGo=r(Xxe," (DeBERTa-v2 model)"),Xxe.forEach(t),GGo=i(X),nF=n(X,"LI",{});var zxe=s(nF);jge=n(zxe,"STRONG",{});var Oct=s(jge);OGo=r(Oct,"distilbert"),Oct.forEach(t),VGo=r(zxe," \u2014 "),KO=n(zxe,"A",{href:!0});var Vct=s(KO);XGo=r(Vct,"DistilBertForQuestionAnswering"),Vct.forEach(t),zGo=r(zxe," (DistilBERT model)"),zxe.forEach(t),QGo=i(X),sF=n(X,"LI",{});var Qxe=s(sF);Dge=n(Qxe,"STRONG",{});var Xct=s(Dge);WGo=r(Xct,"electra"),Xct.forEach(t),HGo=r(Qxe," \u2014 "),ZO=n(Qxe,"A",{href:!0});var zct=s(ZO);UGo=r(zct,"ElectraForQuestionAnswering"),zct.forEach(t),JGo=r(Qxe," (ELECTRA model)"),Qxe.forEach(t),YGo=i(X),lF=n(X,"LI",{});var Wxe=s(lF);Gge=n(Wxe,"STRONG",{});var Qct=s(Gge);KGo=r(Qct,"flaubert"),Qct.forEach(t),ZGo=r(Wxe," \u2014 "),eV=n(Wxe,"A",{href:!0});var Wct=s(eV);eOo=r(Wct,"FlaubertForQuestionAnsweringSimple"),Wct.forEach(t),oOo=r(Wxe," (FlauBERT model)"),Wxe.forEach(t),rOo=i(X),iF=n(X,"LI",{});var Hxe=s(iF);Oge=n(Hxe,"STRONG",{});var Hct=s(Oge);tOo=r(Hct,"fnet"),Hct.forEach(t),aOo=r(Hxe," \u2014 "),oV=n(Hxe,"A",{href:!0});var Uct=s(oV);nOo=r(Uct,"FNetForQuestionAnswering"),Uct.forEach(t),sOo=r(Hxe," (FNet model)"),Hxe.forEach(t),lOo=i(X),dF=n(X,"LI",{});var Uxe=s(dF);Vge=n(Uxe,"STRONG",{});var Jct=s(Vge);iOo=r(Jct,"funnel"),Jct.forEach(t),dOo=r(Uxe," \u2014 "),rV=n(Uxe,"A",{href:!0});var Yct=s(rV);cOo=r(Yct,"FunnelForQuestionAnswering"),Yct.forEach(t),fOo=r(Uxe," (Funnel Transformer model)"),Uxe.forEach(t),mOo=i(X),cF=n(X,"LI",{});var Jxe=s(cF);Xge=n(Jxe,"STRONG",{});var Kct=s(Xge);gOo=r(Kct,"gptj"),Kct.forEach(t),hOo=r(Jxe," \u2014 "),tV=n(Jxe,"A",{href:!0});var Zct=s(tV);pOo=r(Zct,"GPTJForQuestionAnswering"),Zct.forEach(t),uOo=r(Jxe," (GPT-J model)"),Jxe.forEach(t),_Oo=i(X),fF=n(X,"LI",{});var Yxe=s(fF);zge=n(Yxe,"STRONG",{});var eft=s(zge);bOo=r(eft,"ibert"),eft.forEach(t),vOo=r(Yxe," \u2014 "),aV=n(Yxe,"A",{href:!0});var oft=s(aV);FOo=r(oft,"IBertForQuestionAnswering"),oft.forEach(t),TOo=r(Yxe," (I-BERT model)"),Yxe.forEach(t),MOo=i(X),mF=n(X,"LI",{});var Kxe=s(mF);Qge=n(Kxe,"STRONG",{});var rft=s(Qge);EOo=r(rft,"layoutlmv2"),rft.forEach(t),COo=r(Kxe," \u2014 "),nV=n(Kxe,"A",{href:!0});var tft=s(nV);wOo=r(tft,"LayoutLMv2ForQuestionAnswering"),tft.forEach(t),AOo=r(Kxe," (LayoutLMv2 model)"),Kxe.forEach(t),yOo=i(X),gF=n(X,"LI",{});var Zxe=s(gF);Wge=n(Zxe,"STRONG",{});var aft=s(Wge);LOo=r(aft,"led"),aft.forEach(t),xOo=r(Zxe," \u2014 "),sV=n(Zxe,"A",{href:!0});var nft=s(sV);$Oo=r(nft,"LEDForQuestionAnswering"),nft.forEach(t),kOo=r(Zxe," (LED model)"),Zxe.forEach(t),SOo=i(X),hF=n(X,"LI",{});var e9e=s(hF);Hge=n(e9e,"STRONG",{});var sft=s(Hge);ROo=r(sft,"longformer"),sft.forEach(t),BOo=r(e9e," \u2014 "),lV=n(e9e,"A",{href:!0});var lft=s(lV);POo=r(lft,"LongformerForQuestionAnswering"),lft.forEach(t),IOo=r(e9e," (Longformer model)"),e9e.forEach(t),qOo=i(X),pF=n(X,"LI",{});var o9e=s(pF);Uge=n(o9e,"STRONG",{});var ift=s(Uge);NOo=r(ift,"lxmert"),ift.forEach(t),jOo=r(o9e," \u2014 "),iV=n(o9e,"A",{href:!0});var dft=s(iV);DOo=r(dft,"LxmertForQuestionAnswering"),dft.forEach(t),GOo=r(o9e," (LXMERT model)"),o9e.forEach(t),OOo=i(X),uF=n(X,"LI",{});var r9e=s(uF);Jge=n(r9e,"STRONG",{});var cft=s(Jge);VOo=r(cft,"mbart"),cft.forEach(t),XOo=r(r9e," \u2014 "),dV=n(r9e,"A",{href:!0});var fft=s(dV);zOo=r(fft,"MBartForQuestionAnswering"),fft.forEach(t),QOo=r(r9e," (mBART model)"),r9e.forEach(t),WOo=i(X),_F=n(X,"LI",{});var t9e=s(_F);Yge=n(t9e,"STRONG",{});var mft=s(Yge);HOo=r(mft,"megatron-bert"),mft.forEach(t),UOo=r(t9e," \u2014 "),cV=n(t9e,"A",{href:!0});var gft=s(cV);JOo=r(gft,"MegatronBertForQuestionAnswering"),gft.forEach(t),YOo=r(t9e," (MegatronBert model)"),t9e.forEach(t),KOo=i(X),bF=n(X,"LI",{});var a9e=s(bF);Kge=n(a9e,"STRONG",{});var hft=s(Kge);ZOo=r(hft,"mobilebert"),hft.forEach(t),eVo=r(a9e," \u2014 "),fV=n(a9e,"A",{href:!0});var pft=s(fV);oVo=r(pft,"MobileBertForQuestionAnswering"),pft.forEach(t),rVo=r(a9e," (MobileBERT model)"),a9e.forEach(t),tVo=i(X),vF=n(X,"LI",{});var n9e=s(vF);Zge=n(n9e,"STRONG",{});var uft=s(Zge);aVo=r(uft,"mpnet"),uft.forEach(t),nVo=r(n9e," \u2014 "),mV=n(n9e,"A",{href:!0});var _ft=s(mV);sVo=r(_ft,"MPNetForQuestionAnswering"),_ft.forEach(t),lVo=r(n9e," (MPNet model)"),n9e.forEach(t),iVo=i(X),FF=n(X,"LI",{});var s9e=s(FF);ehe=n(s9e,"STRONG",{});var bft=s(ehe);dVo=r(bft,"nystromformer"),bft.forEach(t),cVo=r(s9e," \u2014 "),gV=n(s9e,"A",{href:!0});var vft=s(gV);fVo=r(vft,"NystromformerForQuestionAnswering"),vft.forEach(t),mVo=r(s9e," (Nystromformer model)"),s9e.forEach(t),gVo=i(X),TF=n(X,"LI",{});var l9e=s(TF);ohe=n(l9e,"STRONG",{});var Fft=s(ohe);hVo=r(Fft,"qdqbert"),Fft.forEach(t),pVo=r(l9e," \u2014 "),hV=n(l9e,"A",{href:!0});var Tft=s(hV);uVo=r(Tft,"QDQBertForQuestionAnswering"),Tft.forEach(t),_Vo=r(l9e," (QDQBert model)"),l9e.forEach(t),bVo=i(X),MF=n(X,"LI",{});var i9e=s(MF);rhe=n(i9e,"STRONG",{});var Mft=s(rhe);vVo=r(Mft,"reformer"),Mft.forEach(t),FVo=r(i9e," \u2014 "),pV=n(i9e,"A",{href:!0});var Eft=s(pV);TVo=r(Eft,"ReformerForQuestionAnswering"),Eft.forEach(t),MVo=r(i9e," (Reformer model)"),i9e.forEach(t),EVo=i(X),EF=n(X,"LI",{});var d9e=s(EF);the=n(d9e,"STRONG",{});var Cft=s(the);CVo=r(Cft,"rembert"),Cft.forEach(t),wVo=r(d9e," \u2014 "),uV=n(d9e,"A",{href:!0});var wft=s(uV);AVo=r(wft,"RemBertForQuestionAnswering"),wft.forEach(t),yVo=r(d9e," (RemBERT model)"),d9e.forEach(t),LVo=i(X),CF=n(X,"LI",{});var c9e=s(CF);ahe=n(c9e,"STRONG",{});var Aft=s(ahe);xVo=r(Aft,"roberta"),Aft.forEach(t),$Vo=r(c9e," \u2014 "),_V=n(c9e,"A",{href:!0});var yft=s(_V);kVo=r(yft,"RobertaForQuestionAnswering"),yft.forEach(t),SVo=r(c9e," (RoBERTa model)"),c9e.forEach(t),RVo=i(X),wF=n(X,"LI",{});var f9e=s(wF);nhe=n(f9e,"STRONG",{});var Lft=s(nhe);BVo=r(Lft,"roformer"),Lft.forEach(t),PVo=r(f9e," \u2014 "),bV=n(f9e,"A",{href:!0});var xft=s(bV);IVo=r(xft,"RoFormerForQuestionAnswering"),xft.forEach(t),qVo=r(f9e," (RoFormer model)"),f9e.forEach(t),NVo=i(X),AF=n(X,"LI",{});var m9e=s(AF);she=n(m9e,"STRONG",{});var $ft=s(she);jVo=r($ft,"splinter"),$ft.forEach(t),DVo=r(m9e," \u2014 "),vV=n(m9e,"A",{href:!0});var kft=s(vV);GVo=r(kft,"SplinterForQuestionAnswering"),kft.forEach(t),OVo=r(m9e," (Splinter model)"),m9e.forEach(t),VVo=i(X),yF=n(X,"LI",{});var g9e=s(yF);lhe=n(g9e,"STRONG",{});var Sft=s(lhe);XVo=r(Sft,"squeezebert"),Sft.forEach(t),zVo=r(g9e," \u2014 "),FV=n(g9e,"A",{href:!0});var Rft=s(FV);QVo=r(Rft,"SqueezeBertForQuestionAnswering"),Rft.forEach(t),WVo=r(g9e," (SqueezeBERT model)"),g9e.forEach(t),HVo=i(X),LF=n(X,"LI",{});var h9e=s(LF);ihe=n(h9e,"STRONG",{});var Bft=s(ihe);UVo=r(Bft,"xlm"),Bft.forEach(t),JVo=r(h9e," \u2014 "),TV=n(h9e,"A",{href:!0});var Pft=s(TV);YVo=r(Pft,"XLMForQuestionAnsweringSimple"),Pft.forEach(t),KVo=r(h9e," (XLM model)"),h9e.forEach(t),ZVo=i(X),xF=n(X,"LI",{});var p9e=s(xF);dhe=n(p9e,"STRONG",{});var Ift=s(dhe);eXo=r(Ift,"xlm-roberta"),Ift.forEach(t),oXo=r(p9e," \u2014 "),MV=n(p9e,"A",{href:!0});var qft=s(MV);rXo=r(qft,"XLMRobertaForQuestionAnswering"),qft.forEach(t),tXo=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),aXo=i(X),$F=n(X,"LI",{});var u9e=s($F);che=n(u9e,"STRONG",{});var Nft=s(che);nXo=r(Nft,"xlm-roberta-xl"),Nft.forEach(t),sXo=r(u9e," \u2014 "),EV=n(u9e,"A",{href:!0});var jft=s(EV);lXo=r(jft,"XLMRobertaXLForQuestionAnswering"),jft.forEach(t),iXo=r(u9e," (XLM-RoBERTa-XL model)"),u9e.forEach(t),dXo=i(X),kF=n(X,"LI",{});var _9e=s(kF);fhe=n(_9e,"STRONG",{});var Dft=s(fhe);cXo=r(Dft,"xlnet"),Dft.forEach(t),fXo=r(_9e," \u2014 "),CV=n(_9e,"A",{href:!0});var Gft=s(CV);mXo=r(Gft,"XLNetForQuestionAnsweringSimple"),Gft.forEach(t),gXo=r(_9e," (XLNet model)"),_9e.forEach(t),hXo=i(X),SF=n(X,"LI",{});var b9e=s(SF);mhe=n(b9e,"STRONG",{});var Oft=s(mhe);pXo=r(Oft,"yoso"),Oft.forEach(t),uXo=r(b9e," \u2014 "),wV=n(b9e,"A",{href:!0});var Vft=s(wV);_Xo=r(Vft,"YosoForQuestionAnswering"),Vft.forEach(t),bXo=r(b9e," (YOSO model)"),b9e.forEach(t),X.forEach(t),vXo=i(ia),RF=n(ia,"P",{});var v9e=s(RF);FXo=r(v9e,"The model is set in evaluation mode by default using "),ghe=n(v9e,"CODE",{});var Xft=s(ghe);TXo=r(Xft,"model.eval()"),Xft.forEach(t),MXo=r(v9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(v9e,"CODE",{});var zft=s(hhe);EXo=r(zft,"model.train()"),zft.forEach(t),v9e.forEach(t),CXo=i(ia),T(BF.$$.fragment,ia),ia.forEach(t),Js.forEach(t),VIe=i(f),Ki=n(f,"H2",{class:!0});var WNe=s(Ki);PF=n(WNe,"A",{id:!0,class:!0,href:!0});var Qft=s(PF);phe=n(Qft,"SPAN",{});var Wft=s(phe);T(Cy.$$.fragment,Wft),Wft.forEach(t),Qft.forEach(t),wXo=i(WNe),uhe=n(WNe,"SPAN",{});var Hft=s(uhe);AXo=r(Hft,"AutoModelForTableQuestionAnswering"),Hft.forEach(t),WNe.forEach(t),XIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(wy.$$.fragment,Ys),yXo=i(Ys),Zi=n(Ys,"P",{});var DK=s(Zi);LXo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AV=n(DK,"A",{href:!0});var Uft=s(AV);xXo=r(Uft,"from_pretrained()"),Uft.forEach(t),$Xo=r(DK," class method or the "),yV=n(DK,"A",{href:!0});var Jft=s(yV);kXo=r(Jft,"from_config()"),Jft.forEach(t),SXo=r(DK,` class
method.`),DK.forEach(t),RXo=i(Ys),Ay=n(Ys,"P",{});var HNe=s(Ay);BXo=r(HNe,"This class cannot be instantiated directly using "),_he=n(HNe,"CODE",{});var Yft=s(_he);PXo=r(Yft,"__init__()"),Yft.forEach(t),IXo=r(HNe," (throws an error)."),HNe.forEach(t),qXo=i(Ys),ft=n(Ys,"DIV",{class:!0});var ww=s(ft);T(yy.$$.fragment,ww),NXo=i(ww),bhe=n(ww,"P",{});var Kft=s(bhe);jXo=r(Kft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kft.forEach(t),DXo=i(ww),ed=n(ww,"P",{});var GK=s(ed);GXo=r(GK,`Note:
Loading a model from its configuration file does `),vhe=n(GK,"STRONG",{});var Zft=s(vhe);OXo=r(Zft,"not"),Zft.forEach(t),VXo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(GK,"A",{href:!0});var emt=s(LV);XXo=r(emt,"from_pretrained()"),emt.forEach(t),zXo=r(GK," to load the model weights."),GK.forEach(t),QXo=i(ww),T(IF.$$.fragment,ww),ww.forEach(t),WXo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Ly.$$.fragment,da),HXo=i(da),Fhe=n(da,"P",{});var omt=s(Fhe);UXo=r(omt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),omt.forEach(t),JXo=i(da),Ia=n(da,"P",{});var Aw=s(Ia);YXo=r(Aw,"The model class to instantiate is selected based on the "),The=n(Aw,"CODE",{});var rmt=s(The);KXo=r(rmt,"model_type"),rmt.forEach(t),ZXo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(Aw,"CODE",{});var tmt=s(Mhe);ezo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),ozo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(Aw,"CODE",{});var amt=s(Ehe);rzo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),tzo=r(Aw,":"),Aw.forEach(t),azo=i(da),Che=n(da,"UL",{});var nmt=s(Che);qF=n(nmt,"LI",{});var F9e=s(qF);whe=n(F9e,"STRONG",{});var smt=s(whe);nzo=r(smt,"tapas"),smt.forEach(t),szo=r(F9e," \u2014 "),xV=n(F9e,"A",{href:!0});var lmt=s(xV);lzo=r(lmt,"TapasForQuestionAnswering"),lmt.forEach(t),izo=r(F9e," (TAPAS model)"),F9e.forEach(t),nmt.forEach(t),dzo=i(da),NF=n(da,"P",{});var T9e=s(NF);czo=r(T9e,"The model is set in evaluation mode by default using "),Ahe=n(T9e,"CODE",{});var imt=s(Ahe);fzo=r(imt,"model.eval()"),imt.forEach(t),mzo=r(T9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(T9e,"CODE",{});var dmt=s(yhe);gzo=r(dmt,"model.train()"),dmt.forEach(t),T9e.forEach(t),hzo=i(da),T(jF.$$.fragment,da),da.forEach(t),Ys.forEach(t),zIe=i(f),od=n(f,"H2",{class:!0});var UNe=s(od);DF=n(UNe,"A",{id:!0,class:!0,href:!0});var cmt=s(DF);Lhe=n(cmt,"SPAN",{});var fmt=s(Lhe);T(xy.$$.fragment,fmt),fmt.forEach(t),cmt.forEach(t),pzo=i(UNe),xhe=n(UNe,"SPAN",{});var mmt=s(xhe);uzo=r(mmt,"AutoModelForImageClassification"),mmt.forEach(t),UNe.forEach(t),QIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T($y.$$.fragment,Ks),_zo=i(Ks),rd=n(Ks,"P",{});var OK=s(rd);bzo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$V=n(OK,"A",{href:!0});var gmt=s($V);vzo=r(gmt,"from_pretrained()"),gmt.forEach(t),Fzo=r(OK," class method or the "),kV=n(OK,"A",{href:!0});var hmt=s(kV);Tzo=r(hmt,"from_config()"),hmt.forEach(t),Mzo=r(OK,` class
method.`),OK.forEach(t),Ezo=i(Ks),ky=n(Ks,"P",{});var JNe=s(ky);Czo=r(JNe,"This class cannot be instantiated directly using "),$he=n(JNe,"CODE",{});var pmt=s($he);wzo=r(pmt,"__init__()"),pmt.forEach(t),Azo=r(JNe," (throws an error)."),JNe.forEach(t),yzo=i(Ks),mt=n(Ks,"DIV",{class:!0});var yw=s(mt);T(Sy.$$.fragment,yw),Lzo=i(yw),khe=n(yw,"P",{});var umt=s(khe);xzo=r(umt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),umt.forEach(t),$zo=i(yw),td=n(yw,"P",{});var VK=s(td);kzo=r(VK,`Note:
Loading a model from its configuration file does `),She=n(VK,"STRONG",{});var _mt=s(She);Szo=r(_mt,"not"),_mt.forEach(t),Rzo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(VK,"A",{href:!0});var bmt=s(SV);Bzo=r(bmt,"from_pretrained()"),bmt.forEach(t),Pzo=r(VK," to load the model weights."),VK.forEach(t),Izo=i(yw),T(GF.$$.fragment,yw),yw.forEach(t),qzo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(Ry.$$.fragment,ca),Nzo=i(ca),Rhe=n(ca,"P",{});var vmt=s(Rhe);jzo=r(vmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vmt.forEach(t),Dzo=i(ca),qa=n(ca,"P",{});var Lw=s(qa);Gzo=r(Lw,"The model class to instantiate is selected based on the "),Bhe=n(Lw,"CODE",{});var Fmt=s(Bhe);Ozo=r(Fmt,"model_type"),Fmt.forEach(t),Vzo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Phe=n(Lw,"CODE",{});var Tmt=s(Phe);Xzo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),zzo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(Lw,"CODE",{});var Mmt=s(Ihe);Qzo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),Wzo=r(Lw,":"),Lw.forEach(t),Hzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);OF=n(Ee,"LI",{});var M9e=s(OF);qhe=n(M9e,"STRONG",{});var Emt=s(qhe);Uzo=r(Emt,"beit"),Emt.forEach(t),Jzo=r(M9e," \u2014 "),RV=n(M9e,"A",{href:!0});var Cmt=s(RV);Yzo=r(Cmt,"BeitForImageClassification"),Cmt.forEach(t),Kzo=r(M9e," (BEiT model)"),M9e.forEach(t),Zzo=i(Ee),VF=n(Ee,"LI",{});var E9e=s(VF);Nhe=n(E9e,"STRONG",{});var wmt=s(Nhe);eQo=r(wmt,"convnext"),wmt.forEach(t),oQo=r(E9e," \u2014 "),BV=n(E9e,"A",{href:!0});var Amt=s(BV);rQo=r(Amt,"ConvNextForImageClassification"),Amt.forEach(t),tQo=r(E9e," (ConvNext model)"),E9e.forEach(t),aQo=i(Ee),XF=n(Ee,"LI",{});var C9e=s(XF);jhe=n(C9e,"STRONG",{});var ymt=s(jhe);nQo=r(ymt,"data2vec-vision"),ymt.forEach(t),sQo=r(C9e," \u2014 "),PV=n(C9e,"A",{href:!0});var Lmt=s(PV);lQo=r(Lmt,"Data2VecVisionForImageClassification"),Lmt.forEach(t),iQo=r(C9e," (Data2VecVision model)"),C9e.forEach(t),dQo=i(Ee),Bs=n(Ee,"LI",{});var b$=s(Bs);Dhe=n(b$,"STRONG",{});var xmt=s(Dhe);cQo=r(xmt,"deit"),xmt.forEach(t),fQo=r(b$," \u2014 "),IV=n(b$,"A",{href:!0});var $mt=s(IV);mQo=r($mt,"DeiTForImageClassification"),$mt.forEach(t),gQo=r(b$," or "),qV=n(b$,"A",{href:!0});var kmt=s(qV);hQo=r(kmt,"DeiTForImageClassificationWithTeacher"),kmt.forEach(t),pQo=r(b$," (DeiT model)"),b$.forEach(t),uQo=i(Ee),zF=n(Ee,"LI",{});var w9e=s(zF);Ghe=n(w9e,"STRONG",{});var Smt=s(Ghe);_Qo=r(Smt,"imagegpt"),Smt.forEach(t),bQo=r(w9e," \u2014 "),NV=n(w9e,"A",{href:!0});var Rmt=s(NV);vQo=r(Rmt,"ImageGPTForImageClassification"),Rmt.forEach(t),FQo=r(w9e," (ImageGPT model)"),w9e.forEach(t),TQo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);Ohe=n(mf,"STRONG",{});var Bmt=s(Ohe);MQo=r(Bmt,"perceiver"),Bmt.forEach(t),EQo=r(mf," \u2014 "),jV=n(mf,"A",{href:!0});var Pmt=s(jV);CQo=r(Pmt,"PerceiverForImageClassificationLearned"),Pmt.forEach(t),wQo=r(mf," or "),DV=n(mf,"A",{href:!0});var Imt=s(DV);AQo=r(Imt,"PerceiverForImageClassificationFourier"),Imt.forEach(t),yQo=r(mf," or "),GV=n(mf,"A",{href:!0});var qmt=s(GV);LQo=r(qmt,"PerceiverForImageClassificationConvProcessing"),qmt.forEach(t),xQo=r(mf," (Perceiver model)"),mf.forEach(t),$Qo=i(Ee),QF=n(Ee,"LI",{});var A9e=s(QF);Vhe=n(A9e,"STRONG",{});var Nmt=s(Vhe);kQo=r(Nmt,"poolformer"),Nmt.forEach(t),SQo=r(A9e," \u2014 "),OV=n(A9e,"A",{href:!0});var jmt=s(OV);RQo=r(jmt,"PoolFormerForImageClassification"),jmt.forEach(t),BQo=r(A9e," (PoolFormer model)"),A9e.forEach(t),PQo=i(Ee),WF=n(Ee,"LI",{});var y9e=s(WF);Xhe=n(y9e,"STRONG",{});var Dmt=s(Xhe);IQo=r(Dmt,"regnet"),Dmt.forEach(t),qQo=r(y9e," \u2014 "),VV=n(y9e,"A",{href:!0});var Gmt=s(VV);NQo=r(Gmt,"RegNetForImageClassification"),Gmt.forEach(t),jQo=r(y9e," (RegNet model)"),y9e.forEach(t),DQo=i(Ee),HF=n(Ee,"LI",{});var L9e=s(HF);zhe=n(L9e,"STRONG",{});var Omt=s(zhe);GQo=r(Omt,"resnet"),Omt.forEach(t),OQo=r(L9e," \u2014 "),XV=n(L9e,"A",{href:!0});var Vmt=s(XV);VQo=r(Vmt,"ResNetForImageClassification"),Vmt.forEach(t),XQo=r(L9e," (ResNet model)"),L9e.forEach(t),zQo=i(Ee),UF=n(Ee,"LI",{});var x9e=s(UF);Qhe=n(x9e,"STRONG",{});var Xmt=s(Qhe);QQo=r(Xmt,"segformer"),Xmt.forEach(t),WQo=r(x9e," \u2014 "),zV=n(x9e,"A",{href:!0});var zmt=s(zV);HQo=r(zmt,"SegformerForImageClassification"),zmt.forEach(t),UQo=r(x9e," (SegFormer model)"),x9e.forEach(t),JQo=i(Ee),JF=n(Ee,"LI",{});var $9e=s(JF);Whe=n($9e,"STRONG",{});var Qmt=s(Whe);YQo=r(Qmt,"swin"),Qmt.forEach(t),KQo=r($9e," \u2014 "),QV=n($9e,"A",{href:!0});var Wmt=s(QV);ZQo=r(Wmt,"SwinForImageClassification"),Wmt.forEach(t),eWo=r($9e," (Swin model)"),$9e.forEach(t),oWo=i(Ee),YF=n(Ee,"LI",{});var k9e=s(YF);Hhe=n(k9e,"STRONG",{});var Hmt=s(Hhe);rWo=r(Hmt,"van"),Hmt.forEach(t),tWo=r(k9e," \u2014 "),WV=n(k9e,"A",{href:!0});var Umt=s(WV);aWo=r(Umt,"VanForImageClassification"),Umt.forEach(t),nWo=r(k9e," (VAN model)"),k9e.forEach(t),sWo=i(Ee),KF=n(Ee,"LI",{});var S9e=s(KF);Uhe=n(S9e,"STRONG",{});var Jmt=s(Uhe);lWo=r(Jmt,"vit"),Jmt.forEach(t),iWo=r(S9e," \u2014 "),HV=n(S9e,"A",{href:!0});var Ymt=s(HV);dWo=r(Ymt,"ViTForImageClassification"),Ymt.forEach(t),cWo=r(S9e," (ViT model)"),S9e.forEach(t),Ee.forEach(t),fWo=i(ca),ZF=n(ca,"P",{});var R9e=s(ZF);mWo=r(R9e,"The model is set in evaluation mode by default using "),Jhe=n(R9e,"CODE",{});var Kmt=s(Jhe);gWo=r(Kmt,"model.eval()"),Kmt.forEach(t),hWo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(R9e,"CODE",{});var Zmt=s(Yhe);pWo=r(Zmt,"model.train()"),Zmt.forEach(t),R9e.forEach(t),uWo=i(ca),T(e0.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),WIe=i(f),ad=n(f,"H2",{class:!0});var YNe=s(ad);o0=n(YNe,"A",{id:!0,class:!0,href:!0});var egt=s(o0);Khe=n(egt,"SPAN",{});var ogt=s(Khe);T(By.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),_Wo=i(YNe),Zhe=n(YNe,"SPAN",{});var rgt=s(Zhe);bWo=r(rgt,"AutoModelForVision2Seq"),rgt.forEach(t),YNe.forEach(t),HIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Py.$$.fragment,Zs),vWo=i(Zs),nd=n(Zs,"P",{});var XK=s(nd);FWo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UV=n(XK,"A",{href:!0});var tgt=s(UV);TWo=r(tgt,"from_pretrained()"),tgt.forEach(t),MWo=r(XK," class method or the "),JV=n(XK,"A",{href:!0});var agt=s(JV);EWo=r(agt,"from_config()"),agt.forEach(t),CWo=r(XK,` class
method.`),XK.forEach(t),wWo=i(Zs),Iy=n(Zs,"P",{});var KNe=s(Iy);AWo=r(KNe,"This class cannot be instantiated directly using "),epe=n(KNe,"CODE",{});var ngt=s(epe);yWo=r(ngt,"__init__()"),ngt.forEach(t),LWo=r(KNe," (throws an error)."),KNe.forEach(t),xWo=i(Zs),ht=n(Zs,"DIV",{class:!0});var xw=s(ht);T(qy.$$.fragment,xw),$Wo=i(xw),ope=n(xw,"P",{});var sgt=s(ope);kWo=r(sgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sgt.forEach(t),SWo=i(xw),sd=n(xw,"P",{});var zK=s(sd);RWo=r(zK,`Note:
Loading a model from its configuration file does `),rpe=n(zK,"STRONG",{});var lgt=s(rpe);BWo=r(lgt,"not"),lgt.forEach(t),PWo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(zK,"A",{href:!0});var igt=s(YV);IWo=r(igt,"from_pretrained()"),igt.forEach(t),qWo=r(zK," to load the model weights."),zK.forEach(t),NWo=i(xw),T(r0.$$.fragment,xw),xw.forEach(t),jWo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(Ny.$$.fragment,fa),DWo=i(fa),tpe=n(fa,"P",{});var dgt=s(tpe);GWo=r(dgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dgt.forEach(t),OWo=i(fa),Na=n(fa,"P",{});var $w=s(Na);VWo=r($w,"The model class to instantiate is selected based on the "),ape=n($w,"CODE",{});var cgt=s(ape);XWo=r(cgt,"model_type"),cgt.forEach(t),zWo=r($w,` property of the config object (either
passed as an argument or loaded from `),npe=n($w,"CODE",{});var fgt=s(npe);QWo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),WWo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n($w,"CODE",{});var mgt=s(spe);HWo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),UWo=r($w,":"),$w.forEach(t),JWo=i(fa),lpe=n(fa,"UL",{});var ggt=s(lpe);t0=n(ggt,"LI",{});var B9e=s(t0);ipe=n(B9e,"STRONG",{});var hgt=s(ipe);YWo=r(hgt,"vision-encoder-decoder"),hgt.forEach(t),KWo=r(B9e," \u2014 "),KV=n(B9e,"A",{href:!0});var pgt=s(KV);ZWo=r(pgt,"VisionEncoderDecoderModel"),pgt.forEach(t),eHo=r(B9e," (Vision Encoder decoder model)"),B9e.forEach(t),ggt.forEach(t),oHo=i(fa),a0=n(fa,"P",{});var P9e=s(a0);rHo=r(P9e,"The model is set in evaluation mode by default using "),dpe=n(P9e,"CODE",{});var ugt=s(dpe);tHo=r(ugt,"model.eval()"),ugt.forEach(t),aHo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(P9e,"CODE",{});var _gt=s(cpe);nHo=r(_gt,"model.train()"),_gt.forEach(t),P9e.forEach(t),sHo=i(fa),T(n0.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),UIe=i(f),ld=n(f,"H2",{class:!0});var ZNe=s(ld);s0=n(ZNe,"A",{id:!0,class:!0,href:!0});var bgt=s(s0);fpe=n(bgt,"SPAN",{});var vgt=s(fpe);T(jy.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),lHo=i(ZNe),mpe=n(ZNe,"SPAN",{});var Fgt=s(mpe);iHo=r(Fgt,"AutoModelForAudioClassification"),Fgt.forEach(t),ZNe.forEach(t),JIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Dy.$$.fragment,el),dHo=i(el),id=n(el,"P",{});var QK=s(id);cHo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZV=n(QK,"A",{href:!0});var Tgt=s(ZV);fHo=r(Tgt,"from_pretrained()"),Tgt.forEach(t),mHo=r(QK," class method or the "),eX=n(QK,"A",{href:!0});var Mgt=s(eX);gHo=r(Mgt,"from_config()"),Mgt.forEach(t),hHo=r(QK,` class
method.`),QK.forEach(t),pHo=i(el),Gy=n(el,"P",{});var eje=s(Gy);uHo=r(eje,"This class cannot be instantiated directly using "),gpe=n(eje,"CODE",{});var Egt=s(gpe);_Ho=r(Egt,"__init__()"),Egt.forEach(t),bHo=r(eje," (throws an error)."),eje.forEach(t),vHo=i(el),pt=n(el,"DIV",{class:!0});var kw=s(pt);T(Oy.$$.fragment,kw),FHo=i(kw),hpe=n(kw,"P",{});var Cgt=s(hpe);THo=r(Cgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cgt.forEach(t),MHo=i(kw),dd=n(kw,"P",{});var WK=s(dd);EHo=r(WK,`Note:
Loading a model from its configuration file does `),ppe=n(WK,"STRONG",{});var wgt=s(ppe);CHo=r(wgt,"not"),wgt.forEach(t),wHo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(WK,"A",{href:!0});var Agt=s(oX);AHo=r(Agt,"from_pretrained()"),Agt.forEach(t),yHo=r(WK," to load the model weights."),WK.forEach(t),LHo=i(kw),T(l0.$$.fragment,kw),kw.forEach(t),xHo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(Vy.$$.fragment,ma),$Ho=i(ma),upe=n(ma,"P",{});var ygt=s(upe);kHo=r(ygt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ygt.forEach(t),SHo=i(ma),ja=n(ma,"P",{});var Sw=s(ja);RHo=r(Sw,"The model class to instantiate is selected based on the "),_pe=n(Sw,"CODE",{});var Lgt=s(_pe);BHo=r(Lgt,"model_type"),Lgt.forEach(t),PHo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),bpe=n(Sw,"CODE",{});var xgt=s(bpe);IHo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),qHo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(Sw,"CODE",{});var $gt=s(vpe);NHo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),jHo=r(Sw,":"),Sw.forEach(t),DHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);i0=n(bo,"LI",{});var I9e=s(i0);Fpe=n(I9e,"STRONG",{});var kgt=s(Fpe);GHo=r(kgt,"data2vec-audio"),kgt.forEach(t),OHo=r(I9e," \u2014 "),rX=n(I9e,"A",{href:!0});var Sgt=s(rX);VHo=r(Sgt,"Data2VecAudioForSequenceClassification"),Sgt.forEach(t),XHo=r(I9e," (Data2VecAudio model)"),I9e.forEach(t),zHo=i(bo),d0=n(bo,"LI",{});var q9e=s(d0);Tpe=n(q9e,"STRONG",{});var Rgt=s(Tpe);QHo=r(Rgt,"hubert"),Rgt.forEach(t),WHo=r(q9e," \u2014 "),tX=n(q9e,"A",{href:!0});var Bgt=s(tX);HHo=r(Bgt,"HubertForSequenceClassification"),Bgt.forEach(t),UHo=r(q9e," (Hubert model)"),q9e.forEach(t),JHo=i(bo),c0=n(bo,"LI",{});var N9e=s(c0);Mpe=n(N9e,"STRONG",{});var Pgt=s(Mpe);YHo=r(Pgt,"sew"),Pgt.forEach(t),KHo=r(N9e," \u2014 "),aX=n(N9e,"A",{href:!0});var Igt=s(aX);ZHo=r(Igt,"SEWForSequenceClassification"),Igt.forEach(t),eUo=r(N9e," (SEW model)"),N9e.forEach(t),oUo=i(bo),f0=n(bo,"LI",{});var j9e=s(f0);Epe=n(j9e,"STRONG",{});var qgt=s(Epe);rUo=r(qgt,"sew-d"),qgt.forEach(t),tUo=r(j9e," \u2014 "),nX=n(j9e,"A",{href:!0});var Ngt=s(nX);aUo=r(Ngt,"SEWDForSequenceClassification"),Ngt.forEach(t),nUo=r(j9e," (SEW-D model)"),j9e.forEach(t),sUo=i(bo),m0=n(bo,"LI",{});var D9e=s(m0);Cpe=n(D9e,"STRONG",{});var jgt=s(Cpe);lUo=r(jgt,"unispeech"),jgt.forEach(t),iUo=r(D9e," \u2014 "),sX=n(D9e,"A",{href:!0});var Dgt=s(sX);dUo=r(Dgt,"UniSpeechForSequenceClassification"),Dgt.forEach(t),cUo=r(D9e," (UniSpeech model)"),D9e.forEach(t),fUo=i(bo),g0=n(bo,"LI",{});var G9e=s(g0);wpe=n(G9e,"STRONG",{});var Ggt=s(wpe);mUo=r(Ggt,"unispeech-sat"),Ggt.forEach(t),gUo=r(G9e," \u2014 "),lX=n(G9e,"A",{href:!0});var Ogt=s(lX);hUo=r(Ogt,"UniSpeechSatForSequenceClassification"),Ogt.forEach(t),pUo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),uUo=i(bo),h0=n(bo,"LI",{});var O9e=s(h0);Ape=n(O9e,"STRONG",{});var Vgt=s(Ape);_Uo=r(Vgt,"wav2vec2"),Vgt.forEach(t),bUo=r(O9e," \u2014 "),iX=n(O9e,"A",{href:!0});var Xgt=s(iX);vUo=r(Xgt,"Wav2Vec2ForSequenceClassification"),Xgt.forEach(t),FUo=r(O9e," (Wav2Vec2 model)"),O9e.forEach(t),TUo=i(bo),p0=n(bo,"LI",{});var V9e=s(p0);ype=n(V9e,"STRONG",{});var zgt=s(ype);MUo=r(zgt,"wavlm"),zgt.forEach(t),EUo=r(V9e," \u2014 "),dX=n(V9e,"A",{href:!0});var Qgt=s(dX);CUo=r(Qgt,"WavLMForSequenceClassification"),Qgt.forEach(t),wUo=r(V9e," (WavLM model)"),V9e.forEach(t),bo.forEach(t),AUo=i(ma),u0=n(ma,"P",{});var X9e=s(u0);yUo=r(X9e,"The model is set in evaluation mode by default using "),Lpe=n(X9e,"CODE",{});var Wgt=s(Lpe);LUo=r(Wgt,"model.eval()"),Wgt.forEach(t),xUo=r(X9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(X9e,"CODE",{});var Hgt=s(xpe);$Uo=r(Hgt,"model.train()"),Hgt.forEach(t),X9e.forEach(t),kUo=i(ma),T(_0.$$.fragment,ma),ma.forEach(t),el.forEach(t),YIe=i(f),cd=n(f,"H2",{class:!0});var oje=s(cd);b0=n(oje,"A",{id:!0,class:!0,href:!0});var Ugt=s(b0);$pe=n(Ugt,"SPAN",{});var Jgt=s($pe);T(Xy.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),SUo=i(oje),kpe=n(oje,"SPAN",{});var Ygt=s(kpe);RUo=r(Ygt,"AutoModelForAudioFrameClassification"),Ygt.forEach(t),oje.forEach(t),KIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(zy.$$.fragment,ol),BUo=i(ol),fd=n(ol,"P",{});var HK=s(fd);PUo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cX=n(HK,"A",{href:!0});var Kgt=s(cX);IUo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),qUo=r(HK," class method or the "),fX=n(HK,"A",{href:!0});var Zgt=s(fX);NUo=r(Zgt,"from_config()"),Zgt.forEach(t),jUo=r(HK,` class
method.`),HK.forEach(t),DUo=i(ol),Qy=n(ol,"P",{});var rje=s(Qy);GUo=r(rje,"This class cannot be instantiated directly using "),Spe=n(rje,"CODE",{});var eht=s(Spe);OUo=r(eht,"__init__()"),eht.forEach(t),VUo=r(rje," (throws an error)."),rje.forEach(t),XUo=i(ol),ut=n(ol,"DIV",{class:!0});var Rw=s(ut);T(Wy.$$.fragment,Rw),zUo=i(Rw),Rpe=n(Rw,"P",{});var oht=s(Rpe);QUo=r(oht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oht.forEach(t),WUo=i(Rw),md=n(Rw,"P",{});var UK=s(md);HUo=r(UK,`Note:
Loading a model from its configuration file does `),Bpe=n(UK,"STRONG",{});var rht=s(Bpe);UUo=r(rht,"not"),rht.forEach(t),JUo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(UK,"A",{href:!0});var tht=s(mX);YUo=r(tht,"from_pretrained()"),tht.forEach(t),KUo=r(UK," to load the model weights."),UK.forEach(t),ZUo=i(Rw),T(v0.$$.fragment,Rw),Rw.forEach(t),eJo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Hy.$$.fragment,ga),oJo=i(ga),Ppe=n(ga,"P",{});var aht=s(Ppe);rJo=r(aht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aht.forEach(t),tJo=i(ga),Da=n(ga,"P",{});var Bw=s(Da);aJo=r(Bw,"The model class to instantiate is selected based on the "),Ipe=n(Bw,"CODE",{});var nht=s(Ipe);nJo=r(nht,"model_type"),nht.forEach(t),sJo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),qpe=n(Bw,"CODE",{});var sht=s(qpe);lJo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),iJo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Bw,"CODE",{});var lht=s(Npe);dJo=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),cJo=r(Bw,":"),Bw.forEach(t),fJo=i(ga),Ga=n(ga,"UL",{});var Pw=s(Ga);F0=n(Pw,"LI",{});var z9e=s(F0);jpe=n(z9e,"STRONG",{});var iht=s(jpe);mJo=r(iht,"data2vec-audio"),iht.forEach(t),gJo=r(z9e," \u2014 "),gX=n(z9e,"A",{href:!0});var dht=s(gX);hJo=r(dht,"Data2VecAudioForAudioFrameClassification"),dht.forEach(t),pJo=r(z9e," (Data2VecAudio model)"),z9e.forEach(t),uJo=i(Pw),T0=n(Pw,"LI",{});var Q9e=s(T0);Dpe=n(Q9e,"STRONG",{});var cht=s(Dpe);_Jo=r(cht,"unispeech-sat"),cht.forEach(t),bJo=r(Q9e," \u2014 "),hX=n(Q9e,"A",{href:!0});var fht=s(hX);vJo=r(fht,"UniSpeechSatForAudioFrameClassification"),fht.forEach(t),FJo=r(Q9e," (UniSpeechSat model)"),Q9e.forEach(t),TJo=i(Pw),M0=n(Pw,"LI",{});var W9e=s(M0);Gpe=n(W9e,"STRONG",{});var mht=s(Gpe);MJo=r(mht,"wav2vec2"),mht.forEach(t),EJo=r(W9e," \u2014 "),pX=n(W9e,"A",{href:!0});var ght=s(pX);CJo=r(ght,"Wav2Vec2ForAudioFrameClassification"),ght.forEach(t),wJo=r(W9e," (Wav2Vec2 model)"),W9e.forEach(t),AJo=i(Pw),E0=n(Pw,"LI",{});var H9e=s(E0);Ope=n(H9e,"STRONG",{});var hht=s(Ope);yJo=r(hht,"wavlm"),hht.forEach(t),LJo=r(H9e," \u2014 "),uX=n(H9e,"A",{href:!0});var pht=s(uX);xJo=r(pht,"WavLMForAudioFrameClassification"),pht.forEach(t),$Jo=r(H9e," (WavLM model)"),H9e.forEach(t),Pw.forEach(t),kJo=i(ga),C0=n(ga,"P",{});var U9e=s(C0);SJo=r(U9e,"The model is set in evaluation mode by default using "),Vpe=n(U9e,"CODE",{});var uht=s(Vpe);RJo=r(uht,"model.eval()"),uht.forEach(t),BJo=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(U9e,"CODE",{});var _ht=s(Xpe);PJo=r(_ht,"model.train()"),_ht.forEach(t),U9e.forEach(t),IJo=i(ga),T(w0.$$.fragment,ga),ga.forEach(t),ol.forEach(t),ZIe=i(f),gd=n(f,"H2",{class:!0});var tje=s(gd);A0=n(tje,"A",{id:!0,class:!0,href:!0});var bht=s(A0);zpe=n(bht,"SPAN",{});var vht=s(zpe);T(Uy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),qJo=i(tje),Qpe=n(tje,"SPAN",{});var Fht=s(Qpe);NJo=r(Fht,"AutoModelForCTC"),Fht.forEach(t),tje.forEach(t),eqe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(Jy.$$.fragment,rl),jJo=i(rl),hd=n(rl,"P",{});var JK=s(hd);DJo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_X=n(JK,"A",{href:!0});var Tht=s(_X);GJo=r(Tht,"from_pretrained()"),Tht.forEach(t),OJo=r(JK," class method or the "),bX=n(JK,"A",{href:!0});var Mht=s(bX);VJo=r(Mht,"from_config()"),Mht.forEach(t),XJo=r(JK,` class
method.`),JK.forEach(t),zJo=i(rl),Yy=n(rl,"P",{});var aje=s(Yy);QJo=r(aje,"This class cannot be instantiated directly using "),Wpe=n(aje,"CODE",{});var Eht=s(Wpe);WJo=r(Eht,"__init__()"),Eht.forEach(t),HJo=r(aje," (throws an error)."),aje.forEach(t),UJo=i(rl),_t=n(rl,"DIV",{class:!0});var Iw=s(_t);T(Ky.$$.fragment,Iw),JJo=i(Iw),Hpe=n(Iw,"P",{});var Cht=s(Hpe);YJo=r(Cht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cht.forEach(t),KJo=i(Iw),pd=n(Iw,"P",{});var YK=s(pd);ZJo=r(YK,`Note:
Loading a model from its configuration file does `),Upe=n(YK,"STRONG",{});var wht=s(Upe);eYo=r(wht,"not"),wht.forEach(t),oYo=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(YK,"A",{href:!0});var Aht=s(vX);rYo=r(Aht,"from_pretrained()"),Aht.forEach(t),tYo=r(YK," to load the model weights."),YK.forEach(t),aYo=i(Iw),T(y0.$$.fragment,Iw),Iw.forEach(t),nYo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Zy.$$.fragment,ha),sYo=i(ha),Jpe=n(ha,"P",{});var yht=s(Jpe);lYo=r(yht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yht.forEach(t),iYo=i(ha),Oa=n(ha,"P",{});var qw=s(Oa);dYo=r(qw,"The model class to instantiate is selected based on the "),Ype=n(qw,"CODE",{});var Lht=s(Ype);cYo=r(Lht,"model_type"),Lht.forEach(t),fYo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(qw,"CODE",{});var xht=s(Kpe);mYo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),gYo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(qw,"CODE",{});var $ht=s(Zpe);hYo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),pYo=r(qw,":"),qw.forEach(t),uYo=i(ha),je=n(ha,"UL",{});var vo=s(je);L0=n(vo,"LI",{});var J9e=s(L0);eue=n(J9e,"STRONG",{});var kht=s(eue);_Yo=r(kht,"data2vec-audio"),kht.forEach(t),bYo=r(J9e," \u2014 "),FX=n(J9e,"A",{href:!0});var Sht=s(FX);vYo=r(Sht,"Data2VecAudioForCTC"),Sht.forEach(t),FYo=r(J9e," (Data2VecAudio model)"),J9e.forEach(t),TYo=i(vo),x0=n(vo,"LI",{});var Y9e=s(x0);oue=n(Y9e,"STRONG",{});var Rht=s(oue);MYo=r(Rht,"hubert"),Rht.forEach(t),EYo=r(Y9e," \u2014 "),TX=n(Y9e,"A",{href:!0});var Bht=s(TX);CYo=r(Bht,"HubertForCTC"),Bht.forEach(t),wYo=r(Y9e," (Hubert model)"),Y9e.forEach(t),AYo=i(vo),$0=n(vo,"LI",{});var K9e=s($0);rue=n(K9e,"STRONG",{});var Pht=s(rue);yYo=r(Pht,"sew"),Pht.forEach(t),LYo=r(K9e," \u2014 "),MX=n(K9e,"A",{href:!0});var Iht=s(MX);xYo=r(Iht,"SEWForCTC"),Iht.forEach(t),$Yo=r(K9e," (SEW model)"),K9e.forEach(t),kYo=i(vo),k0=n(vo,"LI",{});var Z9e=s(k0);tue=n(Z9e,"STRONG",{});var qht=s(tue);SYo=r(qht,"sew-d"),qht.forEach(t),RYo=r(Z9e," \u2014 "),EX=n(Z9e,"A",{href:!0});var Nht=s(EX);BYo=r(Nht,"SEWDForCTC"),Nht.forEach(t),PYo=r(Z9e," (SEW-D model)"),Z9e.forEach(t),IYo=i(vo),S0=n(vo,"LI",{});var e$e=s(S0);aue=n(e$e,"STRONG",{});var jht=s(aue);qYo=r(jht,"unispeech"),jht.forEach(t),NYo=r(e$e," \u2014 "),CX=n(e$e,"A",{href:!0});var Dht=s(CX);jYo=r(Dht,"UniSpeechForCTC"),Dht.forEach(t),DYo=r(e$e," (UniSpeech model)"),e$e.forEach(t),GYo=i(vo),R0=n(vo,"LI",{});var o$e=s(R0);nue=n(o$e,"STRONG",{});var Ght=s(nue);OYo=r(Ght,"unispeech-sat"),Ght.forEach(t),VYo=r(o$e," \u2014 "),wX=n(o$e,"A",{href:!0});var Oht=s(wX);XYo=r(Oht,"UniSpeechSatForCTC"),Oht.forEach(t),zYo=r(o$e," (UniSpeechSat model)"),o$e.forEach(t),QYo=i(vo),B0=n(vo,"LI",{});var r$e=s(B0);sue=n(r$e,"STRONG",{});var Vht=s(sue);WYo=r(Vht,"wav2vec2"),Vht.forEach(t),HYo=r(r$e," \u2014 "),AX=n(r$e,"A",{href:!0});var Xht=s(AX);UYo=r(Xht,"Wav2Vec2ForCTC"),Xht.forEach(t),JYo=r(r$e," (Wav2Vec2 model)"),r$e.forEach(t),YYo=i(vo),P0=n(vo,"LI",{});var t$e=s(P0);lue=n(t$e,"STRONG",{});var zht=s(lue);KYo=r(zht,"wavlm"),zht.forEach(t),ZYo=r(t$e," \u2014 "),yX=n(t$e,"A",{href:!0});var Qht=s(yX);eKo=r(Qht,"WavLMForCTC"),Qht.forEach(t),oKo=r(t$e," (WavLM model)"),t$e.forEach(t),vo.forEach(t),rKo=i(ha),I0=n(ha,"P",{});var a$e=s(I0);tKo=r(a$e,"The model is set in evaluation mode by default using "),iue=n(a$e,"CODE",{});var Wht=s(iue);aKo=r(Wht,"model.eval()"),Wht.forEach(t),nKo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(a$e,"CODE",{});var Hht=s(due);sKo=r(Hht,"model.train()"),Hht.forEach(t),a$e.forEach(t),lKo=i(ha),T(q0.$$.fragment,ha),ha.forEach(t),rl.forEach(t),oqe=i(f),ud=n(f,"H2",{class:!0});var nje=s(ud);N0=n(nje,"A",{id:!0,class:!0,href:!0});var Uht=s(N0);cue=n(Uht,"SPAN",{});var Jht=s(cue);T(eL.$$.fragment,Jht),Jht.forEach(t),Uht.forEach(t),iKo=i(nje),fue=n(nje,"SPAN",{});var Yht=s(fue);dKo=r(Yht,"AutoModelForSpeechSeq2Seq"),Yht.forEach(t),nje.forEach(t),rqe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(oL.$$.fragment,tl),cKo=i(tl),_d=n(tl,"P",{});var KK=s(_d);fKo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LX=n(KK,"A",{href:!0});var Kht=s(LX);mKo=r(Kht,"from_pretrained()"),Kht.forEach(t),gKo=r(KK," class method or the "),xX=n(KK,"A",{href:!0});var Zht=s(xX);hKo=r(Zht,"from_config()"),Zht.forEach(t),pKo=r(KK,` class
method.`),KK.forEach(t),uKo=i(tl),rL=n(tl,"P",{});var sje=s(rL);_Ko=r(sje,"This class cannot be instantiated directly using "),mue=n(sje,"CODE",{});var ept=s(mue);bKo=r(ept,"__init__()"),ept.forEach(t),vKo=r(sje," (throws an error)."),sje.forEach(t),FKo=i(tl),bt=n(tl,"DIV",{class:!0});var Nw=s(bt);T(tL.$$.fragment,Nw),TKo=i(Nw),gue=n(Nw,"P",{});var opt=s(gue);MKo=r(opt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),opt.forEach(t),EKo=i(Nw),bd=n(Nw,"P",{});var ZK=s(bd);CKo=r(ZK,`Note:
Loading a model from its configuration file does `),hue=n(ZK,"STRONG",{});var rpt=s(hue);wKo=r(rpt,"not"),rpt.forEach(t),AKo=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(ZK,"A",{href:!0});var tpt=s($X);yKo=r(tpt,"from_pretrained()"),tpt.forEach(t),LKo=r(ZK," to load the model weights."),ZK.forEach(t),xKo=i(Nw),T(j0.$$.fragment,Nw),Nw.forEach(t),$Ko=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(aL.$$.fragment,pa),kKo=i(pa),pue=n(pa,"P",{});var apt=s(pue);SKo=r(apt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),apt.forEach(t),RKo=i(pa),Va=n(pa,"P",{});var jw=s(Va);BKo=r(jw,"The model class to instantiate is selected based on the "),uue=n(jw,"CODE",{});var npt=s(uue);PKo=r(npt,"model_type"),npt.forEach(t),IKo=r(jw,` property of the config object (either
passed as an argument or loaded from `),_ue=n(jw,"CODE",{});var spt=s(_ue);qKo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),NKo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(jw,"CODE",{});var lpt=s(bue);jKo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),DKo=r(jw,":"),jw.forEach(t),GKo=i(pa),nL=n(pa,"UL",{});var lje=s(nL);D0=n(lje,"LI",{});var n$e=s(D0);vue=n(n$e,"STRONG",{});var ipt=s(vue);OKo=r(ipt,"speech-encoder-decoder"),ipt.forEach(t),VKo=r(n$e," \u2014 "),kX=n(n$e,"A",{href:!0});var dpt=s(kX);XKo=r(dpt,"SpeechEncoderDecoderModel"),dpt.forEach(t),zKo=r(n$e," (Speech Encoder decoder model)"),n$e.forEach(t),QKo=i(lje),G0=n(lje,"LI",{});var s$e=s(G0);Fue=n(s$e,"STRONG",{});var cpt=s(Fue);WKo=r(cpt,"speech_to_text"),cpt.forEach(t),HKo=r(s$e," \u2014 "),SX=n(s$e,"A",{href:!0});var fpt=s(SX);UKo=r(fpt,"Speech2TextForConditionalGeneration"),fpt.forEach(t),JKo=r(s$e," (Speech2Text model)"),s$e.forEach(t),lje.forEach(t),YKo=i(pa),O0=n(pa,"P",{});var l$e=s(O0);KKo=r(l$e,"The model is set in evaluation mode by default using "),Tue=n(l$e,"CODE",{});var mpt=s(Tue);ZKo=r(mpt,"model.eval()"),mpt.forEach(t),eZo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(l$e,"CODE",{});var gpt=s(Mue);oZo=r(gpt,"model.train()"),gpt.forEach(t),l$e.forEach(t),rZo=i(pa),T(V0.$$.fragment,pa),pa.forEach(t),tl.forEach(t),tqe=i(f),vd=n(f,"H2",{class:!0});var ije=s(vd);X0=n(ije,"A",{id:!0,class:!0,href:!0});var hpt=s(X0);Eue=n(hpt,"SPAN",{});var ppt=s(Eue);T(sL.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),tZo=i(ije),Cue=n(ije,"SPAN",{});var upt=s(Cue);aZo=r(upt,"AutoModelForAudioXVector"),upt.forEach(t),ije.forEach(t),aqe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(lL.$$.fragment,al),nZo=i(al),Fd=n(al,"P",{});var eZ=s(Fd);sZo=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RX=n(eZ,"A",{href:!0});var _pt=s(RX);lZo=r(_pt,"from_pretrained()"),_pt.forEach(t),iZo=r(eZ," class method or the "),BX=n(eZ,"A",{href:!0});var bpt=s(BX);dZo=r(bpt,"from_config()"),bpt.forEach(t),cZo=r(eZ,` class
method.`),eZ.forEach(t),fZo=i(al),iL=n(al,"P",{});var dje=s(iL);mZo=r(dje,"This class cannot be instantiated directly using "),wue=n(dje,"CODE",{});var vpt=s(wue);gZo=r(vpt,"__init__()"),vpt.forEach(t),hZo=r(dje," (throws an error)."),dje.forEach(t),pZo=i(al),vt=n(al,"DIV",{class:!0});var Dw=s(vt);T(dL.$$.fragment,Dw),uZo=i(Dw),Aue=n(Dw,"P",{});var Fpt=s(Aue);_Zo=r(Fpt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fpt.forEach(t),bZo=i(Dw),Td=n(Dw,"P",{});var oZ=s(Td);vZo=r(oZ,`Note:
Loading a model from its configuration file does `),yue=n(oZ,"STRONG",{});var Tpt=s(yue);FZo=r(Tpt,"not"),Tpt.forEach(t),TZo=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(oZ,"A",{href:!0});var Mpt=s(PX);MZo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),EZo=r(oZ," to load the model weights."),oZ.forEach(t),CZo=i(Dw),T(z0.$$.fragment,Dw),Dw.forEach(t),wZo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(cL.$$.fragment,ua),AZo=i(ua),Lue=n(ua,"P",{});var Ept=s(Lue);yZo=r(Ept,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ept.forEach(t),LZo=i(ua),Xa=n(ua,"P",{});var Gw=s(Xa);xZo=r(Gw,"The model class to instantiate is selected based on the "),xue=n(Gw,"CODE",{});var Cpt=s(xue);$Zo=r(Cpt,"model_type"),Cpt.forEach(t),kZo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),$ue=n(Gw,"CODE",{});var wpt=s($ue);SZo=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),RZo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(Gw,"CODE",{});var Apt=s(kue);BZo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),PZo=r(Gw,":"),Gw.forEach(t),IZo=i(ua),za=n(ua,"UL",{});var Ow=s(za);Q0=n(Ow,"LI",{});var i$e=s(Q0);Sue=n(i$e,"STRONG",{});var ypt=s(Sue);qZo=r(ypt,"data2vec-audio"),ypt.forEach(t),NZo=r(i$e," \u2014 "),IX=n(i$e,"A",{href:!0});var Lpt=s(IX);jZo=r(Lpt,"Data2VecAudioForXVector"),Lpt.forEach(t),DZo=r(i$e," (Data2VecAudio model)"),i$e.forEach(t),GZo=i(Ow),W0=n(Ow,"LI",{});var d$e=s(W0);Rue=n(d$e,"STRONG",{});var xpt=s(Rue);OZo=r(xpt,"unispeech-sat"),xpt.forEach(t),VZo=r(d$e," \u2014 "),qX=n(d$e,"A",{href:!0});var $pt=s(qX);XZo=r($pt,"UniSpeechSatForXVector"),$pt.forEach(t),zZo=r(d$e," (UniSpeechSat model)"),d$e.forEach(t),QZo=i(Ow),H0=n(Ow,"LI",{});var c$e=s(H0);Bue=n(c$e,"STRONG",{});var kpt=s(Bue);WZo=r(kpt,"wav2vec2"),kpt.forEach(t),HZo=r(c$e," \u2014 "),NX=n(c$e,"A",{href:!0});var Spt=s(NX);UZo=r(Spt,"Wav2Vec2ForXVector"),Spt.forEach(t),JZo=r(c$e," (Wav2Vec2 model)"),c$e.forEach(t),YZo=i(Ow),U0=n(Ow,"LI",{});var f$e=s(U0);Pue=n(f$e,"STRONG",{});var Rpt=s(Pue);KZo=r(Rpt,"wavlm"),Rpt.forEach(t),ZZo=r(f$e," \u2014 "),jX=n(f$e,"A",{href:!0});var Bpt=s(jX);eer=r(Bpt,"WavLMForXVector"),Bpt.forEach(t),oer=r(f$e," (WavLM model)"),f$e.forEach(t),Ow.forEach(t),rer=i(ua),J0=n(ua,"P",{});var m$e=s(J0);ter=r(m$e,"The model is set in evaluation mode by default using "),Iue=n(m$e,"CODE",{});var Ppt=s(Iue);aer=r(Ppt,"model.eval()"),Ppt.forEach(t),ner=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(m$e,"CODE",{});var Ipt=s(que);ser=r(Ipt,"model.train()"),Ipt.forEach(t),m$e.forEach(t),ler=i(ua),T(Y0.$$.fragment,ua),ua.forEach(t),al.forEach(t),nqe=i(f),Md=n(f,"H2",{class:!0});var cje=s(Md);K0=n(cje,"A",{id:!0,class:!0,href:!0});var qpt=s(K0);Nue=n(qpt,"SPAN",{});var Npt=s(Nue);T(fL.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),ier=i(cje),jue=n(cje,"SPAN",{});var jpt=s(jue);der=r(jpt,"AutoModelForMaskedImageModeling"),jpt.forEach(t),cje.forEach(t),sqe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(mL.$$.fragment,nl),cer=i(nl),Ed=n(nl,"P",{});var rZ=s(Ed);fer=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DX=n(rZ,"A",{href:!0});var Dpt=s(DX);mer=r(Dpt,"from_pretrained()"),Dpt.forEach(t),ger=r(rZ," class method or the "),GX=n(rZ,"A",{href:!0});var Gpt=s(GX);her=r(Gpt,"from_config()"),Gpt.forEach(t),per=r(rZ,` class
method.`),rZ.forEach(t),uer=i(nl),gL=n(nl,"P",{});var fje=s(gL);_er=r(fje,"This class cannot be instantiated directly using "),Due=n(fje,"CODE",{});var Opt=s(Due);ber=r(Opt,"__init__()"),Opt.forEach(t),ver=r(fje," (throws an error)."),fje.forEach(t),Fer=i(nl),Ft=n(nl,"DIV",{class:!0});var Vw=s(Ft);T(hL.$$.fragment,Vw),Ter=i(Vw),Gue=n(Vw,"P",{});var Vpt=s(Gue);Mer=r(Vpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vpt.forEach(t),Eer=i(Vw),Cd=n(Vw,"P",{});var tZ=s(Cd);Cer=r(tZ,`Note:
Loading a model from its configuration file does `),Oue=n(tZ,"STRONG",{});var Xpt=s(Oue);wer=r(Xpt,"not"),Xpt.forEach(t),Aer=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(tZ,"A",{href:!0});var zpt=s(OX);yer=r(zpt,"from_pretrained()"),zpt.forEach(t),Ler=r(tZ," to load the model weights."),tZ.forEach(t),xer=i(Vw),T(Z0.$$.fragment,Vw),Vw.forEach(t),$er=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(pL.$$.fragment,_a),ker=i(_a),Vue=n(_a,"P",{});var Qpt=s(Vue);Ser=r(Qpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qpt.forEach(t),Rer=i(_a),Qa=n(_a,"P",{});var Xw=s(Qa);Ber=r(Xw,"The model class to instantiate is selected based on the "),Xue=n(Xw,"CODE",{});var Wpt=s(Xue);Per=r(Wpt,"model_type"),Wpt.forEach(t),Ier=r(Xw,` property of the config object (either
passed as an argument or loaded from `),zue=n(Xw,"CODE",{});var Hpt=s(zue);qer=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Ner=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(Xw,"CODE",{});var Upt=s(Que);jer=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Der=r(Xw,":"),Xw.forEach(t),Ger=i(_a),wd=n(_a,"UL",{});var aZ=s(wd);eT=n(aZ,"LI",{});var g$e=s(eT);Wue=n(g$e,"STRONG",{});var Jpt=s(Wue);Oer=r(Jpt,"deit"),Jpt.forEach(t),Ver=r(g$e," \u2014 "),VX=n(g$e,"A",{href:!0});var Ypt=s(VX);Xer=r(Ypt,"DeiTForMaskedImageModeling"),Ypt.forEach(t),zer=r(g$e," (DeiT model)"),g$e.forEach(t),Qer=i(aZ),oT=n(aZ,"LI",{});var h$e=s(oT);Hue=n(h$e,"STRONG",{});var Kpt=s(Hue);Wer=r(Kpt,"swin"),Kpt.forEach(t),Her=r(h$e," \u2014 "),XX=n(h$e,"A",{href:!0});var Zpt=s(XX);Uer=r(Zpt,"SwinForMaskedImageModeling"),Zpt.forEach(t),Jer=r(h$e," (Swin model)"),h$e.forEach(t),Yer=i(aZ),rT=n(aZ,"LI",{});var p$e=s(rT);Uue=n(p$e,"STRONG",{});var eut=s(Uue);Ker=r(eut,"vit"),eut.forEach(t),Zer=r(p$e," \u2014 "),zX=n(p$e,"A",{href:!0});var out=s(zX);eor=r(out,"ViTForMaskedImageModeling"),out.forEach(t),oor=r(p$e," (ViT model)"),p$e.forEach(t),aZ.forEach(t),ror=i(_a),tT=n(_a,"P",{});var u$e=s(tT);tor=r(u$e,"The model is set in evaluation mode by default using "),Jue=n(u$e,"CODE",{});var rut=s(Jue);aor=r(rut,"model.eval()"),rut.forEach(t),nor=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(u$e,"CODE",{});var tut=s(Yue);sor=r(tut,"model.train()"),tut.forEach(t),u$e.forEach(t),lor=i(_a),T(aT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),lqe=i(f),Ad=n(f,"H2",{class:!0});var mje=s(Ad);nT=n(mje,"A",{id:!0,class:!0,href:!0});var aut=s(nT);Kue=n(aut,"SPAN",{});var nut=s(Kue);T(uL.$$.fragment,nut),nut.forEach(t),aut.forEach(t),ior=i(mje),Zue=n(mje,"SPAN",{});var sut=s(Zue);dor=r(sut,"AutoModelForObjectDetection"),sut.forEach(t),mje.forEach(t),iqe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(_L.$$.fragment,sl),cor=i(sl),yd=n(sl,"P",{});var nZ=s(yd);mor=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QX=n(nZ,"A",{href:!0});var lut=s(QX);gor=r(lut,"from_pretrained()"),lut.forEach(t),hor=r(nZ," class method or the "),WX=n(nZ,"A",{href:!0});var iut=s(WX);por=r(iut,"from_config()"),iut.forEach(t),uor=r(nZ,` class
method.`),nZ.forEach(t),_or=i(sl),bL=n(sl,"P",{});var gje=s(bL);bor=r(gje,"This class cannot be instantiated directly using "),e_e=n(gje,"CODE",{});var dut=s(e_e);vor=r(dut,"__init__()"),dut.forEach(t),For=r(gje," (throws an error)."),gje.forEach(t),Tor=i(sl),Tt=n(sl,"DIV",{class:!0});var zw=s(Tt);T(vL.$$.fragment,zw),Mor=i(zw),o_e=n(zw,"P",{});var cut=s(o_e);Eor=r(cut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cut.forEach(t),Cor=i(zw),Ld=n(zw,"P",{});var sZ=s(Ld);wor=r(sZ,`Note:
Loading a model from its configuration file does `),r_e=n(sZ,"STRONG",{});var fut=s(r_e);Aor=r(fut,"not"),fut.forEach(t),yor=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(sZ,"A",{href:!0});var mut=s(HX);Lor=r(mut,"from_pretrained()"),mut.forEach(t),xor=r(sZ," to load the model weights."),sZ.forEach(t),$or=i(zw),T(sT.$$.fragment,zw),zw.forEach(t),kor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(FL.$$.fragment,ba),Sor=i(ba),t_e=n(ba,"P",{});var gut=s(t_e);Ror=r(gut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gut.forEach(t),Bor=i(ba),Wa=n(ba,"P",{});var Qw=s(Wa);Por=r(Qw,"The model class to instantiate is selected based on the "),a_e=n(Qw,"CODE",{});var hut=s(a_e);Ior=r(hut,"model_type"),hut.forEach(t),qor=r(Qw,` property of the config object (either
passed as an argument or loaded from `),n_e=n(Qw,"CODE",{});var put=s(n_e);Nor=r(put,"pretrained_model_name_or_path"),put.forEach(t),jor=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(Qw,"CODE",{});var uut=s(s_e);Dor=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),Gor=r(Qw,":"),Qw.forEach(t),Oor=i(ba),TL=n(ba,"UL",{});var hje=s(TL);lT=n(hje,"LI",{});var _$e=s(lT);l_e=n(_$e,"STRONG",{});var _ut=s(l_e);Vor=r(_ut,"detr"),_ut.forEach(t),Xor=r(_$e," \u2014 "),UX=n(_$e,"A",{href:!0});var but=s(UX);zor=r(but,"DetrForObjectDetection"),but.forEach(t),Qor=r(_$e," (DETR model)"),_$e.forEach(t),Wor=i(hje),iT=n(hje,"LI",{});var b$e=s(iT);i_e=n(b$e,"STRONG",{});var vut=s(i_e);Hor=r(vut,"yolos"),vut.forEach(t),Uor=r(b$e," \u2014 "),JX=n(b$e,"A",{href:!0});var Fut=s(JX);Jor=r(Fut,"YolosForObjectDetection"),Fut.forEach(t),Yor=r(b$e," (YOLOS model)"),b$e.forEach(t),hje.forEach(t),Kor=i(ba),dT=n(ba,"P",{});var v$e=s(dT);Zor=r(v$e,"The model is set in evaluation mode by default using "),d_e=n(v$e,"CODE",{});var Tut=s(d_e);err=r(Tut,"model.eval()"),Tut.forEach(t),orr=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=n(v$e,"CODE",{});var Mut=s(c_e);rrr=r(Mut,"model.train()"),Mut.forEach(t),v$e.forEach(t),trr=i(ba),T(cT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),dqe=i(f),xd=n(f,"H2",{class:!0});var pje=s(xd);fT=n(pje,"A",{id:!0,class:!0,href:!0});var Eut=s(fT);f_e=n(Eut,"SPAN",{});var Cut=s(f_e);T(ML.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),arr=i(pje),m_e=n(pje,"SPAN",{});var wut=s(m_e);nrr=r(wut,"AutoModelForImageSegmentation"),wut.forEach(t),pje.forEach(t),cqe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(EL.$$.fragment,ll),srr=i(ll),$d=n(ll,"P",{});var lZ=s($d);lrr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YX=n(lZ,"A",{href:!0});var Aut=s(YX);irr=r(Aut,"from_pretrained()"),Aut.forEach(t),drr=r(lZ," class method or the "),KX=n(lZ,"A",{href:!0});var yut=s(KX);crr=r(yut,"from_config()"),yut.forEach(t),frr=r(lZ,` class
method.`),lZ.forEach(t),mrr=i(ll),CL=n(ll,"P",{});var uje=s(CL);grr=r(uje,"This class cannot be instantiated directly using "),g_e=n(uje,"CODE",{});var Lut=s(g_e);hrr=r(Lut,"__init__()"),Lut.forEach(t),prr=r(uje," (throws an error)."),uje.forEach(t),urr=i(ll),Mt=n(ll,"DIV",{class:!0});var Ww=s(Mt);T(wL.$$.fragment,Ww),_rr=i(Ww),h_e=n(Ww,"P",{});var xut=s(h_e);brr=r(xut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xut.forEach(t),vrr=i(Ww),kd=n(Ww,"P",{});var iZ=s(kd);Frr=r(iZ,`Note:
Loading a model from its configuration file does `),p_e=n(iZ,"STRONG",{});var $ut=s(p_e);Trr=r($ut,"not"),$ut.forEach(t),Mrr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(iZ,"A",{href:!0});var kut=s(ZX);Err=r(kut,"from_pretrained()"),kut.forEach(t),Crr=r(iZ," to load the model weights."),iZ.forEach(t),wrr=i(Ww),T(mT.$$.fragment,Ww),Ww.forEach(t),Arr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(AL.$$.fragment,va),yrr=i(va),u_e=n(va,"P",{});var Sut=s(u_e);Lrr=r(Sut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Sut.forEach(t),xrr=i(va),Ha=n(va,"P",{});var Hw=s(Ha);$rr=r(Hw,"The model class to instantiate is selected based on the "),__e=n(Hw,"CODE",{});var Rut=s(__e);krr=r(Rut,"model_type"),Rut.forEach(t),Srr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),b_e=n(Hw,"CODE",{});var But=s(b_e);Rrr=r(But,"pretrained_model_name_or_path"),But.forEach(t),Brr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(Hw,"CODE",{});var Put=s(v_e);Prr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),Irr=r(Hw,":"),Hw.forEach(t),qrr=i(va),F_e=n(va,"UL",{});var Iut=s(F_e);gT=n(Iut,"LI",{});var F$e=s(gT);T_e=n(F$e,"STRONG",{});var qut=s(T_e);Nrr=r(qut,"detr"),qut.forEach(t),jrr=r(F$e," \u2014 "),ez=n(F$e,"A",{href:!0});var Nut=s(ez);Drr=r(Nut,"DetrForSegmentation"),Nut.forEach(t),Grr=r(F$e," (DETR model)"),F$e.forEach(t),Iut.forEach(t),Orr=i(va),hT=n(va,"P",{});var T$e=s(hT);Vrr=r(T$e,"The model is set in evaluation mode by default using "),M_e=n(T$e,"CODE",{});var jut=s(M_e);Xrr=r(jut,"model.eval()"),jut.forEach(t),zrr=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(T$e,"CODE",{});var Dut=s(E_e);Qrr=r(Dut,"model.train()"),Dut.forEach(t),T$e.forEach(t),Wrr=i(va),T(pT.$$.fragment,va),va.forEach(t),ll.forEach(t),fqe=i(f),Sd=n(f,"H2",{class:!0});var _je=s(Sd);uT=n(_je,"A",{id:!0,class:!0,href:!0});var Gut=s(uT);C_e=n(Gut,"SPAN",{});var Out=s(C_e);T(yL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),Hrr=i(_je),w_e=n(_je,"SPAN",{});var Vut=s(w_e);Urr=r(Vut,"AutoModelForSemanticSegmentation"),Vut.forEach(t),_je.forEach(t),mqe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(LL.$$.fragment,il),Jrr=i(il),Rd=n(il,"P",{});var dZ=s(Rd);Yrr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oz=n(dZ,"A",{href:!0});var Xut=s(oz);Krr=r(Xut,"from_pretrained()"),Xut.forEach(t),Zrr=r(dZ," class method or the "),rz=n(dZ,"A",{href:!0});var zut=s(rz);etr=r(zut,"from_config()"),zut.forEach(t),otr=r(dZ,` class
method.`),dZ.forEach(t),rtr=i(il),xL=n(il,"P",{});var bje=s(xL);ttr=r(bje,"This class cannot be instantiated directly using "),A_e=n(bje,"CODE",{});var Qut=s(A_e);atr=r(Qut,"__init__()"),Qut.forEach(t),ntr=r(bje," (throws an error)."),bje.forEach(t),str=i(il),Et=n(il,"DIV",{class:!0});var Uw=s(Et);T($L.$$.fragment,Uw),ltr=i(Uw),y_e=n(Uw,"P",{});var Wut=s(y_e);itr=r(Wut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wut.forEach(t),dtr=i(Uw),Bd=n(Uw,"P",{});var cZ=s(Bd);ctr=r(cZ,`Note:
Loading a model from its configuration file does `),L_e=n(cZ,"STRONG",{});var Hut=s(L_e);ftr=r(Hut,"not"),Hut.forEach(t),mtr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(cZ,"A",{href:!0});var Uut=s(tz);gtr=r(Uut,"from_pretrained()"),Uut.forEach(t),htr=r(cZ," to load the model weights."),cZ.forEach(t),ptr=i(Uw),T(_T.$$.fragment,Uw),Uw.forEach(t),utr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(kL.$$.fragment,Fa),_tr=i(Fa),x_e=n(Fa,"P",{});var Jut=s(x_e);btr=r(Jut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jut.forEach(t),vtr=i(Fa),Ua=n(Fa,"P",{});var Jw=s(Ua);Ftr=r(Jw,"The model class to instantiate is selected based on the "),$_e=n(Jw,"CODE",{});var Yut=s($_e);Ttr=r(Yut,"model_type"),Yut.forEach(t),Mtr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),k_e=n(Jw,"CODE",{});var Kut=s(k_e);Etr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),Ctr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(Jw,"CODE",{});var Zut=s(S_e);wtr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),Atr=r(Jw,":"),Jw.forEach(t),ytr=i(Fa),Ja=n(Fa,"UL",{});var Yw=s(Ja);bT=n(Yw,"LI",{});var M$e=s(bT);R_e=n(M$e,"STRONG",{});var e_t=s(R_e);Ltr=r(e_t,"beit"),e_t.forEach(t),xtr=r(M$e," \u2014 "),az=n(M$e,"A",{href:!0});var o_t=s(az);$tr=r(o_t,"BeitForSemanticSegmentation"),o_t.forEach(t),ktr=r(M$e," (BEiT model)"),M$e.forEach(t),Str=i(Yw),vT=n(Yw,"LI",{});var E$e=s(vT);B_e=n(E$e,"STRONG",{});var r_t=s(B_e);Rtr=r(r_t,"data2vec-vision"),r_t.forEach(t),Btr=r(E$e," \u2014 "),nz=n(E$e,"A",{href:!0});var t_t=s(nz);Ptr=r(t_t,"Data2VecVisionForSemanticSegmentation"),t_t.forEach(t),Itr=r(E$e," (Data2VecVision model)"),E$e.forEach(t),qtr=i(Yw),FT=n(Yw,"LI",{});var C$e=s(FT);P_e=n(C$e,"STRONG",{});var a_t=s(P_e);Ntr=r(a_t,"dpt"),a_t.forEach(t),jtr=r(C$e," \u2014 "),sz=n(C$e,"A",{href:!0});var n_t=s(sz);Dtr=r(n_t,"DPTForSemanticSegmentation"),n_t.forEach(t),Gtr=r(C$e," (DPT model)"),C$e.forEach(t),Otr=i(Yw),TT=n(Yw,"LI",{});var w$e=s(TT);I_e=n(w$e,"STRONG",{});var s_t=s(I_e);Vtr=r(s_t,"segformer"),s_t.forEach(t),Xtr=r(w$e," \u2014 "),lz=n(w$e,"A",{href:!0});var l_t=s(lz);ztr=r(l_t,"SegformerForSemanticSegmentation"),l_t.forEach(t),Qtr=r(w$e," (SegFormer model)"),w$e.forEach(t),Yw.forEach(t),Wtr=i(Fa),MT=n(Fa,"P",{});var A$e=s(MT);Htr=r(A$e,"The model is set in evaluation mode by default using "),q_e=n(A$e,"CODE",{});var i_t=s(q_e);Utr=r(i_t,"model.eval()"),i_t.forEach(t),Jtr=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(A$e,"CODE",{});var d_t=s(N_e);Ytr=r(d_t,"model.train()"),d_t.forEach(t),A$e.forEach(t),Ktr=i(Fa),T(ET.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),gqe=i(f),Pd=n(f,"H2",{class:!0});var vje=s(Pd);CT=n(vje,"A",{id:!0,class:!0,href:!0});var c_t=s(CT);j_e=n(c_t,"SPAN",{});var f_t=s(j_e);T(SL.$$.fragment,f_t),f_t.forEach(t),c_t.forEach(t),Ztr=i(vje),D_e=n(vje,"SPAN",{});var m_t=s(D_e);ear=r(m_t,"AutoModelForInstanceSegmentation"),m_t.forEach(t),vje.forEach(t),hqe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(RL.$$.fragment,dl),oar=i(dl),Id=n(dl,"P",{});var fZ=s(Id);rar=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iz=n(fZ,"A",{href:!0});var g_t=s(iz);tar=r(g_t,"from_pretrained()"),g_t.forEach(t),aar=r(fZ," class method or the "),dz=n(fZ,"A",{href:!0});var h_t=s(dz);nar=r(h_t,"from_config()"),h_t.forEach(t),sar=r(fZ,` class
method.`),fZ.forEach(t),lar=i(dl),BL=n(dl,"P",{});var Fje=s(BL);iar=r(Fje,"This class cannot be instantiated directly using "),G_e=n(Fje,"CODE",{});var p_t=s(G_e);dar=r(p_t,"__init__()"),p_t.forEach(t),car=r(Fje," (throws an error)."),Fje.forEach(t),far=i(dl),Ct=n(dl,"DIV",{class:!0});var Kw=s(Ct);T(PL.$$.fragment,Kw),mar=i(Kw),O_e=n(Kw,"P",{});var u_t=s(O_e);gar=r(u_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),u_t.forEach(t),har=i(Kw),qd=n(Kw,"P",{});var mZ=s(qd);par=r(mZ,`Note:
Loading a model from its configuration file does `),V_e=n(mZ,"STRONG",{});var __t=s(V_e);uar=r(__t,"not"),__t.forEach(t),_ar=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(mZ,"A",{href:!0});var b_t=s(cz);bar=r(b_t,"from_pretrained()"),b_t.forEach(t),Far=r(mZ," to load the model weights."),mZ.forEach(t),Tar=i(Kw),T(wT.$$.fragment,Kw),Kw.forEach(t),Mar=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(IL.$$.fragment,Ta),Ear=i(Ta),X_e=n(Ta,"P",{});var v_t=s(X_e);Car=r(v_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),v_t.forEach(t),war=i(Ta),Ya=n(Ta,"P",{});var Zw=s(Ya);Aar=r(Zw,"The model class to instantiate is selected based on the "),z_e=n(Zw,"CODE",{});var F_t=s(z_e);yar=r(F_t,"model_type"),F_t.forEach(t),Lar=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(Zw,"CODE",{});var T_t=s(Q_e);xar=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),$ar=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(Zw,"CODE",{});var M_t=s(W_e);kar=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),Sar=r(Zw,":"),Zw.forEach(t),Rar=i(Ta),H_e=n(Ta,"UL",{});var E_t=s(H_e);AT=n(E_t,"LI",{});var y$e=s(AT);U_e=n(y$e,"STRONG",{});var C_t=s(U_e);Bar=r(C_t,"maskformer"),C_t.forEach(t),Par=r(y$e," \u2014 "),fz=n(y$e,"A",{href:!0});var w_t=s(fz);Iar=r(w_t,"MaskFormerForInstanceSegmentation"),w_t.forEach(t),qar=r(y$e," (MaskFormer model)"),y$e.forEach(t),E_t.forEach(t),Nar=i(Ta),yT=n(Ta,"P",{});var L$e=s(yT);jar=r(L$e,"The model is set in evaluation mode by default using "),J_e=n(L$e,"CODE",{});var A_t=s(J_e);Dar=r(A_t,"model.eval()"),A_t.forEach(t),Gar=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(L$e,"CODE",{});var y_t=s(Y_e);Oar=r(y_t,"model.train()"),y_t.forEach(t),L$e.forEach(t),Var=i(Ta),T(LT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),pqe=i(f),Nd=n(f,"H2",{class:!0});var Tje=s(Nd);xT=n(Tje,"A",{id:!0,class:!0,href:!0});var L_t=s(xT);K_e=n(L_t,"SPAN",{});var x_t=s(K_e);T(qL.$$.fragment,x_t),x_t.forEach(t),L_t.forEach(t),Xar=i(Tje),Z_e=n(Tje,"SPAN",{});var $_t=s(Z_e);zar=r($_t,"TFAutoModel"),$_t.forEach(t),Tje.forEach(t),uqe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(NL.$$.fragment,cl),Qar=i(cl),jd=n(cl,"P",{});var gZ=s(jd);War=r(gZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mz=n(gZ,"A",{href:!0});var k_t=s(mz);Har=r(k_t,"from_pretrained()"),k_t.forEach(t),Uar=r(gZ," class method or the "),gz=n(gZ,"A",{href:!0});var S_t=s(gz);Jar=r(S_t,"from_config()"),S_t.forEach(t),Yar=r(gZ,` class
method.`),gZ.forEach(t),Kar=i(cl),jL=n(cl,"P",{});var Mje=s(jL);Zar=r(Mje,"This class cannot be instantiated directly using "),e2e=n(Mje,"CODE",{});var R_t=s(e2e);enr=r(R_t,"__init__()"),R_t.forEach(t),onr=r(Mje," (throws an error)."),Mje.forEach(t),rnr=i(cl),wt=n(cl,"DIV",{class:!0});var e6=s(wt);T(DL.$$.fragment,e6),tnr=i(e6),o2e=n(e6,"P",{});var B_t=s(o2e);anr=r(B_t,"Instantiates one of the base model classes of the library from a configuration."),B_t.forEach(t),nnr=i(e6),Dd=n(e6,"P",{});var hZ=s(Dd);snr=r(hZ,`Note:
Loading a model from its configuration file does `),r2e=n(hZ,"STRONG",{});var P_t=s(r2e);lnr=r(P_t,"not"),P_t.forEach(t),inr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(hZ,"A",{href:!0});var I_t=s(hz);dnr=r(I_t,"from_pretrained()"),I_t.forEach(t),cnr=r(hZ," to load the model weights."),hZ.forEach(t),fnr=i(e6),T($T.$$.fragment,e6),e6.forEach(t),mnr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(GL.$$.fragment,fl),gnr=i(fl),t2e=n(fl,"P",{});var q_t=s(t2e);hnr=r(q_t,"Instantiate one of the base model classes of the library from a pretrained model."),q_t.forEach(t),pnr=i(fl),Ka=n(fl,"P",{});var o6=s(Ka);unr=r(o6,"The model class to instantiate is selected based on the "),a2e=n(o6,"CODE",{});var N_t=s(a2e);_nr=r(N_t,"model_type"),N_t.forEach(t),bnr=r(o6,` property of the config object (either
passed as an argument or loaded from `),n2e=n(o6,"CODE",{});var j_t=s(n2e);vnr=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),Fnr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(o6,"CODE",{});var D_t=s(s2e);Tnr=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),Mnr=r(o6,":"),o6.forEach(t),Enr=i(fl),j=n(fl,"UL",{});var D=s(j);kT=n(D,"LI",{});var x$e=s(kT);l2e=n(x$e,"STRONG",{});var G_t=s(l2e);Cnr=r(G_t,"albert"),G_t.forEach(t),wnr=r(x$e," \u2014 "),pz=n(x$e,"A",{href:!0});var O_t=s(pz);Anr=r(O_t,"TFAlbertModel"),O_t.forEach(t),ynr=r(x$e," (ALBERT model)"),x$e.forEach(t),Lnr=i(D),ST=n(D,"LI",{});var $$e=s(ST);i2e=n($$e,"STRONG",{});var V_t=s(i2e);xnr=r(V_t,"bart"),V_t.forEach(t),$nr=r($$e," \u2014 "),uz=n($$e,"A",{href:!0});var X_t=s(uz);knr=r(X_t,"TFBartModel"),X_t.forEach(t),Snr=r($$e," (BART model)"),$$e.forEach(t),Rnr=i(D),RT=n(D,"LI",{});var k$e=s(RT);d2e=n(k$e,"STRONG",{});var z_t=s(d2e);Bnr=r(z_t,"bert"),z_t.forEach(t),Pnr=r(k$e," \u2014 "),_z=n(k$e,"A",{href:!0});var Q_t=s(_z);Inr=r(Q_t,"TFBertModel"),Q_t.forEach(t),qnr=r(k$e," (BERT model)"),k$e.forEach(t),Nnr=i(D),BT=n(D,"LI",{});var S$e=s(BT);c2e=n(S$e,"STRONG",{});var W_t=s(c2e);jnr=r(W_t,"blenderbot"),W_t.forEach(t),Dnr=r(S$e," \u2014 "),bz=n(S$e,"A",{href:!0});var H_t=s(bz);Gnr=r(H_t,"TFBlenderbotModel"),H_t.forEach(t),Onr=r(S$e," (Blenderbot model)"),S$e.forEach(t),Vnr=i(D),PT=n(D,"LI",{});var R$e=s(PT);f2e=n(R$e,"STRONG",{});var U_t=s(f2e);Xnr=r(U_t,"blenderbot-small"),U_t.forEach(t),znr=r(R$e," \u2014 "),vz=n(R$e,"A",{href:!0});var J_t=s(vz);Qnr=r(J_t,"TFBlenderbotSmallModel"),J_t.forEach(t),Wnr=r(R$e," (BlenderbotSmall model)"),R$e.forEach(t),Hnr=i(D),IT=n(D,"LI",{});var B$e=s(IT);m2e=n(B$e,"STRONG",{});var Y_t=s(m2e);Unr=r(Y_t,"camembert"),Y_t.forEach(t),Jnr=r(B$e," \u2014 "),Fz=n(B$e,"A",{href:!0});var K_t=s(Fz);Ynr=r(K_t,"TFCamembertModel"),K_t.forEach(t),Knr=r(B$e," (CamemBERT model)"),B$e.forEach(t),Znr=i(D),qT=n(D,"LI",{});var P$e=s(qT);g2e=n(P$e,"STRONG",{});var Z_t=s(g2e);esr=r(Z_t,"clip"),Z_t.forEach(t),osr=r(P$e," \u2014 "),Tz=n(P$e,"A",{href:!0});var e2t=s(Tz);rsr=r(e2t,"TFCLIPModel"),e2t.forEach(t),tsr=r(P$e," (CLIP model)"),P$e.forEach(t),asr=i(D),NT=n(D,"LI",{});var I$e=s(NT);h2e=n(I$e,"STRONG",{});var o2t=s(h2e);nsr=r(o2t,"convbert"),o2t.forEach(t),ssr=r(I$e," \u2014 "),Mz=n(I$e,"A",{href:!0});var r2t=s(Mz);lsr=r(r2t,"TFConvBertModel"),r2t.forEach(t),isr=r(I$e," (ConvBERT model)"),I$e.forEach(t),dsr=i(D),jT=n(D,"LI",{});var q$e=s(jT);p2e=n(q$e,"STRONG",{});var t2t=s(p2e);csr=r(t2t,"convnext"),t2t.forEach(t),fsr=r(q$e," \u2014 "),Ez=n(q$e,"A",{href:!0});var a2t=s(Ez);msr=r(a2t,"TFConvNextModel"),a2t.forEach(t),gsr=r(q$e," (ConvNext model)"),q$e.forEach(t),hsr=i(D),DT=n(D,"LI",{});var N$e=s(DT);u2e=n(N$e,"STRONG",{});var n2t=s(u2e);psr=r(n2t,"ctrl"),n2t.forEach(t),usr=r(N$e," \u2014 "),Cz=n(N$e,"A",{href:!0});var s2t=s(Cz);_sr=r(s2t,"TFCTRLModel"),s2t.forEach(t),bsr=r(N$e," (CTRL model)"),N$e.forEach(t),vsr=i(D),GT=n(D,"LI",{});var j$e=s(GT);_2e=n(j$e,"STRONG",{});var l2t=s(_2e);Fsr=r(l2t,"data2vec-vision"),l2t.forEach(t),Tsr=r(j$e," \u2014 "),wz=n(j$e,"A",{href:!0});var i2t=s(wz);Msr=r(i2t,"TFData2VecVisionModel"),i2t.forEach(t),Esr=r(j$e," (Data2VecVision model)"),j$e.forEach(t),Csr=i(D),OT=n(D,"LI",{});var D$e=s(OT);b2e=n(D$e,"STRONG",{});var d2t=s(b2e);wsr=r(d2t,"deberta"),d2t.forEach(t),Asr=r(D$e," \u2014 "),Az=n(D$e,"A",{href:!0});var c2t=s(Az);ysr=r(c2t,"TFDebertaModel"),c2t.forEach(t),Lsr=r(D$e," (DeBERTa model)"),D$e.forEach(t),xsr=i(D),VT=n(D,"LI",{});var G$e=s(VT);v2e=n(G$e,"STRONG",{});var f2t=s(v2e);$sr=r(f2t,"deberta-v2"),f2t.forEach(t),ksr=r(G$e," \u2014 "),yz=n(G$e,"A",{href:!0});var m2t=s(yz);Ssr=r(m2t,"TFDebertaV2Model"),m2t.forEach(t),Rsr=r(G$e," (DeBERTa-v2 model)"),G$e.forEach(t),Bsr=i(D),XT=n(D,"LI",{});var O$e=s(XT);F2e=n(O$e,"STRONG",{});var g2t=s(F2e);Psr=r(g2t,"distilbert"),g2t.forEach(t),Isr=r(O$e," \u2014 "),Lz=n(O$e,"A",{href:!0});var h2t=s(Lz);qsr=r(h2t,"TFDistilBertModel"),h2t.forEach(t),Nsr=r(O$e," (DistilBERT model)"),O$e.forEach(t),jsr=i(D),zT=n(D,"LI",{});var V$e=s(zT);T2e=n(V$e,"STRONG",{});var p2t=s(T2e);Dsr=r(p2t,"dpr"),p2t.forEach(t),Gsr=r(V$e," \u2014 "),xz=n(V$e,"A",{href:!0});var u2t=s(xz);Osr=r(u2t,"TFDPRQuestionEncoder"),u2t.forEach(t),Vsr=r(V$e," (DPR model)"),V$e.forEach(t),Xsr=i(D),QT=n(D,"LI",{});var X$e=s(QT);M2e=n(X$e,"STRONG",{});var _2t=s(M2e);zsr=r(_2t,"electra"),_2t.forEach(t),Qsr=r(X$e," \u2014 "),$z=n(X$e,"A",{href:!0});var b2t=s($z);Wsr=r(b2t,"TFElectraModel"),b2t.forEach(t),Hsr=r(X$e," (ELECTRA model)"),X$e.forEach(t),Usr=i(D),WT=n(D,"LI",{});var z$e=s(WT);E2e=n(z$e,"STRONG",{});var v2t=s(E2e);Jsr=r(v2t,"flaubert"),v2t.forEach(t),Ysr=r(z$e," \u2014 "),kz=n(z$e,"A",{href:!0});var F2t=s(kz);Ksr=r(F2t,"TFFlaubertModel"),F2t.forEach(t),Zsr=r(z$e," (FlauBERT model)"),z$e.forEach(t),elr=i(D),Ps=n(D,"LI",{});var v$=s(Ps);C2e=n(v$,"STRONG",{});var T2t=s(C2e);olr=r(T2t,"funnel"),T2t.forEach(t),rlr=r(v$," \u2014 "),Sz=n(v$,"A",{href:!0});var M2t=s(Sz);tlr=r(M2t,"TFFunnelModel"),M2t.forEach(t),alr=r(v$," or "),Rz=n(v$,"A",{href:!0});var E2t=s(Rz);nlr=r(E2t,"TFFunnelBaseModel"),E2t.forEach(t),slr=r(v$," (Funnel Transformer model)"),v$.forEach(t),llr=i(D),HT=n(D,"LI",{});var Q$e=s(HT);w2e=n(Q$e,"STRONG",{});var C2t=s(w2e);ilr=r(C2t,"gpt2"),C2t.forEach(t),dlr=r(Q$e," \u2014 "),Bz=n(Q$e,"A",{href:!0});var w2t=s(Bz);clr=r(w2t,"TFGPT2Model"),w2t.forEach(t),flr=r(Q$e," (OpenAI GPT-2 model)"),Q$e.forEach(t),mlr=i(D),UT=n(D,"LI",{});var W$e=s(UT);A2e=n(W$e,"STRONG",{});var A2t=s(A2e);glr=r(A2t,"gptj"),A2t.forEach(t),hlr=r(W$e," \u2014 "),Pz=n(W$e,"A",{href:!0});var y2t=s(Pz);plr=r(y2t,"TFGPTJModel"),y2t.forEach(t),ulr=r(W$e," (GPT-J model)"),W$e.forEach(t),_lr=i(D),JT=n(D,"LI",{});var H$e=s(JT);y2e=n(H$e,"STRONG",{});var L2t=s(y2e);blr=r(L2t,"hubert"),L2t.forEach(t),vlr=r(H$e," \u2014 "),Iz=n(H$e,"A",{href:!0});var x2t=s(Iz);Flr=r(x2t,"TFHubertModel"),x2t.forEach(t),Tlr=r(H$e," (Hubert model)"),H$e.forEach(t),Mlr=i(D),YT=n(D,"LI",{});var U$e=s(YT);L2e=n(U$e,"STRONG",{});var $2t=s(L2e);Elr=r($2t,"layoutlm"),$2t.forEach(t),Clr=r(U$e," \u2014 "),qz=n(U$e,"A",{href:!0});var k2t=s(qz);wlr=r(k2t,"TFLayoutLMModel"),k2t.forEach(t),Alr=r(U$e," (LayoutLM model)"),U$e.forEach(t),ylr=i(D),KT=n(D,"LI",{});var J$e=s(KT);x2e=n(J$e,"STRONG",{});var S2t=s(x2e);Llr=r(S2t,"led"),S2t.forEach(t),xlr=r(J$e," \u2014 "),Nz=n(J$e,"A",{href:!0});var R2t=s(Nz);$lr=r(R2t,"TFLEDModel"),R2t.forEach(t),klr=r(J$e," (LED model)"),J$e.forEach(t),Slr=i(D),ZT=n(D,"LI",{});var Y$e=s(ZT);$2e=n(Y$e,"STRONG",{});var B2t=s($2e);Rlr=r(B2t,"longformer"),B2t.forEach(t),Blr=r(Y$e," \u2014 "),jz=n(Y$e,"A",{href:!0});var P2t=s(jz);Plr=r(P2t,"TFLongformerModel"),P2t.forEach(t),Ilr=r(Y$e," (Longformer model)"),Y$e.forEach(t),qlr=i(D),e7=n(D,"LI",{});var K$e=s(e7);k2e=n(K$e,"STRONG",{});var I2t=s(k2e);Nlr=r(I2t,"lxmert"),I2t.forEach(t),jlr=r(K$e," \u2014 "),Dz=n(K$e,"A",{href:!0});var q2t=s(Dz);Dlr=r(q2t,"TFLxmertModel"),q2t.forEach(t),Glr=r(K$e," (LXMERT model)"),K$e.forEach(t),Olr=i(D),o7=n(D,"LI",{});var Z$e=s(o7);S2e=n(Z$e,"STRONG",{});var N2t=s(S2e);Vlr=r(N2t,"marian"),N2t.forEach(t),Xlr=r(Z$e," \u2014 "),Gz=n(Z$e,"A",{href:!0});var j2t=s(Gz);zlr=r(j2t,"TFMarianModel"),j2t.forEach(t),Qlr=r(Z$e," (Marian model)"),Z$e.forEach(t),Wlr=i(D),r7=n(D,"LI",{});var eke=s(r7);R2e=n(eke,"STRONG",{});var D2t=s(R2e);Hlr=r(D2t,"mbart"),D2t.forEach(t),Ulr=r(eke," \u2014 "),Oz=n(eke,"A",{href:!0});var G2t=s(Oz);Jlr=r(G2t,"TFMBartModel"),G2t.forEach(t),Ylr=r(eke," (mBART model)"),eke.forEach(t),Klr=i(D),t7=n(D,"LI",{});var oke=s(t7);B2e=n(oke,"STRONG",{});var O2t=s(B2e);Zlr=r(O2t,"mobilebert"),O2t.forEach(t),eir=r(oke," \u2014 "),Vz=n(oke,"A",{href:!0});var V2t=s(Vz);oir=r(V2t,"TFMobileBertModel"),V2t.forEach(t),rir=r(oke," (MobileBERT model)"),oke.forEach(t),tir=i(D),a7=n(D,"LI",{});var rke=s(a7);P2e=n(rke,"STRONG",{});var X2t=s(P2e);air=r(X2t,"mpnet"),X2t.forEach(t),nir=r(rke," \u2014 "),Xz=n(rke,"A",{href:!0});var z2t=s(Xz);sir=r(z2t,"TFMPNetModel"),z2t.forEach(t),lir=r(rke," (MPNet model)"),rke.forEach(t),iir=i(D),n7=n(D,"LI",{});var tke=s(n7);I2e=n(tke,"STRONG",{});var Q2t=s(I2e);dir=r(Q2t,"mt5"),Q2t.forEach(t),cir=r(tke," \u2014 "),zz=n(tke,"A",{href:!0});var W2t=s(zz);fir=r(W2t,"TFMT5Model"),W2t.forEach(t),mir=r(tke," (mT5 model)"),tke.forEach(t),gir=i(D),s7=n(D,"LI",{});var ake=s(s7);q2e=n(ake,"STRONG",{});var H2t=s(q2e);hir=r(H2t,"openai-gpt"),H2t.forEach(t),pir=r(ake," \u2014 "),Qz=n(ake,"A",{href:!0});var U2t=s(Qz);uir=r(U2t,"TFOpenAIGPTModel"),U2t.forEach(t),_ir=r(ake," (OpenAI GPT model)"),ake.forEach(t),bir=i(D),l7=n(D,"LI",{});var nke=s(l7);N2e=n(nke,"STRONG",{});var J2t=s(N2e);vir=r(J2t,"pegasus"),J2t.forEach(t),Fir=r(nke," \u2014 "),Wz=n(nke,"A",{href:!0});var Y2t=s(Wz);Tir=r(Y2t,"TFPegasusModel"),Y2t.forEach(t),Mir=r(nke," (Pegasus model)"),nke.forEach(t),Eir=i(D),i7=n(D,"LI",{});var ske=s(i7);j2e=n(ske,"STRONG",{});var K2t=s(j2e);Cir=r(K2t,"rembert"),K2t.forEach(t),wir=r(ske," \u2014 "),Hz=n(ske,"A",{href:!0});var Z2t=s(Hz);Air=r(Z2t,"TFRemBertModel"),Z2t.forEach(t),yir=r(ske," (RemBERT model)"),ske.forEach(t),Lir=i(D),d7=n(D,"LI",{});var lke=s(d7);D2e=n(lke,"STRONG",{});var e1t=s(D2e);xir=r(e1t,"roberta"),e1t.forEach(t),$ir=r(lke," \u2014 "),Uz=n(lke,"A",{href:!0});var o1t=s(Uz);kir=r(o1t,"TFRobertaModel"),o1t.forEach(t),Sir=r(lke," (RoBERTa model)"),lke.forEach(t),Rir=i(D),c7=n(D,"LI",{});var ike=s(c7);G2e=n(ike,"STRONG",{});var r1t=s(G2e);Bir=r(r1t,"roformer"),r1t.forEach(t),Pir=r(ike," \u2014 "),Jz=n(ike,"A",{href:!0});var t1t=s(Jz);Iir=r(t1t,"TFRoFormerModel"),t1t.forEach(t),qir=r(ike," (RoFormer model)"),ike.forEach(t),Nir=i(D),f7=n(D,"LI",{});var dke=s(f7);O2e=n(dke,"STRONG",{});var a1t=s(O2e);jir=r(a1t,"speech_to_text"),a1t.forEach(t),Dir=r(dke," \u2014 "),Yz=n(dke,"A",{href:!0});var n1t=s(Yz);Gir=r(n1t,"TFSpeech2TextModel"),n1t.forEach(t),Oir=r(dke," (Speech2Text model)"),dke.forEach(t),Vir=i(D),m7=n(D,"LI",{});var cke=s(m7);V2e=n(cke,"STRONG",{});var s1t=s(V2e);Xir=r(s1t,"t5"),s1t.forEach(t),zir=r(cke," \u2014 "),Kz=n(cke,"A",{href:!0});var l1t=s(Kz);Qir=r(l1t,"TFT5Model"),l1t.forEach(t),Wir=r(cke," (T5 model)"),cke.forEach(t),Hir=i(D),g7=n(D,"LI",{});var fke=s(g7);X2e=n(fke,"STRONG",{});var i1t=s(X2e);Uir=r(i1t,"tapas"),i1t.forEach(t),Jir=r(fke," \u2014 "),Zz=n(fke,"A",{href:!0});var d1t=s(Zz);Yir=r(d1t,"TFTapasModel"),d1t.forEach(t),Kir=r(fke," (TAPAS model)"),fke.forEach(t),Zir=i(D),h7=n(D,"LI",{});var mke=s(h7);z2e=n(mke,"STRONG",{});var c1t=s(z2e);edr=r(c1t,"transfo-xl"),c1t.forEach(t),odr=r(mke," \u2014 "),eQ=n(mke,"A",{href:!0});var f1t=s(eQ);rdr=r(f1t,"TFTransfoXLModel"),f1t.forEach(t),tdr=r(mke," (Transformer-XL model)"),mke.forEach(t),adr=i(D),p7=n(D,"LI",{});var gke=s(p7);Q2e=n(gke,"STRONG",{});var m1t=s(Q2e);ndr=r(m1t,"vit"),m1t.forEach(t),sdr=r(gke," \u2014 "),oQ=n(gke,"A",{href:!0});var g1t=s(oQ);ldr=r(g1t,"TFViTModel"),g1t.forEach(t),idr=r(gke," (ViT model)"),gke.forEach(t),ddr=i(D),u7=n(D,"LI",{});var hke=s(u7);W2e=n(hke,"STRONG",{});var h1t=s(W2e);cdr=r(h1t,"vit_mae"),h1t.forEach(t),fdr=r(hke," \u2014 "),rQ=n(hke,"A",{href:!0});var p1t=s(rQ);mdr=r(p1t,"TFViTMAEModel"),p1t.forEach(t),gdr=r(hke," (ViTMAE model)"),hke.forEach(t),hdr=i(D),_7=n(D,"LI",{});var pke=s(_7);H2e=n(pke,"STRONG",{});var u1t=s(H2e);pdr=r(u1t,"wav2vec2"),u1t.forEach(t),udr=r(pke," \u2014 "),tQ=n(pke,"A",{href:!0});var _1t=s(tQ);_dr=r(_1t,"TFWav2Vec2Model"),_1t.forEach(t),bdr=r(pke," (Wav2Vec2 model)"),pke.forEach(t),vdr=i(D),b7=n(D,"LI",{});var uke=s(b7);U2e=n(uke,"STRONG",{});var b1t=s(U2e);Fdr=r(b1t,"xlm"),b1t.forEach(t),Tdr=r(uke," \u2014 "),aQ=n(uke,"A",{href:!0});var v1t=s(aQ);Mdr=r(v1t,"TFXLMModel"),v1t.forEach(t),Edr=r(uke," (XLM model)"),uke.forEach(t),Cdr=i(D),v7=n(D,"LI",{});var _ke=s(v7);J2e=n(_ke,"STRONG",{});var F1t=s(J2e);wdr=r(F1t,"xlm-roberta"),F1t.forEach(t),Adr=r(_ke," \u2014 "),nQ=n(_ke,"A",{href:!0});var T1t=s(nQ);ydr=r(T1t,"TFXLMRobertaModel"),T1t.forEach(t),Ldr=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),xdr=i(D),F7=n(D,"LI",{});var bke=s(F7);Y2e=n(bke,"STRONG",{});var M1t=s(Y2e);$dr=r(M1t,"xlnet"),M1t.forEach(t),kdr=r(bke," \u2014 "),sQ=n(bke,"A",{href:!0});var E1t=s(sQ);Sdr=r(E1t,"TFXLNetModel"),E1t.forEach(t),Rdr=r(bke," (XLNet model)"),bke.forEach(t),D.forEach(t),Bdr=i(fl),T(T7.$$.fragment,fl),fl.forEach(t),cl.forEach(t),_qe=i(f),Gd=n(f,"H2",{class:!0});var Eje=s(Gd);M7=n(Eje,"A",{id:!0,class:!0,href:!0});var C1t=s(M7);K2e=n(C1t,"SPAN",{});var w1t=s(K2e);T(OL.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),Pdr=i(Eje),Z2e=n(Eje,"SPAN",{});var A1t=s(Z2e);Idr=r(A1t,"TFAutoModelForPreTraining"),A1t.forEach(t),Eje.forEach(t),bqe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(VL.$$.fragment,ml),qdr=i(ml),Od=n(ml,"P",{});var pZ=s(Od);Ndr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lQ=n(pZ,"A",{href:!0});var y1t=s(lQ);jdr=r(y1t,"from_pretrained()"),y1t.forEach(t),Ddr=r(pZ," class method or the "),iQ=n(pZ,"A",{href:!0});var L1t=s(iQ);Gdr=r(L1t,"from_config()"),L1t.forEach(t),Odr=r(pZ,` class
method.`),pZ.forEach(t),Vdr=i(ml),XL=n(ml,"P",{});var Cje=s(XL);Xdr=r(Cje,"This class cannot be instantiated directly using "),e1e=n(Cje,"CODE",{});var x1t=s(e1e);zdr=r(x1t,"__init__()"),x1t.forEach(t),Qdr=r(Cje," (throws an error)."),Cje.forEach(t),Wdr=i(ml),At=n(ml,"DIV",{class:!0});var r6=s(At);T(zL.$$.fragment,r6),Hdr=i(r6),o1e=n(r6,"P",{});var $1t=s(o1e);Udr=r($1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$1t.forEach(t),Jdr=i(r6),Vd=n(r6,"P",{});var uZ=s(Vd);Ydr=r(uZ,`Note:
Loading a model from its configuration file does `),r1e=n(uZ,"STRONG",{});var k1t=s(r1e);Kdr=r(k1t,"not"),k1t.forEach(t),Zdr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(uZ,"A",{href:!0});var S1t=s(dQ);ecr=r(S1t,"from_pretrained()"),S1t.forEach(t),ocr=r(uZ," to load the model weights."),uZ.forEach(t),rcr=i(r6),T(E7.$$.fragment,r6),r6.forEach(t),tcr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(QL.$$.fragment,gl),acr=i(gl),t1e=n(gl,"P",{});var R1t=s(t1e);ncr=r(R1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R1t.forEach(t),scr=i(gl),Za=n(gl,"P",{});var t6=s(Za);lcr=r(t6,"The model class to instantiate is selected based on the "),a1e=n(t6,"CODE",{});var B1t=s(a1e);icr=r(B1t,"model_type"),B1t.forEach(t),dcr=r(t6,` property of the config object (either
passed as an argument or loaded from `),n1e=n(t6,"CODE",{});var P1t=s(n1e);ccr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),fcr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(t6,"CODE",{});var I1t=s(s1e);mcr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),gcr=r(t6,":"),t6.forEach(t),hcr=i(gl),se=n(gl,"UL",{});var le=s(se);C7=n(le,"LI",{});var vke=s(C7);l1e=n(vke,"STRONG",{});var q1t=s(l1e);pcr=r(q1t,"albert"),q1t.forEach(t),ucr=r(vke," \u2014 "),cQ=n(vke,"A",{href:!0});var N1t=s(cQ);_cr=r(N1t,"TFAlbertForPreTraining"),N1t.forEach(t),bcr=r(vke," (ALBERT model)"),vke.forEach(t),vcr=i(le),w7=n(le,"LI",{});var Fke=s(w7);i1e=n(Fke,"STRONG",{});var j1t=s(i1e);Fcr=r(j1t,"bart"),j1t.forEach(t),Tcr=r(Fke," \u2014 "),fQ=n(Fke,"A",{href:!0});var D1t=s(fQ);Mcr=r(D1t,"TFBartForConditionalGeneration"),D1t.forEach(t),Ecr=r(Fke," (BART model)"),Fke.forEach(t),Ccr=i(le),A7=n(le,"LI",{});var Tke=s(A7);d1e=n(Tke,"STRONG",{});var G1t=s(d1e);wcr=r(G1t,"bert"),G1t.forEach(t),Acr=r(Tke," \u2014 "),mQ=n(Tke,"A",{href:!0});var O1t=s(mQ);ycr=r(O1t,"TFBertForPreTraining"),O1t.forEach(t),Lcr=r(Tke," (BERT model)"),Tke.forEach(t),xcr=i(le),y7=n(le,"LI",{});var Mke=s(y7);c1e=n(Mke,"STRONG",{});var V1t=s(c1e);$cr=r(V1t,"camembert"),V1t.forEach(t),kcr=r(Mke," \u2014 "),gQ=n(Mke,"A",{href:!0});var X1t=s(gQ);Scr=r(X1t,"TFCamembertForMaskedLM"),X1t.forEach(t),Rcr=r(Mke," (CamemBERT model)"),Mke.forEach(t),Bcr=i(le),L7=n(le,"LI",{});var Eke=s(L7);f1e=n(Eke,"STRONG",{});var z1t=s(f1e);Pcr=r(z1t,"ctrl"),z1t.forEach(t),Icr=r(Eke," \u2014 "),hQ=n(Eke,"A",{href:!0});var Q1t=s(hQ);qcr=r(Q1t,"TFCTRLLMHeadModel"),Q1t.forEach(t),Ncr=r(Eke," (CTRL model)"),Eke.forEach(t),jcr=i(le),x7=n(le,"LI",{});var Cke=s(x7);m1e=n(Cke,"STRONG",{});var W1t=s(m1e);Dcr=r(W1t,"distilbert"),W1t.forEach(t),Gcr=r(Cke," \u2014 "),pQ=n(Cke,"A",{href:!0});var H1t=s(pQ);Ocr=r(H1t,"TFDistilBertForMaskedLM"),H1t.forEach(t),Vcr=r(Cke," (DistilBERT model)"),Cke.forEach(t),Xcr=i(le),$7=n(le,"LI",{});var wke=s($7);g1e=n(wke,"STRONG",{});var U1t=s(g1e);zcr=r(U1t,"electra"),U1t.forEach(t),Qcr=r(wke," \u2014 "),uQ=n(wke,"A",{href:!0});var J1t=s(uQ);Wcr=r(J1t,"TFElectraForPreTraining"),J1t.forEach(t),Hcr=r(wke," (ELECTRA model)"),wke.forEach(t),Ucr=i(le),k7=n(le,"LI",{});var Ake=s(k7);h1e=n(Ake,"STRONG",{});var Y1t=s(h1e);Jcr=r(Y1t,"flaubert"),Y1t.forEach(t),Ycr=r(Ake," \u2014 "),_Q=n(Ake,"A",{href:!0});var K1t=s(_Q);Kcr=r(K1t,"TFFlaubertWithLMHeadModel"),K1t.forEach(t),Zcr=r(Ake," (FlauBERT model)"),Ake.forEach(t),efr=i(le),S7=n(le,"LI",{});var yke=s(S7);p1e=n(yke,"STRONG",{});var Z1t=s(p1e);ofr=r(Z1t,"funnel"),Z1t.forEach(t),rfr=r(yke," \u2014 "),bQ=n(yke,"A",{href:!0});var ebt=s(bQ);tfr=r(ebt,"TFFunnelForPreTraining"),ebt.forEach(t),afr=r(yke," (Funnel Transformer model)"),yke.forEach(t),nfr=i(le),R7=n(le,"LI",{});var Lke=s(R7);u1e=n(Lke,"STRONG",{});var obt=s(u1e);sfr=r(obt,"gpt2"),obt.forEach(t),lfr=r(Lke," \u2014 "),vQ=n(Lke,"A",{href:!0});var rbt=s(vQ);ifr=r(rbt,"TFGPT2LMHeadModel"),rbt.forEach(t),dfr=r(Lke," (OpenAI GPT-2 model)"),Lke.forEach(t),cfr=i(le),B7=n(le,"LI",{});var xke=s(B7);_1e=n(xke,"STRONG",{});var tbt=s(_1e);ffr=r(tbt,"layoutlm"),tbt.forEach(t),mfr=r(xke," \u2014 "),FQ=n(xke,"A",{href:!0});var abt=s(FQ);gfr=r(abt,"TFLayoutLMForMaskedLM"),abt.forEach(t),hfr=r(xke," (LayoutLM model)"),xke.forEach(t),pfr=i(le),P7=n(le,"LI",{});var $ke=s(P7);b1e=n($ke,"STRONG",{});var nbt=s(b1e);ufr=r(nbt,"lxmert"),nbt.forEach(t),_fr=r($ke," \u2014 "),TQ=n($ke,"A",{href:!0});var sbt=s(TQ);bfr=r(sbt,"TFLxmertForPreTraining"),sbt.forEach(t),vfr=r($ke," (LXMERT model)"),$ke.forEach(t),Ffr=i(le),I7=n(le,"LI",{});var kke=s(I7);v1e=n(kke,"STRONG",{});var lbt=s(v1e);Tfr=r(lbt,"mobilebert"),lbt.forEach(t),Mfr=r(kke," \u2014 "),MQ=n(kke,"A",{href:!0});var ibt=s(MQ);Efr=r(ibt,"TFMobileBertForPreTraining"),ibt.forEach(t),Cfr=r(kke," (MobileBERT model)"),kke.forEach(t),wfr=i(le),q7=n(le,"LI",{});var Ske=s(q7);F1e=n(Ske,"STRONG",{});var dbt=s(F1e);Afr=r(dbt,"mpnet"),dbt.forEach(t),yfr=r(Ske," \u2014 "),EQ=n(Ske,"A",{href:!0});var cbt=s(EQ);Lfr=r(cbt,"TFMPNetForMaskedLM"),cbt.forEach(t),xfr=r(Ske," (MPNet model)"),Ske.forEach(t),$fr=i(le),N7=n(le,"LI",{});var Rke=s(N7);T1e=n(Rke,"STRONG",{});var fbt=s(T1e);kfr=r(fbt,"openai-gpt"),fbt.forEach(t),Sfr=r(Rke," \u2014 "),CQ=n(Rke,"A",{href:!0});var mbt=s(CQ);Rfr=r(mbt,"TFOpenAIGPTLMHeadModel"),mbt.forEach(t),Bfr=r(Rke," (OpenAI GPT model)"),Rke.forEach(t),Pfr=i(le),j7=n(le,"LI",{});var Bke=s(j7);M1e=n(Bke,"STRONG",{});var gbt=s(M1e);Ifr=r(gbt,"roberta"),gbt.forEach(t),qfr=r(Bke," \u2014 "),wQ=n(Bke,"A",{href:!0});var hbt=s(wQ);Nfr=r(hbt,"TFRobertaForMaskedLM"),hbt.forEach(t),jfr=r(Bke," (RoBERTa model)"),Bke.forEach(t),Dfr=i(le),D7=n(le,"LI",{});var Pke=s(D7);E1e=n(Pke,"STRONG",{});var pbt=s(E1e);Gfr=r(pbt,"t5"),pbt.forEach(t),Ofr=r(Pke," \u2014 "),AQ=n(Pke,"A",{href:!0});var ubt=s(AQ);Vfr=r(ubt,"TFT5ForConditionalGeneration"),ubt.forEach(t),Xfr=r(Pke," (T5 model)"),Pke.forEach(t),zfr=i(le),G7=n(le,"LI",{});var Ike=s(G7);C1e=n(Ike,"STRONG",{});var _bt=s(C1e);Qfr=r(_bt,"tapas"),_bt.forEach(t),Wfr=r(Ike," \u2014 "),yQ=n(Ike,"A",{href:!0});var bbt=s(yQ);Hfr=r(bbt,"TFTapasForMaskedLM"),bbt.forEach(t),Ufr=r(Ike," (TAPAS model)"),Ike.forEach(t),Jfr=i(le),O7=n(le,"LI",{});var qke=s(O7);w1e=n(qke,"STRONG",{});var vbt=s(w1e);Yfr=r(vbt,"transfo-xl"),vbt.forEach(t),Kfr=r(qke," \u2014 "),LQ=n(qke,"A",{href:!0});var Fbt=s(LQ);Zfr=r(Fbt,"TFTransfoXLLMHeadModel"),Fbt.forEach(t),emr=r(qke," (Transformer-XL model)"),qke.forEach(t),omr=i(le),V7=n(le,"LI",{});var Nke=s(V7);A1e=n(Nke,"STRONG",{});var Tbt=s(A1e);rmr=r(Tbt,"vit_mae"),Tbt.forEach(t),tmr=r(Nke," \u2014 "),xQ=n(Nke,"A",{href:!0});var Mbt=s(xQ);amr=r(Mbt,"TFViTMAEForPreTraining"),Mbt.forEach(t),nmr=r(Nke," (ViTMAE model)"),Nke.forEach(t),smr=i(le),X7=n(le,"LI",{});var jke=s(X7);y1e=n(jke,"STRONG",{});var Ebt=s(y1e);lmr=r(Ebt,"xlm"),Ebt.forEach(t),imr=r(jke," \u2014 "),$Q=n(jke,"A",{href:!0});var Cbt=s($Q);dmr=r(Cbt,"TFXLMWithLMHeadModel"),Cbt.forEach(t),cmr=r(jke," (XLM model)"),jke.forEach(t),fmr=i(le),z7=n(le,"LI",{});var Dke=s(z7);L1e=n(Dke,"STRONG",{});var wbt=s(L1e);mmr=r(wbt,"xlm-roberta"),wbt.forEach(t),gmr=r(Dke," \u2014 "),kQ=n(Dke,"A",{href:!0});var Abt=s(kQ);hmr=r(Abt,"TFXLMRobertaForMaskedLM"),Abt.forEach(t),pmr=r(Dke," (XLM-RoBERTa model)"),Dke.forEach(t),umr=i(le),Q7=n(le,"LI",{});var Gke=s(Q7);x1e=n(Gke,"STRONG",{});var ybt=s(x1e);_mr=r(ybt,"xlnet"),ybt.forEach(t),bmr=r(Gke," \u2014 "),SQ=n(Gke,"A",{href:!0});var Lbt=s(SQ);vmr=r(Lbt,"TFXLNetLMHeadModel"),Lbt.forEach(t),Fmr=r(Gke," (XLNet model)"),Gke.forEach(t),le.forEach(t),Tmr=i(gl),T(W7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),vqe=i(f),Xd=n(f,"H2",{class:!0});var wje=s(Xd);H7=n(wje,"A",{id:!0,class:!0,href:!0});var xbt=s(H7);$1e=n(xbt,"SPAN",{});var $bt=s($1e);T(WL.$$.fragment,$bt),$bt.forEach(t),xbt.forEach(t),Mmr=i(wje),k1e=n(wje,"SPAN",{});var kbt=s(k1e);Emr=r(kbt,"TFAutoModelForCausalLM"),kbt.forEach(t),wje.forEach(t),Fqe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(HL.$$.fragment,hl),Cmr=i(hl),zd=n(hl,"P",{});var _Z=s(zd);wmr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RQ=n(_Z,"A",{href:!0});var Sbt=s(RQ);Amr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),ymr=r(_Z," class method or the "),BQ=n(_Z,"A",{href:!0});var Rbt=s(BQ);Lmr=r(Rbt,"from_config()"),Rbt.forEach(t),xmr=r(_Z,` class
method.`),_Z.forEach(t),$mr=i(hl),UL=n(hl,"P",{});var Aje=s(UL);kmr=r(Aje,"This class cannot be instantiated directly using "),S1e=n(Aje,"CODE",{});var Bbt=s(S1e);Smr=r(Bbt,"__init__()"),Bbt.forEach(t),Rmr=r(Aje," (throws an error)."),Aje.forEach(t),Bmr=i(hl),yt=n(hl,"DIV",{class:!0});var a6=s(yt);T(JL.$$.fragment,a6),Pmr=i(a6),R1e=n(a6,"P",{});var Pbt=s(R1e);Imr=r(Pbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pbt.forEach(t),qmr=i(a6),Qd=n(a6,"P",{});var bZ=s(Qd);Nmr=r(bZ,`Note:
Loading a model from its configuration file does `),B1e=n(bZ,"STRONG",{});var Ibt=s(B1e);jmr=r(Ibt,"not"),Ibt.forEach(t),Dmr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(bZ,"A",{href:!0});var qbt=s(PQ);Gmr=r(qbt,"from_pretrained()"),qbt.forEach(t),Omr=r(bZ," to load the model weights."),bZ.forEach(t),Vmr=i(a6),T(U7.$$.fragment,a6),a6.forEach(t),Xmr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(YL.$$.fragment,pl),zmr=i(pl),P1e=n(pl,"P",{});var Nbt=s(P1e);Qmr=r(Nbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nbt.forEach(t),Wmr=i(pl),en=n(pl,"P",{});var n6=s(en);Hmr=r(n6,"The model class to instantiate is selected based on the "),I1e=n(n6,"CODE",{});var jbt=s(I1e);Umr=r(jbt,"model_type"),jbt.forEach(t),Jmr=r(n6,` property of the config object (either
passed as an argument or loaded from `),q1e=n(n6,"CODE",{});var Dbt=s(q1e);Ymr=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),Kmr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(n6,"CODE",{});var Gbt=s(N1e);Zmr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),egr=r(n6,":"),n6.forEach(t),ogr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);J7=n(Ce,"LI",{});var Oke=s(J7);j1e=n(Oke,"STRONG",{});var Obt=s(j1e);rgr=r(Obt,"bert"),Obt.forEach(t),tgr=r(Oke," \u2014 "),IQ=n(Oke,"A",{href:!0});var Vbt=s(IQ);agr=r(Vbt,"TFBertLMHeadModel"),Vbt.forEach(t),ngr=r(Oke," (BERT model)"),Oke.forEach(t),sgr=i(Ce),Y7=n(Ce,"LI",{});var Vke=s(Y7);D1e=n(Vke,"STRONG",{});var Xbt=s(D1e);lgr=r(Xbt,"camembert"),Xbt.forEach(t),igr=r(Vke," \u2014 "),qQ=n(Vke,"A",{href:!0});var zbt=s(qQ);dgr=r(zbt,"TFCamembertForCausalLM"),zbt.forEach(t),cgr=r(Vke," (CamemBERT model)"),Vke.forEach(t),fgr=i(Ce),K7=n(Ce,"LI",{});var Xke=s(K7);G1e=n(Xke,"STRONG",{});var Qbt=s(G1e);mgr=r(Qbt,"ctrl"),Qbt.forEach(t),ggr=r(Xke," \u2014 "),NQ=n(Xke,"A",{href:!0});var Wbt=s(NQ);hgr=r(Wbt,"TFCTRLLMHeadModel"),Wbt.forEach(t),pgr=r(Xke," (CTRL model)"),Xke.forEach(t),ugr=i(Ce),Z7=n(Ce,"LI",{});var zke=s(Z7);O1e=n(zke,"STRONG",{});var Hbt=s(O1e);_gr=r(Hbt,"gpt2"),Hbt.forEach(t),bgr=r(zke," \u2014 "),jQ=n(zke,"A",{href:!0});var Ubt=s(jQ);vgr=r(Ubt,"TFGPT2LMHeadModel"),Ubt.forEach(t),Fgr=r(zke," (OpenAI GPT-2 model)"),zke.forEach(t),Tgr=i(Ce),eM=n(Ce,"LI",{});var Qke=s(eM);V1e=n(Qke,"STRONG",{});var Jbt=s(V1e);Mgr=r(Jbt,"gptj"),Jbt.forEach(t),Egr=r(Qke," \u2014 "),DQ=n(Qke,"A",{href:!0});var Ybt=s(DQ);Cgr=r(Ybt,"TFGPTJForCausalLM"),Ybt.forEach(t),wgr=r(Qke," (GPT-J model)"),Qke.forEach(t),Agr=i(Ce),oM=n(Ce,"LI",{});var Wke=s(oM);X1e=n(Wke,"STRONG",{});var Kbt=s(X1e);ygr=r(Kbt,"openai-gpt"),Kbt.forEach(t),Lgr=r(Wke," \u2014 "),GQ=n(Wke,"A",{href:!0});var Zbt=s(GQ);xgr=r(Zbt,"TFOpenAIGPTLMHeadModel"),Zbt.forEach(t),$gr=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),kgr=i(Ce),rM=n(Ce,"LI",{});var Hke=s(rM);z1e=n(Hke,"STRONG",{});var evt=s(z1e);Sgr=r(evt,"rembert"),evt.forEach(t),Rgr=r(Hke," \u2014 "),OQ=n(Hke,"A",{href:!0});var ovt=s(OQ);Bgr=r(ovt,"TFRemBertForCausalLM"),ovt.forEach(t),Pgr=r(Hke," (RemBERT model)"),Hke.forEach(t),Igr=i(Ce),tM=n(Ce,"LI",{});var Uke=s(tM);Q1e=n(Uke,"STRONG",{});var rvt=s(Q1e);qgr=r(rvt,"roberta"),rvt.forEach(t),Ngr=r(Uke," \u2014 "),VQ=n(Uke,"A",{href:!0});var tvt=s(VQ);jgr=r(tvt,"TFRobertaForCausalLM"),tvt.forEach(t),Dgr=r(Uke," (RoBERTa model)"),Uke.forEach(t),Ggr=i(Ce),aM=n(Ce,"LI",{});var Jke=s(aM);W1e=n(Jke,"STRONG",{});var avt=s(W1e);Ogr=r(avt,"roformer"),avt.forEach(t),Vgr=r(Jke," \u2014 "),XQ=n(Jke,"A",{href:!0});var nvt=s(XQ);Xgr=r(nvt,"TFRoFormerForCausalLM"),nvt.forEach(t),zgr=r(Jke," (RoFormer model)"),Jke.forEach(t),Qgr=i(Ce),nM=n(Ce,"LI",{});var Yke=s(nM);H1e=n(Yke,"STRONG",{});var svt=s(H1e);Wgr=r(svt,"transfo-xl"),svt.forEach(t),Hgr=r(Yke," \u2014 "),zQ=n(Yke,"A",{href:!0});var lvt=s(zQ);Ugr=r(lvt,"TFTransfoXLLMHeadModel"),lvt.forEach(t),Jgr=r(Yke," (Transformer-XL model)"),Yke.forEach(t),Ygr=i(Ce),sM=n(Ce,"LI",{});var Kke=s(sM);U1e=n(Kke,"STRONG",{});var ivt=s(U1e);Kgr=r(ivt,"xlm"),ivt.forEach(t),Zgr=r(Kke," \u2014 "),QQ=n(Kke,"A",{href:!0});var dvt=s(QQ);ehr=r(dvt,"TFXLMWithLMHeadModel"),dvt.forEach(t),ohr=r(Kke," (XLM model)"),Kke.forEach(t),rhr=i(Ce),lM=n(Ce,"LI",{});var Zke=s(lM);J1e=n(Zke,"STRONG",{});var cvt=s(J1e);thr=r(cvt,"xlnet"),cvt.forEach(t),ahr=r(Zke," \u2014 "),WQ=n(Zke,"A",{href:!0});var fvt=s(WQ);nhr=r(fvt,"TFXLNetLMHeadModel"),fvt.forEach(t),shr=r(Zke," (XLNet model)"),Zke.forEach(t),Ce.forEach(t),lhr=i(pl),T(iM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Tqe=i(f),Wd=n(f,"H2",{class:!0});var yje=s(Wd);dM=n(yje,"A",{id:!0,class:!0,href:!0});var mvt=s(dM);Y1e=n(mvt,"SPAN",{});var gvt=s(Y1e);T(KL.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),ihr=i(yje),K1e=n(yje,"SPAN",{});var hvt=s(K1e);dhr=r(hvt,"TFAutoModelForImageClassification"),hvt.forEach(t),yje.forEach(t),Mqe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(ZL.$$.fragment,ul),chr=i(ul),Hd=n(ul,"P",{});var vZ=s(Hd);fhr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=n(vZ,"A",{href:!0});var pvt=s(HQ);mhr=r(pvt,"from_pretrained()"),pvt.forEach(t),ghr=r(vZ," class method or the "),UQ=n(vZ,"A",{href:!0});var uvt=s(UQ);hhr=r(uvt,"from_config()"),uvt.forEach(t),phr=r(vZ,` class
method.`),vZ.forEach(t),uhr=i(ul),e8=n(ul,"P",{});var Lje=s(e8);_hr=r(Lje,"This class cannot be instantiated directly using "),Z1e=n(Lje,"CODE",{});var _vt=s(Z1e);bhr=r(_vt,"__init__()"),_vt.forEach(t),vhr=r(Lje," (throws an error)."),Lje.forEach(t),Fhr=i(ul),Lt=n(ul,"DIV",{class:!0});var s6=s(Lt);T(o8.$$.fragment,s6),Thr=i(s6),ebe=n(s6,"P",{});var bvt=s(ebe);Mhr=r(bvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bvt.forEach(t),Ehr=i(s6),Ud=n(s6,"P",{});var FZ=s(Ud);Chr=r(FZ,`Note:
Loading a model from its configuration file does `),obe=n(FZ,"STRONG",{});var vvt=s(obe);whr=r(vvt,"not"),vvt.forEach(t),Ahr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(FZ,"A",{href:!0});var Fvt=s(JQ);yhr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),Lhr=r(FZ," to load the model weights."),FZ.forEach(t),xhr=i(s6),T(cM.$$.fragment,s6),s6.forEach(t),$hr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(r8.$$.fragment,_l),khr=i(_l),rbe=n(_l,"P",{});var Tvt=s(rbe);Shr=r(Tvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tvt.forEach(t),Rhr=i(_l),on=n(_l,"P",{});var l6=s(on);Bhr=r(l6,"The model class to instantiate is selected based on the "),tbe=n(l6,"CODE",{});var Mvt=s(tbe);Phr=r(Mvt,"model_type"),Mvt.forEach(t),Ihr=r(l6,` property of the config object (either
passed as an argument or loaded from `),abe=n(l6,"CODE",{});var Evt=s(abe);qhr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),Nhr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(l6,"CODE",{});var Cvt=s(nbe);jhr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),Dhr=r(l6,":"),l6.forEach(t),Ghr=i(_l),Jd=n(_l,"UL",{});var TZ=s(Jd);fM=n(TZ,"LI",{});var eSe=s(fM);sbe=n(eSe,"STRONG",{});var wvt=s(sbe);Ohr=r(wvt,"convnext"),wvt.forEach(t),Vhr=r(eSe," \u2014 "),YQ=n(eSe,"A",{href:!0});var Avt=s(YQ);Xhr=r(Avt,"TFConvNextForImageClassification"),Avt.forEach(t),zhr=r(eSe," (ConvNext model)"),eSe.forEach(t),Qhr=i(TZ),mM=n(TZ,"LI",{});var oSe=s(mM);lbe=n(oSe,"STRONG",{});var yvt=s(lbe);Whr=r(yvt,"data2vec-vision"),yvt.forEach(t),Hhr=r(oSe," \u2014 "),KQ=n(oSe,"A",{href:!0});var Lvt=s(KQ);Uhr=r(Lvt,"TFData2VecVisionForImageClassification"),Lvt.forEach(t),Jhr=r(oSe," (Data2VecVision model)"),oSe.forEach(t),Yhr=i(TZ),gM=n(TZ,"LI",{});var rSe=s(gM);ibe=n(rSe,"STRONG",{});var xvt=s(ibe);Khr=r(xvt,"vit"),xvt.forEach(t),Zhr=r(rSe," \u2014 "),ZQ=n(rSe,"A",{href:!0});var $vt=s(ZQ);epr=r($vt,"TFViTForImageClassification"),$vt.forEach(t),opr=r(rSe," (ViT model)"),rSe.forEach(t),TZ.forEach(t),rpr=i(_l),T(hM.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Eqe=i(f),Yd=n(f,"H2",{class:!0});var xje=s(Yd);pM=n(xje,"A",{id:!0,class:!0,href:!0});var kvt=s(pM);dbe=n(kvt,"SPAN",{});var Svt=s(dbe);T(t8.$$.fragment,Svt),Svt.forEach(t),kvt.forEach(t),tpr=i(xje),cbe=n(xje,"SPAN",{});var Rvt=s(cbe);apr=r(Rvt,"TFAutoModelForMaskedLM"),Rvt.forEach(t),xje.forEach(t),Cqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(a8.$$.fragment,bl),npr=i(bl),Kd=n(bl,"P",{});var MZ=s(Kd);spr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eW=n(MZ,"A",{href:!0});var Bvt=s(eW);lpr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),ipr=r(MZ," class method or the "),oW=n(MZ,"A",{href:!0});var Pvt=s(oW);dpr=r(Pvt,"from_config()"),Pvt.forEach(t),cpr=r(MZ,` class
method.`),MZ.forEach(t),fpr=i(bl),n8=n(bl,"P",{});var $je=s(n8);mpr=r($je,"This class cannot be instantiated directly using "),fbe=n($je,"CODE",{});var Ivt=s(fbe);gpr=r(Ivt,"__init__()"),Ivt.forEach(t),hpr=r($je," (throws an error)."),$je.forEach(t),ppr=i(bl),xt=n(bl,"DIV",{class:!0});var i6=s(xt);T(s8.$$.fragment,i6),upr=i(i6),mbe=n(i6,"P",{});var qvt=s(mbe);_pr=r(qvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qvt.forEach(t),bpr=i(i6),Zd=n(i6,"P",{});var EZ=s(Zd);vpr=r(EZ,`Note:
Loading a model from its configuration file does `),gbe=n(EZ,"STRONG",{});var Nvt=s(gbe);Fpr=r(Nvt,"not"),Nvt.forEach(t),Tpr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(EZ,"A",{href:!0});var jvt=s(rW);Mpr=r(jvt,"from_pretrained()"),jvt.forEach(t),Epr=r(EZ," to load the model weights."),EZ.forEach(t),Cpr=i(i6),T(uM.$$.fragment,i6),i6.forEach(t),wpr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(l8.$$.fragment,vl),Apr=i(vl),hbe=n(vl,"P",{});var Dvt=s(hbe);ypr=r(Dvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dvt.forEach(t),Lpr=i(vl),rn=n(vl,"P",{});var d6=s(rn);xpr=r(d6,"The model class to instantiate is selected based on the "),pbe=n(d6,"CODE",{});var Gvt=s(pbe);$pr=r(Gvt,"model_type"),Gvt.forEach(t),kpr=r(d6,` property of the config object (either
passed as an argument or loaded from `),ube=n(d6,"CODE",{});var Ovt=s(ube);Spr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),Rpr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(d6,"CODE",{});var Vvt=s(_be);Bpr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),Ppr=r(d6,":"),d6.forEach(t),Ipr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);_M=n(fe,"LI",{});var tSe=s(_M);bbe=n(tSe,"STRONG",{});var Xvt=s(bbe);qpr=r(Xvt,"albert"),Xvt.forEach(t),Npr=r(tSe," \u2014 "),tW=n(tSe,"A",{href:!0});var zvt=s(tW);jpr=r(zvt,"TFAlbertForMaskedLM"),zvt.forEach(t),Dpr=r(tSe," (ALBERT model)"),tSe.forEach(t),Gpr=i(fe),bM=n(fe,"LI",{});var aSe=s(bM);vbe=n(aSe,"STRONG",{});var Qvt=s(vbe);Opr=r(Qvt,"bert"),Qvt.forEach(t),Vpr=r(aSe," \u2014 "),aW=n(aSe,"A",{href:!0});var Wvt=s(aW);Xpr=r(Wvt,"TFBertForMaskedLM"),Wvt.forEach(t),zpr=r(aSe," (BERT model)"),aSe.forEach(t),Qpr=i(fe),vM=n(fe,"LI",{});var nSe=s(vM);Fbe=n(nSe,"STRONG",{});var Hvt=s(Fbe);Wpr=r(Hvt,"camembert"),Hvt.forEach(t),Hpr=r(nSe," \u2014 "),nW=n(nSe,"A",{href:!0});var Uvt=s(nW);Upr=r(Uvt,"TFCamembertForMaskedLM"),Uvt.forEach(t),Jpr=r(nSe," (CamemBERT model)"),nSe.forEach(t),Ypr=i(fe),FM=n(fe,"LI",{});var sSe=s(FM);Tbe=n(sSe,"STRONG",{});var Jvt=s(Tbe);Kpr=r(Jvt,"convbert"),Jvt.forEach(t),Zpr=r(sSe," \u2014 "),sW=n(sSe,"A",{href:!0});var Yvt=s(sW);eur=r(Yvt,"TFConvBertForMaskedLM"),Yvt.forEach(t),our=r(sSe," (ConvBERT model)"),sSe.forEach(t),rur=i(fe),TM=n(fe,"LI",{});var lSe=s(TM);Mbe=n(lSe,"STRONG",{});var Kvt=s(Mbe);tur=r(Kvt,"deberta"),Kvt.forEach(t),aur=r(lSe," \u2014 "),lW=n(lSe,"A",{href:!0});var Zvt=s(lW);nur=r(Zvt,"TFDebertaForMaskedLM"),Zvt.forEach(t),sur=r(lSe," (DeBERTa model)"),lSe.forEach(t),lur=i(fe),MM=n(fe,"LI",{});var iSe=s(MM);Ebe=n(iSe,"STRONG",{});var eFt=s(Ebe);iur=r(eFt,"deberta-v2"),eFt.forEach(t),dur=r(iSe," \u2014 "),iW=n(iSe,"A",{href:!0});var oFt=s(iW);cur=r(oFt,"TFDebertaV2ForMaskedLM"),oFt.forEach(t),fur=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),mur=i(fe),EM=n(fe,"LI",{});var dSe=s(EM);Cbe=n(dSe,"STRONG",{});var rFt=s(Cbe);gur=r(rFt,"distilbert"),rFt.forEach(t),hur=r(dSe," \u2014 "),dW=n(dSe,"A",{href:!0});var tFt=s(dW);pur=r(tFt,"TFDistilBertForMaskedLM"),tFt.forEach(t),uur=r(dSe," (DistilBERT model)"),dSe.forEach(t),_ur=i(fe),CM=n(fe,"LI",{});var cSe=s(CM);wbe=n(cSe,"STRONG",{});var aFt=s(wbe);bur=r(aFt,"electra"),aFt.forEach(t),vur=r(cSe," \u2014 "),cW=n(cSe,"A",{href:!0});var nFt=s(cW);Fur=r(nFt,"TFElectraForMaskedLM"),nFt.forEach(t),Tur=r(cSe," (ELECTRA model)"),cSe.forEach(t),Mur=i(fe),wM=n(fe,"LI",{});var fSe=s(wM);Abe=n(fSe,"STRONG",{});var sFt=s(Abe);Eur=r(sFt,"flaubert"),sFt.forEach(t),Cur=r(fSe," \u2014 "),fW=n(fSe,"A",{href:!0});var lFt=s(fW);wur=r(lFt,"TFFlaubertWithLMHeadModel"),lFt.forEach(t),Aur=r(fSe," (FlauBERT model)"),fSe.forEach(t),yur=i(fe),AM=n(fe,"LI",{});var mSe=s(AM);ybe=n(mSe,"STRONG",{});var iFt=s(ybe);Lur=r(iFt,"funnel"),iFt.forEach(t),xur=r(mSe," \u2014 "),mW=n(mSe,"A",{href:!0});var dFt=s(mW);$ur=r(dFt,"TFFunnelForMaskedLM"),dFt.forEach(t),kur=r(mSe," (Funnel Transformer model)"),mSe.forEach(t),Sur=i(fe),yM=n(fe,"LI",{});var gSe=s(yM);Lbe=n(gSe,"STRONG",{});var cFt=s(Lbe);Rur=r(cFt,"layoutlm"),cFt.forEach(t),Bur=r(gSe," \u2014 "),gW=n(gSe,"A",{href:!0});var fFt=s(gW);Pur=r(fFt,"TFLayoutLMForMaskedLM"),fFt.forEach(t),Iur=r(gSe," (LayoutLM model)"),gSe.forEach(t),qur=i(fe),LM=n(fe,"LI",{});var hSe=s(LM);xbe=n(hSe,"STRONG",{});var mFt=s(xbe);Nur=r(mFt,"longformer"),mFt.forEach(t),jur=r(hSe," \u2014 "),hW=n(hSe,"A",{href:!0});var gFt=s(hW);Dur=r(gFt,"TFLongformerForMaskedLM"),gFt.forEach(t),Gur=r(hSe," (Longformer model)"),hSe.forEach(t),Our=i(fe),xM=n(fe,"LI",{});var pSe=s(xM);$be=n(pSe,"STRONG",{});var hFt=s($be);Vur=r(hFt,"mobilebert"),hFt.forEach(t),Xur=r(pSe," \u2014 "),pW=n(pSe,"A",{href:!0});var pFt=s(pW);zur=r(pFt,"TFMobileBertForMaskedLM"),pFt.forEach(t),Qur=r(pSe," (MobileBERT model)"),pSe.forEach(t),Wur=i(fe),$M=n(fe,"LI",{});var uSe=s($M);kbe=n(uSe,"STRONG",{});var uFt=s(kbe);Hur=r(uFt,"mpnet"),uFt.forEach(t),Uur=r(uSe," \u2014 "),uW=n(uSe,"A",{href:!0});var _Ft=s(uW);Jur=r(_Ft,"TFMPNetForMaskedLM"),_Ft.forEach(t),Yur=r(uSe," (MPNet model)"),uSe.forEach(t),Kur=i(fe),kM=n(fe,"LI",{});var _Se=s(kM);Sbe=n(_Se,"STRONG",{});var bFt=s(Sbe);Zur=r(bFt,"rembert"),bFt.forEach(t),e_r=r(_Se," \u2014 "),_W=n(_Se,"A",{href:!0});var vFt=s(_W);o_r=r(vFt,"TFRemBertForMaskedLM"),vFt.forEach(t),r_r=r(_Se," (RemBERT model)"),_Se.forEach(t),t_r=i(fe),SM=n(fe,"LI",{});var bSe=s(SM);Rbe=n(bSe,"STRONG",{});var FFt=s(Rbe);a_r=r(FFt,"roberta"),FFt.forEach(t),n_r=r(bSe," \u2014 "),bW=n(bSe,"A",{href:!0});var TFt=s(bW);s_r=r(TFt,"TFRobertaForMaskedLM"),TFt.forEach(t),l_r=r(bSe," (RoBERTa model)"),bSe.forEach(t),i_r=i(fe),RM=n(fe,"LI",{});var vSe=s(RM);Bbe=n(vSe,"STRONG",{});var MFt=s(Bbe);d_r=r(MFt,"roformer"),MFt.forEach(t),c_r=r(vSe," \u2014 "),vW=n(vSe,"A",{href:!0});var EFt=s(vW);f_r=r(EFt,"TFRoFormerForMaskedLM"),EFt.forEach(t),m_r=r(vSe," (RoFormer model)"),vSe.forEach(t),g_r=i(fe),BM=n(fe,"LI",{});var FSe=s(BM);Pbe=n(FSe,"STRONG",{});var CFt=s(Pbe);h_r=r(CFt,"tapas"),CFt.forEach(t),p_r=r(FSe," \u2014 "),FW=n(FSe,"A",{href:!0});var wFt=s(FW);u_r=r(wFt,"TFTapasForMaskedLM"),wFt.forEach(t),__r=r(FSe," (TAPAS model)"),FSe.forEach(t),b_r=i(fe),PM=n(fe,"LI",{});var TSe=s(PM);Ibe=n(TSe,"STRONG",{});var AFt=s(Ibe);v_r=r(AFt,"xlm"),AFt.forEach(t),F_r=r(TSe," \u2014 "),TW=n(TSe,"A",{href:!0});var yFt=s(TW);T_r=r(yFt,"TFXLMWithLMHeadModel"),yFt.forEach(t),M_r=r(TSe," (XLM model)"),TSe.forEach(t),E_r=i(fe),IM=n(fe,"LI",{});var MSe=s(IM);qbe=n(MSe,"STRONG",{});var LFt=s(qbe);C_r=r(LFt,"xlm-roberta"),LFt.forEach(t),w_r=r(MSe," \u2014 "),MW=n(MSe,"A",{href:!0});var xFt=s(MW);A_r=r(xFt,"TFXLMRobertaForMaskedLM"),xFt.forEach(t),y_r=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),fe.forEach(t),L_r=i(vl),T(qM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),wqe=i(f),ec=n(f,"H2",{class:!0});var kje=s(ec);NM=n(kje,"A",{id:!0,class:!0,href:!0});var $Ft=s(NM);Nbe=n($Ft,"SPAN",{});var kFt=s(Nbe);T(i8.$$.fragment,kFt),kFt.forEach(t),$Ft.forEach(t),x_r=i(kje),jbe=n(kje,"SPAN",{});var SFt=s(jbe);$_r=r(SFt,"TFAutoModelForSeq2SeqLM"),SFt.forEach(t),kje.forEach(t),Aqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(d8.$$.fragment,Fl),k_r=i(Fl),oc=n(Fl,"P",{});var CZ=s(oc);S_r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EW=n(CZ,"A",{href:!0});var RFt=s(EW);R_r=r(RFt,"from_pretrained()"),RFt.forEach(t),B_r=r(CZ," class method or the "),CW=n(CZ,"A",{href:!0});var BFt=s(CW);P_r=r(BFt,"from_config()"),BFt.forEach(t),I_r=r(CZ,` class
method.`),CZ.forEach(t),q_r=i(Fl),c8=n(Fl,"P",{});var Sje=s(c8);N_r=r(Sje,"This class cannot be instantiated directly using "),Dbe=n(Sje,"CODE",{});var PFt=s(Dbe);j_r=r(PFt,"__init__()"),PFt.forEach(t),D_r=r(Sje," (throws an error)."),Sje.forEach(t),G_r=i(Fl),$t=n(Fl,"DIV",{class:!0});var c6=s($t);T(f8.$$.fragment,c6),O_r=i(c6),Gbe=n(c6,"P",{});var IFt=s(Gbe);V_r=r(IFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IFt.forEach(t),X_r=i(c6),rc=n(c6,"P",{});var wZ=s(rc);z_r=r(wZ,`Note:
Loading a model from its configuration file does `),Obe=n(wZ,"STRONG",{});var qFt=s(Obe);Q_r=r(qFt,"not"),qFt.forEach(t),W_r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(wZ,"A",{href:!0});var NFt=s(wW);H_r=r(NFt,"from_pretrained()"),NFt.forEach(t),U_r=r(wZ," to load the model weights."),wZ.forEach(t),J_r=i(c6),T(jM.$$.fragment,c6),c6.forEach(t),Y_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(m8.$$.fragment,Tl),K_r=i(Tl),Vbe=n(Tl,"P",{});var jFt=s(Vbe);Z_r=r(jFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jFt.forEach(t),e2r=i(Tl),tn=n(Tl,"P",{});var f6=s(tn);o2r=r(f6,"The model class to instantiate is selected based on the "),Xbe=n(f6,"CODE",{});var DFt=s(Xbe);r2r=r(DFt,"model_type"),DFt.forEach(t),t2r=r(f6,` property of the config object (either
passed as an argument or loaded from `),zbe=n(f6,"CODE",{});var GFt=s(zbe);a2r=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),n2r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(f6,"CODE",{});var OFt=s(Qbe);s2r=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),l2r=r(f6,":"),f6.forEach(t),i2r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);DM=n(Re,"LI",{});var ESe=s(DM);Wbe=n(ESe,"STRONG",{});var VFt=s(Wbe);d2r=r(VFt,"bart"),VFt.forEach(t),c2r=r(ESe," \u2014 "),AW=n(ESe,"A",{href:!0});var XFt=s(AW);f2r=r(XFt,"TFBartForConditionalGeneration"),XFt.forEach(t),m2r=r(ESe," (BART model)"),ESe.forEach(t),g2r=i(Re),GM=n(Re,"LI",{});var CSe=s(GM);Hbe=n(CSe,"STRONG",{});var zFt=s(Hbe);h2r=r(zFt,"blenderbot"),zFt.forEach(t),p2r=r(CSe," \u2014 "),yW=n(CSe,"A",{href:!0});var QFt=s(yW);u2r=r(QFt,"TFBlenderbotForConditionalGeneration"),QFt.forEach(t),_2r=r(CSe," (Blenderbot model)"),CSe.forEach(t),b2r=i(Re),OM=n(Re,"LI",{});var wSe=s(OM);Ube=n(wSe,"STRONG",{});var WFt=s(Ube);v2r=r(WFt,"blenderbot-small"),WFt.forEach(t),F2r=r(wSe," \u2014 "),LW=n(wSe,"A",{href:!0});var HFt=s(LW);T2r=r(HFt,"TFBlenderbotSmallForConditionalGeneration"),HFt.forEach(t),M2r=r(wSe," (BlenderbotSmall model)"),wSe.forEach(t),E2r=i(Re),VM=n(Re,"LI",{});var ASe=s(VM);Jbe=n(ASe,"STRONG",{});var UFt=s(Jbe);C2r=r(UFt,"encoder-decoder"),UFt.forEach(t),w2r=r(ASe," \u2014 "),xW=n(ASe,"A",{href:!0});var JFt=s(xW);A2r=r(JFt,"TFEncoderDecoderModel"),JFt.forEach(t),y2r=r(ASe," (Encoder decoder model)"),ASe.forEach(t),L2r=i(Re),XM=n(Re,"LI",{});var ySe=s(XM);Ybe=n(ySe,"STRONG",{});var YFt=s(Ybe);x2r=r(YFt,"led"),YFt.forEach(t),$2r=r(ySe," \u2014 "),$W=n(ySe,"A",{href:!0});var KFt=s($W);k2r=r(KFt,"TFLEDForConditionalGeneration"),KFt.forEach(t),S2r=r(ySe," (LED model)"),ySe.forEach(t),R2r=i(Re),zM=n(Re,"LI",{});var LSe=s(zM);Kbe=n(LSe,"STRONG",{});var ZFt=s(Kbe);B2r=r(ZFt,"marian"),ZFt.forEach(t),P2r=r(LSe," \u2014 "),kW=n(LSe,"A",{href:!0});var e0t=s(kW);I2r=r(e0t,"TFMarianMTModel"),e0t.forEach(t),q2r=r(LSe," (Marian model)"),LSe.forEach(t),N2r=i(Re),QM=n(Re,"LI",{});var xSe=s(QM);Zbe=n(xSe,"STRONG",{});var o0t=s(Zbe);j2r=r(o0t,"mbart"),o0t.forEach(t),D2r=r(xSe," \u2014 "),SW=n(xSe,"A",{href:!0});var r0t=s(SW);G2r=r(r0t,"TFMBartForConditionalGeneration"),r0t.forEach(t),O2r=r(xSe," (mBART model)"),xSe.forEach(t),V2r=i(Re),WM=n(Re,"LI",{});var $Se=s(WM);eve=n($Se,"STRONG",{});var t0t=s(eve);X2r=r(t0t,"mt5"),t0t.forEach(t),z2r=r($Se," \u2014 "),RW=n($Se,"A",{href:!0});var a0t=s(RW);Q2r=r(a0t,"TFMT5ForConditionalGeneration"),a0t.forEach(t),W2r=r($Se," (mT5 model)"),$Se.forEach(t),H2r=i(Re),HM=n(Re,"LI",{});var kSe=s(HM);ove=n(kSe,"STRONG",{});var n0t=s(ove);U2r=r(n0t,"pegasus"),n0t.forEach(t),J2r=r(kSe," \u2014 "),BW=n(kSe,"A",{href:!0});var s0t=s(BW);Y2r=r(s0t,"TFPegasusForConditionalGeneration"),s0t.forEach(t),K2r=r(kSe," (Pegasus model)"),kSe.forEach(t),Z2r=i(Re),UM=n(Re,"LI",{});var SSe=s(UM);rve=n(SSe,"STRONG",{});var l0t=s(rve);e1r=r(l0t,"t5"),l0t.forEach(t),o1r=r(SSe," \u2014 "),PW=n(SSe,"A",{href:!0});var i0t=s(PW);r1r=r(i0t,"TFT5ForConditionalGeneration"),i0t.forEach(t),t1r=r(SSe," (T5 model)"),SSe.forEach(t),Re.forEach(t),a1r=i(Tl),T(JM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),yqe=i(f),tc=n(f,"H2",{class:!0});var Rje=s(tc);YM=n(Rje,"A",{id:!0,class:!0,href:!0});var d0t=s(YM);tve=n(d0t,"SPAN",{});var c0t=s(tve);T(g8.$$.fragment,c0t),c0t.forEach(t),d0t.forEach(t),n1r=i(Rje),ave=n(Rje,"SPAN",{});var f0t=s(ave);s1r=r(f0t,"TFAutoModelForSequenceClassification"),f0t.forEach(t),Rje.forEach(t),Lqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(h8.$$.fragment,Ml),l1r=i(Ml),ac=n(Ml,"P",{});var AZ=s(ac);i1r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IW=n(AZ,"A",{href:!0});var m0t=s(IW);d1r=r(m0t,"from_pretrained()"),m0t.forEach(t),c1r=r(AZ," class method or the "),qW=n(AZ,"A",{href:!0});var g0t=s(qW);f1r=r(g0t,"from_config()"),g0t.forEach(t),m1r=r(AZ,` class
method.`),AZ.forEach(t),g1r=i(Ml),p8=n(Ml,"P",{});var Bje=s(p8);h1r=r(Bje,"This class cannot be instantiated directly using "),nve=n(Bje,"CODE",{});var h0t=s(nve);p1r=r(h0t,"__init__()"),h0t.forEach(t),u1r=r(Bje," (throws an error)."),Bje.forEach(t),_1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var m6=s(kt);T(u8.$$.fragment,m6),b1r=i(m6),sve=n(m6,"P",{});var p0t=s(sve);v1r=r(p0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p0t.forEach(t),F1r=i(m6),nc=n(m6,"P",{});var yZ=s(nc);T1r=r(yZ,`Note:
Loading a model from its configuration file does `),lve=n(yZ,"STRONG",{});var u0t=s(lve);M1r=r(u0t,"not"),u0t.forEach(t),E1r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(yZ,"A",{href:!0});var _0t=s(NW);C1r=r(_0t,"from_pretrained()"),_0t.forEach(t),w1r=r(yZ," to load the model weights."),yZ.forEach(t),A1r=i(m6),T(KM.$$.fragment,m6),m6.forEach(t),y1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(_8.$$.fragment,El),L1r=i(El),ive=n(El,"P",{});var b0t=s(ive);x1r=r(b0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b0t.forEach(t),$1r=i(El),an=n(El,"P",{});var g6=s(an);k1r=r(g6,"The model class to instantiate is selected based on the "),dve=n(g6,"CODE",{});var v0t=s(dve);S1r=r(v0t,"model_type"),v0t.forEach(t),R1r=r(g6,` property of the config object (either
passed as an argument or loaded from `),cve=n(g6,"CODE",{});var F0t=s(cve);B1r=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),P1r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(g6,"CODE",{});var T0t=s(fve);I1r=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),q1r=r(g6,":"),g6.forEach(t),N1r=i(El),Z=n(El,"UL",{});var te=s(Z);ZM=n(te,"LI",{});var RSe=s(ZM);mve=n(RSe,"STRONG",{});var M0t=s(mve);j1r=r(M0t,"albert"),M0t.forEach(t),D1r=r(RSe," \u2014 "),jW=n(RSe,"A",{href:!0});var E0t=s(jW);G1r=r(E0t,"TFAlbertForSequenceClassification"),E0t.forEach(t),O1r=r(RSe," (ALBERT model)"),RSe.forEach(t),V1r=i(te),e4=n(te,"LI",{});var BSe=s(e4);gve=n(BSe,"STRONG",{});var C0t=s(gve);X1r=r(C0t,"bert"),C0t.forEach(t),z1r=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var w0t=s(DW);Q1r=r(w0t,"TFBertForSequenceClassification"),w0t.forEach(t),W1r=r(BSe," (BERT model)"),BSe.forEach(t),H1r=i(te),o4=n(te,"LI",{});var PSe=s(o4);hve=n(PSe,"STRONG",{});var A0t=s(hve);U1r=r(A0t,"camembert"),A0t.forEach(t),J1r=r(PSe," \u2014 "),GW=n(PSe,"A",{href:!0});var y0t=s(GW);Y1r=r(y0t,"TFCamembertForSequenceClassification"),y0t.forEach(t),K1r=r(PSe," (CamemBERT model)"),PSe.forEach(t),Z1r=i(te),r4=n(te,"LI",{});var ISe=s(r4);pve=n(ISe,"STRONG",{});var L0t=s(pve);ebr=r(L0t,"convbert"),L0t.forEach(t),obr=r(ISe," \u2014 "),OW=n(ISe,"A",{href:!0});var x0t=s(OW);rbr=r(x0t,"TFConvBertForSequenceClassification"),x0t.forEach(t),tbr=r(ISe," (ConvBERT model)"),ISe.forEach(t),abr=i(te),t4=n(te,"LI",{});var qSe=s(t4);uve=n(qSe,"STRONG",{});var $0t=s(uve);nbr=r($0t,"ctrl"),$0t.forEach(t),sbr=r(qSe," \u2014 "),VW=n(qSe,"A",{href:!0});var k0t=s(VW);lbr=r(k0t,"TFCTRLForSequenceClassification"),k0t.forEach(t),ibr=r(qSe," (CTRL model)"),qSe.forEach(t),dbr=i(te),a4=n(te,"LI",{});var NSe=s(a4);_ve=n(NSe,"STRONG",{});var S0t=s(_ve);cbr=r(S0t,"deberta"),S0t.forEach(t),fbr=r(NSe," \u2014 "),XW=n(NSe,"A",{href:!0});var R0t=s(XW);mbr=r(R0t,"TFDebertaForSequenceClassification"),R0t.forEach(t),gbr=r(NSe," (DeBERTa model)"),NSe.forEach(t),hbr=i(te),n4=n(te,"LI",{});var jSe=s(n4);bve=n(jSe,"STRONG",{});var B0t=s(bve);pbr=r(B0t,"deberta-v2"),B0t.forEach(t),ubr=r(jSe," \u2014 "),zW=n(jSe,"A",{href:!0});var P0t=s(zW);_br=r(P0t,"TFDebertaV2ForSequenceClassification"),P0t.forEach(t),bbr=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),vbr=i(te),s4=n(te,"LI",{});var DSe=s(s4);vve=n(DSe,"STRONG",{});var I0t=s(vve);Fbr=r(I0t,"distilbert"),I0t.forEach(t),Tbr=r(DSe," \u2014 "),QW=n(DSe,"A",{href:!0});var q0t=s(QW);Mbr=r(q0t,"TFDistilBertForSequenceClassification"),q0t.forEach(t),Ebr=r(DSe," (DistilBERT model)"),DSe.forEach(t),Cbr=i(te),l4=n(te,"LI",{});var GSe=s(l4);Fve=n(GSe,"STRONG",{});var N0t=s(Fve);wbr=r(N0t,"electra"),N0t.forEach(t),Abr=r(GSe," \u2014 "),WW=n(GSe,"A",{href:!0});var j0t=s(WW);ybr=r(j0t,"TFElectraForSequenceClassification"),j0t.forEach(t),Lbr=r(GSe," (ELECTRA model)"),GSe.forEach(t),xbr=i(te),i4=n(te,"LI",{});var OSe=s(i4);Tve=n(OSe,"STRONG",{});var D0t=s(Tve);$br=r(D0t,"flaubert"),D0t.forEach(t),kbr=r(OSe," \u2014 "),HW=n(OSe,"A",{href:!0});var G0t=s(HW);Sbr=r(G0t,"TFFlaubertForSequenceClassification"),G0t.forEach(t),Rbr=r(OSe," (FlauBERT model)"),OSe.forEach(t),Bbr=i(te),d4=n(te,"LI",{});var VSe=s(d4);Mve=n(VSe,"STRONG",{});var O0t=s(Mve);Pbr=r(O0t,"funnel"),O0t.forEach(t),Ibr=r(VSe," \u2014 "),UW=n(VSe,"A",{href:!0});var V0t=s(UW);qbr=r(V0t,"TFFunnelForSequenceClassification"),V0t.forEach(t),Nbr=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),jbr=i(te),c4=n(te,"LI",{});var XSe=s(c4);Eve=n(XSe,"STRONG",{});var X0t=s(Eve);Dbr=r(X0t,"gpt2"),X0t.forEach(t),Gbr=r(XSe," \u2014 "),JW=n(XSe,"A",{href:!0});var z0t=s(JW);Obr=r(z0t,"TFGPT2ForSequenceClassification"),z0t.forEach(t),Vbr=r(XSe," (OpenAI GPT-2 model)"),XSe.forEach(t),Xbr=i(te),f4=n(te,"LI",{});var zSe=s(f4);Cve=n(zSe,"STRONG",{});var Q0t=s(Cve);zbr=r(Q0t,"gptj"),Q0t.forEach(t),Qbr=r(zSe," \u2014 "),YW=n(zSe,"A",{href:!0});var W0t=s(YW);Wbr=r(W0t,"TFGPTJForSequenceClassification"),W0t.forEach(t),Hbr=r(zSe," (GPT-J model)"),zSe.forEach(t),Ubr=i(te),m4=n(te,"LI",{});var QSe=s(m4);wve=n(QSe,"STRONG",{});var H0t=s(wve);Jbr=r(H0t,"layoutlm"),H0t.forEach(t),Ybr=r(QSe," \u2014 "),KW=n(QSe,"A",{href:!0});var U0t=s(KW);Kbr=r(U0t,"TFLayoutLMForSequenceClassification"),U0t.forEach(t),Zbr=r(QSe," (LayoutLM model)"),QSe.forEach(t),evr=i(te),g4=n(te,"LI",{});var WSe=s(g4);Ave=n(WSe,"STRONG",{});var J0t=s(Ave);ovr=r(J0t,"longformer"),J0t.forEach(t),rvr=r(WSe," \u2014 "),ZW=n(WSe,"A",{href:!0});var Y0t=s(ZW);tvr=r(Y0t,"TFLongformerForSequenceClassification"),Y0t.forEach(t),avr=r(WSe," (Longformer model)"),WSe.forEach(t),nvr=i(te),h4=n(te,"LI",{});var HSe=s(h4);yve=n(HSe,"STRONG",{});var K0t=s(yve);svr=r(K0t,"mobilebert"),K0t.forEach(t),lvr=r(HSe," \u2014 "),eH=n(HSe,"A",{href:!0});var Z0t=s(eH);ivr=r(Z0t,"TFMobileBertForSequenceClassification"),Z0t.forEach(t),dvr=r(HSe," (MobileBERT model)"),HSe.forEach(t),cvr=i(te),p4=n(te,"LI",{});var USe=s(p4);Lve=n(USe,"STRONG",{});var eTt=s(Lve);fvr=r(eTt,"mpnet"),eTt.forEach(t),mvr=r(USe," \u2014 "),oH=n(USe,"A",{href:!0});var oTt=s(oH);gvr=r(oTt,"TFMPNetForSequenceClassification"),oTt.forEach(t),hvr=r(USe," (MPNet model)"),USe.forEach(t),pvr=i(te),u4=n(te,"LI",{});var JSe=s(u4);xve=n(JSe,"STRONG",{});var rTt=s(xve);uvr=r(rTt,"openai-gpt"),rTt.forEach(t),_vr=r(JSe," \u2014 "),rH=n(JSe,"A",{href:!0});var tTt=s(rH);bvr=r(tTt,"TFOpenAIGPTForSequenceClassification"),tTt.forEach(t),vvr=r(JSe," (OpenAI GPT model)"),JSe.forEach(t),Fvr=i(te),_4=n(te,"LI",{});var YSe=s(_4);$ve=n(YSe,"STRONG",{});var aTt=s($ve);Tvr=r(aTt,"rembert"),aTt.forEach(t),Mvr=r(YSe," \u2014 "),tH=n(YSe,"A",{href:!0});var nTt=s(tH);Evr=r(nTt,"TFRemBertForSequenceClassification"),nTt.forEach(t),Cvr=r(YSe," (RemBERT model)"),YSe.forEach(t),wvr=i(te),b4=n(te,"LI",{});var KSe=s(b4);kve=n(KSe,"STRONG",{});var sTt=s(kve);Avr=r(sTt,"roberta"),sTt.forEach(t),yvr=r(KSe," \u2014 "),aH=n(KSe,"A",{href:!0});var lTt=s(aH);Lvr=r(lTt,"TFRobertaForSequenceClassification"),lTt.forEach(t),xvr=r(KSe," (RoBERTa model)"),KSe.forEach(t),$vr=i(te),v4=n(te,"LI",{});var ZSe=s(v4);Sve=n(ZSe,"STRONG",{});var iTt=s(Sve);kvr=r(iTt,"roformer"),iTt.forEach(t),Svr=r(ZSe," \u2014 "),nH=n(ZSe,"A",{href:!0});var dTt=s(nH);Rvr=r(dTt,"TFRoFormerForSequenceClassification"),dTt.forEach(t),Bvr=r(ZSe," (RoFormer model)"),ZSe.forEach(t),Pvr=i(te),F4=n(te,"LI",{});var eRe=s(F4);Rve=n(eRe,"STRONG",{});var cTt=s(Rve);Ivr=r(cTt,"tapas"),cTt.forEach(t),qvr=r(eRe," \u2014 "),sH=n(eRe,"A",{href:!0});var fTt=s(sH);Nvr=r(fTt,"TFTapasForSequenceClassification"),fTt.forEach(t),jvr=r(eRe," (TAPAS model)"),eRe.forEach(t),Dvr=i(te),T4=n(te,"LI",{});var oRe=s(T4);Bve=n(oRe,"STRONG",{});var mTt=s(Bve);Gvr=r(mTt,"transfo-xl"),mTt.forEach(t),Ovr=r(oRe," \u2014 "),lH=n(oRe,"A",{href:!0});var gTt=s(lH);Vvr=r(gTt,"TFTransfoXLForSequenceClassification"),gTt.forEach(t),Xvr=r(oRe," (Transformer-XL model)"),oRe.forEach(t),zvr=i(te),M4=n(te,"LI",{});var rRe=s(M4);Pve=n(rRe,"STRONG",{});var hTt=s(Pve);Qvr=r(hTt,"xlm"),hTt.forEach(t),Wvr=r(rRe," \u2014 "),iH=n(rRe,"A",{href:!0});var pTt=s(iH);Hvr=r(pTt,"TFXLMForSequenceClassification"),pTt.forEach(t),Uvr=r(rRe," (XLM model)"),rRe.forEach(t),Jvr=i(te),E4=n(te,"LI",{});var tRe=s(E4);Ive=n(tRe,"STRONG",{});var uTt=s(Ive);Yvr=r(uTt,"xlm-roberta"),uTt.forEach(t),Kvr=r(tRe," \u2014 "),dH=n(tRe,"A",{href:!0});var _Tt=s(dH);Zvr=r(_Tt,"TFXLMRobertaForSequenceClassification"),_Tt.forEach(t),eFr=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),oFr=i(te),C4=n(te,"LI",{});var aRe=s(C4);qve=n(aRe,"STRONG",{});var bTt=s(qve);rFr=r(bTt,"xlnet"),bTt.forEach(t),tFr=r(aRe," \u2014 "),cH=n(aRe,"A",{href:!0});var vTt=s(cH);aFr=r(vTt,"TFXLNetForSequenceClassification"),vTt.forEach(t),nFr=r(aRe," (XLNet model)"),aRe.forEach(t),te.forEach(t),sFr=i(El),T(w4.$$.fragment,El),El.forEach(t),Ml.forEach(t),xqe=i(f),sc=n(f,"H2",{class:!0});var Pje=s(sc);A4=n(Pje,"A",{id:!0,class:!0,href:!0});var FTt=s(A4);Nve=n(FTt,"SPAN",{});var TTt=s(Nve);T(b8.$$.fragment,TTt),TTt.forEach(t),FTt.forEach(t),lFr=i(Pje),jve=n(Pje,"SPAN",{});var MTt=s(jve);iFr=r(MTt,"TFAutoModelForMultipleChoice"),MTt.forEach(t),Pje.forEach(t),$qe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(v8.$$.fragment,Cl),dFr=i(Cl),lc=n(Cl,"P",{});var LZ=s(lc);cFr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fH=n(LZ,"A",{href:!0});var ETt=s(fH);fFr=r(ETt,"from_pretrained()"),ETt.forEach(t),mFr=r(LZ," class method or the "),mH=n(LZ,"A",{href:!0});var CTt=s(mH);gFr=r(CTt,"from_config()"),CTt.forEach(t),hFr=r(LZ,` class
method.`),LZ.forEach(t),pFr=i(Cl),F8=n(Cl,"P",{});var Ije=s(F8);uFr=r(Ije,"This class cannot be instantiated directly using "),Dve=n(Ije,"CODE",{});var wTt=s(Dve);_Fr=r(wTt,"__init__()"),wTt.forEach(t),bFr=r(Ije," (throws an error)."),Ije.forEach(t),vFr=i(Cl),St=n(Cl,"DIV",{class:!0});var h6=s(St);T(T8.$$.fragment,h6),FFr=i(h6),Gve=n(h6,"P",{});var ATt=s(Gve);TFr=r(ATt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ATt.forEach(t),MFr=i(h6),ic=n(h6,"P",{});var xZ=s(ic);EFr=r(xZ,`Note:
Loading a model from its configuration file does `),Ove=n(xZ,"STRONG",{});var yTt=s(Ove);CFr=r(yTt,"not"),yTt.forEach(t),wFr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(xZ,"A",{href:!0});var LTt=s(gH);AFr=r(LTt,"from_pretrained()"),LTt.forEach(t),yFr=r(xZ," to load the model weights."),xZ.forEach(t),LFr=i(h6),T(y4.$$.fragment,h6),h6.forEach(t),xFr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(M8.$$.fragment,wl),$Fr=i(wl),Vve=n(wl,"P",{});var xTt=s(Vve);kFr=r(xTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xTt.forEach(t),SFr=i(wl),nn=n(wl,"P",{});var p6=s(nn);RFr=r(p6,"The model class to instantiate is selected based on the "),Xve=n(p6,"CODE",{});var $Tt=s(Xve);BFr=r($Tt,"model_type"),$Tt.forEach(t),PFr=r(p6,` property of the config object (either
passed as an argument or loaded from `),zve=n(p6,"CODE",{});var kTt=s(zve);IFr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),qFr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(p6,"CODE",{});var STt=s(Qve);NFr=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),jFr=r(p6,":"),p6.forEach(t),DFr=i(wl),pe=n(wl,"UL",{});var _e=s(pe);L4=n(_e,"LI",{});var nRe=s(L4);Wve=n(nRe,"STRONG",{});var RTt=s(Wve);GFr=r(RTt,"albert"),RTt.forEach(t),OFr=r(nRe," \u2014 "),hH=n(nRe,"A",{href:!0});var BTt=s(hH);VFr=r(BTt,"TFAlbertForMultipleChoice"),BTt.forEach(t),XFr=r(nRe," (ALBERT model)"),nRe.forEach(t),zFr=i(_e),x4=n(_e,"LI",{});var sRe=s(x4);Hve=n(sRe,"STRONG",{});var PTt=s(Hve);QFr=r(PTt,"bert"),PTt.forEach(t),WFr=r(sRe," \u2014 "),pH=n(sRe,"A",{href:!0});var ITt=s(pH);HFr=r(ITt,"TFBertForMultipleChoice"),ITt.forEach(t),UFr=r(sRe," (BERT model)"),sRe.forEach(t),JFr=i(_e),$4=n(_e,"LI",{});var lRe=s($4);Uve=n(lRe,"STRONG",{});var qTt=s(Uve);YFr=r(qTt,"camembert"),qTt.forEach(t),KFr=r(lRe," \u2014 "),uH=n(lRe,"A",{href:!0});var NTt=s(uH);ZFr=r(NTt,"TFCamembertForMultipleChoice"),NTt.forEach(t),e0r=r(lRe," (CamemBERT model)"),lRe.forEach(t),o0r=i(_e),k4=n(_e,"LI",{});var iRe=s(k4);Jve=n(iRe,"STRONG",{});var jTt=s(Jve);r0r=r(jTt,"convbert"),jTt.forEach(t),t0r=r(iRe," \u2014 "),_H=n(iRe,"A",{href:!0});var DTt=s(_H);a0r=r(DTt,"TFConvBertForMultipleChoice"),DTt.forEach(t),n0r=r(iRe," (ConvBERT model)"),iRe.forEach(t),s0r=i(_e),S4=n(_e,"LI",{});var dRe=s(S4);Yve=n(dRe,"STRONG",{});var GTt=s(Yve);l0r=r(GTt,"distilbert"),GTt.forEach(t),i0r=r(dRe," \u2014 "),bH=n(dRe,"A",{href:!0});var OTt=s(bH);d0r=r(OTt,"TFDistilBertForMultipleChoice"),OTt.forEach(t),c0r=r(dRe," (DistilBERT model)"),dRe.forEach(t),f0r=i(_e),R4=n(_e,"LI",{});var cRe=s(R4);Kve=n(cRe,"STRONG",{});var VTt=s(Kve);m0r=r(VTt,"electra"),VTt.forEach(t),g0r=r(cRe," \u2014 "),vH=n(cRe,"A",{href:!0});var XTt=s(vH);h0r=r(XTt,"TFElectraForMultipleChoice"),XTt.forEach(t),p0r=r(cRe," (ELECTRA model)"),cRe.forEach(t),u0r=i(_e),B4=n(_e,"LI",{});var fRe=s(B4);Zve=n(fRe,"STRONG",{});var zTt=s(Zve);_0r=r(zTt,"flaubert"),zTt.forEach(t),b0r=r(fRe," \u2014 "),FH=n(fRe,"A",{href:!0});var QTt=s(FH);v0r=r(QTt,"TFFlaubertForMultipleChoice"),QTt.forEach(t),F0r=r(fRe," (FlauBERT model)"),fRe.forEach(t),T0r=i(_e),P4=n(_e,"LI",{});var mRe=s(P4);eFe=n(mRe,"STRONG",{});var WTt=s(eFe);M0r=r(WTt,"funnel"),WTt.forEach(t),E0r=r(mRe," \u2014 "),TH=n(mRe,"A",{href:!0});var HTt=s(TH);C0r=r(HTt,"TFFunnelForMultipleChoice"),HTt.forEach(t),w0r=r(mRe," (Funnel Transformer model)"),mRe.forEach(t),A0r=i(_e),I4=n(_e,"LI",{});var gRe=s(I4);oFe=n(gRe,"STRONG",{});var UTt=s(oFe);y0r=r(UTt,"longformer"),UTt.forEach(t),L0r=r(gRe," \u2014 "),MH=n(gRe,"A",{href:!0});var JTt=s(MH);x0r=r(JTt,"TFLongformerForMultipleChoice"),JTt.forEach(t),$0r=r(gRe," (Longformer model)"),gRe.forEach(t),k0r=i(_e),q4=n(_e,"LI",{});var hRe=s(q4);rFe=n(hRe,"STRONG",{});var YTt=s(rFe);S0r=r(YTt,"mobilebert"),YTt.forEach(t),R0r=r(hRe," \u2014 "),EH=n(hRe,"A",{href:!0});var KTt=s(EH);B0r=r(KTt,"TFMobileBertForMultipleChoice"),KTt.forEach(t),P0r=r(hRe," (MobileBERT model)"),hRe.forEach(t),I0r=i(_e),N4=n(_e,"LI",{});var pRe=s(N4);tFe=n(pRe,"STRONG",{});var ZTt=s(tFe);q0r=r(ZTt,"mpnet"),ZTt.forEach(t),N0r=r(pRe," \u2014 "),CH=n(pRe,"A",{href:!0});var e7t=s(CH);j0r=r(e7t,"TFMPNetForMultipleChoice"),e7t.forEach(t),D0r=r(pRe," (MPNet model)"),pRe.forEach(t),G0r=i(_e),j4=n(_e,"LI",{});var uRe=s(j4);aFe=n(uRe,"STRONG",{});var o7t=s(aFe);O0r=r(o7t,"rembert"),o7t.forEach(t),V0r=r(uRe," \u2014 "),wH=n(uRe,"A",{href:!0});var r7t=s(wH);X0r=r(r7t,"TFRemBertForMultipleChoice"),r7t.forEach(t),z0r=r(uRe," (RemBERT model)"),uRe.forEach(t),Q0r=i(_e),D4=n(_e,"LI",{});var _Re=s(D4);nFe=n(_Re,"STRONG",{});var t7t=s(nFe);W0r=r(t7t,"roberta"),t7t.forEach(t),H0r=r(_Re," \u2014 "),AH=n(_Re,"A",{href:!0});var a7t=s(AH);U0r=r(a7t,"TFRobertaForMultipleChoice"),a7t.forEach(t),J0r=r(_Re," (RoBERTa model)"),_Re.forEach(t),Y0r=i(_e),G4=n(_e,"LI",{});var bRe=s(G4);sFe=n(bRe,"STRONG",{});var n7t=s(sFe);K0r=r(n7t,"roformer"),n7t.forEach(t),Z0r=r(bRe," \u2014 "),yH=n(bRe,"A",{href:!0});var s7t=s(yH);eTr=r(s7t,"TFRoFormerForMultipleChoice"),s7t.forEach(t),oTr=r(bRe," (RoFormer model)"),bRe.forEach(t),rTr=i(_e),O4=n(_e,"LI",{});var vRe=s(O4);lFe=n(vRe,"STRONG",{});var l7t=s(lFe);tTr=r(l7t,"xlm"),l7t.forEach(t),aTr=r(vRe," \u2014 "),LH=n(vRe,"A",{href:!0});var i7t=s(LH);nTr=r(i7t,"TFXLMForMultipleChoice"),i7t.forEach(t),sTr=r(vRe," (XLM model)"),vRe.forEach(t),lTr=i(_e),V4=n(_e,"LI",{});var FRe=s(V4);iFe=n(FRe,"STRONG",{});var d7t=s(iFe);iTr=r(d7t,"xlm-roberta"),d7t.forEach(t),dTr=r(FRe," \u2014 "),xH=n(FRe,"A",{href:!0});var c7t=s(xH);cTr=r(c7t,"TFXLMRobertaForMultipleChoice"),c7t.forEach(t),fTr=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),mTr=i(_e),X4=n(_e,"LI",{});var TRe=s(X4);dFe=n(TRe,"STRONG",{});var f7t=s(dFe);gTr=r(f7t,"xlnet"),f7t.forEach(t),hTr=r(TRe," \u2014 "),$H=n(TRe,"A",{href:!0});var m7t=s($H);pTr=r(m7t,"TFXLNetForMultipleChoice"),m7t.forEach(t),uTr=r(TRe," (XLNet model)"),TRe.forEach(t),_e.forEach(t),_Tr=i(wl),T(z4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),kqe=i(f),dc=n(f,"H2",{class:!0});var qje=s(dc);Q4=n(qje,"A",{id:!0,class:!0,href:!0});var g7t=s(Q4);cFe=n(g7t,"SPAN",{});var h7t=s(cFe);T(E8.$$.fragment,h7t),h7t.forEach(t),g7t.forEach(t),bTr=i(qje),fFe=n(qje,"SPAN",{});var p7t=s(fFe);vTr=r(p7t,"TFAutoModelForNextSentencePrediction"),p7t.forEach(t),qje.forEach(t),Sqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(C8.$$.fragment,Al),FTr=i(Al),cc=n(Al,"P",{});var $Z=s(cc);TTr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kH=n($Z,"A",{href:!0});var u7t=s(kH);MTr=r(u7t,"from_pretrained()"),u7t.forEach(t),ETr=r($Z," class method or the "),SH=n($Z,"A",{href:!0});var _7t=s(SH);CTr=r(_7t,"from_config()"),_7t.forEach(t),wTr=r($Z,` class
method.`),$Z.forEach(t),ATr=i(Al),w8=n(Al,"P",{});var Nje=s(w8);yTr=r(Nje,"This class cannot be instantiated directly using "),mFe=n(Nje,"CODE",{});var b7t=s(mFe);LTr=r(b7t,"__init__()"),b7t.forEach(t),xTr=r(Nje," (throws an error)."),Nje.forEach(t),$Tr=i(Al),Rt=n(Al,"DIV",{class:!0});var u6=s(Rt);T(A8.$$.fragment,u6),kTr=i(u6),gFe=n(u6,"P",{});var v7t=s(gFe);STr=r(v7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),v7t.forEach(t),RTr=i(u6),fc=n(u6,"P",{});var kZ=s(fc);BTr=r(kZ,`Note:
Loading a model from its configuration file does `),hFe=n(kZ,"STRONG",{});var F7t=s(hFe);PTr=r(F7t,"not"),F7t.forEach(t),ITr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(kZ,"A",{href:!0});var T7t=s(RH);qTr=r(T7t,"from_pretrained()"),T7t.forEach(t),NTr=r(kZ," to load the model weights."),kZ.forEach(t),jTr=i(u6),T(W4.$$.fragment,u6),u6.forEach(t),DTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(y8.$$.fragment,yl),GTr=i(yl),pFe=n(yl,"P",{});var M7t=s(pFe);OTr=r(M7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M7t.forEach(t),VTr=i(yl),sn=n(yl,"P",{});var _6=s(sn);XTr=r(_6,"The model class to instantiate is selected based on the "),uFe=n(_6,"CODE",{});var E7t=s(uFe);zTr=r(E7t,"model_type"),E7t.forEach(t),QTr=r(_6,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(_6,"CODE",{});var C7t=s(_Fe);WTr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),HTr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(_6,"CODE",{});var w7t=s(bFe);UTr=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),JTr=r(_6,":"),_6.forEach(t),YTr=i(yl),L8=n(yl,"UL",{});var jje=s(L8);H4=n(jje,"LI",{});var MRe=s(H4);vFe=n(MRe,"STRONG",{});var A7t=s(vFe);KTr=r(A7t,"bert"),A7t.forEach(t),ZTr=r(MRe," \u2014 "),BH=n(MRe,"A",{href:!0});var y7t=s(BH);e7r=r(y7t,"TFBertForNextSentencePrediction"),y7t.forEach(t),o7r=r(MRe," (BERT model)"),MRe.forEach(t),r7r=i(jje),U4=n(jje,"LI",{});var ERe=s(U4);FFe=n(ERe,"STRONG",{});var L7t=s(FFe);t7r=r(L7t,"mobilebert"),L7t.forEach(t),a7r=r(ERe," \u2014 "),PH=n(ERe,"A",{href:!0});var x7t=s(PH);n7r=r(x7t,"TFMobileBertForNextSentencePrediction"),x7t.forEach(t),s7r=r(ERe," (MobileBERT model)"),ERe.forEach(t),jje.forEach(t),l7r=i(yl),T(J4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Rqe=i(f),mc=n(f,"H2",{class:!0});var Dje=s(mc);Y4=n(Dje,"A",{id:!0,class:!0,href:!0});var $7t=s(Y4);TFe=n($7t,"SPAN",{});var k7t=s(TFe);T(x8.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),i7r=i(Dje),MFe=n(Dje,"SPAN",{});var S7t=s(MFe);d7r=r(S7t,"TFAutoModelForTableQuestionAnswering"),S7t.forEach(t),Dje.forEach(t),Bqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T($8.$$.fragment,Ll),c7r=i(Ll),gc=n(Ll,"P",{});var SZ=s(gc);f7r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IH=n(SZ,"A",{href:!0});var R7t=s(IH);m7r=r(R7t,"from_pretrained()"),R7t.forEach(t),g7r=r(SZ," class method or the "),qH=n(SZ,"A",{href:!0});var B7t=s(qH);h7r=r(B7t,"from_config()"),B7t.forEach(t),p7r=r(SZ,` class
method.`),SZ.forEach(t),u7r=i(Ll),k8=n(Ll,"P",{});var Gje=s(k8);_7r=r(Gje,"This class cannot be instantiated directly using "),EFe=n(Gje,"CODE",{});var P7t=s(EFe);b7r=r(P7t,"__init__()"),P7t.forEach(t),v7r=r(Gje," (throws an error)."),Gje.forEach(t),F7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var b6=s(Bt);T(S8.$$.fragment,b6),T7r=i(b6),CFe=n(b6,"P",{});var I7t=s(CFe);M7r=r(I7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),I7t.forEach(t),E7r=i(b6),hc=n(b6,"P",{});var RZ=s(hc);C7r=r(RZ,`Note:
Loading a model from its configuration file does `),wFe=n(RZ,"STRONG",{});var q7t=s(wFe);w7r=r(q7t,"not"),q7t.forEach(t),A7r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(RZ,"A",{href:!0});var N7t=s(NH);y7r=r(N7t,"from_pretrained()"),N7t.forEach(t),L7r=r(RZ," to load the model weights."),RZ.forEach(t),x7r=i(b6),T(K4.$$.fragment,b6),b6.forEach(t),$7r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(R8.$$.fragment,xl),k7r=i(xl),AFe=n(xl,"P",{});var j7t=s(AFe);S7r=r(j7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),j7t.forEach(t),R7r=i(xl),ln=n(xl,"P",{});var v6=s(ln);B7r=r(v6,"The model class to instantiate is selected based on the "),yFe=n(v6,"CODE",{});var D7t=s(yFe);P7r=r(D7t,"model_type"),D7t.forEach(t),I7r=r(v6,` property of the config object (either
passed as an argument or loaded from `),LFe=n(v6,"CODE",{});var G7t=s(LFe);q7r=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),N7r=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(v6,"CODE",{});var O7t=s(xFe);j7r=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),D7r=r(v6,":"),v6.forEach(t),G7r=i(xl),$Fe=n(xl,"UL",{});var V7t=s($Fe);Z4=n(V7t,"LI",{});var CRe=s(Z4);kFe=n(CRe,"STRONG",{});var X7t=s(kFe);O7r=r(X7t,"tapas"),X7t.forEach(t),V7r=r(CRe," \u2014 "),jH=n(CRe,"A",{href:!0});var z7t=s(jH);X7r=r(z7t,"TFTapasForQuestionAnswering"),z7t.forEach(t),z7r=r(CRe," (TAPAS model)"),CRe.forEach(t),V7t.forEach(t),Q7r=i(xl),T(eE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Pqe=i(f),pc=n(f,"H2",{class:!0});var Oje=s(pc);oE=n(Oje,"A",{id:!0,class:!0,href:!0});var Q7t=s(oE);SFe=n(Q7t,"SPAN",{});var W7t=s(SFe);T(B8.$$.fragment,W7t),W7t.forEach(t),Q7t.forEach(t),W7r=i(Oje),RFe=n(Oje,"SPAN",{});var H7t=s(RFe);H7r=r(H7t,"TFAutoModelForTokenClassification"),H7t.forEach(t),Oje.forEach(t),Iqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(P8.$$.fragment,$l),U7r=i($l),uc=n($l,"P",{});var BZ=s(uc);J7r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DH=n(BZ,"A",{href:!0});var U7t=s(DH);Y7r=r(U7t,"from_pretrained()"),U7t.forEach(t),K7r=r(BZ," class method or the "),GH=n(BZ,"A",{href:!0});var J7t=s(GH);Z7r=r(J7t,"from_config()"),J7t.forEach(t),eMr=r(BZ,` class
method.`),BZ.forEach(t),oMr=i($l),I8=n($l,"P",{});var Vje=s(I8);rMr=r(Vje,"This class cannot be instantiated directly using "),BFe=n(Vje,"CODE",{});var Y7t=s(BFe);tMr=r(Y7t,"__init__()"),Y7t.forEach(t),aMr=r(Vje," (throws an error)."),Vje.forEach(t),nMr=i($l),Pt=n($l,"DIV",{class:!0});var F6=s(Pt);T(q8.$$.fragment,F6),sMr=i(F6),PFe=n(F6,"P",{});var K7t=s(PFe);lMr=r(K7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K7t.forEach(t),iMr=i(F6),_c=n(F6,"P",{});var PZ=s(_c);dMr=r(PZ,`Note:
Loading a model from its configuration file does `),IFe=n(PZ,"STRONG",{});var Z7t=s(IFe);cMr=r(Z7t,"not"),Z7t.forEach(t),fMr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(PZ,"A",{href:!0});var eMt=s(OH);mMr=r(eMt,"from_pretrained()"),eMt.forEach(t),gMr=r(PZ," to load the model weights."),PZ.forEach(t),hMr=i(F6),T(rE.$$.fragment,F6),F6.forEach(t),pMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(N8.$$.fragment,kl),uMr=i(kl),qFe=n(kl,"P",{});var oMt=s(qFe);_Mr=r(oMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oMt.forEach(t),bMr=i(kl),dn=n(kl,"P",{});var T6=s(dn);vMr=r(T6,"The model class to instantiate is selected based on the "),NFe=n(T6,"CODE",{});var rMt=s(NFe);FMr=r(rMt,"model_type"),rMt.forEach(t),TMr=r(T6,` property of the config object (either
passed as an argument or loaded from `),jFe=n(T6,"CODE",{});var tMt=s(jFe);MMr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),EMr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(T6,"CODE",{});var aMt=s(DFe);CMr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),wMr=r(T6,":"),T6.forEach(t),AMr=i(kl),de=n(kl,"UL",{});var me=s(de);tE=n(me,"LI",{});var wRe=s(tE);GFe=n(wRe,"STRONG",{});var nMt=s(GFe);yMr=r(nMt,"albert"),nMt.forEach(t),LMr=r(wRe," \u2014 "),VH=n(wRe,"A",{href:!0});var sMt=s(VH);xMr=r(sMt,"TFAlbertForTokenClassification"),sMt.forEach(t),$Mr=r(wRe," (ALBERT model)"),wRe.forEach(t),kMr=i(me),aE=n(me,"LI",{});var ARe=s(aE);OFe=n(ARe,"STRONG",{});var lMt=s(OFe);SMr=r(lMt,"bert"),lMt.forEach(t),RMr=r(ARe," \u2014 "),XH=n(ARe,"A",{href:!0});var iMt=s(XH);BMr=r(iMt,"TFBertForTokenClassification"),iMt.forEach(t),PMr=r(ARe," (BERT model)"),ARe.forEach(t),IMr=i(me),nE=n(me,"LI",{});var yRe=s(nE);VFe=n(yRe,"STRONG",{});var dMt=s(VFe);qMr=r(dMt,"camembert"),dMt.forEach(t),NMr=r(yRe," \u2014 "),zH=n(yRe,"A",{href:!0});var cMt=s(zH);jMr=r(cMt,"TFCamembertForTokenClassification"),cMt.forEach(t),DMr=r(yRe," (CamemBERT model)"),yRe.forEach(t),GMr=i(me),sE=n(me,"LI",{});var LRe=s(sE);XFe=n(LRe,"STRONG",{});var fMt=s(XFe);OMr=r(fMt,"convbert"),fMt.forEach(t),VMr=r(LRe," \u2014 "),QH=n(LRe,"A",{href:!0});var mMt=s(QH);XMr=r(mMt,"TFConvBertForTokenClassification"),mMt.forEach(t),zMr=r(LRe," (ConvBERT model)"),LRe.forEach(t),QMr=i(me),lE=n(me,"LI",{});var xRe=s(lE);zFe=n(xRe,"STRONG",{});var gMt=s(zFe);WMr=r(gMt,"deberta"),gMt.forEach(t),HMr=r(xRe," \u2014 "),WH=n(xRe,"A",{href:!0});var hMt=s(WH);UMr=r(hMt,"TFDebertaForTokenClassification"),hMt.forEach(t),JMr=r(xRe," (DeBERTa model)"),xRe.forEach(t),YMr=i(me),iE=n(me,"LI",{});var $Re=s(iE);QFe=n($Re,"STRONG",{});var pMt=s(QFe);KMr=r(pMt,"deberta-v2"),pMt.forEach(t),ZMr=r($Re," \u2014 "),HH=n($Re,"A",{href:!0});var uMt=s(HH);e4r=r(uMt,"TFDebertaV2ForTokenClassification"),uMt.forEach(t),o4r=r($Re," (DeBERTa-v2 model)"),$Re.forEach(t),r4r=i(me),dE=n(me,"LI",{});var kRe=s(dE);WFe=n(kRe,"STRONG",{});var _Mt=s(WFe);t4r=r(_Mt,"distilbert"),_Mt.forEach(t),a4r=r(kRe," \u2014 "),UH=n(kRe,"A",{href:!0});var bMt=s(UH);n4r=r(bMt,"TFDistilBertForTokenClassification"),bMt.forEach(t),s4r=r(kRe," (DistilBERT model)"),kRe.forEach(t),l4r=i(me),cE=n(me,"LI",{});var SRe=s(cE);HFe=n(SRe,"STRONG",{});var vMt=s(HFe);i4r=r(vMt,"electra"),vMt.forEach(t),d4r=r(SRe," \u2014 "),JH=n(SRe,"A",{href:!0});var FMt=s(JH);c4r=r(FMt,"TFElectraForTokenClassification"),FMt.forEach(t),f4r=r(SRe," (ELECTRA model)"),SRe.forEach(t),m4r=i(me),fE=n(me,"LI",{});var RRe=s(fE);UFe=n(RRe,"STRONG",{});var TMt=s(UFe);g4r=r(TMt,"flaubert"),TMt.forEach(t),h4r=r(RRe," \u2014 "),YH=n(RRe,"A",{href:!0});var MMt=s(YH);p4r=r(MMt,"TFFlaubertForTokenClassification"),MMt.forEach(t),u4r=r(RRe," (FlauBERT model)"),RRe.forEach(t),_4r=i(me),mE=n(me,"LI",{});var BRe=s(mE);JFe=n(BRe,"STRONG",{});var EMt=s(JFe);b4r=r(EMt,"funnel"),EMt.forEach(t),v4r=r(BRe," \u2014 "),KH=n(BRe,"A",{href:!0});var CMt=s(KH);F4r=r(CMt,"TFFunnelForTokenClassification"),CMt.forEach(t),T4r=r(BRe," (Funnel Transformer model)"),BRe.forEach(t),M4r=i(me),gE=n(me,"LI",{});var PRe=s(gE);YFe=n(PRe,"STRONG",{});var wMt=s(YFe);E4r=r(wMt,"layoutlm"),wMt.forEach(t),C4r=r(PRe," \u2014 "),ZH=n(PRe,"A",{href:!0});var AMt=s(ZH);w4r=r(AMt,"TFLayoutLMForTokenClassification"),AMt.forEach(t),A4r=r(PRe," (LayoutLM model)"),PRe.forEach(t),y4r=i(me),hE=n(me,"LI",{});var IRe=s(hE);KFe=n(IRe,"STRONG",{});var yMt=s(KFe);L4r=r(yMt,"longformer"),yMt.forEach(t),x4r=r(IRe," \u2014 "),eU=n(IRe,"A",{href:!0});var LMt=s(eU);$4r=r(LMt,"TFLongformerForTokenClassification"),LMt.forEach(t),k4r=r(IRe," (Longformer model)"),IRe.forEach(t),S4r=i(me),pE=n(me,"LI",{});var qRe=s(pE);ZFe=n(qRe,"STRONG",{});var xMt=s(ZFe);R4r=r(xMt,"mobilebert"),xMt.forEach(t),B4r=r(qRe," \u2014 "),oU=n(qRe,"A",{href:!0});var $Mt=s(oU);P4r=r($Mt,"TFMobileBertForTokenClassification"),$Mt.forEach(t),I4r=r(qRe," (MobileBERT model)"),qRe.forEach(t),q4r=i(me),uE=n(me,"LI",{});var NRe=s(uE);e0e=n(NRe,"STRONG",{});var kMt=s(e0e);N4r=r(kMt,"mpnet"),kMt.forEach(t),j4r=r(NRe," \u2014 "),rU=n(NRe,"A",{href:!0});var SMt=s(rU);D4r=r(SMt,"TFMPNetForTokenClassification"),SMt.forEach(t),G4r=r(NRe," (MPNet model)"),NRe.forEach(t),O4r=i(me),_E=n(me,"LI",{});var jRe=s(_E);o0e=n(jRe,"STRONG",{});var RMt=s(o0e);V4r=r(RMt,"rembert"),RMt.forEach(t),X4r=r(jRe," \u2014 "),tU=n(jRe,"A",{href:!0});var BMt=s(tU);z4r=r(BMt,"TFRemBertForTokenClassification"),BMt.forEach(t),Q4r=r(jRe," (RemBERT model)"),jRe.forEach(t),W4r=i(me),bE=n(me,"LI",{});var DRe=s(bE);r0e=n(DRe,"STRONG",{});var PMt=s(r0e);H4r=r(PMt,"roberta"),PMt.forEach(t),U4r=r(DRe," \u2014 "),aU=n(DRe,"A",{href:!0});var IMt=s(aU);J4r=r(IMt,"TFRobertaForTokenClassification"),IMt.forEach(t),Y4r=r(DRe," (RoBERTa model)"),DRe.forEach(t),K4r=i(me),vE=n(me,"LI",{});var GRe=s(vE);t0e=n(GRe,"STRONG",{});var qMt=s(t0e);Z4r=r(qMt,"roformer"),qMt.forEach(t),eEr=r(GRe," \u2014 "),nU=n(GRe,"A",{href:!0});var NMt=s(nU);oEr=r(NMt,"TFRoFormerForTokenClassification"),NMt.forEach(t),rEr=r(GRe," (RoFormer model)"),GRe.forEach(t),tEr=i(me),FE=n(me,"LI",{});var ORe=s(FE);a0e=n(ORe,"STRONG",{});var jMt=s(a0e);aEr=r(jMt,"xlm"),jMt.forEach(t),nEr=r(ORe," \u2014 "),sU=n(ORe,"A",{href:!0});var DMt=s(sU);sEr=r(DMt,"TFXLMForTokenClassification"),DMt.forEach(t),lEr=r(ORe," (XLM model)"),ORe.forEach(t),iEr=i(me),TE=n(me,"LI",{});var VRe=s(TE);n0e=n(VRe,"STRONG",{});var GMt=s(n0e);dEr=r(GMt,"xlm-roberta"),GMt.forEach(t),cEr=r(VRe," \u2014 "),lU=n(VRe,"A",{href:!0});var OMt=s(lU);fEr=r(OMt,"TFXLMRobertaForTokenClassification"),OMt.forEach(t),mEr=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),gEr=i(me),ME=n(me,"LI",{});var XRe=s(ME);s0e=n(XRe,"STRONG",{});var VMt=s(s0e);hEr=r(VMt,"xlnet"),VMt.forEach(t),pEr=r(XRe," \u2014 "),iU=n(XRe,"A",{href:!0});var XMt=s(iU);uEr=r(XMt,"TFXLNetForTokenClassification"),XMt.forEach(t),_Er=r(XRe," (XLNet model)"),XRe.forEach(t),me.forEach(t),bEr=i(kl),T(EE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),qqe=i(f),bc=n(f,"H2",{class:!0});var Xje=s(bc);CE=n(Xje,"A",{id:!0,class:!0,href:!0});var zMt=s(CE);l0e=n(zMt,"SPAN",{});var QMt=s(l0e);T(j8.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),vEr=i(Xje),i0e=n(Xje,"SPAN",{});var WMt=s(i0e);FEr=r(WMt,"TFAutoModelForQuestionAnswering"),WMt.forEach(t),Xje.forEach(t),Nqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(D8.$$.fragment,Sl),TEr=i(Sl),vc=n(Sl,"P",{});var IZ=s(vc);MEr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dU=n(IZ,"A",{href:!0});var HMt=s(dU);EEr=r(HMt,"from_pretrained()"),HMt.forEach(t),CEr=r(IZ," class method or the "),cU=n(IZ,"A",{href:!0});var UMt=s(cU);wEr=r(UMt,"from_config()"),UMt.forEach(t),AEr=r(IZ,` class
method.`),IZ.forEach(t),yEr=i(Sl),G8=n(Sl,"P",{});var zje=s(G8);LEr=r(zje,"This class cannot be instantiated directly using "),d0e=n(zje,"CODE",{});var JMt=s(d0e);xEr=r(JMt,"__init__()"),JMt.forEach(t),$Er=r(zje," (throws an error)."),zje.forEach(t),kEr=i(Sl),It=n(Sl,"DIV",{class:!0});var M6=s(It);T(O8.$$.fragment,M6),SEr=i(M6),c0e=n(M6,"P",{});var YMt=s(c0e);REr=r(YMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YMt.forEach(t),BEr=i(M6),Fc=n(M6,"P",{});var qZ=s(Fc);PEr=r(qZ,`Note:
Loading a model from its configuration file does `),f0e=n(qZ,"STRONG",{});var KMt=s(f0e);IEr=r(KMt,"not"),KMt.forEach(t),qEr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(qZ,"A",{href:!0});var ZMt=s(fU);NEr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),jEr=r(qZ," to load the model weights."),qZ.forEach(t),DEr=i(M6),T(wE.$$.fragment,M6),M6.forEach(t),GEr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(V8.$$.fragment,Rl),OEr=i(Rl),m0e=n(Rl,"P",{});var e4t=s(m0e);VEr=r(e4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),e4t.forEach(t),XEr=i(Rl),cn=n(Rl,"P",{});var E6=s(cn);zEr=r(E6,"The model class to instantiate is selected based on the "),g0e=n(E6,"CODE",{});var o4t=s(g0e);QEr=r(o4t,"model_type"),o4t.forEach(t),WEr=r(E6,` property of the config object (either
passed as an argument or loaded from `),h0e=n(E6,"CODE",{});var r4t=s(h0e);HEr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),UEr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(E6,"CODE",{});var t4t=s(p0e);JEr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),YEr=r(E6,":"),E6.forEach(t),KEr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);AE=n(ge,"LI",{});var zRe=s(AE);u0e=n(zRe,"STRONG",{});var a4t=s(u0e);ZEr=r(a4t,"albert"),a4t.forEach(t),e5r=r(zRe," \u2014 "),mU=n(zRe,"A",{href:!0});var n4t=s(mU);o5r=r(n4t,"TFAlbertForQuestionAnswering"),n4t.forEach(t),r5r=r(zRe," (ALBERT model)"),zRe.forEach(t),t5r=i(ge),yE=n(ge,"LI",{});var QRe=s(yE);_0e=n(QRe,"STRONG",{});var s4t=s(_0e);a5r=r(s4t,"bert"),s4t.forEach(t),n5r=r(QRe," \u2014 "),gU=n(QRe,"A",{href:!0});var l4t=s(gU);s5r=r(l4t,"TFBertForQuestionAnswering"),l4t.forEach(t),l5r=r(QRe," (BERT model)"),QRe.forEach(t),i5r=i(ge),LE=n(ge,"LI",{});var WRe=s(LE);b0e=n(WRe,"STRONG",{});var i4t=s(b0e);d5r=r(i4t,"camembert"),i4t.forEach(t),c5r=r(WRe," \u2014 "),hU=n(WRe,"A",{href:!0});var d4t=s(hU);f5r=r(d4t,"TFCamembertForQuestionAnswering"),d4t.forEach(t),m5r=r(WRe," (CamemBERT model)"),WRe.forEach(t),g5r=i(ge),xE=n(ge,"LI",{});var HRe=s(xE);v0e=n(HRe,"STRONG",{});var c4t=s(v0e);h5r=r(c4t,"convbert"),c4t.forEach(t),p5r=r(HRe," \u2014 "),pU=n(HRe,"A",{href:!0});var f4t=s(pU);u5r=r(f4t,"TFConvBertForQuestionAnswering"),f4t.forEach(t),_5r=r(HRe," (ConvBERT model)"),HRe.forEach(t),b5r=i(ge),$E=n(ge,"LI",{});var URe=s($E);F0e=n(URe,"STRONG",{});var m4t=s(F0e);v5r=r(m4t,"deberta"),m4t.forEach(t),F5r=r(URe," \u2014 "),uU=n(URe,"A",{href:!0});var g4t=s(uU);T5r=r(g4t,"TFDebertaForQuestionAnswering"),g4t.forEach(t),M5r=r(URe," (DeBERTa model)"),URe.forEach(t),E5r=i(ge),kE=n(ge,"LI",{});var JRe=s(kE);T0e=n(JRe,"STRONG",{});var h4t=s(T0e);C5r=r(h4t,"deberta-v2"),h4t.forEach(t),w5r=r(JRe," \u2014 "),_U=n(JRe,"A",{href:!0});var p4t=s(_U);A5r=r(p4t,"TFDebertaV2ForQuestionAnswering"),p4t.forEach(t),y5r=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),L5r=i(ge),SE=n(ge,"LI",{});var YRe=s(SE);M0e=n(YRe,"STRONG",{});var u4t=s(M0e);x5r=r(u4t,"distilbert"),u4t.forEach(t),$5r=r(YRe," \u2014 "),bU=n(YRe,"A",{href:!0});var _4t=s(bU);k5r=r(_4t,"TFDistilBertForQuestionAnswering"),_4t.forEach(t),S5r=r(YRe," (DistilBERT model)"),YRe.forEach(t),R5r=i(ge),RE=n(ge,"LI",{});var KRe=s(RE);E0e=n(KRe,"STRONG",{});var b4t=s(E0e);B5r=r(b4t,"electra"),b4t.forEach(t),P5r=r(KRe," \u2014 "),vU=n(KRe,"A",{href:!0});var v4t=s(vU);I5r=r(v4t,"TFElectraForQuestionAnswering"),v4t.forEach(t),q5r=r(KRe," (ELECTRA model)"),KRe.forEach(t),N5r=i(ge),BE=n(ge,"LI",{});var ZRe=s(BE);C0e=n(ZRe,"STRONG",{});var F4t=s(C0e);j5r=r(F4t,"flaubert"),F4t.forEach(t),D5r=r(ZRe," \u2014 "),FU=n(ZRe,"A",{href:!0});var T4t=s(FU);G5r=r(T4t,"TFFlaubertForQuestionAnsweringSimple"),T4t.forEach(t),O5r=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),V5r=i(ge),PE=n(ge,"LI",{});var eBe=s(PE);w0e=n(eBe,"STRONG",{});var M4t=s(w0e);X5r=r(M4t,"funnel"),M4t.forEach(t),z5r=r(eBe," \u2014 "),TU=n(eBe,"A",{href:!0});var E4t=s(TU);Q5r=r(E4t,"TFFunnelForQuestionAnswering"),E4t.forEach(t),W5r=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),H5r=i(ge),IE=n(ge,"LI",{});var oBe=s(IE);A0e=n(oBe,"STRONG",{});var C4t=s(A0e);U5r=r(C4t,"gptj"),C4t.forEach(t),J5r=r(oBe," \u2014 "),MU=n(oBe,"A",{href:!0});var w4t=s(MU);Y5r=r(w4t,"TFGPTJForQuestionAnswering"),w4t.forEach(t),K5r=r(oBe," (GPT-J model)"),oBe.forEach(t),Z5r=i(ge),qE=n(ge,"LI",{});var rBe=s(qE);y0e=n(rBe,"STRONG",{});var A4t=s(y0e);eCr=r(A4t,"longformer"),A4t.forEach(t),oCr=r(rBe," \u2014 "),EU=n(rBe,"A",{href:!0});var y4t=s(EU);rCr=r(y4t,"TFLongformerForQuestionAnswering"),y4t.forEach(t),tCr=r(rBe," (Longformer model)"),rBe.forEach(t),aCr=i(ge),NE=n(ge,"LI",{});var tBe=s(NE);L0e=n(tBe,"STRONG",{});var L4t=s(L0e);nCr=r(L4t,"mobilebert"),L4t.forEach(t),sCr=r(tBe," \u2014 "),CU=n(tBe,"A",{href:!0});var x4t=s(CU);lCr=r(x4t,"TFMobileBertForQuestionAnswering"),x4t.forEach(t),iCr=r(tBe," (MobileBERT model)"),tBe.forEach(t),dCr=i(ge),jE=n(ge,"LI",{});var aBe=s(jE);x0e=n(aBe,"STRONG",{});var $4t=s(x0e);cCr=r($4t,"mpnet"),$4t.forEach(t),fCr=r(aBe," \u2014 "),wU=n(aBe,"A",{href:!0});var k4t=s(wU);mCr=r(k4t,"TFMPNetForQuestionAnswering"),k4t.forEach(t),gCr=r(aBe," (MPNet model)"),aBe.forEach(t),hCr=i(ge),DE=n(ge,"LI",{});var nBe=s(DE);$0e=n(nBe,"STRONG",{});var S4t=s($0e);pCr=r(S4t,"rembert"),S4t.forEach(t),uCr=r(nBe," \u2014 "),AU=n(nBe,"A",{href:!0});var R4t=s(AU);_Cr=r(R4t,"TFRemBertForQuestionAnswering"),R4t.forEach(t),bCr=r(nBe," (RemBERT model)"),nBe.forEach(t),vCr=i(ge),GE=n(ge,"LI",{});var sBe=s(GE);k0e=n(sBe,"STRONG",{});var B4t=s(k0e);FCr=r(B4t,"roberta"),B4t.forEach(t),TCr=r(sBe," \u2014 "),yU=n(sBe,"A",{href:!0});var P4t=s(yU);MCr=r(P4t,"TFRobertaForQuestionAnswering"),P4t.forEach(t),ECr=r(sBe," (RoBERTa model)"),sBe.forEach(t),CCr=i(ge),OE=n(ge,"LI",{});var lBe=s(OE);S0e=n(lBe,"STRONG",{});var I4t=s(S0e);wCr=r(I4t,"roformer"),I4t.forEach(t),ACr=r(lBe," \u2014 "),LU=n(lBe,"A",{href:!0});var q4t=s(LU);yCr=r(q4t,"TFRoFormerForQuestionAnswering"),q4t.forEach(t),LCr=r(lBe," (RoFormer model)"),lBe.forEach(t),xCr=i(ge),VE=n(ge,"LI",{});var iBe=s(VE);R0e=n(iBe,"STRONG",{});var N4t=s(R0e);$Cr=r(N4t,"xlm"),N4t.forEach(t),kCr=r(iBe," \u2014 "),xU=n(iBe,"A",{href:!0});var j4t=s(xU);SCr=r(j4t,"TFXLMForQuestionAnsweringSimple"),j4t.forEach(t),RCr=r(iBe," (XLM model)"),iBe.forEach(t),BCr=i(ge),XE=n(ge,"LI",{});var dBe=s(XE);B0e=n(dBe,"STRONG",{});var D4t=s(B0e);PCr=r(D4t,"xlm-roberta"),D4t.forEach(t),ICr=r(dBe," \u2014 "),$U=n(dBe,"A",{href:!0});var G4t=s($U);qCr=r(G4t,"TFXLMRobertaForQuestionAnswering"),G4t.forEach(t),NCr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),jCr=i(ge),zE=n(ge,"LI",{});var cBe=s(zE);P0e=n(cBe,"STRONG",{});var O4t=s(P0e);DCr=r(O4t,"xlnet"),O4t.forEach(t),GCr=r(cBe," \u2014 "),kU=n(cBe,"A",{href:!0});var V4t=s(kU);OCr=r(V4t,"TFXLNetForQuestionAnsweringSimple"),V4t.forEach(t),VCr=r(cBe," (XLNet model)"),cBe.forEach(t),ge.forEach(t),XCr=i(Rl),T(QE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),jqe=i(f),Tc=n(f,"H2",{class:!0});var Qje=s(Tc);WE=n(Qje,"A",{id:!0,class:!0,href:!0});var X4t=s(WE);I0e=n(X4t,"SPAN",{});var z4t=s(I0e);T(X8.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),zCr=i(Qje),q0e=n(Qje,"SPAN",{});var Q4t=s(q0e);QCr=r(Q4t,"TFAutoModelForVision2Seq"),Q4t.forEach(t),Qje.forEach(t),Dqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(z8.$$.fragment,Bl),WCr=i(Bl),Mc=n(Bl,"P",{});var NZ=s(Mc);HCr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SU=n(NZ,"A",{href:!0});var W4t=s(SU);UCr=r(W4t,"from_pretrained()"),W4t.forEach(t),JCr=r(NZ," class method or the "),RU=n(NZ,"A",{href:!0});var H4t=s(RU);YCr=r(H4t,"from_config()"),H4t.forEach(t),KCr=r(NZ,` class
method.`),NZ.forEach(t),ZCr=i(Bl),Q8=n(Bl,"P",{});var Wje=s(Q8);e3r=r(Wje,"This class cannot be instantiated directly using "),N0e=n(Wje,"CODE",{});var U4t=s(N0e);o3r=r(U4t,"__init__()"),U4t.forEach(t),r3r=r(Wje," (throws an error)."),Wje.forEach(t),t3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var C6=s(qt);T(W8.$$.fragment,C6),a3r=i(C6),j0e=n(C6,"P",{});var J4t=s(j0e);n3r=r(J4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J4t.forEach(t),s3r=i(C6),Ec=n(C6,"P",{});var jZ=s(Ec);l3r=r(jZ,`Note:
Loading a model from its configuration file does `),D0e=n(jZ,"STRONG",{});var Y4t=s(D0e);i3r=r(Y4t,"not"),Y4t.forEach(t),d3r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(jZ,"A",{href:!0});var K4t=s(BU);c3r=r(K4t,"from_pretrained()"),K4t.forEach(t),f3r=r(jZ," to load the model weights."),jZ.forEach(t),m3r=i(C6),T(HE.$$.fragment,C6),C6.forEach(t),g3r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(H8.$$.fragment,Pl),h3r=i(Pl),G0e=n(Pl,"P",{});var Z4t=s(G0e);p3r=r(Z4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z4t.forEach(t),u3r=i(Pl),fn=n(Pl,"P",{});var w6=s(fn);_3r=r(w6,"The model class to instantiate is selected based on the "),O0e=n(w6,"CODE",{});var eEt=s(O0e);b3r=r(eEt,"model_type"),eEt.forEach(t),v3r=r(w6,` property of the config object (either
passed as an argument or loaded from `),V0e=n(w6,"CODE",{});var oEt=s(V0e);F3r=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),T3r=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(w6,"CODE",{});var rEt=s(X0e);M3r=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),E3r=r(w6,":"),w6.forEach(t),C3r=i(Pl),z0e=n(Pl,"UL",{});var tEt=s(z0e);UE=n(tEt,"LI",{});var fBe=s(UE);Q0e=n(fBe,"STRONG",{});var aEt=s(Q0e);w3r=r(aEt,"vision-encoder-decoder"),aEt.forEach(t),A3r=r(fBe," \u2014 "),PU=n(fBe,"A",{href:!0});var nEt=s(PU);y3r=r(nEt,"TFVisionEncoderDecoderModel"),nEt.forEach(t),L3r=r(fBe," (Vision Encoder decoder model)"),fBe.forEach(t),tEt.forEach(t),x3r=i(Pl),T(JE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),Gqe=i(f),Cc=n(f,"H2",{class:!0});var Hje=s(Cc);YE=n(Hje,"A",{id:!0,class:!0,href:!0});var sEt=s(YE);W0e=n(sEt,"SPAN",{});var lEt=s(W0e);T(U8.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),$3r=i(Hje),H0e=n(Hje,"SPAN",{});var iEt=s(H0e);k3r=r(iEt,"TFAutoModelForSpeechSeq2Seq"),iEt.forEach(t),Hje.forEach(t),Oqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(J8.$$.fragment,Il),S3r=i(Il),wc=n(Il,"P",{});var DZ=s(wc);R3r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IU=n(DZ,"A",{href:!0});var dEt=s(IU);B3r=r(dEt,"from_pretrained()"),dEt.forEach(t),P3r=r(DZ," class method or the "),qU=n(DZ,"A",{href:!0});var cEt=s(qU);I3r=r(cEt,"from_config()"),cEt.forEach(t),q3r=r(DZ,` class
method.`),DZ.forEach(t),N3r=i(Il),Y8=n(Il,"P",{});var Uje=s(Y8);j3r=r(Uje,"This class cannot be instantiated directly using "),U0e=n(Uje,"CODE",{});var fEt=s(U0e);D3r=r(fEt,"__init__()"),fEt.forEach(t),G3r=r(Uje," (throws an error)."),Uje.forEach(t),O3r=i(Il),Nt=n(Il,"DIV",{class:!0});var A6=s(Nt);T(K8.$$.fragment,A6),V3r=i(A6),J0e=n(A6,"P",{});var mEt=s(J0e);X3r=r(mEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mEt.forEach(t),z3r=i(A6),Ac=n(A6,"P",{});var GZ=s(Ac);Q3r=r(GZ,`Note:
Loading a model from its configuration file does `),Y0e=n(GZ,"STRONG",{});var gEt=s(Y0e);W3r=r(gEt,"not"),gEt.forEach(t),H3r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(GZ,"A",{href:!0});var hEt=s(NU);U3r=r(hEt,"from_pretrained()"),hEt.forEach(t),J3r=r(GZ," to load the model weights."),GZ.forEach(t),Y3r=i(A6),T(KE.$$.fragment,A6),A6.forEach(t),K3r=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(Z8.$$.fragment,ql),Z3r=i(ql),K0e=n(ql,"P",{});var pEt=s(K0e);ewr=r(pEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pEt.forEach(t),owr=i(ql),mn=n(ql,"P",{});var y6=s(mn);rwr=r(y6,"The model class to instantiate is selected based on the "),Z0e=n(y6,"CODE",{});var uEt=s(Z0e);twr=r(uEt,"model_type"),uEt.forEach(t),awr=r(y6,` property of the config object (either
passed as an argument or loaded from `),eTe=n(y6,"CODE",{});var _Et=s(eTe);nwr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),swr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(y6,"CODE",{});var bEt=s(oTe);lwr=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),iwr=r(y6,":"),y6.forEach(t),dwr=i(ql),rTe=n(ql,"UL",{});var vEt=s(rTe);ZE=n(vEt,"LI",{});var mBe=s(ZE);tTe=n(mBe,"STRONG",{});var FEt=s(tTe);cwr=r(FEt,"speech_to_text"),FEt.forEach(t),fwr=r(mBe," \u2014 "),jU=n(mBe,"A",{href:!0});var TEt=s(jU);mwr=r(TEt,"TFSpeech2TextForConditionalGeneration"),TEt.forEach(t),gwr=r(mBe," (Speech2Text model)"),mBe.forEach(t),vEt.forEach(t),hwr=i(ql),T(e5.$$.fragment,ql),ql.forEach(t),Il.forEach(t),Vqe=i(f),yc=n(f,"H2",{class:!0});var Jje=s(yc);o5=n(Jje,"A",{id:!0,class:!0,href:!0});var MEt=s(o5);aTe=n(MEt,"SPAN",{});var EEt=s(aTe);T(ex.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),pwr=i(Jje),nTe=n(Jje,"SPAN",{});var CEt=s(nTe);uwr=r(CEt,"FlaxAutoModel"),CEt.forEach(t),Jje.forEach(t),Xqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(ox.$$.fragment,Nl),_wr=i(Nl),Lc=n(Nl,"P",{});var OZ=s(Lc);bwr=r(OZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DU=n(OZ,"A",{href:!0});var wEt=s(DU);vwr=r(wEt,"from_pretrained()"),wEt.forEach(t),Fwr=r(OZ," class method or the "),GU=n(OZ,"A",{href:!0});var AEt=s(GU);Twr=r(AEt,"from_config()"),AEt.forEach(t),Mwr=r(OZ,` class
method.`),OZ.forEach(t),Ewr=i(Nl),rx=n(Nl,"P",{});var Yje=s(rx);Cwr=r(Yje,"This class cannot be instantiated directly using "),sTe=n(Yje,"CODE",{});var yEt=s(sTe);wwr=r(yEt,"__init__()"),yEt.forEach(t),Awr=r(Yje," (throws an error)."),Yje.forEach(t),ywr=i(Nl),jt=n(Nl,"DIV",{class:!0});var L6=s(jt);T(tx.$$.fragment,L6),Lwr=i(L6),lTe=n(L6,"P",{});var LEt=s(lTe);xwr=r(LEt,"Instantiates one of the base model classes of the library from a configuration."),LEt.forEach(t),$wr=i(L6),xc=n(L6,"P",{});var VZ=s(xc);kwr=r(VZ,`Note:
Loading a model from its configuration file does `),iTe=n(VZ,"STRONG",{});var xEt=s(iTe);Swr=r(xEt,"not"),xEt.forEach(t),Rwr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(VZ,"A",{href:!0});var $Et=s(OU);Bwr=r($Et,"from_pretrained()"),$Et.forEach(t),Pwr=r(VZ," to load the model weights."),VZ.forEach(t),Iwr=i(L6),T(r5.$$.fragment,L6),L6.forEach(t),qwr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(ax.$$.fragment,jl),Nwr=i(jl),dTe=n(jl,"P",{});var kEt=s(dTe);jwr=r(kEt,"Instantiate one of the base model classes of the library from a pretrained model."),kEt.forEach(t),Dwr=i(jl),gn=n(jl,"P",{});var x6=s(gn);Gwr=r(x6,"The model class to instantiate is selected based on the "),cTe=n(x6,"CODE",{});var SEt=s(cTe);Owr=r(SEt,"model_type"),SEt.forEach(t),Vwr=r(x6,` property of the config object (either
passed as an argument or loaded from `),fTe=n(x6,"CODE",{});var REt=s(fTe);Xwr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),zwr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(x6,"CODE",{});var BEt=s(mTe);Qwr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Wwr=r(x6,":"),x6.forEach(t),Hwr=i(jl),re=n(jl,"UL",{});var ne=s(re);t5=n(ne,"LI",{});var gBe=s(t5);gTe=n(gBe,"STRONG",{});var PEt=s(gTe);Uwr=r(PEt,"albert"),PEt.forEach(t),Jwr=r(gBe," \u2014 "),VU=n(gBe,"A",{href:!0});var IEt=s(VU);Ywr=r(IEt,"FlaxAlbertModel"),IEt.forEach(t),Kwr=r(gBe," (ALBERT model)"),gBe.forEach(t),Zwr=i(ne),a5=n(ne,"LI",{});var hBe=s(a5);hTe=n(hBe,"STRONG",{});var qEt=s(hTe);e6r=r(qEt,"bart"),qEt.forEach(t),o6r=r(hBe," \u2014 "),XU=n(hBe,"A",{href:!0});var NEt=s(XU);r6r=r(NEt,"FlaxBartModel"),NEt.forEach(t),t6r=r(hBe," (BART model)"),hBe.forEach(t),a6r=i(ne),n5=n(ne,"LI",{});var pBe=s(n5);pTe=n(pBe,"STRONG",{});var jEt=s(pTe);n6r=r(jEt,"beit"),jEt.forEach(t),s6r=r(pBe," \u2014 "),zU=n(pBe,"A",{href:!0});var DEt=s(zU);l6r=r(DEt,"FlaxBeitModel"),DEt.forEach(t),i6r=r(pBe," (BEiT model)"),pBe.forEach(t),d6r=i(ne),s5=n(ne,"LI",{});var uBe=s(s5);uTe=n(uBe,"STRONG",{});var GEt=s(uTe);c6r=r(GEt,"bert"),GEt.forEach(t),f6r=r(uBe," \u2014 "),QU=n(uBe,"A",{href:!0});var OEt=s(QU);m6r=r(OEt,"FlaxBertModel"),OEt.forEach(t),g6r=r(uBe," (BERT model)"),uBe.forEach(t),h6r=i(ne),l5=n(ne,"LI",{});var _Be=s(l5);_Te=n(_Be,"STRONG",{});var VEt=s(_Te);p6r=r(VEt,"big_bird"),VEt.forEach(t),u6r=r(_Be," \u2014 "),WU=n(_Be,"A",{href:!0});var XEt=s(WU);_6r=r(XEt,"FlaxBigBirdModel"),XEt.forEach(t),b6r=r(_Be," (BigBird model)"),_Be.forEach(t),v6r=i(ne),i5=n(ne,"LI",{});var bBe=s(i5);bTe=n(bBe,"STRONG",{});var zEt=s(bTe);F6r=r(zEt,"blenderbot"),zEt.forEach(t),T6r=r(bBe," \u2014 "),HU=n(bBe,"A",{href:!0});var QEt=s(HU);M6r=r(QEt,"FlaxBlenderbotModel"),QEt.forEach(t),E6r=r(bBe," (Blenderbot model)"),bBe.forEach(t),C6r=i(ne),d5=n(ne,"LI",{});var vBe=s(d5);vTe=n(vBe,"STRONG",{});var WEt=s(vTe);w6r=r(WEt,"blenderbot-small"),WEt.forEach(t),A6r=r(vBe," \u2014 "),UU=n(vBe,"A",{href:!0});var HEt=s(UU);y6r=r(HEt,"FlaxBlenderbotSmallModel"),HEt.forEach(t),L6r=r(vBe," (BlenderbotSmall model)"),vBe.forEach(t),x6r=i(ne),c5=n(ne,"LI",{});var FBe=s(c5);FTe=n(FBe,"STRONG",{});var UEt=s(FTe);$6r=r(UEt,"clip"),UEt.forEach(t),k6r=r(FBe," \u2014 "),JU=n(FBe,"A",{href:!0});var JEt=s(JU);S6r=r(JEt,"FlaxCLIPModel"),JEt.forEach(t),R6r=r(FBe," (CLIP model)"),FBe.forEach(t),B6r=i(ne),f5=n(ne,"LI",{});var TBe=s(f5);TTe=n(TBe,"STRONG",{});var YEt=s(TTe);P6r=r(YEt,"distilbert"),YEt.forEach(t),I6r=r(TBe," \u2014 "),YU=n(TBe,"A",{href:!0});var KEt=s(YU);q6r=r(KEt,"FlaxDistilBertModel"),KEt.forEach(t),N6r=r(TBe," (DistilBERT model)"),TBe.forEach(t),j6r=i(ne),m5=n(ne,"LI",{});var MBe=s(m5);MTe=n(MBe,"STRONG",{});var ZEt=s(MTe);D6r=r(ZEt,"electra"),ZEt.forEach(t),G6r=r(MBe," \u2014 "),KU=n(MBe,"A",{href:!0});var e5t=s(KU);O6r=r(e5t,"FlaxElectraModel"),e5t.forEach(t),V6r=r(MBe," (ELECTRA model)"),MBe.forEach(t),X6r=i(ne),g5=n(ne,"LI",{});var EBe=s(g5);ETe=n(EBe,"STRONG",{});var o5t=s(ETe);z6r=r(o5t,"gpt2"),o5t.forEach(t),Q6r=r(EBe," \u2014 "),ZU=n(EBe,"A",{href:!0});var r5t=s(ZU);W6r=r(r5t,"FlaxGPT2Model"),r5t.forEach(t),H6r=r(EBe," (OpenAI GPT-2 model)"),EBe.forEach(t),U6r=i(ne),h5=n(ne,"LI",{});var CBe=s(h5);CTe=n(CBe,"STRONG",{});var t5t=s(CTe);J6r=r(t5t,"gpt_neo"),t5t.forEach(t),Y6r=r(CBe," \u2014 "),eJ=n(CBe,"A",{href:!0});var a5t=s(eJ);K6r=r(a5t,"FlaxGPTNeoModel"),a5t.forEach(t),Z6r=r(CBe," (GPT Neo model)"),CBe.forEach(t),eAr=i(ne),p5=n(ne,"LI",{});var wBe=s(p5);wTe=n(wBe,"STRONG",{});var n5t=s(wTe);oAr=r(n5t,"gptj"),n5t.forEach(t),rAr=r(wBe," \u2014 "),oJ=n(wBe,"A",{href:!0});var s5t=s(oJ);tAr=r(s5t,"FlaxGPTJModel"),s5t.forEach(t),aAr=r(wBe," (GPT-J model)"),wBe.forEach(t),nAr=i(ne),u5=n(ne,"LI",{});var ABe=s(u5);ATe=n(ABe,"STRONG",{});var l5t=s(ATe);sAr=r(l5t,"marian"),l5t.forEach(t),lAr=r(ABe," \u2014 "),rJ=n(ABe,"A",{href:!0});var i5t=s(rJ);iAr=r(i5t,"FlaxMarianModel"),i5t.forEach(t),dAr=r(ABe," (Marian model)"),ABe.forEach(t),cAr=i(ne),_5=n(ne,"LI",{});var yBe=s(_5);yTe=n(yBe,"STRONG",{});var d5t=s(yTe);fAr=r(d5t,"mbart"),d5t.forEach(t),mAr=r(yBe," \u2014 "),tJ=n(yBe,"A",{href:!0});var c5t=s(tJ);gAr=r(c5t,"FlaxMBartModel"),c5t.forEach(t),hAr=r(yBe," (mBART model)"),yBe.forEach(t),pAr=i(ne),b5=n(ne,"LI",{});var LBe=s(b5);LTe=n(LBe,"STRONG",{});var f5t=s(LTe);uAr=r(f5t,"mt5"),f5t.forEach(t),_Ar=r(LBe," \u2014 "),aJ=n(LBe,"A",{href:!0});var m5t=s(aJ);bAr=r(m5t,"FlaxMT5Model"),m5t.forEach(t),vAr=r(LBe," (mT5 model)"),LBe.forEach(t),FAr=i(ne),v5=n(ne,"LI",{});var xBe=s(v5);xTe=n(xBe,"STRONG",{});var g5t=s(xTe);TAr=r(g5t,"pegasus"),g5t.forEach(t),MAr=r(xBe," \u2014 "),nJ=n(xBe,"A",{href:!0});var h5t=s(nJ);EAr=r(h5t,"FlaxPegasusModel"),h5t.forEach(t),CAr=r(xBe," (Pegasus model)"),xBe.forEach(t),wAr=i(ne),F5=n(ne,"LI",{});var $Be=s(F5);$Te=n($Be,"STRONG",{});var p5t=s($Te);AAr=r(p5t,"roberta"),p5t.forEach(t),yAr=r($Be," \u2014 "),sJ=n($Be,"A",{href:!0});var u5t=s(sJ);LAr=r(u5t,"FlaxRobertaModel"),u5t.forEach(t),xAr=r($Be," (RoBERTa model)"),$Be.forEach(t),$Ar=i(ne),T5=n(ne,"LI",{});var kBe=s(T5);kTe=n(kBe,"STRONG",{});var _5t=s(kTe);kAr=r(_5t,"roformer"),_5t.forEach(t),SAr=r(kBe," \u2014 "),lJ=n(kBe,"A",{href:!0});var b5t=s(lJ);RAr=r(b5t,"FlaxRoFormerModel"),b5t.forEach(t),BAr=r(kBe," (RoFormer model)"),kBe.forEach(t),PAr=i(ne),M5=n(ne,"LI",{});var SBe=s(M5);STe=n(SBe,"STRONG",{});var v5t=s(STe);IAr=r(v5t,"t5"),v5t.forEach(t),qAr=r(SBe," \u2014 "),iJ=n(SBe,"A",{href:!0});var F5t=s(iJ);NAr=r(F5t,"FlaxT5Model"),F5t.forEach(t),jAr=r(SBe," (T5 model)"),SBe.forEach(t),DAr=i(ne),E5=n(ne,"LI",{});var RBe=s(E5);RTe=n(RBe,"STRONG",{});var T5t=s(RTe);GAr=r(T5t,"vision-text-dual-encoder"),T5t.forEach(t),OAr=r(RBe," \u2014 "),dJ=n(RBe,"A",{href:!0});var M5t=s(dJ);VAr=r(M5t,"FlaxVisionTextDualEncoderModel"),M5t.forEach(t),XAr=r(RBe," (VisionTextDualEncoder model)"),RBe.forEach(t),zAr=i(ne),C5=n(ne,"LI",{});var BBe=s(C5);BTe=n(BBe,"STRONG",{});var E5t=s(BTe);QAr=r(E5t,"vit"),E5t.forEach(t),WAr=r(BBe," \u2014 "),cJ=n(BBe,"A",{href:!0});var C5t=s(cJ);HAr=r(C5t,"FlaxViTModel"),C5t.forEach(t),UAr=r(BBe," (ViT model)"),BBe.forEach(t),JAr=i(ne),w5=n(ne,"LI",{});var PBe=s(w5);PTe=n(PBe,"STRONG",{});var w5t=s(PTe);YAr=r(w5t,"wav2vec2"),w5t.forEach(t),KAr=r(PBe," \u2014 "),fJ=n(PBe,"A",{href:!0});var A5t=s(fJ);ZAr=r(A5t,"FlaxWav2Vec2Model"),A5t.forEach(t),eyr=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),oyr=i(ne),A5=n(ne,"LI",{});var IBe=s(A5);ITe=n(IBe,"STRONG",{});var y5t=s(ITe);ryr=r(y5t,"xglm"),y5t.forEach(t),tyr=r(IBe," \u2014 "),mJ=n(IBe,"A",{href:!0});var L5t=s(mJ);ayr=r(L5t,"FlaxXGLMModel"),L5t.forEach(t),nyr=r(IBe," (XGLM model)"),IBe.forEach(t),syr=i(ne),y5=n(ne,"LI",{});var qBe=s(y5);qTe=n(qBe,"STRONG",{});var x5t=s(qTe);lyr=r(x5t,"xlm-roberta"),x5t.forEach(t),iyr=r(qBe," \u2014 "),gJ=n(qBe,"A",{href:!0});var $5t=s(gJ);dyr=r($5t,"FlaxXLMRobertaModel"),$5t.forEach(t),cyr=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),ne.forEach(t),fyr=i(jl),T(L5.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),zqe=i(f),$c=n(f,"H2",{class:!0});var Kje=s($c);x5=n(Kje,"A",{id:!0,class:!0,href:!0});var k5t=s(x5);NTe=n(k5t,"SPAN",{});var S5t=s(NTe);T(nx.$$.fragment,S5t),S5t.forEach(t),k5t.forEach(t),myr=i(Kje),jTe=n(Kje,"SPAN",{});var R5t=s(jTe);gyr=r(R5t,"FlaxAutoModelForCausalLM"),R5t.forEach(t),Kje.forEach(t),Qqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(sx.$$.fragment,Dl),hyr=i(Dl),kc=n(Dl,"P",{});var XZ=s(kc);pyr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hJ=n(XZ,"A",{href:!0});var B5t=s(hJ);uyr=r(B5t,"from_pretrained()"),B5t.forEach(t),_yr=r(XZ," class method or the "),pJ=n(XZ,"A",{href:!0});var P5t=s(pJ);byr=r(P5t,"from_config()"),P5t.forEach(t),vyr=r(XZ,` class
method.`),XZ.forEach(t),Fyr=i(Dl),lx=n(Dl,"P",{});var Zje=s(lx);Tyr=r(Zje,"This class cannot be instantiated directly using "),DTe=n(Zje,"CODE",{});var I5t=s(DTe);Myr=r(I5t,"__init__()"),I5t.forEach(t),Eyr=r(Zje," (throws an error)."),Zje.forEach(t),Cyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var $6=s(Dt);T(ix.$$.fragment,$6),wyr=i($6),GTe=n($6,"P",{});var q5t=s(GTe);Ayr=r(q5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q5t.forEach(t),yyr=i($6),Sc=n($6,"P",{});var zZ=s(Sc);Lyr=r(zZ,`Note:
Loading a model from its configuration file does `),OTe=n(zZ,"STRONG",{});var N5t=s(OTe);xyr=r(N5t,"not"),N5t.forEach(t),$yr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(zZ,"A",{href:!0});var j5t=s(uJ);kyr=r(j5t,"from_pretrained()"),j5t.forEach(t),Syr=r(zZ," to load the model weights."),zZ.forEach(t),Ryr=i($6),T($5.$$.fragment,$6),$6.forEach(t),Byr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(dx.$$.fragment,Gl),Pyr=i(Gl),VTe=n(Gl,"P",{});var D5t=s(VTe);Iyr=r(D5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D5t.forEach(t),qyr=i(Gl),hn=n(Gl,"P",{});var k6=s(hn);Nyr=r(k6,"The model class to instantiate is selected based on the "),XTe=n(k6,"CODE",{});var G5t=s(XTe);jyr=r(G5t,"model_type"),G5t.forEach(t),Dyr=r(k6,` property of the config object (either
passed as an argument or loaded from `),zTe=n(k6,"CODE",{});var O5t=s(zTe);Gyr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),Oyr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(k6,"CODE",{});var V5t=s(QTe);Vyr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),Xyr=r(k6,":"),k6.forEach(t),zyr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);k5=n(Oe,"LI",{});var NBe=s(k5);WTe=n(NBe,"STRONG",{});var X5t=s(WTe);Qyr=r(X5t,"bart"),X5t.forEach(t),Wyr=r(NBe," \u2014 "),_J=n(NBe,"A",{href:!0});var z5t=s(_J);Hyr=r(z5t,"FlaxBartForCausalLM"),z5t.forEach(t),Uyr=r(NBe," (BART model)"),NBe.forEach(t),Jyr=i(Oe),S5=n(Oe,"LI",{});var jBe=s(S5);HTe=n(jBe,"STRONG",{});var Q5t=s(HTe);Yyr=r(Q5t,"bert"),Q5t.forEach(t),Kyr=r(jBe," \u2014 "),bJ=n(jBe,"A",{href:!0});var W5t=s(bJ);Zyr=r(W5t,"FlaxBertForCausalLM"),W5t.forEach(t),eLr=r(jBe," (BERT model)"),jBe.forEach(t),oLr=i(Oe),R5=n(Oe,"LI",{});var DBe=s(R5);UTe=n(DBe,"STRONG",{});var H5t=s(UTe);rLr=r(H5t,"big_bird"),H5t.forEach(t),tLr=r(DBe," \u2014 "),vJ=n(DBe,"A",{href:!0});var U5t=s(vJ);aLr=r(U5t,"FlaxBigBirdForCausalLM"),U5t.forEach(t),nLr=r(DBe," (BigBird model)"),DBe.forEach(t),sLr=i(Oe),B5=n(Oe,"LI",{});var GBe=s(B5);JTe=n(GBe,"STRONG",{});var J5t=s(JTe);lLr=r(J5t,"electra"),J5t.forEach(t),iLr=r(GBe," \u2014 "),FJ=n(GBe,"A",{href:!0});var Y5t=s(FJ);dLr=r(Y5t,"FlaxElectraForCausalLM"),Y5t.forEach(t),cLr=r(GBe," (ELECTRA model)"),GBe.forEach(t),fLr=i(Oe),P5=n(Oe,"LI",{});var OBe=s(P5);YTe=n(OBe,"STRONG",{});var K5t=s(YTe);mLr=r(K5t,"gpt2"),K5t.forEach(t),gLr=r(OBe," \u2014 "),TJ=n(OBe,"A",{href:!0});var Z5t=s(TJ);hLr=r(Z5t,"FlaxGPT2LMHeadModel"),Z5t.forEach(t),pLr=r(OBe," (OpenAI GPT-2 model)"),OBe.forEach(t),uLr=i(Oe),I5=n(Oe,"LI",{});var VBe=s(I5);KTe=n(VBe,"STRONG",{});var eCt=s(KTe);_Lr=r(eCt,"gpt_neo"),eCt.forEach(t),bLr=r(VBe," \u2014 "),MJ=n(VBe,"A",{href:!0});var oCt=s(MJ);vLr=r(oCt,"FlaxGPTNeoForCausalLM"),oCt.forEach(t),FLr=r(VBe," (GPT Neo model)"),VBe.forEach(t),TLr=i(Oe),q5=n(Oe,"LI",{});var XBe=s(q5);ZTe=n(XBe,"STRONG",{});var rCt=s(ZTe);MLr=r(rCt,"gptj"),rCt.forEach(t),ELr=r(XBe," \u2014 "),EJ=n(XBe,"A",{href:!0});var tCt=s(EJ);CLr=r(tCt,"FlaxGPTJForCausalLM"),tCt.forEach(t),wLr=r(XBe," (GPT-J model)"),XBe.forEach(t),ALr=i(Oe),N5=n(Oe,"LI",{});var zBe=s(N5);e7e=n(zBe,"STRONG",{});var aCt=s(e7e);yLr=r(aCt,"roberta"),aCt.forEach(t),LLr=r(zBe," \u2014 "),CJ=n(zBe,"A",{href:!0});var nCt=s(CJ);xLr=r(nCt,"FlaxRobertaForCausalLM"),nCt.forEach(t),$Lr=r(zBe," (RoBERTa model)"),zBe.forEach(t),kLr=i(Oe),j5=n(Oe,"LI",{});var QBe=s(j5);o7e=n(QBe,"STRONG",{});var sCt=s(o7e);SLr=r(sCt,"xglm"),sCt.forEach(t),RLr=r(QBe," \u2014 "),wJ=n(QBe,"A",{href:!0});var lCt=s(wJ);BLr=r(lCt,"FlaxXGLMForCausalLM"),lCt.forEach(t),PLr=r(QBe," (XGLM model)"),QBe.forEach(t),Oe.forEach(t),ILr=i(Gl),T(D5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Wqe=i(f),Rc=n(f,"H2",{class:!0});var eDe=s(Rc);G5=n(eDe,"A",{id:!0,class:!0,href:!0});var iCt=s(G5);r7e=n(iCt,"SPAN",{});var dCt=s(r7e);T(cx.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),qLr=i(eDe),t7e=n(eDe,"SPAN",{});var cCt=s(t7e);NLr=r(cCt,"FlaxAutoModelForPreTraining"),cCt.forEach(t),eDe.forEach(t),Hqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(fx.$$.fragment,Ol),jLr=i(Ol),Bc=n(Ol,"P",{});var QZ=s(Bc);DLr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AJ=n(QZ,"A",{href:!0});var fCt=s(AJ);GLr=r(fCt,"from_pretrained()"),fCt.forEach(t),OLr=r(QZ," class method or the "),yJ=n(QZ,"A",{href:!0});var mCt=s(yJ);VLr=r(mCt,"from_config()"),mCt.forEach(t),XLr=r(QZ,` class
method.`),QZ.forEach(t),zLr=i(Ol),mx=n(Ol,"P",{});var oDe=s(mx);QLr=r(oDe,"This class cannot be instantiated directly using "),a7e=n(oDe,"CODE",{});var gCt=s(a7e);WLr=r(gCt,"__init__()"),gCt.forEach(t),HLr=r(oDe," (throws an error)."),oDe.forEach(t),ULr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var S6=s(Gt);T(gx.$$.fragment,S6),JLr=i(S6),n7e=n(S6,"P",{});var hCt=s(n7e);YLr=r(hCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hCt.forEach(t),KLr=i(S6),Pc=n(S6,"P",{});var WZ=s(Pc);ZLr=r(WZ,`Note:
Loading a model from its configuration file does `),s7e=n(WZ,"STRONG",{});var pCt=s(s7e);e8r=r(pCt,"not"),pCt.forEach(t),o8r=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(WZ,"A",{href:!0});var uCt=s(LJ);r8r=r(uCt,"from_pretrained()"),uCt.forEach(t),t8r=r(WZ," to load the model weights."),WZ.forEach(t),a8r=i(S6),T(O5.$$.fragment,S6),S6.forEach(t),n8r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(hx.$$.fragment,Vl),s8r=i(Vl),l7e=n(Vl,"P",{});var _Ct=s(l7e);l8r=r(_Ct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Ct.forEach(t),i8r=i(Vl),pn=n(Vl,"P",{});var R6=s(pn);d8r=r(R6,"The model class to instantiate is selected based on the "),i7e=n(R6,"CODE",{});var bCt=s(i7e);c8r=r(bCt,"model_type"),bCt.forEach(t),f8r=r(R6,` property of the config object (either
passed as an argument or loaded from `),d7e=n(R6,"CODE",{});var vCt=s(d7e);m8r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),g8r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(R6,"CODE",{});var FCt=s(c7e);h8r=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),p8r=r(R6,":"),R6.forEach(t),u8r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);V5=n(we,"LI",{});var WBe=s(V5);f7e=n(WBe,"STRONG",{});var TCt=s(f7e);_8r=r(TCt,"albert"),TCt.forEach(t),b8r=r(WBe," \u2014 "),xJ=n(WBe,"A",{href:!0});var MCt=s(xJ);v8r=r(MCt,"FlaxAlbertForPreTraining"),MCt.forEach(t),F8r=r(WBe," (ALBERT model)"),WBe.forEach(t),T8r=i(we),X5=n(we,"LI",{});var HBe=s(X5);m7e=n(HBe,"STRONG",{});var ECt=s(m7e);M8r=r(ECt,"bart"),ECt.forEach(t),E8r=r(HBe," \u2014 "),$J=n(HBe,"A",{href:!0});var CCt=s($J);C8r=r(CCt,"FlaxBartForConditionalGeneration"),CCt.forEach(t),w8r=r(HBe," (BART model)"),HBe.forEach(t),A8r=i(we),z5=n(we,"LI",{});var UBe=s(z5);g7e=n(UBe,"STRONG",{});var wCt=s(g7e);y8r=r(wCt,"bert"),wCt.forEach(t),L8r=r(UBe," \u2014 "),kJ=n(UBe,"A",{href:!0});var ACt=s(kJ);x8r=r(ACt,"FlaxBertForPreTraining"),ACt.forEach(t),$8r=r(UBe," (BERT model)"),UBe.forEach(t),k8r=i(we),Q5=n(we,"LI",{});var JBe=s(Q5);h7e=n(JBe,"STRONG",{});var yCt=s(h7e);S8r=r(yCt,"big_bird"),yCt.forEach(t),R8r=r(JBe," \u2014 "),SJ=n(JBe,"A",{href:!0});var LCt=s(SJ);B8r=r(LCt,"FlaxBigBirdForPreTraining"),LCt.forEach(t),P8r=r(JBe," (BigBird model)"),JBe.forEach(t),I8r=i(we),W5=n(we,"LI",{});var YBe=s(W5);p7e=n(YBe,"STRONG",{});var xCt=s(p7e);q8r=r(xCt,"electra"),xCt.forEach(t),N8r=r(YBe," \u2014 "),RJ=n(YBe,"A",{href:!0});var $Ct=s(RJ);j8r=r($Ct,"FlaxElectraForPreTraining"),$Ct.forEach(t),D8r=r(YBe," (ELECTRA model)"),YBe.forEach(t),G8r=i(we),H5=n(we,"LI",{});var KBe=s(H5);u7e=n(KBe,"STRONG",{});var kCt=s(u7e);O8r=r(kCt,"mbart"),kCt.forEach(t),V8r=r(KBe," \u2014 "),BJ=n(KBe,"A",{href:!0});var SCt=s(BJ);X8r=r(SCt,"FlaxMBartForConditionalGeneration"),SCt.forEach(t),z8r=r(KBe," (mBART model)"),KBe.forEach(t),Q8r=i(we),U5=n(we,"LI",{});var ZBe=s(U5);_7e=n(ZBe,"STRONG",{});var RCt=s(_7e);W8r=r(RCt,"mt5"),RCt.forEach(t),H8r=r(ZBe," \u2014 "),PJ=n(ZBe,"A",{href:!0});var BCt=s(PJ);U8r=r(BCt,"FlaxMT5ForConditionalGeneration"),BCt.forEach(t),J8r=r(ZBe," (mT5 model)"),ZBe.forEach(t),Y8r=i(we),J5=n(we,"LI",{});var ePe=s(J5);b7e=n(ePe,"STRONG",{});var PCt=s(b7e);K8r=r(PCt,"roberta"),PCt.forEach(t),Z8r=r(ePe," \u2014 "),IJ=n(ePe,"A",{href:!0});var ICt=s(IJ);exr=r(ICt,"FlaxRobertaForMaskedLM"),ICt.forEach(t),oxr=r(ePe," (RoBERTa model)"),ePe.forEach(t),rxr=i(we),Y5=n(we,"LI",{});var oPe=s(Y5);v7e=n(oPe,"STRONG",{});var qCt=s(v7e);txr=r(qCt,"roformer"),qCt.forEach(t),axr=r(oPe," \u2014 "),qJ=n(oPe,"A",{href:!0});var NCt=s(qJ);nxr=r(NCt,"FlaxRoFormerForMaskedLM"),NCt.forEach(t),sxr=r(oPe," (RoFormer model)"),oPe.forEach(t),lxr=i(we),K5=n(we,"LI",{});var rPe=s(K5);F7e=n(rPe,"STRONG",{});var jCt=s(F7e);ixr=r(jCt,"t5"),jCt.forEach(t),dxr=r(rPe," \u2014 "),NJ=n(rPe,"A",{href:!0});var DCt=s(NJ);cxr=r(DCt,"FlaxT5ForConditionalGeneration"),DCt.forEach(t),fxr=r(rPe," (T5 model)"),rPe.forEach(t),mxr=i(we),Z5=n(we,"LI",{});var tPe=s(Z5);T7e=n(tPe,"STRONG",{});var GCt=s(T7e);gxr=r(GCt,"wav2vec2"),GCt.forEach(t),hxr=r(tPe," \u2014 "),jJ=n(tPe,"A",{href:!0});var OCt=s(jJ);pxr=r(OCt,"FlaxWav2Vec2ForPreTraining"),OCt.forEach(t),uxr=r(tPe," (Wav2Vec2 model)"),tPe.forEach(t),_xr=i(we),eC=n(we,"LI",{});var aPe=s(eC);M7e=n(aPe,"STRONG",{});var VCt=s(M7e);bxr=r(VCt,"xlm-roberta"),VCt.forEach(t),vxr=r(aPe," \u2014 "),DJ=n(aPe,"A",{href:!0});var XCt=s(DJ);Fxr=r(XCt,"FlaxXLMRobertaForMaskedLM"),XCt.forEach(t),Txr=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),we.forEach(t),Mxr=i(Vl),T(oC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Uqe=i(f),Ic=n(f,"H2",{class:!0});var rDe=s(Ic);rC=n(rDe,"A",{id:!0,class:!0,href:!0});var zCt=s(rC);E7e=n(zCt,"SPAN",{});var QCt=s(E7e);T(px.$$.fragment,QCt),QCt.forEach(t),zCt.forEach(t),Exr=i(rDe),C7e=n(rDe,"SPAN",{});var WCt=s(C7e);Cxr=r(WCt,"FlaxAutoModelForMaskedLM"),WCt.forEach(t),rDe.forEach(t),Jqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(ux.$$.fragment,Xl),wxr=i(Xl),qc=n(Xl,"P",{});var HZ=s(qc);Axr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GJ=n(HZ,"A",{href:!0});var HCt=s(GJ);yxr=r(HCt,"from_pretrained()"),HCt.forEach(t),Lxr=r(HZ," class method or the "),OJ=n(HZ,"A",{href:!0});var UCt=s(OJ);xxr=r(UCt,"from_config()"),UCt.forEach(t),$xr=r(HZ,` class
method.`),HZ.forEach(t),kxr=i(Xl),_x=n(Xl,"P",{});var tDe=s(_x);Sxr=r(tDe,"This class cannot be instantiated directly using "),w7e=n(tDe,"CODE",{});var JCt=s(w7e);Rxr=r(JCt,"__init__()"),JCt.forEach(t),Bxr=r(tDe," (throws an error)."),tDe.forEach(t),Pxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var B6=s(Ot);T(bx.$$.fragment,B6),Ixr=i(B6),A7e=n(B6,"P",{});var YCt=s(A7e);qxr=r(YCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YCt.forEach(t),Nxr=i(B6),Nc=n(B6,"P",{});var UZ=s(Nc);jxr=r(UZ,`Note:
Loading a model from its configuration file does `),y7e=n(UZ,"STRONG",{});var KCt=s(y7e);Dxr=r(KCt,"not"),KCt.forEach(t),Gxr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(UZ,"A",{href:!0});var ZCt=s(VJ);Oxr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),Vxr=r(UZ," to load the model weights."),UZ.forEach(t),Xxr=i(B6),T(tC.$$.fragment,B6),B6.forEach(t),zxr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(vx.$$.fragment,zl),Qxr=i(zl),L7e=n(zl,"P",{});var e3t=s(L7e);Wxr=r(e3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e3t.forEach(t),Hxr=i(zl),un=n(zl,"P",{});var P6=s(un);Uxr=r(P6,"The model class to instantiate is selected based on the "),x7e=n(P6,"CODE",{});var o3t=s(x7e);Jxr=r(o3t,"model_type"),o3t.forEach(t),Yxr=r(P6,` property of the config object (either
passed as an argument or loaded from `),$7e=n(P6,"CODE",{});var r3t=s($7e);Kxr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),Zxr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k7e=n(P6,"CODE",{});var t3t=s(k7e);e9r=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),o9r=r(P6,":"),P6.forEach(t),r9r=i(zl),Le=n(zl,"UL",{});var Be=s(Le);aC=n(Be,"LI",{});var nPe=s(aC);S7e=n(nPe,"STRONG",{});var a3t=s(S7e);t9r=r(a3t,"albert"),a3t.forEach(t),a9r=r(nPe," \u2014 "),XJ=n(nPe,"A",{href:!0});var n3t=s(XJ);n9r=r(n3t,"FlaxAlbertForMaskedLM"),n3t.forEach(t),s9r=r(nPe," (ALBERT model)"),nPe.forEach(t),l9r=i(Be),nC=n(Be,"LI",{});var sPe=s(nC);R7e=n(sPe,"STRONG",{});var s3t=s(R7e);i9r=r(s3t,"bart"),s3t.forEach(t),d9r=r(sPe," \u2014 "),zJ=n(sPe,"A",{href:!0});var l3t=s(zJ);c9r=r(l3t,"FlaxBartForConditionalGeneration"),l3t.forEach(t),f9r=r(sPe," (BART model)"),sPe.forEach(t),m9r=i(Be),sC=n(Be,"LI",{});var lPe=s(sC);B7e=n(lPe,"STRONG",{});var i3t=s(B7e);g9r=r(i3t,"bert"),i3t.forEach(t),h9r=r(lPe," \u2014 "),QJ=n(lPe,"A",{href:!0});var d3t=s(QJ);p9r=r(d3t,"FlaxBertForMaskedLM"),d3t.forEach(t),u9r=r(lPe," (BERT model)"),lPe.forEach(t),_9r=i(Be),lC=n(Be,"LI",{});var iPe=s(lC);P7e=n(iPe,"STRONG",{});var c3t=s(P7e);b9r=r(c3t,"big_bird"),c3t.forEach(t),v9r=r(iPe," \u2014 "),WJ=n(iPe,"A",{href:!0});var f3t=s(WJ);F9r=r(f3t,"FlaxBigBirdForMaskedLM"),f3t.forEach(t),T9r=r(iPe," (BigBird model)"),iPe.forEach(t),M9r=i(Be),iC=n(Be,"LI",{});var dPe=s(iC);I7e=n(dPe,"STRONG",{});var m3t=s(I7e);E9r=r(m3t,"distilbert"),m3t.forEach(t),C9r=r(dPe," \u2014 "),HJ=n(dPe,"A",{href:!0});var g3t=s(HJ);w9r=r(g3t,"FlaxDistilBertForMaskedLM"),g3t.forEach(t),A9r=r(dPe," (DistilBERT model)"),dPe.forEach(t),y9r=i(Be),dC=n(Be,"LI",{});var cPe=s(dC);q7e=n(cPe,"STRONG",{});var h3t=s(q7e);L9r=r(h3t,"electra"),h3t.forEach(t),x9r=r(cPe," \u2014 "),UJ=n(cPe,"A",{href:!0});var p3t=s(UJ);$9r=r(p3t,"FlaxElectraForMaskedLM"),p3t.forEach(t),k9r=r(cPe," (ELECTRA model)"),cPe.forEach(t),S9r=i(Be),cC=n(Be,"LI",{});var fPe=s(cC);N7e=n(fPe,"STRONG",{});var u3t=s(N7e);R9r=r(u3t,"mbart"),u3t.forEach(t),B9r=r(fPe," \u2014 "),JJ=n(fPe,"A",{href:!0});var _3t=s(JJ);P9r=r(_3t,"FlaxMBartForConditionalGeneration"),_3t.forEach(t),I9r=r(fPe," (mBART model)"),fPe.forEach(t),q9r=i(Be),fC=n(Be,"LI",{});var mPe=s(fC);j7e=n(mPe,"STRONG",{});var b3t=s(j7e);N9r=r(b3t,"roberta"),b3t.forEach(t),j9r=r(mPe," \u2014 "),YJ=n(mPe,"A",{href:!0});var v3t=s(YJ);D9r=r(v3t,"FlaxRobertaForMaskedLM"),v3t.forEach(t),G9r=r(mPe," (RoBERTa model)"),mPe.forEach(t),O9r=i(Be),mC=n(Be,"LI",{});var gPe=s(mC);D7e=n(gPe,"STRONG",{});var F3t=s(D7e);V9r=r(F3t,"roformer"),F3t.forEach(t),X9r=r(gPe," \u2014 "),KJ=n(gPe,"A",{href:!0});var T3t=s(KJ);z9r=r(T3t,"FlaxRoFormerForMaskedLM"),T3t.forEach(t),Q9r=r(gPe," (RoFormer model)"),gPe.forEach(t),W9r=i(Be),gC=n(Be,"LI",{});var hPe=s(gC);G7e=n(hPe,"STRONG",{});var M3t=s(G7e);H9r=r(M3t,"xlm-roberta"),M3t.forEach(t),U9r=r(hPe," \u2014 "),ZJ=n(hPe,"A",{href:!0});var E3t=s(ZJ);J9r=r(E3t,"FlaxXLMRobertaForMaskedLM"),E3t.forEach(t),Y9r=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),Be.forEach(t),K9r=i(zl),T(hC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Yqe=i(f),jc=n(f,"H2",{class:!0});var aDe=s(jc);pC=n(aDe,"A",{id:!0,class:!0,href:!0});var C3t=s(pC);O7e=n(C3t,"SPAN",{});var w3t=s(O7e);T(Fx.$$.fragment,w3t),w3t.forEach(t),C3t.forEach(t),Z9r=i(aDe),V7e=n(aDe,"SPAN",{});var A3t=s(V7e);e$r=r(A3t,"FlaxAutoModelForSeq2SeqLM"),A3t.forEach(t),aDe.forEach(t),Kqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(Tx.$$.fragment,Ql),o$r=i(Ql),Dc=n(Ql,"P",{});var JZ=s(Dc);r$r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eY=n(JZ,"A",{href:!0});var y3t=s(eY);t$r=r(y3t,"from_pretrained()"),y3t.forEach(t),a$r=r(JZ," class method or the "),oY=n(JZ,"A",{href:!0});var L3t=s(oY);n$r=r(L3t,"from_config()"),L3t.forEach(t),s$r=r(JZ,` class
method.`),JZ.forEach(t),l$r=i(Ql),Mx=n(Ql,"P",{});var nDe=s(Mx);i$r=r(nDe,"This class cannot be instantiated directly using "),X7e=n(nDe,"CODE",{});var x3t=s(X7e);d$r=r(x3t,"__init__()"),x3t.forEach(t),c$r=r(nDe," (throws an error)."),nDe.forEach(t),f$r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var I6=s(Vt);T(Ex.$$.fragment,I6),m$r=i(I6),z7e=n(I6,"P",{});var $3t=s(z7e);g$r=r($3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$3t.forEach(t),h$r=i(I6),Gc=n(I6,"P",{});var YZ=s(Gc);p$r=r(YZ,`Note:
Loading a model from its configuration file does `),Q7e=n(YZ,"STRONG",{});var k3t=s(Q7e);u$r=r(k3t,"not"),k3t.forEach(t),_$r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(YZ,"A",{href:!0});var S3t=s(rY);b$r=r(S3t,"from_pretrained()"),S3t.forEach(t),v$r=r(YZ," to load the model weights."),YZ.forEach(t),F$r=i(I6),T(uC.$$.fragment,I6),I6.forEach(t),T$r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(Cx.$$.fragment,Wl),M$r=i(Wl),W7e=n(Wl,"P",{});var R3t=s(W7e);E$r=r(R3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R3t.forEach(t),C$r=i(Wl),_n=n(Wl,"P",{});var q6=s(_n);w$r=r(q6,"The model class to instantiate is selected based on the "),H7e=n(q6,"CODE",{});var B3t=s(H7e);A$r=r(B3t,"model_type"),B3t.forEach(t),y$r=r(q6,` property of the config object (either
passed as an argument or loaded from `),U7e=n(q6,"CODE",{});var P3t=s(U7e);L$r=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),x$r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(q6,"CODE",{});var I3t=s(J7e);$$r=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),k$r=r(q6,":"),q6.forEach(t),S$r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);_C=n(Ve,"LI",{});var pPe=s(_C);Y7e=n(pPe,"STRONG",{});var q3t=s(Y7e);R$r=r(q3t,"bart"),q3t.forEach(t),B$r=r(pPe," \u2014 "),tY=n(pPe,"A",{href:!0});var N3t=s(tY);P$r=r(N3t,"FlaxBartForConditionalGeneration"),N3t.forEach(t),I$r=r(pPe," (BART model)"),pPe.forEach(t),q$r=i(Ve),bC=n(Ve,"LI",{});var uPe=s(bC);K7e=n(uPe,"STRONG",{});var j3t=s(K7e);N$r=r(j3t,"blenderbot"),j3t.forEach(t),j$r=r(uPe," \u2014 "),aY=n(uPe,"A",{href:!0});var D3t=s(aY);D$r=r(D3t,"FlaxBlenderbotForConditionalGeneration"),D3t.forEach(t),G$r=r(uPe," (Blenderbot model)"),uPe.forEach(t),O$r=i(Ve),vC=n(Ve,"LI",{});var _Pe=s(vC);Z7e=n(_Pe,"STRONG",{});var G3t=s(Z7e);V$r=r(G3t,"blenderbot-small"),G3t.forEach(t),X$r=r(_Pe," \u2014 "),nY=n(_Pe,"A",{href:!0});var O3t=s(nY);z$r=r(O3t,"FlaxBlenderbotSmallForConditionalGeneration"),O3t.forEach(t),Q$r=r(_Pe," (BlenderbotSmall model)"),_Pe.forEach(t),W$r=i(Ve),FC=n(Ve,"LI",{});var bPe=s(FC);eMe=n(bPe,"STRONG",{});var V3t=s(eMe);H$r=r(V3t,"encoder-decoder"),V3t.forEach(t),U$r=r(bPe," \u2014 "),sY=n(bPe,"A",{href:!0});var X3t=s(sY);J$r=r(X3t,"FlaxEncoderDecoderModel"),X3t.forEach(t),Y$r=r(bPe," (Encoder decoder model)"),bPe.forEach(t),K$r=i(Ve),TC=n(Ve,"LI",{});var vPe=s(TC);oMe=n(vPe,"STRONG",{});var z3t=s(oMe);Z$r=r(z3t,"marian"),z3t.forEach(t),ekr=r(vPe," \u2014 "),lY=n(vPe,"A",{href:!0});var Q3t=s(lY);okr=r(Q3t,"FlaxMarianMTModel"),Q3t.forEach(t),rkr=r(vPe," (Marian model)"),vPe.forEach(t),tkr=i(Ve),MC=n(Ve,"LI",{});var FPe=s(MC);rMe=n(FPe,"STRONG",{});var W3t=s(rMe);akr=r(W3t,"mbart"),W3t.forEach(t),nkr=r(FPe," \u2014 "),iY=n(FPe,"A",{href:!0});var H3t=s(iY);skr=r(H3t,"FlaxMBartForConditionalGeneration"),H3t.forEach(t),lkr=r(FPe," (mBART model)"),FPe.forEach(t),ikr=i(Ve),EC=n(Ve,"LI",{});var TPe=s(EC);tMe=n(TPe,"STRONG",{});var U3t=s(tMe);dkr=r(U3t,"mt5"),U3t.forEach(t),ckr=r(TPe," \u2014 "),dY=n(TPe,"A",{href:!0});var J3t=s(dY);fkr=r(J3t,"FlaxMT5ForConditionalGeneration"),J3t.forEach(t),mkr=r(TPe," (mT5 model)"),TPe.forEach(t),gkr=i(Ve),CC=n(Ve,"LI",{});var MPe=s(CC);aMe=n(MPe,"STRONG",{});var Y3t=s(aMe);hkr=r(Y3t,"pegasus"),Y3t.forEach(t),pkr=r(MPe," \u2014 "),cY=n(MPe,"A",{href:!0});var K3t=s(cY);ukr=r(K3t,"FlaxPegasusForConditionalGeneration"),K3t.forEach(t),_kr=r(MPe," (Pegasus model)"),MPe.forEach(t),bkr=i(Ve),wC=n(Ve,"LI",{});var EPe=s(wC);nMe=n(EPe,"STRONG",{});var Z3t=s(nMe);vkr=r(Z3t,"t5"),Z3t.forEach(t),Fkr=r(EPe," \u2014 "),fY=n(EPe,"A",{href:!0});var ewt=s(fY);Tkr=r(ewt,"FlaxT5ForConditionalGeneration"),ewt.forEach(t),Mkr=r(EPe," (T5 model)"),EPe.forEach(t),Ve.forEach(t),Ekr=i(Wl),T(AC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Zqe=i(f),Oc=n(f,"H2",{class:!0});var sDe=s(Oc);yC=n(sDe,"A",{id:!0,class:!0,href:!0});var owt=s(yC);sMe=n(owt,"SPAN",{});var rwt=s(sMe);T(wx.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),Ckr=i(sDe),lMe=n(sDe,"SPAN",{});var twt=s(lMe);wkr=r(twt,"FlaxAutoModelForSequenceClassification"),twt.forEach(t),sDe.forEach(t),eNe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(Ax.$$.fragment,Hl),Akr=i(Hl),Vc=n(Hl,"P",{});var KZ=s(Vc);ykr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mY=n(KZ,"A",{href:!0});var awt=s(mY);Lkr=r(awt,"from_pretrained()"),awt.forEach(t),xkr=r(KZ," class method or the "),gY=n(KZ,"A",{href:!0});var nwt=s(gY);$kr=r(nwt,"from_config()"),nwt.forEach(t),kkr=r(KZ,` class
method.`),KZ.forEach(t),Skr=i(Hl),yx=n(Hl,"P",{});var lDe=s(yx);Rkr=r(lDe,"This class cannot be instantiated directly using "),iMe=n(lDe,"CODE",{});var swt=s(iMe);Bkr=r(swt,"__init__()"),swt.forEach(t),Pkr=r(lDe," (throws an error)."),lDe.forEach(t),Ikr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var N6=s(Xt);T(Lx.$$.fragment,N6),qkr=i(N6),dMe=n(N6,"P",{});var lwt=s(dMe);Nkr=r(lwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lwt.forEach(t),jkr=i(N6),Xc=n(N6,"P",{});var ZZ=s(Xc);Dkr=r(ZZ,`Note:
Loading a model from its configuration file does `),cMe=n(ZZ,"STRONG",{});var iwt=s(cMe);Gkr=r(iwt,"not"),iwt.forEach(t),Okr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(ZZ,"A",{href:!0});var dwt=s(hY);Vkr=r(dwt,"from_pretrained()"),dwt.forEach(t),Xkr=r(ZZ," to load the model weights."),ZZ.forEach(t),zkr=i(N6),T(LC.$$.fragment,N6),N6.forEach(t),Qkr=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(xx.$$.fragment,Ul),Wkr=i(Ul),fMe=n(Ul,"P",{});var cwt=s(fMe);Hkr=r(cwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cwt.forEach(t),Ukr=i(Ul),bn=n(Ul,"P",{});var j6=s(bn);Jkr=r(j6,"The model class to instantiate is selected based on the "),mMe=n(j6,"CODE",{});var fwt=s(mMe);Ykr=r(fwt,"model_type"),fwt.forEach(t),Kkr=r(j6,` property of the config object (either
passed as an argument or loaded from `),gMe=n(j6,"CODE",{});var mwt=s(gMe);Zkr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),eSr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(j6,"CODE",{});var gwt=s(hMe);oSr=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),rSr=r(j6,":"),j6.forEach(t),tSr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);xC=n(Pe,"LI",{});var CPe=s(xC);pMe=n(CPe,"STRONG",{});var hwt=s(pMe);aSr=r(hwt,"albert"),hwt.forEach(t),nSr=r(CPe," \u2014 "),pY=n(CPe,"A",{href:!0});var pwt=s(pY);sSr=r(pwt,"FlaxAlbertForSequenceClassification"),pwt.forEach(t),lSr=r(CPe," (ALBERT model)"),CPe.forEach(t),iSr=i(Pe),$C=n(Pe,"LI",{});var wPe=s($C);uMe=n(wPe,"STRONG",{});var uwt=s(uMe);dSr=r(uwt,"bart"),uwt.forEach(t),cSr=r(wPe," \u2014 "),uY=n(wPe,"A",{href:!0});var _wt=s(uY);fSr=r(_wt,"FlaxBartForSequenceClassification"),_wt.forEach(t),mSr=r(wPe," (BART model)"),wPe.forEach(t),gSr=i(Pe),kC=n(Pe,"LI",{});var APe=s(kC);_Me=n(APe,"STRONG",{});var bwt=s(_Me);hSr=r(bwt,"bert"),bwt.forEach(t),pSr=r(APe," \u2014 "),_Y=n(APe,"A",{href:!0});var vwt=s(_Y);uSr=r(vwt,"FlaxBertForSequenceClassification"),vwt.forEach(t),_Sr=r(APe," (BERT model)"),APe.forEach(t),bSr=i(Pe),SC=n(Pe,"LI",{});var yPe=s(SC);bMe=n(yPe,"STRONG",{});var Fwt=s(bMe);vSr=r(Fwt,"big_bird"),Fwt.forEach(t),FSr=r(yPe," \u2014 "),bY=n(yPe,"A",{href:!0});var Twt=s(bY);TSr=r(Twt,"FlaxBigBirdForSequenceClassification"),Twt.forEach(t),MSr=r(yPe," (BigBird model)"),yPe.forEach(t),ESr=i(Pe),RC=n(Pe,"LI",{});var LPe=s(RC);vMe=n(LPe,"STRONG",{});var Mwt=s(vMe);CSr=r(Mwt,"distilbert"),Mwt.forEach(t),wSr=r(LPe," \u2014 "),vY=n(LPe,"A",{href:!0});var Ewt=s(vY);ASr=r(Ewt,"FlaxDistilBertForSequenceClassification"),Ewt.forEach(t),ySr=r(LPe," (DistilBERT model)"),LPe.forEach(t),LSr=i(Pe),BC=n(Pe,"LI",{});var xPe=s(BC);FMe=n(xPe,"STRONG",{});var Cwt=s(FMe);xSr=r(Cwt,"electra"),Cwt.forEach(t),$Sr=r(xPe," \u2014 "),FY=n(xPe,"A",{href:!0});var wwt=s(FY);kSr=r(wwt,"FlaxElectraForSequenceClassification"),wwt.forEach(t),SSr=r(xPe," (ELECTRA model)"),xPe.forEach(t),RSr=i(Pe),PC=n(Pe,"LI",{});var $Pe=s(PC);TMe=n($Pe,"STRONG",{});var Awt=s(TMe);BSr=r(Awt,"mbart"),Awt.forEach(t),PSr=r($Pe," \u2014 "),TY=n($Pe,"A",{href:!0});var ywt=s(TY);ISr=r(ywt,"FlaxMBartForSequenceClassification"),ywt.forEach(t),qSr=r($Pe," (mBART model)"),$Pe.forEach(t),NSr=i(Pe),IC=n(Pe,"LI",{});var kPe=s(IC);MMe=n(kPe,"STRONG",{});var Lwt=s(MMe);jSr=r(Lwt,"roberta"),Lwt.forEach(t),DSr=r(kPe," \u2014 "),MY=n(kPe,"A",{href:!0});var xwt=s(MY);GSr=r(xwt,"FlaxRobertaForSequenceClassification"),xwt.forEach(t),OSr=r(kPe," (RoBERTa model)"),kPe.forEach(t),VSr=i(Pe),qC=n(Pe,"LI",{});var SPe=s(qC);EMe=n(SPe,"STRONG",{});var $wt=s(EMe);XSr=r($wt,"roformer"),$wt.forEach(t),zSr=r(SPe," \u2014 "),EY=n(SPe,"A",{href:!0});var kwt=s(EY);QSr=r(kwt,"FlaxRoFormerForSequenceClassification"),kwt.forEach(t),WSr=r(SPe," (RoFormer model)"),SPe.forEach(t),HSr=i(Pe),NC=n(Pe,"LI",{});var RPe=s(NC);CMe=n(RPe,"STRONG",{});var Swt=s(CMe);USr=r(Swt,"xlm-roberta"),Swt.forEach(t),JSr=r(RPe," \u2014 "),CY=n(RPe,"A",{href:!0});var Rwt=s(CY);YSr=r(Rwt,"FlaxXLMRobertaForSequenceClassification"),Rwt.forEach(t),KSr=r(RPe," (XLM-RoBERTa model)"),RPe.forEach(t),Pe.forEach(t),ZSr=i(Ul),T(jC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),oNe=i(f),zc=n(f,"H2",{class:!0});var iDe=s(zc);DC=n(iDe,"A",{id:!0,class:!0,href:!0});var Bwt=s(DC);wMe=n(Bwt,"SPAN",{});var Pwt=s(wMe);T($x.$$.fragment,Pwt),Pwt.forEach(t),Bwt.forEach(t),eRr=i(iDe),AMe=n(iDe,"SPAN",{});var Iwt=s(AMe);oRr=r(Iwt,"FlaxAutoModelForQuestionAnswering"),Iwt.forEach(t),iDe.forEach(t),rNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(kx.$$.fragment,Jl),rRr=i(Jl),Qc=n(Jl,"P",{});var eee=s(Qc);tRr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wY=n(eee,"A",{href:!0});var qwt=s(wY);aRr=r(qwt,"from_pretrained()"),qwt.forEach(t),nRr=r(eee," class method or the "),AY=n(eee,"A",{href:!0});var Nwt=s(AY);sRr=r(Nwt,"from_config()"),Nwt.forEach(t),lRr=r(eee,` class
method.`),eee.forEach(t),iRr=i(Jl),Sx=n(Jl,"P",{});var dDe=s(Sx);dRr=r(dDe,"This class cannot be instantiated directly using "),yMe=n(dDe,"CODE",{});var jwt=s(yMe);cRr=r(jwt,"__init__()"),jwt.forEach(t),fRr=r(dDe," (throws an error)."),dDe.forEach(t),mRr=i(Jl),zt=n(Jl,"DIV",{class:!0});var D6=s(zt);T(Rx.$$.fragment,D6),gRr=i(D6),LMe=n(D6,"P",{});var Dwt=s(LMe);hRr=r(Dwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dwt.forEach(t),pRr=i(D6),Wc=n(D6,"P",{});var oee=s(Wc);uRr=r(oee,`Note:
Loading a model from its configuration file does `),xMe=n(oee,"STRONG",{});var Gwt=s(xMe);_Rr=r(Gwt,"not"),Gwt.forEach(t),bRr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(oee,"A",{href:!0});var Owt=s(yY);vRr=r(Owt,"from_pretrained()"),Owt.forEach(t),FRr=r(oee," to load the model weights."),oee.forEach(t),TRr=i(D6),T(GC.$$.fragment,D6),D6.forEach(t),MRr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Bx.$$.fragment,Yl),ERr=i(Yl),$Me=n(Yl,"P",{});var Vwt=s($Me);CRr=r(Vwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vwt.forEach(t),wRr=i(Yl),vn=n(Yl,"P",{});var G6=s(vn);ARr=r(G6,"The model class to instantiate is selected based on the "),kMe=n(G6,"CODE",{});var Xwt=s(kMe);yRr=r(Xwt,"model_type"),Xwt.forEach(t),LRr=r(G6,` property of the config object (either
passed as an argument or loaded from `),SMe=n(G6,"CODE",{});var zwt=s(SMe);xRr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),$Rr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(G6,"CODE",{});var Qwt=s(RMe);kRr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),SRr=r(G6,":"),G6.forEach(t),RRr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);OC=n(Ie,"LI",{});var BPe=s(OC);BMe=n(BPe,"STRONG",{});var Wwt=s(BMe);BRr=r(Wwt,"albert"),Wwt.forEach(t),PRr=r(BPe," \u2014 "),LY=n(BPe,"A",{href:!0});var Hwt=s(LY);IRr=r(Hwt,"FlaxAlbertForQuestionAnswering"),Hwt.forEach(t),qRr=r(BPe," (ALBERT model)"),BPe.forEach(t),NRr=i(Ie),VC=n(Ie,"LI",{});var PPe=s(VC);PMe=n(PPe,"STRONG",{});var Uwt=s(PMe);jRr=r(Uwt,"bart"),Uwt.forEach(t),DRr=r(PPe," \u2014 "),xY=n(PPe,"A",{href:!0});var Jwt=s(xY);GRr=r(Jwt,"FlaxBartForQuestionAnswering"),Jwt.forEach(t),ORr=r(PPe," (BART model)"),PPe.forEach(t),VRr=i(Ie),XC=n(Ie,"LI",{});var IPe=s(XC);IMe=n(IPe,"STRONG",{});var Ywt=s(IMe);XRr=r(Ywt,"bert"),Ywt.forEach(t),zRr=r(IPe," \u2014 "),$Y=n(IPe,"A",{href:!0});var Kwt=s($Y);QRr=r(Kwt,"FlaxBertForQuestionAnswering"),Kwt.forEach(t),WRr=r(IPe," (BERT model)"),IPe.forEach(t),HRr=i(Ie),zC=n(Ie,"LI",{});var qPe=s(zC);qMe=n(qPe,"STRONG",{});var Zwt=s(qMe);URr=r(Zwt,"big_bird"),Zwt.forEach(t),JRr=r(qPe," \u2014 "),kY=n(qPe,"A",{href:!0});var e6t=s(kY);YRr=r(e6t,"FlaxBigBirdForQuestionAnswering"),e6t.forEach(t),KRr=r(qPe," (BigBird model)"),qPe.forEach(t),ZRr=i(Ie),QC=n(Ie,"LI",{});var NPe=s(QC);NMe=n(NPe,"STRONG",{});var o6t=s(NMe);eBr=r(o6t,"distilbert"),o6t.forEach(t),oBr=r(NPe," \u2014 "),SY=n(NPe,"A",{href:!0});var r6t=s(SY);rBr=r(r6t,"FlaxDistilBertForQuestionAnswering"),r6t.forEach(t),tBr=r(NPe," (DistilBERT model)"),NPe.forEach(t),aBr=i(Ie),WC=n(Ie,"LI",{});var jPe=s(WC);jMe=n(jPe,"STRONG",{});var t6t=s(jMe);nBr=r(t6t,"electra"),t6t.forEach(t),sBr=r(jPe," \u2014 "),RY=n(jPe,"A",{href:!0});var a6t=s(RY);lBr=r(a6t,"FlaxElectraForQuestionAnswering"),a6t.forEach(t),iBr=r(jPe," (ELECTRA model)"),jPe.forEach(t),dBr=i(Ie),HC=n(Ie,"LI",{});var DPe=s(HC);DMe=n(DPe,"STRONG",{});var n6t=s(DMe);cBr=r(n6t,"mbart"),n6t.forEach(t),fBr=r(DPe," \u2014 "),BY=n(DPe,"A",{href:!0});var s6t=s(BY);mBr=r(s6t,"FlaxMBartForQuestionAnswering"),s6t.forEach(t),gBr=r(DPe," (mBART model)"),DPe.forEach(t),hBr=i(Ie),UC=n(Ie,"LI",{});var GPe=s(UC);GMe=n(GPe,"STRONG",{});var l6t=s(GMe);pBr=r(l6t,"roberta"),l6t.forEach(t),uBr=r(GPe," \u2014 "),PY=n(GPe,"A",{href:!0});var i6t=s(PY);_Br=r(i6t,"FlaxRobertaForQuestionAnswering"),i6t.forEach(t),bBr=r(GPe," (RoBERTa model)"),GPe.forEach(t),vBr=i(Ie),JC=n(Ie,"LI",{});var OPe=s(JC);OMe=n(OPe,"STRONG",{});var d6t=s(OMe);FBr=r(d6t,"roformer"),d6t.forEach(t),TBr=r(OPe," \u2014 "),IY=n(OPe,"A",{href:!0});var c6t=s(IY);MBr=r(c6t,"FlaxRoFormerForQuestionAnswering"),c6t.forEach(t),EBr=r(OPe," (RoFormer model)"),OPe.forEach(t),CBr=i(Ie),YC=n(Ie,"LI",{});var VPe=s(YC);VMe=n(VPe,"STRONG",{});var f6t=s(VMe);wBr=r(f6t,"xlm-roberta"),f6t.forEach(t),ABr=r(VPe," \u2014 "),qY=n(VPe,"A",{href:!0});var m6t=s(qY);yBr=r(m6t,"FlaxXLMRobertaForQuestionAnswering"),m6t.forEach(t),LBr=r(VPe," (XLM-RoBERTa model)"),VPe.forEach(t),Ie.forEach(t),xBr=i(Yl),T(KC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),tNe=i(f),Hc=n(f,"H2",{class:!0});var cDe=s(Hc);ZC=n(cDe,"A",{id:!0,class:!0,href:!0});var g6t=s(ZC);XMe=n(g6t,"SPAN",{});var h6t=s(XMe);T(Px.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),$Br=i(cDe),zMe=n(cDe,"SPAN",{});var p6t=s(zMe);kBr=r(p6t,"FlaxAutoModelForTokenClassification"),p6t.forEach(t),cDe.forEach(t),aNe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Ix.$$.fragment,Kl),SBr=i(Kl),Uc=n(Kl,"P",{});var ree=s(Uc);RBr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NY=n(ree,"A",{href:!0});var u6t=s(NY);BBr=r(u6t,"from_pretrained()"),u6t.forEach(t),PBr=r(ree," class method or the "),jY=n(ree,"A",{href:!0});var _6t=s(jY);IBr=r(_6t,"from_config()"),_6t.forEach(t),qBr=r(ree,` class
method.`),ree.forEach(t),NBr=i(Kl),qx=n(Kl,"P",{});var fDe=s(qx);jBr=r(fDe,"This class cannot be instantiated directly using "),QMe=n(fDe,"CODE",{});var b6t=s(QMe);DBr=r(b6t,"__init__()"),b6t.forEach(t),GBr=r(fDe," (throws an error)."),fDe.forEach(t),OBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var O6=s(Qt);T(Nx.$$.fragment,O6),VBr=i(O6),WMe=n(O6,"P",{});var v6t=s(WMe);XBr=r(v6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v6t.forEach(t),zBr=i(O6),Jc=n(O6,"P",{});var tee=s(Jc);QBr=r(tee,`Note:
Loading a model from its configuration file does `),HMe=n(tee,"STRONG",{});var F6t=s(HMe);WBr=r(F6t,"not"),F6t.forEach(t),HBr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(tee,"A",{href:!0});var T6t=s(DY);UBr=r(T6t,"from_pretrained()"),T6t.forEach(t),JBr=r(tee," to load the model weights."),tee.forEach(t),YBr=i(O6),T(e3.$$.fragment,O6),O6.forEach(t),KBr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(jx.$$.fragment,Zl),ZBr=i(Zl),UMe=n(Zl,"P",{});var M6t=s(UMe);ePr=r(M6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),M6t.forEach(t),oPr=i(Zl),Fn=n(Zl,"P",{});var V6=s(Fn);rPr=r(V6,"The model class to instantiate is selected based on the "),JMe=n(V6,"CODE",{});var E6t=s(JMe);tPr=r(E6t,"model_type"),E6t.forEach(t),aPr=r(V6,` property of the config object (either
passed as an argument or loaded from `),YMe=n(V6,"CODE",{});var C6t=s(YMe);nPr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),sPr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(V6,"CODE",{});var w6t=s(KMe);lPr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),iPr=r(V6,":"),V6.forEach(t),dPr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);o3=n(Fo,"LI",{});var XPe=s(o3);ZMe=n(XPe,"STRONG",{});var A6t=s(ZMe);cPr=r(A6t,"albert"),A6t.forEach(t),fPr=r(XPe," \u2014 "),GY=n(XPe,"A",{href:!0});var y6t=s(GY);mPr=r(y6t,"FlaxAlbertForTokenClassification"),y6t.forEach(t),gPr=r(XPe," (ALBERT model)"),XPe.forEach(t),hPr=i(Fo),r3=n(Fo,"LI",{});var zPe=s(r3);e4e=n(zPe,"STRONG",{});var L6t=s(e4e);pPr=r(L6t,"bert"),L6t.forEach(t),uPr=r(zPe," \u2014 "),OY=n(zPe,"A",{href:!0});var x6t=s(OY);_Pr=r(x6t,"FlaxBertForTokenClassification"),x6t.forEach(t),bPr=r(zPe," (BERT model)"),zPe.forEach(t),vPr=i(Fo),t3=n(Fo,"LI",{});var QPe=s(t3);o4e=n(QPe,"STRONG",{});var $6t=s(o4e);FPr=r($6t,"big_bird"),$6t.forEach(t),TPr=r(QPe," \u2014 "),VY=n(QPe,"A",{href:!0});var k6t=s(VY);MPr=r(k6t,"FlaxBigBirdForTokenClassification"),k6t.forEach(t),EPr=r(QPe," (BigBird model)"),QPe.forEach(t),CPr=i(Fo),a3=n(Fo,"LI",{});var WPe=s(a3);r4e=n(WPe,"STRONG",{});var S6t=s(r4e);wPr=r(S6t,"distilbert"),S6t.forEach(t),APr=r(WPe," \u2014 "),XY=n(WPe,"A",{href:!0});var R6t=s(XY);yPr=r(R6t,"FlaxDistilBertForTokenClassification"),R6t.forEach(t),LPr=r(WPe," (DistilBERT model)"),WPe.forEach(t),xPr=i(Fo),n3=n(Fo,"LI",{});var HPe=s(n3);t4e=n(HPe,"STRONG",{});var B6t=s(t4e);$Pr=r(B6t,"electra"),B6t.forEach(t),kPr=r(HPe," \u2014 "),zY=n(HPe,"A",{href:!0});var P6t=s(zY);SPr=r(P6t,"FlaxElectraForTokenClassification"),P6t.forEach(t),RPr=r(HPe," (ELECTRA model)"),HPe.forEach(t),BPr=i(Fo),s3=n(Fo,"LI",{});var UPe=s(s3);a4e=n(UPe,"STRONG",{});var I6t=s(a4e);PPr=r(I6t,"roberta"),I6t.forEach(t),IPr=r(UPe," \u2014 "),QY=n(UPe,"A",{href:!0});var q6t=s(QY);qPr=r(q6t,"FlaxRobertaForTokenClassification"),q6t.forEach(t),NPr=r(UPe," (RoBERTa model)"),UPe.forEach(t),jPr=i(Fo),l3=n(Fo,"LI",{});var JPe=s(l3);n4e=n(JPe,"STRONG",{});var N6t=s(n4e);DPr=r(N6t,"roformer"),N6t.forEach(t),GPr=r(JPe," \u2014 "),WY=n(JPe,"A",{href:!0});var j6t=s(WY);OPr=r(j6t,"FlaxRoFormerForTokenClassification"),j6t.forEach(t),VPr=r(JPe," (RoFormer model)"),JPe.forEach(t),XPr=i(Fo),i3=n(Fo,"LI",{});var YPe=s(i3);s4e=n(YPe,"STRONG",{});var D6t=s(s4e);zPr=r(D6t,"xlm-roberta"),D6t.forEach(t),QPr=r(YPe," \u2014 "),HY=n(YPe,"A",{href:!0});var G6t=s(HY);WPr=r(G6t,"FlaxXLMRobertaForTokenClassification"),G6t.forEach(t),HPr=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),Fo.forEach(t),UPr=i(Zl),T(d3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),nNe=i(f),Yc=n(f,"H2",{class:!0});var mDe=s(Yc);c3=n(mDe,"A",{id:!0,class:!0,href:!0});var O6t=s(c3);l4e=n(O6t,"SPAN",{});var V6t=s(l4e);T(Dx.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),JPr=i(mDe),i4e=n(mDe,"SPAN",{});var X6t=s(i4e);YPr=r(X6t,"FlaxAutoModelForMultipleChoice"),X6t.forEach(t),mDe.forEach(t),sNe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Gx.$$.fragment,ei),KPr=i(ei),Kc=n(ei,"P",{});var aee=s(Kc);ZPr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UY=n(aee,"A",{href:!0});var z6t=s(UY);eIr=r(z6t,"from_pretrained()"),z6t.forEach(t),oIr=r(aee," class method or the "),JY=n(aee,"A",{href:!0});var Q6t=s(JY);rIr=r(Q6t,"from_config()"),Q6t.forEach(t),tIr=r(aee,` class
method.`),aee.forEach(t),aIr=i(ei),Ox=n(ei,"P",{});var gDe=s(Ox);nIr=r(gDe,"This class cannot be instantiated directly using "),d4e=n(gDe,"CODE",{});var W6t=s(d4e);sIr=r(W6t,"__init__()"),W6t.forEach(t),lIr=r(gDe," (throws an error)."),gDe.forEach(t),iIr=i(ei),Wt=n(ei,"DIV",{class:!0});var X6=s(Wt);T(Vx.$$.fragment,X6),dIr=i(X6),c4e=n(X6,"P",{});var H6t=s(c4e);cIr=r(H6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H6t.forEach(t),fIr=i(X6),Zc=n(X6,"P",{});var nee=s(Zc);mIr=r(nee,`Note:
Loading a model from its configuration file does `),f4e=n(nee,"STRONG",{});var U6t=s(f4e);gIr=r(U6t,"not"),U6t.forEach(t),hIr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(nee,"A",{href:!0});var J6t=s(YY);pIr=r(J6t,"from_pretrained()"),J6t.forEach(t),uIr=r(nee," to load the model weights."),nee.forEach(t),_Ir=i(X6),T(f3.$$.fragment,X6),X6.forEach(t),bIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Xx.$$.fragment,oi),vIr=i(oi),m4e=n(oi,"P",{});var Y6t=s(m4e);FIr=r(Y6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Y6t.forEach(t),TIr=i(oi),Tn=n(oi,"P",{});var z6=s(Tn);MIr=r(z6,"The model class to instantiate is selected based on the "),g4e=n(z6,"CODE",{});var K6t=s(g4e);EIr=r(K6t,"model_type"),K6t.forEach(t),CIr=r(z6,` property of the config object (either
passed as an argument or loaded from `),h4e=n(z6,"CODE",{});var Z6t=s(h4e);wIr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),AIr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(z6,"CODE",{});var eAt=s(p4e);yIr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),LIr=r(z6,":"),z6.forEach(t),xIr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);m3=n(To,"LI",{});var KPe=s(m3);u4e=n(KPe,"STRONG",{});var oAt=s(u4e);$Ir=r(oAt,"albert"),oAt.forEach(t),kIr=r(KPe," \u2014 "),KY=n(KPe,"A",{href:!0});var rAt=s(KY);SIr=r(rAt,"FlaxAlbertForMultipleChoice"),rAt.forEach(t),RIr=r(KPe," (ALBERT model)"),KPe.forEach(t),BIr=i(To),g3=n(To,"LI",{});var ZPe=s(g3);_4e=n(ZPe,"STRONG",{});var tAt=s(_4e);PIr=r(tAt,"bert"),tAt.forEach(t),IIr=r(ZPe," \u2014 "),ZY=n(ZPe,"A",{href:!0});var aAt=s(ZY);qIr=r(aAt,"FlaxBertForMultipleChoice"),aAt.forEach(t),NIr=r(ZPe," (BERT model)"),ZPe.forEach(t),jIr=i(To),h3=n(To,"LI",{});var eIe=s(h3);b4e=n(eIe,"STRONG",{});var nAt=s(b4e);DIr=r(nAt,"big_bird"),nAt.forEach(t),GIr=r(eIe," \u2014 "),eK=n(eIe,"A",{href:!0});var sAt=s(eK);OIr=r(sAt,"FlaxBigBirdForMultipleChoice"),sAt.forEach(t),VIr=r(eIe," (BigBird model)"),eIe.forEach(t),XIr=i(To),p3=n(To,"LI",{});var oIe=s(p3);v4e=n(oIe,"STRONG",{});var lAt=s(v4e);zIr=r(lAt,"distilbert"),lAt.forEach(t),QIr=r(oIe," \u2014 "),oK=n(oIe,"A",{href:!0});var iAt=s(oK);WIr=r(iAt,"FlaxDistilBertForMultipleChoice"),iAt.forEach(t),HIr=r(oIe," (DistilBERT model)"),oIe.forEach(t),UIr=i(To),u3=n(To,"LI",{});var rIe=s(u3);F4e=n(rIe,"STRONG",{});var dAt=s(F4e);JIr=r(dAt,"electra"),dAt.forEach(t),YIr=r(rIe," \u2014 "),rK=n(rIe,"A",{href:!0});var cAt=s(rK);KIr=r(cAt,"FlaxElectraForMultipleChoice"),cAt.forEach(t),ZIr=r(rIe," (ELECTRA model)"),rIe.forEach(t),eqr=i(To),_3=n(To,"LI",{});var tIe=s(_3);T4e=n(tIe,"STRONG",{});var fAt=s(T4e);oqr=r(fAt,"roberta"),fAt.forEach(t),rqr=r(tIe," \u2014 "),tK=n(tIe,"A",{href:!0});var mAt=s(tK);tqr=r(mAt,"FlaxRobertaForMultipleChoice"),mAt.forEach(t),aqr=r(tIe," (RoBERTa model)"),tIe.forEach(t),nqr=i(To),b3=n(To,"LI",{});var aIe=s(b3);M4e=n(aIe,"STRONG",{});var gAt=s(M4e);sqr=r(gAt,"roformer"),gAt.forEach(t),lqr=r(aIe," \u2014 "),aK=n(aIe,"A",{href:!0});var hAt=s(aK);iqr=r(hAt,"FlaxRoFormerForMultipleChoice"),hAt.forEach(t),dqr=r(aIe," (RoFormer model)"),aIe.forEach(t),cqr=i(To),v3=n(To,"LI",{});var nIe=s(v3);E4e=n(nIe,"STRONG",{});var pAt=s(E4e);fqr=r(pAt,"xlm-roberta"),pAt.forEach(t),mqr=r(nIe," \u2014 "),nK=n(nIe,"A",{href:!0});var uAt=s(nK);gqr=r(uAt,"FlaxXLMRobertaForMultipleChoice"),uAt.forEach(t),hqr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),To.forEach(t),pqr=i(oi),T(F3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),lNe=i(f),ef=n(f,"H2",{class:!0});var hDe=s(ef);T3=n(hDe,"A",{id:!0,class:!0,href:!0});var _At=s(T3);C4e=n(_At,"SPAN",{});var bAt=s(C4e);T(zx.$$.fragment,bAt),bAt.forEach(t),_At.forEach(t),uqr=i(hDe),w4e=n(hDe,"SPAN",{});var vAt=s(w4e);_qr=r(vAt,"FlaxAutoModelForNextSentencePrediction"),vAt.forEach(t),hDe.forEach(t),iNe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Qx.$$.fragment,ri),bqr=i(ri),of=n(ri,"P",{});var see=s(of);vqr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sK=n(see,"A",{href:!0});var FAt=s(sK);Fqr=r(FAt,"from_pretrained()"),FAt.forEach(t),Tqr=r(see," class method or the "),lK=n(see,"A",{href:!0});var TAt=s(lK);Mqr=r(TAt,"from_config()"),TAt.forEach(t),Eqr=r(see,` class
method.`),see.forEach(t),Cqr=i(ri),Wx=n(ri,"P",{});var pDe=s(Wx);wqr=r(pDe,"This class cannot be instantiated directly using "),A4e=n(pDe,"CODE",{});var MAt=s(A4e);Aqr=r(MAt,"__init__()"),MAt.forEach(t),yqr=r(pDe," (throws an error)."),pDe.forEach(t),Lqr=i(ri),Ht=n(ri,"DIV",{class:!0});var Q6=s(Ht);T(Hx.$$.fragment,Q6),xqr=i(Q6),y4e=n(Q6,"P",{});var EAt=s(y4e);$qr=r(EAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EAt.forEach(t),kqr=i(Q6),rf=n(Q6,"P",{});var lee=s(rf);Sqr=r(lee,`Note:
Loading a model from its configuration file does `),L4e=n(lee,"STRONG",{});var CAt=s(L4e);Rqr=r(CAt,"not"),CAt.forEach(t),Bqr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(lee,"A",{href:!0});var wAt=s(iK);Pqr=r(wAt,"from_pretrained()"),wAt.forEach(t),Iqr=r(lee," to load the model weights."),lee.forEach(t),qqr=i(Q6),T(M3.$$.fragment,Q6),Q6.forEach(t),Nqr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Ux.$$.fragment,ti),jqr=i(ti),x4e=n(ti,"P",{});var AAt=s(x4e);Dqr=r(AAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AAt.forEach(t),Gqr=i(ti),Mn=n(ti,"P",{});var W6=s(Mn);Oqr=r(W6,"The model class to instantiate is selected based on the "),$4e=n(W6,"CODE",{});var yAt=s($4e);Vqr=r(yAt,"model_type"),yAt.forEach(t),Xqr=r(W6,` property of the config object (either
passed as an argument or loaded from `),k4e=n(W6,"CODE",{});var LAt=s(k4e);zqr=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),Qqr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(W6,"CODE",{});var xAt=s(S4e);Wqr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),Hqr=r(W6,":"),W6.forEach(t),Uqr=i(ti),R4e=n(ti,"UL",{});var $At=s(R4e);E3=n($At,"LI",{});var sIe=s(E3);B4e=n(sIe,"STRONG",{});var kAt=s(B4e);Jqr=r(kAt,"bert"),kAt.forEach(t),Yqr=r(sIe," \u2014 "),dK=n(sIe,"A",{href:!0});var SAt=s(dK);Kqr=r(SAt,"FlaxBertForNextSentencePrediction"),SAt.forEach(t),Zqr=r(sIe," (BERT model)"),sIe.forEach(t),$At.forEach(t),eNr=i(ti),T(C3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),dNe=i(f),tf=n(f,"H2",{class:!0});var uDe=s(tf);w3=n(uDe,"A",{id:!0,class:!0,href:!0});var RAt=s(w3);P4e=n(RAt,"SPAN",{});var BAt=s(P4e);T(Jx.$$.fragment,BAt),BAt.forEach(t),RAt.forEach(t),oNr=i(uDe),I4e=n(uDe,"SPAN",{});var PAt=s(I4e);rNr=r(PAt,"FlaxAutoModelForImageClassification"),PAt.forEach(t),uDe.forEach(t),cNe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Yx.$$.fragment,ai),tNr=i(ai),af=n(ai,"P",{});var iee=s(af);aNr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cK=n(iee,"A",{href:!0});var IAt=s(cK);nNr=r(IAt,"from_pretrained()"),IAt.forEach(t),sNr=r(iee," class method or the "),fK=n(iee,"A",{href:!0});var qAt=s(fK);lNr=r(qAt,"from_config()"),qAt.forEach(t),iNr=r(iee,` class
method.`),iee.forEach(t),dNr=i(ai),Kx=n(ai,"P",{});var _De=s(Kx);cNr=r(_De,"This class cannot be instantiated directly using "),q4e=n(_De,"CODE",{});var NAt=s(q4e);fNr=r(NAt,"__init__()"),NAt.forEach(t),mNr=r(_De," (throws an error)."),_De.forEach(t),gNr=i(ai),Ut=n(ai,"DIV",{class:!0});var H6=s(Ut);T(Zx.$$.fragment,H6),hNr=i(H6),N4e=n(H6,"P",{});var jAt=s(N4e);pNr=r(jAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jAt.forEach(t),uNr=i(H6),nf=n(H6,"P",{});var dee=s(nf);_Nr=r(dee,`Note:
Loading a model from its configuration file does `),j4e=n(dee,"STRONG",{});var DAt=s(j4e);bNr=r(DAt,"not"),DAt.forEach(t),vNr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(dee,"A",{href:!0});var GAt=s(mK);FNr=r(GAt,"from_pretrained()"),GAt.forEach(t),TNr=r(dee," to load the model weights."),dee.forEach(t),MNr=i(H6),T(A3.$$.fragment,H6),H6.forEach(t),ENr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(e9.$$.fragment,ni),CNr=i(ni),D4e=n(ni,"P",{});var OAt=s(D4e);wNr=r(OAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OAt.forEach(t),ANr=i(ni),En=n(ni,"P",{});var U6=s(En);yNr=r(U6,"The model class to instantiate is selected based on the "),G4e=n(U6,"CODE",{});var VAt=s(G4e);LNr=r(VAt,"model_type"),VAt.forEach(t),xNr=r(U6,` property of the config object (either
passed as an argument or loaded from `),O4e=n(U6,"CODE",{});var XAt=s(O4e);$Nr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),kNr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(U6,"CODE",{});var zAt=s(V4e);SNr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),RNr=r(U6,":"),U6.forEach(t),BNr=i(ni),o9=n(ni,"UL",{});var bDe=s(o9);y3=n(bDe,"LI",{});var lIe=s(y3);X4e=n(lIe,"STRONG",{});var QAt=s(X4e);PNr=r(QAt,"beit"),QAt.forEach(t),INr=r(lIe," \u2014 "),gK=n(lIe,"A",{href:!0});var WAt=s(gK);qNr=r(WAt,"FlaxBeitForImageClassification"),WAt.forEach(t),NNr=r(lIe," (BEiT model)"),lIe.forEach(t),jNr=i(bDe),L3=n(bDe,"LI",{});var iIe=s(L3);z4e=n(iIe,"STRONG",{});var HAt=s(z4e);DNr=r(HAt,"vit"),HAt.forEach(t),GNr=r(iIe," \u2014 "),hK=n(iIe,"A",{href:!0});var UAt=s(hK);ONr=r(UAt,"FlaxViTForImageClassification"),UAt.forEach(t),VNr=r(iIe," (ViT model)"),iIe.forEach(t),bDe.forEach(t),XNr=i(ni),T(x3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),fNe=i(f),sf=n(f,"H2",{class:!0});var vDe=s(sf);$3=n(vDe,"A",{id:!0,class:!0,href:!0});var JAt=s($3);Q4e=n(JAt,"SPAN",{});var YAt=s(Q4e);T(r9.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),zNr=i(vDe),W4e=n(vDe,"SPAN",{});var KAt=s(W4e);QNr=r(KAt,"FlaxAutoModelForVision2Seq"),KAt.forEach(t),vDe.forEach(t),mNe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(t9.$$.fragment,si),WNr=i(si),lf=n(si,"P",{});var cee=s(lf);HNr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pK=n(cee,"A",{href:!0});var ZAt=s(pK);UNr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),JNr=r(cee," class method or the "),uK=n(cee,"A",{href:!0});var eyt=s(uK);YNr=r(eyt,"from_config()"),eyt.forEach(t),KNr=r(cee,` class
method.`),cee.forEach(t),ZNr=i(si),a9=n(si,"P",{});var FDe=s(a9);ejr=r(FDe,"This class cannot be instantiated directly using "),H4e=n(FDe,"CODE",{});var oyt=s(H4e);ojr=r(oyt,"__init__()"),oyt.forEach(t),rjr=r(FDe," (throws an error)."),FDe.forEach(t),tjr=i(si),Jt=n(si,"DIV",{class:!0});var J6=s(Jt);T(n9.$$.fragment,J6),ajr=i(J6),U4e=n(J6,"P",{});var ryt=s(U4e);njr=r(ryt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ryt.forEach(t),sjr=i(J6),df=n(J6,"P",{});var fee=s(df);ljr=r(fee,`Note:
Loading a model from its configuration file does `),J4e=n(fee,"STRONG",{});var tyt=s(J4e);ijr=r(tyt,"not"),tyt.forEach(t),djr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(fee,"A",{href:!0});var ayt=s(_K);cjr=r(ayt,"from_pretrained()"),ayt.forEach(t),fjr=r(fee," to load the model weights."),fee.forEach(t),mjr=i(J6),T(k3.$$.fragment,J6),J6.forEach(t),gjr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(s9.$$.fragment,li),hjr=i(li),Y4e=n(li,"P",{});var nyt=s(Y4e);pjr=r(nyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nyt.forEach(t),ujr=i(li),Cn=n(li,"P",{});var Y6=s(Cn);_jr=r(Y6,"The model class to instantiate is selected based on the "),K4e=n(Y6,"CODE",{});var syt=s(K4e);bjr=r(syt,"model_type"),syt.forEach(t),vjr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(Y6,"CODE",{});var lyt=s(Z4e);Fjr=r(lyt,"pretrained_model_name_or_path"),lyt.forEach(t),Tjr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(Y6,"CODE",{});var iyt=s(eEe);Mjr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),Ejr=r(Y6,":"),Y6.forEach(t),Cjr=i(li),oEe=n(li,"UL",{});var dyt=s(oEe);S3=n(dyt,"LI",{});var dIe=s(S3);rEe=n(dIe,"STRONG",{});var cyt=s(rEe);wjr=r(cyt,"vision-encoder-decoder"),cyt.forEach(t),Ajr=r(dIe," \u2014 "),bK=n(dIe,"A",{href:!0});var fyt=s(bK);yjr=r(fyt,"FlaxVisionEncoderDecoderModel"),fyt.forEach(t),Ljr=r(dIe," (Vision Encoder decoder model)"),dIe.forEach(t),dyt.forEach(t),xjr=i(li),T(R3.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(p8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(A$,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(y$,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(L$,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(x$,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c($$,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c(k$,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(S$,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(R$,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(B$,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BConfig"),c(P$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(I$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(q$,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(N$,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(j$,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(D$,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(G$,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(O$,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(V$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(X$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(z$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Q$,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(W$,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(H$,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(U$,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(J$,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(Y$,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(K$,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c(Z$,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(ek,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(ok,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BTokenizer"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BTokenizerFast"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoFeatureExtractor"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoProcessor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoModel"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BModel"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForPreTraining"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k_,"id","transformers.AutoModelForCausalLM"),c(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/bigscience176b#transformers.BigScience176BLMHeadModel"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForMaskedLM"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t1,"id","transformers.AutoModelForSeq2SeqLM"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForSequenceClassification"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForNextSentencePrediction"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTokenClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForQuestionAnswering"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForTableQuestionAnswering"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForVision2Seq"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForAudioClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.AutoModelForAudioFrameClassification"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.AutoModelForCTC"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.AutoModelForAudioXVector"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.AutoModelForMaskedImageModeling"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForObjectDetection"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForImageSegmentation"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForSemanticSegmentation"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForInstanceSegmentation"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.TFAutoModel"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForPreTraining"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForCausalLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForImageClassification"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMaskedLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSequenceClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMultipleChoice"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForTokenClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForVision2Seq"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModel"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForCausalLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForPreTraining"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.FlaxAutoModelForMaskedLM"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForTokenClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForImageClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForVision2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,K6),e(et,hf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,Z6),e(Xe,yn),e(Xe,Ln),e(Ln,eA),e(Xe,mi),e(Xe,xn),e(xn,oA),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,F$),e(Ae,hi),e(hi,T$),e(Ae,M$),b(f,Eo,_),b(f,Ea,_),e(Ea,E$),e(Ea,uf),e(uf,C$),e(Ea,TDe),b(f,cIe,_),b(f,pi,_),e(pi,_f),e(_f,mee),M(rA,mee,null),e(pi,MDe),e(pi,gee),e(gee,EDe),b(f,fIe,_),b(f,$n,_),e($n,CDe),e($n,hee),e(hee,wDe),e($n,ADe),e($n,pee),e(pee,yDe),e($n,LDe),b(f,mIe,_),M(tA,f,_),b(f,gIe,_),b(f,w$,_),e(w$,xDe),b(f,hIe,_),M(bf,f,_),b(f,pIe,_),b(f,ui,_),e(ui,vf),e(vf,uee),M(aA,uee,null),e(ui,$De),e(ui,_ee),e(_ee,kDe),b(f,uIe,_),b(f,Co,_),M(nA,Co,null),e(Co,SDe),e(Co,sA),e(sA,RDe),e(sA,A$),e(A$,BDe),e(sA,PDe),e(Co,IDe),e(Co,lA),e(lA,qDe),e(lA,bee),e(bee,NDe),e(lA,jDe),e(Co,DDe),e(Co,Er),M(iA,Er,null),e(Er,GDe),e(Er,vee),e(vee,ODe),e(Er,VDe),e(Er,_i),e(_i,XDe),e(_i,Fee),e(Fee,zDe),e(_i,QDe),e(_i,Tee),e(Tee,WDe),e(_i,HDe),e(Er,UDe),e(Er,A),e(A,Ff),e(Ff,Mee),e(Mee,JDe),e(Ff,YDe),e(Ff,y$),e(y$,KDe),e(Ff,ZDe),e(A,eGe),e(A,Tf),e(Tf,Eee),e(Eee,oGe),e(Tf,rGe),e(Tf,L$),e(L$,tGe),e(Tf,aGe),e(A,nGe),e(A,Mf),e(Mf,Cee),e(Cee,sGe),e(Mf,lGe),e(Mf,x$),e(x$,iGe),e(Mf,dGe),e(A,cGe),e(A,Ef),e(Ef,wee),e(wee,fGe),e(Ef,mGe),e(Ef,$$),e($$,gGe),e(Ef,hGe),e(A,pGe),e(A,Cf),e(Cf,Aee),e(Aee,uGe),e(Cf,_Ge),e(Cf,k$),e(k$,bGe),e(Cf,vGe),e(A,FGe),e(A,wf),e(wf,yee),e(yee,TGe),e(wf,MGe),e(wf,S$),e(S$,EGe),e(wf,CGe),e(A,wGe),e(A,Af),e(Af,Lee),e(Lee,AGe),e(Af,yGe),e(Af,R$),e(R$,LGe),e(Af,xGe),e(A,$Ge),e(A,yf),e(yf,xee),e(xee,kGe),e(yf,SGe),e(yf,B$),e(B$,RGe),e(yf,BGe),e(A,PGe),e(A,Lf),e(Lf,$ee),e($ee,IGe),e(Lf,qGe),e(Lf,P$),e(P$,NGe),e(Lf,jGe),e(A,DGe),e(A,xf),e(xf,kee),e(kee,GGe),e(xf,OGe),e(xf,I$),e(I$,VGe),e(xf,XGe),e(A,zGe),e(A,$f),e($f,See),e(See,QGe),e($f,WGe),e($f,q$),e(q$,HGe),e($f,UGe),e(A,JGe),e(A,kf),e(kf,Ree),e(Ree,YGe),e(kf,KGe),e(kf,N$),e(N$,ZGe),e(kf,eOe),e(A,oOe),e(A,Sf),e(Sf,Bee),e(Bee,rOe),e(Sf,tOe),e(Sf,j$),e(j$,aOe),e(Sf,nOe),e(A,sOe),e(A,Rf),e(Rf,Pee),e(Pee,lOe),e(Rf,iOe),e(Rf,D$),e(D$,dOe),e(Rf,cOe),e(A,fOe),e(A,Bf),e(Bf,Iee),e(Iee,mOe),e(Bf,gOe),e(Bf,G$),e(G$,hOe),e(Bf,pOe),e(A,uOe),e(A,Pf),e(Pf,qee),e(qee,_Oe),e(Pf,bOe),e(Pf,O$),e(O$,vOe),e(Pf,FOe),e(A,TOe),e(A,If),e(If,Nee),e(Nee,MOe),e(If,EOe),e(If,V$),e(V$,COe),e(If,wOe),e(A,AOe),e(A,qf),e(qf,jee),e(jee,yOe),e(qf,LOe),e(qf,X$),e(X$,xOe),e(qf,$Oe),e(A,kOe),e(A,Nf),e(Nf,Dee),e(Dee,SOe),e(Nf,ROe),e(Nf,z$),e(z$,BOe),e(Nf,POe),e(A,IOe),e(A,jf),e(jf,Gee),e(Gee,qOe),e(jf,NOe),e(jf,Q$),e(Q$,jOe),e(jf,DOe),e(A,GOe),e(A,Df),e(Df,Oee),e(Oee,OOe),e(Df,VOe),e(Df,W$),e(W$,XOe),e(Df,zOe),e(A,QOe),e(A,Gf),e(Gf,Vee),e(Vee,WOe),e(Gf,HOe),e(Gf,H$),e(H$,UOe),e(Gf,JOe),e(A,YOe),e(A,Of),e(Of,Xee),e(Xee,KOe),e(Of,ZOe),e(Of,U$),e(U$,eVe),e(Of,oVe),e(A,rVe),e(A,Vf),e(Vf,zee),e(zee,tVe),e(Vf,aVe),e(Vf,J$),e(J$,nVe),e(Vf,sVe),e(A,lVe),e(A,Xf),e(Xf,Qee),e(Qee,iVe),e(Xf,dVe),e(Xf,Y$),e(Y$,cVe),e(Xf,fVe),e(A,mVe),e(A,zf),e(zf,Wee),e(Wee,gVe),e(zf,hVe),e(zf,K$),e(K$,pVe),e(zf,uVe),e(A,_Ve),e(A,Qf),e(Qf,Hee),e(Hee,bVe),e(Qf,vVe),e(Qf,Z$),e(Z$,FVe),e(Qf,TVe),e(A,MVe),e(A,Wf),e(Wf,Uee),e(Uee,EVe),e(Wf,CVe),e(Wf,ek),e(ek,wVe),e(Wf,AVe),e(A,yVe),e(A,Hf),e(Hf,Jee),e(Jee,LVe),e(Hf,xVe),e(Hf,ok),e(ok,$Ve),e(Hf,kVe),e(A,SVe),e(A,Uf),e(Uf,Yee),e(Yee,RVe),e(Uf,BVe),e(Uf,rk),e(rk,PVe),e(Uf,IVe),e(A,qVe),e(A,Jf),e(Jf,Kee),e(Kee,NVe),e(Jf,jVe),e(Jf,tk),e(tk,DVe),e(Jf,GVe),e(A,OVe),e(A,Yf),e(Yf,Zee),e(Zee,VVe),e(Yf,XVe),e(Yf,ak),e(ak,zVe),e(Yf,QVe),e(A,WVe),e(A,Kf),e(Kf,eoe),e(eoe,HVe),e(Kf,UVe),e(Kf,nk),e(nk,JVe),e(Kf,YVe),e(A,KVe),e(A,Zf),e(Zf,ooe),e(ooe,ZVe),e(Zf,eXe),e(Zf,sk),e(sk,oXe),e(Zf,rXe),e(A,tXe),e(A,em),e(em,roe),e(roe,aXe),e(em,nXe),e(em,lk),e(lk,sXe),e(em,lXe),e(A,iXe),e(A,om),e(om,toe),e(toe,dXe),e(om,cXe),e(om,ik),e(ik,fXe),e(om,mXe),e(A,gXe),e(A,rm),e(rm,aoe),e(aoe,hXe),e(rm,pXe),e(rm,dk),e(dk,uXe),e(rm,_Xe),e(A,bXe),e(A,tm),e(tm,noe),e(noe,vXe),e(tm,FXe),e(tm,ck),e(ck,TXe),e(tm,MXe),e(A,EXe),e(A,am),e(am,soe),e(soe,CXe),e(am,wXe),e(am,fk),e(fk,AXe),e(am,yXe),e(A,LXe),e(A,nm),e(nm,loe),e(loe,xXe),e(nm,$Xe),e(nm,mk),e(mk,kXe),e(nm,SXe),e(A,RXe),e(A,sm),e(sm,ioe),e(ioe,BXe),e(sm,PXe),e(sm,gk),e(gk,IXe),e(sm,qXe),e(A,NXe),e(A,lm),e(lm,doe),e(doe,jXe),e(lm,DXe),e(lm,hk),e(hk,GXe),e(lm,OXe),e(A,VXe),e(A,im),e(im,coe),e(coe,XXe),e(im,zXe),e(im,pk),e(pk,QXe),e(im,WXe),e(A,HXe),e(A,dm),e(dm,foe),e(foe,UXe),e(dm,JXe),e(dm,uk),e(uk,YXe),e(dm,KXe),e(A,ZXe),e(A,cm),e(cm,moe),e(moe,eze),e(cm,oze),e(cm,_k),e(_k,rze),e(cm,tze),e(A,aze),e(A,fm),e(fm,goe),e(goe,nze),e(fm,sze),e(fm,bk),e(bk,lze),e(fm,ize),e(A,dze),e(A,mm),e(mm,hoe),e(hoe,cze),e(mm,fze),e(mm,vk),e(vk,mze),e(mm,gze),e(A,hze),e(A,gm),e(gm,poe),e(poe,pze),e(gm,uze),e(gm,Fk),e(Fk,_ze),e(gm,bze),e(A,vze),e(A,hm),e(hm,uoe),e(uoe,Fze),e(hm,Tze),e(hm,Tk),e(Tk,Mze),e(hm,Eze),e(A,Cze),e(A,pm),e(pm,_oe),e(_oe,wze),e(pm,Aze),e(pm,Mk),e(Mk,yze),e(pm,Lze),e(A,xze),e(A,um),e(um,boe),e(boe,$ze),e(um,kze),e(um,Ek),e(Ek,Sze),e(um,Rze),e(A,Bze),e(A,_m),e(_m,voe),e(voe,Pze),e(_m,Ize),e(_m,Ck),e(Ck,qze),e(_m,Nze),e(A,jze),e(A,bm),e(bm,Foe),e(Foe,Dze),e(bm,Gze),e(bm,wk),e(wk,Oze),e(bm,Vze),e(A,Xze),e(A,vm),e(vm,Toe),e(Toe,zze),e(vm,Qze),e(vm,Ak),e(Ak,Wze),e(vm,Hze),e(A,Uze),e(A,Fm),e(Fm,Moe),e(Moe,Jze),e(Fm,Yze),e(Fm,yk),e(yk,Kze),e(Fm,Zze),e(A,eQe),e(A,Tm),e(Tm,Eoe),e(Eoe,oQe),e(Tm,rQe),e(Tm,Lk),e(Lk,tQe),e(Tm,aQe),e(A,nQe),e(A,Mm),e(Mm,Coe),e(Coe,sQe),e(Mm,lQe),e(Mm,xk),e(xk,iQe),e(Mm,dQe),e(A,cQe),e(A,Em),e(Em,woe),e(woe,fQe),e(Em,mQe),e(Em,$k),e($k,gQe),e(Em,hQe),e(A,pQe),e(A,Cm),e(Cm,Aoe),e(Aoe,uQe),e(Cm,_Qe),e(Cm,kk),e(kk,bQe),e(Cm,vQe),e(A,FQe),e(A,wm),e(wm,yoe),e(yoe,TQe),e(wm,MQe),e(wm,Sk),e(Sk,EQe),e(wm,CQe),e(A,wQe),e(A,Am),e(Am,Loe),e(Loe,AQe),e(Am,yQe),e(Am,Rk),e(Rk,LQe),e(Am,xQe),e(A,$Qe),e(A,ym),e(ym,xoe),e(xoe,kQe),e(ym,SQe),e(ym,Bk),e(Bk,RQe),e(ym,BQe),e(A,PQe),e(A,Lm),e(Lm,$oe),e($oe,IQe),e(Lm,qQe),e(Lm,Pk),e(Pk,NQe),e(Lm,jQe),e(A,DQe),e(A,xm),e(xm,koe),e(koe,GQe),e(xm,OQe),e(xm,Ik),e(Ik,VQe),e(xm,XQe),e(A,zQe),e(A,$m),e($m,Soe),e(Soe,QQe),e($m,WQe),e($m,qk),e(qk,HQe),e($m,UQe),e(A,JQe),e(A,km),e(km,Roe),e(Roe,YQe),e(km,KQe),e(km,Nk),e(Nk,ZQe),e(km,eWe),e(A,oWe),e(A,Sm),e(Sm,Boe),e(Boe,rWe),e(Sm,tWe),e(Sm,jk),e(jk,aWe),e(Sm,nWe),e(A,sWe),e(A,Rm),e(Rm,Poe),e(Poe,lWe),e(Rm,iWe),e(Rm,Dk),e(Dk,dWe),e(Rm,cWe),e(A,fWe),e(A,Bm),e(Bm,Ioe),e(Ioe,mWe),e(Bm,gWe),e(Bm,Gk),e(Gk,hWe),e(Bm,pWe),e(A,uWe),e(A,Pm),e(Pm,qoe),e(qoe,_We),e(Pm,bWe),e(Pm,Ok),e(Ok,vWe),e(Pm,FWe),e(A,TWe),e(A,Im),e(Im,Noe),e(Noe,MWe),e(Im,EWe),e(Im,Vk),e(Vk,CWe),e(Im,wWe),e(A,AWe),e(A,qm),e(qm,joe),e(joe,yWe),e(qm,LWe),e(qm,Xk),e(Xk,xWe),e(qm,$We),e(A,kWe),e(A,Nm),e(Nm,Doe),e(Doe,SWe),e(Nm,RWe),e(Nm,zk),e(zk,BWe),e(Nm,PWe),e(A,IWe),e(A,jm),e(jm,Goe),e(Goe,qWe),e(jm,NWe),e(jm,Qk),e(Qk,jWe),e(jm,DWe),e(A,GWe),e(A,Dm),e(Dm,Ooe),e(Ooe,OWe),e(Dm,VWe),e(Dm,Wk),e(Wk,XWe),e(Dm,zWe),e(A,QWe),e(A,Gm),e(Gm,Voe),e(Voe,WWe),e(Gm,HWe),e(Gm,Hk),e(Hk,UWe),e(Gm,JWe),e(A,YWe),e(A,Om),e(Om,Xoe),e(Xoe,KWe),e(Om,ZWe),e(Om,Uk),e(Uk,eHe),e(Om,oHe),e(A,rHe),e(A,Vm),e(Vm,zoe),e(zoe,tHe),e(Vm,aHe),e(Vm,Jk),e(Jk,nHe),e(Vm,sHe),e(A,lHe),e(A,Xm),e(Xm,Qoe),e(Qoe,iHe),e(Xm,dHe),e(Xm,Yk),e(Yk,cHe),e(Xm,fHe),e(A,mHe),e(A,zm),e(zm,Woe),e(Woe,gHe),e(zm,hHe),e(zm,Kk),e(Kk,pHe),e(zm,uHe),e(A,_He),e(A,Qm),e(Qm,Hoe),e(Hoe,bHe),e(Qm,vHe),e(Qm,Zk),e(Zk,FHe),e(Qm,THe),e(A,MHe),e(A,Wm),e(Wm,Uoe),e(Uoe,EHe),e(Wm,CHe),e(Wm,eS),e(eS,wHe),e(Wm,AHe),e(A,yHe),e(A,Hm),e(Hm,Joe),e(Joe,LHe),e(Hm,xHe),e(Hm,oS),e(oS,$He),e(Hm,kHe),e(A,SHe),e(A,Um),e(Um,Yoe),e(Yoe,RHe),e(Um,BHe),e(Um,rS),e(rS,PHe),e(Um,IHe),e(A,qHe),e(A,Jm),e(Jm,Koe),e(Koe,NHe),e(Jm,jHe),e(Jm,tS),e(tS,DHe),e(Jm,GHe),e(A,OHe),e(A,Ym),e(Ym,Zoe),e(Zoe,VHe),e(Ym,XHe),e(Ym,aS),e(aS,zHe),e(Ym,QHe),e(A,WHe),e(A,Km),e(Km,ere),e(ere,HHe),e(Km,UHe),e(Km,nS),e(nS,JHe),e(Km,YHe),e(A,KHe),e(A,Zm),e(Zm,ore),e(ore,ZHe),e(Zm,eUe),e(Zm,sS),e(sS,oUe),e(Zm,rUe),e(A,tUe),e(A,eg),e(eg,rre),e(rre,aUe),e(eg,nUe),e(eg,lS),e(lS,sUe),e(eg,lUe),e(A,iUe),e(A,og),e(og,tre),e(tre,dUe),e(og,cUe),e(og,iS),e(iS,fUe),e(og,mUe),e(A,gUe),e(A,rg),e(rg,are),e(are,hUe),e(rg,pUe),e(rg,dS),e(dS,uUe),e(rg,_Ue),e(A,bUe),e(A,tg),e(tg,nre),e(nre,vUe),e(tg,FUe),e(tg,cS),e(cS,TUe),e(tg,MUe),e(A,EUe),e(A,ag),e(ag,sre),e(sre,CUe),e(ag,wUe),e(ag,fS),e(fS,AUe),e(ag,yUe),e(A,LUe),e(A,ng),e(ng,lre),e(lre,xUe),e(ng,$Ue),e(ng,mS),e(mS,kUe),e(ng,SUe),e(A,RUe),e(A,sg),e(sg,ire),e(ire,BUe),e(sg,PUe),e(sg,gS),e(gS,IUe),e(sg,qUe),e(A,NUe),e(A,lg),e(lg,dre),e(dre,jUe),e(lg,DUe),e(lg,hS),e(hS,GUe),e(lg,OUe),e(A,VUe),e(A,ig),e(ig,cre),e(cre,XUe),e(ig,zUe),e(ig,pS),e(pS,QUe),e(ig,WUe),e(A,HUe),e(A,dg),e(dg,fre),e(fre,UUe),e(dg,JUe),e(dg,uS),e(uS,YUe),e(dg,KUe),e(A,ZUe),e(A,cg),e(cg,mre),e(mre,eJe),e(cg,oJe),e(cg,_S),e(_S,rJe),e(cg,tJe),e(A,aJe),e(A,fg),e(fg,gre),e(gre,nJe),e(fg,sJe),e(fg,bS),e(bS,lJe),e(fg,iJe),e(A,dJe),e(A,mg),e(mg,hre),e(hre,cJe),e(mg,fJe),e(mg,vS),e(vS,mJe),e(mg,gJe),e(A,hJe),e(A,gg),e(gg,pre),e(pre,pJe),e(gg,uJe),e(gg,FS),e(FS,_Je),e(gg,bJe),e(A,vJe),e(A,hg),e(hg,ure),e(ure,FJe),e(hg,TJe),e(hg,TS),e(TS,MJe),e(hg,EJe),e(A,CJe),e(A,pg),e(pg,_re),e(_re,wJe),e(pg,AJe),e(pg,MS),e(MS,yJe),e(pg,LJe),e(A,xJe),e(A,ug),e(ug,bre),e(bre,$Je),e(ug,kJe),e(ug,ES),e(ES,SJe),e(ug,RJe),e(A,BJe),e(A,_g),e(_g,vre),e(vre,PJe),e(_g,IJe),e(_g,CS),e(CS,qJe),e(_g,NJe),e(Er,jJe),M(bg,Er,null),e(Co,DJe),e(Co,vg),M(dA,vg,null),e(vg,GJe),e(vg,Fre),e(Fre,OJe),b(f,_Ie,_),b(f,bi,_),e(bi,Fg),e(Fg,Tre),M(cA,Tre,null),e(bi,VJe),e(bi,Mre),e(Mre,XJe),b(f,bIe,_),b(f,wo,_),M(fA,wo,null),e(wo,zJe),e(wo,mA),e(mA,QJe),e(mA,wS),e(wS,WJe),e(mA,HJe),e(wo,UJe),e(wo,gA),e(gA,JJe),e(gA,Ere),e(Ere,YJe),e(gA,KJe),e(wo,ZJe),e(wo,Cr),M(hA,Cr,null),e(Cr,eYe),e(Cr,Cre),e(Cre,oYe),e(Cr,rYe),e(Cr,Ca),e(Ca,tYe),e(Ca,wre),e(wre,aYe),e(Ca,nYe),e(Ca,Are),e(Are,sYe),e(Ca,lYe),e(Ca,yre),e(yre,iYe),e(Ca,dYe),e(Cr,cYe),e(Cr,k),e(k,kn),e(kn,Lre),e(Lre,fYe),e(kn,mYe),e(kn,AS),e(AS,gYe),e(kn,hYe),e(kn,yS),e(yS,pYe),e(kn,uYe),e(k,_Ye),e(k,Sn),e(Sn,xre),e(xre,bYe),e(Sn,vYe),e(Sn,LS),e(LS,FYe),e(Sn,TYe),e(Sn,xS),e(xS,MYe),e(Sn,EYe),e(k,CYe),e(k,Rn),e(Rn,$re),e($re,wYe),e(Rn,AYe),e(Rn,$S),e($S,yYe),e(Rn,LYe),e(Rn,kS),e(kS,xYe),e(Rn,$Ye),e(k,kYe),e(k,Tg),e(Tg,kre),e(kre,SYe),e(Tg,RYe),e(Tg,SS),e(SS,BYe),e(Tg,PYe),e(k,IYe),e(k,Bn),e(Bn,Sre),e(Sre,qYe),e(Bn,NYe),e(Bn,RS),e(RS,jYe),e(Bn,DYe),e(Bn,BS),e(BS,GYe),e(Bn,OYe),e(k,VYe),e(k,Mg),e(Mg,Rre),e(Rre,XYe),e(Mg,zYe),e(Mg,PS),e(PS,QYe),e(Mg,WYe),e(k,HYe),e(k,Eg),e(Eg,Bre),e(Bre,UYe),e(Eg,JYe),e(Eg,IS),e(IS,YYe),e(Eg,KYe),e(k,ZYe),e(k,Cg),e(Cg,Pre),e(Pre,eKe),e(Cg,oKe),e(Cg,qS),e(qS,rKe),e(Cg,tKe),e(k,aKe),e(k,Pn),e(Pn,Ire),e(Ire,nKe),e(Pn,sKe),e(Pn,NS),e(NS,lKe),e(Pn,iKe),e(Pn,jS),e(jS,dKe),e(Pn,cKe),e(k,fKe),e(k,In),e(In,qre),e(qre,mKe),e(In,gKe),e(In,DS),e(DS,hKe),e(In,pKe),e(In,GS),e(GS,uKe),e(In,_Ke),e(k,bKe),e(k,qn),e(qn,Nre),e(Nre,vKe),e(qn,FKe),e(qn,OS),e(OS,TKe),e(qn,MKe),e(qn,VS),e(VS,EKe),e(qn,CKe),e(k,wKe),e(k,Nn),e(Nn,jre),e(jre,AKe),e(Nn,yKe),e(Nn,XS),e(XS,LKe),e(Nn,xKe),e(Nn,zS),e(zS,$Ke),e(Nn,kKe),e(k,SKe),e(k,wg),e(wg,Dre),e(Dre,RKe),e(wg,BKe),e(wg,QS),e(QS,PKe),e(wg,IKe),e(k,qKe),e(k,Ag),e(Ag,Gre),e(Gre,NKe),e(Ag,jKe),e(Ag,WS),e(WS,DKe),e(Ag,GKe),e(k,OKe),e(k,jn),e(jn,Ore),e(Ore,VKe),e(jn,XKe),e(jn,HS),e(HS,zKe),e(jn,QKe),e(jn,US),e(US,WKe),e(jn,HKe),e(k,UKe),e(k,yg),e(yg,Vre),e(Vre,JKe),e(yg,YKe),e(yg,JS),e(JS,KKe),e(yg,ZKe),e(k,eZe),e(k,Dn),e(Dn,Xre),e(Xre,oZe),e(Dn,rZe),e(Dn,YS),e(YS,tZe),e(Dn,aZe),e(Dn,KS),e(KS,nZe),e(Dn,sZe),e(k,lZe),e(k,Gn),e(Gn,zre),e(zre,iZe),e(Gn,dZe),e(Gn,ZS),e(ZS,cZe),e(Gn,fZe),e(Gn,eR),e(eR,mZe),e(Gn,gZe),e(k,hZe),e(k,On),e(On,Qre),e(Qre,pZe),e(On,uZe),e(On,oR),e(oR,_Ze),e(On,bZe),e(On,rR),e(rR,vZe),e(On,FZe),e(k,TZe),e(k,Lg),e(Lg,Wre),e(Wre,MZe),e(Lg,EZe),e(Lg,tR),e(tR,CZe),e(Lg,wZe),e(k,AZe),e(k,Vn),e(Vn,Hre),e(Hre,yZe),e(Vn,LZe),e(Vn,aR),e(aR,xZe),e(Vn,$Ze),e(Vn,nR),e(nR,kZe),e(Vn,SZe),e(k,RZe),e(k,Xn),e(Xn,Ure),e(Ure,BZe),e(Xn,PZe),e(Xn,sR),e(sR,IZe),e(Xn,qZe),e(Xn,lR),e(lR,NZe),e(Xn,jZe),e(k,DZe),e(k,zn),e(zn,Jre),e(Jre,GZe),e(zn,OZe),e(zn,iR),e(iR,VZe),e(zn,XZe),e(zn,dR),e(dR,zZe),e(zn,QZe),e(k,WZe),e(k,Qn),e(Qn,Yre),e(Yre,HZe),e(Qn,UZe),e(Qn,cR),e(cR,JZe),e(Qn,YZe),e(Qn,fR),e(fR,KZe),e(Qn,ZZe),e(k,eeo),e(k,Wn),e(Wn,Kre),e(Kre,oeo),e(Wn,reo),e(Wn,mR),e(mR,teo),e(Wn,aeo),e(Wn,gR),e(gR,neo),e(Wn,seo),e(k,leo),e(k,Hn),e(Hn,Zre),e(Zre,ieo),e(Hn,deo),e(Hn,hR),e(hR,ceo),e(Hn,feo),e(Hn,pR),e(pR,meo),e(Hn,geo),e(k,heo),e(k,xg),e(xg,ete),e(ete,peo),e(xg,ueo),e(xg,uR),e(uR,_eo),e(xg,beo),e(k,veo),e(k,Un),e(Un,ote),e(ote,Feo),e(Un,Teo),e(Un,_R),e(_R,Meo),e(Un,Eeo),e(Un,bR),e(bR,Ceo),e(Un,weo),e(k,Aeo),e(k,$g),e($g,rte),e(rte,yeo),e($g,Leo),e($g,vR),e(vR,xeo),e($g,$eo),e(k,keo),e(k,Jn),e(Jn,tte),e(tte,Seo),e(Jn,Reo),e(Jn,FR),e(FR,Beo),e(Jn,Peo),e(Jn,TR),e(TR,Ieo),e(Jn,qeo),e(k,Neo),e(k,Yn),e(Yn,ate),e(ate,jeo),e(Yn,Deo),e(Yn,MR),e(MR,Geo),e(Yn,Oeo),e(Yn,ER),e(ER,Veo),e(Yn,Xeo),e(k,zeo),e(k,Kn),e(Kn,nte),e(nte,Qeo),e(Kn,Weo),e(Kn,CR),e(CR,Heo),e(Kn,Ueo),e(Kn,wR),e(wR,Jeo),e(Kn,Yeo),e(k,Keo),e(k,Zn),e(Zn,ste),e(ste,Zeo),e(Zn,eoo),e(Zn,AR),e(AR,ooo),e(Zn,roo),e(Zn,yR),e(yR,too),e(Zn,aoo),e(k,noo),e(k,es),e(es,lte),e(lte,soo),e(es,loo),e(es,LR),e(LR,ioo),e(es,doo),e(es,xR),e(xR,coo),e(es,foo),e(k,moo),e(k,kg),e(kg,ite),e(ite,goo),e(kg,hoo),e(kg,$R),e($R,poo),e(kg,uoo),e(k,_oo),e(k,os),e(os,dte),e(dte,boo),e(os,voo),e(os,kR),e(kR,Foo),e(os,Too),e(os,SR),e(SR,Moo),e(os,Eoo),e(k,Coo),e(k,rs),e(rs,cte),e(cte,woo),e(rs,Aoo),e(rs,RR),e(RR,yoo),e(rs,Loo),e(rs,BR),e(BR,xoo),e(rs,$oo),e(k,koo),e(k,ts),e(ts,fte),e(fte,Soo),e(ts,Roo),e(ts,PR),e(PR,Boo),e(ts,Poo),e(ts,IR),e(IR,Ioo),e(ts,qoo),e(k,Noo),e(k,as),e(as,mte),e(mte,joo),e(as,Doo),e(as,qR),e(qR,Goo),e(as,Ooo),e(as,NR),e(NR,Voo),e(as,Xoo),e(k,zoo),e(k,ns),e(ns,gte),e(gte,Qoo),e(ns,Woo),e(ns,jR),e(jR,Hoo),e(ns,Uoo),e(ns,DR),e(DR,Joo),e(ns,Yoo),e(k,Koo),e(k,ss),e(ss,hte),e(hte,Zoo),e(ss,ero),e(ss,GR),e(GR,oro),e(ss,rro),e(ss,OR),e(OR,tro),e(ss,aro),e(k,nro),e(k,Sg),e(Sg,pte),e(pte,sro),e(Sg,lro),e(Sg,VR),e(VR,iro),e(Sg,dro),e(k,cro),e(k,ls),e(ls,ute),e(ute,fro),e(ls,mro),e(ls,XR),e(XR,gro),e(ls,hro),e(ls,zR),e(zR,pro),e(ls,uro),e(k,_ro),e(k,Rg),e(Rg,_te),e(_te,bro),e(Rg,vro),e(Rg,QR),e(QR,Fro),e(Rg,Tro),e(k,Mro),e(k,Bg),e(Bg,bte),e(bte,Ero),e(Bg,Cro),e(Bg,WR),e(WR,wro),e(Bg,Aro),e(k,yro),e(k,is),e(is,vte),e(vte,Lro),e(is,xro),e(is,HR),e(HR,$ro),e(is,kro),e(is,UR),e(UR,Sro),e(is,Rro),e(k,Bro),e(k,ds),e(ds,Fte),e(Fte,Pro),e(ds,Iro),e(ds,JR),e(JR,qro),e(ds,Nro),e(ds,YR),e(YR,jro),e(ds,Dro),e(k,Gro),e(k,cs),e(cs,Tte),e(Tte,Oro),e(cs,Vro),e(cs,KR),e(KR,Xro),e(cs,zro),e(cs,ZR),e(ZR,Qro),e(cs,Wro),e(k,Hro),e(k,Pg),e(Pg,Mte),e(Mte,Uro),e(Pg,Jro),e(Pg,eB),e(eB,Yro),e(Pg,Kro),e(k,Zro),e(k,fs),e(fs,Ete),e(Ete,eto),e(fs,oto),e(fs,oB),e(oB,rto),e(fs,tto),e(fs,rB),e(rB,ato),e(fs,nto),e(k,sto),e(k,ms),e(ms,Cte),e(Cte,lto),e(ms,ito),e(ms,tB),e(tB,dto),e(ms,cto),e(ms,aB),e(aB,fto),e(ms,mto),e(k,gto),e(k,gs),e(gs,wte),e(wte,hto),e(gs,pto),e(gs,nB),e(nB,uto),e(gs,_to),e(gs,sB),e(sB,bto),e(gs,vto),e(k,Fto),e(k,hs),e(hs,Ate),e(Ate,Tto),e(hs,Mto),e(hs,lB),e(lB,Eto),e(hs,Cto),e(hs,iB),e(iB,wto),e(hs,Ato),e(k,yto),e(k,ps),e(ps,yte),e(yte,Lto),e(ps,xto),e(ps,dB),e(dB,$to),e(ps,kto),e(ps,cB),e(cB,Sto),e(ps,Rto),e(k,Bto),e(k,Ig),e(Ig,Lte),e(Lte,Pto),e(Ig,Ito),e(Ig,fB),e(fB,qto),e(Ig,Nto),e(k,jto),e(k,us),e(us,xte),e(xte,Dto),e(us,Gto),e(us,mB),e(mB,Oto),e(us,Vto),e(us,gB),e(gB,Xto),e(us,zto),e(k,Qto),e(k,qg),e(qg,$te),e($te,Wto),e(qg,Hto),e(qg,hB),e(hB,Uto),e(qg,Jto),e(k,Yto),e(k,Ng),e(Ng,kte),e(kte,Kto),e(Ng,Zto),e(Ng,pB),e(pB,eao),e(Ng,oao),e(k,rao),e(k,jg),e(jg,Ste),e(Ste,tao),e(jg,aao),e(jg,uB),e(uB,nao),e(jg,sao),e(k,lao),e(k,Dg),e(Dg,Rte),e(Rte,iao),e(Dg,dao),e(Dg,_B),e(_B,cao),e(Dg,fao),e(k,mao),e(k,_s),e(_s,Bte),e(Bte,gao),e(_s,hao),e(_s,bB),e(bB,pao),e(_s,uao),e(_s,vB),e(vB,_ao),e(_s,bao),e(k,vao),e(k,Gg),e(Gg,Pte),e(Pte,Fao),e(Gg,Tao),e(Gg,FB),e(FB,Mao),e(Gg,Eao),e(k,Cao),e(k,bs),e(bs,Ite),e(Ite,wao),e(bs,Aao),e(bs,TB),e(TB,yao),e(bs,Lao),e(bs,MB),e(MB,xao),e(bs,$ao),e(k,kao),e(k,vs),e(vs,qte),e(qte,Sao),e(vs,Rao),e(vs,EB),e(EB,Bao),e(vs,Pao),e(vs,CB),e(CB,Iao),e(vs,qao),e(k,Nao),e(k,Fs),e(Fs,Nte),e(Nte,jao),e(Fs,Dao),e(Fs,wB),e(wB,Gao),e(Fs,Oao),e(Fs,AB),e(AB,Vao),e(Fs,Xao),e(k,zao),e(k,Ts),e(Ts,jte),e(jte,Qao),e(Ts,Wao),e(Ts,yB),e(yB,Hao),e(Ts,Uao),e(Ts,LB),e(LB,Jao),e(Ts,Yao),e(k,Kao),e(k,Ms),e(Ms,Dte),e(Dte,Zao),e(Ms,eno),e(Ms,xB),e(xB,ono),e(Ms,rno),e(Ms,$B),e($B,tno),e(Ms,ano),e(k,nno),e(k,Es),e(Es,Gte),e(Gte,sno),e(Es,lno),e(Es,kB),e(kB,ino),e(Es,dno),e(Es,SB),e(SB,cno),e(Es,fno),e(k,mno),e(k,Og),e(Og,Ote),e(Ote,gno),e(Og,hno),e(Og,RB),e(RB,pno),e(Og,uno),e(k,_no),e(k,Vg),e(Vg,Vte),e(Vte,bno),e(Vg,vno),e(Vg,BB),e(BB,Fno),e(Vg,Tno),e(k,Mno),e(k,Cs),e(Cs,Xte),e(Xte,Eno),e(Cs,Cno),e(Cs,PB),e(PB,wno),e(Cs,Ano),e(Cs,IB),e(IB,yno),e(Cs,Lno),e(k,xno),e(k,ws),e(ws,zte),e(zte,$no),e(ws,kno),e(ws,qB),e(qB,Sno),e(ws,Rno),e(ws,NB),e(NB,Bno),e(ws,Pno),e(k,Ino),e(k,As),e(As,Qte),e(Qte,qno),e(As,Nno),e(As,jB),e(jB,jno),e(As,Dno),e(As,DB),e(DB,Gno),e(As,Ono),e(k,Vno),e(k,Xg),e(Xg,Wte),e(Wte,Xno),e(Xg,zno),e(Xg,GB),e(GB,Qno),e(Xg,Wno),e(k,Hno),e(k,zg),e(zg,Hte),e(Hte,Uno),e(zg,Jno),e(zg,OB),e(OB,Yno),e(zg,Kno),e(k,Zno),e(k,Qg),e(Qg,Ute),e(Ute,eso),e(Qg,oso),e(Qg,VB),e(VB,rso),e(Qg,tso),e(k,aso),e(k,ys),e(ys,Jte),e(Jte,nso),e(ys,sso),e(ys,XB),e(XB,lso),e(ys,iso),e(ys,zB),e(zB,dso),e(ys,cso),e(k,fso),e(k,Wg),e(Wg,Yte),e(Yte,mso),e(Wg,gso),e(Wg,QB),e(QB,hso),e(Wg,pso),e(k,uso),e(k,Hg),e(Hg,Kte),e(Kte,_so),e(Hg,bso),e(Hg,WB),e(WB,vso),e(Hg,Fso),e(k,Tso),e(k,Ls),e(Ls,Zte),e(Zte,Mso),e(Ls,Eso),e(Ls,HB),e(HB,Cso),e(Ls,wso),e(Ls,UB),e(UB,Aso),e(Ls,yso),e(k,Lso),e(k,Ug),e(Ug,eae),e(eae,xso),e(Ug,$so),e(Ug,JB),e(JB,kso),e(Ug,Sso),e(k,Rso),e(k,Jg),e(Jg,oae),e(oae,Bso),e(Jg,Pso),e(Jg,YB),e(YB,Iso),e(Jg,qso),e(k,Nso),e(k,xs),e(xs,rae),e(rae,jso),e(xs,Dso),e(xs,KB),e(KB,Gso),e(xs,Oso),e(xs,ZB),e(ZB,Vso),e(xs,Xso),e(k,zso),e(k,$s),e($s,tae),e(tae,Qso),e($s,Wso),e($s,eP),e(eP,Hso),e($s,Uso),e($s,oP),e(oP,Jso),e($s,Yso),e(k,Kso),e(k,ks),e(ks,aae),e(aae,Zso),e(ks,elo),e(ks,rP),e(rP,olo),e(ks,rlo),e(ks,tP),e(tP,tlo),e(ks,alo),e(k,nlo),e(k,Ss),e(Ss,nae),e(nae,slo),e(Ss,llo),e(Ss,aP),e(aP,ilo),e(Ss,dlo),e(Ss,nP),e(nP,clo),e(Ss,flo),e(Cr,mlo),M(Yg,Cr,null),e(wo,glo),e(wo,Kg),M(pA,Kg,null),e(Kg,hlo),e(Kg,sae),e(sae,plo),b(f,vIe,_),b(f,vi,_),e(vi,Zg),e(Zg,lae),M(uA,lae,null),e(vi,ulo),e(vi,iae),e(iae,_lo),b(f,FIe,_),b(f,Ao,_),M(_A,Ao,null),e(Ao,blo),e(Ao,bA),e(bA,vlo),e(bA,sP),e(sP,Flo),e(bA,Tlo),e(Ao,Mlo),e(Ao,vA),e(vA,Elo),e(vA,dae),e(dae,Clo),e(vA,wlo),e(Ao,Alo),e(Ao,Qe),M(FA,Qe,null),e(Qe,ylo),e(Qe,cae),e(cae,Llo),e(Qe,xlo),e(Qe,wa),e(wa,$lo),e(wa,fae),e(fae,klo),e(wa,Slo),e(wa,mae),e(mae,Rlo),e(wa,Blo),e(wa,gae),e(gae,Plo),e(wa,Ilo),e(Qe,qlo),e(Qe,oe),e(oe,eh),e(eh,hae),e(hae,Nlo),e(eh,jlo),e(eh,lP),e(lP,Dlo),e(eh,Glo),e(oe,Olo),e(oe,oh),e(oh,pae),e(pae,Vlo),e(oh,Xlo),e(oh,iP),e(iP,zlo),e(oh,Qlo),e(oe,Wlo),e(oe,rh),e(rh,uae),e(uae,Hlo),e(rh,Ulo),e(rh,dP),e(dP,Jlo),e(rh,Ylo),e(oe,Klo),e(oe,th),e(th,_ae),e(_ae,Zlo),e(th,eio),e(th,cP),e(cP,oio),e(th,rio),e(oe,tio),e(oe,ah),e(ah,bae),e(bae,aio),e(ah,nio),e(ah,fP),e(fP,sio),e(ah,lio),e(oe,iio),e(oe,nh),e(nh,vae),e(vae,dio),e(nh,cio),e(nh,mP),e(mP,fio),e(nh,mio),e(oe,gio),e(oe,sh),e(sh,Fae),e(Fae,hio),e(sh,pio),e(sh,gP),e(gP,uio),e(sh,_io),e(oe,bio),e(oe,lh),e(lh,Tae),e(Tae,vio),e(lh,Fio),e(lh,hP),e(hP,Tio),e(lh,Mio),e(oe,Eio),e(oe,ih),e(ih,Mae),e(Mae,Cio),e(ih,wio),e(ih,pP),e(pP,Aio),e(ih,yio),e(oe,Lio),e(oe,dh),e(dh,Eae),e(Eae,xio),e(dh,$io),e(dh,uP),e(uP,kio),e(dh,Sio),e(oe,Rio),e(oe,ch),e(ch,Cae),e(Cae,Bio),e(ch,Pio),e(ch,_P),e(_P,Iio),e(ch,qio),e(oe,Nio),e(oe,fh),e(fh,wae),e(wae,jio),e(fh,Dio),e(fh,bP),e(bP,Gio),e(fh,Oio),e(oe,Vio),e(oe,mh),e(mh,Aae),e(Aae,Xio),e(mh,zio),e(mh,vP),e(vP,Qio),e(mh,Wio),e(oe,Hio),e(oe,gh),e(gh,yae),e(yae,Uio),e(gh,Jio),e(gh,FP),e(FP,Yio),e(gh,Kio),e(oe,Zio),e(oe,hh),e(hh,Lae),e(Lae,edo),e(hh,odo),e(hh,TP),e(TP,rdo),e(hh,tdo),e(oe,ado),e(oe,ph),e(ph,xae),e(xae,ndo),e(ph,sdo),e(ph,MP),e(MP,ldo),e(ph,ido),e(oe,ddo),e(oe,uh),e(uh,$ae),e($ae,cdo),e(uh,fdo),e(uh,EP),e(EP,mdo),e(uh,gdo),e(oe,hdo),e(oe,_h),e(_h,kae),e(kae,pdo),e(_h,udo),e(_h,CP),e(CP,_do),e(_h,bdo),e(oe,vdo),e(oe,bh),e(bh,Sae),e(Sae,Fdo),e(bh,Tdo),e(bh,wP),e(wP,Mdo),e(bh,Edo),e(oe,Cdo),e(oe,vh),e(vh,Rae),e(Rae,wdo),e(vh,Ado),e(vh,AP),e(AP,ydo),e(vh,Ldo),e(oe,xdo),e(oe,Fh),e(Fh,Bae),e(Bae,$do),e(Fh,kdo),e(Fh,yP),e(yP,Sdo),e(Fh,Rdo),e(oe,Bdo),e(oe,Th),e(Th,Pae),e(Pae,Pdo),e(Th,Ido),e(Th,LP),e(LP,qdo),e(Th,Ndo),e(oe,jdo),e(oe,Mh),e(Mh,Iae),e(Iae,Ddo),e(Mh,Gdo),e(Mh,xP),e(xP,Odo),e(Mh,Vdo),e(oe,Xdo),e(oe,Eh),e(Eh,qae),e(qae,zdo),e(Eh,Qdo),e(Eh,$P),e($P,Wdo),e(Eh,Hdo),e(oe,Udo),e(oe,Ch),e(Ch,Nae),e(Nae,Jdo),e(Ch,Ydo),e(Ch,kP),e(kP,Kdo),e(Ch,Zdo),e(Qe,eco),M(wh,Qe,null),e(Qe,oco),M(Ah,Qe,null),e(Ao,rco),e(Ao,yh),M(TA,yh,null),e(yh,tco),e(yh,jae),e(jae,aco),b(f,TIe,_),b(f,Fi,_),e(Fi,Lh),e(Lh,Dae),M(MA,Dae,null),e(Fi,nco),e(Fi,Gae),e(Gae,sco),b(f,MIe,_),b(f,yo,_),M(EA,yo,null),e(yo,lco),e(yo,CA),e(CA,ico),e(CA,SP),e(SP,dco),e(CA,cco),e(yo,fco),e(yo,wA),e(wA,mco),e(wA,Oae),e(Oae,gco),e(wA,hco),e(yo,pco),e(yo,We),M(AA,We,null),e(We,uco),e(We,Vae),e(Vae,_co),e(We,bco),e(We,Ti),e(Ti,vco),e(Ti,Xae),e(Xae,Fco),e(Ti,Tco),e(Ti,zae),e(zae,Mco),e(Ti,Eco),e(We,Cco),e(We,be),e(be,xh),e(xh,Qae),e(Qae,wco),e(xh,Aco),e(xh,RP),e(RP,yco),e(xh,Lco),e(be,xco),e(be,$h),e($h,Wae),e(Wae,$co),e($h,kco),e($h,Hae),e(Hae,Sco),e($h,Rco),e(be,Bco),e(be,kh),e(kh,Uae),e(Uae,Pco),e(kh,Ico),e(kh,BP),e(BP,qco),e(kh,Nco),e(be,jco),e(be,Sh),e(Sh,Jae),e(Jae,Dco),e(Sh,Gco),e(Sh,PP),e(PP,Oco),e(Sh,Vco),e(be,Xco),e(be,Rh),e(Rh,Yae),e(Yae,zco),e(Rh,Qco),e(Rh,IP),e(IP,Wco),e(Rh,Hco),e(be,Uco),e(be,Bh),e(Bh,Kae),e(Kae,Jco),e(Bh,Yco),e(Bh,qP),e(qP,Kco),e(Bh,Zco),e(be,efo),e(be,Ph),e(Ph,Zae),e(Zae,ofo),e(Ph,rfo),e(Ph,NP),e(NP,tfo),e(Ph,afo),e(be,nfo),e(be,Ih),e(Ih,ene),e(ene,sfo),e(Ih,lfo),e(Ih,jP),e(jP,ifo),e(Ih,dfo),e(be,cfo),e(be,qh),e(qh,one),e(one,ffo),e(qh,mfo),e(qh,DP),e(DP,gfo),e(qh,hfo),e(be,pfo),e(be,Nh),e(Nh,rne),e(rne,ufo),e(Nh,_fo),e(Nh,GP),e(GP,bfo),e(Nh,vfo),e(be,Ffo),e(be,jh),e(jh,tne),e(tne,Tfo),e(jh,Mfo),e(jh,OP),e(OP,Efo),e(jh,Cfo),e(be,wfo),e(be,Dh),e(Dh,ane),e(ane,Afo),e(Dh,yfo),e(Dh,VP),e(VP,Lfo),e(Dh,xfo),e(be,$fo),e(be,Gh),e(Gh,nne),e(nne,kfo),e(Gh,Sfo),e(Gh,XP),e(XP,Rfo),e(Gh,Bfo),e(be,Pfo),e(be,Oh),e(Oh,sne),e(sne,Ifo),e(Oh,qfo),e(Oh,zP),e(zP,Nfo),e(Oh,jfo),e(be,Dfo),e(be,Vh),e(Vh,lne),e(lne,Gfo),e(Vh,Ofo),e(Vh,QP),e(QP,Vfo),e(Vh,Xfo),e(We,zfo),M(Xh,We,null),e(We,Qfo),M(zh,We,null),e(yo,Wfo),e(yo,Qh),M(yA,Qh,null),e(Qh,Hfo),e(Qh,ine),e(ine,Ufo),b(f,EIe,_),b(f,Mi,_),e(Mi,Wh),e(Wh,dne),M(LA,dne,null),e(Mi,Jfo),e(Mi,cne),e(cne,Yfo),b(f,CIe,_),b(f,Lo,_),M(xA,Lo,null),e(Lo,Kfo),e(Lo,Ei),e(Ei,Zfo),e(Ei,WP),e(WP,emo),e(Ei,omo),e(Ei,HP),e(HP,rmo),e(Ei,tmo),e(Lo,amo),e(Lo,$A),e($A,nmo),e($A,fne),e(fne,smo),e($A,lmo),e(Lo,imo),e(Lo,ot),M(kA,ot,null),e(ot,dmo),e(ot,mne),e(mne,cmo),e(ot,fmo),e(ot,Ci),e(Ci,mmo),e(Ci,gne),e(gne,gmo),e(Ci,hmo),e(Ci,UP),e(UP,pmo),e(Ci,umo),e(ot,_mo),M(Hh,ot,null),e(Lo,bmo),e(Lo,He),M(SA,He,null),e(He,vmo),e(He,hne),e(hne,Fmo),e(He,Tmo),e(He,Aa),e(Aa,Mmo),e(Aa,pne),e(pne,Emo),e(Aa,Cmo),e(Aa,une),e(une,wmo),e(Aa,Amo),e(Aa,_ne),e(_ne,ymo),e(Aa,Lmo),e(He,xmo),e(He,x),e(x,Uh),e(Uh,bne),e(bne,$mo),e(Uh,kmo),e(Uh,JP),e(JP,Smo),e(Uh,Rmo),e(x,Bmo),e(x,Jh),e(Jh,vne),e(vne,Pmo),e(Jh,Imo),e(Jh,YP),e(YP,qmo),e(Jh,Nmo),e(x,jmo),e(x,Yh),e(Yh,Fne),e(Fne,Dmo),e(Yh,Gmo),e(Yh,KP),e(KP,Omo),e(Yh,Vmo),e(x,Xmo),e(x,Kh),e(Kh,Tne),e(Tne,zmo),e(Kh,Qmo),e(Kh,ZP),e(ZP,Wmo),e(Kh,Hmo),e(x,Umo),e(x,Zh),e(Zh,Mne),e(Mne,Jmo),e(Zh,Ymo),e(Zh,eI),e(eI,Kmo),e(Zh,Zmo),e(x,ego),e(x,ep),e(ep,Ene),e(Ene,ogo),e(ep,rgo),e(ep,oI),e(oI,tgo),e(ep,ago),e(x,ngo),e(x,op),e(op,Cne),e(Cne,sgo),e(op,lgo),e(op,rI),e(rI,igo),e(op,dgo),e(x,cgo),e(x,rp),e(rp,wne),e(wne,fgo),e(rp,mgo),e(rp,tI),e(tI,ggo),e(rp,hgo),e(x,pgo),e(x,tp),e(tp,Ane),e(Ane,ugo),e(tp,_go),e(tp,aI),e(aI,bgo),e(tp,vgo),e(x,Fgo),e(x,ap),e(ap,yne),e(yne,Tgo),e(ap,Mgo),e(ap,nI),e(nI,Ego),e(ap,Cgo),e(x,wgo),e(x,np),e(np,Lne),e(Lne,Ago),e(np,ygo),e(np,sI),e(sI,Lgo),e(np,xgo),e(x,$go),e(x,sp),e(sp,xne),e(xne,kgo),e(sp,Sgo),e(sp,lI),e(lI,Rgo),e(sp,Bgo),e(x,Pgo),e(x,lp),e(lp,$ne),e($ne,Igo),e(lp,qgo),e(lp,iI),e(iI,Ngo),e(lp,jgo),e(x,Dgo),e(x,ip),e(ip,kne),e(kne,Ggo),e(ip,Ogo),e(ip,dI),e(dI,Vgo),e(ip,Xgo),e(x,zgo),e(x,dp),e(dp,Sne),e(Sne,Qgo),e(dp,Wgo),e(dp,cI),e(cI,Hgo),e(dp,Ugo),e(x,Jgo),e(x,cp),e(cp,Rne),e(Rne,Ygo),e(cp,Kgo),e(cp,fI),e(fI,Zgo),e(cp,eho),e(x,oho),e(x,fp),e(fp,Bne),e(Bne,rho),e(fp,tho),e(fp,mI),e(mI,aho),e(fp,nho),e(x,sho),e(x,mp),e(mp,Pne),e(Pne,lho),e(mp,iho),e(mp,gI),e(gI,dho),e(mp,cho),e(x,fho),e(x,gp),e(gp,Ine),e(Ine,mho),e(gp,gho),e(gp,hI),e(hI,hho),e(gp,pho),e(x,uho),e(x,hp),e(hp,qne),e(qne,_ho),e(hp,bho),e(hp,pI),e(pI,vho),e(hp,Fho),e(x,Tho),e(x,pp),e(pp,Nne),e(Nne,Mho),e(pp,Eho),e(pp,uI),e(uI,Cho),e(pp,who),e(x,Aho),e(x,up),e(up,jne),e(jne,yho),e(up,Lho),e(up,_I),e(_I,xho),e(up,$ho),e(x,kho),e(x,_p),e(_p,Dne),e(Dne,Sho),e(_p,Rho),e(_p,bI),e(bI,Bho),e(_p,Pho),e(x,Iho),e(x,bp),e(bp,Gne),e(Gne,qho),e(bp,Nho),e(bp,vI),e(vI,jho),e(bp,Dho),e(x,Gho),e(x,vp),e(vp,One),e(One,Oho),e(vp,Vho),e(vp,FI),e(FI,Xho),e(vp,zho),e(x,Qho),e(x,Fp),e(Fp,Vne),e(Vne,Who),e(Fp,Hho),e(Fp,TI),e(TI,Uho),e(Fp,Jho),e(x,Yho),e(x,Tp),e(Tp,Xne),e(Xne,Kho),e(Tp,Zho),e(Tp,MI),e(MI,epo),e(Tp,opo),e(x,rpo),e(x,Mp),e(Mp,zne),e(zne,tpo),e(Mp,apo),e(Mp,EI),e(EI,npo),e(Mp,spo),e(x,lpo),e(x,Ep),e(Ep,Qne),e(Qne,ipo),e(Ep,dpo),e(Ep,CI),e(CI,cpo),e(Ep,fpo),e(x,mpo),e(x,Cp),e(Cp,Wne),e(Wne,gpo),e(Cp,hpo),e(Cp,wI),e(wI,ppo),e(Cp,upo),e(x,_po),e(x,wp),e(wp,Hne),e(Hne,bpo),e(wp,vpo),e(wp,AI),e(AI,Fpo),e(wp,Tpo),e(x,Mpo),e(x,Ap),e(Ap,Une),e(Une,Epo),e(Ap,Cpo),e(Ap,yI),e(yI,wpo),e(Ap,Apo),e(x,ypo),e(x,Rs),e(Rs,Jne),e(Jne,Lpo),e(Rs,xpo),e(Rs,LI),e(LI,$po),e(Rs,kpo),e(Rs,xI),e(xI,Spo),e(Rs,Rpo),e(x,Bpo),e(x,yp),e(yp,Yne),e(Yne,Ppo),e(yp,Ipo),e(yp,$I),e($I,qpo),e(yp,Npo),e(x,jpo),e(x,Lp),e(Lp,Kne),e(Kne,Dpo),e(Lp,Gpo),e(Lp,kI),e(kI,Opo),e(Lp,Vpo),e(x,Xpo),e(x,xp),e(xp,Zne),e(Zne,zpo),e(xp,Qpo),e(xp,SI),e(SI,Wpo),e(xp,Hpo),e(x,Upo),e(x,$p),e($p,ese),e(ese,Jpo),e($p,Ypo),e($p,RI),e(RI,Kpo),e($p,Zpo),e(x,euo),e(x,kp),e(kp,ose),e(ose,ouo),e(kp,ruo),e(kp,BI),e(BI,tuo),e(kp,auo),e(x,nuo),e(x,Sp),e(Sp,rse),e(rse,suo),e(Sp,luo),e(Sp,PI),e(PI,iuo),e(Sp,duo),e(x,cuo),e(x,Rp),e(Rp,tse),e(tse,fuo),e(Rp,muo),e(Rp,II),e(II,guo),e(Rp,huo),e(x,puo),e(x,Bp),e(Bp,ase),e(ase,uuo),e(Bp,_uo),e(Bp,qI),e(qI,buo),e(Bp,vuo),e(x,Fuo),e(x,Pp),e(Pp,nse),e(nse,Tuo),e(Pp,Muo),e(Pp,NI),e(NI,Euo),e(Pp,Cuo),e(x,wuo),e(x,Ip),e(Ip,sse),e(sse,Auo),e(Ip,yuo),e(Ip,jI),e(jI,Luo),e(Ip,xuo),e(x,$uo),e(x,qp),e(qp,lse),e(lse,kuo),e(qp,Suo),e(qp,DI),e(DI,Ruo),e(qp,Buo),e(x,Puo),e(x,Np),e(Np,ise),e(ise,Iuo),e(Np,quo),e(Np,GI),e(GI,Nuo),e(Np,juo),e(x,Duo),e(x,jp),e(jp,dse),e(dse,Guo),e(jp,Ouo),e(jp,OI),e(OI,Vuo),e(jp,Xuo),e(x,zuo),e(x,Dp),e(Dp,cse),e(cse,Quo),e(Dp,Wuo),e(Dp,VI),e(VI,Huo),e(Dp,Uuo),e(x,Juo),e(x,Gp),e(Gp,fse),e(fse,Yuo),e(Gp,Kuo),e(Gp,XI),e(XI,Zuo),e(Gp,e_o),e(x,o_o),e(x,Op),e(Op,mse),e(mse,r_o),e(Op,t_o),e(Op,zI),e(zI,a_o),e(Op,n_o),e(x,s_o),e(x,Vp),e(Vp,gse),e(gse,l_o),e(Vp,i_o),e(Vp,QI),e(QI,d_o),e(Vp,c_o),e(x,f_o),e(x,Xp),e(Xp,hse),e(hse,m_o),e(Xp,g_o),e(Xp,WI),e(WI,h_o),e(Xp,p_o),e(x,u_o),e(x,zp),e(zp,pse),e(pse,__o),e(zp,b_o),e(zp,HI),e(HI,v_o),e(zp,F_o),e(x,T_o),e(x,Qp),e(Qp,use),e(use,M_o),e(Qp,E_o),e(Qp,UI),e(UI,C_o),e(Qp,w_o),e(x,A_o),e(x,Wp),e(Wp,_se),e(_se,y_o),e(Wp,L_o),e(Wp,JI),e(JI,x_o),e(Wp,$_o),e(x,k_o),e(x,Hp),e(Hp,bse),e(bse,S_o),e(Hp,R_o),e(Hp,YI),e(YI,B_o),e(Hp,P_o),e(x,I_o),e(x,Up),e(Up,vse),e(vse,q_o),e(Up,N_o),e(Up,KI),e(KI,j_o),e(Up,D_o),e(x,G_o),e(x,Jp),e(Jp,Fse),e(Fse,O_o),e(Jp,V_o),e(Jp,ZI),e(ZI,X_o),e(Jp,z_o),e(x,Q_o),e(x,Yp),e(Yp,Tse),e(Tse,W_o),e(Yp,H_o),e(Yp,eq),e(eq,U_o),e(Yp,J_o),e(x,Y_o),e(x,Kp),e(Kp,Mse),e(Mse,K_o),e(Kp,Z_o),e(Kp,oq),e(oq,e2o),e(Kp,o2o),e(x,r2o),e(x,Zp),e(Zp,Ese),e(Ese,t2o),e(Zp,a2o),e(Zp,rq),e(rq,n2o),e(Zp,s2o),e(x,l2o),e(x,eu),e(eu,Cse),e(Cse,i2o),e(eu,d2o),e(eu,tq),e(tq,c2o),e(eu,f2o),e(x,m2o),e(x,ou),e(ou,wse),e(wse,g2o),e(ou,h2o),e(ou,aq),e(aq,p2o),e(ou,u2o),e(x,_2o),e(x,ru),e(ru,Ase),e(Ase,b2o),e(ru,v2o),e(ru,nq),e(nq,F2o),e(ru,T2o),e(x,M2o),e(x,tu),e(tu,yse),e(yse,E2o),e(tu,C2o),e(tu,sq),e(sq,w2o),e(tu,A2o),e(x,y2o),e(x,au),e(au,Lse),e(Lse,L2o),e(au,x2o),e(au,lq),e(lq,$2o),e(au,k2o),e(x,S2o),e(x,nu),e(nu,xse),e(xse,R2o),e(nu,B2o),e(nu,iq),e(iq,P2o),e(nu,I2o),e(x,q2o),e(x,su),e(su,$se),e($se,N2o),e(su,j2o),e(su,dq),e(dq,D2o),e(su,G2o),e(x,O2o),e(x,lu),e(lu,kse),e(kse,V2o),e(lu,X2o),e(lu,cq),e(cq,z2o),e(lu,Q2o),e(x,W2o),e(x,iu),e(iu,Sse),e(Sse,H2o),e(iu,U2o),e(iu,fq),e(fq,J2o),e(iu,Y2o),e(x,K2o),e(x,du),e(du,Rse),e(Rse,Z2o),e(du,e1o),e(du,mq),e(mq,o1o),e(du,r1o),e(x,t1o),e(x,cu),e(cu,Bse),e(Bse,a1o),e(cu,n1o),e(cu,gq),e(gq,s1o),e(cu,l1o),e(x,i1o),e(x,fu),e(fu,Pse),e(Pse,d1o),e(fu,c1o),e(fu,hq),e(hq,f1o),e(fu,m1o),e(x,g1o),e(x,mu),e(mu,Ise),e(Ise,h1o),e(mu,p1o),e(mu,pq),e(pq,u1o),e(mu,_1o),e(x,b1o),e(x,gu),e(gu,qse),e(qse,v1o),e(gu,F1o),e(gu,uq),e(uq,T1o),e(gu,M1o),e(x,E1o),e(x,hu),e(hu,Nse),e(Nse,C1o),e(hu,w1o),e(hu,_q),e(_q,A1o),e(hu,y1o),e(x,L1o),e(x,pu),e(pu,jse),e(jse,x1o),e(pu,$1o),e(pu,bq),e(bq,k1o),e(pu,S1o),e(x,R1o),e(x,uu),e(uu,Dse),e(Dse,B1o),e(uu,P1o),e(uu,vq),e(vq,I1o),e(uu,q1o),e(x,N1o),e(x,_u),e(_u,Gse),e(Gse,j1o),e(_u,D1o),e(_u,Fq),e(Fq,G1o),e(_u,O1o),e(x,V1o),e(x,bu),e(bu,Ose),e(Ose,X1o),e(bu,z1o),e(bu,Tq),e(Tq,Q1o),e(bu,W1o),e(x,H1o),e(x,vu),e(vu,Vse),e(Vse,U1o),e(vu,J1o),e(vu,Mq),e(Mq,Y1o),e(vu,K1o),e(x,Z1o),e(x,Fu),e(Fu,Xse),e(Xse,ebo),e(Fu,obo),e(Fu,Eq),e(Eq,rbo),e(Fu,tbo),e(x,abo),e(x,Tu),e(Tu,zse),e(zse,nbo),e(Tu,sbo),e(Tu,Cq),e(Cq,lbo),e(Tu,ibo),e(x,dbo),e(x,Mu),e(Mu,Qse),e(Qse,cbo),e(Mu,fbo),e(Mu,wq),e(wq,mbo),e(Mu,gbo),e(x,hbo),e(x,Eu),e(Eu,Wse),e(Wse,pbo),e(Eu,ubo),e(Eu,Aq),e(Aq,_bo),e(Eu,bbo),e(x,vbo),e(x,Cu),e(Cu,Hse),e(Hse,Fbo),e(Cu,Tbo),e(Cu,yq),e(yq,Mbo),e(Cu,Ebo),e(x,Cbo),e(x,wu),e(wu,Use),e(Use,wbo),e(wu,Abo),e(wu,Lq),e(Lq,ybo),e(wu,Lbo),e(x,xbo),e(x,Au),e(Au,Jse),e(Jse,$bo),e(Au,kbo),e(Au,xq),e(xq,Sbo),e(Au,Rbo),e(x,Bbo),e(x,yu),e(yu,Yse),e(Yse,Pbo),e(yu,Ibo),e(yu,$q),e($q,qbo),e(yu,Nbo),e(x,jbo),e(x,Lu),e(Lu,Kse),e(Kse,Dbo),e(Lu,Gbo),e(Lu,kq),e(kq,Obo),e(Lu,Vbo),e(x,Xbo),e(x,xu),e(xu,Zse),e(Zse,zbo),e(xu,Qbo),e(xu,Sq),e(Sq,Wbo),e(xu,Hbo),e(x,Ubo),e(x,$u),e($u,ele),e(ele,Jbo),e($u,Ybo),e($u,Rq),e(Rq,Kbo),e($u,Zbo),e(x,evo),e(x,ku),e(ku,ole),e(ole,ovo),e(ku,rvo),e(ku,Bq),e(Bq,tvo),e(ku,avo),e(x,nvo),e(x,Su),e(Su,rle),e(rle,svo),e(Su,lvo),e(Su,Pq),e(Pq,ivo),e(Su,dvo),e(x,cvo),e(x,Ru),e(Ru,tle),e(tle,fvo),e(Ru,mvo),e(Ru,Iq),e(Iq,gvo),e(Ru,hvo),e(x,pvo),e(x,Bu),e(Bu,ale),e(ale,uvo),e(Bu,_vo),e(Bu,qq),e(qq,bvo),e(Bu,vvo),e(x,Fvo),e(x,Pu),e(Pu,nle),e(nle,Tvo),e(Pu,Mvo),e(Pu,Nq),e(Nq,Evo),e(Pu,Cvo),e(x,wvo),e(x,Iu),e(Iu,sle),e(sle,Avo),e(Iu,yvo),e(Iu,jq),e(jq,Lvo),e(Iu,xvo),e(x,$vo),e(x,qu),e(qu,lle),e(lle,kvo),e(qu,Svo),e(qu,Dq),e(Dq,Rvo),e(qu,Bvo),e(He,Pvo),e(He,Nu),e(Nu,Ivo),e(Nu,ile),e(ile,qvo),e(Nu,Nvo),e(Nu,dle),e(dle,jvo),e(He,Dvo),M(ju,He,null),b(f,wIe,_),b(f,wi,_),e(wi,Du),e(Du,cle),M(RA,cle,null),e(wi,Gvo),e(wi,fle),e(fle,Ovo),b(f,AIe,_),b(f,xo,_),M(BA,xo,null),e(xo,Vvo),e(xo,Ai),e(Ai,Xvo),e(Ai,Gq),e(Gq,zvo),e(Ai,Qvo),e(Ai,Oq),e(Oq,Wvo),e(Ai,Hvo),e(xo,Uvo),e(xo,PA),e(PA,Jvo),e(PA,mle),e(mle,Yvo),e(PA,Kvo),e(xo,Zvo),e(xo,rt),M(IA,rt,null),e(rt,eFo),e(rt,gle),e(gle,oFo),e(rt,rFo),e(rt,yi),e(yi,tFo),e(yi,hle),e(hle,aFo),e(yi,nFo),e(yi,Vq),e(Vq,sFo),e(yi,lFo),e(rt,iFo),M(Gu,rt,null),e(xo,dFo),e(xo,Ue),M(qA,Ue,null),e(Ue,cFo),e(Ue,ple),e(ple,fFo),e(Ue,mFo),e(Ue,ya),e(ya,gFo),e(ya,ule),e(ule,hFo),e(ya,pFo),e(ya,_le),e(_le,uFo),e(ya,_Fo),e(ya,ble),e(ble,bFo),e(ya,vFo),e(Ue,FFo),e(Ue,G),e(G,Ou),e(Ou,vle),e(vle,TFo),e(Ou,MFo),e(Ou,Xq),e(Xq,EFo),e(Ou,CFo),e(G,wFo),e(G,Vu),e(Vu,Fle),e(Fle,AFo),e(Vu,yFo),e(Vu,zq),e(zq,LFo),e(Vu,xFo),e(G,$Fo),e(G,Xu),e(Xu,Tle),e(Tle,kFo),e(Xu,SFo),e(Xu,Qq),e(Qq,RFo),e(Xu,BFo),e(G,PFo),e(G,zu),e(zu,Mle),e(Mle,IFo),e(zu,qFo),e(zu,Wq),e(Wq,NFo),e(zu,jFo),e(G,DFo),e(G,Qu),e(Qu,Ele),e(Ele,GFo),e(Qu,OFo),e(Qu,Hq),e(Hq,VFo),e(Qu,XFo),e(G,zFo),e(G,Wu),e(Wu,Cle),e(Cle,QFo),e(Wu,WFo),e(Wu,Uq),e(Uq,HFo),e(Wu,UFo),e(G,JFo),e(G,Hu),e(Hu,wle),e(wle,YFo),e(Hu,KFo),e(Hu,Jq),e(Jq,ZFo),e(Hu,e0o),e(G,o0o),e(G,Uu),e(Uu,Ale),e(Ale,r0o),e(Uu,t0o),e(Uu,Yq),e(Yq,a0o),e(Uu,n0o),e(G,s0o),e(G,Ju),e(Ju,yle),e(yle,l0o),e(Ju,i0o),e(Ju,Kq),e(Kq,d0o),e(Ju,c0o),e(G,f0o),e(G,Yu),e(Yu,Lle),e(Lle,m0o),e(Yu,g0o),e(Yu,Zq),e(Zq,h0o),e(Yu,p0o),e(G,u0o),e(G,Ku),e(Ku,xle),e(xle,_0o),e(Ku,b0o),e(Ku,eN),e(eN,v0o),e(Ku,F0o),e(G,T0o),e(G,Zu),e(Zu,$le),e($le,M0o),e(Zu,E0o),e(Zu,oN),e(oN,C0o),e(Zu,w0o),e(G,A0o),e(G,e_),e(e_,kle),e(kle,y0o),e(e_,L0o),e(e_,rN),e(rN,x0o),e(e_,$0o),e(G,k0o),e(G,o_),e(o_,Sle),e(Sle,S0o),e(o_,R0o),e(o_,tN),e(tN,B0o),e(o_,P0o),e(G,I0o),e(G,r_),e(r_,Rle),e(Rle,q0o),e(r_,N0o),e(r_,aN),e(aN,j0o),e(r_,D0o),e(G,G0o),e(G,t_),e(t_,Ble),e(Ble,O0o),e(t_,V0o),e(t_,nN),e(nN,X0o),e(t_,z0o),e(G,Q0o),e(G,a_),e(a_,Ple),e(Ple,W0o),e(a_,H0o),e(a_,sN),e(sN,U0o),e(a_,J0o),e(G,Y0o),e(G,n_),e(n_,Ile),e(Ile,K0o),e(n_,Z0o),e(n_,lN),e(lN,eTo),e(n_,oTo),e(G,rTo),e(G,s_),e(s_,qle),e(qle,tTo),e(s_,aTo),e(s_,iN),e(iN,nTo),e(s_,sTo),e(G,lTo),e(G,l_),e(l_,Nle),e(Nle,iTo),e(l_,dTo),e(l_,dN),e(dN,cTo),e(l_,fTo),e(G,mTo),e(G,i_),e(i_,jle),e(jle,gTo),e(i_,hTo),e(i_,cN),e(cN,pTo),e(i_,uTo),e(G,_To),e(G,d_),e(d_,Dle),e(Dle,bTo),e(d_,vTo),e(d_,fN),e(fN,FTo),e(d_,TTo),e(G,MTo),e(G,c_),e(c_,Gle),e(Gle,ETo),e(c_,CTo),e(c_,mN),e(mN,wTo),e(c_,ATo),e(G,yTo),e(G,f_),e(f_,Ole),e(Ole,LTo),e(f_,xTo),e(f_,gN),e(gN,$To),e(f_,kTo),e(G,STo),e(G,m_),e(m_,Vle),e(Vle,RTo),e(m_,BTo),e(m_,hN),e(hN,PTo),e(m_,ITo),e(G,qTo),e(G,g_),e(g_,Xle),e(Xle,NTo),e(g_,jTo),e(g_,pN),e(pN,DTo),e(g_,GTo),e(G,OTo),e(G,h_),e(h_,zle),e(zle,VTo),e(h_,XTo),e(h_,uN),e(uN,zTo),e(h_,QTo),e(G,WTo),e(G,p_),e(p_,Qle),e(Qle,HTo),e(p_,UTo),e(p_,_N),e(_N,JTo),e(p_,YTo),e(G,KTo),e(G,u_),e(u_,Wle),e(Wle,ZTo),e(u_,e7o),e(u_,bN),e(bN,o7o),e(u_,r7o),e(G,t7o),e(G,__),e(__,Hle),e(Hle,a7o),e(__,n7o),e(__,vN),e(vN,s7o),e(__,l7o),e(G,i7o),e(G,b_),e(b_,Ule),e(Ule,d7o),e(b_,c7o),e(b_,FN),e(FN,f7o),e(b_,m7o),e(G,g7o),e(G,v_),e(v_,Jle),e(Jle,h7o),e(v_,p7o),e(v_,TN),e(TN,u7o),e(v_,_7o),e(G,b7o),e(G,F_),e(F_,Yle),e(Yle,v7o),e(F_,F7o),e(F_,MN),e(MN,T7o),e(F_,M7o),e(G,E7o),e(G,T_),e(T_,Kle),e(Kle,C7o),e(T_,w7o),e(T_,EN),e(EN,A7o),e(T_,y7o),e(G,L7o),e(G,M_),e(M_,Zle),e(Zle,x7o),e(M_,$7o),e(M_,CN),e(CN,k7o),e(M_,S7o),e(G,R7o),e(G,E_),e(E_,eie),e(eie,B7o),e(E_,P7o),e(E_,wN),e(wN,I7o),e(E_,q7o),e(G,N7o),e(G,C_),e(C_,oie),e(oie,j7o),e(C_,D7o),e(C_,AN),e(AN,G7o),e(C_,O7o),e(G,V7o),e(G,w_),e(w_,rie),e(rie,X7o),e(w_,z7o),e(w_,yN),e(yN,Q7o),e(w_,W7o),e(G,H7o),e(G,A_),e(A_,tie),e(tie,U7o),e(A_,J7o),e(A_,LN),e(LN,Y7o),e(A_,K7o),e(G,Z7o),e(G,y_),e(y_,aie),e(aie,eMo),e(y_,oMo),e(y_,xN),e(xN,rMo),e(y_,tMo),e(G,aMo),e(G,L_),e(L_,nie),e(nie,nMo),e(L_,sMo),e(L_,$N),e($N,lMo),e(L_,iMo),e(Ue,dMo),e(Ue,x_),e(x_,cMo),e(x_,sie),e(sie,fMo),e(x_,mMo),e(x_,lie),e(lie,gMo),e(Ue,hMo),M($_,Ue,null),b(f,yIe,_),b(f,Li,_),e(Li,k_),e(k_,iie),M(NA,iie,null),e(Li,pMo),e(Li,die),e(die,uMo),b(f,LIe,_),b(f,$o,_),M(jA,$o,null),e($o,_Mo),e($o,xi),e(xi,bMo),e(xi,kN),e(kN,vMo),e(xi,FMo),e(xi,SN),e(SN,TMo),e(xi,MMo),e($o,EMo),e($o,DA),e(DA,CMo),e(DA,cie),e(cie,wMo),e(DA,AMo),e($o,yMo),e($o,tt),M(GA,tt,null),e(tt,LMo),e(tt,fie),e(fie,xMo),e(tt,$Mo),e(tt,$i),e($i,kMo),e($i,mie),e(mie,SMo),e($i,RMo),e($i,RN),e(RN,BMo),e($i,PMo),e(tt,IMo),M(S_,tt,null),e($o,qMo),e($o,Je),M(OA,Je,null),e(Je,NMo),e(Je,gie),e(gie,jMo),e(Je,DMo),e(Je,La),e(La,GMo),e(La,hie),e(hie,OMo),e(La,VMo),e(La,pie),e(pie,XMo),e(La,zMo),e(La,uie),e(uie,QMo),e(La,WMo),e(Je,HMo),e(Je,z),e(z,R_),e(R_,_ie),e(_ie,UMo),e(R_,JMo),e(R_,BN),e(BN,YMo),e(R_,KMo),e(z,ZMo),e(z,B_),e(B_,bie),e(bie,e4o),e(B_,o4o),e(B_,PN),e(PN,r4o),e(B_,t4o),e(z,a4o),e(z,P_),e(P_,vie),e(vie,n4o),e(P_,s4o),e(P_,IN),e(IN,l4o),e(P_,i4o),e(z,d4o),e(z,I_),e(I_,Fie),e(Fie,c4o),e(I_,f4o),e(I_,qN),e(qN,m4o),e(I_,g4o),e(z,h4o),e(z,q_),e(q_,Tie),e(Tie,p4o),e(q_,u4o),e(q_,NN),e(NN,_4o),e(q_,b4o),e(z,v4o),e(z,N_),e(N_,Mie),e(Mie,F4o),e(N_,T4o),e(N_,jN),e(jN,M4o),e(N_,E4o),e(z,C4o),e(z,j_),e(j_,Eie),e(Eie,w4o),e(j_,A4o),e(j_,DN),e(DN,y4o),e(j_,L4o),e(z,x4o),e(z,D_),e(D_,Cie),e(Cie,$4o),e(D_,k4o),e(D_,GN),e(GN,S4o),e(D_,R4o),e(z,B4o),e(z,G_),e(G_,wie),e(wie,P4o),e(G_,I4o),e(G_,ON),e(ON,q4o),e(G_,N4o),e(z,j4o),e(z,O_),e(O_,Aie),e(Aie,D4o),e(O_,G4o),e(O_,VN),e(VN,O4o),e(O_,V4o),e(z,X4o),e(z,V_),e(V_,yie),e(yie,z4o),e(V_,Q4o),e(V_,XN),e(XN,W4o),e(V_,H4o),e(z,U4o),e(z,X_),e(X_,Lie),e(Lie,J4o),e(X_,Y4o),e(X_,zN),e(zN,K4o),e(X_,Z4o),e(z,eEo),e(z,z_),e(z_,xie),e(xie,oEo),e(z_,rEo),e(z_,QN),e(QN,tEo),e(z_,aEo),e(z,nEo),e(z,Q_),e(Q_,$ie),e($ie,sEo),e(Q_,lEo),e(Q_,WN),e(WN,iEo),e(Q_,dEo),e(z,cEo),e(z,W_),e(W_,kie),e(kie,fEo),e(W_,mEo),e(W_,HN),e(HN,gEo),e(W_,hEo),e(z,pEo),e(z,H_),e(H_,Sie),e(Sie,uEo),e(H_,_Eo),e(H_,UN),e(UN,bEo),e(H_,vEo),e(z,FEo),e(z,U_),e(U_,Rie),e(Rie,TEo),e(U_,MEo),e(U_,JN),e(JN,EEo),e(U_,CEo),e(z,wEo),e(z,J_),e(J_,Bie),e(Bie,AEo),e(J_,yEo),e(J_,YN),e(YN,LEo),e(J_,xEo),e(z,$Eo),e(z,Y_),e(Y_,Pie),e(Pie,kEo),e(Y_,SEo),e(Y_,KN),e(KN,REo),e(Y_,BEo),e(z,PEo),e(z,K_),e(K_,Iie),e(Iie,IEo),e(K_,qEo),e(K_,ZN),e(ZN,NEo),e(K_,jEo),e(z,DEo),e(z,Z_),e(Z_,qie),e(qie,GEo),e(Z_,OEo),e(Z_,ej),e(ej,VEo),e(Z_,XEo),e(z,zEo),e(z,e2),e(e2,Nie),e(Nie,QEo),e(e2,WEo),e(e2,oj),e(oj,HEo),e(e2,UEo),e(z,JEo),e(z,o2),e(o2,jie),e(jie,YEo),e(o2,KEo),e(o2,rj),e(rj,ZEo),e(o2,e5o),e(z,o5o),e(z,r2),e(r2,Die),e(Die,r5o),e(r2,t5o),e(r2,tj),e(tj,a5o),e(r2,n5o),e(z,s5o),e(z,t2),e(t2,Gie),e(Gie,l5o),e(t2,i5o),e(t2,aj),e(aj,d5o),e(t2,c5o),e(z,f5o),e(z,a2),e(a2,Oie),e(Oie,m5o),e(a2,g5o),e(a2,nj),e(nj,h5o),e(a2,p5o),e(z,u5o),e(z,n2),e(n2,Vie),e(Vie,_5o),e(n2,b5o),e(n2,sj),e(sj,v5o),e(n2,F5o),e(z,T5o),e(z,s2),e(s2,Xie),e(Xie,M5o),e(s2,E5o),e(s2,lj),e(lj,C5o),e(s2,w5o),e(z,A5o),e(z,l2),e(l2,zie),e(zie,y5o),e(l2,L5o),e(l2,ij),e(ij,x5o),e(l2,$5o),e(z,k5o),e(z,i2),e(i2,Qie),e(Qie,S5o),e(i2,R5o),e(i2,dj),e(dj,B5o),e(i2,P5o),e(z,I5o),e(z,d2),e(d2,Wie),e(Wie,q5o),e(d2,N5o),e(d2,cj),e(cj,j5o),e(d2,D5o),e(z,G5o),e(z,c2),e(c2,Hie),e(Hie,O5o),e(c2,V5o),e(c2,fj),e(fj,X5o),e(c2,z5o),e(z,Q5o),e(z,f2),e(f2,Uie),e(Uie,W5o),e(f2,H5o),e(f2,mj),e(mj,U5o),e(f2,J5o),e(z,Y5o),e(z,m2),e(m2,Jie),e(Jie,K5o),e(m2,Z5o),e(m2,gj),e(gj,eCo),e(m2,oCo),e(z,rCo),e(z,g2),e(g2,Yie),e(Yie,tCo),e(g2,aCo),e(g2,hj),e(hj,nCo),e(g2,sCo),e(z,lCo),e(z,h2),e(h2,Kie),e(Kie,iCo),e(h2,dCo),e(h2,pj),e(pj,cCo),e(h2,fCo),e(z,mCo),e(z,p2),e(p2,Zie),e(Zie,gCo),e(p2,hCo),e(p2,uj),e(uj,pCo),e(p2,uCo),e(Je,_Co),e(Je,u2),e(u2,bCo),e(u2,ede),e(ede,vCo),e(u2,FCo),e(u2,ode),e(ode,TCo),e(Je,MCo),M(_2,Je,null),b(f,xIe,_),b(f,ki,_),e(ki,b2),e(b2,rde),M(VA,rde,null),e(ki,ECo),e(ki,tde),e(tde,CCo),b(f,$Ie,_),b(f,ko,_),M(XA,ko,null),e(ko,wCo),e(ko,Si),e(Si,ACo),e(Si,_j),e(_j,yCo),e(Si,LCo),e(Si,bj),e(bj,xCo),e(Si,$Co),e(ko,kCo),e(ko,zA),e(zA,SCo),e(zA,ade),e(ade,RCo),e(zA,BCo),e(ko,PCo),e(ko,at),M(QA,at,null),e(at,ICo),e(at,nde),e(nde,qCo),e(at,NCo),e(at,Ri),e(Ri,jCo),e(Ri,sde),e(sde,DCo),e(Ri,GCo),e(Ri,vj),e(vj,OCo),e(Ri,VCo),e(at,XCo),M(v2,at,null),e(ko,zCo),e(ko,Ye),M(WA,Ye,null),e(Ye,QCo),e(Ye,lde),e(lde,WCo),e(Ye,HCo),e(Ye,xa),e(xa,UCo),e(xa,ide),e(ide,JCo),e(xa,YCo),e(xa,dde),e(dde,KCo),e(xa,ZCo),e(xa,cde),e(cde,e3o),e(xa,o3o),e(Ye,r3o),e(Ye,W),e(W,F2),e(F2,fde),e(fde,t3o),e(F2,a3o),e(F2,Fj),e(Fj,n3o),e(F2,s3o),e(W,l3o),e(W,T2),e(T2,mde),e(mde,i3o),e(T2,d3o),e(T2,Tj),e(Tj,c3o),e(T2,f3o),e(W,m3o),e(W,M2),e(M2,gde),e(gde,g3o),e(M2,h3o),e(M2,Mj),e(Mj,p3o),e(M2,u3o),e(W,_3o),e(W,E2),e(E2,hde),e(hde,b3o),e(E2,v3o),e(E2,Ej),e(Ej,F3o),e(E2,T3o),e(W,M3o),e(W,C2),e(C2,pde),e(pde,E3o),e(C2,C3o),e(C2,Cj),e(Cj,w3o),e(C2,A3o),e(W,y3o),e(W,w2),e(w2,ude),e(ude,L3o),e(w2,x3o),e(w2,wj),e(wj,$3o),e(w2,k3o),e(W,S3o),e(W,A2),e(A2,_de),e(_de,R3o),e(A2,B3o),e(A2,Aj),e(Aj,P3o),e(A2,I3o),e(W,q3o),e(W,y2),e(y2,bde),e(bde,N3o),e(y2,j3o),e(y2,yj),e(yj,D3o),e(y2,G3o),e(W,O3o),e(W,L2),e(L2,vde),e(vde,V3o),e(L2,X3o),e(L2,Lj),e(Lj,z3o),e(L2,Q3o),e(W,W3o),e(W,x2),e(x2,Fde),e(Fde,H3o),e(x2,U3o),e(x2,xj),e(xj,J3o),e(x2,Y3o),e(W,K3o),e(W,$2),e($2,Tde),e(Tde,Z3o),e($2,ewo),e($2,$j),e($j,owo),e($2,rwo),e(W,two),e(W,k2),e(k2,Mde),e(Mde,awo),e(k2,nwo),e(k2,kj),e(kj,swo),e(k2,lwo),e(W,iwo),e(W,S2),e(S2,Ede),e(Ede,dwo),e(S2,cwo),e(S2,Sj),e(Sj,fwo),e(S2,mwo),e(W,gwo),e(W,R2),e(R2,Cde),e(Cde,hwo),e(R2,pwo),e(R2,Rj),e(Rj,uwo),e(R2,_wo),e(W,bwo),e(W,B2),e(B2,wde),e(wde,vwo),e(B2,Fwo),e(B2,Bj),e(Bj,Two),e(B2,Mwo),e(W,Ewo),e(W,P2),e(P2,Ade),e(Ade,Cwo),e(P2,wwo),e(P2,Pj),e(Pj,Awo),e(P2,ywo),e(W,Lwo),e(W,I2),e(I2,yde),e(yde,xwo),e(I2,$wo),e(I2,Ij),e(Ij,kwo),e(I2,Swo),e(W,Rwo),e(W,q2),e(q2,Lde),e(Lde,Bwo),e(q2,Pwo),e(q2,qj),e(qj,Iwo),e(q2,qwo),e(W,Nwo),e(W,N2),e(N2,xde),e(xde,jwo),e(N2,Dwo),e(N2,Nj),e(Nj,Gwo),e(N2,Owo),e(W,Vwo),e(W,j2),e(j2,$de),e($de,Xwo),e(j2,zwo),e(j2,jj),e(jj,Qwo),e(j2,Wwo),e(W,Hwo),e(W,D2),e(D2,kde),e(kde,Uwo),e(D2,Jwo),e(D2,Dj),e(Dj,Ywo),e(D2,Kwo),e(W,Zwo),e(W,G2),e(G2,Sde),e(Sde,e6o),e(G2,o6o),e(G2,Gj),e(Gj,r6o),e(G2,t6o),e(W,a6o),e(W,O2),e(O2,Rde),e(Rde,n6o),e(O2,s6o),e(O2,Oj),e(Oj,l6o),e(O2,i6o),e(W,d6o),e(W,V2),e(V2,Bde),e(Bde,c6o),e(V2,f6o),e(V2,Vj),e(Vj,m6o),e(V2,g6o),e(W,h6o),e(W,X2),e(X2,Pde),e(Pde,p6o),e(X2,u6o),e(X2,Xj),e(Xj,_6o),e(X2,b6o),e(W,v6o),e(W,z2),e(z2,Ide),e(Ide,F6o),e(z2,T6o),e(z2,zj),e(zj,M6o),e(z2,E6o),e(W,C6o),e(W,Q2),e(Q2,qde),e(qde,w6o),e(Q2,A6o),e(Q2,Qj),e(Qj,y6o),e(Q2,L6o),e(W,x6o),e(W,W2),e(W2,Nde),e(Nde,$6o),e(W2,k6o),e(W2,Wj),e(Wj,S6o),e(W2,R6o),e(W,B6o),e(W,H2),e(H2,jde),e(jde,P6o),e(H2,I6o),e(H2,Hj),e(Hj,q6o),e(H2,N6o),e(W,j6o),e(W,U2),e(U2,Dde),e(Dde,D6o),e(U2,G6o),e(U2,Uj),e(Uj,O6o),e(U2,V6o),e(W,X6o),e(W,J2),e(J2,Gde),e(Gde,z6o),e(J2,Q6o),e(J2,Ode),e(Ode,W6o),e(J2,H6o),e(W,U6o),e(W,Y2),e(Y2,Vde),e(Vde,J6o),e(Y2,Y6o),e(Y2,Jj),e(Jj,K6o),e(Y2,Z6o),e(W,eAo),e(W,K2),e(K2,Xde),e(Xde,oAo),e(K2,rAo),e(K2,Yj),e(Yj,tAo),e(K2,aAo),e(W,nAo),e(W,Z2),e(Z2,zde),e(zde,sAo),e(Z2,lAo),e(Z2,Kj),e(Kj,iAo),e(Z2,dAo),e(W,cAo),e(W,e1),e(e1,Qde),e(Qde,fAo),e(e1,mAo),e(e1,Zj),e(Zj,gAo),e(e1,hAo),e(Ye,pAo),e(Ye,o1),e(o1,uAo),e(o1,Wde),e(Wde,_Ao),e(o1,bAo),e(o1,Hde),e(Hde,vAo),e(Ye,FAo),M(r1,Ye,null),b(f,kIe,_),b(f,Bi,_),e(Bi,t1),e(t1,Ude),M(HA,Ude,null),e(Bi,TAo),e(Bi,Jde),e(Jde,MAo),b(f,SIe,_),b(f,So,_),M(UA,So,null),e(So,EAo),e(So,Pi),e(Pi,CAo),e(Pi,eD),e(eD,wAo),e(Pi,AAo),e(Pi,oD),e(oD,yAo),e(Pi,LAo),e(So,xAo),e(So,JA),e(JA,$Ao),e(JA,Yde),e(Yde,kAo),e(JA,SAo),e(So,RAo),e(So,nt),M(YA,nt,null),e(nt,BAo),e(nt,Kde),e(Kde,PAo),e(nt,IAo),e(nt,Ii),e(Ii,qAo),e(Ii,Zde),e(Zde,NAo),e(Ii,jAo),e(Ii,rD),e(rD,DAo),e(Ii,GAo),e(nt,OAo),M(a1,nt,null),e(So,VAo),e(So,Ke),M(KA,Ke,null),e(Ke,XAo),e(Ke,ece),e(ece,zAo),e(Ke,QAo),e(Ke,$a),e($a,WAo),e($a,oce),e(oce,HAo),e($a,UAo),e($a,rce),e(rce,JAo),e($a,YAo),e($a,tce),e(tce,KAo),e($a,ZAo),e(Ke,eyo),e(Ke,he),e(he,n1),e(n1,ace),e(ace,oyo),e(n1,ryo),e(n1,tD),e(tD,tyo),e(n1,ayo),e(he,nyo),e(he,s1),e(s1,nce),e(nce,syo),e(s1,lyo),e(s1,aD),e(aD,iyo),e(s1,dyo),e(he,cyo),e(he,l1),e(l1,sce),e(sce,fyo),e(l1,myo),e(l1,nD),e(nD,gyo),e(l1,hyo),e(he,pyo),e(he,i1),e(i1,lce),e(lce,uyo),e(i1,_yo),e(i1,sD),e(sD,byo),e(i1,vyo),e(he,Fyo),e(he,d1),e(d1,ice),e(ice,Tyo),e(d1,Myo),e(d1,lD),e(lD,Eyo),e(d1,Cyo),e(he,wyo),e(he,c1),e(c1,dce),e(dce,Ayo),e(c1,yyo),e(c1,iD),e(iD,Lyo),e(c1,xyo),e(he,$yo),e(he,f1),e(f1,cce),e(cce,kyo),e(f1,Syo),e(f1,dD),e(dD,Ryo),e(f1,Byo),e(he,Pyo),e(he,m1),e(m1,fce),e(fce,Iyo),e(m1,qyo),e(m1,cD),e(cD,Nyo),e(m1,jyo),e(he,Dyo),e(he,g1),e(g1,mce),e(mce,Gyo),e(g1,Oyo),e(g1,fD),e(fD,Vyo),e(g1,Xyo),e(he,zyo),e(he,h1),e(h1,gce),e(gce,Qyo),e(h1,Wyo),e(h1,mD),e(mD,Hyo),e(h1,Uyo),e(he,Jyo),e(he,p1),e(p1,hce),e(hce,Yyo),e(p1,Kyo),e(p1,gD),e(gD,Zyo),e(p1,eLo),e(he,oLo),e(he,u1),e(u1,pce),e(pce,rLo),e(u1,tLo),e(u1,hD),e(hD,aLo),e(u1,nLo),e(he,sLo),e(he,_1),e(_1,uce),e(uce,lLo),e(_1,iLo),e(_1,pD),e(pD,dLo),e(_1,cLo),e(he,fLo),e(he,b1),e(b1,_ce),e(_ce,mLo),e(b1,gLo),e(b1,uD),e(uD,hLo),e(b1,pLo),e(he,uLo),e(he,v1),e(v1,bce),e(bce,_Lo),e(v1,bLo),e(v1,_D),e(_D,vLo),e(v1,FLo),e(he,TLo),e(he,F1),e(F1,vce),e(vce,MLo),e(F1,ELo),e(F1,bD),e(bD,CLo),e(F1,wLo),e(he,ALo),e(he,T1),e(T1,Fce),e(Fce,yLo),e(T1,LLo),e(T1,vD),e(vD,xLo),e(T1,$Lo),e(Ke,kLo),e(Ke,M1),e(M1,SLo),e(M1,Tce),e(Tce,RLo),e(M1,BLo),e(M1,Mce),e(Mce,PLo),e(Ke,ILo),M(E1,Ke,null),b(f,RIe,_),b(f,qi,_),e(qi,C1),e(C1,Ece),M(ZA,Ece,null),e(qi,qLo),e(qi,Cce),e(Cce,NLo),b(f,BIe,_),b(f,Ro,_),M(ey,Ro,null),e(Ro,jLo),e(Ro,Ni),e(Ni,DLo),e(Ni,FD),e(FD,GLo),e(Ni,OLo),e(Ni,TD),e(TD,VLo),e(Ni,XLo),e(Ro,zLo),e(Ro,oy),e(oy,QLo),e(oy,wce),e(wce,WLo),e(oy,HLo),e(Ro,ULo),e(Ro,st),M(ry,st,null),e(st,JLo),e(st,Ace),e(Ace,YLo),e(st,KLo),e(st,ji),e(ji,ZLo),e(ji,yce),e(yce,e8o),e(ji,o8o),e(ji,MD),e(MD,r8o),e(ji,t8o),e(st,a8o),M(w1,st,null),e(Ro,n8o),e(Ro,Ze),M(ty,Ze,null),e(Ze,s8o),e(Ze,Lce),e(Lce,l8o),e(Ze,i8o),e(Ze,ka),e(ka,d8o),e(ka,xce),e(xce,c8o),e(ka,f8o),e(ka,$ce),e($ce,m8o),e(ka,g8o),e(ka,kce),e(kce,h8o),e(ka,p8o),e(Ze,u8o),e(Ze,q),e(q,A1),e(A1,Sce),e(Sce,_8o),e(A1,b8o),e(A1,ED),e(ED,v8o),e(A1,F8o),e(q,T8o),e(q,y1),e(y1,Rce),e(Rce,M8o),e(y1,E8o),e(y1,CD),e(CD,C8o),e(y1,w8o),e(q,A8o),e(q,L1),e(L1,Bce),e(Bce,y8o),e(L1,L8o),e(L1,wD),e(wD,x8o),e(L1,$8o),e(q,k8o),e(q,x1),e(x1,Pce),e(Pce,S8o),e(x1,R8o),e(x1,AD),e(AD,B8o),e(x1,P8o),e(q,I8o),e(q,$1),e($1,Ice),e(Ice,q8o),e($1,N8o),e($1,yD),e(yD,j8o),e($1,D8o),e(q,G8o),e(q,k1),e(k1,qce),e(qce,O8o),e(k1,V8o),e(k1,LD),e(LD,X8o),e(k1,z8o),e(q,Q8o),e(q,S1),e(S1,Nce),e(Nce,W8o),e(S1,H8o),e(S1,xD),e(xD,U8o),e(S1,J8o),e(q,Y8o),e(q,R1),e(R1,jce),e(jce,K8o),e(R1,Z8o),e(R1,$D),e($D,exo),e(R1,oxo),e(q,rxo),e(q,B1),e(B1,Dce),e(Dce,txo),e(B1,axo),e(B1,kD),e(kD,nxo),e(B1,sxo),e(q,lxo),e(q,P1),e(P1,Gce),e(Gce,ixo),e(P1,dxo),e(P1,SD),e(SD,cxo),e(P1,fxo),e(q,mxo),e(q,I1),e(I1,Oce),e(Oce,gxo),e(I1,hxo),e(I1,RD),e(RD,pxo),e(I1,uxo),e(q,_xo),e(q,q1),e(q1,Vce),e(Vce,bxo),e(q1,vxo),e(q1,BD),e(BD,Fxo),e(q1,Txo),e(q,Mxo),e(q,N1),e(N1,Xce),e(Xce,Exo),e(N1,Cxo),e(N1,PD),e(PD,wxo),e(N1,Axo),e(q,yxo),e(q,j1),e(j1,zce),e(zce,Lxo),e(j1,xxo),e(j1,ID),e(ID,$xo),e(j1,kxo),e(q,Sxo),e(q,D1),e(D1,Qce),e(Qce,Rxo),e(D1,Bxo),e(D1,qD),e(qD,Pxo),e(D1,Ixo),e(q,qxo),e(q,G1),e(G1,Wce),e(Wce,Nxo),e(G1,jxo),e(G1,ND),e(ND,Dxo),e(G1,Gxo),e(q,Oxo),e(q,O1),e(O1,Hce),e(Hce,Vxo),e(O1,Xxo),e(O1,jD),e(jD,zxo),e(O1,Qxo),e(q,Wxo),e(q,V1),e(V1,Uce),e(Uce,Hxo),e(V1,Uxo),e(V1,DD),e(DD,Jxo),e(V1,Yxo),e(q,Kxo),e(q,X1),e(X1,Jce),e(Jce,Zxo),e(X1,e9o),e(X1,GD),e(GD,o9o),e(X1,r9o),e(q,t9o),e(q,z1),e(z1,Yce),e(Yce,a9o),e(z1,n9o),e(z1,OD),e(OD,s9o),e(z1,l9o),e(q,i9o),e(q,Q1),e(Q1,Kce),e(Kce,d9o),e(Q1,c9o),e(Q1,VD),e(VD,f9o),e(Q1,m9o),e(q,g9o),e(q,W1),e(W1,Zce),e(Zce,h9o),e(W1,p9o),e(W1,XD),e(XD,u9o),e(W1,_9o),e(q,b9o),e(q,H1),e(H1,efe),e(efe,v9o),e(H1,F9o),e(H1,zD),e(zD,T9o),e(H1,M9o),e(q,E9o),e(q,U1),e(U1,ofe),e(ofe,C9o),e(U1,w9o),e(U1,QD),e(QD,A9o),e(U1,y9o),e(q,L9o),e(q,J1),e(J1,rfe),e(rfe,x9o),e(J1,$9o),e(J1,WD),e(WD,k9o),e(J1,S9o),e(q,R9o),e(q,Y1),e(Y1,tfe),e(tfe,B9o),e(Y1,P9o),e(Y1,HD),e(HD,I9o),e(Y1,q9o),e(q,N9o),e(q,K1),e(K1,afe),e(afe,j9o),e(K1,D9o),e(K1,UD),e(UD,G9o),e(K1,O9o),e(q,V9o),e(q,Z1),e(Z1,nfe),e(nfe,X9o),e(Z1,z9o),e(Z1,JD),e(JD,Q9o),e(Z1,W9o),e(q,H9o),e(q,eb),e(eb,sfe),e(sfe,U9o),e(eb,J9o),e(eb,YD),e(YD,Y9o),e(eb,K9o),e(q,Z9o),e(q,ob),e(ob,lfe),e(lfe,e$o),e(ob,o$o),e(ob,KD),e(KD,r$o),e(ob,t$o),e(q,a$o),e(q,rb),e(rb,ife),e(ife,n$o),e(rb,s$o),e(rb,ZD),e(ZD,l$o),e(rb,i$o),e(q,d$o),e(q,tb),e(tb,dfe),e(dfe,c$o),e(tb,f$o),e(tb,eG),e(eG,m$o),e(tb,g$o),e(q,h$o),e(q,ab),e(ab,cfe),e(cfe,p$o),e(ab,u$o),e(ab,oG),e(oG,_$o),e(ab,b$o),e(q,v$o),e(q,nb),e(nb,ffe),e(ffe,F$o),e(nb,T$o),e(nb,rG),e(rG,M$o),e(nb,E$o),e(q,C$o),e(q,sb),e(sb,mfe),e(mfe,w$o),e(sb,A$o),e(sb,tG),e(tG,y$o),e(sb,L$o),e(q,x$o),e(q,lb),e(lb,gfe),e(gfe,$$o),e(lb,k$o),e(lb,aG),e(aG,S$o),e(lb,R$o),e(q,B$o),e(q,ib),e(ib,hfe),e(hfe,P$o),e(ib,I$o),e(ib,nG),e(nG,q$o),e(ib,N$o),e(q,j$o),e(q,db),e(db,pfe),e(pfe,D$o),e(db,G$o),e(db,sG),e(sG,O$o),e(db,V$o),e(q,X$o),e(q,cb),e(cb,ufe),e(ufe,z$o),e(cb,Q$o),e(cb,lG),e(lG,W$o),e(cb,H$o),e(q,U$o),e(q,fb),e(fb,_fe),e(_fe,J$o),e(fb,Y$o),e(fb,iG),e(iG,K$o),e(fb,Z$o),e(q,eko),e(q,mb),e(mb,bfe),e(bfe,oko),e(mb,rko),e(mb,dG),e(dG,tko),e(mb,ako),e(q,nko),e(q,gb),e(gb,vfe),e(vfe,sko),e(gb,lko),e(gb,cG),e(cG,iko),e(gb,dko),e(q,cko),e(q,hb),e(hb,Ffe),e(Ffe,fko),e(hb,mko),e(hb,fG),e(fG,gko),e(hb,hko),e(q,pko),e(q,pb),e(pb,Tfe),e(Tfe,uko),e(pb,_ko),e(pb,mG),e(mG,bko),e(pb,vko),e(q,Fko),e(q,ub),e(ub,Mfe),e(Mfe,Tko),e(ub,Mko),e(ub,gG),e(gG,Eko),e(ub,Cko),e(q,wko),e(q,_b),e(_b,Efe),e(Efe,Ako),e(_b,yko),e(_b,hG),e(hG,Lko),e(_b,xko),e(q,$ko),e(q,bb),e(bb,Cfe),e(Cfe,kko),e(bb,Sko),e(bb,pG),e(pG,Rko),e(bb,Bko),e(Ze,Pko),e(Ze,vb),e(vb,Iko),e(vb,wfe),e(wfe,qko),e(vb,Nko),e(vb,Afe),e(Afe,jko),e(Ze,Dko),M(Fb,Ze,null),b(f,PIe,_),b(f,Di,_),e(Di,Tb),e(Tb,yfe),M(ay,yfe,null),e(Di,Gko),e(Di,Lfe),e(Lfe,Oko),b(f,IIe,_),b(f,Bo,_),M(ny,Bo,null),e(Bo,Vko),e(Bo,Gi),e(Gi,Xko),e(Gi,uG),e(uG,zko),e(Gi,Qko),e(Gi,_G),e(_G,Wko),e(Gi,Hko),e(Bo,Uko),e(Bo,sy),e(sy,Jko),e(sy,xfe),e(xfe,Yko),e(sy,Kko),e(Bo,Zko),e(Bo,lt),M(ly,lt,null),e(lt,eSo),e(lt,$fe),e($fe,oSo),e(lt,rSo),e(lt,Oi),e(Oi,tSo),e(Oi,kfe),e(kfe,aSo),e(Oi,nSo),e(Oi,bG),e(bG,sSo),e(Oi,lSo),e(lt,iSo),M(Mb,lt,null),e(Bo,dSo),e(Bo,eo),M(iy,eo,null),e(eo,cSo),e(eo,Sfe),e(Sfe,fSo),e(eo,mSo),e(eo,Sa),e(Sa,gSo),e(Sa,Rfe),e(Rfe,hSo),e(Sa,pSo),e(Sa,Bfe),e(Bfe,uSo),e(Sa,_So),e(Sa,Pfe),e(Pfe,bSo),e(Sa,vSo),e(eo,FSo),e(eo,Y),e(Y,Eb),e(Eb,Ife),e(Ife,TSo),e(Eb,MSo),e(Eb,vG),e(vG,ESo),e(Eb,CSo),e(Y,wSo),e(Y,Cb),e(Cb,qfe),e(qfe,ASo),e(Cb,ySo),e(Cb,FG),e(FG,LSo),e(Cb,xSo),e(Y,$So),e(Y,wb),e(wb,Nfe),e(Nfe,kSo),e(wb,SSo),e(wb,TG),e(TG,RSo),e(wb,BSo),e(Y,PSo),e(Y,Ab),e(Ab,jfe),e(jfe,ISo),e(Ab,qSo),e(Ab,MG),e(MG,NSo),e(Ab,jSo),e(Y,DSo),e(Y,yb),e(yb,Dfe),e(Dfe,GSo),e(yb,OSo),e(yb,EG),e(EG,VSo),e(yb,XSo),e(Y,zSo),e(Y,Lb),e(Lb,Gfe),e(Gfe,QSo),e(Lb,WSo),e(Lb,CG),e(CG,HSo),e(Lb,USo),e(Y,JSo),e(Y,xb),e(xb,Ofe),e(Ofe,YSo),e(xb,KSo),e(xb,wG),e(wG,ZSo),e(xb,eRo),e(Y,oRo),e(Y,$b),e($b,Vfe),e(Vfe,rRo),e($b,tRo),e($b,AG),e(AG,aRo),e($b,nRo),e(Y,sRo),e(Y,kb),e(kb,Xfe),e(Xfe,lRo),e(kb,iRo),e(kb,yG),e(yG,dRo),e(kb,cRo),e(Y,fRo),e(Y,Sb),e(Sb,zfe),e(zfe,mRo),e(Sb,gRo),e(Sb,LG),e(LG,hRo),e(Sb,pRo),e(Y,uRo),e(Y,Rb),e(Rb,Qfe),e(Qfe,_Ro),e(Rb,bRo),e(Rb,xG),e(xG,vRo),e(Rb,FRo),e(Y,TRo),e(Y,Bb),e(Bb,Wfe),e(Wfe,MRo),e(Bb,ERo),e(Bb,$G),e($G,CRo),e(Bb,wRo),e(Y,ARo),e(Y,Pb),e(Pb,Hfe),e(Hfe,yRo),e(Pb,LRo),e(Pb,kG),e(kG,xRo),e(Pb,$Ro),e(Y,kRo),e(Y,Ib),e(Ib,Ufe),e(Ufe,SRo),e(Ib,RRo),e(Ib,SG),e(SG,BRo),e(Ib,PRo),e(Y,IRo),e(Y,qb),e(qb,Jfe),e(Jfe,qRo),e(qb,NRo),e(qb,RG),e(RG,jRo),e(qb,DRo),e(Y,GRo),e(Y,Nb),e(Nb,Yfe),e(Yfe,ORo),e(Nb,VRo),e(Nb,BG),e(BG,XRo),e(Nb,zRo),e(Y,QRo),e(Y,jb),e(jb,Kfe),e(Kfe,WRo),e(jb,HRo),e(jb,PG),e(PG,URo),e(jb,JRo),e(Y,YRo),e(Y,Db),e(Db,Zfe),e(Zfe,KRo),e(Db,ZRo),e(Db,IG),e(IG,eBo),e(Db,oBo),e(Y,rBo),e(Y,Gb),e(Gb,eme),e(eme,tBo),e(Gb,aBo),e(Gb,qG),e(qG,nBo),e(Gb,sBo),e(Y,lBo),e(Y,Ob),e(Ob,ome),e(ome,iBo),e(Ob,dBo),e(Ob,NG),e(NG,cBo),e(Ob,fBo),e(Y,mBo),e(Y,Vb),e(Vb,rme),e(rme,gBo),e(Vb,hBo),e(Vb,jG),e(jG,pBo),e(Vb,uBo),e(Y,_Bo),e(Y,Xb),e(Xb,tme),e(tme,bBo),e(Xb,vBo),e(Xb,DG),e(DG,FBo),e(Xb,TBo),e(Y,MBo),e(Y,zb),e(zb,ame),e(ame,EBo),e(zb,CBo),e(zb,GG),e(GG,wBo),e(zb,ABo),e(Y,yBo),e(Y,Qb),e(Qb,nme),e(nme,LBo),e(Qb,xBo),e(Qb,OG),e(OG,$Bo),e(Qb,kBo),e(Y,SBo),e(Y,Wb),e(Wb,sme),e(sme,RBo),e(Wb,BBo),e(Wb,VG),e(VG,PBo),e(Wb,IBo),e(Y,qBo),e(Y,Hb),e(Hb,lme),e(lme,NBo),e(Hb,jBo),e(Hb,XG),e(XG,DBo),e(Hb,GBo),e(Y,OBo),e(Y,Ub),e(Ub,ime),e(ime,VBo),e(Ub,XBo),e(Ub,zG),e(zG,zBo),e(Ub,QBo),e(Y,WBo),e(Y,Jb),e(Jb,dme),e(dme,HBo),e(Jb,UBo),e(Jb,QG),e(QG,JBo),e(Jb,YBo),e(Y,KBo),e(Y,Yb),e(Yb,cme),e(cme,ZBo),e(Yb,ePo),e(Yb,WG),e(WG,oPo),e(Yb,rPo),e(eo,tPo),e(eo,Kb),e(Kb,aPo),e(Kb,fme),e(fme,nPo),e(Kb,sPo),e(Kb,mme),e(mme,lPo),e(eo,iPo),M(Zb,eo,null),b(f,qIe,_),b(f,Vi,_),e(Vi,ev),e(ev,gme),M(dy,gme,null),e(Vi,dPo),e(Vi,hme),e(hme,cPo),b(f,NIe,_),b(f,Po,_),M(cy,Po,null),e(Po,fPo),e(Po,Xi),e(Xi,mPo),e(Xi,HG),e(HG,gPo),e(Xi,hPo),e(Xi,UG),e(UG,pPo),e(Xi,uPo),e(Po,_Po),e(Po,fy),e(fy,bPo),e(fy,pme),e(pme,vPo),e(fy,FPo),e(Po,TPo),e(Po,it),M(my,it,null),e(it,MPo),e(it,ume),e(ume,EPo),e(it,CPo),e(it,zi),e(zi,wPo),e(zi,_me),e(_me,APo),e(zi,yPo),e(zi,JG),e(JG,LPo),e(zi,xPo),e(it,$Po),M(ov,it,null),e(Po,kPo),e(Po,oo),M(gy,oo,null),e(oo,SPo),e(oo,bme),e(bme,RPo),e(oo,BPo),e(oo,Ra),e(Ra,PPo),e(Ra,vme),e(vme,IPo),e(Ra,qPo),e(Ra,Fme),e(Fme,NPo),e(Ra,jPo),e(Ra,Tme),e(Tme,DPo),e(Ra,GPo),e(oo,OPo),e(oo,Yr),e(Yr,rv),e(rv,Mme),e(Mme,VPo),e(rv,XPo),e(rv,YG),e(YG,zPo),e(rv,QPo),e(Yr,WPo),e(Yr,tv),e(tv,Eme),e(Eme,HPo),e(tv,UPo),e(tv,KG),e(KG,JPo),e(tv,YPo),e(Yr,KPo),e(Yr,av),e(av,Cme),e(Cme,ZPo),e(av,eIo),e(av,ZG),e(ZG,oIo),e(av,rIo),e(Yr,tIo),e(Yr,nv),e(nv,wme),e(wme,aIo),e(nv,nIo),e(nv,eO),e(eO,sIo),e(nv,lIo),e(Yr,iIo),e(Yr,sv),e(sv,Ame),e(Ame,dIo),e(sv,cIo),e(sv,oO),e(oO,fIo),e(sv,mIo),e(oo,gIo),e(oo,lv),e(lv,hIo),e(lv,yme),e(yme,pIo),e(lv,uIo),e(lv,Lme),e(Lme,_Io),e(oo,bIo),M(iv,oo,null),b(f,jIe,_),b(f,Qi,_),e(Qi,dv),e(dv,xme),M(hy,xme,null),e(Qi,vIo),e(Qi,$me),e($me,FIo),b(f,DIe,_),b(f,Io,_),M(py,Io,null),e(Io,TIo),e(Io,Wi),e(Wi,MIo),e(Wi,rO),e(rO,EIo),e(Wi,CIo),e(Wi,tO),e(tO,wIo),e(Wi,AIo),e(Io,yIo),e(Io,uy),e(uy,LIo),e(uy,kme),e(kme,xIo),e(uy,$Io),e(Io,kIo),e(Io,dt),M(_y,dt,null),e(dt,SIo),e(dt,Sme),e(Sme,RIo),e(dt,BIo),e(dt,Hi),e(Hi,PIo),e(Hi,Rme),e(Rme,IIo),e(Hi,qIo),e(Hi,aO),e(aO,NIo),e(Hi,jIo),e(dt,DIo),M(cv,dt,null),e(Io,GIo),e(Io,ro),M(by,ro,null),e(ro,OIo),e(ro,Bme),e(Bme,VIo),e(ro,XIo),e(ro,Ba),e(Ba,zIo),e(Ba,Pme),e(Pme,QIo),e(Ba,WIo),e(Ba,Ime),e(Ime,HIo),e(Ba,UIo),e(Ba,qme),e(qme,JIo),e(Ba,YIo),e(ro,KIo),e(ro,U),e(U,fv),e(fv,Nme),e(Nme,ZIo),e(fv,eqo),e(fv,nO),e(nO,oqo),e(fv,rqo),e(U,tqo),e(U,mv),e(mv,jme),e(jme,aqo),e(mv,nqo),e(mv,sO),e(sO,sqo),e(mv,lqo),e(U,iqo),e(U,gv),e(gv,Dme),e(Dme,dqo),e(gv,cqo),e(gv,lO),e(lO,fqo),e(gv,mqo),e(U,gqo),e(U,hv),e(hv,Gme),e(Gme,hqo),e(hv,pqo),e(hv,iO),e(iO,uqo),e(hv,_qo),e(U,bqo),e(U,pv),e(pv,Ome),e(Ome,vqo),e(pv,Fqo),e(pv,dO),e(dO,Tqo),e(pv,Mqo),e(U,Eqo),e(U,uv),e(uv,Vme),e(Vme,Cqo),e(uv,wqo),e(uv,cO),e(cO,Aqo),e(uv,yqo),e(U,Lqo),e(U,_v),e(_v,Xme),e(Xme,xqo),e(_v,$qo),e(_v,fO),e(fO,kqo),e(_v,Sqo),e(U,Rqo),e(U,bv),e(bv,zme),e(zme,Bqo),e(bv,Pqo),e(bv,mO),e(mO,Iqo),e(bv,qqo),e(U,Nqo),e(U,vv),e(vv,Qme),e(Qme,jqo),e(vv,Dqo),e(vv,gO),e(gO,Gqo),e(vv,Oqo),e(U,Vqo),e(U,Fv),e(Fv,Wme),e(Wme,Xqo),e(Fv,zqo),e(Fv,hO),e(hO,Qqo),e(Fv,Wqo),e(U,Hqo),e(U,Tv),e(Tv,Hme),e(Hme,Uqo),e(Tv,Jqo),e(Tv,pO),e(pO,Yqo),e(Tv,Kqo),e(U,Zqo),e(U,Mv),e(Mv,Ume),e(Ume,eNo),e(Mv,oNo),e(Mv,uO),e(uO,rNo),e(Mv,tNo),e(U,aNo),e(U,Ev),e(Ev,Jme),e(Jme,nNo),e(Ev,sNo),e(Ev,_O),e(_O,lNo),e(Ev,iNo),e(U,dNo),e(U,Cv),e(Cv,Yme),e(Yme,cNo),e(Cv,fNo),e(Cv,bO),e(bO,mNo),e(Cv,gNo),e(U,hNo),e(U,wv),e(wv,Kme),e(Kme,pNo),e(wv,uNo),e(wv,vO),e(vO,_No),e(wv,bNo),e(U,vNo),e(U,Av),e(Av,Zme),e(Zme,FNo),e(Av,TNo),e(Av,FO),e(FO,MNo),e(Av,ENo),e(U,CNo),e(U,yv),e(yv,ege),e(ege,wNo),e(yv,ANo),e(yv,TO),e(TO,yNo),e(yv,LNo),e(U,xNo),e(U,Lv),e(Lv,oge),e(oge,$No),e(Lv,kNo),e(Lv,MO),e(MO,SNo),e(Lv,RNo),e(U,BNo),e(U,xv),e(xv,rge),e(rge,PNo),e(xv,INo),e(xv,EO),e(EO,qNo),e(xv,NNo),e(U,jNo),e(U,$v),e($v,tge),e(tge,DNo),e($v,GNo),e($v,CO),e(CO,ONo),e($v,VNo),e(U,XNo),e(U,kv),e(kv,age),e(age,zNo),e(kv,QNo),e(kv,wO),e(wO,WNo),e(kv,HNo),e(U,UNo),e(U,Sv),e(Sv,nge),e(nge,JNo),e(Sv,YNo),e(Sv,AO),e(AO,KNo),e(Sv,ZNo),e(U,ejo),e(U,Rv),e(Rv,sge),e(sge,ojo),e(Rv,rjo),e(Rv,yO),e(yO,tjo),e(Rv,ajo),e(U,njo),e(U,Bv),e(Bv,lge),e(lge,sjo),e(Bv,ljo),e(Bv,LO),e(LO,ijo),e(Bv,djo),e(U,cjo),e(U,Pv),e(Pv,ige),e(ige,fjo),e(Pv,mjo),e(Pv,xO),e(xO,gjo),e(Pv,hjo),e(U,pjo),e(U,Iv),e(Iv,dge),e(dge,ujo),e(Iv,_jo),e(Iv,$O),e($O,bjo),e(Iv,vjo),e(U,Fjo),e(U,qv),e(qv,cge),e(cge,Tjo),e(qv,Mjo),e(qv,kO),e(kO,Ejo),e(qv,Cjo),e(U,wjo),e(U,Nv),e(Nv,fge),e(fge,Ajo),e(Nv,yjo),e(Nv,SO),e(SO,Ljo),e(Nv,xjo),e(U,$jo),e(U,jv),e(jv,mge),e(mge,kjo),e(jv,Sjo),e(jv,RO),e(RO,Rjo),e(jv,Bjo),e(U,Pjo),e(U,Dv),e(Dv,gge),e(gge,Ijo),e(Dv,qjo),e(Dv,BO),e(BO,Njo),e(Dv,jjo),e(U,Djo),e(U,Gv),e(Gv,hge),e(hge,Gjo),e(Gv,Ojo),e(Gv,PO),e(PO,Vjo),e(Gv,Xjo),e(U,zjo),e(U,Ov),e(Ov,pge),e(pge,Qjo),e(Ov,Wjo),e(Ov,IO),e(IO,Hjo),e(Ov,Ujo),e(U,Jjo),e(U,Vv),e(Vv,uge),e(uge,Yjo),e(Vv,Kjo),e(Vv,qO),e(qO,Zjo),e(Vv,eDo),e(ro,oDo),e(ro,Xv),e(Xv,rDo),e(Xv,_ge),e(_ge,tDo),e(Xv,aDo),e(Xv,bge),e(bge,nDo),e(ro,sDo),M(zv,ro,null),b(f,GIe,_),b(f,Ui,_),e(Ui,Qv),e(Qv,vge),M(vy,vge,null),e(Ui,lDo),e(Ui,Fge),e(Fge,iDo),b(f,OIe,_),b(f,qo,_),M(Fy,qo,null),e(qo,dDo),e(qo,Ji),e(Ji,cDo),e(Ji,NO),e(NO,fDo),e(Ji,mDo),e(Ji,jO),e(jO,gDo),e(Ji,hDo),e(qo,pDo),e(qo,Ty),e(Ty,uDo),e(Ty,Tge),e(Tge,_Do),e(Ty,bDo),e(qo,vDo),e(qo,ct),M(My,ct,null),e(ct,FDo),e(ct,Mge),e(Mge,TDo),e(ct,MDo),e(ct,Yi),e(Yi,EDo),e(Yi,Ege),e(Ege,CDo),e(Yi,wDo),e(Yi,DO),e(DO,ADo),e(Yi,yDo),e(ct,LDo),M(Wv,ct,null),e(qo,xDo),e(qo,to),M(Ey,to,null),e(to,$Do),e(to,Cge),e(Cge,kDo),e(to,SDo),e(to,Pa),e(Pa,RDo),e(Pa,wge),e(wge,BDo),e(Pa,PDo),e(Pa,Age),e(Age,IDo),e(Pa,qDo),e(Pa,yge),e(yge,NDo),e(Pa,jDo),e(to,DDo),e(to,V),e(V,Hv),e(Hv,Lge),e(Lge,GDo),e(Hv,ODo),e(Hv,GO),e(GO,VDo),e(Hv,XDo),e(V,zDo),e(V,Uv),e(Uv,xge),e(xge,QDo),e(Uv,WDo),e(Uv,OO),e(OO,HDo),e(Uv,UDo),e(V,JDo),e(V,Jv),e(Jv,$ge),e($ge,YDo),e(Jv,KDo),e(Jv,VO),e(VO,ZDo),e(Jv,eGo),e(V,oGo),e(V,Yv),e(Yv,kge),e(kge,rGo),e(Yv,tGo),e(Yv,XO),e(XO,aGo),e(Yv,nGo),e(V,sGo),e(V,Kv),e(Kv,Sge),e(Sge,lGo),e(Kv,iGo),e(Kv,zO),e(zO,dGo),e(Kv,cGo),e(V,fGo),e(V,Zv),e(Zv,Rge),e(Rge,mGo),e(Zv,gGo),e(Zv,QO),e(QO,hGo),e(Zv,pGo),e(V,uGo),e(V,eF),e(eF,Bge),e(Bge,_Go),e(eF,bGo),e(eF,WO),e(WO,vGo),e(eF,FGo),e(V,TGo),e(V,oF),e(oF,Pge),e(Pge,MGo),e(oF,EGo),e(oF,HO),e(HO,CGo),e(oF,wGo),e(V,AGo),e(V,rF),e(rF,Ige),e(Ige,yGo),e(rF,LGo),e(rF,UO),e(UO,xGo),e(rF,$Go),e(V,kGo),e(V,tF),e(tF,qge),e(qge,SGo),e(tF,RGo),e(tF,JO),e(JO,BGo),e(tF,PGo),e(V,IGo),e(V,aF),e(aF,Nge),e(Nge,qGo),e(aF,NGo),e(aF,YO),e(YO,jGo),e(aF,DGo),e(V,GGo),e(V,nF),e(nF,jge),e(jge,OGo),e(nF,VGo),e(nF,KO),e(KO,XGo),e(nF,zGo),e(V,QGo),e(V,sF),e(sF,Dge),e(Dge,WGo),e(sF,HGo),e(sF,ZO),e(ZO,UGo),e(sF,JGo),e(V,YGo),e(V,lF),e(lF,Gge),e(Gge,KGo),e(lF,ZGo),e(lF,eV),e(eV,eOo),e(lF,oOo),e(V,rOo),e(V,iF),e(iF,Oge),e(Oge,tOo),e(iF,aOo),e(iF,oV),e(oV,nOo),e(iF,sOo),e(V,lOo),e(V,dF),e(dF,Vge),e(Vge,iOo),e(dF,dOo),e(dF,rV),e(rV,cOo),e(dF,fOo),e(V,mOo),e(V,cF),e(cF,Xge),e(Xge,gOo),e(cF,hOo),e(cF,tV),e(tV,pOo),e(cF,uOo),e(V,_Oo),e(V,fF),e(fF,zge),e(zge,bOo),e(fF,vOo),e(fF,aV),e(aV,FOo),e(fF,TOo),e(V,MOo),e(V,mF),e(mF,Qge),e(Qge,EOo),e(mF,COo),e(mF,nV),e(nV,wOo),e(mF,AOo),e(V,yOo),e(V,gF),e(gF,Wge),e(Wge,LOo),e(gF,xOo),e(gF,sV),e(sV,$Oo),e(gF,kOo),e(V,SOo),e(V,hF),e(hF,Hge),e(Hge,ROo),e(hF,BOo),e(hF,lV),e(lV,POo),e(hF,IOo),e(V,qOo),e(V,pF),e(pF,Uge),e(Uge,NOo),e(pF,jOo),e(pF,iV),e(iV,DOo),e(pF,GOo),e(V,OOo),e(V,uF),e(uF,Jge),e(Jge,VOo),e(uF,XOo),e(uF,dV),e(dV,zOo),e(uF,QOo),e(V,WOo),e(V,_F),e(_F,Yge),e(Yge,HOo),e(_F,UOo),e(_F,cV),e(cV,JOo),e(_F,YOo),e(V,KOo),e(V,bF),e(bF,Kge),e(Kge,ZOo),e(bF,eVo),e(bF,fV),e(fV,oVo),e(bF,rVo),e(V,tVo),e(V,vF),e(vF,Zge),e(Zge,aVo),e(vF,nVo),e(vF,mV),e(mV,sVo),e(vF,lVo),e(V,iVo),e(V,FF),e(FF,ehe),e(ehe,dVo),e(FF,cVo),e(FF,gV),e(gV,fVo),e(FF,mVo),e(V,gVo),e(V,TF),e(TF,ohe),e(ohe,hVo),e(TF,pVo),e(TF,hV),e(hV,uVo),e(TF,_Vo),e(V,bVo),e(V,MF),e(MF,rhe),e(rhe,vVo),e(MF,FVo),e(MF,pV),e(pV,TVo),e(MF,MVo),e(V,EVo),e(V,EF),e(EF,the),e(the,CVo),e(EF,wVo),e(EF,uV),e(uV,AVo),e(EF,yVo),e(V,LVo),e(V,CF),e(CF,ahe),e(ahe,xVo),e(CF,$Vo),e(CF,_V),e(_V,kVo),e(CF,SVo),e(V,RVo),e(V,wF),e(wF,nhe),e(nhe,BVo),e(wF,PVo),e(wF,bV),e(bV,IVo),e(wF,qVo),e(V,NVo),e(V,AF),e(AF,she),e(she,jVo),e(AF,DVo),e(AF,vV),e(vV,GVo),e(AF,OVo),e(V,VVo),e(V,yF),e(yF,lhe),e(lhe,XVo),e(yF,zVo),e(yF,FV),e(FV,QVo),e(yF,WVo),e(V,HVo),e(V,LF),e(LF,ihe),e(ihe,UVo),e(LF,JVo),e(LF,TV),e(TV,YVo),e(LF,KVo),e(V,ZVo),e(V,xF),e(xF,dhe),e(dhe,eXo),e(xF,oXo),e(xF,MV),e(MV,rXo),e(xF,tXo),e(V,aXo),e(V,$F),e($F,che),e(che,nXo),e($F,sXo),e($F,EV),e(EV,lXo),e($F,iXo),e(V,dXo),e(V,kF),e(kF,fhe),e(fhe,cXo),e(kF,fXo),e(kF,CV),e(CV,mXo),e(kF,gXo),e(V,hXo),e(V,SF),e(SF,mhe),e(mhe,pXo),e(SF,uXo),e(SF,wV),e(wV,_Xo),e(SF,bXo),e(to,vXo),e(to,RF),e(RF,FXo),e(RF,ghe),e(ghe,TXo),e(RF,MXo),e(RF,hhe),e(hhe,EXo),e(to,CXo),M(BF,to,null),b(f,VIe,_),b(f,Ki,_),e(Ki,PF),e(PF,phe),M(Cy,phe,null),e(Ki,wXo),e(Ki,uhe),e(uhe,AXo),b(f,XIe,_),b(f,No,_),M(wy,No,null),e(No,yXo),e(No,Zi),e(Zi,LXo),e(Zi,AV),e(AV,xXo),e(Zi,$Xo),e(Zi,yV),e(yV,kXo),e(Zi,SXo),e(No,RXo),e(No,Ay),e(Ay,BXo),e(Ay,_he),e(_he,PXo),e(Ay,IXo),e(No,qXo),e(No,ft),M(yy,ft,null),e(ft,NXo),e(ft,bhe),e(bhe,jXo),e(ft,DXo),e(ft,ed),e(ed,GXo),e(ed,vhe),e(vhe,OXo),e(ed,VXo),e(ed,LV),e(LV,XXo),e(ed,zXo),e(ft,QXo),M(IF,ft,null),e(No,WXo),e(No,ao),M(Ly,ao,null),e(ao,HXo),e(ao,Fhe),e(Fhe,UXo),e(ao,JXo),e(ao,Ia),e(Ia,YXo),e(Ia,The),e(The,KXo),e(Ia,ZXo),e(Ia,Mhe),e(Mhe,ezo),e(Ia,ozo),e(Ia,Ehe),e(Ehe,rzo),e(Ia,tzo),e(ao,azo),e(ao,Che),e(Che,qF),e(qF,whe),e(whe,nzo),e(qF,szo),e(qF,xV),e(xV,lzo),e(qF,izo),e(ao,dzo),e(ao,NF),e(NF,czo),e(NF,Ahe),e(Ahe,fzo),e(NF,mzo),e(NF,yhe),e(yhe,gzo),e(ao,hzo),M(jF,ao,null),b(f,zIe,_),b(f,od,_),e(od,DF),e(DF,Lhe),M(xy,Lhe,null),e(od,pzo),e(od,xhe),e(xhe,uzo),b(f,QIe,_),b(f,jo,_),M($y,jo,null),e(jo,_zo),e(jo,rd),e(rd,bzo),e(rd,$V),e($V,vzo),e(rd,Fzo),e(rd,kV),e(kV,Tzo),e(rd,Mzo),e(jo,Ezo),e(jo,ky),e(ky,Czo),e(ky,$he),e($he,wzo),e(ky,Azo),e(jo,yzo),e(jo,mt),M(Sy,mt,null),e(mt,Lzo),e(mt,khe),e(khe,xzo),e(mt,$zo),e(mt,td),e(td,kzo),e(td,She),e(She,Szo),e(td,Rzo),e(td,SV),e(SV,Bzo),e(td,Pzo),e(mt,Izo),M(GF,mt,null),e(jo,qzo),e(jo,no),M(Ry,no,null),e(no,Nzo),e(no,Rhe),e(Rhe,jzo),e(no,Dzo),e(no,qa),e(qa,Gzo),e(qa,Bhe),e(Bhe,Ozo),e(qa,Vzo),e(qa,Phe),e(Phe,Xzo),e(qa,zzo),e(qa,Ihe),e(Ihe,Qzo),e(qa,Wzo),e(no,Hzo),e(no,Fe),e(Fe,OF),e(OF,qhe),e(qhe,Uzo),e(OF,Jzo),e(OF,RV),e(RV,Yzo),e(OF,Kzo),e(Fe,Zzo),e(Fe,VF),e(VF,Nhe),e(Nhe,eQo),e(VF,oQo),e(VF,BV),e(BV,rQo),e(VF,tQo),e(Fe,aQo),e(Fe,XF),e(XF,jhe),e(jhe,nQo),e(XF,sQo),e(XF,PV),e(PV,lQo),e(XF,iQo),e(Fe,dQo),e(Fe,Bs),e(Bs,Dhe),e(Dhe,cQo),e(Bs,fQo),e(Bs,IV),e(IV,mQo),e(Bs,gQo),e(Bs,qV),e(qV,hQo),e(Bs,pQo),e(Fe,uQo),e(Fe,zF),e(zF,Ghe),e(Ghe,_Qo),e(zF,bQo),e(zF,NV),e(NV,vQo),e(zF,FQo),e(Fe,TQo),e(Fe,gt),e(gt,Ohe),e(Ohe,MQo),e(gt,EQo),e(gt,jV),e(jV,CQo),e(gt,wQo),e(gt,DV),e(DV,AQo),e(gt,yQo),e(gt,GV),e(GV,LQo),e(gt,xQo),e(Fe,$Qo),e(Fe,QF),e(QF,Vhe),e(Vhe,kQo),e(QF,SQo),e(QF,OV),e(OV,RQo),e(QF,BQo),e(Fe,PQo),e(Fe,WF),e(WF,Xhe),e(Xhe,IQo),e(WF,qQo),e(WF,VV),e(VV,NQo),e(WF,jQo),e(Fe,DQo),e(Fe,HF),e(HF,zhe),e(zhe,GQo),e(HF,OQo),e(HF,XV),e(XV,VQo),e(HF,XQo),e(Fe,zQo),e(Fe,UF),e(UF,Qhe),e(Qhe,QQo),e(UF,WQo),e(UF,zV),e(zV,HQo),e(UF,UQo),e(Fe,JQo),e(Fe,JF),e(JF,Whe),e(Whe,YQo),e(JF,KQo),e(JF,QV),e(QV,ZQo),e(JF,eWo),e(Fe,oWo),e(Fe,YF),e(YF,Hhe),e(Hhe,rWo),e(YF,tWo),e(YF,WV),e(WV,aWo),e(YF,nWo),e(Fe,sWo),e(Fe,KF),e(KF,Uhe),e(Uhe,lWo),e(KF,iWo),e(KF,HV),e(HV,dWo),e(KF,cWo),e(no,fWo),e(no,ZF),e(ZF,mWo),e(ZF,Jhe),e(Jhe,gWo),e(ZF,hWo),e(ZF,Yhe),e(Yhe,pWo),e(no,uWo),M(e0,no,null),b(f,WIe,_),b(f,ad,_),e(ad,o0),e(o0,Khe),M(By,Khe,null),e(ad,_Wo),e(ad,Zhe),e(Zhe,bWo),b(f,HIe,_),b(f,Do,_),M(Py,Do,null),e(Do,vWo),e(Do,nd),e(nd,FWo),e(nd,UV),e(UV,TWo),e(nd,MWo),e(nd,JV),e(JV,EWo),e(nd,CWo),e(Do,wWo),e(Do,Iy),e(Iy,AWo),e(Iy,epe),e(epe,yWo),e(Iy,LWo),e(Do,xWo),e(Do,ht),M(qy,ht,null),e(ht,$Wo),e(ht,ope),e(ope,kWo),e(ht,SWo),e(ht,sd),e(sd,RWo),e(sd,rpe),e(rpe,BWo),e(sd,PWo),e(sd,YV),e(YV,IWo),e(sd,qWo),e(ht,NWo),M(r0,ht,null),e(Do,jWo),e(Do,so),M(Ny,so,null),e(so,DWo),e(so,tpe),e(tpe,GWo),e(so,OWo),e(so,Na),e(Na,VWo),e(Na,ape),e(ape,XWo),e(Na,zWo),e(Na,npe),e(npe,QWo),e(Na,WWo),e(Na,spe),e(spe,HWo),e(Na,UWo),e(so,JWo),e(so,lpe),e(lpe,t0),e(t0,ipe),e(ipe,YWo),e(t0,KWo),e(t0,KV),e(KV,ZWo),e(t0,eHo),e(so,oHo),e(so,a0),e(a0,rHo),e(a0,dpe),e(dpe,tHo),e(a0,aHo),e(a0,cpe),e(cpe,nHo),e(so,sHo),M(n0,so,null),b(f,UIe,_),b(f,ld,_),e(ld,s0),e(s0,fpe),M(jy,fpe,null),e(ld,lHo),e(ld,mpe),e(mpe,iHo),b(f,JIe,_),b(f,Go,_),M(Dy,Go,null),e(Go,dHo),e(Go,id),e(id,cHo),e(id,ZV),e(ZV,fHo),e(id,mHo),e(id,eX),e(eX,gHo),e(id,hHo),e(Go,pHo),e(Go,Gy),e(Gy,uHo),e(Gy,gpe),e(gpe,_Ho),e(Gy,bHo),e(Go,vHo),e(Go,pt),M(Oy,pt,null),e(pt,FHo),e(pt,hpe),e(hpe,THo),e(pt,MHo),e(pt,dd),e(dd,EHo),e(dd,ppe),e(ppe,CHo),e(dd,wHo),e(dd,oX),e(oX,AHo),e(dd,yHo),e(pt,LHo),M(l0,pt,null),e(Go,xHo),e(Go,lo),M(Vy,lo,null),e(lo,$Ho),e(lo,upe),e(upe,kHo),e(lo,SHo),e(lo,ja),e(ja,RHo),e(ja,_pe),e(_pe,BHo),e(ja,PHo),e(ja,bpe),e(bpe,IHo),e(ja,qHo),e(ja,vpe),e(vpe,NHo),e(ja,jHo),e(lo,DHo),e(lo,Ne),e(Ne,i0),e(i0,Fpe),e(Fpe,GHo),e(i0,OHo),e(i0,rX),e(rX,VHo),e(i0,XHo),e(Ne,zHo),e(Ne,d0),e(d0,Tpe),e(Tpe,QHo),e(d0,WHo),e(d0,tX),e(tX,HHo),e(d0,UHo),e(Ne,JHo),e(Ne,c0),e(c0,Mpe),e(Mpe,YHo),e(c0,KHo),e(c0,aX),e(aX,ZHo),e(c0,eUo),e(Ne,oUo),e(Ne,f0),e(f0,Epe),e(Epe,rUo),e(f0,tUo),e(f0,nX),e(nX,aUo),e(f0,nUo),e(Ne,sUo),e(Ne,m0),e(m0,Cpe),e(Cpe,lUo),e(m0,iUo),e(m0,sX),e(sX,dUo),e(m0,cUo),e(Ne,fUo),e(Ne,g0),e(g0,wpe),e(wpe,mUo),e(g0,gUo),e(g0,lX),e(lX,hUo),e(g0,pUo),e(Ne,uUo),e(Ne,h0),e(h0,Ape),e(Ape,_Uo),e(h0,bUo),e(h0,iX),e(iX,vUo),e(h0,FUo),e(Ne,TUo),e(Ne,p0),e(p0,ype),e(ype,MUo),e(p0,EUo),e(p0,dX),e(dX,CUo),e(p0,wUo),e(lo,AUo),e(lo,u0),e(u0,yUo),e(u0,Lpe),e(Lpe,LUo),e(u0,xUo),e(u0,xpe),e(xpe,$Uo),e(lo,kUo),M(_0,lo,null),b(f,YIe,_),b(f,cd,_),e(cd,b0),e(b0,$pe),M(Xy,$pe,null),e(cd,SUo),e(cd,kpe),e(kpe,RUo),b(f,KIe,_),b(f,Oo,_),M(zy,Oo,null),e(Oo,BUo),e(Oo,fd),e(fd,PUo),e(fd,cX),e(cX,IUo),e(fd,qUo),e(fd,fX),e(fX,NUo),e(fd,jUo),e(Oo,DUo),e(Oo,Qy),e(Qy,GUo),e(Qy,Spe),e(Spe,OUo),e(Qy,VUo),e(Oo,XUo),e(Oo,ut),M(Wy,ut,null),e(ut,zUo),e(ut,Rpe),e(Rpe,QUo),e(ut,WUo),e(ut,md),e(md,HUo),e(md,Bpe),e(Bpe,UUo),e(md,JUo),e(md,mX),e(mX,YUo),e(md,KUo),e(ut,ZUo),M(v0,ut,null),e(Oo,eJo),e(Oo,io),M(Hy,io,null),e(io,oJo),e(io,Ppe),e(Ppe,rJo),e(io,tJo),e(io,Da),e(Da,aJo),e(Da,Ipe),e(Ipe,nJo),e(Da,sJo),e(Da,qpe),e(qpe,lJo),e(Da,iJo),e(Da,Npe),e(Npe,dJo),e(Da,cJo),e(io,fJo),e(io,Ga),e(Ga,F0),e(F0,jpe),e(jpe,mJo),e(F0,gJo),e(F0,gX),e(gX,hJo),e(F0,pJo),e(Ga,uJo),e(Ga,T0),e(T0,Dpe),e(Dpe,_Jo),e(T0,bJo),e(T0,hX),e(hX,vJo),e(T0,FJo),e(Ga,TJo),e(Ga,M0),e(M0,Gpe),e(Gpe,MJo),e(M0,EJo),e(M0,pX),e(pX,CJo),e(M0,wJo),e(Ga,AJo),e(Ga,E0),e(E0,Ope),e(Ope,yJo),e(E0,LJo),e(E0,uX),e(uX,xJo),e(E0,$Jo),e(io,kJo),e(io,C0),e(C0,SJo),e(C0,Vpe),e(Vpe,RJo),e(C0,BJo),e(C0,Xpe),e(Xpe,PJo),e(io,IJo),M(w0,io,null),b(f,ZIe,_),b(f,gd,_),e(gd,A0),e(A0,zpe),M(Uy,zpe,null),e(gd,qJo),e(gd,Qpe),e(Qpe,NJo),b(f,eqe,_),b(f,Vo,_),M(Jy,Vo,null),e(Vo,jJo),e(Vo,hd),e(hd,DJo),e(hd,_X),e(_X,GJo),e(hd,OJo),e(hd,bX),e(bX,VJo),e(hd,XJo),e(Vo,zJo),e(Vo,Yy),e(Yy,QJo),e(Yy,Wpe),e(Wpe,WJo),e(Yy,HJo),e(Vo,UJo),e(Vo,_t),M(Ky,_t,null),e(_t,JJo),e(_t,Hpe),e(Hpe,YJo),e(_t,KJo),e(_t,pd),e(pd,ZJo),e(pd,Upe),e(Upe,eYo),e(pd,oYo),e(pd,vX),e(vX,rYo),e(pd,tYo),e(_t,aYo),M(y0,_t,null),e(Vo,nYo),e(Vo,co),M(Zy,co,null),e(co,sYo),e(co,Jpe),e(Jpe,lYo),e(co,iYo),e(co,Oa),e(Oa,dYo),e(Oa,Ype),e(Ype,cYo),e(Oa,fYo),e(Oa,Kpe),e(Kpe,mYo),e(Oa,gYo),e(Oa,Zpe),e(Zpe,hYo),e(Oa,pYo),e(co,uYo),e(co,je),e(je,L0),e(L0,eue),e(eue,_Yo),e(L0,bYo),e(L0,FX),e(FX,vYo),e(L0,FYo),e(je,TYo),e(je,x0),e(x0,oue),e(oue,MYo),e(x0,EYo),e(x0,TX),e(TX,CYo),e(x0,wYo),e(je,AYo),e(je,$0),e($0,rue),e(rue,yYo),e($0,LYo),e($0,MX),e(MX,xYo),e($0,$Yo),e(je,kYo),e(je,k0),e(k0,tue),e(tue,SYo),e(k0,RYo),e(k0,EX),e(EX,BYo),e(k0,PYo),e(je,IYo),e(je,S0),e(S0,aue),e(aue,qYo),e(S0,NYo),e(S0,CX),e(CX,jYo),e(S0,DYo),e(je,GYo),e(je,R0),e(R0,nue),e(nue,OYo),e(R0,VYo),e(R0,wX),e(wX,XYo),e(R0,zYo),e(je,QYo),e(je,B0),e(B0,sue),e(sue,WYo),e(B0,HYo),e(B0,AX),e(AX,UYo),e(B0,JYo),e(je,YYo),e(je,P0),e(P0,lue),e(lue,KYo),e(P0,ZYo),e(P0,yX),e(yX,eKo),e(P0,oKo),e(co,rKo),e(co,I0),e(I0,tKo),e(I0,iue),e(iue,aKo),e(I0,nKo),e(I0,due),e(due,sKo),e(co,lKo),M(q0,co,null),b(f,oqe,_),b(f,ud,_),e(ud,N0),e(N0,cue),M(eL,cue,null),e(ud,iKo),e(ud,fue),e(fue,dKo),b(f,rqe,_),b(f,Xo,_),M(oL,Xo,null),e(Xo,cKo),e(Xo,_d),e(_d,fKo),e(_d,LX),e(LX,mKo),e(_d,gKo),e(_d,xX),e(xX,hKo),e(_d,pKo),e(Xo,uKo),e(Xo,rL),e(rL,_Ko),e(rL,mue),e(mue,bKo),e(rL,vKo),e(Xo,FKo),e(Xo,bt),M(tL,bt,null),e(bt,TKo),e(bt,gue),e(gue,MKo),e(bt,EKo),e(bt,bd),e(bd,CKo),e(bd,hue),e(hue,wKo),e(bd,AKo),e(bd,$X),e($X,yKo),e(bd,LKo),e(bt,xKo),M(j0,bt,null),e(Xo,$Ko),e(Xo,fo),M(aL,fo,null),e(fo,kKo),e(fo,pue),e(pue,SKo),e(fo,RKo),e(fo,Va),e(Va,BKo),e(Va,uue),e(uue,PKo),e(Va,IKo),e(Va,_ue),e(_ue,qKo),e(Va,NKo),e(Va,bue),e(bue,jKo),e(Va,DKo),e(fo,GKo),e(fo,nL),e(nL,D0),e(D0,vue),e(vue,OKo),e(D0,VKo),e(D0,kX),e(kX,XKo),e(D0,zKo),e(nL,QKo),e(nL,G0),e(G0,Fue),e(Fue,WKo),e(G0,HKo),e(G0,SX),e(SX,UKo),e(G0,JKo),e(fo,YKo),e(fo,O0),e(O0,KKo),e(O0,Tue),e(Tue,ZKo),e(O0,eZo),e(O0,Mue),e(Mue,oZo),e(fo,rZo),M(V0,fo,null),b(f,tqe,_),b(f,vd,_),e(vd,X0),e(X0,Eue),M(sL,Eue,null),e(vd,tZo),e(vd,Cue),e(Cue,aZo),b(f,aqe,_),b(f,zo,_),M(lL,zo,null),e(zo,nZo),e(zo,Fd),e(Fd,sZo),e(Fd,RX),e(RX,lZo),e(Fd,iZo),e(Fd,BX),e(BX,dZo),e(Fd,cZo),e(zo,fZo),e(zo,iL),e(iL,mZo),e(iL,wue),e(wue,gZo),e(iL,hZo),e(zo,pZo),e(zo,vt),M(dL,vt,null),e(vt,uZo),e(vt,Aue),e(Aue,_Zo),e(vt,bZo),e(vt,Td),e(Td,vZo),e(Td,yue),e(yue,FZo),e(Td,TZo),e(Td,PX),e(PX,MZo),e(Td,EZo),e(vt,CZo),M(z0,vt,null),e(zo,wZo),e(zo,mo),M(cL,mo,null),e(mo,AZo),e(mo,Lue),e(Lue,yZo),e(mo,LZo),e(mo,Xa),e(Xa,xZo),e(Xa,xue),e(xue,$Zo),e(Xa,kZo),e(Xa,$ue),e($ue,SZo),e(Xa,RZo),e(Xa,kue),e(kue,BZo),e(Xa,PZo),e(mo,IZo),e(mo,za),e(za,Q0),e(Q0,Sue),e(Sue,qZo),e(Q0,NZo),e(Q0,IX),e(IX,jZo),e(Q0,DZo),e(za,GZo),e(za,W0),e(W0,Rue),e(Rue,OZo),e(W0,VZo),e(W0,qX),e(qX,XZo),e(W0,zZo),e(za,QZo),e(za,H0),e(H0,Bue),e(Bue,WZo),e(H0,HZo),e(H0,NX),e(NX,UZo),e(H0,JZo),e(za,YZo),e(za,U0),e(U0,Pue),e(Pue,KZo),e(U0,ZZo),e(U0,jX),e(jX,eer),e(U0,oer),e(mo,rer),e(mo,J0),e(J0,ter),e(J0,Iue),e(Iue,aer),e(J0,ner),e(J0,que),e(que,ser),e(mo,ler),M(Y0,mo,null),b(f,nqe,_),b(f,Md,_),e(Md,K0),e(K0,Nue),M(fL,Nue,null),e(Md,ier),e(Md,jue),e(jue,der),b(f,sqe,_),b(f,Qo,_),M(mL,Qo,null),e(Qo,cer),e(Qo,Ed),e(Ed,fer),e(Ed,DX),e(DX,mer),e(Ed,ger),e(Ed,GX),e(GX,her),e(Ed,per),e(Qo,uer),e(Qo,gL),e(gL,_er),e(gL,Due),e(Due,ber),e(gL,ver),e(Qo,Fer),e(Qo,Ft),M(hL,Ft,null),e(Ft,Ter),e(Ft,Gue),e(Gue,Mer),e(Ft,Eer),e(Ft,Cd),e(Cd,Cer),e(Cd,Oue),e(Oue,wer),e(Cd,Aer),e(Cd,OX),e(OX,yer),e(Cd,Ler),e(Ft,xer),M(Z0,Ft,null),e(Qo,$er),e(Qo,go),M(pL,go,null),e(go,ker),e(go,Vue),e(Vue,Ser),e(go,Rer),e(go,Qa),e(Qa,Ber),e(Qa,Xue),e(Xue,Per),e(Qa,Ier),e(Qa,zue),e(zue,qer),e(Qa,Ner),e(Qa,Que),e(Que,jer),e(Qa,Der),e(go,Ger),e(go,wd),e(wd,eT),e(eT,Wue),e(Wue,Oer),e(eT,Ver),e(eT,VX),e(VX,Xer),e(eT,zer),e(wd,Qer),e(wd,oT),e(oT,Hue),e(Hue,Wer),e(oT,Her),e(oT,XX),e(XX,Uer),e(oT,Jer),e(wd,Yer),e(wd,rT),e(rT,Uue),e(Uue,Ker),e(rT,Zer),e(rT,zX),e(zX,eor),e(rT,oor),e(go,ror),e(go,tT),e(tT,tor),e(tT,Jue),e(Jue,aor),e(tT,nor),e(tT,Yue),e(Yue,sor),e(go,lor),M(aT,go,null),b(f,lqe,_),b(f,Ad,_),e(Ad,nT),e(nT,Kue),M(uL,Kue,null),e(Ad,ior),e(Ad,Zue),e(Zue,dor),b(f,iqe,_),b(f,Wo,_),M(_L,Wo,null),e(Wo,cor),e(Wo,yd),e(yd,mor),e(yd,QX),e(QX,gor),e(yd,hor),e(yd,WX),e(WX,por),e(yd,uor),e(Wo,_or),e(Wo,bL),e(bL,bor),e(bL,e_e),e(e_e,vor),e(bL,For),e(Wo,Tor),e(Wo,Tt),M(vL,Tt,null),e(Tt,Mor),e(Tt,o_e),e(o_e,Eor),e(Tt,Cor),e(Tt,Ld),e(Ld,wor),e(Ld,r_e),e(r_e,Aor),e(Ld,yor),e(Ld,HX),e(HX,Lor),e(Ld,xor),e(Tt,$or),M(sT,Tt,null),e(Wo,kor),e(Wo,ho),M(FL,ho,null),e(ho,Sor),e(ho,t_e),e(t_e,Ror),e(ho,Bor),e(ho,Wa),e(Wa,Por),e(Wa,a_e),e(a_e,Ior),e(Wa,qor),e(Wa,n_e),e(n_e,Nor),e(Wa,jor),e(Wa,s_e),e(s_e,Dor),e(Wa,Gor),e(ho,Oor),e(ho,TL),e(TL,lT),e(lT,l_e),e(l_e,Vor),e(lT,Xor),e(lT,UX),e(UX,zor),e(lT,Qor),e(TL,Wor),e(TL,iT),e(iT,i_e),e(i_e,Hor),e(iT,Uor),e(iT,JX),e(JX,Jor),e(iT,Yor),e(ho,Kor),e(ho,dT),e(dT,Zor),e(dT,d_e),e(d_e,err),e(dT,orr),e(dT,c_e),e(c_e,rrr),e(ho,trr),M(cT,ho,null),b(f,dqe,_),b(f,xd,_),e(xd,fT),e(fT,f_e),M(ML,f_e,null),e(xd,arr),e(xd,m_e),e(m_e,nrr),b(f,cqe,_),b(f,Ho,_),M(EL,Ho,null),e(Ho,srr),e(Ho,$d),e($d,lrr),e($d,YX),e(YX,irr),e($d,drr),e($d,KX),e(KX,crr),e($d,frr),e(Ho,mrr),e(Ho,CL),e(CL,grr),e(CL,g_e),e(g_e,hrr),e(CL,prr),e(Ho,urr),e(Ho,Mt),M(wL,Mt,null),e(Mt,_rr),e(Mt,h_e),e(h_e,brr),e(Mt,vrr),e(Mt,kd),e(kd,Frr),e(kd,p_e),e(p_e,Trr),e(kd,Mrr),e(kd,ZX),e(ZX,Err),e(kd,Crr),e(Mt,wrr),M(mT,Mt,null),e(Ho,Arr),e(Ho,po),M(AL,po,null),e(po,yrr),e(po,u_e),e(u_e,Lrr),e(po,xrr),e(po,Ha),e(Ha,$rr),e(Ha,__e),e(__e,krr),e(Ha,Srr),e(Ha,b_e),e(b_e,Rrr),e(Ha,Brr),e(Ha,v_e),e(v_e,Prr),e(Ha,Irr),e(po,qrr),e(po,F_e),e(F_e,gT),e(gT,T_e),e(T_e,Nrr),e(gT,jrr),e(gT,ez),e(ez,Drr),e(gT,Grr),e(po,Orr),e(po,hT),e(hT,Vrr),e(hT,M_e),e(M_e,Xrr),e(hT,zrr),e(hT,E_e),e(E_e,Qrr),e(po,Wrr),M(pT,po,null),b(f,fqe,_),b(f,Sd,_),e(Sd,uT),e(uT,C_e),M(yL,C_e,null),e(Sd,Hrr),e(Sd,w_e),e(w_e,Urr),b(f,mqe,_),b(f,Uo,_),M(LL,Uo,null),e(Uo,Jrr),e(Uo,Rd),e(Rd,Yrr),e(Rd,oz),e(oz,Krr),e(Rd,Zrr),e(Rd,rz),e(rz,etr),e(Rd,otr),e(Uo,rtr),e(Uo,xL),e(xL,ttr),e(xL,A_e),e(A_e,atr),e(xL,ntr),e(Uo,str),e(Uo,Et),M($L,Et,null),e(Et,ltr),e(Et,y_e),e(y_e,itr),e(Et,dtr),e(Et,Bd),e(Bd,ctr),e(Bd,L_e),e(L_e,ftr),e(Bd,mtr),e(Bd,tz),e(tz,gtr),e(Bd,htr),e(Et,ptr),M(_T,Et,null),e(Uo,utr),e(Uo,uo),M(kL,uo,null),e(uo,_tr),e(uo,x_e),e(x_e,btr),e(uo,vtr),e(uo,Ua),e(Ua,Ftr),e(Ua,$_e),e($_e,Ttr),e(Ua,Mtr),e(Ua,k_e),e(k_e,Etr),e(Ua,Ctr),e(Ua,S_e),e(S_e,wtr),e(Ua,Atr),e(uo,ytr),e(uo,Ja),e(Ja,bT),e(bT,R_e),e(R_e,Ltr),e(bT,xtr),e(bT,az),e(az,$tr),e(bT,ktr),e(Ja,Str),e(Ja,vT),e(vT,B_e),e(B_e,Rtr),e(vT,Btr),e(vT,nz),e(nz,Ptr),e(vT,Itr),e(Ja,qtr),e(Ja,FT),e(FT,P_e),e(P_e,Ntr),e(FT,jtr),e(FT,sz),e(sz,Dtr),e(FT,Gtr),e(Ja,Otr),e(Ja,TT),e(TT,I_e),e(I_e,Vtr),e(TT,Xtr),e(TT,lz),e(lz,ztr),e(TT,Qtr),e(uo,Wtr),e(uo,MT),e(MT,Htr),e(MT,q_e),e(q_e,Utr),e(MT,Jtr),e(MT,N_e),e(N_e,Ytr),e(uo,Ktr),M(ET,uo,null),b(f,gqe,_),b(f,Pd,_),e(Pd,CT),e(CT,j_e),M(SL,j_e,null),e(Pd,Ztr),e(Pd,D_e),e(D_e,ear),b(f,hqe,_),b(f,Jo,_),M(RL,Jo,null),e(Jo,oar),e(Jo,Id),e(Id,rar),e(Id,iz),e(iz,tar),e(Id,aar),e(Id,dz),e(dz,nar),e(Id,sar),e(Jo,lar),e(Jo,BL),e(BL,iar),e(BL,G_e),e(G_e,dar),e(BL,car),e(Jo,far),e(Jo,Ct),M(PL,Ct,null),e(Ct,mar),e(Ct,O_e),e(O_e,gar),e(Ct,har),e(Ct,qd),e(qd,par),e(qd,V_e),e(V_e,uar),e(qd,_ar),e(qd,cz),e(cz,bar),e(qd,Far),e(Ct,Tar),M(wT,Ct,null),e(Jo,Mar),e(Jo,_o),M(IL,_o,null),e(_o,Ear),e(_o,X_e),e(X_e,Car),e(_o,war),e(_o,Ya),e(Ya,Aar),e(Ya,z_e),e(z_e,yar),e(Ya,Lar),e(Ya,Q_e),e(Q_e,xar),e(Ya,$ar),e(Ya,W_e),e(W_e,kar),e(Ya,Sar),e(_o,Rar),e(_o,H_e),e(H_e,AT),e(AT,U_e),e(U_e,Bar),e(AT,Par),e(AT,fz),e(fz,Iar),e(AT,qar),e(_o,Nar),e(_o,yT),e(yT,jar),e(yT,J_e),e(J_e,Dar),e(yT,Gar),e(yT,Y_e),e(Y_e,Oar),e(_o,Var),M(LT,_o,null),b(f,pqe,_),b(f,Nd,_),e(Nd,xT),e(xT,K_e),M(qL,K_e,null),e(Nd,Xar),e(Nd,Z_e),e(Z_e,zar),b(f,uqe,_),b(f,Yo,_),M(NL,Yo,null),e(Yo,Qar),e(Yo,jd),e(jd,War),e(jd,mz),e(mz,Har),e(jd,Uar),e(jd,gz),e(gz,Jar),e(jd,Yar),e(Yo,Kar),e(Yo,jL),e(jL,Zar),e(jL,e2e),e(e2e,enr),e(jL,onr),e(Yo,rnr),e(Yo,wt),M(DL,wt,null),e(wt,tnr),e(wt,o2e),e(o2e,anr),e(wt,nnr),e(wt,Dd),e(Dd,snr),e(Dd,r2e),e(r2e,lnr),e(Dd,inr),e(Dd,hz),e(hz,dnr),e(Dd,cnr),e(wt,fnr),M($T,wt,null),e(Yo,mnr),e(Yo,wr),M(GL,wr,null),e(wr,gnr),e(wr,t2e),e(t2e,hnr),e(wr,pnr),e(wr,Ka),e(Ka,unr),e(Ka,a2e),e(a2e,_nr),e(Ka,bnr),e(Ka,n2e),e(n2e,vnr),e(Ka,Fnr),e(Ka,s2e),e(s2e,Tnr),e(Ka,Mnr),e(wr,Enr),e(wr,j),e(j,kT),e(kT,l2e),e(l2e,Cnr),e(kT,wnr),e(kT,pz),e(pz,Anr),e(kT,ynr),e(j,Lnr),e(j,ST),e(ST,i2e),e(i2e,xnr),e(ST,$nr),e(ST,uz),e(uz,knr),e(ST,Snr),e(j,Rnr),e(j,RT),e(RT,d2e),e(d2e,Bnr),e(RT,Pnr),e(RT,_z),e(_z,Inr),e(RT,qnr),e(j,Nnr),e(j,BT),e(BT,c2e),e(c2e,jnr),e(BT,Dnr),e(BT,bz),e(bz,Gnr),e(BT,Onr),e(j,Vnr),e(j,PT),e(PT,f2e),e(f2e,Xnr),e(PT,znr),e(PT,vz),e(vz,Qnr),e(PT,Wnr),e(j,Hnr),e(j,IT),e(IT,m2e),e(m2e,Unr),e(IT,Jnr),e(IT,Fz),e(Fz,Ynr),e(IT,Knr),e(j,Znr),e(j,qT),e(qT,g2e),e(g2e,esr),e(qT,osr),e(qT,Tz),e(Tz,rsr),e(qT,tsr),e(j,asr),e(j,NT),e(NT,h2e),e(h2e,nsr),e(NT,ssr),e(NT,Mz),e(Mz,lsr),e(NT,isr),e(j,dsr),e(j,jT),e(jT,p2e),e(p2e,csr),e(jT,fsr),e(jT,Ez),e(Ez,msr),e(jT,gsr),e(j,hsr),e(j,DT),e(DT,u2e),e(u2e,psr),e(DT,usr),e(DT,Cz),e(Cz,_sr),e(DT,bsr),e(j,vsr),e(j,GT),e(GT,_2e),e(_2e,Fsr),e(GT,Tsr),e(GT,wz),e(wz,Msr),e(GT,Esr),e(j,Csr),e(j,OT),e(OT,b2e),e(b2e,wsr),e(OT,Asr),e(OT,Az),e(Az,ysr),e(OT,Lsr),e(j,xsr),e(j,VT),e(VT,v2e),e(v2e,$sr),e(VT,ksr),e(VT,yz),e(yz,Ssr),e(VT,Rsr),e(j,Bsr),e(j,XT),e(XT,F2e),e(F2e,Psr),e(XT,Isr),e(XT,Lz),e(Lz,qsr),e(XT,Nsr),e(j,jsr),e(j,zT),e(zT,T2e),e(T2e,Dsr),e(zT,Gsr),e(zT,xz),e(xz,Osr),e(zT,Vsr),e(j,Xsr),e(j,QT),e(QT,M2e),e(M2e,zsr),e(QT,Qsr),e(QT,$z),e($z,Wsr),e(QT,Hsr),e(j,Usr),e(j,WT),e(WT,E2e),e(E2e,Jsr),e(WT,Ysr),e(WT,kz),e(kz,Ksr),e(WT,Zsr),e(j,elr),e(j,Ps),e(Ps,C2e),e(C2e,olr),e(Ps,rlr),e(Ps,Sz),e(Sz,tlr),e(Ps,alr),e(Ps,Rz),e(Rz,nlr),e(Ps,slr),e(j,llr),e(j,HT),e(HT,w2e),e(w2e,ilr),e(HT,dlr),e(HT,Bz),e(Bz,clr),e(HT,flr),e(j,mlr),e(j,UT),e(UT,A2e),e(A2e,glr),e(UT,hlr),e(UT,Pz),e(Pz,plr),e(UT,ulr),e(j,_lr),e(j,JT),e(JT,y2e),e(y2e,blr),e(JT,vlr),e(JT,Iz),e(Iz,Flr),e(JT,Tlr),e(j,Mlr),e(j,YT),e(YT,L2e),e(L2e,Elr),e(YT,Clr),e(YT,qz),e(qz,wlr),e(YT,Alr),e(j,ylr),e(j,KT),e(KT,x2e),e(x2e,Llr),e(KT,xlr),e(KT,Nz),e(Nz,$lr),e(KT,klr),e(j,Slr),e(j,ZT),e(ZT,$2e),e($2e,Rlr),e(ZT,Blr),e(ZT,jz),e(jz,Plr),e(ZT,Ilr),e(j,qlr),e(j,e7),e(e7,k2e),e(k2e,Nlr),e(e7,jlr),e(e7,Dz),e(Dz,Dlr),e(e7,Glr),e(j,Olr),e(j,o7),e(o7,S2e),e(S2e,Vlr),e(o7,Xlr),e(o7,Gz),e(Gz,zlr),e(o7,Qlr),e(j,Wlr),e(j,r7),e(r7,R2e),e(R2e,Hlr),e(r7,Ulr),e(r7,Oz),e(Oz,Jlr),e(r7,Ylr),e(j,Klr),e(j,t7),e(t7,B2e),e(B2e,Zlr),e(t7,eir),e(t7,Vz),e(Vz,oir),e(t7,rir),e(j,tir),e(j,a7),e(a7,P2e),e(P2e,air),e(a7,nir),e(a7,Xz),e(Xz,sir),e(a7,lir),e(j,iir),e(j,n7),e(n7,I2e),e(I2e,dir),e(n7,cir),e(n7,zz),e(zz,fir),e(n7,mir),e(j,gir),e(j,s7),e(s7,q2e),e(q2e,hir),e(s7,pir),e(s7,Qz),e(Qz,uir),e(s7,_ir),e(j,bir),e(j,l7),e(l7,N2e),e(N2e,vir),e(l7,Fir),e(l7,Wz),e(Wz,Tir),e(l7,Mir),e(j,Eir),e(j,i7),e(i7,j2e),e(j2e,Cir),e(i7,wir),e(i7,Hz),e(Hz,Air),e(i7,yir),e(j,Lir),e(j,d7),e(d7,D2e),e(D2e,xir),e(d7,$ir),e(d7,Uz),e(Uz,kir),e(d7,Sir),e(j,Rir),e(j,c7),e(c7,G2e),e(G2e,Bir),e(c7,Pir),e(c7,Jz),e(Jz,Iir),e(c7,qir),e(j,Nir),e(j,f7),e(f7,O2e),e(O2e,jir),e(f7,Dir),e(f7,Yz),e(Yz,Gir),e(f7,Oir),e(j,Vir),e(j,m7),e(m7,V2e),e(V2e,Xir),e(m7,zir),e(m7,Kz),e(Kz,Qir),e(m7,Wir),e(j,Hir),e(j,g7),e(g7,X2e),e(X2e,Uir),e(g7,Jir),e(g7,Zz),e(Zz,Yir),e(g7,Kir),e(j,Zir),e(j,h7),e(h7,z2e),e(z2e,edr),e(h7,odr),e(h7,eQ),e(eQ,rdr),e(h7,tdr),e(j,adr),e(j,p7),e(p7,Q2e),e(Q2e,ndr),e(p7,sdr),e(p7,oQ),e(oQ,ldr),e(p7,idr),e(j,ddr),e(j,u7),e(u7,W2e),e(W2e,cdr),e(u7,fdr),e(u7,rQ),e(rQ,mdr),e(u7,gdr),e(j,hdr),e(j,_7),e(_7,H2e),e(H2e,pdr),e(_7,udr),e(_7,tQ),e(tQ,_dr),e(_7,bdr),e(j,vdr),e(j,b7),e(b7,U2e),e(U2e,Fdr),e(b7,Tdr),e(b7,aQ),e(aQ,Mdr),e(b7,Edr),e(j,Cdr),e(j,v7),e(v7,J2e),e(J2e,wdr),e(v7,Adr),e(v7,nQ),e(nQ,ydr),e(v7,Ldr),e(j,xdr),e(j,F7),e(F7,Y2e),e(Y2e,$dr),e(F7,kdr),e(F7,sQ),e(sQ,Sdr),e(F7,Rdr),e(wr,Bdr),M(T7,wr,null),b(f,_qe,_),b(f,Gd,_),e(Gd,M7),e(M7,K2e),M(OL,K2e,null),e(Gd,Pdr),e(Gd,Z2e),e(Z2e,Idr),b(f,bqe,_),b(f,Ko,_),M(VL,Ko,null),e(Ko,qdr),e(Ko,Od),e(Od,Ndr),e(Od,lQ),e(lQ,jdr),e(Od,Ddr),e(Od,iQ),e(iQ,Gdr),e(Od,Odr),e(Ko,Vdr),e(Ko,XL),e(XL,Xdr),e(XL,e1e),e(e1e,zdr),e(XL,Qdr),e(Ko,Wdr),e(Ko,At),M(zL,At,null),e(At,Hdr),e(At,o1e),e(o1e,Udr),e(At,Jdr),e(At,Vd),e(Vd,Ydr),e(Vd,r1e),e(r1e,Kdr),e(Vd,Zdr),e(Vd,dQ),e(dQ,ecr),e(Vd,ocr),e(At,rcr),M(E7,At,null),e(Ko,tcr),e(Ko,Ar),M(QL,Ar,null),e(Ar,acr),e(Ar,t1e),e(t1e,ncr),e(Ar,scr),e(Ar,Za),e(Za,lcr),e(Za,a1e),e(a1e,icr),e(Za,dcr),e(Za,n1e),e(n1e,ccr),e(Za,fcr),e(Za,s1e),e(s1e,mcr),e(Za,gcr),e(Ar,hcr),e(Ar,se),e(se,C7),e(C7,l1e),e(l1e,pcr),e(C7,ucr),e(C7,cQ),e(cQ,_cr),e(C7,bcr),e(se,vcr),e(se,w7),e(w7,i1e),e(i1e,Fcr),e(w7,Tcr),e(w7,fQ),e(fQ,Mcr),e(w7,Ecr),e(se,Ccr),e(se,A7),e(A7,d1e),e(d1e,wcr),e(A7,Acr),e(A7,mQ),e(mQ,ycr),e(A7,Lcr),e(se,xcr),e(se,y7),e(y7,c1e),e(c1e,$cr),e(y7,kcr),e(y7,gQ),e(gQ,Scr),e(y7,Rcr),e(se,Bcr),e(se,L7),e(L7,f1e),e(f1e,Pcr),e(L7,Icr),e(L7,hQ),e(hQ,qcr),e(L7,Ncr),e(se,jcr),e(se,x7),e(x7,m1e),e(m1e,Dcr),e(x7,Gcr),e(x7,pQ),e(pQ,Ocr),e(x7,Vcr),e(se,Xcr),e(se,$7),e($7,g1e),e(g1e,zcr),e($7,Qcr),e($7,uQ),e(uQ,Wcr),e($7,Hcr),e(se,Ucr),e(se,k7),e(k7,h1e),e(h1e,Jcr),e(k7,Ycr),e(k7,_Q),e(_Q,Kcr),e(k7,Zcr),e(se,efr),e(se,S7),e(S7,p1e),e(p1e,ofr),e(S7,rfr),e(S7,bQ),e(bQ,tfr),e(S7,afr),e(se,nfr),e(se,R7),e(R7,u1e),e(u1e,sfr),e(R7,lfr),e(R7,vQ),e(vQ,ifr),e(R7,dfr),e(se,cfr),e(se,B7),e(B7,_1e),e(_1e,ffr),e(B7,mfr),e(B7,FQ),e(FQ,gfr),e(B7,hfr),e(se,pfr),e(se,P7),e(P7,b1e),e(b1e,ufr),e(P7,_fr),e(P7,TQ),e(TQ,bfr),e(P7,vfr),e(se,Ffr),e(se,I7),e(I7,v1e),e(v1e,Tfr),e(I7,Mfr),e(I7,MQ),e(MQ,Efr),e(I7,Cfr),e(se,wfr),e(se,q7),e(q7,F1e),e(F1e,Afr),e(q7,yfr),e(q7,EQ),e(EQ,Lfr),e(q7,xfr),e(se,$fr),e(se,N7),e(N7,T1e),e(T1e,kfr),e(N7,Sfr),e(N7,CQ),e(CQ,Rfr),e(N7,Bfr),e(se,Pfr),e(se,j7),e(j7,M1e),e(M1e,Ifr),e(j7,qfr),e(j7,wQ),e(wQ,Nfr),e(j7,jfr),e(se,Dfr),e(se,D7),e(D7,E1e),e(E1e,Gfr),e(D7,Ofr),e(D7,AQ),e(AQ,Vfr),e(D7,Xfr),e(se,zfr),e(se,G7),e(G7,C1e),e(C1e,Qfr),e(G7,Wfr),e(G7,yQ),e(yQ,Hfr),e(G7,Ufr),e(se,Jfr),e(se,O7),e(O7,w1e),e(w1e,Yfr),e(O7,Kfr),e(O7,LQ),e(LQ,Zfr),e(O7,emr),e(se,omr),e(se,V7),e(V7,A1e),e(A1e,rmr),e(V7,tmr),e(V7,xQ),e(xQ,amr),e(V7,nmr),e(se,smr),e(se,X7),e(X7,y1e),e(y1e,lmr),e(X7,imr),e(X7,$Q),e($Q,dmr),e(X7,cmr),e(se,fmr),e(se,z7),e(z7,L1e),e(L1e,mmr),e(z7,gmr),e(z7,kQ),e(kQ,hmr),e(z7,pmr),e(se,umr),e(se,Q7),e(Q7,x1e),e(x1e,_mr),e(Q7,bmr),e(Q7,SQ),e(SQ,vmr),e(Q7,Fmr),e(Ar,Tmr),M(W7,Ar,null),b(f,vqe,_),b(f,Xd,_),e(Xd,H7),e(H7,$1e),M(WL,$1e,null),e(Xd,Mmr),e(Xd,k1e),e(k1e,Emr),b(f,Fqe,_),b(f,Zo,_),M(HL,Zo,null),e(Zo,Cmr),e(Zo,zd),e(zd,wmr),e(zd,RQ),e(RQ,Amr),e(zd,ymr),e(zd,BQ),e(BQ,Lmr),e(zd,xmr),e(Zo,$mr),e(Zo,UL),e(UL,kmr),e(UL,S1e),e(S1e,Smr),e(UL,Rmr),e(Zo,Bmr),e(Zo,yt),M(JL,yt,null),e(yt,Pmr),e(yt,R1e),e(R1e,Imr),e(yt,qmr),e(yt,Qd),e(Qd,Nmr),e(Qd,B1e),e(B1e,jmr),e(Qd,Dmr),e(Qd,PQ),e(PQ,Gmr),e(Qd,Omr),e(yt,Vmr),M(U7,yt,null),e(Zo,Xmr),e(Zo,yr),M(YL,yr,null),e(yr,zmr),e(yr,P1e),e(P1e,Qmr),e(yr,Wmr),e(yr,en),e(en,Hmr),e(en,I1e),e(I1e,Umr),e(en,Jmr),e(en,q1e),e(q1e,Ymr),e(en,Kmr),e(en,N1e),e(N1e,Zmr),e(en,egr),e(yr,ogr),e(yr,Te),e(Te,J7),e(J7,j1e),e(j1e,rgr),e(J7,tgr),e(J7,IQ),e(IQ,agr),e(J7,ngr),e(Te,sgr),e(Te,Y7),e(Y7,D1e),e(D1e,lgr),e(Y7,igr),e(Y7,qQ),e(qQ,dgr),e(Y7,cgr),e(Te,fgr),e(Te,K7),e(K7,G1e),e(G1e,mgr),e(K7,ggr),e(K7,NQ),e(NQ,hgr),e(K7,pgr),e(Te,ugr),e(Te,Z7),e(Z7,O1e),e(O1e,_gr),e(Z7,bgr),e(Z7,jQ),e(jQ,vgr),e(Z7,Fgr),e(Te,Tgr),e(Te,eM),e(eM,V1e),e(V1e,Mgr),e(eM,Egr),e(eM,DQ),e(DQ,Cgr),e(eM,wgr),e(Te,Agr),e(Te,oM),e(oM,X1e),e(X1e,ygr),e(oM,Lgr),e(oM,GQ),e(GQ,xgr),e(oM,$gr),e(Te,kgr),e(Te,rM),e(rM,z1e),e(z1e,Sgr),e(rM,Rgr),e(rM,OQ),e(OQ,Bgr),e(rM,Pgr),e(Te,Igr),e(Te,tM),e(tM,Q1e),e(Q1e,qgr),e(tM,Ngr),e(tM,VQ),e(VQ,jgr),e(tM,Dgr),e(Te,Ggr),e(Te,aM),e(aM,W1e),e(W1e,Ogr),e(aM,Vgr),e(aM,XQ),e(XQ,Xgr),e(aM,zgr),e(Te,Qgr),e(Te,nM),e(nM,H1e),e(H1e,Wgr),e(nM,Hgr),e(nM,zQ),e(zQ,Ugr),e(nM,Jgr),e(Te,Ygr),e(Te,sM),e(sM,U1e),e(U1e,Kgr),e(sM,Zgr),e(sM,QQ),e(QQ,ehr),e(sM,ohr),e(Te,rhr),e(Te,lM),e(lM,J1e),e(J1e,thr),e(lM,ahr),e(lM,WQ),e(WQ,nhr),e(lM,shr),e(yr,lhr),M(iM,yr,null),b(f,Tqe,_),b(f,Wd,_),e(Wd,dM),e(dM,Y1e),M(KL,Y1e,null),e(Wd,ihr),e(Wd,K1e),e(K1e,dhr),b(f,Mqe,_),b(f,er,_),M(ZL,er,null),e(er,chr),e(er,Hd),e(Hd,fhr),e(Hd,HQ),e(HQ,mhr),e(Hd,ghr),e(Hd,UQ),e(UQ,hhr),e(Hd,phr),e(er,uhr),e(er,e8),e(e8,_hr),e(e8,Z1e),e(Z1e,bhr),e(e8,vhr),e(er,Fhr),e(er,Lt),M(o8,Lt,null),e(Lt,Thr),e(Lt,ebe),e(ebe,Mhr),e(Lt,Ehr),e(Lt,Ud),e(Ud,Chr),e(Ud,obe),e(obe,whr),e(Ud,Ahr),e(Ud,JQ),e(JQ,yhr),e(Ud,Lhr),e(Lt,xhr),M(cM,Lt,null),e(er,$hr),e(er,Lr),M(r8,Lr,null),e(Lr,khr),e(Lr,rbe),e(rbe,Shr),e(Lr,Rhr),e(Lr,on),e(on,Bhr),e(on,tbe),e(tbe,Phr),e(on,Ihr),e(on,abe),e(abe,qhr),e(on,Nhr),e(on,nbe),e(nbe,jhr),e(on,Dhr),e(Lr,Ghr),e(Lr,Jd),e(Jd,fM),e(fM,sbe),e(sbe,Ohr),e(fM,Vhr),e(fM,YQ),e(YQ,Xhr),e(fM,zhr),e(Jd,Qhr),e(Jd,mM),e(mM,lbe),e(lbe,Whr),e(mM,Hhr),e(mM,KQ),e(KQ,Uhr),e(mM,Jhr),e(Jd,Yhr),e(Jd,gM),e(gM,ibe),e(ibe,Khr),e(gM,Zhr),e(gM,ZQ),e(ZQ,epr),e(gM,opr),e(Lr,rpr),M(hM,Lr,null),b(f,Eqe,_),b(f,Yd,_),e(Yd,pM),e(pM,dbe),M(t8,dbe,null),e(Yd,tpr),e(Yd,cbe),e(cbe,apr),b(f,Cqe,_),b(f,or,_),M(a8,or,null),e(or,npr),e(or,Kd),e(Kd,spr),e(Kd,eW),e(eW,lpr),e(Kd,ipr),e(Kd,oW),e(oW,dpr),e(Kd,cpr),e(or,fpr),e(or,n8),e(n8,mpr),e(n8,fbe),e(fbe,gpr),e(n8,hpr),e(or,ppr),e(or,xt),M(s8,xt,null),e(xt,upr),e(xt,mbe),e(mbe,_pr),e(xt,bpr),e(xt,Zd),e(Zd,vpr),e(Zd,gbe),e(gbe,Fpr),e(Zd,Tpr),e(Zd,rW),e(rW,Mpr),e(Zd,Epr),e(xt,Cpr),M(uM,xt,null),e(or,wpr),e(or,xr),M(l8,xr,null),e(xr,Apr),e(xr,hbe),e(hbe,ypr),e(xr,Lpr),e(xr,rn),e(rn,xpr),e(rn,pbe),e(pbe,$pr),e(rn,kpr),e(rn,ube),e(ube,Spr),e(rn,Rpr),e(rn,_be),e(_be,Bpr),e(rn,Ppr),e(xr,Ipr),e(xr,ie),e(ie,_M),e(_M,bbe),e(bbe,qpr),e(_M,Npr),e(_M,tW),e(tW,jpr),e(_M,Dpr),e(ie,Gpr),e(ie,bM),e(bM,vbe),e(vbe,Opr),e(bM,Vpr),e(bM,aW),e(aW,Xpr),e(bM,zpr),e(ie,Qpr),e(ie,vM),e(vM,Fbe),e(Fbe,Wpr),e(vM,Hpr),e(vM,nW),e(nW,Upr),e(vM,Jpr),e(ie,Ypr),e(ie,FM),e(FM,Tbe),e(Tbe,Kpr),e(FM,Zpr),e(FM,sW),e(sW,eur),e(FM,our),e(ie,rur),e(ie,TM),e(TM,Mbe),e(Mbe,tur),e(TM,aur),e(TM,lW),e(lW,nur),e(TM,sur),e(ie,lur),e(ie,MM),e(MM,Ebe),e(Ebe,iur),e(MM,dur),e(MM,iW),e(iW,cur),e(MM,fur),e(ie,mur),e(ie,EM),e(EM,Cbe),e(Cbe,gur),e(EM,hur),e(EM,dW),e(dW,pur),e(EM,uur),e(ie,_ur),e(ie,CM),e(CM,wbe),e(wbe,bur),e(CM,vur),e(CM,cW),e(cW,Fur),e(CM,Tur),e(ie,Mur),e(ie,wM),e(wM,Abe),e(Abe,Eur),e(wM,Cur),e(wM,fW),e(fW,wur),e(wM,Aur),e(ie,yur),e(ie,AM),e(AM,ybe),e(ybe,Lur),e(AM,xur),e(AM,mW),e(mW,$ur),e(AM,kur),e(ie,Sur),e(ie,yM),e(yM,Lbe),e(Lbe,Rur),e(yM,Bur),e(yM,gW),e(gW,Pur),e(yM,Iur),e(ie,qur),e(ie,LM),e(LM,xbe),e(xbe,Nur),e(LM,jur),e(LM,hW),e(hW,Dur),e(LM,Gur),e(ie,Our),e(ie,xM),e(xM,$be),e($be,Vur),e(xM,Xur),e(xM,pW),e(pW,zur),e(xM,Qur),e(ie,Wur),e(ie,$M),e($M,kbe),e(kbe,Hur),e($M,Uur),e($M,uW),e(uW,Jur),e($M,Yur),e(ie,Kur),e(ie,kM),e(kM,Sbe),e(Sbe,Zur),e(kM,e_r),e(kM,_W),e(_W,o_r),e(kM,r_r),e(ie,t_r),e(ie,SM),e(SM,Rbe),e(Rbe,a_r),e(SM,n_r),e(SM,bW),e(bW,s_r),e(SM,l_r),e(ie,i_r),e(ie,RM),e(RM,Bbe),e(Bbe,d_r),e(RM,c_r),e(RM,vW),e(vW,f_r),e(RM,m_r),e(ie,g_r),e(ie,BM),e(BM,Pbe),e(Pbe,h_r),e(BM,p_r),e(BM,FW),e(FW,u_r),e(BM,__r),e(ie,b_r),e(ie,PM),e(PM,Ibe),e(Ibe,v_r),e(PM,F_r),e(PM,TW),e(TW,T_r),e(PM,M_r),e(ie,E_r),e(ie,IM),e(IM,qbe),e(qbe,C_r),e(IM,w_r),e(IM,MW),e(MW,A_r),e(IM,y_r),e(xr,L_r),M(qM,xr,null),b(f,wqe,_),b(f,ec,_),e(ec,NM),e(NM,Nbe),M(i8,Nbe,null),e(ec,x_r),e(ec,jbe),e(jbe,$_r),b(f,Aqe,_),b(f,rr,_),M(d8,rr,null),e(rr,k_r),e(rr,oc),e(oc,S_r),e(oc,EW),e(EW,R_r),e(oc,B_r),e(oc,CW),e(CW,P_r),e(oc,I_r),e(rr,q_r),e(rr,c8),e(c8,N_r),e(c8,Dbe),e(Dbe,j_r),e(c8,D_r),e(rr,G_r),e(rr,$t),M(f8,$t,null),e($t,O_r),e($t,Gbe),e(Gbe,V_r),e($t,X_r),e($t,rc),e(rc,z_r),e(rc,Obe),e(Obe,Q_r),e(rc,W_r),e(rc,wW),e(wW,H_r),e(rc,U_r),e($t,J_r),M(jM,$t,null),e(rr,Y_r),e(rr,$r),M(m8,$r,null),e($r,K_r),e($r,Vbe),e(Vbe,Z_r),e($r,e2r),e($r,tn),e(tn,o2r),e(tn,Xbe),e(Xbe,r2r),e(tn,t2r),e(tn,zbe),e(zbe,a2r),e(tn,n2r),e(tn,Qbe),e(Qbe,s2r),e(tn,l2r),e($r,i2r),e($r,ye),e(ye,DM),e(DM,Wbe),e(Wbe,d2r),e(DM,c2r),e(DM,AW),e(AW,f2r),e(DM,m2r),e(ye,g2r),e(ye,GM),e(GM,Hbe),e(Hbe,h2r),e(GM,p2r),e(GM,yW),e(yW,u2r),e(GM,_2r),e(ye,b2r),e(ye,OM),e(OM,Ube),e(Ube,v2r),e(OM,F2r),e(OM,LW),e(LW,T2r),e(OM,M2r),e(ye,E2r),e(ye,VM),e(VM,Jbe),e(Jbe,C2r),e(VM,w2r),e(VM,xW),e(xW,A2r),e(VM,y2r),e(ye,L2r),e(ye,XM),e(XM,Ybe),e(Ybe,x2r),e(XM,$2r),e(XM,$W),e($W,k2r),e(XM,S2r),e(ye,R2r),e(ye,zM),e(zM,Kbe),e(Kbe,B2r),e(zM,P2r),e(zM,kW),e(kW,I2r),e(zM,q2r),e(ye,N2r),e(ye,QM),e(QM,Zbe),e(Zbe,j2r),e(QM,D2r),e(QM,SW),e(SW,G2r),e(QM,O2r),e(ye,V2r),e(ye,WM),e(WM,eve),e(eve,X2r),e(WM,z2r),e(WM,RW),e(RW,Q2r),e(WM,W2r),e(ye,H2r),e(ye,HM),e(HM,ove),e(ove,U2r),e(HM,J2r),e(HM,BW),e(BW,Y2r),e(HM,K2r),e(ye,Z2r),e(ye,UM),e(UM,rve),e(rve,e1r),e(UM,o1r),e(UM,PW),e(PW,r1r),e(UM,t1r),e($r,a1r),M(JM,$r,null),b(f,yqe,_),b(f,tc,_),e(tc,YM),e(YM,tve),M(g8,tve,null),e(tc,n1r),e(tc,ave),e(ave,s1r),b(f,Lqe,_),b(f,tr,_),M(h8,tr,null),e(tr,l1r),e(tr,ac),e(ac,i1r),e(ac,IW),e(IW,d1r),e(ac,c1r),e(ac,qW),e(qW,f1r),e(ac,m1r),e(tr,g1r),e(tr,p8),e(p8,h1r),e(p8,nve),e(nve,p1r),e(p8,u1r),e(tr,_1r),e(tr,kt),M(u8,kt,null),e(kt,b1r),e(kt,sve),e(sve,v1r),e(kt,F1r),e(kt,nc),e(nc,T1r),e(nc,lve),e(lve,M1r),e(nc,E1r),e(nc,NW),e(NW,C1r),e(nc,w1r),e(kt,A1r),M(KM,kt,null),e(tr,y1r),e(tr,kr),M(_8,kr,null),e(kr,L1r),e(kr,ive),e(ive,x1r),e(kr,$1r),e(kr,an),e(an,k1r),e(an,dve),e(dve,S1r),e(an,R1r),e(an,cve),e(cve,B1r),e(an,P1r),e(an,fve),e(fve,I1r),e(an,q1r),e(kr,N1r),e(kr,Z),e(Z,ZM),e(ZM,mve),e(mve,j1r),e(ZM,D1r),e(ZM,jW),e(jW,G1r),e(ZM,O1r),e(Z,V1r),e(Z,e4),e(e4,gve),e(gve,X1r),e(e4,z1r),e(e4,DW),e(DW,Q1r),e(e4,W1r),e(Z,H1r),e(Z,o4),e(o4,hve),e(hve,U1r),e(o4,J1r),e(o4,GW),e(GW,Y1r),e(o4,K1r),e(Z,Z1r),e(Z,r4),e(r4,pve),e(pve,ebr),e(r4,obr),e(r4,OW),e(OW,rbr),e(r4,tbr),e(Z,abr),e(Z,t4),e(t4,uve),e(uve,nbr),e(t4,sbr),e(t4,VW),e(VW,lbr),e(t4,ibr),e(Z,dbr),e(Z,a4),e(a4,_ve),e(_ve,cbr),e(a4,fbr),e(a4,XW),e(XW,mbr),e(a4,gbr),e(Z,hbr),e(Z,n4),e(n4,bve),e(bve,pbr),e(n4,ubr),e(n4,zW),e(zW,_br),e(n4,bbr),e(Z,vbr),e(Z,s4),e(s4,vve),e(vve,Fbr),e(s4,Tbr),e(s4,QW),e(QW,Mbr),e(s4,Ebr),e(Z,Cbr),e(Z,l4),e(l4,Fve),e(Fve,wbr),e(l4,Abr),e(l4,WW),e(WW,ybr),e(l4,Lbr),e(Z,xbr),e(Z,i4),e(i4,Tve),e(Tve,$br),e(i4,kbr),e(i4,HW),e(HW,Sbr),e(i4,Rbr),e(Z,Bbr),e(Z,d4),e(d4,Mve),e(Mve,Pbr),e(d4,Ibr),e(d4,UW),e(UW,qbr),e(d4,Nbr),e(Z,jbr),e(Z,c4),e(c4,Eve),e(Eve,Dbr),e(c4,Gbr),e(c4,JW),e(JW,Obr),e(c4,Vbr),e(Z,Xbr),e(Z,f4),e(f4,Cve),e(Cve,zbr),e(f4,Qbr),e(f4,YW),e(YW,Wbr),e(f4,Hbr),e(Z,Ubr),e(Z,m4),e(m4,wve),e(wve,Jbr),e(m4,Ybr),e(m4,KW),e(KW,Kbr),e(m4,Zbr),e(Z,evr),e(Z,g4),e(g4,Ave),e(Ave,ovr),e(g4,rvr),e(g4,ZW),e(ZW,tvr),e(g4,avr),e(Z,nvr),e(Z,h4),e(h4,yve),e(yve,svr),e(h4,lvr),e(h4,eH),e(eH,ivr),e(h4,dvr),e(Z,cvr),e(Z,p4),e(p4,Lve),e(Lve,fvr),e(p4,mvr),e(p4,oH),e(oH,gvr),e(p4,hvr),e(Z,pvr),e(Z,u4),e(u4,xve),e(xve,uvr),e(u4,_vr),e(u4,rH),e(rH,bvr),e(u4,vvr),e(Z,Fvr),e(Z,_4),e(_4,$ve),e($ve,Tvr),e(_4,Mvr),e(_4,tH),e(tH,Evr),e(_4,Cvr),e(Z,wvr),e(Z,b4),e(b4,kve),e(kve,Avr),e(b4,yvr),e(b4,aH),e(aH,Lvr),e(b4,xvr),e(Z,$vr),e(Z,v4),e(v4,Sve),e(Sve,kvr),e(v4,Svr),e(v4,nH),e(nH,Rvr),e(v4,Bvr),e(Z,Pvr),e(Z,F4),e(F4,Rve),e(Rve,Ivr),e(F4,qvr),e(F4,sH),e(sH,Nvr),e(F4,jvr),e(Z,Dvr),e(Z,T4),e(T4,Bve),e(Bve,Gvr),e(T4,Ovr),e(T4,lH),e(lH,Vvr),e(T4,Xvr),e(Z,zvr),e(Z,M4),e(M4,Pve),e(Pve,Qvr),e(M4,Wvr),e(M4,iH),e(iH,Hvr),e(M4,Uvr),e(Z,Jvr),e(Z,E4),e(E4,Ive),e(Ive,Yvr),e(E4,Kvr),e(E4,dH),e(dH,Zvr),e(E4,eFr),e(Z,oFr),e(Z,C4),e(C4,qve),e(qve,rFr),e(C4,tFr),e(C4,cH),e(cH,aFr),e(C4,nFr),e(kr,sFr),M(w4,kr,null),b(f,xqe,_),b(f,sc,_),e(sc,A4),e(A4,Nve),M(b8,Nve,null),e(sc,lFr),e(sc,jve),e(jve,iFr),b(f,$qe,_),b(f,ar,_),M(v8,ar,null),e(ar,dFr),e(ar,lc),e(lc,cFr),e(lc,fH),e(fH,fFr),e(lc,mFr),e(lc,mH),e(mH,gFr),e(lc,hFr),e(ar,pFr),e(ar,F8),e(F8,uFr),e(F8,Dve),e(Dve,_Fr),e(F8,bFr),e(ar,vFr),e(ar,St),M(T8,St,null),e(St,FFr),e(St,Gve),e(Gve,TFr),e(St,MFr),e(St,ic),e(ic,EFr),e(ic,Ove),e(Ove,CFr),e(ic,wFr),e(ic,gH),e(gH,AFr),e(ic,yFr),e(St,LFr),M(y4,St,null),e(ar,xFr),e(ar,Sr),M(M8,Sr,null),e(Sr,$Fr),e(Sr,Vve),e(Vve,kFr),e(Sr,SFr),e(Sr,nn),e(nn,RFr),e(nn,Xve),e(Xve,BFr),e(nn,PFr),e(nn,zve),e(zve,IFr),e(nn,qFr),e(nn,Qve),e(Qve,NFr),e(nn,jFr),e(Sr,DFr),e(Sr,pe),e(pe,L4),e(L4,Wve),e(Wve,GFr),e(L4,OFr),e(L4,hH),e(hH,VFr),e(L4,XFr),e(pe,zFr),e(pe,x4),e(x4,Hve),e(Hve,QFr),e(x4,WFr),e(x4,pH),e(pH,HFr),e(x4,UFr),e(pe,JFr),e(pe,$4),e($4,Uve),e(Uve,YFr),e($4,KFr),e($4,uH),e(uH,ZFr),e($4,e0r),e(pe,o0r),e(pe,k4),e(k4,Jve),e(Jve,r0r),e(k4,t0r),e(k4,_H),e(_H,a0r),e(k4,n0r),e(pe,s0r),e(pe,S4),e(S4,Yve),e(Yve,l0r),e(S4,i0r),e(S4,bH),e(bH,d0r),e(S4,c0r),e(pe,f0r),e(pe,R4),e(R4,Kve),e(Kve,m0r),e(R4,g0r),e(R4,vH),e(vH,h0r),e(R4,p0r),e(pe,u0r),e(pe,B4),e(B4,Zve),e(Zve,_0r),e(B4,b0r),e(B4,FH),e(FH,v0r),e(B4,F0r),e(pe,T0r),e(pe,P4),e(P4,eFe),e(eFe,M0r),e(P4,E0r),e(P4,TH),e(TH,C0r),e(P4,w0r),e(pe,A0r),e(pe,I4),e(I4,oFe),e(oFe,y0r),e(I4,L0r),e(I4,MH),e(MH,x0r),e(I4,$0r),e(pe,k0r),e(pe,q4),e(q4,rFe),e(rFe,S0r),e(q4,R0r),e(q4,EH),e(EH,B0r),e(q4,P0r),e(pe,I0r),e(pe,N4),e(N4,tFe),e(tFe,q0r),e(N4,N0r),e(N4,CH),e(CH,j0r),e(N4,D0r),e(pe,G0r),e(pe,j4),e(j4,aFe),e(aFe,O0r),e(j4,V0r),e(j4,wH),e(wH,X0r),e(j4,z0r),e(pe,Q0r),e(pe,D4),e(D4,nFe),e(nFe,W0r),e(D4,H0r),e(D4,AH),e(AH,U0r),e(D4,J0r),e(pe,Y0r),e(pe,G4),e(G4,sFe),e(sFe,K0r),e(G4,Z0r),e(G4,yH),e(yH,eTr),e(G4,oTr),e(pe,rTr),e(pe,O4),e(O4,lFe),e(lFe,tTr),e(O4,aTr),e(O4,LH),e(LH,nTr),e(O4,sTr),e(pe,lTr),e(pe,V4),e(V4,iFe),e(iFe,iTr),e(V4,dTr),e(V4,xH),e(xH,cTr),e(V4,fTr),e(pe,mTr),e(pe,X4),e(X4,dFe),e(dFe,gTr),e(X4,hTr),e(X4,$H),e($H,pTr),e(X4,uTr),e(Sr,_Tr),M(z4,Sr,null),b(f,kqe,_),b(f,dc,_),e(dc,Q4),e(Q4,cFe),M(E8,cFe,null),e(dc,bTr),e(dc,fFe),e(fFe,vTr),b(f,Sqe,_),b(f,nr,_),M(C8,nr,null),e(nr,FTr),e(nr,cc),e(cc,TTr),e(cc,kH),e(kH,MTr),e(cc,ETr),e(cc,SH),e(SH,CTr),e(cc,wTr),e(nr,ATr),e(nr,w8),e(w8,yTr),e(w8,mFe),e(mFe,LTr),e(w8,xTr),e(nr,$Tr),e(nr,Rt),M(A8,Rt,null),e(Rt,kTr),e(Rt,gFe),e(gFe,STr),e(Rt,RTr),e(Rt,fc),e(fc,BTr),e(fc,hFe),e(hFe,PTr),e(fc,ITr),e(fc,RH),e(RH,qTr),e(fc,NTr),e(Rt,jTr),M(W4,Rt,null),e(nr,DTr),e(nr,Rr),M(y8,Rr,null),e(Rr,GTr),e(Rr,pFe),e(pFe,OTr),e(Rr,VTr),e(Rr,sn),e(sn,XTr),e(sn,uFe),e(uFe,zTr),e(sn,QTr),e(sn,_Fe),e(_Fe,WTr),e(sn,HTr),e(sn,bFe),e(bFe,UTr),e(sn,JTr),e(Rr,YTr),e(Rr,L8),e(L8,H4),e(H4,vFe),e(vFe,KTr),e(H4,ZTr),e(H4,BH),e(BH,e7r),e(H4,o7r),e(L8,r7r),e(L8,U4),e(U4,FFe),e(FFe,t7r),e(U4,a7r),e(U4,PH),e(PH,n7r),e(U4,s7r),e(Rr,l7r),M(J4,Rr,null),b(f,Rqe,_),b(f,mc,_),e(mc,Y4),e(Y4,TFe),M(x8,TFe,null),e(mc,i7r),e(mc,MFe),e(MFe,d7r),b(f,Bqe,_),b(f,sr,_),M($8,sr,null),e(sr,c7r),e(sr,gc),e(gc,f7r),e(gc,IH),e(IH,m7r),e(gc,g7r),e(gc,qH),e(qH,h7r),e(gc,p7r),e(sr,u7r),e(sr,k8),e(k8,_7r),e(k8,EFe),e(EFe,b7r),e(k8,v7r),e(sr,F7r),e(sr,Bt),M(S8,Bt,null),e(Bt,T7r),e(Bt,CFe),e(CFe,M7r),e(Bt,E7r),e(Bt,hc),e(hc,C7r),e(hc,wFe),e(wFe,w7r),e(hc,A7r),e(hc,NH),e(NH,y7r),e(hc,L7r),e(Bt,x7r),M(K4,Bt,null),e(sr,$7r),e(sr,Br),M(R8,Br,null),e(Br,k7r),e(Br,AFe),e(AFe,S7r),e(Br,R7r),e(Br,ln),e(ln,B7r),e(ln,yFe),e(yFe,P7r),e(ln,I7r),e(ln,LFe),e(LFe,q7r),e(ln,N7r),e(ln,xFe),e(xFe,j7r),e(ln,D7r),e(Br,G7r),e(Br,$Fe),e($Fe,Z4),e(Z4,kFe),e(kFe,O7r),e(Z4,V7r),e(Z4,jH),e(jH,X7r),e(Z4,z7r),e(Br,Q7r),M(eE,Br,null),b(f,Pqe,_),b(f,pc,_),e(pc,oE),e(oE,SFe),M(B8,SFe,null),e(pc,W7r),e(pc,RFe),e(RFe,H7r),b(f,Iqe,_),b(f,lr,_),M(P8,lr,null),e(lr,U7r),e(lr,uc),e(uc,J7r),e(uc,DH),e(DH,Y7r),e(uc,K7r),e(uc,GH),e(GH,Z7r),e(uc,eMr),e(lr,oMr),e(lr,I8),e(I8,rMr),e(I8,BFe),e(BFe,tMr),e(I8,aMr),e(lr,nMr),e(lr,Pt),M(q8,Pt,null),e(Pt,sMr),e(Pt,PFe),e(PFe,lMr),e(Pt,iMr),e(Pt,_c),e(_c,dMr),e(_c,IFe),e(IFe,cMr),e(_c,fMr),e(_c,OH),e(OH,mMr),e(_c,gMr),e(Pt,hMr),M(rE,Pt,null),e(lr,pMr),e(lr,Pr),M(N8,Pr,null),e(Pr,uMr),e(Pr,qFe),e(qFe,_Mr),e(Pr,bMr),e(Pr,dn),e(dn,vMr),e(dn,NFe),e(NFe,FMr),e(dn,TMr),e(dn,jFe),e(jFe,MMr),e(dn,EMr),e(dn,DFe),e(DFe,CMr),e(dn,wMr),e(Pr,AMr),e(Pr,de),e(de,tE),e(tE,GFe),e(GFe,yMr),e(tE,LMr),e(tE,VH),e(VH,xMr),e(tE,$Mr),e(de,kMr),e(de,aE),e(aE,OFe),e(OFe,SMr),e(aE,RMr),e(aE,XH),e(XH,BMr),e(aE,PMr),e(de,IMr),e(de,nE),e(nE,VFe),e(VFe,qMr),e(nE,NMr),e(nE,zH),e(zH,jMr),e(nE,DMr),e(de,GMr),e(de,sE),e(sE,XFe),e(XFe,OMr),e(sE,VMr),e(sE,QH),e(QH,XMr),e(sE,zMr),e(de,QMr),e(de,lE),e(lE,zFe),e(zFe,WMr),e(lE,HMr),e(lE,WH),e(WH,UMr),e(lE,JMr),e(de,YMr),e(de,iE),e(iE,QFe),e(QFe,KMr),e(iE,ZMr),e(iE,HH),e(HH,e4r),e(iE,o4r),e(de,r4r),e(de,dE),e(dE,WFe),e(WFe,t4r),e(dE,a4r),e(dE,UH),e(UH,n4r),e(dE,s4r),e(de,l4r),e(de,cE),e(cE,HFe),e(HFe,i4r),e(cE,d4r),e(cE,JH),e(JH,c4r),e(cE,f4r),e(de,m4r),e(de,fE),e(fE,UFe),e(UFe,g4r),e(fE,h4r),e(fE,YH),e(YH,p4r),e(fE,u4r),e(de,_4r),e(de,mE),e(mE,JFe),e(JFe,b4r),e(mE,v4r),e(mE,KH),e(KH,F4r),e(mE,T4r),e(de,M4r),e(de,gE),e(gE,YFe),e(YFe,E4r),e(gE,C4r),e(gE,ZH),e(ZH,w4r),e(gE,A4r),e(de,y4r),e(de,hE),e(hE,KFe),e(KFe,L4r),e(hE,x4r),e(hE,eU),e(eU,$4r),e(hE,k4r),e(de,S4r),e(de,pE),e(pE,ZFe),e(ZFe,R4r),e(pE,B4r),e(pE,oU),e(oU,P4r),e(pE,I4r),e(de,q4r),e(de,uE),e(uE,e0e),e(e0e,N4r),e(uE,j4r),e(uE,rU),e(rU,D4r),e(uE,G4r),e(de,O4r),e(de,_E),e(_E,o0e),e(o0e,V4r),e(_E,X4r),e(_E,tU),e(tU,z4r),e(_E,Q4r),e(de,W4r),e(de,bE),e(bE,r0e),e(r0e,H4r),e(bE,U4r),e(bE,aU),e(aU,J4r),e(bE,Y4r),e(de,K4r),e(de,vE),e(vE,t0e),e(t0e,Z4r),e(vE,eEr),e(vE,nU),e(nU,oEr),e(vE,rEr),e(de,tEr),e(de,FE),e(FE,a0e),e(a0e,aEr),e(FE,nEr),e(FE,sU),e(sU,sEr),e(FE,lEr),e(de,iEr),e(de,TE),e(TE,n0e),e(n0e,dEr),e(TE,cEr),e(TE,lU),e(lU,fEr),e(TE,mEr),e(de,gEr),e(de,ME),e(ME,s0e),e(s0e,hEr),e(ME,pEr),e(ME,iU),e(iU,uEr),e(ME,_Er),e(Pr,bEr),M(EE,Pr,null),b(f,qqe,_),b(f,bc,_),e(bc,CE),e(CE,l0e),M(j8,l0e,null),e(bc,vEr),e(bc,i0e),e(i0e,FEr),b(f,Nqe,_),b(f,ir,_),M(D8,ir,null),e(ir,TEr),e(ir,vc),e(vc,MEr),e(vc,dU),e(dU,EEr),e(vc,CEr),e(vc,cU),e(cU,wEr),e(vc,AEr),e(ir,yEr),e(ir,G8),e(G8,LEr),e(G8,d0e),e(d0e,xEr),e(G8,$Er),e(ir,kEr),e(ir,It),M(O8,It,null),e(It,SEr),e(It,c0e),e(c0e,REr),e(It,BEr),e(It,Fc),e(Fc,PEr),e(Fc,f0e),e(f0e,IEr),e(Fc,qEr),e(Fc,fU),e(fU,NEr),e(Fc,jEr),e(It,DEr),M(wE,It,null),e(ir,GEr),e(ir,Ir),M(V8,Ir,null),e(Ir,OEr),e(Ir,m0e),e(m0e,VEr),e(Ir,XEr),e(Ir,cn),e(cn,zEr),e(cn,g0e),e(g0e,QEr),e(cn,WEr),e(cn,h0e),e(h0e,HEr),e(cn,UEr),e(cn,p0e),e(p0e,JEr),e(cn,YEr),e(Ir,KEr),e(Ir,ce),e(ce,AE),e(AE,u0e),e(u0e,ZEr),e(AE,e5r),e(AE,mU),e(mU,o5r),e(AE,r5r),e(ce,t5r),e(ce,yE),e(yE,_0e),e(_0e,a5r),e(yE,n5r),e(yE,gU),e(gU,s5r),e(yE,l5r),e(ce,i5r),e(ce,LE),e(LE,b0e),e(b0e,d5r),e(LE,c5r),e(LE,hU),e(hU,f5r),e(LE,m5r),e(ce,g5r),e(ce,xE),e(xE,v0e),e(v0e,h5r),e(xE,p5r),e(xE,pU),e(pU,u5r),e(xE,_5r),e(ce,b5r),e(ce,$E),e($E,F0e),e(F0e,v5r),e($E,F5r),e($E,uU),e(uU,T5r),e($E,M5r),e(ce,E5r),e(ce,kE),e(kE,T0e),e(T0e,C5r),e(kE,w5r),e(kE,_U),e(_U,A5r),e(kE,y5r),e(ce,L5r),e(ce,SE),e(SE,M0e),e(M0e,x5r),e(SE,$5r),e(SE,bU),e(bU,k5r),e(SE,S5r),e(ce,R5r),e(ce,RE),e(RE,E0e),e(E0e,B5r),e(RE,P5r),e(RE,vU),e(vU,I5r),e(RE,q5r),e(ce,N5r),e(ce,BE),e(BE,C0e),e(C0e,j5r),e(BE,D5r),e(BE,FU),e(FU,G5r),e(BE,O5r),e(ce,V5r),e(ce,PE),e(PE,w0e),e(w0e,X5r),e(PE,z5r),e(PE,TU),e(TU,Q5r),e(PE,W5r),e(ce,H5r),e(ce,IE),e(IE,A0e),e(A0e,U5r),e(IE,J5r),e(IE,MU),e(MU,Y5r),e(IE,K5r),e(ce,Z5r),e(ce,qE),e(qE,y0e),e(y0e,eCr),e(qE,oCr),e(qE,EU),e(EU,rCr),e(qE,tCr),e(ce,aCr),e(ce,NE),e(NE,L0e),e(L0e,nCr),e(NE,sCr),e(NE,CU),e(CU,lCr),e(NE,iCr),e(ce,dCr),e(ce,jE),e(jE,x0e),e(x0e,cCr),e(jE,fCr),e(jE,wU),e(wU,mCr),e(jE,gCr),e(ce,hCr),e(ce,DE),e(DE,$0e),e($0e,pCr),e(DE,uCr),e(DE,AU),e(AU,_Cr),e(DE,bCr),e(ce,vCr),e(ce,GE),e(GE,k0e),e(k0e,FCr),e(GE,TCr),e(GE,yU),e(yU,MCr),e(GE,ECr),e(ce,CCr),e(ce,OE),e(OE,S0e),e(S0e,wCr),e(OE,ACr),e(OE,LU),e(LU,yCr),e(OE,LCr),e(ce,xCr),e(ce,VE),e(VE,R0e),e(R0e,$Cr),e(VE,kCr),e(VE,xU),e(xU,SCr),e(VE,RCr),e(ce,BCr),e(ce,XE),e(XE,B0e),e(B0e,PCr),e(XE,ICr),e(XE,$U),e($U,qCr),e(XE,NCr),e(ce,jCr),e(ce,zE),e(zE,P0e),e(P0e,DCr),e(zE,GCr),e(zE,kU),e(kU,OCr),e(zE,VCr),e(Ir,XCr),M(QE,Ir,null),b(f,jqe,_),b(f,Tc,_),e(Tc,WE),e(WE,I0e),M(X8,I0e,null),e(Tc,zCr),e(Tc,q0e),e(q0e,QCr),b(f,Dqe,_),b(f,dr,_),M(z8,dr,null),e(dr,WCr),e(dr,Mc),e(Mc,HCr),e(Mc,SU),e(SU,UCr),e(Mc,JCr),e(Mc,RU),e(RU,YCr),e(Mc,KCr),e(dr,ZCr),e(dr,Q8),e(Q8,e3r),e(Q8,N0e),e(N0e,o3r),e(Q8,r3r),e(dr,t3r),e(dr,qt),M(W8,qt,null),e(qt,a3r),e(qt,j0e),e(j0e,n3r),e(qt,s3r),e(qt,Ec),e(Ec,l3r),e(Ec,D0e),e(D0e,i3r),e(Ec,d3r),e(Ec,BU),e(BU,c3r),e(Ec,f3r),e(qt,m3r),M(HE,qt,null),e(dr,g3r),e(dr,qr),M(H8,qr,null),e(qr,h3r),e(qr,G0e),e(G0e,p3r),e(qr,u3r),e(qr,fn),e(fn,_3r),e(fn,O0e),e(O0e,b3r),e(fn,v3r),e(fn,V0e),e(V0e,F3r),e(fn,T3r),e(fn,X0e),e(X0e,M3r),e(fn,E3r),e(qr,C3r),e(qr,z0e),e(z0e,UE),e(UE,Q0e),e(Q0e,w3r),e(UE,A3r),e(UE,PU),e(PU,y3r),e(UE,L3r),e(qr,x3r),M(JE,qr,null),b(f,Gqe,_),b(f,Cc,_),e(Cc,YE),e(YE,W0e),M(U8,W0e,null),e(Cc,$3r),e(Cc,H0e),e(H0e,k3r),b(f,Oqe,_),b(f,cr,_),M(J8,cr,null),e(cr,S3r),e(cr,wc),e(wc,R3r),e(wc,IU),e(IU,B3r),e(wc,P3r),e(wc,qU),e(qU,I3r),e(wc,q3r),e(cr,N3r),e(cr,Y8),e(Y8,j3r),e(Y8,U0e),e(U0e,D3r),e(Y8,G3r),e(cr,O3r),e(cr,Nt),M(K8,Nt,null),e(Nt,V3r),e(Nt,J0e),e(J0e,X3r),e(Nt,z3r),e(Nt,Ac),e(Ac,Q3r),e(Ac,Y0e),e(Y0e,W3r),e(Ac,H3r),e(Ac,NU),e(NU,U3r),e(Ac,J3r),e(Nt,Y3r),M(KE,Nt,null),e(cr,K3r),e(cr,Nr),M(Z8,Nr,null),e(Nr,Z3r),e(Nr,K0e),e(K0e,ewr),e(Nr,owr),e(Nr,mn),e(mn,rwr),e(mn,Z0e),e(Z0e,twr),e(mn,awr),e(mn,eTe),e(eTe,nwr),e(mn,swr),e(mn,oTe),e(oTe,lwr),e(mn,iwr),e(Nr,dwr),e(Nr,rTe),e(rTe,ZE),e(ZE,tTe),e(tTe,cwr),e(ZE,fwr),e(ZE,jU),e(jU,mwr),e(ZE,gwr),e(Nr,hwr),M(e5,Nr,null),b(f,Vqe,_),b(f,yc,_),e(yc,o5),e(o5,aTe),M(ex,aTe,null),e(yc,pwr),e(yc,nTe),e(nTe,uwr),b(f,Xqe,_),b(f,fr,_),M(ox,fr,null),e(fr,_wr),e(fr,Lc),e(Lc,bwr),e(Lc,DU),e(DU,vwr),e(Lc,Fwr),e(Lc,GU),e(GU,Twr),e(Lc,Mwr),e(fr,Ewr),e(fr,rx),e(rx,Cwr),e(rx,sTe),e(sTe,wwr),e(rx,Awr),e(fr,ywr),e(fr,jt),M(tx,jt,null),e(jt,Lwr),e(jt,lTe),e(lTe,xwr),e(jt,$wr),e(jt,xc),e(xc,kwr),e(xc,iTe),e(iTe,Swr),e(xc,Rwr),e(xc,OU),e(OU,Bwr),e(xc,Pwr),e(jt,Iwr),M(r5,jt,null),e(fr,qwr),e(fr,jr),M(ax,jr,null),e(jr,Nwr),e(jr,dTe),e(dTe,jwr),e(jr,Dwr),e(jr,gn),e(gn,Gwr),e(gn,cTe),e(cTe,Owr),e(gn,Vwr),e(gn,fTe),e(fTe,Xwr),e(gn,zwr),e(gn,mTe),e(mTe,Qwr),e(gn,Wwr),e(jr,Hwr),e(jr,re),e(re,t5),e(t5,gTe),e(gTe,Uwr),e(t5,Jwr),e(t5,VU),e(VU,Ywr),e(t5,Kwr),e(re,Zwr),e(re,a5),e(a5,hTe),e(hTe,e6r),e(a5,o6r),e(a5,XU),e(XU,r6r),e(a5,t6r),e(re,a6r),e(re,n5),e(n5,pTe),e(pTe,n6r),e(n5,s6r),e(n5,zU),e(zU,l6r),e(n5,i6r),e(re,d6r),e(re,s5),e(s5,uTe),e(uTe,c6r),e(s5,f6r),e(s5,QU),e(QU,m6r),e(s5,g6r),e(re,h6r),e(re,l5),e(l5,_Te),e(_Te,p6r),e(l5,u6r),e(l5,WU),e(WU,_6r),e(l5,b6r),e(re,v6r),e(re,i5),e(i5,bTe),e(bTe,F6r),e(i5,T6r),e(i5,HU),e(HU,M6r),e(i5,E6r),e(re,C6r),e(re,d5),e(d5,vTe),e(vTe,w6r),e(d5,A6r),e(d5,UU),e(UU,y6r),e(d5,L6r),e(re,x6r),e(re,c5),e(c5,FTe),e(FTe,$6r),e(c5,k6r),e(c5,JU),e(JU,S6r),e(c5,R6r),e(re,B6r),e(re,f5),e(f5,TTe),e(TTe,P6r),e(f5,I6r),e(f5,YU),e(YU,q6r),e(f5,N6r),e(re,j6r),e(re,m5),e(m5,MTe),e(MTe,D6r),e(m5,G6r),e(m5,KU),e(KU,O6r),e(m5,V6r),e(re,X6r),e(re,g5),e(g5,ETe),e(ETe,z6r),e(g5,Q6r),e(g5,ZU),e(ZU,W6r),e(g5,H6r),e(re,U6r),e(re,h5),e(h5,CTe),e(CTe,J6r),e(h5,Y6r),e(h5,eJ),e(eJ,K6r),e(h5,Z6r),e(re,eAr),e(re,p5),e(p5,wTe),e(wTe,oAr),e(p5,rAr),e(p5,oJ),e(oJ,tAr),e(p5,aAr),e(re,nAr),e(re,u5),e(u5,ATe),e(ATe,sAr),e(u5,lAr),e(u5,rJ),e(rJ,iAr),e(u5,dAr),e(re,cAr),e(re,_5),e(_5,yTe),e(yTe,fAr),e(_5,mAr),e(_5,tJ),e(tJ,gAr),e(_5,hAr),e(re,pAr),e(re,b5),e(b5,LTe),e(LTe,uAr),e(b5,_Ar),e(b5,aJ),e(aJ,bAr),e(b5,vAr),e(re,FAr),e(re,v5),e(v5,xTe),e(xTe,TAr),e(v5,MAr),e(v5,nJ),e(nJ,EAr),e(v5,CAr),e(re,wAr),e(re,F5),e(F5,$Te),e($Te,AAr),e(F5,yAr),e(F5,sJ),e(sJ,LAr),e(F5,xAr),e(re,$Ar),e(re,T5),e(T5,kTe),e(kTe,kAr),e(T5,SAr),e(T5,lJ),e(lJ,RAr),e(T5,BAr),e(re,PAr),e(re,M5),e(M5,STe),e(STe,IAr),e(M5,qAr),e(M5,iJ),e(iJ,NAr),e(M5,jAr),e(re,DAr),e(re,E5),e(E5,RTe),e(RTe,GAr),e(E5,OAr),e(E5,dJ),e(dJ,VAr),e(E5,XAr),e(re,zAr),e(re,C5),e(C5,BTe),e(BTe,QAr),e(C5,WAr),e(C5,cJ),e(cJ,HAr),e(C5,UAr),e(re,JAr),e(re,w5),e(w5,PTe),e(PTe,YAr),e(w5,KAr),e(w5,fJ),e(fJ,ZAr),e(w5,eyr),e(re,oyr),e(re,A5),e(A5,ITe),e(ITe,ryr),e(A5,tyr),e(A5,mJ),e(mJ,ayr),e(A5,nyr),e(re,syr),e(re,y5),e(y5,qTe),e(qTe,lyr),e(y5,iyr),e(y5,gJ),e(gJ,dyr),e(y5,cyr),e(jr,fyr),M(L5,jr,null),b(f,zqe,_),b(f,$c,_),e($c,x5),e(x5,NTe),M(nx,NTe,null),e($c,myr),e($c,jTe),e(jTe,gyr),b(f,Qqe,_),b(f,mr,_),M(sx,mr,null),e(mr,hyr),e(mr,kc),e(kc,pyr),e(kc,hJ),e(hJ,uyr),e(kc,_yr),e(kc,pJ),e(pJ,byr),e(kc,vyr),e(mr,Fyr),e(mr,lx),e(lx,Tyr),e(lx,DTe),e(DTe,Myr),e(lx,Eyr),e(mr,Cyr),e(mr,Dt),M(ix,Dt,null),e(Dt,wyr),e(Dt,GTe),e(GTe,Ayr),e(Dt,yyr),e(Dt,Sc),e(Sc,Lyr),e(Sc,OTe),e(OTe,xyr),e(Sc,$yr),e(Sc,uJ),e(uJ,kyr),e(Sc,Syr),e(Dt,Ryr),M($5,Dt,null),e(mr,Byr),e(mr,Dr),M(dx,Dr,null),e(Dr,Pyr),e(Dr,VTe),e(VTe,Iyr),e(Dr,qyr),e(Dr,hn),e(hn,Nyr),e(hn,XTe),e(XTe,jyr),e(hn,Dyr),e(hn,zTe),e(zTe,Gyr),e(hn,Oyr),e(hn,QTe),e(QTe,Vyr),e(hn,Xyr),e(Dr,zyr),e(Dr,ke),e(ke,k5),e(k5,WTe),e(WTe,Qyr),e(k5,Wyr),e(k5,_J),e(_J,Hyr),e(k5,Uyr),e(ke,Jyr),e(ke,S5),e(S5,HTe),e(HTe,Yyr),e(S5,Kyr),e(S5,bJ),e(bJ,Zyr),e(S5,eLr),e(ke,oLr),e(ke,R5),e(R5,UTe),e(UTe,rLr),e(R5,tLr),e(R5,vJ),e(vJ,aLr),e(R5,nLr),e(ke,sLr),e(ke,B5),e(B5,JTe),e(JTe,lLr),e(B5,iLr),e(B5,FJ),e(FJ,dLr),e(B5,cLr),e(ke,fLr),e(ke,P5),e(P5,YTe),e(YTe,mLr),e(P5,gLr),e(P5,TJ),e(TJ,hLr),e(P5,pLr),e(ke,uLr),e(ke,I5),e(I5,KTe),e(KTe,_Lr),e(I5,bLr),e(I5,MJ),e(MJ,vLr),e(I5,FLr),e(ke,TLr),e(ke,q5),e(q5,ZTe),e(ZTe,MLr),e(q5,ELr),e(q5,EJ),e(EJ,CLr),e(q5,wLr),e(ke,ALr),e(ke,N5),e(N5,e7e),e(e7e,yLr),e(N5,LLr),e(N5,CJ),e(CJ,xLr),e(N5,$Lr),e(ke,kLr),e(ke,j5),e(j5,o7e),e(o7e,SLr),e(j5,RLr),e(j5,wJ),e(wJ,BLr),e(j5,PLr),e(Dr,ILr),M(D5,Dr,null),b(f,Wqe,_),b(f,Rc,_),e(Rc,G5),e(G5,r7e),M(cx,r7e,null),e(Rc,qLr),e(Rc,t7e),e(t7e,NLr),b(f,Hqe,_),b(f,gr,_),M(fx,gr,null),e(gr,jLr),e(gr,Bc),e(Bc,DLr),e(Bc,AJ),e(AJ,GLr),e(Bc,OLr),e(Bc,yJ),e(yJ,VLr),e(Bc,XLr),e(gr,zLr),e(gr,mx),e(mx,QLr),e(mx,a7e),e(a7e,WLr),e(mx,HLr),e(gr,ULr),e(gr,Gt),M(gx,Gt,null),e(Gt,JLr),e(Gt,n7e),e(n7e,YLr),e(Gt,KLr),e(Gt,Pc),e(Pc,ZLr),e(Pc,s7e),e(s7e,e8r),e(Pc,o8r),e(Pc,LJ),e(LJ,r8r),e(Pc,t8r),e(Gt,a8r),M(O5,Gt,null),e(gr,n8r),e(gr,Gr),M(hx,Gr,null),e(Gr,s8r),e(Gr,l7e),e(l7e,l8r),e(Gr,i8r),e(Gr,pn),e(pn,d8r),e(pn,i7e),e(i7e,c8r),e(pn,f8r),e(pn,d7e),e(d7e,m8r),e(pn,g8r),e(pn,c7e),e(c7e,h8r),e(pn,p8r),e(Gr,u8r),e(Gr,Me),e(Me,V5),e(V5,f7e),e(f7e,_8r),e(V5,b8r),e(V5,xJ),e(xJ,v8r),e(V5,F8r),e(Me,T8r),e(Me,X5),e(X5,m7e),e(m7e,M8r),e(X5,E8r),e(X5,$J),e($J,C8r),e(X5,w8r),e(Me,A8r),e(Me,z5),e(z5,g7e),e(g7e,y8r),e(z5,L8r),e(z5,kJ),e(kJ,x8r),e(z5,$8r),e(Me,k8r),e(Me,Q5),e(Q5,h7e),e(h7e,S8r),e(Q5,R8r),e(Q5,SJ),e(SJ,B8r),e(Q5,P8r),e(Me,I8r),e(Me,W5),e(W5,p7e),e(p7e,q8r),e(W5,N8r),e(W5,RJ),e(RJ,j8r),e(W5,D8r),e(Me,G8r),e(Me,H5),e(H5,u7e),e(u7e,O8r),e(H5,V8r),e(H5,BJ),e(BJ,X8r),e(H5,z8r),e(Me,Q8r),e(Me,U5),e(U5,_7e),e(_7e,W8r),e(U5,H8r),e(U5,PJ),e(PJ,U8r),e(U5,J8r),e(Me,Y8r),e(Me,J5),e(J5,b7e),e(b7e,K8r),e(J5,Z8r),e(J5,IJ),e(IJ,exr),e(J5,oxr),e(Me,rxr),e(Me,Y5),e(Y5,v7e),e(v7e,txr),e(Y5,axr),e(Y5,qJ),e(qJ,nxr),e(Y5,sxr),e(Me,lxr),e(Me,K5),e(K5,F7e),e(F7e,ixr),e(K5,dxr),e(K5,NJ),e(NJ,cxr),e(K5,fxr),e(Me,mxr),e(Me,Z5),e(Z5,T7e),e(T7e,gxr),e(Z5,hxr),e(Z5,jJ),e(jJ,pxr),e(Z5,uxr),e(Me,_xr),e(Me,eC),e(eC,M7e),e(M7e,bxr),e(eC,vxr),e(eC,DJ),e(DJ,Fxr),e(eC,Txr),e(Gr,Mxr),M(oC,Gr,null),b(f,Uqe,_),b(f,Ic,_),e(Ic,rC),e(rC,E7e),M(px,E7e,null),e(Ic,Exr),e(Ic,C7e),e(C7e,Cxr),b(f,Jqe,_),b(f,hr,_),M(ux,hr,null),e(hr,wxr),e(hr,qc),e(qc,Axr),e(qc,GJ),e(GJ,yxr),e(qc,Lxr),e(qc,OJ),e(OJ,xxr),e(qc,$xr),e(hr,kxr),e(hr,_x),e(_x,Sxr),e(_x,w7e),e(w7e,Rxr),e(_x,Bxr),e(hr,Pxr),e(hr,Ot),M(bx,Ot,null),e(Ot,Ixr),e(Ot,A7e),e(A7e,qxr),e(Ot,Nxr),e(Ot,Nc),e(Nc,jxr),e(Nc,y7e),e(y7e,Dxr),e(Nc,Gxr),e(Nc,VJ),e(VJ,Oxr),e(Nc,Vxr),e(Ot,Xxr),M(tC,Ot,null),e(hr,zxr),e(hr,Or),M(vx,Or,null),e(Or,Qxr),e(Or,L7e),e(L7e,Wxr),e(Or,Hxr),e(Or,un),e(un,Uxr),e(un,x7e),e(x7e,Jxr),e(un,Yxr),e(un,$7e),e($7e,Kxr),e(un,Zxr),e(un,k7e),e(k7e,e9r),e(un,o9r),e(Or,r9r),e(Or,Le),e(Le,aC),e(aC,S7e),e(S7e,t9r),e(aC,a9r),e(aC,XJ),e(XJ,n9r),e(aC,s9r),e(Le,l9r),e(Le,nC),e(nC,R7e),e(R7e,i9r),e(nC,d9r),e(nC,zJ),e(zJ,c9r),e(nC,f9r),e(Le,m9r),e(Le,sC),e(sC,B7e),e(B7e,g9r),e(sC,h9r),e(sC,QJ),e(QJ,p9r),e(sC,u9r),e(Le,_9r),e(Le,lC),e(lC,P7e),e(P7e,b9r),e(lC,v9r),e(lC,WJ),e(WJ,F9r),e(lC,T9r),e(Le,M9r),e(Le,iC),e(iC,I7e),e(I7e,E9r),e(iC,C9r),e(iC,HJ),e(HJ,w9r),e(iC,A9r),e(Le,y9r),e(Le,dC),e(dC,q7e),e(q7e,L9r),e(dC,x9r),e(dC,UJ),e(UJ,$9r),e(dC,k9r),e(Le,S9r),e(Le,cC),e(cC,N7e),e(N7e,R9r),e(cC,B9r),e(cC,JJ),e(JJ,P9r),e(cC,I9r),e(Le,q9r),e(Le,fC),e(fC,j7e),e(j7e,N9r),e(fC,j9r),e(fC,YJ),e(YJ,D9r),e(fC,G9r),e(Le,O9r),e(Le,mC),e(mC,D7e),e(D7e,V9r),e(mC,X9r),e(mC,KJ),e(KJ,z9r),e(mC,Q9r),e(Le,W9r),e(Le,gC),e(gC,G7e),e(G7e,H9r),e(gC,U9r),e(gC,ZJ),e(ZJ,J9r),e(gC,Y9r),e(Or,K9r),M(hC,Or,null),b(f,Yqe,_),b(f,jc,_),e(jc,pC),e(pC,O7e),M(Fx,O7e,null),e(jc,Z9r),e(jc,V7e),e(V7e,e$r),b(f,Kqe,_),b(f,pr,_),M(Tx,pr,null),e(pr,o$r),e(pr,Dc),e(Dc,r$r),e(Dc,eY),e(eY,t$r),e(Dc,a$r),e(Dc,oY),e(oY,n$r),e(Dc,s$r),e(pr,l$r),e(pr,Mx),e(Mx,i$r),e(Mx,X7e),e(X7e,d$r),e(Mx,c$r),e(pr,f$r),e(pr,Vt),M(Ex,Vt,null),e(Vt,m$r),e(Vt,z7e),e(z7e,g$r),e(Vt,h$r),e(Vt,Gc),e(Gc,p$r),e(Gc,Q7e),e(Q7e,u$r),e(Gc,_$r),e(Gc,rY),e(rY,b$r),e(Gc,v$r),e(Vt,F$r),M(uC,Vt,null),e(pr,T$r),e(pr,Vr),M(Cx,Vr,null),e(Vr,M$r),e(Vr,W7e),e(W7e,E$r),e(Vr,C$r),e(Vr,_n),e(_n,w$r),e(_n,H7e),e(H7e,A$r),e(_n,y$r),e(_n,U7e),e(U7e,L$r),e(_n,x$r),e(_n,J7e),e(J7e,$$r),e(_n,k$r),e(Vr,S$r),e(Vr,Se),e(Se,_C),e(_C,Y7e),e(Y7e,R$r),e(_C,B$r),e(_C,tY),e(tY,P$r),e(_C,I$r),e(Se,q$r),e(Se,bC),e(bC,K7e),e(K7e,N$r),e(bC,j$r),e(bC,aY),e(aY,D$r),e(bC,G$r),e(Se,O$r),e(Se,vC),e(vC,Z7e),e(Z7e,V$r),e(vC,X$r),e(vC,nY),e(nY,z$r),e(vC,Q$r),e(Se,W$r),e(Se,FC),e(FC,eMe),e(eMe,H$r),e(FC,U$r),e(FC,sY),e(sY,J$r),e(FC,Y$r),e(Se,K$r),e(Se,TC),e(TC,oMe),e(oMe,Z$r),e(TC,ekr),e(TC,lY),e(lY,okr),e(TC,rkr),e(Se,tkr),e(Se,MC),e(MC,rMe),e(rMe,akr),e(MC,nkr),e(MC,iY),e(iY,skr),e(MC,lkr),e(Se,ikr),e(Se,EC),e(EC,tMe),e(tMe,dkr),e(EC,ckr),e(EC,dY),e(dY,fkr),e(EC,mkr),e(Se,gkr),e(Se,CC),e(CC,aMe),e(aMe,hkr),e(CC,pkr),e(CC,cY),e(cY,ukr),e(CC,_kr),e(Se,bkr),e(Se,wC),e(wC,nMe),e(nMe,vkr),e(wC,Fkr),e(wC,fY),e(fY,Tkr),e(wC,Mkr),e(Vr,Ekr),M(AC,Vr,null),b(f,Zqe,_),b(f,Oc,_),e(Oc,yC),e(yC,sMe),M(wx,sMe,null),e(Oc,Ckr),e(Oc,lMe),e(lMe,wkr),b(f,eNe,_),b(f,ur,_),M(Ax,ur,null),e(ur,Akr),e(ur,Vc),e(Vc,ykr),e(Vc,mY),e(mY,Lkr),e(Vc,xkr),e(Vc,gY),e(gY,$kr),e(Vc,kkr),e(ur,Skr),e(ur,yx),e(yx,Rkr),e(yx,iMe),e(iMe,Bkr),e(yx,Pkr),e(ur,Ikr),e(ur,Xt),M(Lx,Xt,null),e(Xt,qkr),e(Xt,dMe),e(dMe,Nkr),e(Xt,jkr),e(Xt,Xc),e(Xc,Dkr),e(Xc,cMe),e(cMe,Gkr),e(Xc,Okr),e(Xc,hY),e(hY,Vkr),e(Xc,Xkr),e(Xt,zkr),M(LC,Xt,null),e(ur,Qkr),e(ur,Xr),M(xx,Xr,null),e(Xr,Wkr),e(Xr,fMe),e(fMe,Hkr),e(Xr,Ukr),e(Xr,bn),e(bn,Jkr),e(bn,mMe),e(mMe,Ykr),e(bn,Kkr),e(bn,gMe),e(gMe,Zkr),e(bn,eSr),e(bn,hMe),e(hMe,oSr),e(bn,rSr),e(Xr,tSr),e(Xr,xe),e(xe,xC),e(xC,pMe),e(pMe,aSr),e(xC,nSr),e(xC,pY),e(pY,sSr),e(xC,lSr),e(xe,iSr),e(xe,$C),e($C,uMe),e(uMe,dSr),e($C,cSr),e($C,uY),e(uY,fSr),e($C,mSr),e(xe,gSr),e(xe,kC),e(kC,_Me),e(_Me,hSr),e(kC,pSr),e(kC,_Y),e(_Y,uSr),e(kC,_Sr),e(xe,bSr),e(xe,SC),e(SC,bMe),e(bMe,vSr),e(SC,FSr),e(SC,bY),e(bY,TSr),e(SC,MSr),e(xe,ESr),e(xe,RC),e(RC,vMe),e(vMe,CSr),e(RC,wSr),e(RC,vY),e(vY,ASr),e(RC,ySr),e(xe,LSr),e(xe,BC),e(BC,FMe),e(FMe,xSr),e(BC,$Sr),e(BC,FY),e(FY,kSr),e(BC,SSr),e(xe,RSr),e(xe,PC),e(PC,TMe),e(TMe,BSr),e(PC,PSr),e(PC,TY),e(TY,ISr),e(PC,qSr),e(xe,NSr),e(xe,IC),e(IC,MMe),e(MMe,jSr),e(IC,DSr),e(IC,MY),e(MY,GSr),e(IC,OSr),e(xe,VSr),e(xe,qC),e(qC,EMe),e(EMe,XSr),e(qC,zSr),e(qC,EY),e(EY,QSr),e(qC,WSr),e(xe,HSr),e(xe,NC),e(NC,CMe),e(CMe,USr),e(NC,JSr),e(NC,CY),e(CY,YSr),e(NC,KSr),e(Xr,ZSr),M(jC,Xr,null),b(f,oNe,_),b(f,zc,_),e(zc,DC),e(DC,wMe),M($x,wMe,null),e(zc,eRr),e(zc,AMe),e(AMe,oRr),b(f,rNe,_),b(f,_r,_),M(kx,_r,null),e(_r,rRr),e(_r,Qc),e(Qc,tRr),e(Qc,wY),e(wY,aRr),e(Qc,nRr),e(Qc,AY),e(AY,sRr),e(Qc,lRr),e(_r,iRr),e(_r,Sx),e(Sx,dRr),e(Sx,yMe),e(yMe,cRr),e(Sx,fRr),e(_r,mRr),e(_r,zt),M(Rx,zt,null),e(zt,gRr),e(zt,LMe),e(LMe,hRr),e(zt,pRr),e(zt,Wc),e(Wc,uRr),e(Wc,xMe),e(xMe,_Rr),e(Wc,bRr),e(Wc,yY),e(yY,vRr),e(Wc,FRr),e(zt,TRr),M(GC,zt,null),e(_r,MRr),e(_r,zr),M(Bx,zr,null),e(zr,ERr),e(zr,$Me),e($Me,CRr),e(zr,wRr),e(zr,vn),e(vn,ARr),e(vn,kMe),e(kMe,yRr),e(vn,LRr),e(vn,SMe),e(SMe,xRr),e(vn,$Rr),e(vn,RMe),e(RMe,kRr),e(vn,SRr),e(zr,RRr),e(zr,$e),e($e,OC),e(OC,BMe),e(BMe,BRr),e(OC,PRr),e(OC,LY),e(LY,IRr),e(OC,qRr),e($e,NRr),e($e,VC),e(VC,PMe),e(PMe,jRr),e(VC,DRr),e(VC,xY),e(xY,GRr),e(VC,ORr),e($e,VRr),e($e,XC),e(XC,IMe),e(IMe,XRr),e(XC,zRr),e(XC,$Y),e($Y,QRr),e(XC,WRr),e($e,HRr),e($e,zC),e(zC,qMe),e(qMe,URr),e(zC,JRr),e(zC,kY),e(kY,YRr),e(zC,KRr),e($e,ZRr),e($e,QC),e(QC,NMe),e(NMe,eBr),e(QC,oBr),e(QC,SY),e(SY,rBr),e(QC,tBr),e($e,aBr),e($e,WC),e(WC,jMe),e(jMe,nBr),e(WC,sBr),e(WC,RY),e(RY,lBr),e(WC,iBr),e($e,dBr),e($e,HC),e(HC,DMe),e(DMe,cBr),e(HC,fBr),e(HC,BY),e(BY,mBr),e(HC,gBr),e($e,hBr),e($e,UC),e(UC,GMe),e(GMe,pBr),e(UC,uBr),e(UC,PY),e(PY,_Br),e(UC,bBr),e($e,vBr),e($e,JC),e(JC,OMe),e(OMe,FBr),e(JC,TBr),e(JC,IY),e(IY,MBr),e(JC,EBr),e($e,CBr),e($e,YC),e(YC,VMe),e(VMe,wBr),e(YC,ABr),e(YC,qY),e(qY,yBr),e(YC,LBr),e(zr,xBr),M(KC,zr,null),b(f,tNe,_),b(f,Hc,_),e(Hc,ZC),e(ZC,XMe),M(Px,XMe,null),e(Hc,$Br),e(Hc,zMe),e(zMe,kBr),b(f,aNe,_),b(f,br,_),M(Ix,br,null),e(br,SBr),e(br,Uc),e(Uc,RBr),e(Uc,NY),e(NY,BBr),e(Uc,PBr),e(Uc,jY),e(jY,IBr),e(Uc,qBr),e(br,NBr),e(br,qx),e(qx,jBr),e(qx,QMe),e(QMe,DBr),e(qx,GBr),e(br,OBr),e(br,Qt),M(Nx,Qt,null),e(Qt,VBr),e(Qt,WMe),e(WMe,XBr),e(Qt,zBr),e(Qt,Jc),e(Jc,QBr),e(Jc,HMe),e(HMe,WBr),e(Jc,HBr),e(Jc,DY),e(DY,UBr),e(Jc,JBr),e(Qt,YBr),M(e3,Qt,null),e(br,KBr),e(br,Qr),M(jx,Qr,null),e(Qr,ZBr),e(Qr,UMe),e(UMe,ePr),e(Qr,oPr),e(Qr,Fn),e(Fn,rPr),e(Fn,JMe),e(JMe,tPr),e(Fn,aPr),e(Fn,YMe),e(YMe,nPr),e(Fn,sPr),e(Fn,KMe),e(KMe,lPr),e(Fn,iPr),e(Qr,dPr),e(Qr,De),e(De,o3),e(o3,ZMe),e(ZMe,cPr),e(o3,fPr),e(o3,GY),e(GY,mPr),e(o3,gPr),e(De,hPr),e(De,r3),e(r3,e4e),e(e4e,pPr),e(r3,uPr),e(r3,OY),e(OY,_Pr),e(r3,bPr),e(De,vPr),e(De,t3),e(t3,o4e),e(o4e,FPr),e(t3,TPr),e(t3,VY),e(VY,MPr),e(t3,EPr),e(De,CPr),e(De,a3),e(a3,r4e),e(r4e,wPr),e(a3,APr),e(a3,XY),e(XY,yPr),e(a3,LPr),e(De,xPr),e(De,n3),e(n3,t4e),e(t4e,$Pr),e(n3,kPr),e(n3,zY),e(zY,SPr),e(n3,RPr),e(De,BPr),e(De,s3),e(s3,a4e),e(a4e,PPr),e(s3,IPr),e(s3,QY),e(QY,qPr),e(s3,NPr),e(De,jPr),e(De,l3),e(l3,n4e),e(n4e,DPr),e(l3,GPr),e(l3,WY),e(WY,OPr),e(l3,VPr),e(De,XPr),e(De,i3),e(i3,s4e),e(s4e,zPr),e(i3,QPr),e(i3,HY),e(HY,WPr),e(i3,HPr),e(Qr,UPr),M(d3,Qr,null),b(f,nNe,_),b(f,Yc,_),e(Yc,c3),e(c3,l4e),M(Dx,l4e,null),e(Yc,JPr),e(Yc,i4e),e(i4e,YPr),b(f,sNe,_),b(f,vr,_),M(Gx,vr,null),e(vr,KPr),e(vr,Kc),e(Kc,ZPr),e(Kc,UY),e(UY,eIr),e(Kc,oIr),e(Kc,JY),e(JY,rIr),e(Kc,tIr),e(vr,aIr),e(vr,Ox),e(Ox,nIr),e(Ox,d4e),e(d4e,sIr),e(Ox,lIr),e(vr,iIr),e(vr,Wt),M(Vx,Wt,null),e(Wt,dIr),e(Wt,c4e),e(c4e,cIr),e(Wt,fIr),e(Wt,Zc),e(Zc,mIr),e(Zc,f4e),e(f4e,gIr),e(Zc,hIr),e(Zc,YY),e(YY,pIr),e(Zc,uIr),e(Wt,_Ir),M(f3,Wt,null),e(vr,bIr),e(vr,Wr),M(Xx,Wr,null),e(Wr,vIr),e(Wr,m4e),e(m4e,FIr),e(Wr,TIr),e(Wr,Tn),e(Tn,MIr),e(Tn,g4e),e(g4e,EIr),e(Tn,CIr),e(Tn,h4e),e(h4e,wIr),e(Tn,AIr),e(Tn,p4e),e(p4e,yIr),e(Tn,LIr),e(Wr,xIr),e(Wr,Ge),e(Ge,m3),e(m3,u4e),e(u4e,$Ir),e(m3,kIr),e(m3,KY),e(KY,SIr),e(m3,RIr),e(Ge,BIr),e(Ge,g3),e(g3,_4e),e(_4e,PIr),e(g3,IIr),e(g3,ZY),e(ZY,qIr),e(g3,NIr),e(Ge,jIr),e(Ge,h3),e(h3,b4e),e(b4e,DIr),e(h3,GIr),e(h3,eK),e(eK,OIr),e(h3,VIr),e(Ge,XIr),e(Ge,p3),e(p3,v4e),e(v4e,zIr),e(p3,QIr),e(p3,oK),e(oK,WIr),e(p3,HIr),e(Ge,UIr),e(Ge,u3),e(u3,F4e),e(F4e,JIr),e(u3,YIr),e(u3,rK),e(rK,KIr),e(u3,ZIr),e(Ge,eqr),e(Ge,_3),e(_3,T4e),e(T4e,oqr),e(_3,rqr),e(_3,tK),e(tK,tqr),e(_3,aqr),e(Ge,nqr),e(Ge,b3),e(b3,M4e),e(M4e,sqr),e(b3,lqr),e(b3,aK),e(aK,iqr),e(b3,dqr),e(Ge,cqr),e(Ge,v3),e(v3,E4e),e(E4e,fqr),e(v3,mqr),e(v3,nK),e(nK,gqr),e(v3,hqr),e(Wr,pqr),M(F3,Wr,null),b(f,lNe,_),b(f,ef,_),e(ef,T3),e(T3,C4e),M(zx,C4e,null),e(ef,uqr),e(ef,w4e),e(w4e,_qr),b(f,iNe,_),b(f,Fr,_),M(Qx,Fr,null),e(Fr,bqr),e(Fr,of),e(of,vqr),e(of,sK),e(sK,Fqr),e(of,Tqr),e(of,lK),e(lK,Mqr),e(of,Eqr),e(Fr,Cqr),e(Fr,Wx),e(Wx,wqr),e(Wx,A4e),e(A4e,Aqr),e(Wx,yqr),e(Fr,Lqr),e(Fr,Ht),M(Hx,Ht,null),e(Ht,xqr),e(Ht,y4e),e(y4e,$qr),e(Ht,kqr),e(Ht,rf),e(rf,Sqr),e(rf,L4e),e(L4e,Rqr),e(rf,Bqr),e(rf,iK),e(iK,Pqr),e(rf,Iqr),e(Ht,qqr),M(M3,Ht,null),e(Fr,Nqr),e(Fr,Hr),M(Ux,Hr,null),e(Hr,jqr),e(Hr,x4e),e(x4e,Dqr),e(Hr,Gqr),e(Hr,Mn),e(Mn,Oqr),e(Mn,$4e),e($4e,Vqr),e(Mn,Xqr),e(Mn,k4e),e(k4e,zqr),e(Mn,Qqr),e(Mn,S4e),e(S4e,Wqr),e(Mn,Hqr),e(Hr,Uqr),e(Hr,R4e),e(R4e,E3),e(E3,B4e),e(B4e,Jqr),e(E3,Yqr),e(E3,dK),e(dK,Kqr),e(E3,Zqr),e(Hr,eNr),M(C3,Hr,null),b(f,dNe,_),b(f,tf,_),e(tf,w3),e(w3,P4e),M(Jx,P4e,null),e(tf,oNr),e(tf,I4e),e(I4e,rNr),b(f,cNe,_),b(f,Tr,_),M(Yx,Tr,null),e(Tr,tNr),e(Tr,af),e(af,aNr),e(af,cK),e(cK,nNr),e(af,sNr),e(af,fK),e(fK,lNr),e(af,iNr),e(Tr,dNr),e(Tr,Kx),e(Kx,cNr),e(Kx,q4e),e(q4e,fNr),e(Kx,mNr),e(Tr,gNr),e(Tr,Ut),M(Zx,Ut,null),e(Ut,hNr),e(Ut,N4e),e(N4e,pNr),e(Ut,uNr),e(Ut,nf),e(nf,_Nr),e(nf,j4e),e(j4e,bNr),e(nf,vNr),e(nf,mK),e(mK,FNr),e(nf,TNr),e(Ut,MNr),M(A3,Ut,null),e(Tr,ENr),e(Tr,Ur),M(e9,Ur,null),e(Ur,CNr),e(Ur,D4e),e(D4e,wNr),e(Ur,ANr),e(Ur,En),e(En,yNr),e(En,G4e),e(G4e,LNr),e(En,xNr),e(En,O4e),e(O4e,$Nr),e(En,kNr),e(En,V4e),e(V4e,SNr),e(En,RNr),e(Ur,BNr),e(Ur,o9),e(o9,y3),e(y3,X4e),e(X4e,PNr),e(y3,INr),e(y3,gK),e(gK,qNr),e(y3,NNr),e(o9,jNr),e(o9,L3),e(L3,z4e),e(z4e,DNr),e(L3,GNr),e(L3,hK),e(hK,ONr),e(L3,VNr),e(Ur,XNr),M(x3,Ur,null),b(f,fNe,_),b(f,sf,_),e(sf,$3),e($3,Q4e),M(r9,Q4e,null),e(sf,zNr),e(sf,W4e),e(W4e,QNr),b(f,mNe,_),b(f,Mr,_),M(t9,Mr,null),e(Mr,WNr),e(Mr,lf),e(lf,HNr),e(lf,pK),e(pK,UNr),e(lf,JNr),e(lf,uK),e(uK,YNr),e(lf,KNr),e(Mr,ZNr),e(Mr,a9),e(a9,ejr),e(a9,H4e),e(H4e,ojr),e(a9,rjr),e(Mr,tjr),e(Mr,Jt),M(n9,Jt,null),e(Jt,ajr),e(Jt,U4e),e(U4e,njr),e(Jt,sjr),e(Jt,df),e(df,ljr),e(df,J4e),e(J4e,ijr),e(df,djr),e(df,_K),e(_K,cjr),e(df,fjr),e(Jt,mjr),M(k3,Jt,null),e(Mr,gjr),e(Mr,Jr),M(s9,Jr,null),e(Jr,hjr),e(Jr,Y4e),e(Y4e,pjr),e(Jr,ujr),e(Jr,Cn),e(Cn,_jr),e(Cn,K4e),e(K4e,bjr),e(Cn,vjr),e(Cn,Z4e),e(Z4e,Fjr),e(Cn,Tjr),e(Cn,eEe),e(eEe,Mjr),e(Cn,Ejr),e(Jr,Cjr),e(Jr,oEe),e(oEe,S3),e(S3,rEe),e(rEe,wjr),e(S3,Ajr),e(S3,bK),e(bK,yjr),e(S3,Ljr),e(Jr,xjr),M(R3,Jr,null),gNe=!0},p(f,[_]){const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),bf.$set(l9);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),bg.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),Yg.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),wh.$set(nEe);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),Ah.$set(i9);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),Xh.$set(sEe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),zh.$set(wn);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),Hh.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),ju.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),Gu.$set(dEe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),$_.$set(d9);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),S_.$set(cEe);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),_2.$set(c9);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),v2.$set(fEe);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),r1.$set(f9);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),a1.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),E1.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),w1.$set(hEe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Fb.$set(cf);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),Mb.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),Zb.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),ov.$set(_Ee);const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),iv.$set(m9);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),cv.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),zv.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Wv.$set(FEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),BF.$set(Kr);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),IF.$set(g9);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),jF.$set(TEe);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),GF.$set(h9);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),e0.$set(MEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),r0.$set(Zr);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),n0.$set(EEe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),l0.$set(ff);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),_0.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),v0.$set(wEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),w0.$set(y);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),y0.$set(B3);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),q0.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),j0.$set(yEe);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),V0.$set(P3);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),z0.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),Y0.$set(xEe);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),Z0.$set(I3);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),aT.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),sT.$set(kEe);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),cT.$set(q3);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),mT.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),pT.$set(REe);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),_T.$set(N3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),ET.$set(BEe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),wT.$set(PEe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),LT.$set(j3);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),$T.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),T7.$set(qEe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),E7.$set(D3);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),W7.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),U7.$set(jEe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),iM.$set(G3);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),cM.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),hM.$set(GEe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),uM.$set(O3);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),qM.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),jM.$set(VEe);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),JM.$set(V3);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),KM.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),w4.$set(zEe);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),y4.$set(X3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),z4.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),W4.$set(WEe);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),J4.$set(z3);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),K4.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),eE.$set(UEe);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),rE.$set(Q3);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),EE.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),wE.$set(YEe);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),QE.$set(W3);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),HE.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),JE.$set(ZEe);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),KE.$set(H3);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),e5.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),r5.$set(o5e);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),L5.$set(U3);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),$5.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),D5.$set(t5e);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),O5.$set(J3);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),oC.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),tC.$set(n5e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),hC.$set(Y3);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),uC.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),AC.$set(l5e);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),LC.$set(K3);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),jC.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),GC.$set(d5e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),KC.$set(Z3);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),e3.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),d3.$set(f5e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),f3.$set(ew);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),F3.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),M3.$set(g5e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),C3.$set(ow);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),A3.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),x3.$set(p5e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),k3.$set(rw);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),R3.$set(u5e)},i(f){gNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(bf.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(iA.$$.fragment,f),E(bg.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(hA.$$.fragment,f),E(Yg.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(FA.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(AA.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(kA.$$.fragment,f),E(Hh.$$.fragment,f),E(SA.$$.fragment,f),E(ju.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(Gu.$$.fragment,f),E(qA.$$.fragment,f),E($_.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(GA.$$.fragment,f),E(S_.$$.fragment,f),E(OA.$$.fragment,f),E(_2.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(v2.$$.fragment,f),E(WA.$$.fragment,f),E(r1.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(a1.$$.fragment,f),E(KA.$$.fragment,f),E(E1.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(w1.$$.fragment,f),E(ty.$$.fragment,f),E(Fb.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Mb.$$.fragment,f),E(iy.$$.fragment,f),E(Zb.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(ov.$$.fragment,f),E(gy.$$.fragment,f),E(iv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(cv.$$.fragment,f),E(by.$$.fragment,f),E(zv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Wv.$$.fragment,f),E(Ey.$$.fragment,f),E(BF.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(IF.$$.fragment,f),E(Ly.$$.fragment,f),E(jF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(GF.$$.fragment,f),E(Ry.$$.fragment,f),E(e0.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(r0.$$.fragment,f),E(Ny.$$.fragment,f),E(n0.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(l0.$$.fragment,f),E(Vy.$$.fragment,f),E(_0.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(v0.$$.fragment,f),E(Hy.$$.fragment,f),E(w0.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(y0.$$.fragment,f),E(Zy.$$.fragment,f),E(q0.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(j0.$$.fragment,f),E(aL.$$.fragment,f),E(V0.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(z0.$$.fragment,f),E(cL.$$.fragment,f),E(Y0.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Z0.$$.fragment,f),E(pL.$$.fragment,f),E(aT.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(sT.$$.fragment,f),E(FL.$$.fragment,f),E(cT.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(mT.$$.fragment,f),E(AL.$$.fragment,f),E(pT.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(_T.$$.fragment,f),E(kL.$$.fragment,f),E(ET.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(wT.$$.fragment,f),E(IL.$$.fragment,f),E(LT.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E($T.$$.fragment,f),E(GL.$$.fragment,f),E(T7.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(E7.$$.fragment,f),E(QL.$$.fragment,f),E(W7.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(U7.$$.fragment,f),E(YL.$$.fragment,f),E(iM.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(cM.$$.fragment,f),E(r8.$$.fragment,f),E(hM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(uM.$$.fragment,f),E(l8.$$.fragment,f),E(qM.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(jM.$$.fragment,f),E(m8.$$.fragment,f),E(JM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(KM.$$.fragment,f),E(_8.$$.fragment,f),E(w4.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(y4.$$.fragment,f),E(M8.$$.fragment,f),E(z4.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(W4.$$.fragment,f),E(y8.$$.fragment,f),E(J4.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(K4.$$.fragment,f),E(R8.$$.fragment,f),E(eE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(rE.$$.fragment,f),E(N8.$$.fragment,f),E(EE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(wE.$$.fragment,f),E(V8.$$.fragment,f),E(QE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(HE.$$.fragment,f),E(H8.$$.fragment,f),E(JE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(KE.$$.fragment,f),E(Z8.$$.fragment,f),E(e5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(r5.$$.fragment,f),E(ax.$$.fragment,f),E(L5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E($5.$$.fragment,f),E(dx.$$.fragment,f),E(D5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(O5.$$.fragment,f),E(hx.$$.fragment,f),E(oC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(tC.$$.fragment,f),E(vx.$$.fragment,f),E(hC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(uC.$$.fragment,f),E(Cx.$$.fragment,f),E(AC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(LC.$$.fragment,f),E(xx.$$.fragment,f),E(jC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(GC.$$.fragment,f),E(Bx.$$.fragment,f),E(KC.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(e3.$$.fragment,f),E(jx.$$.fragment,f),E(d3.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(f3.$$.fragment,f),E(Xx.$$.fragment,f),E(F3.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(M3.$$.fragment,f),E(Ux.$$.fragment,f),E(C3.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(A3.$$.fragment,f),E(e9.$$.fragment,f),E(x3.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(k3.$$.fragment,f),E(s9.$$.fragment,f),E(R3.$$.fragment,f),gNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(bf.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(iA.$$.fragment,f),C(bg.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(hA.$$.fragment,f),C(Yg.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(FA.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(AA.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(kA.$$.fragment,f),C(Hh.$$.fragment,f),C(SA.$$.fragment,f),C(ju.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(Gu.$$.fragment,f),C(qA.$$.fragment,f),C($_.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(GA.$$.fragment,f),C(S_.$$.fragment,f),C(OA.$$.fragment,f),C(_2.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(v2.$$.fragment,f),C(WA.$$.fragment,f),C(r1.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(a1.$$.fragment,f),C(KA.$$.fragment,f),C(E1.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(w1.$$.fragment,f),C(ty.$$.fragment,f),C(Fb.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Mb.$$.fragment,f),C(iy.$$.fragment,f),C(Zb.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(ov.$$.fragment,f),C(gy.$$.fragment,f),C(iv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(cv.$$.fragment,f),C(by.$$.fragment,f),C(zv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Wv.$$.fragment,f),C(Ey.$$.fragment,f),C(BF.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(IF.$$.fragment,f),C(Ly.$$.fragment,f),C(jF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(GF.$$.fragment,f),C(Ry.$$.fragment,f),C(e0.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(r0.$$.fragment,f),C(Ny.$$.fragment,f),C(n0.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(l0.$$.fragment,f),C(Vy.$$.fragment,f),C(_0.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(v0.$$.fragment,f),C(Hy.$$.fragment,f),C(w0.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(y0.$$.fragment,f),C(Zy.$$.fragment,f),C(q0.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(j0.$$.fragment,f),C(aL.$$.fragment,f),C(V0.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(z0.$$.fragment,f),C(cL.$$.fragment,f),C(Y0.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Z0.$$.fragment,f),C(pL.$$.fragment,f),C(aT.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(sT.$$.fragment,f),C(FL.$$.fragment,f),C(cT.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(mT.$$.fragment,f),C(AL.$$.fragment,f),C(pT.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(_T.$$.fragment,f),C(kL.$$.fragment,f),C(ET.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(wT.$$.fragment,f),C(IL.$$.fragment,f),C(LT.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C($T.$$.fragment,f),C(GL.$$.fragment,f),C(T7.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(E7.$$.fragment,f),C(QL.$$.fragment,f),C(W7.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(U7.$$.fragment,f),C(YL.$$.fragment,f),C(iM.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(cM.$$.fragment,f),C(r8.$$.fragment,f),C(hM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(uM.$$.fragment,f),C(l8.$$.fragment,f),C(qM.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(jM.$$.fragment,f),C(m8.$$.fragment,f),C(JM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(KM.$$.fragment,f),C(_8.$$.fragment,f),C(w4.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(y4.$$.fragment,f),C(M8.$$.fragment,f),C(z4.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(W4.$$.fragment,f),C(y8.$$.fragment,f),C(J4.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(K4.$$.fragment,f),C(R8.$$.fragment,f),C(eE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(rE.$$.fragment,f),C(N8.$$.fragment,f),C(EE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(wE.$$.fragment,f),C(V8.$$.fragment,f),C(QE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(HE.$$.fragment,f),C(H8.$$.fragment,f),C(JE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(KE.$$.fragment,f),C(Z8.$$.fragment,f),C(e5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(r5.$$.fragment,f),C(ax.$$.fragment,f),C(L5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C($5.$$.fragment,f),C(dx.$$.fragment,f),C(D5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(O5.$$.fragment,f),C(hx.$$.fragment,f),C(oC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(tC.$$.fragment,f),C(vx.$$.fragment,f),C(hC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(uC.$$.fragment,f),C(Cx.$$.fragment,f),C(AC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(LC.$$.fragment,f),C(xx.$$.fragment,f),C(jC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(GC.$$.fragment,f),C(Bx.$$.fragment,f),C(KC.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(e3.$$.fragment,f),C(jx.$$.fragment,f),C(d3.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(f3.$$.fragment,f),C(Xx.$$.fragment,f),C(F3.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(M3.$$.fragment,f),C(Ux.$$.fragment,f),C(C3.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(A3.$$.fragment,f),C(e9.$$.fragment,f),C(x3.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(k3.$$.fragment,f),C(s9.$$.fragment,f),C(R3.$$.fragment,f),gNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(cIe),f&&t(pi),w(rA),f&&t(fIe),f&&t($n),f&&t(mIe),w(tA,f),f&&t(gIe),f&&t(w$),f&&t(hIe),w(bf,f),f&&t(pIe),f&&t(ui),w(aA),f&&t(uIe),f&&t(Co),w(nA),w(iA),w(bg),w(dA),f&&t(_Ie),f&&t(bi),w(cA),f&&t(bIe),f&&t(wo),w(fA),w(hA),w(Yg),w(pA),f&&t(vIe),f&&t(vi),w(uA),f&&t(FIe),f&&t(Ao),w(_A),w(FA),w(wh),w(Ah),w(TA),f&&t(TIe),f&&t(Fi),w(MA),f&&t(MIe),f&&t(yo),w(EA),w(AA),w(Xh),w(zh),w(yA),f&&t(EIe),f&&t(Mi),w(LA),f&&t(CIe),f&&t(Lo),w(xA),w(kA),w(Hh),w(SA),w(ju),f&&t(wIe),f&&t(wi),w(RA),f&&t(AIe),f&&t(xo),w(BA),w(IA),w(Gu),w(qA),w($_),f&&t(yIe),f&&t(Li),w(NA),f&&t(LIe),f&&t($o),w(jA),w(GA),w(S_),w(OA),w(_2),f&&t(xIe),f&&t(ki),w(VA),f&&t($Ie),f&&t(ko),w(XA),w(QA),w(v2),w(WA),w(r1),f&&t(kIe),f&&t(Bi),w(HA),f&&t(SIe),f&&t(So),w(UA),w(YA),w(a1),w(KA),w(E1),f&&t(RIe),f&&t(qi),w(ZA),f&&t(BIe),f&&t(Ro),w(ey),w(ry),w(w1),w(ty),w(Fb),f&&t(PIe),f&&t(Di),w(ay),f&&t(IIe),f&&t(Bo),w(ny),w(ly),w(Mb),w(iy),w(Zb),f&&t(qIe),f&&t(Vi),w(dy),f&&t(NIe),f&&t(Po),w(cy),w(my),w(ov),w(gy),w(iv),f&&t(jIe),f&&t(Qi),w(hy),f&&t(DIe),f&&t(Io),w(py),w(_y),w(cv),w(by),w(zv),f&&t(GIe),f&&t(Ui),w(vy),f&&t(OIe),f&&t(qo),w(Fy),w(My),w(Wv),w(Ey),w(BF),f&&t(VIe),f&&t(Ki),w(Cy),f&&t(XIe),f&&t(No),w(wy),w(yy),w(IF),w(Ly),w(jF),f&&t(zIe),f&&t(od),w(xy),f&&t(QIe),f&&t(jo),w($y),w(Sy),w(GF),w(Ry),w(e0),f&&t(WIe),f&&t(ad),w(By),f&&t(HIe),f&&t(Do),w(Py),w(qy),w(r0),w(Ny),w(n0),f&&t(UIe),f&&t(ld),w(jy),f&&t(JIe),f&&t(Go),w(Dy),w(Oy),w(l0),w(Vy),w(_0),f&&t(YIe),f&&t(cd),w(Xy),f&&t(KIe),f&&t(Oo),w(zy),w(Wy),w(v0),w(Hy),w(w0),f&&t(ZIe),f&&t(gd),w(Uy),f&&t(eqe),f&&t(Vo),w(Jy),w(Ky),w(y0),w(Zy),w(q0),f&&t(oqe),f&&t(ud),w(eL),f&&t(rqe),f&&t(Xo),w(oL),w(tL),w(j0),w(aL),w(V0),f&&t(tqe),f&&t(vd),w(sL),f&&t(aqe),f&&t(zo),w(lL),w(dL),w(z0),w(cL),w(Y0),f&&t(nqe),f&&t(Md),w(fL),f&&t(sqe),f&&t(Qo),w(mL),w(hL),w(Z0),w(pL),w(aT),f&&t(lqe),f&&t(Ad),w(uL),f&&t(iqe),f&&t(Wo),w(_L),w(vL),w(sT),w(FL),w(cT),f&&t(dqe),f&&t(xd),w(ML),f&&t(cqe),f&&t(Ho),w(EL),w(wL),w(mT),w(AL),w(pT),f&&t(fqe),f&&t(Sd),w(yL),f&&t(mqe),f&&t(Uo),w(LL),w($L),w(_T),w(kL),w(ET),f&&t(gqe),f&&t(Pd),w(SL),f&&t(hqe),f&&t(Jo),w(RL),w(PL),w(wT),w(IL),w(LT),f&&t(pqe),f&&t(Nd),w(qL),f&&t(uqe),f&&t(Yo),w(NL),w(DL),w($T),w(GL),w(T7),f&&t(_qe),f&&t(Gd),w(OL),f&&t(bqe),f&&t(Ko),w(VL),w(zL),w(E7),w(QL),w(W7),f&&t(vqe),f&&t(Xd),w(WL),f&&t(Fqe),f&&t(Zo),w(HL),w(JL),w(U7),w(YL),w(iM),f&&t(Tqe),f&&t(Wd),w(KL),f&&t(Mqe),f&&t(er),w(ZL),w(o8),w(cM),w(r8),w(hM),f&&t(Eqe),f&&t(Yd),w(t8),f&&t(Cqe),f&&t(or),w(a8),w(s8),w(uM),w(l8),w(qM),f&&t(wqe),f&&t(ec),w(i8),f&&t(Aqe),f&&t(rr),w(d8),w(f8),w(jM),w(m8),w(JM),f&&t(yqe),f&&t(tc),w(g8),f&&t(Lqe),f&&t(tr),w(h8),w(u8),w(KM),w(_8),w(w4),f&&t(xqe),f&&t(sc),w(b8),f&&t($qe),f&&t(ar),w(v8),w(T8),w(y4),w(M8),w(z4),f&&t(kqe),f&&t(dc),w(E8),f&&t(Sqe),f&&t(nr),w(C8),w(A8),w(W4),w(y8),w(J4),f&&t(Rqe),f&&t(mc),w(x8),f&&t(Bqe),f&&t(sr),w($8),w(S8),w(K4),w(R8),w(eE),f&&t(Pqe),f&&t(pc),w(B8),f&&t(Iqe),f&&t(lr),w(P8),w(q8),w(rE),w(N8),w(EE),f&&t(qqe),f&&t(bc),w(j8),f&&t(Nqe),f&&t(ir),w(D8),w(O8),w(wE),w(V8),w(QE),f&&t(jqe),f&&t(Tc),w(X8),f&&t(Dqe),f&&t(dr),w(z8),w(W8),w(HE),w(H8),w(JE),f&&t(Gqe),f&&t(Cc),w(U8),f&&t(Oqe),f&&t(cr),w(J8),w(K8),w(KE),w(Z8),w(e5),f&&t(Vqe),f&&t(yc),w(ex),f&&t(Xqe),f&&t(fr),w(ox),w(tx),w(r5),w(ax),w(L5),f&&t(zqe),f&&t($c),w(nx),f&&t(Qqe),f&&t(mr),w(sx),w(ix),w($5),w(dx),w(D5),f&&t(Wqe),f&&t(Rc),w(cx),f&&t(Hqe),f&&t(gr),w(fx),w(gx),w(O5),w(hx),w(oC),f&&t(Uqe),f&&t(Ic),w(px),f&&t(Jqe),f&&t(hr),w(ux),w(bx),w(tC),w(vx),w(hC),f&&t(Yqe),f&&t(jc),w(Fx),f&&t(Kqe),f&&t(pr),w(Tx),w(Ex),w(uC),w(Cx),w(AC),f&&t(Zqe),f&&t(Oc),w(wx),f&&t(eNe),f&&t(ur),w(Ax),w(Lx),w(LC),w(xx),w(jC),f&&t(oNe),f&&t(zc),w($x),f&&t(rNe),f&&t(_r),w(kx),w(Rx),w(GC),w(Bx),w(KC),f&&t(tNe),f&&t(Hc),w(Px),f&&t(aNe),f&&t(br),w(Ix),w(Nx),w(e3),w(jx),w(d3),f&&t(nNe),f&&t(Yc),w(Dx),f&&t(sNe),f&&t(vr),w(Gx),w(Vx),w(f3),w(Xx),w(F3),f&&t(lNe),f&&t(ef),w(zx),f&&t(iNe),f&&t(Fr),w(Qx),w(Hx),w(M3),w(Ux),w(C3),f&&t(dNe),f&&t(tf),w(Jx),f&&t(cNe),f&&t(Tr),w(Yx),w(Zx),w(A3),w(e9),w(x3),f&&t(fNe),f&&t(sf),w(r9),f&&t(mNe),f&&t(Mr),w(t9),w(n9),w(k3),w(s9),w(R3)}}}const p8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function u8t(L){return uyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class E8t extends myt{constructor(g){super();gyt(this,g,u8t,h8t,hyt,{})}}export{E8t as default,p8t as metadata};
