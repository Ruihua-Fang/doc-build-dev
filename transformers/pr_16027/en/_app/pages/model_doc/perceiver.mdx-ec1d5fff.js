import{S as Kw,i as Jw,s as Gw,e as r,k as l,w as u,t as a,M as Xw,c as s,d as o,m as d,a as n,x as f,h as i,b as c,N as Zw,F as e,g as m,y as g,q as v,o as _,B as P}from"../../chunks/vendor-4833417e.js";import{T as jt}from"../../chunks/Tip-fffd6df1.js";import{D as T}from"../../chunks/Docstring-4f315ed9.js";import{C as Mt}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as F}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function Qw(j){let h,$;return{c(){h=r("p"),$=a(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(w){h=s(w,"P",{});var k=n(h);$=i(k,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),k.forEach(o)},m(w,k){m(w,h,k),e(h,$)},d(w){w&&o(h)}}}function Yw(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function eb(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function tb(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function ob(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function rb(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function sb(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function nb(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function ab(j){let h,$,w,k,x;return{c(){h=r("p"),$=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),w=r("code"),k=a("Module"),x=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){h=s(y,"P",{});var b=n(h);$=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),w=s(b,"CODE",{});var E=n(w);k=i(E,"Module"),E.forEach(o),x=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(y,b){m(y,h,b),e(h,$),e(h,w),e(w,k),e(h,x)},d(y){y&&o(h)}}}function ib(j){let h,$,w,k,x,y,b,E,ep,Tc,Ie,It,Kn,To,tp,Jn,op,xc,qt,rp,xo,sp,np,Ec,zt,ap,Eo,ip,cp,Fc,As,lp,Cc,Ds,Gn,dp,jc,Ns,pp,Mc,Os,mp,Ic,D,hp,Ls,up,fp,Xn,gp,vp,Zn,_p,Pp,Qn,wp,bp,Yn,yp,kp,qc,Ss,$p,zc,M,Tp,ea,xp,Ep,ta,Fp,Cp,oa,jp,Mp,ra,Ip,qp,sa,zp,Ap,na,Dp,Np,Ac,At,V_,Dc,Fo,Op,Bs,Lp,Nc,ve,Sp,Co,Bp,Hp,jo,Wp,Vp,Oc,Hs,Rp,Lc,Dt,Mo,Up,Io,Kp,Jp,Gp,qo,Xp,zo,Zp,Qp,Sc,Ao,aa,Yp,em,Bc,Ws,_e,tm,ia,om,rm,ca,sm,nm,Do,am,Hc,qe,Nt,la,No,im,da,cm,Wc,ze,Oo,lm,pa,dm,Vc,Ae,Lo,pm,ma,mm,Rc,De,So,hm,ha,um,Uc,Ne,Bo,fm,ua,gm,Kc,Oe,Ot,fa,Ho,vm,ga,_m,Jc,N,Wo,Pm,Le,wm,Vs,bm,ym,Vo,km,$m,Tm,Se,xm,Rs,Em,Fm,Us,Cm,jm,Mm,va,Im,qm,Ro,Gc,Be,Lt,_a,Uo,zm,Pa,Am,Xc,Q,Ko,Dm,wa,Nm,Om,Jo,Lm,Ks,Sm,Bm,Hm,St,Go,Wm,ba,Vm,Zc,He,Bt,ya,Xo,Rm,ka,Um,Qc,Y,Zo,Km,$a,Jm,Gm,Qo,Xm,Js,Zm,Qm,Ym,Pe,Yo,eh,Ta,th,oh,Ht,Yc,We,Wt,xa,er,rh,Ea,sh,el,ae,tr,nh,or,ah,Fa,ih,ch,lh,rr,dh,Ca,ph,mh,tl,Ve,Vt,ja,sr,hh,Ma,uh,ol,ie,nr,fh,Ia,gh,vh,ee,_h,qa,Ph,wh,za,bh,yh,Aa,kh,$h,Da,Th,xh,rl,Re,Rt,Na,ar,Eh,Oa,Fh,sl,Ue,ir,Ch,La,jh,nl,Ke,Ut,Sa,cr,Mh,Ba,Ih,al,Je,lr,qh,Ha,zh,il,Ge,Kt,Wa,dr,Ah,Va,Dh,cl,ce,pr,Nh,Ra,Oh,Lh,Ua,Sh,ll,Xe,Jt,Ka,mr,Bh,Ja,Hh,dl,Ze,hr,Wh,Ga,Vh,pl,Qe,Gt,Xa,ur,Rh,Za,Uh,ml,le,fr,Kh,Qa,Jh,Gh,Ya,Xh,hl,Ye,Xt,ei,gr,Zh,ti,Qh,ul,et,vr,Yh,_r,eu,oi,tu,ou,fl,tt,Zt,ri,Pr,ru,si,su,gl,ot,wr,nu,ni,au,vl,rt,Qt,ai,br,iu,ii,cu,_l,st,yr,lu,kr,du,ci,pu,mu,Pl,nt,Yt,li,$r,hu,di,uu,wl,de,Tr,fu,xr,gu,pi,vu,_u,Pu,mi,wu,bl,at,eo,hi,Er,bu,ui,yu,yl,it,Fr,ku,fi,$u,kl,ct,to,gi,Cr,Tu,vi,xu,$l,lt,jr,Eu,_i,Fu,Tl,dt,oo,Pi,Mr,Cu,wi,ju,xl,pt,Ir,Mu,bi,Iu,El,mt,ro,yi,qr,qu,ki,zu,Fl,ht,zr,Au,$i,Du,Cl,ut,so,Ti,Ar,Nu,xi,Ou,jl,pe,Dr,Lu,Nr,Su,Or,Bu,Hu,Wu,S,Lr,Vu,ft,Ru,Gs,Uu,Ku,Ei,Ju,Gu,Xu,no,Zu,Fi,Qu,Yu,Sr,Ml,gt,ao,Ci,Br,ef,ji,tf,Il,me,Hr,of,Wr,rf,Vr,sf,nf,af,B,Rr,cf,vt,lf,Xs,df,pf,Mi,mf,hf,uf,io,ff,Ii,gf,vf,Ur,ql,_t,co,qi,Kr,_f,zi,Pf,zl,he,Jr,wf,Gr,bf,Xr,yf,kf,$f,H,Zr,Tf,Pt,xf,Zs,Ef,Ff,Ai,Cf,jf,Mf,lo,If,Di,qf,zf,Qr,Al,wt,po,Ni,Yr,Af,Oi,Df,Dl,q,es,Nf,Li,Of,Lf,Si,Sf,Bf,W,Qs,Hf,Wf,Ys,Vf,Rf,Bi,Uf,Kf,en,Jf,Gf,tn,Xf,Zf,Qf,ts,Yf,os,eg,tg,og,V,rs,rg,bt,sg,on,ng,ag,Hi,ig,cg,lg,mo,dg,Wi,pg,mg,ss,Nl,yt,ho,Vi,ns,hg,Ri,ug,Ol,z,as,fg,Ui,gg,vg,Ki,_g,Pg,R,rn,wg,bg,sn,yg,kg,Ji,$g,Tg,nn,xg,Eg,an,Fg,Cg,jg,is,Mg,cs,Ig,qg,zg,U,ls,Ag,kt,Dg,cn,Ng,Og,Gi,Lg,Sg,Bg,uo,Hg,Xi,Wg,Vg,ds,Ll,$t,fo,Zi,ps,Rg,Qi,Ug,Sl,A,ms,Kg,Yi,Jg,Gg,ec,Xg,Zg,K,ln,Qg,Yg,dn,ev,tv,tc,ov,rv,pn,sv,nv,mn,av,iv,cv,hs,lv,us,dv,pv,mv,J,fs,hv,Tt,uv,hn,fv,gv,oc,vv,_v,Pv,go,wv,rc,bv,yv,gs,Bl,xt,vo,sc,vs,kv,nc,$v,Hl,O,_s,Tv,L,xv,un,Ev,Fv,fn,Cv,jv,ac,Mv,Iv,gn,qv,zv,vn,Av,Dv,Nv,ic,Ov,Lv,Ps,Sv,ws,Bv,Hv,Wv,G,bs,Vv,Et,Rv,_n,Uv,Kv,cc,Jv,Gv,Xv,_o,Zv,lc,Qv,Yv,ys,Wl,Ft,Po,dc,ks,e_,pc,t_,Vl,C,$s,o_,mc,r_,s_,wo,Pn,n_,a_,wn,i_,c_,l_,we,bn,d_,p_,yn,m_,h_,kn,u_,f_,g_,bo,$n,v_,__,Tn,P_,w_,b_,Ts,y_,hc,k_,$_,T_,uc,x_,E_,xs,F_,Es,C_,j_,M_,X,Fs,I_,Ct,q_,xn,z_,A_,fc,D_,N_,O_,yo,L_,gc,S_,B_,Cs,Rl;return y=new F({}),To=new F({}),No=new F({}),Oo=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput",parameters:[{name:"logits",val:": FloatTensor = None"},{name:"last_hidden_state",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L66",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"attentions"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),Lo=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverDecoderOutput",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverDecoderOutput",parameters:[{name:"logits",val:": FloatTensor = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L97",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverDecoderOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_labels)</code>) &#x2014;
Output of the basic decoder.`,name:"logits"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),So=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L115",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Masked language modeling (MLM) loss.`,name:"loss"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) &#x2014;
Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).`,name:"logits"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, num_latents, num_latents)</code>. Attentions weights after the attention softmax, used to compute the weighted average in the
self-attention heads.`,name:"attentions"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),Bo=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"logits",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L146",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) &#x2014;
Classification (or regression if config.num_labels==1) loss.`,name:"loss"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) &#x2014;
Classification (or regression if config.num_labels==1) scores (before SoftMax).`,name:"logits"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.`,name:"attentions"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"}]}}),Ho=new F({}),Wo=new T({props:{name:"class transformers.PerceiverConfig",anchor:"transformers.PerceiverConfig",parameters:[{name:"num_latents",val:" = 256"},{name:"d_latents",val:" = 1280"},{name:"d_model",val:" = 768"},{name:"num_blocks",val:" = 1"},{name:"num_self_attends_per_block",val:" = 26"},{name:"num_self_attention_heads",val:" = 8"},{name:"num_cross_attention_heads",val:" = 8"},{name:"qk_channels",val:" = None"},{name:"v_channels",val:" = None"},{name:"cross_attention_shape_for_attention",val:" = 'kv'"},{name:"self_attention_widening_factor",val:" = 1"},{name:"cross_attention_widening_factor",val:" = 1"},{name:"hidden_act",val:" = 'gelu'"},{name:"attention_probs_dropout_prob",val:" = 0.1"},{name:"position_embedding_init_scale",val:" = 0.02"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"use_query_residual",val:" = True"},{name:"vocab_size",val:" = 262"},{name:"max_position_embeddings",val:" = 2048"},{name:"image_size",val:" = 56"},{name:"train_size",val:" = [368, 496]"},{name:"num_frames",val:" = 16"},{name:"audio_samples_per_frame",val:" = 1920"},{name:"samples_per_patch",val:" = 16"},{name:"output_shape",val:" = [1, 16, 224, 224]"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/configuration_perceiver.py#L29",parametersDescription:[{anchor:"transformers.PerceiverConfig.num_latents",description:`<strong>num_latents</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The number of latents.`,name:"num_latents"},{anchor:"transformers.PerceiverConfig.d_latents",description:`<strong>d_latents</strong> (<code>int</code>, <em>optional</em>, defaults to 1280) &#x2014;
Dimension of the latent embeddings.`,name:"d_latents"},{anchor:"transformers.PerceiverConfig.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimension of the inputs. Should only be provided in case [<em>PerceiverTextPreprocessor</em>] is used or no
preprocessor is provided.`,name:"d_model"},{anchor:"transformers.PerceiverConfig.num_blocks",description:`<strong>num_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of blocks in the Transformer encoder.`,name:"num_blocks"},{anchor:"transformers.PerceiverConfig.num_self_attends_per_block",description:`<strong>num_self_attends_per_block</strong> (<code>int</code>, <em>optional</em>, defaults to 26) &#x2014;
The number of self-attention layers per block.`,name:"num_self_attends_per_block"},{anchor:"transformers.PerceiverConfig.num_self_attention_heads",description:`<strong>num_self_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each self-attention layer in the Transformer encoder.`,name:"num_self_attention_heads"},{anchor:"transformers.PerceiverConfig.num_cross_attention_heads",description:`<strong>num_cross_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each cross-attention layer in the Transformer encoder.`,name:"num_cross_attention_heads"},{anchor:"transformers.PerceiverConfig.qk_channels",description:`<strong>qk_channels</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Dimension to project the queries + keys before applying attention in the cross-attention and self-attention
layers of the encoder. Will default to preserving the dimension of the queries if not specified.`,name:"qk_channels"},{anchor:"transformers.PerceiverConfig.v_channels",description:`<strong>v_channels</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Dimension to project the values before applying attention in the cross-attention and self-attention layers
of the encoder. Will default to preserving the dimension of the queries if not specified.`,name:"v_channels"},{anchor:"transformers.PerceiverConfig.cross_attention_shape_for_attention",description:`<strong>cross_attention_shape_for_attention</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&apos;kv&apos;</code>) &#x2014;
Dimension to use when downsampling the queries and keys in the cross-attention layer of the encoder.`,name:"cross_attention_shape_for_attention"},{anchor:"transformers.PerceiverConfig.self_attention_widening_factor",description:`<strong>self_attention_widening_factor</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Dimension of the feed-forward layer in the cross-attention layer of the Transformer encoder.`,name:"self_attention_widening_factor"},{anchor:"transformers.PerceiverConfig.cross_attention_widening_factor",description:`<strong>cross_attention_widening_factor</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Dimension of the feed-forward layer in the self-attention layers of the Transformer encoder.`,name:"cross_attention_widening_factor"},{anchor:"transformers.PerceiverConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.PerceiverConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.PerceiverConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.PerceiverConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.PerceiverConfig.use_query_residual",description:`<strong>use_query_residual</strong> (<code>float</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a query residual in the cross-attention layer of the encoder.`,name:"use_query_residual"},{anchor:"transformers.PerceiverConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 262) &#x2014;
Vocabulary size for the masked language modeling model.`,name:"vocab_size"},{anchor:"transformers.PerceiverConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
The maximum sequence length that the masked language modeling model might ever be used with. Typically set
this to something large just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.PerceiverConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 56) &#x2014;
Size of the images after preprocessing, for <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a>.`,name:"image_size"},{anchor:"transformers.PerceiverConfig.train_size",description:`<strong>train_size</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [368, 496]) &#x2014;
Training size of the images for the optical flow model.`,name:"train_size"},{anchor:"transformers.PerceiverConfig.num_frames",description:`<strong>num_frames</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of video frames used for the multimodal autoencoding model.`,name:"num_frames"},{anchor:"transformers.PerceiverConfig.audio_samples_per_frame",description:`<strong>audio_samples_per_frame</strong> (<code>int</code>, <em>optional</em>, defaults to 1920) &#x2014;
Number of audio samples per frame for the multimodal autoencoding model.`,name:"audio_samples_per_frame"},{anchor:"transformers.PerceiverConfig.samples_per_patch",description:`<strong>samples_per_patch</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of audio samples per patch when preprocessing the audio for the multimodal autoencoding model.`,name:"samples_per_patch"},{anchor:"transformers.PerceiverConfig.output_shape",description:`<strong>output_shape</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 16, 224, 224]</code>) &#x2014;
Shape of the output (batch_size, num_frames, height, width) for the video decoder queries of the multimodal
autoencoding model. This excludes the channel dimension.`,name:"output_shape"}]}}),Ro=new Mt({props:{code:`from transformers import PerceiverModel, PerceiverConfig

# Initializing a Perceiver deepmind/language-perceiver style configuration
configuration = PerceiverConfig()

# Initializing a model from the deepmind/language-perceiver style configuration
model = PerceiverModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverModel, PerceiverConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Perceiver deepmind/language-perceiver style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = PerceiverConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the deepmind/language-perceiver style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Uo=new F({}),Ko=new T({props:{name:"class transformers.PerceiverTokenizer",anchor:"transformers.PerceiverTokenizer",parameters:[{name:"pad_token",val:" = '[PAD]'"},{name:"bos_token",val:" = '[BOS]'"},{name:"eos_token",val:" = '[EOS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"model_max_length",val:" = 2048"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/tokenization_perceiver.py#L27",parametersDescription:[{anchor:"transformers.PerceiverTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[PAD]&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.PerceiverTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[BOS]&quot;</code>) &#x2014;
The BOS token (reserved in the vocab, but not actually used).`,name:"bos_token"},{anchor:"transformers.PerceiverTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[EOS]&quot;</code>) &#x2014;
The end of sequence token (reserved in the vocab, but not actually used).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.PerceiverTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[MASK]&quot;</code>) &#x2014;
The MASK token, useful for masked language modeling.`,name:"mask_token"},{anchor:"transformers.PerceiverTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The CLS token (reserved in the vocab, but not actually used).`,name:"cls_token"},{anchor:"transformers.PerceiverTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from two sequences.`,name:"sep_token"}]}}),Go=new T({props:{name:"__call__",anchor:"transformers.PreTrainedTokenizerBase.__call__",parameters:[{name:"text",val:": typing.Union[str, typing.List[str], typing.List[typing.List[str]]]"},{name:"text_pair",val:": typing.Union[str, typing.List[str], typing.List[typing.List[str]], NoneType] = None"},{name:"add_special_tokens",val:": bool = True"},{name:"padding",val:": typing.Union[bool, str, transformers.file_utils.PaddingStrategy] = False"},{name:"truncation",val:": typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy] = False"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"stride",val:": int = 0"},{name:"is_split_into_words",val:": bool = False"},{name:"pad_to_multiple_of",val:": typing.Optional[int] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.file_utils.TensorType, NoneType] = None"},{name:"return_token_type_ids",val:": typing.Optional[bool] = None"},{name:"return_attention_mask",val:": typing.Optional[bool] = None"},{name:"return_overflowing_tokens",val:": bool = False"},{name:"return_special_tokens_mask",val:": bool = False"},{name:"return_offsets_mapping",val:": bool = False"},{name:"return_length",val:": bool = False"},{name:"verbose",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/tokenization_utils_base.py#L2379",parametersDescription:[{anchor:"transformers.PreTrainedTokenizerBase.__call__.text",description:`<strong>text</strong> (<code>str</code>, <code>List[str]</code>, <code>List[List[str]]</code>) &#x2014;
The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings
(pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set
<code>is_split_into_words=True</code> (to lift the ambiguity with a batch of sequences).`,name:"text"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.text_pair",description:`<strong>text_pair</strong> (<code>str</code>, <code>List[str]</code>, <code>List[List[str]]</code>) &#x2014;
The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings
(pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set
<code>is_split_into_words=True</code> (to lift the ambiguity with a batch of sequences).`,name:"text_pair"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.add_special_tokens",description:`<strong>add_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to encode the sequences with the special tokens relative to their model.`,name:"add_special_tokens"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_16027/en/internal/file_utils#transformers.file_utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls padding. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.truncation",description:`<strong>truncation</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_16027/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy">TruncationStrategy</a>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls truncation. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;longest_first&apos;</code>: Truncate to a maximum length specified with the argument <code>max_length</code> or
to the maximum acceptable input length for the model if that argument is not provided. This will
truncate token by token, removing a token from the longest sequence in the pair if a pair of
sequences (or a batch of pairs) is provided.</li>
<li><code>&apos;only_first&apos;</code>: Truncate to a maximum length specified with the argument <code>max_length</code> or to the
maximum acceptable input length for the model if that argument is not provided. This will only
truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.</li>
<li><code>&apos;only_second&apos;</code>: Truncate to a maximum length specified with the argument <code>max_length</code> or to the
maximum acceptable input length for the model if that argument is not provided. This will only
truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.</li>
<li><code>False</code> or <code>&apos;do_not_truncate&apos;</code> (default): No truncation (i.e., can output batch with sequence lengths
greater than the model maximum admissible input size).</li>
</ul>`,name:"truncation"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Controls the maximum length to use by one of the truncation/padding parameters.</p>
<p>If left unset or set to <code>None</code>, this will use the predefined model maximum length if a maximum length
is required by one of the truncation/padding parameters. If the model has no specific maximum input
length (like XLNet) truncation/padding to a maximum length will be deactivated.`,name:"max_length"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.stride",description:`<strong>stride</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If set to a number along with <code>max_length</code>, the overflowing tokens returned when
<code>return_overflowing_tokens=True</code> will contain some tokens from the end of the truncated sequence
returned to provide some overlap between truncated and overflowing sequences. The value of this
argument defines the number of overlapping tokens.`,name:"stride"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.is_split_into_words",description:`<strong>is_split_into_words</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the input is already pre-tokenized (e.g., split into words). If set to <code>True</code>, the
tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace)
which it will tokenize. This is useful for NER or token classification.`,name:"is_split_into_words"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the sequence to a multiple of the provided value. This is especially useful to enable
the use of Tensor Cores on NVIDIA hardware with compute capability &gt;= 7.5 (Volta).`,name:"pad_to_multiple_of"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_16027/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_token_type_ids",description:`<strong>return_token_type_ids</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return token type IDs. If left to the default, will return the token type IDs according to
the specific tokenizer&#x2019;s default, defined by the <code>return_outputs</code> attribute.</p>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"return_token_type_ids"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return the attention mask. If left to the default, will return the attention mask according
to the specific tokenizer&#x2019;s default, defined by the <code>return_outputs</code> attribute.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_overflowing_tokens",description:`<strong>return_overflowing_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return overflowing token sequences. If a pair of sequences of input ids (or a batch
of pairs) is provided with <code>truncation_strategy = longest_first</code> or <code>True</code>, an error is raised instead
of returning overflowing tokens.`,name:"return_overflowing_tokens"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_special_tokens_mask",description:`<strong>return_special_tokens_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return special tokens mask information.`,name:"return_special_tokens_mask"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_offsets_mapping",description:`<strong>return_offsets_mapping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return <code>(char_start, char_end)</code> for each token.</p>
<p>This is only available on fast tokenizers inheriting from <a href="/docs/transformers/pr_16027/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast">PreTrainedTokenizerFast</a>, if using
Python&#x2019;s tokenizer, this method will raise <code>NotImplementedError</code>.`,name:"return_offsets_mapping"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.return_length",description:`<strong>return_length</strong>  (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return the lengths of the encoded inputs.`,name:"return_length"},{anchor:"transformers.PreTrainedTokenizerBase.__call__.verbose",description:`<strong>verbose</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to print more information and warnings.
**kwargs &#x2014; passed to the <code>self.tokenize()</code> method`,name:"verbose"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/main_classes/tokenizer#transformers.BatchEncoding"
>BatchEncoding</a> with the following fields:</p>
<ul>
<li>
<p><strong>input_ids</strong> \u2014 List of token ids to be fed to a model.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a></p>
</li>
<li>
<p><strong>token_type_ids</strong> \u2014 List of token type ids to be fed to a model (when <code>return_token_type_ids=True</code> or
if <em>\u201Ctoken_type_ids\u201D</em> is in <code>self.model_input_names</code>).</p>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a></p>
</li>
<li>
<p><strong>attention_mask</strong> \u2014 List of indices specifying which tokens should be attended to by the model (when
<code>return_attention_mask=True</code> or if <em>\u201Cattention_mask\u201D</em> is in <code>self.model_input_names</code>).</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a></p>
</li>
<li>
<p><strong>overflowing_tokens</strong> \u2014 List of overflowing tokens sequences (when a <code>max_length</code> is specified and
<code>return_overflowing_tokens=True</code>).</p>
</li>
<li>
<p><strong>num_truncated_tokens</strong> \u2014 Number of tokens truncated (when a <code>max_length</code> is specified and
<code>return_overflowing_tokens=True</code>).</p>
</li>
<li>
<p><strong>special_tokens_mask</strong> \u2014 List of 0s and 1s, with 1 specifying added special tokens and 0 specifying
regular sequence tokens (when <code>add_special_tokens=True</code> and <code>return_special_tokens_mask=True</code>).</p>
</li>
<li>
<p><strong>length</strong> \u2014 The length of the inputs (when <code>return_length=True</code>)</p>
</li>
</ul>
`}}),Xo=new F({}),Zo=new T({props:{name:"class transformers.PerceiverFeatureExtractor",anchor:"transformers.PerceiverFeatureExtractor",parameters:[{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 256"},{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = 3"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/feature_extraction_perceiver.py#L37",parametersDescription:[{anchor:"transformers.PerceiverFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.PerceiverFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.PerceiverFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.PerceiverFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to (size, size). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"size"},{anchor:"transformers.PerceiverFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.PerceiverFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with <code>image_mean</code> and <code>image_std</code>.`,name:"do_normalize"},{anchor:"transformers.PerceiverFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.PerceiverFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),Yo=new T({props:{name:"__call__",anchor:"transformers.PerceiverFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.file_utils.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/feature_extraction_perceiver.py#L121",parametersDescription:[{anchor:"transformers.PerceiverFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.PerceiverFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_16027/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`}}),Ht=new jt({props:{warning:"&lcub;true}",$$slots:{default:[Qw]},$$scope:{ctx:j}}}),er=new F({}),tr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2767",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014;
Model configuration.`,name:"config"}]}}),sr=new F({}),nr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor",parameters:[{name:"config",val:""},{name:"prep_type",val:" = 'conv'"},{name:"spatial_downsample",val:": int = 4"},{name:"temporal_downsample",val:": int = 1"},{name:"position_encoding_type",val:": str = 'fourier'"},{name:"in_channels",val:": int = 3"},{name:"out_channels",val:": int = 64"},{name:"conv_after_patching",val:": bool = False"},{name:"conv_after_patching_in_channels",val:": int = 54"},{name:"conv2d_use_batchnorm",val:": bool = True"},{name:"concat_or_add_pos",val:": str = 'concat'"},{name:"project_pos_dim",val:": int = -1"},{name:"**position_encoding_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2924",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.prep_type",description:`<strong>prep_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;conv&quot;</code>) &#x2014;
Preprocessing type. Can be &#x201C;conv1x1&#x201D;, &#x201C;conv&#x201D;, &#x201C;patches&#x201D;, &#x201C;pixels&#x201D;.`,name:"prep_type"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.spatial_downsample",description:`<strong>spatial_downsample</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Spatial downsampling factor.`,name:"spatial_downsample"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.temporal_downsample",description:`<strong>temporal_downsample</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Temporal downsampling factor (only relevant in case a time dimension is present).`,name:"temporal_downsample"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.position_encoding_type",description:`<strong>position_encoding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;fourier&quot;</code>) &#x2014;
Position encoding type. Can be &#x201C;fourier&#x201D; or &#x201C;trainable&#x201D;.`,name:"position_encoding_type"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.in_channels",description:`<strong>in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Number of channels in the input.`,name:"in_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.out_channels",description:`<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Number of channels in the output.`,name:"out_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.conv_after_patching",description:`<strong>conv_after_patching</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to apply a convolutional layer after patching.`,name:"conv_after_patching"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.conv_after_patching_in_channels",description:`<strong>conv_after_patching_in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 54) &#x2014;
Number of channels in the input of the convolutional layer after patching.`,name:"conv_after_patching_in_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.conv2d_use_batchnorm",description:`<strong>conv2d_use_batchnorm</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use batch normalization in the convolutional layer.`,name:"conv2d_use_batchnorm"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.concat_or_add_pos",description:`<strong>concat_or_add_pos</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;concat&quot;</code>) &#x2014;
How to concatenate the position encoding to the input. Can be &#x201C;concat&#x201D; or &#x201C;add&#x201D;.`,name:"concat_or_add_pos"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.project_pos_dim",description:`<strong>project_pos_dim</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Dimension of the position encoding to project to. If -1, no projection is applied.`,name:"project_pos_dim"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor.*position_encoding_kwargs",description:`*<strong>*position_encoding_kwargs</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
Keyword arguments for the position encoding.`,name:"*position_encoding_kwargs"}]}}),ar=new F({}),ir=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L3153",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014;
Model configuration.`,name:"config"}]}}),cr=new F({}),lr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor",parameters:[{name:"config",val:""},{name:"prep_type",val:": str = 'patches'"},{name:"samples_per_patch",val:": int = 96"},{name:"position_encoding_type",val:": str = 'fourier'"},{name:"concat_or_add_pos",val:": str = 'concat'"},{name:"out_channels",val:" = 64"},{name:"project_pos_dim",val:" = -1"},{name:"**position_encoding_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L3179",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.prep_type",description:`<strong>prep_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;patches&quot;</code>) &#x2014;
Preprocessor type to use. Only &#x201C;patches&#x201D; is supported.`,name:"prep_type"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.samples_per_patch",description:`<strong>samples_per_patch</strong> (<code>int</code>, <em>optional</em>, defaults to 96) &#x2014;
Number of samples per patch.`,name:"samples_per_patch"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.position_encoding_type",description:`<strong>position_encoding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;fourier&quot;</code>) &#x2014;
Type of position encoding to use. Can be &#x201C;trainable&#x201D; or &#x201C;fourier&#x201D;.`,name:"position_encoding_type"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.concat_or_add_pos",description:`<strong>concat_or_add_pos</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;concat&quot;</code>) &#x2014;
How to concatenate the position encoding to the input. Can be &#x201C;concat&#x201D; or &#x201C;add&#x201D;.`,name:"concat_or_add_pos"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.out_channels",description:`<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Number of channels in the output.`,name:"out_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.project_pos_dim",description:`<strong>project_pos_dim</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Dimension of the position encoding to project to. If -1, no projection is applied.`,name:"project_pos_dim"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor.*position_encoding_kwargs",description:`*<strong>*position_encoding_kwargs</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
Keyword arguments for the position encoding.`,name:"*position_encoding_kwargs"}]}}),dr=new F({}),pr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor",parameters:[{name:"modalities",val:": typing.Mapping[str, typing.Callable[..., typing.Tuple[torch.Tensor, typing.Optional[torch.Tensor], torch.Tensor]]]"},{name:"mask_probs",val:": typing.Union[typing.Mapping[str, float], NoneType] = None"},{name:"min_padding_size",val:": int = 2"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L3276",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor.modalities",description:`<strong>modalities</strong> (<code>Dict[str, PreprocessorType]</code>) &#x2014;
Dict mapping modality name to preprocessor.`,name:"modalities"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor.mask_probs",description:`<strong>mask_probs</strong> (<code>Dict[str, float]</code>) &#x2014;
Dict mapping modality name to masking probability of that modality.`,name:"mask_probs"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor.min_padding_size",description:`<strong>min_padding_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The minimum padding size for all modalities. The final output will have num_channels equal to the maximum
channels across all modalities plus min_padding_size.`,name:"min_padding_size"}]}}),mr=new F({}),hr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2011",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014;
Model configuration.`,name:"config"}]}}),ur=new F({}),fr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder",parameters:[{name:"config",val:""},{name:"output_num_channels",val:""},{name:"position_encoding_type",val:" = 'trainable'"},{name:"output_index_dims",val:" = None"},{name:"num_channels",val:" = 128"},{name:"subsampled_index_dims",val:" = None"},{name:"qk_channels",val:" = None"},{name:"v_channels",val:" = None"},{name:"num_heads",val:" = 1"},{name:"widening_factor",val:" = 1"},{name:"use_query_residual",val:" = False"},{name:"concat_preprocessed_input",val:" = False"},{name:"final_project",val:" = True"},{name:"position_encoding_only",val:" = False"},{name:"**position_encoding_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2035",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.output_num_channels",description:`<strong>output_num_channels</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of channels in the output. Will only be used in case <em>final_project</em> is set to <code>True</code>.`,name:"output_num_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.position_encoding_type",description:`<strong>position_encoding_type</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;trainable&#x201D;) &#x2014;
The type of position encoding to use. Can be either &#x201C;trainable&#x201D;, &#x201C;fourier&#x201D;, or &#x201C;none&#x201D;.`,name:"position_encoding_type"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.output_index_dims",description:`<strong>output_index_dims</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of dimensions of the output queries. Ignored if &#x2018;position_encoding_type&#x2019; == &#x2018;none&#x2019;.`,name:"output_index_dims"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of channels of the decoder queries. Ignored if &#x2018;position_encoding_type&#x2019; == &#x2018;none&#x2019;.`,name:"num_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.qk_channels",description:`<strong>qk_channels</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of channels of the queries and keys in the cross-attention layer.`,name:"qk_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.v_channels",description:`<strong>v_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
The number of channels of the values in the cross-attention layer.`,name:"v_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.num_heads",description:`<strong>num_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of attention heads in the cross-attention layer.`,name:"num_heads"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.widening_factor",description:`<strong>widening_factor</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The widening factor of the cross-attention layer.`,name:"widening_factor"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.use_query_residual",description:`<strong>use_query_residual</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a residual connection between the query and the output of the cross-attention layer.`,name:"use_query_residual"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.concat_preprocessed_input",description:`<strong>concat_preprocessed_input</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to concatenate the preprocessed input to the query.`,name:"concat_preprocessed_input"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.final_project",description:`<strong>final_project</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to project the output of the cross-attention layer to a target dimension.`,name:"final_project"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder.position_encoding_only",description:`<strong>position_encoding_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to only use this class to define output queries.`,name:"position_encoding_only"}]}}),gr=new F({}),vr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder",parameters:[{name:"config",val:""},{name:"**decoder_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2215",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014;
Model configuration.`,name:"config"}]}}),Pr=new F({}),wr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder",parameters:[{name:"config",val:""},{name:"output_image_shape",val:""},{name:"output_num_channels",val:" = 2"},{name:"rescale_factor",val:" = 100.0"},{name:"**decoder_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2255"}}),br=new F({}),yr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder",parameters:[{name:"config",val:""},{name:"output_shape",val:""},{name:"position_encoding_type",val:""},{name:"**decoder_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2284",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder.output_shape",description:`<strong>output_shape</strong> (<code>List[int]</code>) &#x2014;
Shape of the output as (batch_size, num_frames, height, width), excluding the channel dimension.`,name:"output_shape"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder.position_encoding_type",description:`<strong>position_encoding_type</strong> (<code>str</code>) &#x2014;
The type of position encoding to use. Can be either &#x201C;trainable&#x201D;, &#x201C;fourier&#x201D;, or &#x201C;none&#x201D;.`,name:"position_encoding_type"}]}}),$r=new F({}),Tr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder",parameters:[{name:"config",val:""},{name:"modalities",val:""},{name:"num_outputs",val:""},{name:"output_num_channels",val:""},{name:"min_padding_size",val:" = 2"},{name:"subsampled_index_dims",val:" = None"},{name:"**decoder_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2357",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.modalities",description:`<strong>modalities</strong> (<code>Dict[str, PerceiverAbstractDecoder]</code>) &#x2014;
Dictionary mapping modality name to the decoder of that modality.`,name:"modalities"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.num_outputs",description:`<strong>num_outputs</strong> (<code>int</code>) &#x2014;
The number of outputs of the decoder.`,name:"num_outputs"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.output_num_channels",description:`<strong>output_num_channels</strong> (<code>int</code>) &#x2014;
The number of channels in the output.`,name:"output_num_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.min_padding_size",description:`<strong>min_padding_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The minimum padding size for all modalities. The final output will have num_channels equal to the maximum
channels across all modalities plus min_padding_size.`,name:"min_padding_size"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder.subsampled_index_dims",description:`<strong>subsampled_index_dims</strong> (<code>Dict[str, PerceiverAbstractDecoder]</code>, <em>optional</em>) &#x2014;
Dictionary mapping modality name to the subsampled index dimensions to use for the decoder query of that
modality.`,name:"subsampled_index_dims"}]}}),Er=new F({}),Fr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor",parameters:[{name:"in_channels",val:""},{name:"out_channels",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2903",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor.in_channels",description:`<strong>in_channels</strong> (<code>int</code>) &#x2014;
Number of channels in the input.`,name:"in_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor.out_channels",description:`<strong>out_channels</strong> (<code>int</code>) &#x2014;
Number of channels in the output.`,name:"out_channels"}]}}),Cr=new F({}),jr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor",parameters:[{name:"config",val:""},{name:"in_channels",val:""},{name:"postproc_type",val:": str = 'patches'"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2875",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor.in_channels",description:`<strong>in_channels</strong> (<code>int</code>) &#x2014;
Number of channels in the input.`,name:"in_channels"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor.postproc_type",description:`<strong>postproc_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;patches&quot;</code>) &#x2014;
Postprocessor type to use. Currently, only &#x201C;patches&#x201D; is supported.`,name:"postproc_type"}]}}),Mr=new F({}),Ir=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor",parameters:[{name:"config",val:""},{name:"in_channels",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2855",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor.config",description:`<strong>config</strong> ([<em>PerceiverConfig</em>]) &#x2014;
Model configuration.`,name:"config"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor.in_channels",description:`<strong>in_channels</strong> (<code>int</code>) &#x2014;
Number of channels in the input.`,name:"in_channels"}]}}),qr=new F({}),zr=new T({props:{name:"class transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor",anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor",parameters:[{name:"modalities",val:": typing.Mapping[str, typing.Callable[..., typing.Any]]"},{name:"input_is_dict",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L2821",parametersDescription:[{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor.modalities",description:`<strong>modalities</strong> (<code>Dict[str, PostprocessorType]</code>) &#x2014;
Dictionary mapping modality name to postprocessor class for that modality.`,name:"modalities"},{anchor:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor.input_is_dict",description:`<strong>input_is_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, input is assumed to be dictionary structured, and outputs keep the same dictionary shape. If
False, input is a tensor which is sliced up during postprocessing by <em>modality_sizes</em>.`,name:"input_is_dict"}]}}),Ar=new F({}),Dr=new T({props:{name:"class transformers.PerceiverModel",anchor:"transformers.PerceiverModel",parameters:[{name:"config",val:""},{name:"decoder",val:" = None"},{name:"input_preprocessor",val:": typing.Callable[..., typing.Tuple[torch.Tensor, typing.Optional[torch.Tensor], torch.Tensor]] = None"},{name:"output_postprocessor",val:": typing.Callable[..., typing.Any] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L721",parametersDescription:[{anchor:"transformers.PerceiverModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"},{anchor:"transformers.PerceiverModel.decoder",description:`<strong>decoder</strong> (<em>DecoderType</em>, <em>optional</em>) &#x2014;
Optional decoder to use to decode the latent representation of the encoder. Examples include
<em>transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder</em>.`,name:"decoder"},{anchor:"transformers.PerceiverModel.input_preprocessor",description:`<strong>input_preprocessor</strong> (<em>PreprocessorType</em>, <em>optional</em>) &#x2014;
Optional input preprocessor to use. Examples include
<em>transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor</em>.`,name:"input_preprocessor"},{anchor:"transformers.PerceiverModel.output_postprocessor",description:`<strong>output_postprocessor</strong> (<em>PostprocessorType</em>, <em>optional</em>) &#x2014;
Optional output postprocessor to use. Examples include
<em>transformers.models.perceiver.modeling_perceiver.PerceiverImagePostprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor</em>,
<em>transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor</em>.`,name:"output_postprocessor"},{anchor:"transformers.PerceiverModel.Note",description:"<strong>Note</strong> that you can define your own decoders, preprocessors and/or postprocessors to fit your use-case. &#x2014;",name:"Note"}]}}),Lr=new T({props:{name:"forward",anchor:"transformers.PerceiverModel.forward",parameters:[{name:"inputs",val:""},{name:"attention_mask",val:" = None"},{name:"subsampled_output_points",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L757",parametersDescription:[{anchor:"transformers.PerceiverModel.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),no=new jt({props:{$$slots:{default:[Yw]},$$scope:{ctx:j}}}),Sr=new Mt({props:{code:`from transformers import PerceiverConfig, PerceiverTokenizer, PerceiverFeatureExtractor, PerceiverModel
from transformers.models.perceiver.modeling_perceiver import (
    PerceiverTextPreprocessor,
    PerceiverImagePreprocessor,
    PerceiverClassificationDecoder,
)
import torch
import requests
from PIL import Image

# EXAMPLE 1: using the Perceiver to classify texts
# - we define a TextPreprocessor, which can be used to embed tokens
# - we define a ClassificationDecoder, which can be used to decode the
# final hidden states of the latents to classification logits
# using trainable position embeddings
config = PerceiverConfig()
preprocessor = PerceiverTextPreprocessor(config)
decoder = PerceiverClassificationDecoder(
    config,
    num_channels=config.d_latents,
    trainable_position_encoding_kwargs=dict(num_channels=config.d_latents, index_dims=1),
    use_query_residual=True,
)
model = PerceiverModel(config, input_preprocessor=preprocessor, decoder=decoder)

# you can then do a forward pass as follows:
tokenizer = PerceiverTokenizer()
text = "hello world"
inputs = tokenizer(text, return_tensors="pt").input_ids

with torch.no_grad():
    outputs = model(inputs=inputs)
logits = outputs.logits

# to train, one can train the model using standard cross-entropy:
criterion = torch.nn.CrossEntropyLoss()

labels = torch.tensor([1])
loss = criterion(logits, labels)

# EXAMPLE 2: using the Perceiver to classify images
# - we define an ImagePreprocessor, which can be used to embed images
preprocessor = PerceiverImagePreprocessor(
    config,
    prep_type="conv1x1",
    spatial_downsample=1,
    out_channels=256,
    position_encoding_type="trainable",
    concat_or_add_pos="concat",
    project_pos_dim=256,
    trainable_position_encoding_kwargs=dict(
        num_channels=256,
        index_dims=config.image_size**2,
    ),
)

model = PerceiverModel(
    config,
    input_preprocessor=preprocessor,
    decoder=PerceiverClassificationDecoder(
        config,
        num_channels=config.d_latents,
        trainable_position_encoding_kwargs=dict(num_channels=config.d_latents, index_dims=1),
        use_query_residual=True,
    ),
)

# you can then do a forward pass as follows:
feature_extractor = PerceiverFeatureExtractor()
url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
inputs = feature_extractor(image, return_tensors="pt").pixel_values

with torch.no_grad():
    outputs = model(inputs=inputs)
logits = outputs.logits

# to train, one can train the model using standard cross-entropy:
criterion = torch.nn.CrossEntropyLoss()

labels = torch.tensor([1])
loss = criterion(logits, labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverConfig, PerceiverTokenizer, PerceiverFeatureExtractor, PerceiverModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.perceiver.modeling_perceiver <span class="hljs-keyword">import</span> (
<span class="hljs-meta">... </span>    PerceiverTextPreprocessor,
<span class="hljs-meta">... </span>    PerceiverImagePreprocessor,
<span class="hljs-meta">... </span>    PerceiverClassificationDecoder,
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># EXAMPLE 1: using the Perceiver to classify texts</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># - we define a TextPreprocessor, which can be used to embed tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># - we define a ClassificationDecoder, which can be used to decode the</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># final hidden states of the latents to classification logits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># using trainable position embeddings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = PerceiverConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>preprocessor = PerceiverTextPreprocessor(config)
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder = PerceiverClassificationDecoder(
<span class="hljs-meta">... </span>    config,
<span class="hljs-meta">... </span>    num_channels=config.d_latents,
<span class="hljs-meta">... </span>    trainable_position_encoding_kwargs=<span class="hljs-built_in">dict</span>(num_channels=config.d_latents, index_dims=<span class="hljs-number">1</span>),
<span class="hljs-meta">... </span>    use_query_residual=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverModel(config, input_preprocessor=preprocessor, decoder=decoder)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can then do a forward pass as follows:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = PerceiverTokenizer()
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;hello world&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># to train, one can train the model using standard cross-entropy:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>criterion = torch.nn.CrossEntropyLoss()

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = criterion(logits, labels)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># EXAMPLE 2: using the Perceiver to classify images</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># - we define an ImagePreprocessor, which can be used to embed images</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>preprocessor = PerceiverImagePreprocessor(
<span class="hljs-meta">... </span>    config,
<span class="hljs-meta">... </span>    prep_type=<span class="hljs-string">&quot;conv1x1&quot;</span>,
<span class="hljs-meta">... </span>    spatial_downsample=<span class="hljs-number">1</span>,
<span class="hljs-meta">... </span>    out_channels=<span class="hljs-number">256</span>,
<span class="hljs-meta">... </span>    position_encoding_type=<span class="hljs-string">&quot;trainable&quot;</span>,
<span class="hljs-meta">... </span>    concat_or_add_pos=<span class="hljs-string">&quot;concat&quot;</span>,
<span class="hljs-meta">... </span>    project_pos_dim=<span class="hljs-number">256</span>,
<span class="hljs-meta">... </span>    trainable_position_encoding_kwargs=<span class="hljs-built_in">dict</span>(
<span class="hljs-meta">... </span>        num_channels=<span class="hljs-number">256</span>,
<span class="hljs-meta">... </span>        index_dims=config.image_size**<span class="hljs-number">2</span>,
<span class="hljs-meta">... </span>    ),
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverModel(
<span class="hljs-meta">... </span>    config,
<span class="hljs-meta">... </span>    input_preprocessor=preprocessor,
<span class="hljs-meta">... </span>    decoder=PerceiverClassificationDecoder(
<span class="hljs-meta">... </span>        config,
<span class="hljs-meta">... </span>        num_channels=config.d_latents,
<span class="hljs-meta">... </span>        trainable_position_encoding_kwargs=<span class="hljs-built_in">dict</span>(num_channels=config.d_latents, index_dims=<span class="hljs-number">1</span>),
<span class="hljs-meta">... </span>        use_query_residual=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    ),
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can then do a forward pass as follows:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PerceiverFeatureExtractor()
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).pixel_values

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># to train, one can train the model using standard cross-entropy:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>criterion = torch.nn.CrossEntropyLoss()

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = criterion(logits, labels)`}}),Br=new F({}),Hr=new T({props:{name:"class transformers.PerceiverForMaskedLM",anchor:"transformers.PerceiverForMaskedLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L954",parametersDescription:[{anchor:"transformers.PerceiverForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Rr=new T({props:{name:"forward",anchor:"transformers.PerceiverForMaskedLM.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"},{name:"input_ids",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L985",parametersDescription:[{anchor:"transformers.PerceiverForMaskedLM.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForMaskedLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverMaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, num_latents, num_latents)</code>. Attentions weights after the attention softmax, used to compute the weighted average in the
self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),io=new jt({props:{$$slots:{default:[eb]},$$scope:{ctx:j}}}),Ur=new Mt({props:{code:`from transformers import PerceiverTokenizer, PerceiverForMaskedLM
import torch

tokenizer = PerceiverTokenizer.from_pretrained("deepmind/language-perceiver")
model = PerceiverForMaskedLM.from_pretrained("deepmind/language-perceiver")

# training
text = "This is an incomplete sentence where some words are missing."
inputs = tokenizer(text, padding="max_length", return_tensors="pt")
# mask " missing."
inputs["input_ids"][0, 52:61] = tokenizer.mask_token_id
labels = tokenizer(text, padding="max_length", return_tensors="pt").input_ids

outputs = model(**inputs, labels=labels)
loss = outputs.loss
logits = outputs.logits

# inference
text = "This is an incomplete sentence where some words are missing."
encoding = tokenizer(text, padding="max_length", return_tensors="pt")

# mask bytes corresponding to " missing.". Note that the model performs much better if the masked span starts with a space.
encoding["input_ids"][0, 52:61] = tokenizer.mask_token_id

# forward pass
with torch.no_grad():
    outputs = model(**encoding)
logits = outputs.logits

masked_tokens_predictions = logits[0, 52:61].argmax(dim=-1).tolist()
tokenizer.decode(masked_tokens_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverTokenizer, PerceiverForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = PerceiverTokenizer.from_pretrained(<span class="hljs-string">&quot;deepmind/language-perceiver&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForMaskedLM.from_pretrained(<span class="hljs-string">&quot;deepmind/language-perceiver&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># training</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an incomplete sentence where some words are missing.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(text, padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask &quot; missing.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs[<span class="hljs-string">&quot;input_ids&quot;</span>][<span class="hljs-number">0</span>, <span class="hljs-number">52</span>:<span class="hljs-number">61</span>] = tokenizer.mask_token_id
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(text, padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># inference</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;This is an incomplete sentence where some words are missing.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(text, padding=<span class="hljs-string">&quot;max_length&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask bytes corresponding to &quot; missing.&quot;. Note that the model performs much better if the masked span starts with a space.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>encoding[<span class="hljs-string">&quot;input_ids&quot;</span>][<span class="hljs-number">0</span>, <span class="hljs-number">52</span>:<span class="hljs-number">61</span>] = tokenizer.mask_token_id

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># forward pass</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**encoding)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span>masked_tokens_predictions = logits[<span class="hljs-number">0</span>, <span class="hljs-number">52</span>:<span class="hljs-number">61</span>].argmax(dim=-<span class="hljs-number">1</span>).tolist()
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(masked_tokens_predictions)
<span class="hljs-string">&#x27; missing.&#x27;</span>`}}),Kr=new F({}),Jr=new T({props:{name:"class transformers.PerceiverForSequenceClassification",anchor:"transformers.PerceiverForSequenceClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1081",parametersDescription:[{anchor:"transformers.PerceiverForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Zr=new T({props:{name:"forward",anchor:"transformers.PerceiverForSequenceClassification.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"},{name:"input_ids",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1102",parametersDescription:[{anchor:"transformers.PerceiverForSequenceClassification.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForSequenceClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If <code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),lo=new jt({props:{$$slots:{default:[tb]},$$scope:{ctx:j}}}),Qr=new Mt({props:{code:`from transformers import PerceiverTokenizer, PerceiverForSequenceClassification

tokenizer = PerceiverTokenizer.from_pretrained("deepmind/language-perceiver")
model = PerceiverForSequenceClassification.from_pretrained("deepmind/language-perceiver")

text = "hello world"
inputs = tokenizer(text, return_tensors="pt").input_ids
outputs = model(inputs=inputs)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverTokenizer, PerceiverForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = PerceiverTokenizer.from_pretrained(<span class="hljs-string">&quot;deepmind/language-perceiver&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;deepmind/language-perceiver&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&quot;hello world&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),Yr=new F({}),es=new T({props:{name:"class transformers.PerceiverForImageClassificationLearned",anchor:"transformers.PerceiverForImageClassificationLearned",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1204",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationLearned.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),rs=new T({props:{name:"forward",anchor:"transformers.PerceiverForImageClassificationLearned.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"},{name:"pixel_values",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1235",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationLearned.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForImageClassificationLearned.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),mo=new jt({props:{$$slots:{default:[ob]},$$scope:{ctx:j}}}),ss=new Mt({props:{code:`from transformers import PerceiverFeatureExtractor, PerceiverForImageClassificationLearned
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = PerceiverFeatureExtractor.from_pretrained("deepmind/vision-perceiver-learned")
model = PerceiverForImageClassificationLearned.from_pretrained("deepmind/vision-perceiver-learned")

inputs = feature_extractor(images=image, return_tensors="pt").pixel_values
outputs = model(inputs=inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = logits.argmax(-1).item()
print("Predicted class:", model.config.id2label[predicted_class_idx])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverFeatureExtractor, PerceiverForImageClassificationLearned
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PerceiverFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-learned&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForImageClassificationLearned.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-learned&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).pixel_values
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[predicted_class_idx])`}}),ns=new F({}),as=new T({props:{name:"class transformers.PerceiverForImageClassificationFourier",anchor:"transformers.PerceiverForImageClassificationFourier",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1343",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationFourier.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ls=new T({props:{name:"forward",anchor:"transformers.PerceiverForImageClassificationFourier.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"},{name:"pixel_values",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1372",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationFourier.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForImageClassificationFourier.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),uo=new jt({props:{$$slots:{default:[rb]},$$scope:{ctx:j}}}),ds=new Mt({props:{code:`from transformers import PerceiverFeatureExtractor, PerceiverForImageClassificationFourier
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = PerceiverFeatureExtractor.from_pretrained("deepmind/vision-perceiver-fourier")
model = PerceiverForImageClassificationFourier.from_pretrained("deepmind/vision-perceiver-fourier")

inputs = feature_extractor(images=image, return_tensors="pt").pixel_values
outputs = model(inputs=inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = logits.argmax(-1).item()
print("Predicted class:", model.config.id2label[predicted_class_idx])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverFeatureExtractor, PerceiverForImageClassificationFourier
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PerceiverFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-fourier&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForImageClassificationFourier.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-fourier&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).pixel_values
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[predicted_class_idx])`}}),ps=new F({}),ms=new T({props:{name:"class transformers.PerceiverForImageClassificationConvProcessing",anchor:"transformers.PerceiverForImageClassificationConvProcessing",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1479",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationConvProcessing.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),fs=new T({props:{name:"forward",anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"},{name:"pixel_values",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1509",parametersDescription:[{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForImageClassificationConvProcessing.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),go=new jt({props:{$$slots:{default:[sb]},$$scope:{ctx:j}}}),gs=new Mt({props:{code:`from transformers import PerceiverFeatureExtractor, PerceiverForImageClassificationConvProcessing
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = PerceiverFeatureExtractor.from_pretrained("deepmind/vision-perceiver-conv")
model = PerceiverForImageClassificationConvProcessing.from_pretrained("deepmind/vision-perceiver-conv")

inputs = feature_extractor(images=image, return_tensors="pt").pixel_values
outputs = model(inputs=inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = logits.argmax(-1).item()
print("Predicted class:", model.config.id2label[predicted_class_idx])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverFeatureExtractor, PerceiverForImageClassificationConvProcessing
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PerceiverFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-conv&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForImageClassificationConvProcessing.from_pretrained(<span class="hljs-string">&quot;deepmind/vision-perceiver-conv&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).pixel_values
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[predicted_class_idx])`}}),vs=new F({}),_s=new T({props:{name:"class transformers.PerceiverForOpticalFlow",anchor:"transformers.PerceiverForOpticalFlow",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1616",parametersDescription:[{anchor:"transformers.PerceiverForOpticalFlow.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),bs=new T({props:{name:"forward",anchor:"transformers.PerceiverForOpticalFlow.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1663",parametersDescription:[{anchor:"transformers.PerceiverForOpticalFlow.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForOpticalFlow.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForOpticalFlow.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForOpticalFlow.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForOpticalFlow.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForOpticalFlow.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForOpticalFlow.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the optical flow loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>.`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),_o=new jt({props:{$$slots:{default:[nb]},$$scope:{ctx:j}}}),ys=new Mt({props:{code:`from transformers import PerceiverForOpticalFlow
import torch

model = PerceiverForOpticalFlow.from_pretrained("deepmind/optical-flow-perceiver")

# in the Perceiver IO paper, the authors extract a 3 x 3 patch around each pixel,
# leading to 3 x 3 x 3 = 27 values for each pixel (as each pixel also has 3 color channels)
# patches have shape (batch_size, num_frames, num_channels, height, width)
# the authors train on resolutions of 368 x 496
patches = torch.randn(1, 2, 27, 368, 496)
outputs = model(inputs=patches)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverForOpticalFlow
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForOpticalFlow.from_pretrained(<span class="hljs-string">&quot;deepmind/optical-flow-perceiver&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># in the Perceiver IO paper, the authors extract a 3 x 3 patch around each pixel,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># leading to 3 x 3 x 3 = 27 values for each pixel (as each pixel also has 3 color channels)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># patches have shape (batch_size, num_frames, num_channels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># the authors train on resolutions of 368 x 496</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>patches = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">27</span>, <span class="hljs-number">368</span>, <span class="hljs-number">496</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=patches)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),ks=new F({}),$s=new T({props:{name:"class transformers.PerceiverForMultimodalAutoencoding",anchor:"transformers.PerceiverForMultimodalAutoencoding",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1756",parametersDescription:[{anchor:"transformers.PerceiverForMultimodalAutoencoding.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Fs=new T({props:{name:"forward",anchor:"transformers.PerceiverForMultimodalAutoencoding.forward",parameters:[{name:"inputs",val:" = None"},{name:"attention_mask",val:" = None"},{name:"subsampled_output_points",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"labels",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/perceiver/modeling_perceiver.py#L1872",parametersDescription:[{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.inputs",description:`<strong>inputs</strong> (<code>torch.FloatTensor</code>) &#x2014;
Inputs to the perceiver. Can be anything: images, text, audio, video, etc.`,name:"inputs"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>batch_size, sequence_length</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16027/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.PerceiverForMultimodalAutoencoding.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput"
>transformers.models.perceiver.modeling_perceiver.PerceiverClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"
>PerceiverConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
</ul>
`}}),yo=new jt({props:{$$slots:{default:[ab]},$$scope:{ctx:j}}}),Cs=new Mt({props:{code:`from transformers import PerceiverForMultimodalAutoencoding
import torch
import numpy as np

# create multimodal inputs
images = torch.randn((1, 16, 3, 224, 224))
audio = torch.randn((1, 30720, 1))
inputs = dict(image=images, audio=audio, label=torch.zeros((images.shape[0], 700)))

model = PerceiverForMultimodalAutoencoding.from_pretrained("deepmind/multimodal-perceiver")

# in the Perceiver IO paper, videos are auto-encoded in chunks
# each chunk subsamples different index dimensions of the image and audio modality decoder queries
nchunks = 128
image_chunk_size = np.prod((16, 224, 224)) // nchunks
audio_chunk_size = audio.shape[1] // model.config.samples_per_patch // nchunks
# process the first chunk
chunk_idx = 0
subsampling = {
    "image": torch.arange(image_chunk_size * chunk_idx, image_chunk_size * (chunk_idx + 1)),
    "audio": torch.arange(audio_chunk_size * chunk_idx, audio_chunk_size * (chunk_idx + 1)),
    "label": None,
}

outputs = model(inputs=inputs, subsampled_output_points=subsampling)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PerceiverForMultimodalAutoencoding
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># create multimodal inputs</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>images = torch.randn((<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = torch.randn((<span class="hljs-number">1</span>, <span class="hljs-number">30720</span>, <span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = <span class="hljs-built_in">dict</span>(image=images, audio=audio, label=torch.zeros((images.shape[<span class="hljs-number">0</span>], <span class="hljs-number">700</span>)))

<span class="hljs-meta">&gt;&gt;&gt; </span>model = PerceiverForMultimodalAutoencoding.from_pretrained(<span class="hljs-string">&quot;deepmind/multimodal-perceiver&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># in the Perceiver IO paper, videos are auto-encoded in chunks</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># each chunk subsamples different index dimensions of the image and audio modality decoder queries</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>nchunks = <span class="hljs-number">128</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_chunk_size = np.prod((<span class="hljs-number">16</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>)) // nchunks
<span class="hljs-meta">&gt;&gt;&gt; </span>audio_chunk_size = audio.shape[<span class="hljs-number">1</span>] // model.config.samples_per_patch // nchunks
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># process the first chunk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>chunk_idx = <span class="hljs-number">0</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>subsampling = {
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;image&quot;</span>: torch.arange(image_chunk_size * chunk_idx, image_chunk_size * (chunk_idx + <span class="hljs-number">1</span>)),
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;audio&quot;</span>: torch.arange(audio_chunk_size * chunk_idx, audio_chunk_size * (chunk_idx + <span class="hljs-number">1</span>)),
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-literal">None</span>,
<span class="hljs-meta">... </span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs=inputs, subsampled_output_points=subsampling)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){h=r("meta"),$=l(),w=r("h1"),k=r("a"),x=r("span"),u(y.$$.fragment),b=l(),E=r("span"),ep=a("Perceiver"),Tc=l(),Ie=r("h2"),It=r("a"),Kn=r("span"),u(To.$$.fragment),tp=l(),Jn=r("span"),op=a("Overview"),xc=l(),qt=r("p"),rp=a("The Perceiver IO model was proposed in "),xo=r("a"),sp=a(`Perceiver IO: A General Architecture for Structured Inputs &
Outputs`),np=a(` by Andrew Jaegle, Sebastian Borgeaud, Jean-Baptiste Alayrac, Carl Doersch,
Catalin Ionescu, David Ding, Skanda Koppula, Daniel Zoran, Andrew Brock, Evan Shelhamer, Olivier H\xE9naff, Matthew M.
Botvinick, Andrew Zisserman, Oriol Vinyals, Jo\xE3o Carreira.`),Ec=l(),zt=r("p"),ap=a("Perceiver IO is a generalization of "),Eo=r("a"),ip=a("Perceiver"),cp=a(` to handle arbitrary outputs in
addition to arbitrary inputs. The original Perceiver only produced a single classification label. In addition to
classification labels, Perceiver IO can produce (for example) language, optical flow, and multimodal videos with audio.
This is done using the same building blocks as the original Perceiver. The computational complexity of Perceiver IO is
linear in the input and output size and the bulk of the processing occurs in the latent space, allowing us to process
inputs and outputs that are much larger than can be handled by standard Transformers. This means, for example,
Perceiver IO can do BERT-style masked language modeling directly using bytes instead of tokenized inputs.`),Fc=l(),As=r("p"),lp=a("The abstract from the paper is the following:"),Cc=l(),Ds=r("p"),Gn=r("em"),dp=a(`The recently-proposed Perceiver model obtains good results on several domains (images, audio, multimodal, point
clouds) while scaling linearly in compute and memory with the input size. While the Perceiver supports many kinds of
inputs, it can only produce very simple outputs such as class scores. Perceiver IO overcomes this limitation without
sacrificing the original\u2019s appealing properties by learning to flexibly query the model\u2019s latent space to produce
outputs of arbitrary size and semantics. Perceiver IO still decouples model depth from data size and still scales
linearly with data size, but now with respect to both input and output sizes. The full Perceiver IO model achieves
strong results on tasks with highly structured output spaces, such as natural language and visual understanding,
StarCraft II, and multi-task and multi-modal domains. As highlights, Perceiver IO matches a Transformer-based BERT
baseline on the GLUE language benchmark without the need for input tokenization and achieves state-of-the-art
performance on Sintel optical flow estimation.`),jc=l(),Ns=r("p"),pp=a("Here\u2019s a TLDR explaining how Perceiver works:"),Mc=l(),Os=r("p"),mp=a(`The main problem with the self-attention mechanism of the Transformer is that the time and memory requirements scale
quadratically with the sequence length. Hence, models like BERT and RoBERTa are limited to a max sequence length of 512
tokens. Perceiver aims to solve this issue by, instead of performing self-attention on the inputs, perform it on a set
of latent variables, and only use the inputs for cross-attention. In this way, the time and memory requirements don\u2019t
depend on the length of the inputs anymore, as one uses a fixed amount of latent variables, like 256 or 512. These are
randomly initialized, after which they are trained end-to-end using backpropagation.`),Ic=l(),D=r("p"),hp=a("Internally, "),Ls=r("a"),up=a("PerceiverModel"),fp=a(" will create the latents, which is a tensor of shape "),Xn=r("code"),gp=a("(batch_size, num_latents, d_latents)"),vp=a(". One must provide "),Zn=r("code"),_p=a("inputs"),Pp=a(` (which could be text, images, audio, you name it!) to the model, which it will
use to perform cross-attention with the latents. The output of the Perceiver encoder is a tensor of the same shape. One
can then, similar to BERT, convert the last hidden states of the latents to classification logits by averaging along
the sequence dimension, and placing a linear layer on top of that to project the `),Qn=r("code"),wp=a("d_latents"),bp=a(" to "),Yn=r("code"),yp=a("num_labels"),kp=a("."),qc=l(),Ss=r("p"),$p=a(`This was the idea of the original Perceiver paper. However, it could only output classification logits. In a follow-up
work, PerceiverIO, they generalized it to let the model also produce outputs of arbitrary size. How, you might ask? The
idea is actually relatively simple: one defines outputs of an arbitrary size, and then applies cross-attention with the
last hidden states of the latents, using the outputs as queries, and the latents as keys and values.`),zc=l(),M=r("p"),Tp=a(`So let\u2019s say one wants to perform masked language modeling (BERT-style) with the Perceiver. As the Perceiver\u2019s input
length will not have an impact on the computation time of the self-attention layers, one can provide raw bytes,
providing `),ea=r("code"),xp=a("inputs"),Ep=a(` of length 2048 to the model. If one now masks out certain of these 2048 tokens, one can define the
`),ta=r("code"),Fp=a("outputs"),Cp=a(" as being of shape: "),oa=r("code"),jp=a("(batch_size, 2048, 768)"),Mp=a(`. Next, one performs cross-attention with the final hidden states
of the latents to update the `),ra=r("code"),Ip=a("outputs"),qp=a(" tensor. After cross-attention, one still has a tensor of shape "),sa=r("code"),zp=a("(batch_size, 2048, 768)"),Ap=a(`. One can then place a regular language modeling head on top, to project the last dimension to the
vocabulary size of the model, i.e. creating logits of shape `),na=r("code"),Dp=a("(batch_size, 2048, 262)"),Np=a(` (as Perceiver uses a vocabulary
size of 262 byte IDs).`),Ac=l(),At=r("img"),Dc=l(),Fo=r("small"),Op=a("Perceiver IO architecture. Taken from the "),Bs=r("a"),Lp=a("original paper"),Nc=l(),ve=r("p"),Sp=a("This model was contributed by "),Co=r("a"),Bp=a("nielsr"),Hp=a(`. The original code can be found
`),jo=r("a"),Wp=a("here"),Vp=a("."),Oc=l(),Hs=r("p"),Rp=a("Tips:"),Lc=l(),Dt=r("ul"),Mo=r("li"),Up=a("The quickest way to get started with the Perceiver is by checking the "),Io=r("a"),Kp=a(`tutorial
notebooks`),Jp=a("."),Gp=l(),qo=r("li"),Xp=a("Refer to the "),zo=r("a"),Zp=a("blog post"),Qp=a(` if you want to fully understand how the model works and
is implemented in the library. Note that the models available in the library only showcase some examples of what you can do
with the Perceiver. There are many more use cases, including question answering, named-entity recognition, object detection,
audio classification, video classification, etc.`),Sc=l(),Ao=r("p"),aa=r("strong"),Yp=a("Note"),em=a(":"),Bc=l(),Ws=r("ul"),_e=r("li"),tm=a("Perceiver does "),ia=r("strong"),om=a("not"),rm=a(" work with "),ca=r("code"),sm=a("torch.nn.DataParallel"),nm=a(" due to a bug in PyTorch, see "),Do=r("a"),am=a("issue #36035"),Hc=l(),qe=r("h2"),Nt=r("a"),la=r("span"),u(No.$$.fragment),im=l(),da=r("span"),cm=a("Perceiver specific outputs"),Wc=l(),ze=r("div"),u(Oo.$$.fragment),lm=l(),pa=r("p"),dm=a("Base class for Perceiver base model\u2019s outputs, with potential hidden states, attentions and cross-attentions."),Vc=l(),Ae=r("div"),u(Lo.$$.fragment),pm=l(),ma=r("p"),mm=a("Base class for Perceiver decoder outputs, with potential cross-attentions."),Rc=l(),De=r("div"),u(So.$$.fragment),hm=l(),ha=r("p"),um=a("Base class for Perceiver\u2019s masked language model outputs."),Uc=l(),Ne=r("div"),u(Bo.$$.fragment),fm=l(),ua=r("p"),gm=a(`Base class for Perceiver\u2019s outputs of sequence/image classification models, optical flow and multimodal
autoencoding.`),Kc=l(),Oe=r("h2"),Ot=r("a"),fa=r("span"),u(Ho.$$.fragment),vm=l(),ga=r("span"),_m=a("PerceiverConfig"),Jc=l(),N=r("div"),u(Wo.$$.fragment),Pm=l(),Le=r("p"),wm=a("This is the configuration class to store the configuration of a "),Vs=r("a"),bm=a("PerceiverModel"),ym=a(`. It is used to instantiate an
Perceiver model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the Perceiver
`),Vo=r("a"),km=a("deepmind/language-perceiver"),$m=a(" architecture."),Tm=l(),Se=r("p"),xm=a("Configuration objects inherit from "),Rs=r("a"),Em=a("PretrainedConfig"),Fm=a(` and can be used to control the model outputs. Read the
documentation from `),Us=r("a"),Cm=a("PretrainedConfig"),jm=a(" for more information."),Mm=l(),va=r("p"),Im=a("Example:"),qm=l(),u(Ro.$$.fragment),Gc=l(),Be=r("h2"),Lt=r("a"),_a=r("span"),u(Uo.$$.fragment),zm=l(),Pa=r("span"),Am=a("PerceiverTokenizer"),Xc=l(),Q=r("div"),u(Ko.$$.fragment),Dm=l(),wa=r("p"),Nm=a("Construct a Perceiver tokenizer. The Perceiver simply uses raw bytes utf-8 encoding."),Om=l(),Jo=r("p"),Lm=a("This tokenizer inherits from "),Ks=r("a"),Sm=a("PreTrainedTokenizer"),Bm=a(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Hm=l(),St=r("div"),u(Go.$$.fragment),Wm=l(),ba=r("p"),Vm=a(`Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of
sequences.`),Zc=l(),He=r("h2"),Bt=r("a"),ya=r("span"),u(Xo.$$.fragment),Rm=l(),ka=r("span"),Um=a("PerceiverFeatureExtractor"),Qc=l(),Y=r("div"),u(Zo.$$.fragment),Km=l(),$a=r("p"),Jm=a("Constructs a Perceiver feature extractor."),Gm=l(),Qo=r("p"),Xm=a("This feature extractor inherits from "),Js=r("a"),Zm=a("ImageFeatureExtractionMixin"),Qm=a(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Ym=l(),Pe=r("div"),u(Yo.$$.fragment),eh=l(),Ta=r("p"),th=a("Main method to prepare for the model one or several image(s)."),oh=l(),u(Ht.$$.fragment),Yc=l(),We=r("h2"),Wt=r("a"),xa=r("span"),u(er.$$.fragment),rh=l(),Ea=r("span"),sh=a("PerceiverTextPreprocessor"),el=l(),ae=r("div"),u(tr.$$.fragment),nh=l(),or=r("p"),ah=a("Text preprocessing for Perceiver Encoder. Can be used to embed "),Fa=r("code"),ih=a("inputs"),ch=a(" and add positional encodings."),lh=l(),rr=r("p"),dh=a("The dimensionality of the embeddings is determined by the "),Ca=r("code"),ph=a("d_model"),mh=a(" attribute of the configuration."),tl=l(),Ve=r("h2"),Vt=r("a"),ja=r("span"),u(sr.$$.fragment),hh=l(),Ma=r("span"),uh=a("PerceiverImagePreprocessor"),ol=l(),ie=r("div"),u(nr.$$.fragment),fh=l(),Ia=r("p"),gh=a("Image preprocessing for Perceiver Encoder."),vh=l(),ee=r("p"),_h=a("Note: the "),qa=r("em"),Ph=a("out_channels"),wh=a(" argument refers to the output channels of a convolutional layer, if "),za=r("em"),bh=a("prep_type"),yh=a(` is set to
\u201Cconv1x1\u201D or \u201Cconv\u201D. If one adds absolute position embeddings, one must make sure the `),Aa=r("em"),kh=a("num_channels"),$h=a(` of the
position encoding kwargs are set equal to the `),Da=r("em"),Th=a("out_channels"),xh=a("."),rl=l(),Re=r("h2"),Rt=r("a"),Na=r("span"),u(ar.$$.fragment),Eh=l(),Oa=r("span"),Fh=a("PerceiverOneHotPreprocessor"),sl=l(),Ue=r("div"),u(ir.$$.fragment),Ch=l(),La=r("p"),jh=a("One-hot preprocessor for Perceiver Encoder. Can be used to add a dummy index dimension to the input."),nl=l(),Ke=r("h2"),Ut=r("a"),Sa=r("span"),u(cr.$$.fragment),Mh=l(),Ba=r("span"),Ih=a("PerceiverAudioPreprocessor"),al=l(),Je=r("div"),u(lr.$$.fragment),qh=l(),Ha=r("p"),zh=a("Audio preprocessing for Perceiver Encoder."),il=l(),Ge=r("h2"),Kt=r("a"),Wa=r("span"),u(dr.$$.fragment),Ah=l(),Va=r("span"),Dh=a("PerceiverMultimodalPreprocessor"),cl=l(),ce=r("div"),u(pr.$$.fragment),Nh=l(),Ra=r("p"),Oh=a("Multimodal preprocessing for Perceiver Encoder."),Lh=l(),Ua=r("p"),Sh=a(`Inputs for each modality are preprocessed, then padded with trainable position embeddings to have the same number
of channels.`),ll=l(),Xe=r("h2"),Jt=r("a"),Ka=r("span"),u(mr.$$.fragment),Bh=l(),Ja=r("span"),Hh=a("PerceiverProjectionDecoder"),dl=l(),Ze=r("div"),u(hr.$$.fragment),Wh=l(),Ga=r("p"),Vh=a("Baseline projection decoder (no cross-attention)."),pl=l(),Qe=r("h2"),Gt=r("a"),Xa=r("span"),u(ur.$$.fragment),Rh=l(),Za=r("span"),Uh=a("PerceiverBasicDecoder"),ml=l(),le=r("div"),u(fr.$$.fragment),Kh=l(),Qa=r("p"),Jh=a(`Cross-attention-based decoder. This class can be used to decode the final hidden states of the latents using a
cross-attention operation, in which the latents produce keys and values.`),Gh=l(),Ya=r("p"),Xh=a("The shape of the output of this class depends on how one defines the output queries (also called decoder queries)."),hl=l(),Ye=r("h2"),Xt=r("a"),ei=r("span"),u(gr.$$.fragment),Zh=l(),ti=r("span"),Qh=a("PerceiverClassificationDecoder"),ul=l(),et=r("div"),u(vr.$$.fragment),Yh=l(),_r=r("p"),eu=a("Cross-attention based classification decoder. Light-weight wrapper of "),oi=r("code"),tu=a("PerceiverBasicDecoder"),ou=a(` for logit output.
Will turn the output of the Perceiver encoder which is of shape (batch_size, num_latents, d_latents) to a tensor of
shape (batch_size, num_labels). The queries are of shape (batch_size, 1, num_labels).`),fl=l(),tt=r("h2"),Zt=r("a"),ri=r("span"),u(Pr.$$.fragment),ru=l(),si=r("span"),su=a("PerceiverOpticalFlowDecoder"),gl=l(),ot=r("div"),u(wr.$$.fragment),nu=l(),ni=r("p"),au=a("Cross-attention based optical flow decoder."),vl=l(),rt=r("h2"),Qt=r("a"),ai=r("span"),u(br.$$.fragment),iu=l(),ii=r("span"),cu=a("PerceiverBasicVideoAutoencodingDecoder"),_l=l(),st=r("div"),u(yr.$$.fragment),lu=l(),kr=r("p"),du=a("Cross-attention based video-autoencoding decoder. Light-weight wrapper of ["),ci=r("em"),pu=a("PerceiverBasicDecoder"),mu=a(`] with video
reshaping logic.`),Pl=l(),nt=r("h2"),Yt=r("a"),li=r("span"),u($r.$$.fragment),hu=l(),di=r("span"),uu=a("PerceiverMultimodalDecoder"),wl=l(),de=r("div"),u(Tr.$$.fragment),fu=l(),xr=r("p"),gu=a("Multimodal decoding by composing uni-modal decoders. The "),pi=r("em"),vu=a("modalities"),_u=a(` argument of the constructor is a dictionary
mapping modality name to the decoder of that modality. That decoder will be used to construct queries for that
modality. Modality-specific queries are padded with trainable modality-specific parameters, after which they are
concatenated along the time dimension.`),Pu=l(),mi=r("p"),wu=a("Next, there is a shared cross attention operation across all modalities."),bl=l(),at=r("h2"),eo=r("a"),hi=r("span"),u(Er.$$.fragment),bu=l(),ui=r("span"),yu=a("PerceiverProjectionPostprocessor"),yl=l(),it=r("div"),u(Fr.$$.fragment),ku=l(),fi=r("p"),$u=a(`Projection postprocessing for Perceiver. Can be used to project the channels of the decoder output to a lower
dimension.`),kl=l(),ct=r("h2"),to=r("a"),gi=r("span"),u(Cr.$$.fragment),Tu=l(),vi=r("span"),xu=a("PerceiverAudioPostprocessor"),$l=l(),lt=r("div"),u(jr.$$.fragment),Eu=l(),_i=r("p"),Fu=a("Audio postprocessing for Perceiver. Can be used to convert the decoder output to audio features."),Tl=l(),dt=r("h2"),oo=r("a"),Pi=r("span"),u(Mr.$$.fragment),Cu=l(),wi=r("span"),ju=a("PerceiverClassificationPostprocessor"),xl=l(),pt=r("div"),u(Ir.$$.fragment),Mu=l(),bi=r("p"),Iu=a("Classification postprocessing for Perceiver. Can be used to convert the decoder output to classification logits."),El=l(),mt=r("h2"),ro=r("a"),yi=r("span"),u(qr.$$.fragment),qu=l(),ki=r("span"),zu=a("PerceiverMultimodalPostprocessor"),Fl=l(),ht=r("div"),u(zr.$$.fragment),Au=l(),$i=r("p"),Du=a(`Multimodal postprocessing for Perceiver. Can be used to combine modality-specific postprocessors into a single
postprocessor.`),Cl=l(),ut=r("h2"),so=r("a"),Ti=r("span"),u(Ar.$$.fragment),Nu=l(),xi=r("span"),Ou=a("PerceiverModel"),jl=l(),pe=r("div"),u(Dr.$$.fragment),Lu=l(),Nr=r("p"),Su=a(`The Perceiver: a scalable, fully attentional architecture.
This model is a PyTorch `),Or=r("a"),Bu=a("torch.nn.Module"),Hu=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Wu=l(),S=r("div"),u(Lr.$$.fragment),Vu=l(),ft=r("p"),Ru=a("The "),Gs=r("a"),Uu=a("PerceiverModel"),Ku=a(" forward method, overrides the "),Ei=r("code"),Ju=a("__call__"),Gu=a(" special method."),Xu=l(),u(no.$$.fragment),Zu=l(),Fi=r("p"),Qu=a("Examples:"),Yu=l(),u(Sr.$$.fragment),Ml=l(),gt=r("h2"),ao=r("a"),Ci=r("span"),u(Br.$$.fragment),ef=l(),ji=r("span"),tf=a("PerceiverForMaskedLM"),Il=l(),me=r("div"),u(Hr.$$.fragment),of=l(),Wr=r("p"),rf=a(`Example use of Perceiver for masked language modeling.
This model is a PyTorch `),Vr=r("a"),sf=a("torch.nn.Module"),nf=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),af=l(),B=r("div"),u(Rr.$$.fragment),cf=l(),vt=r("p"),lf=a("The "),Xs=r("a"),df=a("PerceiverForMaskedLM"),pf=a(" forward method, overrides the "),Mi=r("code"),mf=a("__call__"),hf=a(" special method."),uf=l(),u(io.$$.fragment),ff=l(),Ii=r("p"),gf=a("Examples:"),vf=l(),u(Ur.$$.fragment),ql=l(),_t=r("h2"),co=r("a"),qi=r("span"),u(Kr.$$.fragment),_f=l(),zi=r("span"),Pf=a("PerceiverForSequenceClassification"),zl=l(),he=r("div"),u(Jr.$$.fragment),wf=l(),Gr=r("p"),bf=a(`Example use of Perceiver for text classification.
This model is a PyTorch `),Xr=r("a"),yf=a("torch.nn.Module"),kf=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),$f=l(),H=r("div"),u(Zr.$$.fragment),Tf=l(),Pt=r("p"),xf=a("The "),Zs=r("a"),Ef=a("PerceiverForSequenceClassification"),Ff=a(" forward method, overrides the "),Ai=r("code"),Cf=a("__call__"),jf=a(" special method."),Mf=l(),u(lo.$$.fragment),If=l(),Di=r("p"),qf=a("Examples:"),zf=l(),u(Qr.$$.fragment),Al=l(),wt=r("h2"),po=r("a"),Ni=r("span"),u(Yr.$$.fragment),Af=l(),Oi=r("span"),Df=a("PerceiverForImageClassificationLearned"),Dl=l(),q=r("div"),u(es.$$.fragment),Nf=l(),Li=r("p"),Of=a("Example use of Perceiver for image classification, for tasks such as ImageNet."),Lf=l(),Si=r("p"),Sf=a(`This model uses learned position embeddings. In other words, this model is not given any privileged information about
the structure of images. As shown in the paper, this model can achieve a top-1 accuracy of 72.7 on ImageNet.`),Bf=l(),W=r("p"),Qs=r("a"),Hf=a("PerceiverForImageClassificationLearned"),Wf=a(" uses "),Ys=r("a"),Vf=a("PerceiverImagePreprocessor"),Rf=a(`
(with `),Bi=r("code"),Uf=a('prep_type="conv1x1"'),Kf=a(`) to preprocess the input images, and
`),en=r("a"),Jf=a("PerceiverClassificationDecoder"),Gf=a(` to decode the latent representation of
`),tn=r("a"),Xf=a("PerceiverModel"),Zf=a(" into classification logits."),Qf=l(),ts=r("p"),Yf=a("This model is a PyTorch "),os=r("a"),eg=a("torch.nn.Module"),tg=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),og=l(),V=r("div"),u(rs.$$.fragment),rg=l(),bt=r("p"),sg=a("The "),on=r("a"),ng=a("PerceiverForImageClassificationLearned"),ag=a(" forward method, overrides the "),Hi=r("code"),ig=a("__call__"),cg=a(" special method."),lg=l(),u(mo.$$.fragment),dg=l(),Wi=r("p"),pg=a("Examples:"),mg=l(),u(ss.$$.fragment),Nl=l(),yt=r("h2"),ho=r("a"),Vi=r("span"),u(ns.$$.fragment),hg=l(),Ri=r("span"),ug=a("PerceiverForImageClassificationFourier"),Ol=l(),z=r("div"),u(as.$$.fragment),fg=l(),Ui=r("p"),gg=a("Example use of Perceiver for image classification, for tasks such as ImageNet."),vg=l(),Ki=r("p"),_g=a(`This model uses fixed 2D Fourier position embeddings. As shown in the paper, this model can achieve a top-1 accuracy of
79.0 on ImageNet, and 84.5 when pre-trained on a large-scale dataset (i.e. JFT).`),Pg=l(),R=r("p"),rn=r("a"),wg=a("PerceiverForImageClassificationLearned"),bg=a(" uses "),sn=r("a"),yg=a("PerceiverImagePreprocessor"),kg=a(`
(with `),Ji=r("code"),$g=a('prep_type="pixels"'),Tg=a(`) to preprocess the input images, and
`),nn=r("a"),xg=a("PerceiverClassificationDecoder"),Eg=a(` to decode the latent representation of
`),an=r("a"),Fg=a("PerceiverModel"),Cg=a(" into classification logits."),jg=l(),is=r("p"),Mg=a("This model is a PyTorch "),cs=r("a"),Ig=a("torch.nn.Module"),qg=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),zg=l(),U=r("div"),u(ls.$$.fragment),Ag=l(),kt=r("p"),Dg=a("The "),cn=r("a"),Ng=a("PerceiverForImageClassificationFourier"),Og=a(" forward method, overrides the "),Gi=r("code"),Lg=a("__call__"),Sg=a(" special method."),Bg=l(),u(uo.$$.fragment),Hg=l(),Xi=r("p"),Wg=a("Examples:"),Vg=l(),u(ds.$$.fragment),Ll=l(),$t=r("h2"),fo=r("a"),Zi=r("span"),u(ps.$$.fragment),Rg=l(),Qi=r("span"),Ug=a("PerceiverForImageClassificationConvProcessing"),Sl=l(),A=r("div"),u(ms.$$.fragment),Kg=l(),Yi=r("p"),Jg=a("Example use of Perceiver for image classification, for tasks such as ImageNet."),Gg=l(),ec=r("p"),Xg=a(`This model uses a 2D conv+maxpool preprocessing network. As shown in the paper, this model can achieve a top-1 accuracy
of 82.1 on ImageNet.`),Zg=l(),K=r("p"),ln=r("a"),Qg=a("PerceiverForImageClassificationLearned"),Yg=a(" uses "),dn=r("a"),ev=a("PerceiverImagePreprocessor"),tv=a(`
(with `),tc=r("code"),ov=a('prep_type="conv"'),rv=a(`) to preprocess the input images, and
`),pn=r("a"),sv=a("PerceiverClassificationDecoder"),nv=a(` to decode the latent representation of
`),mn=r("a"),av=a("PerceiverModel"),iv=a(" into classification logits."),cv=l(),hs=r("p"),lv=a("This model is a PyTorch "),us=r("a"),dv=a("torch.nn.Module"),pv=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),mv=l(),J=r("div"),u(fs.$$.fragment),hv=l(),Tt=r("p"),uv=a("The "),hn=r("a"),fv=a("PerceiverForImageClassificationConvProcessing"),gv=a(" forward method, overrides the "),oc=r("code"),vv=a("__call__"),_v=a(" special method."),Pv=l(),u(go.$$.fragment),wv=l(),rc=r("p"),bv=a("Examples:"),yv=l(),u(gs.$$.fragment),Bl=l(),xt=r("h2"),vo=r("a"),sc=r("span"),u(vs.$$.fragment),kv=l(),nc=r("span"),$v=a("PerceiverForOpticalFlow"),Hl=l(),O=r("div"),u(_s.$$.fragment),Tv=l(),L=r("p"),xv=a("Example use of Perceiver for optical flow, for tasks such as Sintel and KITTI. "),un=r("a"),Ev=a("PerceiverForOpticalFlow"),Fv=a(` uses
`),fn=r("a"),Cv=a("PerceiverImagePreprocessor"),jv=a(" (with "),ac=r("em"),Mv=a("prep_type=\u201Cpatches\u201D"),Iv=a(`) to preprocess the
input images, and `),gn=r("a"),qv=a("PerceiverOpticalFlowDecoder"),zv=a(` to decode the latent
representation of `),vn=r("a"),Av=a("PerceiverModel"),Dv=a("."),Nv=l(),ic=r("p"),Ov=a(`As input, one concatenates 2 subsequent frames along the channel dimension and extract a 3 x 3 patch around each pixel
(leading to 3 x 3 x 3 x 2 = 54 values for each pixel). Fixed Fourier position encodings are used to encode the position
of each pixel in the patch. Next, one applies the Perceiver encoder. To decode, one queries the latent representation
using the same encoding used for the input.`),Lv=l(),Ps=r("p"),Sv=a("This model is a PyTorch "),ws=r("a"),Bv=a("torch.nn.Module"),Hv=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Wv=l(),G=r("div"),u(bs.$$.fragment),Vv=l(),Et=r("p"),Rv=a("The "),_n=r("a"),Uv=a("PerceiverForOpticalFlow"),Kv=a(" forward method, overrides the "),cc=r("code"),Jv=a("__call__"),Gv=a(" special method."),Xv=l(),u(_o.$$.fragment),Zv=l(),lc=r("p"),Qv=a("Examples:"),Yv=l(),u(ys.$$.fragment),Wl=l(),Ft=r("h2"),Po=r("a"),dc=r("span"),u(ks.$$.fragment),e_=l(),pc=r("span"),t_=a("PerceiverForMultimodalAutoencoding"),Vl=l(),C=r("div"),u($s.$$.fragment),o_=l(),mc=r("p"),r_=a("Example use of Perceiver for multimodal (video) autoencoding, for tasks such as Kinetics-700."),s_=l(),wo=r("p"),Pn=r("a"),n_=a("PerceiverForMultimodalAutoencoding"),a_=a(" uses "),wn=r("a"),i_=a("PerceiverMultimodalPreprocessor"),c_=a(` to
preprocess the 3 modalities: images, audio and class labels. This preprocessor uses modality-specific preprocessors to
preprocess every modality separately, after which they are concatenated. Trainable position embeddings are used to pad
each modality to the same number of channels to make concatenation along the time dimension possible. Next, one applies
the Perceiver encoder.`),l_=l(),we=r("p"),bn=r("a"),d_=a("PerceiverMultimodalDecoder"),p_=a(` is used to decode the latent representation of
`),yn=r("a"),m_=a("PerceiverModel"),h_=a(`. This decoder uses each modality-specific decoder to construct queries. The decoder queries are
created based on the inputs after preprocessing. However, autoencoding an entire video in a single forward pass is
computationally infeasible, hence one only uses parts of the decoder queries to do cross-attention with the latent
representation. This is determined by the subsampled indices for each modality, which can be provided as additional
input to the forward pass of `),kn=r("a"),u_=a("PerceiverForMultimodalAutoencoding"),f_=a("."),g_=l(),bo=r("p"),$n=r("a"),v_=a("PerceiverMultimodalDecoder"),__=a(` also pads the decoder queries of the different
modalities to the same number of channels, in order to concatenate them along the time dimension. Next, cross-attention
is performed with the latent representation of `),Tn=r("a"),P_=a("PerceiverModel"),w_=a("."),b_=l(),Ts=r("p"),y_=a("Finally, "),hc=r("code"),k_=a("PerceiverMultiModalPostprocessor"),$_=a(` is used to turn this tensor into an
actual video. It first splits up the output into the different modalities, and then applies the respective
postprocessor for each modality.`),T_=l(),uc=r("p"),x_=a(`Note that, by masking the classification label during evaluation (i.e. simply providing a tensor of zeros for the
\u201Clabel\u201D modality), this auto-encoding model becomes a Kinetics 700 video classifier.`),E_=l(),xs=r("p"),F_=a("This model is a PyTorch "),Es=r("a"),C_=a("torch.nn.Module"),j_=a(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),M_=l(),X=r("div"),u(Fs.$$.fragment),I_=l(),Ct=r("p"),q_=a("The "),xn=r("a"),z_=a("PerceiverForMultimodalAutoencoding"),A_=a(" forward method, overrides the "),fc=r("code"),D_=a("__call__"),N_=a(" special method."),O_=l(),u(yo.$$.fragment),L_=l(),gc=r("p"),S_=a("Examples:"),B_=l(),u(Cs.$$.fragment),this.h()},l(t){const p=Xw('[data-svelte="svelte-1phssyn"]',document.head);h=s(p,"META",{name:!0,content:!0}),p.forEach(o),$=d(t),w=s(t,"H1",{class:!0});var js=n(w);k=s(js,"A",{id:!0,class:!0,href:!0});var vc=n(k);x=s(vc,"SPAN",{});var _c=n(x);f(y.$$.fragment,_c),_c.forEach(o),vc.forEach(o),b=d(js),E=s(js,"SPAN",{});var Pc=n(E);ep=i(Pc,"Perceiver"),Pc.forEach(o),js.forEach(o),Tc=d(t),Ie=s(t,"H2",{class:!0});var Ms=n(Ie);It=s(Ms,"A",{id:!0,class:!0,href:!0});var wc=n(It);Kn=s(wc,"SPAN",{});var bc=n(Kn);f(To.$$.fragment,bc),bc.forEach(o),wc.forEach(o),tp=d(Ms),Jn=s(Ms,"SPAN",{});var yc=n(Jn);op=i(yc,"Overview"),yc.forEach(o),Ms.forEach(o),xc=d(t),qt=s(t,"P",{});var Is=n(qt);rp=i(Is,"The Perceiver IO model was proposed in "),xo=s(Is,"A",{href:!0,rel:!0});var R_=n(xo);sp=i(R_,`Perceiver IO: A General Architecture for Structured Inputs &
Outputs`),R_.forEach(o),np=i(Is,` by Andrew Jaegle, Sebastian Borgeaud, Jean-Baptiste Alayrac, Carl Doersch,
Catalin Ionescu, David Ding, Skanda Koppula, Daniel Zoran, Andrew Brock, Evan Shelhamer, Olivier H\xE9naff, Matthew M.
Botvinick, Andrew Zisserman, Oriol Vinyals, Jo\xE3o Carreira.`),Is.forEach(o),Ec=d(t),zt=s(t,"P",{});var Ul=n(zt);ap=i(Ul,"Perceiver IO is a generalization of "),Eo=s(Ul,"A",{href:!0,rel:!0});var U_=n(Eo);ip=i(U_,"Perceiver"),U_.forEach(o),cp=i(Ul,` to handle arbitrary outputs in
addition to arbitrary inputs. The original Perceiver only produced a single classification label. In addition to
classification labels, Perceiver IO can produce (for example) language, optical flow, and multimodal videos with audio.
This is done using the same building blocks as the original Perceiver. The computational complexity of Perceiver IO is
linear in the input and output size and the bulk of the processing occurs in the latent space, allowing us to process
inputs and outputs that are much larger than can be handled by standard Transformers. This means, for example,
Perceiver IO can do BERT-style masked language modeling directly using bytes instead of tokenized inputs.`),Ul.forEach(o),Fc=d(t),As=s(t,"P",{});var K_=n(As);lp=i(K_,"The abstract from the paper is the following:"),K_.forEach(o),Cc=d(t),Ds=s(t,"P",{});var J_=n(Ds);Gn=s(J_,"EM",{});var G_=n(Gn);dp=i(G_,`The recently-proposed Perceiver model obtains good results on several domains (images, audio, multimodal, point
clouds) while scaling linearly in compute and memory with the input size. While the Perceiver supports many kinds of
inputs, it can only produce very simple outputs such as class scores. Perceiver IO overcomes this limitation without
sacrificing the original\u2019s appealing properties by learning to flexibly query the model\u2019s latent space to produce
outputs of arbitrary size and semantics. Perceiver IO still decouples model depth from data size and still scales
linearly with data size, but now with respect to both input and output sizes. The full Perceiver IO model achieves
strong results on tasks with highly structured output spaces, such as natural language and visual understanding,
StarCraft II, and multi-task and multi-modal domains. As highlights, Perceiver IO matches a Transformer-based BERT
baseline on the GLUE language benchmark without the need for input tokenization and achieves state-of-the-art
performance on Sintel optical flow estimation.`),G_.forEach(o),J_.forEach(o),jc=d(t),Ns=s(t,"P",{});var X_=n(Ns);pp=i(X_,"Here\u2019s a TLDR explaining how Perceiver works:"),X_.forEach(o),Mc=d(t),Os=s(t,"P",{});var Z_=n(Os);mp=i(Z_,`The main problem with the self-attention mechanism of the Transformer is that the time and memory requirements scale
quadratically with the sequence length. Hence, models like BERT and RoBERTa are limited to a max sequence length of 512
tokens. Perceiver aims to solve this issue by, instead of performing self-attention on the inputs, perform it on a set
of latent variables, and only use the inputs for cross-attention. In this way, the time and memory requirements don\u2019t
depend on the length of the inputs anymore, as one uses a fixed amount of latent variables, like 256 or 512. These are
randomly initialized, after which they are trained end-to-end using backpropagation.`),Z_.forEach(o),Ic=d(t),D=s(t,"P",{});var te=n(D);hp=i(te,"Internally, "),Ls=s(te,"A",{href:!0});var Q_=n(Ls);up=i(Q_,"PerceiverModel"),Q_.forEach(o),fp=i(te," will create the latents, which is a tensor of shape "),Xn=s(te,"CODE",{});var Y_=n(Xn);gp=i(Y_,"(batch_size, num_latents, d_latents)"),Y_.forEach(o),vp=i(te,". One must provide "),Zn=s(te,"CODE",{});var eP=n(Zn);_p=i(eP,"inputs"),eP.forEach(o),Pp=i(te,` (which could be text, images, audio, you name it!) to the model, which it will
use to perform cross-attention with the latents. The output of the Perceiver encoder is a tensor of the same shape. One
can then, similar to BERT, convert the last hidden states of the latents to classification logits by averaging along
the sequence dimension, and placing a linear layer on top of that to project the `),Qn=s(te,"CODE",{});var tP=n(Qn);wp=i(tP,"d_latents"),tP.forEach(o),bp=i(te," to "),Yn=s(te,"CODE",{});var oP=n(Yn);yp=i(oP,"num_labels"),oP.forEach(o),kp=i(te,"."),te.forEach(o),qc=d(t),Ss=s(t,"P",{});var rP=n(Ss);$p=i(rP,`This was the idea of the original Perceiver paper. However, it could only output classification logits. In a follow-up
work, PerceiverIO, they generalized it to let the model also produce outputs of arbitrary size. How, you might ask? The
idea is actually relatively simple: one defines outputs of an arbitrary size, and then applies cross-attention with the
last hidden states of the latents, using the outputs as queries, and the latents as keys and values.`),rP.forEach(o),zc=d(t),M=s(t,"P",{});var Z=n(M);Tp=i(Z,`So let\u2019s say one wants to perform masked language modeling (BERT-style) with the Perceiver. As the Perceiver\u2019s input
length will not have an impact on the computation time of the self-attention layers, one can provide raw bytes,
providing `),ea=s(Z,"CODE",{});var sP=n(ea);xp=i(sP,"inputs"),sP.forEach(o),Ep=i(Z,` of length 2048 to the model. If one now masks out certain of these 2048 tokens, one can define the
`),ta=s(Z,"CODE",{});var nP=n(ta);Fp=i(nP,"outputs"),nP.forEach(o),Cp=i(Z," as being of shape: "),oa=s(Z,"CODE",{});var aP=n(oa);jp=i(aP,"(batch_size, 2048, 768)"),aP.forEach(o),Mp=i(Z,`. Next, one performs cross-attention with the final hidden states
of the latents to update the `),ra=s(Z,"CODE",{});var iP=n(ra);Ip=i(iP,"outputs"),iP.forEach(o),qp=i(Z," tensor. After cross-attention, one still has a tensor of shape "),sa=s(Z,"CODE",{});var cP=n(sa);zp=i(cP,"(batch_size, 2048, 768)"),cP.forEach(o),Ap=i(Z,`. One can then place a regular language modeling head on top, to project the last dimension to the
vocabulary size of the model, i.e. creating logits of shape `),na=s(Z,"CODE",{});var lP=n(na);Dp=i(lP,"(batch_size, 2048, 262)"),lP.forEach(o),Np=i(Z,` (as Perceiver uses a vocabulary
size of 262 byte IDs).`),Z.forEach(o),Ac=d(t),At=s(t,"IMG",{src:!0,alt:!0,width:!0}),Dc=d(t),Fo=s(t,"SMALL",{});var H_=n(Fo);Op=i(H_,"Perceiver IO architecture. Taken from the "),Bs=s(H_,"A",{href:!0});var dP=n(Bs);Lp=i(dP,"original paper"),dP.forEach(o),H_.forEach(o),Nc=d(t),ve=s(t,"P",{});var En=n(ve);Sp=i(En,"This model was contributed by "),Co=s(En,"A",{href:!0,rel:!0});var pP=n(Co);Bp=i(pP,"nielsr"),pP.forEach(o),Hp=i(En,`. The original code can be found
`),jo=s(En,"A",{href:!0,rel:!0});var mP=n(jo);Wp=i(mP,"here"),mP.forEach(o),Vp=i(En,"."),En.forEach(o),Oc=d(t),Hs=s(t,"P",{});var hP=n(Hs);Rp=i(hP,"Tips:"),hP.forEach(o),Lc=d(t),Dt=s(t,"UL",{});var Kl=n(Dt);Mo=s(Kl,"LI",{});var Jl=n(Mo);Up=i(Jl,"The quickest way to get started with the Perceiver is by checking the "),Io=s(Jl,"A",{href:!0,rel:!0});var uP=n(Io);Kp=i(uP,`tutorial
notebooks`),uP.forEach(o),Jp=i(Jl,"."),Jl.forEach(o),Gp=d(Kl),qo=s(Kl,"LI",{});var Gl=n(qo);Xp=i(Gl,"Refer to the "),zo=s(Gl,"A",{href:!0,rel:!0});var fP=n(zo);Zp=i(fP,"blog post"),fP.forEach(o),Qp=i(Gl,` if you want to fully understand how the model works and
is implemented in the library. Note that the models available in the library only showcase some examples of what you can do
with the Perceiver. There are many more use cases, including question answering, named-entity recognition, object detection,
audio classification, video classification, etc.`),Gl.forEach(o),Kl.forEach(o),Sc=d(t),Ao=s(t,"P",{});var W_=n(Ao);aa=s(W_,"STRONG",{});var gP=n(aa);Yp=i(gP,"Note"),gP.forEach(o),em=i(W_,":"),W_.forEach(o),Bc=d(t),Ws=s(t,"UL",{});var vP=n(Ws);_e=s(vP,"LI",{});var qs=n(_e);tm=i(qs,"Perceiver does "),ia=s(qs,"STRONG",{});var _P=n(ia);om=i(_P,"not"),_P.forEach(o),rm=i(qs," work with "),ca=s(qs,"CODE",{});var PP=n(ca);sm=i(PP,"torch.nn.DataParallel"),PP.forEach(o),nm=i(qs," due to a bug in PyTorch, see "),Do=s(qs,"A",{href:!0,rel:!0});var wP=n(Do);am=i(wP,"issue #36035"),wP.forEach(o),qs.forEach(o),vP.forEach(o),Hc=d(t),qe=s(t,"H2",{class:!0});var Xl=n(qe);Nt=s(Xl,"A",{id:!0,class:!0,href:!0});var bP=n(Nt);la=s(bP,"SPAN",{});var yP=n(la);f(No.$$.fragment,yP),yP.forEach(o),bP.forEach(o),im=d(Xl),da=s(Xl,"SPAN",{});var kP=n(da);cm=i(kP,"Perceiver specific outputs"),kP.forEach(o),Xl.forEach(o),Wc=d(t),ze=s(t,"DIV",{class:!0});var Zl=n(ze);f(Oo.$$.fragment,Zl),lm=d(Zl),pa=s(Zl,"P",{});var $P=n(pa);dm=i($P,"Base class for Perceiver base model\u2019s outputs, with potential hidden states, attentions and cross-attentions."),$P.forEach(o),Zl.forEach(o),Vc=d(t),Ae=s(t,"DIV",{class:!0});var Ql=n(Ae);f(Lo.$$.fragment,Ql),pm=d(Ql),ma=s(Ql,"P",{});var TP=n(ma);mm=i(TP,"Base class for Perceiver decoder outputs, with potential cross-attentions."),TP.forEach(o),Ql.forEach(o),Rc=d(t),De=s(t,"DIV",{class:!0});var Yl=n(De);f(So.$$.fragment,Yl),hm=d(Yl),ha=s(Yl,"P",{});var xP=n(ha);um=i(xP,"Base class for Perceiver\u2019s masked language model outputs."),xP.forEach(o),Yl.forEach(o),Uc=d(t),Ne=s(t,"DIV",{class:!0});var ed=n(Ne);f(Bo.$$.fragment,ed),fm=d(ed),ua=s(ed,"P",{});var EP=n(ua);gm=i(EP,`Base class for Perceiver\u2019s outputs of sequence/image classification models, optical flow and multimodal
autoencoding.`),EP.forEach(o),ed.forEach(o),Kc=d(t),Oe=s(t,"H2",{class:!0});var td=n(Oe);Ot=s(td,"A",{id:!0,class:!0,href:!0});var FP=n(Ot);fa=s(FP,"SPAN",{});var CP=n(fa);f(Ho.$$.fragment,CP),CP.forEach(o),FP.forEach(o),vm=d(td),ga=s(td,"SPAN",{});var jP=n(ga);_m=i(jP,"PerceiverConfig"),jP.forEach(o),td.forEach(o),Jc=d(t),N=s(t,"DIV",{class:!0});var be=n(N);f(Wo.$$.fragment,be),Pm=d(be),Le=s(be,"P",{});var Fn=n(Le);wm=i(Fn,"This is the configuration class to store the configuration of a "),Vs=s(Fn,"A",{href:!0});var MP=n(Vs);bm=i(MP,"PerceiverModel"),MP.forEach(o),ym=i(Fn,`. It is used to instantiate an
Perceiver model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the Perceiver
`),Vo=s(Fn,"A",{href:!0,rel:!0});var IP=n(Vo);km=i(IP,"deepmind/language-perceiver"),IP.forEach(o),$m=i(Fn," architecture."),Fn.forEach(o),Tm=d(be),Se=s(be,"P",{});var Cn=n(Se);xm=i(Cn,"Configuration objects inherit from "),Rs=s(Cn,"A",{href:!0});var qP=n(Rs);Em=i(qP,"PretrainedConfig"),qP.forEach(o),Fm=i(Cn,` and can be used to control the model outputs. Read the
documentation from `),Us=s(Cn,"A",{href:!0});var zP=n(Us);Cm=i(zP,"PretrainedConfig"),zP.forEach(o),jm=i(Cn," for more information."),Cn.forEach(o),Mm=d(be),va=s(be,"P",{});var AP=n(va);Im=i(AP,"Example:"),AP.forEach(o),qm=d(be),f(Ro.$$.fragment,be),be.forEach(o),Gc=d(t),Be=s(t,"H2",{class:!0});var od=n(Be);Lt=s(od,"A",{id:!0,class:!0,href:!0});var DP=n(Lt);_a=s(DP,"SPAN",{});var NP=n(_a);f(Uo.$$.fragment,NP),NP.forEach(o),DP.forEach(o),zm=d(od),Pa=s(od,"SPAN",{});var OP=n(Pa);Am=i(OP,"PerceiverTokenizer"),OP.forEach(o),od.forEach(o),Xc=d(t),Q=s(t,"DIV",{class:!0});var ko=n(Q);f(Ko.$$.fragment,ko),Dm=d(ko),wa=s(ko,"P",{});var LP=n(wa);Nm=i(LP,"Construct a Perceiver tokenizer. The Perceiver simply uses raw bytes utf-8 encoding."),LP.forEach(o),Om=d(ko),Jo=s(ko,"P",{});var rd=n(Jo);Lm=i(rd,"This tokenizer inherits from "),Ks=s(rd,"A",{href:!0});var SP=n(Ks);Sm=i(SP,"PreTrainedTokenizer"),SP.forEach(o),Bm=i(rd,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),rd.forEach(o),Hm=d(ko),St=s(ko,"DIV",{class:!0});var sd=n(St);f(Go.$$.fragment,sd),Wm=d(sd),ba=s(sd,"P",{});var BP=n(ba);Vm=i(BP,`Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of
sequences.`),BP.forEach(o),sd.forEach(o),ko.forEach(o),Zc=d(t),He=s(t,"H2",{class:!0});var nd=n(He);Bt=s(nd,"A",{id:!0,class:!0,href:!0});var HP=n(Bt);ya=s(HP,"SPAN",{});var WP=n(ya);f(Xo.$$.fragment,WP),WP.forEach(o),HP.forEach(o),Rm=d(nd),ka=s(nd,"SPAN",{});var VP=n(ka);Um=i(VP,"PerceiverFeatureExtractor"),VP.forEach(o),nd.forEach(o),Qc=d(t),Y=s(t,"DIV",{class:!0});var $o=n(Y);f(Zo.$$.fragment,$o),Km=d($o),$a=s($o,"P",{});var RP=n($a);Jm=i(RP,"Constructs a Perceiver feature extractor."),RP.forEach(o),Gm=d($o),Qo=s($o,"P",{});var ad=n(Qo);Xm=i(ad,"This feature extractor inherits from "),Js=s(ad,"A",{href:!0});var UP=n(Js);Zm=i(UP,"ImageFeatureExtractionMixin"),UP.forEach(o),Qm=i(ad,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ad.forEach(o),Ym=d($o),Pe=s($o,"DIV",{class:!0});var jn=n(Pe);f(Yo.$$.fragment,jn),eh=d(jn),Ta=s(jn,"P",{});var KP=n(Ta);th=i(KP,"Main method to prepare for the model one or several image(s)."),KP.forEach(o),oh=d(jn),f(Ht.$$.fragment,jn),jn.forEach(o),$o.forEach(o),Yc=d(t),We=s(t,"H2",{class:!0});var id=n(We);Wt=s(id,"A",{id:!0,class:!0,href:!0});var JP=n(Wt);xa=s(JP,"SPAN",{});var GP=n(xa);f(er.$$.fragment,GP),GP.forEach(o),JP.forEach(o),rh=d(id),Ea=s(id,"SPAN",{});var XP=n(Ea);sh=i(XP,"PerceiverTextPreprocessor"),XP.forEach(o),id.forEach(o),el=d(t),ae=s(t,"DIV",{class:!0});var Mn=n(ae);f(tr.$$.fragment,Mn),nh=d(Mn),or=s(Mn,"P",{});var cd=n(or);ah=i(cd,"Text preprocessing for Perceiver Encoder. Can be used to embed "),Fa=s(cd,"CODE",{});var ZP=n(Fa);ih=i(ZP,"inputs"),ZP.forEach(o),ch=i(cd," and add positional encodings."),cd.forEach(o),lh=d(Mn),rr=s(Mn,"P",{});var ld=n(rr);dh=i(ld,"The dimensionality of the embeddings is determined by the "),Ca=s(ld,"CODE",{});var QP=n(Ca);ph=i(QP,"d_model"),QP.forEach(o),mh=i(ld," attribute of the configuration."),ld.forEach(o),Mn.forEach(o),tl=d(t),Ve=s(t,"H2",{class:!0});var dd=n(Ve);Vt=s(dd,"A",{id:!0,class:!0,href:!0});var YP=n(Vt);ja=s(YP,"SPAN",{});var e1=n(ja);f(sr.$$.fragment,e1),e1.forEach(o),YP.forEach(o),hh=d(dd),Ma=s(dd,"SPAN",{});var t1=n(Ma);uh=i(t1,"PerceiverImagePreprocessor"),t1.forEach(o),dd.forEach(o),ol=d(t),ie=s(t,"DIV",{class:!0});var In=n(ie);f(nr.$$.fragment,In),fh=d(In),Ia=s(In,"P",{});var o1=n(Ia);gh=i(o1,"Image preprocessing for Perceiver Encoder."),o1.forEach(o),vh=d(In),ee=s(In,"P",{});var ye=n(ee);_h=i(ye,"Note: the "),qa=s(ye,"EM",{});var r1=n(qa);Ph=i(r1,"out_channels"),r1.forEach(o),wh=i(ye," argument refers to the output channels of a convolutional layer, if "),za=s(ye,"EM",{});var s1=n(za);bh=i(s1,"prep_type"),s1.forEach(o),yh=i(ye,` is set to
\u201Cconv1x1\u201D or \u201Cconv\u201D. If one adds absolute position embeddings, one must make sure the `),Aa=s(ye,"EM",{});var n1=n(Aa);kh=i(n1,"num_channels"),n1.forEach(o),$h=i(ye,` of the
position encoding kwargs are set equal to the `),Da=s(ye,"EM",{});var a1=n(Da);Th=i(a1,"out_channels"),a1.forEach(o),xh=i(ye,"."),ye.forEach(o),In.forEach(o),rl=d(t),Re=s(t,"H2",{class:!0});var pd=n(Re);Rt=s(pd,"A",{id:!0,class:!0,href:!0});var i1=n(Rt);Na=s(i1,"SPAN",{});var c1=n(Na);f(ar.$$.fragment,c1),c1.forEach(o),i1.forEach(o),Eh=d(pd),Oa=s(pd,"SPAN",{});var l1=n(Oa);Fh=i(l1,"PerceiverOneHotPreprocessor"),l1.forEach(o),pd.forEach(o),sl=d(t),Ue=s(t,"DIV",{class:!0});var md=n(Ue);f(ir.$$.fragment,md),Ch=d(md),La=s(md,"P",{});var d1=n(La);jh=i(d1,"One-hot preprocessor for Perceiver Encoder. Can be used to add a dummy index dimension to the input."),d1.forEach(o),md.forEach(o),nl=d(t),Ke=s(t,"H2",{class:!0});var hd=n(Ke);Ut=s(hd,"A",{id:!0,class:!0,href:!0});var p1=n(Ut);Sa=s(p1,"SPAN",{});var m1=n(Sa);f(cr.$$.fragment,m1),m1.forEach(o),p1.forEach(o),Mh=d(hd),Ba=s(hd,"SPAN",{});var h1=n(Ba);Ih=i(h1,"PerceiverAudioPreprocessor"),h1.forEach(o),hd.forEach(o),al=d(t),Je=s(t,"DIV",{class:!0});var ud=n(Je);f(lr.$$.fragment,ud),qh=d(ud),Ha=s(ud,"P",{});var u1=n(Ha);zh=i(u1,"Audio preprocessing for Perceiver Encoder."),u1.forEach(o),ud.forEach(o),il=d(t),Ge=s(t,"H2",{class:!0});var fd=n(Ge);Kt=s(fd,"A",{id:!0,class:!0,href:!0});var f1=n(Kt);Wa=s(f1,"SPAN",{});var g1=n(Wa);f(dr.$$.fragment,g1),g1.forEach(o),f1.forEach(o),Ah=d(fd),Va=s(fd,"SPAN",{});var v1=n(Va);Dh=i(v1,"PerceiverMultimodalPreprocessor"),v1.forEach(o),fd.forEach(o),cl=d(t),ce=s(t,"DIV",{class:!0});var qn=n(ce);f(pr.$$.fragment,qn),Nh=d(qn),Ra=s(qn,"P",{});var _1=n(Ra);Oh=i(_1,"Multimodal preprocessing for Perceiver Encoder."),_1.forEach(o),Lh=d(qn),Ua=s(qn,"P",{});var P1=n(Ua);Sh=i(P1,`Inputs for each modality are preprocessed, then padded with trainable position embeddings to have the same number
of channels.`),P1.forEach(o),qn.forEach(o),ll=d(t),Xe=s(t,"H2",{class:!0});var gd=n(Xe);Jt=s(gd,"A",{id:!0,class:!0,href:!0});var w1=n(Jt);Ka=s(w1,"SPAN",{});var b1=n(Ka);f(mr.$$.fragment,b1),b1.forEach(o),w1.forEach(o),Bh=d(gd),Ja=s(gd,"SPAN",{});var y1=n(Ja);Hh=i(y1,"PerceiverProjectionDecoder"),y1.forEach(o),gd.forEach(o),dl=d(t),Ze=s(t,"DIV",{class:!0});var vd=n(Ze);f(hr.$$.fragment,vd),Wh=d(vd),Ga=s(vd,"P",{});var k1=n(Ga);Vh=i(k1,"Baseline projection decoder (no cross-attention)."),k1.forEach(o),vd.forEach(o),pl=d(t),Qe=s(t,"H2",{class:!0});var _d=n(Qe);Gt=s(_d,"A",{id:!0,class:!0,href:!0});var $1=n(Gt);Xa=s($1,"SPAN",{});var T1=n(Xa);f(ur.$$.fragment,T1),T1.forEach(o),$1.forEach(o),Rh=d(_d),Za=s(_d,"SPAN",{});var x1=n(Za);Uh=i(x1,"PerceiverBasicDecoder"),x1.forEach(o),_d.forEach(o),ml=d(t),le=s(t,"DIV",{class:!0});var zn=n(le);f(fr.$$.fragment,zn),Kh=d(zn),Qa=s(zn,"P",{});var E1=n(Qa);Jh=i(E1,`Cross-attention-based decoder. This class can be used to decode the final hidden states of the latents using a
cross-attention operation, in which the latents produce keys and values.`),E1.forEach(o),Gh=d(zn),Ya=s(zn,"P",{});var F1=n(Ya);Xh=i(F1,"The shape of the output of this class depends on how one defines the output queries (also called decoder queries)."),F1.forEach(o),zn.forEach(o),hl=d(t),Ye=s(t,"H2",{class:!0});var Pd=n(Ye);Xt=s(Pd,"A",{id:!0,class:!0,href:!0});var C1=n(Xt);ei=s(C1,"SPAN",{});var j1=n(ei);f(gr.$$.fragment,j1),j1.forEach(o),C1.forEach(o),Zh=d(Pd),ti=s(Pd,"SPAN",{});var M1=n(ti);Qh=i(M1,"PerceiverClassificationDecoder"),M1.forEach(o),Pd.forEach(o),ul=d(t),et=s(t,"DIV",{class:!0});var wd=n(et);f(vr.$$.fragment,wd),Yh=d(wd),_r=s(wd,"P",{});var bd=n(_r);eu=i(bd,"Cross-attention based classification decoder. Light-weight wrapper of "),oi=s(bd,"CODE",{});var I1=n(oi);tu=i(I1,"PerceiverBasicDecoder"),I1.forEach(o),ou=i(bd,` for logit output.
Will turn the output of the Perceiver encoder which is of shape (batch_size, num_latents, d_latents) to a tensor of
shape (batch_size, num_labels). The queries are of shape (batch_size, 1, num_labels).`),bd.forEach(o),wd.forEach(o),fl=d(t),tt=s(t,"H2",{class:!0});var yd=n(tt);Zt=s(yd,"A",{id:!0,class:!0,href:!0});var q1=n(Zt);ri=s(q1,"SPAN",{});var z1=n(ri);f(Pr.$$.fragment,z1),z1.forEach(o),q1.forEach(o),ru=d(yd),si=s(yd,"SPAN",{});var A1=n(si);su=i(A1,"PerceiverOpticalFlowDecoder"),A1.forEach(o),yd.forEach(o),gl=d(t),ot=s(t,"DIV",{class:!0});var kd=n(ot);f(wr.$$.fragment,kd),nu=d(kd),ni=s(kd,"P",{});var D1=n(ni);au=i(D1,"Cross-attention based optical flow decoder."),D1.forEach(o),kd.forEach(o),vl=d(t),rt=s(t,"H2",{class:!0});var $d=n(rt);Qt=s($d,"A",{id:!0,class:!0,href:!0});var N1=n(Qt);ai=s(N1,"SPAN",{});var O1=n(ai);f(br.$$.fragment,O1),O1.forEach(o),N1.forEach(o),iu=d($d),ii=s($d,"SPAN",{});var L1=n(ii);cu=i(L1,"PerceiverBasicVideoAutoencodingDecoder"),L1.forEach(o),$d.forEach(o),_l=d(t),st=s(t,"DIV",{class:!0});var Td=n(st);f(yr.$$.fragment,Td),lu=d(Td),kr=s(Td,"P",{});var xd=n(kr);du=i(xd,"Cross-attention based video-autoencoding decoder. Light-weight wrapper of ["),ci=s(xd,"EM",{});var S1=n(ci);pu=i(S1,"PerceiverBasicDecoder"),S1.forEach(o),mu=i(xd,`] with video
reshaping logic.`),xd.forEach(o),Td.forEach(o),Pl=d(t),nt=s(t,"H2",{class:!0});var Ed=n(nt);Yt=s(Ed,"A",{id:!0,class:!0,href:!0});var B1=n(Yt);li=s(B1,"SPAN",{});var H1=n(li);f($r.$$.fragment,H1),H1.forEach(o),B1.forEach(o),hu=d(Ed),di=s(Ed,"SPAN",{});var W1=n(di);uu=i(W1,"PerceiverMultimodalDecoder"),W1.forEach(o),Ed.forEach(o),wl=d(t),de=s(t,"DIV",{class:!0});var An=n(de);f(Tr.$$.fragment,An),fu=d(An),xr=s(An,"P",{});var Fd=n(xr);gu=i(Fd,"Multimodal decoding by composing uni-modal decoders. The "),pi=s(Fd,"EM",{});var V1=n(pi);vu=i(V1,"modalities"),V1.forEach(o),_u=i(Fd,` argument of the constructor is a dictionary
mapping modality name to the decoder of that modality. That decoder will be used to construct queries for that
modality. Modality-specific queries are padded with trainable modality-specific parameters, after which they are
concatenated along the time dimension.`),Fd.forEach(o),Pu=d(An),mi=s(An,"P",{});var R1=n(mi);wu=i(R1,"Next, there is a shared cross attention operation across all modalities."),R1.forEach(o),An.forEach(o),bl=d(t),at=s(t,"H2",{class:!0});var Cd=n(at);eo=s(Cd,"A",{id:!0,class:!0,href:!0});var U1=n(eo);hi=s(U1,"SPAN",{});var K1=n(hi);f(Er.$$.fragment,K1),K1.forEach(o),U1.forEach(o),bu=d(Cd),ui=s(Cd,"SPAN",{});var J1=n(ui);yu=i(J1,"PerceiverProjectionPostprocessor"),J1.forEach(o),Cd.forEach(o),yl=d(t),it=s(t,"DIV",{class:!0});var jd=n(it);f(Fr.$$.fragment,jd),ku=d(jd),fi=s(jd,"P",{});var G1=n(fi);$u=i(G1,`Projection postprocessing for Perceiver. Can be used to project the channels of the decoder output to a lower
dimension.`),G1.forEach(o),jd.forEach(o),kl=d(t),ct=s(t,"H2",{class:!0});var Md=n(ct);to=s(Md,"A",{id:!0,class:!0,href:!0});var X1=n(to);gi=s(X1,"SPAN",{});var Z1=n(gi);f(Cr.$$.fragment,Z1),Z1.forEach(o),X1.forEach(o),Tu=d(Md),vi=s(Md,"SPAN",{});var Q1=n(vi);xu=i(Q1,"PerceiverAudioPostprocessor"),Q1.forEach(o),Md.forEach(o),$l=d(t),lt=s(t,"DIV",{class:!0});var Id=n(lt);f(jr.$$.fragment,Id),Eu=d(Id),_i=s(Id,"P",{});var Y1=n(_i);Fu=i(Y1,"Audio postprocessing for Perceiver. Can be used to convert the decoder output to audio features."),Y1.forEach(o),Id.forEach(o),Tl=d(t),dt=s(t,"H2",{class:!0});var qd=n(dt);oo=s(qd,"A",{id:!0,class:!0,href:!0});var e2=n(oo);Pi=s(e2,"SPAN",{});var t2=n(Pi);f(Mr.$$.fragment,t2),t2.forEach(o),e2.forEach(o),Cu=d(qd),wi=s(qd,"SPAN",{});var o2=n(wi);ju=i(o2,"PerceiverClassificationPostprocessor"),o2.forEach(o),qd.forEach(o),xl=d(t),pt=s(t,"DIV",{class:!0});var zd=n(pt);f(Ir.$$.fragment,zd),Mu=d(zd),bi=s(zd,"P",{});var r2=n(bi);Iu=i(r2,"Classification postprocessing for Perceiver. Can be used to convert the decoder output to classification logits."),r2.forEach(o),zd.forEach(o),El=d(t),mt=s(t,"H2",{class:!0});var Ad=n(mt);ro=s(Ad,"A",{id:!0,class:!0,href:!0});var s2=n(ro);yi=s(s2,"SPAN",{});var n2=n(yi);f(qr.$$.fragment,n2),n2.forEach(o),s2.forEach(o),qu=d(Ad),ki=s(Ad,"SPAN",{});var a2=n(ki);zu=i(a2,"PerceiverMultimodalPostprocessor"),a2.forEach(o),Ad.forEach(o),Fl=d(t),ht=s(t,"DIV",{class:!0});var Dd=n(ht);f(zr.$$.fragment,Dd),Au=d(Dd),$i=s(Dd,"P",{});var i2=n($i);Du=i(i2,`Multimodal postprocessing for Perceiver. Can be used to combine modality-specific postprocessors into a single
postprocessor.`),i2.forEach(o),Dd.forEach(o),Cl=d(t),ut=s(t,"H2",{class:!0});var Nd=n(ut);so=s(Nd,"A",{id:!0,class:!0,href:!0});var c2=n(so);Ti=s(c2,"SPAN",{});var l2=n(Ti);f(Ar.$$.fragment,l2),l2.forEach(o),c2.forEach(o),Nu=d(Nd),xi=s(Nd,"SPAN",{});var d2=n(xi);Ou=i(d2,"PerceiverModel"),d2.forEach(o),Nd.forEach(o),jl=d(t),pe=s(t,"DIV",{class:!0});var Dn=n(pe);f(Dr.$$.fragment,Dn),Lu=d(Dn),Nr=s(Dn,"P",{});var Od=n(Nr);Su=i(Od,`The Perceiver: a scalable, fully attentional architecture.
This model is a PyTorch `),Or=s(Od,"A",{href:!0,rel:!0});var p2=n(Or);Bu=i(p2,"torch.nn.Module"),p2.forEach(o),Hu=i(Od,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Od.forEach(o),Wu=d(Dn),S=s(Dn,"DIV",{class:!0});var ke=n(S);f(Lr.$$.fragment,ke),Vu=d(ke),ft=s(ke,"P",{});var Nn=n(ft);Ru=i(Nn,"The "),Gs=s(Nn,"A",{href:!0});var m2=n(Gs);Uu=i(m2,"PerceiverModel"),m2.forEach(o),Ku=i(Nn," forward method, overrides the "),Ei=s(Nn,"CODE",{});var h2=n(Ei);Ju=i(h2,"__call__"),h2.forEach(o),Gu=i(Nn," special method."),Nn.forEach(o),Xu=d(ke),f(no.$$.fragment,ke),Zu=d(ke),Fi=s(ke,"P",{});var u2=n(Fi);Qu=i(u2,"Examples:"),u2.forEach(o),Yu=d(ke),f(Sr.$$.fragment,ke),ke.forEach(o),Dn.forEach(o),Ml=d(t),gt=s(t,"H2",{class:!0});var Ld=n(gt);ao=s(Ld,"A",{id:!0,class:!0,href:!0});var f2=n(ao);Ci=s(f2,"SPAN",{});var g2=n(Ci);f(Br.$$.fragment,g2),g2.forEach(o),f2.forEach(o),ef=d(Ld),ji=s(Ld,"SPAN",{});var v2=n(ji);tf=i(v2,"PerceiverForMaskedLM"),v2.forEach(o),Ld.forEach(o),Il=d(t),me=s(t,"DIV",{class:!0});var On=n(me);f(Hr.$$.fragment,On),of=d(On),Wr=s(On,"P",{});var Sd=n(Wr);rf=i(Sd,`Example use of Perceiver for masked language modeling.
This model is a PyTorch `),Vr=s(Sd,"A",{href:!0,rel:!0});var _2=n(Vr);sf=i(_2,"torch.nn.Module"),_2.forEach(o),nf=i(Sd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Sd.forEach(o),af=d(On),B=s(On,"DIV",{class:!0});var $e=n(B);f(Rr.$$.fragment,$e),cf=d($e),vt=s($e,"P",{});var Ln=n(vt);lf=i(Ln,"The "),Xs=s(Ln,"A",{href:!0});var P2=n(Xs);df=i(P2,"PerceiverForMaskedLM"),P2.forEach(o),pf=i(Ln," forward method, overrides the "),Mi=s(Ln,"CODE",{});var w2=n(Mi);mf=i(w2,"__call__"),w2.forEach(o),hf=i(Ln," special method."),Ln.forEach(o),uf=d($e),f(io.$$.fragment,$e),ff=d($e),Ii=s($e,"P",{});var b2=n(Ii);gf=i(b2,"Examples:"),b2.forEach(o),vf=d($e),f(Ur.$$.fragment,$e),$e.forEach(o),On.forEach(o),ql=d(t),_t=s(t,"H2",{class:!0});var Bd=n(_t);co=s(Bd,"A",{id:!0,class:!0,href:!0});var y2=n(co);qi=s(y2,"SPAN",{});var k2=n(qi);f(Kr.$$.fragment,k2),k2.forEach(o),y2.forEach(o),_f=d(Bd),zi=s(Bd,"SPAN",{});var $2=n(zi);Pf=i($2,"PerceiverForSequenceClassification"),$2.forEach(o),Bd.forEach(o),zl=d(t),he=s(t,"DIV",{class:!0});var Sn=n(he);f(Jr.$$.fragment,Sn),wf=d(Sn),Gr=s(Sn,"P",{});var Hd=n(Gr);bf=i(Hd,`Example use of Perceiver for text classification.
This model is a PyTorch `),Xr=s(Hd,"A",{href:!0,rel:!0});var T2=n(Xr);yf=i(T2,"torch.nn.Module"),T2.forEach(o),kf=i(Hd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Hd.forEach(o),$f=d(Sn),H=s(Sn,"DIV",{class:!0});var Te=n(H);f(Zr.$$.fragment,Te),Tf=d(Te),Pt=s(Te,"P",{});var Bn=n(Pt);xf=i(Bn,"The "),Zs=s(Bn,"A",{href:!0});var x2=n(Zs);Ef=i(x2,"PerceiverForSequenceClassification"),x2.forEach(o),Ff=i(Bn," forward method, overrides the "),Ai=s(Bn,"CODE",{});var E2=n(Ai);Cf=i(E2,"__call__"),E2.forEach(o),jf=i(Bn," special method."),Bn.forEach(o),Mf=d(Te),f(lo.$$.fragment,Te),If=d(Te),Di=s(Te,"P",{});var F2=n(Di);qf=i(F2,"Examples:"),F2.forEach(o),zf=d(Te),f(Qr.$$.fragment,Te),Te.forEach(o),Sn.forEach(o),Al=d(t),wt=s(t,"H2",{class:!0});var Wd=n(wt);po=s(Wd,"A",{id:!0,class:!0,href:!0});var C2=n(po);Ni=s(C2,"SPAN",{});var j2=n(Ni);f(Yr.$$.fragment,j2),j2.forEach(o),C2.forEach(o),Af=d(Wd),Oi=s(Wd,"SPAN",{});var M2=n(Oi);Df=i(M2,"PerceiverForImageClassificationLearned"),M2.forEach(o),Wd.forEach(o),Dl=d(t),q=s(t,"DIV",{class:!0});var oe=n(q);f(es.$$.fragment,oe),Nf=d(oe),Li=s(oe,"P",{});var I2=n(Li);Of=i(I2,"Example use of Perceiver for image classification, for tasks such as ImageNet."),I2.forEach(o),Lf=d(oe),Si=s(oe,"P",{});var q2=n(Si);Sf=i(q2,`This model uses learned position embeddings. In other words, this model is not given any privileged information about
the structure of images. As shown in the paper, this model can achieve a top-1 accuracy of 72.7 on ImageNet.`),q2.forEach(o),Bf=d(oe),W=s(oe,"P",{});var ue=n(W);Qs=s(ue,"A",{href:!0});var z2=n(Qs);Hf=i(z2,"PerceiverForImageClassificationLearned"),z2.forEach(o),Wf=i(ue," uses "),Ys=s(ue,"A",{href:!0});var A2=n(Ys);Vf=i(A2,"PerceiverImagePreprocessor"),A2.forEach(o),Rf=i(ue,`
(with `),Bi=s(ue,"CODE",{});var D2=n(Bi);Uf=i(D2,'prep_type="conv1x1"'),D2.forEach(o),Kf=i(ue,`) to preprocess the input images, and
`),en=s(ue,"A",{href:!0});var N2=n(en);Jf=i(N2,"PerceiverClassificationDecoder"),N2.forEach(o),Gf=i(ue,` to decode the latent representation of
`),tn=s(ue,"A",{href:!0});var O2=n(tn);Xf=i(O2,"PerceiverModel"),O2.forEach(o),Zf=i(ue," into classification logits."),ue.forEach(o),Qf=d(oe),ts=s(oe,"P",{});var Vd=n(ts);Yf=i(Vd,"This model is a PyTorch "),os=s(Vd,"A",{href:!0,rel:!0});var L2=n(os);eg=i(L2,"torch.nn.Module"),L2.forEach(o),tg=i(Vd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Vd.forEach(o),og=d(oe),V=s(oe,"DIV",{class:!0});var xe=n(V);f(rs.$$.fragment,xe),rg=d(xe),bt=s(xe,"P",{});var Hn=n(bt);sg=i(Hn,"The "),on=s(Hn,"A",{href:!0});var S2=n(on);ng=i(S2,"PerceiverForImageClassificationLearned"),S2.forEach(o),ag=i(Hn," forward method, overrides the "),Hi=s(Hn,"CODE",{});var B2=n(Hi);ig=i(B2,"__call__"),B2.forEach(o),cg=i(Hn," special method."),Hn.forEach(o),lg=d(xe),f(mo.$$.fragment,xe),dg=d(xe),Wi=s(xe,"P",{});var H2=n(Wi);pg=i(H2,"Examples:"),H2.forEach(o),mg=d(xe),f(ss.$$.fragment,xe),xe.forEach(o),oe.forEach(o),Nl=d(t),yt=s(t,"H2",{class:!0});var Rd=n(yt);ho=s(Rd,"A",{id:!0,class:!0,href:!0});var W2=n(ho);Vi=s(W2,"SPAN",{});var V2=n(Vi);f(ns.$$.fragment,V2),V2.forEach(o),W2.forEach(o),hg=d(Rd),Ri=s(Rd,"SPAN",{});var R2=n(Ri);ug=i(R2,"PerceiverForImageClassificationFourier"),R2.forEach(o),Rd.forEach(o),Ol=d(t),z=s(t,"DIV",{class:!0});var re=n(z);f(as.$$.fragment,re),fg=d(re),Ui=s(re,"P",{});var U2=n(Ui);gg=i(U2,"Example use of Perceiver for image classification, for tasks such as ImageNet."),U2.forEach(o),vg=d(re),Ki=s(re,"P",{});var K2=n(Ki);_g=i(K2,`This model uses fixed 2D Fourier position embeddings. As shown in the paper, this model can achieve a top-1 accuracy of
79.0 on ImageNet, and 84.5 when pre-trained on a large-scale dataset (i.e. JFT).`),K2.forEach(o),Pg=d(re),R=s(re,"P",{});var fe=n(R);rn=s(fe,"A",{href:!0});var J2=n(rn);wg=i(J2,"PerceiverForImageClassificationLearned"),J2.forEach(o),bg=i(fe," uses "),sn=s(fe,"A",{href:!0});var G2=n(sn);yg=i(G2,"PerceiverImagePreprocessor"),G2.forEach(o),kg=i(fe,`
(with `),Ji=s(fe,"CODE",{});var X2=n(Ji);$g=i(X2,'prep_type="pixels"'),X2.forEach(o),Tg=i(fe,`) to preprocess the input images, and
`),nn=s(fe,"A",{href:!0});var Z2=n(nn);xg=i(Z2,"PerceiverClassificationDecoder"),Z2.forEach(o),Eg=i(fe,` to decode the latent representation of
`),an=s(fe,"A",{href:!0});var Q2=n(an);Fg=i(Q2,"PerceiverModel"),Q2.forEach(o),Cg=i(fe," into classification logits."),fe.forEach(o),jg=d(re),is=s(re,"P",{});var Ud=n(is);Mg=i(Ud,"This model is a PyTorch "),cs=s(Ud,"A",{href:!0,rel:!0});var Y2=n(cs);Ig=i(Y2,"torch.nn.Module"),Y2.forEach(o),qg=i(Ud,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ud.forEach(o),zg=d(re),U=s(re,"DIV",{class:!0});var Ee=n(U);f(ls.$$.fragment,Ee),Ag=d(Ee),kt=s(Ee,"P",{});var Wn=n(kt);Dg=i(Wn,"The "),cn=s(Wn,"A",{href:!0});var ew=n(cn);Ng=i(ew,"PerceiverForImageClassificationFourier"),ew.forEach(o),Og=i(Wn," forward method, overrides the "),Gi=s(Wn,"CODE",{});var tw=n(Gi);Lg=i(tw,"__call__"),tw.forEach(o),Sg=i(Wn," special method."),Wn.forEach(o),Bg=d(Ee),f(uo.$$.fragment,Ee),Hg=d(Ee),Xi=s(Ee,"P",{});var ow=n(Xi);Wg=i(ow,"Examples:"),ow.forEach(o),Vg=d(Ee),f(ds.$$.fragment,Ee),Ee.forEach(o),re.forEach(o),Ll=d(t),$t=s(t,"H2",{class:!0});var Kd=n($t);fo=s(Kd,"A",{id:!0,class:!0,href:!0});var rw=n(fo);Zi=s(rw,"SPAN",{});var sw=n(Zi);f(ps.$$.fragment,sw),sw.forEach(o),rw.forEach(o),Rg=d(Kd),Qi=s(Kd,"SPAN",{});var nw=n(Qi);Ug=i(nw,"PerceiverForImageClassificationConvProcessing"),nw.forEach(o),Kd.forEach(o),Sl=d(t),A=s(t,"DIV",{class:!0});var se=n(A);f(ms.$$.fragment,se),Kg=d(se),Yi=s(se,"P",{});var aw=n(Yi);Jg=i(aw,"Example use of Perceiver for image classification, for tasks such as ImageNet."),aw.forEach(o),Gg=d(se),ec=s(se,"P",{});var iw=n(ec);Xg=i(iw,`This model uses a 2D conv+maxpool preprocessing network. As shown in the paper, this model can achieve a top-1 accuracy
of 82.1 on ImageNet.`),iw.forEach(o),Zg=d(se),K=s(se,"P",{});var ge=n(K);ln=s(ge,"A",{href:!0});var cw=n(ln);Qg=i(cw,"PerceiverForImageClassificationLearned"),cw.forEach(o),Yg=i(ge," uses "),dn=s(ge,"A",{href:!0});var lw=n(dn);ev=i(lw,"PerceiverImagePreprocessor"),lw.forEach(o),tv=i(ge,`
(with `),tc=s(ge,"CODE",{});var dw=n(tc);ov=i(dw,'prep_type="conv"'),dw.forEach(o),rv=i(ge,`) to preprocess the input images, and
`),pn=s(ge,"A",{href:!0});var pw=n(pn);sv=i(pw,"PerceiverClassificationDecoder"),pw.forEach(o),nv=i(ge,` to decode the latent representation of
`),mn=s(ge,"A",{href:!0});var mw=n(mn);av=i(mw,"PerceiverModel"),mw.forEach(o),iv=i(ge," into classification logits."),ge.forEach(o),cv=d(se),hs=s(se,"P",{});var Jd=n(hs);lv=i(Jd,"This model is a PyTorch "),us=s(Jd,"A",{href:!0,rel:!0});var hw=n(us);dv=i(hw,"torch.nn.Module"),hw.forEach(o),pv=i(Jd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jd.forEach(o),mv=d(se),J=s(se,"DIV",{class:!0});var Fe=n(J);f(fs.$$.fragment,Fe),hv=d(Fe),Tt=s(Fe,"P",{});var Vn=n(Tt);uv=i(Vn,"The "),hn=s(Vn,"A",{href:!0});var uw=n(hn);fv=i(uw,"PerceiverForImageClassificationConvProcessing"),uw.forEach(o),gv=i(Vn," forward method, overrides the "),oc=s(Vn,"CODE",{});var fw=n(oc);vv=i(fw,"__call__"),fw.forEach(o),_v=i(Vn," special method."),Vn.forEach(o),Pv=d(Fe),f(go.$$.fragment,Fe),wv=d(Fe),rc=s(Fe,"P",{});var gw=n(rc);bv=i(gw,"Examples:"),gw.forEach(o),yv=d(Fe),f(gs.$$.fragment,Fe),Fe.forEach(o),se.forEach(o),Bl=d(t),xt=s(t,"H2",{class:!0});var Gd=n(xt);vo=s(Gd,"A",{id:!0,class:!0,href:!0});var vw=n(vo);sc=s(vw,"SPAN",{});var _w=n(sc);f(vs.$$.fragment,_w),_w.forEach(o),vw.forEach(o),kv=d(Gd),nc=s(Gd,"SPAN",{});var Pw=n(nc);$v=i(Pw,"PerceiverForOpticalFlow"),Pw.forEach(o),Gd.forEach(o),Hl=d(t),O=s(t,"DIV",{class:!0});var Ce=n(O);f(_s.$$.fragment,Ce),Tv=d(Ce),L=s(Ce,"P",{});var ne=n(L);xv=i(ne,"Example use of Perceiver for optical flow, for tasks such as Sintel and KITTI. "),un=s(ne,"A",{href:!0});var ww=n(un);Ev=i(ww,"PerceiverForOpticalFlow"),ww.forEach(o),Fv=i(ne,` uses
`),fn=s(ne,"A",{href:!0});var bw=n(fn);Cv=i(bw,"PerceiverImagePreprocessor"),bw.forEach(o),jv=i(ne," (with "),ac=s(ne,"EM",{});var yw=n(ac);Mv=i(yw,"prep_type=\u201Cpatches\u201D"),yw.forEach(o),Iv=i(ne,`) to preprocess the
input images, and `),gn=s(ne,"A",{href:!0});var kw=n(gn);qv=i(kw,"PerceiverOpticalFlowDecoder"),kw.forEach(o),zv=i(ne,` to decode the latent
representation of `),vn=s(ne,"A",{href:!0});var $w=n(vn);Av=i($w,"PerceiverModel"),$w.forEach(o),Dv=i(ne,"."),ne.forEach(o),Nv=d(Ce),ic=s(Ce,"P",{});var Tw=n(ic);Ov=i(Tw,`As input, one concatenates 2 subsequent frames along the channel dimension and extract a 3 x 3 patch around each pixel
(leading to 3 x 3 x 3 x 2 = 54 values for each pixel). Fixed Fourier position encodings are used to encode the position
of each pixel in the patch. Next, one applies the Perceiver encoder. To decode, one queries the latent representation
using the same encoding used for the input.`),Tw.forEach(o),Lv=d(Ce),Ps=s(Ce,"P",{});var Xd=n(Ps);Sv=i(Xd,"This model is a PyTorch "),ws=s(Xd,"A",{href:!0,rel:!0});var xw=n(ws);Bv=i(xw,"torch.nn.Module"),xw.forEach(o),Hv=i(Xd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xd.forEach(o),Wv=d(Ce),G=s(Ce,"DIV",{class:!0});var je=n(G);f(bs.$$.fragment,je),Vv=d(je),Et=s(je,"P",{});var Rn=n(Et);Rv=i(Rn,"The "),_n=s(Rn,"A",{href:!0});var Ew=n(_n);Uv=i(Ew,"PerceiverForOpticalFlow"),Ew.forEach(o),Kv=i(Rn," forward method, overrides the "),cc=s(Rn,"CODE",{});var Fw=n(cc);Jv=i(Fw,"__call__"),Fw.forEach(o),Gv=i(Rn," special method."),Rn.forEach(o),Xv=d(je),f(_o.$$.fragment,je),Zv=d(je),lc=s(je,"P",{});var Cw=n(lc);Qv=i(Cw,"Examples:"),Cw.forEach(o),Yv=d(je),f(ys.$$.fragment,je),je.forEach(o),Ce.forEach(o),Wl=d(t),Ft=s(t,"H2",{class:!0});var Zd=n(Ft);Po=s(Zd,"A",{id:!0,class:!0,href:!0});var jw=n(Po);dc=s(jw,"SPAN",{});var Mw=n(dc);f(ks.$$.fragment,Mw),Mw.forEach(o),jw.forEach(o),e_=d(Zd),pc=s(Zd,"SPAN",{});var Iw=n(pc);t_=i(Iw,"PerceiverForMultimodalAutoencoding"),Iw.forEach(o),Zd.forEach(o),Vl=d(t),C=s(t,"DIV",{class:!0});var I=n(C);f($s.$$.fragment,I),o_=d(I),mc=s(I,"P",{});var qw=n(mc);r_=i(qw,"Example use of Perceiver for multimodal (video) autoencoding, for tasks such as Kinetics-700."),qw.forEach(o),s_=d(I),wo=s(I,"P",{});var kc=n(wo);Pn=s(kc,"A",{href:!0});var zw=n(Pn);n_=i(zw,"PerceiverForMultimodalAutoencoding"),zw.forEach(o),a_=i(kc," uses "),wn=s(kc,"A",{href:!0});var Aw=n(wn);i_=i(Aw,"PerceiverMultimodalPreprocessor"),Aw.forEach(o),c_=i(kc,` to
preprocess the 3 modalities: images, audio and class labels. This preprocessor uses modality-specific preprocessors to
preprocess every modality separately, after which they are concatenated. Trainable position embeddings are used to pad
each modality to the same number of channels to make concatenation along the time dimension possible. Next, one applies
the Perceiver encoder.`),kc.forEach(o),l_=d(I),we=s(I,"P",{});var zs=n(we);bn=s(zs,"A",{href:!0});var Dw=n(bn);d_=i(Dw,"PerceiverMultimodalDecoder"),Dw.forEach(o),p_=i(zs,` is used to decode the latent representation of
`),yn=s(zs,"A",{href:!0});var Nw=n(yn);m_=i(Nw,"PerceiverModel"),Nw.forEach(o),h_=i(zs,`. This decoder uses each modality-specific decoder to construct queries. The decoder queries are
created based on the inputs after preprocessing. However, autoencoding an entire video in a single forward pass is
computationally infeasible, hence one only uses parts of the decoder queries to do cross-attention with the latent
representation. This is determined by the subsampled indices for each modality, which can be provided as additional
input to the forward pass of `),kn=s(zs,"A",{href:!0});var Ow=n(kn);u_=i(Ow,"PerceiverForMultimodalAutoencoding"),Ow.forEach(o),f_=i(zs,"."),zs.forEach(o),g_=d(I),bo=s(I,"P",{});var $c=n(bo);$n=s($c,"A",{href:!0});var Lw=n($n);v_=i(Lw,"PerceiverMultimodalDecoder"),Lw.forEach(o),__=i($c,` also pads the decoder queries of the different
modalities to the same number of channels, in order to concatenate them along the time dimension. Next, cross-attention
is performed with the latent representation of `),Tn=s($c,"A",{href:!0});var Sw=n(Tn);P_=i(Sw,"PerceiverModel"),Sw.forEach(o),w_=i($c,"."),$c.forEach(o),b_=d(I),Ts=s(I,"P",{});var Qd=n(Ts);y_=i(Qd,"Finally, "),hc=s(Qd,"CODE",{});var Bw=n(hc);k_=i(Bw,"PerceiverMultiModalPostprocessor"),Bw.forEach(o),$_=i(Qd,` is used to turn this tensor into an
actual video. It first splits up the output into the different modalities, and then applies the respective
postprocessor for each modality.`),Qd.forEach(o),T_=d(I),uc=s(I,"P",{});var Hw=n(uc);x_=i(Hw,`Note that, by masking the classification label during evaluation (i.e. simply providing a tensor of zeros for the
\u201Clabel\u201D modality), this auto-encoding model becomes a Kinetics 700 video classifier.`),Hw.forEach(o),E_=d(I),xs=s(I,"P",{});var Yd=n(xs);F_=i(Yd,"This model is a PyTorch "),Es=s(Yd,"A",{href:!0,rel:!0});var Ww=n(Es);C_=i(Ww,"torch.nn.Module"),Ww.forEach(o),j_=i(Yd,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Yd.forEach(o),M_=d(I),X=s(I,"DIV",{class:!0});var Me=n(X);f(Fs.$$.fragment,Me),I_=d(Me),Ct=s(Me,"P",{});var Un=n(Ct);q_=i(Un,"The "),xn=s(Un,"A",{href:!0});var Vw=n(xn);z_=i(Vw,"PerceiverForMultimodalAutoencoding"),Vw.forEach(o),A_=i(Un," forward method, overrides the "),fc=s(Un,"CODE",{});var Rw=n(fc);D_=i(Rw,"__call__"),Rw.forEach(o),N_=i(Un," special method."),Un.forEach(o),O_=d(Me),f(yo.$$.fragment,Me),L_=d(Me),gc=s(Me,"P",{});var Uw=n(gc);S_=i(Uw,"Examples:"),Uw.forEach(o),B_=d(Me),f(Cs.$$.fragment,Me),Me.forEach(o),I.forEach(o),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(cb)),c(k,"id","perceiver"),c(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k,"href","#perceiver"),c(w,"class","relative group"),c(It,"id","overview"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#overview"),c(Ie,"class","relative group"),c(xo,"href","https://arxiv.org/abs/2107.14795"),c(xo,"rel","nofollow"),c(Eo,"href","https://arxiv.org/abs/2103.03206"),c(Eo,"rel","nofollow"),c(Ls,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),Zw(At.src,V_="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/perceiver_architecture.jpg")||c(At,"src",V_),c(At,"alt","drawing"),c(At,"width","600"),c(Bs,"href","https://arxiv.org/abs/2105.15203"),c(Co,"href","https://huggingface.co/nielsr"),c(Co,"rel","nofollow"),c(jo,"href","https://github.com/deepmind/deepmind-research/tree/master/perceiver"),c(jo,"rel","nofollow"),c(Io,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/Perceiver"),c(Io,"rel","nofollow"),c(zo,"href","https://huggingface.co/blog/perceiver"),c(zo,"rel","nofollow"),c(Do,"href","https://github.com/pytorch/pytorch/issues/36035"),c(Do,"rel","nofollow"),c(Nt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput"),c(qe,"class","relative group"),c(ze,"class","docstring"),c(Ae,"class","docstring"),c(De,"class","docstring"),c(Ne,"class","docstring"),c(Ot,"id","transformers.PerceiverConfig"),c(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ot,"href","#transformers.PerceiverConfig"),c(Oe,"class","relative group"),c(Vs,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(Vo,"href","https://huggingface.co/deepmind/language-perceiver"),c(Vo,"rel","nofollow"),c(Rs,"href","/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig"),c(Us,"href","/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig"),c(N,"class","docstring"),c(Lt,"id","transformers.PerceiverTokenizer"),c(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lt,"href","#transformers.PerceiverTokenizer"),c(Be,"class","relative group"),c(Ks,"href","/docs/transformers/pr_16027/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(St,"class","docstring"),c(Q,"class","docstring"),c(Bt,"id","transformers.PerceiverFeatureExtractor"),c(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bt,"href","#transformers.PerceiverFeatureExtractor"),c(He,"class","relative group"),c(Js,"href","/docs/transformers/pr_16027/en/main_classes/feature_extractor#transformers.ImageFeatureExtractionMixin"),c(Pe,"class","docstring"),c(Y,"class","docstring"),c(Wt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor"),c(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor"),c(We,"class","relative group"),c(ae,"class","docstring"),c(Vt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(Ve,"class","relative group"),c(ie,"class","docstring"),c(Rt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor"),c(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor"),c(Re,"class","relative group"),c(Ue,"class","docstring"),c(Ut,"id","transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor"),c(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ut,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor"),c(Ke,"class","relative group"),c(Je,"class","docstring"),c(Kt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor"),c(Ge,"class","relative group"),c(ce,"class","docstring"),c(Jt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder"),c(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder"),c(Xe,"class","relative group"),c(Ze,"class","docstring"),c(Gt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder"),c(Qe,"class","relative group"),c(le,"class","docstring"),c(Xt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder"),c(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder"),c(Ye,"class","relative group"),c(et,"class","docstring"),c(Zt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder"),c(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder"),c(tt,"class","relative group"),c(ot,"class","docstring"),c(Qt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder"),c(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder"),c(rt,"class","relative group"),c(st,"class","docstring"),c(Yt,"id","transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder"),c(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yt,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder"),c(nt,"class","relative group"),c(de,"class","docstring"),c(eo,"id","transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor"),c(eo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eo,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor"),c(at,"class","relative group"),c(it,"class","docstring"),c(to,"id","transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor"),c(to,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(to,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor"),c(ct,"class","relative group"),c(lt,"class","docstring"),c(oo,"id","transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor"),c(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oo,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor"),c(dt,"class","relative group"),c(pt,"class","docstring"),c(ro,"id","transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor"),c(ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ro,"href","#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor"),c(mt,"class","relative group"),c(ht,"class","docstring"),c(so,"id","transformers.PerceiverModel"),c(so,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(so,"href","#transformers.PerceiverModel"),c(ut,"class","relative group"),c(Or,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Or,"rel","nofollow"),c(Gs,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(S,"class","docstring"),c(pe,"class","docstring"),c(ao,"id","transformers.PerceiverForMaskedLM"),c(ao,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ao,"href","#transformers.PerceiverForMaskedLM"),c(gt,"class","relative group"),c(Vr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Vr,"rel","nofollow"),c(Xs,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(B,"class","docstring"),c(me,"class","docstring"),c(co,"id","transformers.PerceiverForSequenceClassification"),c(co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(co,"href","#transformers.PerceiverForSequenceClassification"),c(_t,"class","relative group"),c(Xr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Xr,"rel","nofollow"),c(Zs,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(H,"class","docstring"),c(he,"class","docstring"),c(po,"id","transformers.PerceiverForImageClassificationLearned"),c(po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(po,"href","#transformers.PerceiverForImageClassificationLearned"),c(wt,"class","relative group"),c(Qs,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Ys,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(en,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder"),c(tn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(os,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(os,"rel","nofollow"),c(on,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(V,"class","docstring"),c(q,"class","docstring"),c(ho,"id","transformers.PerceiverForImageClassificationFourier"),c(ho,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ho,"href","#transformers.PerceiverForImageClassificationFourier"),c(yt,"class","relative group"),c(rn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(sn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(nn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder"),c(an,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(cs,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(cs,"rel","nofollow"),c(cn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(U,"class","docstring"),c(z,"class","docstring"),c(fo,"id","transformers.PerceiverForImageClassificationConvProcessing"),c(fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fo,"href","#transformers.PerceiverForImageClassificationConvProcessing"),c($t,"class","relative group"),c(ln,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(dn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(pn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder"),c(mn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(us,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(us,"rel","nofollow"),c(hn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(J,"class","docstring"),c(A,"class","docstring"),c(vo,"id","transformers.PerceiverForOpticalFlow"),c(vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vo,"href","#transformers.PerceiverForOpticalFlow"),c(xt,"class","relative group"),c(un,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForOpticalFlow"),c(fn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor"),c(gn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder"),c(vn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(ws,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(ws,"rel","nofollow"),c(_n,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForOpticalFlow"),c(G,"class","docstring"),c(O,"class","docstring"),c(Po,"id","transformers.PerceiverForMultimodalAutoencoding"),c(Po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Po,"href","#transformers.PerceiverForMultimodalAutoencoding"),c(Ft,"class","relative group"),c(Pn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMultimodalAutoencoding"),c(wn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor"),c(bn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder"),c(yn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(kn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMultimodalAutoencoding"),c($n,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder"),c(Tn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),c(Es,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Es,"rel","nofollow"),c(xn,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMultimodalAutoencoding"),c(X,"class","docstring"),c(C,"class","docstring")},m(t,p){e(document.head,h),m(t,$,p),m(t,w,p),e(w,k),e(k,x),g(y,x,null),e(w,b),e(w,E),e(E,ep),m(t,Tc,p),m(t,Ie,p),e(Ie,It),e(It,Kn),g(To,Kn,null),e(Ie,tp),e(Ie,Jn),e(Jn,op),m(t,xc,p),m(t,qt,p),e(qt,rp),e(qt,xo),e(xo,sp),e(qt,np),m(t,Ec,p),m(t,zt,p),e(zt,ap),e(zt,Eo),e(Eo,ip),e(zt,cp),m(t,Fc,p),m(t,As,p),e(As,lp),m(t,Cc,p),m(t,Ds,p),e(Ds,Gn),e(Gn,dp),m(t,jc,p),m(t,Ns,p),e(Ns,pp),m(t,Mc,p),m(t,Os,p),e(Os,mp),m(t,Ic,p),m(t,D,p),e(D,hp),e(D,Ls),e(Ls,up),e(D,fp),e(D,Xn),e(Xn,gp),e(D,vp),e(D,Zn),e(Zn,_p),e(D,Pp),e(D,Qn),e(Qn,wp),e(D,bp),e(D,Yn),e(Yn,yp),e(D,kp),m(t,qc,p),m(t,Ss,p),e(Ss,$p),m(t,zc,p),m(t,M,p),e(M,Tp),e(M,ea),e(ea,xp),e(M,Ep),e(M,ta),e(ta,Fp),e(M,Cp),e(M,oa),e(oa,jp),e(M,Mp),e(M,ra),e(ra,Ip),e(M,qp),e(M,sa),e(sa,zp),e(M,Ap),e(M,na),e(na,Dp),e(M,Np),m(t,Ac,p),m(t,At,p),m(t,Dc,p),m(t,Fo,p),e(Fo,Op),e(Fo,Bs),e(Bs,Lp),m(t,Nc,p),m(t,ve,p),e(ve,Sp),e(ve,Co),e(Co,Bp),e(ve,Hp),e(ve,jo),e(jo,Wp),e(ve,Vp),m(t,Oc,p),m(t,Hs,p),e(Hs,Rp),m(t,Lc,p),m(t,Dt,p),e(Dt,Mo),e(Mo,Up),e(Mo,Io),e(Io,Kp),e(Mo,Jp),e(Dt,Gp),e(Dt,qo),e(qo,Xp),e(qo,zo),e(zo,Zp),e(qo,Qp),m(t,Sc,p),m(t,Ao,p),e(Ao,aa),e(aa,Yp),e(Ao,em),m(t,Bc,p),m(t,Ws,p),e(Ws,_e),e(_e,tm),e(_e,ia),e(ia,om),e(_e,rm),e(_e,ca),e(ca,sm),e(_e,nm),e(_e,Do),e(Do,am),m(t,Hc,p),m(t,qe,p),e(qe,Nt),e(Nt,la),g(No,la,null),e(qe,im),e(qe,da),e(da,cm),m(t,Wc,p),m(t,ze,p),g(Oo,ze,null),e(ze,lm),e(ze,pa),e(pa,dm),m(t,Vc,p),m(t,Ae,p),g(Lo,Ae,null),e(Ae,pm),e(Ae,ma),e(ma,mm),m(t,Rc,p),m(t,De,p),g(So,De,null),e(De,hm),e(De,ha),e(ha,um),m(t,Uc,p),m(t,Ne,p),g(Bo,Ne,null),e(Ne,fm),e(Ne,ua),e(ua,gm),m(t,Kc,p),m(t,Oe,p),e(Oe,Ot),e(Ot,fa),g(Ho,fa,null),e(Oe,vm),e(Oe,ga),e(ga,_m),m(t,Jc,p),m(t,N,p),g(Wo,N,null),e(N,Pm),e(N,Le),e(Le,wm),e(Le,Vs),e(Vs,bm),e(Le,ym),e(Le,Vo),e(Vo,km),e(Le,$m),e(N,Tm),e(N,Se),e(Se,xm),e(Se,Rs),e(Rs,Em),e(Se,Fm),e(Se,Us),e(Us,Cm),e(Se,jm),e(N,Mm),e(N,va),e(va,Im),e(N,qm),g(Ro,N,null),m(t,Gc,p),m(t,Be,p),e(Be,Lt),e(Lt,_a),g(Uo,_a,null),e(Be,zm),e(Be,Pa),e(Pa,Am),m(t,Xc,p),m(t,Q,p),g(Ko,Q,null),e(Q,Dm),e(Q,wa),e(wa,Nm),e(Q,Om),e(Q,Jo),e(Jo,Lm),e(Jo,Ks),e(Ks,Sm),e(Jo,Bm),e(Q,Hm),e(Q,St),g(Go,St,null),e(St,Wm),e(St,ba),e(ba,Vm),m(t,Zc,p),m(t,He,p),e(He,Bt),e(Bt,ya),g(Xo,ya,null),e(He,Rm),e(He,ka),e(ka,Um),m(t,Qc,p),m(t,Y,p),g(Zo,Y,null),e(Y,Km),e(Y,$a),e($a,Jm),e(Y,Gm),e(Y,Qo),e(Qo,Xm),e(Qo,Js),e(Js,Zm),e(Qo,Qm),e(Y,Ym),e(Y,Pe),g(Yo,Pe,null),e(Pe,eh),e(Pe,Ta),e(Ta,th),e(Pe,oh),g(Ht,Pe,null),m(t,Yc,p),m(t,We,p),e(We,Wt),e(Wt,xa),g(er,xa,null),e(We,rh),e(We,Ea),e(Ea,sh),m(t,el,p),m(t,ae,p),g(tr,ae,null),e(ae,nh),e(ae,or),e(or,ah),e(or,Fa),e(Fa,ih),e(or,ch),e(ae,lh),e(ae,rr),e(rr,dh),e(rr,Ca),e(Ca,ph),e(rr,mh),m(t,tl,p),m(t,Ve,p),e(Ve,Vt),e(Vt,ja),g(sr,ja,null),e(Ve,hh),e(Ve,Ma),e(Ma,uh),m(t,ol,p),m(t,ie,p),g(nr,ie,null),e(ie,fh),e(ie,Ia),e(Ia,gh),e(ie,vh),e(ie,ee),e(ee,_h),e(ee,qa),e(qa,Ph),e(ee,wh),e(ee,za),e(za,bh),e(ee,yh),e(ee,Aa),e(Aa,kh),e(ee,$h),e(ee,Da),e(Da,Th),e(ee,xh),m(t,rl,p),m(t,Re,p),e(Re,Rt),e(Rt,Na),g(ar,Na,null),e(Re,Eh),e(Re,Oa),e(Oa,Fh),m(t,sl,p),m(t,Ue,p),g(ir,Ue,null),e(Ue,Ch),e(Ue,La),e(La,jh),m(t,nl,p),m(t,Ke,p),e(Ke,Ut),e(Ut,Sa),g(cr,Sa,null),e(Ke,Mh),e(Ke,Ba),e(Ba,Ih),m(t,al,p),m(t,Je,p),g(lr,Je,null),e(Je,qh),e(Je,Ha),e(Ha,zh),m(t,il,p),m(t,Ge,p),e(Ge,Kt),e(Kt,Wa),g(dr,Wa,null),e(Ge,Ah),e(Ge,Va),e(Va,Dh),m(t,cl,p),m(t,ce,p),g(pr,ce,null),e(ce,Nh),e(ce,Ra),e(Ra,Oh),e(ce,Lh),e(ce,Ua),e(Ua,Sh),m(t,ll,p),m(t,Xe,p),e(Xe,Jt),e(Jt,Ka),g(mr,Ka,null),e(Xe,Bh),e(Xe,Ja),e(Ja,Hh),m(t,dl,p),m(t,Ze,p),g(hr,Ze,null),e(Ze,Wh),e(Ze,Ga),e(Ga,Vh),m(t,pl,p),m(t,Qe,p),e(Qe,Gt),e(Gt,Xa),g(ur,Xa,null),e(Qe,Rh),e(Qe,Za),e(Za,Uh),m(t,ml,p),m(t,le,p),g(fr,le,null),e(le,Kh),e(le,Qa),e(Qa,Jh),e(le,Gh),e(le,Ya),e(Ya,Xh),m(t,hl,p),m(t,Ye,p),e(Ye,Xt),e(Xt,ei),g(gr,ei,null),e(Ye,Zh),e(Ye,ti),e(ti,Qh),m(t,ul,p),m(t,et,p),g(vr,et,null),e(et,Yh),e(et,_r),e(_r,eu),e(_r,oi),e(oi,tu),e(_r,ou),m(t,fl,p),m(t,tt,p),e(tt,Zt),e(Zt,ri),g(Pr,ri,null),e(tt,ru),e(tt,si),e(si,su),m(t,gl,p),m(t,ot,p),g(wr,ot,null),e(ot,nu),e(ot,ni),e(ni,au),m(t,vl,p),m(t,rt,p),e(rt,Qt),e(Qt,ai),g(br,ai,null),e(rt,iu),e(rt,ii),e(ii,cu),m(t,_l,p),m(t,st,p),g(yr,st,null),e(st,lu),e(st,kr),e(kr,du),e(kr,ci),e(ci,pu),e(kr,mu),m(t,Pl,p),m(t,nt,p),e(nt,Yt),e(Yt,li),g($r,li,null),e(nt,hu),e(nt,di),e(di,uu),m(t,wl,p),m(t,de,p),g(Tr,de,null),e(de,fu),e(de,xr),e(xr,gu),e(xr,pi),e(pi,vu),e(xr,_u),e(de,Pu),e(de,mi),e(mi,wu),m(t,bl,p),m(t,at,p),e(at,eo),e(eo,hi),g(Er,hi,null),e(at,bu),e(at,ui),e(ui,yu),m(t,yl,p),m(t,it,p),g(Fr,it,null),e(it,ku),e(it,fi),e(fi,$u),m(t,kl,p),m(t,ct,p),e(ct,to),e(to,gi),g(Cr,gi,null),e(ct,Tu),e(ct,vi),e(vi,xu),m(t,$l,p),m(t,lt,p),g(jr,lt,null),e(lt,Eu),e(lt,_i),e(_i,Fu),m(t,Tl,p),m(t,dt,p),e(dt,oo),e(oo,Pi),g(Mr,Pi,null),e(dt,Cu),e(dt,wi),e(wi,ju),m(t,xl,p),m(t,pt,p),g(Ir,pt,null),e(pt,Mu),e(pt,bi),e(bi,Iu),m(t,El,p),m(t,mt,p),e(mt,ro),e(ro,yi),g(qr,yi,null),e(mt,qu),e(mt,ki),e(ki,zu),m(t,Fl,p),m(t,ht,p),g(zr,ht,null),e(ht,Au),e(ht,$i),e($i,Du),m(t,Cl,p),m(t,ut,p),e(ut,so),e(so,Ti),g(Ar,Ti,null),e(ut,Nu),e(ut,xi),e(xi,Ou),m(t,jl,p),m(t,pe,p),g(Dr,pe,null),e(pe,Lu),e(pe,Nr),e(Nr,Su),e(Nr,Or),e(Or,Bu),e(Nr,Hu),e(pe,Wu),e(pe,S),g(Lr,S,null),e(S,Vu),e(S,ft),e(ft,Ru),e(ft,Gs),e(Gs,Uu),e(ft,Ku),e(ft,Ei),e(Ei,Ju),e(ft,Gu),e(S,Xu),g(no,S,null),e(S,Zu),e(S,Fi),e(Fi,Qu),e(S,Yu),g(Sr,S,null),m(t,Ml,p),m(t,gt,p),e(gt,ao),e(ao,Ci),g(Br,Ci,null),e(gt,ef),e(gt,ji),e(ji,tf),m(t,Il,p),m(t,me,p),g(Hr,me,null),e(me,of),e(me,Wr),e(Wr,rf),e(Wr,Vr),e(Vr,sf),e(Wr,nf),e(me,af),e(me,B),g(Rr,B,null),e(B,cf),e(B,vt),e(vt,lf),e(vt,Xs),e(Xs,df),e(vt,pf),e(vt,Mi),e(Mi,mf),e(vt,hf),e(B,uf),g(io,B,null),e(B,ff),e(B,Ii),e(Ii,gf),e(B,vf),g(Ur,B,null),m(t,ql,p),m(t,_t,p),e(_t,co),e(co,qi),g(Kr,qi,null),e(_t,_f),e(_t,zi),e(zi,Pf),m(t,zl,p),m(t,he,p),g(Jr,he,null),e(he,wf),e(he,Gr),e(Gr,bf),e(Gr,Xr),e(Xr,yf),e(Gr,kf),e(he,$f),e(he,H),g(Zr,H,null),e(H,Tf),e(H,Pt),e(Pt,xf),e(Pt,Zs),e(Zs,Ef),e(Pt,Ff),e(Pt,Ai),e(Ai,Cf),e(Pt,jf),e(H,Mf),g(lo,H,null),e(H,If),e(H,Di),e(Di,qf),e(H,zf),g(Qr,H,null),m(t,Al,p),m(t,wt,p),e(wt,po),e(po,Ni),g(Yr,Ni,null),e(wt,Af),e(wt,Oi),e(Oi,Df),m(t,Dl,p),m(t,q,p),g(es,q,null),e(q,Nf),e(q,Li),e(Li,Of),e(q,Lf),e(q,Si),e(Si,Sf),e(q,Bf),e(q,W),e(W,Qs),e(Qs,Hf),e(W,Wf),e(W,Ys),e(Ys,Vf),e(W,Rf),e(W,Bi),e(Bi,Uf),e(W,Kf),e(W,en),e(en,Jf),e(W,Gf),e(W,tn),e(tn,Xf),e(W,Zf),e(q,Qf),e(q,ts),e(ts,Yf),e(ts,os),e(os,eg),e(ts,tg),e(q,og),e(q,V),g(rs,V,null),e(V,rg),e(V,bt),e(bt,sg),e(bt,on),e(on,ng),e(bt,ag),e(bt,Hi),e(Hi,ig),e(bt,cg),e(V,lg),g(mo,V,null),e(V,dg),e(V,Wi),e(Wi,pg),e(V,mg),g(ss,V,null),m(t,Nl,p),m(t,yt,p),e(yt,ho),e(ho,Vi),g(ns,Vi,null),e(yt,hg),e(yt,Ri),e(Ri,ug),m(t,Ol,p),m(t,z,p),g(as,z,null),e(z,fg),e(z,Ui),e(Ui,gg),e(z,vg),e(z,Ki),e(Ki,_g),e(z,Pg),e(z,R),e(R,rn),e(rn,wg),e(R,bg),e(R,sn),e(sn,yg),e(R,kg),e(R,Ji),e(Ji,$g),e(R,Tg),e(R,nn),e(nn,xg),e(R,Eg),e(R,an),e(an,Fg),e(R,Cg),e(z,jg),e(z,is),e(is,Mg),e(is,cs),e(cs,Ig),e(is,qg),e(z,zg),e(z,U),g(ls,U,null),e(U,Ag),e(U,kt),e(kt,Dg),e(kt,cn),e(cn,Ng),e(kt,Og),e(kt,Gi),e(Gi,Lg),e(kt,Sg),e(U,Bg),g(uo,U,null),e(U,Hg),e(U,Xi),e(Xi,Wg),e(U,Vg),g(ds,U,null),m(t,Ll,p),m(t,$t,p),e($t,fo),e(fo,Zi),g(ps,Zi,null),e($t,Rg),e($t,Qi),e(Qi,Ug),m(t,Sl,p),m(t,A,p),g(ms,A,null),e(A,Kg),e(A,Yi),e(Yi,Jg),e(A,Gg),e(A,ec),e(ec,Xg),e(A,Zg),e(A,K),e(K,ln),e(ln,Qg),e(K,Yg),e(K,dn),e(dn,ev),e(K,tv),e(K,tc),e(tc,ov),e(K,rv),e(K,pn),e(pn,sv),e(K,nv),e(K,mn),e(mn,av),e(K,iv),e(A,cv),e(A,hs),e(hs,lv),e(hs,us),e(us,dv),e(hs,pv),e(A,mv),e(A,J),g(fs,J,null),e(J,hv),e(J,Tt),e(Tt,uv),e(Tt,hn),e(hn,fv),e(Tt,gv),e(Tt,oc),e(oc,vv),e(Tt,_v),e(J,Pv),g(go,J,null),e(J,wv),e(J,rc),e(rc,bv),e(J,yv),g(gs,J,null),m(t,Bl,p),m(t,xt,p),e(xt,vo),e(vo,sc),g(vs,sc,null),e(xt,kv),e(xt,nc),e(nc,$v),m(t,Hl,p),m(t,O,p),g(_s,O,null),e(O,Tv),e(O,L),e(L,xv),e(L,un),e(un,Ev),e(L,Fv),e(L,fn),e(fn,Cv),e(L,jv),e(L,ac),e(ac,Mv),e(L,Iv),e(L,gn),e(gn,qv),e(L,zv),e(L,vn),e(vn,Av),e(L,Dv),e(O,Nv),e(O,ic),e(ic,Ov),e(O,Lv),e(O,Ps),e(Ps,Sv),e(Ps,ws),e(ws,Bv),e(Ps,Hv),e(O,Wv),e(O,G),g(bs,G,null),e(G,Vv),e(G,Et),e(Et,Rv),e(Et,_n),e(_n,Uv),e(Et,Kv),e(Et,cc),e(cc,Jv),e(Et,Gv),e(G,Xv),g(_o,G,null),e(G,Zv),e(G,lc),e(lc,Qv),e(G,Yv),g(ys,G,null),m(t,Wl,p),m(t,Ft,p),e(Ft,Po),e(Po,dc),g(ks,dc,null),e(Ft,e_),e(Ft,pc),e(pc,t_),m(t,Vl,p),m(t,C,p),g($s,C,null),e(C,o_),e(C,mc),e(mc,r_),e(C,s_),e(C,wo),e(wo,Pn),e(Pn,n_),e(wo,a_),e(wo,wn),e(wn,i_),e(wo,c_),e(C,l_),e(C,we),e(we,bn),e(bn,d_),e(we,p_),e(we,yn),e(yn,m_),e(we,h_),e(we,kn),e(kn,u_),e(we,f_),e(C,g_),e(C,bo),e(bo,$n),e($n,v_),e(bo,__),e(bo,Tn),e(Tn,P_),e(bo,w_),e(C,b_),e(C,Ts),e(Ts,y_),e(Ts,hc),e(hc,k_),e(Ts,$_),e(C,T_),e(C,uc),e(uc,x_),e(C,E_),e(C,xs),e(xs,F_),e(xs,Es),e(Es,C_),e(xs,j_),e(C,M_),e(C,X),g(Fs,X,null),e(X,I_),e(X,Ct),e(Ct,q_),e(Ct,xn),e(xn,z_),e(Ct,A_),e(Ct,fc),e(fc,D_),e(Ct,N_),e(X,O_),g(yo,X,null),e(X,L_),e(X,gc),e(gc,S_),e(X,B_),g(Cs,X,null),Rl=!0},p(t,[p]){const js={};p&2&&(js.$$scope={dirty:p,ctx:t}),Ht.$set(js);const vc={};p&2&&(vc.$$scope={dirty:p,ctx:t}),no.$set(vc);const _c={};p&2&&(_c.$$scope={dirty:p,ctx:t}),io.$set(_c);const Pc={};p&2&&(Pc.$$scope={dirty:p,ctx:t}),lo.$set(Pc);const Ms={};p&2&&(Ms.$$scope={dirty:p,ctx:t}),mo.$set(Ms);const wc={};p&2&&(wc.$$scope={dirty:p,ctx:t}),uo.$set(wc);const bc={};p&2&&(bc.$$scope={dirty:p,ctx:t}),go.$set(bc);const yc={};p&2&&(yc.$$scope={dirty:p,ctx:t}),_o.$set(yc);const Is={};p&2&&(Is.$$scope={dirty:p,ctx:t}),yo.$set(Is)},i(t){Rl||(v(y.$$.fragment,t),v(To.$$.fragment,t),v(No.$$.fragment,t),v(Oo.$$.fragment,t),v(Lo.$$.fragment,t),v(So.$$.fragment,t),v(Bo.$$.fragment,t),v(Ho.$$.fragment,t),v(Wo.$$.fragment,t),v(Ro.$$.fragment,t),v(Uo.$$.fragment,t),v(Ko.$$.fragment,t),v(Go.$$.fragment,t),v(Xo.$$.fragment,t),v(Zo.$$.fragment,t),v(Yo.$$.fragment,t),v(Ht.$$.fragment,t),v(er.$$.fragment,t),v(tr.$$.fragment,t),v(sr.$$.fragment,t),v(nr.$$.fragment,t),v(ar.$$.fragment,t),v(ir.$$.fragment,t),v(cr.$$.fragment,t),v(lr.$$.fragment,t),v(dr.$$.fragment,t),v(pr.$$.fragment,t),v(mr.$$.fragment,t),v(hr.$$.fragment,t),v(ur.$$.fragment,t),v(fr.$$.fragment,t),v(gr.$$.fragment,t),v(vr.$$.fragment,t),v(Pr.$$.fragment,t),v(wr.$$.fragment,t),v(br.$$.fragment,t),v(yr.$$.fragment,t),v($r.$$.fragment,t),v(Tr.$$.fragment,t),v(Er.$$.fragment,t),v(Fr.$$.fragment,t),v(Cr.$$.fragment,t),v(jr.$$.fragment,t),v(Mr.$$.fragment,t),v(Ir.$$.fragment,t),v(qr.$$.fragment,t),v(zr.$$.fragment,t),v(Ar.$$.fragment,t),v(Dr.$$.fragment,t),v(Lr.$$.fragment,t),v(no.$$.fragment,t),v(Sr.$$.fragment,t),v(Br.$$.fragment,t),v(Hr.$$.fragment,t),v(Rr.$$.fragment,t),v(io.$$.fragment,t),v(Ur.$$.fragment,t),v(Kr.$$.fragment,t),v(Jr.$$.fragment,t),v(Zr.$$.fragment,t),v(lo.$$.fragment,t),v(Qr.$$.fragment,t),v(Yr.$$.fragment,t),v(es.$$.fragment,t),v(rs.$$.fragment,t),v(mo.$$.fragment,t),v(ss.$$.fragment,t),v(ns.$$.fragment,t),v(as.$$.fragment,t),v(ls.$$.fragment,t),v(uo.$$.fragment,t),v(ds.$$.fragment,t),v(ps.$$.fragment,t),v(ms.$$.fragment,t),v(fs.$$.fragment,t),v(go.$$.fragment,t),v(gs.$$.fragment,t),v(vs.$$.fragment,t),v(_s.$$.fragment,t),v(bs.$$.fragment,t),v(_o.$$.fragment,t),v(ys.$$.fragment,t),v(ks.$$.fragment,t),v($s.$$.fragment,t),v(Fs.$$.fragment,t),v(yo.$$.fragment,t),v(Cs.$$.fragment,t),Rl=!0)},o(t){_(y.$$.fragment,t),_(To.$$.fragment,t),_(No.$$.fragment,t),_(Oo.$$.fragment,t),_(Lo.$$.fragment,t),_(So.$$.fragment,t),_(Bo.$$.fragment,t),_(Ho.$$.fragment,t),_(Wo.$$.fragment,t),_(Ro.$$.fragment,t),_(Uo.$$.fragment,t),_(Ko.$$.fragment,t),_(Go.$$.fragment,t),_(Xo.$$.fragment,t),_(Zo.$$.fragment,t),_(Yo.$$.fragment,t),_(Ht.$$.fragment,t),_(er.$$.fragment,t),_(tr.$$.fragment,t),_(sr.$$.fragment,t),_(nr.$$.fragment,t),_(ar.$$.fragment,t),_(ir.$$.fragment,t),_(cr.$$.fragment,t),_(lr.$$.fragment,t),_(dr.$$.fragment,t),_(pr.$$.fragment,t),_(mr.$$.fragment,t),_(hr.$$.fragment,t),_(ur.$$.fragment,t),_(fr.$$.fragment,t),_(gr.$$.fragment,t),_(vr.$$.fragment,t),_(Pr.$$.fragment,t),_(wr.$$.fragment,t),_(br.$$.fragment,t),_(yr.$$.fragment,t),_($r.$$.fragment,t),_(Tr.$$.fragment,t),_(Er.$$.fragment,t),_(Fr.$$.fragment,t),_(Cr.$$.fragment,t),_(jr.$$.fragment,t),_(Mr.$$.fragment,t),_(Ir.$$.fragment,t),_(qr.$$.fragment,t),_(zr.$$.fragment,t),_(Ar.$$.fragment,t),_(Dr.$$.fragment,t),_(Lr.$$.fragment,t),_(no.$$.fragment,t),_(Sr.$$.fragment,t),_(Br.$$.fragment,t),_(Hr.$$.fragment,t),_(Rr.$$.fragment,t),_(io.$$.fragment,t),_(Ur.$$.fragment,t),_(Kr.$$.fragment,t),_(Jr.$$.fragment,t),_(Zr.$$.fragment,t),_(lo.$$.fragment,t),_(Qr.$$.fragment,t),_(Yr.$$.fragment,t),_(es.$$.fragment,t),_(rs.$$.fragment,t),_(mo.$$.fragment,t),_(ss.$$.fragment,t),_(ns.$$.fragment,t),_(as.$$.fragment,t),_(ls.$$.fragment,t),_(uo.$$.fragment,t),_(ds.$$.fragment,t),_(ps.$$.fragment,t),_(ms.$$.fragment,t),_(fs.$$.fragment,t),_(go.$$.fragment,t),_(gs.$$.fragment,t),_(vs.$$.fragment,t),_(_s.$$.fragment,t),_(bs.$$.fragment,t),_(_o.$$.fragment,t),_(ys.$$.fragment,t),_(ks.$$.fragment,t),_($s.$$.fragment,t),_(Fs.$$.fragment,t),_(yo.$$.fragment,t),_(Cs.$$.fragment,t),Rl=!1},d(t){o(h),t&&o($),t&&o(w),P(y),t&&o(Tc),t&&o(Ie),P(To),t&&o(xc),t&&o(qt),t&&o(Ec),t&&o(zt),t&&o(Fc),t&&o(As),t&&o(Cc),t&&o(Ds),t&&o(jc),t&&o(Ns),t&&o(Mc),t&&o(Os),t&&o(Ic),t&&o(D),t&&o(qc),t&&o(Ss),t&&o(zc),t&&o(M),t&&o(Ac),t&&o(At),t&&o(Dc),t&&o(Fo),t&&o(Nc),t&&o(ve),t&&o(Oc),t&&o(Hs),t&&o(Lc),t&&o(Dt),t&&o(Sc),t&&o(Ao),t&&o(Bc),t&&o(Ws),t&&o(Hc),t&&o(qe),P(No),t&&o(Wc),t&&o(ze),P(Oo),t&&o(Vc),t&&o(Ae),P(Lo),t&&o(Rc),t&&o(De),P(So),t&&o(Uc),t&&o(Ne),P(Bo),t&&o(Kc),t&&o(Oe),P(Ho),t&&o(Jc),t&&o(N),P(Wo),P(Ro),t&&o(Gc),t&&o(Be),P(Uo),t&&o(Xc),t&&o(Q),P(Ko),P(Go),t&&o(Zc),t&&o(He),P(Xo),t&&o(Qc),t&&o(Y),P(Zo),P(Yo),P(Ht),t&&o(Yc),t&&o(We),P(er),t&&o(el),t&&o(ae),P(tr),t&&o(tl),t&&o(Ve),P(sr),t&&o(ol),t&&o(ie),P(nr),t&&o(rl),t&&o(Re),P(ar),t&&o(sl),t&&o(Ue),P(ir),t&&o(nl),t&&o(Ke),P(cr),t&&o(al),t&&o(Je),P(lr),t&&o(il),t&&o(Ge),P(dr),t&&o(cl),t&&o(ce),P(pr),t&&o(ll),t&&o(Xe),P(mr),t&&o(dl),t&&o(Ze),P(hr),t&&o(pl),t&&o(Qe),P(ur),t&&o(ml),t&&o(le),P(fr),t&&o(hl),t&&o(Ye),P(gr),t&&o(ul),t&&o(et),P(vr),t&&o(fl),t&&o(tt),P(Pr),t&&o(gl),t&&o(ot),P(wr),t&&o(vl),t&&o(rt),P(br),t&&o(_l),t&&o(st),P(yr),t&&o(Pl),t&&o(nt),P($r),t&&o(wl),t&&o(de),P(Tr),t&&o(bl),t&&o(at),P(Er),t&&o(yl),t&&o(it),P(Fr),t&&o(kl),t&&o(ct),P(Cr),t&&o($l),t&&o(lt),P(jr),t&&o(Tl),t&&o(dt),P(Mr),t&&o(xl),t&&o(pt),P(Ir),t&&o(El),t&&o(mt),P(qr),t&&o(Fl),t&&o(ht),P(zr),t&&o(Cl),t&&o(ut),P(Ar),t&&o(jl),t&&o(pe),P(Dr),P(Lr),P(no),P(Sr),t&&o(Ml),t&&o(gt),P(Br),t&&o(Il),t&&o(me),P(Hr),P(Rr),P(io),P(Ur),t&&o(ql),t&&o(_t),P(Kr),t&&o(zl),t&&o(he),P(Jr),P(Zr),P(lo),P(Qr),t&&o(Al),t&&o(wt),P(Yr),t&&o(Dl),t&&o(q),P(es),P(rs),P(mo),P(ss),t&&o(Nl),t&&o(yt),P(ns),t&&o(Ol),t&&o(z),P(as),P(ls),P(uo),P(ds),t&&o(Ll),t&&o($t),P(ps),t&&o(Sl),t&&o(A),P(ms),P(fs),P(go),P(gs),t&&o(Bl),t&&o(xt),P(vs),t&&o(Hl),t&&o(O),P(_s),P(bs),P(_o),P(ys),t&&o(Wl),t&&o(Ft),P(ks),t&&o(Vl),t&&o(C),P($s),P(Fs),P(yo),P(Cs)}}}const cb={local:"perceiver",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverModelOutput",title:"Perceiver specific outputs"},{local:"transformers.PerceiverConfig",title:"PerceiverConfig"},{local:"transformers.PerceiverTokenizer",title:"PerceiverTokenizer"},{local:"transformers.PerceiverFeatureExtractor",title:"PerceiverFeatureExtractor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverTextPreprocessor",title:"PerceiverTextPreprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverImagePreprocessor",title:"PerceiverImagePreprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverOneHotPreprocessor",title:"PerceiverOneHotPreprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPreprocessor",title:"PerceiverAudioPreprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPreprocessor",title:"PerceiverMultimodalPreprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionDecoder",title:"PerceiverProjectionDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicDecoder",title:"PerceiverBasicDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationDecoder",title:"PerceiverClassificationDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverOpticalFlowDecoder",title:"PerceiverOpticalFlowDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverBasicVideoAutoencodingDecoder",title:"PerceiverBasicVideoAutoencodingDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalDecoder",title:"PerceiverMultimodalDecoder"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverProjectionPostprocessor",title:"PerceiverProjectionPostprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverAudioPostprocessor",title:"PerceiverAudioPostprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverClassificationPostprocessor",title:"PerceiverClassificationPostprocessor"},{local:"transformers.models.perceiver.modeling_perceiver.PerceiverMultimodalPostprocessor",title:"PerceiverMultimodalPostprocessor"},{local:"transformers.PerceiverModel",title:"PerceiverModel"},{local:"transformers.PerceiverForMaskedLM",title:"PerceiverForMaskedLM"},{local:"transformers.PerceiverForSequenceClassification",title:"PerceiverForSequenceClassification"},{local:"transformers.PerceiverForImageClassificationLearned",title:"PerceiverForImageClassificationLearned"},{local:"transformers.PerceiverForImageClassificationFourier",title:"PerceiverForImageClassificationFourier"},{local:"transformers.PerceiverForImageClassificationConvProcessing",title:"PerceiverForImageClassificationConvProcessing"},{local:"transformers.PerceiverForOpticalFlow",title:"PerceiverForOpticalFlow"},{local:"transformers.PerceiverForMultimodalAutoencoding",title:"PerceiverForMultimodalAutoencoding"}],title:"Perceiver"};function lb(j,h,$){let{fw:w}=h;return j.$$set=k=>{"fw"in k&&$(0,w=k.fw)},[w]}class gb extends Kw{constructor(h){super();Jw(this,h,lb,ib,Gw,{fw:0})}}export{gb as default,cb as metadata};
