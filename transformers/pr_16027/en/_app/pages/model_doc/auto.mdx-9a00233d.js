import{S as h7t,i as p7t,s as _7t,e as a,k as l,w as f,t as o,M as u7t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as $Br}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function b7t(Ii){let J,$e,de,ge,io,fe,Fe,Vo,ji,If,fa,Di,Ni,J4,jf,Be,co,qi,On,Y4,Gn,Xn,K4,Oi,Vn,Z4,Gi,Df,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Fe=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),J4=o(")."),jf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),Y4=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),K4=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),Z4=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var he=s(J);$e=r(he,"If your "),de=n(he,"CODE",{});var X8=s(de);ge=r(X8,"NewModelConfig"),X8.forEach(t),io=r(he," is a subclass of "),fe=n(he,"CODE",{});var Xi=s(fe);Fe=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(he,`, make sure its
`),ji=n(he,"CODE",{});var V8=s(ji);If=r(V8,"model_type"),V8.forEach(t),fa=r(he," attribute is set to the same key you use when registering the config (here "),Di=n(he,"CODE",{});var z8=s(Di);Ni=r(z8,'"new-model"'),z8.forEach(t),J4=r(he,")."),he.forEach(t),jf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),Y4=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var W8=s(Gn);Xn=r(W8,"PreTrainedModel"),W8.forEach(t),K4=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Nf=s(Oi);Vn=r(Nf,"config_class"),Nf.forEach(t),Z4=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var Q8=s(Gi);Df=r(Q8,"NewModelConfig"),Q8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(Gn,"href","/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel")},m(fo,he){b(fo,J,he),e(J,$e),e(J,de),e(de,ge),e(J,io),e(J,fe),e(fe,Fe),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Di),e(Di,Ni),e(J,J4),b(fo,jf,he),b(fo,Be,he),e(Be,co),e(Be,qi),e(qi,On),e(Be,Y4),e(Be,Gn),e(Gn,Xn),e(Be,K4),e(Be,Oi),e(Oi,Vn),e(Be,Z4),e(Be,Gi),e(Gi,Df),e(Be,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Be)}}}function v7t(Ii){let J,$e,de,ge,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);$e=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,$e),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function T7t(Ii){let J,$e,de,ge,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);$e=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,$e),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function F7t(Ii){let J,$e,de,ge,io,fe,Fe,Vo,ji,If,fa,Di,Ni,J4,jf,Be,co,qi,On,Y4,Gn,Xn,K4,Oi,Vn,Z4,Gi,Df,qa,fo,he,X8,Xi,V8,z8,zo,Oa,W8,Nf,Q8,RPe,bxe,Vi,qf,TQ,eE,SPe,FQ,PPe,vxe,zn,$Pe,CQ,IPe,jPe,MQ,DPe,NPe,Txe,oE,Fxe,H8,qPe,Cxe,Of,Mxe,zi,Gf,EQ,rE,OPe,yQ,GPe,Exe,Wo,tE,XPe,aE,VPe,U8,zPe,WPe,QPe,nE,HPe,wQ,UPe,JPe,YPe,mo,sE,KPe,AQ,ZPe,e$e,Wi,o$e,LQ,r$e,t$e,BQ,a$e,n$e,s$e,v,Xf,xQ,l$e,i$e,J8,d$e,c$e,f$e,Vf,kQ,m$e,g$e,Y8,h$e,p$e,_$e,zf,RQ,u$e,b$e,K8,v$e,T$e,F$e,Wf,SQ,C$e,M$e,Z8,E$e,y$e,w$e,Qf,PQ,A$e,L$e,e9,B$e,x$e,k$e,Hf,$Q,R$e,S$e,o9,P$e,$$e,I$e,Uf,IQ,j$e,D$e,r9,N$e,q$e,O$e,Jf,jQ,G$e,X$e,t9,V$e,z$e,W$e,Yf,DQ,Q$e,H$e,a9,U$e,J$e,Y$e,Kf,NQ,K$e,Z$e,n9,eIe,oIe,rIe,Zf,qQ,tIe,aIe,s9,nIe,sIe,lIe,em,OQ,iIe,dIe,l9,cIe,fIe,mIe,om,GQ,gIe,hIe,i9,pIe,_Ie,uIe,rm,XQ,bIe,vIe,d9,TIe,FIe,CIe,tm,VQ,MIe,EIe,c9,yIe,wIe,AIe,am,zQ,LIe,BIe,f9,xIe,kIe,RIe,nm,WQ,SIe,PIe,m9,$Ie,IIe,jIe,sm,QQ,DIe,NIe,g9,qIe,OIe,GIe,lm,HQ,XIe,VIe,h9,zIe,WIe,QIe,im,UQ,HIe,UIe,p9,JIe,YIe,KIe,dm,JQ,ZIe,eje,_9,oje,rje,tje,cm,YQ,aje,nje,u9,sje,lje,ije,fm,KQ,dje,cje,b9,fje,mje,gje,mm,ZQ,hje,pje,v9,_je,uje,bje,gm,eH,vje,Tje,T9,Fje,Cje,Mje,hm,oH,Eje,yje,F9,wje,Aje,Lje,pm,rH,Bje,xje,C9,kje,Rje,Sje,_m,tH,Pje,$je,M9,Ije,jje,Dje,um,aH,Nje,qje,E9,Oje,Gje,Xje,bm,nH,Vje,zje,y9,Wje,Qje,Hje,vm,sH,Uje,Jje,w9,Yje,Kje,Zje,Tm,lH,eDe,oDe,A9,rDe,tDe,aDe,Fm,iH,nDe,sDe,L9,lDe,iDe,dDe,Cm,dH,cDe,fDe,B9,mDe,gDe,hDe,Mm,cH,pDe,_De,x9,uDe,bDe,vDe,Em,fH,TDe,FDe,k9,CDe,MDe,EDe,ym,mH,yDe,wDe,R9,ADe,LDe,BDe,wm,gH,xDe,kDe,S9,RDe,SDe,PDe,Am,hH,$De,IDe,P9,jDe,DDe,NDe,Lm,pH,qDe,ODe,$9,GDe,XDe,VDe,Bm,_H,zDe,WDe,I9,QDe,HDe,UDe,xm,uH,JDe,YDe,j9,KDe,ZDe,eNe,km,bH,oNe,rNe,D9,tNe,aNe,nNe,Rm,vH,sNe,lNe,N9,iNe,dNe,cNe,Sm,TH,fNe,mNe,q9,gNe,hNe,pNe,Pm,FH,_Ne,uNe,O9,bNe,vNe,TNe,$m,CH,FNe,CNe,G9,MNe,ENe,yNe,Im,MH,wNe,ANe,X9,LNe,BNe,xNe,jm,EH,kNe,RNe,V9,SNe,PNe,$Ne,Dm,yH,INe,jNe,z9,DNe,NNe,qNe,Nm,wH,ONe,GNe,W9,XNe,VNe,zNe,qm,AH,WNe,QNe,Q9,HNe,UNe,JNe,Om,LH,YNe,KNe,H9,ZNe,eqe,oqe,Gm,BH,rqe,tqe,U9,aqe,nqe,sqe,Xm,xH,lqe,iqe,J9,dqe,cqe,fqe,Vm,kH,mqe,gqe,Y9,hqe,pqe,_qe,zm,RH,uqe,bqe,K9,vqe,Tqe,Fqe,Wm,SH,Cqe,Mqe,Z9,Eqe,yqe,wqe,Qm,PH,Aqe,Lqe,eB,Bqe,xqe,kqe,Hm,$H,Rqe,Sqe,oB,Pqe,$qe,Iqe,Um,IH,jqe,Dqe,rB,Nqe,qqe,Oqe,Jm,jH,Gqe,Xqe,tB,Vqe,zqe,Wqe,Ym,DH,Qqe,Hqe,aB,Uqe,Jqe,Yqe,Km,NH,Kqe,Zqe,nB,eOe,oOe,rOe,Zm,qH,tOe,aOe,sB,nOe,sOe,lOe,eg,OH,iOe,dOe,lB,cOe,fOe,mOe,og,GH,gOe,hOe,iB,pOe,_Oe,uOe,rg,XH,bOe,vOe,dB,TOe,FOe,COe,tg,VH,MOe,EOe,cB,yOe,wOe,AOe,ag,zH,LOe,BOe,fB,xOe,kOe,ROe,ng,WH,SOe,POe,mB,$Oe,IOe,jOe,sg,QH,DOe,NOe,gB,qOe,OOe,GOe,lg,HH,XOe,VOe,hB,zOe,WOe,QOe,ig,UH,HOe,UOe,pB,JOe,YOe,KOe,dg,JH,ZOe,eGe,_B,oGe,rGe,tGe,cg,YH,aGe,nGe,uB,sGe,lGe,iGe,fg,KH,dGe,cGe,bB,fGe,mGe,gGe,mg,ZH,hGe,pGe,vB,_Ge,uGe,bGe,gg,eU,vGe,TGe,TB,FGe,CGe,MGe,hg,oU,EGe,yGe,FB,wGe,AGe,LGe,pg,rU,BGe,xGe,CB,kGe,RGe,SGe,_g,tU,PGe,$Ge,MB,IGe,jGe,DGe,ug,aU,NGe,qGe,EB,OGe,GGe,XGe,bg,nU,VGe,zGe,yB,WGe,QGe,HGe,vg,sU,UGe,JGe,wB,YGe,KGe,ZGe,Tg,lU,eXe,oXe,AB,rXe,tXe,aXe,Fg,iU,nXe,sXe,LB,lXe,iXe,dXe,Cg,dU,cXe,fXe,BB,mXe,gXe,hXe,Mg,cU,pXe,_Xe,xB,uXe,bXe,vXe,Eg,fU,TXe,FXe,kB,CXe,MXe,EXe,yg,mU,yXe,wXe,RB,AXe,LXe,BXe,wg,gU,xXe,kXe,SB,RXe,SXe,PXe,Ag,hU,$Xe,IXe,PB,jXe,DXe,NXe,Lg,pU,qXe,OXe,$B,GXe,XXe,VXe,Bg,_U,zXe,WXe,IB,QXe,HXe,UXe,uU,JXe,YXe,lE,KXe,xg,iE,ZXe,bU,eVe,yxe,Qi,kg,vU,dE,oVe,TU,rVe,wxe,Qo,cE,tVe,fE,aVe,jB,nVe,sVe,lVe,mE,iVe,FU,dVe,cVe,fVe,go,gE,mVe,CU,gVe,hVe,Ga,pVe,MU,_Ve,uVe,EU,bVe,vVe,yU,TVe,FVe,CVe,E,Wn,wU,MVe,EVe,DB,yVe,wVe,NB,AVe,LVe,BVe,Qn,AU,xVe,kVe,qB,RVe,SVe,OB,PVe,$Ve,IVe,Hn,LU,jVe,DVe,GB,NVe,qVe,XB,OVe,GVe,XVe,Rg,BU,VVe,zVe,VB,WVe,QVe,HVe,Un,xU,UVe,JVe,zB,YVe,KVe,WB,ZVe,eze,oze,Sg,kU,rze,tze,QB,aze,nze,sze,Pg,RU,lze,ize,HB,dze,cze,fze,$g,SU,mze,gze,UB,hze,pze,_ze,Jn,PU,uze,bze,JB,vze,Tze,YB,Fze,Cze,Mze,Yn,$U,Eze,yze,KB,wze,Aze,ZB,Lze,Bze,xze,Kn,IU,kze,Rze,ex,Sze,Pze,ox,$ze,Ize,jze,Ig,jU,Dze,Nze,rx,qze,Oze,Gze,jg,DU,Xze,Vze,tx,zze,Wze,Qze,Zn,NU,Hze,Uze,ax,Jze,Yze,nx,Kze,Zze,eWe,Dg,qU,oWe,rWe,sx,tWe,aWe,nWe,es,OU,sWe,lWe,lx,iWe,dWe,ix,cWe,fWe,mWe,os,GU,gWe,hWe,dx,pWe,_We,cx,uWe,bWe,vWe,rs,XU,TWe,FWe,fx,CWe,MWe,VU,EWe,yWe,wWe,Ng,zU,AWe,LWe,mx,BWe,xWe,kWe,ts,WU,RWe,SWe,gx,PWe,$We,hx,IWe,jWe,DWe,qg,QU,NWe,qWe,px,OWe,GWe,XWe,as,HU,VWe,zWe,_x,WWe,QWe,ux,HWe,UWe,JWe,ns,UU,YWe,KWe,bx,ZWe,eQe,vx,oQe,rQe,tQe,ss,JU,aQe,nQe,Tx,sQe,lQe,Fx,iQe,dQe,cQe,Og,YU,fQe,mQe,Cx,gQe,hQe,pQe,ls,KU,_Qe,uQe,Mx,bQe,vQe,Ex,TQe,FQe,CQe,Gg,ZU,MQe,EQe,yx,yQe,wQe,AQe,is,eJ,LQe,BQe,wx,xQe,kQe,Ax,RQe,SQe,PQe,ds,oJ,$Qe,IQe,Lx,jQe,DQe,Bx,NQe,qQe,OQe,cs,rJ,GQe,XQe,xx,VQe,zQe,kx,WQe,QQe,HQe,fs,tJ,UQe,JQe,Rx,YQe,KQe,Sx,ZQe,eHe,oHe,Xg,aJ,rHe,tHe,Px,aHe,nHe,sHe,ms,nJ,lHe,iHe,$x,dHe,cHe,Ix,fHe,mHe,gHe,gs,sJ,hHe,pHe,jx,_He,uHe,Dx,bHe,vHe,THe,hs,lJ,FHe,CHe,Nx,MHe,EHe,qx,yHe,wHe,AHe,ps,iJ,LHe,BHe,Ox,xHe,kHe,Gx,RHe,SHe,PHe,_s,dJ,$He,IHe,Xx,jHe,DHe,Vx,NHe,qHe,OHe,us,cJ,GHe,XHe,zx,VHe,zHe,Wx,WHe,QHe,HHe,Vg,fJ,UHe,JHe,Qx,YHe,KHe,ZHe,bs,mJ,eUe,oUe,Hx,rUe,tUe,Ux,aUe,nUe,sUe,zg,gJ,lUe,iUe,Jx,dUe,cUe,fUe,Wg,hJ,mUe,gUe,Yx,hUe,pUe,_Ue,vs,pJ,uUe,bUe,Kx,vUe,TUe,Zx,FUe,CUe,MUe,Ts,_J,EUe,yUe,ek,wUe,AUe,ok,LUe,BUe,xUe,Qg,uJ,kUe,RUe,rk,SUe,PUe,$Ue,Fs,bJ,IUe,jUe,tk,DUe,NUe,ak,qUe,OUe,GUe,Cs,vJ,XUe,VUe,nk,zUe,WUe,sk,QUe,HUe,UUe,Ms,TJ,JUe,YUe,lk,KUe,ZUe,ik,eJe,oJe,rJe,Es,FJ,tJe,aJe,dk,nJe,sJe,ck,lJe,iJe,dJe,ys,CJ,cJe,fJe,fk,mJe,gJe,mk,hJe,pJe,_Je,Hg,MJ,uJe,bJe,gk,vJe,TJe,FJe,Ug,EJ,CJe,MJe,hk,EJe,yJe,wJe,Jg,yJ,AJe,LJe,pk,BJe,xJe,kJe,Yg,wJ,RJe,SJe,_k,PJe,$Je,IJe,ws,AJ,jJe,DJe,uk,NJe,qJe,bk,OJe,GJe,XJe,Kg,LJ,VJe,zJe,vk,WJe,QJe,HJe,As,BJ,UJe,JJe,Tk,YJe,KJe,Fk,ZJe,eYe,oYe,Ls,xJ,rYe,tYe,Ck,aYe,nYe,Mk,sYe,lYe,iYe,Bs,kJ,dYe,cYe,Ek,fYe,mYe,yk,gYe,hYe,pYe,xs,RJ,_Ye,uYe,wk,bYe,vYe,Ak,TYe,FYe,CYe,ks,SJ,MYe,EYe,Lk,yYe,wYe,Bk,AYe,LYe,BYe,Rs,PJ,xYe,kYe,xk,RYe,SYe,kk,PYe,$Ye,IYe,Zg,$J,jYe,DYe,Rk,NYe,qYe,OYe,eh,IJ,GYe,XYe,Sk,VYe,zYe,WYe,Ss,jJ,QYe,HYe,Pk,UYe,JYe,$k,YYe,KYe,ZYe,Ps,DJ,eKe,oKe,Ik,rKe,tKe,jk,aKe,nKe,sKe,$s,NJ,lKe,iKe,Dk,dKe,cKe,Nk,fKe,mKe,gKe,oh,qJ,hKe,pKe,qk,_Ke,uKe,bKe,rh,OJ,vKe,TKe,Ok,FKe,CKe,MKe,th,GJ,EKe,yKe,Gk,wKe,AKe,LKe,ah,XJ,BKe,xKe,Xk,kKe,RKe,SKe,Is,VJ,PKe,$Ke,Vk,IKe,jKe,zk,DKe,NKe,qKe,nh,zJ,OKe,GKe,Wk,XKe,VKe,zKe,sh,WJ,WKe,QKe,Qk,HKe,UKe,JKe,js,QJ,YKe,KKe,Hk,ZKe,eZe,Uk,oZe,rZe,tZe,Ds,HJ,aZe,nZe,Jk,sZe,lZe,Yk,iZe,dZe,cZe,UJ,fZe,mZe,hE,gZe,lh,pE,hZe,JJ,pZe,Axe,Hi,ih,YJ,_E,_Ze,KJ,uZe,Lxe,Ho,uE,bZe,bE,vZe,Kk,TZe,FZe,CZe,vE,MZe,ZJ,EZe,yZe,wZe,Ie,TE,AZe,eY,LZe,BZe,Xa,xZe,oY,kZe,RZe,rY,SZe,PZe,tY,$Ze,IZe,jZe,te,dh,aY,DZe,NZe,Zk,qZe,OZe,GZe,ch,nY,XZe,VZe,eR,zZe,WZe,QZe,fh,sY,HZe,UZe,oR,JZe,YZe,KZe,mh,lY,ZZe,eeo,rR,oeo,reo,teo,gh,iY,aeo,neo,tR,seo,leo,ieo,hh,dY,deo,ceo,aR,feo,meo,geo,ph,cY,heo,peo,nR,_eo,ueo,beo,_h,fY,veo,Teo,sR,Feo,Ceo,Meo,uh,mY,Eeo,yeo,lR,weo,Aeo,Leo,bh,gY,Beo,xeo,iR,keo,Reo,Seo,vh,hY,Peo,$eo,dR,Ieo,jeo,Deo,Th,pY,Neo,qeo,cR,Oeo,Geo,Xeo,Fh,_Y,Veo,zeo,fR,Weo,Qeo,Heo,Ch,uY,Ueo,Jeo,mR,Yeo,Keo,Zeo,Mh,bY,eoo,ooo,gR,roo,too,aoo,Eh,vY,noo,soo,hR,loo,ioo,doo,yh,TY,coo,foo,pR,moo,goo,hoo,wh,poo,FY,_oo,uoo,FE,boo,Ah,CE,voo,CY,Too,Bxe,Ui,Lh,MY,ME,Foo,EY,Coo,xxe,Uo,EE,Moo,yE,Eoo,_R,yoo,woo,Aoo,wE,Loo,yY,Boo,xoo,koo,je,AE,Roo,wY,Soo,Poo,Ji,$oo,AY,Ioo,joo,LY,Doo,Noo,qoo,xe,Bh,BY,Ooo,Goo,uR,Xoo,Voo,zoo,xh,xY,Woo,Qoo,bR,Hoo,Uoo,Joo,kh,kY,Yoo,Koo,vR,Zoo,ero,oro,Rh,RY,rro,tro,TR,aro,nro,sro,Sh,SY,lro,iro,FR,dro,cro,fro,Ph,PY,mro,gro,CR,hro,pro,_ro,$h,$Y,uro,bro,MR,vro,Tro,Fro,Ih,IY,Cro,Mro,ER,Ero,yro,wro,jh,Aro,jY,Lro,Bro,LE,xro,Dh,BE,kro,DY,Rro,kxe,Yi,Nh,NY,xE,Sro,qY,Pro,Rxe,Jo,kE,$ro,Ki,Iro,OY,jro,Dro,GY,Nro,qro,Oro,RE,Gro,XY,Xro,Vro,zro,Vr,SE,Wro,VY,Qro,Hro,Zi,Uro,zY,Jro,Yro,WY,Kro,Zro,eto,QY,oto,rto,PE,tto,De,$E,ato,HY,nto,sto,Va,lto,UY,ito,dto,JY,cto,fto,YY,mto,gto,hto,F,qh,KY,pto,_to,yR,uto,bto,vto,Oh,ZY,Tto,Fto,wR,Cto,Mto,Eto,Gh,eK,yto,wto,AR,Ato,Lto,Bto,Xh,oK,xto,kto,LR,Rto,Sto,Pto,Vh,rK,$to,Ito,BR,jto,Dto,Nto,zh,tK,qto,Oto,xR,Gto,Xto,Vto,Wh,aK,zto,Wto,kR,Qto,Hto,Uto,Qh,nK,Jto,Yto,RR,Kto,Zto,eao,Hh,sK,oao,rao,SR,tao,aao,nao,Uh,lK,sao,lao,PR,iao,dao,cao,Jh,iK,fao,mao,$R,gao,hao,pao,Yh,dK,_ao,uao,IR,bao,vao,Tao,Kh,cK,Fao,Cao,jR,Mao,Eao,yao,Zh,fK,wao,Aao,DR,Lao,Bao,xao,ep,mK,kao,Rao,NR,Sao,Pao,$ao,op,gK,Iao,jao,qR,Dao,Nao,qao,rp,hK,Oao,Gao,OR,Xao,Vao,zao,tp,pK,Wao,Qao,GR,Hao,Uao,Jao,ap,_K,Yao,Kao,XR,Zao,eno,ono,np,uK,rno,tno,VR,ano,nno,sno,sp,bK,lno,ino,zR,dno,cno,fno,lp,vK,mno,gno,WR,hno,pno,_no,ip,TK,uno,bno,QR,vno,Tno,Fno,dp,FK,Cno,Mno,HR,Eno,yno,wno,cp,CK,Ano,Lno,UR,Bno,xno,kno,fp,MK,Rno,Sno,JR,Pno,$no,Ino,mp,EK,jno,Dno,YR,Nno,qno,Ono,Ns,yK,Gno,Xno,KR,Vno,zno,ZR,Wno,Qno,Hno,gp,wK,Uno,Jno,eS,Yno,Kno,Zno,hp,AK,eso,oso,oS,rso,tso,aso,pp,LK,nso,sso,rS,lso,iso,dso,_p,BK,cso,fso,tS,mso,gso,hso,up,xK,pso,_so,aS,uso,bso,vso,bp,kK,Tso,Fso,nS,Cso,Mso,Eso,vp,RK,yso,wso,sS,Aso,Lso,Bso,Tp,SK,xso,kso,lS,Rso,Sso,Pso,Fp,PK,$so,Iso,iS,jso,Dso,Nso,Cp,$K,qso,Oso,dS,Gso,Xso,Vso,Mp,IK,zso,Wso,cS,Qso,Hso,Uso,Ep,jK,Jso,Yso,fS,Kso,Zso,elo,yp,DK,olo,rlo,mS,tlo,alo,nlo,wp,NK,slo,llo,gS,ilo,dlo,clo,Ap,qK,flo,mlo,hS,glo,hlo,plo,Lp,OK,_lo,ulo,pS,blo,vlo,Tlo,Bp,GK,Flo,Clo,_S,Mlo,Elo,ylo,xp,XK,wlo,Alo,uS,Llo,Blo,xlo,kp,VK,klo,Rlo,bS,Slo,Plo,$lo,Rp,zK,Ilo,jlo,vS,Dlo,Nlo,qlo,Sp,WK,Olo,Glo,TS,Xlo,Vlo,zlo,Pp,QK,Wlo,Qlo,FS,Hlo,Ulo,Jlo,$p,HK,Ylo,Klo,CS,Zlo,eio,oio,Ip,UK,rio,tio,MS,aio,nio,sio,jp,JK,lio,iio,ES,dio,cio,fio,Dp,YK,mio,gio,yS,hio,pio,_io,Np,KK,uio,bio,wS,vio,Tio,Fio,qp,ZK,Cio,Mio,AS,Eio,yio,wio,Op,eZ,Aio,Lio,LS,Bio,xio,kio,Gp,oZ,Rio,Sio,BS,Pio,$io,Iio,Xp,rZ,jio,Dio,xS,Nio,qio,Oio,Vp,tZ,Gio,Xio,kS,Vio,zio,Wio,zp,aZ,Qio,Hio,RS,Uio,Jio,Yio,Wp,nZ,Kio,Zio,SS,edo,odo,rdo,Qp,sZ,tdo,ado,PS,ndo,sdo,ldo,Hp,lZ,ido,ddo,$S,cdo,fdo,mdo,Up,iZ,gdo,hdo,IS,pdo,_do,udo,Jp,dZ,bdo,vdo,jS,Tdo,Fdo,Cdo,Yp,cZ,Mdo,Edo,DS,ydo,wdo,Ado,Kp,fZ,Ldo,Bdo,NS,xdo,kdo,Rdo,Zp,mZ,Sdo,Pdo,qS,$do,Ido,jdo,e_,gZ,Ddo,Ndo,OS,qdo,Odo,Gdo,o_,hZ,Xdo,Vdo,GS,zdo,Wdo,Qdo,r_,pZ,Hdo,Udo,XS,Jdo,Ydo,Kdo,t_,_Z,Zdo,eco,VS,oco,rco,tco,a_,uZ,aco,nco,zS,sco,lco,ico,n_,bZ,dco,cco,WS,fco,mco,gco,s_,vZ,hco,pco,QS,_co,uco,bco,l_,TZ,vco,Tco,HS,Fco,Cco,Mco,i_,FZ,Eco,yco,US,wco,Aco,Lco,d_,CZ,Bco,xco,JS,kco,Rco,Sco,c_,MZ,Pco,$co,YS,Ico,jco,Dco,f_,EZ,Nco,qco,KS,Oco,Gco,Xco,m_,yZ,Vco,zco,ZS,Wco,Qco,Hco,g_,wZ,Uco,Jco,eP,Yco,Kco,Zco,h_,AZ,efo,ofo,oP,rfo,tfo,afo,p_,LZ,nfo,sfo,rP,lfo,ifo,dfo,__,BZ,cfo,ffo,tP,mfo,gfo,hfo,u_,xZ,pfo,_fo,aP,ufo,bfo,vfo,b_,kZ,Tfo,Ffo,nP,Cfo,Mfo,Efo,v_,yfo,RZ,wfo,Afo,SZ,Lfo,Bfo,PZ,xfo,kfo,IE,Sxe,ed,T_,$Z,jE,Rfo,IZ,Sfo,Pxe,Yo,DE,Pfo,od,$fo,jZ,Ifo,jfo,DZ,Dfo,Nfo,qfo,NE,Ofo,NZ,Gfo,Xfo,Vfo,zr,qE,zfo,qZ,Wfo,Qfo,rd,Hfo,OZ,Ufo,Jfo,GZ,Yfo,Kfo,Zfo,XZ,emo,omo,OE,rmo,Ne,GE,tmo,VZ,amo,nmo,za,smo,zZ,lmo,imo,WZ,dmo,cmo,QZ,fmo,mmo,gmo,k,F_,HZ,hmo,pmo,sP,_mo,umo,bmo,C_,UZ,vmo,Tmo,lP,Fmo,Cmo,Mmo,M_,JZ,Emo,ymo,iP,wmo,Amo,Lmo,E_,YZ,Bmo,xmo,dP,kmo,Rmo,Smo,y_,KZ,Pmo,$mo,cP,Imo,jmo,Dmo,w_,ZZ,Nmo,qmo,fP,Omo,Gmo,Xmo,A_,eee,Vmo,zmo,mP,Wmo,Qmo,Hmo,L_,oee,Umo,Jmo,gP,Ymo,Kmo,Zmo,B_,ree,ego,ogo,hP,rgo,tgo,ago,x_,tee,ngo,sgo,pP,lgo,igo,dgo,k_,aee,cgo,fgo,_P,mgo,ggo,hgo,R_,nee,pgo,_go,uP,ugo,bgo,vgo,S_,see,Tgo,Fgo,bP,Cgo,Mgo,Ego,P_,lee,ygo,wgo,vP,Ago,Lgo,Bgo,$_,iee,xgo,kgo,TP,Rgo,Sgo,Pgo,I_,dee,$go,Igo,FP,jgo,Dgo,Ngo,j_,cee,qgo,Ogo,CP,Ggo,Xgo,Vgo,D_,fee,zgo,Wgo,MP,Qgo,Hgo,Ugo,N_,mee,Jgo,Ygo,EP,Kgo,Zgo,eho,q_,gee,oho,rho,yP,tho,aho,nho,O_,hee,sho,lho,wP,iho,dho,cho,G_,pee,fho,mho,AP,gho,hho,pho,X_,_ee,_ho,uho,LP,bho,vho,Tho,V_,uee,Fho,Cho,BP,Mho,Eho,yho,z_,bee,who,Aho,xP,Lho,Bho,xho,W_,vee,kho,Rho,kP,Sho,Pho,$ho,Q_,Tee,Iho,jho,RP,Dho,Nho,qho,H_,Fee,Oho,Gho,SP,Xho,Vho,zho,U_,Cee,Who,Qho,PP,Hho,Uho,Jho,J_,Mee,Yho,Kho,$P,Zho,epo,opo,Y_,Eee,rpo,tpo,IP,apo,npo,spo,K_,yee,lpo,ipo,jP,dpo,cpo,fpo,Z_,wee,mpo,gpo,DP,hpo,ppo,_po,eu,Aee,upo,bpo,NP,vpo,Tpo,Fpo,ou,Lee,Cpo,Mpo,qP,Epo,ypo,wpo,ru,Bee,Apo,Lpo,OP,Bpo,xpo,kpo,tu,xee,Rpo,Spo,GP,Ppo,$po,Ipo,au,kee,jpo,Dpo,XP,Npo,qpo,Opo,nu,Ree,Gpo,Xpo,VP,Vpo,zpo,Wpo,su,Qpo,See,Hpo,Upo,Pee,Jpo,Ypo,$ee,Kpo,Zpo,XE,$xe,td,lu,Iee,VE,e_o,jee,o_o,Ixe,Ko,zE,r_o,ad,t_o,Dee,a_o,n_o,Nee,s_o,l_o,i_o,WE,d_o,qee,c_o,f_o,m_o,Wr,QE,g_o,Oee,h_o,p_o,nd,__o,Gee,u_o,b_o,Xee,v_o,T_o,F_o,Vee,C_o,M_o,HE,E_o,qe,UE,y_o,zee,w_o,A_o,Wa,L_o,Wee,B_o,x_o,Qee,k_o,R_o,Hee,S_o,P_o,$_o,$,iu,Uee,I_o,j_o,zP,D_o,N_o,q_o,du,Jee,O_o,G_o,WP,X_o,V_o,z_o,cu,Yee,W_o,Q_o,QP,H_o,U_o,J_o,fu,Kee,Y_o,K_o,HP,Z_o,euo,ouo,mu,Zee,ruo,tuo,UP,auo,nuo,suo,gu,eoe,luo,iuo,JP,duo,cuo,fuo,hu,ooe,muo,guo,YP,huo,puo,_uo,pu,roe,uuo,buo,KP,vuo,Tuo,Fuo,_u,toe,Cuo,Muo,ZP,Euo,yuo,wuo,uu,aoe,Auo,Luo,e$,Buo,xuo,kuo,bu,noe,Ruo,Suo,o$,Puo,$uo,Iuo,vu,soe,juo,Duo,r$,Nuo,quo,Ouo,Tu,loe,Guo,Xuo,t$,Vuo,zuo,Wuo,Fu,ioe,Quo,Huo,a$,Uuo,Juo,Yuo,Cu,doe,Kuo,Zuo,n$,e2o,o2o,r2o,Mu,coe,t2o,a2o,s$,n2o,s2o,l2o,Eu,foe,i2o,d2o,l$,c2o,f2o,m2o,yu,moe,g2o,h2o,i$,p2o,_2o,u2o,wu,goe,b2o,v2o,d$,T2o,F2o,C2o,Au,hoe,M2o,E2o,c$,y2o,w2o,A2o,Lu,poe,L2o,B2o,f$,x2o,k2o,R2o,Bu,_oe,S2o,P2o,m$,$2o,I2o,j2o,xu,uoe,D2o,N2o,g$,q2o,O2o,G2o,ku,boe,X2o,V2o,h$,z2o,W2o,Q2o,Ru,voe,H2o,U2o,p$,J2o,Y2o,K2o,Su,Toe,Z2o,e1o,_$,o1o,r1o,t1o,Pu,Foe,a1o,n1o,u$,s1o,l1o,i1o,$u,Coe,d1o,c1o,b$,f1o,m1o,g1o,Iu,Moe,h1o,p1o,v$,_1o,u1o,b1o,ju,Eoe,v1o,T1o,T$,F1o,C1o,M1o,Du,yoe,E1o,y1o,F$,w1o,A1o,L1o,Nu,woe,B1o,x1o,C$,k1o,R1o,S1o,qu,Aoe,P1o,$1o,M$,I1o,j1o,D1o,Ou,Loe,N1o,q1o,E$,O1o,G1o,X1o,Gu,Boe,V1o,z1o,y$,W1o,Q1o,H1o,Xu,U1o,xoe,J1o,Y1o,koe,K1o,Z1o,Roe,ebo,obo,JE,jxe,sd,Vu,Soe,YE,rbo,Poe,tbo,Dxe,Zo,KE,abo,ld,nbo,$oe,sbo,lbo,Ioe,ibo,dbo,cbo,ZE,fbo,joe,mbo,gbo,hbo,Qr,e3,pbo,Doe,_bo,ubo,id,bbo,Noe,vbo,Tbo,qoe,Fbo,Cbo,Mbo,Ooe,Ebo,ybo,o3,wbo,Oe,r3,Abo,Goe,Lbo,Bbo,Qa,xbo,Xoe,kbo,Rbo,Voe,Sbo,Pbo,zoe,$bo,Ibo,jbo,I,zu,Woe,Dbo,Nbo,w$,qbo,Obo,Gbo,Wu,Qoe,Xbo,Vbo,A$,zbo,Wbo,Qbo,Qu,Hoe,Hbo,Ubo,L$,Jbo,Ybo,Kbo,Hu,Uoe,Zbo,evo,B$,ovo,rvo,tvo,Uu,Joe,avo,nvo,x$,svo,lvo,ivo,Ju,Yoe,dvo,cvo,k$,fvo,mvo,gvo,Yu,Koe,hvo,pvo,R$,_vo,uvo,bvo,Ku,Zoe,vvo,Tvo,S$,Fvo,Cvo,Mvo,Zu,ere,Evo,yvo,P$,wvo,Avo,Lvo,e2,ore,Bvo,xvo,$$,kvo,Rvo,Svo,o2,rre,Pvo,$vo,I$,Ivo,jvo,Dvo,r2,tre,Nvo,qvo,j$,Ovo,Gvo,Xvo,t2,are,Vvo,zvo,D$,Wvo,Qvo,Hvo,a2,nre,Uvo,Jvo,N$,Yvo,Kvo,Zvo,n2,sre,e6o,o6o,q$,r6o,t6o,a6o,s2,lre,n6o,s6o,O$,l6o,i6o,d6o,l2,ire,c6o,f6o,G$,m6o,g6o,h6o,i2,dre,p6o,_6o,X$,u6o,b6o,v6o,d2,cre,T6o,F6o,V$,C6o,M6o,E6o,c2,fre,y6o,w6o,z$,A6o,L6o,B6o,f2,mre,x6o,k6o,W$,R6o,S6o,P6o,m2,gre,$6o,I6o,Q$,j6o,D6o,N6o,g2,hre,q6o,O6o,H$,G6o,X6o,V6o,h2,pre,z6o,W6o,U$,Q6o,H6o,U6o,p2,_re,J6o,Y6o,J$,K6o,Z6o,e0o,_2,ure,o0o,r0o,Y$,t0o,a0o,n0o,u2,bre,s0o,l0o,K$,i0o,d0o,c0o,b2,vre,f0o,m0o,Z$,g0o,h0o,p0o,v2,Tre,_0o,u0o,eI,b0o,v0o,T0o,T2,Fre,F0o,C0o,oI,M0o,E0o,y0o,F2,Cre,w0o,A0o,Mre,L0o,B0o,x0o,C2,Ere,k0o,R0o,rI,S0o,P0o,$0o,M2,yre,I0o,j0o,tI,D0o,N0o,q0o,E2,wre,O0o,G0o,aI,X0o,V0o,z0o,y2,Are,W0o,Q0o,nI,H0o,U0o,J0o,w2,Y0o,Lre,K0o,Z0o,Bre,eTo,oTo,xre,rTo,tTo,t3,Nxe,dd,A2,kre,a3,aTo,Rre,nTo,qxe,er,n3,sTo,cd,lTo,Sre,iTo,dTo,Pre,cTo,fTo,mTo,s3,gTo,$re,hTo,pTo,_To,Hr,l3,uTo,Ire,bTo,vTo,fd,TTo,jre,FTo,CTo,Dre,MTo,ETo,yTo,Nre,wTo,ATo,i3,LTo,Ge,d3,BTo,qre,xTo,kTo,Ha,RTo,Ore,STo,PTo,Gre,$To,ITo,Xre,jTo,DTo,NTo,ne,L2,Vre,qTo,OTo,sI,GTo,XTo,VTo,B2,zre,zTo,WTo,lI,QTo,HTo,UTo,x2,Wre,JTo,YTo,iI,KTo,ZTo,e7o,k2,Qre,o7o,r7o,dI,t7o,a7o,n7o,R2,Hre,s7o,l7o,cI,i7o,d7o,c7o,S2,Ure,f7o,m7o,fI,g7o,h7o,p7o,P2,Jre,_7o,u7o,mI,b7o,v7o,T7o,$2,Yre,F7o,C7o,gI,M7o,E7o,y7o,I2,Kre,w7o,A7o,hI,L7o,B7o,x7o,j2,Zre,k7o,R7o,pI,S7o,P7o,$7o,D2,ete,I7o,j7o,_I,D7o,N7o,q7o,N2,ote,O7o,G7o,uI,X7o,V7o,z7o,q2,rte,W7o,Q7o,bI,H7o,U7o,J7o,O2,tte,Y7o,K7o,vI,Z7o,eFo,oFo,G2,ate,rFo,tFo,TI,aFo,nFo,sFo,X2,nte,lFo,iFo,FI,dFo,cFo,fFo,V2,mFo,ste,gFo,hFo,lte,pFo,_Fo,ite,uFo,bFo,c3,Oxe,md,z2,dte,f3,vFo,cte,TFo,Gxe,or,m3,FFo,gd,CFo,fte,MFo,EFo,mte,yFo,wFo,AFo,g3,LFo,gte,BFo,xFo,kFo,Ur,h3,RFo,hte,SFo,PFo,hd,$Fo,pte,IFo,jFo,_te,DFo,NFo,qFo,ute,OFo,GFo,p3,XFo,Xe,_3,VFo,bte,zFo,WFo,Ua,QFo,vte,HFo,UFo,Tte,JFo,YFo,Fte,KFo,ZFo,eCo,A,W2,Cte,oCo,rCo,CI,tCo,aCo,nCo,Q2,Mte,sCo,lCo,MI,iCo,dCo,cCo,H2,Ete,fCo,mCo,EI,gCo,hCo,pCo,U2,yte,_Co,uCo,yI,bCo,vCo,TCo,J2,wte,FCo,CCo,wI,MCo,ECo,yCo,Y2,Ate,wCo,ACo,AI,LCo,BCo,xCo,K2,Lte,kCo,RCo,LI,SCo,PCo,$Co,Z2,Bte,ICo,jCo,BI,DCo,NCo,qCo,e1,xte,OCo,GCo,xI,XCo,VCo,zCo,o1,kte,WCo,QCo,kI,HCo,UCo,JCo,r1,Rte,YCo,KCo,RI,ZCo,eMo,oMo,t1,Ste,rMo,tMo,SI,aMo,nMo,sMo,a1,Pte,lMo,iMo,PI,dMo,cMo,fMo,n1,$te,mMo,gMo,$I,hMo,pMo,_Mo,s1,Ite,uMo,bMo,II,vMo,TMo,FMo,l1,jte,CMo,MMo,jI,EMo,yMo,wMo,i1,Dte,AMo,LMo,DI,BMo,xMo,kMo,d1,Nte,RMo,SMo,NI,PMo,$Mo,IMo,c1,qte,jMo,DMo,qI,NMo,qMo,OMo,f1,Ote,GMo,XMo,OI,VMo,zMo,WMo,m1,Gte,QMo,HMo,GI,UMo,JMo,YMo,g1,Xte,KMo,ZMo,XI,e4o,o4o,r4o,h1,Vte,t4o,a4o,VI,n4o,s4o,l4o,p1,zte,i4o,d4o,zI,c4o,f4o,m4o,_1,Wte,g4o,h4o,WI,p4o,_4o,u4o,u1,Qte,b4o,v4o,QI,T4o,F4o,C4o,b1,Hte,M4o,E4o,HI,y4o,w4o,A4o,v1,Ute,L4o,B4o,UI,x4o,k4o,R4o,T1,Jte,S4o,P4o,JI,$4o,I4o,j4o,F1,Yte,D4o,N4o,YI,q4o,O4o,G4o,C1,Kte,X4o,V4o,KI,z4o,W4o,Q4o,M1,Zte,H4o,U4o,ZI,J4o,Y4o,K4o,E1,eae,Z4o,eEo,ej,oEo,rEo,tEo,y1,oae,aEo,nEo,oj,sEo,lEo,iEo,w1,rae,dEo,cEo,rj,fEo,mEo,gEo,A1,tae,hEo,pEo,tj,_Eo,uEo,bEo,L1,aae,vEo,TEo,aj,FEo,CEo,MEo,B1,nae,EEo,yEo,nj,wEo,AEo,LEo,x1,sae,BEo,xEo,sj,kEo,REo,SEo,k1,lae,PEo,$Eo,lj,IEo,jEo,DEo,R1,iae,NEo,qEo,ij,OEo,GEo,XEo,S1,dae,VEo,zEo,dj,WEo,QEo,HEo,P1,cae,UEo,JEo,cj,YEo,KEo,ZEo,$1,fae,e3o,o3o,fj,r3o,t3o,a3o,I1,mae,n3o,s3o,mj,l3o,i3o,d3o,j1,gae,c3o,f3o,gj,m3o,g3o,h3o,D1,p3o,hae,_3o,u3o,pae,b3o,v3o,_ae,T3o,F3o,u3,Xxe,pd,N1,uae,b3,C3o,bae,M3o,Vxe,rr,v3,E3o,_d,y3o,vae,w3o,A3o,Tae,L3o,B3o,x3o,T3,k3o,Fae,R3o,S3o,P3o,Jr,F3,$3o,Cae,I3o,j3o,ud,D3o,Mae,N3o,q3o,Eae,O3o,G3o,X3o,yae,V3o,z3o,C3,W3o,Ve,M3,Q3o,wae,H3o,U3o,Ja,J3o,Aae,Y3o,K3o,Lae,Z3o,e5o,Bae,o5o,r5o,t5o,O,q1,xae,a5o,n5o,hj,s5o,l5o,i5o,O1,kae,d5o,c5o,pj,f5o,m5o,g5o,G1,Rae,h5o,p5o,_j,_5o,u5o,b5o,X1,Sae,v5o,T5o,uj,F5o,C5o,M5o,V1,Pae,E5o,y5o,bj,w5o,A5o,L5o,z1,$ae,B5o,x5o,vj,k5o,R5o,S5o,W1,Iae,P5o,$5o,Tj,I5o,j5o,D5o,Q1,jae,N5o,q5o,Fj,O5o,G5o,X5o,H1,Dae,V5o,z5o,Cj,W5o,Q5o,H5o,U1,Nae,U5o,J5o,Mj,Y5o,K5o,Z5o,J1,qae,eyo,oyo,Ej,ryo,tyo,ayo,Y1,Oae,nyo,syo,yj,lyo,iyo,dyo,K1,Gae,cyo,fyo,wj,myo,gyo,hyo,Z1,Xae,pyo,_yo,Aj,uyo,byo,vyo,eb,Vae,Tyo,Fyo,Lj,Cyo,Myo,Eyo,ob,zae,yyo,wyo,Bj,Ayo,Lyo,Byo,rb,Wae,xyo,kyo,xj,Ryo,Syo,Pyo,tb,Qae,$yo,Iyo,kj,jyo,Dyo,Nyo,ab,Hae,qyo,Oyo,Rj,Gyo,Xyo,Vyo,nb,Uae,zyo,Wyo,Sj,Qyo,Hyo,Uyo,sb,Jae,Jyo,Yyo,Pj,Kyo,Zyo,ewo,lb,Yae,owo,rwo,$j,two,awo,nwo,ib,Kae,swo,lwo,Ij,iwo,dwo,cwo,db,Zae,fwo,mwo,jj,gwo,hwo,pwo,cb,ene,_wo,uwo,Dj,bwo,vwo,Two,fb,one,Fwo,Cwo,Nj,Mwo,Ewo,ywo,mb,rne,wwo,Awo,qj,Lwo,Bwo,xwo,gb,tne,kwo,Rwo,Oj,Swo,Pwo,$wo,hb,Iwo,ane,jwo,Dwo,nne,Nwo,qwo,sne,Owo,Gwo,E3,zxe,bd,pb,lne,y3,Xwo,ine,Vwo,Wxe,tr,w3,zwo,vd,Wwo,dne,Qwo,Hwo,cne,Uwo,Jwo,Ywo,A3,Kwo,fne,Zwo,eAo,oAo,Yr,L3,rAo,mne,tAo,aAo,Td,nAo,gne,sAo,lAo,hne,iAo,dAo,cAo,pne,fAo,mAo,B3,gAo,ze,x3,hAo,_ne,pAo,_Ao,Ya,uAo,une,bAo,vAo,bne,TAo,FAo,vne,CAo,MAo,EAo,da,_b,Tne,yAo,wAo,Gj,AAo,LAo,BAo,ub,Fne,xAo,kAo,Xj,RAo,SAo,PAo,bb,Cne,$Ao,IAo,Vj,jAo,DAo,NAo,vb,Mne,qAo,OAo,zj,GAo,XAo,VAo,Tb,Ene,zAo,WAo,Wj,QAo,HAo,UAo,Fb,JAo,yne,YAo,KAo,wne,ZAo,eLo,Ane,oLo,rLo,k3,Qxe,Fd,Cb,Lne,R3,tLo,Bne,aLo,Hxe,ar,S3,nLo,Cd,sLo,xne,lLo,iLo,kne,dLo,cLo,fLo,P3,mLo,Rne,gLo,hLo,pLo,Kr,$3,_Lo,Sne,uLo,bLo,Md,vLo,Pne,TLo,FLo,$ne,CLo,MLo,ELo,Ine,yLo,wLo,I3,ALo,We,j3,LLo,jne,BLo,xLo,Ka,kLo,Dne,RLo,SLo,Nne,PLo,$Lo,qne,ILo,jLo,DLo,N,Mb,One,NLo,qLo,Qj,OLo,GLo,XLo,Eb,Gne,VLo,zLo,Hj,WLo,QLo,HLo,yb,Xne,ULo,JLo,Uj,YLo,KLo,ZLo,wb,Vne,e8o,o8o,Jj,r8o,t8o,a8o,Ab,zne,n8o,s8o,Yj,l8o,i8o,d8o,Lb,Wne,c8o,f8o,Kj,m8o,g8o,h8o,Bb,Qne,p8o,_8o,Zj,u8o,b8o,v8o,xb,Hne,T8o,F8o,eD,C8o,M8o,E8o,kb,Une,y8o,w8o,oD,A8o,L8o,B8o,Rb,Jne,x8o,k8o,rD,R8o,S8o,P8o,Sb,Yne,$8o,I8o,tD,j8o,D8o,N8o,Pb,Kne,q8o,O8o,aD,G8o,X8o,V8o,$b,Zne,z8o,W8o,nD,Q8o,H8o,U8o,Ib,ese,J8o,Y8o,sD,K8o,Z8o,e9o,jb,ose,o9o,r9o,lD,t9o,a9o,n9o,Db,rse,s9o,l9o,iD,i9o,d9o,c9o,Nb,tse,f9o,m9o,dD,g9o,h9o,p9o,qb,ase,_9o,u9o,cD,b9o,v9o,T9o,Ob,nse,F9o,C9o,fD,M9o,E9o,y9o,Gb,sse,w9o,A9o,mD,L9o,B9o,x9o,Xb,lse,k9o,R9o,gD,S9o,P9o,$9o,Vb,ise,I9o,j9o,hD,D9o,N9o,q9o,zb,dse,O9o,G9o,pD,X9o,V9o,z9o,Wb,cse,W9o,Q9o,_D,H9o,U9o,J9o,Qb,fse,Y9o,K9o,uD,Z9o,eBo,oBo,Hb,mse,rBo,tBo,bD,aBo,nBo,sBo,Ub,gse,lBo,iBo,vD,dBo,cBo,fBo,Jb,hse,mBo,gBo,TD,hBo,pBo,_Bo,Yb,pse,uBo,bBo,FD,vBo,TBo,FBo,Kb,_se,CBo,MBo,CD,EBo,yBo,wBo,Zb,use,ABo,LBo,MD,BBo,xBo,kBo,ev,bse,RBo,SBo,ED,PBo,$Bo,IBo,ov,vse,jBo,DBo,yD,NBo,qBo,OBo,rv,GBo,Tse,XBo,VBo,Fse,zBo,WBo,Cse,QBo,HBo,D3,Uxe,Ed,tv,Mse,N3,UBo,Ese,JBo,Jxe,nr,q3,YBo,yd,KBo,yse,ZBo,exo,wse,oxo,rxo,txo,O3,axo,Ase,nxo,sxo,lxo,Zr,G3,ixo,Lse,dxo,cxo,wd,fxo,Bse,mxo,gxo,xse,hxo,pxo,_xo,kse,uxo,bxo,X3,vxo,Qe,V3,Txo,Rse,Fxo,Cxo,Za,Mxo,Sse,Exo,yxo,Pse,wxo,Axo,$se,Lxo,Bxo,xxo,R,av,Ise,kxo,Rxo,wD,Sxo,Pxo,$xo,nv,jse,Ixo,jxo,AD,Dxo,Nxo,qxo,sv,Dse,Oxo,Gxo,LD,Xxo,Vxo,zxo,lv,Nse,Wxo,Qxo,BD,Hxo,Uxo,Jxo,iv,qse,Yxo,Kxo,xD,Zxo,eko,oko,dv,Ose,rko,tko,kD,ako,nko,sko,cv,Gse,lko,iko,RD,dko,cko,fko,fv,Xse,mko,gko,SD,hko,pko,_ko,mv,Vse,uko,bko,PD,vko,Tko,Fko,gv,zse,Cko,Mko,$D,Eko,yko,wko,hv,Wse,Ako,Lko,ID,Bko,xko,kko,pv,Qse,Rko,Sko,jD,Pko,$ko,Iko,_v,Hse,jko,Dko,DD,Nko,qko,Oko,uv,Use,Gko,Xko,ND,Vko,zko,Wko,bv,Jse,Qko,Hko,qD,Uko,Jko,Yko,vv,Yse,Kko,Zko,OD,eRo,oRo,rRo,Tv,Kse,tRo,aRo,GD,nRo,sRo,lRo,Fv,Zse,iRo,dRo,XD,cRo,fRo,mRo,Cv,ele,gRo,hRo,VD,pRo,_Ro,uRo,Mv,ole,bRo,vRo,zD,TRo,FRo,CRo,Ev,rle,MRo,ERo,WD,yRo,wRo,ARo,yv,tle,LRo,BRo,QD,xRo,kRo,RRo,wv,ale,SRo,PRo,HD,$Ro,IRo,jRo,Av,nle,DRo,NRo,UD,qRo,ORo,GRo,Lv,sle,XRo,VRo,JD,zRo,WRo,QRo,Bv,lle,HRo,URo,YD,JRo,YRo,KRo,xv,ile,ZRo,eSo,KD,oSo,rSo,tSo,kv,dle,aSo,nSo,ZD,sSo,lSo,iSo,Rv,cle,dSo,cSo,eN,fSo,mSo,gSo,Sv,fle,hSo,pSo,oN,_So,uSo,bSo,Pv,mle,vSo,TSo,rN,FSo,CSo,MSo,$v,gle,ESo,ySo,tN,wSo,ASo,LSo,Iv,hle,BSo,xSo,aN,kSo,RSo,SSo,jv,ple,PSo,$So,nN,ISo,jSo,DSo,Dv,_le,NSo,qSo,sN,OSo,GSo,XSo,Nv,ule,VSo,zSo,lN,WSo,QSo,HSo,qv,ble,USo,JSo,iN,YSo,KSo,ZSo,Ov,vle,ePo,oPo,dN,rPo,tPo,aPo,Gv,Tle,nPo,sPo,cN,lPo,iPo,dPo,Xv,cPo,Fle,fPo,mPo,Cle,gPo,hPo,Mle,pPo,_Po,z3,Yxe,Ad,Vv,Ele,W3,uPo,yle,bPo,Kxe,sr,Q3,vPo,Ld,TPo,wle,FPo,CPo,Ale,MPo,EPo,yPo,H3,wPo,Lle,APo,LPo,BPo,et,U3,xPo,Ble,kPo,RPo,Bd,SPo,xle,PPo,$Po,kle,IPo,jPo,DPo,Rle,NPo,qPo,J3,OPo,He,Y3,GPo,Sle,XPo,VPo,en,zPo,Ple,WPo,QPo,$le,HPo,UPo,Ile,JPo,YPo,KPo,jle,zv,Dle,ZPo,e$o,fN,o$o,r$o,t$o,Wv,a$o,Nle,n$o,s$o,qle,l$o,i$o,Ole,d$o,c$o,K3,Zxe,xd,Qv,Gle,Z3,f$o,Xle,m$o,eke,lr,e5,g$o,kd,h$o,Vle,p$o,_$o,zle,u$o,b$o,v$o,o5,T$o,Wle,F$o,C$o,M$o,ot,r5,E$o,Qle,y$o,w$o,Rd,A$o,Hle,L$o,B$o,Ule,x$o,k$o,R$o,Jle,S$o,P$o,t5,$$o,Ue,a5,I$o,Yle,j$o,D$o,on,N$o,Kle,q$o,O$o,Zle,G$o,X$o,eie,V$o,z$o,W$o,pe,Hv,oie,Q$o,H$o,mN,U$o,J$o,Y$o,Uv,rie,K$o,Z$o,gN,eIo,oIo,rIo,qs,tie,tIo,aIo,hN,nIo,sIo,pN,lIo,iIo,dIo,Jv,aie,cIo,fIo,_N,mIo,gIo,hIo,ma,nie,pIo,_Io,uN,uIo,bIo,bN,vIo,TIo,vN,FIo,CIo,MIo,Yv,sie,EIo,yIo,TN,wIo,AIo,LIo,Kv,lie,BIo,xIo,FN,kIo,RIo,SIo,Zv,iie,PIo,$Io,CN,IIo,jIo,DIo,e6,die,NIo,qIo,MN,OIo,GIo,XIo,o6,cie,VIo,zIo,EN,WIo,QIo,HIo,r6,UIo,fie,JIo,YIo,mie,KIo,ZIo,gie,ejo,ojo,n5,oke,Sd,t6,hie,s5,rjo,pie,tjo,rke,ir,l5,ajo,Pd,njo,_ie,sjo,ljo,uie,ijo,djo,cjo,i5,fjo,bie,mjo,gjo,hjo,rt,d5,pjo,vie,_jo,ujo,$d,bjo,Tie,vjo,Tjo,Fie,Fjo,Cjo,Mjo,Cie,Ejo,yjo,c5,wjo,Je,f5,Ajo,Mie,Ljo,Bjo,rn,xjo,Eie,kjo,Rjo,yie,Sjo,Pjo,wie,$jo,Ijo,jjo,Aie,a6,Lie,Djo,Njo,yN,qjo,Ojo,Gjo,n6,Xjo,Bie,Vjo,zjo,xie,Wjo,Qjo,kie,Hjo,Ujo,m5,tke,Id,s6,Rie,g5,Jjo,Sie,Yjo,ake,dr,h5,Kjo,jd,Zjo,Pie,eDo,oDo,$ie,rDo,tDo,aDo,p5,nDo,Iie,sDo,lDo,iDo,tt,_5,dDo,jie,cDo,fDo,Dd,mDo,Die,gDo,hDo,Nie,pDo,_Do,uDo,qie,bDo,vDo,u5,TDo,Ye,b5,FDo,Oie,CDo,MDo,tn,EDo,Gie,yDo,wDo,Xie,ADo,LDo,Vie,BDo,xDo,kDo,ke,l6,zie,RDo,SDo,wN,PDo,$Do,IDo,i6,Wie,jDo,DDo,AN,NDo,qDo,ODo,d6,Qie,GDo,XDo,LN,VDo,zDo,WDo,c6,Hie,QDo,HDo,BN,UDo,JDo,YDo,f6,Uie,KDo,ZDo,xN,eNo,oNo,rNo,m6,Jie,tNo,aNo,kN,nNo,sNo,lNo,g6,Yie,iNo,dNo,RN,cNo,fNo,mNo,h6,Kie,gNo,hNo,SN,pNo,_No,uNo,p6,bNo,Zie,vNo,TNo,ede,FNo,CNo,ode,MNo,ENo,v5,nke,Nd,_6,rde,T5,yNo,tde,wNo,ske,cr,F5,ANo,qd,LNo,ade,BNo,xNo,nde,kNo,RNo,SNo,C5,PNo,sde,$No,INo,jNo,at,M5,DNo,lde,NNo,qNo,Od,ONo,ide,GNo,XNo,dde,VNo,zNo,WNo,cde,QNo,HNo,E5,UNo,Ke,y5,JNo,fde,YNo,KNo,an,ZNo,mde,eqo,oqo,gde,rqo,tqo,hde,aqo,nqo,sqo,nn,u6,pde,lqo,iqo,PN,dqo,cqo,fqo,b6,_de,mqo,gqo,$N,hqo,pqo,_qo,v6,ude,uqo,bqo,IN,vqo,Tqo,Fqo,T6,bde,Cqo,Mqo,jN,Eqo,yqo,wqo,F6,Aqo,vde,Lqo,Bqo,Tde,xqo,kqo,Fde,Rqo,Sqo,w5,lke,Gd,C6,Cde,A5,Pqo,Mde,$qo,ike,fr,L5,Iqo,Xd,jqo,Ede,Dqo,Nqo,yde,qqo,Oqo,Gqo,B5,Xqo,wde,Vqo,zqo,Wqo,nt,x5,Qqo,Ade,Hqo,Uqo,Vd,Jqo,Lde,Yqo,Kqo,Bde,Zqo,eOo,oOo,xde,rOo,tOo,k5,aOo,Ze,R5,nOo,kde,sOo,lOo,sn,iOo,Rde,dOo,cOo,Sde,fOo,mOo,Pde,gOo,hOo,pOo,Re,M6,$de,_Oo,uOo,DN,bOo,vOo,TOo,E6,Ide,FOo,COo,NN,MOo,EOo,yOo,y6,jde,wOo,AOo,qN,LOo,BOo,xOo,w6,Dde,kOo,ROo,ON,SOo,POo,$Oo,A6,Nde,IOo,jOo,GN,DOo,NOo,qOo,L6,qde,OOo,GOo,XN,XOo,VOo,zOo,B6,Ode,WOo,QOo,VN,HOo,UOo,JOo,x6,Gde,YOo,KOo,zN,ZOo,eGo,oGo,k6,rGo,Xde,tGo,aGo,Vde,nGo,sGo,zde,lGo,iGo,S5,dke,zd,R6,Wde,P5,dGo,Qde,cGo,cke,mr,$5,fGo,Wd,mGo,Hde,gGo,hGo,Ude,pGo,_Go,uGo,I5,bGo,Jde,vGo,TGo,FGo,st,j5,CGo,Yde,MGo,EGo,Qd,yGo,Kde,wGo,AGo,Zde,LGo,BGo,xGo,ece,kGo,RGo,D5,SGo,eo,N5,PGo,oce,$Go,IGo,ln,jGo,rce,DGo,NGo,tce,qGo,OGo,ace,GGo,XGo,VGo,q5,S6,nce,zGo,WGo,WN,QGo,HGo,UGo,P6,sce,JGo,YGo,QN,KGo,ZGo,eXo,$6,oXo,lce,rXo,tXo,ice,aXo,nXo,dce,sXo,lXo,O5,fke,Hd,I6,cce,G5,iXo,fce,dXo,mke,gr,X5,cXo,Ud,fXo,mce,mXo,gXo,gce,hXo,pXo,_Xo,V5,uXo,hce,bXo,vXo,TXo,lt,z5,FXo,pce,CXo,MXo,Jd,EXo,_ce,yXo,wXo,uce,AXo,LXo,BXo,bce,xXo,kXo,W5,RXo,oo,Q5,SXo,vce,PXo,$Xo,dn,IXo,Tce,jXo,DXo,Fce,NXo,qXo,Cce,OXo,GXo,XXo,cn,j6,Mce,VXo,zXo,HN,WXo,QXo,HXo,D6,Ece,UXo,JXo,UN,YXo,KXo,ZXo,N6,yce,eVo,oVo,JN,rVo,tVo,aVo,q6,wce,nVo,sVo,YN,lVo,iVo,dVo,O6,cVo,Ace,fVo,mVo,Lce,gVo,hVo,Bce,pVo,_Vo,H5,gke,Yd,G6,xce,U5,uVo,kce,bVo,hke,hr,J5,vVo,Kd,TVo,Rce,FVo,CVo,Sce,MVo,EVo,yVo,Y5,wVo,Pce,AVo,LVo,BVo,it,K5,xVo,$ce,kVo,RVo,Zd,SVo,Ice,PVo,$Vo,jce,IVo,jVo,DVo,Dce,NVo,qVo,Z5,OVo,ro,ey,GVo,Nce,XVo,VVo,fn,zVo,qce,WVo,QVo,Oce,HVo,UVo,Gce,JVo,YVo,KVo,ec,X6,Xce,ZVo,ezo,KN,ozo,rzo,tzo,V6,Vce,azo,nzo,ZN,szo,lzo,izo,z6,zce,dzo,czo,eq,fzo,mzo,gzo,W6,hzo,Wce,pzo,_zo,Qce,uzo,bzo,Hce,vzo,Tzo,oy,pke,oc,Q6,Uce,ry,Fzo,Jce,Czo,_ke,pr,ty,Mzo,rc,Ezo,Yce,yzo,wzo,Kce,Azo,Lzo,Bzo,ay,xzo,Zce,kzo,Rzo,Szo,dt,ny,Pzo,efe,$zo,Izo,tc,jzo,ofe,Dzo,Nzo,rfe,qzo,Ozo,Gzo,tfe,Xzo,Vzo,sy,zzo,to,ly,Wzo,afe,Qzo,Hzo,mn,Uzo,nfe,Jzo,Yzo,sfe,Kzo,Zzo,lfe,eWo,oWo,rWo,ife,H6,dfe,tWo,aWo,oq,nWo,sWo,lWo,U6,iWo,cfe,dWo,cWo,ffe,fWo,mWo,mfe,gWo,hWo,iy,uke,ac,J6,gfe,dy,pWo,hfe,_Wo,bke,_r,cy,uWo,nc,bWo,pfe,vWo,TWo,_fe,FWo,CWo,MWo,fy,EWo,ufe,yWo,wWo,AWo,ct,my,LWo,bfe,BWo,xWo,sc,kWo,vfe,RWo,SWo,Tfe,PWo,$Wo,IWo,Ffe,jWo,DWo,gy,NWo,ao,hy,qWo,Cfe,OWo,GWo,gn,XWo,Mfe,VWo,zWo,Efe,WWo,QWo,yfe,HWo,UWo,JWo,wfe,Y6,Afe,YWo,KWo,rq,ZWo,eQo,oQo,K6,rQo,Lfe,tQo,aQo,Bfe,nQo,sQo,xfe,lQo,iQo,py,vke,lc,Z6,kfe,_y,dQo,Rfe,cQo,Tke,ur,uy,fQo,ic,mQo,Sfe,gQo,hQo,Pfe,pQo,_Qo,uQo,by,bQo,$fe,vQo,TQo,FQo,ft,vy,CQo,Ife,MQo,EQo,dc,yQo,jfe,wQo,AQo,Dfe,LQo,BQo,xQo,Nfe,kQo,RQo,Ty,SQo,no,Fy,PQo,qfe,$Qo,IQo,hn,jQo,Ofe,DQo,NQo,Gfe,qQo,OQo,Xfe,GQo,XQo,VQo,Cy,e0,Vfe,zQo,WQo,tq,QQo,HQo,UQo,o0,zfe,JQo,YQo,aq,KQo,ZQo,eHo,r0,oHo,Wfe,rHo,tHo,Qfe,aHo,nHo,Hfe,sHo,lHo,My,Fke,cc,t0,Ufe,Ey,iHo,Jfe,dHo,Cke,br,yy,cHo,fc,fHo,Yfe,mHo,gHo,Kfe,hHo,pHo,_Ho,wy,uHo,Zfe,bHo,vHo,THo,mt,Ay,FHo,eme,CHo,MHo,mc,EHo,ome,yHo,wHo,rme,AHo,LHo,BHo,tme,xHo,kHo,Ly,RHo,so,By,SHo,ame,PHo,$Ho,pn,IHo,nme,jHo,DHo,sme,NHo,qHo,lme,OHo,GHo,XHo,ime,a0,dme,VHo,zHo,nq,WHo,QHo,HHo,n0,UHo,cme,JHo,YHo,fme,KHo,ZHo,mme,eUo,oUo,xy,Mke,gc,s0,gme,ky,rUo,hme,tUo,Eke,vr,Ry,aUo,hc,nUo,pme,sUo,lUo,_me,iUo,dUo,cUo,Sy,fUo,ume,mUo,gUo,hUo,gt,Py,pUo,bme,_Uo,uUo,pc,bUo,vme,vUo,TUo,Tme,FUo,CUo,MUo,Fme,EUo,yUo,$y,wUo,ho,Iy,AUo,Cme,LUo,BUo,_n,xUo,Mme,kUo,RUo,Eme,SUo,PUo,yme,$Uo,IUo,jUo,B,l0,wme,DUo,NUo,sq,qUo,OUo,GUo,i0,Ame,XUo,VUo,lq,zUo,WUo,QUo,d0,Lme,HUo,UUo,iq,JUo,YUo,KUo,c0,Bme,ZUo,eJo,dq,oJo,rJo,tJo,f0,xme,aJo,nJo,cq,sJo,lJo,iJo,m0,kme,dJo,cJo,fq,fJo,mJo,gJo,g0,Rme,hJo,pJo,mq,_Jo,uJo,bJo,h0,Sme,vJo,TJo,gq,FJo,CJo,MJo,p0,Pme,EJo,yJo,hq,wJo,AJo,LJo,_0,$me,BJo,xJo,pq,kJo,RJo,SJo,u0,Ime,PJo,$Jo,_q,IJo,jJo,DJo,b0,jme,NJo,qJo,uq,OJo,GJo,XJo,v0,Dme,VJo,zJo,bq,WJo,QJo,HJo,T0,Nme,UJo,JJo,vq,YJo,KJo,ZJo,F0,qme,eYo,oYo,Tq,rYo,tYo,aYo,C0,Ome,nYo,sYo,Fq,lYo,iYo,dYo,Os,Gme,cYo,fYo,Cq,mYo,gYo,Mq,hYo,pYo,_Yo,M0,Xme,uYo,bYo,Eq,vYo,TYo,FYo,E0,Vme,CYo,MYo,yq,EYo,yYo,wYo,y0,zme,AYo,LYo,wq,BYo,xYo,kYo,w0,Wme,RYo,SYo,Aq,PYo,$Yo,IYo,A0,Qme,jYo,DYo,Lq,NYo,qYo,OYo,L0,Hme,GYo,XYo,Bq,VYo,zYo,WYo,B0,Ume,QYo,HYo,xq,UYo,JYo,YYo,x0,Jme,KYo,ZYo,kq,eKo,oKo,rKo,k0,Yme,tKo,aKo,Rq,nKo,sKo,lKo,R0,Kme,iKo,dKo,Sq,cKo,fKo,mKo,S0,Zme,gKo,hKo,Pq,pKo,_Ko,uKo,P0,ege,bKo,vKo,$q,TKo,FKo,CKo,$0,oge,MKo,EKo,Iq,yKo,wKo,AKo,I0,rge,LKo,BKo,jq,xKo,kKo,RKo,j0,tge,SKo,PKo,Dq,$Ko,IKo,jKo,D0,age,DKo,NKo,Nq,qKo,OKo,GKo,N0,nge,XKo,VKo,qq,zKo,WKo,QKo,q0,sge,HKo,UKo,Oq,JKo,YKo,KKo,O0,lge,ZKo,eZo,Gq,oZo,rZo,tZo,G0,ige,aZo,nZo,Xq,sZo,lZo,iZo,X0,dge,dZo,cZo,Vq,fZo,mZo,gZo,V0,cge,hZo,pZo,zq,_Zo,uZo,bZo,z0,fge,vZo,TZo,Wq,FZo,CZo,MZo,W0,mge,EZo,yZo,Qq,wZo,AZo,LZo,Q0,gge,BZo,xZo,Hq,kZo,RZo,SZo,hge,PZo,$Zo,jy,yke,_c,H0,pge,Dy,IZo,_ge,jZo,wke,Tr,Ny,DZo,uc,NZo,uge,qZo,OZo,bge,GZo,XZo,VZo,qy,zZo,vge,WZo,QZo,HZo,ht,Oy,UZo,Tge,JZo,YZo,bc,KZo,Fge,ZZo,eer,Cge,oer,rer,ter,Mge,aer,ner,Gy,ser,po,Xy,ler,Ege,ier,der,un,cer,yge,fer,mer,wge,ger,her,Age,per,_er,uer,H,U0,Lge,ber,ver,Uq,Ter,Fer,Cer,J0,Bge,Mer,Eer,Jq,yer,wer,Aer,Y0,xge,Ler,Ber,Yq,xer,ker,Rer,K0,kge,Ser,Per,Kq,$er,Ier,jer,Z0,Rge,Der,Ner,Zq,qer,Oer,Ger,eT,Sge,Xer,Ver,eO,zer,Wer,Qer,oT,Pge,Her,Uer,oO,Jer,Yer,Ker,rT,$ge,Zer,eor,rO,oor,ror,tor,tT,Ige,aor,nor,tO,sor,lor,ior,aT,jge,dor,cor,aO,mor,gor,hor,nT,Dge,por,_or,nO,uor,bor,vor,sT,Nge,Tor,For,sO,Cor,Mor,Eor,lT,qge,yor,wor,lO,Aor,Lor,Bor,iT,Oge,xor,kor,iO,Ror,Sor,Por,dT,Gge,$or,Ior,dO,jor,Dor,Nor,cT,Xge,qor,Oor,cO,Gor,Xor,Vor,fT,Vge,zor,Wor,fO,Qor,Hor,Uor,mT,zge,Jor,Yor,mO,Kor,Zor,err,gT,Wge,orr,rrr,gO,trr,arr,nrr,hT,Qge,srr,lrr,hO,irr,drr,crr,pT,Hge,frr,mrr,pO,grr,hrr,prr,_T,Uge,_rr,urr,_O,brr,vrr,Trr,Jge,Frr,Crr,Vy,Ake,vc,uT,Yge,zy,Mrr,Kge,Err,Lke,Fr,Wy,yrr,Tc,wrr,Zge,Arr,Lrr,ehe,Brr,xrr,krr,Qy,Rrr,ohe,Srr,Prr,$rr,pt,Hy,Irr,rhe,jrr,Drr,Fc,Nrr,the,qrr,Orr,ahe,Grr,Xrr,Vrr,nhe,zrr,Wrr,Uy,Qrr,_o,Jy,Hrr,she,Urr,Jrr,bn,Yrr,lhe,Krr,Zrr,ihe,etr,otr,dhe,rtr,ttr,atr,_e,bT,che,ntr,str,uO,ltr,itr,dtr,vT,fhe,ctr,ftr,bO,mtr,gtr,htr,TT,mhe,ptr,_tr,vO,utr,btr,vtr,FT,ghe,Ttr,Ftr,TO,Ctr,Mtr,Etr,CT,hhe,ytr,wtr,FO,Atr,Ltr,Btr,MT,phe,xtr,ktr,CO,Rtr,Str,Ptr,ET,_he,$tr,Itr,MO,jtr,Dtr,Ntr,yT,uhe,qtr,Otr,EO,Gtr,Xtr,Vtr,wT,bhe,ztr,Wtr,yO,Qtr,Htr,Utr,AT,vhe,Jtr,Ytr,wO,Ktr,Ztr,ear,The,oar,rar,Yy,Bke,Cc,LT,Fhe,Ky,tar,Che,aar,xke,Cr,Zy,nar,Mc,sar,Mhe,lar,iar,Ehe,dar,car,far,ew,mar,yhe,gar,har,par,_t,ow,_ar,whe,uar,bar,Ec,Tar,Ahe,Far,Car,Lhe,Mar,Ear,yar,Bhe,war,Aar,rw,Lar,uo,tw,Bar,xhe,xar,kar,vn,Rar,khe,Sar,Par,Rhe,$ar,Iar,She,jar,Dar,Nar,aw,BT,Phe,qar,Oar,AO,Gar,Xar,Var,xT,$he,zar,War,LO,Qar,Har,Uar,Ihe,Jar,Yar,nw,kke,yc,kT,jhe,sw,Kar,Dhe,Zar,Rke,Mr,lw,enr,wc,onr,Nhe,rnr,tnr,qhe,anr,nnr,snr,iw,lnr,Ohe,inr,dnr,cnr,ut,dw,fnr,Ghe,mnr,gnr,Ac,hnr,Xhe,pnr,_nr,Vhe,unr,bnr,vnr,zhe,Tnr,Fnr,cw,Cnr,bo,fw,Mnr,Whe,Enr,ynr,Tn,wnr,Qhe,Anr,Lnr,Hhe,Bnr,xnr,Uhe,knr,Rnr,Snr,Y,RT,Jhe,Pnr,$nr,BO,Inr,jnr,Dnr,ST,Yhe,Nnr,qnr,xO,Onr,Gnr,Xnr,PT,Khe,Vnr,znr,kO,Wnr,Qnr,Hnr,$T,Zhe,Unr,Jnr,RO,Ynr,Knr,Znr,IT,epe,esr,osr,SO,rsr,tsr,asr,jT,ope,nsr,ssr,PO,lsr,isr,dsr,DT,rpe,csr,fsr,$O,msr,gsr,hsr,NT,tpe,psr,_sr,IO,usr,bsr,vsr,qT,ape,Tsr,Fsr,jO,Csr,Msr,Esr,OT,npe,ysr,wsr,DO,Asr,Lsr,Bsr,GT,spe,xsr,ksr,NO,Rsr,Ssr,Psr,XT,lpe,$sr,Isr,qO,jsr,Dsr,Nsr,VT,ipe,qsr,Osr,OO,Gsr,Xsr,Vsr,zT,dpe,zsr,Wsr,GO,Qsr,Hsr,Usr,WT,cpe,Jsr,Ysr,XO,Ksr,Zsr,elr,QT,fpe,olr,rlr,VO,tlr,alr,nlr,HT,mpe,slr,llr,zO,ilr,dlr,clr,UT,gpe,flr,mlr,WO,glr,hlr,plr,JT,hpe,_lr,ulr,QO,blr,vlr,Tlr,YT,ppe,Flr,Clr,HO,Mlr,Elr,ylr,_pe,wlr,Alr,mw,Ske,Lc,KT,upe,gw,Llr,bpe,Blr,Pke,Er,hw,xlr,Bc,klr,vpe,Rlr,Slr,Tpe,Plr,$lr,Ilr,pw,jlr,Fpe,Dlr,Nlr,qlr,bt,_w,Olr,Cpe,Glr,Xlr,xc,Vlr,Mpe,zlr,Wlr,Epe,Qlr,Hlr,Ulr,ype,Jlr,Ylr,uw,Klr,vo,bw,Zlr,wpe,eir,oir,Fn,rir,Ape,tir,air,Lpe,nir,sir,Bpe,lir,iir,dir,ue,ZT,xpe,cir,fir,UO,mir,gir,hir,e7,kpe,pir,_ir,JO,uir,bir,vir,o7,Rpe,Tir,Fir,YO,Cir,Mir,Eir,r7,Spe,yir,wir,KO,Air,Lir,Bir,t7,Ppe,xir,kir,ZO,Rir,Sir,Pir,a7,$pe,$ir,Iir,eG,jir,Dir,Nir,n7,Ipe,qir,Oir,oG,Gir,Xir,Vir,s7,jpe,zir,Wir,rG,Qir,Hir,Uir,l7,Dpe,Jir,Yir,tG,Kir,Zir,edr,i7,Npe,odr,rdr,aG,tdr,adr,ndr,qpe,sdr,ldr,vw,$ke,kc,d7,Ope,Tw,idr,Gpe,ddr,Ike,yr,Fw,cdr,Rc,fdr,Xpe,mdr,gdr,Vpe,hdr,pdr,_dr,Cw,udr,zpe,bdr,vdr,Tdr,vt,Mw,Fdr,Wpe,Cdr,Mdr,Sc,Edr,Qpe,ydr,wdr,Hpe,Adr,Ldr,Bdr,Upe,xdr,kdr,Ew,Rdr,To,yw,Sdr,Jpe,Pdr,$dr,Cn,Idr,Ype,jdr,Ddr,Kpe,Ndr,qdr,Zpe,Odr,Gdr,Xdr,V,c7,e_e,Vdr,zdr,nG,Wdr,Qdr,Hdr,f7,o_e,Udr,Jdr,sG,Ydr,Kdr,Zdr,m7,r_e,ecr,ocr,lG,rcr,tcr,acr,g7,t_e,ncr,scr,iG,lcr,icr,dcr,h7,a_e,ccr,fcr,dG,mcr,gcr,hcr,p7,n_e,pcr,_cr,cG,ucr,bcr,vcr,_7,s_e,Tcr,Fcr,fG,Ccr,Mcr,Ecr,u7,l_e,ycr,wcr,mG,Acr,Lcr,Bcr,b7,i_e,xcr,kcr,gG,Rcr,Scr,Pcr,v7,d_e,$cr,Icr,hG,jcr,Dcr,Ncr,T7,c_e,qcr,Ocr,pG,Gcr,Xcr,Vcr,F7,f_e,zcr,Wcr,_G,Qcr,Hcr,Ucr,C7,m_e,Jcr,Ycr,uG,Kcr,Zcr,efr,M7,g_e,ofr,rfr,bG,tfr,afr,nfr,E7,h_e,sfr,lfr,vG,ifr,dfr,cfr,y7,p_e,ffr,mfr,TG,gfr,hfr,pfr,w7,__e,_fr,ufr,FG,bfr,vfr,Tfr,A7,u_e,Ffr,Cfr,CG,Mfr,Efr,yfr,L7,b_e,wfr,Afr,MG,Lfr,Bfr,xfr,B7,v_e,kfr,Rfr,EG,Sfr,Pfr,$fr,x7,T_e,Ifr,jfr,yG,Dfr,Nfr,qfr,k7,F_e,Ofr,Gfr,wG,Xfr,Vfr,zfr,R7,C_e,Wfr,Qfr,AG,Hfr,Ufr,Jfr,S7,M_e,Yfr,Kfr,LG,Zfr,emr,omr,P7,E_e,rmr,tmr,BG,amr,nmr,smr,y_e,lmr,imr,ww,jke,Pc,$7,w_e,Aw,dmr,A_e,cmr,Dke,wr,Lw,fmr,$c,mmr,L_e,gmr,hmr,B_e,pmr,_mr,umr,Bw,bmr,x_e,vmr,Tmr,Fmr,Tt,xw,Cmr,k_e,Mmr,Emr,Ic,ymr,R_e,wmr,Amr,S_e,Lmr,Bmr,xmr,P_e,kmr,Rmr,kw,Smr,Fo,Rw,Pmr,$_e,$mr,Imr,Mn,jmr,I_e,Dmr,Nmr,j_e,qmr,Omr,D_e,Gmr,Xmr,Vmr,ae,I7,N_e,zmr,Wmr,xG,Qmr,Hmr,Umr,j7,q_e,Jmr,Ymr,kG,Kmr,Zmr,egr,D7,O_e,ogr,rgr,RG,tgr,agr,ngr,N7,G_e,sgr,lgr,SG,igr,dgr,cgr,q7,X_e,fgr,mgr,PG,ggr,hgr,pgr,O7,V_e,_gr,ugr,$G,bgr,vgr,Tgr,G7,z_e,Fgr,Cgr,IG,Mgr,Egr,ygr,X7,W_e,wgr,Agr,jG,Lgr,Bgr,xgr,V7,Q_e,kgr,Rgr,DG,Sgr,Pgr,$gr,z7,H_e,Igr,jgr,NG,Dgr,Ngr,qgr,W7,U_e,Ogr,Ggr,qG,Xgr,Vgr,zgr,Q7,J_e,Wgr,Qgr,OG,Hgr,Ugr,Jgr,H7,Y_e,Ygr,Kgr,GG,Zgr,ehr,ohr,U7,K_e,rhr,thr,XG,ahr,nhr,shr,J7,Z_e,lhr,ihr,VG,dhr,chr,fhr,Y7,eue,mhr,ghr,zG,hhr,phr,_hr,K7,oue,uhr,bhr,WG,vhr,Thr,Fhr,rue,Chr,Mhr,Sw,Nke,jc,Z7,tue,Pw,Ehr,aue,yhr,qke,Ar,$w,whr,Dc,Ahr,nue,Lhr,Bhr,sue,xhr,khr,Rhr,Iw,Shr,lue,Phr,$hr,Ihr,Ft,jw,jhr,iue,Dhr,Nhr,Nc,qhr,due,Ohr,Ghr,cue,Xhr,Vhr,zhr,fue,Whr,Qhr,Dw,Hhr,Co,Nw,Uhr,mue,Jhr,Yhr,En,Khr,gue,Zhr,epr,hue,opr,rpr,pue,tpr,apr,npr,_ue,eF,uue,spr,lpr,QG,ipr,dpr,cpr,bue,fpr,mpr,qw,Oke,qc,oF,vue,Ow,gpr,Tue,hpr,Gke,Lr,Gw,ppr,Oc,_pr,Fue,upr,bpr,Cue,vpr,Tpr,Fpr,Xw,Cpr,Mue,Mpr,Epr,ypr,Ct,Vw,wpr,Eue,Apr,Lpr,Gc,Bpr,yue,xpr,kpr,wue,Rpr,Spr,Ppr,Aue,$pr,Ipr,zw,jpr,Mo,Ww,Dpr,Lue,Npr,qpr,yn,Opr,Bue,Gpr,Xpr,xue,Vpr,zpr,kue,Wpr,Qpr,Hpr,K,rF,Rue,Upr,Jpr,HG,Ypr,Kpr,Zpr,tF,Sue,e_r,o_r,UG,r_r,t_r,a_r,aF,Pue,n_r,s_r,JG,l_r,i_r,d_r,nF,$ue,c_r,f_r,YG,m_r,g_r,h_r,sF,Iue,p_r,__r,KG,u_r,b_r,v_r,lF,jue,T_r,F_r,ZG,C_r,M_r,E_r,iF,Due,y_r,w_r,eX,A_r,L_r,B_r,dF,Nue,x_r,k_r,oX,R_r,S_r,P_r,cF,que,$_r,I_r,rX,j_r,D_r,N_r,fF,Oue,q_r,O_r,tX,G_r,X_r,V_r,mF,Gue,z_r,W_r,aX,Q_r,H_r,U_r,gF,Xue,J_r,Y_r,nX,K_r,Z_r,eur,hF,Vue,our,rur,sX,tur,aur,nur,pF,zue,sur,lur,lX,iur,dur,cur,_F,Wue,fur,mur,iX,gur,hur,pur,uF,Que,_ur,uur,dX,bur,vur,Tur,bF,Hue,Fur,Cur,cX,Mur,Eur,yur,vF,Uue,wur,Aur,fX,Lur,Bur,xur,TF,Jue,kur,Rur,mX,Sur,Pur,$ur,FF,Yue,Iur,jur,gX,Dur,Nur,qur,Kue,Our,Gur,Qw,Xke,Xc,CF,Zue,Hw,Xur,e2e,Vur,Vke,Br,Uw,zur,Vc,Wur,o2e,Qur,Hur,r2e,Uur,Jur,Yur,Jw,Kur,t2e,Zur,e2r,o2r,Mt,Yw,r2r,a2e,t2r,a2r,zc,n2r,n2e,s2r,l2r,s2e,i2r,d2r,c2r,l2e,f2r,m2r,Kw,g2r,Eo,Zw,h2r,i2e,p2r,_2r,wn,u2r,d2e,b2r,v2r,c2e,T2r,F2r,f2e,C2r,M2r,E2r,Z,MF,m2e,y2r,w2r,hX,A2r,L2r,B2r,EF,g2e,x2r,k2r,pX,R2r,S2r,P2r,yF,h2e,$2r,I2r,_X,j2r,D2r,N2r,wF,p2e,q2r,O2r,uX,G2r,X2r,V2r,AF,_2e,z2r,W2r,bX,Q2r,H2r,U2r,LF,u2e,J2r,Y2r,vX,K2r,Z2r,e1r,BF,b2e,o1r,r1r,TX,t1r,a1r,n1r,xF,v2e,s1r,l1r,FX,i1r,d1r,c1r,kF,T2e,f1r,m1r,CX,g1r,h1r,p1r,RF,F2e,_1r,u1r,MX,b1r,v1r,T1r,SF,C2e,F1r,C1r,EX,M1r,E1r,y1r,PF,M2e,w1r,A1r,yX,L1r,B1r,x1r,$F,E2e,k1r,R1r,wX,S1r,P1r,$1r,IF,y2e,I1r,j1r,AX,D1r,N1r,q1r,jF,w2e,O1r,G1r,LX,X1r,V1r,z1r,DF,A2e,W1r,Q1r,BX,H1r,U1r,J1r,NF,L2e,Y1r,K1r,xX,Z1r,ebr,obr,qF,B2e,rbr,tbr,kX,abr,nbr,sbr,OF,x2e,lbr,ibr,RX,dbr,cbr,fbr,k2e,mbr,gbr,eA,zke,Wc,GF,R2e,oA,hbr,S2e,pbr,Wke,xr,rA,_br,Qc,ubr,P2e,bbr,vbr,$2e,Tbr,Fbr,Cbr,tA,Mbr,I2e,Ebr,ybr,wbr,Et,aA,Abr,j2e,Lbr,Bbr,Hc,xbr,D2e,kbr,Rbr,N2e,Sbr,Pbr,$br,q2e,Ibr,jbr,nA,Dbr,yo,sA,Nbr,O2e,qbr,Obr,An,Gbr,G2e,Xbr,Vbr,X2e,zbr,Wbr,V2e,Qbr,Hbr,Ubr,z2e,XF,W2e,Jbr,Ybr,SX,Kbr,Zbr,evr,Q2e,ovr,rvr,lA,Qke,Uc,VF,H2e,iA,tvr,U2e,avr,Hke,kr,dA,nvr,Jc,svr,J2e,lvr,ivr,Y2e,dvr,cvr,fvr,cA,mvr,K2e,gvr,hvr,pvr,yt,fA,_vr,Z2e,uvr,bvr,Yc,vvr,e1e,Tvr,Fvr,o1e,Cvr,Mvr,Evr,r1e,yvr,wvr,mA,Avr,wo,gA,Lvr,t1e,Bvr,xvr,Ln,kvr,a1e,Rvr,Svr,n1e,Pvr,$vr,s1e,Ivr,jvr,Dvr,l1e,zF,i1e,Nvr,qvr,PX,Ovr,Gvr,Xvr,d1e,Vvr,zvr,hA,Uke,Kc,WF,c1e,pA,Wvr,f1e,Qvr,Jke,Rr,_A,Hvr,Zc,Uvr,m1e,Jvr,Yvr,g1e,Kvr,Zvr,e6r,uA,o6r,h1e,r6r,t6r,a6r,wt,bA,n6r,p1e,s6r,l6r,ef,i6r,_1e,d6r,c6r,u1e,f6r,m6r,g6r,b1e,h6r,p6r,vA,_6r,Ao,TA,u6r,v1e,b6r,v6r,Bn,T6r,T1e,F6r,C6r,F1e,M6r,E6r,C1e,y6r,w6r,A6r,z,QF,M1e,L6r,B6r,$X,x6r,k6r,R6r,HF,E1e,S6r,P6r,IX,$6r,I6r,j6r,UF,y1e,D6r,N6r,jX,q6r,O6r,G6r,JF,w1e,X6r,V6r,DX,z6r,W6r,Q6r,YF,A1e,H6r,U6r,NX,J6r,Y6r,K6r,KF,L1e,Z6r,e0r,qX,o0r,r0r,t0r,ZF,B1e,a0r,n0r,OX,s0r,l0r,i0r,eC,x1e,d0r,c0r,GX,f0r,m0r,g0r,oC,k1e,h0r,p0r,XX,_0r,u0r,b0r,rC,R1e,v0r,T0r,VX,F0r,C0r,M0r,tC,S1e,E0r,y0r,zX,w0r,A0r,L0r,aC,P1e,B0r,x0r,WX,k0r,R0r,S0r,nC,$1e,P0r,$0r,QX,I0r,j0r,D0r,sC,I1e,N0r,q0r,HX,O0r,G0r,X0r,lC,j1e,V0r,z0r,UX,W0r,Q0r,H0r,iC,D1e,U0r,J0r,JX,Y0r,K0r,Z0r,dC,N1e,eTr,oTr,YX,rTr,tTr,aTr,cC,q1e,nTr,sTr,KX,lTr,iTr,dTr,fC,O1e,cTr,fTr,ZX,mTr,gTr,hTr,mC,G1e,pTr,_Tr,eV,uTr,bTr,vTr,gC,X1e,TTr,FTr,oV,CTr,MTr,ETr,hC,V1e,yTr,wTr,rV,ATr,LTr,BTr,pC,z1e,xTr,kTr,tV,RTr,STr,PTr,_C,W1e,$Tr,ITr,aV,jTr,DTr,NTr,uC,Q1e,qTr,OTr,nV,GTr,XTr,VTr,H1e,zTr,WTr,FA,Yke,of,bC,U1e,CA,QTr,J1e,HTr,Kke,Sr,MA,UTr,rf,JTr,Y1e,YTr,KTr,K1e,ZTr,e7r,o7r,EA,r7r,Z1e,t7r,a7r,n7r,At,yA,s7r,ebe,l7r,i7r,tf,d7r,obe,c7r,f7r,rbe,m7r,g7r,h7r,tbe,p7r,_7r,wA,u7r,Lo,AA,b7r,abe,v7r,T7r,xn,F7r,nbe,C7r,M7r,sbe,E7r,y7r,lbe,w7r,A7r,L7r,ca,vC,ibe,B7r,x7r,sV,k7r,R7r,S7r,TC,dbe,P7r,$7r,lV,I7r,j7r,D7r,FC,cbe,N7r,q7r,iV,O7r,G7r,X7r,CC,fbe,V7r,z7r,dV,W7r,Q7r,H7r,MC,mbe,U7r,J7r,cV,Y7r,K7r,Z7r,gbe,eFr,oFr,LA,Zke,af,EC,hbe,BA,rFr,pbe,tFr,eRe,Pr,xA,aFr,nf,nFr,_be,sFr,lFr,ube,iFr,dFr,cFr,kA,fFr,bbe,mFr,gFr,hFr,Lt,RA,pFr,vbe,_Fr,uFr,sf,bFr,Tbe,vFr,TFr,Fbe,FFr,CFr,MFr,Cbe,EFr,yFr,SA,wFr,Bo,PA,AFr,Mbe,LFr,BFr,kn,xFr,Ebe,kFr,RFr,ybe,SFr,PFr,wbe,$Fr,IFr,jFr,ce,yC,Abe,DFr,NFr,fV,qFr,OFr,GFr,wC,Lbe,XFr,VFr,mV,zFr,WFr,QFr,AC,Bbe,HFr,UFr,gV,JFr,YFr,KFr,LC,xbe,ZFr,eCr,hV,oCr,rCr,tCr,BC,kbe,aCr,nCr,pV,sCr,lCr,iCr,xC,Rbe,dCr,cCr,_V,fCr,mCr,gCr,kC,Sbe,hCr,pCr,uV,_Cr,uCr,bCr,RC,Pbe,vCr,TCr,bV,FCr,CCr,MCr,SC,$be,ECr,yCr,vV,wCr,ACr,LCr,PC,Ibe,BCr,xCr,TV,kCr,RCr,SCr,$C,jbe,PCr,$Cr,FV,ICr,jCr,DCr,IC,Dbe,NCr,qCr,CV,OCr,GCr,XCr,Nbe,VCr,zCr,$A,oRe,lf,jC,qbe,IA,WCr,Obe,QCr,rRe,$r,jA,HCr,df,UCr,Gbe,JCr,YCr,Xbe,KCr,ZCr,eMr,DA,oMr,Vbe,rMr,tMr,aMr,Bt,NA,nMr,zbe,sMr,lMr,cf,iMr,Wbe,dMr,cMr,Qbe,fMr,mMr,gMr,Hbe,hMr,pMr,qA,_Mr,xo,OA,uMr,Ube,bMr,vMr,Rn,TMr,Jbe,FMr,CMr,Ybe,MMr,EMr,Kbe,yMr,wMr,AMr,be,DC,Zbe,LMr,BMr,MV,xMr,kMr,RMr,NC,eve,SMr,PMr,EV,$Mr,IMr,jMr,qC,ove,DMr,NMr,yV,qMr,OMr,GMr,OC,rve,XMr,VMr,wV,zMr,WMr,QMr,GC,tve,HMr,UMr,AV,JMr,YMr,KMr,XC,ave,ZMr,e4r,LV,o4r,r4r,t4r,VC,nve,a4r,n4r,BV,s4r,l4r,i4r,zC,sve,d4r,c4r,xV,f4r,m4r,g4r,WC,lve,h4r,p4r,kV,_4r,u4r,b4r,QC,ive,v4r,T4r,RV,F4r,C4r,M4r,dve,E4r,y4r,GA,tRe,ff,HC,cve,XA,w4r,fve,A4r,aRe,Ir,VA,L4r,mf,B4r,mve,x4r,k4r,gve,R4r,S4r,P4r,zA,$4r,hve,I4r,j4r,D4r,xt,WA,N4r,pve,q4r,O4r,gf,G4r,_ve,X4r,V4r,uve,z4r,W4r,Q4r,bve,H4r,U4r,QA,J4r,ko,HA,Y4r,vve,K4r,Z4r,Sn,eEr,Tve,oEr,rEr,Fve,tEr,aEr,Cve,nEr,sEr,lEr,Ce,UC,Mve,iEr,dEr,SV,cEr,fEr,mEr,JC,Eve,gEr,hEr,PV,pEr,_Er,uEr,YC,yve,bEr,vEr,$V,TEr,FEr,CEr,KC,wve,MEr,EEr,IV,yEr,wEr,AEr,ZC,Ave,LEr,BEr,jV,xEr,kEr,REr,eM,Lve,SEr,PEr,DV,$Er,IEr,jEr,oM,Bve,DEr,NEr,NV,qEr,OEr,GEr,rM,xve,XEr,VEr,qV,zEr,WEr,QEr,tM,kve,HEr,UEr,OV,JEr,YEr,KEr,Rve,ZEr,e3r,UA,nRe,hf,aM,Sve,JA,o3r,Pve,r3r,sRe,jr,YA,t3r,pf,a3r,$ve,n3r,s3r,Ive,l3r,i3r,d3r,KA,c3r,jve,f3r,m3r,g3r,kt,ZA,h3r,Dve,p3r,_3r,_f,u3r,Nve,b3r,v3r,qve,T3r,F3r,C3r,Ove,M3r,E3r,eL,y3r,Ro,oL,w3r,Gve,A3r,L3r,Pn,B3r,Xve,x3r,k3r,Vve,R3r,S3r,zve,P3r,$3r,I3r,ve,nM,Wve,j3r,D3r,GV,N3r,q3r,O3r,sM,Qve,G3r,X3r,XV,V3r,z3r,W3r,lM,Hve,Q3r,H3r,VV,U3r,J3r,Y3r,iM,Uve,K3r,Z3r,zV,e5r,o5r,r5r,dM,Jve,t5r,a5r,WV,n5r,s5r,l5r,cM,Yve,i5r,d5r,QV,c5r,f5r,m5r,fM,Kve,g5r,h5r,HV,p5r,_5r,u5r,mM,Zve,b5r,v5r,UV,T5r,F5r,C5r,gM,e6e,M5r,E5r,JV,y5r,w5r,A5r,hM,o6e,L5r,B5r,YV,x5r,k5r,R5r,r6e,S5r,P5r,rL,lRe,uf,pM,t6e,tL,$5r,a6e,I5r,iRe,Dr,aL,j5r,bf,D5r,n6e,N5r,q5r,s6e,O5r,G5r,X5r,nL,V5r,l6e,z5r,W5r,Q5r,Rt,sL,H5r,i6e,U5r,J5r,vf,Y5r,d6e,K5r,Z5r,c6e,eyr,oyr,ryr,f6e,tyr,ayr,lL,nyr,So,iL,syr,m6e,lyr,iyr,$n,dyr,g6e,cyr,fyr,h6e,myr,gyr,p6e,hyr,pyr,_yr,Te,_M,_6e,uyr,byr,KV,vyr,Tyr,Fyr,uM,u6e,Cyr,Myr,ZV,Eyr,yyr,wyr,bM,b6e,Ayr,Lyr,ez,Byr,xyr,kyr,vM,v6e,Ryr,Syr,oz,Pyr,$yr,Iyr,TM,T6e,jyr,Dyr,rz,Nyr,qyr,Oyr,FM,F6e,Gyr,Xyr,tz,Vyr,zyr,Wyr,CM,C6e,Qyr,Hyr,az,Uyr,Jyr,Yyr,MM,M6e,Kyr,Zyr,nz,ewr,owr,rwr,EM,E6e,twr,awr,sz,nwr,swr,lwr,yM,y6e,iwr,dwr,lz,cwr,fwr,mwr,w6e,gwr,hwr,dL,dRe,Tf,wM,A6e,cL,pwr,L6e,_wr,cRe,Nr,fL,uwr,Ff,bwr,B6e,vwr,Twr,x6e,Fwr,Cwr,Mwr,mL,Ewr,k6e,ywr,wwr,Awr,St,gL,Lwr,R6e,Bwr,xwr,Cf,kwr,S6e,Rwr,Swr,P6e,Pwr,$wr,Iwr,$6e,jwr,Dwr,hL,Nwr,Po,pL,qwr,I6e,Owr,Gwr,In,Xwr,j6e,Vwr,zwr,D6e,Wwr,Qwr,N6e,Hwr,Uwr,Jwr,Se,AM,q6e,Ywr,Kwr,iz,Zwr,eAr,oAr,LM,O6e,rAr,tAr,dz,aAr,nAr,sAr,BM,G6e,lAr,iAr,cz,dAr,cAr,fAr,xM,X6e,mAr,gAr,fz,hAr,pAr,_Ar,kM,V6e,uAr,bAr,mz,vAr,TAr,FAr,RM,z6e,CAr,MAr,gz,EAr,yAr,wAr,SM,W6e,AAr,LAr,hz,BAr,xAr,kAr,PM,Q6e,RAr,SAr,pz,PAr,$Ar,IAr,H6e,jAr,DAr,_L,fRe,Mf,$M,U6e,uL,NAr,J6e,qAr,mRe,qr,bL,OAr,Ef,GAr,Y6e,XAr,VAr,K6e,zAr,WAr,QAr,vL,HAr,Z6e,UAr,JAr,YAr,Pt,TL,KAr,e0e,ZAr,eLr,yf,oLr,o0e,rLr,tLr,r0e,aLr,nLr,sLr,t0e,lLr,iLr,FL,dLr,$o,CL,cLr,a0e,fLr,mLr,jn,gLr,n0e,hLr,pLr,s0e,_Lr,uLr,l0e,bLr,vLr,TLr,Pe,IM,i0e,FLr,CLr,_z,MLr,ELr,yLr,jM,d0e,wLr,ALr,uz,LLr,BLr,xLr,DM,c0e,kLr,RLr,bz,SLr,PLr,$Lr,NM,f0e,ILr,jLr,vz,DLr,NLr,qLr,qM,m0e,OLr,GLr,Tz,XLr,VLr,zLr,OM,g0e,WLr,QLr,Fz,HLr,ULr,JLr,GM,h0e,YLr,KLr,Cz,ZLr,e8r,o8r,XM,p0e,r8r,t8r,Mz,a8r,n8r,s8r,_0e,l8r,i8r,ML,gRe,wf,VM,u0e,EL,d8r,b0e,c8r,hRe,Or,yL,f8r,Af,m8r,v0e,g8r,h8r,T0e,p8r,_8r,u8r,wL,b8r,F0e,v8r,T8r,F8r,$t,AL,C8r,C0e,M8r,E8r,Lf,y8r,M0e,w8r,A8r,E0e,L8r,B8r,x8r,y0e,k8r,R8r,LL,S8r,Io,BL,P8r,w0e,$8r,I8r,Dn,j8r,A0e,D8r,N8r,L0e,q8r,O8r,B0e,G8r,X8r,V8r,x0e,zM,k0e,z8r,W8r,Ez,Q8r,H8r,U8r,R0e,J8r,Y8r,xL,pRe,Bf,WM,S0e,kL,K8r,P0e,Z8r,_Re,Gr,RL,e9r,xf,o9r,$0e,r9r,t9r,I0e,a9r,n9r,s9r,SL,l9r,j0e,i9r,d9r,c9r,It,PL,f9r,D0e,m9r,g9r,kf,h9r,N0e,p9r,_9r,q0e,u9r,b9r,v9r,O0e,T9r,F9r,$L,C9r,jo,IL,M9r,G0e,E9r,y9r,Nn,w9r,X0e,A9r,L9r,V0e,B9r,x9r,z0e,k9r,R9r,S9r,jL,QM,W0e,P9r,$9r,yz,I9r,j9r,D9r,HM,Q0e,N9r,q9r,wz,O9r,G9r,X9r,H0e,V9r,z9r,DL,uRe,Rf,UM,U0e,NL,W9r,J0e,Q9r,bRe,Xr,qL,H9r,Sf,U9r,Y0e,J9r,Y9r,K0e,K9r,Z9r,eBr,OL,oBr,Z0e,rBr,tBr,aBr,jt,GL,nBr,eTe,sBr,lBr,Pf,iBr,oTe,dBr,cBr,rTe,fBr,mBr,gBr,tTe,hBr,pBr,XL,_Br,Do,VL,uBr,aTe,bBr,vBr,qn,TBr,nTe,FBr,CBr,sTe,MBr,EBr,lTe,yBr,wBr,ABr,iTe,JM,dTe,LBr,BBr,Az,xBr,kBr,RBr,cTe,SBr,PBr,zL,vRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),eE=new X({}),oE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Br({props:{warning:"&lcub;true}",$$slots:{default:[b7t]},$$scope:{ctx:Ii}}}),rE=new X({}),tE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/configuration_auto.py#L530"}}),sE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/configuration_auto.py#L553",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),lE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),iE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/configuration_auto.py#L675",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),dE=new X({}),cE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/tokenization_auto.py#L352"}}),gE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16027/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),hE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),pE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),_E=new X({}),uE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),TE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16027/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),wh=new $Br({props:{$$slots:{default:[v7t]},$$scope:{ctx:Ii}}}),FE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),CE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),ME=new X({}),EE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/processing_auto.py#L71"}}),AE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),jh=new $Br({props:{$$slots:{default:[T7t]},$$scope:{ctx:Ii}}}),LE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),BE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),xE=new X({}),kE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L699"}}),SE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),$E=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jE=new X({}),DE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L706"}}),qE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),OE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),GE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VE=new X({}),zE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L721"}}),QE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),UE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new X({}),KE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L728"}}),e3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),r3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a3=new X({}),n3=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L735"}}),l3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),d3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f3=new X({}),m3=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L744"}}),h3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),_3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b3=new X({}),v3=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L778"}}),F3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),M3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y3=new X({}),w3=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L785"}}),L3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),x3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new X({}),S3=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L771"}}),$3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),j3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),q3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L753"}}),G3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),V3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new X({}),Q3=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L760"}}),U3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Y3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new X({}),e5=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L794"}}),r5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),t5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),a5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s5=new X({}),l5=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L833"}}),d5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),c5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),f5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new X({}),h5=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L840"}}),_5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),u5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),b5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T5=new X({}),F5=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L863"}}),M5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),E5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),y5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A5=new X({}),L5=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L847"}}),x5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),k5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),R5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new X({}),$5=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L854"}}),j5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),D5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),N5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new X({}),X5=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L872"}}),z5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),W5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Q5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U5=new X({}),J5=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L879"}}),K5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Z5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L826"}}),ny=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ly=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L801"}}),my=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),hy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L808"}}),vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_auto.py#L817"}}),Ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Ry=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Ny=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Wy=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),Hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),Lw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Gw=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),Vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),NA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),oL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),sL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),iL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),gL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),pL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),TL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),CL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),yL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),AL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),BL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),RL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),PL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),IL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),qL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),GL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),XL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),VL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16027/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16027/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16027/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),ge=a("a"),io=a("span"),f(fe.$$.fragment),Fe=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),J4=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),Y4=o("AutoConfig"),Gn=o(", "),Xn=a("a"),K4=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),Z4=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),he=a("p"),X8=o("will create a model that is an instance of "),Xi=a("a"),V8=o("BertModel"),z8=o("."),zo=l(),Oa=a("p"),W8=o("There is one class of "),Nf=a("code"),Q8=o("AutoModel"),RPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bxe=l(),Vi=a("h2"),qf=a("a"),TQ=a("span"),f(eE.$$.fragment),SPe=l(),FQ=a("span"),PPe=o("Extending the Auto Classes"),vxe=l(),zn=a("p"),$Pe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CQ=a("code"),IPe=o("NewModel"),jPe=o(", make sure you have a "),MQ=a("code"),DPe=o("NewModelConfig"),NPe=o(` then you can add those to the auto
classes like this:`),Txe=l(),f(oE.$$.fragment),Fxe=l(),H8=a("p"),qPe=o("You will then be able to use the auto classes like you would usually do!"),Cxe=l(),f(Of.$$.fragment),Mxe=l(),zi=a("h2"),Gf=a("a"),EQ=a("span"),f(rE.$$.fragment),OPe=l(),yQ=a("span"),GPe=o("AutoConfig"),Exe=l(),Wo=a("div"),f(tE.$$.fragment),XPe=l(),aE=a("p"),VPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U8=a("a"),zPe=o("from_pretrained()"),WPe=o(" class method."),QPe=l(),nE=a("p"),HPe=o("This class cannot be instantiated directly using "),wQ=a("code"),UPe=o("__init__()"),JPe=o(" (throws an error)."),YPe=l(),mo=a("div"),f(sE.$$.fragment),KPe=l(),AQ=a("p"),ZPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$e=l(),Wi=a("p"),o$e=o("The configuration class to instantiate is selected based on the "),LQ=a("code"),r$e=o("model_type"),t$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BQ=a("code"),a$e=o("pretrained_model_name_or_path"),n$e=o(":"),s$e=l(),v=a("ul"),Xf=a("li"),xQ=a("strong"),l$e=o("albert"),i$e=o(" \u2014 "),J8=a("a"),d$e=o("AlbertConfig"),c$e=o(" (ALBERT model)"),f$e=l(),Vf=a("li"),kQ=a("strong"),m$e=o("bart"),g$e=o(" \u2014 "),Y8=a("a"),h$e=o("BartConfig"),p$e=o(" (BART model)"),_$e=l(),zf=a("li"),RQ=a("strong"),u$e=o("beit"),b$e=o(" \u2014 "),K8=a("a"),v$e=o("BeitConfig"),T$e=o(" (BEiT model)"),F$e=l(),Wf=a("li"),SQ=a("strong"),C$e=o("bert"),M$e=o(" \u2014 "),Z8=a("a"),E$e=o("BertConfig"),y$e=o(" (BERT model)"),w$e=l(),Qf=a("li"),PQ=a("strong"),A$e=o("bert-generation"),L$e=o(" \u2014 "),e9=a("a"),B$e=o("BertGenerationConfig"),x$e=o(" (Bert Generation model)"),k$e=l(),Hf=a("li"),$Q=a("strong"),R$e=o("big_bird"),S$e=o(" \u2014 "),o9=a("a"),P$e=o("BigBirdConfig"),$$e=o(" (BigBird model)"),I$e=l(),Uf=a("li"),IQ=a("strong"),j$e=o("bigbird_pegasus"),D$e=o(" \u2014 "),r9=a("a"),N$e=o("BigBirdPegasusConfig"),q$e=o(" (BigBirdPegasus model)"),O$e=l(),Jf=a("li"),jQ=a("strong"),G$e=o("blenderbot"),X$e=o(" \u2014 "),t9=a("a"),V$e=o("BlenderbotConfig"),z$e=o(" (Blenderbot model)"),W$e=l(),Yf=a("li"),DQ=a("strong"),Q$e=o("blenderbot-small"),H$e=o(" \u2014 "),a9=a("a"),U$e=o("BlenderbotSmallConfig"),J$e=o(" (BlenderbotSmall model)"),Y$e=l(),Kf=a("li"),NQ=a("strong"),K$e=o("camembert"),Z$e=o(" \u2014 "),n9=a("a"),eIe=o("CamembertConfig"),oIe=o(" (CamemBERT model)"),rIe=l(),Zf=a("li"),qQ=a("strong"),tIe=o("canine"),aIe=o(" \u2014 "),s9=a("a"),nIe=o("CanineConfig"),sIe=o(" (Canine model)"),lIe=l(),em=a("li"),OQ=a("strong"),iIe=o("clip"),dIe=o(" \u2014 "),l9=a("a"),cIe=o("CLIPConfig"),fIe=o(" (CLIP model)"),mIe=l(),om=a("li"),GQ=a("strong"),gIe=o("convbert"),hIe=o(" \u2014 "),i9=a("a"),pIe=o("ConvBertConfig"),_Ie=o(" (ConvBERT model)"),uIe=l(),rm=a("li"),XQ=a("strong"),bIe=o("convnext"),vIe=o(" \u2014 "),d9=a("a"),TIe=o("ConvNextConfig"),FIe=o(" (ConvNext model)"),CIe=l(),tm=a("li"),VQ=a("strong"),MIe=o("ctrl"),EIe=o(" \u2014 "),c9=a("a"),yIe=o("CTRLConfig"),wIe=o(" (CTRL model)"),AIe=l(),am=a("li"),zQ=a("strong"),LIe=o("data2vec-audio"),BIe=o(" \u2014 "),f9=a("a"),xIe=o("Data2VecAudioConfig"),kIe=o(" (Data2VecAudio model)"),RIe=l(),nm=a("li"),WQ=a("strong"),SIe=o("data2vec-text"),PIe=o(" \u2014 "),m9=a("a"),$Ie=o("Data2VecTextConfig"),IIe=o(" (Data2VecText model)"),jIe=l(),sm=a("li"),QQ=a("strong"),DIe=o("deberta"),NIe=o(" \u2014 "),g9=a("a"),qIe=o("DebertaConfig"),OIe=o(" (DeBERTa model)"),GIe=l(),lm=a("li"),HQ=a("strong"),XIe=o("deberta-v2"),VIe=o(" \u2014 "),h9=a("a"),zIe=o("DebertaV2Config"),WIe=o(" (DeBERTa-v2 model)"),QIe=l(),im=a("li"),UQ=a("strong"),HIe=o("deit"),UIe=o(" \u2014 "),p9=a("a"),JIe=o("DeiTConfig"),YIe=o(" (DeiT model)"),KIe=l(),dm=a("li"),JQ=a("strong"),ZIe=o("detr"),eje=o(" \u2014 "),_9=a("a"),oje=o("DetrConfig"),rje=o(" (DETR model)"),tje=l(),cm=a("li"),YQ=a("strong"),aje=o("distilbert"),nje=o(" \u2014 "),u9=a("a"),sje=o("DistilBertConfig"),lje=o(" (DistilBERT model)"),ije=l(),fm=a("li"),KQ=a("strong"),dje=o("dpr"),cje=o(" \u2014 "),b9=a("a"),fje=o("DPRConfig"),mje=o(" (DPR model)"),gje=l(),mm=a("li"),ZQ=a("strong"),hje=o("electra"),pje=o(" \u2014 "),v9=a("a"),_je=o("ElectraConfig"),uje=o(" (ELECTRA model)"),bje=l(),gm=a("li"),eH=a("strong"),vje=o("encoder-decoder"),Tje=o(" \u2014 "),T9=a("a"),Fje=o("EncoderDecoderConfig"),Cje=o(" (Encoder decoder model)"),Mje=l(),hm=a("li"),oH=a("strong"),Eje=o("flaubert"),yje=o(" \u2014 "),F9=a("a"),wje=o("FlaubertConfig"),Aje=o(" (FlauBERT model)"),Lje=l(),pm=a("li"),rH=a("strong"),Bje=o("fnet"),xje=o(" \u2014 "),C9=a("a"),kje=o("FNetConfig"),Rje=o(" (FNet model)"),Sje=l(),_m=a("li"),tH=a("strong"),Pje=o("fsmt"),$je=o(" \u2014 "),M9=a("a"),Ije=o("FSMTConfig"),jje=o(" (FairSeq Machine-Translation model)"),Dje=l(),um=a("li"),aH=a("strong"),Nje=o("funnel"),qje=o(" \u2014 "),E9=a("a"),Oje=o("FunnelConfig"),Gje=o(" (Funnel Transformer model)"),Xje=l(),bm=a("li"),nH=a("strong"),Vje=o("gpt2"),zje=o(" \u2014 "),y9=a("a"),Wje=o("GPT2Config"),Qje=o(" (OpenAI GPT-2 model)"),Hje=l(),vm=a("li"),sH=a("strong"),Uje=o("gpt_neo"),Jje=o(" \u2014 "),w9=a("a"),Yje=o("GPTNeoConfig"),Kje=o(" (GPT Neo model)"),Zje=l(),Tm=a("li"),lH=a("strong"),eDe=o("gptj"),oDe=o(" \u2014 "),A9=a("a"),rDe=o("GPTJConfig"),tDe=o(" (GPT-J model)"),aDe=l(),Fm=a("li"),iH=a("strong"),nDe=o("hubert"),sDe=o(" \u2014 "),L9=a("a"),lDe=o("HubertConfig"),iDe=o(" (Hubert model)"),dDe=l(),Cm=a("li"),dH=a("strong"),cDe=o("ibert"),fDe=o(" \u2014 "),B9=a("a"),mDe=o("IBertConfig"),gDe=o(" (I-BERT model)"),hDe=l(),Mm=a("li"),cH=a("strong"),pDe=o("imagegpt"),_De=o(" \u2014 "),x9=a("a"),uDe=o("ImageGPTConfig"),bDe=o(" (ImageGPT model)"),vDe=l(),Em=a("li"),fH=a("strong"),TDe=o("layoutlm"),FDe=o(" \u2014 "),k9=a("a"),CDe=o("LayoutLMConfig"),MDe=o(" (LayoutLM model)"),EDe=l(),ym=a("li"),mH=a("strong"),yDe=o("layoutlmv2"),wDe=o(" \u2014 "),R9=a("a"),ADe=o("LayoutLMv2Config"),LDe=o(" (LayoutLMv2 model)"),BDe=l(),wm=a("li"),gH=a("strong"),xDe=o("led"),kDe=o(" \u2014 "),S9=a("a"),RDe=o("LEDConfig"),SDe=o(" (LED model)"),PDe=l(),Am=a("li"),hH=a("strong"),$De=o("longformer"),IDe=o(" \u2014 "),P9=a("a"),jDe=o("LongformerConfig"),DDe=o(" (Longformer model)"),NDe=l(),Lm=a("li"),pH=a("strong"),qDe=o("luke"),ODe=o(" \u2014 "),$9=a("a"),GDe=o("LukeConfig"),XDe=o(" (LUKE model)"),VDe=l(),Bm=a("li"),_H=a("strong"),zDe=o("lxmert"),WDe=o(" \u2014 "),I9=a("a"),QDe=o("LxmertConfig"),HDe=o(" (LXMERT model)"),UDe=l(),xm=a("li"),uH=a("strong"),JDe=o("m2m_100"),YDe=o(" \u2014 "),j9=a("a"),KDe=o("M2M100Config"),ZDe=o(" (M2M100 model)"),eNe=l(),km=a("li"),bH=a("strong"),oNe=o("marian"),rNe=o(" \u2014 "),D9=a("a"),tNe=o("MarianConfig"),aNe=o(" (Marian model)"),nNe=l(),Rm=a("li"),vH=a("strong"),sNe=o("maskformer"),lNe=o(" \u2014 "),N9=a("a"),iNe=o("MaskFormerConfig"),dNe=o(" (MaskFormer model)"),cNe=l(),Sm=a("li"),TH=a("strong"),fNe=o("mbart"),mNe=o(" \u2014 "),q9=a("a"),gNe=o("MBartConfig"),hNe=o(" (mBART model)"),pNe=l(),Pm=a("li"),FH=a("strong"),_Ne=o("megatron-bert"),uNe=o(" \u2014 "),O9=a("a"),bNe=o("MegatronBertConfig"),vNe=o(" (MegatronBert model)"),TNe=l(),$m=a("li"),CH=a("strong"),FNe=o("mobilebert"),CNe=o(" \u2014 "),G9=a("a"),MNe=o("MobileBertConfig"),ENe=o(" (MobileBERT model)"),yNe=l(),Im=a("li"),MH=a("strong"),wNe=o("mpnet"),ANe=o(" \u2014 "),X9=a("a"),LNe=o("MPNetConfig"),BNe=o(" (MPNet model)"),xNe=l(),jm=a("li"),EH=a("strong"),kNe=o("mt5"),RNe=o(" \u2014 "),V9=a("a"),SNe=o("MT5Config"),PNe=o(" (mT5 model)"),$Ne=l(),Dm=a("li"),yH=a("strong"),INe=o("nystromformer"),jNe=o(" \u2014 "),z9=a("a"),DNe=o("NystromformerConfig"),NNe=o(" (Nystromformer model)"),qNe=l(),Nm=a("li"),wH=a("strong"),ONe=o("openai-gpt"),GNe=o(" \u2014 "),W9=a("a"),XNe=o("OpenAIGPTConfig"),VNe=o(" (OpenAI GPT model)"),zNe=l(),qm=a("li"),AH=a("strong"),WNe=o("pegasus"),QNe=o(" \u2014 "),Q9=a("a"),HNe=o("PegasusConfig"),UNe=o(" (Pegasus model)"),JNe=l(),Om=a("li"),LH=a("strong"),YNe=o("perceiver"),KNe=o(" \u2014 "),H9=a("a"),ZNe=o("PerceiverConfig"),eqe=o(" (Perceiver model)"),oqe=l(),Gm=a("li"),BH=a("strong"),rqe=o("plbart"),tqe=o(" \u2014 "),U9=a("a"),aqe=o("PLBartConfig"),nqe=o(" (PLBart model)"),sqe=l(),Xm=a("li"),xH=a("strong"),lqe=o("poolformer"),iqe=o(" \u2014 "),J9=a("a"),dqe=o("PoolFormerConfig"),cqe=o(" (PoolFormer model)"),fqe=l(),Vm=a("li"),kH=a("strong"),mqe=o("prophetnet"),gqe=o(" \u2014 "),Y9=a("a"),hqe=o("ProphetNetConfig"),pqe=o(" (ProphetNet model)"),_qe=l(),zm=a("li"),RH=a("strong"),uqe=o("qdqbert"),bqe=o(" \u2014 "),K9=a("a"),vqe=o("QDQBertConfig"),Tqe=o(" (QDQBert model)"),Fqe=l(),Wm=a("li"),SH=a("strong"),Cqe=o("rag"),Mqe=o(" \u2014 "),Z9=a("a"),Eqe=o("RagConfig"),yqe=o(" (RAG model)"),wqe=l(),Qm=a("li"),PH=a("strong"),Aqe=o("realm"),Lqe=o(" \u2014 "),eB=a("a"),Bqe=o("RealmConfig"),xqe=o(" (Realm model)"),kqe=l(),Hm=a("li"),$H=a("strong"),Rqe=o("reformer"),Sqe=o(" \u2014 "),oB=a("a"),Pqe=o("ReformerConfig"),$qe=o(" (Reformer model)"),Iqe=l(),Um=a("li"),IH=a("strong"),jqe=o("rembert"),Dqe=o(" \u2014 "),rB=a("a"),Nqe=o("RemBertConfig"),qqe=o(" (RemBERT model)"),Oqe=l(),Jm=a("li"),jH=a("strong"),Gqe=o("retribert"),Xqe=o(" \u2014 "),tB=a("a"),Vqe=o("RetriBertConfig"),zqe=o(" (RetriBERT model)"),Wqe=l(),Ym=a("li"),DH=a("strong"),Qqe=o("roberta"),Hqe=o(" \u2014 "),aB=a("a"),Uqe=o("RobertaConfig"),Jqe=o(" (RoBERTa model)"),Yqe=l(),Km=a("li"),NH=a("strong"),Kqe=o("roformer"),Zqe=o(" \u2014 "),nB=a("a"),eOe=o("RoFormerConfig"),oOe=o(" (RoFormer model)"),rOe=l(),Zm=a("li"),qH=a("strong"),tOe=o("segformer"),aOe=o(" \u2014 "),sB=a("a"),nOe=o("SegformerConfig"),sOe=o(" (SegFormer model)"),lOe=l(),eg=a("li"),OH=a("strong"),iOe=o("sew"),dOe=o(" \u2014 "),lB=a("a"),cOe=o("SEWConfig"),fOe=o(" (SEW model)"),mOe=l(),og=a("li"),GH=a("strong"),gOe=o("sew-d"),hOe=o(" \u2014 "),iB=a("a"),pOe=o("SEWDConfig"),_Oe=o(" (SEW-D model)"),uOe=l(),rg=a("li"),XH=a("strong"),bOe=o("speech-encoder-decoder"),vOe=o(" \u2014 "),dB=a("a"),TOe=o("SpeechEncoderDecoderConfig"),FOe=o(" (Speech Encoder decoder model)"),COe=l(),tg=a("li"),VH=a("strong"),MOe=o("speech_to_text"),EOe=o(" \u2014 "),cB=a("a"),yOe=o("Speech2TextConfig"),wOe=o(" (Speech2Text model)"),AOe=l(),ag=a("li"),zH=a("strong"),LOe=o("speech_to_text_2"),BOe=o(" \u2014 "),fB=a("a"),xOe=o("Speech2Text2Config"),kOe=o(" (Speech2Text2 model)"),ROe=l(),ng=a("li"),WH=a("strong"),SOe=o("splinter"),POe=o(" \u2014 "),mB=a("a"),$Oe=o("SplinterConfig"),IOe=o(" (Splinter model)"),jOe=l(),sg=a("li"),QH=a("strong"),DOe=o("squeezebert"),NOe=o(" \u2014 "),gB=a("a"),qOe=o("SqueezeBertConfig"),OOe=o(" (SqueezeBERT model)"),GOe=l(),lg=a("li"),HH=a("strong"),XOe=o("swin"),VOe=o(" \u2014 "),hB=a("a"),zOe=o("SwinConfig"),WOe=o(" (Swin model)"),QOe=l(),ig=a("li"),UH=a("strong"),HOe=o("t5"),UOe=o(" \u2014 "),pB=a("a"),JOe=o("T5Config"),YOe=o(" (T5 model)"),KOe=l(),dg=a("li"),JH=a("strong"),ZOe=o("tapas"),eGe=o(" \u2014 "),_B=a("a"),oGe=o("TapasConfig"),rGe=o(" (TAPAS model)"),tGe=l(),cg=a("li"),YH=a("strong"),aGe=o("transfo-xl"),nGe=o(" \u2014 "),uB=a("a"),sGe=o("TransfoXLConfig"),lGe=o(" (Transformer-XL model)"),iGe=l(),fg=a("li"),KH=a("strong"),dGe=o("trocr"),cGe=o(" \u2014 "),bB=a("a"),fGe=o("TrOCRConfig"),mGe=o(" (TrOCR model)"),gGe=l(),mg=a("li"),ZH=a("strong"),hGe=o("unispeech"),pGe=o(" \u2014 "),vB=a("a"),_Ge=o("UniSpeechConfig"),uGe=o(" (UniSpeech model)"),bGe=l(),gg=a("li"),eU=a("strong"),vGe=o("unispeech-sat"),TGe=o(" \u2014 "),TB=a("a"),FGe=o("UniSpeechSatConfig"),CGe=o(" (UniSpeechSat model)"),MGe=l(),hg=a("li"),oU=a("strong"),EGe=o("van"),yGe=o(" \u2014 "),FB=a("a"),wGe=o("VanConfig"),AGe=o(" (VAN model)"),LGe=l(),pg=a("li"),rU=a("strong"),BGe=o("vilt"),xGe=o(" \u2014 "),CB=a("a"),kGe=o("ViltConfig"),RGe=o(" (ViLT model)"),SGe=l(),_g=a("li"),tU=a("strong"),PGe=o("vision-encoder-decoder"),$Ge=o(" \u2014 "),MB=a("a"),IGe=o("VisionEncoderDecoderConfig"),jGe=o(" (Vision Encoder decoder model)"),DGe=l(),ug=a("li"),aU=a("strong"),NGe=o("vision-text-dual-encoder"),qGe=o(" \u2014 "),EB=a("a"),OGe=o("VisionTextDualEncoderConfig"),GGe=o(" (VisionTextDualEncoder model)"),XGe=l(),bg=a("li"),nU=a("strong"),VGe=o("visual_bert"),zGe=o(" \u2014 "),yB=a("a"),WGe=o("VisualBertConfig"),QGe=o(" (VisualBert model)"),HGe=l(),vg=a("li"),sU=a("strong"),UGe=o("vit"),JGe=o(" \u2014 "),wB=a("a"),YGe=o("ViTConfig"),KGe=o(" (ViT model)"),ZGe=l(),Tg=a("li"),lU=a("strong"),eXe=o("vit_mae"),oXe=o(" \u2014 "),AB=a("a"),rXe=o("ViTMAEConfig"),tXe=o(" (ViTMAE model)"),aXe=l(),Fg=a("li"),iU=a("strong"),nXe=o("wav2vec2"),sXe=o(" \u2014 "),LB=a("a"),lXe=o("Wav2Vec2Config"),iXe=o(" (Wav2Vec2 model)"),dXe=l(),Cg=a("li"),dU=a("strong"),cXe=o("wavlm"),fXe=o(" \u2014 "),BB=a("a"),mXe=o("WavLMConfig"),gXe=o(" (WavLM model)"),hXe=l(),Mg=a("li"),cU=a("strong"),pXe=o("xglm"),_Xe=o(" \u2014 "),xB=a("a"),uXe=o("XGLMConfig"),bXe=o(" (XGLM model)"),vXe=l(),Eg=a("li"),fU=a("strong"),TXe=o("xlm"),FXe=o(" \u2014 "),kB=a("a"),CXe=o("XLMConfig"),MXe=o(" (XLM model)"),EXe=l(),yg=a("li"),mU=a("strong"),yXe=o("xlm-prophetnet"),wXe=o(" \u2014 "),RB=a("a"),AXe=o("XLMProphetNetConfig"),LXe=o(" (XLMProphetNet model)"),BXe=l(),wg=a("li"),gU=a("strong"),xXe=o("xlm-roberta"),kXe=o(" \u2014 "),SB=a("a"),RXe=o("XLMRobertaConfig"),SXe=o(" (XLM-RoBERTa model)"),PXe=l(),Ag=a("li"),hU=a("strong"),$Xe=o("xlm-roberta-xl"),IXe=o(" \u2014 "),PB=a("a"),jXe=o("XLMRobertaXLConfig"),DXe=o(" (XLM-RoBERTa-XL model)"),NXe=l(),Lg=a("li"),pU=a("strong"),qXe=o("xlnet"),OXe=o(" \u2014 "),$B=a("a"),GXe=o("XLNetConfig"),XXe=o(" (XLNet model)"),VXe=l(),Bg=a("li"),_U=a("strong"),zXe=o("yoso"),WXe=o(" \u2014 "),IB=a("a"),QXe=o("YosoConfig"),HXe=o(" (YOSO model)"),UXe=l(),uU=a("p"),JXe=o("Examples:"),YXe=l(),f(lE.$$.fragment),KXe=l(),xg=a("div"),f(iE.$$.fragment),ZXe=l(),bU=a("p"),eVe=o("Register a new configuration for this class."),yxe=l(),Qi=a("h2"),kg=a("a"),vU=a("span"),f(dE.$$.fragment),oVe=l(),TU=a("span"),rVe=o("AutoTokenizer"),wxe=l(),Qo=a("div"),f(cE.$$.fragment),tVe=l(),fE=a("p"),aVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),jB=a("a"),nVe=o("AutoTokenizer.from_pretrained()"),sVe=o(" class method."),lVe=l(),mE=a("p"),iVe=o("This class cannot be instantiated directly using "),FU=a("code"),dVe=o("__init__()"),cVe=o(" (throws an error)."),fVe=l(),go=a("div"),f(gE.$$.fragment),mVe=l(),CU=a("p"),gVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hVe=l(),Ga=a("p"),pVe=o("The tokenizer class to instantiate is selected based on the "),MU=a("code"),_Ve=o("model_type"),uVe=o(` property of the config object (either
passed as an argument or loaded from `),EU=a("code"),bVe=o("pretrained_model_name_or_path"),vVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yU=a("code"),TVe=o("pretrained_model_name_or_path"),FVe=o(":"),CVe=l(),E=a("ul"),Wn=a("li"),wU=a("strong"),MVe=o("albert"),EVe=o(" \u2014 "),DB=a("a"),yVe=o("AlbertTokenizer"),wVe=o(" or "),NB=a("a"),AVe=o("AlbertTokenizerFast"),LVe=o(" (ALBERT model)"),BVe=l(),Qn=a("li"),AU=a("strong"),xVe=o("bart"),kVe=o(" \u2014 "),qB=a("a"),RVe=o("BartTokenizer"),SVe=o(" or "),OB=a("a"),PVe=o("BartTokenizerFast"),$Ve=o(" (BART model)"),IVe=l(),Hn=a("li"),LU=a("strong"),jVe=o("barthez"),DVe=o(" \u2014 "),GB=a("a"),NVe=o("BarthezTokenizer"),qVe=o(" or "),XB=a("a"),OVe=o("BarthezTokenizerFast"),GVe=o(" (BARThez model)"),XVe=l(),Rg=a("li"),BU=a("strong"),VVe=o("bartpho"),zVe=o(" \u2014 "),VB=a("a"),WVe=o("BartphoTokenizer"),QVe=o(" (BARTpho model)"),HVe=l(),Un=a("li"),xU=a("strong"),UVe=o("bert"),JVe=o(" \u2014 "),zB=a("a"),YVe=o("BertTokenizer"),KVe=o(" or "),WB=a("a"),ZVe=o("BertTokenizerFast"),eze=o(" (BERT model)"),oze=l(),Sg=a("li"),kU=a("strong"),rze=o("bert-generation"),tze=o(" \u2014 "),QB=a("a"),aze=o("BertGenerationTokenizer"),nze=o(" (Bert Generation model)"),sze=l(),Pg=a("li"),RU=a("strong"),lze=o("bert-japanese"),ize=o(" \u2014 "),HB=a("a"),dze=o("BertJapaneseTokenizer"),cze=o(" (BertJapanese model)"),fze=l(),$g=a("li"),SU=a("strong"),mze=o("bertweet"),gze=o(" \u2014 "),UB=a("a"),hze=o("BertweetTokenizer"),pze=o(" (Bertweet model)"),_ze=l(),Jn=a("li"),PU=a("strong"),uze=o("big_bird"),bze=o(" \u2014 "),JB=a("a"),vze=o("BigBirdTokenizer"),Tze=o(" or "),YB=a("a"),Fze=o("BigBirdTokenizerFast"),Cze=o(" (BigBird model)"),Mze=l(),Yn=a("li"),$U=a("strong"),Eze=o("bigbird_pegasus"),yze=o(" \u2014 "),KB=a("a"),wze=o("PegasusTokenizer"),Aze=o(" or "),ZB=a("a"),Lze=o("PegasusTokenizerFast"),Bze=o(" (BigBirdPegasus model)"),xze=l(),Kn=a("li"),IU=a("strong"),kze=o("blenderbot"),Rze=o(" \u2014 "),ex=a("a"),Sze=o("BlenderbotTokenizer"),Pze=o(" or "),ox=a("a"),$ze=o("BlenderbotTokenizerFast"),Ize=o(" (Blenderbot model)"),jze=l(),Ig=a("li"),jU=a("strong"),Dze=o("blenderbot-small"),Nze=o(" \u2014 "),rx=a("a"),qze=o("BlenderbotSmallTokenizer"),Oze=o(" (BlenderbotSmall model)"),Gze=l(),jg=a("li"),DU=a("strong"),Xze=o("byt5"),Vze=o(" \u2014 "),tx=a("a"),zze=o("ByT5Tokenizer"),Wze=o(" (ByT5 model)"),Qze=l(),Zn=a("li"),NU=a("strong"),Hze=o("camembert"),Uze=o(" \u2014 "),ax=a("a"),Jze=o("CamembertTokenizer"),Yze=o(" or "),nx=a("a"),Kze=o("CamembertTokenizerFast"),Zze=o(" (CamemBERT model)"),eWe=l(),Dg=a("li"),qU=a("strong"),oWe=o("canine"),rWe=o(" \u2014 "),sx=a("a"),tWe=o("CanineTokenizer"),aWe=o(" (Canine model)"),nWe=l(),es=a("li"),OU=a("strong"),sWe=o("clip"),lWe=o(" \u2014 "),lx=a("a"),iWe=o("CLIPTokenizer"),dWe=o(" or "),ix=a("a"),cWe=o("CLIPTokenizerFast"),fWe=o(" (CLIP model)"),mWe=l(),os=a("li"),GU=a("strong"),gWe=o("convbert"),hWe=o(" \u2014 "),dx=a("a"),pWe=o("ConvBertTokenizer"),_We=o(" or "),cx=a("a"),uWe=o("ConvBertTokenizerFast"),bWe=o(" (ConvBERT model)"),vWe=l(),rs=a("li"),XU=a("strong"),TWe=o("cpm"),FWe=o(" \u2014 "),fx=a("a"),CWe=o("CpmTokenizer"),MWe=o(" or "),VU=a("code"),EWe=o("CpmTokenizerFast"),yWe=o(" (CPM model)"),wWe=l(),Ng=a("li"),zU=a("strong"),AWe=o("ctrl"),LWe=o(" \u2014 "),mx=a("a"),BWe=o("CTRLTokenizer"),xWe=o(" (CTRL model)"),kWe=l(),ts=a("li"),WU=a("strong"),RWe=o("deberta"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("DebertaTokenizer"),$We=o(" or "),hx=a("a"),IWe=o("DebertaTokenizerFast"),jWe=o(" (DeBERTa model)"),DWe=l(),qg=a("li"),QU=a("strong"),NWe=o("deberta-v2"),qWe=o(" \u2014 "),px=a("a"),OWe=o("DebertaV2Tokenizer"),GWe=o(" (DeBERTa-v2 model)"),XWe=l(),as=a("li"),HU=a("strong"),VWe=o("distilbert"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("DistilBertTokenizer"),QWe=o(" or "),ux=a("a"),HWe=o("DistilBertTokenizerFast"),UWe=o(" (DistilBERT model)"),JWe=l(),ns=a("li"),UU=a("strong"),YWe=o("dpr"),KWe=o(" \u2014 "),bx=a("a"),ZWe=o("DPRQuestionEncoderTokenizer"),eQe=o(" or "),vx=a("a"),oQe=o("DPRQuestionEncoderTokenizerFast"),rQe=o(" (DPR model)"),tQe=l(),ss=a("li"),JU=a("strong"),aQe=o("electra"),nQe=o(" \u2014 "),Tx=a("a"),sQe=o("ElectraTokenizer"),lQe=o(" or "),Fx=a("a"),iQe=o("ElectraTokenizerFast"),dQe=o(" (ELECTRA model)"),cQe=l(),Og=a("li"),YU=a("strong"),fQe=o("flaubert"),mQe=o(" \u2014 "),Cx=a("a"),gQe=o("FlaubertTokenizer"),hQe=o(" (FlauBERT model)"),pQe=l(),ls=a("li"),KU=a("strong"),_Qe=o("fnet"),uQe=o(" \u2014 "),Mx=a("a"),bQe=o("FNetTokenizer"),vQe=o(" or "),Ex=a("a"),TQe=o("FNetTokenizerFast"),FQe=o(" (FNet model)"),CQe=l(),Gg=a("li"),ZU=a("strong"),MQe=o("fsmt"),EQe=o(" \u2014 "),yx=a("a"),yQe=o("FSMTTokenizer"),wQe=o(" (FairSeq Machine-Translation model)"),AQe=l(),is=a("li"),eJ=a("strong"),LQe=o("funnel"),BQe=o(" \u2014 "),wx=a("a"),xQe=o("FunnelTokenizer"),kQe=o(" or "),Ax=a("a"),RQe=o("FunnelTokenizerFast"),SQe=o(" (Funnel Transformer model)"),PQe=l(),ds=a("li"),oJ=a("strong"),$Qe=o("gpt2"),IQe=o(" \u2014 "),Lx=a("a"),jQe=o("GPT2Tokenizer"),DQe=o(" or "),Bx=a("a"),NQe=o("GPT2TokenizerFast"),qQe=o(" (OpenAI GPT-2 model)"),OQe=l(),cs=a("li"),rJ=a("strong"),GQe=o("gpt_neo"),XQe=o(" \u2014 "),xx=a("a"),VQe=o("GPT2Tokenizer"),zQe=o(" or "),kx=a("a"),WQe=o("GPT2TokenizerFast"),QQe=o(" (GPT Neo model)"),HQe=l(),fs=a("li"),tJ=a("strong"),UQe=o("herbert"),JQe=o(" \u2014 "),Rx=a("a"),YQe=o("HerbertTokenizer"),KQe=o(" or "),Sx=a("a"),ZQe=o("HerbertTokenizerFast"),eHe=o(" (HerBERT model)"),oHe=l(),Xg=a("li"),aJ=a("strong"),rHe=o("hubert"),tHe=o(" \u2014 "),Px=a("a"),aHe=o("Wav2Vec2CTCTokenizer"),nHe=o(" (Hubert model)"),sHe=l(),ms=a("li"),nJ=a("strong"),lHe=o("ibert"),iHe=o(" \u2014 "),$x=a("a"),dHe=o("RobertaTokenizer"),cHe=o(" or "),Ix=a("a"),fHe=o("RobertaTokenizerFast"),mHe=o(" (I-BERT model)"),gHe=l(),gs=a("li"),sJ=a("strong"),hHe=o("layoutlm"),pHe=o(" \u2014 "),jx=a("a"),_He=o("LayoutLMTokenizer"),uHe=o(" or "),Dx=a("a"),bHe=o("LayoutLMTokenizerFast"),vHe=o(" (LayoutLM model)"),THe=l(),hs=a("li"),lJ=a("strong"),FHe=o("layoutlmv2"),CHe=o(" \u2014 "),Nx=a("a"),MHe=o("LayoutLMv2Tokenizer"),EHe=o(" or "),qx=a("a"),yHe=o("LayoutLMv2TokenizerFast"),wHe=o(" (LayoutLMv2 model)"),AHe=l(),ps=a("li"),iJ=a("strong"),LHe=o("layoutxlm"),BHe=o(" \u2014 "),Ox=a("a"),xHe=o("LayoutXLMTokenizer"),kHe=o(" or "),Gx=a("a"),RHe=o("LayoutXLMTokenizerFast"),SHe=o(" (LayoutXLM model)"),PHe=l(),_s=a("li"),dJ=a("strong"),$He=o("led"),IHe=o(" \u2014 "),Xx=a("a"),jHe=o("LEDTokenizer"),DHe=o(" or "),Vx=a("a"),NHe=o("LEDTokenizerFast"),qHe=o(" (LED model)"),OHe=l(),us=a("li"),cJ=a("strong"),GHe=o("longformer"),XHe=o(" \u2014 "),zx=a("a"),VHe=o("LongformerTokenizer"),zHe=o(" or "),Wx=a("a"),WHe=o("LongformerTokenizerFast"),QHe=o(" (Longformer model)"),HHe=l(),Vg=a("li"),fJ=a("strong"),UHe=o("luke"),JHe=o(" \u2014 "),Qx=a("a"),YHe=o("LukeTokenizer"),KHe=o(" (LUKE model)"),ZHe=l(),bs=a("li"),mJ=a("strong"),eUe=o("lxmert"),oUe=o(" \u2014 "),Hx=a("a"),rUe=o("LxmertTokenizer"),tUe=o(" or "),Ux=a("a"),aUe=o("LxmertTokenizerFast"),nUe=o(" (LXMERT model)"),sUe=l(),zg=a("li"),gJ=a("strong"),lUe=o("m2m_100"),iUe=o(" \u2014 "),Jx=a("a"),dUe=o("M2M100Tokenizer"),cUe=o(" (M2M100 model)"),fUe=l(),Wg=a("li"),hJ=a("strong"),mUe=o("marian"),gUe=o(" \u2014 "),Yx=a("a"),hUe=o("MarianTokenizer"),pUe=o(" (Marian model)"),_Ue=l(),vs=a("li"),pJ=a("strong"),uUe=o("mbart"),bUe=o(" \u2014 "),Kx=a("a"),vUe=o("MBartTokenizer"),TUe=o(" or "),Zx=a("a"),FUe=o("MBartTokenizerFast"),CUe=o(" (mBART model)"),MUe=l(),Ts=a("li"),_J=a("strong"),EUe=o("mbart50"),yUe=o(" \u2014 "),ek=a("a"),wUe=o("MBart50Tokenizer"),AUe=o(" or "),ok=a("a"),LUe=o("MBart50TokenizerFast"),BUe=o(" (mBART-50 model)"),xUe=l(),Qg=a("li"),uJ=a("strong"),kUe=o("mluke"),RUe=o(" \u2014 "),rk=a("a"),SUe=o("MLukeTokenizer"),PUe=o(" (mLUKE model)"),$Ue=l(),Fs=a("li"),bJ=a("strong"),IUe=o("mobilebert"),jUe=o(" \u2014 "),tk=a("a"),DUe=o("MobileBertTokenizer"),NUe=o(" or "),ak=a("a"),qUe=o("MobileBertTokenizerFast"),OUe=o(" (MobileBERT model)"),GUe=l(),Cs=a("li"),vJ=a("strong"),XUe=o("mpnet"),VUe=o(" \u2014 "),nk=a("a"),zUe=o("MPNetTokenizer"),WUe=o(" or "),sk=a("a"),QUe=o("MPNetTokenizerFast"),HUe=o(" (MPNet model)"),UUe=l(),Ms=a("li"),TJ=a("strong"),JUe=o("mt5"),YUe=o(" \u2014 "),lk=a("a"),KUe=o("MT5Tokenizer"),ZUe=o(" or "),ik=a("a"),eJe=o("MT5TokenizerFast"),oJe=o(" (mT5 model)"),rJe=l(),Es=a("li"),FJ=a("strong"),tJe=o("openai-gpt"),aJe=o(" \u2014 "),dk=a("a"),nJe=o("OpenAIGPTTokenizer"),sJe=o(" or "),ck=a("a"),lJe=o("OpenAIGPTTokenizerFast"),iJe=o(" (OpenAI GPT model)"),dJe=l(),ys=a("li"),CJ=a("strong"),cJe=o("pegasus"),fJe=o(" \u2014 "),fk=a("a"),mJe=o("PegasusTokenizer"),gJe=o(" or "),mk=a("a"),hJe=o("PegasusTokenizerFast"),pJe=o(" (Pegasus model)"),_Je=l(),Hg=a("li"),MJ=a("strong"),uJe=o("perceiver"),bJe=o(" \u2014 "),gk=a("a"),vJe=o("PerceiverTokenizer"),TJe=o(" (Perceiver model)"),FJe=l(),Ug=a("li"),EJ=a("strong"),CJe=o("phobert"),MJe=o(" \u2014 "),hk=a("a"),EJe=o("PhobertTokenizer"),yJe=o(" (PhoBERT model)"),wJe=l(),Jg=a("li"),yJ=a("strong"),AJe=o("plbart"),LJe=o(" \u2014 "),pk=a("a"),BJe=o("PLBartTokenizer"),xJe=o(" (PLBart model)"),kJe=l(),Yg=a("li"),wJ=a("strong"),RJe=o("prophetnet"),SJe=o(" \u2014 "),_k=a("a"),PJe=o("ProphetNetTokenizer"),$Je=o(" (ProphetNet model)"),IJe=l(),ws=a("li"),AJ=a("strong"),jJe=o("qdqbert"),DJe=o(" \u2014 "),uk=a("a"),NJe=o("BertTokenizer"),qJe=o(" or "),bk=a("a"),OJe=o("BertTokenizerFast"),GJe=o(" (QDQBert model)"),XJe=l(),Kg=a("li"),LJ=a("strong"),VJe=o("rag"),zJe=o(" \u2014 "),vk=a("a"),WJe=o("RagTokenizer"),QJe=o(" (RAG model)"),HJe=l(),As=a("li"),BJ=a("strong"),UJe=o("realm"),JJe=o(" \u2014 "),Tk=a("a"),YJe=o("RealmTokenizer"),KJe=o(" or "),Fk=a("a"),ZJe=o("RealmTokenizerFast"),eYe=o(" (Realm model)"),oYe=l(),Ls=a("li"),xJ=a("strong"),rYe=o("reformer"),tYe=o(" \u2014 "),Ck=a("a"),aYe=o("ReformerTokenizer"),nYe=o(" or "),Mk=a("a"),sYe=o("ReformerTokenizerFast"),lYe=o(" (Reformer model)"),iYe=l(),Bs=a("li"),kJ=a("strong"),dYe=o("rembert"),cYe=o(" \u2014 "),Ek=a("a"),fYe=o("RemBertTokenizer"),mYe=o(" or "),yk=a("a"),gYe=o("RemBertTokenizerFast"),hYe=o(" (RemBERT model)"),pYe=l(),xs=a("li"),RJ=a("strong"),_Ye=o("retribert"),uYe=o(" \u2014 "),wk=a("a"),bYe=o("RetriBertTokenizer"),vYe=o(" or "),Ak=a("a"),TYe=o("RetriBertTokenizerFast"),FYe=o(" (RetriBERT model)"),CYe=l(),ks=a("li"),SJ=a("strong"),MYe=o("roberta"),EYe=o(" \u2014 "),Lk=a("a"),yYe=o("RobertaTokenizer"),wYe=o(" or "),Bk=a("a"),AYe=o("RobertaTokenizerFast"),LYe=o(" (RoBERTa model)"),BYe=l(),Rs=a("li"),PJ=a("strong"),xYe=o("roformer"),kYe=o(" \u2014 "),xk=a("a"),RYe=o("RoFormerTokenizer"),SYe=o(" or "),kk=a("a"),PYe=o("RoFormerTokenizerFast"),$Ye=o(" (RoFormer model)"),IYe=l(),Zg=a("li"),$J=a("strong"),jYe=o("speech_to_text"),DYe=o(" \u2014 "),Rk=a("a"),NYe=o("Speech2TextTokenizer"),qYe=o(" (Speech2Text model)"),OYe=l(),eh=a("li"),IJ=a("strong"),GYe=o("speech_to_text_2"),XYe=o(" \u2014 "),Sk=a("a"),VYe=o("Speech2Text2Tokenizer"),zYe=o(" (Speech2Text2 model)"),WYe=l(),Ss=a("li"),jJ=a("strong"),QYe=o("splinter"),HYe=o(" \u2014 "),Pk=a("a"),UYe=o("SplinterTokenizer"),JYe=o(" or "),$k=a("a"),YYe=o("SplinterTokenizerFast"),KYe=o(" (Splinter model)"),ZYe=l(),Ps=a("li"),DJ=a("strong"),eKe=o("squeezebert"),oKe=o(" \u2014 "),Ik=a("a"),rKe=o("SqueezeBertTokenizer"),tKe=o(" or "),jk=a("a"),aKe=o("SqueezeBertTokenizerFast"),nKe=o(" (SqueezeBERT model)"),sKe=l(),$s=a("li"),NJ=a("strong"),lKe=o("t5"),iKe=o(" \u2014 "),Dk=a("a"),dKe=o("T5Tokenizer"),cKe=o(" or "),Nk=a("a"),fKe=o("T5TokenizerFast"),mKe=o(" (T5 model)"),gKe=l(),oh=a("li"),qJ=a("strong"),hKe=o("tapas"),pKe=o(" \u2014 "),qk=a("a"),_Ke=o("TapasTokenizer"),uKe=o(" (TAPAS model)"),bKe=l(),rh=a("li"),OJ=a("strong"),vKe=o("transfo-xl"),TKe=o(" \u2014 "),Ok=a("a"),FKe=o("TransfoXLTokenizer"),CKe=o(" (Transformer-XL model)"),MKe=l(),th=a("li"),GJ=a("strong"),EKe=o("wav2vec2"),yKe=o(" \u2014 "),Gk=a("a"),wKe=o("Wav2Vec2CTCTokenizer"),AKe=o(" (Wav2Vec2 model)"),LKe=l(),ah=a("li"),XJ=a("strong"),BKe=o("wav2vec2_phoneme"),xKe=o(" \u2014 "),Xk=a("a"),kKe=o("Wav2Vec2PhonemeCTCTokenizer"),RKe=o(" (Wav2Vec2Phoneme model)"),SKe=l(),Is=a("li"),VJ=a("strong"),PKe=o("xglm"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("XGLMTokenizer"),jKe=o(" or "),zk=a("a"),DKe=o("XGLMTokenizerFast"),NKe=o(" (XGLM model)"),qKe=l(),nh=a("li"),zJ=a("strong"),OKe=o("xlm"),GKe=o(" \u2014 "),Wk=a("a"),XKe=o("XLMTokenizer"),VKe=o(" (XLM model)"),zKe=l(),sh=a("li"),WJ=a("strong"),WKe=o("xlm-prophetnet"),QKe=o(" \u2014 "),Qk=a("a"),HKe=o("XLMProphetNetTokenizer"),UKe=o(" (XLMProphetNet model)"),JKe=l(),js=a("li"),QJ=a("strong"),YKe=o("xlm-roberta"),KKe=o(" \u2014 "),Hk=a("a"),ZKe=o("XLMRobertaTokenizer"),eZe=o(" or "),Uk=a("a"),oZe=o("XLMRobertaTokenizerFast"),rZe=o(" (XLM-RoBERTa model)"),tZe=l(),Ds=a("li"),HJ=a("strong"),aZe=o("xlnet"),nZe=o(" \u2014 "),Jk=a("a"),sZe=o("XLNetTokenizer"),lZe=o(" or "),Yk=a("a"),iZe=o("XLNetTokenizerFast"),dZe=o(" (XLNet model)"),cZe=l(),UJ=a("p"),fZe=o("Examples:"),mZe=l(),f(hE.$$.fragment),gZe=l(),lh=a("div"),f(pE.$$.fragment),hZe=l(),JJ=a("p"),pZe=o("Register a new tokenizer in this mapping."),Axe=l(),Hi=a("h2"),ih=a("a"),YJ=a("span"),f(_E.$$.fragment),_Ze=l(),KJ=a("span"),uZe=o("AutoFeatureExtractor"),Lxe=l(),Ho=a("div"),f(uE.$$.fragment),bZe=l(),bE=a("p"),vZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Kk=a("a"),TZe=o("AutoFeatureExtractor.from_pretrained()"),FZe=o(" class method."),CZe=l(),vE=a("p"),MZe=o("This class cannot be instantiated directly using "),ZJ=a("code"),EZe=o("__init__()"),yZe=o(" (throws an error)."),wZe=l(),Ie=a("div"),f(TE.$$.fragment),AZe=l(),eY=a("p"),LZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),BZe=l(),Xa=a("p"),xZe=o("The feature extractor class to instantiate is selected based on the "),oY=a("code"),kZe=o("model_type"),RZe=o(` property of the config object
(either passed as an argument or loaded from `),rY=a("code"),SZe=o("pretrained_model_name_or_path"),PZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tY=a("code"),$Ze=o("pretrained_model_name_or_path"),IZe=o(":"),jZe=l(),te=a("ul"),dh=a("li"),aY=a("strong"),DZe=o("beit"),NZe=o(" \u2014 "),Zk=a("a"),qZe=o("BeitFeatureExtractor"),OZe=o(" (BEiT model)"),GZe=l(),ch=a("li"),nY=a("strong"),XZe=o("clip"),VZe=o(" \u2014 "),eR=a("a"),zZe=o("CLIPFeatureExtractor"),WZe=o(" (CLIP model)"),QZe=l(),fh=a("li"),sY=a("strong"),HZe=o("convnext"),UZe=o(" \u2014 "),oR=a("a"),JZe=o("ConvNextFeatureExtractor"),YZe=o(" (ConvNext model)"),KZe=l(),mh=a("li"),lY=a("strong"),ZZe=o("deit"),eeo=o(" \u2014 "),rR=a("a"),oeo=o("DeiTFeatureExtractor"),reo=o(" (DeiT model)"),teo=l(),gh=a("li"),iY=a("strong"),aeo=o("detr"),neo=o(" \u2014 "),tR=a("a"),seo=o("DetrFeatureExtractor"),leo=o(" (DETR model)"),ieo=l(),hh=a("li"),dY=a("strong"),deo=o("hubert"),ceo=o(" \u2014 "),aR=a("a"),feo=o("Wav2Vec2FeatureExtractor"),meo=o(" (Hubert model)"),geo=l(),ph=a("li"),cY=a("strong"),heo=o("layoutlmv2"),peo=o(" \u2014 "),nR=a("a"),_eo=o("LayoutLMv2FeatureExtractor"),ueo=o(" (LayoutLMv2 model)"),beo=l(),_h=a("li"),fY=a("strong"),veo=o("maskformer"),Teo=o(" \u2014 "),sR=a("a"),Feo=o("MaskFormerFeatureExtractor"),Ceo=o(" (MaskFormer model)"),Meo=l(),uh=a("li"),mY=a("strong"),Eeo=o("perceiver"),yeo=o(" \u2014 "),lR=a("a"),weo=o("PerceiverFeatureExtractor"),Aeo=o(" (Perceiver model)"),Leo=l(),bh=a("li"),gY=a("strong"),Beo=o("poolformer"),xeo=o(" \u2014 "),iR=a("a"),keo=o("PoolFormerFeatureExtractor"),Reo=o(" (PoolFormer model)"),Seo=l(),vh=a("li"),hY=a("strong"),Peo=o("segformer"),$eo=o(" \u2014 "),dR=a("a"),Ieo=o("SegformerFeatureExtractor"),jeo=o(" (SegFormer model)"),Deo=l(),Th=a("li"),pY=a("strong"),Neo=o("speech_to_text"),qeo=o(" \u2014 "),cR=a("a"),Oeo=o("Speech2TextFeatureExtractor"),Geo=o(" (Speech2Text model)"),Xeo=l(),Fh=a("li"),_Y=a("strong"),Veo=o("swin"),zeo=o(" \u2014 "),fR=a("a"),Weo=o("ViTFeatureExtractor"),Qeo=o(" (Swin model)"),Heo=l(),Ch=a("li"),uY=a("strong"),Ueo=o("van"),Jeo=o(" \u2014 "),mR=a("a"),Yeo=o("ConvNextFeatureExtractor"),Keo=o(" (VAN model)"),Zeo=l(),Mh=a("li"),bY=a("strong"),eoo=o("vit"),ooo=o(" \u2014 "),gR=a("a"),roo=o("ViTFeatureExtractor"),too=o(" (ViT model)"),aoo=l(),Eh=a("li"),vY=a("strong"),noo=o("vit_mae"),soo=o(" \u2014 "),hR=a("a"),loo=o("ViTFeatureExtractor"),ioo=o(" (ViTMAE model)"),doo=l(),yh=a("li"),TY=a("strong"),coo=o("wav2vec2"),foo=o(" \u2014 "),pR=a("a"),moo=o("Wav2Vec2FeatureExtractor"),goo=o(" (Wav2Vec2 model)"),hoo=l(),f(wh.$$.fragment),poo=l(),FY=a("p"),_oo=o("Examples:"),uoo=l(),f(FE.$$.fragment),boo=l(),Ah=a("div"),f(CE.$$.fragment),voo=l(),CY=a("p"),Too=o("Register a new feature extractor for this class."),Bxe=l(),Ui=a("h2"),Lh=a("a"),MY=a("span"),f(ME.$$.fragment),Foo=l(),EY=a("span"),Coo=o("AutoProcessor"),xxe=l(),Uo=a("div"),f(EE.$$.fragment),Moo=l(),yE=a("p"),Eoo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_R=a("a"),yoo=o("AutoProcessor.from_pretrained()"),woo=o(" class method."),Aoo=l(),wE=a("p"),Loo=o("This class cannot be instantiated directly using "),yY=a("code"),Boo=o("__init__()"),xoo=o(" (throws an error)."),koo=l(),je=a("div"),f(AE.$$.fragment),Roo=l(),wY=a("p"),Soo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Poo=l(),Ji=a("p"),$oo=o("The processor class to instantiate is selected based on the "),AY=a("code"),Ioo=o("model_type"),joo=o(` property of the config object (either
passed as an argument or loaded from `),LY=a("code"),Doo=o("pretrained_model_name_or_path"),Noo=o(" if possible):"),qoo=l(),xe=a("ul"),Bh=a("li"),BY=a("strong"),Ooo=o("clip"),Goo=o(" \u2014 "),uR=a("a"),Xoo=o("CLIPProcessor"),Voo=o(" (CLIP model)"),zoo=l(),xh=a("li"),xY=a("strong"),Woo=o("layoutlmv2"),Qoo=o(" \u2014 "),bR=a("a"),Hoo=o("LayoutLMv2Processor"),Uoo=o(" (LayoutLMv2 model)"),Joo=l(),kh=a("li"),kY=a("strong"),Yoo=o("layoutxlm"),Koo=o(" \u2014 "),vR=a("a"),Zoo=o("LayoutXLMProcessor"),ero=o(" (LayoutXLM model)"),oro=l(),Rh=a("li"),RY=a("strong"),rro=o("speech_to_text"),tro=o(" \u2014 "),TR=a("a"),aro=o("Speech2TextProcessor"),nro=o(" (Speech2Text model)"),sro=l(),Sh=a("li"),SY=a("strong"),lro=o("speech_to_text_2"),iro=o(" \u2014 "),FR=a("a"),dro=o("Speech2Text2Processor"),cro=o(" (Speech2Text2 model)"),fro=l(),Ph=a("li"),PY=a("strong"),mro=o("trocr"),gro=o(" \u2014 "),CR=a("a"),hro=o("TrOCRProcessor"),pro=o(" (TrOCR model)"),_ro=l(),$h=a("li"),$Y=a("strong"),uro=o("vision-text-dual-encoder"),bro=o(" \u2014 "),MR=a("a"),vro=o("VisionTextDualEncoderProcessor"),Tro=o(" (VisionTextDualEncoder model)"),Fro=l(),Ih=a("li"),IY=a("strong"),Cro=o("wav2vec2"),Mro=o(" \u2014 "),ER=a("a"),Ero=o("Wav2Vec2Processor"),yro=o(" (Wav2Vec2 model)"),wro=l(),f(jh.$$.fragment),Aro=l(),jY=a("p"),Lro=o("Examples:"),Bro=l(),f(LE.$$.fragment),xro=l(),Dh=a("div"),f(BE.$$.fragment),kro=l(),DY=a("p"),Rro=o("Register a new processor for this class."),kxe=l(),Yi=a("h2"),Nh=a("a"),NY=a("span"),f(xE.$$.fragment),Sro=l(),qY=a("span"),Pro=o("AutoModel"),Rxe=l(),Jo=a("div"),f(kE.$$.fragment),$ro=l(),Ki=a("p"),Iro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OY=a("code"),jro=o("from_pretrained()"),Dro=o("class method or the "),GY=a("code"),Nro=o("from_config()"),qro=o(`class
method.`),Oro=l(),RE=a("p"),Gro=o("This class cannot be instantiated directly using "),XY=a("code"),Xro=o("__init__()"),Vro=o(" (throws an error)."),zro=l(),Vr=a("div"),f(SE.$$.fragment),Wro=l(),VY=a("p"),Qro=o("Instantiates one of the base model classes of the library from a configuration."),Hro=l(),Zi=a("p"),Uro=o(`Note:
Loading a model from its configuration file does `),zY=a("strong"),Jro=o("not"),Yro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("code"),Kro=o("from_pretrained()"),Zro=o("to load the model weights."),eto=l(),QY=a("p"),oto=o("Examples:"),rto=l(),f(PE.$$.fragment),tto=l(),De=a("div"),f($E.$$.fragment),ato=l(),HY=a("p"),nto=o("Instantiate one of the base model classes of the library from a pretrained model."),sto=l(),Va=a("p"),lto=o("The model class to instantiate is selected based on the "),UY=a("code"),ito=o("model_type"),dto=o(` property of the config object (either
passed as an argument or loaded from `),JY=a("code"),cto=o("pretrained_model_name_or_path"),fto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YY=a("code"),mto=o("pretrained_model_name_or_path"),gto=o(":"),hto=l(),F=a("ul"),qh=a("li"),KY=a("strong"),pto=o("albert"),_to=o(" \u2014 "),yR=a("a"),uto=o("AlbertModel"),bto=o(" (ALBERT model)"),vto=l(),Oh=a("li"),ZY=a("strong"),Tto=o("bart"),Fto=o(" \u2014 "),wR=a("a"),Cto=o("BartModel"),Mto=o(" (BART model)"),Eto=l(),Gh=a("li"),eK=a("strong"),yto=o("beit"),wto=o(" \u2014 "),AR=a("a"),Ato=o("BeitModel"),Lto=o(" (BEiT model)"),Bto=l(),Xh=a("li"),oK=a("strong"),xto=o("bert"),kto=o(" \u2014 "),LR=a("a"),Rto=o("BertModel"),Sto=o(" (BERT model)"),Pto=l(),Vh=a("li"),rK=a("strong"),$to=o("bert-generation"),Ito=o(" \u2014 "),BR=a("a"),jto=o("BertGenerationEncoder"),Dto=o(" (Bert Generation model)"),Nto=l(),zh=a("li"),tK=a("strong"),qto=o("big_bird"),Oto=o(" \u2014 "),xR=a("a"),Gto=o("BigBirdModel"),Xto=o(" (BigBird model)"),Vto=l(),Wh=a("li"),aK=a("strong"),zto=o("bigbird_pegasus"),Wto=o(" \u2014 "),kR=a("a"),Qto=o("BigBirdPegasusModel"),Hto=o(" (BigBirdPegasus model)"),Uto=l(),Qh=a("li"),nK=a("strong"),Jto=o("blenderbot"),Yto=o(" \u2014 "),RR=a("a"),Kto=o("BlenderbotModel"),Zto=o(" (Blenderbot model)"),eao=l(),Hh=a("li"),sK=a("strong"),oao=o("blenderbot-small"),rao=o(" \u2014 "),SR=a("a"),tao=o("BlenderbotSmallModel"),aao=o(" (BlenderbotSmall model)"),nao=l(),Uh=a("li"),lK=a("strong"),sao=o("camembert"),lao=o(" \u2014 "),PR=a("a"),iao=o("CamembertModel"),dao=o(" (CamemBERT model)"),cao=l(),Jh=a("li"),iK=a("strong"),fao=o("canine"),mao=o(" \u2014 "),$R=a("a"),gao=o("CanineModel"),hao=o(" (Canine model)"),pao=l(),Yh=a("li"),dK=a("strong"),_ao=o("clip"),uao=o(" \u2014 "),IR=a("a"),bao=o("CLIPModel"),vao=o(" (CLIP model)"),Tao=l(),Kh=a("li"),cK=a("strong"),Fao=o("convbert"),Cao=o(" \u2014 "),jR=a("a"),Mao=o("ConvBertModel"),Eao=o(" (ConvBERT model)"),yao=l(),Zh=a("li"),fK=a("strong"),wao=o("convnext"),Aao=o(" \u2014 "),DR=a("a"),Lao=o("ConvNextModel"),Bao=o(" (ConvNext model)"),xao=l(),ep=a("li"),mK=a("strong"),kao=o("ctrl"),Rao=o(" \u2014 "),NR=a("a"),Sao=o("CTRLModel"),Pao=o(" (CTRL model)"),$ao=l(),op=a("li"),gK=a("strong"),Iao=o("data2vec-audio"),jao=o(" \u2014 "),qR=a("a"),Dao=o("Data2VecAudioModel"),Nao=o(" (Data2VecAudio model)"),qao=l(),rp=a("li"),hK=a("strong"),Oao=o("data2vec-text"),Gao=o(" \u2014 "),OR=a("a"),Xao=o("Data2VecTextModel"),Vao=o(" (Data2VecText model)"),zao=l(),tp=a("li"),pK=a("strong"),Wao=o("deberta"),Qao=o(" \u2014 "),GR=a("a"),Hao=o("DebertaModel"),Uao=o(" (DeBERTa model)"),Jao=l(),ap=a("li"),_K=a("strong"),Yao=o("deberta-v2"),Kao=o(" \u2014 "),XR=a("a"),Zao=o("DebertaV2Model"),eno=o(" (DeBERTa-v2 model)"),ono=l(),np=a("li"),uK=a("strong"),rno=o("deit"),tno=o(" \u2014 "),VR=a("a"),ano=o("DeiTModel"),nno=o(" (DeiT model)"),sno=l(),sp=a("li"),bK=a("strong"),lno=o("detr"),ino=o(" \u2014 "),zR=a("a"),dno=o("DetrModel"),cno=o(" (DETR model)"),fno=l(),lp=a("li"),vK=a("strong"),mno=o("distilbert"),gno=o(" \u2014 "),WR=a("a"),hno=o("DistilBertModel"),pno=o(" (DistilBERT model)"),_no=l(),ip=a("li"),TK=a("strong"),uno=o("dpr"),bno=o(" \u2014 "),QR=a("a"),vno=o("DPRQuestionEncoder"),Tno=o(" (DPR model)"),Fno=l(),dp=a("li"),FK=a("strong"),Cno=o("electra"),Mno=o(" \u2014 "),HR=a("a"),Eno=o("ElectraModel"),yno=o(" (ELECTRA model)"),wno=l(),cp=a("li"),CK=a("strong"),Ano=o("flaubert"),Lno=o(" \u2014 "),UR=a("a"),Bno=o("FlaubertModel"),xno=o(" (FlauBERT model)"),kno=l(),fp=a("li"),MK=a("strong"),Rno=o("fnet"),Sno=o(" \u2014 "),JR=a("a"),Pno=o("FNetModel"),$no=o(" (FNet model)"),Ino=l(),mp=a("li"),EK=a("strong"),jno=o("fsmt"),Dno=o(" \u2014 "),YR=a("a"),Nno=o("FSMTModel"),qno=o(" (FairSeq Machine-Translation model)"),Ono=l(),Ns=a("li"),yK=a("strong"),Gno=o("funnel"),Xno=o(" \u2014 "),KR=a("a"),Vno=o("FunnelModel"),zno=o(" or "),ZR=a("a"),Wno=o("FunnelBaseModel"),Qno=o(" (Funnel Transformer model)"),Hno=l(),gp=a("li"),wK=a("strong"),Uno=o("gpt2"),Jno=o(" \u2014 "),eS=a("a"),Yno=o("GPT2Model"),Kno=o(" (OpenAI GPT-2 model)"),Zno=l(),hp=a("li"),AK=a("strong"),eso=o("gpt_neo"),oso=o(" \u2014 "),oS=a("a"),rso=o("GPTNeoModel"),tso=o(" (GPT Neo model)"),aso=l(),pp=a("li"),LK=a("strong"),nso=o("gptj"),sso=o(" \u2014 "),rS=a("a"),lso=o("GPTJModel"),iso=o(" (GPT-J model)"),dso=l(),_p=a("li"),BK=a("strong"),cso=o("hubert"),fso=o(" \u2014 "),tS=a("a"),mso=o("HubertModel"),gso=o(" (Hubert model)"),hso=l(),up=a("li"),xK=a("strong"),pso=o("ibert"),_so=o(" \u2014 "),aS=a("a"),uso=o("IBertModel"),bso=o(" (I-BERT model)"),vso=l(),bp=a("li"),kK=a("strong"),Tso=o("imagegpt"),Fso=o(" \u2014 "),nS=a("a"),Cso=o("ImageGPTModel"),Mso=o(" (ImageGPT model)"),Eso=l(),vp=a("li"),RK=a("strong"),yso=o("layoutlm"),wso=o(" \u2014 "),sS=a("a"),Aso=o("LayoutLMModel"),Lso=o(" (LayoutLM model)"),Bso=l(),Tp=a("li"),SK=a("strong"),xso=o("layoutlmv2"),kso=o(" \u2014 "),lS=a("a"),Rso=o("LayoutLMv2Model"),Sso=o(" (LayoutLMv2 model)"),Pso=l(),Fp=a("li"),PK=a("strong"),$so=o("led"),Iso=o(" \u2014 "),iS=a("a"),jso=o("LEDModel"),Dso=o(" (LED model)"),Nso=l(),Cp=a("li"),$K=a("strong"),qso=o("longformer"),Oso=o(" \u2014 "),dS=a("a"),Gso=o("LongformerModel"),Xso=o(" (Longformer model)"),Vso=l(),Mp=a("li"),IK=a("strong"),zso=o("luke"),Wso=o(" \u2014 "),cS=a("a"),Qso=o("LukeModel"),Hso=o(" (LUKE model)"),Uso=l(),Ep=a("li"),jK=a("strong"),Jso=o("lxmert"),Yso=o(" \u2014 "),fS=a("a"),Kso=o("LxmertModel"),Zso=o(" (LXMERT model)"),elo=l(),yp=a("li"),DK=a("strong"),olo=o("m2m_100"),rlo=o(" \u2014 "),mS=a("a"),tlo=o("M2M100Model"),alo=o(" (M2M100 model)"),nlo=l(),wp=a("li"),NK=a("strong"),slo=o("marian"),llo=o(" \u2014 "),gS=a("a"),ilo=o("MarianModel"),dlo=o(" (Marian model)"),clo=l(),Ap=a("li"),qK=a("strong"),flo=o("maskformer"),mlo=o(" \u2014 "),hS=a("a"),glo=o("MaskFormerModel"),hlo=o(" (MaskFormer model)"),plo=l(),Lp=a("li"),OK=a("strong"),_lo=o("mbart"),ulo=o(" \u2014 "),pS=a("a"),blo=o("MBartModel"),vlo=o(" (mBART model)"),Tlo=l(),Bp=a("li"),GK=a("strong"),Flo=o("megatron-bert"),Clo=o(" \u2014 "),_S=a("a"),Mlo=o("MegatronBertModel"),Elo=o(" (MegatronBert model)"),ylo=l(),xp=a("li"),XK=a("strong"),wlo=o("mobilebert"),Alo=o(" \u2014 "),uS=a("a"),Llo=o("MobileBertModel"),Blo=o(" (MobileBERT model)"),xlo=l(),kp=a("li"),VK=a("strong"),klo=o("mpnet"),Rlo=o(" \u2014 "),bS=a("a"),Slo=o("MPNetModel"),Plo=o(" (MPNet model)"),$lo=l(),Rp=a("li"),zK=a("strong"),Ilo=o("mt5"),jlo=o(" \u2014 "),vS=a("a"),Dlo=o("MT5Model"),Nlo=o(" (mT5 model)"),qlo=l(),Sp=a("li"),WK=a("strong"),Olo=o("nystromformer"),Glo=o(" \u2014 "),TS=a("a"),Xlo=o("NystromformerModel"),Vlo=o(" (Nystromformer model)"),zlo=l(),Pp=a("li"),QK=a("strong"),Wlo=o("openai-gpt"),Qlo=o(" \u2014 "),FS=a("a"),Hlo=o("OpenAIGPTModel"),Ulo=o(" (OpenAI GPT model)"),Jlo=l(),$p=a("li"),HK=a("strong"),Ylo=o("pegasus"),Klo=o(" \u2014 "),CS=a("a"),Zlo=o("PegasusModel"),eio=o(" (Pegasus model)"),oio=l(),Ip=a("li"),UK=a("strong"),rio=o("perceiver"),tio=o(" \u2014 "),MS=a("a"),aio=o("PerceiverModel"),nio=o(" (Perceiver model)"),sio=l(),jp=a("li"),JK=a("strong"),lio=o("plbart"),iio=o(" \u2014 "),ES=a("a"),dio=o("PLBartModel"),cio=o(" (PLBart model)"),fio=l(),Dp=a("li"),YK=a("strong"),mio=o("poolformer"),gio=o(" \u2014 "),yS=a("a"),hio=o("PoolFormerModel"),pio=o(" (PoolFormer model)"),_io=l(),Np=a("li"),KK=a("strong"),uio=o("prophetnet"),bio=o(" \u2014 "),wS=a("a"),vio=o("ProphetNetModel"),Tio=o(" (ProphetNet model)"),Fio=l(),qp=a("li"),ZK=a("strong"),Cio=o("qdqbert"),Mio=o(" \u2014 "),AS=a("a"),Eio=o("QDQBertModel"),yio=o(" (QDQBert model)"),wio=l(),Op=a("li"),eZ=a("strong"),Aio=o("reformer"),Lio=o(" \u2014 "),LS=a("a"),Bio=o("ReformerModel"),xio=o(" (Reformer model)"),kio=l(),Gp=a("li"),oZ=a("strong"),Rio=o("rembert"),Sio=o(" \u2014 "),BS=a("a"),Pio=o("RemBertModel"),$io=o(" (RemBERT model)"),Iio=l(),Xp=a("li"),rZ=a("strong"),jio=o("retribert"),Dio=o(" \u2014 "),xS=a("a"),Nio=o("RetriBertModel"),qio=o(" (RetriBERT model)"),Oio=l(),Vp=a("li"),tZ=a("strong"),Gio=o("roberta"),Xio=o(" \u2014 "),kS=a("a"),Vio=o("RobertaModel"),zio=o(" (RoBERTa model)"),Wio=l(),zp=a("li"),aZ=a("strong"),Qio=o("roformer"),Hio=o(" \u2014 "),RS=a("a"),Uio=o("RoFormerModel"),Jio=o(" (RoFormer model)"),Yio=l(),Wp=a("li"),nZ=a("strong"),Kio=o("segformer"),Zio=o(" \u2014 "),SS=a("a"),edo=o("SegformerModel"),odo=o(" (SegFormer model)"),rdo=l(),Qp=a("li"),sZ=a("strong"),tdo=o("sew"),ado=o(" \u2014 "),PS=a("a"),ndo=o("SEWModel"),sdo=o(" (SEW model)"),ldo=l(),Hp=a("li"),lZ=a("strong"),ido=o("sew-d"),ddo=o(" \u2014 "),$S=a("a"),cdo=o("SEWDModel"),fdo=o(" (SEW-D model)"),mdo=l(),Up=a("li"),iZ=a("strong"),gdo=o("speech_to_text"),hdo=o(" \u2014 "),IS=a("a"),pdo=o("Speech2TextModel"),_do=o(" (Speech2Text model)"),udo=l(),Jp=a("li"),dZ=a("strong"),bdo=o("splinter"),vdo=o(" \u2014 "),jS=a("a"),Tdo=o("SplinterModel"),Fdo=o(" (Splinter model)"),Cdo=l(),Yp=a("li"),cZ=a("strong"),Mdo=o("squeezebert"),Edo=o(" \u2014 "),DS=a("a"),ydo=o("SqueezeBertModel"),wdo=o(" (SqueezeBERT model)"),Ado=l(),Kp=a("li"),fZ=a("strong"),Ldo=o("swin"),Bdo=o(" \u2014 "),NS=a("a"),xdo=o("SwinModel"),kdo=o(" (Swin model)"),Rdo=l(),Zp=a("li"),mZ=a("strong"),Sdo=o("t5"),Pdo=o(" \u2014 "),qS=a("a"),$do=o("T5Model"),Ido=o(" (T5 model)"),jdo=l(),e_=a("li"),gZ=a("strong"),Ddo=o("tapas"),Ndo=o(" \u2014 "),OS=a("a"),qdo=o("TapasModel"),Odo=o(" (TAPAS model)"),Gdo=l(),o_=a("li"),hZ=a("strong"),Xdo=o("transfo-xl"),Vdo=o(" \u2014 "),GS=a("a"),zdo=o("TransfoXLModel"),Wdo=o(" (Transformer-XL model)"),Qdo=l(),r_=a("li"),pZ=a("strong"),Hdo=o("unispeech"),Udo=o(" \u2014 "),XS=a("a"),Jdo=o("UniSpeechModel"),Ydo=o(" (UniSpeech model)"),Kdo=l(),t_=a("li"),_Z=a("strong"),Zdo=o("unispeech-sat"),eco=o(" \u2014 "),VS=a("a"),oco=o("UniSpeechSatModel"),rco=o(" (UniSpeechSat model)"),tco=l(),a_=a("li"),uZ=a("strong"),aco=o("van"),nco=o(" \u2014 "),zS=a("a"),sco=o("VanModel"),lco=o(" (VAN model)"),ico=l(),n_=a("li"),bZ=a("strong"),dco=o("vilt"),cco=o(" \u2014 "),WS=a("a"),fco=o("ViltModel"),mco=o(" (ViLT model)"),gco=l(),s_=a("li"),vZ=a("strong"),hco=o("vision-text-dual-encoder"),pco=o(" \u2014 "),QS=a("a"),_co=o("VisionTextDualEncoderModel"),uco=o(" (VisionTextDualEncoder model)"),bco=l(),l_=a("li"),TZ=a("strong"),vco=o("visual_bert"),Tco=o(" \u2014 "),HS=a("a"),Fco=o("VisualBertModel"),Cco=o(" (VisualBert model)"),Mco=l(),i_=a("li"),FZ=a("strong"),Eco=o("vit"),yco=o(" \u2014 "),US=a("a"),wco=o("ViTModel"),Aco=o(" (ViT model)"),Lco=l(),d_=a("li"),CZ=a("strong"),Bco=o("vit_mae"),xco=o(" \u2014 "),JS=a("a"),kco=o("ViTMAEModel"),Rco=o(" (ViTMAE model)"),Sco=l(),c_=a("li"),MZ=a("strong"),Pco=o("wav2vec2"),$co=o(" \u2014 "),YS=a("a"),Ico=o("Wav2Vec2Model"),jco=o(" (Wav2Vec2 model)"),Dco=l(),f_=a("li"),EZ=a("strong"),Nco=o("wavlm"),qco=o(" \u2014 "),KS=a("a"),Oco=o("WavLMModel"),Gco=o(" (WavLM model)"),Xco=l(),m_=a("li"),yZ=a("strong"),Vco=o("xglm"),zco=o(" \u2014 "),ZS=a("a"),Wco=o("XGLMModel"),Qco=o(" (XGLM model)"),Hco=l(),g_=a("li"),wZ=a("strong"),Uco=o("xlm"),Jco=o(" \u2014 "),eP=a("a"),Yco=o("XLMModel"),Kco=o(" (XLM model)"),Zco=l(),h_=a("li"),AZ=a("strong"),efo=o("xlm-prophetnet"),ofo=o(" \u2014 "),oP=a("a"),rfo=o("XLMProphetNetModel"),tfo=o(" (XLMProphetNet model)"),afo=l(),p_=a("li"),LZ=a("strong"),nfo=o("xlm-roberta"),sfo=o(" \u2014 "),rP=a("a"),lfo=o("XLMRobertaModel"),ifo=o(" (XLM-RoBERTa model)"),dfo=l(),__=a("li"),BZ=a("strong"),cfo=o("xlm-roberta-xl"),ffo=o(" \u2014 "),tP=a("a"),mfo=o("XLMRobertaXLModel"),gfo=o(" (XLM-RoBERTa-XL model)"),hfo=l(),u_=a("li"),xZ=a("strong"),pfo=o("xlnet"),_fo=o(" \u2014 "),aP=a("a"),ufo=o("XLNetModel"),bfo=o(" (XLNet model)"),vfo=l(),b_=a("li"),kZ=a("strong"),Tfo=o("yoso"),Ffo=o(" \u2014 "),nP=a("a"),Cfo=o("YosoModel"),Mfo=o(" (YOSO model)"),Efo=l(),v_=a("p"),yfo=o("The model is set in evaluation mode by default using "),RZ=a("code"),wfo=o("model.eval()"),Afo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SZ=a("code"),Lfo=o("model.train()"),Bfo=l(),PZ=a("p"),xfo=o("Examples:"),kfo=l(),f(IE.$$.fragment),Sxe=l(),ed=a("h2"),T_=a("a"),$Z=a("span"),f(jE.$$.fragment),Rfo=l(),IZ=a("span"),Sfo=o("AutoModelForPreTraining"),Pxe=l(),Yo=a("div"),f(DE.$$.fragment),Pfo=l(),od=a("p"),$fo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jZ=a("code"),Ifo=o("from_pretrained()"),jfo=o("class method or the "),DZ=a("code"),Dfo=o("from_config()"),Nfo=o(`class
method.`),qfo=l(),NE=a("p"),Ofo=o("This class cannot be instantiated directly using "),NZ=a("code"),Gfo=o("__init__()"),Xfo=o(" (throws an error)."),Vfo=l(),zr=a("div"),f(qE.$$.fragment),zfo=l(),qZ=a("p"),Wfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qfo=l(),rd=a("p"),Hfo=o(`Note:
Loading a model from its configuration file does `),OZ=a("strong"),Ufo=o("not"),Jfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("code"),Yfo=o("from_pretrained()"),Kfo=o("to load the model weights."),Zfo=l(),XZ=a("p"),emo=o("Examples:"),omo=l(),f(OE.$$.fragment),rmo=l(),Ne=a("div"),f(GE.$$.fragment),tmo=l(),VZ=a("p"),amo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nmo=l(),za=a("p"),smo=o("The model class to instantiate is selected based on the "),zZ=a("code"),lmo=o("model_type"),imo=o(` property of the config object (either
passed as an argument or loaded from `),WZ=a("code"),dmo=o("pretrained_model_name_or_path"),cmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QZ=a("code"),fmo=o("pretrained_model_name_or_path"),mmo=o(":"),gmo=l(),k=a("ul"),F_=a("li"),HZ=a("strong"),hmo=o("albert"),pmo=o(" \u2014 "),sP=a("a"),_mo=o("AlbertForPreTraining"),umo=o(" (ALBERT model)"),bmo=l(),C_=a("li"),UZ=a("strong"),vmo=o("bart"),Tmo=o(" \u2014 "),lP=a("a"),Fmo=o("BartForConditionalGeneration"),Cmo=o(" (BART model)"),Mmo=l(),M_=a("li"),JZ=a("strong"),Emo=o("bert"),ymo=o(" \u2014 "),iP=a("a"),wmo=o("BertForPreTraining"),Amo=o(" (BERT model)"),Lmo=l(),E_=a("li"),YZ=a("strong"),Bmo=o("big_bird"),xmo=o(" \u2014 "),dP=a("a"),kmo=o("BigBirdForPreTraining"),Rmo=o(" (BigBird model)"),Smo=l(),y_=a("li"),KZ=a("strong"),Pmo=o("camembert"),$mo=o(" \u2014 "),cP=a("a"),Imo=o("CamembertForMaskedLM"),jmo=o(" (CamemBERT model)"),Dmo=l(),w_=a("li"),ZZ=a("strong"),Nmo=o("ctrl"),qmo=o(" \u2014 "),fP=a("a"),Omo=o("CTRLLMHeadModel"),Gmo=o(" (CTRL model)"),Xmo=l(),A_=a("li"),eee=a("strong"),Vmo=o("data2vec-text"),zmo=o(" \u2014 "),mP=a("a"),Wmo=o("Data2VecTextForMaskedLM"),Qmo=o(" (Data2VecText model)"),Hmo=l(),L_=a("li"),oee=a("strong"),Umo=o("deberta"),Jmo=o(" \u2014 "),gP=a("a"),Ymo=o("DebertaForMaskedLM"),Kmo=o(" (DeBERTa model)"),Zmo=l(),B_=a("li"),ree=a("strong"),ego=o("deberta-v2"),ogo=o(" \u2014 "),hP=a("a"),rgo=o("DebertaV2ForMaskedLM"),tgo=o(" (DeBERTa-v2 model)"),ago=l(),x_=a("li"),tee=a("strong"),ngo=o("distilbert"),sgo=o(" \u2014 "),pP=a("a"),lgo=o("DistilBertForMaskedLM"),igo=o(" (DistilBERT model)"),dgo=l(),k_=a("li"),aee=a("strong"),cgo=o("electra"),fgo=o(" \u2014 "),_P=a("a"),mgo=o("ElectraForPreTraining"),ggo=o(" (ELECTRA model)"),hgo=l(),R_=a("li"),nee=a("strong"),pgo=o("flaubert"),_go=o(" \u2014 "),uP=a("a"),ugo=o("FlaubertWithLMHeadModel"),bgo=o(" (FlauBERT model)"),vgo=l(),S_=a("li"),see=a("strong"),Tgo=o("fnet"),Fgo=o(" \u2014 "),bP=a("a"),Cgo=o("FNetForPreTraining"),Mgo=o(" (FNet model)"),Ego=l(),P_=a("li"),lee=a("strong"),ygo=o("fsmt"),wgo=o(" \u2014 "),vP=a("a"),Ago=o("FSMTForConditionalGeneration"),Lgo=o(" (FairSeq Machine-Translation model)"),Bgo=l(),$_=a("li"),iee=a("strong"),xgo=o("funnel"),kgo=o(" \u2014 "),TP=a("a"),Rgo=o("FunnelForPreTraining"),Sgo=o(" (Funnel Transformer model)"),Pgo=l(),I_=a("li"),dee=a("strong"),$go=o("gpt2"),Igo=o(" \u2014 "),FP=a("a"),jgo=o("GPT2LMHeadModel"),Dgo=o(" (OpenAI GPT-2 model)"),Ngo=l(),j_=a("li"),cee=a("strong"),qgo=o("ibert"),Ogo=o(" \u2014 "),CP=a("a"),Ggo=o("IBertForMaskedLM"),Xgo=o(" (I-BERT model)"),Vgo=l(),D_=a("li"),fee=a("strong"),zgo=o("layoutlm"),Wgo=o(" \u2014 "),MP=a("a"),Qgo=o("LayoutLMForMaskedLM"),Hgo=o(" (LayoutLM model)"),Ugo=l(),N_=a("li"),mee=a("strong"),Jgo=o("longformer"),Ygo=o(" \u2014 "),EP=a("a"),Kgo=o("LongformerForMaskedLM"),Zgo=o(" (Longformer model)"),eho=l(),q_=a("li"),gee=a("strong"),oho=o("lxmert"),rho=o(" \u2014 "),yP=a("a"),tho=o("LxmertForPreTraining"),aho=o(" (LXMERT model)"),nho=l(),O_=a("li"),hee=a("strong"),sho=o("megatron-bert"),lho=o(" \u2014 "),wP=a("a"),iho=o("MegatronBertForPreTraining"),dho=o(" (MegatronBert model)"),cho=l(),G_=a("li"),pee=a("strong"),fho=o("mobilebert"),mho=o(" \u2014 "),AP=a("a"),gho=o("MobileBertForPreTraining"),hho=o(" (MobileBERT model)"),pho=l(),X_=a("li"),_ee=a("strong"),_ho=o("mpnet"),uho=o(" \u2014 "),LP=a("a"),bho=o("MPNetForMaskedLM"),vho=o(" (MPNet model)"),Tho=l(),V_=a("li"),uee=a("strong"),Fho=o("openai-gpt"),Cho=o(" \u2014 "),BP=a("a"),Mho=o("OpenAIGPTLMHeadModel"),Eho=o(" (OpenAI GPT model)"),yho=l(),z_=a("li"),bee=a("strong"),who=o("retribert"),Aho=o(" \u2014 "),xP=a("a"),Lho=o("RetriBertModel"),Bho=o(" (RetriBERT model)"),xho=l(),W_=a("li"),vee=a("strong"),kho=o("roberta"),Rho=o(" \u2014 "),kP=a("a"),Sho=o("RobertaForMaskedLM"),Pho=o(" (RoBERTa model)"),$ho=l(),Q_=a("li"),Tee=a("strong"),Iho=o("squeezebert"),jho=o(" \u2014 "),RP=a("a"),Dho=o("SqueezeBertForMaskedLM"),Nho=o(" (SqueezeBERT model)"),qho=l(),H_=a("li"),Fee=a("strong"),Oho=o("t5"),Gho=o(" \u2014 "),SP=a("a"),Xho=o("T5ForConditionalGeneration"),Vho=o(" (T5 model)"),zho=l(),U_=a("li"),Cee=a("strong"),Who=o("tapas"),Qho=o(" \u2014 "),PP=a("a"),Hho=o("TapasForMaskedLM"),Uho=o(" (TAPAS model)"),Jho=l(),J_=a("li"),Mee=a("strong"),Yho=o("transfo-xl"),Kho=o(" \u2014 "),$P=a("a"),Zho=o("TransfoXLLMHeadModel"),epo=o(" (Transformer-XL model)"),opo=l(),Y_=a("li"),Eee=a("strong"),rpo=o("unispeech"),tpo=o(" \u2014 "),IP=a("a"),apo=o("UniSpeechForPreTraining"),npo=o(" (UniSpeech model)"),spo=l(),K_=a("li"),yee=a("strong"),lpo=o("unispeech-sat"),ipo=o(" \u2014 "),jP=a("a"),dpo=o("UniSpeechSatForPreTraining"),cpo=o(" (UniSpeechSat model)"),fpo=l(),Z_=a("li"),wee=a("strong"),mpo=o("visual_bert"),gpo=o(" \u2014 "),DP=a("a"),hpo=o("VisualBertForPreTraining"),ppo=o(" (VisualBert model)"),_po=l(),eu=a("li"),Aee=a("strong"),upo=o("vit_mae"),bpo=o(" \u2014 "),NP=a("a"),vpo=o("ViTMAEForPreTraining"),Tpo=o(" (ViTMAE model)"),Fpo=l(),ou=a("li"),Lee=a("strong"),Cpo=o("wav2vec2"),Mpo=o(" \u2014 "),qP=a("a"),Epo=o("Wav2Vec2ForPreTraining"),ypo=o(" (Wav2Vec2 model)"),wpo=l(),ru=a("li"),Bee=a("strong"),Apo=o("xlm"),Lpo=o(" \u2014 "),OP=a("a"),Bpo=o("XLMWithLMHeadModel"),xpo=o(" (XLM model)"),kpo=l(),tu=a("li"),xee=a("strong"),Rpo=o("xlm-roberta"),Spo=o(" \u2014 "),GP=a("a"),Ppo=o("XLMRobertaForMaskedLM"),$po=o(" (XLM-RoBERTa model)"),Ipo=l(),au=a("li"),kee=a("strong"),jpo=o("xlm-roberta-xl"),Dpo=o(" \u2014 "),XP=a("a"),Npo=o("XLMRobertaXLForMaskedLM"),qpo=o(" (XLM-RoBERTa-XL model)"),Opo=l(),nu=a("li"),Ree=a("strong"),Gpo=o("xlnet"),Xpo=o(" \u2014 "),VP=a("a"),Vpo=o("XLNetLMHeadModel"),zpo=o(" (XLNet model)"),Wpo=l(),su=a("p"),Qpo=o("The model is set in evaluation mode by default using "),See=a("code"),Hpo=o("model.eval()"),Upo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pee=a("code"),Jpo=o("model.train()"),Ypo=l(),$ee=a("p"),Kpo=o("Examples:"),Zpo=l(),f(XE.$$.fragment),$xe=l(),td=a("h2"),lu=a("a"),Iee=a("span"),f(VE.$$.fragment),e_o=l(),jee=a("span"),o_o=o("AutoModelForCausalLM"),Ixe=l(),Ko=a("div"),f(zE.$$.fragment),r_o=l(),ad=a("p"),t_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dee=a("code"),a_o=o("from_pretrained()"),n_o=o("class method or the "),Nee=a("code"),s_o=o("from_config()"),l_o=o(`class
method.`),i_o=l(),WE=a("p"),d_o=o("This class cannot be instantiated directly using "),qee=a("code"),c_o=o("__init__()"),f_o=o(" (throws an error)."),m_o=l(),Wr=a("div"),f(QE.$$.fragment),g_o=l(),Oee=a("p"),h_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p_o=l(),nd=a("p"),__o=o(`Note:
Loading a model from its configuration file does `),Gee=a("strong"),u_o=o("not"),b_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("code"),v_o=o("from_pretrained()"),T_o=o("to load the model weights."),F_o=l(),Vee=a("p"),C_o=o("Examples:"),M_o=l(),f(HE.$$.fragment),E_o=l(),qe=a("div"),f(UE.$$.fragment),y_o=l(),zee=a("p"),w_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A_o=l(),Wa=a("p"),L_o=o("The model class to instantiate is selected based on the "),Wee=a("code"),B_o=o("model_type"),x_o=o(` property of the config object (either
passed as an argument or loaded from `),Qee=a("code"),k_o=o("pretrained_model_name_or_path"),R_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=a("code"),S_o=o("pretrained_model_name_or_path"),P_o=o(":"),$_o=l(),$=a("ul"),iu=a("li"),Uee=a("strong"),I_o=o("bart"),j_o=o(" \u2014 "),zP=a("a"),D_o=o("BartForCausalLM"),N_o=o(" (BART model)"),q_o=l(),du=a("li"),Jee=a("strong"),O_o=o("bert"),G_o=o(" \u2014 "),WP=a("a"),X_o=o("BertLMHeadModel"),V_o=o(" (BERT model)"),z_o=l(),cu=a("li"),Yee=a("strong"),W_o=o("bert-generation"),Q_o=o(" \u2014 "),QP=a("a"),H_o=o("BertGenerationDecoder"),U_o=o(" (Bert Generation model)"),J_o=l(),fu=a("li"),Kee=a("strong"),Y_o=o("big_bird"),K_o=o(" \u2014 "),HP=a("a"),Z_o=o("BigBirdForCausalLM"),euo=o(" (BigBird model)"),ouo=l(),mu=a("li"),Zee=a("strong"),ruo=o("bigbird_pegasus"),tuo=o(" \u2014 "),UP=a("a"),auo=o("BigBirdPegasusForCausalLM"),nuo=o(" (BigBirdPegasus model)"),suo=l(),gu=a("li"),eoe=a("strong"),luo=o("blenderbot"),iuo=o(" \u2014 "),JP=a("a"),duo=o("BlenderbotForCausalLM"),cuo=o(" (Blenderbot model)"),fuo=l(),hu=a("li"),ooe=a("strong"),muo=o("blenderbot-small"),guo=o(" \u2014 "),YP=a("a"),huo=o("BlenderbotSmallForCausalLM"),puo=o(" (BlenderbotSmall model)"),_uo=l(),pu=a("li"),roe=a("strong"),uuo=o("camembert"),buo=o(" \u2014 "),KP=a("a"),vuo=o("CamembertForCausalLM"),Tuo=o(" (CamemBERT model)"),Fuo=l(),_u=a("li"),toe=a("strong"),Cuo=o("ctrl"),Muo=o(" \u2014 "),ZP=a("a"),Euo=o("CTRLLMHeadModel"),yuo=o(" (CTRL model)"),wuo=l(),uu=a("li"),aoe=a("strong"),Auo=o("data2vec-text"),Luo=o(" \u2014 "),e$=a("a"),Buo=o("Data2VecTextForCausalLM"),xuo=o(" (Data2VecText model)"),kuo=l(),bu=a("li"),noe=a("strong"),Ruo=o("electra"),Suo=o(" \u2014 "),o$=a("a"),Puo=o("ElectraForCausalLM"),$uo=o(" (ELECTRA model)"),Iuo=l(),vu=a("li"),soe=a("strong"),juo=o("gpt2"),Duo=o(" \u2014 "),r$=a("a"),Nuo=o("GPT2LMHeadModel"),quo=o(" (OpenAI GPT-2 model)"),Ouo=l(),Tu=a("li"),loe=a("strong"),Guo=o("gpt_neo"),Xuo=o(" \u2014 "),t$=a("a"),Vuo=o("GPTNeoForCausalLM"),zuo=o(" (GPT Neo model)"),Wuo=l(),Fu=a("li"),ioe=a("strong"),Quo=o("gptj"),Huo=o(" \u2014 "),a$=a("a"),Uuo=o("GPTJForCausalLM"),Juo=o(" (GPT-J model)"),Yuo=l(),Cu=a("li"),doe=a("strong"),Kuo=o("marian"),Zuo=o(" \u2014 "),n$=a("a"),e2o=o("MarianForCausalLM"),o2o=o(" (Marian model)"),r2o=l(),Mu=a("li"),coe=a("strong"),t2o=o("mbart"),a2o=o(" \u2014 "),s$=a("a"),n2o=o("MBartForCausalLM"),s2o=o(" (mBART model)"),l2o=l(),Eu=a("li"),foe=a("strong"),i2o=o("megatron-bert"),d2o=o(" \u2014 "),l$=a("a"),c2o=o("MegatronBertForCausalLM"),f2o=o(" (MegatronBert model)"),m2o=l(),yu=a("li"),moe=a("strong"),g2o=o("openai-gpt"),h2o=o(" \u2014 "),i$=a("a"),p2o=o("OpenAIGPTLMHeadModel"),_2o=o(" (OpenAI GPT model)"),u2o=l(),wu=a("li"),goe=a("strong"),b2o=o("pegasus"),v2o=o(" \u2014 "),d$=a("a"),T2o=o("PegasusForCausalLM"),F2o=o(" (Pegasus model)"),C2o=l(),Au=a("li"),hoe=a("strong"),M2o=o("plbart"),E2o=o(" \u2014 "),c$=a("a"),y2o=o("PLBartForCausalLM"),w2o=o(" (PLBart model)"),A2o=l(),Lu=a("li"),poe=a("strong"),L2o=o("prophetnet"),B2o=o(" \u2014 "),f$=a("a"),x2o=o("ProphetNetForCausalLM"),k2o=o(" (ProphetNet model)"),R2o=l(),Bu=a("li"),_oe=a("strong"),S2o=o("qdqbert"),P2o=o(" \u2014 "),m$=a("a"),$2o=o("QDQBertLMHeadModel"),I2o=o(" (QDQBert model)"),j2o=l(),xu=a("li"),uoe=a("strong"),D2o=o("reformer"),N2o=o(" \u2014 "),g$=a("a"),q2o=o("ReformerModelWithLMHead"),O2o=o(" (Reformer model)"),G2o=l(),ku=a("li"),boe=a("strong"),X2o=o("rembert"),V2o=o(" \u2014 "),h$=a("a"),z2o=o("RemBertForCausalLM"),W2o=o(" (RemBERT model)"),Q2o=l(),Ru=a("li"),voe=a("strong"),H2o=o("roberta"),U2o=o(" \u2014 "),p$=a("a"),J2o=o("RobertaForCausalLM"),Y2o=o(" (RoBERTa model)"),K2o=l(),Su=a("li"),Toe=a("strong"),Z2o=o("roformer"),e1o=o(" \u2014 "),_$=a("a"),o1o=o("RoFormerForCausalLM"),r1o=o(" (RoFormer model)"),t1o=l(),Pu=a("li"),Foe=a("strong"),a1o=o("speech_to_text_2"),n1o=o(" \u2014 "),u$=a("a"),s1o=o("Speech2Text2ForCausalLM"),l1o=o(" (Speech2Text2 model)"),i1o=l(),$u=a("li"),Coe=a("strong"),d1o=o("transfo-xl"),c1o=o(" \u2014 "),b$=a("a"),f1o=o("TransfoXLLMHeadModel"),m1o=o(" (Transformer-XL model)"),g1o=l(),Iu=a("li"),Moe=a("strong"),h1o=o("trocr"),p1o=o(" \u2014 "),v$=a("a"),_1o=o("TrOCRForCausalLM"),u1o=o(" (TrOCR model)"),b1o=l(),ju=a("li"),Eoe=a("strong"),v1o=o("xglm"),T1o=o(" \u2014 "),T$=a("a"),F1o=o("XGLMForCausalLM"),C1o=o(" (XGLM model)"),M1o=l(),Du=a("li"),yoe=a("strong"),E1o=o("xlm"),y1o=o(" \u2014 "),F$=a("a"),w1o=o("XLMWithLMHeadModel"),A1o=o(" (XLM model)"),L1o=l(),Nu=a("li"),woe=a("strong"),B1o=o("xlm-prophetnet"),x1o=o(" \u2014 "),C$=a("a"),k1o=o("XLMProphetNetForCausalLM"),R1o=o(" (XLMProphetNet model)"),S1o=l(),qu=a("li"),Aoe=a("strong"),P1o=o("xlm-roberta"),$1o=o(" \u2014 "),M$=a("a"),I1o=o("XLMRobertaForCausalLM"),j1o=o(" (XLM-RoBERTa model)"),D1o=l(),Ou=a("li"),Loe=a("strong"),N1o=o("xlm-roberta-xl"),q1o=o(" \u2014 "),E$=a("a"),O1o=o("XLMRobertaXLForCausalLM"),G1o=o(" (XLM-RoBERTa-XL model)"),X1o=l(),Gu=a("li"),Boe=a("strong"),V1o=o("xlnet"),z1o=o(" \u2014 "),y$=a("a"),W1o=o("XLNetLMHeadModel"),Q1o=o(" (XLNet model)"),H1o=l(),Xu=a("p"),U1o=o("The model is set in evaluation mode by default using "),xoe=a("code"),J1o=o("model.eval()"),Y1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),koe=a("code"),K1o=o("model.train()"),Z1o=l(),Roe=a("p"),ebo=o("Examples:"),obo=l(),f(JE.$$.fragment),jxe=l(),sd=a("h2"),Vu=a("a"),Soe=a("span"),f(YE.$$.fragment),rbo=l(),Poe=a("span"),tbo=o("AutoModelForMaskedLM"),Dxe=l(),Zo=a("div"),f(KE.$$.fragment),abo=l(),ld=a("p"),nbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$oe=a("code"),sbo=o("from_pretrained()"),lbo=o("class method or the "),Ioe=a("code"),ibo=o("from_config()"),dbo=o(`class
method.`),cbo=l(),ZE=a("p"),fbo=o("This class cannot be instantiated directly using "),joe=a("code"),mbo=o("__init__()"),gbo=o(" (throws an error)."),hbo=l(),Qr=a("div"),f(e3.$$.fragment),pbo=l(),Doe=a("p"),_bo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ubo=l(),id=a("p"),bbo=o(`Note:
Loading a model from its configuration file does `),Noe=a("strong"),vbo=o("not"),Tbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("code"),Fbo=o("from_pretrained()"),Cbo=o("to load the model weights."),Mbo=l(),Ooe=a("p"),Ebo=o("Examples:"),ybo=l(),f(o3.$$.fragment),wbo=l(),Oe=a("div"),f(r3.$$.fragment),Abo=l(),Goe=a("p"),Lbo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bbo=l(),Qa=a("p"),xbo=o("The model class to instantiate is selected based on the "),Xoe=a("code"),kbo=o("model_type"),Rbo=o(` property of the config object (either
passed as an argument or loaded from `),Voe=a("code"),Sbo=o("pretrained_model_name_or_path"),Pbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zoe=a("code"),$bo=o("pretrained_model_name_or_path"),Ibo=o(":"),jbo=l(),I=a("ul"),zu=a("li"),Woe=a("strong"),Dbo=o("albert"),Nbo=o(" \u2014 "),w$=a("a"),qbo=o("AlbertForMaskedLM"),Obo=o(" (ALBERT model)"),Gbo=l(),Wu=a("li"),Qoe=a("strong"),Xbo=o("bart"),Vbo=o(" \u2014 "),A$=a("a"),zbo=o("BartForConditionalGeneration"),Wbo=o(" (BART model)"),Qbo=l(),Qu=a("li"),Hoe=a("strong"),Hbo=o("bert"),Ubo=o(" \u2014 "),L$=a("a"),Jbo=o("BertForMaskedLM"),Ybo=o(" (BERT model)"),Kbo=l(),Hu=a("li"),Uoe=a("strong"),Zbo=o("big_bird"),evo=o(" \u2014 "),B$=a("a"),ovo=o("BigBirdForMaskedLM"),rvo=o(" (BigBird model)"),tvo=l(),Uu=a("li"),Joe=a("strong"),avo=o("camembert"),nvo=o(" \u2014 "),x$=a("a"),svo=o("CamembertForMaskedLM"),lvo=o(" (CamemBERT model)"),ivo=l(),Ju=a("li"),Yoe=a("strong"),dvo=o("convbert"),cvo=o(" \u2014 "),k$=a("a"),fvo=o("ConvBertForMaskedLM"),mvo=o(" (ConvBERT model)"),gvo=l(),Yu=a("li"),Koe=a("strong"),hvo=o("data2vec-text"),pvo=o(" \u2014 "),R$=a("a"),_vo=o("Data2VecTextForMaskedLM"),uvo=o(" (Data2VecText model)"),bvo=l(),Ku=a("li"),Zoe=a("strong"),vvo=o("deberta"),Tvo=o(" \u2014 "),S$=a("a"),Fvo=o("DebertaForMaskedLM"),Cvo=o(" (DeBERTa model)"),Mvo=l(),Zu=a("li"),ere=a("strong"),Evo=o("deberta-v2"),yvo=o(" \u2014 "),P$=a("a"),wvo=o("DebertaV2ForMaskedLM"),Avo=o(" (DeBERTa-v2 model)"),Lvo=l(),e2=a("li"),ore=a("strong"),Bvo=o("distilbert"),xvo=o(" \u2014 "),$$=a("a"),kvo=o("DistilBertForMaskedLM"),Rvo=o(" (DistilBERT model)"),Svo=l(),o2=a("li"),rre=a("strong"),Pvo=o("electra"),$vo=o(" \u2014 "),I$=a("a"),Ivo=o("ElectraForMaskedLM"),jvo=o(" (ELECTRA model)"),Dvo=l(),r2=a("li"),tre=a("strong"),Nvo=o("flaubert"),qvo=o(" \u2014 "),j$=a("a"),Ovo=o("FlaubertWithLMHeadModel"),Gvo=o(" (FlauBERT model)"),Xvo=l(),t2=a("li"),are=a("strong"),Vvo=o("fnet"),zvo=o(" \u2014 "),D$=a("a"),Wvo=o("FNetForMaskedLM"),Qvo=o(" (FNet model)"),Hvo=l(),a2=a("li"),nre=a("strong"),Uvo=o("funnel"),Jvo=o(" \u2014 "),N$=a("a"),Yvo=o("FunnelForMaskedLM"),Kvo=o(" (Funnel Transformer model)"),Zvo=l(),n2=a("li"),sre=a("strong"),e6o=o("ibert"),o6o=o(" \u2014 "),q$=a("a"),r6o=o("IBertForMaskedLM"),t6o=o(" (I-BERT model)"),a6o=l(),s2=a("li"),lre=a("strong"),n6o=o("layoutlm"),s6o=o(" \u2014 "),O$=a("a"),l6o=o("LayoutLMForMaskedLM"),i6o=o(" (LayoutLM model)"),d6o=l(),l2=a("li"),ire=a("strong"),c6o=o("longformer"),f6o=o(" \u2014 "),G$=a("a"),m6o=o("LongformerForMaskedLM"),g6o=o(" (Longformer model)"),h6o=l(),i2=a("li"),dre=a("strong"),p6o=o("mbart"),_6o=o(" \u2014 "),X$=a("a"),u6o=o("MBartForConditionalGeneration"),b6o=o(" (mBART model)"),v6o=l(),d2=a("li"),cre=a("strong"),T6o=o("megatron-bert"),F6o=o(" \u2014 "),V$=a("a"),C6o=o("MegatronBertForMaskedLM"),M6o=o(" (MegatronBert model)"),E6o=l(),c2=a("li"),fre=a("strong"),y6o=o("mobilebert"),w6o=o(" \u2014 "),z$=a("a"),A6o=o("MobileBertForMaskedLM"),L6o=o(" (MobileBERT model)"),B6o=l(),f2=a("li"),mre=a("strong"),x6o=o("mpnet"),k6o=o(" \u2014 "),W$=a("a"),R6o=o("MPNetForMaskedLM"),S6o=o(" (MPNet model)"),P6o=l(),m2=a("li"),gre=a("strong"),$6o=o("nystromformer"),I6o=o(" \u2014 "),Q$=a("a"),j6o=o("NystromformerForMaskedLM"),D6o=o(" (Nystromformer model)"),N6o=l(),g2=a("li"),hre=a("strong"),q6o=o("perceiver"),O6o=o(" \u2014 "),H$=a("a"),G6o=o("PerceiverForMaskedLM"),X6o=o(" (Perceiver model)"),V6o=l(),h2=a("li"),pre=a("strong"),z6o=o("qdqbert"),W6o=o(" \u2014 "),U$=a("a"),Q6o=o("QDQBertForMaskedLM"),H6o=o(" (QDQBert model)"),U6o=l(),p2=a("li"),_re=a("strong"),J6o=o("reformer"),Y6o=o(" \u2014 "),J$=a("a"),K6o=o("ReformerForMaskedLM"),Z6o=o(" (Reformer model)"),e0o=l(),_2=a("li"),ure=a("strong"),o0o=o("rembert"),r0o=o(" \u2014 "),Y$=a("a"),t0o=o("RemBertForMaskedLM"),a0o=o(" (RemBERT model)"),n0o=l(),u2=a("li"),bre=a("strong"),s0o=o("roberta"),l0o=o(" \u2014 "),K$=a("a"),i0o=o("RobertaForMaskedLM"),d0o=o(" (RoBERTa model)"),c0o=l(),b2=a("li"),vre=a("strong"),f0o=o("roformer"),m0o=o(" \u2014 "),Z$=a("a"),g0o=o("RoFormerForMaskedLM"),h0o=o(" (RoFormer model)"),p0o=l(),v2=a("li"),Tre=a("strong"),_0o=o("squeezebert"),u0o=o(" \u2014 "),eI=a("a"),b0o=o("SqueezeBertForMaskedLM"),v0o=o(" (SqueezeBERT model)"),T0o=l(),T2=a("li"),Fre=a("strong"),F0o=o("tapas"),C0o=o(" \u2014 "),oI=a("a"),M0o=o("TapasForMaskedLM"),E0o=o(" (TAPAS model)"),y0o=l(),F2=a("li"),Cre=a("strong"),w0o=o("wav2vec2"),A0o=o(" \u2014 "),Mre=a("code"),L0o=o("Wav2Vec2ForMaskedLM"),B0o=o("(Wav2Vec2 model)"),x0o=l(),C2=a("li"),Ere=a("strong"),k0o=o("xlm"),R0o=o(" \u2014 "),rI=a("a"),S0o=o("XLMWithLMHeadModel"),P0o=o(" (XLM model)"),$0o=l(),M2=a("li"),yre=a("strong"),I0o=o("xlm-roberta"),j0o=o(" \u2014 "),tI=a("a"),D0o=o("XLMRobertaForMaskedLM"),N0o=o(" (XLM-RoBERTa model)"),q0o=l(),E2=a("li"),wre=a("strong"),O0o=o("xlm-roberta-xl"),G0o=o(" \u2014 "),aI=a("a"),X0o=o("XLMRobertaXLForMaskedLM"),V0o=o(" (XLM-RoBERTa-XL model)"),z0o=l(),y2=a("li"),Are=a("strong"),W0o=o("yoso"),Q0o=o(" \u2014 "),nI=a("a"),H0o=o("YosoForMaskedLM"),U0o=o(" (YOSO model)"),J0o=l(),w2=a("p"),Y0o=o("The model is set in evaluation mode by default using "),Lre=a("code"),K0o=o("model.eval()"),Z0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bre=a("code"),eTo=o("model.train()"),oTo=l(),xre=a("p"),rTo=o("Examples:"),tTo=l(),f(t3.$$.fragment),Nxe=l(),dd=a("h2"),A2=a("a"),kre=a("span"),f(a3.$$.fragment),aTo=l(),Rre=a("span"),nTo=o("AutoModelForSeq2SeqLM"),qxe=l(),er=a("div"),f(n3.$$.fragment),sTo=l(),cd=a("p"),lTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Sre=a("code"),iTo=o("from_pretrained()"),dTo=o("class method or the "),Pre=a("code"),cTo=o("from_config()"),fTo=o(`class
method.`),mTo=l(),s3=a("p"),gTo=o("This class cannot be instantiated directly using "),$re=a("code"),hTo=o("__init__()"),pTo=o(" (throws an error)."),_To=l(),Hr=a("div"),f(l3.$$.fragment),uTo=l(),Ire=a("p"),bTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vTo=l(),fd=a("p"),TTo=o(`Note:
Loading a model from its configuration file does `),jre=a("strong"),FTo=o("not"),CTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=a("code"),MTo=o("from_pretrained()"),ETo=o("to load the model weights."),yTo=l(),Nre=a("p"),wTo=o("Examples:"),ATo=l(),f(i3.$$.fragment),LTo=l(),Ge=a("div"),f(d3.$$.fragment),BTo=l(),qre=a("p"),xTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kTo=l(),Ha=a("p"),RTo=o("The model class to instantiate is selected based on the "),Ore=a("code"),STo=o("model_type"),PTo=o(` property of the config object (either
passed as an argument or loaded from `),Gre=a("code"),$To=o("pretrained_model_name_or_path"),ITo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xre=a("code"),jTo=o("pretrained_model_name_or_path"),DTo=o(":"),NTo=l(),ne=a("ul"),L2=a("li"),Vre=a("strong"),qTo=o("bart"),OTo=o(" \u2014 "),sI=a("a"),GTo=o("BartForConditionalGeneration"),XTo=o(" (BART model)"),VTo=l(),B2=a("li"),zre=a("strong"),zTo=o("bigbird_pegasus"),WTo=o(" \u2014 "),lI=a("a"),QTo=o("BigBirdPegasusForConditionalGeneration"),HTo=o(" (BigBirdPegasus model)"),UTo=l(),x2=a("li"),Wre=a("strong"),JTo=o("blenderbot"),YTo=o(" \u2014 "),iI=a("a"),KTo=o("BlenderbotForConditionalGeneration"),ZTo=o(" (Blenderbot model)"),e7o=l(),k2=a("li"),Qre=a("strong"),o7o=o("blenderbot-small"),r7o=o(" \u2014 "),dI=a("a"),t7o=o("BlenderbotSmallForConditionalGeneration"),a7o=o(" (BlenderbotSmall model)"),n7o=l(),R2=a("li"),Hre=a("strong"),s7o=o("encoder-decoder"),l7o=o(" \u2014 "),cI=a("a"),i7o=o("EncoderDecoderModel"),d7o=o(" (Encoder decoder model)"),c7o=l(),S2=a("li"),Ure=a("strong"),f7o=o("fsmt"),m7o=o(" \u2014 "),fI=a("a"),g7o=o("FSMTForConditionalGeneration"),h7o=o(" (FairSeq Machine-Translation model)"),p7o=l(),P2=a("li"),Jre=a("strong"),_7o=o("led"),u7o=o(" \u2014 "),mI=a("a"),b7o=o("LEDForConditionalGeneration"),v7o=o(" (LED model)"),T7o=l(),$2=a("li"),Yre=a("strong"),F7o=o("m2m_100"),C7o=o(" \u2014 "),gI=a("a"),M7o=o("M2M100ForConditionalGeneration"),E7o=o(" (M2M100 model)"),y7o=l(),I2=a("li"),Kre=a("strong"),w7o=o("marian"),A7o=o(" \u2014 "),hI=a("a"),L7o=o("MarianMTModel"),B7o=o(" (Marian model)"),x7o=l(),j2=a("li"),Zre=a("strong"),k7o=o("mbart"),R7o=o(" \u2014 "),pI=a("a"),S7o=o("MBartForConditionalGeneration"),P7o=o(" (mBART model)"),$7o=l(),D2=a("li"),ete=a("strong"),I7o=o("mt5"),j7o=o(" \u2014 "),_I=a("a"),D7o=o("MT5ForConditionalGeneration"),N7o=o(" (mT5 model)"),q7o=l(),N2=a("li"),ote=a("strong"),O7o=o("pegasus"),G7o=o(" \u2014 "),uI=a("a"),X7o=o("PegasusForConditionalGeneration"),V7o=o(" (Pegasus model)"),z7o=l(),q2=a("li"),rte=a("strong"),W7o=o("plbart"),Q7o=o(" \u2014 "),bI=a("a"),H7o=o("PLBartForConditionalGeneration"),U7o=o(" (PLBart model)"),J7o=l(),O2=a("li"),tte=a("strong"),Y7o=o("prophetnet"),K7o=o(" \u2014 "),vI=a("a"),Z7o=o("ProphetNetForConditionalGeneration"),eFo=o(" (ProphetNet model)"),oFo=l(),G2=a("li"),ate=a("strong"),rFo=o("t5"),tFo=o(" \u2014 "),TI=a("a"),aFo=o("T5ForConditionalGeneration"),nFo=o(" (T5 model)"),sFo=l(),X2=a("li"),nte=a("strong"),lFo=o("xlm-prophetnet"),iFo=o(" \u2014 "),FI=a("a"),dFo=o("XLMProphetNetForConditionalGeneration"),cFo=o(" (XLMProphetNet model)"),fFo=l(),V2=a("p"),mFo=o("The model is set in evaluation mode by default using "),ste=a("code"),gFo=o("model.eval()"),hFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=a("code"),pFo=o("model.train()"),_Fo=l(),ite=a("p"),uFo=o("Examples:"),bFo=l(),f(c3.$$.fragment),Oxe=l(),md=a("h2"),z2=a("a"),dte=a("span"),f(f3.$$.fragment),vFo=l(),cte=a("span"),TFo=o("AutoModelForSequenceClassification"),Gxe=l(),or=a("div"),f(m3.$$.fragment),FFo=l(),gd=a("p"),CFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fte=a("code"),MFo=o("from_pretrained()"),EFo=o("class method or the "),mte=a("code"),yFo=o("from_config()"),wFo=o(`class
method.`),AFo=l(),g3=a("p"),LFo=o("This class cannot be instantiated directly using "),gte=a("code"),BFo=o("__init__()"),xFo=o(" (throws an error)."),kFo=l(),Ur=a("div"),f(h3.$$.fragment),RFo=l(),hte=a("p"),SFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PFo=l(),hd=a("p"),$Fo=o(`Note:
Loading a model from its configuration file does `),pte=a("strong"),IFo=o("not"),jFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=a("code"),DFo=o("from_pretrained()"),NFo=o("to load the model weights."),qFo=l(),ute=a("p"),OFo=o("Examples:"),GFo=l(),f(p3.$$.fragment),XFo=l(),Xe=a("div"),f(_3.$$.fragment),VFo=l(),bte=a("p"),zFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WFo=l(),Ua=a("p"),QFo=o("The model class to instantiate is selected based on the "),vte=a("code"),HFo=o("model_type"),UFo=o(` property of the config object (either
passed as an argument or loaded from `),Tte=a("code"),JFo=o("pretrained_model_name_or_path"),YFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=a("code"),KFo=o("pretrained_model_name_or_path"),ZFo=o(":"),eCo=l(),A=a("ul"),W2=a("li"),Cte=a("strong"),oCo=o("albert"),rCo=o(" \u2014 "),CI=a("a"),tCo=o("AlbertForSequenceClassification"),aCo=o(" (ALBERT model)"),nCo=l(),Q2=a("li"),Mte=a("strong"),sCo=o("bart"),lCo=o(" \u2014 "),MI=a("a"),iCo=o("BartForSequenceClassification"),dCo=o(" (BART model)"),cCo=l(),H2=a("li"),Ete=a("strong"),fCo=o("bert"),mCo=o(" \u2014 "),EI=a("a"),gCo=o("BertForSequenceClassification"),hCo=o(" (BERT model)"),pCo=l(),U2=a("li"),yte=a("strong"),_Co=o("big_bird"),uCo=o(" \u2014 "),yI=a("a"),bCo=o("BigBirdForSequenceClassification"),vCo=o(" (BigBird model)"),TCo=l(),J2=a("li"),wte=a("strong"),FCo=o("bigbird_pegasus"),CCo=o(" \u2014 "),wI=a("a"),MCo=o("BigBirdPegasusForSequenceClassification"),ECo=o(" (BigBirdPegasus model)"),yCo=l(),Y2=a("li"),Ate=a("strong"),wCo=o("camembert"),ACo=o(" \u2014 "),AI=a("a"),LCo=o("CamembertForSequenceClassification"),BCo=o(" (CamemBERT model)"),xCo=l(),K2=a("li"),Lte=a("strong"),kCo=o("canine"),RCo=o(" \u2014 "),LI=a("a"),SCo=o("CanineForSequenceClassification"),PCo=o(" (Canine model)"),$Co=l(),Z2=a("li"),Bte=a("strong"),ICo=o("convbert"),jCo=o(" \u2014 "),BI=a("a"),DCo=o("ConvBertForSequenceClassification"),NCo=o(" (ConvBERT model)"),qCo=l(),e1=a("li"),xte=a("strong"),OCo=o("ctrl"),GCo=o(" \u2014 "),xI=a("a"),XCo=o("CTRLForSequenceClassification"),VCo=o(" (CTRL model)"),zCo=l(),o1=a("li"),kte=a("strong"),WCo=o("data2vec-text"),QCo=o(" \u2014 "),kI=a("a"),HCo=o("Data2VecTextForSequenceClassification"),UCo=o(" (Data2VecText model)"),JCo=l(),r1=a("li"),Rte=a("strong"),YCo=o("deberta"),KCo=o(" \u2014 "),RI=a("a"),ZCo=o("DebertaForSequenceClassification"),eMo=o(" (DeBERTa model)"),oMo=l(),t1=a("li"),Ste=a("strong"),rMo=o("deberta-v2"),tMo=o(" \u2014 "),SI=a("a"),aMo=o("DebertaV2ForSequenceClassification"),nMo=o(" (DeBERTa-v2 model)"),sMo=l(),a1=a("li"),Pte=a("strong"),lMo=o("distilbert"),iMo=o(" \u2014 "),PI=a("a"),dMo=o("DistilBertForSequenceClassification"),cMo=o(" (DistilBERT model)"),fMo=l(),n1=a("li"),$te=a("strong"),mMo=o("electra"),gMo=o(" \u2014 "),$I=a("a"),hMo=o("ElectraForSequenceClassification"),pMo=o(" (ELECTRA model)"),_Mo=l(),s1=a("li"),Ite=a("strong"),uMo=o("flaubert"),bMo=o(" \u2014 "),II=a("a"),vMo=o("FlaubertForSequenceClassification"),TMo=o(" (FlauBERT model)"),FMo=l(),l1=a("li"),jte=a("strong"),CMo=o("fnet"),MMo=o(" \u2014 "),jI=a("a"),EMo=o("FNetForSequenceClassification"),yMo=o(" (FNet model)"),wMo=l(),i1=a("li"),Dte=a("strong"),AMo=o("funnel"),LMo=o(" \u2014 "),DI=a("a"),BMo=o("FunnelForSequenceClassification"),xMo=o(" (Funnel Transformer model)"),kMo=l(),d1=a("li"),Nte=a("strong"),RMo=o("gpt2"),SMo=o(" \u2014 "),NI=a("a"),PMo=o("GPT2ForSequenceClassification"),$Mo=o(" (OpenAI GPT-2 model)"),IMo=l(),c1=a("li"),qte=a("strong"),jMo=o("gpt_neo"),DMo=o(" \u2014 "),qI=a("a"),NMo=o("GPTNeoForSequenceClassification"),qMo=o(" (GPT Neo model)"),OMo=l(),f1=a("li"),Ote=a("strong"),GMo=o("gptj"),XMo=o(" \u2014 "),OI=a("a"),VMo=o("GPTJForSequenceClassification"),zMo=o(" (GPT-J model)"),WMo=l(),m1=a("li"),Gte=a("strong"),QMo=o("ibert"),HMo=o(" \u2014 "),GI=a("a"),UMo=o("IBertForSequenceClassification"),JMo=o(" (I-BERT model)"),YMo=l(),g1=a("li"),Xte=a("strong"),KMo=o("layoutlm"),ZMo=o(" \u2014 "),XI=a("a"),e4o=o("LayoutLMForSequenceClassification"),o4o=o(" (LayoutLM model)"),r4o=l(),h1=a("li"),Vte=a("strong"),t4o=o("layoutlmv2"),a4o=o(" \u2014 "),VI=a("a"),n4o=o("LayoutLMv2ForSequenceClassification"),s4o=o(" (LayoutLMv2 model)"),l4o=l(),p1=a("li"),zte=a("strong"),i4o=o("led"),d4o=o(" \u2014 "),zI=a("a"),c4o=o("LEDForSequenceClassification"),f4o=o(" (LED model)"),m4o=l(),_1=a("li"),Wte=a("strong"),g4o=o("longformer"),h4o=o(" \u2014 "),WI=a("a"),p4o=o("LongformerForSequenceClassification"),_4o=o(" (Longformer model)"),u4o=l(),u1=a("li"),Qte=a("strong"),b4o=o("mbart"),v4o=o(" \u2014 "),QI=a("a"),T4o=o("MBartForSequenceClassification"),F4o=o(" (mBART model)"),C4o=l(),b1=a("li"),Hte=a("strong"),M4o=o("megatron-bert"),E4o=o(" \u2014 "),HI=a("a"),y4o=o("MegatronBertForSequenceClassification"),w4o=o(" (MegatronBert model)"),A4o=l(),v1=a("li"),Ute=a("strong"),L4o=o("mobilebert"),B4o=o(" \u2014 "),UI=a("a"),x4o=o("MobileBertForSequenceClassification"),k4o=o(" (MobileBERT model)"),R4o=l(),T1=a("li"),Jte=a("strong"),S4o=o("mpnet"),P4o=o(" \u2014 "),JI=a("a"),$4o=o("MPNetForSequenceClassification"),I4o=o(" (MPNet model)"),j4o=l(),F1=a("li"),Yte=a("strong"),D4o=o("nystromformer"),N4o=o(" \u2014 "),YI=a("a"),q4o=o("NystromformerForSequenceClassification"),O4o=o(" (Nystromformer model)"),G4o=l(),C1=a("li"),Kte=a("strong"),X4o=o("openai-gpt"),V4o=o(" \u2014 "),KI=a("a"),z4o=o("OpenAIGPTForSequenceClassification"),W4o=o(" (OpenAI GPT model)"),Q4o=l(),M1=a("li"),Zte=a("strong"),H4o=o("perceiver"),U4o=o(" \u2014 "),ZI=a("a"),J4o=o("PerceiverForSequenceClassification"),Y4o=o(" (Perceiver model)"),K4o=l(),E1=a("li"),eae=a("strong"),Z4o=o("plbart"),eEo=o(" \u2014 "),ej=a("a"),oEo=o("PLBartForSequenceClassification"),rEo=o(" (PLBart model)"),tEo=l(),y1=a("li"),oae=a("strong"),aEo=o("qdqbert"),nEo=o(" \u2014 "),oj=a("a"),sEo=o("QDQBertForSequenceClassification"),lEo=o(" (QDQBert model)"),iEo=l(),w1=a("li"),rae=a("strong"),dEo=o("reformer"),cEo=o(" \u2014 "),rj=a("a"),fEo=o("ReformerForSequenceClassification"),mEo=o(" (Reformer model)"),gEo=l(),A1=a("li"),tae=a("strong"),hEo=o("rembert"),pEo=o(" \u2014 "),tj=a("a"),_Eo=o("RemBertForSequenceClassification"),uEo=o(" (RemBERT model)"),bEo=l(),L1=a("li"),aae=a("strong"),vEo=o("roberta"),TEo=o(" \u2014 "),aj=a("a"),FEo=o("RobertaForSequenceClassification"),CEo=o(" (RoBERTa model)"),MEo=l(),B1=a("li"),nae=a("strong"),EEo=o("roformer"),yEo=o(" \u2014 "),nj=a("a"),wEo=o("RoFormerForSequenceClassification"),AEo=o(" (RoFormer model)"),LEo=l(),x1=a("li"),sae=a("strong"),BEo=o("squeezebert"),xEo=o(" \u2014 "),sj=a("a"),kEo=o("SqueezeBertForSequenceClassification"),REo=o(" (SqueezeBERT model)"),SEo=l(),k1=a("li"),lae=a("strong"),PEo=o("tapas"),$Eo=o(" \u2014 "),lj=a("a"),IEo=o("TapasForSequenceClassification"),jEo=o(" (TAPAS model)"),DEo=l(),R1=a("li"),iae=a("strong"),NEo=o("transfo-xl"),qEo=o(" \u2014 "),ij=a("a"),OEo=o("TransfoXLForSequenceClassification"),GEo=o(" (Transformer-XL model)"),XEo=l(),S1=a("li"),dae=a("strong"),VEo=o("xlm"),zEo=o(" \u2014 "),dj=a("a"),WEo=o("XLMForSequenceClassification"),QEo=o(" (XLM model)"),HEo=l(),P1=a("li"),cae=a("strong"),UEo=o("xlm-roberta"),JEo=o(" \u2014 "),cj=a("a"),YEo=o("XLMRobertaForSequenceClassification"),KEo=o(" (XLM-RoBERTa model)"),ZEo=l(),$1=a("li"),fae=a("strong"),e3o=o("xlm-roberta-xl"),o3o=o(" \u2014 "),fj=a("a"),r3o=o("XLMRobertaXLForSequenceClassification"),t3o=o(" (XLM-RoBERTa-XL model)"),a3o=l(),I1=a("li"),mae=a("strong"),n3o=o("xlnet"),s3o=o(" \u2014 "),mj=a("a"),l3o=o("XLNetForSequenceClassification"),i3o=o(" (XLNet model)"),d3o=l(),j1=a("li"),gae=a("strong"),c3o=o("yoso"),f3o=o(" \u2014 "),gj=a("a"),m3o=o("YosoForSequenceClassification"),g3o=o(" (YOSO model)"),h3o=l(),D1=a("p"),p3o=o("The model is set in evaluation mode by default using "),hae=a("code"),_3o=o("model.eval()"),u3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pae=a("code"),b3o=o("model.train()"),v3o=l(),_ae=a("p"),T3o=o("Examples:"),F3o=l(),f(u3.$$.fragment),Xxe=l(),pd=a("h2"),N1=a("a"),uae=a("span"),f(b3.$$.fragment),C3o=l(),bae=a("span"),M3o=o("AutoModelForMultipleChoice"),Vxe=l(),rr=a("div"),f(v3.$$.fragment),E3o=l(),_d=a("p"),y3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=a("code"),w3o=o("from_pretrained()"),A3o=o("class method or the "),Tae=a("code"),L3o=o("from_config()"),B3o=o(`class
method.`),x3o=l(),T3=a("p"),k3o=o("This class cannot be instantiated directly using "),Fae=a("code"),R3o=o("__init__()"),S3o=o(" (throws an error)."),P3o=l(),Jr=a("div"),f(F3.$$.fragment),$3o=l(),Cae=a("p"),I3o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j3o=l(),ud=a("p"),D3o=o(`Note:
Loading a model from its configuration file does `),Mae=a("strong"),N3o=o("not"),q3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=a("code"),O3o=o("from_pretrained()"),G3o=o("to load the model weights."),X3o=l(),yae=a("p"),V3o=o("Examples:"),z3o=l(),f(C3.$$.fragment),W3o=l(),Ve=a("div"),f(M3.$$.fragment),Q3o=l(),wae=a("p"),H3o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U3o=l(),Ja=a("p"),J3o=o("The model class to instantiate is selected based on the "),Aae=a("code"),Y3o=o("model_type"),K3o=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Z3o=o("pretrained_model_name_or_path"),e5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=a("code"),o5o=o("pretrained_model_name_or_path"),r5o=o(":"),t5o=l(),O=a("ul"),q1=a("li"),xae=a("strong"),a5o=o("albert"),n5o=o(" \u2014 "),hj=a("a"),s5o=o("AlbertForMultipleChoice"),l5o=o(" (ALBERT model)"),i5o=l(),O1=a("li"),kae=a("strong"),d5o=o("bert"),c5o=o(" \u2014 "),pj=a("a"),f5o=o("BertForMultipleChoice"),m5o=o(" (BERT model)"),g5o=l(),G1=a("li"),Rae=a("strong"),h5o=o("big_bird"),p5o=o(" \u2014 "),_j=a("a"),_5o=o("BigBirdForMultipleChoice"),u5o=o(" (BigBird model)"),b5o=l(),X1=a("li"),Sae=a("strong"),v5o=o("camembert"),T5o=o(" \u2014 "),uj=a("a"),F5o=o("CamembertForMultipleChoice"),C5o=o(" (CamemBERT model)"),M5o=l(),V1=a("li"),Pae=a("strong"),E5o=o("canine"),y5o=o(" \u2014 "),bj=a("a"),w5o=o("CanineForMultipleChoice"),A5o=o(" (Canine model)"),L5o=l(),z1=a("li"),$ae=a("strong"),B5o=o("convbert"),x5o=o(" \u2014 "),vj=a("a"),k5o=o("ConvBertForMultipleChoice"),R5o=o(" (ConvBERT model)"),S5o=l(),W1=a("li"),Iae=a("strong"),P5o=o("data2vec-text"),$5o=o(" \u2014 "),Tj=a("a"),I5o=o("Data2VecTextForMultipleChoice"),j5o=o(" (Data2VecText model)"),D5o=l(),Q1=a("li"),jae=a("strong"),N5o=o("distilbert"),q5o=o(" \u2014 "),Fj=a("a"),O5o=o("DistilBertForMultipleChoice"),G5o=o(" (DistilBERT model)"),X5o=l(),H1=a("li"),Dae=a("strong"),V5o=o("electra"),z5o=o(" \u2014 "),Cj=a("a"),W5o=o("ElectraForMultipleChoice"),Q5o=o(" (ELECTRA model)"),H5o=l(),U1=a("li"),Nae=a("strong"),U5o=o("flaubert"),J5o=o(" \u2014 "),Mj=a("a"),Y5o=o("FlaubertForMultipleChoice"),K5o=o(" (FlauBERT model)"),Z5o=l(),J1=a("li"),qae=a("strong"),eyo=o("fnet"),oyo=o(" \u2014 "),Ej=a("a"),ryo=o("FNetForMultipleChoice"),tyo=o(" (FNet model)"),ayo=l(),Y1=a("li"),Oae=a("strong"),nyo=o("funnel"),syo=o(" \u2014 "),yj=a("a"),lyo=o("FunnelForMultipleChoice"),iyo=o(" (Funnel Transformer model)"),dyo=l(),K1=a("li"),Gae=a("strong"),cyo=o("ibert"),fyo=o(" \u2014 "),wj=a("a"),myo=o("IBertForMultipleChoice"),gyo=o(" (I-BERT model)"),hyo=l(),Z1=a("li"),Xae=a("strong"),pyo=o("longformer"),_yo=o(" \u2014 "),Aj=a("a"),uyo=o("LongformerForMultipleChoice"),byo=o(" (Longformer model)"),vyo=l(),eb=a("li"),Vae=a("strong"),Tyo=o("megatron-bert"),Fyo=o(" \u2014 "),Lj=a("a"),Cyo=o("MegatronBertForMultipleChoice"),Myo=o(" (MegatronBert model)"),Eyo=l(),ob=a("li"),zae=a("strong"),yyo=o("mobilebert"),wyo=o(" \u2014 "),Bj=a("a"),Ayo=o("MobileBertForMultipleChoice"),Lyo=o(" (MobileBERT model)"),Byo=l(),rb=a("li"),Wae=a("strong"),xyo=o("mpnet"),kyo=o(" \u2014 "),xj=a("a"),Ryo=o("MPNetForMultipleChoice"),Syo=o(" (MPNet model)"),Pyo=l(),tb=a("li"),Qae=a("strong"),$yo=o("nystromformer"),Iyo=o(" \u2014 "),kj=a("a"),jyo=o("NystromformerForMultipleChoice"),Dyo=o(" (Nystromformer model)"),Nyo=l(),ab=a("li"),Hae=a("strong"),qyo=o("qdqbert"),Oyo=o(" \u2014 "),Rj=a("a"),Gyo=o("QDQBertForMultipleChoice"),Xyo=o(" (QDQBert model)"),Vyo=l(),nb=a("li"),Uae=a("strong"),zyo=o("rembert"),Wyo=o(" \u2014 "),Sj=a("a"),Qyo=o("RemBertForMultipleChoice"),Hyo=o(" (RemBERT model)"),Uyo=l(),sb=a("li"),Jae=a("strong"),Jyo=o("roberta"),Yyo=o(" \u2014 "),Pj=a("a"),Kyo=o("RobertaForMultipleChoice"),Zyo=o(" (RoBERTa model)"),ewo=l(),lb=a("li"),Yae=a("strong"),owo=o("roformer"),rwo=o(" \u2014 "),$j=a("a"),two=o("RoFormerForMultipleChoice"),awo=o(" (RoFormer model)"),nwo=l(),ib=a("li"),Kae=a("strong"),swo=o("squeezebert"),lwo=o(" \u2014 "),Ij=a("a"),iwo=o("SqueezeBertForMultipleChoice"),dwo=o(" (SqueezeBERT model)"),cwo=l(),db=a("li"),Zae=a("strong"),fwo=o("xlm"),mwo=o(" \u2014 "),jj=a("a"),gwo=o("XLMForMultipleChoice"),hwo=o(" (XLM model)"),pwo=l(),cb=a("li"),ene=a("strong"),_wo=o("xlm-roberta"),uwo=o(" \u2014 "),Dj=a("a"),bwo=o("XLMRobertaForMultipleChoice"),vwo=o(" (XLM-RoBERTa model)"),Two=l(),fb=a("li"),one=a("strong"),Fwo=o("xlm-roberta-xl"),Cwo=o(" \u2014 "),Nj=a("a"),Mwo=o("XLMRobertaXLForMultipleChoice"),Ewo=o(" (XLM-RoBERTa-XL model)"),ywo=l(),mb=a("li"),rne=a("strong"),wwo=o("xlnet"),Awo=o(" \u2014 "),qj=a("a"),Lwo=o("XLNetForMultipleChoice"),Bwo=o(" (XLNet model)"),xwo=l(),gb=a("li"),tne=a("strong"),kwo=o("yoso"),Rwo=o(" \u2014 "),Oj=a("a"),Swo=o("YosoForMultipleChoice"),Pwo=o(" (YOSO model)"),$wo=l(),hb=a("p"),Iwo=o("The model is set in evaluation mode by default using "),ane=a("code"),jwo=o("model.eval()"),Dwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=a("code"),Nwo=o("model.train()"),qwo=l(),sne=a("p"),Owo=o("Examples:"),Gwo=l(),f(E3.$$.fragment),zxe=l(),bd=a("h2"),pb=a("a"),lne=a("span"),f(y3.$$.fragment),Xwo=l(),ine=a("span"),Vwo=o("AutoModelForNextSentencePrediction"),Wxe=l(),tr=a("div"),f(w3.$$.fragment),zwo=l(),vd=a("p"),Wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dne=a("code"),Qwo=o("from_pretrained()"),Hwo=o("class method or the "),cne=a("code"),Uwo=o("from_config()"),Jwo=o(`class
method.`),Ywo=l(),A3=a("p"),Kwo=o("This class cannot be instantiated directly using "),fne=a("code"),Zwo=o("__init__()"),eAo=o(" (throws an error)."),oAo=l(),Yr=a("div"),f(L3.$$.fragment),rAo=l(),mne=a("p"),tAo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aAo=l(),Td=a("p"),nAo=o(`Note:
Loading a model from its configuration file does `),gne=a("strong"),sAo=o("not"),lAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=a("code"),iAo=o("from_pretrained()"),dAo=o("to load the model weights."),cAo=l(),pne=a("p"),fAo=o("Examples:"),mAo=l(),f(B3.$$.fragment),gAo=l(),ze=a("div"),f(x3.$$.fragment),hAo=l(),_ne=a("p"),pAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Ao=l(),Ya=a("p"),uAo=o("The model class to instantiate is selected based on the "),une=a("code"),bAo=o("model_type"),vAo=o(` property of the config object (either
passed as an argument or loaded from `),bne=a("code"),TAo=o("pretrained_model_name_or_path"),FAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=a("code"),CAo=o("pretrained_model_name_or_path"),MAo=o(":"),EAo=l(),da=a("ul"),_b=a("li"),Tne=a("strong"),yAo=o("bert"),wAo=o(" \u2014 "),Gj=a("a"),AAo=o("BertForNextSentencePrediction"),LAo=o(" (BERT model)"),BAo=l(),ub=a("li"),Fne=a("strong"),xAo=o("fnet"),kAo=o(" \u2014 "),Xj=a("a"),RAo=o("FNetForNextSentencePrediction"),SAo=o(" (FNet model)"),PAo=l(),bb=a("li"),Cne=a("strong"),$Ao=o("megatron-bert"),IAo=o(" \u2014 "),Vj=a("a"),jAo=o("MegatronBertForNextSentencePrediction"),DAo=o(" (MegatronBert model)"),NAo=l(),vb=a("li"),Mne=a("strong"),qAo=o("mobilebert"),OAo=o(" \u2014 "),zj=a("a"),GAo=o("MobileBertForNextSentencePrediction"),XAo=o(" (MobileBERT model)"),VAo=l(),Tb=a("li"),Ene=a("strong"),zAo=o("qdqbert"),WAo=o(" \u2014 "),Wj=a("a"),QAo=o("QDQBertForNextSentencePrediction"),HAo=o(" (QDQBert model)"),UAo=l(),Fb=a("p"),JAo=o("The model is set in evaluation mode by default using "),yne=a("code"),YAo=o("model.eval()"),KAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wne=a("code"),ZAo=o("model.train()"),eLo=l(),Ane=a("p"),oLo=o("Examples:"),rLo=l(),f(k3.$$.fragment),Qxe=l(),Fd=a("h2"),Cb=a("a"),Lne=a("span"),f(R3.$$.fragment),tLo=l(),Bne=a("span"),aLo=o("AutoModelForTokenClassification"),Hxe=l(),ar=a("div"),f(S3.$$.fragment),nLo=l(),Cd=a("p"),sLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xne=a("code"),lLo=o("from_pretrained()"),iLo=o("class method or the "),kne=a("code"),dLo=o("from_config()"),cLo=o(`class
method.`),fLo=l(),P3=a("p"),mLo=o("This class cannot be instantiated directly using "),Rne=a("code"),gLo=o("__init__()"),hLo=o(" (throws an error)."),pLo=l(),Kr=a("div"),f($3.$$.fragment),_Lo=l(),Sne=a("p"),uLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bLo=l(),Md=a("p"),vLo=o(`Note:
Loading a model from its configuration file does `),Pne=a("strong"),TLo=o("not"),FLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=a("code"),CLo=o("from_pretrained()"),MLo=o("to load the model weights."),ELo=l(),Ine=a("p"),yLo=o("Examples:"),wLo=l(),f(I3.$$.fragment),ALo=l(),We=a("div"),f(j3.$$.fragment),LLo=l(),jne=a("p"),BLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xLo=l(),Ka=a("p"),kLo=o("The model class to instantiate is selected based on the "),Dne=a("code"),RLo=o("model_type"),SLo=o(` property of the config object (either
passed as an argument or loaded from `),Nne=a("code"),PLo=o("pretrained_model_name_or_path"),$Lo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=a("code"),ILo=o("pretrained_model_name_or_path"),jLo=o(":"),DLo=l(),N=a("ul"),Mb=a("li"),One=a("strong"),NLo=o("albert"),qLo=o(" \u2014 "),Qj=a("a"),OLo=o("AlbertForTokenClassification"),GLo=o(" (ALBERT model)"),XLo=l(),Eb=a("li"),Gne=a("strong"),VLo=o("bert"),zLo=o(" \u2014 "),Hj=a("a"),WLo=o("BertForTokenClassification"),QLo=o(" (BERT model)"),HLo=l(),yb=a("li"),Xne=a("strong"),ULo=o("big_bird"),JLo=o(" \u2014 "),Uj=a("a"),YLo=o("BigBirdForTokenClassification"),KLo=o(" (BigBird model)"),ZLo=l(),wb=a("li"),Vne=a("strong"),e8o=o("camembert"),o8o=o(" \u2014 "),Jj=a("a"),r8o=o("CamembertForTokenClassification"),t8o=o(" (CamemBERT model)"),a8o=l(),Ab=a("li"),zne=a("strong"),n8o=o("canine"),s8o=o(" \u2014 "),Yj=a("a"),l8o=o("CanineForTokenClassification"),i8o=o(" (Canine model)"),d8o=l(),Lb=a("li"),Wne=a("strong"),c8o=o("convbert"),f8o=o(" \u2014 "),Kj=a("a"),m8o=o("ConvBertForTokenClassification"),g8o=o(" (ConvBERT model)"),h8o=l(),Bb=a("li"),Qne=a("strong"),p8o=o("data2vec-text"),_8o=o(" \u2014 "),Zj=a("a"),u8o=o("Data2VecTextForTokenClassification"),b8o=o(" (Data2VecText model)"),v8o=l(),xb=a("li"),Hne=a("strong"),T8o=o("deberta"),F8o=o(" \u2014 "),eD=a("a"),C8o=o("DebertaForTokenClassification"),M8o=o(" (DeBERTa model)"),E8o=l(),kb=a("li"),Une=a("strong"),y8o=o("deberta-v2"),w8o=o(" \u2014 "),oD=a("a"),A8o=o("DebertaV2ForTokenClassification"),L8o=o(" (DeBERTa-v2 model)"),B8o=l(),Rb=a("li"),Jne=a("strong"),x8o=o("distilbert"),k8o=o(" \u2014 "),rD=a("a"),R8o=o("DistilBertForTokenClassification"),S8o=o(" (DistilBERT model)"),P8o=l(),Sb=a("li"),Yne=a("strong"),$8o=o("electra"),I8o=o(" \u2014 "),tD=a("a"),j8o=o("ElectraForTokenClassification"),D8o=o(" (ELECTRA model)"),N8o=l(),Pb=a("li"),Kne=a("strong"),q8o=o("flaubert"),O8o=o(" \u2014 "),aD=a("a"),G8o=o("FlaubertForTokenClassification"),X8o=o(" (FlauBERT model)"),V8o=l(),$b=a("li"),Zne=a("strong"),z8o=o("fnet"),W8o=o(" \u2014 "),nD=a("a"),Q8o=o("FNetForTokenClassification"),H8o=o(" (FNet model)"),U8o=l(),Ib=a("li"),ese=a("strong"),J8o=o("funnel"),Y8o=o(" \u2014 "),sD=a("a"),K8o=o("FunnelForTokenClassification"),Z8o=o(" (Funnel Transformer model)"),e9o=l(),jb=a("li"),ose=a("strong"),o9o=o("gpt2"),r9o=o(" \u2014 "),lD=a("a"),t9o=o("GPT2ForTokenClassification"),a9o=o(" (OpenAI GPT-2 model)"),n9o=l(),Db=a("li"),rse=a("strong"),s9o=o("ibert"),l9o=o(" \u2014 "),iD=a("a"),i9o=o("IBertForTokenClassification"),d9o=o(" (I-BERT model)"),c9o=l(),Nb=a("li"),tse=a("strong"),f9o=o("layoutlm"),m9o=o(" \u2014 "),dD=a("a"),g9o=o("LayoutLMForTokenClassification"),h9o=o(" (LayoutLM model)"),p9o=l(),qb=a("li"),ase=a("strong"),_9o=o("layoutlmv2"),u9o=o(" \u2014 "),cD=a("a"),b9o=o("LayoutLMv2ForTokenClassification"),v9o=o(" (LayoutLMv2 model)"),T9o=l(),Ob=a("li"),nse=a("strong"),F9o=o("longformer"),C9o=o(" \u2014 "),fD=a("a"),M9o=o("LongformerForTokenClassification"),E9o=o(" (Longformer model)"),y9o=l(),Gb=a("li"),sse=a("strong"),w9o=o("megatron-bert"),A9o=o(" \u2014 "),mD=a("a"),L9o=o("MegatronBertForTokenClassification"),B9o=o(" (MegatronBert model)"),x9o=l(),Xb=a("li"),lse=a("strong"),k9o=o("mobilebert"),R9o=o(" \u2014 "),gD=a("a"),S9o=o("MobileBertForTokenClassification"),P9o=o(" (MobileBERT model)"),$9o=l(),Vb=a("li"),ise=a("strong"),I9o=o("mpnet"),j9o=o(" \u2014 "),hD=a("a"),D9o=o("MPNetForTokenClassification"),N9o=o(" (MPNet model)"),q9o=l(),zb=a("li"),dse=a("strong"),O9o=o("nystromformer"),G9o=o(" \u2014 "),pD=a("a"),X9o=o("NystromformerForTokenClassification"),V9o=o(" (Nystromformer model)"),z9o=l(),Wb=a("li"),cse=a("strong"),W9o=o("qdqbert"),Q9o=o(" \u2014 "),_D=a("a"),H9o=o("QDQBertForTokenClassification"),U9o=o(" (QDQBert model)"),J9o=l(),Qb=a("li"),fse=a("strong"),Y9o=o("rembert"),K9o=o(" \u2014 "),uD=a("a"),Z9o=o("RemBertForTokenClassification"),eBo=o(" (RemBERT model)"),oBo=l(),Hb=a("li"),mse=a("strong"),rBo=o("roberta"),tBo=o(" \u2014 "),bD=a("a"),aBo=o("RobertaForTokenClassification"),nBo=o(" (RoBERTa model)"),sBo=l(),Ub=a("li"),gse=a("strong"),lBo=o("roformer"),iBo=o(" \u2014 "),vD=a("a"),dBo=o("RoFormerForTokenClassification"),cBo=o(" (RoFormer model)"),fBo=l(),Jb=a("li"),hse=a("strong"),mBo=o("squeezebert"),gBo=o(" \u2014 "),TD=a("a"),hBo=o("SqueezeBertForTokenClassification"),pBo=o(" (SqueezeBERT model)"),_Bo=l(),Yb=a("li"),pse=a("strong"),uBo=o("xlm"),bBo=o(" \u2014 "),FD=a("a"),vBo=o("XLMForTokenClassification"),TBo=o(" (XLM model)"),FBo=l(),Kb=a("li"),_se=a("strong"),CBo=o("xlm-roberta"),MBo=o(" \u2014 "),CD=a("a"),EBo=o("XLMRobertaForTokenClassification"),yBo=o(" (XLM-RoBERTa model)"),wBo=l(),Zb=a("li"),use=a("strong"),ABo=o("xlm-roberta-xl"),LBo=o(" \u2014 "),MD=a("a"),BBo=o("XLMRobertaXLForTokenClassification"),xBo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),ev=a("li"),bse=a("strong"),RBo=o("xlnet"),SBo=o(" \u2014 "),ED=a("a"),PBo=o("XLNetForTokenClassification"),$Bo=o(" (XLNet model)"),IBo=l(),ov=a("li"),vse=a("strong"),jBo=o("yoso"),DBo=o(" \u2014 "),yD=a("a"),NBo=o("YosoForTokenClassification"),qBo=o(" (YOSO model)"),OBo=l(),rv=a("p"),GBo=o("The model is set in evaluation mode by default using "),Tse=a("code"),XBo=o("model.eval()"),VBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=a("code"),zBo=o("model.train()"),WBo=l(),Cse=a("p"),QBo=o("Examples:"),HBo=l(),f(D3.$$.fragment),Uxe=l(),Ed=a("h2"),tv=a("a"),Mse=a("span"),f(N3.$$.fragment),UBo=l(),Ese=a("span"),JBo=o("AutoModelForQuestionAnswering"),Jxe=l(),nr=a("div"),f(q3.$$.fragment),YBo=l(),yd=a("p"),KBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yse=a("code"),ZBo=o("from_pretrained()"),exo=o("class method or the "),wse=a("code"),oxo=o("from_config()"),rxo=o(`class
method.`),txo=l(),O3=a("p"),axo=o("This class cannot be instantiated directly using "),Ase=a("code"),nxo=o("__init__()"),sxo=o(" (throws an error)."),lxo=l(),Zr=a("div"),f(G3.$$.fragment),ixo=l(),Lse=a("p"),dxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cxo=l(),wd=a("p"),fxo=o(`Note:
Loading a model from its configuration file does `),Bse=a("strong"),mxo=o("not"),gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=a("code"),hxo=o("from_pretrained()"),pxo=o("to load the model weights."),_xo=l(),kse=a("p"),uxo=o("Examples:"),bxo=l(),f(X3.$$.fragment),vxo=l(),Qe=a("div"),f(V3.$$.fragment),Txo=l(),Rse=a("p"),Fxo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cxo=l(),Za=a("p"),Mxo=o("The model class to instantiate is selected based on the "),Sse=a("code"),Exo=o("model_type"),yxo=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),Lxo=o("pretrained_model_name_or_path"),Bxo=o(":"),xxo=l(),R=a("ul"),av=a("li"),Ise=a("strong"),kxo=o("albert"),Rxo=o(" \u2014 "),wD=a("a"),Sxo=o("AlbertForQuestionAnswering"),Pxo=o(" (ALBERT model)"),$xo=l(),nv=a("li"),jse=a("strong"),Ixo=o("bart"),jxo=o(" \u2014 "),AD=a("a"),Dxo=o("BartForQuestionAnswering"),Nxo=o(" (BART model)"),qxo=l(),sv=a("li"),Dse=a("strong"),Oxo=o("bert"),Gxo=o(" \u2014 "),LD=a("a"),Xxo=o("BertForQuestionAnswering"),Vxo=o(" (BERT model)"),zxo=l(),lv=a("li"),Nse=a("strong"),Wxo=o("big_bird"),Qxo=o(" \u2014 "),BD=a("a"),Hxo=o("BigBirdForQuestionAnswering"),Uxo=o(" (BigBird model)"),Jxo=l(),iv=a("li"),qse=a("strong"),Yxo=o("bigbird_pegasus"),Kxo=o(" \u2014 "),xD=a("a"),Zxo=o("BigBirdPegasusForQuestionAnswering"),eko=o(" (BigBirdPegasus model)"),oko=l(),dv=a("li"),Ose=a("strong"),rko=o("camembert"),tko=o(" \u2014 "),kD=a("a"),ako=o("CamembertForQuestionAnswering"),nko=o(" (CamemBERT model)"),sko=l(),cv=a("li"),Gse=a("strong"),lko=o("canine"),iko=o(" \u2014 "),RD=a("a"),dko=o("CanineForQuestionAnswering"),cko=o(" (Canine model)"),fko=l(),fv=a("li"),Xse=a("strong"),mko=o("convbert"),gko=o(" \u2014 "),SD=a("a"),hko=o("ConvBertForQuestionAnswering"),pko=o(" (ConvBERT model)"),_ko=l(),mv=a("li"),Vse=a("strong"),uko=o("data2vec-text"),bko=o(" \u2014 "),PD=a("a"),vko=o("Data2VecTextForQuestionAnswering"),Tko=o(" (Data2VecText model)"),Fko=l(),gv=a("li"),zse=a("strong"),Cko=o("deberta"),Mko=o(" \u2014 "),$D=a("a"),Eko=o("DebertaForQuestionAnswering"),yko=o(" (DeBERTa model)"),wko=l(),hv=a("li"),Wse=a("strong"),Ako=o("deberta-v2"),Lko=o(" \u2014 "),ID=a("a"),Bko=o("DebertaV2ForQuestionAnswering"),xko=o(" (DeBERTa-v2 model)"),kko=l(),pv=a("li"),Qse=a("strong"),Rko=o("distilbert"),Sko=o(" \u2014 "),jD=a("a"),Pko=o("DistilBertForQuestionAnswering"),$ko=o(" (DistilBERT model)"),Iko=l(),_v=a("li"),Hse=a("strong"),jko=o("electra"),Dko=o(" \u2014 "),DD=a("a"),Nko=o("ElectraForQuestionAnswering"),qko=o(" (ELECTRA model)"),Oko=l(),uv=a("li"),Use=a("strong"),Gko=o("flaubert"),Xko=o(" \u2014 "),ND=a("a"),Vko=o("FlaubertForQuestionAnsweringSimple"),zko=o(" (FlauBERT model)"),Wko=l(),bv=a("li"),Jse=a("strong"),Qko=o("fnet"),Hko=o(" \u2014 "),qD=a("a"),Uko=o("FNetForQuestionAnswering"),Jko=o(" (FNet model)"),Yko=l(),vv=a("li"),Yse=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),OD=a("a"),eRo=o("FunnelForQuestionAnswering"),oRo=o(" (Funnel Transformer model)"),rRo=l(),Tv=a("li"),Kse=a("strong"),tRo=o("gptj"),aRo=o(" \u2014 "),GD=a("a"),nRo=o("GPTJForQuestionAnswering"),sRo=o(" (GPT-J model)"),lRo=l(),Fv=a("li"),Zse=a("strong"),iRo=o("ibert"),dRo=o(" \u2014 "),XD=a("a"),cRo=o("IBertForQuestionAnswering"),fRo=o(" (I-BERT model)"),mRo=l(),Cv=a("li"),ele=a("strong"),gRo=o("layoutlmv2"),hRo=o(" \u2014 "),VD=a("a"),pRo=o("LayoutLMv2ForQuestionAnswering"),_Ro=o(" (LayoutLMv2 model)"),uRo=l(),Mv=a("li"),ole=a("strong"),bRo=o("led"),vRo=o(" \u2014 "),zD=a("a"),TRo=o("LEDForQuestionAnswering"),FRo=o(" (LED model)"),CRo=l(),Ev=a("li"),rle=a("strong"),MRo=o("longformer"),ERo=o(" \u2014 "),WD=a("a"),yRo=o("LongformerForQuestionAnswering"),wRo=o(" (Longformer model)"),ARo=l(),yv=a("li"),tle=a("strong"),LRo=o("lxmert"),BRo=o(" \u2014 "),QD=a("a"),xRo=o("LxmertForQuestionAnswering"),kRo=o(" (LXMERT model)"),RRo=l(),wv=a("li"),ale=a("strong"),SRo=o("mbart"),PRo=o(" \u2014 "),HD=a("a"),$Ro=o("MBartForQuestionAnswering"),IRo=o(" (mBART model)"),jRo=l(),Av=a("li"),nle=a("strong"),DRo=o("megatron-bert"),NRo=o(" \u2014 "),UD=a("a"),qRo=o("MegatronBertForQuestionAnswering"),ORo=o(" (MegatronBert model)"),GRo=l(),Lv=a("li"),sle=a("strong"),XRo=o("mobilebert"),VRo=o(" \u2014 "),JD=a("a"),zRo=o("MobileBertForQuestionAnswering"),WRo=o(" (MobileBERT model)"),QRo=l(),Bv=a("li"),lle=a("strong"),HRo=o("mpnet"),URo=o(" \u2014 "),YD=a("a"),JRo=o("MPNetForQuestionAnswering"),YRo=o(" (MPNet model)"),KRo=l(),xv=a("li"),ile=a("strong"),ZRo=o("nystromformer"),eSo=o(" \u2014 "),KD=a("a"),oSo=o("NystromformerForQuestionAnswering"),rSo=o(" (Nystromformer model)"),tSo=l(),kv=a("li"),dle=a("strong"),aSo=o("qdqbert"),nSo=o(" \u2014 "),ZD=a("a"),sSo=o("QDQBertForQuestionAnswering"),lSo=o(" (QDQBert model)"),iSo=l(),Rv=a("li"),cle=a("strong"),dSo=o("reformer"),cSo=o(" \u2014 "),eN=a("a"),fSo=o("ReformerForQuestionAnswering"),mSo=o(" (Reformer model)"),gSo=l(),Sv=a("li"),fle=a("strong"),hSo=o("rembert"),pSo=o(" \u2014 "),oN=a("a"),_So=o("RemBertForQuestionAnswering"),uSo=o(" (RemBERT model)"),bSo=l(),Pv=a("li"),mle=a("strong"),vSo=o("roberta"),TSo=o(" \u2014 "),rN=a("a"),FSo=o("RobertaForQuestionAnswering"),CSo=o(" (RoBERTa model)"),MSo=l(),$v=a("li"),gle=a("strong"),ESo=o("roformer"),ySo=o(" \u2014 "),tN=a("a"),wSo=o("RoFormerForQuestionAnswering"),ASo=o(" (RoFormer model)"),LSo=l(),Iv=a("li"),hle=a("strong"),BSo=o("splinter"),xSo=o(" \u2014 "),aN=a("a"),kSo=o("SplinterForQuestionAnswering"),RSo=o(" (Splinter model)"),SSo=l(),jv=a("li"),ple=a("strong"),PSo=o("squeezebert"),$So=o(" \u2014 "),nN=a("a"),ISo=o("SqueezeBertForQuestionAnswering"),jSo=o(" (SqueezeBERT model)"),DSo=l(),Dv=a("li"),_le=a("strong"),NSo=o("xlm"),qSo=o(" \u2014 "),sN=a("a"),OSo=o("XLMForQuestionAnsweringSimple"),GSo=o(" (XLM model)"),XSo=l(),Nv=a("li"),ule=a("strong"),VSo=o("xlm-roberta"),zSo=o(" \u2014 "),lN=a("a"),WSo=o("XLMRobertaForQuestionAnswering"),QSo=o(" (XLM-RoBERTa model)"),HSo=l(),qv=a("li"),ble=a("strong"),USo=o("xlm-roberta-xl"),JSo=o(" \u2014 "),iN=a("a"),YSo=o("XLMRobertaXLForQuestionAnswering"),KSo=o(" (XLM-RoBERTa-XL model)"),ZSo=l(),Ov=a("li"),vle=a("strong"),ePo=o("xlnet"),oPo=o(" \u2014 "),dN=a("a"),rPo=o("XLNetForQuestionAnsweringSimple"),tPo=o(" (XLNet model)"),aPo=l(),Gv=a("li"),Tle=a("strong"),nPo=o("yoso"),sPo=o(" \u2014 "),cN=a("a"),lPo=o("YosoForQuestionAnswering"),iPo=o(" (YOSO model)"),dPo=l(),Xv=a("p"),cPo=o("The model is set in evaluation mode by default using "),Fle=a("code"),fPo=o("model.eval()"),mPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=a("code"),gPo=o("model.train()"),hPo=l(),Mle=a("p"),pPo=o("Examples:"),_Po=l(),f(z3.$$.fragment),Yxe=l(),Ad=a("h2"),Vv=a("a"),Ele=a("span"),f(W3.$$.fragment),uPo=l(),yle=a("span"),bPo=o("AutoModelForTableQuestionAnswering"),Kxe=l(),sr=a("div"),f(Q3.$$.fragment),vPo=l(),Ld=a("p"),TPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wle=a("code"),FPo=o("from_pretrained()"),CPo=o("class method or the "),Ale=a("code"),MPo=o("from_config()"),EPo=o(`class
method.`),yPo=l(),H3=a("p"),wPo=o("This class cannot be instantiated directly using "),Lle=a("code"),APo=o("__init__()"),LPo=o(" (throws an error)."),BPo=l(),et=a("div"),f(U3.$$.fragment),xPo=l(),Ble=a("p"),kPo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RPo=l(),Bd=a("p"),SPo=o(`Note:
Loading a model from its configuration file does `),xle=a("strong"),PPo=o("not"),$Po=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=a("code"),IPo=o("from_pretrained()"),jPo=o("to load the model weights."),DPo=l(),Rle=a("p"),NPo=o("Examples:"),qPo=l(),f(J3.$$.fragment),OPo=l(),He=a("div"),f(Y3.$$.fragment),GPo=l(),Sle=a("p"),XPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VPo=l(),en=a("p"),zPo=o("The model class to instantiate is selected based on the "),Ple=a("code"),WPo=o("model_type"),QPo=o(` property of the config object (either
passed as an argument or loaded from `),$le=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),JPo=o("pretrained_model_name_or_path"),YPo=o(":"),KPo=l(),jle=a("ul"),zv=a("li"),Dle=a("strong"),ZPo=o("tapas"),e$o=o(" \u2014 "),fN=a("a"),o$o=o("TapasForQuestionAnswering"),r$o=o(" (TAPAS model)"),t$o=l(),Wv=a("p"),a$o=o("The model is set in evaluation mode by default using "),Nle=a("code"),n$o=o("model.eval()"),s$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),l$o=o("model.train()"),i$o=l(),Ole=a("p"),d$o=o("Examples:"),c$o=l(),f(K3.$$.fragment),Zxe=l(),xd=a("h2"),Qv=a("a"),Gle=a("span"),f(Z3.$$.fragment),f$o=l(),Xle=a("span"),m$o=o("AutoModelForImageClassification"),eke=l(),lr=a("div"),f(e5.$$.fragment),g$o=l(),kd=a("p"),h$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vle=a("code"),p$o=o("from_pretrained()"),_$o=o("class method or the "),zle=a("code"),u$o=o("from_config()"),b$o=o(`class
method.`),v$o=l(),o5=a("p"),T$o=o("This class cannot be instantiated directly using "),Wle=a("code"),F$o=o("__init__()"),C$o=o(" (throws an error)."),M$o=l(),ot=a("div"),f(r5.$$.fragment),E$o=l(),Qle=a("p"),y$o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w$o=l(),Rd=a("p"),A$o=o(`Note:
Loading a model from its configuration file does `),Hle=a("strong"),L$o=o("not"),B$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ule=a("code"),x$o=o("from_pretrained()"),k$o=o("to load the model weights."),R$o=l(),Jle=a("p"),S$o=o("Examples:"),P$o=l(),f(t5.$$.fragment),$$o=l(),Ue=a("div"),f(a5.$$.fragment),I$o=l(),Yle=a("p"),j$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D$o=l(),on=a("p"),N$o=o("The model class to instantiate is selected based on the "),Kle=a("code"),q$o=o("model_type"),O$o=o(` property of the config object (either
passed as an argument or loaded from `),Zle=a("code"),G$o=o("pretrained_model_name_or_path"),X$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=a("code"),V$o=o("pretrained_model_name_or_path"),z$o=o(":"),W$o=l(),pe=a("ul"),Hv=a("li"),oie=a("strong"),Q$o=o("beit"),H$o=o(" \u2014 "),mN=a("a"),U$o=o("BeitForImageClassification"),J$o=o(" (BEiT model)"),Y$o=l(),Uv=a("li"),rie=a("strong"),K$o=o("convnext"),Z$o=o(" \u2014 "),gN=a("a"),eIo=o("ConvNextForImageClassification"),oIo=o(" (ConvNext model)"),rIo=l(),qs=a("li"),tie=a("strong"),tIo=o("deit"),aIo=o(" \u2014 "),hN=a("a"),nIo=o("DeiTForImageClassification"),sIo=o(" or "),pN=a("a"),lIo=o("DeiTForImageClassificationWithTeacher"),iIo=o(" (DeiT model)"),dIo=l(),Jv=a("li"),aie=a("strong"),cIo=o("imagegpt"),fIo=o(" \u2014 "),_N=a("a"),mIo=o("ImageGPTForImageClassification"),gIo=o(" (ImageGPT model)"),hIo=l(),ma=a("li"),nie=a("strong"),pIo=o("perceiver"),_Io=o(" \u2014 "),uN=a("a"),uIo=o("PerceiverForImageClassificationLearned"),bIo=o(" or "),bN=a("a"),vIo=o("PerceiverForImageClassificationFourier"),TIo=o(" or "),vN=a("a"),FIo=o("PerceiverForImageClassificationConvProcessing"),CIo=o(" (Perceiver model)"),MIo=l(),Yv=a("li"),sie=a("strong"),EIo=o("poolformer"),yIo=o(" \u2014 "),TN=a("a"),wIo=o("PoolFormerForImageClassification"),AIo=o(" (PoolFormer model)"),LIo=l(),Kv=a("li"),lie=a("strong"),BIo=o("segformer"),xIo=o(" \u2014 "),FN=a("a"),kIo=o("SegformerForImageClassification"),RIo=o(" (SegFormer model)"),SIo=l(),Zv=a("li"),iie=a("strong"),PIo=o("swin"),$Io=o(" \u2014 "),CN=a("a"),IIo=o("SwinForImageClassification"),jIo=o(" (Swin model)"),DIo=l(),e6=a("li"),die=a("strong"),NIo=o("van"),qIo=o(" \u2014 "),MN=a("a"),OIo=o("VanForImageClassification"),GIo=o(" (VAN model)"),XIo=l(),o6=a("li"),cie=a("strong"),VIo=o("vit"),zIo=o(" \u2014 "),EN=a("a"),WIo=o("ViTForImageClassification"),QIo=o(" (ViT model)"),HIo=l(),r6=a("p"),UIo=o("The model is set in evaluation mode by default using "),fie=a("code"),JIo=o("model.eval()"),YIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),KIo=o("model.train()"),ZIo=l(),gie=a("p"),ejo=o("Examples:"),ojo=l(),f(n5.$$.fragment),oke=l(),Sd=a("h2"),t6=a("a"),hie=a("span"),f(s5.$$.fragment),rjo=l(),pie=a("span"),tjo=o("AutoModelForVision2Seq"),rke=l(),ir=a("div"),f(l5.$$.fragment),ajo=l(),Pd=a("p"),njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ie=a("code"),sjo=o("from_pretrained()"),ljo=o("class method or the "),uie=a("code"),ijo=o("from_config()"),djo=o(`class
method.`),cjo=l(),i5=a("p"),fjo=o("This class cannot be instantiated directly using "),bie=a("code"),mjo=o("__init__()"),gjo=o(" (throws an error)."),hjo=l(),rt=a("div"),f(d5.$$.fragment),pjo=l(),vie=a("p"),_jo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ujo=l(),$d=a("p"),bjo=o(`Note:
Loading a model from its configuration file does `),Tie=a("strong"),vjo=o("not"),Tjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fie=a("code"),Fjo=o("from_pretrained()"),Cjo=o("to load the model weights."),Mjo=l(),Cie=a("p"),Ejo=o("Examples:"),yjo=l(),f(c5.$$.fragment),wjo=l(),Je=a("div"),f(f5.$$.fragment),Ajo=l(),Mie=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bjo=l(),rn=a("p"),xjo=o("The model class to instantiate is selected based on the "),Eie=a("code"),kjo=o("model_type"),Rjo=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),Sjo=o("pretrained_model_name_or_path"),Pjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),$jo=o("pretrained_model_name_or_path"),Ijo=o(":"),jjo=l(),Aie=a("ul"),a6=a("li"),Lie=a("strong"),Djo=o("vision-encoder-decoder"),Njo=o(" \u2014 "),yN=a("a"),qjo=o("VisionEncoderDecoderModel"),Ojo=o(" (Vision Encoder decoder model)"),Gjo=l(),n6=a("p"),Xjo=o("The model is set in evaluation mode by default using "),Bie=a("code"),Vjo=o("model.eval()"),zjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),Wjo=o("model.train()"),Qjo=l(),kie=a("p"),Hjo=o("Examples:"),Ujo=l(),f(m5.$$.fragment),tke=l(),Id=a("h2"),s6=a("a"),Rie=a("span"),f(g5.$$.fragment),Jjo=l(),Sie=a("span"),Yjo=o("AutoModelForAudioClassification"),ake=l(),dr=a("div"),f(h5.$$.fragment),Kjo=l(),jd=a("p"),Zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Pie=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),$ie=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),p5=a("p"),nDo=o("This class cannot be instantiated directly using "),Iie=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),tt=a("div"),f(_5.$$.fragment),dDo=l(),jie=a("p"),cDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fDo=l(),Dd=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=a("code"),pDo=o("from_pretrained()"),_Do=o("to load the model weights."),uDo=l(),qie=a("p"),bDo=o("Examples:"),vDo=l(),f(u5.$$.fragment),TDo=l(),Ye=a("div"),f(b5.$$.fragment),FDo=l(),Oie=a("p"),CDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MDo=l(),tn=a("p"),EDo=o("The model class to instantiate is selected based on the "),Gie=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),Xie=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),ke=a("ul"),l6=a("li"),zie=a("strong"),RDo=o("data2vec-audio"),SDo=o(" \u2014 "),wN=a("a"),PDo=o("Data2VecAudioForSequenceClassification"),$Do=o(" (Data2VecAudio model)"),IDo=l(),i6=a("li"),Wie=a("strong"),jDo=o("hubert"),DDo=o(" \u2014 "),AN=a("a"),NDo=o("HubertForSequenceClassification"),qDo=o(" (Hubert model)"),ODo=l(),d6=a("li"),Qie=a("strong"),GDo=o("sew"),XDo=o(" \u2014 "),LN=a("a"),VDo=o("SEWForSequenceClassification"),zDo=o(" (SEW model)"),WDo=l(),c6=a("li"),Hie=a("strong"),QDo=o("sew-d"),HDo=o(" \u2014 "),BN=a("a"),UDo=o("SEWDForSequenceClassification"),JDo=o(" (SEW-D model)"),YDo=l(),f6=a("li"),Uie=a("strong"),KDo=o("unispeech"),ZDo=o(" \u2014 "),xN=a("a"),eNo=o("UniSpeechForSequenceClassification"),oNo=o(" (UniSpeech model)"),rNo=l(),m6=a("li"),Jie=a("strong"),tNo=o("unispeech-sat"),aNo=o(" \u2014 "),kN=a("a"),nNo=o("UniSpeechSatForSequenceClassification"),sNo=o(" (UniSpeechSat model)"),lNo=l(),g6=a("li"),Yie=a("strong"),iNo=o("wav2vec2"),dNo=o(" \u2014 "),RN=a("a"),cNo=o("Wav2Vec2ForSequenceClassification"),fNo=o(" (Wav2Vec2 model)"),mNo=l(),h6=a("li"),Kie=a("strong"),gNo=o("wavlm"),hNo=o(" \u2014 "),SN=a("a"),pNo=o("WavLMForSequenceClassification"),_No=o(" (WavLM model)"),uNo=l(),p6=a("p"),bNo=o("The model is set in evaluation mode by default using "),Zie=a("code"),vNo=o("model.eval()"),TNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),FNo=o("model.train()"),CNo=l(),ode=a("p"),MNo=o("Examples:"),ENo=l(),f(v5.$$.fragment),nke=l(),Nd=a("h2"),_6=a("a"),rde=a("span"),f(T5.$$.fragment),yNo=l(),tde=a("span"),wNo=o("AutoModelForAudioFrameClassification"),ske=l(),cr=a("div"),f(F5.$$.fragment),ANo=l(),qd=a("p"),LNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ade=a("code"),BNo=o("from_pretrained()"),xNo=o("class method or the "),nde=a("code"),kNo=o("from_config()"),RNo=o(`class
method.`),SNo=l(),C5=a("p"),PNo=o("This class cannot be instantiated directly using "),sde=a("code"),$No=o("__init__()"),INo=o(" (throws an error)."),jNo=l(),at=a("div"),f(M5.$$.fragment),DNo=l(),lde=a("p"),NNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qNo=l(),Od=a("p"),ONo=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),GNo=o("not"),XNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dde=a("code"),VNo=o("from_pretrained()"),zNo=o("to load the model weights."),WNo=l(),cde=a("p"),QNo=o("Examples:"),HNo=l(),f(E5.$$.fragment),UNo=l(),Ke=a("div"),f(y5.$$.fragment),JNo=l(),fde=a("p"),YNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),KNo=l(),an=a("p"),ZNo=o("The model class to instantiate is selected based on the "),mde=a("code"),eqo=o("model_type"),oqo=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(":"),sqo=l(),nn=a("ul"),u6=a("li"),pde=a("strong"),lqo=o("data2vec-audio"),iqo=o(" \u2014 "),PN=a("a"),dqo=o("Data2VecAudioForAudioFrameClassification"),cqo=o(" (Data2VecAudio model)"),fqo=l(),b6=a("li"),_de=a("strong"),mqo=o("unispeech-sat"),gqo=o(" \u2014 "),$N=a("a"),hqo=o("UniSpeechSatForAudioFrameClassification"),pqo=o(" (UniSpeechSat model)"),_qo=l(),v6=a("li"),ude=a("strong"),uqo=o("wav2vec2"),bqo=o(" \u2014 "),IN=a("a"),vqo=o("Wav2Vec2ForAudioFrameClassification"),Tqo=o(" (Wav2Vec2 model)"),Fqo=l(),T6=a("li"),bde=a("strong"),Cqo=o("wavlm"),Mqo=o(" \u2014 "),jN=a("a"),Eqo=o("WavLMForAudioFrameClassification"),yqo=o(" (WavLM model)"),wqo=l(),F6=a("p"),Aqo=o("The model is set in evaluation mode by default using "),vde=a("code"),Lqo=o("model.eval()"),Bqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),xqo=o("model.train()"),kqo=l(),Fde=a("p"),Rqo=o("Examples:"),Sqo=l(),f(w5.$$.fragment),lke=l(),Gd=a("h2"),C6=a("a"),Cde=a("span"),f(A5.$$.fragment),Pqo=l(),Mde=a("span"),$qo=o("AutoModelForCTC"),ike=l(),fr=a("div"),f(L5.$$.fragment),Iqo=l(),Xd=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ede=a("code"),Dqo=o("from_pretrained()"),Nqo=o("class method or the "),yde=a("code"),qqo=o("from_config()"),Oqo=o(`class
method.`),Gqo=l(),B5=a("p"),Xqo=o("This class cannot be instantiated directly using "),wde=a("code"),Vqo=o("__init__()"),zqo=o(" (throws an error)."),Wqo=l(),nt=a("div"),f(x5.$$.fragment),Qqo=l(),Ade=a("p"),Hqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Uqo=l(),Vd=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=a("code"),Zqo=o("from_pretrained()"),eOo=o("to load the model weights."),oOo=l(),xde=a("p"),rOo=o("Examples:"),tOo=l(),f(k5.$$.fragment),aOo=l(),Ze=a("div"),f(R5.$$.fragment),nOo=l(),kde=a("p"),sOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lOo=l(),sn=a("p"),iOo=o("The model class to instantiate is selected based on the "),Rde=a("code"),dOo=o("model_type"),cOo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),fOo=o("pretrained_model_name_or_path"),mOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=a("code"),gOo=o("pretrained_model_name_or_path"),hOo=o(":"),pOo=l(),Re=a("ul"),M6=a("li"),$de=a("strong"),_Oo=o("data2vec-audio"),uOo=o(" \u2014 "),DN=a("a"),bOo=o("Data2VecAudioForCTC"),vOo=o(" (Data2VecAudio model)"),TOo=l(),E6=a("li"),Ide=a("strong"),FOo=o("hubert"),COo=o(" \u2014 "),NN=a("a"),MOo=o("HubertForCTC"),EOo=o(" (Hubert model)"),yOo=l(),y6=a("li"),jde=a("strong"),wOo=o("sew"),AOo=o(" \u2014 "),qN=a("a"),LOo=o("SEWForCTC"),BOo=o(" (SEW model)"),xOo=l(),w6=a("li"),Dde=a("strong"),kOo=o("sew-d"),ROo=o(" \u2014 "),ON=a("a"),SOo=o("SEWDForCTC"),POo=o(" (SEW-D model)"),$Oo=l(),A6=a("li"),Nde=a("strong"),IOo=o("unispeech"),jOo=o(" \u2014 "),GN=a("a"),DOo=o("UniSpeechForCTC"),NOo=o(" (UniSpeech model)"),qOo=l(),L6=a("li"),qde=a("strong"),OOo=o("unispeech-sat"),GOo=o(" \u2014 "),XN=a("a"),XOo=o("UniSpeechSatForCTC"),VOo=o(" (UniSpeechSat model)"),zOo=l(),B6=a("li"),Ode=a("strong"),WOo=o("wav2vec2"),QOo=o(" \u2014 "),VN=a("a"),HOo=o("Wav2Vec2ForCTC"),UOo=o(" (Wav2Vec2 model)"),JOo=l(),x6=a("li"),Gde=a("strong"),YOo=o("wavlm"),KOo=o(" \u2014 "),zN=a("a"),ZOo=o("WavLMForCTC"),eGo=o(" (WavLM model)"),oGo=l(),k6=a("p"),rGo=o("The model is set in evaluation mode by default using "),Xde=a("code"),tGo=o("model.eval()"),aGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=a("code"),nGo=o("model.train()"),sGo=l(),zde=a("p"),lGo=o("Examples:"),iGo=l(),f(S5.$$.fragment),dke=l(),zd=a("h2"),R6=a("a"),Wde=a("span"),f(P5.$$.fragment),dGo=l(),Qde=a("span"),cGo=o("AutoModelForSpeechSeq2Seq"),cke=l(),mr=a("div"),f($5.$$.fragment),fGo=l(),Wd=a("p"),mGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hde=a("code"),gGo=o("from_pretrained()"),hGo=o("class method or the "),Ude=a("code"),pGo=o("from_config()"),_Go=o(`class
method.`),uGo=l(),I5=a("p"),bGo=o("This class cannot be instantiated directly using "),Jde=a("code"),vGo=o("__init__()"),TGo=o(" (throws an error)."),FGo=l(),st=a("div"),f(j5.$$.fragment),CGo=l(),Yde=a("p"),MGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EGo=l(),Qd=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),wGo=o("not"),AGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=a("code"),LGo=o("from_pretrained()"),BGo=o("to load the model weights."),xGo=l(),ece=a("p"),kGo=o("Examples:"),RGo=l(),f(D5.$$.fragment),SGo=l(),eo=a("div"),f(N5.$$.fragment),PGo=l(),oce=a("p"),$Go=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IGo=l(),ln=a("p"),jGo=o("The model class to instantiate is selected based on the "),rce=a("code"),DGo=o("model_type"),NGo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),qGo=o("pretrained_model_name_or_path"),OGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),GGo=o("pretrained_model_name_or_path"),XGo=o(":"),VGo=l(),q5=a("ul"),S6=a("li"),nce=a("strong"),zGo=o("speech-encoder-decoder"),WGo=o(" \u2014 "),WN=a("a"),QGo=o("SpeechEncoderDecoderModel"),HGo=o(" (Speech Encoder decoder model)"),UGo=l(),P6=a("li"),sce=a("strong"),JGo=o("speech_to_text"),YGo=o(" \u2014 "),QN=a("a"),KGo=o("Speech2TextForConditionalGeneration"),ZGo=o(" (Speech2Text model)"),eXo=l(),$6=a("p"),oXo=o("The model is set in evaluation mode by default using "),lce=a("code"),rXo=o("model.eval()"),tXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=a("code"),aXo=o("model.train()"),nXo=l(),dce=a("p"),sXo=o("Examples:"),lXo=l(),f(O5.$$.fragment),fke=l(),Hd=a("h2"),I6=a("a"),cce=a("span"),f(G5.$$.fragment),iXo=l(),fce=a("span"),dXo=o("AutoModelForAudioXVector"),mke=l(),gr=a("div"),f(X5.$$.fragment),cXo=l(),Ud=a("p"),fXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mce=a("code"),mXo=o("from_pretrained()"),gXo=o("class method or the "),gce=a("code"),hXo=o("from_config()"),pXo=o(`class
method.`),_Xo=l(),V5=a("p"),uXo=o("This class cannot be instantiated directly using "),hce=a("code"),bXo=o("__init__()"),vXo=o(" (throws an error)."),TXo=l(),lt=a("div"),f(z5.$$.fragment),FXo=l(),pce=a("p"),CXo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),MXo=l(),Jd=a("p"),EXo=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),yXo=o("not"),wXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uce=a("code"),AXo=o("from_pretrained()"),LXo=o("to load the model weights."),BXo=l(),bce=a("p"),xXo=o("Examples:"),kXo=l(),f(W5.$$.fragment),RXo=l(),oo=a("div"),f(Q5.$$.fragment),SXo=l(),vce=a("p"),PXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$Xo=l(),dn=a("p"),IXo=o("The model class to instantiate is selected based on the "),Tce=a("code"),jXo=o("model_type"),DXo=o(` property of the config object (either
passed as an argument or loaded from `),Fce=a("code"),NXo=o("pretrained_model_name_or_path"),qXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),OXo=o("pretrained_model_name_or_path"),GXo=o(":"),XXo=l(),cn=a("ul"),j6=a("li"),Mce=a("strong"),VXo=o("data2vec-audio"),zXo=o(" \u2014 "),HN=a("a"),WXo=o("Data2VecAudioForXVector"),QXo=o(" (Data2VecAudio model)"),HXo=l(),D6=a("li"),Ece=a("strong"),UXo=o("unispeech-sat"),JXo=o(" \u2014 "),UN=a("a"),YXo=o("UniSpeechSatForXVector"),KXo=o(" (UniSpeechSat model)"),ZXo=l(),N6=a("li"),yce=a("strong"),eVo=o("wav2vec2"),oVo=o(" \u2014 "),JN=a("a"),rVo=o("Wav2Vec2ForXVector"),tVo=o(" (Wav2Vec2 model)"),aVo=l(),q6=a("li"),wce=a("strong"),nVo=o("wavlm"),sVo=o(" \u2014 "),YN=a("a"),lVo=o("WavLMForXVector"),iVo=o(" (WavLM model)"),dVo=l(),O6=a("p"),cVo=o("The model is set in evaluation mode by default using "),Ace=a("code"),fVo=o("model.eval()"),mVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),gVo=o("model.train()"),hVo=l(),Bce=a("p"),pVo=o("Examples:"),_Vo=l(),f(H5.$$.fragment),gke=l(),Yd=a("h2"),G6=a("a"),xce=a("span"),f(U5.$$.fragment),uVo=l(),kce=a("span"),bVo=o("AutoModelForMaskedImageModeling"),hke=l(),hr=a("div"),f(J5.$$.fragment),vVo=l(),Kd=a("p"),TVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rce=a("code"),FVo=o("from_pretrained()"),CVo=o("class method or the "),Sce=a("code"),MVo=o("from_config()"),EVo=o(`class
method.`),yVo=l(),Y5=a("p"),wVo=o("This class cannot be instantiated directly using "),Pce=a("code"),AVo=o("__init__()"),LVo=o(" (throws an error)."),BVo=l(),it=a("div"),f(K5.$$.fragment),xVo=l(),$ce=a("p"),kVo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RVo=l(),Zd=a("p"),SVo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),PVo=o("not"),$Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jce=a("code"),IVo=o("from_pretrained()"),jVo=o("to load the model weights."),DVo=l(),Dce=a("p"),NVo=o("Examples:"),qVo=l(),f(Z5.$$.fragment),OVo=l(),ro=a("div"),f(ey.$$.fragment),GVo=l(),Nce=a("p"),XVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),VVo=l(),fn=a("p"),zVo=o("The model class to instantiate is selected based on the "),qce=a("code"),WVo=o("model_type"),QVo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),HVo=o("pretrained_model_name_or_path"),UVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(":"),KVo=l(),ec=a("ul"),X6=a("li"),Xce=a("strong"),ZVo=o("deit"),ezo=o(" \u2014 "),KN=a("a"),ozo=o("DeiTForMaskedImageModeling"),rzo=o(" (DeiT model)"),tzo=l(),V6=a("li"),Vce=a("strong"),azo=o("swin"),nzo=o(" \u2014 "),ZN=a("a"),szo=o("SwinForMaskedImageModeling"),lzo=o(" (Swin model)"),izo=l(),z6=a("li"),zce=a("strong"),dzo=o("vit"),czo=o(" \u2014 "),eq=a("a"),fzo=o("ViTForMaskedImageModeling"),mzo=o(" (ViT model)"),gzo=l(),W6=a("p"),hzo=o("The model is set in evaluation mode by default using "),Wce=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),uzo=o("model.train()"),bzo=l(),Hce=a("p"),vzo=o("Examples:"),Tzo=l(),f(oy.$$.fragment),pke=l(),oc=a("h2"),Q6=a("a"),Uce=a("span"),f(ry.$$.fragment),Fzo=l(),Jce=a("span"),Czo=o("AutoModelForObjectDetection"),_ke=l(),pr=a("div"),f(ty.$$.fragment),Mzo=l(),rc=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yce=a("code"),yzo=o("from_pretrained()"),wzo=o("class method or the "),Kce=a("code"),Azo=o("from_config()"),Lzo=o(`class
method.`),Bzo=l(),ay=a("p"),xzo=o("This class cannot be instantiated directly using "),Zce=a("code"),kzo=o("__init__()"),Rzo=o(" (throws an error)."),Szo=l(),dt=a("div"),f(ny.$$.fragment),Pzo=l(),efe=a("p"),$zo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Izo=l(),tc=a("p"),jzo=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),Dzo=o("not"),Nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=a("code"),qzo=o("from_pretrained()"),Ozo=o("to load the model weights."),Gzo=l(),tfe=a("p"),Xzo=o("Examples:"),Vzo=l(),f(sy.$$.fragment),zzo=l(),to=a("div"),f(ly.$$.fragment),Wzo=l(),afe=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hzo=l(),mn=a("p"),Uzo=o("The model class to instantiate is selected based on the "),nfe=a("code"),Jzo=o("model_type"),Yzo=o(` property of the config object (either
passed as an argument or loaded from `),sfe=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),ife=a("ul"),H6=a("li"),dfe=a("strong"),tWo=o("detr"),aWo=o(" \u2014 "),oq=a("a"),nWo=o("DetrForObjectDetection"),sWo=o(" (DETR model)"),lWo=l(),U6=a("p"),iWo=o("The model is set in evaluation mode by default using "),cfe=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=a("code"),fWo=o("model.train()"),mWo=l(),mfe=a("p"),gWo=o("Examples:"),hWo=l(),f(iy.$$.fragment),uke=l(),ac=a("h2"),J6=a("a"),gfe=a("span"),f(dy.$$.fragment),pWo=l(),hfe=a("span"),_Wo=o("AutoModelForImageSegmentation"),bke=l(),_r=a("div"),f(cy.$$.fragment),uWo=l(),nc=a("p"),bWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pfe=a("code"),vWo=o("from_pretrained()"),TWo=o("class method or the "),_fe=a("code"),FWo=o("from_config()"),CWo=o(`class
method.`),MWo=l(),fy=a("p"),EWo=o("This class cannot be instantiated directly using "),ufe=a("code"),yWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),ct=a("div"),f(my.$$.fragment),LWo=l(),bfe=a("p"),BWo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xWo=l(),sc=a("p"),kWo=o(`Note:
Loading a model from its configuration file does `),vfe=a("strong"),RWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tfe=a("code"),PWo=o("from_pretrained()"),$Wo=o("to load the model weights."),IWo=l(),Ffe=a("p"),jWo=o("Examples:"),DWo=l(),f(gy.$$.fragment),NWo=l(),ao=a("div"),f(hy.$$.fragment),qWo=l(),Cfe=a("p"),OWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),GWo=l(),gn=a("p"),XWo=o("The model class to instantiate is selected based on the "),Mfe=a("code"),VWo=o("model_type"),zWo=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),WWo=o("pretrained_model_name_or_path"),QWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),HWo=o("pretrained_model_name_or_path"),UWo=o(":"),JWo=l(),wfe=a("ul"),Y6=a("li"),Afe=a("strong"),YWo=o("detr"),KWo=o(" \u2014 "),rq=a("a"),ZWo=o("DetrForSegmentation"),eQo=o(" (DETR model)"),oQo=l(),K6=a("p"),rQo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),tQo=o("model.eval()"),aQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),nQo=o("model.train()"),sQo=l(),xfe=a("p"),lQo=o("Examples:"),iQo=l(),f(py.$$.fragment),vke=l(),lc=a("h2"),Z6=a("a"),kfe=a("span"),f(_y.$$.fragment),dQo=l(),Rfe=a("span"),cQo=o("AutoModelForSemanticSegmentation"),Tke=l(),ur=a("div"),f(uy.$$.fragment),fQo=l(),ic=a("p"),mQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sfe=a("code"),gQo=o("from_pretrained()"),hQo=o("class method or the "),Pfe=a("code"),pQo=o("from_config()"),_Qo=o(`class
method.`),uQo=l(),by=a("p"),bQo=o("This class cannot be instantiated directly using "),$fe=a("code"),vQo=o("__init__()"),TQo=o(" (throws an error)."),FQo=l(),ft=a("div"),f(vy.$$.fragment),CQo=l(),Ife=a("p"),MQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),EQo=l(),dc=a("p"),yQo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=a("code"),LQo=o("from_pretrained()"),BQo=o("to load the model weights."),xQo=l(),Nfe=a("p"),kQo=o("Examples:"),RQo=l(),f(Ty.$$.fragment),SQo=l(),no=a("div"),f(Fy.$$.fragment),PQo=l(),qfe=a("p"),$Qo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),IQo=l(),hn=a("p"),jQo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),DQo=o("model_type"),NQo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),qQo=o("pretrained_model_name_or_path"),OQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),GQo=o("pretrained_model_name_or_path"),XQo=o(":"),VQo=l(),Cy=a("ul"),e0=a("li"),Vfe=a("strong"),zQo=o("beit"),WQo=o(" \u2014 "),tq=a("a"),QQo=o("BeitForSemanticSegmentation"),HQo=o(" (BEiT model)"),UQo=l(),o0=a("li"),zfe=a("strong"),JQo=o("segformer"),YQo=o(" \u2014 "),aq=a("a"),KQo=o("SegformerForSemanticSegmentation"),ZQo=o(" (SegFormer model)"),eHo=l(),r0=a("p"),oHo=o("The model is set in evaluation mode by default using "),Wfe=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),aHo=o("model.train()"),nHo=l(),Hfe=a("p"),sHo=o("Examples:"),lHo=l(),f(My.$$.fragment),Fke=l(),cc=a("h2"),t0=a("a"),Ufe=a("span"),f(Ey.$$.fragment),iHo=l(),Jfe=a("span"),dHo=o("AutoModelForInstanceSegmentation"),Cke=l(),br=a("div"),f(yy.$$.fragment),cHo=l(),fc=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Yfe=a("code"),mHo=o("from_pretrained()"),gHo=o("class method or the "),Kfe=a("code"),hHo=o("from_config()"),pHo=o(`class
method.`),_Ho=l(),wy=a("p"),uHo=o("This class cannot be instantiated directly using "),Zfe=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),THo=l(),mt=a("div"),f(Ay.$$.fragment),FHo=l(),eme=a("p"),CHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MHo=l(),mc=a("p"),EHo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),yHo=o("not"),wHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rme=a("code"),AHo=o("from_pretrained()"),LHo=o("to load the model weights."),BHo=l(),tme=a("p"),xHo=o("Examples:"),kHo=l(),f(Ly.$$.fragment),RHo=l(),so=a("div"),f(By.$$.fragment),SHo=l(),ame=a("p"),PHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$Ho=l(),pn=a("p"),IHo=o("The model class to instantiate is selected based on the "),nme=a("code"),jHo=o("model_type"),DHo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),NHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),OHo=o("pretrained_model_name_or_path"),GHo=o(":"),XHo=l(),ime=a("ul"),a0=a("li"),dme=a("strong"),VHo=o("maskformer"),zHo=o(" \u2014 "),nq=a("a"),WHo=o("MaskFormerForInstanceSegmentation"),QHo=o(" (MaskFormer model)"),HHo=l(),n0=a("p"),UHo=o("The model is set in evaluation mode by default using "),cme=a("code"),JHo=o("model.eval()"),YHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),KHo=o("model.train()"),ZHo=l(),mme=a("p"),eUo=o("Examples:"),oUo=l(),f(xy.$$.fragment),Mke=l(),gc=a("h2"),s0=a("a"),gme=a("span"),f(ky.$$.fragment),rUo=l(),hme=a("span"),tUo=o("TFAutoModel"),Eke=l(),vr=a("div"),f(Ry.$$.fragment),aUo=l(),hc=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pme=a("code"),sUo=o("from_pretrained()"),lUo=o("class method or the "),_me=a("code"),iUo=o("from_config()"),dUo=o(`class
method.`),cUo=l(),Sy=a("p"),fUo=o("This class cannot be instantiated directly using "),ume=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),gt=a("div"),f(Py.$$.fragment),pUo=l(),bme=a("p"),_Uo=o("Instantiates one of the base model classes of the library from a configuration."),uUo=l(),pc=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),vme=a("strong"),vUo=o("not"),TUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tme=a("code"),FUo=o("from_pretrained()"),CUo=o("to load the model weights."),MUo=l(),Fme=a("p"),EUo=o("Examples:"),yUo=l(),f($y.$$.fragment),wUo=l(),ho=a("div"),f(Iy.$$.fragment),AUo=l(),Cme=a("p"),LUo=o("Instantiate one of the base model classes of the library from a pretrained model."),BUo=l(),_n=a("p"),xUo=o("The model class to instantiate is selected based on the "),Mme=a("code"),kUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),SUo=o("pretrained_model_name_or_path"),PUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),$Uo=o("pretrained_model_name_or_path"),IUo=o(":"),jUo=l(),B=a("ul"),l0=a("li"),wme=a("strong"),DUo=o("albert"),NUo=o(" \u2014 "),sq=a("a"),qUo=o("TFAlbertModel"),OUo=o(" (ALBERT model)"),GUo=l(),i0=a("li"),Ame=a("strong"),XUo=o("bart"),VUo=o(" \u2014 "),lq=a("a"),zUo=o("TFBartModel"),WUo=o(" (BART model)"),QUo=l(),d0=a("li"),Lme=a("strong"),HUo=o("bert"),UUo=o(" \u2014 "),iq=a("a"),JUo=o("TFBertModel"),YUo=o(" (BERT model)"),KUo=l(),c0=a("li"),Bme=a("strong"),ZUo=o("blenderbot"),eJo=o(" \u2014 "),dq=a("a"),oJo=o("TFBlenderbotModel"),rJo=o(" (Blenderbot model)"),tJo=l(),f0=a("li"),xme=a("strong"),aJo=o("blenderbot-small"),nJo=o(" \u2014 "),cq=a("a"),sJo=o("TFBlenderbotSmallModel"),lJo=o(" (BlenderbotSmall model)"),iJo=l(),m0=a("li"),kme=a("strong"),dJo=o("camembert"),cJo=o(" \u2014 "),fq=a("a"),fJo=o("TFCamembertModel"),mJo=o(" (CamemBERT model)"),gJo=l(),g0=a("li"),Rme=a("strong"),hJo=o("clip"),pJo=o(" \u2014 "),mq=a("a"),_Jo=o("TFCLIPModel"),uJo=o(" (CLIP model)"),bJo=l(),h0=a("li"),Sme=a("strong"),vJo=o("convbert"),TJo=o(" \u2014 "),gq=a("a"),FJo=o("TFConvBertModel"),CJo=o(" (ConvBERT model)"),MJo=l(),p0=a("li"),Pme=a("strong"),EJo=o("convnext"),yJo=o(" \u2014 "),hq=a("a"),wJo=o("TFConvNextModel"),AJo=o(" (ConvNext model)"),LJo=l(),_0=a("li"),$me=a("strong"),BJo=o("ctrl"),xJo=o(" \u2014 "),pq=a("a"),kJo=o("TFCTRLModel"),RJo=o(" (CTRL model)"),SJo=l(),u0=a("li"),Ime=a("strong"),PJo=o("deberta"),$Jo=o(" \u2014 "),_q=a("a"),IJo=o("TFDebertaModel"),jJo=o(" (DeBERTa model)"),DJo=l(),b0=a("li"),jme=a("strong"),NJo=o("deberta-v2"),qJo=o(" \u2014 "),uq=a("a"),OJo=o("TFDebertaV2Model"),GJo=o(" (DeBERTa-v2 model)"),XJo=l(),v0=a("li"),Dme=a("strong"),VJo=o("distilbert"),zJo=o(" \u2014 "),bq=a("a"),WJo=o("TFDistilBertModel"),QJo=o(" (DistilBERT model)"),HJo=l(),T0=a("li"),Nme=a("strong"),UJo=o("dpr"),JJo=o(" \u2014 "),vq=a("a"),YJo=o("TFDPRQuestionEncoder"),KJo=o(" (DPR model)"),ZJo=l(),F0=a("li"),qme=a("strong"),eYo=o("electra"),oYo=o(" \u2014 "),Tq=a("a"),rYo=o("TFElectraModel"),tYo=o(" (ELECTRA model)"),aYo=l(),C0=a("li"),Ome=a("strong"),nYo=o("flaubert"),sYo=o(" \u2014 "),Fq=a("a"),lYo=o("TFFlaubertModel"),iYo=o(" (FlauBERT model)"),dYo=l(),Os=a("li"),Gme=a("strong"),cYo=o("funnel"),fYo=o(" \u2014 "),Cq=a("a"),mYo=o("TFFunnelModel"),gYo=o(" or "),Mq=a("a"),hYo=o("TFFunnelBaseModel"),pYo=o(" (Funnel Transformer model)"),_Yo=l(),M0=a("li"),Xme=a("strong"),uYo=o("gpt2"),bYo=o(" \u2014 "),Eq=a("a"),vYo=o("TFGPT2Model"),TYo=o(" (OpenAI GPT-2 model)"),FYo=l(),E0=a("li"),Vme=a("strong"),CYo=o("hubert"),MYo=o(" \u2014 "),yq=a("a"),EYo=o("TFHubertModel"),yYo=o(" (Hubert model)"),wYo=l(),y0=a("li"),zme=a("strong"),AYo=o("layoutlm"),LYo=o(" \u2014 "),wq=a("a"),BYo=o("TFLayoutLMModel"),xYo=o(" (LayoutLM model)"),kYo=l(),w0=a("li"),Wme=a("strong"),RYo=o("led"),SYo=o(" \u2014 "),Aq=a("a"),PYo=o("TFLEDModel"),$Yo=o(" (LED model)"),IYo=l(),A0=a("li"),Qme=a("strong"),jYo=o("longformer"),DYo=o(" \u2014 "),Lq=a("a"),NYo=o("TFLongformerModel"),qYo=o(" (Longformer model)"),OYo=l(),L0=a("li"),Hme=a("strong"),GYo=o("lxmert"),XYo=o(" \u2014 "),Bq=a("a"),VYo=o("TFLxmertModel"),zYo=o(" (LXMERT model)"),WYo=l(),B0=a("li"),Ume=a("strong"),QYo=o("marian"),HYo=o(" \u2014 "),xq=a("a"),UYo=o("TFMarianModel"),JYo=o(" (Marian model)"),YYo=l(),x0=a("li"),Jme=a("strong"),KYo=o("mbart"),ZYo=o(" \u2014 "),kq=a("a"),eKo=o("TFMBartModel"),oKo=o(" (mBART model)"),rKo=l(),k0=a("li"),Yme=a("strong"),tKo=o("mobilebert"),aKo=o(" \u2014 "),Rq=a("a"),nKo=o("TFMobileBertModel"),sKo=o(" (MobileBERT model)"),lKo=l(),R0=a("li"),Kme=a("strong"),iKo=o("mpnet"),dKo=o(" \u2014 "),Sq=a("a"),cKo=o("TFMPNetModel"),fKo=o(" (MPNet model)"),mKo=l(),S0=a("li"),Zme=a("strong"),gKo=o("mt5"),hKo=o(" \u2014 "),Pq=a("a"),pKo=o("TFMT5Model"),_Ko=o(" (mT5 model)"),uKo=l(),P0=a("li"),ege=a("strong"),bKo=o("openai-gpt"),vKo=o(" \u2014 "),$q=a("a"),TKo=o("TFOpenAIGPTModel"),FKo=o(" (OpenAI GPT model)"),CKo=l(),$0=a("li"),oge=a("strong"),MKo=o("pegasus"),EKo=o(" \u2014 "),Iq=a("a"),yKo=o("TFPegasusModel"),wKo=o(" (Pegasus model)"),AKo=l(),I0=a("li"),rge=a("strong"),LKo=o("rembert"),BKo=o(" \u2014 "),jq=a("a"),xKo=o("TFRemBertModel"),kKo=o(" (RemBERT model)"),RKo=l(),j0=a("li"),tge=a("strong"),SKo=o("roberta"),PKo=o(" \u2014 "),Dq=a("a"),$Ko=o("TFRobertaModel"),IKo=o(" (RoBERTa model)"),jKo=l(),D0=a("li"),age=a("strong"),DKo=o("roformer"),NKo=o(" \u2014 "),Nq=a("a"),qKo=o("TFRoFormerModel"),OKo=o(" (RoFormer model)"),GKo=l(),N0=a("li"),nge=a("strong"),XKo=o("speech_to_text"),VKo=o(" \u2014 "),qq=a("a"),zKo=o("TFSpeech2TextModel"),WKo=o(" (Speech2Text model)"),QKo=l(),q0=a("li"),sge=a("strong"),HKo=o("t5"),UKo=o(" \u2014 "),Oq=a("a"),JKo=o("TFT5Model"),YKo=o(" (T5 model)"),KKo=l(),O0=a("li"),lge=a("strong"),ZKo=o("tapas"),eZo=o(" \u2014 "),Gq=a("a"),oZo=o("TFTapasModel"),rZo=o(" (TAPAS model)"),tZo=l(),G0=a("li"),ige=a("strong"),aZo=o("transfo-xl"),nZo=o(" \u2014 "),Xq=a("a"),sZo=o("TFTransfoXLModel"),lZo=o(" (Transformer-XL model)"),iZo=l(),X0=a("li"),dge=a("strong"),dZo=o("vit"),cZo=o(" \u2014 "),Vq=a("a"),fZo=o("TFViTModel"),mZo=o(" (ViT model)"),gZo=l(),V0=a("li"),cge=a("strong"),hZo=o("wav2vec2"),pZo=o(" \u2014 "),zq=a("a"),_Zo=o("TFWav2Vec2Model"),uZo=o(" (Wav2Vec2 model)"),bZo=l(),z0=a("li"),fge=a("strong"),vZo=o("xlm"),TZo=o(" \u2014 "),Wq=a("a"),FZo=o("TFXLMModel"),CZo=o(" (XLM model)"),MZo=l(),W0=a("li"),mge=a("strong"),EZo=o("xlm-roberta"),yZo=o(" \u2014 "),Qq=a("a"),wZo=o("TFXLMRobertaModel"),AZo=o(" (XLM-RoBERTa model)"),LZo=l(),Q0=a("li"),gge=a("strong"),BZo=o("xlnet"),xZo=o(" \u2014 "),Hq=a("a"),kZo=o("TFXLNetModel"),RZo=o(" (XLNet model)"),SZo=l(),hge=a("p"),PZo=o("Examples:"),$Zo=l(),f(jy.$$.fragment),yke=l(),_c=a("h2"),H0=a("a"),pge=a("span"),f(Dy.$$.fragment),IZo=l(),_ge=a("span"),jZo=o("TFAutoModelForPreTraining"),wke=l(),Tr=a("div"),f(Ny.$$.fragment),DZo=l(),uc=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uge=a("code"),qZo=o("from_pretrained()"),OZo=o("class method or the "),bge=a("code"),GZo=o("from_config()"),XZo=o(`class
method.`),VZo=l(),qy=a("p"),zZo=o("This class cannot be instantiated directly using "),vge=a("code"),WZo=o("__init__()"),QZo=o(" (throws an error)."),HZo=l(),ht=a("div"),f(Oy.$$.fragment),UZo=l(),Tge=a("p"),JZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YZo=l(),bc=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cge=a("code"),oer=o("from_pretrained()"),rer=o("to load the model weights."),ter=l(),Mge=a("p"),aer=o("Examples:"),ner=l(),f(Gy.$$.fragment),ser=l(),po=a("div"),f(Xy.$$.fragment),ler=l(),Ege=a("p"),ier=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),der=l(),un=a("p"),cer=o("The model class to instantiate is selected based on the "),yge=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),H=a("ul"),U0=a("li"),Lge=a("strong"),ber=o("albert"),ver=o(" \u2014 "),Uq=a("a"),Ter=o("TFAlbertForPreTraining"),Fer=o(" (ALBERT model)"),Cer=l(),J0=a("li"),Bge=a("strong"),Mer=o("bart"),Eer=o(" \u2014 "),Jq=a("a"),yer=o("TFBartForConditionalGeneration"),wer=o(" (BART model)"),Aer=l(),Y0=a("li"),xge=a("strong"),Ler=o("bert"),Ber=o(" \u2014 "),Yq=a("a"),xer=o("TFBertForPreTraining"),ker=o(" (BERT model)"),Rer=l(),K0=a("li"),kge=a("strong"),Ser=o("camembert"),Per=o(" \u2014 "),Kq=a("a"),$er=o("TFCamembertForMaskedLM"),Ier=o(" (CamemBERT model)"),jer=l(),Z0=a("li"),Rge=a("strong"),Der=o("ctrl"),Ner=o(" \u2014 "),Zq=a("a"),qer=o("TFCTRLLMHeadModel"),Oer=o(" (CTRL model)"),Ger=l(),eT=a("li"),Sge=a("strong"),Xer=o("distilbert"),Ver=o(" \u2014 "),eO=a("a"),zer=o("TFDistilBertForMaskedLM"),Wer=o(" (DistilBERT model)"),Qer=l(),oT=a("li"),Pge=a("strong"),Her=o("electra"),Uer=o(" \u2014 "),oO=a("a"),Jer=o("TFElectraForPreTraining"),Yer=o(" (ELECTRA model)"),Ker=l(),rT=a("li"),$ge=a("strong"),Zer=o("flaubert"),eor=o(" \u2014 "),rO=a("a"),oor=o("TFFlaubertWithLMHeadModel"),ror=o(" (FlauBERT model)"),tor=l(),tT=a("li"),Ige=a("strong"),aor=o("funnel"),nor=o(" \u2014 "),tO=a("a"),sor=o("TFFunnelForPreTraining"),lor=o(" (Funnel Transformer model)"),ior=l(),aT=a("li"),jge=a("strong"),dor=o("gpt2"),cor=o(" \u2014 "),aO=a("a"),mor=o("TFGPT2LMHeadModel"),gor=o(" (OpenAI GPT-2 model)"),hor=l(),nT=a("li"),Dge=a("strong"),por=o("layoutlm"),_or=o(" \u2014 "),nO=a("a"),uor=o("TFLayoutLMForMaskedLM"),bor=o(" (LayoutLM model)"),vor=l(),sT=a("li"),Nge=a("strong"),Tor=o("lxmert"),For=o(" \u2014 "),sO=a("a"),Cor=o("TFLxmertForPreTraining"),Mor=o(" (LXMERT model)"),Eor=l(),lT=a("li"),qge=a("strong"),yor=o("mobilebert"),wor=o(" \u2014 "),lO=a("a"),Aor=o("TFMobileBertForPreTraining"),Lor=o(" (MobileBERT model)"),Bor=l(),iT=a("li"),Oge=a("strong"),xor=o("mpnet"),kor=o(" \u2014 "),iO=a("a"),Ror=o("TFMPNetForMaskedLM"),Sor=o(" (MPNet model)"),Por=l(),dT=a("li"),Gge=a("strong"),$or=o("openai-gpt"),Ior=o(" \u2014 "),dO=a("a"),jor=o("TFOpenAIGPTLMHeadModel"),Dor=o(" (OpenAI GPT model)"),Nor=l(),cT=a("li"),Xge=a("strong"),qor=o("roberta"),Oor=o(" \u2014 "),cO=a("a"),Gor=o("TFRobertaForMaskedLM"),Xor=o(" (RoBERTa model)"),Vor=l(),fT=a("li"),Vge=a("strong"),zor=o("t5"),Wor=o(" \u2014 "),fO=a("a"),Qor=o("TFT5ForConditionalGeneration"),Hor=o(" (T5 model)"),Uor=l(),mT=a("li"),zge=a("strong"),Jor=o("tapas"),Yor=o(" \u2014 "),mO=a("a"),Kor=o("TFTapasForMaskedLM"),Zor=o(" (TAPAS model)"),err=l(),gT=a("li"),Wge=a("strong"),orr=o("transfo-xl"),rrr=o(" \u2014 "),gO=a("a"),trr=o("TFTransfoXLLMHeadModel"),arr=o(" (Transformer-XL model)"),nrr=l(),hT=a("li"),Qge=a("strong"),srr=o("xlm"),lrr=o(" \u2014 "),hO=a("a"),irr=o("TFXLMWithLMHeadModel"),drr=o(" (XLM model)"),crr=l(),pT=a("li"),Hge=a("strong"),frr=o("xlm-roberta"),mrr=o(" \u2014 "),pO=a("a"),grr=o("TFXLMRobertaForMaskedLM"),hrr=o(" (XLM-RoBERTa model)"),prr=l(),_T=a("li"),Uge=a("strong"),_rr=o("xlnet"),urr=o(" \u2014 "),_O=a("a"),brr=o("TFXLNetLMHeadModel"),vrr=o(" (XLNet model)"),Trr=l(),Jge=a("p"),Frr=o("Examples:"),Crr=l(),f(Vy.$$.fragment),Ake=l(),vc=a("h2"),uT=a("a"),Yge=a("span"),f(zy.$$.fragment),Mrr=l(),Kge=a("span"),Err=o("TFAutoModelForCausalLM"),Lke=l(),Fr=a("div"),f(Wy.$$.fragment),yrr=l(),Tc=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zge=a("code"),Arr=o("from_pretrained()"),Lrr=o("class method or the "),ehe=a("code"),Brr=o("from_config()"),xrr=o(`class
method.`),krr=l(),Qy=a("p"),Rrr=o("This class cannot be instantiated directly using "),ohe=a("code"),Srr=o("__init__()"),Prr=o(" (throws an error)."),$rr=l(),pt=a("div"),f(Hy.$$.fragment),Irr=l(),rhe=a("p"),jrr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Drr=l(),Fc=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),qrr=o("not"),Orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ahe=a("code"),Grr=o("from_pretrained()"),Xrr=o("to load the model weights."),Vrr=l(),nhe=a("p"),zrr=o("Examples:"),Wrr=l(),f(Uy.$$.fragment),Qrr=l(),_o=a("div"),f(Jy.$$.fragment),Hrr=l(),she=a("p"),Urr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jrr=l(),bn=a("p"),Yrr=o("The model class to instantiate is selected based on the "),lhe=a("code"),Krr=o("model_type"),Zrr=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(":"),atr=l(),_e=a("ul"),bT=a("li"),che=a("strong"),ntr=o("bert"),str=o(" \u2014 "),uO=a("a"),ltr=o("TFBertLMHeadModel"),itr=o(" (BERT model)"),dtr=l(),vT=a("li"),fhe=a("strong"),ctr=o("ctrl"),ftr=o(" \u2014 "),bO=a("a"),mtr=o("TFCTRLLMHeadModel"),gtr=o(" (CTRL model)"),htr=l(),TT=a("li"),mhe=a("strong"),ptr=o("gpt2"),_tr=o(" \u2014 "),vO=a("a"),utr=o("TFGPT2LMHeadModel"),btr=o(" (OpenAI GPT-2 model)"),vtr=l(),FT=a("li"),ghe=a("strong"),Ttr=o("openai-gpt"),Ftr=o(" \u2014 "),TO=a("a"),Ctr=o("TFOpenAIGPTLMHeadModel"),Mtr=o(" (OpenAI GPT model)"),Etr=l(),CT=a("li"),hhe=a("strong"),ytr=o("rembert"),wtr=o(" \u2014 "),FO=a("a"),Atr=o("TFRemBertForCausalLM"),Ltr=o(" (RemBERT model)"),Btr=l(),MT=a("li"),phe=a("strong"),xtr=o("roberta"),ktr=o(" \u2014 "),CO=a("a"),Rtr=o("TFRobertaForCausalLM"),Str=o(" (RoBERTa model)"),Ptr=l(),ET=a("li"),_he=a("strong"),$tr=o("roformer"),Itr=o(" \u2014 "),MO=a("a"),jtr=o("TFRoFormerForCausalLM"),Dtr=o(" (RoFormer model)"),Ntr=l(),yT=a("li"),uhe=a("strong"),qtr=o("transfo-xl"),Otr=o(" \u2014 "),EO=a("a"),Gtr=o("TFTransfoXLLMHeadModel"),Xtr=o(" (Transformer-XL model)"),Vtr=l(),wT=a("li"),bhe=a("strong"),ztr=o("xlm"),Wtr=o(" \u2014 "),yO=a("a"),Qtr=o("TFXLMWithLMHeadModel"),Htr=o(" (XLM model)"),Utr=l(),AT=a("li"),vhe=a("strong"),Jtr=o("xlnet"),Ytr=o(" \u2014 "),wO=a("a"),Ktr=o("TFXLNetLMHeadModel"),Ztr=o(" (XLNet model)"),ear=l(),The=a("p"),oar=o("Examples:"),rar=l(),f(Yy.$$.fragment),Bke=l(),Cc=a("h2"),LT=a("a"),Fhe=a("span"),f(Ky.$$.fragment),tar=l(),Che=a("span"),aar=o("TFAutoModelForImageClassification"),xke=l(),Cr=a("div"),f(Zy.$$.fragment),nar=l(),Mc=a("p"),sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mhe=a("code"),lar=o("from_pretrained()"),iar=o("class method or the "),Ehe=a("code"),dar=o("from_config()"),car=o(`class
method.`),far=l(),ew=a("p"),mar=o("This class cannot be instantiated directly using "),yhe=a("code"),gar=o("__init__()"),har=o(" (throws an error)."),par=l(),_t=a("div"),f(ow.$$.fragment),_ar=l(),whe=a("p"),uar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bar=l(),Ec=a("p"),Tar=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),Far=o("not"),Car=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lhe=a("code"),Mar=o("from_pretrained()"),Ear=o("to load the model weights."),yar=l(),Bhe=a("p"),war=o("Examples:"),Aar=l(),f(rw.$$.fragment),Lar=l(),uo=a("div"),f(tw.$$.fragment),Bar=l(),xhe=a("p"),xar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kar=l(),vn=a("p"),Rar=o("The model class to instantiate is selected based on the "),khe=a("code"),Sar=o("model_type"),Par=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),$ar=o("pretrained_model_name_or_path"),Iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(":"),Nar=l(),aw=a("ul"),BT=a("li"),Phe=a("strong"),qar=o("convnext"),Oar=o(" \u2014 "),AO=a("a"),Gar=o("TFConvNextForImageClassification"),Xar=o(" (ConvNext model)"),Var=l(),xT=a("li"),$he=a("strong"),zar=o("vit"),War=o(" \u2014 "),LO=a("a"),Qar=o("TFViTForImageClassification"),Har=o(" (ViT model)"),Uar=l(),Ihe=a("p"),Jar=o("Examples:"),Yar=l(),f(nw.$$.fragment),kke=l(),yc=a("h2"),kT=a("a"),jhe=a("span"),f(sw.$$.fragment),Kar=l(),Dhe=a("span"),Zar=o("TFAutoModelForMaskedLM"),Rke=l(),Mr=a("div"),f(lw.$$.fragment),enr=l(),wc=a("p"),onr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nhe=a("code"),rnr=o("from_pretrained()"),tnr=o("class method or the "),qhe=a("code"),anr=o("from_config()"),nnr=o(`class
method.`),snr=l(),iw=a("p"),lnr=o("This class cannot be instantiated directly using "),Ohe=a("code"),inr=o("__init__()"),dnr=o(" (throws an error)."),cnr=l(),ut=a("div"),f(dw.$$.fragment),fnr=l(),Ghe=a("p"),mnr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gnr=l(),Ac=a("p"),hnr=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),pnr=o("not"),_nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vhe=a("code"),unr=o("from_pretrained()"),bnr=o("to load the model weights."),vnr=l(),zhe=a("p"),Tnr=o("Examples:"),Fnr=l(),f(cw.$$.fragment),Cnr=l(),bo=a("div"),f(fw.$$.fragment),Mnr=l(),Whe=a("p"),Enr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ynr=l(),Tn=a("p"),wnr=o("The model class to instantiate is selected based on the "),Qhe=a("code"),Anr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),Bnr=o("pretrained_model_name_or_path"),xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),knr=o("pretrained_model_name_or_path"),Rnr=o(":"),Snr=l(),Y=a("ul"),RT=a("li"),Jhe=a("strong"),Pnr=o("albert"),$nr=o(" \u2014 "),BO=a("a"),Inr=o("TFAlbertForMaskedLM"),jnr=o(" (ALBERT model)"),Dnr=l(),ST=a("li"),Yhe=a("strong"),Nnr=o("bert"),qnr=o(" \u2014 "),xO=a("a"),Onr=o("TFBertForMaskedLM"),Gnr=o(" (BERT model)"),Xnr=l(),PT=a("li"),Khe=a("strong"),Vnr=o("camembert"),znr=o(" \u2014 "),kO=a("a"),Wnr=o("TFCamembertForMaskedLM"),Qnr=o(" (CamemBERT model)"),Hnr=l(),$T=a("li"),Zhe=a("strong"),Unr=o("convbert"),Jnr=o(" \u2014 "),RO=a("a"),Ynr=o("TFConvBertForMaskedLM"),Knr=o(" (ConvBERT model)"),Znr=l(),IT=a("li"),epe=a("strong"),esr=o("deberta"),osr=o(" \u2014 "),SO=a("a"),rsr=o("TFDebertaForMaskedLM"),tsr=o(" (DeBERTa model)"),asr=l(),jT=a("li"),ope=a("strong"),nsr=o("deberta-v2"),ssr=o(" \u2014 "),PO=a("a"),lsr=o("TFDebertaV2ForMaskedLM"),isr=o(" (DeBERTa-v2 model)"),dsr=l(),DT=a("li"),rpe=a("strong"),csr=o("distilbert"),fsr=o(" \u2014 "),$O=a("a"),msr=o("TFDistilBertForMaskedLM"),gsr=o(" (DistilBERT model)"),hsr=l(),NT=a("li"),tpe=a("strong"),psr=o("electra"),_sr=o(" \u2014 "),IO=a("a"),usr=o("TFElectraForMaskedLM"),bsr=o(" (ELECTRA model)"),vsr=l(),qT=a("li"),ape=a("strong"),Tsr=o("flaubert"),Fsr=o(" \u2014 "),jO=a("a"),Csr=o("TFFlaubertWithLMHeadModel"),Msr=o(" (FlauBERT model)"),Esr=l(),OT=a("li"),npe=a("strong"),ysr=o("funnel"),wsr=o(" \u2014 "),DO=a("a"),Asr=o("TFFunnelForMaskedLM"),Lsr=o(" (Funnel Transformer model)"),Bsr=l(),GT=a("li"),spe=a("strong"),xsr=o("layoutlm"),ksr=o(" \u2014 "),NO=a("a"),Rsr=o("TFLayoutLMForMaskedLM"),Ssr=o(" (LayoutLM model)"),Psr=l(),XT=a("li"),lpe=a("strong"),$sr=o("longformer"),Isr=o(" \u2014 "),qO=a("a"),jsr=o("TFLongformerForMaskedLM"),Dsr=o(" (Longformer model)"),Nsr=l(),VT=a("li"),ipe=a("strong"),qsr=o("mobilebert"),Osr=o(" \u2014 "),OO=a("a"),Gsr=o("TFMobileBertForMaskedLM"),Xsr=o(" (MobileBERT model)"),Vsr=l(),zT=a("li"),dpe=a("strong"),zsr=o("mpnet"),Wsr=o(" \u2014 "),GO=a("a"),Qsr=o("TFMPNetForMaskedLM"),Hsr=o(" (MPNet model)"),Usr=l(),WT=a("li"),cpe=a("strong"),Jsr=o("rembert"),Ysr=o(" \u2014 "),XO=a("a"),Ksr=o("TFRemBertForMaskedLM"),Zsr=o(" (RemBERT model)"),elr=l(),QT=a("li"),fpe=a("strong"),olr=o("roberta"),rlr=o(" \u2014 "),VO=a("a"),tlr=o("TFRobertaForMaskedLM"),alr=o(" (RoBERTa model)"),nlr=l(),HT=a("li"),mpe=a("strong"),slr=o("roformer"),llr=o(" \u2014 "),zO=a("a"),ilr=o("TFRoFormerForMaskedLM"),dlr=o(" (RoFormer model)"),clr=l(),UT=a("li"),gpe=a("strong"),flr=o("tapas"),mlr=o(" \u2014 "),WO=a("a"),glr=o("TFTapasForMaskedLM"),hlr=o(" (TAPAS model)"),plr=l(),JT=a("li"),hpe=a("strong"),_lr=o("xlm"),ulr=o(" \u2014 "),QO=a("a"),blr=o("TFXLMWithLMHeadModel"),vlr=o(" (XLM model)"),Tlr=l(),YT=a("li"),ppe=a("strong"),Flr=o("xlm-roberta"),Clr=o(" \u2014 "),HO=a("a"),Mlr=o("TFXLMRobertaForMaskedLM"),Elr=o(" (XLM-RoBERTa model)"),ylr=l(),_pe=a("p"),wlr=o("Examples:"),Alr=l(),f(mw.$$.fragment),Ske=l(),Lc=a("h2"),KT=a("a"),upe=a("span"),f(gw.$$.fragment),Llr=l(),bpe=a("span"),Blr=o("TFAutoModelForSeq2SeqLM"),Pke=l(),Er=a("div"),f(hw.$$.fragment),xlr=l(),Bc=a("p"),klr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vpe=a("code"),Rlr=o("from_pretrained()"),Slr=o("class method or the "),Tpe=a("code"),Plr=o("from_config()"),$lr=o(`class
method.`),Ilr=l(),pw=a("p"),jlr=o("This class cannot be instantiated directly using "),Fpe=a("code"),Dlr=o("__init__()"),Nlr=o(" (throws an error)."),qlr=l(),bt=a("div"),f(_w.$$.fragment),Olr=l(),Cpe=a("p"),Glr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xlr=l(),xc=a("p"),Vlr=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),zlr=o("not"),Wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=a("code"),Qlr=o("from_pretrained()"),Hlr=o("to load the model weights."),Ulr=l(),ype=a("p"),Jlr=o("Examples:"),Ylr=l(),f(uw.$$.fragment),Klr=l(),vo=a("div"),f(bw.$$.fragment),Zlr=l(),wpe=a("p"),eir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oir=l(),Fn=a("p"),rir=o("The model class to instantiate is selected based on the "),Ape=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),ue=a("ul"),ZT=a("li"),xpe=a("strong"),cir=o("bart"),fir=o(" \u2014 "),UO=a("a"),mir=o("TFBartForConditionalGeneration"),gir=o(" (BART model)"),hir=l(),e7=a("li"),kpe=a("strong"),pir=o("blenderbot"),_ir=o(" \u2014 "),JO=a("a"),uir=o("TFBlenderbotForConditionalGeneration"),bir=o(" (Blenderbot model)"),vir=l(),o7=a("li"),Rpe=a("strong"),Tir=o("blenderbot-small"),Fir=o(" \u2014 "),YO=a("a"),Cir=o("TFBlenderbotSmallForConditionalGeneration"),Mir=o(" (BlenderbotSmall model)"),Eir=l(),r7=a("li"),Spe=a("strong"),yir=o("encoder-decoder"),wir=o(" \u2014 "),KO=a("a"),Air=o("TFEncoderDecoderModel"),Lir=o(" (Encoder decoder model)"),Bir=l(),t7=a("li"),Ppe=a("strong"),xir=o("led"),kir=o(" \u2014 "),ZO=a("a"),Rir=o("TFLEDForConditionalGeneration"),Sir=o(" (LED model)"),Pir=l(),a7=a("li"),$pe=a("strong"),$ir=o("marian"),Iir=o(" \u2014 "),eG=a("a"),jir=o("TFMarianMTModel"),Dir=o(" (Marian model)"),Nir=l(),n7=a("li"),Ipe=a("strong"),qir=o("mbart"),Oir=o(" \u2014 "),oG=a("a"),Gir=o("TFMBartForConditionalGeneration"),Xir=o(" (mBART model)"),Vir=l(),s7=a("li"),jpe=a("strong"),zir=o("mt5"),Wir=o(" \u2014 "),rG=a("a"),Qir=o("TFMT5ForConditionalGeneration"),Hir=o(" (mT5 model)"),Uir=l(),l7=a("li"),Dpe=a("strong"),Jir=o("pegasus"),Yir=o(" \u2014 "),tG=a("a"),Kir=o("TFPegasusForConditionalGeneration"),Zir=o(" (Pegasus model)"),edr=l(),i7=a("li"),Npe=a("strong"),odr=o("t5"),rdr=o(" \u2014 "),aG=a("a"),tdr=o("TFT5ForConditionalGeneration"),adr=o(" (T5 model)"),ndr=l(),qpe=a("p"),sdr=o("Examples:"),ldr=l(),f(vw.$$.fragment),$ke=l(),kc=a("h2"),d7=a("a"),Ope=a("span"),f(Tw.$$.fragment),idr=l(),Gpe=a("span"),ddr=o("TFAutoModelForSequenceClassification"),Ike=l(),yr=a("div"),f(Fw.$$.fragment),cdr=l(),Rc=a("p"),fdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xpe=a("code"),mdr=o("from_pretrained()"),gdr=o("class method or the "),Vpe=a("code"),hdr=o("from_config()"),pdr=o(`class
method.`),_dr=l(),Cw=a("p"),udr=o("This class cannot be instantiated directly using "),zpe=a("code"),bdr=o("__init__()"),vdr=o(" (throws an error)."),Tdr=l(),vt=a("div"),f(Mw.$$.fragment),Fdr=l(),Wpe=a("p"),Cdr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mdr=l(),Sc=a("p"),Edr=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),ydr=o("not"),wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=a("code"),Adr=o("from_pretrained()"),Ldr=o("to load the model weights."),Bdr=l(),Upe=a("p"),xdr=o("Examples:"),kdr=l(),f(Ew.$$.fragment),Rdr=l(),To=a("div"),f(yw.$$.fragment),Sdr=l(),Jpe=a("p"),Pdr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$dr=l(),Cn=a("p"),Idr=o("The model class to instantiate is selected based on the "),Ype=a("code"),jdr=o("model_type"),Ddr=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),Ndr=o("pretrained_model_name_or_path"),qdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),Odr=o("pretrained_model_name_or_path"),Gdr=o(":"),Xdr=l(),V=a("ul"),c7=a("li"),e_e=a("strong"),Vdr=o("albert"),zdr=o(" \u2014 "),nG=a("a"),Wdr=o("TFAlbertForSequenceClassification"),Qdr=o(" (ALBERT model)"),Hdr=l(),f7=a("li"),o_e=a("strong"),Udr=o("bert"),Jdr=o(" \u2014 "),sG=a("a"),Ydr=o("TFBertForSequenceClassification"),Kdr=o(" (BERT model)"),Zdr=l(),m7=a("li"),r_e=a("strong"),ecr=o("camembert"),ocr=o(" \u2014 "),lG=a("a"),rcr=o("TFCamembertForSequenceClassification"),tcr=o(" (CamemBERT model)"),acr=l(),g7=a("li"),t_e=a("strong"),ncr=o("convbert"),scr=o(" \u2014 "),iG=a("a"),lcr=o("TFConvBertForSequenceClassification"),icr=o(" (ConvBERT model)"),dcr=l(),h7=a("li"),a_e=a("strong"),ccr=o("ctrl"),fcr=o(" \u2014 "),dG=a("a"),mcr=o("TFCTRLForSequenceClassification"),gcr=o(" (CTRL model)"),hcr=l(),p7=a("li"),n_e=a("strong"),pcr=o("deberta"),_cr=o(" \u2014 "),cG=a("a"),ucr=o("TFDebertaForSequenceClassification"),bcr=o(" (DeBERTa model)"),vcr=l(),_7=a("li"),s_e=a("strong"),Tcr=o("deberta-v2"),Fcr=o(" \u2014 "),fG=a("a"),Ccr=o("TFDebertaV2ForSequenceClassification"),Mcr=o(" (DeBERTa-v2 model)"),Ecr=l(),u7=a("li"),l_e=a("strong"),ycr=o("distilbert"),wcr=o(" \u2014 "),mG=a("a"),Acr=o("TFDistilBertForSequenceClassification"),Lcr=o(" (DistilBERT model)"),Bcr=l(),b7=a("li"),i_e=a("strong"),xcr=o("electra"),kcr=o(" \u2014 "),gG=a("a"),Rcr=o("TFElectraForSequenceClassification"),Scr=o(" (ELECTRA model)"),Pcr=l(),v7=a("li"),d_e=a("strong"),$cr=o("flaubert"),Icr=o(" \u2014 "),hG=a("a"),jcr=o("TFFlaubertForSequenceClassification"),Dcr=o(" (FlauBERT model)"),Ncr=l(),T7=a("li"),c_e=a("strong"),qcr=o("funnel"),Ocr=o(" \u2014 "),pG=a("a"),Gcr=o("TFFunnelForSequenceClassification"),Xcr=o(" (Funnel Transformer model)"),Vcr=l(),F7=a("li"),f_e=a("strong"),zcr=o("gpt2"),Wcr=o(" \u2014 "),_G=a("a"),Qcr=o("TFGPT2ForSequenceClassification"),Hcr=o(" (OpenAI GPT-2 model)"),Ucr=l(),C7=a("li"),m_e=a("strong"),Jcr=o("layoutlm"),Ycr=o(" \u2014 "),uG=a("a"),Kcr=o("TFLayoutLMForSequenceClassification"),Zcr=o(" (LayoutLM model)"),efr=l(),M7=a("li"),g_e=a("strong"),ofr=o("longformer"),rfr=o(" \u2014 "),bG=a("a"),tfr=o("TFLongformerForSequenceClassification"),afr=o(" (Longformer model)"),nfr=l(),E7=a("li"),h_e=a("strong"),sfr=o("mobilebert"),lfr=o(" \u2014 "),vG=a("a"),ifr=o("TFMobileBertForSequenceClassification"),dfr=o(" (MobileBERT model)"),cfr=l(),y7=a("li"),p_e=a("strong"),ffr=o("mpnet"),mfr=o(" \u2014 "),TG=a("a"),gfr=o("TFMPNetForSequenceClassification"),hfr=o(" (MPNet model)"),pfr=l(),w7=a("li"),__e=a("strong"),_fr=o("openai-gpt"),ufr=o(" \u2014 "),FG=a("a"),bfr=o("TFOpenAIGPTForSequenceClassification"),vfr=o(" (OpenAI GPT model)"),Tfr=l(),A7=a("li"),u_e=a("strong"),Ffr=o("rembert"),Cfr=o(" \u2014 "),CG=a("a"),Mfr=o("TFRemBertForSequenceClassification"),Efr=o(" (RemBERT model)"),yfr=l(),L7=a("li"),b_e=a("strong"),wfr=o("roberta"),Afr=o(" \u2014 "),MG=a("a"),Lfr=o("TFRobertaForSequenceClassification"),Bfr=o(" (RoBERTa model)"),xfr=l(),B7=a("li"),v_e=a("strong"),kfr=o("roformer"),Rfr=o(" \u2014 "),EG=a("a"),Sfr=o("TFRoFormerForSequenceClassification"),Pfr=o(" (RoFormer model)"),$fr=l(),x7=a("li"),T_e=a("strong"),Ifr=o("tapas"),jfr=o(" \u2014 "),yG=a("a"),Dfr=o("TFTapasForSequenceClassification"),Nfr=o(" (TAPAS model)"),qfr=l(),k7=a("li"),F_e=a("strong"),Ofr=o("transfo-xl"),Gfr=o(" \u2014 "),wG=a("a"),Xfr=o("TFTransfoXLForSequenceClassification"),Vfr=o(" (Transformer-XL model)"),zfr=l(),R7=a("li"),C_e=a("strong"),Wfr=o("xlm"),Qfr=o(" \u2014 "),AG=a("a"),Hfr=o("TFXLMForSequenceClassification"),Ufr=o(" (XLM model)"),Jfr=l(),S7=a("li"),M_e=a("strong"),Yfr=o("xlm-roberta"),Kfr=o(" \u2014 "),LG=a("a"),Zfr=o("TFXLMRobertaForSequenceClassification"),emr=o(" (XLM-RoBERTa model)"),omr=l(),P7=a("li"),E_e=a("strong"),rmr=o("xlnet"),tmr=o(" \u2014 "),BG=a("a"),amr=o("TFXLNetForSequenceClassification"),nmr=o(" (XLNet model)"),smr=l(),y_e=a("p"),lmr=o("Examples:"),imr=l(),f(ww.$$.fragment),jke=l(),Pc=a("h2"),$7=a("a"),w_e=a("span"),f(Aw.$$.fragment),dmr=l(),A_e=a("span"),cmr=o("TFAutoModelForMultipleChoice"),Dke=l(),wr=a("div"),f(Lw.$$.fragment),fmr=l(),$c=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),L_e=a("code"),gmr=o("from_pretrained()"),hmr=o("class method or the "),B_e=a("code"),pmr=o("from_config()"),_mr=o(`class
method.`),umr=l(),Bw=a("p"),bmr=o("This class cannot be instantiated directly using "),x_e=a("code"),vmr=o("__init__()"),Tmr=o(" (throws an error)."),Fmr=l(),Tt=a("div"),f(xw.$$.fragment),Cmr=l(),k_e=a("p"),Mmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Emr=l(),Ic=a("p"),ymr=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),wmr=o("not"),Amr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S_e=a("code"),Lmr=o("from_pretrained()"),Bmr=o("to load the model weights."),xmr=l(),P_e=a("p"),kmr=o("Examples:"),Rmr=l(),f(kw.$$.fragment),Smr=l(),Fo=a("div"),f(Rw.$$.fragment),Pmr=l(),$_e=a("p"),$mr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Imr=l(),Mn=a("p"),jmr=o("The model class to instantiate is selected based on the "),I_e=a("code"),Dmr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),qmr=o("pretrained_model_name_or_path"),Omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Gmr=o("pretrained_model_name_or_path"),Xmr=o(":"),Vmr=l(),ae=a("ul"),I7=a("li"),N_e=a("strong"),zmr=o("albert"),Wmr=o(" \u2014 "),xG=a("a"),Qmr=o("TFAlbertForMultipleChoice"),Hmr=o(" (ALBERT model)"),Umr=l(),j7=a("li"),q_e=a("strong"),Jmr=o("bert"),Ymr=o(" \u2014 "),kG=a("a"),Kmr=o("TFBertForMultipleChoice"),Zmr=o(" (BERT model)"),egr=l(),D7=a("li"),O_e=a("strong"),ogr=o("camembert"),rgr=o(" \u2014 "),RG=a("a"),tgr=o("TFCamembertForMultipleChoice"),agr=o(" (CamemBERT model)"),ngr=l(),N7=a("li"),G_e=a("strong"),sgr=o("convbert"),lgr=o(" \u2014 "),SG=a("a"),igr=o("TFConvBertForMultipleChoice"),dgr=o(" (ConvBERT model)"),cgr=l(),q7=a("li"),X_e=a("strong"),fgr=o("distilbert"),mgr=o(" \u2014 "),PG=a("a"),ggr=o("TFDistilBertForMultipleChoice"),hgr=o(" (DistilBERT model)"),pgr=l(),O7=a("li"),V_e=a("strong"),_gr=o("electra"),ugr=o(" \u2014 "),$G=a("a"),bgr=o("TFElectraForMultipleChoice"),vgr=o(" (ELECTRA model)"),Tgr=l(),G7=a("li"),z_e=a("strong"),Fgr=o("flaubert"),Cgr=o(" \u2014 "),IG=a("a"),Mgr=o("TFFlaubertForMultipleChoice"),Egr=o(" (FlauBERT model)"),ygr=l(),X7=a("li"),W_e=a("strong"),wgr=o("funnel"),Agr=o(" \u2014 "),jG=a("a"),Lgr=o("TFFunnelForMultipleChoice"),Bgr=o(" (Funnel Transformer model)"),xgr=l(),V7=a("li"),Q_e=a("strong"),kgr=o("longformer"),Rgr=o(" \u2014 "),DG=a("a"),Sgr=o("TFLongformerForMultipleChoice"),Pgr=o(" (Longformer model)"),$gr=l(),z7=a("li"),H_e=a("strong"),Igr=o("mobilebert"),jgr=o(" \u2014 "),NG=a("a"),Dgr=o("TFMobileBertForMultipleChoice"),Ngr=o(" (MobileBERT model)"),qgr=l(),W7=a("li"),U_e=a("strong"),Ogr=o("mpnet"),Ggr=o(" \u2014 "),qG=a("a"),Xgr=o("TFMPNetForMultipleChoice"),Vgr=o(" (MPNet model)"),zgr=l(),Q7=a("li"),J_e=a("strong"),Wgr=o("rembert"),Qgr=o(" \u2014 "),OG=a("a"),Hgr=o("TFRemBertForMultipleChoice"),Ugr=o(" (RemBERT model)"),Jgr=l(),H7=a("li"),Y_e=a("strong"),Ygr=o("roberta"),Kgr=o(" \u2014 "),GG=a("a"),Zgr=o("TFRobertaForMultipleChoice"),ehr=o(" (RoBERTa model)"),ohr=l(),U7=a("li"),K_e=a("strong"),rhr=o("roformer"),thr=o(" \u2014 "),XG=a("a"),ahr=o("TFRoFormerForMultipleChoice"),nhr=o(" (RoFormer model)"),shr=l(),J7=a("li"),Z_e=a("strong"),lhr=o("xlm"),ihr=o(" \u2014 "),VG=a("a"),dhr=o("TFXLMForMultipleChoice"),chr=o(" (XLM model)"),fhr=l(),Y7=a("li"),eue=a("strong"),mhr=o("xlm-roberta"),ghr=o(" \u2014 "),zG=a("a"),hhr=o("TFXLMRobertaForMultipleChoice"),phr=o(" (XLM-RoBERTa model)"),_hr=l(),K7=a("li"),oue=a("strong"),uhr=o("xlnet"),bhr=o(" \u2014 "),WG=a("a"),vhr=o("TFXLNetForMultipleChoice"),Thr=o(" (XLNet model)"),Fhr=l(),rue=a("p"),Chr=o("Examples:"),Mhr=l(),f(Sw.$$.fragment),Nke=l(),jc=a("h2"),Z7=a("a"),tue=a("span"),f(Pw.$$.fragment),Ehr=l(),aue=a("span"),yhr=o("TFAutoModelForTableQuestionAnswering"),qke=l(),Ar=a("div"),f($w.$$.fragment),whr=l(),Dc=a("p"),Ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nue=a("code"),Lhr=o("from_pretrained()"),Bhr=o("class method or the "),sue=a("code"),xhr=o("from_config()"),khr=o(`class
method.`),Rhr=l(),Iw=a("p"),Shr=o("This class cannot be instantiated directly using "),lue=a("code"),Phr=o("__init__()"),$hr=o(" (throws an error)."),Ihr=l(),Ft=a("div"),f(jw.$$.fragment),jhr=l(),iue=a("p"),Dhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nhr=l(),Nc=a("p"),qhr=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),Ohr=o("not"),Ghr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),Xhr=o("from_pretrained()"),Vhr=o("to load the model weights."),zhr=l(),fue=a("p"),Whr=o("Examples:"),Qhr=l(),f(Dw.$$.fragment),Hhr=l(),Co=a("div"),f(Nw.$$.fragment),Uhr=l(),mue=a("p"),Jhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yhr=l(),En=a("p"),Khr=o("The model class to instantiate is selected based on the "),gue=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),_ue=a("ul"),eF=a("li"),uue=a("strong"),spr=o("tapas"),lpr=o(" \u2014 "),QG=a("a"),ipr=o("TFTapasForQuestionAnswering"),dpr=o(" (TAPAS model)"),cpr=l(),bue=a("p"),fpr=o("Examples:"),mpr=l(),f(qw.$$.fragment),Oke=l(),qc=a("h2"),oF=a("a"),vue=a("span"),f(Ow.$$.fragment),gpr=l(),Tue=a("span"),hpr=o("TFAutoModelForTokenClassification"),Gke=l(),Lr=a("div"),f(Gw.$$.fragment),ppr=l(),Oc=a("p"),_pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fue=a("code"),upr=o("from_pretrained()"),bpr=o("class method or the "),Cue=a("code"),vpr=o("from_config()"),Tpr=o(`class
method.`),Fpr=l(),Xw=a("p"),Cpr=o("This class cannot be instantiated directly using "),Mue=a("code"),Mpr=o("__init__()"),Epr=o(" (throws an error)."),ypr=l(),Ct=a("div"),f(Vw.$$.fragment),wpr=l(),Eue=a("p"),Apr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lpr=l(),Gc=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),xpr=o("not"),kpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wue=a("code"),Rpr=o("from_pretrained()"),Spr=o("to load the model weights."),Ppr=l(),Aue=a("p"),$pr=o("Examples:"),Ipr=l(),f(zw.$$.fragment),jpr=l(),Mo=a("div"),f(Ww.$$.fragment),Dpr=l(),Lue=a("p"),Npr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qpr=l(),yn=a("p"),Opr=o("The model class to instantiate is selected based on the "),Bue=a("code"),Gpr=o("model_type"),Xpr=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),Vpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(":"),Hpr=l(),K=a("ul"),rF=a("li"),Rue=a("strong"),Upr=o("albert"),Jpr=o(" \u2014 "),HG=a("a"),Ypr=o("TFAlbertForTokenClassification"),Kpr=o(" (ALBERT model)"),Zpr=l(),tF=a("li"),Sue=a("strong"),e_r=o("bert"),o_r=o(" \u2014 "),UG=a("a"),r_r=o("TFBertForTokenClassification"),t_r=o(" (BERT model)"),a_r=l(),aF=a("li"),Pue=a("strong"),n_r=o("camembert"),s_r=o(" \u2014 "),JG=a("a"),l_r=o("TFCamembertForTokenClassification"),i_r=o(" (CamemBERT model)"),d_r=l(),nF=a("li"),$ue=a("strong"),c_r=o("convbert"),f_r=o(" \u2014 "),YG=a("a"),m_r=o("TFConvBertForTokenClassification"),g_r=o(" (ConvBERT model)"),h_r=l(),sF=a("li"),Iue=a("strong"),p_r=o("deberta"),__r=o(" \u2014 "),KG=a("a"),u_r=o("TFDebertaForTokenClassification"),b_r=o(" (DeBERTa model)"),v_r=l(),lF=a("li"),jue=a("strong"),T_r=o("deberta-v2"),F_r=o(" \u2014 "),ZG=a("a"),C_r=o("TFDebertaV2ForTokenClassification"),M_r=o(" (DeBERTa-v2 model)"),E_r=l(),iF=a("li"),Due=a("strong"),y_r=o("distilbert"),w_r=o(" \u2014 "),eX=a("a"),A_r=o("TFDistilBertForTokenClassification"),L_r=o(" (DistilBERT model)"),B_r=l(),dF=a("li"),Nue=a("strong"),x_r=o("electra"),k_r=o(" \u2014 "),oX=a("a"),R_r=o("TFElectraForTokenClassification"),S_r=o(" (ELECTRA model)"),P_r=l(),cF=a("li"),que=a("strong"),$_r=o("flaubert"),I_r=o(" \u2014 "),rX=a("a"),j_r=o("TFFlaubertForTokenClassification"),D_r=o(" (FlauBERT model)"),N_r=l(),fF=a("li"),Oue=a("strong"),q_r=o("funnel"),O_r=o(" \u2014 "),tX=a("a"),G_r=o("TFFunnelForTokenClassification"),X_r=o(" (Funnel Transformer model)"),V_r=l(),mF=a("li"),Gue=a("strong"),z_r=o("layoutlm"),W_r=o(" \u2014 "),aX=a("a"),Q_r=o("TFLayoutLMForTokenClassification"),H_r=o(" (LayoutLM model)"),U_r=l(),gF=a("li"),Xue=a("strong"),J_r=o("longformer"),Y_r=o(" \u2014 "),nX=a("a"),K_r=o("TFLongformerForTokenClassification"),Z_r=o(" (Longformer model)"),eur=l(),hF=a("li"),Vue=a("strong"),our=o("mobilebert"),rur=o(" \u2014 "),sX=a("a"),tur=o("TFMobileBertForTokenClassification"),aur=o(" (MobileBERT model)"),nur=l(),pF=a("li"),zue=a("strong"),sur=o("mpnet"),lur=o(" \u2014 "),lX=a("a"),iur=o("TFMPNetForTokenClassification"),dur=o(" (MPNet model)"),cur=l(),_F=a("li"),Wue=a("strong"),fur=o("rembert"),mur=o(" \u2014 "),iX=a("a"),gur=o("TFRemBertForTokenClassification"),hur=o(" (RemBERT model)"),pur=l(),uF=a("li"),Que=a("strong"),_ur=o("roberta"),uur=o(" \u2014 "),dX=a("a"),bur=o("TFRobertaForTokenClassification"),vur=o(" (RoBERTa model)"),Tur=l(),bF=a("li"),Hue=a("strong"),Fur=o("roformer"),Cur=o(" \u2014 "),cX=a("a"),Mur=o("TFRoFormerForTokenClassification"),Eur=o(" (RoFormer model)"),yur=l(),vF=a("li"),Uue=a("strong"),wur=o("xlm"),Aur=o(" \u2014 "),fX=a("a"),Lur=o("TFXLMForTokenClassification"),Bur=o(" (XLM model)"),xur=l(),TF=a("li"),Jue=a("strong"),kur=o("xlm-roberta"),Rur=o(" \u2014 "),mX=a("a"),Sur=o("TFXLMRobertaForTokenClassification"),Pur=o(" (XLM-RoBERTa model)"),$ur=l(),FF=a("li"),Yue=a("strong"),Iur=o("xlnet"),jur=o(" \u2014 "),gX=a("a"),Dur=o("TFXLNetForTokenClassification"),Nur=o(" (XLNet model)"),qur=l(),Kue=a("p"),Our=o("Examples:"),Gur=l(),f(Qw.$$.fragment),Xke=l(),Xc=a("h2"),CF=a("a"),Zue=a("span"),f(Hw.$$.fragment),Xur=l(),e2e=a("span"),Vur=o("TFAutoModelForQuestionAnswering"),Vke=l(),Br=a("div"),f(Uw.$$.fragment),zur=l(),Vc=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),o2e=a("code"),Qur=o("from_pretrained()"),Hur=o("class method or the "),r2e=a("code"),Uur=o("from_config()"),Jur=o(`class
method.`),Yur=l(),Jw=a("p"),Kur=o("This class cannot be instantiated directly using "),t2e=a("code"),Zur=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),Mt=a("div"),f(Yw.$$.fragment),r2r=l(),a2e=a("p"),t2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a2r=l(),zc=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=a("code"),i2r=o("from_pretrained()"),d2r=o("to load the model weights."),c2r=l(),l2e=a("p"),f2r=o("Examples:"),m2r=l(),f(Kw.$$.fragment),g2r=l(),Eo=a("div"),f(Zw.$$.fragment),h2r=l(),i2e=a("p"),p2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_2r=l(),wn=a("p"),u2r=o("The model class to instantiate is selected based on the "),d2e=a("code"),b2r=o("model_type"),v2r=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),T2r=o("pretrained_model_name_or_path"),F2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),C2r=o("pretrained_model_name_or_path"),M2r=o(":"),E2r=l(),Z=a("ul"),MF=a("li"),m2e=a("strong"),y2r=o("albert"),w2r=o(" \u2014 "),hX=a("a"),A2r=o("TFAlbertForQuestionAnswering"),L2r=o(" (ALBERT model)"),B2r=l(),EF=a("li"),g2e=a("strong"),x2r=o("bert"),k2r=o(" \u2014 "),pX=a("a"),R2r=o("TFBertForQuestionAnswering"),S2r=o(" (BERT model)"),P2r=l(),yF=a("li"),h2e=a("strong"),$2r=o("camembert"),I2r=o(" \u2014 "),_X=a("a"),j2r=o("TFCamembertForQuestionAnswering"),D2r=o(" (CamemBERT model)"),N2r=l(),wF=a("li"),p2e=a("strong"),q2r=o("convbert"),O2r=o(" \u2014 "),uX=a("a"),G2r=o("TFConvBertForQuestionAnswering"),X2r=o(" (ConvBERT model)"),V2r=l(),AF=a("li"),_2e=a("strong"),z2r=o("deberta"),W2r=o(" \u2014 "),bX=a("a"),Q2r=o("TFDebertaForQuestionAnswering"),H2r=o(" (DeBERTa model)"),U2r=l(),LF=a("li"),u2e=a("strong"),J2r=o("deberta-v2"),Y2r=o(" \u2014 "),vX=a("a"),K2r=o("TFDebertaV2ForQuestionAnswering"),Z2r=o(" (DeBERTa-v2 model)"),e1r=l(),BF=a("li"),b2e=a("strong"),o1r=o("distilbert"),r1r=o(" \u2014 "),TX=a("a"),t1r=o("TFDistilBertForQuestionAnswering"),a1r=o(" (DistilBERT model)"),n1r=l(),xF=a("li"),v2e=a("strong"),s1r=o("electra"),l1r=o(" \u2014 "),FX=a("a"),i1r=o("TFElectraForQuestionAnswering"),d1r=o(" (ELECTRA model)"),c1r=l(),kF=a("li"),T2e=a("strong"),f1r=o("flaubert"),m1r=o(" \u2014 "),CX=a("a"),g1r=o("TFFlaubertForQuestionAnsweringSimple"),h1r=o(" (FlauBERT model)"),p1r=l(),RF=a("li"),F2e=a("strong"),_1r=o("funnel"),u1r=o(" \u2014 "),MX=a("a"),b1r=o("TFFunnelForQuestionAnswering"),v1r=o(" (Funnel Transformer model)"),T1r=l(),SF=a("li"),C2e=a("strong"),F1r=o("longformer"),C1r=o(" \u2014 "),EX=a("a"),M1r=o("TFLongformerForQuestionAnswering"),E1r=o(" (Longformer model)"),y1r=l(),PF=a("li"),M2e=a("strong"),w1r=o("mobilebert"),A1r=o(" \u2014 "),yX=a("a"),L1r=o("TFMobileBertForQuestionAnswering"),B1r=o(" (MobileBERT model)"),x1r=l(),$F=a("li"),E2e=a("strong"),k1r=o("mpnet"),R1r=o(" \u2014 "),wX=a("a"),S1r=o("TFMPNetForQuestionAnswering"),P1r=o(" (MPNet model)"),$1r=l(),IF=a("li"),y2e=a("strong"),I1r=o("rembert"),j1r=o(" \u2014 "),AX=a("a"),D1r=o("TFRemBertForQuestionAnswering"),N1r=o(" (RemBERT model)"),q1r=l(),jF=a("li"),w2e=a("strong"),O1r=o("roberta"),G1r=o(" \u2014 "),LX=a("a"),X1r=o("TFRobertaForQuestionAnswering"),V1r=o(" (RoBERTa model)"),z1r=l(),DF=a("li"),A2e=a("strong"),W1r=o("roformer"),Q1r=o(" \u2014 "),BX=a("a"),H1r=o("TFRoFormerForQuestionAnswering"),U1r=o(" (RoFormer model)"),J1r=l(),NF=a("li"),L2e=a("strong"),Y1r=o("xlm"),K1r=o(" \u2014 "),xX=a("a"),Z1r=o("TFXLMForQuestionAnsweringSimple"),ebr=o(" (XLM model)"),obr=l(),qF=a("li"),B2e=a("strong"),rbr=o("xlm-roberta"),tbr=o(" \u2014 "),kX=a("a"),abr=o("TFXLMRobertaForQuestionAnswering"),nbr=o(" (XLM-RoBERTa model)"),sbr=l(),OF=a("li"),x2e=a("strong"),lbr=o("xlnet"),ibr=o(" \u2014 "),RX=a("a"),dbr=o("TFXLNetForQuestionAnsweringSimple"),cbr=o(" (XLNet model)"),fbr=l(),k2e=a("p"),mbr=o("Examples:"),gbr=l(),f(eA.$$.fragment),zke=l(),Wc=a("h2"),GF=a("a"),R2e=a("span"),f(oA.$$.fragment),hbr=l(),S2e=a("span"),pbr=o("TFAutoModelForVision2Seq"),Wke=l(),xr=a("div"),f(rA.$$.fragment),_br=l(),Qc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),P2e=a("code"),bbr=o("from_pretrained()"),vbr=o("class method or the "),$2e=a("code"),Tbr=o("from_config()"),Fbr=o(`class
method.`),Cbr=l(),tA=a("p"),Mbr=o("This class cannot be instantiated directly using "),I2e=a("code"),Ebr=o("__init__()"),ybr=o(" (throws an error)."),wbr=l(),Et=a("div"),f(aA.$$.fragment),Abr=l(),j2e=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bbr=l(),Hc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),kbr=o("not"),Rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),Sbr=o("from_pretrained()"),Pbr=o("to load the model weights."),$br=l(),q2e=a("p"),Ibr=o("Examples:"),jbr=l(),f(nA.$$.fragment),Dbr=l(),yo=a("div"),f(sA.$$.fragment),Nbr=l(),O2e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Obr=l(),An=a("p"),Gbr=o("The model class to instantiate is selected based on the "),G2e=a("code"),Xbr=o("model_type"),Vbr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Qbr=o("pretrained_model_name_or_path"),Hbr=o(":"),Ubr=l(),z2e=a("ul"),XF=a("li"),W2e=a("strong"),Jbr=o("vision-encoder-decoder"),Ybr=o(" \u2014 "),SX=a("a"),Kbr=o("TFVisionEncoderDecoderModel"),Zbr=o(" (Vision Encoder decoder model)"),evr=l(),Q2e=a("p"),ovr=o("Examples:"),rvr=l(),f(lA.$$.fragment),Qke=l(),Uc=a("h2"),VF=a("a"),H2e=a("span"),f(iA.$$.fragment),tvr=l(),U2e=a("span"),avr=o("TFAutoModelForSpeechSeq2Seq"),Hke=l(),kr=a("div"),f(dA.$$.fragment),nvr=l(),Jc=a("p"),svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),J2e=a("code"),lvr=o("from_pretrained()"),ivr=o("class method or the "),Y2e=a("code"),dvr=o("from_config()"),cvr=o(`class
method.`),fvr=l(),cA=a("p"),mvr=o("This class cannot be instantiated directly using "),K2e=a("code"),gvr=o("__init__()"),hvr=o(" (throws an error)."),pvr=l(),yt=a("div"),f(fA.$$.fragment),_vr=l(),Z2e=a("p"),uvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bvr=l(),Yc=a("p"),vvr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Tvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=a("code"),Cvr=o("from_pretrained()"),Mvr=o("to load the model weights."),Evr=l(),r1e=a("p"),yvr=o("Examples:"),wvr=l(),f(mA.$$.fragment),Avr=l(),wo=a("div"),f(gA.$$.fragment),Lvr=l(),t1e=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xvr=l(),Ln=a("p"),kvr=o("The model class to instantiate is selected based on the "),a1e=a("code"),Rvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),Pvr=o("pretrained_model_name_or_path"),$vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),Ivr=o("pretrained_model_name_or_path"),jvr=o(":"),Dvr=l(),l1e=a("ul"),zF=a("li"),i1e=a("strong"),Nvr=o("speech_to_text"),qvr=o(" \u2014 "),PX=a("a"),Ovr=o("TFSpeech2TextForConditionalGeneration"),Gvr=o(" (Speech2Text model)"),Xvr=l(),d1e=a("p"),Vvr=o("Examples:"),zvr=l(),f(hA.$$.fragment),Uke=l(),Kc=a("h2"),WF=a("a"),c1e=a("span"),f(pA.$$.fragment),Wvr=l(),f1e=a("span"),Qvr=o("FlaxAutoModel"),Jke=l(),Rr=a("div"),f(_A.$$.fragment),Hvr=l(),Zc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),m1e=a("code"),Jvr=o("from_pretrained()"),Yvr=o("class method or the "),g1e=a("code"),Kvr=o("from_config()"),Zvr=o(`class
method.`),e6r=l(),uA=a("p"),o6r=o("This class cannot be instantiated directly using "),h1e=a("code"),r6r=o("__init__()"),t6r=o(" (throws an error)."),a6r=l(),wt=a("div"),f(bA.$$.fragment),n6r=l(),p1e=a("p"),s6r=o("Instantiates one of the base model classes of the library from a configuration."),l6r=l(),ef=a("p"),i6r=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),d6r=o("not"),c6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=a("code"),f6r=o("from_pretrained()"),m6r=o("to load the model weights."),g6r=l(),b1e=a("p"),h6r=o("Examples:"),p6r=l(),f(vA.$$.fragment),_6r=l(),Ao=a("div"),f(TA.$$.fragment),u6r=l(),v1e=a("p"),b6r=o("Instantiate one of the base model classes of the library from a pretrained model."),v6r=l(),Bn=a("p"),T6r=o("The model class to instantiate is selected based on the "),T1e=a("code"),F6r=o("model_type"),C6r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),y6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),z=a("ul"),QF=a("li"),M1e=a("strong"),L6r=o("albert"),B6r=o(" \u2014 "),$X=a("a"),x6r=o("FlaxAlbertModel"),k6r=o(" (ALBERT model)"),R6r=l(),HF=a("li"),E1e=a("strong"),S6r=o("bart"),P6r=o(" \u2014 "),IX=a("a"),$6r=o("FlaxBartModel"),I6r=o(" (BART model)"),j6r=l(),UF=a("li"),y1e=a("strong"),D6r=o("beit"),N6r=o(" \u2014 "),jX=a("a"),q6r=o("FlaxBeitModel"),O6r=o(" (BEiT model)"),G6r=l(),JF=a("li"),w1e=a("strong"),X6r=o("bert"),V6r=o(" \u2014 "),DX=a("a"),z6r=o("FlaxBertModel"),W6r=o(" (BERT model)"),Q6r=l(),YF=a("li"),A1e=a("strong"),H6r=o("big_bird"),U6r=o(" \u2014 "),NX=a("a"),J6r=o("FlaxBigBirdModel"),Y6r=o(" (BigBird model)"),K6r=l(),KF=a("li"),L1e=a("strong"),Z6r=o("blenderbot"),e0r=o(" \u2014 "),qX=a("a"),o0r=o("FlaxBlenderbotModel"),r0r=o(" (Blenderbot model)"),t0r=l(),ZF=a("li"),B1e=a("strong"),a0r=o("blenderbot-small"),n0r=o(" \u2014 "),OX=a("a"),s0r=o("FlaxBlenderbotSmallModel"),l0r=o(" (BlenderbotSmall model)"),i0r=l(),eC=a("li"),x1e=a("strong"),d0r=o("clip"),c0r=o(" \u2014 "),GX=a("a"),f0r=o("FlaxCLIPModel"),m0r=o(" (CLIP model)"),g0r=l(),oC=a("li"),k1e=a("strong"),h0r=o("distilbert"),p0r=o(" \u2014 "),XX=a("a"),_0r=o("FlaxDistilBertModel"),u0r=o(" (DistilBERT model)"),b0r=l(),rC=a("li"),R1e=a("strong"),v0r=o("electra"),T0r=o(" \u2014 "),VX=a("a"),F0r=o("FlaxElectraModel"),C0r=o(" (ELECTRA model)"),M0r=l(),tC=a("li"),S1e=a("strong"),E0r=o("gpt2"),y0r=o(" \u2014 "),zX=a("a"),w0r=o("FlaxGPT2Model"),A0r=o(" (OpenAI GPT-2 model)"),L0r=l(),aC=a("li"),P1e=a("strong"),B0r=o("gpt_neo"),x0r=o(" \u2014 "),WX=a("a"),k0r=o("FlaxGPTNeoModel"),R0r=o(" (GPT Neo model)"),S0r=l(),nC=a("li"),$1e=a("strong"),P0r=o("gptj"),$0r=o(" \u2014 "),QX=a("a"),I0r=o("FlaxGPTJModel"),j0r=o(" (GPT-J model)"),D0r=l(),sC=a("li"),I1e=a("strong"),N0r=o("marian"),q0r=o(" \u2014 "),HX=a("a"),O0r=o("FlaxMarianModel"),G0r=o(" (Marian model)"),X0r=l(),lC=a("li"),j1e=a("strong"),V0r=o("mbart"),z0r=o(" \u2014 "),UX=a("a"),W0r=o("FlaxMBartModel"),Q0r=o(" (mBART model)"),H0r=l(),iC=a("li"),D1e=a("strong"),U0r=o("mt5"),J0r=o(" \u2014 "),JX=a("a"),Y0r=o("FlaxMT5Model"),K0r=o(" (mT5 model)"),Z0r=l(),dC=a("li"),N1e=a("strong"),eTr=o("pegasus"),oTr=o(" \u2014 "),YX=a("a"),rTr=o("FlaxPegasusModel"),tTr=o(" (Pegasus model)"),aTr=l(),cC=a("li"),q1e=a("strong"),nTr=o("roberta"),sTr=o(" \u2014 "),KX=a("a"),lTr=o("FlaxRobertaModel"),iTr=o(" (RoBERTa model)"),dTr=l(),fC=a("li"),O1e=a("strong"),cTr=o("roformer"),fTr=o(" \u2014 "),ZX=a("a"),mTr=o("FlaxRoFormerModel"),gTr=o(" (RoFormer model)"),hTr=l(),mC=a("li"),G1e=a("strong"),pTr=o("t5"),_Tr=o(" \u2014 "),eV=a("a"),uTr=o("FlaxT5Model"),bTr=o(" (T5 model)"),vTr=l(),gC=a("li"),X1e=a("strong"),TTr=o("vision-text-dual-encoder"),FTr=o(" \u2014 "),oV=a("a"),CTr=o("FlaxVisionTextDualEncoderModel"),MTr=o(" (VisionTextDualEncoder model)"),ETr=l(),hC=a("li"),V1e=a("strong"),yTr=o("vit"),wTr=o(" \u2014 "),rV=a("a"),ATr=o("FlaxViTModel"),LTr=o(" (ViT model)"),BTr=l(),pC=a("li"),z1e=a("strong"),xTr=o("wav2vec2"),kTr=o(" \u2014 "),tV=a("a"),RTr=o("FlaxWav2Vec2Model"),STr=o(" (Wav2Vec2 model)"),PTr=l(),_C=a("li"),W1e=a("strong"),$Tr=o("xglm"),ITr=o(" \u2014 "),aV=a("a"),jTr=o("FlaxXGLMModel"),DTr=o(" (XGLM model)"),NTr=l(),uC=a("li"),Q1e=a("strong"),qTr=o("xlm-roberta"),OTr=o(" \u2014 "),nV=a("a"),GTr=o("FlaxXLMRobertaModel"),XTr=o(" (XLM-RoBERTa model)"),VTr=l(),H1e=a("p"),zTr=o("Examples:"),WTr=l(),f(FA.$$.fragment),Yke=l(),of=a("h2"),bC=a("a"),U1e=a("span"),f(CA.$$.fragment),QTr=l(),J1e=a("span"),HTr=o("FlaxAutoModelForCausalLM"),Kke=l(),Sr=a("div"),f(MA.$$.fragment),UTr=l(),rf=a("p"),JTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y1e=a("code"),YTr=o("from_pretrained()"),KTr=o("class method or the "),K1e=a("code"),ZTr=o("from_config()"),e7r=o(`class
method.`),o7r=l(),EA=a("p"),r7r=o("This class cannot be instantiated directly using "),Z1e=a("code"),t7r=o("__init__()"),a7r=o(" (throws an error)."),n7r=l(),At=a("div"),f(yA.$$.fragment),s7r=l(),ebe=a("p"),l7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i7r=l(),tf=a("p"),d7r=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),c7r=o("not"),f7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=a("code"),m7r=o("from_pretrained()"),g7r=o("to load the model weights."),h7r=l(),tbe=a("p"),p7r=o("Examples:"),_7r=l(),f(wA.$$.fragment),u7r=l(),Lo=a("div"),f(AA.$$.fragment),b7r=l(),abe=a("p"),v7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T7r=l(),xn=a("p"),F7r=o("The model class to instantiate is selected based on the "),nbe=a("code"),C7r=o("model_type"),M7r=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),E7r=o("pretrained_model_name_or_path"),y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(":"),L7r=l(),ca=a("ul"),vC=a("li"),ibe=a("strong"),B7r=o("bart"),x7r=o(" \u2014 "),sV=a("a"),k7r=o("FlaxBartForCausalLM"),R7r=o(" (BART model)"),S7r=l(),TC=a("li"),dbe=a("strong"),P7r=o("gpt2"),$7r=o(" \u2014 "),lV=a("a"),I7r=o("FlaxGPT2LMHeadModel"),j7r=o(" (OpenAI GPT-2 model)"),D7r=l(),FC=a("li"),cbe=a("strong"),N7r=o("gpt_neo"),q7r=o(" \u2014 "),iV=a("a"),O7r=o("FlaxGPTNeoForCausalLM"),G7r=o(" (GPT Neo model)"),X7r=l(),CC=a("li"),fbe=a("strong"),V7r=o("gptj"),z7r=o(" \u2014 "),dV=a("a"),W7r=o("FlaxGPTJForCausalLM"),Q7r=o(" (GPT-J model)"),H7r=l(),MC=a("li"),mbe=a("strong"),U7r=o("xglm"),J7r=o(" \u2014 "),cV=a("a"),Y7r=o("FlaxXGLMForCausalLM"),K7r=o(" (XGLM model)"),Z7r=l(),gbe=a("p"),eFr=o("Examples:"),oFr=l(),f(LA.$$.fragment),Zke=l(),af=a("h2"),EC=a("a"),hbe=a("span"),f(BA.$$.fragment),rFr=l(),pbe=a("span"),tFr=o("FlaxAutoModelForPreTraining"),eRe=l(),Pr=a("div"),f(xA.$$.fragment),aFr=l(),nf=a("p"),nFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_be=a("code"),sFr=o("from_pretrained()"),lFr=o("class method or the "),ube=a("code"),iFr=o("from_config()"),dFr=o(`class
method.`),cFr=l(),kA=a("p"),fFr=o("This class cannot be instantiated directly using "),bbe=a("code"),mFr=o("__init__()"),gFr=o(" (throws an error)."),hFr=l(),Lt=a("div"),f(RA.$$.fragment),pFr=l(),vbe=a("p"),_Fr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uFr=l(),sf=a("p"),bFr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),vFr=o("not"),TFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=a("code"),FFr=o("from_pretrained()"),CFr=o("to load the model weights."),MFr=l(),Cbe=a("p"),EFr=o("Examples:"),yFr=l(),f(SA.$$.fragment),wFr=l(),Bo=a("div"),f(PA.$$.fragment),AFr=l(),Mbe=a("p"),LFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BFr=l(),kn=a("p"),xFr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),kFr=o("model_type"),RFr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),SFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),$Fr=o("pretrained_model_name_or_path"),IFr=o(":"),jFr=l(),ce=a("ul"),yC=a("li"),Abe=a("strong"),DFr=o("albert"),NFr=o(" \u2014 "),fV=a("a"),qFr=o("FlaxAlbertForPreTraining"),OFr=o(" (ALBERT model)"),GFr=l(),wC=a("li"),Lbe=a("strong"),XFr=o("bart"),VFr=o(" \u2014 "),mV=a("a"),zFr=o("FlaxBartForConditionalGeneration"),WFr=o(" (BART model)"),QFr=l(),AC=a("li"),Bbe=a("strong"),HFr=o("bert"),UFr=o(" \u2014 "),gV=a("a"),JFr=o("FlaxBertForPreTraining"),YFr=o(" (BERT model)"),KFr=l(),LC=a("li"),xbe=a("strong"),ZFr=o("big_bird"),eCr=o(" \u2014 "),hV=a("a"),oCr=o("FlaxBigBirdForPreTraining"),rCr=o(" (BigBird model)"),tCr=l(),BC=a("li"),kbe=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),pV=a("a"),sCr=o("FlaxElectraForPreTraining"),lCr=o(" (ELECTRA model)"),iCr=l(),xC=a("li"),Rbe=a("strong"),dCr=o("mbart"),cCr=o(" \u2014 "),_V=a("a"),fCr=o("FlaxMBartForConditionalGeneration"),mCr=o(" (mBART model)"),gCr=l(),kC=a("li"),Sbe=a("strong"),hCr=o("mt5"),pCr=o(" \u2014 "),uV=a("a"),_Cr=o("FlaxMT5ForConditionalGeneration"),uCr=o(" (mT5 model)"),bCr=l(),RC=a("li"),Pbe=a("strong"),vCr=o("roberta"),TCr=o(" \u2014 "),bV=a("a"),FCr=o("FlaxRobertaForMaskedLM"),CCr=o(" (RoBERTa model)"),MCr=l(),SC=a("li"),$be=a("strong"),ECr=o("roformer"),yCr=o(" \u2014 "),vV=a("a"),wCr=o("FlaxRoFormerForMaskedLM"),ACr=o(" (RoFormer model)"),LCr=l(),PC=a("li"),Ibe=a("strong"),BCr=o("t5"),xCr=o(" \u2014 "),TV=a("a"),kCr=o("FlaxT5ForConditionalGeneration"),RCr=o(" (T5 model)"),SCr=l(),$C=a("li"),jbe=a("strong"),PCr=o("wav2vec2"),$Cr=o(" \u2014 "),FV=a("a"),ICr=o("FlaxWav2Vec2ForPreTraining"),jCr=o(" (Wav2Vec2 model)"),DCr=l(),IC=a("li"),Dbe=a("strong"),NCr=o("xlm-roberta"),qCr=o(" \u2014 "),CV=a("a"),OCr=o("FlaxXLMRobertaForMaskedLM"),GCr=o(" (XLM-RoBERTa model)"),XCr=l(),Nbe=a("p"),VCr=o("Examples:"),zCr=l(),f($A.$$.fragment),oRe=l(),lf=a("h2"),jC=a("a"),qbe=a("span"),f(IA.$$.fragment),WCr=l(),Obe=a("span"),QCr=o("FlaxAutoModelForMaskedLM"),rRe=l(),$r=a("div"),f(jA.$$.fragment),HCr=l(),df=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gbe=a("code"),JCr=o("from_pretrained()"),YCr=o("class method or the "),Xbe=a("code"),KCr=o("from_config()"),ZCr=o(`class
method.`),eMr=l(),DA=a("p"),oMr=o("This class cannot be instantiated directly using "),Vbe=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),Bt=a("div"),f(NA.$$.fragment),nMr=l(),zbe=a("p"),sMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lMr=l(),cf=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=a("code"),fMr=o("from_pretrained()"),mMr=o("to load the model weights."),gMr=l(),Hbe=a("p"),hMr=o("Examples:"),pMr=l(),f(qA.$$.fragment),_Mr=l(),xo=a("div"),f(OA.$$.fragment),uMr=l(),Ube=a("p"),bMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vMr=l(),Rn=a("p"),TMr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),FMr=o("model_type"),CMr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),yMr=o("pretrained_model_name_or_path"),wMr=o(":"),AMr=l(),be=a("ul"),DC=a("li"),Zbe=a("strong"),LMr=o("albert"),BMr=o(" \u2014 "),MV=a("a"),xMr=o("FlaxAlbertForMaskedLM"),kMr=o(" (ALBERT model)"),RMr=l(),NC=a("li"),eve=a("strong"),SMr=o("bart"),PMr=o(" \u2014 "),EV=a("a"),$Mr=o("FlaxBartForConditionalGeneration"),IMr=o(" (BART model)"),jMr=l(),qC=a("li"),ove=a("strong"),DMr=o("bert"),NMr=o(" \u2014 "),yV=a("a"),qMr=o("FlaxBertForMaskedLM"),OMr=o(" (BERT model)"),GMr=l(),OC=a("li"),rve=a("strong"),XMr=o("big_bird"),VMr=o(" \u2014 "),wV=a("a"),zMr=o("FlaxBigBirdForMaskedLM"),WMr=o(" (BigBird model)"),QMr=l(),GC=a("li"),tve=a("strong"),HMr=o("distilbert"),UMr=o(" \u2014 "),AV=a("a"),JMr=o("FlaxDistilBertForMaskedLM"),YMr=o(" (DistilBERT model)"),KMr=l(),XC=a("li"),ave=a("strong"),ZMr=o("electra"),e4r=o(" \u2014 "),LV=a("a"),o4r=o("FlaxElectraForMaskedLM"),r4r=o(" (ELECTRA model)"),t4r=l(),VC=a("li"),nve=a("strong"),a4r=o("mbart"),n4r=o(" \u2014 "),BV=a("a"),s4r=o("FlaxMBartForConditionalGeneration"),l4r=o(" (mBART model)"),i4r=l(),zC=a("li"),sve=a("strong"),d4r=o("roberta"),c4r=o(" \u2014 "),xV=a("a"),f4r=o("FlaxRobertaForMaskedLM"),m4r=o(" (RoBERTa model)"),g4r=l(),WC=a("li"),lve=a("strong"),h4r=o("roformer"),p4r=o(" \u2014 "),kV=a("a"),_4r=o("FlaxRoFormerForMaskedLM"),u4r=o(" (RoFormer model)"),b4r=l(),QC=a("li"),ive=a("strong"),v4r=o("xlm-roberta"),T4r=o(" \u2014 "),RV=a("a"),F4r=o("FlaxXLMRobertaForMaskedLM"),C4r=o(" (XLM-RoBERTa model)"),M4r=l(),dve=a("p"),E4r=o("Examples:"),y4r=l(),f(GA.$$.fragment),tRe=l(),ff=a("h2"),HC=a("a"),cve=a("span"),f(XA.$$.fragment),w4r=l(),fve=a("span"),A4r=o("FlaxAutoModelForSeq2SeqLM"),aRe=l(),Ir=a("div"),f(VA.$$.fragment),L4r=l(),mf=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mve=a("code"),x4r=o("from_pretrained()"),k4r=o("class method or the "),gve=a("code"),R4r=o("from_config()"),S4r=o(`class
method.`),P4r=l(),zA=a("p"),$4r=o("This class cannot be instantiated directly using "),hve=a("code"),I4r=o("__init__()"),j4r=o(" (throws an error)."),D4r=l(),xt=a("div"),f(WA.$$.fragment),N4r=l(),pve=a("p"),q4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O4r=l(),gf=a("p"),G4r=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),X4r=o("not"),V4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=a("code"),z4r=o("from_pretrained()"),W4r=o("to load the model weights."),Q4r=l(),bve=a("p"),H4r=o("Examples:"),U4r=l(),f(QA.$$.fragment),J4r=l(),ko=a("div"),f(HA.$$.fragment),Y4r=l(),vve=a("p"),K4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z4r=l(),Sn=a("p"),eEr=o("The model class to instantiate is selected based on the "),Tve=a("code"),oEr=o("model_type"),rEr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),tEr=o("pretrained_model_name_or_path"),aEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(":"),lEr=l(),Ce=a("ul"),UC=a("li"),Mve=a("strong"),iEr=o("bart"),dEr=o(" \u2014 "),SV=a("a"),cEr=o("FlaxBartForConditionalGeneration"),fEr=o(" (BART model)"),mEr=l(),JC=a("li"),Eve=a("strong"),gEr=o("blenderbot"),hEr=o(" \u2014 "),PV=a("a"),pEr=o("FlaxBlenderbotForConditionalGeneration"),_Er=o(" (Blenderbot model)"),uEr=l(),YC=a("li"),yve=a("strong"),bEr=o("blenderbot-small"),vEr=o(" \u2014 "),$V=a("a"),TEr=o("FlaxBlenderbotSmallForConditionalGeneration"),FEr=o(" (BlenderbotSmall model)"),CEr=l(),KC=a("li"),wve=a("strong"),MEr=o("encoder-decoder"),EEr=o(" \u2014 "),IV=a("a"),yEr=o("FlaxEncoderDecoderModel"),wEr=o(" (Encoder decoder model)"),AEr=l(),ZC=a("li"),Ave=a("strong"),LEr=o("marian"),BEr=o(" \u2014 "),jV=a("a"),xEr=o("FlaxMarianMTModel"),kEr=o(" (Marian model)"),REr=l(),eM=a("li"),Lve=a("strong"),SEr=o("mbart"),PEr=o(" \u2014 "),DV=a("a"),$Er=o("FlaxMBartForConditionalGeneration"),IEr=o(" (mBART model)"),jEr=l(),oM=a("li"),Bve=a("strong"),DEr=o("mt5"),NEr=o(" \u2014 "),NV=a("a"),qEr=o("FlaxMT5ForConditionalGeneration"),OEr=o(" (mT5 model)"),GEr=l(),rM=a("li"),xve=a("strong"),XEr=o("pegasus"),VEr=o(" \u2014 "),qV=a("a"),zEr=o("FlaxPegasusForConditionalGeneration"),WEr=o(" (Pegasus model)"),QEr=l(),tM=a("li"),kve=a("strong"),HEr=o("t5"),UEr=o(" \u2014 "),OV=a("a"),JEr=o("FlaxT5ForConditionalGeneration"),YEr=o(" (T5 model)"),KEr=l(),Rve=a("p"),ZEr=o("Examples:"),e3r=l(),f(UA.$$.fragment),nRe=l(),hf=a("h2"),aM=a("a"),Sve=a("span"),f(JA.$$.fragment),o3r=l(),Pve=a("span"),r3r=o("FlaxAutoModelForSequenceClassification"),sRe=l(),jr=a("div"),f(YA.$$.fragment),t3r=l(),pf=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$ve=a("code"),n3r=o("from_pretrained()"),s3r=o("class method or the "),Ive=a("code"),l3r=o("from_config()"),i3r=o(`class
method.`),d3r=l(),KA=a("p"),c3r=o("This class cannot be instantiated directly using "),jve=a("code"),f3r=o("__init__()"),m3r=o(" (throws an error)."),g3r=l(),kt=a("div"),f(ZA.$$.fragment),h3r=l(),Dve=a("p"),p3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_3r=l(),_f=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qve=a("code"),T3r=o("from_pretrained()"),F3r=o("to load the model weights."),C3r=l(),Ove=a("p"),M3r=o("Examples:"),E3r=l(),f(eL.$$.fragment),y3r=l(),Ro=a("div"),f(oL.$$.fragment),w3r=l(),Gve=a("p"),A3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L3r=l(),Pn=a("p"),B3r=o("The model class to instantiate is selected based on the "),Xve=a("code"),x3r=o("model_type"),k3r=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),R3r=o("pretrained_model_name_or_path"),S3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),P3r=o("pretrained_model_name_or_path"),$3r=o(":"),I3r=l(),ve=a("ul"),nM=a("li"),Wve=a("strong"),j3r=o("albert"),D3r=o(" \u2014 "),GV=a("a"),N3r=o("FlaxAlbertForSequenceClassification"),q3r=o(" (ALBERT model)"),O3r=l(),sM=a("li"),Qve=a("strong"),G3r=o("bart"),X3r=o(" \u2014 "),XV=a("a"),V3r=o("FlaxBartForSequenceClassification"),z3r=o(" (BART model)"),W3r=l(),lM=a("li"),Hve=a("strong"),Q3r=o("bert"),H3r=o(" \u2014 "),VV=a("a"),U3r=o("FlaxBertForSequenceClassification"),J3r=o(" (BERT model)"),Y3r=l(),iM=a("li"),Uve=a("strong"),K3r=o("big_bird"),Z3r=o(" \u2014 "),zV=a("a"),e5r=o("FlaxBigBirdForSequenceClassification"),o5r=o(" (BigBird model)"),r5r=l(),dM=a("li"),Jve=a("strong"),t5r=o("distilbert"),a5r=o(" \u2014 "),WV=a("a"),n5r=o("FlaxDistilBertForSequenceClassification"),s5r=o(" (DistilBERT model)"),l5r=l(),cM=a("li"),Yve=a("strong"),i5r=o("electra"),d5r=o(" \u2014 "),QV=a("a"),c5r=o("FlaxElectraForSequenceClassification"),f5r=o(" (ELECTRA model)"),m5r=l(),fM=a("li"),Kve=a("strong"),g5r=o("mbart"),h5r=o(" \u2014 "),HV=a("a"),p5r=o("FlaxMBartForSequenceClassification"),_5r=o(" (mBART model)"),u5r=l(),mM=a("li"),Zve=a("strong"),b5r=o("roberta"),v5r=o(" \u2014 "),UV=a("a"),T5r=o("FlaxRobertaForSequenceClassification"),F5r=o(" (RoBERTa model)"),C5r=l(),gM=a("li"),e6e=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),JV=a("a"),y5r=o("FlaxRoFormerForSequenceClassification"),w5r=o(" (RoFormer model)"),A5r=l(),hM=a("li"),o6e=a("strong"),L5r=o("xlm-roberta"),B5r=o(" \u2014 "),YV=a("a"),x5r=o("FlaxXLMRobertaForSequenceClassification"),k5r=o(" (XLM-RoBERTa model)"),R5r=l(),r6e=a("p"),S5r=o("Examples:"),P5r=l(),f(rL.$$.fragment),lRe=l(),uf=a("h2"),pM=a("a"),t6e=a("span"),f(tL.$$.fragment),$5r=l(),a6e=a("span"),I5r=o("FlaxAutoModelForQuestionAnswering"),iRe=l(),Dr=a("div"),f(aL.$$.fragment),j5r=l(),bf=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n6e=a("code"),N5r=o("from_pretrained()"),q5r=o("class method or the "),s6e=a("code"),O5r=o("from_config()"),G5r=o(`class
method.`),X5r=l(),nL=a("p"),V5r=o("This class cannot be instantiated directly using "),l6e=a("code"),z5r=o("__init__()"),W5r=o(" (throws an error)."),Q5r=l(),Rt=a("div"),f(sL.$$.fragment),H5r=l(),i6e=a("p"),U5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J5r=l(),vf=a("p"),Y5r=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),K5r=o("not"),Z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c6e=a("code"),eyr=o("from_pretrained()"),oyr=o("to load the model weights."),ryr=l(),f6e=a("p"),tyr=o("Examples:"),ayr=l(),f(lL.$$.fragment),nyr=l(),So=a("div"),f(iL.$$.fragment),syr=l(),m6e=a("p"),lyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iyr=l(),$n=a("p"),dyr=o("The model class to instantiate is selected based on the "),g6e=a("code"),cyr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),Te=a("ul"),_M=a("li"),_6e=a("strong"),uyr=o("albert"),byr=o(" \u2014 "),KV=a("a"),vyr=o("FlaxAlbertForQuestionAnswering"),Tyr=o(" (ALBERT model)"),Fyr=l(),uM=a("li"),u6e=a("strong"),Cyr=o("bart"),Myr=o(" \u2014 "),ZV=a("a"),Eyr=o("FlaxBartForQuestionAnswering"),yyr=o(" (BART model)"),wyr=l(),bM=a("li"),b6e=a("strong"),Ayr=o("bert"),Lyr=o(" \u2014 "),ez=a("a"),Byr=o("FlaxBertForQuestionAnswering"),xyr=o(" (BERT model)"),kyr=l(),vM=a("li"),v6e=a("strong"),Ryr=o("big_bird"),Syr=o(" \u2014 "),oz=a("a"),Pyr=o("FlaxBigBirdForQuestionAnswering"),$yr=o(" (BigBird model)"),Iyr=l(),TM=a("li"),T6e=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),rz=a("a"),Nyr=o("FlaxDistilBertForQuestionAnswering"),qyr=o(" (DistilBERT model)"),Oyr=l(),FM=a("li"),F6e=a("strong"),Gyr=o("electra"),Xyr=o(" \u2014 "),tz=a("a"),Vyr=o("FlaxElectraForQuestionAnswering"),zyr=o(" (ELECTRA model)"),Wyr=l(),CM=a("li"),C6e=a("strong"),Qyr=o("mbart"),Hyr=o(" \u2014 "),az=a("a"),Uyr=o("FlaxMBartForQuestionAnswering"),Jyr=o(" (mBART model)"),Yyr=l(),MM=a("li"),M6e=a("strong"),Kyr=o("roberta"),Zyr=o(" \u2014 "),nz=a("a"),ewr=o("FlaxRobertaForQuestionAnswering"),owr=o(" (RoBERTa model)"),rwr=l(),EM=a("li"),E6e=a("strong"),twr=o("roformer"),awr=o(" \u2014 "),sz=a("a"),nwr=o("FlaxRoFormerForQuestionAnswering"),swr=o(" (RoFormer model)"),lwr=l(),yM=a("li"),y6e=a("strong"),iwr=o("xlm-roberta"),dwr=o(" \u2014 "),lz=a("a"),cwr=o("FlaxXLMRobertaForQuestionAnswering"),fwr=o(" (XLM-RoBERTa model)"),mwr=l(),w6e=a("p"),gwr=o("Examples:"),hwr=l(),f(dL.$$.fragment),dRe=l(),Tf=a("h2"),wM=a("a"),A6e=a("span"),f(cL.$$.fragment),pwr=l(),L6e=a("span"),_wr=o("FlaxAutoModelForTokenClassification"),cRe=l(),Nr=a("div"),f(fL.$$.fragment),uwr=l(),Ff=a("p"),bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B6e=a("code"),vwr=o("from_pretrained()"),Twr=o("class method or the "),x6e=a("code"),Fwr=o("from_config()"),Cwr=o(`class
method.`),Mwr=l(),mL=a("p"),Ewr=o("This class cannot be instantiated directly using "),k6e=a("code"),ywr=o("__init__()"),wwr=o(" (throws an error)."),Awr=l(),St=a("div"),f(gL.$$.fragment),Lwr=l(),R6e=a("p"),Bwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xwr=l(),Cf=a("p"),kwr=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),Rwr=o("not"),Swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P6e=a("code"),Pwr=o("from_pretrained()"),$wr=o("to load the model weights."),Iwr=l(),$6e=a("p"),jwr=o("Examples:"),Dwr=l(),f(hL.$$.fragment),Nwr=l(),Po=a("div"),f(pL.$$.fragment),qwr=l(),I6e=a("p"),Owr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gwr=l(),In=a("p"),Xwr=o("The model class to instantiate is selected based on the "),j6e=a("code"),Vwr=o("model_type"),zwr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),Wwr=o("pretrained_model_name_or_path"),Qwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(":"),Jwr=l(),Se=a("ul"),AM=a("li"),q6e=a("strong"),Ywr=o("albert"),Kwr=o(" \u2014 "),iz=a("a"),Zwr=o("FlaxAlbertForTokenClassification"),eAr=o(" (ALBERT model)"),oAr=l(),LM=a("li"),O6e=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),dz=a("a"),aAr=o("FlaxBertForTokenClassification"),nAr=o(" (BERT model)"),sAr=l(),BM=a("li"),G6e=a("strong"),lAr=o("big_bird"),iAr=o(" \u2014 "),cz=a("a"),dAr=o("FlaxBigBirdForTokenClassification"),cAr=o(" (BigBird model)"),fAr=l(),xM=a("li"),X6e=a("strong"),mAr=o("distilbert"),gAr=o(" \u2014 "),fz=a("a"),hAr=o("FlaxDistilBertForTokenClassification"),pAr=o(" (DistilBERT model)"),_Ar=l(),kM=a("li"),V6e=a("strong"),uAr=o("electra"),bAr=o(" \u2014 "),mz=a("a"),vAr=o("FlaxElectraForTokenClassification"),TAr=o(" (ELECTRA model)"),FAr=l(),RM=a("li"),z6e=a("strong"),CAr=o("roberta"),MAr=o(" \u2014 "),gz=a("a"),EAr=o("FlaxRobertaForTokenClassification"),yAr=o(" (RoBERTa model)"),wAr=l(),SM=a("li"),W6e=a("strong"),AAr=o("roformer"),LAr=o(" \u2014 "),hz=a("a"),BAr=o("FlaxRoFormerForTokenClassification"),xAr=o(" (RoFormer model)"),kAr=l(),PM=a("li"),Q6e=a("strong"),RAr=o("xlm-roberta"),SAr=o(" \u2014 "),pz=a("a"),PAr=o("FlaxXLMRobertaForTokenClassification"),$Ar=o(" (XLM-RoBERTa model)"),IAr=l(),H6e=a("p"),jAr=o("Examples:"),DAr=l(),f(_L.$$.fragment),fRe=l(),Mf=a("h2"),$M=a("a"),U6e=a("span"),f(uL.$$.fragment),NAr=l(),J6e=a("span"),qAr=o("FlaxAutoModelForMultipleChoice"),mRe=l(),qr=a("div"),f(bL.$$.fragment),OAr=l(),Ef=a("p"),GAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y6e=a("code"),XAr=o("from_pretrained()"),VAr=o("class method or the "),K6e=a("code"),zAr=o("from_config()"),WAr=o(`class
method.`),QAr=l(),vL=a("p"),HAr=o("This class cannot be instantiated directly using "),Z6e=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Pt=a("div"),f(TL.$$.fragment),KAr=l(),e0e=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eLr=l(),yf=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r0e=a("code"),aLr=o("from_pretrained()"),nLr=o("to load the model weights."),sLr=l(),t0e=a("p"),lLr=o("Examples:"),iLr=l(),f(FL.$$.fragment),dLr=l(),$o=a("div"),f(CL.$$.fragment),cLr=l(),a0e=a("p"),fLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mLr=l(),jn=a("p"),gLr=o("The model class to instantiate is selected based on the "),n0e=a("code"),hLr=o("model_type"),pLr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),_Lr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(":"),TLr=l(),Pe=a("ul"),IM=a("li"),i0e=a("strong"),FLr=o("albert"),CLr=o(" \u2014 "),_z=a("a"),MLr=o("FlaxAlbertForMultipleChoice"),ELr=o(" (ALBERT model)"),yLr=l(),jM=a("li"),d0e=a("strong"),wLr=o("bert"),ALr=o(" \u2014 "),uz=a("a"),LLr=o("FlaxBertForMultipleChoice"),BLr=o(" (BERT model)"),xLr=l(),DM=a("li"),c0e=a("strong"),kLr=o("big_bird"),RLr=o(" \u2014 "),bz=a("a"),SLr=o("FlaxBigBirdForMultipleChoice"),PLr=o(" (BigBird model)"),$Lr=l(),NM=a("li"),f0e=a("strong"),ILr=o("distilbert"),jLr=o(" \u2014 "),vz=a("a"),DLr=o("FlaxDistilBertForMultipleChoice"),NLr=o(" (DistilBERT model)"),qLr=l(),qM=a("li"),m0e=a("strong"),OLr=o("electra"),GLr=o(" \u2014 "),Tz=a("a"),XLr=o("FlaxElectraForMultipleChoice"),VLr=o(" (ELECTRA model)"),zLr=l(),OM=a("li"),g0e=a("strong"),WLr=o("roberta"),QLr=o(" \u2014 "),Fz=a("a"),HLr=o("FlaxRobertaForMultipleChoice"),ULr=o(" (RoBERTa model)"),JLr=l(),GM=a("li"),h0e=a("strong"),YLr=o("roformer"),KLr=o(" \u2014 "),Cz=a("a"),ZLr=o("FlaxRoFormerForMultipleChoice"),e8r=o(" (RoFormer model)"),o8r=l(),XM=a("li"),p0e=a("strong"),r8r=o("xlm-roberta"),t8r=o(" \u2014 "),Mz=a("a"),a8r=o("FlaxXLMRobertaForMultipleChoice"),n8r=o(" (XLM-RoBERTa model)"),s8r=l(),_0e=a("p"),l8r=o("Examples:"),i8r=l(),f(ML.$$.fragment),gRe=l(),wf=a("h2"),VM=a("a"),u0e=a("span"),f(EL.$$.fragment),d8r=l(),b0e=a("span"),c8r=o("FlaxAutoModelForNextSentencePrediction"),hRe=l(),Or=a("div"),f(yL.$$.fragment),f8r=l(),Af=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),v0e=a("code"),g8r=o("from_pretrained()"),h8r=o("class method or the "),T0e=a("code"),p8r=o("from_config()"),_8r=o(`class
method.`),u8r=l(),wL=a("p"),b8r=o("This class cannot be instantiated directly using "),F0e=a("code"),v8r=o("__init__()"),T8r=o(" (throws an error)."),F8r=l(),$t=a("div"),f(AL.$$.fragment),C8r=l(),C0e=a("p"),M8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E8r=l(),Lf=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E0e=a("code"),L8r=o("from_pretrained()"),B8r=o("to load the model weights."),x8r=l(),y0e=a("p"),k8r=o("Examples:"),R8r=l(),f(LL.$$.fragment),S8r=l(),Io=a("div"),f(BL.$$.fragment),P8r=l(),w0e=a("p"),$8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I8r=l(),Dn=a("p"),j8r=o("The model class to instantiate is selected based on the "),A0e=a("code"),D8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),q8r=o("pretrained_model_name_or_path"),O8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),G8r=o("pretrained_model_name_or_path"),X8r=o(":"),V8r=l(),x0e=a("ul"),zM=a("li"),k0e=a("strong"),z8r=o("bert"),W8r=o(" \u2014 "),Ez=a("a"),Q8r=o("FlaxBertForNextSentencePrediction"),H8r=o(" (BERT model)"),U8r=l(),R0e=a("p"),J8r=o("Examples:"),Y8r=l(),f(xL.$$.fragment),pRe=l(),Bf=a("h2"),WM=a("a"),S0e=a("span"),f(kL.$$.fragment),K8r=l(),P0e=a("span"),Z8r=o("FlaxAutoModelForImageClassification"),_Re=l(),Gr=a("div"),f(RL.$$.fragment),e9r=l(),xf=a("p"),o9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$0e=a("code"),r9r=o("from_pretrained()"),t9r=o("class method or the "),I0e=a("code"),a9r=o("from_config()"),n9r=o(`class
method.`),s9r=l(),SL=a("p"),l9r=o("This class cannot be instantiated directly using "),j0e=a("code"),i9r=o("__init__()"),d9r=o(" (throws an error)."),c9r=l(),It=a("div"),f(PL.$$.fragment),f9r=l(),D0e=a("p"),m9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g9r=l(),kf=a("p"),h9r=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),p9r=o("not"),_9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q0e=a("code"),u9r=o("from_pretrained()"),b9r=o("to load the model weights."),v9r=l(),O0e=a("p"),T9r=o("Examples:"),F9r=l(),f($L.$$.fragment),C9r=l(),jo=a("div"),f(IL.$$.fragment),M9r=l(),G0e=a("p"),E9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y9r=l(),Nn=a("p"),w9r=o("The model class to instantiate is selected based on the "),X0e=a("code"),A9r=o("model_type"),L9r=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),B9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=a("code"),k9r=o("pretrained_model_name_or_path"),R9r=o(":"),S9r=l(),jL=a("ul"),QM=a("li"),W0e=a("strong"),P9r=o("beit"),$9r=o(" \u2014 "),yz=a("a"),I9r=o("FlaxBeitForImageClassification"),j9r=o(" (BEiT model)"),D9r=l(),HM=a("li"),Q0e=a("strong"),N9r=o("vit"),q9r=o(" \u2014 "),wz=a("a"),O9r=o("FlaxViTForImageClassification"),G9r=o(" (ViT model)"),X9r=l(),H0e=a("p"),V9r=o("Examples:"),z9r=l(),f(DL.$$.fragment),uRe=l(),Rf=a("h2"),UM=a("a"),U0e=a("span"),f(NL.$$.fragment),W9r=l(),J0e=a("span"),Q9r=o("FlaxAutoModelForVision2Seq"),bRe=l(),Xr=a("div"),f(qL.$$.fragment),H9r=l(),Sf=a("p"),U9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Y0e=a("code"),J9r=o("from_pretrained()"),Y9r=o("class method or the "),K0e=a("code"),K9r=o("from_config()"),Z9r=o(`class
method.`),eBr=l(),OL=a("p"),oBr=o("This class cannot be instantiated directly using "),Z0e=a("code"),rBr=o("__init__()"),tBr=o(" (throws an error)."),aBr=l(),jt=a("div"),f(GL.$$.fragment),nBr=l(),eTe=a("p"),sBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lBr=l(),Pf=a("p"),iBr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),dBr=o("not"),cBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=a("code"),fBr=o("from_pretrained()"),mBr=o("to load the model weights."),gBr=l(),tTe=a("p"),hBr=o("Examples:"),pBr=l(),f(XL.$$.fragment),_Br=l(),Do=a("div"),f(VL.$$.fragment),uBr=l(),aTe=a("p"),bBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vBr=l(),qn=a("p"),TBr=o("The model class to instantiate is selected based on the "),nTe=a("code"),FBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),yBr=o("pretrained_model_name_or_path"),wBr=o(":"),ABr=l(),iTe=a("ul"),JM=a("li"),dTe=a("strong"),LBr=o("vision-encoder-decoder"),BBr=o(" \u2014 "),Az=a("a"),xBr=o("FlaxVisionEncoderDecoderModel"),kBr=o(" (Vision Encoder decoder model)"),RBr=l(),cTe=a("p"),SBr=o("Examples:"),PBr=l(),f(zL.$$.fragment),this.h()},l(c){const u=u7t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var WL=s(de);ge=n(WL,"A",{id:!0,class:!0,href:!0});var fTe=s(ge);io=n(fTe,"SPAN",{});var mTe=s(io);m(fe.$$.fragment,mTe),mTe.forEach(t),fTe.forEach(t),Fe=i(WL),Vo=n(WL,"SPAN",{});var IBr=s(Vo);ji=r(IBr,"Auto Classes"),IBr.forEach(t),WL.forEach(t),If=i(c),fa=n(c,"P",{});var TRe=s(fa);Di=r(TRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(TRe,"CODE",{});var jBr=s(Ni);J4=r(jBr,"from_pretrained()"),jBr.forEach(t),jf=r(TRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),TRe.forEach(t),Be=i(c),co=n(c,"P",{});var YM=s(co);qi=r(YM,"Instantiating one of "),On=n(YM,"A",{href:!0});var DBr=s(On);Y4=r(DBr,"AutoConfig"),DBr.forEach(t),Gn=r(YM,", "),Xn=n(YM,"A",{href:!0});var NBr=s(Xn);K4=r(NBr,"AutoModel"),NBr.forEach(t),Oi=r(YM,`, and
`),Vn=n(YM,"A",{href:!0});var qBr=s(Vn);Z4=r(qBr,"AutoTokenizer"),qBr.forEach(t),Gi=r(YM," will directly create a class of the relevant architecture. For instance"),YM.forEach(t),Df=i(c),m(qa.$$.fragment,c),fo=i(c),he=n(c,"P",{});var FRe=s(he);X8=r(FRe,"will create a model that is an instance of "),Xi=n(FRe,"A",{href:!0});var OBr=s(Xi);V8=r(OBr,"BertModel"),OBr.forEach(t),z8=r(FRe,"."),FRe.forEach(t),zo=i(c),Oa=n(c,"P",{});var CRe=s(Oa);W8=r(CRe,"There is one class of "),Nf=n(CRe,"CODE",{});var GBr=s(Nf);Q8=r(GBr,"AutoModel"),GBr.forEach(t),RPe=r(CRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CRe.forEach(t),bxe=i(c),Vi=n(c,"H2",{class:!0});var MRe=s(Vi);qf=n(MRe,"A",{id:!0,class:!0,href:!0});var XBr=s(qf);TQ=n(XBr,"SPAN",{});var VBr=s(TQ);m(eE.$$.fragment,VBr),VBr.forEach(t),XBr.forEach(t),SPe=i(MRe),FQ=n(MRe,"SPAN",{});var zBr=s(FQ);PPe=r(zBr,"Extending the Auto Classes"),zBr.forEach(t),MRe.forEach(t),vxe=i(c),zn=n(c,"P",{});var Lz=s(zn);$Pe=r(Lz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CQ=n(Lz,"CODE",{});var WBr=s(CQ);IPe=r(WBr,"NewModel"),WBr.forEach(t),jPe=r(Lz,", make sure you have a "),MQ=n(Lz,"CODE",{});var QBr=s(MQ);DPe=r(QBr,"NewModelConfig"),QBr.forEach(t),NPe=r(Lz,` then you can add those to the auto
classes like this:`),Lz.forEach(t),Txe=i(c),m(oE.$$.fragment,c),Fxe=i(c),H8=n(c,"P",{});var HBr=s(H8);qPe=r(HBr,"You will then be able to use the auto classes like you would usually do!"),HBr.forEach(t),Cxe=i(c),m(Of.$$.fragment,c),Mxe=i(c),zi=n(c,"H2",{class:!0});var ERe=s(zi);Gf=n(ERe,"A",{id:!0,class:!0,href:!0});var UBr=s(Gf);EQ=n(UBr,"SPAN",{});var JBr=s(EQ);m(rE.$$.fragment,JBr),JBr.forEach(t),UBr.forEach(t),OPe=i(ERe),yQ=n(ERe,"SPAN",{});var YBr=s(yQ);GPe=r(YBr,"AutoConfig"),YBr.forEach(t),ERe.forEach(t),Exe=i(c),Wo=n(c,"DIV",{class:!0});var Gs=s(Wo);m(tE.$$.fragment,Gs),XPe=i(Gs),aE=n(Gs,"P",{});var yRe=s(aE);VPe=r(yRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U8=n(yRe,"A",{href:!0});var KBr=s(U8);zPe=r(KBr,"from_pretrained()"),KBr.forEach(t),WPe=r(yRe," class method."),yRe.forEach(t),QPe=i(Gs),nE=n(Gs,"P",{});var wRe=s(nE);HPe=r(wRe,"This class cannot be instantiated directly using "),wQ=n(wRe,"CODE",{});var ZBr=s(wQ);UPe=r(ZBr,"__init__()"),ZBr.forEach(t),JPe=r(wRe," (throws an error)."),wRe.forEach(t),YPe=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(sE.$$.fragment,ga),KPe=i(ga),AQ=n(ga,"P",{});var exr=s(AQ);ZPe=r(exr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),exr.forEach(t),e$e=i(ga),Wi=n(ga,"P",{});var Bz=s(Wi);o$e=r(Bz,"The configuration class to instantiate is selected based on the "),LQ=n(Bz,"CODE",{});var oxr=s(LQ);r$e=r(oxr,"model_type"),oxr.forEach(t),t$e=r(Bz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BQ=n(Bz,"CODE",{});var rxr=s(BQ);a$e=r(rxr,"pretrained_model_name_or_path"),rxr.forEach(t),n$e=r(Bz,":"),Bz.forEach(t),s$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var gTe=s(Xf);xQ=n(gTe,"STRONG",{});var txr=s(xQ);l$e=r(txr,"albert"),txr.forEach(t),i$e=r(gTe," \u2014 "),J8=n(gTe,"A",{href:!0});var axr=s(J8);d$e=r(axr,"AlbertConfig"),axr.forEach(t),c$e=r(gTe," (ALBERT model)"),gTe.forEach(t),f$e=i(T),Vf=n(T,"LI",{});var hTe=s(Vf);kQ=n(hTe,"STRONG",{});var nxr=s(kQ);m$e=r(nxr,"bart"),nxr.forEach(t),g$e=r(hTe," \u2014 "),Y8=n(hTe,"A",{href:!0});var sxr=s(Y8);h$e=r(sxr,"BartConfig"),sxr.forEach(t),p$e=r(hTe," (BART model)"),hTe.forEach(t),_$e=i(T),zf=n(T,"LI",{});var pTe=s(zf);RQ=n(pTe,"STRONG",{});var lxr=s(RQ);u$e=r(lxr,"beit"),lxr.forEach(t),b$e=r(pTe," \u2014 "),K8=n(pTe,"A",{href:!0});var ixr=s(K8);v$e=r(ixr,"BeitConfig"),ixr.forEach(t),T$e=r(pTe," (BEiT model)"),pTe.forEach(t),F$e=i(T),Wf=n(T,"LI",{});var _Te=s(Wf);SQ=n(_Te,"STRONG",{});var dxr=s(SQ);C$e=r(dxr,"bert"),dxr.forEach(t),M$e=r(_Te," \u2014 "),Z8=n(_Te,"A",{href:!0});var cxr=s(Z8);E$e=r(cxr,"BertConfig"),cxr.forEach(t),y$e=r(_Te," (BERT model)"),_Te.forEach(t),w$e=i(T),Qf=n(T,"LI",{});var uTe=s(Qf);PQ=n(uTe,"STRONG",{});var fxr=s(PQ);A$e=r(fxr,"bert-generation"),fxr.forEach(t),L$e=r(uTe," \u2014 "),e9=n(uTe,"A",{href:!0});var mxr=s(e9);B$e=r(mxr,"BertGenerationConfig"),mxr.forEach(t),x$e=r(uTe," (Bert Generation model)"),uTe.forEach(t),k$e=i(T),Hf=n(T,"LI",{});var bTe=s(Hf);$Q=n(bTe,"STRONG",{});var gxr=s($Q);R$e=r(gxr,"big_bird"),gxr.forEach(t),S$e=r(bTe," \u2014 "),o9=n(bTe,"A",{href:!0});var hxr=s(o9);P$e=r(hxr,"BigBirdConfig"),hxr.forEach(t),$$e=r(bTe," (BigBird model)"),bTe.forEach(t),I$e=i(T),Uf=n(T,"LI",{});var vTe=s(Uf);IQ=n(vTe,"STRONG",{});var pxr=s(IQ);j$e=r(pxr,"bigbird_pegasus"),pxr.forEach(t),D$e=r(vTe," \u2014 "),r9=n(vTe,"A",{href:!0});var _xr=s(r9);N$e=r(_xr,"BigBirdPegasusConfig"),_xr.forEach(t),q$e=r(vTe," (BigBirdPegasus model)"),vTe.forEach(t),O$e=i(T),Jf=n(T,"LI",{});var TTe=s(Jf);jQ=n(TTe,"STRONG",{});var uxr=s(jQ);G$e=r(uxr,"blenderbot"),uxr.forEach(t),X$e=r(TTe," \u2014 "),t9=n(TTe,"A",{href:!0});var bxr=s(t9);V$e=r(bxr,"BlenderbotConfig"),bxr.forEach(t),z$e=r(TTe," (Blenderbot model)"),TTe.forEach(t),W$e=i(T),Yf=n(T,"LI",{});var FTe=s(Yf);DQ=n(FTe,"STRONG",{});var vxr=s(DQ);Q$e=r(vxr,"blenderbot-small"),vxr.forEach(t),H$e=r(FTe," \u2014 "),a9=n(FTe,"A",{href:!0});var Txr=s(a9);U$e=r(Txr,"BlenderbotSmallConfig"),Txr.forEach(t),J$e=r(FTe," (BlenderbotSmall model)"),FTe.forEach(t),Y$e=i(T),Kf=n(T,"LI",{});var CTe=s(Kf);NQ=n(CTe,"STRONG",{});var Fxr=s(NQ);K$e=r(Fxr,"camembert"),Fxr.forEach(t),Z$e=r(CTe," \u2014 "),n9=n(CTe,"A",{href:!0});var Cxr=s(n9);eIe=r(Cxr,"CamembertConfig"),Cxr.forEach(t),oIe=r(CTe," (CamemBERT model)"),CTe.forEach(t),rIe=i(T),Zf=n(T,"LI",{});var MTe=s(Zf);qQ=n(MTe,"STRONG",{});var Mxr=s(qQ);tIe=r(Mxr,"canine"),Mxr.forEach(t),aIe=r(MTe," \u2014 "),s9=n(MTe,"A",{href:!0});var Exr=s(s9);nIe=r(Exr,"CanineConfig"),Exr.forEach(t),sIe=r(MTe," (Canine model)"),MTe.forEach(t),lIe=i(T),em=n(T,"LI",{});var ETe=s(em);OQ=n(ETe,"STRONG",{});var yxr=s(OQ);iIe=r(yxr,"clip"),yxr.forEach(t),dIe=r(ETe," \u2014 "),l9=n(ETe,"A",{href:!0});var wxr=s(l9);cIe=r(wxr,"CLIPConfig"),wxr.forEach(t),fIe=r(ETe," (CLIP model)"),ETe.forEach(t),mIe=i(T),om=n(T,"LI",{});var yTe=s(om);GQ=n(yTe,"STRONG",{});var Axr=s(GQ);gIe=r(Axr,"convbert"),Axr.forEach(t),hIe=r(yTe," \u2014 "),i9=n(yTe,"A",{href:!0});var Lxr=s(i9);pIe=r(Lxr,"ConvBertConfig"),Lxr.forEach(t),_Ie=r(yTe," (ConvBERT model)"),yTe.forEach(t),uIe=i(T),rm=n(T,"LI",{});var wTe=s(rm);XQ=n(wTe,"STRONG",{});var Bxr=s(XQ);bIe=r(Bxr,"convnext"),Bxr.forEach(t),vIe=r(wTe," \u2014 "),d9=n(wTe,"A",{href:!0});var xxr=s(d9);TIe=r(xxr,"ConvNextConfig"),xxr.forEach(t),FIe=r(wTe," (ConvNext model)"),wTe.forEach(t),CIe=i(T),tm=n(T,"LI",{});var ATe=s(tm);VQ=n(ATe,"STRONG",{});var kxr=s(VQ);MIe=r(kxr,"ctrl"),kxr.forEach(t),EIe=r(ATe," \u2014 "),c9=n(ATe,"A",{href:!0});var Rxr=s(c9);yIe=r(Rxr,"CTRLConfig"),Rxr.forEach(t),wIe=r(ATe," (CTRL model)"),ATe.forEach(t),AIe=i(T),am=n(T,"LI",{});var LTe=s(am);zQ=n(LTe,"STRONG",{});var Sxr=s(zQ);LIe=r(Sxr,"data2vec-audio"),Sxr.forEach(t),BIe=r(LTe," \u2014 "),f9=n(LTe,"A",{href:!0});var Pxr=s(f9);xIe=r(Pxr,"Data2VecAudioConfig"),Pxr.forEach(t),kIe=r(LTe," (Data2VecAudio model)"),LTe.forEach(t),RIe=i(T),nm=n(T,"LI",{});var BTe=s(nm);WQ=n(BTe,"STRONG",{});var $xr=s(WQ);SIe=r($xr,"data2vec-text"),$xr.forEach(t),PIe=r(BTe," \u2014 "),m9=n(BTe,"A",{href:!0});var Ixr=s(m9);$Ie=r(Ixr,"Data2VecTextConfig"),Ixr.forEach(t),IIe=r(BTe," (Data2VecText model)"),BTe.forEach(t),jIe=i(T),sm=n(T,"LI",{});var xTe=s(sm);QQ=n(xTe,"STRONG",{});var jxr=s(QQ);DIe=r(jxr,"deberta"),jxr.forEach(t),NIe=r(xTe," \u2014 "),g9=n(xTe,"A",{href:!0});var Dxr=s(g9);qIe=r(Dxr,"DebertaConfig"),Dxr.forEach(t),OIe=r(xTe," (DeBERTa model)"),xTe.forEach(t),GIe=i(T),lm=n(T,"LI",{});var kTe=s(lm);HQ=n(kTe,"STRONG",{});var Nxr=s(HQ);XIe=r(Nxr,"deberta-v2"),Nxr.forEach(t),VIe=r(kTe," \u2014 "),h9=n(kTe,"A",{href:!0});var qxr=s(h9);zIe=r(qxr,"DebertaV2Config"),qxr.forEach(t),WIe=r(kTe," (DeBERTa-v2 model)"),kTe.forEach(t),QIe=i(T),im=n(T,"LI",{});var RTe=s(im);UQ=n(RTe,"STRONG",{});var Oxr=s(UQ);HIe=r(Oxr,"deit"),Oxr.forEach(t),UIe=r(RTe," \u2014 "),p9=n(RTe,"A",{href:!0});var Gxr=s(p9);JIe=r(Gxr,"DeiTConfig"),Gxr.forEach(t),YIe=r(RTe," (DeiT model)"),RTe.forEach(t),KIe=i(T),dm=n(T,"LI",{});var STe=s(dm);JQ=n(STe,"STRONG",{});var Xxr=s(JQ);ZIe=r(Xxr,"detr"),Xxr.forEach(t),eje=r(STe," \u2014 "),_9=n(STe,"A",{href:!0});var Vxr=s(_9);oje=r(Vxr,"DetrConfig"),Vxr.forEach(t),rje=r(STe," (DETR model)"),STe.forEach(t),tje=i(T),cm=n(T,"LI",{});var PTe=s(cm);YQ=n(PTe,"STRONG",{});var zxr=s(YQ);aje=r(zxr,"distilbert"),zxr.forEach(t),nje=r(PTe," \u2014 "),u9=n(PTe,"A",{href:!0});var Wxr=s(u9);sje=r(Wxr,"DistilBertConfig"),Wxr.forEach(t),lje=r(PTe," (DistilBERT model)"),PTe.forEach(t),ije=i(T),fm=n(T,"LI",{});var $Te=s(fm);KQ=n($Te,"STRONG",{});var Qxr=s(KQ);dje=r(Qxr,"dpr"),Qxr.forEach(t),cje=r($Te," \u2014 "),b9=n($Te,"A",{href:!0});var Hxr=s(b9);fje=r(Hxr,"DPRConfig"),Hxr.forEach(t),mje=r($Te," (DPR model)"),$Te.forEach(t),gje=i(T),mm=n(T,"LI",{});var ITe=s(mm);ZQ=n(ITe,"STRONG",{});var Uxr=s(ZQ);hje=r(Uxr,"electra"),Uxr.forEach(t),pje=r(ITe," \u2014 "),v9=n(ITe,"A",{href:!0});var Jxr=s(v9);_je=r(Jxr,"ElectraConfig"),Jxr.forEach(t),uje=r(ITe," (ELECTRA model)"),ITe.forEach(t),bje=i(T),gm=n(T,"LI",{});var jTe=s(gm);eH=n(jTe,"STRONG",{});var Yxr=s(eH);vje=r(Yxr,"encoder-decoder"),Yxr.forEach(t),Tje=r(jTe," \u2014 "),T9=n(jTe,"A",{href:!0});var Kxr=s(T9);Fje=r(Kxr,"EncoderDecoderConfig"),Kxr.forEach(t),Cje=r(jTe," (Encoder decoder model)"),jTe.forEach(t),Mje=i(T),hm=n(T,"LI",{});var DTe=s(hm);oH=n(DTe,"STRONG",{});var Zxr=s(oH);Eje=r(Zxr,"flaubert"),Zxr.forEach(t),yje=r(DTe," \u2014 "),F9=n(DTe,"A",{href:!0});var ekr=s(F9);wje=r(ekr,"FlaubertConfig"),ekr.forEach(t),Aje=r(DTe," (FlauBERT model)"),DTe.forEach(t),Lje=i(T),pm=n(T,"LI",{});var NTe=s(pm);rH=n(NTe,"STRONG",{});var okr=s(rH);Bje=r(okr,"fnet"),okr.forEach(t),xje=r(NTe," \u2014 "),C9=n(NTe,"A",{href:!0});var rkr=s(C9);kje=r(rkr,"FNetConfig"),rkr.forEach(t),Rje=r(NTe," (FNet model)"),NTe.forEach(t),Sje=i(T),_m=n(T,"LI",{});var qTe=s(_m);tH=n(qTe,"STRONG",{});var tkr=s(tH);Pje=r(tkr,"fsmt"),tkr.forEach(t),$je=r(qTe," \u2014 "),M9=n(qTe,"A",{href:!0});var akr=s(M9);Ije=r(akr,"FSMTConfig"),akr.forEach(t),jje=r(qTe," (FairSeq Machine-Translation model)"),qTe.forEach(t),Dje=i(T),um=n(T,"LI",{});var OTe=s(um);aH=n(OTe,"STRONG",{});var nkr=s(aH);Nje=r(nkr,"funnel"),nkr.forEach(t),qje=r(OTe," \u2014 "),E9=n(OTe,"A",{href:!0});var skr=s(E9);Oje=r(skr,"FunnelConfig"),skr.forEach(t),Gje=r(OTe," (Funnel Transformer model)"),OTe.forEach(t),Xje=i(T),bm=n(T,"LI",{});var GTe=s(bm);nH=n(GTe,"STRONG",{});var lkr=s(nH);Vje=r(lkr,"gpt2"),lkr.forEach(t),zje=r(GTe," \u2014 "),y9=n(GTe,"A",{href:!0});var ikr=s(y9);Wje=r(ikr,"GPT2Config"),ikr.forEach(t),Qje=r(GTe," (OpenAI GPT-2 model)"),GTe.forEach(t),Hje=i(T),vm=n(T,"LI",{});var XTe=s(vm);sH=n(XTe,"STRONG",{});var dkr=s(sH);Uje=r(dkr,"gpt_neo"),dkr.forEach(t),Jje=r(XTe," \u2014 "),w9=n(XTe,"A",{href:!0});var ckr=s(w9);Yje=r(ckr,"GPTNeoConfig"),ckr.forEach(t),Kje=r(XTe," (GPT Neo model)"),XTe.forEach(t),Zje=i(T),Tm=n(T,"LI",{});var VTe=s(Tm);lH=n(VTe,"STRONG",{});var fkr=s(lH);eDe=r(fkr,"gptj"),fkr.forEach(t),oDe=r(VTe," \u2014 "),A9=n(VTe,"A",{href:!0});var mkr=s(A9);rDe=r(mkr,"GPTJConfig"),mkr.forEach(t),tDe=r(VTe," (GPT-J model)"),VTe.forEach(t),aDe=i(T),Fm=n(T,"LI",{});var zTe=s(Fm);iH=n(zTe,"STRONG",{});var gkr=s(iH);nDe=r(gkr,"hubert"),gkr.forEach(t),sDe=r(zTe," \u2014 "),L9=n(zTe,"A",{href:!0});var hkr=s(L9);lDe=r(hkr,"HubertConfig"),hkr.forEach(t),iDe=r(zTe," (Hubert model)"),zTe.forEach(t),dDe=i(T),Cm=n(T,"LI",{});var WTe=s(Cm);dH=n(WTe,"STRONG",{});var pkr=s(dH);cDe=r(pkr,"ibert"),pkr.forEach(t),fDe=r(WTe," \u2014 "),B9=n(WTe,"A",{href:!0});var _kr=s(B9);mDe=r(_kr,"IBertConfig"),_kr.forEach(t),gDe=r(WTe," (I-BERT model)"),WTe.forEach(t),hDe=i(T),Mm=n(T,"LI",{});var QTe=s(Mm);cH=n(QTe,"STRONG",{});var ukr=s(cH);pDe=r(ukr,"imagegpt"),ukr.forEach(t),_De=r(QTe," \u2014 "),x9=n(QTe,"A",{href:!0});var bkr=s(x9);uDe=r(bkr,"ImageGPTConfig"),bkr.forEach(t),bDe=r(QTe," (ImageGPT model)"),QTe.forEach(t),vDe=i(T),Em=n(T,"LI",{});var HTe=s(Em);fH=n(HTe,"STRONG",{});var vkr=s(fH);TDe=r(vkr,"layoutlm"),vkr.forEach(t),FDe=r(HTe," \u2014 "),k9=n(HTe,"A",{href:!0});var Tkr=s(k9);CDe=r(Tkr,"LayoutLMConfig"),Tkr.forEach(t),MDe=r(HTe," (LayoutLM model)"),HTe.forEach(t),EDe=i(T),ym=n(T,"LI",{});var UTe=s(ym);mH=n(UTe,"STRONG",{});var Fkr=s(mH);yDe=r(Fkr,"layoutlmv2"),Fkr.forEach(t),wDe=r(UTe," \u2014 "),R9=n(UTe,"A",{href:!0});var Ckr=s(R9);ADe=r(Ckr,"LayoutLMv2Config"),Ckr.forEach(t),LDe=r(UTe," (LayoutLMv2 model)"),UTe.forEach(t),BDe=i(T),wm=n(T,"LI",{});var JTe=s(wm);gH=n(JTe,"STRONG",{});var Mkr=s(gH);xDe=r(Mkr,"led"),Mkr.forEach(t),kDe=r(JTe," \u2014 "),S9=n(JTe,"A",{href:!0});var Ekr=s(S9);RDe=r(Ekr,"LEDConfig"),Ekr.forEach(t),SDe=r(JTe," (LED model)"),JTe.forEach(t),PDe=i(T),Am=n(T,"LI",{});var YTe=s(Am);hH=n(YTe,"STRONG",{});var ykr=s(hH);$De=r(ykr,"longformer"),ykr.forEach(t),IDe=r(YTe," \u2014 "),P9=n(YTe,"A",{href:!0});var wkr=s(P9);jDe=r(wkr,"LongformerConfig"),wkr.forEach(t),DDe=r(YTe," (Longformer model)"),YTe.forEach(t),NDe=i(T),Lm=n(T,"LI",{});var KTe=s(Lm);pH=n(KTe,"STRONG",{});var Akr=s(pH);qDe=r(Akr,"luke"),Akr.forEach(t),ODe=r(KTe," \u2014 "),$9=n(KTe,"A",{href:!0});var Lkr=s($9);GDe=r(Lkr,"LukeConfig"),Lkr.forEach(t),XDe=r(KTe," (LUKE model)"),KTe.forEach(t),VDe=i(T),Bm=n(T,"LI",{});var ZTe=s(Bm);_H=n(ZTe,"STRONG",{});var Bkr=s(_H);zDe=r(Bkr,"lxmert"),Bkr.forEach(t),WDe=r(ZTe," \u2014 "),I9=n(ZTe,"A",{href:!0});var xkr=s(I9);QDe=r(xkr,"LxmertConfig"),xkr.forEach(t),HDe=r(ZTe," (LXMERT model)"),ZTe.forEach(t),UDe=i(T),xm=n(T,"LI",{});var e7e=s(xm);uH=n(e7e,"STRONG",{});var kkr=s(uH);JDe=r(kkr,"m2m_100"),kkr.forEach(t),YDe=r(e7e," \u2014 "),j9=n(e7e,"A",{href:!0});var Rkr=s(j9);KDe=r(Rkr,"M2M100Config"),Rkr.forEach(t),ZDe=r(e7e," (M2M100 model)"),e7e.forEach(t),eNe=i(T),km=n(T,"LI",{});var o7e=s(km);bH=n(o7e,"STRONG",{});var Skr=s(bH);oNe=r(Skr,"marian"),Skr.forEach(t),rNe=r(o7e," \u2014 "),D9=n(o7e,"A",{href:!0});var Pkr=s(D9);tNe=r(Pkr,"MarianConfig"),Pkr.forEach(t),aNe=r(o7e," (Marian model)"),o7e.forEach(t),nNe=i(T),Rm=n(T,"LI",{});var r7e=s(Rm);vH=n(r7e,"STRONG",{});var $kr=s(vH);sNe=r($kr,"maskformer"),$kr.forEach(t),lNe=r(r7e," \u2014 "),N9=n(r7e,"A",{href:!0});var Ikr=s(N9);iNe=r(Ikr,"MaskFormerConfig"),Ikr.forEach(t),dNe=r(r7e," (MaskFormer model)"),r7e.forEach(t),cNe=i(T),Sm=n(T,"LI",{});var t7e=s(Sm);TH=n(t7e,"STRONG",{});var jkr=s(TH);fNe=r(jkr,"mbart"),jkr.forEach(t),mNe=r(t7e," \u2014 "),q9=n(t7e,"A",{href:!0});var Dkr=s(q9);gNe=r(Dkr,"MBartConfig"),Dkr.forEach(t),hNe=r(t7e," (mBART model)"),t7e.forEach(t),pNe=i(T),Pm=n(T,"LI",{});var a7e=s(Pm);FH=n(a7e,"STRONG",{});var Nkr=s(FH);_Ne=r(Nkr,"megatron-bert"),Nkr.forEach(t),uNe=r(a7e," \u2014 "),O9=n(a7e,"A",{href:!0});var qkr=s(O9);bNe=r(qkr,"MegatronBertConfig"),qkr.forEach(t),vNe=r(a7e," (MegatronBert model)"),a7e.forEach(t),TNe=i(T),$m=n(T,"LI",{});var n7e=s($m);CH=n(n7e,"STRONG",{});var Okr=s(CH);FNe=r(Okr,"mobilebert"),Okr.forEach(t),CNe=r(n7e," \u2014 "),G9=n(n7e,"A",{href:!0});var Gkr=s(G9);MNe=r(Gkr,"MobileBertConfig"),Gkr.forEach(t),ENe=r(n7e," (MobileBERT model)"),n7e.forEach(t),yNe=i(T),Im=n(T,"LI",{});var s7e=s(Im);MH=n(s7e,"STRONG",{});var Xkr=s(MH);wNe=r(Xkr,"mpnet"),Xkr.forEach(t),ANe=r(s7e," \u2014 "),X9=n(s7e,"A",{href:!0});var Vkr=s(X9);LNe=r(Vkr,"MPNetConfig"),Vkr.forEach(t),BNe=r(s7e," (MPNet model)"),s7e.forEach(t),xNe=i(T),jm=n(T,"LI",{});var l7e=s(jm);EH=n(l7e,"STRONG",{});var zkr=s(EH);kNe=r(zkr,"mt5"),zkr.forEach(t),RNe=r(l7e," \u2014 "),V9=n(l7e,"A",{href:!0});var Wkr=s(V9);SNe=r(Wkr,"MT5Config"),Wkr.forEach(t),PNe=r(l7e," (mT5 model)"),l7e.forEach(t),$Ne=i(T),Dm=n(T,"LI",{});var i7e=s(Dm);yH=n(i7e,"STRONG",{});var Qkr=s(yH);INe=r(Qkr,"nystromformer"),Qkr.forEach(t),jNe=r(i7e," \u2014 "),z9=n(i7e,"A",{href:!0});var Hkr=s(z9);DNe=r(Hkr,"NystromformerConfig"),Hkr.forEach(t),NNe=r(i7e," (Nystromformer model)"),i7e.forEach(t),qNe=i(T),Nm=n(T,"LI",{});var d7e=s(Nm);wH=n(d7e,"STRONG",{});var Ukr=s(wH);ONe=r(Ukr,"openai-gpt"),Ukr.forEach(t),GNe=r(d7e," \u2014 "),W9=n(d7e,"A",{href:!0});var Jkr=s(W9);XNe=r(Jkr,"OpenAIGPTConfig"),Jkr.forEach(t),VNe=r(d7e," (OpenAI GPT model)"),d7e.forEach(t),zNe=i(T),qm=n(T,"LI",{});var c7e=s(qm);AH=n(c7e,"STRONG",{});var Ykr=s(AH);WNe=r(Ykr,"pegasus"),Ykr.forEach(t),QNe=r(c7e," \u2014 "),Q9=n(c7e,"A",{href:!0});var Kkr=s(Q9);HNe=r(Kkr,"PegasusConfig"),Kkr.forEach(t),UNe=r(c7e," (Pegasus model)"),c7e.forEach(t),JNe=i(T),Om=n(T,"LI",{});var f7e=s(Om);LH=n(f7e,"STRONG",{});var Zkr=s(LH);YNe=r(Zkr,"perceiver"),Zkr.forEach(t),KNe=r(f7e," \u2014 "),H9=n(f7e,"A",{href:!0});var eRr=s(H9);ZNe=r(eRr,"PerceiverConfig"),eRr.forEach(t),eqe=r(f7e," (Perceiver model)"),f7e.forEach(t),oqe=i(T),Gm=n(T,"LI",{});var m7e=s(Gm);BH=n(m7e,"STRONG",{});var oRr=s(BH);rqe=r(oRr,"plbart"),oRr.forEach(t),tqe=r(m7e," \u2014 "),U9=n(m7e,"A",{href:!0});var rRr=s(U9);aqe=r(rRr,"PLBartConfig"),rRr.forEach(t),nqe=r(m7e," (PLBart model)"),m7e.forEach(t),sqe=i(T),Xm=n(T,"LI",{});var g7e=s(Xm);xH=n(g7e,"STRONG",{});var tRr=s(xH);lqe=r(tRr,"poolformer"),tRr.forEach(t),iqe=r(g7e," \u2014 "),J9=n(g7e,"A",{href:!0});var aRr=s(J9);dqe=r(aRr,"PoolFormerConfig"),aRr.forEach(t),cqe=r(g7e," (PoolFormer model)"),g7e.forEach(t),fqe=i(T),Vm=n(T,"LI",{});var h7e=s(Vm);kH=n(h7e,"STRONG",{});var nRr=s(kH);mqe=r(nRr,"prophetnet"),nRr.forEach(t),gqe=r(h7e," \u2014 "),Y9=n(h7e,"A",{href:!0});var sRr=s(Y9);hqe=r(sRr,"ProphetNetConfig"),sRr.forEach(t),pqe=r(h7e," (ProphetNet model)"),h7e.forEach(t),_qe=i(T),zm=n(T,"LI",{});var p7e=s(zm);RH=n(p7e,"STRONG",{});var lRr=s(RH);uqe=r(lRr,"qdqbert"),lRr.forEach(t),bqe=r(p7e," \u2014 "),K9=n(p7e,"A",{href:!0});var iRr=s(K9);vqe=r(iRr,"QDQBertConfig"),iRr.forEach(t),Tqe=r(p7e," (QDQBert model)"),p7e.forEach(t),Fqe=i(T),Wm=n(T,"LI",{});var _7e=s(Wm);SH=n(_7e,"STRONG",{});var dRr=s(SH);Cqe=r(dRr,"rag"),dRr.forEach(t),Mqe=r(_7e," \u2014 "),Z9=n(_7e,"A",{href:!0});var cRr=s(Z9);Eqe=r(cRr,"RagConfig"),cRr.forEach(t),yqe=r(_7e," (RAG model)"),_7e.forEach(t),wqe=i(T),Qm=n(T,"LI",{});var u7e=s(Qm);PH=n(u7e,"STRONG",{});var fRr=s(PH);Aqe=r(fRr,"realm"),fRr.forEach(t),Lqe=r(u7e," \u2014 "),eB=n(u7e,"A",{href:!0});var mRr=s(eB);Bqe=r(mRr,"RealmConfig"),mRr.forEach(t),xqe=r(u7e," (Realm model)"),u7e.forEach(t),kqe=i(T),Hm=n(T,"LI",{});var b7e=s(Hm);$H=n(b7e,"STRONG",{});var gRr=s($H);Rqe=r(gRr,"reformer"),gRr.forEach(t),Sqe=r(b7e," \u2014 "),oB=n(b7e,"A",{href:!0});var hRr=s(oB);Pqe=r(hRr,"ReformerConfig"),hRr.forEach(t),$qe=r(b7e," (Reformer model)"),b7e.forEach(t),Iqe=i(T),Um=n(T,"LI",{});var v7e=s(Um);IH=n(v7e,"STRONG",{});var pRr=s(IH);jqe=r(pRr,"rembert"),pRr.forEach(t),Dqe=r(v7e," \u2014 "),rB=n(v7e,"A",{href:!0});var _Rr=s(rB);Nqe=r(_Rr,"RemBertConfig"),_Rr.forEach(t),qqe=r(v7e," (RemBERT model)"),v7e.forEach(t),Oqe=i(T),Jm=n(T,"LI",{});var T7e=s(Jm);jH=n(T7e,"STRONG",{});var uRr=s(jH);Gqe=r(uRr,"retribert"),uRr.forEach(t),Xqe=r(T7e," \u2014 "),tB=n(T7e,"A",{href:!0});var bRr=s(tB);Vqe=r(bRr,"RetriBertConfig"),bRr.forEach(t),zqe=r(T7e," (RetriBERT model)"),T7e.forEach(t),Wqe=i(T),Ym=n(T,"LI",{});var F7e=s(Ym);DH=n(F7e,"STRONG",{});var vRr=s(DH);Qqe=r(vRr,"roberta"),vRr.forEach(t),Hqe=r(F7e," \u2014 "),aB=n(F7e,"A",{href:!0});var TRr=s(aB);Uqe=r(TRr,"RobertaConfig"),TRr.forEach(t),Jqe=r(F7e," (RoBERTa model)"),F7e.forEach(t),Yqe=i(T),Km=n(T,"LI",{});var C7e=s(Km);NH=n(C7e,"STRONG",{});var FRr=s(NH);Kqe=r(FRr,"roformer"),FRr.forEach(t),Zqe=r(C7e," \u2014 "),nB=n(C7e,"A",{href:!0});var CRr=s(nB);eOe=r(CRr,"RoFormerConfig"),CRr.forEach(t),oOe=r(C7e," (RoFormer model)"),C7e.forEach(t),rOe=i(T),Zm=n(T,"LI",{});var M7e=s(Zm);qH=n(M7e,"STRONG",{});var MRr=s(qH);tOe=r(MRr,"segformer"),MRr.forEach(t),aOe=r(M7e," \u2014 "),sB=n(M7e,"A",{href:!0});var ERr=s(sB);nOe=r(ERr,"SegformerConfig"),ERr.forEach(t),sOe=r(M7e," (SegFormer model)"),M7e.forEach(t),lOe=i(T),eg=n(T,"LI",{});var E7e=s(eg);OH=n(E7e,"STRONG",{});var yRr=s(OH);iOe=r(yRr,"sew"),yRr.forEach(t),dOe=r(E7e," \u2014 "),lB=n(E7e,"A",{href:!0});var wRr=s(lB);cOe=r(wRr,"SEWConfig"),wRr.forEach(t),fOe=r(E7e," (SEW model)"),E7e.forEach(t),mOe=i(T),og=n(T,"LI",{});var y7e=s(og);GH=n(y7e,"STRONG",{});var ARr=s(GH);gOe=r(ARr,"sew-d"),ARr.forEach(t),hOe=r(y7e," \u2014 "),iB=n(y7e,"A",{href:!0});var LRr=s(iB);pOe=r(LRr,"SEWDConfig"),LRr.forEach(t),_Oe=r(y7e," (SEW-D model)"),y7e.forEach(t),uOe=i(T),rg=n(T,"LI",{});var w7e=s(rg);XH=n(w7e,"STRONG",{});var BRr=s(XH);bOe=r(BRr,"speech-encoder-decoder"),BRr.forEach(t),vOe=r(w7e," \u2014 "),dB=n(w7e,"A",{href:!0});var xRr=s(dB);TOe=r(xRr,"SpeechEncoderDecoderConfig"),xRr.forEach(t),FOe=r(w7e," (Speech Encoder decoder model)"),w7e.forEach(t),COe=i(T),tg=n(T,"LI",{});var A7e=s(tg);VH=n(A7e,"STRONG",{});var kRr=s(VH);MOe=r(kRr,"speech_to_text"),kRr.forEach(t),EOe=r(A7e," \u2014 "),cB=n(A7e,"A",{href:!0});var RRr=s(cB);yOe=r(RRr,"Speech2TextConfig"),RRr.forEach(t),wOe=r(A7e," (Speech2Text model)"),A7e.forEach(t),AOe=i(T),ag=n(T,"LI",{});var L7e=s(ag);zH=n(L7e,"STRONG",{});var SRr=s(zH);LOe=r(SRr,"speech_to_text_2"),SRr.forEach(t),BOe=r(L7e," \u2014 "),fB=n(L7e,"A",{href:!0});var PRr=s(fB);xOe=r(PRr,"Speech2Text2Config"),PRr.forEach(t),kOe=r(L7e," (Speech2Text2 model)"),L7e.forEach(t),ROe=i(T),ng=n(T,"LI",{});var B7e=s(ng);WH=n(B7e,"STRONG",{});var $Rr=s(WH);SOe=r($Rr,"splinter"),$Rr.forEach(t),POe=r(B7e," \u2014 "),mB=n(B7e,"A",{href:!0});var IRr=s(mB);$Oe=r(IRr,"SplinterConfig"),IRr.forEach(t),IOe=r(B7e," (Splinter model)"),B7e.forEach(t),jOe=i(T),sg=n(T,"LI",{});var x7e=s(sg);QH=n(x7e,"STRONG",{});var jRr=s(QH);DOe=r(jRr,"squeezebert"),jRr.forEach(t),NOe=r(x7e," \u2014 "),gB=n(x7e,"A",{href:!0});var DRr=s(gB);qOe=r(DRr,"SqueezeBertConfig"),DRr.forEach(t),OOe=r(x7e," (SqueezeBERT model)"),x7e.forEach(t),GOe=i(T),lg=n(T,"LI",{});var k7e=s(lg);HH=n(k7e,"STRONG",{});var NRr=s(HH);XOe=r(NRr,"swin"),NRr.forEach(t),VOe=r(k7e," \u2014 "),hB=n(k7e,"A",{href:!0});var qRr=s(hB);zOe=r(qRr,"SwinConfig"),qRr.forEach(t),WOe=r(k7e," (Swin model)"),k7e.forEach(t),QOe=i(T),ig=n(T,"LI",{});var R7e=s(ig);UH=n(R7e,"STRONG",{});var ORr=s(UH);HOe=r(ORr,"t5"),ORr.forEach(t),UOe=r(R7e," \u2014 "),pB=n(R7e,"A",{href:!0});var GRr=s(pB);JOe=r(GRr,"T5Config"),GRr.forEach(t),YOe=r(R7e," (T5 model)"),R7e.forEach(t),KOe=i(T),dg=n(T,"LI",{});var S7e=s(dg);JH=n(S7e,"STRONG",{});var XRr=s(JH);ZOe=r(XRr,"tapas"),XRr.forEach(t),eGe=r(S7e," \u2014 "),_B=n(S7e,"A",{href:!0});var VRr=s(_B);oGe=r(VRr,"TapasConfig"),VRr.forEach(t),rGe=r(S7e," (TAPAS model)"),S7e.forEach(t),tGe=i(T),cg=n(T,"LI",{});var P7e=s(cg);YH=n(P7e,"STRONG",{});var zRr=s(YH);aGe=r(zRr,"transfo-xl"),zRr.forEach(t),nGe=r(P7e," \u2014 "),uB=n(P7e,"A",{href:!0});var WRr=s(uB);sGe=r(WRr,"TransfoXLConfig"),WRr.forEach(t),lGe=r(P7e," (Transformer-XL model)"),P7e.forEach(t),iGe=i(T),fg=n(T,"LI",{});var $7e=s(fg);KH=n($7e,"STRONG",{});var QRr=s(KH);dGe=r(QRr,"trocr"),QRr.forEach(t),cGe=r($7e," \u2014 "),bB=n($7e,"A",{href:!0});var HRr=s(bB);fGe=r(HRr,"TrOCRConfig"),HRr.forEach(t),mGe=r($7e," (TrOCR model)"),$7e.forEach(t),gGe=i(T),mg=n(T,"LI",{});var I7e=s(mg);ZH=n(I7e,"STRONG",{});var URr=s(ZH);hGe=r(URr,"unispeech"),URr.forEach(t),pGe=r(I7e," \u2014 "),vB=n(I7e,"A",{href:!0});var JRr=s(vB);_Ge=r(JRr,"UniSpeechConfig"),JRr.forEach(t),uGe=r(I7e," (UniSpeech model)"),I7e.forEach(t),bGe=i(T),gg=n(T,"LI",{});var j7e=s(gg);eU=n(j7e,"STRONG",{});var YRr=s(eU);vGe=r(YRr,"unispeech-sat"),YRr.forEach(t),TGe=r(j7e," \u2014 "),TB=n(j7e,"A",{href:!0});var KRr=s(TB);FGe=r(KRr,"UniSpeechSatConfig"),KRr.forEach(t),CGe=r(j7e," (UniSpeechSat model)"),j7e.forEach(t),MGe=i(T),hg=n(T,"LI",{});var D7e=s(hg);oU=n(D7e,"STRONG",{});var ZRr=s(oU);EGe=r(ZRr,"van"),ZRr.forEach(t),yGe=r(D7e," \u2014 "),FB=n(D7e,"A",{href:!0});var eSr=s(FB);wGe=r(eSr,"VanConfig"),eSr.forEach(t),AGe=r(D7e," (VAN model)"),D7e.forEach(t),LGe=i(T),pg=n(T,"LI",{});var N7e=s(pg);rU=n(N7e,"STRONG",{});var oSr=s(rU);BGe=r(oSr,"vilt"),oSr.forEach(t),xGe=r(N7e," \u2014 "),CB=n(N7e,"A",{href:!0});var rSr=s(CB);kGe=r(rSr,"ViltConfig"),rSr.forEach(t),RGe=r(N7e," (ViLT model)"),N7e.forEach(t),SGe=i(T),_g=n(T,"LI",{});var q7e=s(_g);tU=n(q7e,"STRONG",{});var tSr=s(tU);PGe=r(tSr,"vision-encoder-decoder"),tSr.forEach(t),$Ge=r(q7e," \u2014 "),MB=n(q7e,"A",{href:!0});var aSr=s(MB);IGe=r(aSr,"VisionEncoderDecoderConfig"),aSr.forEach(t),jGe=r(q7e," (Vision Encoder decoder model)"),q7e.forEach(t),DGe=i(T),ug=n(T,"LI",{});var O7e=s(ug);aU=n(O7e,"STRONG",{});var nSr=s(aU);NGe=r(nSr,"vision-text-dual-encoder"),nSr.forEach(t),qGe=r(O7e," \u2014 "),EB=n(O7e,"A",{href:!0});var sSr=s(EB);OGe=r(sSr,"VisionTextDualEncoderConfig"),sSr.forEach(t),GGe=r(O7e," (VisionTextDualEncoder model)"),O7e.forEach(t),XGe=i(T),bg=n(T,"LI",{});var G7e=s(bg);nU=n(G7e,"STRONG",{});var lSr=s(nU);VGe=r(lSr,"visual_bert"),lSr.forEach(t),zGe=r(G7e," \u2014 "),yB=n(G7e,"A",{href:!0});var iSr=s(yB);WGe=r(iSr,"VisualBertConfig"),iSr.forEach(t),QGe=r(G7e," (VisualBert model)"),G7e.forEach(t),HGe=i(T),vg=n(T,"LI",{});var X7e=s(vg);sU=n(X7e,"STRONG",{});var dSr=s(sU);UGe=r(dSr,"vit"),dSr.forEach(t),JGe=r(X7e," \u2014 "),wB=n(X7e,"A",{href:!0});var cSr=s(wB);YGe=r(cSr,"ViTConfig"),cSr.forEach(t),KGe=r(X7e," (ViT model)"),X7e.forEach(t),ZGe=i(T),Tg=n(T,"LI",{});var V7e=s(Tg);lU=n(V7e,"STRONG",{});var fSr=s(lU);eXe=r(fSr,"vit_mae"),fSr.forEach(t),oXe=r(V7e," \u2014 "),AB=n(V7e,"A",{href:!0});var mSr=s(AB);rXe=r(mSr,"ViTMAEConfig"),mSr.forEach(t),tXe=r(V7e," (ViTMAE model)"),V7e.forEach(t),aXe=i(T),Fg=n(T,"LI",{});var z7e=s(Fg);iU=n(z7e,"STRONG",{});var gSr=s(iU);nXe=r(gSr,"wav2vec2"),gSr.forEach(t),sXe=r(z7e," \u2014 "),LB=n(z7e,"A",{href:!0});var hSr=s(LB);lXe=r(hSr,"Wav2Vec2Config"),hSr.forEach(t),iXe=r(z7e," (Wav2Vec2 model)"),z7e.forEach(t),dXe=i(T),Cg=n(T,"LI",{});var W7e=s(Cg);dU=n(W7e,"STRONG",{});var pSr=s(dU);cXe=r(pSr,"wavlm"),pSr.forEach(t),fXe=r(W7e," \u2014 "),BB=n(W7e,"A",{href:!0});var _Sr=s(BB);mXe=r(_Sr,"WavLMConfig"),_Sr.forEach(t),gXe=r(W7e," (WavLM model)"),W7e.forEach(t),hXe=i(T),Mg=n(T,"LI",{});var Q7e=s(Mg);cU=n(Q7e,"STRONG",{});var uSr=s(cU);pXe=r(uSr,"xglm"),uSr.forEach(t),_Xe=r(Q7e," \u2014 "),xB=n(Q7e,"A",{href:!0});var bSr=s(xB);uXe=r(bSr,"XGLMConfig"),bSr.forEach(t),bXe=r(Q7e," (XGLM model)"),Q7e.forEach(t),vXe=i(T),Eg=n(T,"LI",{});var H7e=s(Eg);fU=n(H7e,"STRONG",{});var vSr=s(fU);TXe=r(vSr,"xlm"),vSr.forEach(t),FXe=r(H7e," \u2014 "),kB=n(H7e,"A",{href:!0});var TSr=s(kB);CXe=r(TSr,"XLMConfig"),TSr.forEach(t),MXe=r(H7e," (XLM model)"),H7e.forEach(t),EXe=i(T),yg=n(T,"LI",{});var U7e=s(yg);mU=n(U7e,"STRONG",{});var FSr=s(mU);yXe=r(FSr,"xlm-prophetnet"),FSr.forEach(t),wXe=r(U7e," \u2014 "),RB=n(U7e,"A",{href:!0});var CSr=s(RB);AXe=r(CSr,"XLMProphetNetConfig"),CSr.forEach(t),LXe=r(U7e," (XLMProphetNet model)"),U7e.forEach(t),BXe=i(T),wg=n(T,"LI",{});var J7e=s(wg);gU=n(J7e,"STRONG",{});var MSr=s(gU);xXe=r(MSr,"xlm-roberta"),MSr.forEach(t),kXe=r(J7e," \u2014 "),SB=n(J7e,"A",{href:!0});var ESr=s(SB);RXe=r(ESr,"XLMRobertaConfig"),ESr.forEach(t),SXe=r(J7e," (XLM-RoBERTa model)"),J7e.forEach(t),PXe=i(T),Ag=n(T,"LI",{});var Y7e=s(Ag);hU=n(Y7e,"STRONG",{});var ySr=s(hU);$Xe=r(ySr,"xlm-roberta-xl"),ySr.forEach(t),IXe=r(Y7e," \u2014 "),PB=n(Y7e,"A",{href:!0});var wSr=s(PB);jXe=r(wSr,"XLMRobertaXLConfig"),wSr.forEach(t),DXe=r(Y7e," (XLM-RoBERTa-XL model)"),Y7e.forEach(t),NXe=i(T),Lg=n(T,"LI",{});var K7e=s(Lg);pU=n(K7e,"STRONG",{});var ASr=s(pU);qXe=r(ASr,"xlnet"),ASr.forEach(t),OXe=r(K7e," \u2014 "),$B=n(K7e,"A",{href:!0});var LSr=s($B);GXe=r(LSr,"XLNetConfig"),LSr.forEach(t),XXe=r(K7e," (XLNet model)"),K7e.forEach(t),VXe=i(T),Bg=n(T,"LI",{});var Z7e=s(Bg);_U=n(Z7e,"STRONG",{});var BSr=s(_U);zXe=r(BSr,"yoso"),BSr.forEach(t),WXe=r(Z7e," \u2014 "),IB=n(Z7e,"A",{href:!0});var xSr=s(IB);QXe=r(xSr,"YosoConfig"),xSr.forEach(t),HXe=r(Z7e," (YOSO model)"),Z7e.forEach(t),T.forEach(t),UXe=i(ga),uU=n(ga,"P",{});var kSr=s(uU);JXe=r(kSr,"Examples:"),kSr.forEach(t),YXe=i(ga),m(lE.$$.fragment,ga),ga.forEach(t),KXe=i(Gs),xg=n(Gs,"DIV",{class:!0});var ARe=s(xg);m(iE.$$.fragment,ARe),ZXe=i(ARe),bU=n(ARe,"P",{});var RSr=s(bU);eVe=r(RSr,"Register a new configuration for this class."),RSr.forEach(t),ARe.forEach(t),Gs.forEach(t),yxe=i(c),Qi=n(c,"H2",{class:!0});var LRe=s(Qi);kg=n(LRe,"A",{id:!0,class:!0,href:!0});var SSr=s(kg);vU=n(SSr,"SPAN",{});var PSr=s(vU);m(dE.$$.fragment,PSr),PSr.forEach(t),SSr.forEach(t),oVe=i(LRe),TU=n(LRe,"SPAN",{});var $Sr=s(TU);rVe=r($Sr,"AutoTokenizer"),$Sr.forEach(t),LRe.forEach(t),wxe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(cE.$$.fragment,Xs),tVe=i(Xs),fE=n(Xs,"P",{});var BRe=s(fE);aVe=r(BRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),jB=n(BRe,"A",{href:!0});var ISr=s(jB);nVe=r(ISr,"AutoTokenizer.from_pretrained()"),ISr.forEach(t),sVe=r(BRe," class method."),BRe.forEach(t),lVe=i(Xs),mE=n(Xs,"P",{});var xRe=s(mE);iVe=r(xRe,"This class cannot be instantiated directly using "),FU=n(xRe,"CODE",{});var jSr=s(FU);dVe=r(jSr,"__init__()"),jSr.forEach(t),cVe=r(xRe," (throws an error)."),xRe.forEach(t),fVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(gE.$$.fragment,ha),mVe=i(ha),CU=n(ha,"P",{});var DSr=s(CU);gVe=r(DSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DSr.forEach(t),hVe=i(ha),Ga=n(ha,"P",{});var KM=s(Ga);pVe=r(KM,"The tokenizer class to instantiate is selected based on the "),MU=n(KM,"CODE",{});var NSr=s(MU);_Ve=r(NSr,"model_type"),NSr.forEach(t),uVe=r(KM,` property of the config object (either
passed as an argument or loaded from `),EU=n(KM,"CODE",{});var qSr=s(EU);bVe=r(qSr,"pretrained_model_name_or_path"),qSr.forEach(t),vVe=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yU=n(KM,"CODE",{});var OSr=s(yU);TVe=r(OSr,"pretrained_model_name_or_path"),OSr.forEach(t),FVe=r(KM,":"),KM.forEach(t),CVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var QL=s(Wn);wU=n(QL,"STRONG",{});var GSr=s(wU);MVe=r(GSr,"albert"),GSr.forEach(t),EVe=r(QL," \u2014 "),DB=n(QL,"A",{href:!0});var XSr=s(DB);yVe=r(XSr,"AlbertTokenizer"),XSr.forEach(t),wVe=r(QL," or "),NB=n(QL,"A",{href:!0});var VSr=s(NB);AVe=r(VSr,"AlbertTokenizerFast"),VSr.forEach(t),LVe=r(QL," (ALBERT model)"),QL.forEach(t),BVe=i(y),Qn=n(y,"LI",{});var HL=s(Qn);AU=n(HL,"STRONG",{});var zSr=s(AU);xVe=r(zSr,"bart"),zSr.forEach(t),kVe=r(HL," \u2014 "),qB=n(HL,"A",{href:!0});var WSr=s(qB);RVe=r(WSr,"BartTokenizer"),WSr.forEach(t),SVe=r(HL," or "),OB=n(HL,"A",{href:!0});var QSr=s(OB);PVe=r(QSr,"BartTokenizerFast"),QSr.forEach(t),$Ve=r(HL," (BART model)"),HL.forEach(t),IVe=i(y),Hn=n(y,"LI",{});var UL=s(Hn);LU=n(UL,"STRONG",{});var HSr=s(LU);jVe=r(HSr,"barthez"),HSr.forEach(t),DVe=r(UL," \u2014 "),GB=n(UL,"A",{href:!0});var USr=s(GB);NVe=r(USr,"BarthezTokenizer"),USr.forEach(t),qVe=r(UL," or "),XB=n(UL,"A",{href:!0});var JSr=s(XB);OVe=r(JSr,"BarthezTokenizerFast"),JSr.forEach(t),GVe=r(UL," (BARThez model)"),UL.forEach(t),XVe=i(y),Rg=n(y,"LI",{});var eFe=s(Rg);BU=n(eFe,"STRONG",{});var YSr=s(BU);VVe=r(YSr,"bartpho"),YSr.forEach(t),zVe=r(eFe," \u2014 "),VB=n(eFe,"A",{href:!0});var KSr=s(VB);WVe=r(KSr,"BartphoTokenizer"),KSr.forEach(t),QVe=r(eFe," (BARTpho model)"),eFe.forEach(t),HVe=i(y),Un=n(y,"LI",{});var JL=s(Un);xU=n(JL,"STRONG",{});var ZSr=s(xU);UVe=r(ZSr,"bert"),ZSr.forEach(t),JVe=r(JL," \u2014 "),zB=n(JL,"A",{href:!0});var ePr=s(zB);YVe=r(ePr,"BertTokenizer"),ePr.forEach(t),KVe=r(JL," or "),WB=n(JL,"A",{href:!0});var oPr=s(WB);ZVe=r(oPr,"BertTokenizerFast"),oPr.forEach(t),eze=r(JL," (BERT model)"),JL.forEach(t),oze=i(y),Sg=n(y,"LI",{});var oFe=s(Sg);kU=n(oFe,"STRONG",{});var rPr=s(kU);rze=r(rPr,"bert-generation"),rPr.forEach(t),tze=r(oFe," \u2014 "),QB=n(oFe,"A",{href:!0});var tPr=s(QB);aze=r(tPr,"BertGenerationTokenizer"),tPr.forEach(t),nze=r(oFe," (Bert Generation model)"),oFe.forEach(t),sze=i(y),Pg=n(y,"LI",{});var rFe=s(Pg);RU=n(rFe,"STRONG",{});var aPr=s(RU);lze=r(aPr,"bert-japanese"),aPr.forEach(t),ize=r(rFe," \u2014 "),HB=n(rFe,"A",{href:!0});var nPr=s(HB);dze=r(nPr,"BertJapaneseTokenizer"),nPr.forEach(t),cze=r(rFe," (BertJapanese model)"),rFe.forEach(t),fze=i(y),$g=n(y,"LI",{});var tFe=s($g);SU=n(tFe,"STRONG",{});var sPr=s(SU);mze=r(sPr,"bertweet"),sPr.forEach(t),gze=r(tFe," \u2014 "),UB=n(tFe,"A",{href:!0});var lPr=s(UB);hze=r(lPr,"BertweetTokenizer"),lPr.forEach(t),pze=r(tFe," (Bertweet model)"),tFe.forEach(t),_ze=i(y),Jn=n(y,"LI",{});var YL=s(Jn);PU=n(YL,"STRONG",{});var iPr=s(PU);uze=r(iPr,"big_bird"),iPr.forEach(t),bze=r(YL," \u2014 "),JB=n(YL,"A",{href:!0});var dPr=s(JB);vze=r(dPr,"BigBirdTokenizer"),dPr.forEach(t),Tze=r(YL," or "),YB=n(YL,"A",{href:!0});var cPr=s(YB);Fze=r(cPr,"BigBirdTokenizerFast"),cPr.forEach(t),Cze=r(YL," (BigBird model)"),YL.forEach(t),Mze=i(y),Yn=n(y,"LI",{});var KL=s(Yn);$U=n(KL,"STRONG",{});var fPr=s($U);Eze=r(fPr,"bigbird_pegasus"),fPr.forEach(t),yze=r(KL," \u2014 "),KB=n(KL,"A",{href:!0});var mPr=s(KB);wze=r(mPr,"PegasusTokenizer"),mPr.forEach(t),Aze=r(KL," or "),ZB=n(KL,"A",{href:!0});var gPr=s(ZB);Lze=r(gPr,"PegasusTokenizerFast"),gPr.forEach(t),Bze=r(KL," (BigBirdPegasus model)"),KL.forEach(t),xze=i(y),Kn=n(y,"LI",{});var ZL=s(Kn);IU=n(ZL,"STRONG",{});var hPr=s(IU);kze=r(hPr,"blenderbot"),hPr.forEach(t),Rze=r(ZL," \u2014 "),ex=n(ZL,"A",{href:!0});var pPr=s(ex);Sze=r(pPr,"BlenderbotTokenizer"),pPr.forEach(t),Pze=r(ZL," or "),ox=n(ZL,"A",{href:!0});var _Pr=s(ox);$ze=r(_Pr,"BlenderbotTokenizerFast"),_Pr.forEach(t),Ize=r(ZL," (Blenderbot model)"),ZL.forEach(t),jze=i(y),Ig=n(y,"LI",{});var aFe=s(Ig);jU=n(aFe,"STRONG",{});var uPr=s(jU);Dze=r(uPr,"blenderbot-small"),uPr.forEach(t),Nze=r(aFe," \u2014 "),rx=n(aFe,"A",{href:!0});var bPr=s(rx);qze=r(bPr,"BlenderbotSmallTokenizer"),bPr.forEach(t),Oze=r(aFe," (BlenderbotSmall model)"),aFe.forEach(t),Gze=i(y),jg=n(y,"LI",{});var nFe=s(jg);DU=n(nFe,"STRONG",{});var vPr=s(DU);Xze=r(vPr,"byt5"),vPr.forEach(t),Vze=r(nFe," \u2014 "),tx=n(nFe,"A",{href:!0});var TPr=s(tx);zze=r(TPr,"ByT5Tokenizer"),TPr.forEach(t),Wze=r(nFe," (ByT5 model)"),nFe.forEach(t),Qze=i(y),Zn=n(y,"LI",{});var e8=s(Zn);NU=n(e8,"STRONG",{});var FPr=s(NU);Hze=r(FPr,"camembert"),FPr.forEach(t),Uze=r(e8," \u2014 "),ax=n(e8,"A",{href:!0});var CPr=s(ax);Jze=r(CPr,"CamembertTokenizer"),CPr.forEach(t),Yze=r(e8," or "),nx=n(e8,"A",{href:!0});var MPr=s(nx);Kze=r(MPr,"CamembertTokenizerFast"),MPr.forEach(t),Zze=r(e8," (CamemBERT model)"),e8.forEach(t),eWe=i(y),Dg=n(y,"LI",{});var sFe=s(Dg);qU=n(sFe,"STRONG",{});var EPr=s(qU);oWe=r(EPr,"canine"),EPr.forEach(t),rWe=r(sFe," \u2014 "),sx=n(sFe,"A",{href:!0});var yPr=s(sx);tWe=r(yPr,"CanineTokenizer"),yPr.forEach(t),aWe=r(sFe," (Canine model)"),sFe.forEach(t),nWe=i(y),es=n(y,"LI",{});var o8=s(es);OU=n(o8,"STRONG",{});var wPr=s(OU);sWe=r(wPr,"clip"),wPr.forEach(t),lWe=r(o8," \u2014 "),lx=n(o8,"A",{href:!0});var APr=s(lx);iWe=r(APr,"CLIPTokenizer"),APr.forEach(t),dWe=r(o8," or "),ix=n(o8,"A",{href:!0});var LPr=s(ix);cWe=r(LPr,"CLIPTokenizerFast"),LPr.forEach(t),fWe=r(o8," (CLIP model)"),o8.forEach(t),mWe=i(y),os=n(y,"LI",{});var r8=s(os);GU=n(r8,"STRONG",{});var BPr=s(GU);gWe=r(BPr,"convbert"),BPr.forEach(t),hWe=r(r8," \u2014 "),dx=n(r8,"A",{href:!0});var xPr=s(dx);pWe=r(xPr,"ConvBertTokenizer"),xPr.forEach(t),_We=r(r8," or "),cx=n(r8,"A",{href:!0});var kPr=s(cx);uWe=r(kPr,"ConvBertTokenizerFast"),kPr.forEach(t),bWe=r(r8," (ConvBERT model)"),r8.forEach(t),vWe=i(y),rs=n(y,"LI",{});var t8=s(rs);XU=n(t8,"STRONG",{});var RPr=s(XU);TWe=r(RPr,"cpm"),RPr.forEach(t),FWe=r(t8," \u2014 "),fx=n(t8,"A",{href:!0});var SPr=s(fx);CWe=r(SPr,"CpmTokenizer"),SPr.forEach(t),MWe=r(t8," or "),VU=n(t8,"CODE",{});var PPr=s(VU);EWe=r(PPr,"CpmTokenizerFast"),PPr.forEach(t),yWe=r(t8," (CPM model)"),t8.forEach(t),wWe=i(y),Ng=n(y,"LI",{});var lFe=s(Ng);zU=n(lFe,"STRONG",{});var $Pr=s(zU);AWe=r($Pr,"ctrl"),$Pr.forEach(t),LWe=r(lFe," \u2014 "),mx=n(lFe,"A",{href:!0});var IPr=s(mx);BWe=r(IPr,"CTRLTokenizer"),IPr.forEach(t),xWe=r(lFe," (CTRL model)"),lFe.forEach(t),kWe=i(y),ts=n(y,"LI",{});var a8=s(ts);WU=n(a8,"STRONG",{});var jPr=s(WU);RWe=r(jPr,"deberta"),jPr.forEach(t),SWe=r(a8," \u2014 "),gx=n(a8,"A",{href:!0});var DPr=s(gx);PWe=r(DPr,"DebertaTokenizer"),DPr.forEach(t),$We=r(a8," or "),hx=n(a8,"A",{href:!0});var NPr=s(hx);IWe=r(NPr,"DebertaTokenizerFast"),NPr.forEach(t),jWe=r(a8," (DeBERTa model)"),a8.forEach(t),DWe=i(y),qg=n(y,"LI",{});var iFe=s(qg);QU=n(iFe,"STRONG",{});var qPr=s(QU);NWe=r(qPr,"deberta-v2"),qPr.forEach(t),qWe=r(iFe," \u2014 "),px=n(iFe,"A",{href:!0});var OPr=s(px);OWe=r(OPr,"DebertaV2Tokenizer"),OPr.forEach(t),GWe=r(iFe," (DeBERTa-v2 model)"),iFe.forEach(t),XWe=i(y),as=n(y,"LI",{});var n8=s(as);HU=n(n8,"STRONG",{});var GPr=s(HU);VWe=r(GPr,"distilbert"),GPr.forEach(t),zWe=r(n8," \u2014 "),_x=n(n8,"A",{href:!0});var XPr=s(_x);WWe=r(XPr,"DistilBertTokenizer"),XPr.forEach(t),QWe=r(n8," or "),ux=n(n8,"A",{href:!0});var VPr=s(ux);HWe=r(VPr,"DistilBertTokenizerFast"),VPr.forEach(t),UWe=r(n8," (DistilBERT model)"),n8.forEach(t),JWe=i(y),ns=n(y,"LI",{});var s8=s(ns);UU=n(s8,"STRONG",{});var zPr=s(UU);YWe=r(zPr,"dpr"),zPr.forEach(t),KWe=r(s8," \u2014 "),bx=n(s8,"A",{href:!0});var WPr=s(bx);ZWe=r(WPr,"DPRQuestionEncoderTokenizer"),WPr.forEach(t),eQe=r(s8," or "),vx=n(s8,"A",{href:!0});var QPr=s(vx);oQe=r(QPr,"DPRQuestionEncoderTokenizerFast"),QPr.forEach(t),rQe=r(s8," (DPR model)"),s8.forEach(t),tQe=i(y),ss=n(y,"LI",{});var l8=s(ss);JU=n(l8,"STRONG",{});var HPr=s(JU);aQe=r(HPr,"electra"),HPr.forEach(t),nQe=r(l8," \u2014 "),Tx=n(l8,"A",{href:!0});var UPr=s(Tx);sQe=r(UPr,"ElectraTokenizer"),UPr.forEach(t),lQe=r(l8," or "),Fx=n(l8,"A",{href:!0});var JPr=s(Fx);iQe=r(JPr,"ElectraTokenizerFast"),JPr.forEach(t),dQe=r(l8," (ELECTRA model)"),l8.forEach(t),cQe=i(y),Og=n(y,"LI",{});var dFe=s(Og);YU=n(dFe,"STRONG",{});var YPr=s(YU);fQe=r(YPr,"flaubert"),YPr.forEach(t),mQe=r(dFe," \u2014 "),Cx=n(dFe,"A",{href:!0});var KPr=s(Cx);gQe=r(KPr,"FlaubertTokenizer"),KPr.forEach(t),hQe=r(dFe," (FlauBERT model)"),dFe.forEach(t),pQe=i(y),ls=n(y,"LI",{});var i8=s(ls);KU=n(i8,"STRONG",{});var ZPr=s(KU);_Qe=r(ZPr,"fnet"),ZPr.forEach(t),uQe=r(i8," \u2014 "),Mx=n(i8,"A",{href:!0});var e$r=s(Mx);bQe=r(e$r,"FNetTokenizer"),e$r.forEach(t),vQe=r(i8," or "),Ex=n(i8,"A",{href:!0});var o$r=s(Ex);TQe=r(o$r,"FNetTokenizerFast"),o$r.forEach(t),FQe=r(i8," (FNet model)"),i8.forEach(t),CQe=i(y),Gg=n(y,"LI",{});var cFe=s(Gg);ZU=n(cFe,"STRONG",{});var r$r=s(ZU);MQe=r(r$r,"fsmt"),r$r.forEach(t),EQe=r(cFe," \u2014 "),yx=n(cFe,"A",{href:!0});var t$r=s(yx);yQe=r(t$r,"FSMTTokenizer"),t$r.forEach(t),wQe=r(cFe," (FairSeq Machine-Translation model)"),cFe.forEach(t),AQe=i(y),is=n(y,"LI",{});var d8=s(is);eJ=n(d8,"STRONG",{});var a$r=s(eJ);LQe=r(a$r,"funnel"),a$r.forEach(t),BQe=r(d8," \u2014 "),wx=n(d8,"A",{href:!0});var n$r=s(wx);xQe=r(n$r,"FunnelTokenizer"),n$r.forEach(t),kQe=r(d8," or "),Ax=n(d8,"A",{href:!0});var s$r=s(Ax);RQe=r(s$r,"FunnelTokenizerFast"),s$r.forEach(t),SQe=r(d8," (Funnel Transformer model)"),d8.forEach(t),PQe=i(y),ds=n(y,"LI",{});var c8=s(ds);oJ=n(c8,"STRONG",{});var l$r=s(oJ);$Qe=r(l$r,"gpt2"),l$r.forEach(t),IQe=r(c8," \u2014 "),Lx=n(c8,"A",{href:!0});var i$r=s(Lx);jQe=r(i$r,"GPT2Tokenizer"),i$r.forEach(t),DQe=r(c8," or "),Bx=n(c8,"A",{href:!0});var d$r=s(Bx);NQe=r(d$r,"GPT2TokenizerFast"),d$r.forEach(t),qQe=r(c8," (OpenAI GPT-2 model)"),c8.forEach(t),OQe=i(y),cs=n(y,"LI",{});var f8=s(cs);rJ=n(f8,"STRONG",{});var c$r=s(rJ);GQe=r(c$r,"gpt_neo"),c$r.forEach(t),XQe=r(f8," \u2014 "),xx=n(f8,"A",{href:!0});var f$r=s(xx);VQe=r(f$r,"GPT2Tokenizer"),f$r.forEach(t),zQe=r(f8," or "),kx=n(f8,"A",{href:!0});var m$r=s(kx);WQe=r(m$r,"GPT2TokenizerFast"),m$r.forEach(t),QQe=r(f8," (GPT Neo model)"),f8.forEach(t),HQe=i(y),fs=n(y,"LI",{});var m8=s(fs);tJ=n(m8,"STRONG",{});var g$r=s(tJ);UQe=r(g$r,"herbert"),g$r.forEach(t),JQe=r(m8," \u2014 "),Rx=n(m8,"A",{href:!0});var h$r=s(Rx);YQe=r(h$r,"HerbertTokenizer"),h$r.forEach(t),KQe=r(m8," or "),Sx=n(m8,"A",{href:!0});var p$r=s(Sx);ZQe=r(p$r,"HerbertTokenizerFast"),p$r.forEach(t),eHe=r(m8," (HerBERT model)"),m8.forEach(t),oHe=i(y),Xg=n(y,"LI",{});var fFe=s(Xg);aJ=n(fFe,"STRONG",{});var _$r=s(aJ);rHe=r(_$r,"hubert"),_$r.forEach(t),tHe=r(fFe," \u2014 "),Px=n(fFe,"A",{href:!0});var u$r=s(Px);aHe=r(u$r,"Wav2Vec2CTCTokenizer"),u$r.forEach(t),nHe=r(fFe," (Hubert model)"),fFe.forEach(t),sHe=i(y),ms=n(y,"LI",{});var g8=s(ms);nJ=n(g8,"STRONG",{});var b$r=s(nJ);lHe=r(b$r,"ibert"),b$r.forEach(t),iHe=r(g8," \u2014 "),$x=n(g8,"A",{href:!0});var v$r=s($x);dHe=r(v$r,"RobertaTokenizer"),v$r.forEach(t),cHe=r(g8," or "),Ix=n(g8,"A",{href:!0});var T$r=s(Ix);fHe=r(T$r,"RobertaTokenizerFast"),T$r.forEach(t),mHe=r(g8," (I-BERT model)"),g8.forEach(t),gHe=i(y),gs=n(y,"LI",{});var h8=s(gs);sJ=n(h8,"STRONG",{});var F$r=s(sJ);hHe=r(F$r,"layoutlm"),F$r.forEach(t),pHe=r(h8," \u2014 "),jx=n(h8,"A",{href:!0});var C$r=s(jx);_He=r(C$r,"LayoutLMTokenizer"),C$r.forEach(t),uHe=r(h8," or "),Dx=n(h8,"A",{href:!0});var M$r=s(Dx);bHe=r(M$r,"LayoutLMTokenizerFast"),M$r.forEach(t),vHe=r(h8," (LayoutLM model)"),h8.forEach(t),THe=i(y),hs=n(y,"LI",{});var p8=s(hs);lJ=n(p8,"STRONG",{});var E$r=s(lJ);FHe=r(E$r,"layoutlmv2"),E$r.forEach(t),CHe=r(p8," \u2014 "),Nx=n(p8,"A",{href:!0});var y$r=s(Nx);MHe=r(y$r,"LayoutLMv2Tokenizer"),y$r.forEach(t),EHe=r(p8," or "),qx=n(p8,"A",{href:!0});var w$r=s(qx);yHe=r(w$r,"LayoutLMv2TokenizerFast"),w$r.forEach(t),wHe=r(p8," (LayoutLMv2 model)"),p8.forEach(t),AHe=i(y),ps=n(y,"LI",{});var _8=s(ps);iJ=n(_8,"STRONG",{});var A$r=s(iJ);LHe=r(A$r,"layoutxlm"),A$r.forEach(t),BHe=r(_8," \u2014 "),Ox=n(_8,"A",{href:!0});var L$r=s(Ox);xHe=r(L$r,"LayoutXLMTokenizer"),L$r.forEach(t),kHe=r(_8," or "),Gx=n(_8,"A",{href:!0});var B$r=s(Gx);RHe=r(B$r,"LayoutXLMTokenizerFast"),B$r.forEach(t),SHe=r(_8," (LayoutXLM model)"),_8.forEach(t),PHe=i(y),_s=n(y,"LI",{});var u8=s(_s);dJ=n(u8,"STRONG",{});var x$r=s(dJ);$He=r(x$r,"led"),x$r.forEach(t),IHe=r(u8," \u2014 "),Xx=n(u8,"A",{href:!0});var k$r=s(Xx);jHe=r(k$r,"LEDTokenizer"),k$r.forEach(t),DHe=r(u8," or "),Vx=n(u8,"A",{href:!0});var R$r=s(Vx);NHe=r(R$r,"LEDTokenizerFast"),R$r.forEach(t),qHe=r(u8," (LED model)"),u8.forEach(t),OHe=i(y),us=n(y,"LI",{});var b8=s(us);cJ=n(b8,"STRONG",{});var S$r=s(cJ);GHe=r(S$r,"longformer"),S$r.forEach(t),XHe=r(b8," \u2014 "),zx=n(b8,"A",{href:!0});var P$r=s(zx);VHe=r(P$r,"LongformerTokenizer"),P$r.forEach(t),zHe=r(b8," or "),Wx=n(b8,"A",{href:!0});var $$r=s(Wx);WHe=r($$r,"LongformerTokenizerFast"),$$r.forEach(t),QHe=r(b8," (Longformer model)"),b8.forEach(t),HHe=i(y),Vg=n(y,"LI",{});var mFe=s(Vg);fJ=n(mFe,"STRONG",{});var I$r=s(fJ);UHe=r(I$r,"luke"),I$r.forEach(t),JHe=r(mFe," \u2014 "),Qx=n(mFe,"A",{href:!0});var j$r=s(Qx);YHe=r(j$r,"LukeTokenizer"),j$r.forEach(t),KHe=r(mFe," (LUKE model)"),mFe.forEach(t),ZHe=i(y),bs=n(y,"LI",{});var v8=s(bs);mJ=n(v8,"STRONG",{});var D$r=s(mJ);eUe=r(D$r,"lxmert"),D$r.forEach(t),oUe=r(v8," \u2014 "),Hx=n(v8,"A",{href:!0});var N$r=s(Hx);rUe=r(N$r,"LxmertTokenizer"),N$r.forEach(t),tUe=r(v8," or "),Ux=n(v8,"A",{href:!0});var q$r=s(Ux);aUe=r(q$r,"LxmertTokenizerFast"),q$r.forEach(t),nUe=r(v8," (LXMERT model)"),v8.forEach(t),sUe=i(y),zg=n(y,"LI",{});var gFe=s(zg);gJ=n(gFe,"STRONG",{});var O$r=s(gJ);lUe=r(O$r,"m2m_100"),O$r.forEach(t),iUe=r(gFe," \u2014 "),Jx=n(gFe,"A",{href:!0});var G$r=s(Jx);dUe=r(G$r,"M2M100Tokenizer"),G$r.forEach(t),cUe=r(gFe," (M2M100 model)"),gFe.forEach(t),fUe=i(y),Wg=n(y,"LI",{});var hFe=s(Wg);hJ=n(hFe,"STRONG",{});var X$r=s(hJ);mUe=r(X$r,"marian"),X$r.forEach(t),gUe=r(hFe," \u2014 "),Yx=n(hFe,"A",{href:!0});var V$r=s(Yx);hUe=r(V$r,"MarianTokenizer"),V$r.forEach(t),pUe=r(hFe," (Marian model)"),hFe.forEach(t),_Ue=i(y),vs=n(y,"LI",{});var T8=s(vs);pJ=n(T8,"STRONG",{});var z$r=s(pJ);uUe=r(z$r,"mbart"),z$r.forEach(t),bUe=r(T8," \u2014 "),Kx=n(T8,"A",{href:!0});var W$r=s(Kx);vUe=r(W$r,"MBartTokenizer"),W$r.forEach(t),TUe=r(T8," or "),Zx=n(T8,"A",{href:!0});var Q$r=s(Zx);FUe=r(Q$r,"MBartTokenizerFast"),Q$r.forEach(t),CUe=r(T8," (mBART model)"),T8.forEach(t),MUe=i(y),Ts=n(y,"LI",{});var F8=s(Ts);_J=n(F8,"STRONG",{});var H$r=s(_J);EUe=r(H$r,"mbart50"),H$r.forEach(t),yUe=r(F8," \u2014 "),ek=n(F8,"A",{href:!0});var U$r=s(ek);wUe=r(U$r,"MBart50Tokenizer"),U$r.forEach(t),AUe=r(F8," or "),ok=n(F8,"A",{href:!0});var J$r=s(ok);LUe=r(J$r,"MBart50TokenizerFast"),J$r.forEach(t),BUe=r(F8," (mBART-50 model)"),F8.forEach(t),xUe=i(y),Qg=n(y,"LI",{});var pFe=s(Qg);uJ=n(pFe,"STRONG",{});var Y$r=s(uJ);kUe=r(Y$r,"mluke"),Y$r.forEach(t),RUe=r(pFe," \u2014 "),rk=n(pFe,"A",{href:!0});var K$r=s(rk);SUe=r(K$r,"MLukeTokenizer"),K$r.forEach(t),PUe=r(pFe," (mLUKE model)"),pFe.forEach(t),$Ue=i(y),Fs=n(y,"LI",{});var C8=s(Fs);bJ=n(C8,"STRONG",{});var Z$r=s(bJ);IUe=r(Z$r,"mobilebert"),Z$r.forEach(t),jUe=r(C8," \u2014 "),tk=n(C8,"A",{href:!0});var eIr=s(tk);DUe=r(eIr,"MobileBertTokenizer"),eIr.forEach(t),NUe=r(C8," or "),ak=n(C8,"A",{href:!0});var oIr=s(ak);qUe=r(oIr,"MobileBertTokenizerFast"),oIr.forEach(t),OUe=r(C8," (MobileBERT model)"),C8.forEach(t),GUe=i(y),Cs=n(y,"LI",{});var M8=s(Cs);vJ=n(M8,"STRONG",{});var rIr=s(vJ);XUe=r(rIr,"mpnet"),rIr.forEach(t),VUe=r(M8," \u2014 "),nk=n(M8,"A",{href:!0});var tIr=s(nk);zUe=r(tIr,"MPNetTokenizer"),tIr.forEach(t),WUe=r(M8," or "),sk=n(M8,"A",{href:!0});var aIr=s(sk);QUe=r(aIr,"MPNetTokenizerFast"),aIr.forEach(t),HUe=r(M8," (MPNet model)"),M8.forEach(t),UUe=i(y),Ms=n(y,"LI",{});var E8=s(Ms);TJ=n(E8,"STRONG",{});var nIr=s(TJ);JUe=r(nIr,"mt5"),nIr.forEach(t),YUe=r(E8," \u2014 "),lk=n(E8,"A",{href:!0});var sIr=s(lk);KUe=r(sIr,"MT5Tokenizer"),sIr.forEach(t),ZUe=r(E8," or "),ik=n(E8,"A",{href:!0});var lIr=s(ik);eJe=r(lIr,"MT5TokenizerFast"),lIr.forEach(t),oJe=r(E8," (mT5 model)"),E8.forEach(t),rJe=i(y),Es=n(y,"LI",{});var y8=s(Es);FJ=n(y8,"STRONG",{});var iIr=s(FJ);tJe=r(iIr,"openai-gpt"),iIr.forEach(t),aJe=r(y8," \u2014 "),dk=n(y8,"A",{href:!0});var dIr=s(dk);nJe=r(dIr,"OpenAIGPTTokenizer"),dIr.forEach(t),sJe=r(y8," or "),ck=n(y8,"A",{href:!0});var cIr=s(ck);lJe=r(cIr,"OpenAIGPTTokenizerFast"),cIr.forEach(t),iJe=r(y8," (OpenAI GPT model)"),y8.forEach(t),dJe=i(y),ys=n(y,"LI",{});var w8=s(ys);CJ=n(w8,"STRONG",{});var fIr=s(CJ);cJe=r(fIr,"pegasus"),fIr.forEach(t),fJe=r(w8," \u2014 "),fk=n(w8,"A",{href:!0});var mIr=s(fk);mJe=r(mIr,"PegasusTokenizer"),mIr.forEach(t),gJe=r(w8," or "),mk=n(w8,"A",{href:!0});var gIr=s(mk);hJe=r(gIr,"PegasusTokenizerFast"),gIr.forEach(t),pJe=r(w8," (Pegasus model)"),w8.forEach(t),_Je=i(y),Hg=n(y,"LI",{});var _Fe=s(Hg);MJ=n(_Fe,"STRONG",{});var hIr=s(MJ);uJe=r(hIr,"perceiver"),hIr.forEach(t),bJe=r(_Fe," \u2014 "),gk=n(_Fe,"A",{href:!0});var pIr=s(gk);vJe=r(pIr,"PerceiverTokenizer"),pIr.forEach(t),TJe=r(_Fe," (Perceiver model)"),_Fe.forEach(t),FJe=i(y),Ug=n(y,"LI",{});var uFe=s(Ug);EJ=n(uFe,"STRONG",{});var _Ir=s(EJ);CJe=r(_Ir,"phobert"),_Ir.forEach(t),MJe=r(uFe," \u2014 "),hk=n(uFe,"A",{href:!0});var uIr=s(hk);EJe=r(uIr,"PhobertTokenizer"),uIr.forEach(t),yJe=r(uFe," (PhoBERT model)"),uFe.forEach(t),wJe=i(y),Jg=n(y,"LI",{});var bFe=s(Jg);yJ=n(bFe,"STRONG",{});var bIr=s(yJ);AJe=r(bIr,"plbart"),bIr.forEach(t),LJe=r(bFe," \u2014 "),pk=n(bFe,"A",{href:!0});var vIr=s(pk);BJe=r(vIr,"PLBartTokenizer"),vIr.forEach(t),xJe=r(bFe," (PLBart model)"),bFe.forEach(t),kJe=i(y),Yg=n(y,"LI",{});var vFe=s(Yg);wJ=n(vFe,"STRONG",{});var TIr=s(wJ);RJe=r(TIr,"prophetnet"),TIr.forEach(t),SJe=r(vFe," \u2014 "),_k=n(vFe,"A",{href:!0});var FIr=s(_k);PJe=r(FIr,"ProphetNetTokenizer"),FIr.forEach(t),$Je=r(vFe," (ProphetNet model)"),vFe.forEach(t),IJe=i(y),ws=n(y,"LI",{});var A8=s(ws);AJ=n(A8,"STRONG",{});var CIr=s(AJ);jJe=r(CIr,"qdqbert"),CIr.forEach(t),DJe=r(A8," \u2014 "),uk=n(A8,"A",{href:!0});var MIr=s(uk);NJe=r(MIr,"BertTokenizer"),MIr.forEach(t),qJe=r(A8," or "),bk=n(A8,"A",{href:!0});var EIr=s(bk);OJe=r(EIr,"BertTokenizerFast"),EIr.forEach(t),GJe=r(A8," (QDQBert model)"),A8.forEach(t),XJe=i(y),Kg=n(y,"LI",{});var TFe=s(Kg);LJ=n(TFe,"STRONG",{});var yIr=s(LJ);VJe=r(yIr,"rag"),yIr.forEach(t),zJe=r(TFe," \u2014 "),vk=n(TFe,"A",{href:!0});var wIr=s(vk);WJe=r(wIr,"RagTokenizer"),wIr.forEach(t),QJe=r(TFe," (RAG model)"),TFe.forEach(t),HJe=i(y),As=n(y,"LI",{});var L8=s(As);BJ=n(L8,"STRONG",{});var AIr=s(BJ);UJe=r(AIr,"realm"),AIr.forEach(t),JJe=r(L8," \u2014 "),Tk=n(L8,"A",{href:!0});var LIr=s(Tk);YJe=r(LIr,"RealmTokenizer"),LIr.forEach(t),KJe=r(L8," or "),Fk=n(L8,"A",{href:!0});var BIr=s(Fk);ZJe=r(BIr,"RealmTokenizerFast"),BIr.forEach(t),eYe=r(L8," (Realm model)"),L8.forEach(t),oYe=i(y),Ls=n(y,"LI",{});var B8=s(Ls);xJ=n(B8,"STRONG",{});var xIr=s(xJ);rYe=r(xIr,"reformer"),xIr.forEach(t),tYe=r(B8," \u2014 "),Ck=n(B8,"A",{href:!0});var kIr=s(Ck);aYe=r(kIr,"ReformerTokenizer"),kIr.forEach(t),nYe=r(B8," or "),Mk=n(B8,"A",{href:!0});var RIr=s(Mk);sYe=r(RIr,"ReformerTokenizerFast"),RIr.forEach(t),lYe=r(B8," (Reformer model)"),B8.forEach(t),iYe=i(y),Bs=n(y,"LI",{});var x8=s(Bs);kJ=n(x8,"STRONG",{});var SIr=s(kJ);dYe=r(SIr,"rembert"),SIr.forEach(t),cYe=r(x8," \u2014 "),Ek=n(x8,"A",{href:!0});var PIr=s(Ek);fYe=r(PIr,"RemBertTokenizer"),PIr.forEach(t),mYe=r(x8," or "),yk=n(x8,"A",{href:!0});var $Ir=s(yk);gYe=r($Ir,"RemBertTokenizerFast"),$Ir.forEach(t),hYe=r(x8," (RemBERT model)"),x8.forEach(t),pYe=i(y),xs=n(y,"LI",{});var k8=s(xs);RJ=n(k8,"STRONG",{});var IIr=s(RJ);_Ye=r(IIr,"retribert"),IIr.forEach(t),uYe=r(k8," \u2014 "),wk=n(k8,"A",{href:!0});var jIr=s(wk);bYe=r(jIr,"RetriBertTokenizer"),jIr.forEach(t),vYe=r(k8," or "),Ak=n(k8,"A",{href:!0});var DIr=s(Ak);TYe=r(DIr,"RetriBertTokenizerFast"),DIr.forEach(t),FYe=r(k8," (RetriBERT model)"),k8.forEach(t),CYe=i(y),ks=n(y,"LI",{});var R8=s(ks);SJ=n(R8,"STRONG",{});var NIr=s(SJ);MYe=r(NIr,"roberta"),NIr.forEach(t),EYe=r(R8," \u2014 "),Lk=n(R8,"A",{href:!0});var qIr=s(Lk);yYe=r(qIr,"RobertaTokenizer"),qIr.forEach(t),wYe=r(R8," or "),Bk=n(R8,"A",{href:!0});var OIr=s(Bk);AYe=r(OIr,"RobertaTokenizerFast"),OIr.forEach(t),LYe=r(R8," (RoBERTa model)"),R8.forEach(t),BYe=i(y),Rs=n(y,"LI",{});var S8=s(Rs);PJ=n(S8,"STRONG",{});var GIr=s(PJ);xYe=r(GIr,"roformer"),GIr.forEach(t),kYe=r(S8," \u2014 "),xk=n(S8,"A",{href:!0});var XIr=s(xk);RYe=r(XIr,"RoFormerTokenizer"),XIr.forEach(t),SYe=r(S8," or "),kk=n(S8,"A",{href:!0});var VIr=s(kk);PYe=r(VIr,"RoFormerTokenizerFast"),VIr.forEach(t),$Ye=r(S8," (RoFormer model)"),S8.forEach(t),IYe=i(y),Zg=n(y,"LI",{});var FFe=s(Zg);$J=n(FFe,"STRONG",{});var zIr=s($J);jYe=r(zIr,"speech_to_text"),zIr.forEach(t),DYe=r(FFe," \u2014 "),Rk=n(FFe,"A",{href:!0});var WIr=s(Rk);NYe=r(WIr,"Speech2TextTokenizer"),WIr.forEach(t),qYe=r(FFe," (Speech2Text model)"),FFe.forEach(t),OYe=i(y),eh=n(y,"LI",{});var CFe=s(eh);IJ=n(CFe,"STRONG",{});var QIr=s(IJ);GYe=r(QIr,"speech_to_text_2"),QIr.forEach(t),XYe=r(CFe," \u2014 "),Sk=n(CFe,"A",{href:!0});var HIr=s(Sk);VYe=r(HIr,"Speech2Text2Tokenizer"),HIr.forEach(t),zYe=r(CFe," (Speech2Text2 model)"),CFe.forEach(t),WYe=i(y),Ss=n(y,"LI",{});var P8=s(Ss);jJ=n(P8,"STRONG",{});var UIr=s(jJ);QYe=r(UIr,"splinter"),UIr.forEach(t),HYe=r(P8," \u2014 "),Pk=n(P8,"A",{href:!0});var JIr=s(Pk);UYe=r(JIr,"SplinterTokenizer"),JIr.forEach(t),JYe=r(P8," or "),$k=n(P8,"A",{href:!0});var YIr=s($k);YYe=r(YIr,"SplinterTokenizerFast"),YIr.forEach(t),KYe=r(P8," (Splinter model)"),P8.forEach(t),ZYe=i(y),Ps=n(y,"LI",{});var $8=s(Ps);DJ=n($8,"STRONG",{});var KIr=s(DJ);eKe=r(KIr,"squeezebert"),KIr.forEach(t),oKe=r($8," \u2014 "),Ik=n($8,"A",{href:!0});var ZIr=s(Ik);rKe=r(ZIr,"SqueezeBertTokenizer"),ZIr.forEach(t),tKe=r($8," or "),jk=n($8,"A",{href:!0});var ejr=s(jk);aKe=r(ejr,"SqueezeBertTokenizerFast"),ejr.forEach(t),nKe=r($8," (SqueezeBERT model)"),$8.forEach(t),sKe=i(y),$s=n(y,"LI",{});var I8=s($s);NJ=n(I8,"STRONG",{});var ojr=s(NJ);lKe=r(ojr,"t5"),ojr.forEach(t),iKe=r(I8," \u2014 "),Dk=n(I8,"A",{href:!0});var rjr=s(Dk);dKe=r(rjr,"T5Tokenizer"),rjr.forEach(t),cKe=r(I8," or "),Nk=n(I8,"A",{href:!0});var tjr=s(Nk);fKe=r(tjr,"T5TokenizerFast"),tjr.forEach(t),mKe=r(I8," (T5 model)"),I8.forEach(t),gKe=i(y),oh=n(y,"LI",{});var MFe=s(oh);qJ=n(MFe,"STRONG",{});var ajr=s(qJ);hKe=r(ajr,"tapas"),ajr.forEach(t),pKe=r(MFe," \u2014 "),qk=n(MFe,"A",{href:!0});var njr=s(qk);_Ke=r(njr,"TapasTokenizer"),njr.forEach(t),uKe=r(MFe," (TAPAS model)"),MFe.forEach(t),bKe=i(y),rh=n(y,"LI",{});var EFe=s(rh);OJ=n(EFe,"STRONG",{});var sjr=s(OJ);vKe=r(sjr,"transfo-xl"),sjr.forEach(t),TKe=r(EFe," \u2014 "),Ok=n(EFe,"A",{href:!0});var ljr=s(Ok);FKe=r(ljr,"TransfoXLTokenizer"),ljr.forEach(t),CKe=r(EFe," (Transformer-XL model)"),EFe.forEach(t),MKe=i(y),th=n(y,"LI",{});var yFe=s(th);GJ=n(yFe,"STRONG",{});var ijr=s(GJ);EKe=r(ijr,"wav2vec2"),ijr.forEach(t),yKe=r(yFe," \u2014 "),Gk=n(yFe,"A",{href:!0});var djr=s(Gk);wKe=r(djr,"Wav2Vec2CTCTokenizer"),djr.forEach(t),AKe=r(yFe," (Wav2Vec2 model)"),yFe.forEach(t),LKe=i(y),ah=n(y,"LI",{});var wFe=s(ah);XJ=n(wFe,"STRONG",{});var cjr=s(XJ);BKe=r(cjr,"wav2vec2_phoneme"),cjr.forEach(t),xKe=r(wFe," \u2014 "),Xk=n(wFe,"A",{href:!0});var fjr=s(Xk);kKe=r(fjr,"Wav2Vec2PhonemeCTCTokenizer"),fjr.forEach(t),RKe=r(wFe," (Wav2Vec2Phoneme model)"),wFe.forEach(t),SKe=i(y),Is=n(y,"LI",{});var j8=s(Is);VJ=n(j8,"STRONG",{});var mjr=s(VJ);PKe=r(mjr,"xglm"),mjr.forEach(t),$Ke=r(j8," \u2014 "),Vk=n(j8,"A",{href:!0});var gjr=s(Vk);IKe=r(gjr,"XGLMTokenizer"),gjr.forEach(t),jKe=r(j8," or "),zk=n(j8,"A",{href:!0});var hjr=s(zk);DKe=r(hjr,"XGLMTokenizerFast"),hjr.forEach(t),NKe=r(j8," (XGLM model)"),j8.forEach(t),qKe=i(y),nh=n(y,"LI",{});var AFe=s(nh);zJ=n(AFe,"STRONG",{});var pjr=s(zJ);OKe=r(pjr,"xlm"),pjr.forEach(t),GKe=r(AFe," \u2014 "),Wk=n(AFe,"A",{href:!0});var _jr=s(Wk);XKe=r(_jr,"XLMTokenizer"),_jr.forEach(t),VKe=r(AFe," (XLM model)"),AFe.forEach(t),zKe=i(y),sh=n(y,"LI",{});var LFe=s(sh);WJ=n(LFe,"STRONG",{});var ujr=s(WJ);WKe=r(ujr,"xlm-prophetnet"),ujr.forEach(t),QKe=r(LFe," \u2014 "),Qk=n(LFe,"A",{href:!0});var bjr=s(Qk);HKe=r(bjr,"XLMProphetNetTokenizer"),bjr.forEach(t),UKe=r(LFe," (XLMProphetNet model)"),LFe.forEach(t),JKe=i(y),js=n(y,"LI",{});var D8=s(js);QJ=n(D8,"STRONG",{});var vjr=s(QJ);YKe=r(vjr,"xlm-roberta"),vjr.forEach(t),KKe=r(D8," \u2014 "),Hk=n(D8,"A",{href:!0});var Tjr=s(Hk);ZKe=r(Tjr,"XLMRobertaTokenizer"),Tjr.forEach(t),eZe=r(D8," or "),Uk=n(D8,"A",{href:!0});var Fjr=s(Uk);oZe=r(Fjr,"XLMRobertaTokenizerFast"),Fjr.forEach(t),rZe=r(D8," (XLM-RoBERTa model)"),D8.forEach(t),tZe=i(y),Ds=n(y,"LI",{});var N8=s(Ds);HJ=n(N8,"STRONG",{});var Cjr=s(HJ);aZe=r(Cjr,"xlnet"),Cjr.forEach(t),nZe=r(N8," \u2014 "),Jk=n(N8,"A",{href:!0});var Mjr=s(Jk);sZe=r(Mjr,"XLNetTokenizer"),Mjr.forEach(t),lZe=r(N8," or "),Yk=n(N8,"A",{href:!0});var Ejr=s(Yk);iZe=r(Ejr,"XLNetTokenizerFast"),Ejr.forEach(t),dZe=r(N8," (XLNet model)"),N8.forEach(t),y.forEach(t),cZe=i(ha),UJ=n(ha,"P",{});var yjr=s(UJ);fZe=r(yjr,"Examples:"),yjr.forEach(t),mZe=i(ha),m(hE.$$.fragment,ha),ha.forEach(t),gZe=i(Xs),lh=n(Xs,"DIV",{class:!0});var kRe=s(lh);m(pE.$$.fragment,kRe),hZe=i(kRe),JJ=n(kRe,"P",{});var wjr=s(JJ);pZe=r(wjr,"Register a new tokenizer in this mapping."),wjr.forEach(t),kRe.forEach(t),Xs.forEach(t),Axe=i(c),Hi=n(c,"H2",{class:!0});var RRe=s(Hi);ih=n(RRe,"A",{id:!0,class:!0,href:!0});var Ajr=s(ih);YJ=n(Ajr,"SPAN",{});var Ljr=s(YJ);m(_E.$$.fragment,Ljr),Ljr.forEach(t),Ajr.forEach(t),_Ze=i(RRe),KJ=n(RRe,"SPAN",{});var Bjr=s(KJ);uZe=r(Bjr,"AutoFeatureExtractor"),Bjr.forEach(t),RRe.forEach(t),Lxe=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(uE.$$.fragment,Vs),bZe=i(Vs),bE=n(Vs,"P",{});var SRe=s(bE);vZe=r(SRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Kk=n(SRe,"A",{href:!0});var xjr=s(Kk);TZe=r(xjr,"AutoFeatureExtractor.from_pretrained()"),xjr.forEach(t),FZe=r(SRe," class method."),SRe.forEach(t),CZe=i(Vs),vE=n(Vs,"P",{});var PRe=s(vE);MZe=r(PRe,"This class cannot be instantiated directly using "),ZJ=n(PRe,"CODE",{});var kjr=s(ZJ);EZe=r(kjr,"__init__()"),kjr.forEach(t),yZe=r(PRe," (throws an error)."),PRe.forEach(t),wZe=i(Vs),Ie=n(Vs,"DIV",{class:!0});var Dt=s(Ie);m(TE.$$.fragment,Dt),AZe=i(Dt),eY=n(Dt,"P",{});var Rjr=s(eY);LZe=r(Rjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Rjr.forEach(t),BZe=i(Dt),Xa=n(Dt,"P",{});var ZM=s(Xa);xZe=r(ZM,"The feature extractor class to instantiate is selected based on the "),oY=n(ZM,"CODE",{});var Sjr=s(oY);kZe=r(Sjr,"model_type"),Sjr.forEach(t),RZe=r(ZM,` property of the config object
(either passed as an argument or loaded from `),rY=n(ZM,"CODE",{});var Pjr=s(rY);SZe=r(Pjr,"pretrained_model_name_or_path"),Pjr.forEach(t),PZe=r(ZM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tY=n(ZM,"CODE",{});var $jr=s(tY);$Ze=r($jr,"pretrained_model_name_or_path"),$jr.forEach(t),IZe=r(ZM,":"),ZM.forEach(t),jZe=i(Dt),te=n(Dt,"UL",{});var se=s(te);dh=n(se,"LI",{});var BFe=s(dh);aY=n(BFe,"STRONG",{});var Ijr=s(aY);DZe=r(Ijr,"beit"),Ijr.forEach(t),NZe=r(BFe," \u2014 "),Zk=n(BFe,"A",{href:!0});var jjr=s(Zk);qZe=r(jjr,"BeitFeatureExtractor"),jjr.forEach(t),OZe=r(BFe," (BEiT model)"),BFe.forEach(t),GZe=i(se),ch=n(se,"LI",{});var xFe=s(ch);nY=n(xFe,"STRONG",{});var Djr=s(nY);XZe=r(Djr,"clip"),Djr.forEach(t),VZe=r(xFe," \u2014 "),eR=n(xFe,"A",{href:!0});var Njr=s(eR);zZe=r(Njr,"CLIPFeatureExtractor"),Njr.forEach(t),WZe=r(xFe," (CLIP model)"),xFe.forEach(t),QZe=i(se),fh=n(se,"LI",{});var kFe=s(fh);sY=n(kFe,"STRONG",{});var qjr=s(sY);HZe=r(qjr,"convnext"),qjr.forEach(t),UZe=r(kFe," \u2014 "),oR=n(kFe,"A",{href:!0});var Ojr=s(oR);JZe=r(Ojr,"ConvNextFeatureExtractor"),Ojr.forEach(t),YZe=r(kFe," (ConvNext model)"),kFe.forEach(t),KZe=i(se),mh=n(se,"LI",{});var RFe=s(mh);lY=n(RFe,"STRONG",{});var Gjr=s(lY);ZZe=r(Gjr,"deit"),Gjr.forEach(t),eeo=r(RFe," \u2014 "),rR=n(RFe,"A",{href:!0});var Xjr=s(rR);oeo=r(Xjr,"DeiTFeatureExtractor"),Xjr.forEach(t),reo=r(RFe," (DeiT model)"),RFe.forEach(t),teo=i(se),gh=n(se,"LI",{});var SFe=s(gh);iY=n(SFe,"STRONG",{});var Vjr=s(iY);aeo=r(Vjr,"detr"),Vjr.forEach(t),neo=r(SFe," \u2014 "),tR=n(SFe,"A",{href:!0});var zjr=s(tR);seo=r(zjr,"DetrFeatureExtractor"),zjr.forEach(t),leo=r(SFe," (DETR model)"),SFe.forEach(t),ieo=i(se),hh=n(se,"LI",{});var PFe=s(hh);dY=n(PFe,"STRONG",{});var Wjr=s(dY);deo=r(Wjr,"hubert"),Wjr.forEach(t),ceo=r(PFe," \u2014 "),aR=n(PFe,"A",{href:!0});var Qjr=s(aR);feo=r(Qjr,"Wav2Vec2FeatureExtractor"),Qjr.forEach(t),meo=r(PFe," (Hubert model)"),PFe.forEach(t),geo=i(se),ph=n(se,"LI",{});var $Fe=s(ph);cY=n($Fe,"STRONG",{});var Hjr=s(cY);heo=r(Hjr,"layoutlmv2"),Hjr.forEach(t),peo=r($Fe," \u2014 "),nR=n($Fe,"A",{href:!0});var Ujr=s(nR);_eo=r(Ujr,"LayoutLMv2FeatureExtractor"),Ujr.forEach(t),ueo=r($Fe," (LayoutLMv2 model)"),$Fe.forEach(t),beo=i(se),_h=n(se,"LI",{});var IFe=s(_h);fY=n(IFe,"STRONG",{});var Jjr=s(fY);veo=r(Jjr,"maskformer"),Jjr.forEach(t),Teo=r(IFe," \u2014 "),sR=n(IFe,"A",{href:!0});var Yjr=s(sR);Feo=r(Yjr,"MaskFormerFeatureExtractor"),Yjr.forEach(t),Ceo=r(IFe," (MaskFormer model)"),IFe.forEach(t),Meo=i(se),uh=n(se,"LI",{});var jFe=s(uh);mY=n(jFe,"STRONG",{});var Kjr=s(mY);Eeo=r(Kjr,"perceiver"),Kjr.forEach(t),yeo=r(jFe," \u2014 "),lR=n(jFe,"A",{href:!0});var Zjr=s(lR);weo=r(Zjr,"PerceiverFeatureExtractor"),Zjr.forEach(t),Aeo=r(jFe," (Perceiver model)"),jFe.forEach(t),Leo=i(se),bh=n(se,"LI",{});var DFe=s(bh);gY=n(DFe,"STRONG",{});var eDr=s(gY);Beo=r(eDr,"poolformer"),eDr.forEach(t),xeo=r(DFe," \u2014 "),iR=n(DFe,"A",{href:!0});var oDr=s(iR);keo=r(oDr,"PoolFormerFeatureExtractor"),oDr.forEach(t),Reo=r(DFe," (PoolFormer model)"),DFe.forEach(t),Seo=i(se),vh=n(se,"LI",{});var NFe=s(vh);hY=n(NFe,"STRONG",{});var rDr=s(hY);Peo=r(rDr,"segformer"),rDr.forEach(t),$eo=r(NFe," \u2014 "),dR=n(NFe,"A",{href:!0});var tDr=s(dR);Ieo=r(tDr,"SegformerFeatureExtractor"),tDr.forEach(t),jeo=r(NFe," (SegFormer model)"),NFe.forEach(t),Deo=i(se),Th=n(se,"LI",{});var qFe=s(Th);pY=n(qFe,"STRONG",{});var aDr=s(pY);Neo=r(aDr,"speech_to_text"),aDr.forEach(t),qeo=r(qFe," \u2014 "),cR=n(qFe,"A",{href:!0});var nDr=s(cR);Oeo=r(nDr,"Speech2TextFeatureExtractor"),nDr.forEach(t),Geo=r(qFe," (Speech2Text model)"),qFe.forEach(t),Xeo=i(se),Fh=n(se,"LI",{});var OFe=s(Fh);_Y=n(OFe,"STRONG",{});var sDr=s(_Y);Veo=r(sDr,"swin"),sDr.forEach(t),zeo=r(OFe," \u2014 "),fR=n(OFe,"A",{href:!0});var lDr=s(fR);Weo=r(lDr,"ViTFeatureExtractor"),lDr.forEach(t),Qeo=r(OFe," (Swin model)"),OFe.forEach(t),Heo=i(se),Ch=n(se,"LI",{});var GFe=s(Ch);uY=n(GFe,"STRONG",{});var iDr=s(uY);Ueo=r(iDr,"van"),iDr.forEach(t),Jeo=r(GFe," \u2014 "),mR=n(GFe,"A",{href:!0});var dDr=s(mR);Yeo=r(dDr,"ConvNextFeatureExtractor"),dDr.forEach(t),Keo=r(GFe," (VAN model)"),GFe.forEach(t),Zeo=i(se),Mh=n(se,"LI",{});var XFe=s(Mh);bY=n(XFe,"STRONG",{});var cDr=s(bY);eoo=r(cDr,"vit"),cDr.forEach(t),ooo=r(XFe," \u2014 "),gR=n(XFe,"A",{href:!0});var fDr=s(gR);roo=r(fDr,"ViTFeatureExtractor"),fDr.forEach(t),too=r(XFe," (ViT model)"),XFe.forEach(t),aoo=i(se),Eh=n(se,"LI",{});var VFe=s(Eh);vY=n(VFe,"STRONG",{});var mDr=s(vY);noo=r(mDr,"vit_mae"),mDr.forEach(t),soo=r(VFe," \u2014 "),hR=n(VFe,"A",{href:!0});var gDr=s(hR);loo=r(gDr,"ViTFeatureExtractor"),gDr.forEach(t),ioo=r(VFe," (ViTMAE model)"),VFe.forEach(t),doo=i(se),yh=n(se,"LI",{});var zFe=s(yh);TY=n(zFe,"STRONG",{});var hDr=s(TY);coo=r(hDr,"wav2vec2"),hDr.forEach(t),foo=r(zFe," \u2014 "),pR=n(zFe,"A",{href:!0});var pDr=s(pR);moo=r(pDr,"Wav2Vec2FeatureExtractor"),pDr.forEach(t),goo=r(zFe," (Wav2Vec2 model)"),zFe.forEach(t),se.forEach(t),hoo=i(Dt),m(wh.$$.fragment,Dt),poo=i(Dt),FY=n(Dt,"P",{});var _Dr=s(FY);_oo=r(_Dr,"Examples:"),_Dr.forEach(t),uoo=i(Dt),m(FE.$$.fragment,Dt),Dt.forEach(t),boo=i(Vs),Ah=n(Vs,"DIV",{class:!0});var $Re=s(Ah);m(CE.$$.fragment,$Re),voo=i($Re),CY=n($Re,"P",{});var uDr=s(CY);Too=r(uDr,"Register a new feature extractor for this class."),uDr.forEach(t),$Re.forEach(t),Vs.forEach(t),Bxe=i(c),Ui=n(c,"H2",{class:!0});var IRe=s(Ui);Lh=n(IRe,"A",{id:!0,class:!0,href:!0});var bDr=s(Lh);MY=n(bDr,"SPAN",{});var vDr=s(MY);m(ME.$$.fragment,vDr),vDr.forEach(t),bDr.forEach(t),Foo=i(IRe),EY=n(IRe,"SPAN",{});var TDr=s(EY);Coo=r(TDr,"AutoProcessor"),TDr.forEach(t),IRe.forEach(t),xxe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(EE.$$.fragment,zs),Moo=i(zs),yE=n(zs,"P",{});var jRe=s(yE);Eoo=r(jRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),_R=n(jRe,"A",{href:!0});var FDr=s(_R);yoo=r(FDr,"AutoProcessor.from_pretrained()"),FDr.forEach(t),woo=r(jRe," class method."),jRe.forEach(t),Aoo=i(zs),wE=n(zs,"P",{});var DRe=s(wE);Loo=r(DRe,"This class cannot be instantiated directly using "),yY=n(DRe,"CODE",{});var CDr=s(yY);Boo=r(CDr,"__init__()"),CDr.forEach(t),xoo=r(DRe," (throws an error)."),DRe.forEach(t),koo=i(zs),je=n(zs,"DIV",{class:!0});var Nt=s(je);m(AE.$$.fragment,Nt),Roo=i(Nt),wY=n(Nt,"P",{});var MDr=s(wY);Soo=r(MDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),MDr.forEach(t),Poo=i(Nt),Ji=n(Nt,"P",{});var xz=s(Ji);$oo=r(xz,"The processor class to instantiate is selected based on the "),AY=n(xz,"CODE",{});var EDr=s(AY);Ioo=r(EDr,"model_type"),EDr.forEach(t),joo=r(xz,` property of the config object (either
passed as an argument or loaded from `),LY=n(xz,"CODE",{});var yDr=s(LY);Doo=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),Noo=r(xz," if possible):"),xz.forEach(t),qoo=i(Nt),xe=n(Nt,"UL",{});var No=s(xe);Bh=n(No,"LI",{});var WFe=s(Bh);BY=n(WFe,"STRONG",{});var wDr=s(BY);Ooo=r(wDr,"clip"),wDr.forEach(t),Goo=r(WFe," \u2014 "),uR=n(WFe,"A",{href:!0});var ADr=s(uR);Xoo=r(ADr,"CLIPProcessor"),ADr.forEach(t),Voo=r(WFe," (CLIP model)"),WFe.forEach(t),zoo=i(No),xh=n(No,"LI",{});var QFe=s(xh);xY=n(QFe,"STRONG",{});var LDr=s(xY);Woo=r(LDr,"layoutlmv2"),LDr.forEach(t),Qoo=r(QFe," \u2014 "),bR=n(QFe,"A",{href:!0});var BDr=s(bR);Hoo=r(BDr,"LayoutLMv2Processor"),BDr.forEach(t),Uoo=r(QFe," (LayoutLMv2 model)"),QFe.forEach(t),Joo=i(No),kh=n(No,"LI",{});var HFe=s(kh);kY=n(HFe,"STRONG",{});var xDr=s(kY);Yoo=r(xDr,"layoutxlm"),xDr.forEach(t),Koo=r(HFe," \u2014 "),vR=n(HFe,"A",{href:!0});var kDr=s(vR);Zoo=r(kDr,"LayoutXLMProcessor"),kDr.forEach(t),ero=r(HFe," (LayoutXLM model)"),HFe.forEach(t),oro=i(No),Rh=n(No,"LI",{});var UFe=s(Rh);RY=n(UFe,"STRONG",{});var RDr=s(RY);rro=r(RDr,"speech_to_text"),RDr.forEach(t),tro=r(UFe," \u2014 "),TR=n(UFe,"A",{href:!0});var SDr=s(TR);aro=r(SDr,"Speech2TextProcessor"),SDr.forEach(t),nro=r(UFe," (Speech2Text model)"),UFe.forEach(t),sro=i(No),Sh=n(No,"LI",{});var JFe=s(Sh);SY=n(JFe,"STRONG",{});var PDr=s(SY);lro=r(PDr,"speech_to_text_2"),PDr.forEach(t),iro=r(JFe," \u2014 "),FR=n(JFe,"A",{href:!0});var $Dr=s(FR);dro=r($Dr,"Speech2Text2Processor"),$Dr.forEach(t),cro=r(JFe," (Speech2Text2 model)"),JFe.forEach(t),fro=i(No),Ph=n(No,"LI",{});var YFe=s(Ph);PY=n(YFe,"STRONG",{});var IDr=s(PY);mro=r(IDr,"trocr"),IDr.forEach(t),gro=r(YFe," \u2014 "),CR=n(YFe,"A",{href:!0});var jDr=s(CR);hro=r(jDr,"TrOCRProcessor"),jDr.forEach(t),pro=r(YFe," (TrOCR model)"),YFe.forEach(t),_ro=i(No),$h=n(No,"LI",{});var KFe=s($h);$Y=n(KFe,"STRONG",{});var DDr=s($Y);uro=r(DDr,"vision-text-dual-encoder"),DDr.forEach(t),bro=r(KFe," \u2014 "),MR=n(KFe,"A",{href:!0});var NDr=s(MR);vro=r(NDr,"VisionTextDualEncoderProcessor"),NDr.forEach(t),Tro=r(KFe," (VisionTextDualEncoder model)"),KFe.forEach(t),Fro=i(No),Ih=n(No,"LI",{});var ZFe=s(Ih);IY=n(ZFe,"STRONG",{});var qDr=s(IY);Cro=r(qDr,"wav2vec2"),qDr.forEach(t),Mro=r(ZFe," \u2014 "),ER=n(ZFe,"A",{href:!0});var ODr=s(ER);Ero=r(ODr,"Wav2Vec2Processor"),ODr.forEach(t),yro=r(ZFe," (Wav2Vec2 model)"),ZFe.forEach(t),No.forEach(t),wro=i(Nt),m(jh.$$.fragment,Nt),Aro=i(Nt),jY=n(Nt,"P",{});var GDr=s(jY);Lro=r(GDr,"Examples:"),GDr.forEach(t),Bro=i(Nt),m(LE.$$.fragment,Nt),Nt.forEach(t),xro=i(zs),Dh=n(zs,"DIV",{class:!0});var NRe=s(Dh);m(BE.$$.fragment,NRe),kro=i(NRe),DY=n(NRe,"P",{});var XDr=s(DY);Rro=r(XDr,"Register a new processor for this class."),XDr.forEach(t),NRe.forEach(t),zs.forEach(t),kxe=i(c),Yi=n(c,"H2",{class:!0});var qRe=s(Yi);Nh=n(qRe,"A",{id:!0,class:!0,href:!0});var VDr=s(Nh);NY=n(VDr,"SPAN",{});var zDr=s(NY);m(xE.$$.fragment,zDr),zDr.forEach(t),VDr.forEach(t),Sro=i(qRe),qY=n(qRe,"SPAN",{});var WDr=s(qY);Pro=r(WDr,"AutoModel"),WDr.forEach(t),qRe.forEach(t),Rxe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(kE.$$.fragment,Ws),$ro=i(Ws),Ki=n(Ws,"P",{});var kz=s(Ki);Iro=r(kz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OY=n(kz,"CODE",{});var QDr=s(OY);jro=r(QDr,"from_pretrained()"),QDr.forEach(t),Dro=r(kz,"class method or the "),GY=n(kz,"CODE",{});var HDr=s(GY);Nro=r(HDr,"from_config()"),HDr.forEach(t),qro=r(kz,`class
method.`),kz.forEach(t),Oro=i(Ws),RE=n(Ws,"P",{});var ORe=s(RE);Gro=r(ORe,"This class cannot be instantiated directly using "),XY=n(ORe,"CODE",{});var UDr=s(XY);Xro=r(UDr,"__init__()"),UDr.forEach(t),Vro=r(ORe," (throws an error)."),ORe.forEach(t),zro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(SE.$$.fragment,Qs),Wro=i(Qs),VY=n(Qs,"P",{});var JDr=s(VY);Qro=r(JDr,"Instantiates one of the base model classes of the library from a configuration."),JDr.forEach(t),Hro=i(Qs),Zi=n(Qs,"P",{});var Rz=s(Zi);Uro=r(Rz,`Note:
Loading a model from its configuration file does `),zY=n(Rz,"STRONG",{});var YDr=s(zY);Jro=r(YDr,"not"),YDr.forEach(t),Yro=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Rz,"CODE",{});var KDr=s(WY);Kro=r(KDr,"from_pretrained()"),KDr.forEach(t),Zro=r(Rz,"to load the model weights."),Rz.forEach(t),eto=i(Qs),QY=n(Qs,"P",{});var ZDr=s(QY);oto=r(ZDr,"Examples:"),ZDr.forEach(t),rto=i(Qs),m(PE.$$.fragment,Qs),Qs.forEach(t),tto=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m($E.$$.fragment,qt),ato=i(qt),HY=n(qt,"P",{});var eNr=s(HY);nto=r(eNr,"Instantiate one of the base model classes of the library from a pretrained model."),eNr.forEach(t),sto=i(qt),Va=n(qt,"P",{});var e4=s(Va);lto=r(e4,"The model class to instantiate is selected based on the "),UY=n(e4,"CODE",{});var oNr=s(UY);ito=r(oNr,"model_type"),oNr.forEach(t),dto=r(e4,` property of the config object (either
passed as an argument or loaded from `),JY=n(e4,"CODE",{});var rNr=s(JY);cto=r(rNr,"pretrained_model_name_or_path"),rNr.forEach(t),fto=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YY=n(e4,"CODE",{});var tNr=s(YY);mto=r(tNr,"pretrained_model_name_or_path"),tNr.forEach(t),gto=r(e4,":"),e4.forEach(t),hto=i(qt),F=n(qt,"UL",{});var C=s(F);qh=n(C,"LI",{});var eCe=s(qh);KY=n(eCe,"STRONG",{});var aNr=s(KY);pto=r(aNr,"albert"),aNr.forEach(t),_to=r(eCe," \u2014 "),yR=n(eCe,"A",{href:!0});var nNr=s(yR);uto=r(nNr,"AlbertModel"),nNr.forEach(t),bto=r(eCe," (ALBERT model)"),eCe.forEach(t),vto=i(C),Oh=n(C,"LI",{});var oCe=s(Oh);ZY=n(oCe,"STRONG",{});var sNr=s(ZY);Tto=r(sNr,"bart"),sNr.forEach(t),Fto=r(oCe," \u2014 "),wR=n(oCe,"A",{href:!0});var lNr=s(wR);Cto=r(lNr,"BartModel"),lNr.forEach(t),Mto=r(oCe," (BART model)"),oCe.forEach(t),Eto=i(C),Gh=n(C,"LI",{});var rCe=s(Gh);eK=n(rCe,"STRONG",{});var iNr=s(eK);yto=r(iNr,"beit"),iNr.forEach(t),wto=r(rCe," \u2014 "),AR=n(rCe,"A",{href:!0});var dNr=s(AR);Ato=r(dNr,"BeitModel"),dNr.forEach(t),Lto=r(rCe," (BEiT model)"),rCe.forEach(t),Bto=i(C),Xh=n(C,"LI",{});var tCe=s(Xh);oK=n(tCe,"STRONG",{});var cNr=s(oK);xto=r(cNr,"bert"),cNr.forEach(t),kto=r(tCe," \u2014 "),LR=n(tCe,"A",{href:!0});var fNr=s(LR);Rto=r(fNr,"BertModel"),fNr.forEach(t),Sto=r(tCe," (BERT model)"),tCe.forEach(t),Pto=i(C),Vh=n(C,"LI",{});var aCe=s(Vh);rK=n(aCe,"STRONG",{});var mNr=s(rK);$to=r(mNr,"bert-generation"),mNr.forEach(t),Ito=r(aCe," \u2014 "),BR=n(aCe,"A",{href:!0});var gNr=s(BR);jto=r(gNr,"BertGenerationEncoder"),gNr.forEach(t),Dto=r(aCe," (Bert Generation model)"),aCe.forEach(t),Nto=i(C),zh=n(C,"LI",{});var nCe=s(zh);tK=n(nCe,"STRONG",{});var hNr=s(tK);qto=r(hNr,"big_bird"),hNr.forEach(t),Oto=r(nCe," \u2014 "),xR=n(nCe,"A",{href:!0});var pNr=s(xR);Gto=r(pNr,"BigBirdModel"),pNr.forEach(t),Xto=r(nCe," (BigBird model)"),nCe.forEach(t),Vto=i(C),Wh=n(C,"LI",{});var sCe=s(Wh);aK=n(sCe,"STRONG",{});var _Nr=s(aK);zto=r(_Nr,"bigbird_pegasus"),_Nr.forEach(t),Wto=r(sCe," \u2014 "),kR=n(sCe,"A",{href:!0});var uNr=s(kR);Qto=r(uNr,"BigBirdPegasusModel"),uNr.forEach(t),Hto=r(sCe," (BigBirdPegasus model)"),sCe.forEach(t),Uto=i(C),Qh=n(C,"LI",{});var lCe=s(Qh);nK=n(lCe,"STRONG",{});var bNr=s(nK);Jto=r(bNr,"blenderbot"),bNr.forEach(t),Yto=r(lCe," \u2014 "),RR=n(lCe,"A",{href:!0});var vNr=s(RR);Kto=r(vNr,"BlenderbotModel"),vNr.forEach(t),Zto=r(lCe," (Blenderbot model)"),lCe.forEach(t),eao=i(C),Hh=n(C,"LI",{});var iCe=s(Hh);sK=n(iCe,"STRONG",{});var TNr=s(sK);oao=r(TNr,"blenderbot-small"),TNr.forEach(t),rao=r(iCe," \u2014 "),SR=n(iCe,"A",{href:!0});var FNr=s(SR);tao=r(FNr,"BlenderbotSmallModel"),FNr.forEach(t),aao=r(iCe," (BlenderbotSmall model)"),iCe.forEach(t),nao=i(C),Uh=n(C,"LI",{});var dCe=s(Uh);lK=n(dCe,"STRONG",{});var CNr=s(lK);sao=r(CNr,"camembert"),CNr.forEach(t),lao=r(dCe," \u2014 "),PR=n(dCe,"A",{href:!0});var MNr=s(PR);iao=r(MNr,"CamembertModel"),MNr.forEach(t),dao=r(dCe," (CamemBERT model)"),dCe.forEach(t),cao=i(C),Jh=n(C,"LI",{});var cCe=s(Jh);iK=n(cCe,"STRONG",{});var ENr=s(iK);fao=r(ENr,"canine"),ENr.forEach(t),mao=r(cCe," \u2014 "),$R=n(cCe,"A",{href:!0});var yNr=s($R);gao=r(yNr,"CanineModel"),yNr.forEach(t),hao=r(cCe," (Canine model)"),cCe.forEach(t),pao=i(C),Yh=n(C,"LI",{});var fCe=s(Yh);dK=n(fCe,"STRONG",{});var wNr=s(dK);_ao=r(wNr,"clip"),wNr.forEach(t),uao=r(fCe," \u2014 "),IR=n(fCe,"A",{href:!0});var ANr=s(IR);bao=r(ANr,"CLIPModel"),ANr.forEach(t),vao=r(fCe," (CLIP model)"),fCe.forEach(t),Tao=i(C),Kh=n(C,"LI",{});var mCe=s(Kh);cK=n(mCe,"STRONG",{});var LNr=s(cK);Fao=r(LNr,"convbert"),LNr.forEach(t),Cao=r(mCe," \u2014 "),jR=n(mCe,"A",{href:!0});var BNr=s(jR);Mao=r(BNr,"ConvBertModel"),BNr.forEach(t),Eao=r(mCe," (ConvBERT model)"),mCe.forEach(t),yao=i(C),Zh=n(C,"LI",{});var gCe=s(Zh);fK=n(gCe,"STRONG",{});var xNr=s(fK);wao=r(xNr,"convnext"),xNr.forEach(t),Aao=r(gCe," \u2014 "),DR=n(gCe,"A",{href:!0});var kNr=s(DR);Lao=r(kNr,"ConvNextModel"),kNr.forEach(t),Bao=r(gCe," (ConvNext model)"),gCe.forEach(t),xao=i(C),ep=n(C,"LI",{});var hCe=s(ep);mK=n(hCe,"STRONG",{});var RNr=s(mK);kao=r(RNr,"ctrl"),RNr.forEach(t),Rao=r(hCe," \u2014 "),NR=n(hCe,"A",{href:!0});var SNr=s(NR);Sao=r(SNr,"CTRLModel"),SNr.forEach(t),Pao=r(hCe," (CTRL model)"),hCe.forEach(t),$ao=i(C),op=n(C,"LI",{});var pCe=s(op);gK=n(pCe,"STRONG",{});var PNr=s(gK);Iao=r(PNr,"data2vec-audio"),PNr.forEach(t),jao=r(pCe," \u2014 "),qR=n(pCe,"A",{href:!0});var $Nr=s(qR);Dao=r($Nr,"Data2VecAudioModel"),$Nr.forEach(t),Nao=r(pCe," (Data2VecAudio model)"),pCe.forEach(t),qao=i(C),rp=n(C,"LI",{});var _Ce=s(rp);hK=n(_Ce,"STRONG",{});var INr=s(hK);Oao=r(INr,"data2vec-text"),INr.forEach(t),Gao=r(_Ce," \u2014 "),OR=n(_Ce,"A",{href:!0});var jNr=s(OR);Xao=r(jNr,"Data2VecTextModel"),jNr.forEach(t),Vao=r(_Ce," (Data2VecText model)"),_Ce.forEach(t),zao=i(C),tp=n(C,"LI",{});var uCe=s(tp);pK=n(uCe,"STRONG",{});var DNr=s(pK);Wao=r(DNr,"deberta"),DNr.forEach(t),Qao=r(uCe," \u2014 "),GR=n(uCe,"A",{href:!0});var NNr=s(GR);Hao=r(NNr,"DebertaModel"),NNr.forEach(t),Uao=r(uCe," (DeBERTa model)"),uCe.forEach(t),Jao=i(C),ap=n(C,"LI",{});var bCe=s(ap);_K=n(bCe,"STRONG",{});var qNr=s(_K);Yao=r(qNr,"deberta-v2"),qNr.forEach(t),Kao=r(bCe," \u2014 "),XR=n(bCe,"A",{href:!0});var ONr=s(XR);Zao=r(ONr,"DebertaV2Model"),ONr.forEach(t),eno=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),ono=i(C),np=n(C,"LI",{});var vCe=s(np);uK=n(vCe,"STRONG",{});var GNr=s(uK);rno=r(GNr,"deit"),GNr.forEach(t),tno=r(vCe," \u2014 "),VR=n(vCe,"A",{href:!0});var XNr=s(VR);ano=r(XNr,"DeiTModel"),XNr.forEach(t),nno=r(vCe," (DeiT model)"),vCe.forEach(t),sno=i(C),sp=n(C,"LI",{});var TCe=s(sp);bK=n(TCe,"STRONG",{});var VNr=s(bK);lno=r(VNr,"detr"),VNr.forEach(t),ino=r(TCe," \u2014 "),zR=n(TCe,"A",{href:!0});var zNr=s(zR);dno=r(zNr,"DetrModel"),zNr.forEach(t),cno=r(TCe," (DETR model)"),TCe.forEach(t),fno=i(C),lp=n(C,"LI",{});var FCe=s(lp);vK=n(FCe,"STRONG",{});var WNr=s(vK);mno=r(WNr,"distilbert"),WNr.forEach(t),gno=r(FCe," \u2014 "),WR=n(FCe,"A",{href:!0});var QNr=s(WR);hno=r(QNr,"DistilBertModel"),QNr.forEach(t),pno=r(FCe," (DistilBERT model)"),FCe.forEach(t),_no=i(C),ip=n(C,"LI",{});var CCe=s(ip);TK=n(CCe,"STRONG",{});var HNr=s(TK);uno=r(HNr,"dpr"),HNr.forEach(t),bno=r(CCe," \u2014 "),QR=n(CCe,"A",{href:!0});var UNr=s(QR);vno=r(UNr,"DPRQuestionEncoder"),UNr.forEach(t),Tno=r(CCe," (DPR model)"),CCe.forEach(t),Fno=i(C),dp=n(C,"LI",{});var MCe=s(dp);FK=n(MCe,"STRONG",{});var JNr=s(FK);Cno=r(JNr,"electra"),JNr.forEach(t),Mno=r(MCe," \u2014 "),HR=n(MCe,"A",{href:!0});var YNr=s(HR);Eno=r(YNr,"ElectraModel"),YNr.forEach(t),yno=r(MCe," (ELECTRA model)"),MCe.forEach(t),wno=i(C),cp=n(C,"LI",{});var ECe=s(cp);CK=n(ECe,"STRONG",{});var KNr=s(CK);Ano=r(KNr,"flaubert"),KNr.forEach(t),Lno=r(ECe," \u2014 "),UR=n(ECe,"A",{href:!0});var ZNr=s(UR);Bno=r(ZNr,"FlaubertModel"),ZNr.forEach(t),xno=r(ECe," (FlauBERT model)"),ECe.forEach(t),kno=i(C),fp=n(C,"LI",{});var yCe=s(fp);MK=n(yCe,"STRONG",{});var eqr=s(MK);Rno=r(eqr,"fnet"),eqr.forEach(t),Sno=r(yCe," \u2014 "),JR=n(yCe,"A",{href:!0});var oqr=s(JR);Pno=r(oqr,"FNetModel"),oqr.forEach(t),$no=r(yCe," (FNet model)"),yCe.forEach(t),Ino=i(C),mp=n(C,"LI",{});var wCe=s(mp);EK=n(wCe,"STRONG",{});var rqr=s(EK);jno=r(rqr,"fsmt"),rqr.forEach(t),Dno=r(wCe," \u2014 "),YR=n(wCe,"A",{href:!0});var tqr=s(YR);Nno=r(tqr,"FSMTModel"),tqr.forEach(t),qno=r(wCe," (FairSeq Machine-Translation model)"),wCe.forEach(t),Ono=i(C),Ns=n(C,"LI",{});var q8=s(Ns);yK=n(q8,"STRONG",{});var aqr=s(yK);Gno=r(aqr,"funnel"),aqr.forEach(t),Xno=r(q8," \u2014 "),KR=n(q8,"A",{href:!0});var nqr=s(KR);Vno=r(nqr,"FunnelModel"),nqr.forEach(t),zno=r(q8," or "),ZR=n(q8,"A",{href:!0});var sqr=s(ZR);Wno=r(sqr,"FunnelBaseModel"),sqr.forEach(t),Qno=r(q8," (Funnel Transformer model)"),q8.forEach(t),Hno=i(C),gp=n(C,"LI",{});var ACe=s(gp);wK=n(ACe,"STRONG",{});var lqr=s(wK);Uno=r(lqr,"gpt2"),lqr.forEach(t),Jno=r(ACe," \u2014 "),eS=n(ACe,"A",{href:!0});var iqr=s(eS);Yno=r(iqr,"GPT2Model"),iqr.forEach(t),Kno=r(ACe," (OpenAI GPT-2 model)"),ACe.forEach(t),Zno=i(C),hp=n(C,"LI",{});var LCe=s(hp);AK=n(LCe,"STRONG",{});var dqr=s(AK);eso=r(dqr,"gpt_neo"),dqr.forEach(t),oso=r(LCe," \u2014 "),oS=n(LCe,"A",{href:!0});var cqr=s(oS);rso=r(cqr,"GPTNeoModel"),cqr.forEach(t),tso=r(LCe," (GPT Neo model)"),LCe.forEach(t),aso=i(C),pp=n(C,"LI",{});var BCe=s(pp);LK=n(BCe,"STRONG",{});var fqr=s(LK);nso=r(fqr,"gptj"),fqr.forEach(t),sso=r(BCe," \u2014 "),rS=n(BCe,"A",{href:!0});var mqr=s(rS);lso=r(mqr,"GPTJModel"),mqr.forEach(t),iso=r(BCe," (GPT-J model)"),BCe.forEach(t),dso=i(C),_p=n(C,"LI",{});var xCe=s(_p);BK=n(xCe,"STRONG",{});var gqr=s(BK);cso=r(gqr,"hubert"),gqr.forEach(t),fso=r(xCe," \u2014 "),tS=n(xCe,"A",{href:!0});var hqr=s(tS);mso=r(hqr,"HubertModel"),hqr.forEach(t),gso=r(xCe," (Hubert model)"),xCe.forEach(t),hso=i(C),up=n(C,"LI",{});var kCe=s(up);xK=n(kCe,"STRONG",{});var pqr=s(xK);pso=r(pqr,"ibert"),pqr.forEach(t),_so=r(kCe," \u2014 "),aS=n(kCe,"A",{href:!0});var _qr=s(aS);uso=r(_qr,"IBertModel"),_qr.forEach(t),bso=r(kCe," (I-BERT model)"),kCe.forEach(t),vso=i(C),bp=n(C,"LI",{});var RCe=s(bp);kK=n(RCe,"STRONG",{});var uqr=s(kK);Tso=r(uqr,"imagegpt"),uqr.forEach(t),Fso=r(RCe," \u2014 "),nS=n(RCe,"A",{href:!0});var bqr=s(nS);Cso=r(bqr,"ImageGPTModel"),bqr.forEach(t),Mso=r(RCe," (ImageGPT model)"),RCe.forEach(t),Eso=i(C),vp=n(C,"LI",{});var SCe=s(vp);RK=n(SCe,"STRONG",{});var vqr=s(RK);yso=r(vqr,"layoutlm"),vqr.forEach(t),wso=r(SCe," \u2014 "),sS=n(SCe,"A",{href:!0});var Tqr=s(sS);Aso=r(Tqr,"LayoutLMModel"),Tqr.forEach(t),Lso=r(SCe," (LayoutLM model)"),SCe.forEach(t),Bso=i(C),Tp=n(C,"LI",{});var PCe=s(Tp);SK=n(PCe,"STRONG",{});var Fqr=s(SK);xso=r(Fqr,"layoutlmv2"),Fqr.forEach(t),kso=r(PCe," \u2014 "),lS=n(PCe,"A",{href:!0});var Cqr=s(lS);Rso=r(Cqr,"LayoutLMv2Model"),Cqr.forEach(t),Sso=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),Pso=i(C),Fp=n(C,"LI",{});var $Ce=s(Fp);PK=n($Ce,"STRONG",{});var Mqr=s(PK);$so=r(Mqr,"led"),Mqr.forEach(t),Iso=r($Ce," \u2014 "),iS=n($Ce,"A",{href:!0});var Eqr=s(iS);jso=r(Eqr,"LEDModel"),Eqr.forEach(t),Dso=r($Ce," (LED model)"),$Ce.forEach(t),Nso=i(C),Cp=n(C,"LI",{});var ICe=s(Cp);$K=n(ICe,"STRONG",{});var yqr=s($K);qso=r(yqr,"longformer"),yqr.forEach(t),Oso=r(ICe," \u2014 "),dS=n(ICe,"A",{href:!0});var wqr=s(dS);Gso=r(wqr,"LongformerModel"),wqr.forEach(t),Xso=r(ICe," (Longformer model)"),ICe.forEach(t),Vso=i(C),Mp=n(C,"LI",{});var jCe=s(Mp);IK=n(jCe,"STRONG",{});var Aqr=s(IK);zso=r(Aqr,"luke"),Aqr.forEach(t),Wso=r(jCe," \u2014 "),cS=n(jCe,"A",{href:!0});var Lqr=s(cS);Qso=r(Lqr,"LukeModel"),Lqr.forEach(t),Hso=r(jCe," (LUKE model)"),jCe.forEach(t),Uso=i(C),Ep=n(C,"LI",{});var DCe=s(Ep);jK=n(DCe,"STRONG",{});var Bqr=s(jK);Jso=r(Bqr,"lxmert"),Bqr.forEach(t),Yso=r(DCe," \u2014 "),fS=n(DCe,"A",{href:!0});var xqr=s(fS);Kso=r(xqr,"LxmertModel"),xqr.forEach(t),Zso=r(DCe," (LXMERT model)"),DCe.forEach(t),elo=i(C),yp=n(C,"LI",{});var NCe=s(yp);DK=n(NCe,"STRONG",{});var kqr=s(DK);olo=r(kqr,"m2m_100"),kqr.forEach(t),rlo=r(NCe," \u2014 "),mS=n(NCe,"A",{href:!0});var Rqr=s(mS);tlo=r(Rqr,"M2M100Model"),Rqr.forEach(t),alo=r(NCe," (M2M100 model)"),NCe.forEach(t),nlo=i(C),wp=n(C,"LI",{});var qCe=s(wp);NK=n(qCe,"STRONG",{});var Sqr=s(NK);slo=r(Sqr,"marian"),Sqr.forEach(t),llo=r(qCe," \u2014 "),gS=n(qCe,"A",{href:!0});var Pqr=s(gS);ilo=r(Pqr,"MarianModel"),Pqr.forEach(t),dlo=r(qCe," (Marian model)"),qCe.forEach(t),clo=i(C),Ap=n(C,"LI",{});var OCe=s(Ap);qK=n(OCe,"STRONG",{});var $qr=s(qK);flo=r($qr,"maskformer"),$qr.forEach(t),mlo=r(OCe," \u2014 "),hS=n(OCe,"A",{href:!0});var Iqr=s(hS);glo=r(Iqr,"MaskFormerModel"),Iqr.forEach(t),hlo=r(OCe," (MaskFormer model)"),OCe.forEach(t),plo=i(C),Lp=n(C,"LI",{});var GCe=s(Lp);OK=n(GCe,"STRONG",{});var jqr=s(OK);_lo=r(jqr,"mbart"),jqr.forEach(t),ulo=r(GCe," \u2014 "),pS=n(GCe,"A",{href:!0});var Dqr=s(pS);blo=r(Dqr,"MBartModel"),Dqr.forEach(t),vlo=r(GCe," (mBART model)"),GCe.forEach(t),Tlo=i(C),Bp=n(C,"LI",{});var XCe=s(Bp);GK=n(XCe,"STRONG",{});var Nqr=s(GK);Flo=r(Nqr,"megatron-bert"),Nqr.forEach(t),Clo=r(XCe," \u2014 "),_S=n(XCe,"A",{href:!0});var qqr=s(_S);Mlo=r(qqr,"MegatronBertModel"),qqr.forEach(t),Elo=r(XCe," (MegatronBert model)"),XCe.forEach(t),ylo=i(C),xp=n(C,"LI",{});var VCe=s(xp);XK=n(VCe,"STRONG",{});var Oqr=s(XK);wlo=r(Oqr,"mobilebert"),Oqr.forEach(t),Alo=r(VCe," \u2014 "),uS=n(VCe,"A",{href:!0});var Gqr=s(uS);Llo=r(Gqr,"MobileBertModel"),Gqr.forEach(t),Blo=r(VCe," (MobileBERT model)"),VCe.forEach(t),xlo=i(C),kp=n(C,"LI",{});var zCe=s(kp);VK=n(zCe,"STRONG",{});var Xqr=s(VK);klo=r(Xqr,"mpnet"),Xqr.forEach(t),Rlo=r(zCe," \u2014 "),bS=n(zCe,"A",{href:!0});var Vqr=s(bS);Slo=r(Vqr,"MPNetModel"),Vqr.forEach(t),Plo=r(zCe," (MPNet model)"),zCe.forEach(t),$lo=i(C),Rp=n(C,"LI",{});var WCe=s(Rp);zK=n(WCe,"STRONG",{});var zqr=s(zK);Ilo=r(zqr,"mt5"),zqr.forEach(t),jlo=r(WCe," \u2014 "),vS=n(WCe,"A",{href:!0});var Wqr=s(vS);Dlo=r(Wqr,"MT5Model"),Wqr.forEach(t),Nlo=r(WCe," (mT5 model)"),WCe.forEach(t),qlo=i(C),Sp=n(C,"LI",{});var QCe=s(Sp);WK=n(QCe,"STRONG",{});var Qqr=s(WK);Olo=r(Qqr,"nystromformer"),Qqr.forEach(t),Glo=r(QCe," \u2014 "),TS=n(QCe,"A",{href:!0});var Hqr=s(TS);Xlo=r(Hqr,"NystromformerModel"),Hqr.forEach(t),Vlo=r(QCe," (Nystromformer model)"),QCe.forEach(t),zlo=i(C),Pp=n(C,"LI",{});var HCe=s(Pp);QK=n(HCe,"STRONG",{});var Uqr=s(QK);Wlo=r(Uqr,"openai-gpt"),Uqr.forEach(t),Qlo=r(HCe," \u2014 "),FS=n(HCe,"A",{href:!0});var Jqr=s(FS);Hlo=r(Jqr,"OpenAIGPTModel"),Jqr.forEach(t),Ulo=r(HCe," (OpenAI GPT model)"),HCe.forEach(t),Jlo=i(C),$p=n(C,"LI",{});var UCe=s($p);HK=n(UCe,"STRONG",{});var Yqr=s(HK);Ylo=r(Yqr,"pegasus"),Yqr.forEach(t),Klo=r(UCe," \u2014 "),CS=n(UCe,"A",{href:!0});var Kqr=s(CS);Zlo=r(Kqr,"PegasusModel"),Kqr.forEach(t),eio=r(UCe," (Pegasus model)"),UCe.forEach(t),oio=i(C),Ip=n(C,"LI",{});var JCe=s(Ip);UK=n(JCe,"STRONG",{});var Zqr=s(UK);rio=r(Zqr,"perceiver"),Zqr.forEach(t),tio=r(JCe," \u2014 "),MS=n(JCe,"A",{href:!0});var eOr=s(MS);aio=r(eOr,"PerceiverModel"),eOr.forEach(t),nio=r(JCe," (Perceiver model)"),JCe.forEach(t),sio=i(C),jp=n(C,"LI",{});var YCe=s(jp);JK=n(YCe,"STRONG",{});var oOr=s(JK);lio=r(oOr,"plbart"),oOr.forEach(t),iio=r(YCe," \u2014 "),ES=n(YCe,"A",{href:!0});var rOr=s(ES);dio=r(rOr,"PLBartModel"),rOr.forEach(t),cio=r(YCe," (PLBart model)"),YCe.forEach(t),fio=i(C),Dp=n(C,"LI",{});var KCe=s(Dp);YK=n(KCe,"STRONG",{});var tOr=s(YK);mio=r(tOr,"poolformer"),tOr.forEach(t),gio=r(KCe," \u2014 "),yS=n(KCe,"A",{href:!0});var aOr=s(yS);hio=r(aOr,"PoolFormerModel"),aOr.forEach(t),pio=r(KCe," (PoolFormer model)"),KCe.forEach(t),_io=i(C),Np=n(C,"LI",{});var ZCe=s(Np);KK=n(ZCe,"STRONG",{});var nOr=s(KK);uio=r(nOr,"prophetnet"),nOr.forEach(t),bio=r(ZCe," \u2014 "),wS=n(ZCe,"A",{href:!0});var sOr=s(wS);vio=r(sOr,"ProphetNetModel"),sOr.forEach(t),Tio=r(ZCe," (ProphetNet model)"),ZCe.forEach(t),Fio=i(C),qp=n(C,"LI",{});var eMe=s(qp);ZK=n(eMe,"STRONG",{});var lOr=s(ZK);Cio=r(lOr,"qdqbert"),lOr.forEach(t),Mio=r(eMe," \u2014 "),AS=n(eMe,"A",{href:!0});var iOr=s(AS);Eio=r(iOr,"QDQBertModel"),iOr.forEach(t),yio=r(eMe," (QDQBert model)"),eMe.forEach(t),wio=i(C),Op=n(C,"LI",{});var oMe=s(Op);eZ=n(oMe,"STRONG",{});var dOr=s(eZ);Aio=r(dOr,"reformer"),dOr.forEach(t),Lio=r(oMe," \u2014 "),LS=n(oMe,"A",{href:!0});var cOr=s(LS);Bio=r(cOr,"ReformerModel"),cOr.forEach(t),xio=r(oMe," (Reformer model)"),oMe.forEach(t),kio=i(C),Gp=n(C,"LI",{});var rMe=s(Gp);oZ=n(rMe,"STRONG",{});var fOr=s(oZ);Rio=r(fOr,"rembert"),fOr.forEach(t),Sio=r(rMe," \u2014 "),BS=n(rMe,"A",{href:!0});var mOr=s(BS);Pio=r(mOr,"RemBertModel"),mOr.forEach(t),$io=r(rMe," (RemBERT model)"),rMe.forEach(t),Iio=i(C),Xp=n(C,"LI",{});var tMe=s(Xp);rZ=n(tMe,"STRONG",{});var gOr=s(rZ);jio=r(gOr,"retribert"),gOr.forEach(t),Dio=r(tMe," \u2014 "),xS=n(tMe,"A",{href:!0});var hOr=s(xS);Nio=r(hOr,"RetriBertModel"),hOr.forEach(t),qio=r(tMe," (RetriBERT model)"),tMe.forEach(t),Oio=i(C),Vp=n(C,"LI",{});var aMe=s(Vp);tZ=n(aMe,"STRONG",{});var pOr=s(tZ);Gio=r(pOr,"roberta"),pOr.forEach(t),Xio=r(aMe," \u2014 "),kS=n(aMe,"A",{href:!0});var _Or=s(kS);Vio=r(_Or,"RobertaModel"),_Or.forEach(t),zio=r(aMe," (RoBERTa model)"),aMe.forEach(t),Wio=i(C),zp=n(C,"LI",{});var nMe=s(zp);aZ=n(nMe,"STRONG",{});var uOr=s(aZ);Qio=r(uOr,"roformer"),uOr.forEach(t),Hio=r(nMe," \u2014 "),RS=n(nMe,"A",{href:!0});var bOr=s(RS);Uio=r(bOr,"RoFormerModel"),bOr.forEach(t),Jio=r(nMe," (RoFormer model)"),nMe.forEach(t),Yio=i(C),Wp=n(C,"LI",{});var sMe=s(Wp);nZ=n(sMe,"STRONG",{});var vOr=s(nZ);Kio=r(vOr,"segformer"),vOr.forEach(t),Zio=r(sMe," \u2014 "),SS=n(sMe,"A",{href:!0});var TOr=s(SS);edo=r(TOr,"SegformerModel"),TOr.forEach(t),odo=r(sMe," (SegFormer model)"),sMe.forEach(t),rdo=i(C),Qp=n(C,"LI",{});var lMe=s(Qp);sZ=n(lMe,"STRONG",{});var FOr=s(sZ);tdo=r(FOr,"sew"),FOr.forEach(t),ado=r(lMe," \u2014 "),PS=n(lMe,"A",{href:!0});var COr=s(PS);ndo=r(COr,"SEWModel"),COr.forEach(t),sdo=r(lMe," (SEW model)"),lMe.forEach(t),ldo=i(C),Hp=n(C,"LI",{});var iMe=s(Hp);lZ=n(iMe,"STRONG",{});var MOr=s(lZ);ido=r(MOr,"sew-d"),MOr.forEach(t),ddo=r(iMe," \u2014 "),$S=n(iMe,"A",{href:!0});var EOr=s($S);cdo=r(EOr,"SEWDModel"),EOr.forEach(t),fdo=r(iMe," (SEW-D model)"),iMe.forEach(t),mdo=i(C),Up=n(C,"LI",{});var dMe=s(Up);iZ=n(dMe,"STRONG",{});var yOr=s(iZ);gdo=r(yOr,"speech_to_text"),yOr.forEach(t),hdo=r(dMe," \u2014 "),IS=n(dMe,"A",{href:!0});var wOr=s(IS);pdo=r(wOr,"Speech2TextModel"),wOr.forEach(t),_do=r(dMe," (Speech2Text model)"),dMe.forEach(t),udo=i(C),Jp=n(C,"LI",{});var cMe=s(Jp);dZ=n(cMe,"STRONG",{});var AOr=s(dZ);bdo=r(AOr,"splinter"),AOr.forEach(t),vdo=r(cMe," \u2014 "),jS=n(cMe,"A",{href:!0});var LOr=s(jS);Tdo=r(LOr,"SplinterModel"),LOr.forEach(t),Fdo=r(cMe," (Splinter model)"),cMe.forEach(t),Cdo=i(C),Yp=n(C,"LI",{});var fMe=s(Yp);cZ=n(fMe,"STRONG",{});var BOr=s(cZ);Mdo=r(BOr,"squeezebert"),BOr.forEach(t),Edo=r(fMe," \u2014 "),DS=n(fMe,"A",{href:!0});var xOr=s(DS);ydo=r(xOr,"SqueezeBertModel"),xOr.forEach(t),wdo=r(fMe," (SqueezeBERT model)"),fMe.forEach(t),Ado=i(C),Kp=n(C,"LI",{});var mMe=s(Kp);fZ=n(mMe,"STRONG",{});var kOr=s(fZ);Ldo=r(kOr,"swin"),kOr.forEach(t),Bdo=r(mMe," \u2014 "),NS=n(mMe,"A",{href:!0});var ROr=s(NS);xdo=r(ROr,"SwinModel"),ROr.forEach(t),kdo=r(mMe," (Swin model)"),mMe.forEach(t),Rdo=i(C),Zp=n(C,"LI",{});var gMe=s(Zp);mZ=n(gMe,"STRONG",{});var SOr=s(mZ);Sdo=r(SOr,"t5"),SOr.forEach(t),Pdo=r(gMe," \u2014 "),qS=n(gMe,"A",{href:!0});var POr=s(qS);$do=r(POr,"T5Model"),POr.forEach(t),Ido=r(gMe," (T5 model)"),gMe.forEach(t),jdo=i(C),e_=n(C,"LI",{});var hMe=s(e_);gZ=n(hMe,"STRONG",{});var $Or=s(gZ);Ddo=r($Or,"tapas"),$Or.forEach(t),Ndo=r(hMe," \u2014 "),OS=n(hMe,"A",{href:!0});var IOr=s(OS);qdo=r(IOr,"TapasModel"),IOr.forEach(t),Odo=r(hMe," (TAPAS model)"),hMe.forEach(t),Gdo=i(C),o_=n(C,"LI",{});var pMe=s(o_);hZ=n(pMe,"STRONG",{});var jOr=s(hZ);Xdo=r(jOr,"transfo-xl"),jOr.forEach(t),Vdo=r(pMe," \u2014 "),GS=n(pMe,"A",{href:!0});var DOr=s(GS);zdo=r(DOr,"TransfoXLModel"),DOr.forEach(t),Wdo=r(pMe," (Transformer-XL model)"),pMe.forEach(t),Qdo=i(C),r_=n(C,"LI",{});var _Me=s(r_);pZ=n(_Me,"STRONG",{});var NOr=s(pZ);Hdo=r(NOr,"unispeech"),NOr.forEach(t),Udo=r(_Me," \u2014 "),XS=n(_Me,"A",{href:!0});var qOr=s(XS);Jdo=r(qOr,"UniSpeechModel"),qOr.forEach(t),Ydo=r(_Me," (UniSpeech model)"),_Me.forEach(t),Kdo=i(C),t_=n(C,"LI",{});var uMe=s(t_);_Z=n(uMe,"STRONG",{});var OOr=s(_Z);Zdo=r(OOr,"unispeech-sat"),OOr.forEach(t),eco=r(uMe," \u2014 "),VS=n(uMe,"A",{href:!0});var GOr=s(VS);oco=r(GOr,"UniSpeechSatModel"),GOr.forEach(t),rco=r(uMe," (UniSpeechSat model)"),uMe.forEach(t),tco=i(C),a_=n(C,"LI",{});var bMe=s(a_);uZ=n(bMe,"STRONG",{});var XOr=s(uZ);aco=r(XOr,"van"),XOr.forEach(t),nco=r(bMe," \u2014 "),zS=n(bMe,"A",{href:!0});var VOr=s(zS);sco=r(VOr,"VanModel"),VOr.forEach(t),lco=r(bMe," (VAN model)"),bMe.forEach(t),ico=i(C),n_=n(C,"LI",{});var vMe=s(n_);bZ=n(vMe,"STRONG",{});var zOr=s(bZ);dco=r(zOr,"vilt"),zOr.forEach(t),cco=r(vMe," \u2014 "),WS=n(vMe,"A",{href:!0});var WOr=s(WS);fco=r(WOr,"ViltModel"),WOr.forEach(t),mco=r(vMe," (ViLT model)"),vMe.forEach(t),gco=i(C),s_=n(C,"LI",{});var TMe=s(s_);vZ=n(TMe,"STRONG",{});var QOr=s(vZ);hco=r(QOr,"vision-text-dual-encoder"),QOr.forEach(t),pco=r(TMe," \u2014 "),QS=n(TMe,"A",{href:!0});var HOr=s(QS);_co=r(HOr,"VisionTextDualEncoderModel"),HOr.forEach(t),uco=r(TMe," (VisionTextDualEncoder model)"),TMe.forEach(t),bco=i(C),l_=n(C,"LI",{});var FMe=s(l_);TZ=n(FMe,"STRONG",{});var UOr=s(TZ);vco=r(UOr,"visual_bert"),UOr.forEach(t),Tco=r(FMe," \u2014 "),HS=n(FMe,"A",{href:!0});var JOr=s(HS);Fco=r(JOr,"VisualBertModel"),JOr.forEach(t),Cco=r(FMe," (VisualBert model)"),FMe.forEach(t),Mco=i(C),i_=n(C,"LI",{});var CMe=s(i_);FZ=n(CMe,"STRONG",{});var YOr=s(FZ);Eco=r(YOr,"vit"),YOr.forEach(t),yco=r(CMe," \u2014 "),US=n(CMe,"A",{href:!0});var KOr=s(US);wco=r(KOr,"ViTModel"),KOr.forEach(t),Aco=r(CMe," (ViT model)"),CMe.forEach(t),Lco=i(C),d_=n(C,"LI",{});var MMe=s(d_);CZ=n(MMe,"STRONG",{});var ZOr=s(CZ);Bco=r(ZOr,"vit_mae"),ZOr.forEach(t),xco=r(MMe," \u2014 "),JS=n(MMe,"A",{href:!0});var eGr=s(JS);kco=r(eGr,"ViTMAEModel"),eGr.forEach(t),Rco=r(MMe," (ViTMAE model)"),MMe.forEach(t),Sco=i(C),c_=n(C,"LI",{});var EMe=s(c_);MZ=n(EMe,"STRONG",{});var oGr=s(MZ);Pco=r(oGr,"wav2vec2"),oGr.forEach(t),$co=r(EMe," \u2014 "),YS=n(EMe,"A",{href:!0});var rGr=s(YS);Ico=r(rGr,"Wav2Vec2Model"),rGr.forEach(t),jco=r(EMe," (Wav2Vec2 model)"),EMe.forEach(t),Dco=i(C),f_=n(C,"LI",{});var yMe=s(f_);EZ=n(yMe,"STRONG",{});var tGr=s(EZ);Nco=r(tGr,"wavlm"),tGr.forEach(t),qco=r(yMe," \u2014 "),KS=n(yMe,"A",{href:!0});var aGr=s(KS);Oco=r(aGr,"WavLMModel"),aGr.forEach(t),Gco=r(yMe," (WavLM model)"),yMe.forEach(t),Xco=i(C),m_=n(C,"LI",{});var wMe=s(m_);yZ=n(wMe,"STRONG",{});var nGr=s(yZ);Vco=r(nGr,"xglm"),nGr.forEach(t),zco=r(wMe," \u2014 "),ZS=n(wMe,"A",{href:!0});var sGr=s(ZS);Wco=r(sGr,"XGLMModel"),sGr.forEach(t),Qco=r(wMe," (XGLM model)"),wMe.forEach(t),Hco=i(C),g_=n(C,"LI",{});var AMe=s(g_);wZ=n(AMe,"STRONG",{});var lGr=s(wZ);Uco=r(lGr,"xlm"),lGr.forEach(t),Jco=r(AMe," \u2014 "),eP=n(AMe,"A",{href:!0});var iGr=s(eP);Yco=r(iGr,"XLMModel"),iGr.forEach(t),Kco=r(AMe," (XLM model)"),AMe.forEach(t),Zco=i(C),h_=n(C,"LI",{});var LMe=s(h_);AZ=n(LMe,"STRONG",{});var dGr=s(AZ);efo=r(dGr,"xlm-prophetnet"),dGr.forEach(t),ofo=r(LMe," \u2014 "),oP=n(LMe,"A",{href:!0});var cGr=s(oP);rfo=r(cGr,"XLMProphetNetModel"),cGr.forEach(t),tfo=r(LMe," (XLMProphetNet model)"),LMe.forEach(t),afo=i(C),p_=n(C,"LI",{});var BMe=s(p_);LZ=n(BMe,"STRONG",{});var fGr=s(LZ);nfo=r(fGr,"xlm-roberta"),fGr.forEach(t),sfo=r(BMe," \u2014 "),rP=n(BMe,"A",{href:!0});var mGr=s(rP);lfo=r(mGr,"XLMRobertaModel"),mGr.forEach(t),ifo=r(BMe," (XLM-RoBERTa model)"),BMe.forEach(t),dfo=i(C),__=n(C,"LI",{});var xMe=s(__);BZ=n(xMe,"STRONG",{});var gGr=s(BZ);cfo=r(gGr,"xlm-roberta-xl"),gGr.forEach(t),ffo=r(xMe," \u2014 "),tP=n(xMe,"A",{href:!0});var hGr=s(tP);mfo=r(hGr,"XLMRobertaXLModel"),hGr.forEach(t),gfo=r(xMe," (XLM-RoBERTa-XL model)"),xMe.forEach(t),hfo=i(C),u_=n(C,"LI",{});var kMe=s(u_);xZ=n(kMe,"STRONG",{});var pGr=s(xZ);pfo=r(pGr,"xlnet"),pGr.forEach(t),_fo=r(kMe," \u2014 "),aP=n(kMe,"A",{href:!0});var _Gr=s(aP);ufo=r(_Gr,"XLNetModel"),_Gr.forEach(t),bfo=r(kMe," (XLNet model)"),kMe.forEach(t),vfo=i(C),b_=n(C,"LI",{});var RMe=s(b_);kZ=n(RMe,"STRONG",{});var uGr=s(kZ);Tfo=r(uGr,"yoso"),uGr.forEach(t),Ffo=r(RMe," \u2014 "),nP=n(RMe,"A",{href:!0});var bGr=s(nP);Cfo=r(bGr,"YosoModel"),bGr.forEach(t),Mfo=r(RMe," (YOSO model)"),RMe.forEach(t),C.forEach(t),Efo=i(qt),v_=n(qt,"P",{});var SMe=s(v_);yfo=r(SMe,"The model is set in evaluation mode by default using "),RZ=n(SMe,"CODE",{});var vGr=s(RZ);wfo=r(vGr,"model.eval()"),vGr.forEach(t),Afo=r(SMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SZ=n(SMe,"CODE",{});var TGr=s(SZ);Lfo=r(TGr,"model.train()"),TGr.forEach(t),SMe.forEach(t),Bfo=i(qt),PZ=n(qt,"P",{});var FGr=s(PZ);xfo=r(FGr,"Examples:"),FGr.forEach(t),kfo=i(qt),m(IE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Sxe=i(c),ed=n(c,"H2",{class:!0});var GRe=s(ed);T_=n(GRe,"A",{id:!0,class:!0,href:!0});var CGr=s(T_);$Z=n(CGr,"SPAN",{});var MGr=s($Z);m(jE.$$.fragment,MGr),MGr.forEach(t),CGr.forEach(t),Rfo=i(GRe),IZ=n(GRe,"SPAN",{});var EGr=s(IZ);Sfo=r(EGr,"AutoModelForPreTraining"),EGr.forEach(t),GRe.forEach(t),Pxe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(DE.$$.fragment,Hs),Pfo=i(Hs),od=n(Hs,"P",{});var Sz=s(od);$fo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jZ=n(Sz,"CODE",{});var yGr=s(jZ);Ifo=r(yGr,"from_pretrained()"),yGr.forEach(t),jfo=r(Sz,"class method or the "),DZ=n(Sz,"CODE",{});var wGr=s(DZ);Dfo=r(wGr,"from_config()"),wGr.forEach(t),Nfo=r(Sz,`class
method.`),Sz.forEach(t),qfo=i(Hs),NE=n(Hs,"P",{});var XRe=s(NE);Ofo=r(XRe,"This class cannot be instantiated directly using "),NZ=n(XRe,"CODE",{});var AGr=s(NZ);Gfo=r(AGr,"__init__()"),AGr.forEach(t),Xfo=r(XRe," (throws an error)."),XRe.forEach(t),Vfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(qE.$$.fragment,Us),zfo=i(Us),qZ=n(Us,"P",{});var LGr=s(qZ);Wfo=r(LGr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LGr.forEach(t),Qfo=i(Us),rd=n(Us,"P",{});var Pz=s(rd);Hfo=r(Pz,`Note:
Loading a model from its configuration file does `),OZ=n(Pz,"STRONG",{});var BGr=s(OZ);Ufo=r(BGr,"not"),BGr.forEach(t),Jfo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(Pz,"CODE",{});var xGr=s(GZ);Yfo=r(xGr,"from_pretrained()"),xGr.forEach(t),Kfo=r(Pz,"to load the model weights."),Pz.forEach(t),Zfo=i(Us),XZ=n(Us,"P",{});var kGr=s(XZ);emo=r(kGr,"Examples:"),kGr.forEach(t),omo=i(Us),m(OE.$$.fragment,Us),Us.forEach(t),rmo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Ot=s(Ne);m(GE.$$.fragment,Ot),tmo=i(Ot),VZ=n(Ot,"P",{});var RGr=s(VZ);amo=r(RGr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RGr.forEach(t),nmo=i(Ot),za=n(Ot,"P",{});var o4=s(za);smo=r(o4,"The model class to instantiate is selected based on the "),zZ=n(o4,"CODE",{});var SGr=s(zZ);lmo=r(SGr,"model_type"),SGr.forEach(t),imo=r(o4,` property of the config object (either
passed as an argument or loaded from `),WZ=n(o4,"CODE",{});var PGr=s(WZ);dmo=r(PGr,"pretrained_model_name_or_path"),PGr.forEach(t),cmo=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QZ=n(o4,"CODE",{});var $Gr=s(QZ);fmo=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),mmo=r(o4,":"),o4.forEach(t),gmo=i(Ot),k=n(Ot,"UL",{});var S=s(k);F_=n(S,"LI",{});var PMe=s(F_);HZ=n(PMe,"STRONG",{});var IGr=s(HZ);hmo=r(IGr,"albert"),IGr.forEach(t),pmo=r(PMe," \u2014 "),sP=n(PMe,"A",{href:!0});var jGr=s(sP);_mo=r(jGr,"AlbertForPreTraining"),jGr.forEach(t),umo=r(PMe," (ALBERT model)"),PMe.forEach(t),bmo=i(S),C_=n(S,"LI",{});var $Me=s(C_);UZ=n($Me,"STRONG",{});var DGr=s(UZ);vmo=r(DGr,"bart"),DGr.forEach(t),Tmo=r($Me," \u2014 "),lP=n($Me,"A",{href:!0});var NGr=s(lP);Fmo=r(NGr,"BartForConditionalGeneration"),NGr.forEach(t),Cmo=r($Me," (BART model)"),$Me.forEach(t),Mmo=i(S),M_=n(S,"LI",{});var IMe=s(M_);JZ=n(IMe,"STRONG",{});var qGr=s(JZ);Emo=r(qGr,"bert"),qGr.forEach(t),ymo=r(IMe," \u2014 "),iP=n(IMe,"A",{href:!0});var OGr=s(iP);wmo=r(OGr,"BertForPreTraining"),OGr.forEach(t),Amo=r(IMe," (BERT model)"),IMe.forEach(t),Lmo=i(S),E_=n(S,"LI",{});var jMe=s(E_);YZ=n(jMe,"STRONG",{});var GGr=s(YZ);Bmo=r(GGr,"big_bird"),GGr.forEach(t),xmo=r(jMe," \u2014 "),dP=n(jMe,"A",{href:!0});var XGr=s(dP);kmo=r(XGr,"BigBirdForPreTraining"),XGr.forEach(t),Rmo=r(jMe," (BigBird model)"),jMe.forEach(t),Smo=i(S),y_=n(S,"LI",{});var DMe=s(y_);KZ=n(DMe,"STRONG",{});var VGr=s(KZ);Pmo=r(VGr,"camembert"),VGr.forEach(t),$mo=r(DMe," \u2014 "),cP=n(DMe,"A",{href:!0});var zGr=s(cP);Imo=r(zGr,"CamembertForMaskedLM"),zGr.forEach(t),jmo=r(DMe," (CamemBERT model)"),DMe.forEach(t),Dmo=i(S),w_=n(S,"LI",{});var NMe=s(w_);ZZ=n(NMe,"STRONG",{});var WGr=s(ZZ);Nmo=r(WGr,"ctrl"),WGr.forEach(t),qmo=r(NMe," \u2014 "),fP=n(NMe,"A",{href:!0});var QGr=s(fP);Omo=r(QGr,"CTRLLMHeadModel"),QGr.forEach(t),Gmo=r(NMe," (CTRL model)"),NMe.forEach(t),Xmo=i(S),A_=n(S,"LI",{});var qMe=s(A_);eee=n(qMe,"STRONG",{});var HGr=s(eee);Vmo=r(HGr,"data2vec-text"),HGr.forEach(t),zmo=r(qMe," \u2014 "),mP=n(qMe,"A",{href:!0});var UGr=s(mP);Wmo=r(UGr,"Data2VecTextForMaskedLM"),UGr.forEach(t),Qmo=r(qMe," (Data2VecText model)"),qMe.forEach(t),Hmo=i(S),L_=n(S,"LI",{});var OMe=s(L_);oee=n(OMe,"STRONG",{});var JGr=s(oee);Umo=r(JGr,"deberta"),JGr.forEach(t),Jmo=r(OMe," \u2014 "),gP=n(OMe,"A",{href:!0});var YGr=s(gP);Ymo=r(YGr,"DebertaForMaskedLM"),YGr.forEach(t),Kmo=r(OMe," (DeBERTa model)"),OMe.forEach(t),Zmo=i(S),B_=n(S,"LI",{});var GMe=s(B_);ree=n(GMe,"STRONG",{});var KGr=s(ree);ego=r(KGr,"deberta-v2"),KGr.forEach(t),ogo=r(GMe," \u2014 "),hP=n(GMe,"A",{href:!0});var ZGr=s(hP);rgo=r(ZGr,"DebertaV2ForMaskedLM"),ZGr.forEach(t),tgo=r(GMe," (DeBERTa-v2 model)"),GMe.forEach(t),ago=i(S),x_=n(S,"LI",{});var XMe=s(x_);tee=n(XMe,"STRONG",{});var eXr=s(tee);ngo=r(eXr,"distilbert"),eXr.forEach(t),sgo=r(XMe," \u2014 "),pP=n(XMe,"A",{href:!0});var oXr=s(pP);lgo=r(oXr,"DistilBertForMaskedLM"),oXr.forEach(t),igo=r(XMe," (DistilBERT model)"),XMe.forEach(t),dgo=i(S),k_=n(S,"LI",{});var VMe=s(k_);aee=n(VMe,"STRONG",{});var rXr=s(aee);cgo=r(rXr,"electra"),rXr.forEach(t),fgo=r(VMe," \u2014 "),_P=n(VMe,"A",{href:!0});var tXr=s(_P);mgo=r(tXr,"ElectraForPreTraining"),tXr.forEach(t),ggo=r(VMe," (ELECTRA model)"),VMe.forEach(t),hgo=i(S),R_=n(S,"LI",{});var zMe=s(R_);nee=n(zMe,"STRONG",{});var aXr=s(nee);pgo=r(aXr,"flaubert"),aXr.forEach(t),_go=r(zMe," \u2014 "),uP=n(zMe,"A",{href:!0});var nXr=s(uP);ugo=r(nXr,"FlaubertWithLMHeadModel"),nXr.forEach(t),bgo=r(zMe," (FlauBERT model)"),zMe.forEach(t),vgo=i(S),S_=n(S,"LI",{});var WMe=s(S_);see=n(WMe,"STRONG",{});var sXr=s(see);Tgo=r(sXr,"fnet"),sXr.forEach(t),Fgo=r(WMe," \u2014 "),bP=n(WMe,"A",{href:!0});var lXr=s(bP);Cgo=r(lXr,"FNetForPreTraining"),lXr.forEach(t),Mgo=r(WMe," (FNet model)"),WMe.forEach(t),Ego=i(S),P_=n(S,"LI",{});var QMe=s(P_);lee=n(QMe,"STRONG",{});var iXr=s(lee);ygo=r(iXr,"fsmt"),iXr.forEach(t),wgo=r(QMe," \u2014 "),vP=n(QMe,"A",{href:!0});var dXr=s(vP);Ago=r(dXr,"FSMTForConditionalGeneration"),dXr.forEach(t),Lgo=r(QMe," (FairSeq Machine-Translation model)"),QMe.forEach(t),Bgo=i(S),$_=n(S,"LI",{});var HMe=s($_);iee=n(HMe,"STRONG",{});var cXr=s(iee);xgo=r(cXr,"funnel"),cXr.forEach(t),kgo=r(HMe," \u2014 "),TP=n(HMe,"A",{href:!0});var fXr=s(TP);Rgo=r(fXr,"FunnelForPreTraining"),fXr.forEach(t),Sgo=r(HMe," (Funnel Transformer model)"),HMe.forEach(t),Pgo=i(S),I_=n(S,"LI",{});var UMe=s(I_);dee=n(UMe,"STRONG",{});var mXr=s(dee);$go=r(mXr,"gpt2"),mXr.forEach(t),Igo=r(UMe," \u2014 "),FP=n(UMe,"A",{href:!0});var gXr=s(FP);jgo=r(gXr,"GPT2LMHeadModel"),gXr.forEach(t),Dgo=r(UMe," (OpenAI GPT-2 model)"),UMe.forEach(t),Ngo=i(S),j_=n(S,"LI",{});var JMe=s(j_);cee=n(JMe,"STRONG",{});var hXr=s(cee);qgo=r(hXr,"ibert"),hXr.forEach(t),Ogo=r(JMe," \u2014 "),CP=n(JMe,"A",{href:!0});var pXr=s(CP);Ggo=r(pXr,"IBertForMaskedLM"),pXr.forEach(t),Xgo=r(JMe," (I-BERT model)"),JMe.forEach(t),Vgo=i(S),D_=n(S,"LI",{});var YMe=s(D_);fee=n(YMe,"STRONG",{});var _Xr=s(fee);zgo=r(_Xr,"layoutlm"),_Xr.forEach(t),Wgo=r(YMe," \u2014 "),MP=n(YMe,"A",{href:!0});var uXr=s(MP);Qgo=r(uXr,"LayoutLMForMaskedLM"),uXr.forEach(t),Hgo=r(YMe," (LayoutLM model)"),YMe.forEach(t),Ugo=i(S),N_=n(S,"LI",{});var KMe=s(N_);mee=n(KMe,"STRONG",{});var bXr=s(mee);Jgo=r(bXr,"longformer"),bXr.forEach(t),Ygo=r(KMe," \u2014 "),EP=n(KMe,"A",{href:!0});var vXr=s(EP);Kgo=r(vXr,"LongformerForMaskedLM"),vXr.forEach(t),Zgo=r(KMe," (Longformer model)"),KMe.forEach(t),eho=i(S),q_=n(S,"LI",{});var ZMe=s(q_);gee=n(ZMe,"STRONG",{});var TXr=s(gee);oho=r(TXr,"lxmert"),TXr.forEach(t),rho=r(ZMe," \u2014 "),yP=n(ZMe,"A",{href:!0});var FXr=s(yP);tho=r(FXr,"LxmertForPreTraining"),FXr.forEach(t),aho=r(ZMe," (LXMERT model)"),ZMe.forEach(t),nho=i(S),O_=n(S,"LI",{});var e4e=s(O_);hee=n(e4e,"STRONG",{});var CXr=s(hee);sho=r(CXr,"megatron-bert"),CXr.forEach(t),lho=r(e4e," \u2014 "),wP=n(e4e,"A",{href:!0});var MXr=s(wP);iho=r(MXr,"MegatronBertForPreTraining"),MXr.forEach(t),dho=r(e4e," (MegatronBert model)"),e4e.forEach(t),cho=i(S),G_=n(S,"LI",{});var o4e=s(G_);pee=n(o4e,"STRONG",{});var EXr=s(pee);fho=r(EXr,"mobilebert"),EXr.forEach(t),mho=r(o4e," \u2014 "),AP=n(o4e,"A",{href:!0});var yXr=s(AP);gho=r(yXr,"MobileBertForPreTraining"),yXr.forEach(t),hho=r(o4e," (MobileBERT model)"),o4e.forEach(t),pho=i(S),X_=n(S,"LI",{});var r4e=s(X_);_ee=n(r4e,"STRONG",{});var wXr=s(_ee);_ho=r(wXr,"mpnet"),wXr.forEach(t),uho=r(r4e," \u2014 "),LP=n(r4e,"A",{href:!0});var AXr=s(LP);bho=r(AXr,"MPNetForMaskedLM"),AXr.forEach(t),vho=r(r4e," (MPNet model)"),r4e.forEach(t),Tho=i(S),V_=n(S,"LI",{});var t4e=s(V_);uee=n(t4e,"STRONG",{});var LXr=s(uee);Fho=r(LXr,"openai-gpt"),LXr.forEach(t),Cho=r(t4e," \u2014 "),BP=n(t4e,"A",{href:!0});var BXr=s(BP);Mho=r(BXr,"OpenAIGPTLMHeadModel"),BXr.forEach(t),Eho=r(t4e," (OpenAI GPT model)"),t4e.forEach(t),yho=i(S),z_=n(S,"LI",{});var a4e=s(z_);bee=n(a4e,"STRONG",{});var xXr=s(bee);who=r(xXr,"retribert"),xXr.forEach(t),Aho=r(a4e," \u2014 "),xP=n(a4e,"A",{href:!0});var kXr=s(xP);Lho=r(kXr,"RetriBertModel"),kXr.forEach(t),Bho=r(a4e," (RetriBERT model)"),a4e.forEach(t),xho=i(S),W_=n(S,"LI",{});var n4e=s(W_);vee=n(n4e,"STRONG",{});var RXr=s(vee);kho=r(RXr,"roberta"),RXr.forEach(t),Rho=r(n4e," \u2014 "),kP=n(n4e,"A",{href:!0});var SXr=s(kP);Sho=r(SXr,"RobertaForMaskedLM"),SXr.forEach(t),Pho=r(n4e," (RoBERTa model)"),n4e.forEach(t),$ho=i(S),Q_=n(S,"LI",{});var s4e=s(Q_);Tee=n(s4e,"STRONG",{});var PXr=s(Tee);Iho=r(PXr,"squeezebert"),PXr.forEach(t),jho=r(s4e," \u2014 "),RP=n(s4e,"A",{href:!0});var $Xr=s(RP);Dho=r($Xr,"SqueezeBertForMaskedLM"),$Xr.forEach(t),Nho=r(s4e," (SqueezeBERT model)"),s4e.forEach(t),qho=i(S),H_=n(S,"LI",{});var l4e=s(H_);Fee=n(l4e,"STRONG",{});var IXr=s(Fee);Oho=r(IXr,"t5"),IXr.forEach(t),Gho=r(l4e," \u2014 "),SP=n(l4e,"A",{href:!0});var jXr=s(SP);Xho=r(jXr,"T5ForConditionalGeneration"),jXr.forEach(t),Vho=r(l4e," (T5 model)"),l4e.forEach(t),zho=i(S),U_=n(S,"LI",{});var i4e=s(U_);Cee=n(i4e,"STRONG",{});var DXr=s(Cee);Who=r(DXr,"tapas"),DXr.forEach(t),Qho=r(i4e," \u2014 "),PP=n(i4e,"A",{href:!0});var NXr=s(PP);Hho=r(NXr,"TapasForMaskedLM"),NXr.forEach(t),Uho=r(i4e," (TAPAS model)"),i4e.forEach(t),Jho=i(S),J_=n(S,"LI",{});var d4e=s(J_);Mee=n(d4e,"STRONG",{});var qXr=s(Mee);Yho=r(qXr,"transfo-xl"),qXr.forEach(t),Kho=r(d4e," \u2014 "),$P=n(d4e,"A",{href:!0});var OXr=s($P);Zho=r(OXr,"TransfoXLLMHeadModel"),OXr.forEach(t),epo=r(d4e," (Transformer-XL model)"),d4e.forEach(t),opo=i(S),Y_=n(S,"LI",{});var c4e=s(Y_);Eee=n(c4e,"STRONG",{});var GXr=s(Eee);rpo=r(GXr,"unispeech"),GXr.forEach(t),tpo=r(c4e," \u2014 "),IP=n(c4e,"A",{href:!0});var XXr=s(IP);apo=r(XXr,"UniSpeechForPreTraining"),XXr.forEach(t),npo=r(c4e," (UniSpeech model)"),c4e.forEach(t),spo=i(S),K_=n(S,"LI",{});var f4e=s(K_);yee=n(f4e,"STRONG",{});var VXr=s(yee);lpo=r(VXr,"unispeech-sat"),VXr.forEach(t),ipo=r(f4e," \u2014 "),jP=n(f4e,"A",{href:!0});var zXr=s(jP);dpo=r(zXr,"UniSpeechSatForPreTraining"),zXr.forEach(t),cpo=r(f4e," (UniSpeechSat model)"),f4e.forEach(t),fpo=i(S),Z_=n(S,"LI",{});var m4e=s(Z_);wee=n(m4e,"STRONG",{});var WXr=s(wee);mpo=r(WXr,"visual_bert"),WXr.forEach(t),gpo=r(m4e," \u2014 "),DP=n(m4e,"A",{href:!0});var QXr=s(DP);hpo=r(QXr,"VisualBertForPreTraining"),QXr.forEach(t),ppo=r(m4e," (VisualBert model)"),m4e.forEach(t),_po=i(S),eu=n(S,"LI",{});var g4e=s(eu);Aee=n(g4e,"STRONG",{});var HXr=s(Aee);upo=r(HXr,"vit_mae"),HXr.forEach(t),bpo=r(g4e," \u2014 "),NP=n(g4e,"A",{href:!0});var UXr=s(NP);vpo=r(UXr,"ViTMAEForPreTraining"),UXr.forEach(t),Tpo=r(g4e," (ViTMAE model)"),g4e.forEach(t),Fpo=i(S),ou=n(S,"LI",{});var h4e=s(ou);Lee=n(h4e,"STRONG",{});var JXr=s(Lee);Cpo=r(JXr,"wav2vec2"),JXr.forEach(t),Mpo=r(h4e," \u2014 "),qP=n(h4e,"A",{href:!0});var YXr=s(qP);Epo=r(YXr,"Wav2Vec2ForPreTraining"),YXr.forEach(t),ypo=r(h4e," (Wav2Vec2 model)"),h4e.forEach(t),wpo=i(S),ru=n(S,"LI",{});var p4e=s(ru);Bee=n(p4e,"STRONG",{});var KXr=s(Bee);Apo=r(KXr,"xlm"),KXr.forEach(t),Lpo=r(p4e," \u2014 "),OP=n(p4e,"A",{href:!0});var ZXr=s(OP);Bpo=r(ZXr,"XLMWithLMHeadModel"),ZXr.forEach(t),xpo=r(p4e," (XLM model)"),p4e.forEach(t),kpo=i(S),tu=n(S,"LI",{});var _4e=s(tu);xee=n(_4e,"STRONG",{});var eVr=s(xee);Rpo=r(eVr,"xlm-roberta"),eVr.forEach(t),Spo=r(_4e," \u2014 "),GP=n(_4e,"A",{href:!0});var oVr=s(GP);Ppo=r(oVr,"XLMRobertaForMaskedLM"),oVr.forEach(t),$po=r(_4e," (XLM-RoBERTa model)"),_4e.forEach(t),Ipo=i(S),au=n(S,"LI",{});var u4e=s(au);kee=n(u4e,"STRONG",{});var rVr=s(kee);jpo=r(rVr,"xlm-roberta-xl"),rVr.forEach(t),Dpo=r(u4e," \u2014 "),XP=n(u4e,"A",{href:!0});var tVr=s(XP);Npo=r(tVr,"XLMRobertaXLForMaskedLM"),tVr.forEach(t),qpo=r(u4e," (XLM-RoBERTa-XL model)"),u4e.forEach(t),Opo=i(S),nu=n(S,"LI",{});var b4e=s(nu);Ree=n(b4e,"STRONG",{});var aVr=s(Ree);Gpo=r(aVr,"xlnet"),aVr.forEach(t),Xpo=r(b4e," \u2014 "),VP=n(b4e,"A",{href:!0});var nVr=s(VP);Vpo=r(nVr,"XLNetLMHeadModel"),nVr.forEach(t),zpo=r(b4e," (XLNet model)"),b4e.forEach(t),S.forEach(t),Wpo=i(Ot),su=n(Ot,"P",{});var v4e=s(su);Qpo=r(v4e,"The model is set in evaluation mode by default using "),See=n(v4e,"CODE",{});var sVr=s(See);Hpo=r(sVr,"model.eval()"),sVr.forEach(t),Upo=r(v4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pee=n(v4e,"CODE",{});var lVr=s(Pee);Jpo=r(lVr,"model.train()"),lVr.forEach(t),v4e.forEach(t),Ypo=i(Ot),$ee=n(Ot,"P",{});var iVr=s($ee);Kpo=r(iVr,"Examples:"),iVr.forEach(t),Zpo=i(Ot),m(XE.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),$xe=i(c),td=n(c,"H2",{class:!0});var VRe=s(td);lu=n(VRe,"A",{id:!0,class:!0,href:!0});var dVr=s(lu);Iee=n(dVr,"SPAN",{});var cVr=s(Iee);m(VE.$$.fragment,cVr),cVr.forEach(t),dVr.forEach(t),e_o=i(VRe),jee=n(VRe,"SPAN",{});var fVr=s(jee);o_o=r(fVr,"AutoModelForCausalLM"),fVr.forEach(t),VRe.forEach(t),Ixe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(zE.$$.fragment,Js),r_o=i(Js),ad=n(Js,"P",{});var $z=s(ad);t_o=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dee=n($z,"CODE",{});var mVr=s(Dee);a_o=r(mVr,"from_pretrained()"),mVr.forEach(t),n_o=r($z,"class method or the "),Nee=n($z,"CODE",{});var gVr=s(Nee);s_o=r(gVr,"from_config()"),gVr.forEach(t),l_o=r($z,`class
method.`),$z.forEach(t),i_o=i(Js),WE=n(Js,"P",{});var zRe=s(WE);d_o=r(zRe,"This class cannot be instantiated directly using "),qee=n(zRe,"CODE",{});var hVr=s(qee);c_o=r(hVr,"__init__()"),hVr.forEach(t),f_o=r(zRe," (throws an error)."),zRe.forEach(t),m_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(QE.$$.fragment,Ys),g_o=i(Ys),Oee=n(Ys,"P",{});var pVr=s(Oee);h_o=r(pVr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pVr.forEach(t),p_o=i(Ys),nd=n(Ys,"P",{});var Iz=s(nd);__o=r(Iz,`Note:
Loading a model from its configuration file does `),Gee=n(Iz,"STRONG",{});var _Vr=s(Gee);u_o=r(_Vr,"not"),_Vr.forEach(t),b_o=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(Iz,"CODE",{});var uVr=s(Xee);v_o=r(uVr,"from_pretrained()"),uVr.forEach(t),T_o=r(Iz,"to load the model weights."),Iz.forEach(t),F_o=i(Ys),Vee=n(Ys,"P",{});var bVr=s(Vee);C_o=r(bVr,"Examples:"),bVr.forEach(t),M_o=i(Ys),m(HE.$$.fragment,Ys),Ys.forEach(t),E_o=i(Js),qe=n(Js,"DIV",{class:!0});var Gt=s(qe);m(UE.$$.fragment,Gt),y_o=i(Gt),zee=n(Gt,"P",{});var vVr=s(zee);w_o=r(vVr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vVr.forEach(t),A_o=i(Gt),Wa=n(Gt,"P",{});var r4=s(Wa);L_o=r(r4,"The model class to instantiate is selected based on the "),Wee=n(r4,"CODE",{});var TVr=s(Wee);B_o=r(TVr,"model_type"),TVr.forEach(t),x_o=r(r4,` property of the config object (either
passed as an argument or loaded from `),Qee=n(r4,"CODE",{});var FVr=s(Qee);k_o=r(FVr,"pretrained_model_name_or_path"),FVr.forEach(t),R_o=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=n(r4,"CODE",{});var CVr=s(Hee);S_o=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),P_o=r(r4,":"),r4.forEach(t),$_o=i(Gt),$=n(Gt,"UL",{});var j=s($);iu=n(j,"LI",{});var T4e=s(iu);Uee=n(T4e,"STRONG",{});var MVr=s(Uee);I_o=r(MVr,"bart"),MVr.forEach(t),j_o=r(T4e," \u2014 "),zP=n(T4e,"A",{href:!0});var EVr=s(zP);D_o=r(EVr,"BartForCausalLM"),EVr.forEach(t),N_o=r(T4e," (BART model)"),T4e.forEach(t),q_o=i(j),du=n(j,"LI",{});var F4e=s(du);Jee=n(F4e,"STRONG",{});var yVr=s(Jee);O_o=r(yVr,"bert"),yVr.forEach(t),G_o=r(F4e," \u2014 "),WP=n(F4e,"A",{href:!0});var wVr=s(WP);X_o=r(wVr,"BertLMHeadModel"),wVr.forEach(t),V_o=r(F4e," (BERT model)"),F4e.forEach(t),z_o=i(j),cu=n(j,"LI",{});var C4e=s(cu);Yee=n(C4e,"STRONG",{});var AVr=s(Yee);W_o=r(AVr,"bert-generation"),AVr.forEach(t),Q_o=r(C4e," \u2014 "),QP=n(C4e,"A",{href:!0});var LVr=s(QP);H_o=r(LVr,"BertGenerationDecoder"),LVr.forEach(t),U_o=r(C4e," (Bert Generation model)"),C4e.forEach(t),J_o=i(j),fu=n(j,"LI",{});var M4e=s(fu);Kee=n(M4e,"STRONG",{});var BVr=s(Kee);Y_o=r(BVr,"big_bird"),BVr.forEach(t),K_o=r(M4e," \u2014 "),HP=n(M4e,"A",{href:!0});var xVr=s(HP);Z_o=r(xVr,"BigBirdForCausalLM"),xVr.forEach(t),euo=r(M4e," (BigBird model)"),M4e.forEach(t),ouo=i(j),mu=n(j,"LI",{});var E4e=s(mu);Zee=n(E4e,"STRONG",{});var kVr=s(Zee);ruo=r(kVr,"bigbird_pegasus"),kVr.forEach(t),tuo=r(E4e," \u2014 "),UP=n(E4e,"A",{href:!0});var RVr=s(UP);auo=r(RVr,"BigBirdPegasusForCausalLM"),RVr.forEach(t),nuo=r(E4e," (BigBirdPegasus model)"),E4e.forEach(t),suo=i(j),gu=n(j,"LI",{});var y4e=s(gu);eoe=n(y4e,"STRONG",{});var SVr=s(eoe);luo=r(SVr,"blenderbot"),SVr.forEach(t),iuo=r(y4e," \u2014 "),JP=n(y4e,"A",{href:!0});var PVr=s(JP);duo=r(PVr,"BlenderbotForCausalLM"),PVr.forEach(t),cuo=r(y4e," (Blenderbot model)"),y4e.forEach(t),fuo=i(j),hu=n(j,"LI",{});var w4e=s(hu);ooe=n(w4e,"STRONG",{});var $Vr=s(ooe);muo=r($Vr,"blenderbot-small"),$Vr.forEach(t),guo=r(w4e," \u2014 "),YP=n(w4e,"A",{href:!0});var IVr=s(YP);huo=r(IVr,"BlenderbotSmallForCausalLM"),IVr.forEach(t),puo=r(w4e," (BlenderbotSmall model)"),w4e.forEach(t),_uo=i(j),pu=n(j,"LI",{});var A4e=s(pu);roe=n(A4e,"STRONG",{});var jVr=s(roe);uuo=r(jVr,"camembert"),jVr.forEach(t),buo=r(A4e," \u2014 "),KP=n(A4e,"A",{href:!0});var DVr=s(KP);vuo=r(DVr,"CamembertForCausalLM"),DVr.forEach(t),Tuo=r(A4e," (CamemBERT model)"),A4e.forEach(t),Fuo=i(j),_u=n(j,"LI",{});var L4e=s(_u);toe=n(L4e,"STRONG",{});var NVr=s(toe);Cuo=r(NVr,"ctrl"),NVr.forEach(t),Muo=r(L4e," \u2014 "),ZP=n(L4e,"A",{href:!0});var qVr=s(ZP);Euo=r(qVr,"CTRLLMHeadModel"),qVr.forEach(t),yuo=r(L4e," (CTRL model)"),L4e.forEach(t),wuo=i(j),uu=n(j,"LI",{});var B4e=s(uu);aoe=n(B4e,"STRONG",{});var OVr=s(aoe);Auo=r(OVr,"data2vec-text"),OVr.forEach(t),Luo=r(B4e," \u2014 "),e$=n(B4e,"A",{href:!0});var GVr=s(e$);Buo=r(GVr,"Data2VecTextForCausalLM"),GVr.forEach(t),xuo=r(B4e," (Data2VecText model)"),B4e.forEach(t),kuo=i(j),bu=n(j,"LI",{});var x4e=s(bu);noe=n(x4e,"STRONG",{});var XVr=s(noe);Ruo=r(XVr,"electra"),XVr.forEach(t),Suo=r(x4e," \u2014 "),o$=n(x4e,"A",{href:!0});var VVr=s(o$);Puo=r(VVr,"ElectraForCausalLM"),VVr.forEach(t),$uo=r(x4e," (ELECTRA model)"),x4e.forEach(t),Iuo=i(j),vu=n(j,"LI",{});var k4e=s(vu);soe=n(k4e,"STRONG",{});var zVr=s(soe);juo=r(zVr,"gpt2"),zVr.forEach(t),Duo=r(k4e," \u2014 "),r$=n(k4e,"A",{href:!0});var WVr=s(r$);Nuo=r(WVr,"GPT2LMHeadModel"),WVr.forEach(t),quo=r(k4e," (OpenAI GPT-2 model)"),k4e.forEach(t),Ouo=i(j),Tu=n(j,"LI",{});var R4e=s(Tu);loe=n(R4e,"STRONG",{});var QVr=s(loe);Guo=r(QVr,"gpt_neo"),QVr.forEach(t),Xuo=r(R4e," \u2014 "),t$=n(R4e,"A",{href:!0});var HVr=s(t$);Vuo=r(HVr,"GPTNeoForCausalLM"),HVr.forEach(t),zuo=r(R4e," (GPT Neo model)"),R4e.forEach(t),Wuo=i(j),Fu=n(j,"LI",{});var S4e=s(Fu);ioe=n(S4e,"STRONG",{});var UVr=s(ioe);Quo=r(UVr,"gptj"),UVr.forEach(t),Huo=r(S4e," \u2014 "),a$=n(S4e,"A",{href:!0});var JVr=s(a$);Uuo=r(JVr,"GPTJForCausalLM"),JVr.forEach(t),Juo=r(S4e," (GPT-J model)"),S4e.forEach(t),Yuo=i(j),Cu=n(j,"LI",{});var P4e=s(Cu);doe=n(P4e,"STRONG",{});var YVr=s(doe);Kuo=r(YVr,"marian"),YVr.forEach(t),Zuo=r(P4e," \u2014 "),n$=n(P4e,"A",{href:!0});var KVr=s(n$);e2o=r(KVr,"MarianForCausalLM"),KVr.forEach(t),o2o=r(P4e," (Marian model)"),P4e.forEach(t),r2o=i(j),Mu=n(j,"LI",{});var $4e=s(Mu);coe=n($4e,"STRONG",{});var ZVr=s(coe);t2o=r(ZVr,"mbart"),ZVr.forEach(t),a2o=r($4e," \u2014 "),s$=n($4e,"A",{href:!0});var ezr=s(s$);n2o=r(ezr,"MBartForCausalLM"),ezr.forEach(t),s2o=r($4e," (mBART model)"),$4e.forEach(t),l2o=i(j),Eu=n(j,"LI",{});var I4e=s(Eu);foe=n(I4e,"STRONG",{});var ozr=s(foe);i2o=r(ozr,"megatron-bert"),ozr.forEach(t),d2o=r(I4e," \u2014 "),l$=n(I4e,"A",{href:!0});var rzr=s(l$);c2o=r(rzr,"MegatronBertForCausalLM"),rzr.forEach(t),f2o=r(I4e," (MegatronBert model)"),I4e.forEach(t),m2o=i(j),yu=n(j,"LI",{});var j4e=s(yu);moe=n(j4e,"STRONG",{});var tzr=s(moe);g2o=r(tzr,"openai-gpt"),tzr.forEach(t),h2o=r(j4e," \u2014 "),i$=n(j4e,"A",{href:!0});var azr=s(i$);p2o=r(azr,"OpenAIGPTLMHeadModel"),azr.forEach(t),_2o=r(j4e," (OpenAI GPT model)"),j4e.forEach(t),u2o=i(j),wu=n(j,"LI",{});var D4e=s(wu);goe=n(D4e,"STRONG",{});var nzr=s(goe);b2o=r(nzr,"pegasus"),nzr.forEach(t),v2o=r(D4e," \u2014 "),d$=n(D4e,"A",{href:!0});var szr=s(d$);T2o=r(szr,"PegasusForCausalLM"),szr.forEach(t),F2o=r(D4e," (Pegasus model)"),D4e.forEach(t),C2o=i(j),Au=n(j,"LI",{});var N4e=s(Au);hoe=n(N4e,"STRONG",{});var lzr=s(hoe);M2o=r(lzr,"plbart"),lzr.forEach(t),E2o=r(N4e," \u2014 "),c$=n(N4e,"A",{href:!0});var izr=s(c$);y2o=r(izr,"PLBartForCausalLM"),izr.forEach(t),w2o=r(N4e," (PLBart model)"),N4e.forEach(t),A2o=i(j),Lu=n(j,"LI",{});var q4e=s(Lu);poe=n(q4e,"STRONG",{});var dzr=s(poe);L2o=r(dzr,"prophetnet"),dzr.forEach(t),B2o=r(q4e," \u2014 "),f$=n(q4e,"A",{href:!0});var czr=s(f$);x2o=r(czr,"ProphetNetForCausalLM"),czr.forEach(t),k2o=r(q4e," (ProphetNet model)"),q4e.forEach(t),R2o=i(j),Bu=n(j,"LI",{});var O4e=s(Bu);_oe=n(O4e,"STRONG",{});var fzr=s(_oe);S2o=r(fzr,"qdqbert"),fzr.forEach(t),P2o=r(O4e," \u2014 "),m$=n(O4e,"A",{href:!0});var mzr=s(m$);$2o=r(mzr,"QDQBertLMHeadModel"),mzr.forEach(t),I2o=r(O4e," (QDQBert model)"),O4e.forEach(t),j2o=i(j),xu=n(j,"LI",{});var G4e=s(xu);uoe=n(G4e,"STRONG",{});var gzr=s(uoe);D2o=r(gzr,"reformer"),gzr.forEach(t),N2o=r(G4e," \u2014 "),g$=n(G4e,"A",{href:!0});var hzr=s(g$);q2o=r(hzr,"ReformerModelWithLMHead"),hzr.forEach(t),O2o=r(G4e," (Reformer model)"),G4e.forEach(t),G2o=i(j),ku=n(j,"LI",{});var X4e=s(ku);boe=n(X4e,"STRONG",{});var pzr=s(boe);X2o=r(pzr,"rembert"),pzr.forEach(t),V2o=r(X4e," \u2014 "),h$=n(X4e,"A",{href:!0});var _zr=s(h$);z2o=r(_zr,"RemBertForCausalLM"),_zr.forEach(t),W2o=r(X4e," (RemBERT model)"),X4e.forEach(t),Q2o=i(j),Ru=n(j,"LI",{});var V4e=s(Ru);voe=n(V4e,"STRONG",{});var uzr=s(voe);H2o=r(uzr,"roberta"),uzr.forEach(t),U2o=r(V4e," \u2014 "),p$=n(V4e,"A",{href:!0});var bzr=s(p$);J2o=r(bzr,"RobertaForCausalLM"),bzr.forEach(t),Y2o=r(V4e," (RoBERTa model)"),V4e.forEach(t),K2o=i(j),Su=n(j,"LI",{});var z4e=s(Su);Toe=n(z4e,"STRONG",{});var vzr=s(Toe);Z2o=r(vzr,"roformer"),vzr.forEach(t),e1o=r(z4e," \u2014 "),_$=n(z4e,"A",{href:!0});var Tzr=s(_$);o1o=r(Tzr,"RoFormerForCausalLM"),Tzr.forEach(t),r1o=r(z4e," (RoFormer model)"),z4e.forEach(t),t1o=i(j),Pu=n(j,"LI",{});var W4e=s(Pu);Foe=n(W4e,"STRONG",{});var Fzr=s(Foe);a1o=r(Fzr,"speech_to_text_2"),Fzr.forEach(t),n1o=r(W4e," \u2014 "),u$=n(W4e,"A",{href:!0});var Czr=s(u$);s1o=r(Czr,"Speech2Text2ForCausalLM"),Czr.forEach(t),l1o=r(W4e," (Speech2Text2 model)"),W4e.forEach(t),i1o=i(j),$u=n(j,"LI",{});var Q4e=s($u);Coe=n(Q4e,"STRONG",{});var Mzr=s(Coe);d1o=r(Mzr,"transfo-xl"),Mzr.forEach(t),c1o=r(Q4e," \u2014 "),b$=n(Q4e,"A",{href:!0});var Ezr=s(b$);f1o=r(Ezr,"TransfoXLLMHeadModel"),Ezr.forEach(t),m1o=r(Q4e," (Transformer-XL model)"),Q4e.forEach(t),g1o=i(j),Iu=n(j,"LI",{});var H4e=s(Iu);Moe=n(H4e,"STRONG",{});var yzr=s(Moe);h1o=r(yzr,"trocr"),yzr.forEach(t),p1o=r(H4e," \u2014 "),v$=n(H4e,"A",{href:!0});var wzr=s(v$);_1o=r(wzr,"TrOCRForCausalLM"),wzr.forEach(t),u1o=r(H4e," (TrOCR model)"),H4e.forEach(t),b1o=i(j),ju=n(j,"LI",{});var U4e=s(ju);Eoe=n(U4e,"STRONG",{});var Azr=s(Eoe);v1o=r(Azr,"xglm"),Azr.forEach(t),T1o=r(U4e," \u2014 "),T$=n(U4e,"A",{href:!0});var Lzr=s(T$);F1o=r(Lzr,"XGLMForCausalLM"),Lzr.forEach(t),C1o=r(U4e," (XGLM model)"),U4e.forEach(t),M1o=i(j),Du=n(j,"LI",{});var J4e=s(Du);yoe=n(J4e,"STRONG",{});var Bzr=s(yoe);E1o=r(Bzr,"xlm"),Bzr.forEach(t),y1o=r(J4e," \u2014 "),F$=n(J4e,"A",{href:!0});var xzr=s(F$);w1o=r(xzr,"XLMWithLMHeadModel"),xzr.forEach(t),A1o=r(J4e," (XLM model)"),J4e.forEach(t),L1o=i(j),Nu=n(j,"LI",{});var Y4e=s(Nu);woe=n(Y4e,"STRONG",{});var kzr=s(woe);B1o=r(kzr,"xlm-prophetnet"),kzr.forEach(t),x1o=r(Y4e," \u2014 "),C$=n(Y4e,"A",{href:!0});var Rzr=s(C$);k1o=r(Rzr,"XLMProphetNetForCausalLM"),Rzr.forEach(t),R1o=r(Y4e," (XLMProphetNet model)"),Y4e.forEach(t),S1o=i(j),qu=n(j,"LI",{});var K4e=s(qu);Aoe=n(K4e,"STRONG",{});var Szr=s(Aoe);P1o=r(Szr,"xlm-roberta"),Szr.forEach(t),$1o=r(K4e," \u2014 "),M$=n(K4e,"A",{href:!0});var Pzr=s(M$);I1o=r(Pzr,"XLMRobertaForCausalLM"),Pzr.forEach(t),j1o=r(K4e," (XLM-RoBERTa model)"),K4e.forEach(t),D1o=i(j),Ou=n(j,"LI",{});var Z4e=s(Ou);Loe=n(Z4e,"STRONG",{});var $zr=s(Loe);N1o=r($zr,"xlm-roberta-xl"),$zr.forEach(t),q1o=r(Z4e," \u2014 "),E$=n(Z4e,"A",{href:!0});var Izr=s(E$);O1o=r(Izr,"XLMRobertaXLForCausalLM"),Izr.forEach(t),G1o=r(Z4e," (XLM-RoBERTa-XL model)"),Z4e.forEach(t),X1o=i(j),Gu=n(j,"LI",{});var eEe=s(Gu);Boe=n(eEe,"STRONG",{});var jzr=s(Boe);V1o=r(jzr,"xlnet"),jzr.forEach(t),z1o=r(eEe," \u2014 "),y$=n(eEe,"A",{href:!0});var Dzr=s(y$);W1o=r(Dzr,"XLNetLMHeadModel"),Dzr.forEach(t),Q1o=r(eEe," (XLNet model)"),eEe.forEach(t),j.forEach(t),H1o=i(Gt),Xu=n(Gt,"P",{});var oEe=s(Xu);U1o=r(oEe,"The model is set in evaluation mode by default using "),xoe=n(oEe,"CODE",{});var Nzr=s(xoe);J1o=r(Nzr,"model.eval()"),Nzr.forEach(t),Y1o=r(oEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),koe=n(oEe,"CODE",{});var qzr=s(koe);K1o=r(qzr,"model.train()"),qzr.forEach(t),oEe.forEach(t),Z1o=i(Gt),Roe=n(Gt,"P",{});var Ozr=s(Roe);ebo=r(Ozr,"Examples:"),Ozr.forEach(t),obo=i(Gt),m(JE.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),jxe=i(c),sd=n(c,"H2",{class:!0});var WRe=s(sd);Vu=n(WRe,"A",{id:!0,class:!0,href:!0});var Gzr=s(Vu);Soe=n(Gzr,"SPAN",{});var Xzr=s(Soe);m(YE.$$.fragment,Xzr),Xzr.forEach(t),Gzr.forEach(t),rbo=i(WRe),Poe=n(WRe,"SPAN",{});var Vzr=s(Poe);tbo=r(Vzr,"AutoModelForMaskedLM"),Vzr.forEach(t),WRe.forEach(t),Dxe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(KE.$$.fragment,Ks),abo=i(Ks),ld=n(Ks,"P",{});var jz=s(ld);nbo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$oe=n(jz,"CODE",{});var zzr=s($oe);sbo=r(zzr,"from_pretrained()"),zzr.forEach(t),lbo=r(jz,"class method or the "),Ioe=n(jz,"CODE",{});var Wzr=s(Ioe);ibo=r(Wzr,"from_config()"),Wzr.forEach(t),dbo=r(jz,`class
method.`),jz.forEach(t),cbo=i(Ks),ZE=n(Ks,"P",{});var QRe=s(ZE);fbo=r(QRe,"This class cannot be instantiated directly using "),joe=n(QRe,"CODE",{});var Qzr=s(joe);mbo=r(Qzr,"__init__()"),Qzr.forEach(t),gbo=r(QRe," (throws an error)."),QRe.forEach(t),hbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(e3.$$.fragment,Zs),pbo=i(Zs),Doe=n(Zs,"P",{});var Hzr=s(Doe);_bo=r(Hzr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hzr.forEach(t),ubo=i(Zs),id=n(Zs,"P",{});var Dz=s(id);bbo=r(Dz,`Note:
Loading a model from its configuration file does `),Noe=n(Dz,"STRONG",{});var Uzr=s(Noe);vbo=r(Uzr,"not"),Uzr.forEach(t),Tbo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(Dz,"CODE",{});var Jzr=s(qoe);Fbo=r(Jzr,"from_pretrained()"),Jzr.forEach(t),Cbo=r(Dz,"to load the model weights."),Dz.forEach(t),Mbo=i(Zs),Ooe=n(Zs,"P",{});var Yzr=s(Ooe);Ebo=r(Yzr,"Examples:"),Yzr.forEach(t),ybo=i(Zs),m(o3.$$.fragment,Zs),Zs.forEach(t),wbo=i(Ks),Oe=n(Ks,"DIV",{class:!0});var Xt=s(Oe);m(r3.$$.fragment,Xt),Abo=i(Xt),Goe=n(Xt,"P",{});var Kzr=s(Goe);Lbo=r(Kzr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kzr.forEach(t),Bbo=i(Xt),Qa=n(Xt,"P",{});var t4=s(Qa);xbo=r(t4,"The model class to instantiate is selected based on the "),Xoe=n(t4,"CODE",{});var Zzr=s(Xoe);kbo=r(Zzr,"model_type"),Zzr.forEach(t),Rbo=r(t4,` property of the config object (either
passed as an argument or loaded from `),Voe=n(t4,"CODE",{});var eWr=s(Voe);Sbo=r(eWr,"pretrained_model_name_or_path"),eWr.forEach(t),Pbo=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zoe=n(t4,"CODE",{});var oWr=s(zoe);$bo=r(oWr,"pretrained_model_name_or_path"),oWr.forEach(t),Ibo=r(t4,":"),t4.forEach(t),jbo=i(Xt),I=n(Xt,"UL",{});var D=s(I);zu=n(D,"LI",{});var rEe=s(zu);Woe=n(rEe,"STRONG",{});var rWr=s(Woe);Dbo=r(rWr,"albert"),rWr.forEach(t),Nbo=r(rEe," \u2014 "),w$=n(rEe,"A",{href:!0});var tWr=s(w$);qbo=r(tWr,"AlbertForMaskedLM"),tWr.forEach(t),Obo=r(rEe," (ALBERT model)"),rEe.forEach(t),Gbo=i(D),Wu=n(D,"LI",{});var tEe=s(Wu);Qoe=n(tEe,"STRONG",{});var aWr=s(Qoe);Xbo=r(aWr,"bart"),aWr.forEach(t),Vbo=r(tEe," \u2014 "),A$=n(tEe,"A",{href:!0});var nWr=s(A$);zbo=r(nWr,"BartForConditionalGeneration"),nWr.forEach(t),Wbo=r(tEe," (BART model)"),tEe.forEach(t),Qbo=i(D),Qu=n(D,"LI",{});var aEe=s(Qu);Hoe=n(aEe,"STRONG",{});var sWr=s(Hoe);Hbo=r(sWr,"bert"),sWr.forEach(t),Ubo=r(aEe," \u2014 "),L$=n(aEe,"A",{href:!0});var lWr=s(L$);Jbo=r(lWr,"BertForMaskedLM"),lWr.forEach(t),Ybo=r(aEe," (BERT model)"),aEe.forEach(t),Kbo=i(D),Hu=n(D,"LI",{});var nEe=s(Hu);Uoe=n(nEe,"STRONG",{});var iWr=s(Uoe);Zbo=r(iWr,"big_bird"),iWr.forEach(t),evo=r(nEe," \u2014 "),B$=n(nEe,"A",{href:!0});var dWr=s(B$);ovo=r(dWr,"BigBirdForMaskedLM"),dWr.forEach(t),rvo=r(nEe," (BigBird model)"),nEe.forEach(t),tvo=i(D),Uu=n(D,"LI",{});var sEe=s(Uu);Joe=n(sEe,"STRONG",{});var cWr=s(Joe);avo=r(cWr,"camembert"),cWr.forEach(t),nvo=r(sEe," \u2014 "),x$=n(sEe,"A",{href:!0});var fWr=s(x$);svo=r(fWr,"CamembertForMaskedLM"),fWr.forEach(t),lvo=r(sEe," (CamemBERT model)"),sEe.forEach(t),ivo=i(D),Ju=n(D,"LI",{});var lEe=s(Ju);Yoe=n(lEe,"STRONG",{});var mWr=s(Yoe);dvo=r(mWr,"convbert"),mWr.forEach(t),cvo=r(lEe," \u2014 "),k$=n(lEe,"A",{href:!0});var gWr=s(k$);fvo=r(gWr,"ConvBertForMaskedLM"),gWr.forEach(t),mvo=r(lEe," (ConvBERT model)"),lEe.forEach(t),gvo=i(D),Yu=n(D,"LI",{});var iEe=s(Yu);Koe=n(iEe,"STRONG",{});var hWr=s(Koe);hvo=r(hWr,"data2vec-text"),hWr.forEach(t),pvo=r(iEe," \u2014 "),R$=n(iEe,"A",{href:!0});var pWr=s(R$);_vo=r(pWr,"Data2VecTextForMaskedLM"),pWr.forEach(t),uvo=r(iEe," (Data2VecText model)"),iEe.forEach(t),bvo=i(D),Ku=n(D,"LI",{});var dEe=s(Ku);Zoe=n(dEe,"STRONG",{});var _Wr=s(Zoe);vvo=r(_Wr,"deberta"),_Wr.forEach(t),Tvo=r(dEe," \u2014 "),S$=n(dEe,"A",{href:!0});var uWr=s(S$);Fvo=r(uWr,"DebertaForMaskedLM"),uWr.forEach(t),Cvo=r(dEe," (DeBERTa model)"),dEe.forEach(t),Mvo=i(D),Zu=n(D,"LI",{});var cEe=s(Zu);ere=n(cEe,"STRONG",{});var bWr=s(ere);Evo=r(bWr,"deberta-v2"),bWr.forEach(t),yvo=r(cEe," \u2014 "),P$=n(cEe,"A",{href:!0});var vWr=s(P$);wvo=r(vWr,"DebertaV2ForMaskedLM"),vWr.forEach(t),Avo=r(cEe," (DeBERTa-v2 model)"),cEe.forEach(t),Lvo=i(D),e2=n(D,"LI",{});var fEe=s(e2);ore=n(fEe,"STRONG",{});var TWr=s(ore);Bvo=r(TWr,"distilbert"),TWr.forEach(t),xvo=r(fEe," \u2014 "),$$=n(fEe,"A",{href:!0});var FWr=s($$);kvo=r(FWr,"DistilBertForMaskedLM"),FWr.forEach(t),Rvo=r(fEe," (DistilBERT model)"),fEe.forEach(t),Svo=i(D),o2=n(D,"LI",{});var mEe=s(o2);rre=n(mEe,"STRONG",{});var CWr=s(rre);Pvo=r(CWr,"electra"),CWr.forEach(t),$vo=r(mEe," \u2014 "),I$=n(mEe,"A",{href:!0});var MWr=s(I$);Ivo=r(MWr,"ElectraForMaskedLM"),MWr.forEach(t),jvo=r(mEe," (ELECTRA model)"),mEe.forEach(t),Dvo=i(D),r2=n(D,"LI",{});var gEe=s(r2);tre=n(gEe,"STRONG",{});var EWr=s(tre);Nvo=r(EWr,"flaubert"),EWr.forEach(t),qvo=r(gEe," \u2014 "),j$=n(gEe,"A",{href:!0});var yWr=s(j$);Ovo=r(yWr,"FlaubertWithLMHeadModel"),yWr.forEach(t),Gvo=r(gEe," (FlauBERT model)"),gEe.forEach(t),Xvo=i(D),t2=n(D,"LI",{});var hEe=s(t2);are=n(hEe,"STRONG",{});var wWr=s(are);Vvo=r(wWr,"fnet"),wWr.forEach(t),zvo=r(hEe," \u2014 "),D$=n(hEe,"A",{href:!0});var AWr=s(D$);Wvo=r(AWr,"FNetForMaskedLM"),AWr.forEach(t),Qvo=r(hEe," (FNet model)"),hEe.forEach(t),Hvo=i(D),a2=n(D,"LI",{});var pEe=s(a2);nre=n(pEe,"STRONG",{});var LWr=s(nre);Uvo=r(LWr,"funnel"),LWr.forEach(t),Jvo=r(pEe," \u2014 "),N$=n(pEe,"A",{href:!0});var BWr=s(N$);Yvo=r(BWr,"FunnelForMaskedLM"),BWr.forEach(t),Kvo=r(pEe," (Funnel Transformer model)"),pEe.forEach(t),Zvo=i(D),n2=n(D,"LI",{});var _Ee=s(n2);sre=n(_Ee,"STRONG",{});var xWr=s(sre);e6o=r(xWr,"ibert"),xWr.forEach(t),o6o=r(_Ee," \u2014 "),q$=n(_Ee,"A",{href:!0});var kWr=s(q$);r6o=r(kWr,"IBertForMaskedLM"),kWr.forEach(t),t6o=r(_Ee," (I-BERT model)"),_Ee.forEach(t),a6o=i(D),s2=n(D,"LI",{});var uEe=s(s2);lre=n(uEe,"STRONG",{});var RWr=s(lre);n6o=r(RWr,"layoutlm"),RWr.forEach(t),s6o=r(uEe," \u2014 "),O$=n(uEe,"A",{href:!0});var SWr=s(O$);l6o=r(SWr,"LayoutLMForMaskedLM"),SWr.forEach(t),i6o=r(uEe," (LayoutLM model)"),uEe.forEach(t),d6o=i(D),l2=n(D,"LI",{});var bEe=s(l2);ire=n(bEe,"STRONG",{});var PWr=s(ire);c6o=r(PWr,"longformer"),PWr.forEach(t),f6o=r(bEe," \u2014 "),G$=n(bEe,"A",{href:!0});var $Wr=s(G$);m6o=r($Wr,"LongformerForMaskedLM"),$Wr.forEach(t),g6o=r(bEe," (Longformer model)"),bEe.forEach(t),h6o=i(D),i2=n(D,"LI",{});var vEe=s(i2);dre=n(vEe,"STRONG",{});var IWr=s(dre);p6o=r(IWr,"mbart"),IWr.forEach(t),_6o=r(vEe," \u2014 "),X$=n(vEe,"A",{href:!0});var jWr=s(X$);u6o=r(jWr,"MBartForConditionalGeneration"),jWr.forEach(t),b6o=r(vEe," (mBART model)"),vEe.forEach(t),v6o=i(D),d2=n(D,"LI",{});var TEe=s(d2);cre=n(TEe,"STRONG",{});var DWr=s(cre);T6o=r(DWr,"megatron-bert"),DWr.forEach(t),F6o=r(TEe," \u2014 "),V$=n(TEe,"A",{href:!0});var NWr=s(V$);C6o=r(NWr,"MegatronBertForMaskedLM"),NWr.forEach(t),M6o=r(TEe," (MegatronBert model)"),TEe.forEach(t),E6o=i(D),c2=n(D,"LI",{});var FEe=s(c2);fre=n(FEe,"STRONG",{});var qWr=s(fre);y6o=r(qWr,"mobilebert"),qWr.forEach(t),w6o=r(FEe," \u2014 "),z$=n(FEe,"A",{href:!0});var OWr=s(z$);A6o=r(OWr,"MobileBertForMaskedLM"),OWr.forEach(t),L6o=r(FEe," (MobileBERT model)"),FEe.forEach(t),B6o=i(D),f2=n(D,"LI",{});var CEe=s(f2);mre=n(CEe,"STRONG",{});var GWr=s(mre);x6o=r(GWr,"mpnet"),GWr.forEach(t),k6o=r(CEe," \u2014 "),W$=n(CEe,"A",{href:!0});var XWr=s(W$);R6o=r(XWr,"MPNetForMaskedLM"),XWr.forEach(t),S6o=r(CEe," (MPNet model)"),CEe.forEach(t),P6o=i(D),m2=n(D,"LI",{});var MEe=s(m2);gre=n(MEe,"STRONG",{});var VWr=s(gre);$6o=r(VWr,"nystromformer"),VWr.forEach(t),I6o=r(MEe," \u2014 "),Q$=n(MEe,"A",{href:!0});var zWr=s(Q$);j6o=r(zWr,"NystromformerForMaskedLM"),zWr.forEach(t),D6o=r(MEe," (Nystromformer model)"),MEe.forEach(t),N6o=i(D),g2=n(D,"LI",{});var EEe=s(g2);hre=n(EEe,"STRONG",{});var WWr=s(hre);q6o=r(WWr,"perceiver"),WWr.forEach(t),O6o=r(EEe," \u2014 "),H$=n(EEe,"A",{href:!0});var QWr=s(H$);G6o=r(QWr,"PerceiverForMaskedLM"),QWr.forEach(t),X6o=r(EEe," (Perceiver model)"),EEe.forEach(t),V6o=i(D),h2=n(D,"LI",{});var yEe=s(h2);pre=n(yEe,"STRONG",{});var HWr=s(pre);z6o=r(HWr,"qdqbert"),HWr.forEach(t),W6o=r(yEe," \u2014 "),U$=n(yEe,"A",{href:!0});var UWr=s(U$);Q6o=r(UWr,"QDQBertForMaskedLM"),UWr.forEach(t),H6o=r(yEe," (QDQBert model)"),yEe.forEach(t),U6o=i(D),p2=n(D,"LI",{});var wEe=s(p2);_re=n(wEe,"STRONG",{});var JWr=s(_re);J6o=r(JWr,"reformer"),JWr.forEach(t),Y6o=r(wEe," \u2014 "),J$=n(wEe,"A",{href:!0});var YWr=s(J$);K6o=r(YWr,"ReformerForMaskedLM"),YWr.forEach(t),Z6o=r(wEe," (Reformer model)"),wEe.forEach(t),e0o=i(D),_2=n(D,"LI",{});var AEe=s(_2);ure=n(AEe,"STRONG",{});var KWr=s(ure);o0o=r(KWr,"rembert"),KWr.forEach(t),r0o=r(AEe," \u2014 "),Y$=n(AEe,"A",{href:!0});var ZWr=s(Y$);t0o=r(ZWr,"RemBertForMaskedLM"),ZWr.forEach(t),a0o=r(AEe," (RemBERT model)"),AEe.forEach(t),n0o=i(D),u2=n(D,"LI",{});var LEe=s(u2);bre=n(LEe,"STRONG",{});var eQr=s(bre);s0o=r(eQr,"roberta"),eQr.forEach(t),l0o=r(LEe," \u2014 "),K$=n(LEe,"A",{href:!0});var oQr=s(K$);i0o=r(oQr,"RobertaForMaskedLM"),oQr.forEach(t),d0o=r(LEe," (RoBERTa model)"),LEe.forEach(t),c0o=i(D),b2=n(D,"LI",{});var BEe=s(b2);vre=n(BEe,"STRONG",{});var rQr=s(vre);f0o=r(rQr,"roformer"),rQr.forEach(t),m0o=r(BEe," \u2014 "),Z$=n(BEe,"A",{href:!0});var tQr=s(Z$);g0o=r(tQr,"RoFormerForMaskedLM"),tQr.forEach(t),h0o=r(BEe," (RoFormer model)"),BEe.forEach(t),p0o=i(D),v2=n(D,"LI",{});var xEe=s(v2);Tre=n(xEe,"STRONG",{});var aQr=s(Tre);_0o=r(aQr,"squeezebert"),aQr.forEach(t),u0o=r(xEe," \u2014 "),eI=n(xEe,"A",{href:!0});var nQr=s(eI);b0o=r(nQr,"SqueezeBertForMaskedLM"),nQr.forEach(t),v0o=r(xEe," (SqueezeBERT model)"),xEe.forEach(t),T0o=i(D),T2=n(D,"LI",{});var kEe=s(T2);Fre=n(kEe,"STRONG",{});var sQr=s(Fre);F0o=r(sQr,"tapas"),sQr.forEach(t),C0o=r(kEe," \u2014 "),oI=n(kEe,"A",{href:!0});var lQr=s(oI);M0o=r(lQr,"TapasForMaskedLM"),lQr.forEach(t),E0o=r(kEe," (TAPAS model)"),kEe.forEach(t),y0o=i(D),F2=n(D,"LI",{});var REe=s(F2);Cre=n(REe,"STRONG",{});var iQr=s(Cre);w0o=r(iQr,"wav2vec2"),iQr.forEach(t),A0o=r(REe," \u2014 "),Mre=n(REe,"CODE",{});var dQr=s(Mre);L0o=r(dQr,"Wav2Vec2ForMaskedLM"),dQr.forEach(t),B0o=r(REe,"(Wav2Vec2 model)"),REe.forEach(t),x0o=i(D),C2=n(D,"LI",{});var SEe=s(C2);Ere=n(SEe,"STRONG",{});var cQr=s(Ere);k0o=r(cQr,"xlm"),cQr.forEach(t),R0o=r(SEe," \u2014 "),rI=n(SEe,"A",{href:!0});var fQr=s(rI);S0o=r(fQr,"XLMWithLMHeadModel"),fQr.forEach(t),P0o=r(SEe," (XLM model)"),SEe.forEach(t),$0o=i(D),M2=n(D,"LI",{});var PEe=s(M2);yre=n(PEe,"STRONG",{});var mQr=s(yre);I0o=r(mQr,"xlm-roberta"),mQr.forEach(t),j0o=r(PEe," \u2014 "),tI=n(PEe,"A",{href:!0});var gQr=s(tI);D0o=r(gQr,"XLMRobertaForMaskedLM"),gQr.forEach(t),N0o=r(PEe," (XLM-RoBERTa model)"),PEe.forEach(t),q0o=i(D),E2=n(D,"LI",{});var $Ee=s(E2);wre=n($Ee,"STRONG",{});var hQr=s(wre);O0o=r(hQr,"xlm-roberta-xl"),hQr.forEach(t),G0o=r($Ee," \u2014 "),aI=n($Ee,"A",{href:!0});var pQr=s(aI);X0o=r(pQr,"XLMRobertaXLForMaskedLM"),pQr.forEach(t),V0o=r($Ee," (XLM-RoBERTa-XL model)"),$Ee.forEach(t),z0o=i(D),y2=n(D,"LI",{});var IEe=s(y2);Are=n(IEe,"STRONG",{});var _Qr=s(Are);W0o=r(_Qr,"yoso"),_Qr.forEach(t),Q0o=r(IEe," \u2014 "),nI=n(IEe,"A",{href:!0});var uQr=s(nI);H0o=r(uQr,"YosoForMaskedLM"),uQr.forEach(t),U0o=r(IEe," (YOSO model)"),IEe.forEach(t),D.forEach(t),J0o=i(Xt),w2=n(Xt,"P",{});var jEe=s(w2);Y0o=r(jEe,"The model is set in evaluation mode by default using "),Lre=n(jEe,"CODE",{});var bQr=s(Lre);K0o=r(bQr,"model.eval()"),bQr.forEach(t),Z0o=r(jEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bre=n(jEe,"CODE",{});var vQr=s(Bre);eTo=r(vQr,"model.train()"),vQr.forEach(t),jEe.forEach(t),oTo=i(Xt),xre=n(Xt,"P",{});var TQr=s(xre);rTo=r(TQr,"Examples:"),TQr.forEach(t),tTo=i(Xt),m(t3.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Nxe=i(c),dd=n(c,"H2",{class:!0});var HRe=s(dd);A2=n(HRe,"A",{id:!0,class:!0,href:!0});var FQr=s(A2);kre=n(FQr,"SPAN",{});var CQr=s(kre);m(a3.$$.fragment,CQr),CQr.forEach(t),FQr.forEach(t),aTo=i(HRe),Rre=n(HRe,"SPAN",{});var MQr=s(Rre);nTo=r(MQr,"AutoModelForSeq2SeqLM"),MQr.forEach(t),HRe.forEach(t),qxe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(n3.$$.fragment,el),sTo=i(el),cd=n(el,"P",{});var Nz=s(cd);lTo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Sre=n(Nz,"CODE",{});var EQr=s(Sre);iTo=r(EQr,"from_pretrained()"),EQr.forEach(t),dTo=r(Nz,"class method or the "),Pre=n(Nz,"CODE",{});var yQr=s(Pre);cTo=r(yQr,"from_config()"),yQr.forEach(t),fTo=r(Nz,`class
method.`),Nz.forEach(t),mTo=i(el),s3=n(el,"P",{});var URe=s(s3);gTo=r(URe,"This class cannot be instantiated directly using "),$re=n(URe,"CODE",{});var wQr=s($re);hTo=r(wQr,"__init__()"),wQr.forEach(t),pTo=r(URe," (throws an error)."),URe.forEach(t),_To=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(l3.$$.fragment,ol),uTo=i(ol),Ire=n(ol,"P",{});var AQr=s(Ire);bTo=r(AQr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AQr.forEach(t),vTo=i(ol),fd=n(ol,"P",{});var qz=s(fd);TTo=r(qz,`Note:
Loading a model from its configuration file does `),jre=n(qz,"STRONG",{});var LQr=s(jre);FTo=r(LQr,"not"),LQr.forEach(t),CTo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dre=n(qz,"CODE",{});var BQr=s(Dre);MTo=r(BQr,"from_pretrained()"),BQr.forEach(t),ETo=r(qz,"to load the model weights."),qz.forEach(t),yTo=i(ol),Nre=n(ol,"P",{});var xQr=s(Nre);wTo=r(xQr,"Examples:"),xQr.forEach(t),ATo=i(ol),m(i3.$$.fragment,ol),ol.forEach(t),LTo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(d3.$$.fragment,Vt),BTo=i(Vt),qre=n(Vt,"P",{});var kQr=s(qre);xTo=r(kQr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kQr.forEach(t),kTo=i(Vt),Ha=n(Vt,"P",{});var a4=s(Ha);RTo=r(a4,"The model class to instantiate is selected based on the "),Ore=n(a4,"CODE",{});var RQr=s(Ore);STo=r(RQr,"model_type"),RQr.forEach(t),PTo=r(a4,` property of the config object (either
passed as an argument or loaded from `),Gre=n(a4,"CODE",{});var SQr=s(Gre);$To=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),ITo=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xre=n(a4,"CODE",{});var PQr=s(Xre);jTo=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),DTo=r(a4,":"),a4.forEach(t),NTo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);L2=n(ie,"LI",{});var DEe=s(L2);Vre=n(DEe,"STRONG",{});var $Qr=s(Vre);qTo=r($Qr,"bart"),$Qr.forEach(t),OTo=r(DEe," \u2014 "),sI=n(DEe,"A",{href:!0});var IQr=s(sI);GTo=r(IQr,"BartForConditionalGeneration"),IQr.forEach(t),XTo=r(DEe," (BART model)"),DEe.forEach(t),VTo=i(ie),B2=n(ie,"LI",{});var NEe=s(B2);zre=n(NEe,"STRONG",{});var jQr=s(zre);zTo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),WTo=r(NEe," \u2014 "),lI=n(NEe,"A",{href:!0});var DQr=s(lI);QTo=r(DQr,"BigBirdPegasusForConditionalGeneration"),DQr.forEach(t),HTo=r(NEe," (BigBirdPegasus model)"),NEe.forEach(t),UTo=i(ie),x2=n(ie,"LI",{});var qEe=s(x2);Wre=n(qEe,"STRONG",{});var NQr=s(Wre);JTo=r(NQr,"blenderbot"),NQr.forEach(t),YTo=r(qEe," \u2014 "),iI=n(qEe,"A",{href:!0});var qQr=s(iI);KTo=r(qQr,"BlenderbotForConditionalGeneration"),qQr.forEach(t),ZTo=r(qEe," (Blenderbot model)"),qEe.forEach(t),e7o=i(ie),k2=n(ie,"LI",{});var OEe=s(k2);Qre=n(OEe,"STRONG",{});var OQr=s(Qre);o7o=r(OQr,"blenderbot-small"),OQr.forEach(t),r7o=r(OEe," \u2014 "),dI=n(OEe,"A",{href:!0});var GQr=s(dI);t7o=r(GQr,"BlenderbotSmallForConditionalGeneration"),GQr.forEach(t),a7o=r(OEe," (BlenderbotSmall model)"),OEe.forEach(t),n7o=i(ie),R2=n(ie,"LI",{});var GEe=s(R2);Hre=n(GEe,"STRONG",{});var XQr=s(Hre);s7o=r(XQr,"encoder-decoder"),XQr.forEach(t),l7o=r(GEe," \u2014 "),cI=n(GEe,"A",{href:!0});var VQr=s(cI);i7o=r(VQr,"EncoderDecoderModel"),VQr.forEach(t),d7o=r(GEe," (Encoder decoder model)"),GEe.forEach(t),c7o=i(ie),S2=n(ie,"LI",{});var XEe=s(S2);Ure=n(XEe,"STRONG",{});var zQr=s(Ure);f7o=r(zQr,"fsmt"),zQr.forEach(t),m7o=r(XEe," \u2014 "),fI=n(XEe,"A",{href:!0});var WQr=s(fI);g7o=r(WQr,"FSMTForConditionalGeneration"),WQr.forEach(t),h7o=r(XEe," (FairSeq Machine-Translation model)"),XEe.forEach(t),p7o=i(ie),P2=n(ie,"LI",{});var VEe=s(P2);Jre=n(VEe,"STRONG",{});var QQr=s(Jre);_7o=r(QQr,"led"),QQr.forEach(t),u7o=r(VEe," \u2014 "),mI=n(VEe,"A",{href:!0});var HQr=s(mI);b7o=r(HQr,"LEDForConditionalGeneration"),HQr.forEach(t),v7o=r(VEe," (LED model)"),VEe.forEach(t),T7o=i(ie),$2=n(ie,"LI",{});var zEe=s($2);Yre=n(zEe,"STRONG",{});var UQr=s(Yre);F7o=r(UQr,"m2m_100"),UQr.forEach(t),C7o=r(zEe," \u2014 "),gI=n(zEe,"A",{href:!0});var JQr=s(gI);M7o=r(JQr,"M2M100ForConditionalGeneration"),JQr.forEach(t),E7o=r(zEe," (M2M100 model)"),zEe.forEach(t),y7o=i(ie),I2=n(ie,"LI",{});var WEe=s(I2);Kre=n(WEe,"STRONG",{});var YQr=s(Kre);w7o=r(YQr,"marian"),YQr.forEach(t),A7o=r(WEe," \u2014 "),hI=n(WEe,"A",{href:!0});var KQr=s(hI);L7o=r(KQr,"MarianMTModel"),KQr.forEach(t),B7o=r(WEe," (Marian model)"),WEe.forEach(t),x7o=i(ie),j2=n(ie,"LI",{});var QEe=s(j2);Zre=n(QEe,"STRONG",{});var ZQr=s(Zre);k7o=r(ZQr,"mbart"),ZQr.forEach(t),R7o=r(QEe," \u2014 "),pI=n(QEe,"A",{href:!0});var eHr=s(pI);S7o=r(eHr,"MBartForConditionalGeneration"),eHr.forEach(t),P7o=r(QEe," (mBART model)"),QEe.forEach(t),$7o=i(ie),D2=n(ie,"LI",{});var HEe=s(D2);ete=n(HEe,"STRONG",{});var oHr=s(ete);I7o=r(oHr,"mt5"),oHr.forEach(t),j7o=r(HEe," \u2014 "),_I=n(HEe,"A",{href:!0});var rHr=s(_I);D7o=r(rHr,"MT5ForConditionalGeneration"),rHr.forEach(t),N7o=r(HEe," (mT5 model)"),HEe.forEach(t),q7o=i(ie),N2=n(ie,"LI",{});var UEe=s(N2);ote=n(UEe,"STRONG",{});var tHr=s(ote);O7o=r(tHr,"pegasus"),tHr.forEach(t),G7o=r(UEe," \u2014 "),uI=n(UEe,"A",{href:!0});var aHr=s(uI);X7o=r(aHr,"PegasusForConditionalGeneration"),aHr.forEach(t),V7o=r(UEe," (Pegasus model)"),UEe.forEach(t),z7o=i(ie),q2=n(ie,"LI",{});var JEe=s(q2);rte=n(JEe,"STRONG",{});var nHr=s(rte);W7o=r(nHr,"plbart"),nHr.forEach(t),Q7o=r(JEe," \u2014 "),bI=n(JEe,"A",{href:!0});var sHr=s(bI);H7o=r(sHr,"PLBartForConditionalGeneration"),sHr.forEach(t),U7o=r(JEe," (PLBart model)"),JEe.forEach(t),J7o=i(ie),O2=n(ie,"LI",{});var YEe=s(O2);tte=n(YEe,"STRONG",{});var lHr=s(tte);Y7o=r(lHr,"prophetnet"),lHr.forEach(t),K7o=r(YEe," \u2014 "),vI=n(YEe,"A",{href:!0});var iHr=s(vI);Z7o=r(iHr,"ProphetNetForConditionalGeneration"),iHr.forEach(t),eFo=r(YEe," (ProphetNet model)"),YEe.forEach(t),oFo=i(ie),G2=n(ie,"LI",{});var KEe=s(G2);ate=n(KEe,"STRONG",{});var dHr=s(ate);rFo=r(dHr,"t5"),dHr.forEach(t),tFo=r(KEe," \u2014 "),TI=n(KEe,"A",{href:!0});var cHr=s(TI);aFo=r(cHr,"T5ForConditionalGeneration"),cHr.forEach(t),nFo=r(KEe," (T5 model)"),KEe.forEach(t),sFo=i(ie),X2=n(ie,"LI",{});var ZEe=s(X2);nte=n(ZEe,"STRONG",{});var fHr=s(nte);lFo=r(fHr,"xlm-prophetnet"),fHr.forEach(t),iFo=r(ZEe," \u2014 "),FI=n(ZEe,"A",{href:!0});var mHr=s(FI);dFo=r(mHr,"XLMProphetNetForConditionalGeneration"),mHr.forEach(t),cFo=r(ZEe," (XLMProphetNet model)"),ZEe.forEach(t),ie.forEach(t),fFo=i(Vt),V2=n(Vt,"P",{});var e3e=s(V2);mFo=r(e3e,"The model is set in evaluation mode by default using "),ste=n(e3e,"CODE",{});var gHr=s(ste);gFo=r(gHr,"model.eval()"),gHr.forEach(t),hFo=r(e3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=n(e3e,"CODE",{});var hHr=s(lte);pFo=r(hHr,"model.train()"),hHr.forEach(t),e3e.forEach(t),_Fo=i(Vt),ite=n(Vt,"P",{});var pHr=s(ite);uFo=r(pHr,"Examples:"),pHr.forEach(t),bFo=i(Vt),m(c3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Oxe=i(c),md=n(c,"H2",{class:!0});var JRe=s(md);z2=n(JRe,"A",{id:!0,class:!0,href:!0});var _Hr=s(z2);dte=n(_Hr,"SPAN",{});var uHr=s(dte);m(f3.$$.fragment,uHr),uHr.forEach(t),_Hr.forEach(t),vFo=i(JRe),cte=n(JRe,"SPAN",{});var bHr=s(cte);TFo=r(bHr,"AutoModelForSequenceClassification"),bHr.forEach(t),JRe.forEach(t),Gxe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(m3.$$.fragment,rl),FFo=i(rl),gd=n(rl,"P",{});var Oz=s(gd);CFo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fte=n(Oz,"CODE",{});var vHr=s(fte);MFo=r(vHr,"from_pretrained()"),vHr.forEach(t),EFo=r(Oz,"class method or the "),mte=n(Oz,"CODE",{});var THr=s(mte);yFo=r(THr,"from_config()"),THr.forEach(t),wFo=r(Oz,`class
method.`),Oz.forEach(t),AFo=i(rl),g3=n(rl,"P",{});var YRe=s(g3);LFo=r(YRe,"This class cannot be instantiated directly using "),gte=n(YRe,"CODE",{});var FHr=s(gte);BFo=r(FHr,"__init__()"),FHr.forEach(t),xFo=r(YRe," (throws an error)."),YRe.forEach(t),kFo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(h3.$$.fragment,tl),RFo=i(tl),hte=n(tl,"P",{});var CHr=s(hte);SFo=r(CHr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CHr.forEach(t),PFo=i(tl),hd=n(tl,"P",{});var Gz=s(hd);$Fo=r(Gz,`Note:
Loading a model from its configuration file does `),pte=n(Gz,"STRONG",{});var MHr=s(pte);IFo=r(MHr,"not"),MHr.forEach(t),jFo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=n(Gz,"CODE",{});var EHr=s(_te);DFo=r(EHr,"from_pretrained()"),EHr.forEach(t),NFo=r(Gz,"to load the model weights."),Gz.forEach(t),qFo=i(tl),ute=n(tl,"P",{});var yHr=s(ute);OFo=r(yHr,"Examples:"),yHr.forEach(t),GFo=i(tl),m(p3.$$.fragment,tl),tl.forEach(t),XFo=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(_3.$$.fragment,zt),VFo=i(zt),bte=n(zt,"P",{});var wHr=s(bte);zFo=r(wHr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wHr.forEach(t),WFo=i(zt),Ua=n(zt,"P",{});var n4=s(Ua);QFo=r(n4,"The model class to instantiate is selected based on the "),vte=n(n4,"CODE",{});var AHr=s(vte);HFo=r(AHr,"model_type"),AHr.forEach(t),UFo=r(n4,` property of the config object (either
passed as an argument or loaded from `),Tte=n(n4,"CODE",{});var LHr=s(Tte);JFo=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),YFo=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=n(n4,"CODE",{});var BHr=s(Fte);KFo=r(BHr,"pretrained_model_name_or_path"),BHr.forEach(t),ZFo=r(n4,":"),n4.forEach(t),eCo=i(zt),A=n(zt,"UL",{});var L=s(A);W2=n(L,"LI",{});var o3e=s(W2);Cte=n(o3e,"STRONG",{});var xHr=s(Cte);oCo=r(xHr,"albert"),xHr.forEach(t),rCo=r(o3e," \u2014 "),CI=n(o3e,"A",{href:!0});var kHr=s(CI);tCo=r(kHr,"AlbertForSequenceClassification"),kHr.forEach(t),aCo=r(o3e," (ALBERT model)"),o3e.forEach(t),nCo=i(L),Q2=n(L,"LI",{});var r3e=s(Q2);Mte=n(r3e,"STRONG",{});var RHr=s(Mte);sCo=r(RHr,"bart"),RHr.forEach(t),lCo=r(r3e," \u2014 "),MI=n(r3e,"A",{href:!0});var SHr=s(MI);iCo=r(SHr,"BartForSequenceClassification"),SHr.forEach(t),dCo=r(r3e," (BART model)"),r3e.forEach(t),cCo=i(L),H2=n(L,"LI",{});var t3e=s(H2);Ete=n(t3e,"STRONG",{});var PHr=s(Ete);fCo=r(PHr,"bert"),PHr.forEach(t),mCo=r(t3e," \u2014 "),EI=n(t3e,"A",{href:!0});var $Hr=s(EI);gCo=r($Hr,"BertForSequenceClassification"),$Hr.forEach(t),hCo=r(t3e," (BERT model)"),t3e.forEach(t),pCo=i(L),U2=n(L,"LI",{});var a3e=s(U2);yte=n(a3e,"STRONG",{});var IHr=s(yte);_Co=r(IHr,"big_bird"),IHr.forEach(t),uCo=r(a3e," \u2014 "),yI=n(a3e,"A",{href:!0});var jHr=s(yI);bCo=r(jHr,"BigBirdForSequenceClassification"),jHr.forEach(t),vCo=r(a3e," (BigBird model)"),a3e.forEach(t),TCo=i(L),J2=n(L,"LI",{});var n3e=s(J2);wte=n(n3e,"STRONG",{});var DHr=s(wte);FCo=r(DHr,"bigbird_pegasus"),DHr.forEach(t),CCo=r(n3e," \u2014 "),wI=n(n3e,"A",{href:!0});var NHr=s(wI);MCo=r(NHr,"BigBirdPegasusForSequenceClassification"),NHr.forEach(t),ECo=r(n3e," (BigBirdPegasus model)"),n3e.forEach(t),yCo=i(L),Y2=n(L,"LI",{});var s3e=s(Y2);Ate=n(s3e,"STRONG",{});var qHr=s(Ate);wCo=r(qHr,"camembert"),qHr.forEach(t),ACo=r(s3e," \u2014 "),AI=n(s3e,"A",{href:!0});var OHr=s(AI);LCo=r(OHr,"CamembertForSequenceClassification"),OHr.forEach(t),BCo=r(s3e," (CamemBERT model)"),s3e.forEach(t),xCo=i(L),K2=n(L,"LI",{});var l3e=s(K2);Lte=n(l3e,"STRONG",{});var GHr=s(Lte);kCo=r(GHr,"canine"),GHr.forEach(t),RCo=r(l3e," \u2014 "),LI=n(l3e,"A",{href:!0});var XHr=s(LI);SCo=r(XHr,"CanineForSequenceClassification"),XHr.forEach(t),PCo=r(l3e," (Canine model)"),l3e.forEach(t),$Co=i(L),Z2=n(L,"LI",{});var i3e=s(Z2);Bte=n(i3e,"STRONG",{});var VHr=s(Bte);ICo=r(VHr,"convbert"),VHr.forEach(t),jCo=r(i3e," \u2014 "),BI=n(i3e,"A",{href:!0});var zHr=s(BI);DCo=r(zHr,"ConvBertForSequenceClassification"),zHr.forEach(t),NCo=r(i3e," (ConvBERT model)"),i3e.forEach(t),qCo=i(L),e1=n(L,"LI",{});var d3e=s(e1);xte=n(d3e,"STRONG",{});var WHr=s(xte);OCo=r(WHr,"ctrl"),WHr.forEach(t),GCo=r(d3e," \u2014 "),xI=n(d3e,"A",{href:!0});var QHr=s(xI);XCo=r(QHr,"CTRLForSequenceClassification"),QHr.forEach(t),VCo=r(d3e," (CTRL model)"),d3e.forEach(t),zCo=i(L),o1=n(L,"LI",{});var c3e=s(o1);kte=n(c3e,"STRONG",{});var HHr=s(kte);WCo=r(HHr,"data2vec-text"),HHr.forEach(t),QCo=r(c3e," \u2014 "),kI=n(c3e,"A",{href:!0});var UHr=s(kI);HCo=r(UHr,"Data2VecTextForSequenceClassification"),UHr.forEach(t),UCo=r(c3e," (Data2VecText model)"),c3e.forEach(t),JCo=i(L),r1=n(L,"LI",{});var f3e=s(r1);Rte=n(f3e,"STRONG",{});var JHr=s(Rte);YCo=r(JHr,"deberta"),JHr.forEach(t),KCo=r(f3e," \u2014 "),RI=n(f3e,"A",{href:!0});var YHr=s(RI);ZCo=r(YHr,"DebertaForSequenceClassification"),YHr.forEach(t),eMo=r(f3e," (DeBERTa model)"),f3e.forEach(t),oMo=i(L),t1=n(L,"LI",{});var m3e=s(t1);Ste=n(m3e,"STRONG",{});var KHr=s(Ste);rMo=r(KHr,"deberta-v2"),KHr.forEach(t),tMo=r(m3e," \u2014 "),SI=n(m3e,"A",{href:!0});var ZHr=s(SI);aMo=r(ZHr,"DebertaV2ForSequenceClassification"),ZHr.forEach(t),nMo=r(m3e," (DeBERTa-v2 model)"),m3e.forEach(t),sMo=i(L),a1=n(L,"LI",{});var g3e=s(a1);Pte=n(g3e,"STRONG",{});var eUr=s(Pte);lMo=r(eUr,"distilbert"),eUr.forEach(t),iMo=r(g3e," \u2014 "),PI=n(g3e,"A",{href:!0});var oUr=s(PI);dMo=r(oUr,"DistilBertForSequenceClassification"),oUr.forEach(t),cMo=r(g3e," (DistilBERT model)"),g3e.forEach(t),fMo=i(L),n1=n(L,"LI",{});var h3e=s(n1);$te=n(h3e,"STRONG",{});var rUr=s($te);mMo=r(rUr,"electra"),rUr.forEach(t),gMo=r(h3e," \u2014 "),$I=n(h3e,"A",{href:!0});var tUr=s($I);hMo=r(tUr,"ElectraForSequenceClassification"),tUr.forEach(t),pMo=r(h3e," (ELECTRA model)"),h3e.forEach(t),_Mo=i(L),s1=n(L,"LI",{});var p3e=s(s1);Ite=n(p3e,"STRONG",{});var aUr=s(Ite);uMo=r(aUr,"flaubert"),aUr.forEach(t),bMo=r(p3e," \u2014 "),II=n(p3e,"A",{href:!0});var nUr=s(II);vMo=r(nUr,"FlaubertForSequenceClassification"),nUr.forEach(t),TMo=r(p3e," (FlauBERT model)"),p3e.forEach(t),FMo=i(L),l1=n(L,"LI",{});var _3e=s(l1);jte=n(_3e,"STRONG",{});var sUr=s(jte);CMo=r(sUr,"fnet"),sUr.forEach(t),MMo=r(_3e," \u2014 "),jI=n(_3e,"A",{href:!0});var lUr=s(jI);EMo=r(lUr,"FNetForSequenceClassification"),lUr.forEach(t),yMo=r(_3e," (FNet model)"),_3e.forEach(t),wMo=i(L),i1=n(L,"LI",{});var u3e=s(i1);Dte=n(u3e,"STRONG",{});var iUr=s(Dte);AMo=r(iUr,"funnel"),iUr.forEach(t),LMo=r(u3e," \u2014 "),DI=n(u3e,"A",{href:!0});var dUr=s(DI);BMo=r(dUr,"FunnelForSequenceClassification"),dUr.forEach(t),xMo=r(u3e," (Funnel Transformer model)"),u3e.forEach(t),kMo=i(L),d1=n(L,"LI",{});var b3e=s(d1);Nte=n(b3e,"STRONG",{});var cUr=s(Nte);RMo=r(cUr,"gpt2"),cUr.forEach(t),SMo=r(b3e," \u2014 "),NI=n(b3e,"A",{href:!0});var fUr=s(NI);PMo=r(fUr,"GPT2ForSequenceClassification"),fUr.forEach(t),$Mo=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),IMo=i(L),c1=n(L,"LI",{});var v3e=s(c1);qte=n(v3e,"STRONG",{});var mUr=s(qte);jMo=r(mUr,"gpt_neo"),mUr.forEach(t),DMo=r(v3e," \u2014 "),qI=n(v3e,"A",{href:!0});var gUr=s(qI);NMo=r(gUr,"GPTNeoForSequenceClassification"),gUr.forEach(t),qMo=r(v3e," (GPT Neo model)"),v3e.forEach(t),OMo=i(L),f1=n(L,"LI",{});var T3e=s(f1);Ote=n(T3e,"STRONG",{});var hUr=s(Ote);GMo=r(hUr,"gptj"),hUr.forEach(t),XMo=r(T3e," \u2014 "),OI=n(T3e,"A",{href:!0});var pUr=s(OI);VMo=r(pUr,"GPTJForSequenceClassification"),pUr.forEach(t),zMo=r(T3e," (GPT-J model)"),T3e.forEach(t),WMo=i(L),m1=n(L,"LI",{});var F3e=s(m1);Gte=n(F3e,"STRONG",{});var _Ur=s(Gte);QMo=r(_Ur,"ibert"),_Ur.forEach(t),HMo=r(F3e," \u2014 "),GI=n(F3e,"A",{href:!0});var uUr=s(GI);UMo=r(uUr,"IBertForSequenceClassification"),uUr.forEach(t),JMo=r(F3e," (I-BERT model)"),F3e.forEach(t),YMo=i(L),g1=n(L,"LI",{});var C3e=s(g1);Xte=n(C3e,"STRONG",{});var bUr=s(Xte);KMo=r(bUr,"layoutlm"),bUr.forEach(t),ZMo=r(C3e," \u2014 "),XI=n(C3e,"A",{href:!0});var vUr=s(XI);e4o=r(vUr,"LayoutLMForSequenceClassification"),vUr.forEach(t),o4o=r(C3e," (LayoutLM model)"),C3e.forEach(t),r4o=i(L),h1=n(L,"LI",{});var M3e=s(h1);Vte=n(M3e,"STRONG",{});var TUr=s(Vte);t4o=r(TUr,"layoutlmv2"),TUr.forEach(t),a4o=r(M3e," \u2014 "),VI=n(M3e,"A",{href:!0});var FUr=s(VI);n4o=r(FUr,"LayoutLMv2ForSequenceClassification"),FUr.forEach(t),s4o=r(M3e," (LayoutLMv2 model)"),M3e.forEach(t),l4o=i(L),p1=n(L,"LI",{});var E3e=s(p1);zte=n(E3e,"STRONG",{});var CUr=s(zte);i4o=r(CUr,"led"),CUr.forEach(t),d4o=r(E3e," \u2014 "),zI=n(E3e,"A",{href:!0});var MUr=s(zI);c4o=r(MUr,"LEDForSequenceClassification"),MUr.forEach(t),f4o=r(E3e," (LED model)"),E3e.forEach(t),m4o=i(L),_1=n(L,"LI",{});var y3e=s(_1);Wte=n(y3e,"STRONG",{});var EUr=s(Wte);g4o=r(EUr,"longformer"),EUr.forEach(t),h4o=r(y3e," \u2014 "),WI=n(y3e,"A",{href:!0});var yUr=s(WI);p4o=r(yUr,"LongformerForSequenceClassification"),yUr.forEach(t),_4o=r(y3e," (Longformer model)"),y3e.forEach(t),u4o=i(L),u1=n(L,"LI",{});var w3e=s(u1);Qte=n(w3e,"STRONG",{});var wUr=s(Qte);b4o=r(wUr,"mbart"),wUr.forEach(t),v4o=r(w3e," \u2014 "),QI=n(w3e,"A",{href:!0});var AUr=s(QI);T4o=r(AUr,"MBartForSequenceClassification"),AUr.forEach(t),F4o=r(w3e," (mBART model)"),w3e.forEach(t),C4o=i(L),b1=n(L,"LI",{});var A3e=s(b1);Hte=n(A3e,"STRONG",{});var LUr=s(Hte);M4o=r(LUr,"megatron-bert"),LUr.forEach(t),E4o=r(A3e," \u2014 "),HI=n(A3e,"A",{href:!0});var BUr=s(HI);y4o=r(BUr,"MegatronBertForSequenceClassification"),BUr.forEach(t),w4o=r(A3e," (MegatronBert model)"),A3e.forEach(t),A4o=i(L),v1=n(L,"LI",{});var L3e=s(v1);Ute=n(L3e,"STRONG",{});var xUr=s(Ute);L4o=r(xUr,"mobilebert"),xUr.forEach(t),B4o=r(L3e," \u2014 "),UI=n(L3e,"A",{href:!0});var kUr=s(UI);x4o=r(kUr,"MobileBertForSequenceClassification"),kUr.forEach(t),k4o=r(L3e," (MobileBERT model)"),L3e.forEach(t),R4o=i(L),T1=n(L,"LI",{});var B3e=s(T1);Jte=n(B3e,"STRONG",{});var RUr=s(Jte);S4o=r(RUr,"mpnet"),RUr.forEach(t),P4o=r(B3e," \u2014 "),JI=n(B3e,"A",{href:!0});var SUr=s(JI);$4o=r(SUr,"MPNetForSequenceClassification"),SUr.forEach(t),I4o=r(B3e," (MPNet model)"),B3e.forEach(t),j4o=i(L),F1=n(L,"LI",{});var x3e=s(F1);Yte=n(x3e,"STRONG",{});var PUr=s(Yte);D4o=r(PUr,"nystromformer"),PUr.forEach(t),N4o=r(x3e," \u2014 "),YI=n(x3e,"A",{href:!0});var $Ur=s(YI);q4o=r($Ur,"NystromformerForSequenceClassification"),$Ur.forEach(t),O4o=r(x3e," (Nystromformer model)"),x3e.forEach(t),G4o=i(L),C1=n(L,"LI",{});var k3e=s(C1);Kte=n(k3e,"STRONG",{});var IUr=s(Kte);X4o=r(IUr,"openai-gpt"),IUr.forEach(t),V4o=r(k3e," \u2014 "),KI=n(k3e,"A",{href:!0});var jUr=s(KI);z4o=r(jUr,"OpenAIGPTForSequenceClassification"),jUr.forEach(t),W4o=r(k3e," (OpenAI GPT model)"),k3e.forEach(t),Q4o=i(L),M1=n(L,"LI",{});var R3e=s(M1);Zte=n(R3e,"STRONG",{});var DUr=s(Zte);H4o=r(DUr,"perceiver"),DUr.forEach(t),U4o=r(R3e," \u2014 "),ZI=n(R3e,"A",{href:!0});var NUr=s(ZI);J4o=r(NUr,"PerceiverForSequenceClassification"),NUr.forEach(t),Y4o=r(R3e," (Perceiver model)"),R3e.forEach(t),K4o=i(L),E1=n(L,"LI",{});var S3e=s(E1);eae=n(S3e,"STRONG",{});var qUr=s(eae);Z4o=r(qUr,"plbart"),qUr.forEach(t),eEo=r(S3e," \u2014 "),ej=n(S3e,"A",{href:!0});var OUr=s(ej);oEo=r(OUr,"PLBartForSequenceClassification"),OUr.forEach(t),rEo=r(S3e," (PLBart model)"),S3e.forEach(t),tEo=i(L),y1=n(L,"LI",{});var P3e=s(y1);oae=n(P3e,"STRONG",{});var GUr=s(oae);aEo=r(GUr,"qdqbert"),GUr.forEach(t),nEo=r(P3e," \u2014 "),oj=n(P3e,"A",{href:!0});var XUr=s(oj);sEo=r(XUr,"QDQBertForSequenceClassification"),XUr.forEach(t),lEo=r(P3e," (QDQBert model)"),P3e.forEach(t),iEo=i(L),w1=n(L,"LI",{});var $3e=s(w1);rae=n($3e,"STRONG",{});var VUr=s(rae);dEo=r(VUr,"reformer"),VUr.forEach(t),cEo=r($3e," \u2014 "),rj=n($3e,"A",{href:!0});var zUr=s(rj);fEo=r(zUr,"ReformerForSequenceClassification"),zUr.forEach(t),mEo=r($3e," (Reformer model)"),$3e.forEach(t),gEo=i(L),A1=n(L,"LI",{});var I3e=s(A1);tae=n(I3e,"STRONG",{});var WUr=s(tae);hEo=r(WUr,"rembert"),WUr.forEach(t),pEo=r(I3e," \u2014 "),tj=n(I3e,"A",{href:!0});var QUr=s(tj);_Eo=r(QUr,"RemBertForSequenceClassification"),QUr.forEach(t),uEo=r(I3e," (RemBERT model)"),I3e.forEach(t),bEo=i(L),L1=n(L,"LI",{});var j3e=s(L1);aae=n(j3e,"STRONG",{});var HUr=s(aae);vEo=r(HUr,"roberta"),HUr.forEach(t),TEo=r(j3e," \u2014 "),aj=n(j3e,"A",{href:!0});var UUr=s(aj);FEo=r(UUr,"RobertaForSequenceClassification"),UUr.forEach(t),CEo=r(j3e," (RoBERTa model)"),j3e.forEach(t),MEo=i(L),B1=n(L,"LI",{});var D3e=s(B1);nae=n(D3e,"STRONG",{});var JUr=s(nae);EEo=r(JUr,"roformer"),JUr.forEach(t),yEo=r(D3e," \u2014 "),nj=n(D3e,"A",{href:!0});var YUr=s(nj);wEo=r(YUr,"RoFormerForSequenceClassification"),YUr.forEach(t),AEo=r(D3e," (RoFormer model)"),D3e.forEach(t),LEo=i(L),x1=n(L,"LI",{});var N3e=s(x1);sae=n(N3e,"STRONG",{});var KUr=s(sae);BEo=r(KUr,"squeezebert"),KUr.forEach(t),xEo=r(N3e," \u2014 "),sj=n(N3e,"A",{href:!0});var ZUr=s(sj);kEo=r(ZUr,"SqueezeBertForSequenceClassification"),ZUr.forEach(t),REo=r(N3e," (SqueezeBERT model)"),N3e.forEach(t),SEo=i(L),k1=n(L,"LI",{});var q3e=s(k1);lae=n(q3e,"STRONG",{});var eJr=s(lae);PEo=r(eJr,"tapas"),eJr.forEach(t),$Eo=r(q3e," \u2014 "),lj=n(q3e,"A",{href:!0});var oJr=s(lj);IEo=r(oJr,"TapasForSequenceClassification"),oJr.forEach(t),jEo=r(q3e," (TAPAS model)"),q3e.forEach(t),DEo=i(L),R1=n(L,"LI",{});var O3e=s(R1);iae=n(O3e,"STRONG",{});var rJr=s(iae);NEo=r(rJr,"transfo-xl"),rJr.forEach(t),qEo=r(O3e," \u2014 "),ij=n(O3e,"A",{href:!0});var tJr=s(ij);OEo=r(tJr,"TransfoXLForSequenceClassification"),tJr.forEach(t),GEo=r(O3e," (Transformer-XL model)"),O3e.forEach(t),XEo=i(L),S1=n(L,"LI",{});var G3e=s(S1);dae=n(G3e,"STRONG",{});var aJr=s(dae);VEo=r(aJr,"xlm"),aJr.forEach(t),zEo=r(G3e," \u2014 "),dj=n(G3e,"A",{href:!0});var nJr=s(dj);WEo=r(nJr,"XLMForSequenceClassification"),nJr.forEach(t),QEo=r(G3e," (XLM model)"),G3e.forEach(t),HEo=i(L),P1=n(L,"LI",{});var X3e=s(P1);cae=n(X3e,"STRONG",{});var sJr=s(cae);UEo=r(sJr,"xlm-roberta"),sJr.forEach(t),JEo=r(X3e," \u2014 "),cj=n(X3e,"A",{href:!0});var lJr=s(cj);YEo=r(lJr,"XLMRobertaForSequenceClassification"),lJr.forEach(t),KEo=r(X3e," (XLM-RoBERTa model)"),X3e.forEach(t),ZEo=i(L),$1=n(L,"LI",{});var V3e=s($1);fae=n(V3e,"STRONG",{});var iJr=s(fae);e3o=r(iJr,"xlm-roberta-xl"),iJr.forEach(t),o3o=r(V3e," \u2014 "),fj=n(V3e,"A",{href:!0});var dJr=s(fj);r3o=r(dJr,"XLMRobertaXLForSequenceClassification"),dJr.forEach(t),t3o=r(V3e," (XLM-RoBERTa-XL model)"),V3e.forEach(t),a3o=i(L),I1=n(L,"LI",{});var z3e=s(I1);mae=n(z3e,"STRONG",{});var cJr=s(mae);n3o=r(cJr,"xlnet"),cJr.forEach(t),s3o=r(z3e," \u2014 "),mj=n(z3e,"A",{href:!0});var fJr=s(mj);l3o=r(fJr,"XLNetForSequenceClassification"),fJr.forEach(t),i3o=r(z3e," (XLNet model)"),z3e.forEach(t),d3o=i(L),j1=n(L,"LI",{});var W3e=s(j1);gae=n(W3e,"STRONG",{});var mJr=s(gae);c3o=r(mJr,"yoso"),mJr.forEach(t),f3o=r(W3e," \u2014 "),gj=n(W3e,"A",{href:!0});var gJr=s(gj);m3o=r(gJr,"YosoForSequenceClassification"),gJr.forEach(t),g3o=r(W3e," (YOSO model)"),W3e.forEach(t),L.forEach(t),h3o=i(zt),D1=n(zt,"P",{});var Q3e=s(D1);p3o=r(Q3e,"The model is set in evaluation mode by default using "),hae=n(Q3e,"CODE",{});var hJr=s(hae);_3o=r(hJr,"model.eval()"),hJr.forEach(t),u3o=r(Q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pae=n(Q3e,"CODE",{});var pJr=s(pae);b3o=r(pJr,"model.train()"),pJr.forEach(t),Q3e.forEach(t),v3o=i(zt),_ae=n(zt,"P",{});var _Jr=s(_ae);T3o=r(_Jr,"Examples:"),_Jr.forEach(t),F3o=i(zt),m(u3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Xxe=i(c),pd=n(c,"H2",{class:!0});var KRe=s(pd);N1=n(KRe,"A",{id:!0,class:!0,href:!0});var uJr=s(N1);uae=n(uJr,"SPAN",{});var bJr=s(uae);m(b3.$$.fragment,bJr),bJr.forEach(t),uJr.forEach(t),C3o=i(KRe),bae=n(KRe,"SPAN",{});var vJr=s(bae);M3o=r(vJr,"AutoModelForMultipleChoice"),vJr.forEach(t),KRe.forEach(t),Vxe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(v3.$$.fragment,al),E3o=i(al),_d=n(al,"P",{});var Xz=s(_d);y3o=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vae=n(Xz,"CODE",{});var TJr=s(vae);w3o=r(TJr,"from_pretrained()"),TJr.forEach(t),A3o=r(Xz,"class method or the "),Tae=n(Xz,"CODE",{});var FJr=s(Tae);L3o=r(FJr,"from_config()"),FJr.forEach(t),B3o=r(Xz,`class
method.`),Xz.forEach(t),x3o=i(al),T3=n(al,"P",{});var ZRe=s(T3);k3o=r(ZRe,"This class cannot be instantiated directly using "),Fae=n(ZRe,"CODE",{});var CJr=s(Fae);R3o=r(CJr,"__init__()"),CJr.forEach(t),S3o=r(ZRe," (throws an error)."),ZRe.forEach(t),P3o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(F3.$$.fragment,nl),$3o=i(nl),Cae=n(nl,"P",{});var MJr=s(Cae);I3o=r(MJr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MJr.forEach(t),j3o=i(nl),ud=n(nl,"P",{});var Vz=s(ud);D3o=r(Vz,`Note:
Loading a model from its configuration file does `),Mae=n(Vz,"STRONG",{});var EJr=s(Mae);N3o=r(EJr,"not"),EJr.forEach(t),q3o=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=n(Vz,"CODE",{});var yJr=s(Eae);O3o=r(yJr,"from_pretrained()"),yJr.forEach(t),G3o=r(Vz,"to load the model weights."),Vz.forEach(t),X3o=i(nl),yae=n(nl,"P",{});var wJr=s(yae);V3o=r(wJr,"Examples:"),wJr.forEach(t),z3o=i(nl),m(C3.$$.fragment,nl),nl.forEach(t),W3o=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(M3.$$.fragment,Wt),Q3o=i(Wt),wae=n(Wt,"P",{});var AJr=s(wae);H3o=r(AJr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AJr.forEach(t),U3o=i(Wt),Ja=n(Wt,"P",{});var s4=s(Ja);J3o=r(s4,"The model class to instantiate is selected based on the "),Aae=n(s4,"CODE",{});var LJr=s(Aae);Y3o=r(LJr,"model_type"),LJr.forEach(t),K3o=r(s4,` property of the config object (either
passed as an argument or loaded from `),Lae=n(s4,"CODE",{});var BJr=s(Lae);Z3o=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),e5o=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=n(s4,"CODE",{});var xJr=s(Bae);o5o=r(xJr,"pretrained_model_name_or_path"),xJr.forEach(t),r5o=r(s4,":"),s4.forEach(t),t5o=i(Wt),O=n(Wt,"UL",{});var G=s(O);q1=n(G,"LI",{});var H3e=s(q1);xae=n(H3e,"STRONG",{});var kJr=s(xae);a5o=r(kJr,"albert"),kJr.forEach(t),n5o=r(H3e," \u2014 "),hj=n(H3e,"A",{href:!0});var RJr=s(hj);s5o=r(RJr,"AlbertForMultipleChoice"),RJr.forEach(t),l5o=r(H3e," (ALBERT model)"),H3e.forEach(t),i5o=i(G),O1=n(G,"LI",{});var U3e=s(O1);kae=n(U3e,"STRONG",{});var SJr=s(kae);d5o=r(SJr,"bert"),SJr.forEach(t),c5o=r(U3e," \u2014 "),pj=n(U3e,"A",{href:!0});var PJr=s(pj);f5o=r(PJr,"BertForMultipleChoice"),PJr.forEach(t),m5o=r(U3e," (BERT model)"),U3e.forEach(t),g5o=i(G),G1=n(G,"LI",{});var J3e=s(G1);Rae=n(J3e,"STRONG",{});var $Jr=s(Rae);h5o=r($Jr,"big_bird"),$Jr.forEach(t),p5o=r(J3e," \u2014 "),_j=n(J3e,"A",{href:!0});var IJr=s(_j);_5o=r(IJr,"BigBirdForMultipleChoice"),IJr.forEach(t),u5o=r(J3e," (BigBird model)"),J3e.forEach(t),b5o=i(G),X1=n(G,"LI",{});var Y3e=s(X1);Sae=n(Y3e,"STRONG",{});var jJr=s(Sae);v5o=r(jJr,"camembert"),jJr.forEach(t),T5o=r(Y3e," \u2014 "),uj=n(Y3e,"A",{href:!0});var DJr=s(uj);F5o=r(DJr,"CamembertForMultipleChoice"),DJr.forEach(t),C5o=r(Y3e," (CamemBERT model)"),Y3e.forEach(t),M5o=i(G),V1=n(G,"LI",{});var K3e=s(V1);Pae=n(K3e,"STRONG",{});var NJr=s(Pae);E5o=r(NJr,"canine"),NJr.forEach(t),y5o=r(K3e," \u2014 "),bj=n(K3e,"A",{href:!0});var qJr=s(bj);w5o=r(qJr,"CanineForMultipleChoice"),qJr.forEach(t),A5o=r(K3e," (Canine model)"),K3e.forEach(t),L5o=i(G),z1=n(G,"LI",{});var Z3e=s(z1);$ae=n(Z3e,"STRONG",{});var OJr=s($ae);B5o=r(OJr,"convbert"),OJr.forEach(t),x5o=r(Z3e," \u2014 "),vj=n(Z3e,"A",{href:!0});var GJr=s(vj);k5o=r(GJr,"ConvBertForMultipleChoice"),GJr.forEach(t),R5o=r(Z3e," (ConvBERT model)"),Z3e.forEach(t),S5o=i(G),W1=n(G,"LI",{});var e5e=s(W1);Iae=n(e5e,"STRONG",{});var XJr=s(Iae);P5o=r(XJr,"data2vec-text"),XJr.forEach(t),$5o=r(e5e," \u2014 "),Tj=n(e5e,"A",{href:!0});var VJr=s(Tj);I5o=r(VJr,"Data2VecTextForMultipleChoice"),VJr.forEach(t),j5o=r(e5e," (Data2VecText model)"),e5e.forEach(t),D5o=i(G),Q1=n(G,"LI",{});var o5e=s(Q1);jae=n(o5e,"STRONG",{});var zJr=s(jae);N5o=r(zJr,"distilbert"),zJr.forEach(t),q5o=r(o5e," \u2014 "),Fj=n(o5e,"A",{href:!0});var WJr=s(Fj);O5o=r(WJr,"DistilBertForMultipleChoice"),WJr.forEach(t),G5o=r(o5e," (DistilBERT model)"),o5e.forEach(t),X5o=i(G),H1=n(G,"LI",{});var r5e=s(H1);Dae=n(r5e,"STRONG",{});var QJr=s(Dae);V5o=r(QJr,"electra"),QJr.forEach(t),z5o=r(r5e," \u2014 "),Cj=n(r5e,"A",{href:!0});var HJr=s(Cj);W5o=r(HJr,"ElectraForMultipleChoice"),HJr.forEach(t),Q5o=r(r5e," (ELECTRA model)"),r5e.forEach(t),H5o=i(G),U1=n(G,"LI",{});var t5e=s(U1);Nae=n(t5e,"STRONG",{});var UJr=s(Nae);U5o=r(UJr,"flaubert"),UJr.forEach(t),J5o=r(t5e," \u2014 "),Mj=n(t5e,"A",{href:!0});var JJr=s(Mj);Y5o=r(JJr,"FlaubertForMultipleChoice"),JJr.forEach(t),K5o=r(t5e," (FlauBERT model)"),t5e.forEach(t),Z5o=i(G),J1=n(G,"LI",{});var a5e=s(J1);qae=n(a5e,"STRONG",{});var YJr=s(qae);eyo=r(YJr,"fnet"),YJr.forEach(t),oyo=r(a5e," \u2014 "),Ej=n(a5e,"A",{href:!0});var KJr=s(Ej);ryo=r(KJr,"FNetForMultipleChoice"),KJr.forEach(t),tyo=r(a5e," (FNet model)"),a5e.forEach(t),ayo=i(G),Y1=n(G,"LI",{});var n5e=s(Y1);Oae=n(n5e,"STRONG",{});var ZJr=s(Oae);nyo=r(ZJr,"funnel"),ZJr.forEach(t),syo=r(n5e," \u2014 "),yj=n(n5e,"A",{href:!0});var eYr=s(yj);lyo=r(eYr,"FunnelForMultipleChoice"),eYr.forEach(t),iyo=r(n5e," (Funnel Transformer model)"),n5e.forEach(t),dyo=i(G),K1=n(G,"LI",{});var s5e=s(K1);Gae=n(s5e,"STRONG",{});var oYr=s(Gae);cyo=r(oYr,"ibert"),oYr.forEach(t),fyo=r(s5e," \u2014 "),wj=n(s5e,"A",{href:!0});var rYr=s(wj);myo=r(rYr,"IBertForMultipleChoice"),rYr.forEach(t),gyo=r(s5e," (I-BERT model)"),s5e.forEach(t),hyo=i(G),Z1=n(G,"LI",{});var l5e=s(Z1);Xae=n(l5e,"STRONG",{});var tYr=s(Xae);pyo=r(tYr,"longformer"),tYr.forEach(t),_yo=r(l5e," \u2014 "),Aj=n(l5e,"A",{href:!0});var aYr=s(Aj);uyo=r(aYr,"LongformerForMultipleChoice"),aYr.forEach(t),byo=r(l5e," (Longformer model)"),l5e.forEach(t),vyo=i(G),eb=n(G,"LI",{});var i5e=s(eb);Vae=n(i5e,"STRONG",{});var nYr=s(Vae);Tyo=r(nYr,"megatron-bert"),nYr.forEach(t),Fyo=r(i5e," \u2014 "),Lj=n(i5e,"A",{href:!0});var sYr=s(Lj);Cyo=r(sYr,"MegatronBertForMultipleChoice"),sYr.forEach(t),Myo=r(i5e," (MegatronBert model)"),i5e.forEach(t),Eyo=i(G),ob=n(G,"LI",{});var d5e=s(ob);zae=n(d5e,"STRONG",{});var lYr=s(zae);yyo=r(lYr,"mobilebert"),lYr.forEach(t),wyo=r(d5e," \u2014 "),Bj=n(d5e,"A",{href:!0});var iYr=s(Bj);Ayo=r(iYr,"MobileBertForMultipleChoice"),iYr.forEach(t),Lyo=r(d5e," (MobileBERT model)"),d5e.forEach(t),Byo=i(G),rb=n(G,"LI",{});var c5e=s(rb);Wae=n(c5e,"STRONG",{});var dYr=s(Wae);xyo=r(dYr,"mpnet"),dYr.forEach(t),kyo=r(c5e," \u2014 "),xj=n(c5e,"A",{href:!0});var cYr=s(xj);Ryo=r(cYr,"MPNetForMultipleChoice"),cYr.forEach(t),Syo=r(c5e," (MPNet model)"),c5e.forEach(t),Pyo=i(G),tb=n(G,"LI",{});var f5e=s(tb);Qae=n(f5e,"STRONG",{});var fYr=s(Qae);$yo=r(fYr,"nystromformer"),fYr.forEach(t),Iyo=r(f5e," \u2014 "),kj=n(f5e,"A",{href:!0});var mYr=s(kj);jyo=r(mYr,"NystromformerForMultipleChoice"),mYr.forEach(t),Dyo=r(f5e," (Nystromformer model)"),f5e.forEach(t),Nyo=i(G),ab=n(G,"LI",{});var m5e=s(ab);Hae=n(m5e,"STRONG",{});var gYr=s(Hae);qyo=r(gYr,"qdqbert"),gYr.forEach(t),Oyo=r(m5e," \u2014 "),Rj=n(m5e,"A",{href:!0});var hYr=s(Rj);Gyo=r(hYr,"QDQBertForMultipleChoice"),hYr.forEach(t),Xyo=r(m5e," (QDQBert model)"),m5e.forEach(t),Vyo=i(G),nb=n(G,"LI",{});var g5e=s(nb);Uae=n(g5e,"STRONG",{});var pYr=s(Uae);zyo=r(pYr,"rembert"),pYr.forEach(t),Wyo=r(g5e," \u2014 "),Sj=n(g5e,"A",{href:!0});var _Yr=s(Sj);Qyo=r(_Yr,"RemBertForMultipleChoice"),_Yr.forEach(t),Hyo=r(g5e," (RemBERT model)"),g5e.forEach(t),Uyo=i(G),sb=n(G,"LI",{});var h5e=s(sb);Jae=n(h5e,"STRONG",{});var uYr=s(Jae);Jyo=r(uYr,"roberta"),uYr.forEach(t),Yyo=r(h5e," \u2014 "),Pj=n(h5e,"A",{href:!0});var bYr=s(Pj);Kyo=r(bYr,"RobertaForMultipleChoice"),bYr.forEach(t),Zyo=r(h5e," (RoBERTa model)"),h5e.forEach(t),ewo=i(G),lb=n(G,"LI",{});var p5e=s(lb);Yae=n(p5e,"STRONG",{});var vYr=s(Yae);owo=r(vYr,"roformer"),vYr.forEach(t),rwo=r(p5e," \u2014 "),$j=n(p5e,"A",{href:!0});var TYr=s($j);two=r(TYr,"RoFormerForMultipleChoice"),TYr.forEach(t),awo=r(p5e," (RoFormer model)"),p5e.forEach(t),nwo=i(G),ib=n(G,"LI",{});var _5e=s(ib);Kae=n(_5e,"STRONG",{});var FYr=s(Kae);swo=r(FYr,"squeezebert"),FYr.forEach(t),lwo=r(_5e," \u2014 "),Ij=n(_5e,"A",{href:!0});var CYr=s(Ij);iwo=r(CYr,"SqueezeBertForMultipleChoice"),CYr.forEach(t),dwo=r(_5e," (SqueezeBERT model)"),_5e.forEach(t),cwo=i(G),db=n(G,"LI",{});var u5e=s(db);Zae=n(u5e,"STRONG",{});var MYr=s(Zae);fwo=r(MYr,"xlm"),MYr.forEach(t),mwo=r(u5e," \u2014 "),jj=n(u5e,"A",{href:!0});var EYr=s(jj);gwo=r(EYr,"XLMForMultipleChoice"),EYr.forEach(t),hwo=r(u5e," (XLM model)"),u5e.forEach(t),pwo=i(G),cb=n(G,"LI",{});var b5e=s(cb);ene=n(b5e,"STRONG",{});var yYr=s(ene);_wo=r(yYr,"xlm-roberta"),yYr.forEach(t),uwo=r(b5e," \u2014 "),Dj=n(b5e,"A",{href:!0});var wYr=s(Dj);bwo=r(wYr,"XLMRobertaForMultipleChoice"),wYr.forEach(t),vwo=r(b5e," (XLM-RoBERTa model)"),b5e.forEach(t),Two=i(G),fb=n(G,"LI",{});var v5e=s(fb);one=n(v5e,"STRONG",{});var AYr=s(one);Fwo=r(AYr,"xlm-roberta-xl"),AYr.forEach(t),Cwo=r(v5e," \u2014 "),Nj=n(v5e,"A",{href:!0});var LYr=s(Nj);Mwo=r(LYr,"XLMRobertaXLForMultipleChoice"),LYr.forEach(t),Ewo=r(v5e," (XLM-RoBERTa-XL model)"),v5e.forEach(t),ywo=i(G),mb=n(G,"LI",{});var T5e=s(mb);rne=n(T5e,"STRONG",{});var BYr=s(rne);wwo=r(BYr,"xlnet"),BYr.forEach(t),Awo=r(T5e," \u2014 "),qj=n(T5e,"A",{href:!0});var xYr=s(qj);Lwo=r(xYr,"XLNetForMultipleChoice"),xYr.forEach(t),Bwo=r(T5e," (XLNet model)"),T5e.forEach(t),xwo=i(G),gb=n(G,"LI",{});var F5e=s(gb);tne=n(F5e,"STRONG",{});var kYr=s(tne);kwo=r(kYr,"yoso"),kYr.forEach(t),Rwo=r(F5e," \u2014 "),Oj=n(F5e,"A",{href:!0});var RYr=s(Oj);Swo=r(RYr,"YosoForMultipleChoice"),RYr.forEach(t),Pwo=r(F5e," (YOSO model)"),F5e.forEach(t),G.forEach(t),$wo=i(Wt),hb=n(Wt,"P",{});var C5e=s(hb);Iwo=r(C5e,"The model is set in evaluation mode by default using "),ane=n(C5e,"CODE",{});var SYr=s(ane);jwo=r(SYr,"model.eval()"),SYr.forEach(t),Dwo=r(C5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=n(C5e,"CODE",{});var PYr=s(nne);Nwo=r(PYr,"model.train()"),PYr.forEach(t),C5e.forEach(t),qwo=i(Wt),sne=n(Wt,"P",{});var $Yr=s(sne);Owo=r($Yr,"Examples:"),$Yr.forEach(t),Gwo=i(Wt),m(E3.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),zxe=i(c),bd=n(c,"H2",{class:!0});var eSe=s(bd);pb=n(eSe,"A",{id:!0,class:!0,href:!0});var IYr=s(pb);lne=n(IYr,"SPAN",{});var jYr=s(lne);m(y3.$$.fragment,jYr),jYr.forEach(t),IYr.forEach(t),Xwo=i(eSe),ine=n(eSe,"SPAN",{});var DYr=s(ine);Vwo=r(DYr,"AutoModelForNextSentencePrediction"),DYr.forEach(t),eSe.forEach(t),Wxe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(w3.$$.fragment,sl),zwo=i(sl),vd=n(sl,"P",{});var zz=s(vd);Wwo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dne=n(zz,"CODE",{});var NYr=s(dne);Qwo=r(NYr,"from_pretrained()"),NYr.forEach(t),Hwo=r(zz,"class method or the "),cne=n(zz,"CODE",{});var qYr=s(cne);Uwo=r(qYr,"from_config()"),qYr.forEach(t),Jwo=r(zz,`class
method.`),zz.forEach(t),Ywo=i(sl),A3=n(sl,"P",{});var oSe=s(A3);Kwo=r(oSe,"This class cannot be instantiated directly using "),fne=n(oSe,"CODE",{});var OYr=s(fne);Zwo=r(OYr,"__init__()"),OYr.forEach(t),eAo=r(oSe," (throws an error)."),oSe.forEach(t),oAo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(L3.$$.fragment,ll),rAo=i(ll),mne=n(ll,"P",{});var GYr=s(mne);tAo=r(GYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GYr.forEach(t),aAo=i(ll),Td=n(ll,"P",{});var Wz=s(Td);nAo=r(Wz,`Note:
Loading a model from its configuration file does `),gne=n(Wz,"STRONG",{});var XYr=s(gne);sAo=r(XYr,"not"),XYr.forEach(t),lAo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=n(Wz,"CODE",{});var VYr=s(hne);iAo=r(VYr,"from_pretrained()"),VYr.forEach(t),dAo=r(Wz,"to load the model weights."),Wz.forEach(t),cAo=i(ll),pne=n(ll,"P",{});var zYr=s(pne);fAo=r(zYr,"Examples:"),zYr.forEach(t),mAo=i(ll),m(B3.$$.fragment,ll),ll.forEach(t),gAo=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m(x3.$$.fragment,Qt),hAo=i(Qt),_ne=n(Qt,"P",{});var WYr=s(_ne);pAo=r(WYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WYr.forEach(t),_Ao=i(Qt),Ya=n(Qt,"P",{});var l4=s(Ya);uAo=r(l4,"The model class to instantiate is selected based on the "),une=n(l4,"CODE",{});var QYr=s(une);bAo=r(QYr,"model_type"),QYr.forEach(t),vAo=r(l4,` property of the config object (either
passed as an argument or loaded from `),bne=n(l4,"CODE",{});var HYr=s(bne);TAo=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),FAo=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=n(l4,"CODE",{});var UYr=s(vne);CAo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),MAo=r(l4,":"),l4.forEach(t),EAo=i(Qt),da=n(Qt,"UL",{});var il=s(da);_b=n(il,"LI",{});var M5e=s(_b);Tne=n(M5e,"STRONG",{});var JYr=s(Tne);yAo=r(JYr,"bert"),JYr.forEach(t),wAo=r(M5e," \u2014 "),Gj=n(M5e,"A",{href:!0});var YYr=s(Gj);AAo=r(YYr,"BertForNextSentencePrediction"),YYr.forEach(t),LAo=r(M5e," (BERT model)"),M5e.forEach(t),BAo=i(il),ub=n(il,"LI",{});var E5e=s(ub);Fne=n(E5e,"STRONG",{});var KYr=s(Fne);xAo=r(KYr,"fnet"),KYr.forEach(t),kAo=r(E5e," \u2014 "),Xj=n(E5e,"A",{href:!0});var ZYr=s(Xj);RAo=r(ZYr,"FNetForNextSentencePrediction"),ZYr.forEach(t),SAo=r(E5e," (FNet model)"),E5e.forEach(t),PAo=i(il),bb=n(il,"LI",{});var y5e=s(bb);Cne=n(y5e,"STRONG",{});var eKr=s(Cne);$Ao=r(eKr,"megatron-bert"),eKr.forEach(t),IAo=r(y5e," \u2014 "),Vj=n(y5e,"A",{href:!0});var oKr=s(Vj);jAo=r(oKr,"MegatronBertForNextSentencePrediction"),oKr.forEach(t),DAo=r(y5e," (MegatronBert model)"),y5e.forEach(t),NAo=i(il),vb=n(il,"LI",{});var w5e=s(vb);Mne=n(w5e,"STRONG",{});var rKr=s(Mne);qAo=r(rKr,"mobilebert"),rKr.forEach(t),OAo=r(w5e," \u2014 "),zj=n(w5e,"A",{href:!0});var tKr=s(zj);GAo=r(tKr,"MobileBertForNextSentencePrediction"),tKr.forEach(t),XAo=r(w5e," (MobileBERT model)"),w5e.forEach(t),VAo=i(il),Tb=n(il,"LI",{});var A5e=s(Tb);Ene=n(A5e,"STRONG",{});var aKr=s(Ene);zAo=r(aKr,"qdqbert"),aKr.forEach(t),WAo=r(A5e," \u2014 "),Wj=n(A5e,"A",{href:!0});var nKr=s(Wj);QAo=r(nKr,"QDQBertForNextSentencePrediction"),nKr.forEach(t),HAo=r(A5e," (QDQBert model)"),A5e.forEach(t),il.forEach(t),UAo=i(Qt),Fb=n(Qt,"P",{});var L5e=s(Fb);JAo=r(L5e,"The model is set in evaluation mode by default using "),yne=n(L5e,"CODE",{});var sKr=s(yne);YAo=r(sKr,"model.eval()"),sKr.forEach(t),KAo=r(L5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wne=n(L5e,"CODE",{});var lKr=s(wne);ZAo=r(lKr,"model.train()"),lKr.forEach(t),L5e.forEach(t),eLo=i(Qt),Ane=n(Qt,"P",{});var iKr=s(Ane);oLo=r(iKr,"Examples:"),iKr.forEach(t),rLo=i(Qt),m(k3.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Qxe=i(c),Fd=n(c,"H2",{class:!0});var rSe=s(Fd);Cb=n(rSe,"A",{id:!0,class:!0,href:!0});var dKr=s(Cb);Lne=n(dKr,"SPAN",{});var cKr=s(Lne);m(R3.$$.fragment,cKr),cKr.forEach(t),dKr.forEach(t),tLo=i(rSe),Bne=n(rSe,"SPAN",{});var fKr=s(Bne);aLo=r(fKr,"AutoModelForTokenClassification"),fKr.forEach(t),rSe.forEach(t),Hxe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(S3.$$.fragment,dl),nLo=i(dl),Cd=n(dl,"P",{});var Qz=s(Cd);sLo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xne=n(Qz,"CODE",{});var mKr=s(xne);lLo=r(mKr,"from_pretrained()"),mKr.forEach(t),iLo=r(Qz,"class method or the "),kne=n(Qz,"CODE",{});var gKr=s(kne);dLo=r(gKr,"from_config()"),gKr.forEach(t),cLo=r(Qz,`class
method.`),Qz.forEach(t),fLo=i(dl),P3=n(dl,"P",{});var tSe=s(P3);mLo=r(tSe,"This class cannot be instantiated directly using "),Rne=n(tSe,"CODE",{});var hKr=s(Rne);gLo=r(hKr,"__init__()"),hKr.forEach(t),hLo=r(tSe," (throws an error)."),tSe.forEach(t),pLo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m($3.$$.fragment,cl),_Lo=i(cl),Sne=n(cl,"P",{});var pKr=s(Sne);uLo=r(pKr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pKr.forEach(t),bLo=i(cl),Md=n(cl,"P",{});var Hz=s(Md);vLo=r(Hz,`Note:
Loading a model from its configuration file does `),Pne=n(Hz,"STRONG",{});var _Kr=s(Pne);TLo=r(_Kr,"not"),_Kr.forEach(t),FLo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=n(Hz,"CODE",{});var uKr=s($ne);CLo=r(uKr,"from_pretrained()"),uKr.forEach(t),MLo=r(Hz,"to load the model weights."),Hz.forEach(t),ELo=i(cl),Ine=n(cl,"P",{});var bKr=s(Ine);yLo=r(bKr,"Examples:"),bKr.forEach(t),wLo=i(cl),m(I3.$$.fragment,cl),cl.forEach(t),ALo=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(j3.$$.fragment,Ht),LLo=i(Ht),jne=n(Ht,"P",{});var vKr=s(jne);BLo=r(vKr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vKr.forEach(t),xLo=i(Ht),Ka=n(Ht,"P",{});var i4=s(Ka);kLo=r(i4,"The model class to instantiate is selected based on the "),Dne=n(i4,"CODE",{});var TKr=s(Dne);RLo=r(TKr,"model_type"),TKr.forEach(t),SLo=r(i4,` property of the config object (either
passed as an argument or loaded from `),Nne=n(i4,"CODE",{});var FKr=s(Nne);PLo=r(FKr,"pretrained_model_name_or_path"),FKr.forEach(t),$Lo=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=n(i4,"CODE",{});var CKr=s(qne);ILo=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),jLo=r(i4,":"),i4.forEach(t),DLo=i(Ht),N=n(Ht,"UL",{});var q=s(N);Mb=n(q,"LI",{});var B5e=s(Mb);One=n(B5e,"STRONG",{});var MKr=s(One);NLo=r(MKr,"albert"),MKr.forEach(t),qLo=r(B5e," \u2014 "),Qj=n(B5e,"A",{href:!0});var EKr=s(Qj);OLo=r(EKr,"AlbertForTokenClassification"),EKr.forEach(t),GLo=r(B5e," (ALBERT model)"),B5e.forEach(t),XLo=i(q),Eb=n(q,"LI",{});var x5e=s(Eb);Gne=n(x5e,"STRONG",{});var yKr=s(Gne);VLo=r(yKr,"bert"),yKr.forEach(t),zLo=r(x5e," \u2014 "),Hj=n(x5e,"A",{href:!0});var wKr=s(Hj);WLo=r(wKr,"BertForTokenClassification"),wKr.forEach(t),QLo=r(x5e," (BERT model)"),x5e.forEach(t),HLo=i(q),yb=n(q,"LI",{});var k5e=s(yb);Xne=n(k5e,"STRONG",{});var AKr=s(Xne);ULo=r(AKr,"big_bird"),AKr.forEach(t),JLo=r(k5e," \u2014 "),Uj=n(k5e,"A",{href:!0});var LKr=s(Uj);YLo=r(LKr,"BigBirdForTokenClassification"),LKr.forEach(t),KLo=r(k5e," (BigBird model)"),k5e.forEach(t),ZLo=i(q),wb=n(q,"LI",{});var R5e=s(wb);Vne=n(R5e,"STRONG",{});var BKr=s(Vne);e8o=r(BKr,"camembert"),BKr.forEach(t),o8o=r(R5e," \u2014 "),Jj=n(R5e,"A",{href:!0});var xKr=s(Jj);r8o=r(xKr,"CamembertForTokenClassification"),xKr.forEach(t),t8o=r(R5e," (CamemBERT model)"),R5e.forEach(t),a8o=i(q),Ab=n(q,"LI",{});var S5e=s(Ab);zne=n(S5e,"STRONG",{});var kKr=s(zne);n8o=r(kKr,"canine"),kKr.forEach(t),s8o=r(S5e," \u2014 "),Yj=n(S5e,"A",{href:!0});var RKr=s(Yj);l8o=r(RKr,"CanineForTokenClassification"),RKr.forEach(t),i8o=r(S5e," (Canine model)"),S5e.forEach(t),d8o=i(q),Lb=n(q,"LI",{});var P5e=s(Lb);Wne=n(P5e,"STRONG",{});var SKr=s(Wne);c8o=r(SKr,"convbert"),SKr.forEach(t),f8o=r(P5e," \u2014 "),Kj=n(P5e,"A",{href:!0});var PKr=s(Kj);m8o=r(PKr,"ConvBertForTokenClassification"),PKr.forEach(t),g8o=r(P5e," (ConvBERT model)"),P5e.forEach(t),h8o=i(q),Bb=n(q,"LI",{});var $5e=s(Bb);Qne=n($5e,"STRONG",{});var $Kr=s(Qne);p8o=r($Kr,"data2vec-text"),$Kr.forEach(t),_8o=r($5e," \u2014 "),Zj=n($5e,"A",{href:!0});var IKr=s(Zj);u8o=r(IKr,"Data2VecTextForTokenClassification"),IKr.forEach(t),b8o=r($5e," (Data2VecText model)"),$5e.forEach(t),v8o=i(q),xb=n(q,"LI",{});var I5e=s(xb);Hne=n(I5e,"STRONG",{});var jKr=s(Hne);T8o=r(jKr,"deberta"),jKr.forEach(t),F8o=r(I5e," \u2014 "),eD=n(I5e,"A",{href:!0});var DKr=s(eD);C8o=r(DKr,"DebertaForTokenClassification"),DKr.forEach(t),M8o=r(I5e," (DeBERTa model)"),I5e.forEach(t),E8o=i(q),kb=n(q,"LI",{});var j5e=s(kb);Une=n(j5e,"STRONG",{});var NKr=s(Une);y8o=r(NKr,"deberta-v2"),NKr.forEach(t),w8o=r(j5e," \u2014 "),oD=n(j5e,"A",{href:!0});var qKr=s(oD);A8o=r(qKr,"DebertaV2ForTokenClassification"),qKr.forEach(t),L8o=r(j5e," (DeBERTa-v2 model)"),j5e.forEach(t),B8o=i(q),Rb=n(q,"LI",{});var D5e=s(Rb);Jne=n(D5e,"STRONG",{});var OKr=s(Jne);x8o=r(OKr,"distilbert"),OKr.forEach(t),k8o=r(D5e," \u2014 "),rD=n(D5e,"A",{href:!0});var GKr=s(rD);R8o=r(GKr,"DistilBertForTokenClassification"),GKr.forEach(t),S8o=r(D5e," (DistilBERT model)"),D5e.forEach(t),P8o=i(q),Sb=n(q,"LI",{});var N5e=s(Sb);Yne=n(N5e,"STRONG",{});var XKr=s(Yne);$8o=r(XKr,"electra"),XKr.forEach(t),I8o=r(N5e," \u2014 "),tD=n(N5e,"A",{href:!0});var VKr=s(tD);j8o=r(VKr,"ElectraForTokenClassification"),VKr.forEach(t),D8o=r(N5e," (ELECTRA model)"),N5e.forEach(t),N8o=i(q),Pb=n(q,"LI",{});var q5e=s(Pb);Kne=n(q5e,"STRONG",{});var zKr=s(Kne);q8o=r(zKr,"flaubert"),zKr.forEach(t),O8o=r(q5e," \u2014 "),aD=n(q5e,"A",{href:!0});var WKr=s(aD);G8o=r(WKr,"FlaubertForTokenClassification"),WKr.forEach(t),X8o=r(q5e," (FlauBERT model)"),q5e.forEach(t),V8o=i(q),$b=n(q,"LI",{});var O5e=s($b);Zne=n(O5e,"STRONG",{});var QKr=s(Zne);z8o=r(QKr,"fnet"),QKr.forEach(t),W8o=r(O5e," \u2014 "),nD=n(O5e,"A",{href:!0});var HKr=s(nD);Q8o=r(HKr,"FNetForTokenClassification"),HKr.forEach(t),H8o=r(O5e," (FNet model)"),O5e.forEach(t),U8o=i(q),Ib=n(q,"LI",{});var G5e=s(Ib);ese=n(G5e,"STRONG",{});var UKr=s(ese);J8o=r(UKr,"funnel"),UKr.forEach(t),Y8o=r(G5e," \u2014 "),sD=n(G5e,"A",{href:!0});var JKr=s(sD);K8o=r(JKr,"FunnelForTokenClassification"),JKr.forEach(t),Z8o=r(G5e," (Funnel Transformer model)"),G5e.forEach(t),e9o=i(q),jb=n(q,"LI",{});var X5e=s(jb);ose=n(X5e,"STRONG",{});var YKr=s(ose);o9o=r(YKr,"gpt2"),YKr.forEach(t),r9o=r(X5e," \u2014 "),lD=n(X5e,"A",{href:!0});var KKr=s(lD);t9o=r(KKr,"GPT2ForTokenClassification"),KKr.forEach(t),a9o=r(X5e," (OpenAI GPT-2 model)"),X5e.forEach(t),n9o=i(q),Db=n(q,"LI",{});var V5e=s(Db);rse=n(V5e,"STRONG",{});var ZKr=s(rse);s9o=r(ZKr,"ibert"),ZKr.forEach(t),l9o=r(V5e," \u2014 "),iD=n(V5e,"A",{href:!0});var eZr=s(iD);i9o=r(eZr,"IBertForTokenClassification"),eZr.forEach(t),d9o=r(V5e," (I-BERT model)"),V5e.forEach(t),c9o=i(q),Nb=n(q,"LI",{});var z5e=s(Nb);tse=n(z5e,"STRONG",{});var oZr=s(tse);f9o=r(oZr,"layoutlm"),oZr.forEach(t),m9o=r(z5e," \u2014 "),dD=n(z5e,"A",{href:!0});var rZr=s(dD);g9o=r(rZr,"LayoutLMForTokenClassification"),rZr.forEach(t),h9o=r(z5e," (LayoutLM model)"),z5e.forEach(t),p9o=i(q),qb=n(q,"LI",{});var W5e=s(qb);ase=n(W5e,"STRONG",{});var tZr=s(ase);_9o=r(tZr,"layoutlmv2"),tZr.forEach(t),u9o=r(W5e," \u2014 "),cD=n(W5e,"A",{href:!0});var aZr=s(cD);b9o=r(aZr,"LayoutLMv2ForTokenClassification"),aZr.forEach(t),v9o=r(W5e," (LayoutLMv2 model)"),W5e.forEach(t),T9o=i(q),Ob=n(q,"LI",{});var Q5e=s(Ob);nse=n(Q5e,"STRONG",{});var nZr=s(nse);F9o=r(nZr,"longformer"),nZr.forEach(t),C9o=r(Q5e," \u2014 "),fD=n(Q5e,"A",{href:!0});var sZr=s(fD);M9o=r(sZr,"LongformerForTokenClassification"),sZr.forEach(t),E9o=r(Q5e," (Longformer model)"),Q5e.forEach(t),y9o=i(q),Gb=n(q,"LI",{});var H5e=s(Gb);sse=n(H5e,"STRONG",{});var lZr=s(sse);w9o=r(lZr,"megatron-bert"),lZr.forEach(t),A9o=r(H5e," \u2014 "),mD=n(H5e,"A",{href:!0});var iZr=s(mD);L9o=r(iZr,"MegatronBertForTokenClassification"),iZr.forEach(t),B9o=r(H5e," (MegatronBert model)"),H5e.forEach(t),x9o=i(q),Xb=n(q,"LI",{});var U5e=s(Xb);lse=n(U5e,"STRONG",{});var dZr=s(lse);k9o=r(dZr,"mobilebert"),dZr.forEach(t),R9o=r(U5e," \u2014 "),gD=n(U5e,"A",{href:!0});var cZr=s(gD);S9o=r(cZr,"MobileBertForTokenClassification"),cZr.forEach(t),P9o=r(U5e," (MobileBERT model)"),U5e.forEach(t),$9o=i(q),Vb=n(q,"LI",{});var J5e=s(Vb);ise=n(J5e,"STRONG",{});var fZr=s(ise);I9o=r(fZr,"mpnet"),fZr.forEach(t),j9o=r(J5e," \u2014 "),hD=n(J5e,"A",{href:!0});var mZr=s(hD);D9o=r(mZr,"MPNetForTokenClassification"),mZr.forEach(t),N9o=r(J5e," (MPNet model)"),J5e.forEach(t),q9o=i(q),zb=n(q,"LI",{});var Y5e=s(zb);dse=n(Y5e,"STRONG",{});var gZr=s(dse);O9o=r(gZr,"nystromformer"),gZr.forEach(t),G9o=r(Y5e," \u2014 "),pD=n(Y5e,"A",{href:!0});var hZr=s(pD);X9o=r(hZr,"NystromformerForTokenClassification"),hZr.forEach(t),V9o=r(Y5e," (Nystromformer model)"),Y5e.forEach(t),z9o=i(q),Wb=n(q,"LI",{});var K5e=s(Wb);cse=n(K5e,"STRONG",{});var pZr=s(cse);W9o=r(pZr,"qdqbert"),pZr.forEach(t),Q9o=r(K5e," \u2014 "),_D=n(K5e,"A",{href:!0});var _Zr=s(_D);H9o=r(_Zr,"QDQBertForTokenClassification"),_Zr.forEach(t),U9o=r(K5e," (QDQBert model)"),K5e.forEach(t),J9o=i(q),Qb=n(q,"LI",{});var Z5e=s(Qb);fse=n(Z5e,"STRONG",{});var uZr=s(fse);Y9o=r(uZr,"rembert"),uZr.forEach(t),K9o=r(Z5e," \u2014 "),uD=n(Z5e,"A",{href:!0});var bZr=s(uD);Z9o=r(bZr,"RemBertForTokenClassification"),bZr.forEach(t),eBo=r(Z5e," (RemBERT model)"),Z5e.forEach(t),oBo=i(q),Hb=n(q,"LI",{});var eye=s(Hb);mse=n(eye,"STRONG",{});var vZr=s(mse);rBo=r(vZr,"roberta"),vZr.forEach(t),tBo=r(eye," \u2014 "),bD=n(eye,"A",{href:!0});var TZr=s(bD);aBo=r(TZr,"RobertaForTokenClassification"),TZr.forEach(t),nBo=r(eye," (RoBERTa model)"),eye.forEach(t),sBo=i(q),Ub=n(q,"LI",{});var oye=s(Ub);gse=n(oye,"STRONG",{});var FZr=s(gse);lBo=r(FZr,"roformer"),FZr.forEach(t),iBo=r(oye," \u2014 "),vD=n(oye,"A",{href:!0});var CZr=s(vD);dBo=r(CZr,"RoFormerForTokenClassification"),CZr.forEach(t),cBo=r(oye," (RoFormer model)"),oye.forEach(t),fBo=i(q),Jb=n(q,"LI",{});var rye=s(Jb);hse=n(rye,"STRONG",{});var MZr=s(hse);mBo=r(MZr,"squeezebert"),MZr.forEach(t),gBo=r(rye," \u2014 "),TD=n(rye,"A",{href:!0});var EZr=s(TD);hBo=r(EZr,"SqueezeBertForTokenClassification"),EZr.forEach(t),pBo=r(rye," (SqueezeBERT model)"),rye.forEach(t),_Bo=i(q),Yb=n(q,"LI",{});var tye=s(Yb);pse=n(tye,"STRONG",{});var yZr=s(pse);uBo=r(yZr,"xlm"),yZr.forEach(t),bBo=r(tye," \u2014 "),FD=n(tye,"A",{href:!0});var wZr=s(FD);vBo=r(wZr,"XLMForTokenClassification"),wZr.forEach(t),TBo=r(tye," (XLM model)"),tye.forEach(t),FBo=i(q),Kb=n(q,"LI",{});var aye=s(Kb);_se=n(aye,"STRONG",{});var AZr=s(_se);CBo=r(AZr,"xlm-roberta"),AZr.forEach(t),MBo=r(aye," \u2014 "),CD=n(aye,"A",{href:!0});var LZr=s(CD);EBo=r(LZr,"XLMRobertaForTokenClassification"),LZr.forEach(t),yBo=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),wBo=i(q),Zb=n(q,"LI",{});var nye=s(Zb);use=n(nye,"STRONG",{});var BZr=s(use);ABo=r(BZr,"xlm-roberta-xl"),BZr.forEach(t),LBo=r(nye," \u2014 "),MD=n(nye,"A",{href:!0});var xZr=s(MD);BBo=r(xZr,"XLMRobertaXLForTokenClassification"),xZr.forEach(t),xBo=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),kBo=i(q),ev=n(q,"LI",{});var sye=s(ev);bse=n(sye,"STRONG",{});var kZr=s(bse);RBo=r(kZr,"xlnet"),kZr.forEach(t),SBo=r(sye," \u2014 "),ED=n(sye,"A",{href:!0});var RZr=s(ED);PBo=r(RZr,"XLNetForTokenClassification"),RZr.forEach(t),$Bo=r(sye," (XLNet model)"),sye.forEach(t),IBo=i(q),ov=n(q,"LI",{});var lye=s(ov);vse=n(lye,"STRONG",{});var SZr=s(vse);jBo=r(SZr,"yoso"),SZr.forEach(t),DBo=r(lye," \u2014 "),yD=n(lye,"A",{href:!0});var PZr=s(yD);NBo=r(PZr,"YosoForTokenClassification"),PZr.forEach(t),qBo=r(lye," (YOSO model)"),lye.forEach(t),q.forEach(t),OBo=i(Ht),rv=n(Ht,"P",{});var iye=s(rv);GBo=r(iye,"The model is set in evaluation mode by default using "),Tse=n(iye,"CODE",{});var $Zr=s(Tse);XBo=r($Zr,"model.eval()"),$Zr.forEach(t),VBo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=n(iye,"CODE",{});var IZr=s(Fse);zBo=r(IZr,"model.train()"),IZr.forEach(t),iye.forEach(t),WBo=i(Ht),Cse=n(Ht,"P",{});var jZr=s(Cse);QBo=r(jZr,"Examples:"),jZr.forEach(t),HBo=i(Ht),m(D3.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Uxe=i(c),Ed=n(c,"H2",{class:!0});var aSe=s(Ed);tv=n(aSe,"A",{id:!0,class:!0,href:!0});var DZr=s(tv);Mse=n(DZr,"SPAN",{});var NZr=s(Mse);m(N3.$$.fragment,NZr),NZr.forEach(t),DZr.forEach(t),UBo=i(aSe),Ese=n(aSe,"SPAN",{});var qZr=s(Ese);JBo=r(qZr,"AutoModelForQuestionAnswering"),qZr.forEach(t),aSe.forEach(t),Jxe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(q3.$$.fragment,fl),YBo=i(fl),yd=n(fl,"P",{});var Uz=s(yd);KBo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yse=n(Uz,"CODE",{});var OZr=s(yse);ZBo=r(OZr,"from_pretrained()"),OZr.forEach(t),exo=r(Uz,"class method or the "),wse=n(Uz,"CODE",{});var GZr=s(wse);oxo=r(GZr,"from_config()"),GZr.forEach(t),rxo=r(Uz,`class
method.`),Uz.forEach(t),txo=i(fl),O3=n(fl,"P",{});var nSe=s(O3);axo=r(nSe,"This class cannot be instantiated directly using "),Ase=n(nSe,"CODE",{});var XZr=s(Ase);nxo=r(XZr,"__init__()"),XZr.forEach(t),sxo=r(nSe," (throws an error)."),nSe.forEach(t),lxo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(G3.$$.fragment,ml),ixo=i(ml),Lse=n(ml,"P",{});var VZr=s(Lse);dxo=r(VZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VZr.forEach(t),cxo=i(ml),wd=n(ml,"P",{});var Jz=s(wd);fxo=r(Jz,`Note:
Loading a model from its configuration file does `),Bse=n(Jz,"STRONG",{});var zZr=s(Bse);mxo=r(zZr,"not"),zZr.forEach(t),gxo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=n(Jz,"CODE",{});var WZr=s(xse);hxo=r(WZr,"from_pretrained()"),WZr.forEach(t),pxo=r(Jz,"to load the model weights."),Jz.forEach(t),_xo=i(ml),kse=n(ml,"P",{});var QZr=s(kse);uxo=r(QZr,"Examples:"),QZr.forEach(t),bxo=i(ml),m(X3.$$.fragment,ml),ml.forEach(t),vxo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(V3.$$.fragment,Ut),Txo=i(Ut),Rse=n(Ut,"P",{});var HZr=s(Rse);Fxo=r(HZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HZr.forEach(t),Cxo=i(Ut),Za=n(Ut,"P",{});var d4=s(Za);Mxo=r(d4,"The model class to instantiate is selected based on the "),Sse=n(d4,"CODE",{});var UZr=s(Sse);Exo=r(UZr,"model_type"),UZr.forEach(t),yxo=r(d4,` property of the config object (either
passed as an argument or loaded from `),Pse=n(d4,"CODE",{});var JZr=s(Pse);wxo=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),Axo=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(d4,"CODE",{});var YZr=s($se);Lxo=r(YZr,"pretrained_model_name_or_path"),YZr.forEach(t),Bxo=r(d4,":"),d4.forEach(t),xxo=i(Ut),R=n(Ut,"UL",{});var P=s(R);av=n(P,"LI",{});var dye=s(av);Ise=n(dye,"STRONG",{});var KZr=s(Ise);kxo=r(KZr,"albert"),KZr.forEach(t),Rxo=r(dye," \u2014 "),wD=n(dye,"A",{href:!0});var ZZr=s(wD);Sxo=r(ZZr,"AlbertForQuestionAnswering"),ZZr.forEach(t),Pxo=r(dye," (ALBERT model)"),dye.forEach(t),$xo=i(P),nv=n(P,"LI",{});var cye=s(nv);jse=n(cye,"STRONG",{});var eet=s(jse);Ixo=r(eet,"bart"),eet.forEach(t),jxo=r(cye," \u2014 "),AD=n(cye,"A",{href:!0});var oet=s(AD);Dxo=r(oet,"BartForQuestionAnswering"),oet.forEach(t),Nxo=r(cye," (BART model)"),cye.forEach(t),qxo=i(P),sv=n(P,"LI",{});var fye=s(sv);Dse=n(fye,"STRONG",{});var ret=s(Dse);Oxo=r(ret,"bert"),ret.forEach(t),Gxo=r(fye," \u2014 "),LD=n(fye,"A",{href:!0});var tet=s(LD);Xxo=r(tet,"BertForQuestionAnswering"),tet.forEach(t),Vxo=r(fye," (BERT model)"),fye.forEach(t),zxo=i(P),lv=n(P,"LI",{});var mye=s(lv);Nse=n(mye,"STRONG",{});var aet=s(Nse);Wxo=r(aet,"big_bird"),aet.forEach(t),Qxo=r(mye," \u2014 "),BD=n(mye,"A",{href:!0});var net=s(BD);Hxo=r(net,"BigBirdForQuestionAnswering"),net.forEach(t),Uxo=r(mye," (BigBird model)"),mye.forEach(t),Jxo=i(P),iv=n(P,"LI",{});var gye=s(iv);qse=n(gye,"STRONG",{});var set=s(qse);Yxo=r(set,"bigbird_pegasus"),set.forEach(t),Kxo=r(gye," \u2014 "),xD=n(gye,"A",{href:!0});var iet=s(xD);Zxo=r(iet,"BigBirdPegasusForQuestionAnswering"),iet.forEach(t),eko=r(gye," (BigBirdPegasus model)"),gye.forEach(t),oko=i(P),dv=n(P,"LI",{});var hye=s(dv);Ose=n(hye,"STRONG",{});var det=s(Ose);rko=r(det,"camembert"),det.forEach(t),tko=r(hye," \u2014 "),kD=n(hye,"A",{href:!0});var cet=s(kD);ako=r(cet,"CamembertForQuestionAnswering"),cet.forEach(t),nko=r(hye," (CamemBERT model)"),hye.forEach(t),sko=i(P),cv=n(P,"LI",{});var pye=s(cv);Gse=n(pye,"STRONG",{});var fet=s(Gse);lko=r(fet,"canine"),fet.forEach(t),iko=r(pye," \u2014 "),RD=n(pye,"A",{href:!0});var met=s(RD);dko=r(met,"CanineForQuestionAnswering"),met.forEach(t),cko=r(pye," (Canine model)"),pye.forEach(t),fko=i(P),fv=n(P,"LI",{});var _ye=s(fv);Xse=n(_ye,"STRONG",{});var get=s(Xse);mko=r(get,"convbert"),get.forEach(t),gko=r(_ye," \u2014 "),SD=n(_ye,"A",{href:!0});var het=s(SD);hko=r(het,"ConvBertForQuestionAnswering"),het.forEach(t),pko=r(_ye," (ConvBERT model)"),_ye.forEach(t),_ko=i(P),mv=n(P,"LI",{});var uye=s(mv);Vse=n(uye,"STRONG",{});var pet=s(Vse);uko=r(pet,"data2vec-text"),pet.forEach(t),bko=r(uye," \u2014 "),PD=n(uye,"A",{href:!0});var _et=s(PD);vko=r(_et,"Data2VecTextForQuestionAnswering"),_et.forEach(t),Tko=r(uye," (Data2VecText model)"),uye.forEach(t),Fko=i(P),gv=n(P,"LI",{});var bye=s(gv);zse=n(bye,"STRONG",{});var uet=s(zse);Cko=r(uet,"deberta"),uet.forEach(t),Mko=r(bye," \u2014 "),$D=n(bye,"A",{href:!0});var bet=s($D);Eko=r(bet,"DebertaForQuestionAnswering"),bet.forEach(t),yko=r(bye," (DeBERTa model)"),bye.forEach(t),wko=i(P),hv=n(P,"LI",{});var vye=s(hv);Wse=n(vye,"STRONG",{});var vet=s(Wse);Ako=r(vet,"deberta-v2"),vet.forEach(t),Lko=r(vye," \u2014 "),ID=n(vye,"A",{href:!0});var Tet=s(ID);Bko=r(Tet,"DebertaV2ForQuestionAnswering"),Tet.forEach(t),xko=r(vye," (DeBERTa-v2 model)"),vye.forEach(t),kko=i(P),pv=n(P,"LI",{});var Tye=s(pv);Qse=n(Tye,"STRONG",{});var Fet=s(Qse);Rko=r(Fet,"distilbert"),Fet.forEach(t),Sko=r(Tye," \u2014 "),jD=n(Tye,"A",{href:!0});var Cet=s(jD);Pko=r(Cet,"DistilBertForQuestionAnswering"),Cet.forEach(t),$ko=r(Tye," (DistilBERT model)"),Tye.forEach(t),Iko=i(P),_v=n(P,"LI",{});var Fye=s(_v);Hse=n(Fye,"STRONG",{});var Met=s(Hse);jko=r(Met,"electra"),Met.forEach(t),Dko=r(Fye," \u2014 "),DD=n(Fye,"A",{href:!0});var Eet=s(DD);Nko=r(Eet,"ElectraForQuestionAnswering"),Eet.forEach(t),qko=r(Fye," (ELECTRA model)"),Fye.forEach(t),Oko=i(P),uv=n(P,"LI",{});var Cye=s(uv);Use=n(Cye,"STRONG",{});var yet=s(Use);Gko=r(yet,"flaubert"),yet.forEach(t),Xko=r(Cye," \u2014 "),ND=n(Cye,"A",{href:!0});var wet=s(ND);Vko=r(wet,"FlaubertForQuestionAnsweringSimple"),wet.forEach(t),zko=r(Cye," (FlauBERT model)"),Cye.forEach(t),Wko=i(P),bv=n(P,"LI",{});var Mye=s(bv);Jse=n(Mye,"STRONG",{});var Aet=s(Jse);Qko=r(Aet,"fnet"),Aet.forEach(t),Hko=r(Mye," \u2014 "),qD=n(Mye,"A",{href:!0});var Let=s(qD);Uko=r(Let,"FNetForQuestionAnswering"),Let.forEach(t),Jko=r(Mye," (FNet model)"),Mye.forEach(t),Yko=i(P),vv=n(P,"LI",{});var Eye=s(vv);Yse=n(Eye,"STRONG",{});var Bet=s(Yse);Kko=r(Bet,"funnel"),Bet.forEach(t),Zko=r(Eye," \u2014 "),OD=n(Eye,"A",{href:!0});var xet=s(OD);eRo=r(xet,"FunnelForQuestionAnswering"),xet.forEach(t),oRo=r(Eye," (Funnel Transformer model)"),Eye.forEach(t),rRo=i(P),Tv=n(P,"LI",{});var yye=s(Tv);Kse=n(yye,"STRONG",{});var ket=s(Kse);tRo=r(ket,"gptj"),ket.forEach(t),aRo=r(yye," \u2014 "),GD=n(yye,"A",{href:!0});var Ret=s(GD);nRo=r(Ret,"GPTJForQuestionAnswering"),Ret.forEach(t),sRo=r(yye," (GPT-J model)"),yye.forEach(t),lRo=i(P),Fv=n(P,"LI",{});var wye=s(Fv);Zse=n(wye,"STRONG",{});var Set=s(Zse);iRo=r(Set,"ibert"),Set.forEach(t),dRo=r(wye," \u2014 "),XD=n(wye,"A",{href:!0});var Pet=s(XD);cRo=r(Pet,"IBertForQuestionAnswering"),Pet.forEach(t),fRo=r(wye," (I-BERT model)"),wye.forEach(t),mRo=i(P),Cv=n(P,"LI",{});var Aye=s(Cv);ele=n(Aye,"STRONG",{});var $et=s(ele);gRo=r($et,"layoutlmv2"),$et.forEach(t),hRo=r(Aye," \u2014 "),VD=n(Aye,"A",{href:!0});var Iet=s(VD);pRo=r(Iet,"LayoutLMv2ForQuestionAnswering"),Iet.forEach(t),_Ro=r(Aye," (LayoutLMv2 model)"),Aye.forEach(t),uRo=i(P),Mv=n(P,"LI",{});var Lye=s(Mv);ole=n(Lye,"STRONG",{});var jet=s(ole);bRo=r(jet,"led"),jet.forEach(t),vRo=r(Lye," \u2014 "),zD=n(Lye,"A",{href:!0});var Det=s(zD);TRo=r(Det,"LEDForQuestionAnswering"),Det.forEach(t),FRo=r(Lye," (LED model)"),Lye.forEach(t),CRo=i(P),Ev=n(P,"LI",{});var Bye=s(Ev);rle=n(Bye,"STRONG",{});var Net=s(rle);MRo=r(Net,"longformer"),Net.forEach(t),ERo=r(Bye," \u2014 "),WD=n(Bye,"A",{href:!0});var qet=s(WD);yRo=r(qet,"LongformerForQuestionAnswering"),qet.forEach(t),wRo=r(Bye," (Longformer model)"),Bye.forEach(t),ARo=i(P),yv=n(P,"LI",{});var xye=s(yv);tle=n(xye,"STRONG",{});var Oet=s(tle);LRo=r(Oet,"lxmert"),Oet.forEach(t),BRo=r(xye," \u2014 "),QD=n(xye,"A",{href:!0});var Get=s(QD);xRo=r(Get,"LxmertForQuestionAnswering"),Get.forEach(t),kRo=r(xye," (LXMERT model)"),xye.forEach(t),RRo=i(P),wv=n(P,"LI",{});var kye=s(wv);ale=n(kye,"STRONG",{});var Xet=s(ale);SRo=r(Xet,"mbart"),Xet.forEach(t),PRo=r(kye," \u2014 "),HD=n(kye,"A",{href:!0});var Vet=s(HD);$Ro=r(Vet,"MBartForQuestionAnswering"),Vet.forEach(t),IRo=r(kye," (mBART model)"),kye.forEach(t),jRo=i(P),Av=n(P,"LI",{});var Rye=s(Av);nle=n(Rye,"STRONG",{});var zet=s(nle);DRo=r(zet,"megatron-bert"),zet.forEach(t),NRo=r(Rye," \u2014 "),UD=n(Rye,"A",{href:!0});var Wet=s(UD);qRo=r(Wet,"MegatronBertForQuestionAnswering"),Wet.forEach(t),ORo=r(Rye," (MegatronBert model)"),Rye.forEach(t),GRo=i(P),Lv=n(P,"LI",{});var Sye=s(Lv);sle=n(Sye,"STRONG",{});var Qet=s(sle);XRo=r(Qet,"mobilebert"),Qet.forEach(t),VRo=r(Sye," \u2014 "),JD=n(Sye,"A",{href:!0});var Het=s(JD);zRo=r(Het,"MobileBertForQuestionAnswering"),Het.forEach(t),WRo=r(Sye," (MobileBERT model)"),Sye.forEach(t),QRo=i(P),Bv=n(P,"LI",{});var Pye=s(Bv);lle=n(Pye,"STRONG",{});var Uet=s(lle);HRo=r(Uet,"mpnet"),Uet.forEach(t),URo=r(Pye," \u2014 "),YD=n(Pye,"A",{href:!0});var Jet=s(YD);JRo=r(Jet,"MPNetForQuestionAnswering"),Jet.forEach(t),YRo=r(Pye," (MPNet model)"),Pye.forEach(t),KRo=i(P),xv=n(P,"LI",{});var $ye=s(xv);ile=n($ye,"STRONG",{});var Yet=s(ile);ZRo=r(Yet,"nystromformer"),Yet.forEach(t),eSo=r($ye," \u2014 "),KD=n($ye,"A",{href:!0});var Ket=s(KD);oSo=r(Ket,"NystromformerForQuestionAnswering"),Ket.forEach(t),rSo=r($ye," (Nystromformer model)"),$ye.forEach(t),tSo=i(P),kv=n(P,"LI",{});var Iye=s(kv);dle=n(Iye,"STRONG",{});var Zet=s(dle);aSo=r(Zet,"qdqbert"),Zet.forEach(t),nSo=r(Iye," \u2014 "),ZD=n(Iye,"A",{href:!0});var eot=s(ZD);sSo=r(eot,"QDQBertForQuestionAnswering"),eot.forEach(t),lSo=r(Iye," (QDQBert model)"),Iye.forEach(t),iSo=i(P),Rv=n(P,"LI",{});var jye=s(Rv);cle=n(jye,"STRONG",{});var oot=s(cle);dSo=r(oot,"reformer"),oot.forEach(t),cSo=r(jye," \u2014 "),eN=n(jye,"A",{href:!0});var rot=s(eN);fSo=r(rot,"ReformerForQuestionAnswering"),rot.forEach(t),mSo=r(jye," (Reformer model)"),jye.forEach(t),gSo=i(P),Sv=n(P,"LI",{});var Dye=s(Sv);fle=n(Dye,"STRONG",{});var tot=s(fle);hSo=r(tot,"rembert"),tot.forEach(t),pSo=r(Dye," \u2014 "),oN=n(Dye,"A",{href:!0});var aot=s(oN);_So=r(aot,"RemBertForQuestionAnswering"),aot.forEach(t),uSo=r(Dye," (RemBERT model)"),Dye.forEach(t),bSo=i(P),Pv=n(P,"LI",{});var Nye=s(Pv);mle=n(Nye,"STRONG",{});var not=s(mle);vSo=r(not,"roberta"),not.forEach(t),TSo=r(Nye," \u2014 "),rN=n(Nye,"A",{href:!0});var sot=s(rN);FSo=r(sot,"RobertaForQuestionAnswering"),sot.forEach(t),CSo=r(Nye," (RoBERTa model)"),Nye.forEach(t),MSo=i(P),$v=n(P,"LI",{});var qye=s($v);gle=n(qye,"STRONG",{});var lot=s(gle);ESo=r(lot,"roformer"),lot.forEach(t),ySo=r(qye," \u2014 "),tN=n(qye,"A",{href:!0});var iot=s(tN);wSo=r(iot,"RoFormerForQuestionAnswering"),iot.forEach(t),ASo=r(qye," (RoFormer model)"),qye.forEach(t),LSo=i(P),Iv=n(P,"LI",{});var Oye=s(Iv);hle=n(Oye,"STRONG",{});var dot=s(hle);BSo=r(dot,"splinter"),dot.forEach(t),xSo=r(Oye," \u2014 "),aN=n(Oye,"A",{href:!0});var cot=s(aN);kSo=r(cot,"SplinterForQuestionAnswering"),cot.forEach(t),RSo=r(Oye," (Splinter model)"),Oye.forEach(t),SSo=i(P),jv=n(P,"LI",{});var Gye=s(jv);ple=n(Gye,"STRONG",{});var fot=s(ple);PSo=r(fot,"squeezebert"),fot.forEach(t),$So=r(Gye," \u2014 "),nN=n(Gye,"A",{href:!0});var mot=s(nN);ISo=r(mot,"SqueezeBertForQuestionAnswering"),mot.forEach(t),jSo=r(Gye," (SqueezeBERT model)"),Gye.forEach(t),DSo=i(P),Dv=n(P,"LI",{});var Xye=s(Dv);_le=n(Xye,"STRONG",{});var got=s(_le);NSo=r(got,"xlm"),got.forEach(t),qSo=r(Xye," \u2014 "),sN=n(Xye,"A",{href:!0});var hot=s(sN);OSo=r(hot,"XLMForQuestionAnsweringSimple"),hot.forEach(t),GSo=r(Xye," (XLM model)"),Xye.forEach(t),XSo=i(P),Nv=n(P,"LI",{});var Vye=s(Nv);ule=n(Vye,"STRONG",{});var pot=s(ule);VSo=r(pot,"xlm-roberta"),pot.forEach(t),zSo=r(Vye," \u2014 "),lN=n(Vye,"A",{href:!0});var _ot=s(lN);WSo=r(_ot,"XLMRobertaForQuestionAnswering"),_ot.forEach(t),QSo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),HSo=i(P),qv=n(P,"LI",{});var zye=s(qv);ble=n(zye,"STRONG",{});var uot=s(ble);USo=r(uot,"xlm-roberta-xl"),uot.forEach(t),JSo=r(zye," \u2014 "),iN=n(zye,"A",{href:!0});var bot=s(iN);YSo=r(bot,"XLMRobertaXLForQuestionAnswering"),bot.forEach(t),KSo=r(zye," (XLM-RoBERTa-XL model)"),zye.forEach(t),ZSo=i(P),Ov=n(P,"LI",{});var Wye=s(Ov);vle=n(Wye,"STRONG",{});var vot=s(vle);ePo=r(vot,"xlnet"),vot.forEach(t),oPo=r(Wye," \u2014 "),dN=n(Wye,"A",{href:!0});var Tot=s(dN);rPo=r(Tot,"XLNetForQuestionAnsweringSimple"),Tot.forEach(t),tPo=r(Wye," (XLNet model)"),Wye.forEach(t),aPo=i(P),Gv=n(P,"LI",{});var Qye=s(Gv);Tle=n(Qye,"STRONG",{});var Fot=s(Tle);nPo=r(Fot,"yoso"),Fot.forEach(t),sPo=r(Qye," \u2014 "),cN=n(Qye,"A",{href:!0});var Cot=s(cN);lPo=r(Cot,"YosoForQuestionAnswering"),Cot.forEach(t),iPo=r(Qye," (YOSO model)"),Qye.forEach(t),P.forEach(t),dPo=i(Ut),Xv=n(Ut,"P",{});var Hye=s(Xv);cPo=r(Hye,"The model is set in evaluation mode by default using "),Fle=n(Hye,"CODE",{});var Mot=s(Fle);fPo=r(Mot,"model.eval()"),Mot.forEach(t),mPo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=n(Hye,"CODE",{});var Eot=s(Cle);gPo=r(Eot,"model.train()"),Eot.forEach(t),Hye.forEach(t),hPo=i(Ut),Mle=n(Ut,"P",{});var yot=s(Mle);pPo=r(yot,"Examples:"),yot.forEach(t),_Po=i(Ut),m(z3.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Yxe=i(c),Ad=n(c,"H2",{class:!0});var sSe=s(Ad);Vv=n(sSe,"A",{id:!0,class:!0,href:!0});var wot=s(Vv);Ele=n(wot,"SPAN",{});var Aot=s(Ele);m(W3.$$.fragment,Aot),Aot.forEach(t),wot.forEach(t),uPo=i(sSe),yle=n(sSe,"SPAN",{});var Lot=s(yle);bPo=r(Lot,"AutoModelForTableQuestionAnswering"),Lot.forEach(t),sSe.forEach(t),Kxe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(Q3.$$.fragment,gl),vPo=i(gl),Ld=n(gl,"P",{});var Yz=s(Ld);TPo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wle=n(Yz,"CODE",{});var Bot=s(wle);FPo=r(Bot,"from_pretrained()"),Bot.forEach(t),CPo=r(Yz,"class method or the "),Ale=n(Yz,"CODE",{});var xot=s(Ale);MPo=r(xot,"from_config()"),xot.forEach(t),EPo=r(Yz,`class
method.`),Yz.forEach(t),yPo=i(gl),H3=n(gl,"P",{});var lSe=s(H3);wPo=r(lSe,"This class cannot be instantiated directly using "),Lle=n(lSe,"CODE",{});var kot=s(Lle);APo=r(kot,"__init__()"),kot.forEach(t),LPo=r(lSe," (throws an error)."),lSe.forEach(t),BPo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(U3.$$.fragment,hl),xPo=i(hl),Ble=n(hl,"P",{});var Rot=s(Ble);kPo=r(Rot,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rot.forEach(t),RPo=i(hl),Bd=n(hl,"P",{});var Kz=s(Bd);SPo=r(Kz,`Note:
Loading a model from its configuration file does `),xle=n(Kz,"STRONG",{});var Sot=s(xle);PPo=r(Sot,"not"),Sot.forEach(t),$Po=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=n(Kz,"CODE",{});var Pot=s(kle);IPo=r(Pot,"from_pretrained()"),Pot.forEach(t),jPo=r(Kz,"to load the model weights."),Kz.forEach(t),DPo=i(hl),Rle=n(hl,"P",{});var $ot=s(Rle);NPo=r($ot,"Examples:"),$ot.forEach(t),qPo=i(hl),m(J3.$$.fragment,hl),hl.forEach(t),OPo=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(Y3.$$.fragment,Jt),GPo=i(Jt),Sle=n(Jt,"P",{});var Iot=s(Sle);XPo=r(Iot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iot.forEach(t),VPo=i(Jt),en=n(Jt,"P",{});var c4=s(en);zPo=r(c4,"The model class to instantiate is selected based on the "),Ple=n(c4,"CODE",{});var jot=s(Ple);WPo=r(jot,"model_type"),jot.forEach(t),QPo=r(c4,` property of the config object (either
passed as an argument or loaded from `),$le=n(c4,"CODE",{});var Dot=s($le);HPo=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),UPo=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(c4,"CODE",{});var Not=s(Ile);JPo=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),YPo=r(c4,":"),c4.forEach(t),KPo=i(Jt),jle=n(Jt,"UL",{});var qot=s(jle);zv=n(qot,"LI",{});var Uye=s(zv);Dle=n(Uye,"STRONG",{});var Oot=s(Dle);ZPo=r(Oot,"tapas"),Oot.forEach(t),e$o=r(Uye," \u2014 "),fN=n(Uye,"A",{href:!0});var Got=s(fN);o$o=r(Got,"TapasForQuestionAnswering"),Got.forEach(t),r$o=r(Uye," (TAPAS model)"),Uye.forEach(t),qot.forEach(t),t$o=i(Jt),Wv=n(Jt,"P",{});var Jye=s(Wv);a$o=r(Jye,"The model is set in evaluation mode by default using "),Nle=n(Jye,"CODE",{});var Xot=s(Nle);n$o=r(Xot,"model.eval()"),Xot.forEach(t),s$o=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(Jye,"CODE",{});var Vot=s(qle);l$o=r(Vot,"model.train()"),Vot.forEach(t),Jye.forEach(t),i$o=i(Jt),Ole=n(Jt,"P",{});var zot=s(Ole);d$o=r(zot,"Examples:"),zot.forEach(t),c$o=i(Jt),m(K3.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Zxe=i(c),xd=n(c,"H2",{class:!0});var iSe=s(xd);Qv=n(iSe,"A",{id:!0,class:!0,href:!0});var Wot=s(Qv);Gle=n(Wot,"SPAN",{});var Qot=s(Gle);m(Z3.$$.fragment,Qot),Qot.forEach(t),Wot.forEach(t),f$o=i(iSe),Xle=n(iSe,"SPAN",{});var Hot=s(Xle);m$o=r(Hot,"AutoModelForImageClassification"),Hot.forEach(t),iSe.forEach(t),eke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(e5.$$.fragment,pl),g$o=i(pl),kd=n(pl,"P",{});var Zz=s(kd);h$o=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vle=n(Zz,"CODE",{});var Uot=s(Vle);p$o=r(Uot,"from_pretrained()"),Uot.forEach(t),_$o=r(Zz,"class method or the "),zle=n(Zz,"CODE",{});var Jot=s(zle);u$o=r(Jot,"from_config()"),Jot.forEach(t),b$o=r(Zz,`class
method.`),Zz.forEach(t),v$o=i(pl),o5=n(pl,"P",{});var dSe=s(o5);T$o=r(dSe,"This class cannot be instantiated directly using "),Wle=n(dSe,"CODE",{});var Yot=s(Wle);F$o=r(Yot,"__init__()"),Yot.forEach(t),C$o=r(dSe," (throws an error)."),dSe.forEach(t),M$o=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(r5.$$.fragment,_l),E$o=i(_l),Qle=n(_l,"P",{});var Kot=s(Qle);y$o=r(Kot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kot.forEach(t),w$o=i(_l),Rd=n(_l,"P",{});var eW=s(Rd);A$o=r(eW,`Note:
Loading a model from its configuration file does `),Hle=n(eW,"STRONG",{});var Zot=s(Hle);L$o=r(Zot,"not"),Zot.forEach(t),B$o=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ule=n(eW,"CODE",{});var ert=s(Ule);x$o=r(ert,"from_pretrained()"),ert.forEach(t),k$o=r(eW,"to load the model weights."),eW.forEach(t),R$o=i(_l),Jle=n(_l,"P",{});var ort=s(Jle);S$o=r(ort,"Examples:"),ort.forEach(t),P$o=i(_l),m(t5.$$.fragment,_l),_l.forEach(t),$$o=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(a5.$$.fragment,Yt),I$o=i(Yt),Yle=n(Yt,"P",{});var rrt=s(Yle);j$o=r(rrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rrt.forEach(t),D$o=i(Yt),on=n(Yt,"P",{});var f4=s(on);N$o=r(f4,"The model class to instantiate is selected based on the "),Kle=n(f4,"CODE",{});var trt=s(Kle);q$o=r(trt,"model_type"),trt.forEach(t),O$o=r(f4,` property of the config object (either
passed as an argument or loaded from `),Zle=n(f4,"CODE",{});var art=s(Zle);G$o=r(art,"pretrained_model_name_or_path"),art.forEach(t),X$o=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=n(f4,"CODE",{});var nrt=s(eie);V$o=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),z$o=r(f4,":"),f4.forEach(t),W$o=i(Yt),pe=n(Yt,"UL",{});var Me=s(pe);Hv=n(Me,"LI",{});var Yye=s(Hv);oie=n(Yye,"STRONG",{});var srt=s(oie);Q$o=r(srt,"beit"),srt.forEach(t),H$o=r(Yye," \u2014 "),mN=n(Yye,"A",{href:!0});var lrt=s(mN);U$o=r(lrt,"BeitForImageClassification"),lrt.forEach(t),J$o=r(Yye," (BEiT model)"),Yye.forEach(t),Y$o=i(Me),Uv=n(Me,"LI",{});var Kye=s(Uv);rie=n(Kye,"STRONG",{});var irt=s(rie);K$o=r(irt,"convnext"),irt.forEach(t),Z$o=r(Kye," \u2014 "),gN=n(Kye,"A",{href:!0});var drt=s(gN);eIo=r(drt,"ConvNextForImageClassification"),drt.forEach(t),oIo=r(Kye," (ConvNext model)"),Kye.forEach(t),rIo=i(Me),qs=n(Me,"LI",{});var O8=s(qs);tie=n(O8,"STRONG",{});var crt=s(tie);tIo=r(crt,"deit"),crt.forEach(t),aIo=r(O8," \u2014 "),hN=n(O8,"A",{href:!0});var frt=s(hN);nIo=r(frt,"DeiTForImageClassification"),frt.forEach(t),sIo=r(O8," or "),pN=n(O8,"A",{href:!0});var mrt=s(pN);lIo=r(mrt,"DeiTForImageClassificationWithTeacher"),mrt.forEach(t),iIo=r(O8," (DeiT model)"),O8.forEach(t),dIo=i(Me),Jv=n(Me,"LI",{});var Zye=s(Jv);aie=n(Zye,"STRONG",{});var grt=s(aie);cIo=r(grt,"imagegpt"),grt.forEach(t),fIo=r(Zye," \u2014 "),_N=n(Zye,"A",{href:!0});var hrt=s(_N);mIo=r(hrt,"ImageGPTForImageClassification"),hrt.forEach(t),gIo=r(Zye," (ImageGPT model)"),Zye.forEach(t),hIo=i(Me),ma=n(Me,"LI",{});var $f=s(ma);nie=n($f,"STRONG",{});var prt=s(nie);pIo=r(prt,"perceiver"),prt.forEach(t),_Io=r($f," \u2014 "),uN=n($f,"A",{href:!0});var _rt=s(uN);uIo=r(_rt,"PerceiverForImageClassificationLearned"),_rt.forEach(t),bIo=r($f," or "),bN=n($f,"A",{href:!0});var urt=s(bN);vIo=r(urt,"PerceiverForImageClassificationFourier"),urt.forEach(t),TIo=r($f," or "),vN=n($f,"A",{href:!0});var brt=s(vN);FIo=r(brt,"PerceiverForImageClassificationConvProcessing"),brt.forEach(t),CIo=r($f," (Perceiver model)"),$f.forEach(t),MIo=i(Me),Yv=n(Me,"LI",{});var ewe=s(Yv);sie=n(ewe,"STRONG",{});var vrt=s(sie);EIo=r(vrt,"poolformer"),vrt.forEach(t),yIo=r(ewe," \u2014 "),TN=n(ewe,"A",{href:!0});var Trt=s(TN);wIo=r(Trt,"PoolFormerForImageClassification"),Trt.forEach(t),AIo=r(ewe," (PoolFormer model)"),ewe.forEach(t),LIo=i(Me),Kv=n(Me,"LI",{});var owe=s(Kv);lie=n(owe,"STRONG",{});var Frt=s(lie);BIo=r(Frt,"segformer"),Frt.forEach(t),xIo=r(owe," \u2014 "),FN=n(owe,"A",{href:!0});var Crt=s(FN);kIo=r(Crt,"SegformerForImageClassification"),Crt.forEach(t),RIo=r(owe," (SegFormer model)"),owe.forEach(t),SIo=i(Me),Zv=n(Me,"LI",{});var rwe=s(Zv);iie=n(rwe,"STRONG",{});var Mrt=s(iie);PIo=r(Mrt,"swin"),Mrt.forEach(t),$Io=r(rwe," \u2014 "),CN=n(rwe,"A",{href:!0});var Ert=s(CN);IIo=r(Ert,"SwinForImageClassification"),Ert.forEach(t),jIo=r(rwe," (Swin model)"),rwe.forEach(t),DIo=i(Me),e6=n(Me,"LI",{});var twe=s(e6);die=n(twe,"STRONG",{});var yrt=s(die);NIo=r(yrt,"van"),yrt.forEach(t),qIo=r(twe," \u2014 "),MN=n(twe,"A",{href:!0});var wrt=s(MN);OIo=r(wrt,"VanForImageClassification"),wrt.forEach(t),GIo=r(twe," (VAN model)"),twe.forEach(t),XIo=i(Me),o6=n(Me,"LI",{});var awe=s(o6);cie=n(awe,"STRONG",{});var Art=s(cie);VIo=r(Art,"vit"),Art.forEach(t),zIo=r(awe," \u2014 "),EN=n(awe,"A",{href:!0});var Lrt=s(EN);WIo=r(Lrt,"ViTForImageClassification"),Lrt.forEach(t),QIo=r(awe," (ViT model)"),awe.forEach(t),Me.forEach(t),HIo=i(Yt),r6=n(Yt,"P",{});var nwe=s(r6);UIo=r(nwe,"The model is set in evaluation mode by default using "),fie=n(nwe,"CODE",{});var Brt=s(fie);JIo=r(Brt,"model.eval()"),Brt.forEach(t),YIo=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(nwe,"CODE",{});var xrt=s(mie);KIo=r(xrt,"model.train()"),xrt.forEach(t),nwe.forEach(t),ZIo=i(Yt),gie=n(Yt,"P",{});var krt=s(gie);ejo=r(krt,"Examples:"),krt.forEach(t),ojo=i(Yt),m(n5.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),oke=i(c),Sd=n(c,"H2",{class:!0});var cSe=s(Sd);t6=n(cSe,"A",{id:!0,class:!0,href:!0});var Rrt=s(t6);hie=n(Rrt,"SPAN",{});var Srt=s(hie);m(s5.$$.fragment,Srt),Srt.forEach(t),Rrt.forEach(t),rjo=i(cSe),pie=n(cSe,"SPAN",{});var Prt=s(pie);tjo=r(Prt,"AutoModelForVision2Seq"),Prt.forEach(t),cSe.forEach(t),rke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(l5.$$.fragment,ul),ajo=i(ul),Pd=n(ul,"P",{});var oW=s(Pd);njo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_ie=n(oW,"CODE",{});var $rt=s(_ie);sjo=r($rt,"from_pretrained()"),$rt.forEach(t),ljo=r(oW,"class method or the "),uie=n(oW,"CODE",{});var Irt=s(uie);ijo=r(Irt,"from_config()"),Irt.forEach(t),djo=r(oW,`class
method.`),oW.forEach(t),cjo=i(ul),i5=n(ul,"P",{});var fSe=s(i5);fjo=r(fSe,"This class cannot be instantiated directly using "),bie=n(fSe,"CODE",{});var jrt=s(bie);mjo=r(jrt,"__init__()"),jrt.forEach(t),gjo=r(fSe," (throws an error)."),fSe.forEach(t),hjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(d5.$$.fragment,bl),pjo=i(bl),vie=n(bl,"P",{});var Drt=s(vie);_jo=r(Drt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Drt.forEach(t),ujo=i(bl),$d=n(bl,"P",{});var rW=s($d);bjo=r(rW,`Note:
Loading a model from its configuration file does `),Tie=n(rW,"STRONG",{});var Nrt=s(Tie);vjo=r(Nrt,"not"),Nrt.forEach(t),Tjo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fie=n(rW,"CODE",{});var qrt=s(Fie);Fjo=r(qrt,"from_pretrained()"),qrt.forEach(t),Cjo=r(rW,"to load the model weights."),rW.forEach(t),Mjo=i(bl),Cie=n(bl,"P",{});var Ort=s(Cie);Ejo=r(Ort,"Examples:"),Ort.forEach(t),yjo=i(bl),m(c5.$$.fragment,bl),bl.forEach(t),wjo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(f5.$$.fragment,Kt),Ajo=i(Kt),Mie=n(Kt,"P",{});var Grt=s(Mie);Ljo=r(Grt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Grt.forEach(t),Bjo=i(Kt),rn=n(Kt,"P",{});var m4=s(rn);xjo=r(m4,"The model class to instantiate is selected based on the "),Eie=n(m4,"CODE",{});var Xrt=s(Eie);kjo=r(Xrt,"model_type"),Xrt.forEach(t),Rjo=r(m4,` property of the config object (either
passed as an argument or loaded from `),yie=n(m4,"CODE",{});var Vrt=s(yie);Sjo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),Pjo=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=n(m4,"CODE",{});var zrt=s(wie);$jo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),Ijo=r(m4,":"),m4.forEach(t),jjo=i(Kt),Aie=n(Kt,"UL",{});var Wrt=s(Aie);a6=n(Wrt,"LI",{});var swe=s(a6);Lie=n(swe,"STRONG",{});var Qrt=s(Lie);Djo=r(Qrt,"vision-encoder-decoder"),Qrt.forEach(t),Njo=r(swe," \u2014 "),yN=n(swe,"A",{href:!0});var Hrt=s(yN);qjo=r(Hrt,"VisionEncoderDecoderModel"),Hrt.forEach(t),Ojo=r(swe," (Vision Encoder decoder model)"),swe.forEach(t),Wrt.forEach(t),Gjo=i(Kt),n6=n(Kt,"P",{});var lwe=s(n6);Xjo=r(lwe,"The model is set in evaluation mode by default using "),Bie=n(lwe,"CODE",{});var Urt=s(Bie);Vjo=r(Urt,"model.eval()"),Urt.forEach(t),zjo=r(lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(lwe,"CODE",{});var Jrt=s(xie);Wjo=r(Jrt,"model.train()"),Jrt.forEach(t),lwe.forEach(t),Qjo=i(Kt),kie=n(Kt,"P",{});var Yrt=s(kie);Hjo=r(Yrt,"Examples:"),Yrt.forEach(t),Ujo=i(Kt),m(m5.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),tke=i(c),Id=n(c,"H2",{class:!0});var mSe=s(Id);s6=n(mSe,"A",{id:!0,class:!0,href:!0});var Krt=s(s6);Rie=n(Krt,"SPAN",{});var Zrt=s(Rie);m(g5.$$.fragment,Zrt),Zrt.forEach(t),Krt.forEach(t),Jjo=i(mSe),Sie=n(mSe,"SPAN",{});var ett=s(Sie);Yjo=r(ett,"AutoModelForAudioClassification"),ett.forEach(t),mSe.forEach(t),ake=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(h5.$$.fragment,vl),Kjo=i(vl),jd=n(vl,"P",{});var tW=s(jd);Zjo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Pie=n(tW,"CODE",{});var ott=s(Pie);eDo=r(ott,"from_pretrained()"),ott.forEach(t),oDo=r(tW,"class method or the "),$ie=n(tW,"CODE",{});var rtt=s($ie);rDo=r(rtt,"from_config()"),rtt.forEach(t),tDo=r(tW,`class
method.`),tW.forEach(t),aDo=i(vl),p5=n(vl,"P",{});var gSe=s(p5);nDo=r(gSe,"This class cannot be instantiated directly using "),Iie=n(gSe,"CODE",{});var ttt=s(Iie);sDo=r(ttt,"__init__()"),ttt.forEach(t),lDo=r(gSe," (throws an error)."),gSe.forEach(t),iDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(_5.$$.fragment,Tl),dDo=i(Tl),jie=n(Tl,"P",{});var att=s(jie);cDo=r(att,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),att.forEach(t),fDo=i(Tl),Dd=n(Tl,"P",{});var aW=s(Dd);mDo=r(aW,`Note:
Loading a model from its configuration file does `),Die=n(aW,"STRONG",{});var ntt=s(Die);gDo=r(ntt,"not"),ntt.forEach(t),hDo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=n(aW,"CODE",{});var stt=s(Nie);pDo=r(stt,"from_pretrained()"),stt.forEach(t),_Do=r(aW,"to load the model weights."),aW.forEach(t),uDo=i(Tl),qie=n(Tl,"P",{});var ltt=s(qie);bDo=r(ltt,"Examples:"),ltt.forEach(t),vDo=i(Tl),m(u5.$$.fragment,Tl),Tl.forEach(t),TDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(b5.$$.fragment,Zt),FDo=i(Zt),Oie=n(Zt,"P",{});var itt=s(Oie);CDo=r(itt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),itt.forEach(t),MDo=i(Zt),tn=n(Zt,"P",{});var g4=s(tn);EDo=r(g4,"The model class to instantiate is selected based on the "),Gie=n(g4,"CODE",{});var dtt=s(Gie);yDo=r(dtt,"model_type"),dtt.forEach(t),wDo=r(g4,` property of the config object (either
passed as an argument or loaded from `),Xie=n(g4,"CODE",{});var ctt=s(Xie);ADo=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),LDo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(g4,"CODE",{});var ftt=s(Vie);BDo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),xDo=r(g4,":"),g4.forEach(t),kDo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);l6=n(qo,"LI",{});var iwe=s(l6);zie=n(iwe,"STRONG",{});var mtt=s(zie);RDo=r(mtt,"data2vec-audio"),mtt.forEach(t),SDo=r(iwe," \u2014 "),wN=n(iwe,"A",{href:!0});var gtt=s(wN);PDo=r(gtt,"Data2VecAudioForSequenceClassification"),gtt.forEach(t),$Do=r(iwe," (Data2VecAudio model)"),iwe.forEach(t),IDo=i(qo),i6=n(qo,"LI",{});var dwe=s(i6);Wie=n(dwe,"STRONG",{});var htt=s(Wie);jDo=r(htt,"hubert"),htt.forEach(t),DDo=r(dwe," \u2014 "),AN=n(dwe,"A",{href:!0});var ptt=s(AN);NDo=r(ptt,"HubertForSequenceClassification"),ptt.forEach(t),qDo=r(dwe," (Hubert model)"),dwe.forEach(t),ODo=i(qo),d6=n(qo,"LI",{});var cwe=s(d6);Qie=n(cwe,"STRONG",{});var _tt=s(Qie);GDo=r(_tt,"sew"),_tt.forEach(t),XDo=r(cwe," \u2014 "),LN=n(cwe,"A",{href:!0});var utt=s(LN);VDo=r(utt,"SEWForSequenceClassification"),utt.forEach(t),zDo=r(cwe," (SEW model)"),cwe.forEach(t),WDo=i(qo),c6=n(qo,"LI",{});var fwe=s(c6);Hie=n(fwe,"STRONG",{});var btt=s(Hie);QDo=r(btt,"sew-d"),btt.forEach(t),HDo=r(fwe," \u2014 "),BN=n(fwe,"A",{href:!0});var vtt=s(BN);UDo=r(vtt,"SEWDForSequenceClassification"),vtt.forEach(t),JDo=r(fwe," (SEW-D model)"),fwe.forEach(t),YDo=i(qo),f6=n(qo,"LI",{});var mwe=s(f6);Uie=n(mwe,"STRONG",{});var Ttt=s(Uie);KDo=r(Ttt,"unispeech"),Ttt.forEach(t),ZDo=r(mwe," \u2014 "),xN=n(mwe,"A",{href:!0});var Ftt=s(xN);eNo=r(Ftt,"UniSpeechForSequenceClassification"),Ftt.forEach(t),oNo=r(mwe," (UniSpeech model)"),mwe.forEach(t),rNo=i(qo),m6=n(qo,"LI",{});var gwe=s(m6);Jie=n(gwe,"STRONG",{});var Ctt=s(Jie);tNo=r(Ctt,"unispeech-sat"),Ctt.forEach(t),aNo=r(gwe," \u2014 "),kN=n(gwe,"A",{href:!0});var Mtt=s(kN);nNo=r(Mtt,"UniSpeechSatForSequenceClassification"),Mtt.forEach(t),sNo=r(gwe," (UniSpeechSat model)"),gwe.forEach(t),lNo=i(qo),g6=n(qo,"LI",{});var hwe=s(g6);Yie=n(hwe,"STRONG",{});var Ett=s(Yie);iNo=r(Ett,"wav2vec2"),Ett.forEach(t),dNo=r(hwe," \u2014 "),RN=n(hwe,"A",{href:!0});var ytt=s(RN);cNo=r(ytt,"Wav2Vec2ForSequenceClassification"),ytt.forEach(t),fNo=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),mNo=i(qo),h6=n(qo,"LI",{});var pwe=s(h6);Kie=n(pwe,"STRONG",{});var wtt=s(Kie);gNo=r(wtt,"wavlm"),wtt.forEach(t),hNo=r(pwe," \u2014 "),SN=n(pwe,"A",{href:!0});var Att=s(SN);pNo=r(Att,"WavLMForSequenceClassification"),Att.forEach(t),_No=r(pwe," (WavLM model)"),pwe.forEach(t),qo.forEach(t),uNo=i(Zt),p6=n(Zt,"P",{});var _we=s(p6);bNo=r(_we,"The model is set in evaluation mode by default using "),Zie=n(_we,"CODE",{});var Ltt=s(Zie);vNo=r(Ltt,"model.eval()"),Ltt.forEach(t),TNo=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n(_we,"CODE",{});var Btt=s(ede);FNo=r(Btt,"model.train()"),Btt.forEach(t),_we.forEach(t),CNo=i(Zt),ode=n(Zt,"P",{});var xtt=s(ode);MNo=r(xtt,"Examples:"),xtt.forEach(t),ENo=i(Zt),m(v5.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),nke=i(c),Nd=n(c,"H2",{class:!0});var hSe=s(Nd);_6=n(hSe,"A",{id:!0,class:!0,href:!0});var ktt=s(_6);rde=n(ktt,"SPAN",{});var Rtt=s(rde);m(T5.$$.fragment,Rtt),Rtt.forEach(t),ktt.forEach(t),yNo=i(hSe),tde=n(hSe,"SPAN",{});var Stt=s(tde);wNo=r(Stt,"AutoModelForAudioFrameClassification"),Stt.forEach(t),hSe.forEach(t),ske=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(F5.$$.fragment,Fl),ANo=i(Fl),qd=n(Fl,"P",{});var nW=s(qd);LNo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ade=n(nW,"CODE",{});var Ptt=s(ade);BNo=r(Ptt,"from_pretrained()"),Ptt.forEach(t),xNo=r(nW,"class method or the "),nde=n(nW,"CODE",{});var $tt=s(nde);kNo=r($tt,"from_config()"),$tt.forEach(t),RNo=r(nW,`class
method.`),nW.forEach(t),SNo=i(Fl),C5=n(Fl,"P",{});var pSe=s(C5);PNo=r(pSe,"This class cannot be instantiated directly using "),sde=n(pSe,"CODE",{});var Itt=s(sde);$No=r(Itt,"__init__()"),Itt.forEach(t),INo=r(pSe," (throws an error)."),pSe.forEach(t),jNo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(M5.$$.fragment,Cl),DNo=i(Cl),lde=n(Cl,"P",{});var jtt=s(lde);NNo=r(jtt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jtt.forEach(t),qNo=i(Cl),Od=n(Cl,"P",{});var sW=s(Od);ONo=r(sW,`Note:
Loading a model from its configuration file does `),ide=n(sW,"STRONG",{});var Dtt=s(ide);GNo=r(Dtt,"not"),Dtt.forEach(t),XNo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dde=n(sW,"CODE",{});var Ntt=s(dde);VNo=r(Ntt,"from_pretrained()"),Ntt.forEach(t),zNo=r(sW,"to load the model weights."),sW.forEach(t),WNo=i(Cl),cde=n(Cl,"P",{});var qtt=s(cde);QNo=r(qtt,"Examples:"),qtt.forEach(t),HNo=i(Cl),m(E5.$$.fragment,Cl),Cl.forEach(t),UNo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(y5.$$.fragment,ea),JNo=i(ea),fde=n(ea,"P",{});var Ott=s(fde);YNo=r(Ott,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ott.forEach(t),KNo=i(ea),an=n(ea,"P",{});var h4=s(an);ZNo=r(h4,"The model class to instantiate is selected based on the "),mde=n(h4,"CODE",{});var Gtt=s(mde);eqo=r(Gtt,"model_type"),Gtt.forEach(t),oqo=r(h4,` property of the config object (either
passed as an argument or loaded from `),gde=n(h4,"CODE",{});var Xtt=s(gde);rqo=r(Xtt,"pretrained_model_name_or_path"),Xtt.forEach(t),tqo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(h4,"CODE",{});var Vtt=s(hde);aqo=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),nqo=r(h4,":"),h4.forEach(t),sqo=i(ea),nn=n(ea,"UL",{});var p4=s(nn);u6=n(p4,"LI",{});var uwe=s(u6);pde=n(uwe,"STRONG",{});var ztt=s(pde);lqo=r(ztt,"data2vec-audio"),ztt.forEach(t),iqo=r(uwe," \u2014 "),PN=n(uwe,"A",{href:!0});var Wtt=s(PN);dqo=r(Wtt,"Data2VecAudioForAudioFrameClassification"),Wtt.forEach(t),cqo=r(uwe," (Data2VecAudio model)"),uwe.forEach(t),fqo=i(p4),b6=n(p4,"LI",{});var bwe=s(b6);_de=n(bwe,"STRONG",{});var Qtt=s(_de);mqo=r(Qtt,"unispeech-sat"),Qtt.forEach(t),gqo=r(bwe," \u2014 "),$N=n(bwe,"A",{href:!0});var Htt=s($N);hqo=r(Htt,"UniSpeechSatForAudioFrameClassification"),Htt.forEach(t),pqo=r(bwe," (UniSpeechSat model)"),bwe.forEach(t),_qo=i(p4),v6=n(p4,"LI",{});var vwe=s(v6);ude=n(vwe,"STRONG",{});var Utt=s(ude);uqo=r(Utt,"wav2vec2"),Utt.forEach(t),bqo=r(vwe," \u2014 "),IN=n(vwe,"A",{href:!0});var Jtt=s(IN);vqo=r(Jtt,"Wav2Vec2ForAudioFrameClassification"),Jtt.forEach(t),Tqo=r(vwe," (Wav2Vec2 model)"),vwe.forEach(t),Fqo=i(p4),T6=n(p4,"LI",{});var Twe=s(T6);bde=n(Twe,"STRONG",{});var Ytt=s(bde);Cqo=r(Ytt,"wavlm"),Ytt.forEach(t),Mqo=r(Twe," \u2014 "),jN=n(Twe,"A",{href:!0});var Ktt=s(jN);Eqo=r(Ktt,"WavLMForAudioFrameClassification"),Ktt.forEach(t),yqo=r(Twe," (WavLM model)"),Twe.forEach(t),p4.forEach(t),wqo=i(ea),F6=n(ea,"P",{});var Fwe=s(F6);Aqo=r(Fwe,"The model is set in evaluation mode by default using "),vde=n(Fwe,"CODE",{});var Ztt=s(vde);Lqo=r(Ztt,"model.eval()"),Ztt.forEach(t),Bqo=r(Fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(Fwe,"CODE",{});var eat=s(Tde);xqo=r(eat,"model.train()"),eat.forEach(t),Fwe.forEach(t),kqo=i(ea),Fde=n(ea,"P",{});var oat=s(Fde);Rqo=r(oat,"Examples:"),oat.forEach(t),Sqo=i(ea),m(w5.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),lke=i(c),Gd=n(c,"H2",{class:!0});var _Se=s(Gd);C6=n(_Se,"A",{id:!0,class:!0,href:!0});var rat=s(C6);Cde=n(rat,"SPAN",{});var tat=s(Cde);m(A5.$$.fragment,tat),tat.forEach(t),rat.forEach(t),Pqo=i(_Se),Mde=n(_Se,"SPAN",{});var aat=s(Mde);$qo=r(aat,"AutoModelForCTC"),aat.forEach(t),_Se.forEach(t),ike=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(L5.$$.fragment,Ml),Iqo=i(Ml),Xd=n(Ml,"P",{});var lW=s(Xd);jqo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Ede=n(lW,"CODE",{});var nat=s(Ede);Dqo=r(nat,"from_pretrained()"),nat.forEach(t),Nqo=r(lW,"class method or the "),yde=n(lW,"CODE",{});var sat=s(yde);qqo=r(sat,"from_config()"),sat.forEach(t),Oqo=r(lW,`class
method.`),lW.forEach(t),Gqo=i(Ml),B5=n(Ml,"P",{});var uSe=s(B5);Xqo=r(uSe,"This class cannot be instantiated directly using "),wde=n(uSe,"CODE",{});var lat=s(wde);Vqo=r(lat,"__init__()"),lat.forEach(t),zqo=r(uSe," (throws an error)."),uSe.forEach(t),Wqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(x5.$$.fragment,El),Qqo=i(El),Ade=n(El,"P",{});var iat=s(Ade);Hqo=r(iat,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),iat.forEach(t),Uqo=i(El),Vd=n(El,"P",{});var iW=s(Vd);Jqo=r(iW,`Note:
Loading a model from its configuration file does `),Lde=n(iW,"STRONG",{});var dat=s(Lde);Yqo=r(dat,"not"),dat.forEach(t),Kqo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=n(iW,"CODE",{});var cat=s(Bde);Zqo=r(cat,"from_pretrained()"),cat.forEach(t),eOo=r(iW,"to load the model weights."),iW.forEach(t),oOo=i(El),xde=n(El,"P",{});var fat=s(xde);rOo=r(fat,"Examples:"),fat.forEach(t),tOo=i(El),m(k5.$$.fragment,El),El.forEach(t),aOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(R5.$$.fragment,oa),nOo=i(oa),kde=n(oa,"P",{});var mat=s(kde);sOo=r(mat,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mat.forEach(t),lOo=i(oa),sn=n(oa,"P",{});var _4=s(sn);iOo=r(_4,"The model class to instantiate is selected based on the "),Rde=n(_4,"CODE",{});var gat=s(Rde);dOo=r(gat,"model_type"),gat.forEach(t),cOo=r(_4,` property of the config object (either
passed as an argument or loaded from `),Sde=n(_4,"CODE",{});var hat=s(Sde);fOo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),mOo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=n(_4,"CODE",{});var pat=s(Pde);gOo=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),hOo=r(_4,":"),_4.forEach(t),pOo=i(oa),Re=n(oa,"UL",{});var Oo=s(Re);M6=n(Oo,"LI",{});var Cwe=s(M6);$de=n(Cwe,"STRONG",{});var _at=s($de);_Oo=r(_at,"data2vec-audio"),_at.forEach(t),uOo=r(Cwe," \u2014 "),DN=n(Cwe,"A",{href:!0});var uat=s(DN);bOo=r(uat,"Data2VecAudioForCTC"),uat.forEach(t),vOo=r(Cwe," (Data2VecAudio model)"),Cwe.forEach(t),TOo=i(Oo),E6=n(Oo,"LI",{});var Mwe=s(E6);Ide=n(Mwe,"STRONG",{});var bat=s(Ide);FOo=r(bat,"hubert"),bat.forEach(t),COo=r(Mwe," \u2014 "),NN=n(Mwe,"A",{href:!0});var vat=s(NN);MOo=r(vat,"HubertForCTC"),vat.forEach(t),EOo=r(Mwe," (Hubert model)"),Mwe.forEach(t),yOo=i(Oo),y6=n(Oo,"LI",{});var Ewe=s(y6);jde=n(Ewe,"STRONG",{});var Tat=s(jde);wOo=r(Tat,"sew"),Tat.forEach(t),AOo=r(Ewe," \u2014 "),qN=n(Ewe,"A",{href:!0});var Fat=s(qN);LOo=r(Fat,"SEWForCTC"),Fat.forEach(t),BOo=r(Ewe," (SEW model)"),Ewe.forEach(t),xOo=i(Oo),w6=n(Oo,"LI",{});var ywe=s(w6);Dde=n(ywe,"STRONG",{});var Cat=s(Dde);kOo=r(Cat,"sew-d"),Cat.forEach(t),ROo=r(ywe," \u2014 "),ON=n(ywe,"A",{href:!0});var Mat=s(ON);SOo=r(Mat,"SEWDForCTC"),Mat.forEach(t),POo=r(ywe," (SEW-D model)"),ywe.forEach(t),$Oo=i(Oo),A6=n(Oo,"LI",{});var wwe=s(A6);Nde=n(wwe,"STRONG",{});var Eat=s(Nde);IOo=r(Eat,"unispeech"),Eat.forEach(t),jOo=r(wwe," \u2014 "),GN=n(wwe,"A",{href:!0});var yat=s(GN);DOo=r(yat,"UniSpeechForCTC"),yat.forEach(t),NOo=r(wwe," (UniSpeech model)"),wwe.forEach(t),qOo=i(Oo),L6=n(Oo,"LI",{});var Awe=s(L6);qde=n(Awe,"STRONG",{});var wat=s(qde);OOo=r(wat,"unispeech-sat"),wat.forEach(t),GOo=r(Awe," \u2014 "),XN=n(Awe,"A",{href:!0});var Aat=s(XN);XOo=r(Aat,"UniSpeechSatForCTC"),Aat.forEach(t),VOo=r(Awe," (UniSpeechSat model)"),Awe.forEach(t),zOo=i(Oo),B6=n(Oo,"LI",{});var Lwe=s(B6);Ode=n(Lwe,"STRONG",{});var Lat=s(Ode);WOo=r(Lat,"wav2vec2"),Lat.forEach(t),QOo=r(Lwe," \u2014 "),VN=n(Lwe,"A",{href:!0});var Bat=s(VN);HOo=r(Bat,"Wav2Vec2ForCTC"),Bat.forEach(t),UOo=r(Lwe," (Wav2Vec2 model)"),Lwe.forEach(t),JOo=i(Oo),x6=n(Oo,"LI",{});var Bwe=s(x6);Gde=n(Bwe,"STRONG",{});var xat=s(Gde);YOo=r(xat,"wavlm"),xat.forEach(t),KOo=r(Bwe," \u2014 "),zN=n(Bwe,"A",{href:!0});var kat=s(zN);ZOo=r(kat,"WavLMForCTC"),kat.forEach(t),eGo=r(Bwe," (WavLM model)"),Bwe.forEach(t),Oo.forEach(t),oGo=i(oa),k6=n(oa,"P",{});var xwe=s(k6);rGo=r(xwe,"The model is set in evaluation mode by default using "),Xde=n(xwe,"CODE",{});var Rat=s(Xde);tGo=r(Rat,"model.eval()"),Rat.forEach(t),aGo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=n(xwe,"CODE",{});var Sat=s(Vde);nGo=r(Sat,"model.train()"),Sat.forEach(t),xwe.forEach(t),sGo=i(oa),zde=n(oa,"P",{});var Pat=s(zde);lGo=r(Pat,"Examples:"),Pat.forEach(t),iGo=i(oa),m(S5.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),dke=i(c),zd=n(c,"H2",{class:!0});var bSe=s(zd);R6=n(bSe,"A",{id:!0,class:!0,href:!0});var $at=s(R6);Wde=n($at,"SPAN",{});var Iat=s(Wde);m(P5.$$.fragment,Iat),Iat.forEach(t),$at.forEach(t),dGo=i(bSe),Qde=n(bSe,"SPAN",{});var jat=s(Qde);cGo=r(jat,"AutoModelForSpeechSeq2Seq"),jat.forEach(t),bSe.forEach(t),cke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m($5.$$.fragment,yl),fGo=i(yl),Wd=n(yl,"P",{});var dW=s(Wd);mGo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hde=n(dW,"CODE",{});var Dat=s(Hde);gGo=r(Dat,"from_pretrained()"),Dat.forEach(t),hGo=r(dW,"class method or the "),Ude=n(dW,"CODE",{});var Nat=s(Ude);pGo=r(Nat,"from_config()"),Nat.forEach(t),_Go=r(dW,`class
method.`),dW.forEach(t),uGo=i(yl),I5=n(yl,"P",{});var vSe=s(I5);bGo=r(vSe,"This class cannot be instantiated directly using "),Jde=n(vSe,"CODE",{});var qat=s(Jde);vGo=r(qat,"__init__()"),qat.forEach(t),TGo=r(vSe," (throws an error)."),vSe.forEach(t),FGo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(j5.$$.fragment,wl),CGo=i(wl),Yde=n(wl,"P",{});var Oat=s(Yde);MGo=r(Oat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oat.forEach(t),EGo=i(wl),Qd=n(wl,"P",{});var cW=s(Qd);yGo=r(cW,`Note:
Loading a model from its configuration file does `),Kde=n(cW,"STRONG",{});var Gat=s(Kde);wGo=r(Gat,"not"),Gat.forEach(t),AGo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=n(cW,"CODE",{});var Xat=s(Zde);LGo=r(Xat,"from_pretrained()"),Xat.forEach(t),BGo=r(cW,"to load the model weights."),cW.forEach(t),xGo=i(wl),ece=n(wl,"P",{});var Vat=s(ece);kGo=r(Vat,"Examples:"),Vat.forEach(t),RGo=i(wl),m(D5.$$.fragment,wl),wl.forEach(t),SGo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(N5.$$.fragment,ra),PGo=i(ra),oce=n(ra,"P",{});var zat=s(oce);$Go=r(zat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zat.forEach(t),IGo=i(ra),ln=n(ra,"P",{});var u4=s(ln);jGo=r(u4,"The model class to instantiate is selected based on the "),rce=n(u4,"CODE",{});var Wat=s(rce);DGo=r(Wat,"model_type"),Wat.forEach(t),NGo=r(u4,` property of the config object (either
passed as an argument or loaded from `),tce=n(u4,"CODE",{});var Qat=s(tce);qGo=r(Qat,"pretrained_model_name_or_path"),Qat.forEach(t),OGo=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(u4,"CODE",{});var Hat=s(ace);GGo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),XGo=r(u4,":"),u4.forEach(t),VGo=i(ra),q5=n(ra,"UL",{});var TSe=s(q5);S6=n(TSe,"LI",{});var kwe=s(S6);nce=n(kwe,"STRONG",{});var Uat=s(nce);zGo=r(Uat,"speech-encoder-decoder"),Uat.forEach(t),WGo=r(kwe," \u2014 "),WN=n(kwe,"A",{href:!0});var Jat=s(WN);QGo=r(Jat,"SpeechEncoderDecoderModel"),Jat.forEach(t),HGo=r(kwe," (Speech Encoder decoder model)"),kwe.forEach(t),UGo=i(TSe),P6=n(TSe,"LI",{});var Rwe=s(P6);sce=n(Rwe,"STRONG",{});var Yat=s(sce);JGo=r(Yat,"speech_to_text"),Yat.forEach(t),YGo=r(Rwe," \u2014 "),QN=n(Rwe,"A",{href:!0});var Kat=s(QN);KGo=r(Kat,"Speech2TextForConditionalGeneration"),Kat.forEach(t),ZGo=r(Rwe," (Speech2Text model)"),Rwe.forEach(t),TSe.forEach(t),eXo=i(ra),$6=n(ra,"P",{});var Swe=s($6);oXo=r(Swe,"The model is set in evaluation mode by default using "),lce=n(Swe,"CODE",{});var Zat=s(lce);rXo=r(Zat,"model.eval()"),Zat.forEach(t),tXo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=n(Swe,"CODE",{});var ent=s(ice);aXo=r(ent,"model.train()"),ent.forEach(t),Swe.forEach(t),nXo=i(ra),dce=n(ra,"P",{});var ont=s(dce);sXo=r(ont,"Examples:"),ont.forEach(t),lXo=i(ra),m(O5.$$.fragment,ra),ra.forEach(t),yl.forEach(t),fke=i(c),Hd=n(c,"H2",{class:!0});var FSe=s(Hd);I6=n(FSe,"A",{id:!0,class:!0,href:!0});var rnt=s(I6);cce=n(rnt,"SPAN",{});var tnt=s(cce);m(G5.$$.fragment,tnt),tnt.forEach(t),rnt.forEach(t),iXo=i(FSe),fce=n(FSe,"SPAN",{});var ant=s(fce);dXo=r(ant,"AutoModelForAudioXVector"),ant.forEach(t),FSe.forEach(t),mke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(X5.$$.fragment,Al),cXo=i(Al),Ud=n(Al,"P",{});var fW=s(Ud);fXo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mce=n(fW,"CODE",{});var nnt=s(mce);mXo=r(nnt,"from_pretrained()"),nnt.forEach(t),gXo=r(fW,"class method or the "),gce=n(fW,"CODE",{});var snt=s(gce);hXo=r(snt,"from_config()"),snt.forEach(t),pXo=r(fW,`class
method.`),fW.forEach(t),_Xo=i(Al),V5=n(Al,"P",{});var CSe=s(V5);uXo=r(CSe,"This class cannot be instantiated directly using "),hce=n(CSe,"CODE",{});var lnt=s(hce);bXo=r(lnt,"__init__()"),lnt.forEach(t),vXo=r(CSe," (throws an error)."),CSe.forEach(t),TXo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(z5.$$.fragment,Ll),FXo=i(Ll),pce=n(Ll,"P",{});var int=s(pce);CXo=r(int,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),int.forEach(t),MXo=i(Ll),Jd=n(Ll,"P",{});var mW=s(Jd);EXo=r(mW,`Note:
Loading a model from its configuration file does `),_ce=n(mW,"STRONG",{});var dnt=s(_ce);yXo=r(dnt,"not"),dnt.forEach(t),wXo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uce=n(mW,"CODE",{});var cnt=s(uce);AXo=r(cnt,"from_pretrained()"),cnt.forEach(t),LXo=r(mW,"to load the model weights."),mW.forEach(t),BXo=i(Ll),bce=n(Ll,"P",{});var fnt=s(bce);xXo=r(fnt,"Examples:"),fnt.forEach(t),kXo=i(Ll),m(W5.$$.fragment,Ll),Ll.forEach(t),RXo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(Q5.$$.fragment,ta),SXo=i(ta),vce=n(ta,"P",{});var mnt=s(vce);PXo=r(mnt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mnt.forEach(t),$Xo=i(ta),dn=n(ta,"P",{});var b4=s(dn);IXo=r(b4,"The model class to instantiate is selected based on the "),Tce=n(b4,"CODE",{});var gnt=s(Tce);jXo=r(gnt,"model_type"),gnt.forEach(t),DXo=r(b4,` property of the config object (either
passed as an argument or loaded from `),Fce=n(b4,"CODE",{});var hnt=s(Fce);NXo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),qXo=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(b4,"CODE",{});var pnt=s(Cce);OXo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),GXo=r(b4,":"),b4.forEach(t),XXo=i(ta),cn=n(ta,"UL",{});var v4=s(cn);j6=n(v4,"LI",{});var Pwe=s(j6);Mce=n(Pwe,"STRONG",{});var _nt=s(Mce);VXo=r(_nt,"data2vec-audio"),_nt.forEach(t),zXo=r(Pwe," \u2014 "),HN=n(Pwe,"A",{href:!0});var unt=s(HN);WXo=r(unt,"Data2VecAudioForXVector"),unt.forEach(t),QXo=r(Pwe," (Data2VecAudio model)"),Pwe.forEach(t),HXo=i(v4),D6=n(v4,"LI",{});var $we=s(D6);Ece=n($we,"STRONG",{});var bnt=s(Ece);UXo=r(bnt,"unispeech-sat"),bnt.forEach(t),JXo=r($we," \u2014 "),UN=n($we,"A",{href:!0});var vnt=s(UN);YXo=r(vnt,"UniSpeechSatForXVector"),vnt.forEach(t),KXo=r($we," (UniSpeechSat model)"),$we.forEach(t),ZXo=i(v4),N6=n(v4,"LI",{});var Iwe=s(N6);yce=n(Iwe,"STRONG",{});var Tnt=s(yce);eVo=r(Tnt,"wav2vec2"),Tnt.forEach(t),oVo=r(Iwe," \u2014 "),JN=n(Iwe,"A",{href:!0});var Fnt=s(JN);rVo=r(Fnt,"Wav2Vec2ForXVector"),Fnt.forEach(t),tVo=r(Iwe," (Wav2Vec2 model)"),Iwe.forEach(t),aVo=i(v4),q6=n(v4,"LI",{});var jwe=s(q6);wce=n(jwe,"STRONG",{});var Cnt=s(wce);nVo=r(Cnt,"wavlm"),Cnt.forEach(t),sVo=r(jwe," \u2014 "),YN=n(jwe,"A",{href:!0});var Mnt=s(YN);lVo=r(Mnt,"WavLMForXVector"),Mnt.forEach(t),iVo=r(jwe," (WavLM model)"),jwe.forEach(t),v4.forEach(t),dVo=i(ta),O6=n(ta,"P",{});var Dwe=s(O6);cVo=r(Dwe,"The model is set in evaluation mode by default using "),Ace=n(Dwe,"CODE",{});var Ent=s(Ace);fVo=r(Ent,"model.eval()"),Ent.forEach(t),mVo=r(Dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(Dwe,"CODE",{});var ynt=s(Lce);gVo=r(ynt,"model.train()"),ynt.forEach(t),Dwe.forEach(t),hVo=i(ta),Bce=n(ta,"P",{});var wnt=s(Bce);pVo=r(wnt,"Examples:"),wnt.forEach(t),_Vo=i(ta),m(H5.$$.fragment,ta),ta.forEach(t),Al.forEach(t),gke=i(c),Yd=n(c,"H2",{class:!0});var MSe=s(Yd);G6=n(MSe,"A",{id:!0,class:!0,href:!0});var Ant=s(G6);xce=n(Ant,"SPAN",{});var Lnt=s(xce);m(U5.$$.fragment,Lnt),Lnt.forEach(t),Ant.forEach(t),uVo=i(MSe),kce=n(MSe,"SPAN",{});var Bnt=s(kce);bVo=r(Bnt,"AutoModelForMaskedImageModeling"),Bnt.forEach(t),MSe.forEach(t),hke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(J5.$$.fragment,Bl),vVo=i(Bl),Kd=n(Bl,"P",{});var gW=s(Kd);TVo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rce=n(gW,"CODE",{});var xnt=s(Rce);FVo=r(xnt,"from_pretrained()"),xnt.forEach(t),CVo=r(gW,"class method or the "),Sce=n(gW,"CODE",{});var knt=s(Sce);MVo=r(knt,"from_config()"),knt.forEach(t),EVo=r(gW,`class
method.`),gW.forEach(t),yVo=i(Bl),Y5=n(Bl,"P",{});var ESe=s(Y5);wVo=r(ESe,"This class cannot be instantiated directly using "),Pce=n(ESe,"CODE",{});var Rnt=s(Pce);AVo=r(Rnt,"__init__()"),Rnt.forEach(t),LVo=r(ESe," (throws an error)."),ESe.forEach(t),BVo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(K5.$$.fragment,xl),xVo=i(xl),$ce=n(xl,"P",{});var Snt=s($ce);kVo=r(Snt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Snt.forEach(t),RVo=i(xl),Zd=n(xl,"P",{});var hW=s(Zd);SVo=r(hW,`Note:
Loading a model from its configuration file does `),Ice=n(hW,"STRONG",{});var Pnt=s(Ice);PVo=r(Pnt,"not"),Pnt.forEach(t),$Vo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jce=n(hW,"CODE",{});var $nt=s(jce);IVo=r($nt,"from_pretrained()"),$nt.forEach(t),jVo=r(hW,"to load the model weights."),hW.forEach(t),DVo=i(xl),Dce=n(xl,"P",{});var Int=s(Dce);NVo=r(Int,"Examples:"),Int.forEach(t),qVo=i(xl),m(Z5.$$.fragment,xl),xl.forEach(t),OVo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(ey.$$.fragment,aa),GVo=i(aa),Nce=n(aa,"P",{});var jnt=s(Nce);XVo=r(jnt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jnt.forEach(t),VVo=i(aa),fn=n(aa,"P",{});var T4=s(fn);zVo=r(T4,"The model class to instantiate is selected based on the "),qce=n(T4,"CODE",{});var Dnt=s(qce);WVo=r(Dnt,"model_type"),Dnt.forEach(t),QVo=r(T4,` property of the config object (either
passed as an argument or loaded from `),Oce=n(T4,"CODE",{});var Nnt=s(Oce);HVo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),UVo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=n(T4,"CODE",{});var qnt=s(Gce);JVo=r(qnt,"pretrained_model_name_or_path"),qnt.forEach(t),YVo=r(T4,":"),T4.forEach(t),KVo=i(aa),ec=n(aa,"UL",{});var pW=s(ec);X6=n(pW,"LI",{});var Nwe=s(X6);Xce=n(Nwe,"STRONG",{});var Ont=s(Xce);ZVo=r(Ont,"deit"),Ont.forEach(t),ezo=r(Nwe," \u2014 "),KN=n(Nwe,"A",{href:!0});var Gnt=s(KN);ozo=r(Gnt,"DeiTForMaskedImageModeling"),Gnt.forEach(t),rzo=r(Nwe," (DeiT model)"),Nwe.forEach(t),tzo=i(pW),V6=n(pW,"LI",{});var qwe=s(V6);Vce=n(qwe,"STRONG",{});var Xnt=s(Vce);azo=r(Xnt,"swin"),Xnt.forEach(t),nzo=r(qwe," \u2014 "),ZN=n(qwe,"A",{href:!0});var Vnt=s(ZN);szo=r(Vnt,"SwinForMaskedImageModeling"),Vnt.forEach(t),lzo=r(qwe," (Swin model)"),qwe.forEach(t),izo=i(pW),z6=n(pW,"LI",{});var Owe=s(z6);zce=n(Owe,"STRONG",{});var znt=s(zce);dzo=r(znt,"vit"),znt.forEach(t),czo=r(Owe," \u2014 "),eq=n(Owe,"A",{href:!0});var Wnt=s(eq);fzo=r(Wnt,"ViTForMaskedImageModeling"),Wnt.forEach(t),mzo=r(Owe," (ViT model)"),Owe.forEach(t),pW.forEach(t),gzo=i(aa),W6=n(aa,"P",{});var Gwe=s(W6);hzo=r(Gwe,"The model is set in evaluation mode by default using "),Wce=n(Gwe,"CODE",{});var Qnt=s(Wce);pzo=r(Qnt,"model.eval()"),Qnt.forEach(t),_zo=r(Gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Gwe,"CODE",{});var Hnt=s(Qce);uzo=r(Hnt,"model.train()"),Hnt.forEach(t),Gwe.forEach(t),bzo=i(aa),Hce=n(aa,"P",{});var Unt=s(Hce);vzo=r(Unt,"Examples:"),Unt.forEach(t),Tzo=i(aa),m(oy.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),pke=i(c),oc=n(c,"H2",{class:!0});var ySe=s(oc);Q6=n(ySe,"A",{id:!0,class:!0,href:!0});var Jnt=s(Q6);Uce=n(Jnt,"SPAN",{});var Ynt=s(Uce);m(ry.$$.fragment,Ynt),Ynt.forEach(t),Jnt.forEach(t),Fzo=i(ySe),Jce=n(ySe,"SPAN",{});var Knt=s(Jce);Czo=r(Knt,"AutoModelForObjectDetection"),Knt.forEach(t),ySe.forEach(t),_ke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(ty.$$.fragment,kl),Mzo=i(kl),rc=n(kl,"P",{});var _W=s(rc);Ezo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Yce=n(_W,"CODE",{});var Znt=s(Yce);yzo=r(Znt,"from_pretrained()"),Znt.forEach(t),wzo=r(_W,"class method or the "),Kce=n(_W,"CODE",{});var est=s(Kce);Azo=r(est,"from_config()"),est.forEach(t),Lzo=r(_W,`class
method.`),_W.forEach(t),Bzo=i(kl),ay=n(kl,"P",{});var wSe=s(ay);xzo=r(wSe,"This class cannot be instantiated directly using "),Zce=n(wSe,"CODE",{});var ost=s(Zce);kzo=r(ost,"__init__()"),ost.forEach(t),Rzo=r(wSe," (throws an error)."),wSe.forEach(t),Szo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(ny.$$.fragment,Rl),Pzo=i(Rl),efe=n(Rl,"P",{});var rst=s(efe);$zo=r(rst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rst.forEach(t),Izo=i(Rl),tc=n(Rl,"P",{});var uW=s(tc);jzo=r(uW,`Note:
Loading a model from its configuration file does `),ofe=n(uW,"STRONG",{});var tst=s(ofe);Dzo=r(tst,"not"),tst.forEach(t),Nzo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=n(uW,"CODE",{});var ast=s(rfe);qzo=r(ast,"from_pretrained()"),ast.forEach(t),Ozo=r(uW,"to load the model weights."),uW.forEach(t),Gzo=i(Rl),tfe=n(Rl,"P",{});var nst=s(tfe);Xzo=r(nst,"Examples:"),nst.forEach(t),Vzo=i(Rl),m(sy.$$.fragment,Rl),Rl.forEach(t),zzo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(ly.$$.fragment,na),Wzo=i(na),afe=n(na,"P",{});var sst=s(afe);Qzo=r(sst,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sst.forEach(t),Hzo=i(na),mn=n(na,"P",{});var F4=s(mn);Uzo=r(F4,"The model class to instantiate is selected based on the "),nfe=n(F4,"CODE",{});var lst=s(nfe);Jzo=r(lst,"model_type"),lst.forEach(t),Yzo=r(F4,` property of the config object (either
passed as an argument or loaded from `),sfe=n(F4,"CODE",{});var ist=s(sfe);Kzo=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),Zzo=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=n(F4,"CODE",{});var dst=s(lfe);eWo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),oWo=r(F4,":"),F4.forEach(t),rWo=i(na),ife=n(na,"UL",{});var cst=s(ife);H6=n(cst,"LI",{});var Xwe=s(H6);dfe=n(Xwe,"STRONG",{});var fst=s(dfe);tWo=r(fst,"detr"),fst.forEach(t),aWo=r(Xwe," \u2014 "),oq=n(Xwe,"A",{href:!0});var mst=s(oq);nWo=r(mst,"DetrForObjectDetection"),mst.forEach(t),sWo=r(Xwe," (DETR model)"),Xwe.forEach(t),cst.forEach(t),lWo=i(na),U6=n(na,"P",{});var Vwe=s(U6);iWo=r(Vwe,"The model is set in evaluation mode by default using "),cfe=n(Vwe,"CODE",{});var gst=s(cfe);dWo=r(gst,"model.eval()"),gst.forEach(t),cWo=r(Vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=n(Vwe,"CODE",{});var hst=s(ffe);fWo=r(hst,"model.train()"),hst.forEach(t),Vwe.forEach(t),mWo=i(na),mfe=n(na,"P",{});var pst=s(mfe);gWo=r(pst,"Examples:"),pst.forEach(t),hWo=i(na),m(iy.$$.fragment,na),na.forEach(t),kl.forEach(t),uke=i(c),ac=n(c,"H2",{class:!0});var ASe=s(ac);J6=n(ASe,"A",{id:!0,class:!0,href:!0});var _st=s(J6);gfe=n(_st,"SPAN",{});var ust=s(gfe);m(dy.$$.fragment,ust),ust.forEach(t),_st.forEach(t),pWo=i(ASe),hfe=n(ASe,"SPAN",{});var bst=s(hfe);_Wo=r(bst,"AutoModelForImageSegmentation"),bst.forEach(t),ASe.forEach(t),bke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(cy.$$.fragment,Sl),uWo=i(Sl),nc=n(Sl,"P",{});var bW=s(nc);bWo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pfe=n(bW,"CODE",{});var vst=s(pfe);vWo=r(vst,"from_pretrained()"),vst.forEach(t),TWo=r(bW,"class method or the "),_fe=n(bW,"CODE",{});var Tst=s(_fe);FWo=r(Tst,"from_config()"),Tst.forEach(t),CWo=r(bW,`class
method.`),bW.forEach(t),MWo=i(Sl),fy=n(Sl,"P",{});var LSe=s(fy);EWo=r(LSe,"This class cannot be instantiated directly using "),ufe=n(LSe,"CODE",{});var Fst=s(ufe);yWo=r(Fst,"__init__()"),Fst.forEach(t),wWo=r(LSe," (throws an error)."),LSe.forEach(t),AWo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(my.$$.fragment,Pl),LWo=i(Pl),bfe=n(Pl,"P",{});var Cst=s(bfe);BWo=r(Cst,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cst.forEach(t),xWo=i(Pl),sc=n(Pl,"P",{});var vW=s(sc);kWo=r(vW,`Note:
Loading a model from its configuration file does `),vfe=n(vW,"STRONG",{});var Mst=s(vfe);RWo=r(Mst,"not"),Mst.forEach(t),SWo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tfe=n(vW,"CODE",{});var Est=s(Tfe);PWo=r(Est,"from_pretrained()"),Est.forEach(t),$Wo=r(vW,"to load the model weights."),vW.forEach(t),IWo=i(Pl),Ffe=n(Pl,"P",{});var yst=s(Ffe);jWo=r(yst,"Examples:"),yst.forEach(t),DWo=i(Pl),m(gy.$$.fragment,Pl),Pl.forEach(t),NWo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(hy.$$.fragment,sa),qWo=i(sa),Cfe=n(sa,"P",{});var wst=s(Cfe);OWo=r(wst,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wst.forEach(t),GWo=i(sa),gn=n(sa,"P",{});var C4=s(gn);XWo=r(C4,"The model class to instantiate is selected based on the "),Mfe=n(C4,"CODE",{});var Ast=s(Mfe);VWo=r(Ast,"model_type"),Ast.forEach(t),zWo=r(C4,` property of the config object (either
passed as an argument or loaded from `),Efe=n(C4,"CODE",{});var Lst=s(Efe);WWo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),QWo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(C4,"CODE",{});var Bst=s(yfe);HWo=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),UWo=r(C4,":"),C4.forEach(t),JWo=i(sa),wfe=n(sa,"UL",{});var xst=s(wfe);Y6=n(xst,"LI",{});var zwe=s(Y6);Afe=n(zwe,"STRONG",{});var kst=s(Afe);YWo=r(kst,"detr"),kst.forEach(t),KWo=r(zwe," \u2014 "),rq=n(zwe,"A",{href:!0});var Rst=s(rq);ZWo=r(Rst,"DetrForSegmentation"),Rst.forEach(t),eQo=r(zwe," (DETR model)"),zwe.forEach(t),xst.forEach(t),oQo=i(sa),K6=n(sa,"P",{});var Wwe=s(K6);rQo=r(Wwe,"The model is set in evaluation mode by default using "),Lfe=n(Wwe,"CODE",{});var Sst=s(Lfe);tQo=r(Sst,"model.eval()"),Sst.forEach(t),aQo=r(Wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(Wwe,"CODE",{});var Pst=s(Bfe);nQo=r(Pst,"model.train()"),Pst.forEach(t),Wwe.forEach(t),sQo=i(sa),xfe=n(sa,"P",{});var $st=s(xfe);lQo=r($st,"Examples:"),$st.forEach(t),iQo=i(sa),m(py.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),vke=i(c),lc=n(c,"H2",{class:!0});var BSe=s(lc);Z6=n(BSe,"A",{id:!0,class:!0,href:!0});var Ist=s(Z6);kfe=n(Ist,"SPAN",{});var jst=s(kfe);m(_y.$$.fragment,jst),jst.forEach(t),Ist.forEach(t),dQo=i(BSe),Rfe=n(BSe,"SPAN",{});var Dst=s(Rfe);cQo=r(Dst,"AutoModelForSemanticSegmentation"),Dst.forEach(t),BSe.forEach(t),Tke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(uy.$$.fragment,$l),fQo=i($l),ic=n($l,"P",{});var TW=s(ic);mQo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Sfe=n(TW,"CODE",{});var Nst=s(Sfe);gQo=r(Nst,"from_pretrained()"),Nst.forEach(t),hQo=r(TW,"class method or the "),Pfe=n(TW,"CODE",{});var qst=s(Pfe);pQo=r(qst,"from_config()"),qst.forEach(t),_Qo=r(TW,`class
method.`),TW.forEach(t),uQo=i($l),by=n($l,"P",{});var xSe=s(by);bQo=r(xSe,"This class cannot be instantiated directly using "),$fe=n(xSe,"CODE",{});var Ost=s($fe);vQo=r(Ost,"__init__()"),Ost.forEach(t),TQo=r(xSe," (throws an error)."),xSe.forEach(t),FQo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(vy.$$.fragment,Il),CQo=i(Il),Ife=n(Il,"P",{});var Gst=s(Ife);MQo=r(Gst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gst.forEach(t),EQo=i(Il),dc=n(Il,"P",{});var FW=s(dc);yQo=r(FW,`Note:
Loading a model from its configuration file does `),jfe=n(FW,"STRONG",{});var Xst=s(jfe);wQo=r(Xst,"not"),Xst.forEach(t),AQo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=n(FW,"CODE",{});var Vst=s(Dfe);LQo=r(Vst,"from_pretrained()"),Vst.forEach(t),BQo=r(FW,"to load the model weights."),FW.forEach(t),xQo=i(Il),Nfe=n(Il,"P",{});var zst=s(Nfe);kQo=r(zst,"Examples:"),zst.forEach(t),RQo=i(Il),m(Ty.$$.fragment,Il),Il.forEach(t),SQo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(Fy.$$.fragment,la),PQo=i(la),qfe=n(la,"P",{});var Wst=s(qfe);$Qo=r(Wst,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wst.forEach(t),IQo=i(la),hn=n(la,"P",{});var M4=s(hn);jQo=r(M4,"The model class to instantiate is selected based on the "),Ofe=n(M4,"CODE",{});var Qst=s(Ofe);DQo=r(Qst,"model_type"),Qst.forEach(t),NQo=r(M4,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(M4,"CODE",{});var Hst=s(Gfe);qQo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),OQo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(M4,"CODE",{});var Ust=s(Xfe);GQo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),XQo=r(M4,":"),M4.forEach(t),VQo=i(la),Cy=n(la,"UL",{});var kSe=s(Cy);e0=n(kSe,"LI",{});var Qwe=s(e0);Vfe=n(Qwe,"STRONG",{});var Jst=s(Vfe);zQo=r(Jst,"beit"),Jst.forEach(t),WQo=r(Qwe," \u2014 "),tq=n(Qwe,"A",{href:!0});var Yst=s(tq);QQo=r(Yst,"BeitForSemanticSegmentation"),Yst.forEach(t),HQo=r(Qwe," (BEiT model)"),Qwe.forEach(t),UQo=i(kSe),o0=n(kSe,"LI",{});var Hwe=s(o0);zfe=n(Hwe,"STRONG",{});var Kst=s(zfe);JQo=r(Kst,"segformer"),Kst.forEach(t),YQo=r(Hwe," \u2014 "),aq=n(Hwe,"A",{href:!0});var Zst=s(aq);KQo=r(Zst,"SegformerForSemanticSegmentation"),Zst.forEach(t),ZQo=r(Hwe," (SegFormer model)"),Hwe.forEach(t),kSe.forEach(t),eHo=i(la),r0=n(la,"P",{});var Uwe=s(r0);oHo=r(Uwe,"The model is set in evaluation mode by default using "),Wfe=n(Uwe,"CODE",{});var elt=s(Wfe);rHo=r(elt,"model.eval()"),elt.forEach(t),tHo=r(Uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(Uwe,"CODE",{});var olt=s(Qfe);aHo=r(olt,"model.train()"),olt.forEach(t),Uwe.forEach(t),nHo=i(la),Hfe=n(la,"P",{});var rlt=s(Hfe);sHo=r(rlt,"Examples:"),rlt.forEach(t),lHo=i(la),m(My.$$.fragment,la),la.forEach(t),$l.forEach(t),Fke=i(c),cc=n(c,"H2",{class:!0});var RSe=s(cc);t0=n(RSe,"A",{id:!0,class:!0,href:!0});var tlt=s(t0);Ufe=n(tlt,"SPAN",{});var alt=s(Ufe);m(Ey.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),iHo=i(RSe),Jfe=n(RSe,"SPAN",{});var nlt=s(Jfe);dHo=r(nlt,"AutoModelForInstanceSegmentation"),nlt.forEach(t),RSe.forEach(t),Cke=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(yy.$$.fragment,jl),cHo=i(jl),fc=n(jl,"P",{});var CW=s(fc);fHo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Yfe=n(CW,"CODE",{});var slt=s(Yfe);mHo=r(slt,"from_pretrained()"),slt.forEach(t),gHo=r(CW,"class method or the "),Kfe=n(CW,"CODE",{});var llt=s(Kfe);hHo=r(llt,"from_config()"),llt.forEach(t),pHo=r(CW,`class
method.`),CW.forEach(t),_Ho=i(jl),wy=n(jl,"P",{});var SSe=s(wy);uHo=r(SSe,"This class cannot be instantiated directly using "),Zfe=n(SSe,"CODE",{});var ilt=s(Zfe);bHo=r(ilt,"__init__()"),ilt.forEach(t),vHo=r(SSe," (throws an error)."),SSe.forEach(t),THo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(Ay.$$.fragment,Dl),FHo=i(Dl),eme=n(Dl,"P",{});var dlt=s(eme);CHo=r(dlt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dlt.forEach(t),MHo=i(Dl),mc=n(Dl,"P",{});var MW=s(mc);EHo=r(MW,`Note:
Loading a model from its configuration file does `),ome=n(MW,"STRONG",{});var clt=s(ome);yHo=r(clt,"not"),clt.forEach(t),wHo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rme=n(MW,"CODE",{});var flt=s(rme);AHo=r(flt,"from_pretrained()"),flt.forEach(t),LHo=r(MW,"to load the model weights."),MW.forEach(t),BHo=i(Dl),tme=n(Dl,"P",{});var mlt=s(tme);xHo=r(mlt,"Examples:"),mlt.forEach(t),kHo=i(Dl),m(Ly.$$.fragment,Dl),Dl.forEach(t),RHo=i(jl),so=n(jl,"DIV",{class:!0});var ia=s(so);m(By.$$.fragment,ia),SHo=i(ia),ame=n(ia,"P",{});var glt=s(ame);PHo=r(glt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),glt.forEach(t),$Ho=i(ia),pn=n(ia,"P",{});var E4=s(pn);IHo=r(E4,"The model class to instantiate is selected based on the "),nme=n(E4,"CODE",{});var hlt=s(nme);jHo=r(hlt,"model_type"),hlt.forEach(t),DHo=r(E4,` property of the config object (either
passed as an argument or loaded from `),sme=n(E4,"CODE",{});var plt=s(sme);NHo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),qHo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(E4,"CODE",{});var _lt=s(lme);OHo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),GHo=r(E4,":"),E4.forEach(t),XHo=i(ia),ime=n(ia,"UL",{});var ult=s(ime);a0=n(ult,"LI",{});var Jwe=s(a0);dme=n(Jwe,"STRONG",{});var blt=s(dme);VHo=r(blt,"maskformer"),blt.forEach(t),zHo=r(Jwe," \u2014 "),nq=n(Jwe,"A",{href:!0});var vlt=s(nq);WHo=r(vlt,"MaskFormerForInstanceSegmentation"),vlt.forEach(t),QHo=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),ult.forEach(t),HHo=i(ia),n0=n(ia,"P",{});var Ywe=s(n0);UHo=r(Ywe,"The model is set in evaluation mode by default using "),cme=n(Ywe,"CODE",{});var Tlt=s(cme);JHo=r(Tlt,"model.eval()"),Tlt.forEach(t),YHo=r(Ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Ywe,"CODE",{});var Flt=s(fme);KHo=r(Flt,"model.train()"),Flt.forEach(t),Ywe.forEach(t),ZHo=i(ia),mme=n(ia,"P",{});var Clt=s(mme);eUo=r(Clt,"Examples:"),Clt.forEach(t),oUo=i(ia),m(xy.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Mke=i(c),gc=n(c,"H2",{class:!0});var PSe=s(gc);s0=n(PSe,"A",{id:!0,class:!0,href:!0});var Mlt=s(s0);gme=n(Mlt,"SPAN",{});var Elt=s(gme);m(ky.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),rUo=i(PSe),hme=n(PSe,"SPAN",{});var ylt=s(hme);tUo=r(ylt,"TFAutoModel"),ylt.forEach(t),PSe.forEach(t),Eke=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(Ry.$$.fragment,Nl),aUo=i(Nl),hc=n(Nl,"P",{});var EW=s(hc);nUo=r(EW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pme=n(EW,"CODE",{});var wlt=s(pme);sUo=r(wlt,"from_pretrained()"),wlt.forEach(t),lUo=r(EW,"class method or the "),_me=n(EW,"CODE",{});var Alt=s(_me);iUo=r(Alt,"from_config()"),Alt.forEach(t),dUo=r(EW,`class
method.`),EW.forEach(t),cUo=i(Nl),Sy=n(Nl,"P",{});var $Se=s(Sy);fUo=r($Se,"This class cannot be instantiated directly using "),ume=n($Se,"CODE",{});var Llt=s(ume);mUo=r(Llt,"__init__()"),Llt.forEach(t),gUo=r($Se," (throws an error)."),$Se.forEach(t),hUo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m(Py.$$.fragment,ql),pUo=i(ql),bme=n(ql,"P",{});var Blt=s(bme);_Uo=r(Blt,"Instantiates one of the base model classes of the library from a configuration."),Blt.forEach(t),uUo=i(ql),pc=n(ql,"P",{});var yW=s(pc);bUo=r(yW,`Note:
Loading a model from its configuration file does `),vme=n(yW,"STRONG",{});var xlt=s(vme);vUo=r(xlt,"not"),xlt.forEach(t),TUo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tme=n(yW,"CODE",{});var klt=s(Tme);FUo=r(klt,"from_pretrained()"),klt.forEach(t),CUo=r(yW,"to load the model weights."),yW.forEach(t),MUo=i(ql),Fme=n(ql,"P",{});var Rlt=s(Fme);EUo=r(Rlt,"Examples:"),Rlt.forEach(t),yUo=i(ql),m($y.$$.fragment,ql),ql.forEach(t),wUo=i(Nl),ho=n(Nl,"DIV",{class:!0});var pa=s(ho);m(Iy.$$.fragment,pa),AUo=i(pa),Cme=n(pa,"P",{});var Slt=s(Cme);LUo=r(Slt,"Instantiate one of the base model classes of the library from a pretrained model."),Slt.forEach(t),BUo=i(pa),_n=n(pa,"P",{});var y4=s(_n);xUo=r(y4,"The model class to instantiate is selected based on the "),Mme=n(y4,"CODE",{});var Plt=s(Mme);kUo=r(Plt,"model_type"),Plt.forEach(t),RUo=r(y4,` property of the config object (either
passed as an argument or loaded from `),Eme=n(y4,"CODE",{});var $lt=s(Eme);SUo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),PUo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(y4,"CODE",{});var Ilt=s(yme);$Uo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),IUo=r(y4,":"),y4.forEach(t),jUo=i(pa),B=n(pa,"UL",{});var x=s(B);l0=n(x,"LI",{});var Kwe=s(l0);wme=n(Kwe,"STRONG",{});var jlt=s(wme);DUo=r(jlt,"albert"),jlt.forEach(t),NUo=r(Kwe," \u2014 "),sq=n(Kwe,"A",{href:!0});var Dlt=s(sq);qUo=r(Dlt,"TFAlbertModel"),Dlt.forEach(t),OUo=r(Kwe," (ALBERT model)"),Kwe.forEach(t),GUo=i(x),i0=n(x,"LI",{});var Zwe=s(i0);Ame=n(Zwe,"STRONG",{});var Nlt=s(Ame);XUo=r(Nlt,"bart"),Nlt.forEach(t),VUo=r(Zwe," \u2014 "),lq=n(Zwe,"A",{href:!0});var qlt=s(lq);zUo=r(qlt,"TFBartModel"),qlt.forEach(t),WUo=r(Zwe," (BART model)"),Zwe.forEach(t),QUo=i(x),d0=n(x,"LI",{});var eAe=s(d0);Lme=n(eAe,"STRONG",{});var Olt=s(Lme);HUo=r(Olt,"bert"),Olt.forEach(t),UUo=r(eAe," \u2014 "),iq=n(eAe,"A",{href:!0});var Glt=s(iq);JUo=r(Glt,"TFBertModel"),Glt.forEach(t),YUo=r(eAe," (BERT model)"),eAe.forEach(t),KUo=i(x),c0=n(x,"LI",{});var oAe=s(c0);Bme=n(oAe,"STRONG",{});var Xlt=s(Bme);ZUo=r(Xlt,"blenderbot"),Xlt.forEach(t),eJo=r(oAe," \u2014 "),dq=n(oAe,"A",{href:!0});var Vlt=s(dq);oJo=r(Vlt,"TFBlenderbotModel"),Vlt.forEach(t),rJo=r(oAe," (Blenderbot model)"),oAe.forEach(t),tJo=i(x),f0=n(x,"LI",{});var rAe=s(f0);xme=n(rAe,"STRONG",{});var zlt=s(xme);aJo=r(zlt,"blenderbot-small"),zlt.forEach(t),nJo=r(rAe," \u2014 "),cq=n(rAe,"A",{href:!0});var Wlt=s(cq);sJo=r(Wlt,"TFBlenderbotSmallModel"),Wlt.forEach(t),lJo=r(rAe," (BlenderbotSmall model)"),rAe.forEach(t),iJo=i(x),m0=n(x,"LI",{});var tAe=s(m0);kme=n(tAe,"STRONG",{});var Qlt=s(kme);dJo=r(Qlt,"camembert"),Qlt.forEach(t),cJo=r(tAe," \u2014 "),fq=n(tAe,"A",{href:!0});var Hlt=s(fq);fJo=r(Hlt,"TFCamembertModel"),Hlt.forEach(t),mJo=r(tAe," (CamemBERT model)"),tAe.forEach(t),gJo=i(x),g0=n(x,"LI",{});var aAe=s(g0);Rme=n(aAe,"STRONG",{});var Ult=s(Rme);hJo=r(Ult,"clip"),Ult.forEach(t),pJo=r(aAe," \u2014 "),mq=n(aAe,"A",{href:!0});var Jlt=s(mq);_Jo=r(Jlt,"TFCLIPModel"),Jlt.forEach(t),uJo=r(aAe," (CLIP model)"),aAe.forEach(t),bJo=i(x),h0=n(x,"LI",{});var nAe=s(h0);Sme=n(nAe,"STRONG",{});var Ylt=s(Sme);vJo=r(Ylt,"convbert"),Ylt.forEach(t),TJo=r(nAe," \u2014 "),gq=n(nAe,"A",{href:!0});var Klt=s(gq);FJo=r(Klt,"TFConvBertModel"),Klt.forEach(t),CJo=r(nAe," (ConvBERT model)"),nAe.forEach(t),MJo=i(x),p0=n(x,"LI",{});var sAe=s(p0);Pme=n(sAe,"STRONG",{});var Zlt=s(Pme);EJo=r(Zlt,"convnext"),Zlt.forEach(t),yJo=r(sAe," \u2014 "),hq=n(sAe,"A",{href:!0});var eit=s(hq);wJo=r(eit,"TFConvNextModel"),eit.forEach(t),AJo=r(sAe," (ConvNext model)"),sAe.forEach(t),LJo=i(x),_0=n(x,"LI",{});var lAe=s(_0);$me=n(lAe,"STRONG",{});var oit=s($me);BJo=r(oit,"ctrl"),oit.forEach(t),xJo=r(lAe," \u2014 "),pq=n(lAe,"A",{href:!0});var rit=s(pq);kJo=r(rit,"TFCTRLModel"),rit.forEach(t),RJo=r(lAe," (CTRL model)"),lAe.forEach(t),SJo=i(x),u0=n(x,"LI",{});var iAe=s(u0);Ime=n(iAe,"STRONG",{});var tit=s(Ime);PJo=r(tit,"deberta"),tit.forEach(t),$Jo=r(iAe," \u2014 "),_q=n(iAe,"A",{href:!0});var ait=s(_q);IJo=r(ait,"TFDebertaModel"),ait.forEach(t),jJo=r(iAe," (DeBERTa model)"),iAe.forEach(t),DJo=i(x),b0=n(x,"LI",{});var dAe=s(b0);jme=n(dAe,"STRONG",{});var nit=s(jme);NJo=r(nit,"deberta-v2"),nit.forEach(t),qJo=r(dAe," \u2014 "),uq=n(dAe,"A",{href:!0});var sit=s(uq);OJo=r(sit,"TFDebertaV2Model"),sit.forEach(t),GJo=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),XJo=i(x),v0=n(x,"LI",{});var cAe=s(v0);Dme=n(cAe,"STRONG",{});var lit=s(Dme);VJo=r(lit,"distilbert"),lit.forEach(t),zJo=r(cAe," \u2014 "),bq=n(cAe,"A",{href:!0});var iit=s(bq);WJo=r(iit,"TFDistilBertModel"),iit.forEach(t),QJo=r(cAe," (DistilBERT model)"),cAe.forEach(t),HJo=i(x),T0=n(x,"LI",{});var fAe=s(T0);Nme=n(fAe,"STRONG",{});var dit=s(Nme);UJo=r(dit,"dpr"),dit.forEach(t),JJo=r(fAe," \u2014 "),vq=n(fAe,"A",{href:!0});var cit=s(vq);YJo=r(cit,"TFDPRQuestionEncoder"),cit.forEach(t),KJo=r(fAe," (DPR model)"),fAe.forEach(t),ZJo=i(x),F0=n(x,"LI",{});var mAe=s(F0);qme=n(mAe,"STRONG",{});var fit=s(qme);eYo=r(fit,"electra"),fit.forEach(t),oYo=r(mAe," \u2014 "),Tq=n(mAe,"A",{href:!0});var mit=s(Tq);rYo=r(mit,"TFElectraModel"),mit.forEach(t),tYo=r(mAe," (ELECTRA model)"),mAe.forEach(t),aYo=i(x),C0=n(x,"LI",{});var gAe=s(C0);Ome=n(gAe,"STRONG",{});var git=s(Ome);nYo=r(git,"flaubert"),git.forEach(t),sYo=r(gAe," \u2014 "),Fq=n(gAe,"A",{href:!0});var hit=s(Fq);lYo=r(hit,"TFFlaubertModel"),hit.forEach(t),iYo=r(gAe," (FlauBERT model)"),gAe.forEach(t),dYo=i(x),Os=n(x,"LI",{});var G8=s(Os);Gme=n(G8,"STRONG",{});var pit=s(Gme);cYo=r(pit,"funnel"),pit.forEach(t),fYo=r(G8," \u2014 "),Cq=n(G8,"A",{href:!0});var _it=s(Cq);mYo=r(_it,"TFFunnelModel"),_it.forEach(t),gYo=r(G8," or "),Mq=n(G8,"A",{href:!0});var uit=s(Mq);hYo=r(uit,"TFFunnelBaseModel"),uit.forEach(t),pYo=r(G8," (Funnel Transformer model)"),G8.forEach(t),_Yo=i(x),M0=n(x,"LI",{});var hAe=s(M0);Xme=n(hAe,"STRONG",{});var bit=s(Xme);uYo=r(bit,"gpt2"),bit.forEach(t),bYo=r(hAe," \u2014 "),Eq=n(hAe,"A",{href:!0});var vit=s(Eq);vYo=r(vit,"TFGPT2Model"),vit.forEach(t),TYo=r(hAe," (OpenAI GPT-2 model)"),hAe.forEach(t),FYo=i(x),E0=n(x,"LI",{});var pAe=s(E0);Vme=n(pAe,"STRONG",{});var Tit=s(Vme);CYo=r(Tit,"hubert"),Tit.forEach(t),MYo=r(pAe," \u2014 "),yq=n(pAe,"A",{href:!0});var Fit=s(yq);EYo=r(Fit,"TFHubertModel"),Fit.forEach(t),yYo=r(pAe," (Hubert model)"),pAe.forEach(t),wYo=i(x),y0=n(x,"LI",{});var _Ae=s(y0);zme=n(_Ae,"STRONG",{});var Cit=s(zme);AYo=r(Cit,"layoutlm"),Cit.forEach(t),LYo=r(_Ae," \u2014 "),wq=n(_Ae,"A",{href:!0});var Mit=s(wq);BYo=r(Mit,"TFLayoutLMModel"),Mit.forEach(t),xYo=r(_Ae," (LayoutLM model)"),_Ae.forEach(t),kYo=i(x),w0=n(x,"LI",{});var uAe=s(w0);Wme=n(uAe,"STRONG",{});var Eit=s(Wme);RYo=r(Eit,"led"),Eit.forEach(t),SYo=r(uAe," \u2014 "),Aq=n(uAe,"A",{href:!0});var yit=s(Aq);PYo=r(yit,"TFLEDModel"),yit.forEach(t),$Yo=r(uAe," (LED model)"),uAe.forEach(t),IYo=i(x),A0=n(x,"LI",{});var bAe=s(A0);Qme=n(bAe,"STRONG",{});var wit=s(Qme);jYo=r(wit,"longformer"),wit.forEach(t),DYo=r(bAe," \u2014 "),Lq=n(bAe,"A",{href:!0});var Ait=s(Lq);NYo=r(Ait,"TFLongformerModel"),Ait.forEach(t),qYo=r(bAe," (Longformer model)"),bAe.forEach(t),OYo=i(x),L0=n(x,"LI",{});var vAe=s(L0);Hme=n(vAe,"STRONG",{});var Lit=s(Hme);GYo=r(Lit,"lxmert"),Lit.forEach(t),XYo=r(vAe," \u2014 "),Bq=n(vAe,"A",{href:!0});var Bit=s(Bq);VYo=r(Bit,"TFLxmertModel"),Bit.forEach(t),zYo=r(vAe," (LXMERT model)"),vAe.forEach(t),WYo=i(x),B0=n(x,"LI",{});var TAe=s(B0);Ume=n(TAe,"STRONG",{});var xit=s(Ume);QYo=r(xit,"marian"),xit.forEach(t),HYo=r(TAe," \u2014 "),xq=n(TAe,"A",{href:!0});var kit=s(xq);UYo=r(kit,"TFMarianModel"),kit.forEach(t),JYo=r(TAe," (Marian model)"),TAe.forEach(t),YYo=i(x),x0=n(x,"LI",{});var FAe=s(x0);Jme=n(FAe,"STRONG",{});var Rit=s(Jme);KYo=r(Rit,"mbart"),Rit.forEach(t),ZYo=r(FAe," \u2014 "),kq=n(FAe,"A",{href:!0});var Sit=s(kq);eKo=r(Sit,"TFMBartModel"),Sit.forEach(t),oKo=r(FAe," (mBART model)"),FAe.forEach(t),rKo=i(x),k0=n(x,"LI",{});var CAe=s(k0);Yme=n(CAe,"STRONG",{});var Pit=s(Yme);tKo=r(Pit,"mobilebert"),Pit.forEach(t),aKo=r(CAe," \u2014 "),Rq=n(CAe,"A",{href:!0});var $it=s(Rq);nKo=r($it,"TFMobileBertModel"),$it.forEach(t),sKo=r(CAe," (MobileBERT model)"),CAe.forEach(t),lKo=i(x),R0=n(x,"LI",{});var MAe=s(R0);Kme=n(MAe,"STRONG",{});var Iit=s(Kme);iKo=r(Iit,"mpnet"),Iit.forEach(t),dKo=r(MAe," \u2014 "),Sq=n(MAe,"A",{href:!0});var jit=s(Sq);cKo=r(jit,"TFMPNetModel"),jit.forEach(t),fKo=r(MAe," (MPNet model)"),MAe.forEach(t),mKo=i(x),S0=n(x,"LI",{});var EAe=s(S0);Zme=n(EAe,"STRONG",{});var Dit=s(Zme);gKo=r(Dit,"mt5"),Dit.forEach(t),hKo=r(EAe," \u2014 "),Pq=n(EAe,"A",{href:!0});var Nit=s(Pq);pKo=r(Nit,"TFMT5Model"),Nit.forEach(t),_Ko=r(EAe," (mT5 model)"),EAe.forEach(t),uKo=i(x),P0=n(x,"LI",{});var yAe=s(P0);ege=n(yAe,"STRONG",{});var qit=s(ege);bKo=r(qit,"openai-gpt"),qit.forEach(t),vKo=r(yAe," \u2014 "),$q=n(yAe,"A",{href:!0});var Oit=s($q);TKo=r(Oit,"TFOpenAIGPTModel"),Oit.forEach(t),FKo=r(yAe," (OpenAI GPT model)"),yAe.forEach(t),CKo=i(x),$0=n(x,"LI",{});var wAe=s($0);oge=n(wAe,"STRONG",{});var Git=s(oge);MKo=r(Git,"pegasus"),Git.forEach(t),EKo=r(wAe," \u2014 "),Iq=n(wAe,"A",{href:!0});var Xit=s(Iq);yKo=r(Xit,"TFPegasusModel"),Xit.forEach(t),wKo=r(wAe," (Pegasus model)"),wAe.forEach(t),AKo=i(x),I0=n(x,"LI",{});var AAe=s(I0);rge=n(AAe,"STRONG",{});var Vit=s(rge);LKo=r(Vit,"rembert"),Vit.forEach(t),BKo=r(AAe," \u2014 "),jq=n(AAe,"A",{href:!0});var zit=s(jq);xKo=r(zit,"TFRemBertModel"),zit.forEach(t),kKo=r(AAe," (RemBERT model)"),AAe.forEach(t),RKo=i(x),j0=n(x,"LI",{});var LAe=s(j0);tge=n(LAe,"STRONG",{});var Wit=s(tge);SKo=r(Wit,"roberta"),Wit.forEach(t),PKo=r(LAe," \u2014 "),Dq=n(LAe,"A",{href:!0});var Qit=s(Dq);$Ko=r(Qit,"TFRobertaModel"),Qit.forEach(t),IKo=r(LAe," (RoBERTa model)"),LAe.forEach(t),jKo=i(x),D0=n(x,"LI",{});var BAe=s(D0);age=n(BAe,"STRONG",{});var Hit=s(age);DKo=r(Hit,"roformer"),Hit.forEach(t),NKo=r(BAe," \u2014 "),Nq=n(BAe,"A",{href:!0});var Uit=s(Nq);qKo=r(Uit,"TFRoFormerModel"),Uit.forEach(t),OKo=r(BAe," (RoFormer model)"),BAe.forEach(t),GKo=i(x),N0=n(x,"LI",{});var xAe=s(N0);nge=n(xAe,"STRONG",{});var Jit=s(nge);XKo=r(Jit,"speech_to_text"),Jit.forEach(t),VKo=r(xAe," \u2014 "),qq=n(xAe,"A",{href:!0});var Yit=s(qq);zKo=r(Yit,"TFSpeech2TextModel"),Yit.forEach(t),WKo=r(xAe," (Speech2Text model)"),xAe.forEach(t),QKo=i(x),q0=n(x,"LI",{});var kAe=s(q0);sge=n(kAe,"STRONG",{});var Kit=s(sge);HKo=r(Kit,"t5"),Kit.forEach(t),UKo=r(kAe," \u2014 "),Oq=n(kAe,"A",{href:!0});var Zit=s(Oq);JKo=r(Zit,"TFT5Model"),Zit.forEach(t),YKo=r(kAe," (T5 model)"),kAe.forEach(t),KKo=i(x),O0=n(x,"LI",{});var RAe=s(O0);lge=n(RAe,"STRONG",{});var edt=s(lge);ZKo=r(edt,"tapas"),edt.forEach(t),eZo=r(RAe," \u2014 "),Gq=n(RAe,"A",{href:!0});var odt=s(Gq);oZo=r(odt,"TFTapasModel"),odt.forEach(t),rZo=r(RAe," (TAPAS model)"),RAe.forEach(t),tZo=i(x),G0=n(x,"LI",{});var SAe=s(G0);ige=n(SAe,"STRONG",{});var rdt=s(ige);aZo=r(rdt,"transfo-xl"),rdt.forEach(t),nZo=r(SAe," \u2014 "),Xq=n(SAe,"A",{href:!0});var tdt=s(Xq);sZo=r(tdt,"TFTransfoXLModel"),tdt.forEach(t),lZo=r(SAe," (Transformer-XL model)"),SAe.forEach(t),iZo=i(x),X0=n(x,"LI",{});var PAe=s(X0);dge=n(PAe,"STRONG",{});var adt=s(dge);dZo=r(adt,"vit"),adt.forEach(t),cZo=r(PAe," \u2014 "),Vq=n(PAe,"A",{href:!0});var ndt=s(Vq);fZo=r(ndt,"TFViTModel"),ndt.forEach(t),mZo=r(PAe," (ViT model)"),PAe.forEach(t),gZo=i(x),V0=n(x,"LI",{});var $Ae=s(V0);cge=n($Ae,"STRONG",{});var sdt=s(cge);hZo=r(sdt,"wav2vec2"),sdt.forEach(t),pZo=r($Ae," \u2014 "),zq=n($Ae,"A",{href:!0});var ldt=s(zq);_Zo=r(ldt,"TFWav2Vec2Model"),ldt.forEach(t),uZo=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),bZo=i(x),z0=n(x,"LI",{});var IAe=s(z0);fge=n(IAe,"STRONG",{});var idt=s(fge);vZo=r(idt,"xlm"),idt.forEach(t),TZo=r(IAe," \u2014 "),Wq=n(IAe,"A",{href:!0});var ddt=s(Wq);FZo=r(ddt,"TFXLMModel"),ddt.forEach(t),CZo=r(IAe," (XLM model)"),IAe.forEach(t),MZo=i(x),W0=n(x,"LI",{});var jAe=s(W0);mge=n(jAe,"STRONG",{});var cdt=s(mge);EZo=r(cdt,"xlm-roberta"),cdt.forEach(t),yZo=r(jAe," \u2014 "),Qq=n(jAe,"A",{href:!0});var fdt=s(Qq);wZo=r(fdt,"TFXLMRobertaModel"),fdt.forEach(t),AZo=r(jAe," (XLM-RoBERTa model)"),jAe.forEach(t),LZo=i(x),Q0=n(x,"LI",{});var DAe=s(Q0);gge=n(DAe,"STRONG",{});var mdt=s(gge);BZo=r(mdt,"xlnet"),mdt.forEach(t),xZo=r(DAe," \u2014 "),Hq=n(DAe,"A",{href:!0});var gdt=s(Hq);kZo=r(gdt,"TFXLNetModel"),gdt.forEach(t),RZo=r(DAe," (XLNet model)"),DAe.forEach(t),x.forEach(t),SZo=i(pa),hge=n(pa,"P",{});var hdt=s(hge);PZo=r(hdt,"Examples:"),hdt.forEach(t),$Zo=i(pa),m(jy.$$.fragment,pa),pa.forEach(t),Nl.forEach(t),yke=i(c),_c=n(c,"H2",{class:!0});var ISe=s(_c);H0=n(ISe,"A",{id:!0,class:!0,href:!0});var pdt=s(H0);pge=n(pdt,"SPAN",{});var _dt=s(pge);m(Dy.$$.fragment,_dt),_dt.forEach(t),pdt.forEach(t),IZo=i(ISe),_ge=n(ISe,"SPAN",{});var udt=s(_ge);jZo=r(udt,"TFAutoModelForPreTraining"),udt.forEach(t),ISe.forEach(t),wke=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m(Ny.$$.fragment,Ol),DZo=i(Ol),uc=n(Ol,"P",{});var wW=s(uc);NZo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uge=n(wW,"CODE",{});var bdt=s(uge);qZo=r(bdt,"from_pretrained()"),bdt.forEach(t),OZo=r(wW,"class method or the "),bge=n(wW,"CODE",{});var vdt=s(bge);GZo=r(vdt,"from_config()"),vdt.forEach(t),XZo=r(wW,`class
method.`),wW.forEach(t),VZo=i(Ol),qy=n(Ol,"P",{});var jSe=s(qy);zZo=r(jSe,"This class cannot be instantiated directly using "),vge=n(jSe,"CODE",{});var Tdt=s(vge);WZo=r(Tdt,"__init__()"),Tdt.forEach(t),QZo=r(jSe," (throws an error)."),jSe.forEach(t),HZo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(Oy.$$.fragment,Gl),UZo=i(Gl),Tge=n(Gl,"P",{});var Fdt=s(Tge);JZo=r(Fdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fdt.forEach(t),YZo=i(Gl),bc=n(Gl,"P",{});var AW=s(bc);KZo=r(AW,`Note:
Loading a model from its configuration file does `),Fge=n(AW,"STRONG",{});var Cdt=s(Fge);ZZo=r(Cdt,"not"),Cdt.forEach(t),eer=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cge=n(AW,"CODE",{});var Mdt=s(Cge);oer=r(Mdt,"from_pretrained()"),Mdt.forEach(t),rer=r(AW,"to load the model weights."),AW.forEach(t),ter=i(Gl),Mge=n(Gl,"P",{});var Edt=s(Mge);aer=r(Edt,"Examples:"),Edt.forEach(t),ner=i(Gl),m(Gy.$$.fragment,Gl),Gl.forEach(t),ser=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(Xy.$$.fragment,_a),ler=i(_a),Ege=n(_a,"P",{});var ydt=s(Ege);ier=r(ydt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ydt.forEach(t),der=i(_a),un=n(_a,"P",{});var w4=s(un);cer=r(w4,"The model class to instantiate is selected based on the "),yge=n(w4,"CODE",{});var wdt=s(yge);fer=r(wdt,"model_type"),wdt.forEach(t),mer=r(w4,` property of the config object (either
passed as an argument or loaded from `),wge=n(w4,"CODE",{});var Adt=s(wge);ger=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),her=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(w4,"CODE",{});var Ldt=s(Age);per=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),_er=r(w4,":"),w4.forEach(t),uer=i(_a),H=n(_a,"UL",{});var U=s(H);U0=n(U,"LI",{});var NAe=s(U0);Lge=n(NAe,"STRONG",{});var Bdt=s(Lge);ber=r(Bdt,"albert"),Bdt.forEach(t),ver=r(NAe," \u2014 "),Uq=n(NAe,"A",{href:!0});var xdt=s(Uq);Ter=r(xdt,"TFAlbertForPreTraining"),xdt.forEach(t),Fer=r(NAe," (ALBERT model)"),NAe.forEach(t),Cer=i(U),J0=n(U,"LI",{});var qAe=s(J0);Bge=n(qAe,"STRONG",{});var kdt=s(Bge);Mer=r(kdt,"bart"),kdt.forEach(t),Eer=r(qAe," \u2014 "),Jq=n(qAe,"A",{href:!0});var Rdt=s(Jq);yer=r(Rdt,"TFBartForConditionalGeneration"),Rdt.forEach(t),wer=r(qAe," (BART model)"),qAe.forEach(t),Aer=i(U),Y0=n(U,"LI",{});var OAe=s(Y0);xge=n(OAe,"STRONG",{});var Sdt=s(xge);Ler=r(Sdt,"bert"),Sdt.forEach(t),Ber=r(OAe," \u2014 "),Yq=n(OAe,"A",{href:!0});var Pdt=s(Yq);xer=r(Pdt,"TFBertForPreTraining"),Pdt.forEach(t),ker=r(OAe," (BERT model)"),OAe.forEach(t),Rer=i(U),K0=n(U,"LI",{});var GAe=s(K0);kge=n(GAe,"STRONG",{});var $dt=s(kge);Ser=r($dt,"camembert"),$dt.forEach(t),Per=r(GAe," \u2014 "),Kq=n(GAe,"A",{href:!0});var Idt=s(Kq);$er=r(Idt,"TFCamembertForMaskedLM"),Idt.forEach(t),Ier=r(GAe," (CamemBERT model)"),GAe.forEach(t),jer=i(U),Z0=n(U,"LI",{});var XAe=s(Z0);Rge=n(XAe,"STRONG",{});var jdt=s(Rge);Der=r(jdt,"ctrl"),jdt.forEach(t),Ner=r(XAe," \u2014 "),Zq=n(XAe,"A",{href:!0});var Ddt=s(Zq);qer=r(Ddt,"TFCTRLLMHeadModel"),Ddt.forEach(t),Oer=r(XAe," (CTRL model)"),XAe.forEach(t),Ger=i(U),eT=n(U,"LI",{});var VAe=s(eT);Sge=n(VAe,"STRONG",{});var Ndt=s(Sge);Xer=r(Ndt,"distilbert"),Ndt.forEach(t),Ver=r(VAe," \u2014 "),eO=n(VAe,"A",{href:!0});var qdt=s(eO);zer=r(qdt,"TFDistilBertForMaskedLM"),qdt.forEach(t),Wer=r(VAe," (DistilBERT model)"),VAe.forEach(t),Qer=i(U),oT=n(U,"LI",{});var zAe=s(oT);Pge=n(zAe,"STRONG",{});var Odt=s(Pge);Her=r(Odt,"electra"),Odt.forEach(t),Uer=r(zAe," \u2014 "),oO=n(zAe,"A",{href:!0});var Gdt=s(oO);Jer=r(Gdt,"TFElectraForPreTraining"),Gdt.forEach(t),Yer=r(zAe," (ELECTRA model)"),zAe.forEach(t),Ker=i(U),rT=n(U,"LI",{});var WAe=s(rT);$ge=n(WAe,"STRONG",{});var Xdt=s($ge);Zer=r(Xdt,"flaubert"),Xdt.forEach(t),eor=r(WAe," \u2014 "),rO=n(WAe,"A",{href:!0});var Vdt=s(rO);oor=r(Vdt,"TFFlaubertWithLMHeadModel"),Vdt.forEach(t),ror=r(WAe," (FlauBERT model)"),WAe.forEach(t),tor=i(U),tT=n(U,"LI",{});var QAe=s(tT);Ige=n(QAe,"STRONG",{});var zdt=s(Ige);aor=r(zdt,"funnel"),zdt.forEach(t),nor=r(QAe," \u2014 "),tO=n(QAe,"A",{href:!0});var Wdt=s(tO);sor=r(Wdt,"TFFunnelForPreTraining"),Wdt.forEach(t),lor=r(QAe," (Funnel Transformer model)"),QAe.forEach(t),ior=i(U),aT=n(U,"LI",{});var HAe=s(aT);jge=n(HAe,"STRONG",{});var Qdt=s(jge);dor=r(Qdt,"gpt2"),Qdt.forEach(t),cor=r(HAe," \u2014 "),aO=n(HAe,"A",{href:!0});var Hdt=s(aO);mor=r(Hdt,"TFGPT2LMHeadModel"),Hdt.forEach(t),gor=r(HAe," (OpenAI GPT-2 model)"),HAe.forEach(t),hor=i(U),nT=n(U,"LI",{});var UAe=s(nT);Dge=n(UAe,"STRONG",{});var Udt=s(Dge);por=r(Udt,"layoutlm"),Udt.forEach(t),_or=r(UAe," \u2014 "),nO=n(UAe,"A",{href:!0});var Jdt=s(nO);uor=r(Jdt,"TFLayoutLMForMaskedLM"),Jdt.forEach(t),bor=r(UAe," (LayoutLM model)"),UAe.forEach(t),vor=i(U),sT=n(U,"LI",{});var JAe=s(sT);Nge=n(JAe,"STRONG",{});var Ydt=s(Nge);Tor=r(Ydt,"lxmert"),Ydt.forEach(t),For=r(JAe," \u2014 "),sO=n(JAe,"A",{href:!0});var Kdt=s(sO);Cor=r(Kdt,"TFLxmertForPreTraining"),Kdt.forEach(t),Mor=r(JAe," (LXMERT model)"),JAe.forEach(t),Eor=i(U),lT=n(U,"LI",{});var YAe=s(lT);qge=n(YAe,"STRONG",{});var Zdt=s(qge);yor=r(Zdt,"mobilebert"),Zdt.forEach(t),wor=r(YAe," \u2014 "),lO=n(YAe,"A",{href:!0});var ect=s(lO);Aor=r(ect,"TFMobileBertForPreTraining"),ect.forEach(t),Lor=r(YAe," (MobileBERT model)"),YAe.forEach(t),Bor=i(U),iT=n(U,"LI",{});var KAe=s(iT);Oge=n(KAe,"STRONG",{});var oct=s(Oge);xor=r(oct,"mpnet"),oct.forEach(t),kor=r(KAe," \u2014 "),iO=n(KAe,"A",{href:!0});var rct=s(iO);Ror=r(rct,"TFMPNetForMaskedLM"),rct.forEach(t),Sor=r(KAe," (MPNet model)"),KAe.forEach(t),Por=i(U),dT=n(U,"LI",{});var ZAe=s(dT);Gge=n(ZAe,"STRONG",{});var tct=s(Gge);$or=r(tct,"openai-gpt"),tct.forEach(t),Ior=r(ZAe," \u2014 "),dO=n(ZAe,"A",{href:!0});var act=s(dO);jor=r(act,"TFOpenAIGPTLMHeadModel"),act.forEach(t),Dor=r(ZAe," (OpenAI GPT model)"),ZAe.forEach(t),Nor=i(U),cT=n(U,"LI",{});var eLe=s(cT);Xge=n(eLe,"STRONG",{});var nct=s(Xge);qor=r(nct,"roberta"),nct.forEach(t),Oor=r(eLe," \u2014 "),cO=n(eLe,"A",{href:!0});var sct=s(cO);Gor=r(sct,"TFRobertaForMaskedLM"),sct.forEach(t),Xor=r(eLe," (RoBERTa model)"),eLe.forEach(t),Vor=i(U),fT=n(U,"LI",{});var oLe=s(fT);Vge=n(oLe,"STRONG",{});var lct=s(Vge);zor=r(lct,"t5"),lct.forEach(t),Wor=r(oLe," \u2014 "),fO=n(oLe,"A",{href:!0});var ict=s(fO);Qor=r(ict,"TFT5ForConditionalGeneration"),ict.forEach(t),Hor=r(oLe," (T5 model)"),oLe.forEach(t),Uor=i(U),mT=n(U,"LI",{});var rLe=s(mT);zge=n(rLe,"STRONG",{});var dct=s(zge);Jor=r(dct,"tapas"),dct.forEach(t),Yor=r(rLe," \u2014 "),mO=n(rLe,"A",{href:!0});var cct=s(mO);Kor=r(cct,"TFTapasForMaskedLM"),cct.forEach(t),Zor=r(rLe," (TAPAS model)"),rLe.forEach(t),err=i(U),gT=n(U,"LI",{});var tLe=s(gT);Wge=n(tLe,"STRONG",{});var fct=s(Wge);orr=r(fct,"transfo-xl"),fct.forEach(t),rrr=r(tLe," \u2014 "),gO=n(tLe,"A",{href:!0});var mct=s(gO);trr=r(mct,"TFTransfoXLLMHeadModel"),mct.forEach(t),arr=r(tLe," (Transformer-XL model)"),tLe.forEach(t),nrr=i(U),hT=n(U,"LI",{});var aLe=s(hT);Qge=n(aLe,"STRONG",{});var gct=s(Qge);srr=r(gct,"xlm"),gct.forEach(t),lrr=r(aLe," \u2014 "),hO=n(aLe,"A",{href:!0});var hct=s(hO);irr=r(hct,"TFXLMWithLMHeadModel"),hct.forEach(t),drr=r(aLe," (XLM model)"),aLe.forEach(t),crr=i(U),pT=n(U,"LI",{});var nLe=s(pT);Hge=n(nLe,"STRONG",{});var pct=s(Hge);frr=r(pct,"xlm-roberta"),pct.forEach(t),mrr=r(nLe," \u2014 "),pO=n(nLe,"A",{href:!0});var _ct=s(pO);grr=r(_ct,"TFXLMRobertaForMaskedLM"),_ct.forEach(t),hrr=r(nLe," (XLM-RoBERTa model)"),nLe.forEach(t),prr=i(U),_T=n(U,"LI",{});var sLe=s(_T);Uge=n(sLe,"STRONG",{});var uct=s(Uge);_rr=r(uct,"xlnet"),uct.forEach(t),urr=r(sLe," \u2014 "),_O=n(sLe,"A",{href:!0});var bct=s(_O);brr=r(bct,"TFXLNetLMHeadModel"),bct.forEach(t),vrr=r(sLe," (XLNet model)"),sLe.forEach(t),U.forEach(t),Trr=i(_a),Jge=n(_a,"P",{});var vct=s(Jge);Frr=r(vct,"Examples:"),vct.forEach(t),Crr=i(_a),m(Vy.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),Ake=i(c),vc=n(c,"H2",{class:!0});var DSe=s(vc);uT=n(DSe,"A",{id:!0,class:!0,href:!0});var Tct=s(uT);Yge=n(Tct,"SPAN",{});var Fct=s(Yge);m(zy.$$.fragment,Fct),Fct.forEach(t),Tct.forEach(t),Mrr=i(DSe),Kge=n(DSe,"SPAN",{});var Cct=s(Kge);Err=r(Cct,"TFAutoModelForCausalLM"),Cct.forEach(t),DSe.forEach(t),Lke=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(Wy.$$.fragment,Xl),yrr=i(Xl),Tc=n(Xl,"P",{});var LW=s(Tc);wrr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zge=n(LW,"CODE",{});var Mct=s(Zge);Arr=r(Mct,"from_pretrained()"),Mct.forEach(t),Lrr=r(LW,"class method or the "),ehe=n(LW,"CODE",{});var Ect=s(ehe);Brr=r(Ect,"from_config()"),Ect.forEach(t),xrr=r(LW,`class
method.`),LW.forEach(t),krr=i(Xl),Qy=n(Xl,"P",{});var NSe=s(Qy);Rrr=r(NSe,"This class cannot be instantiated directly using "),ohe=n(NSe,"CODE",{});var yct=s(ohe);Srr=r(yct,"__init__()"),yct.forEach(t),Prr=r(NSe," (throws an error)."),NSe.forEach(t),$rr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(Hy.$$.fragment,Vl),Irr=i(Vl),rhe=n(Vl,"P",{});var wct=s(rhe);jrr=r(wct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wct.forEach(t),Drr=i(Vl),Fc=n(Vl,"P",{});var BW=s(Fc);Nrr=r(BW,`Note:
Loading a model from its configuration file does `),the=n(BW,"STRONG",{});var Act=s(the);qrr=r(Act,"not"),Act.forEach(t),Orr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ahe=n(BW,"CODE",{});var Lct=s(ahe);Grr=r(Lct,"from_pretrained()"),Lct.forEach(t),Xrr=r(BW,"to load the model weights."),BW.forEach(t),Vrr=i(Vl),nhe=n(Vl,"P",{});var Bct=s(nhe);zrr=r(Bct,"Examples:"),Bct.forEach(t),Wrr=i(Vl),m(Uy.$$.fragment,Vl),Vl.forEach(t),Qrr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(Jy.$$.fragment,ua),Hrr=i(ua),she=n(ua,"P",{});var xct=s(she);Urr=r(xct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xct.forEach(t),Jrr=i(ua),bn=n(ua,"P",{});var A4=s(bn);Yrr=r(A4,"The model class to instantiate is selected based on the "),lhe=n(A4,"CODE",{});var kct=s(lhe);Krr=r(kct,"model_type"),kct.forEach(t),Zrr=r(A4,` property of the config object (either
passed as an argument or loaded from `),ihe=n(A4,"CODE",{});var Rct=s(ihe);etr=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),otr=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(A4,"CODE",{});var Sct=s(dhe);rtr=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),ttr=r(A4,":"),A4.forEach(t),atr=i(ua),_e=n(ua,"UL",{});var Ee=s(_e);bT=n(Ee,"LI",{});var lLe=s(bT);che=n(lLe,"STRONG",{});var Pct=s(che);ntr=r(Pct,"bert"),Pct.forEach(t),str=r(lLe," \u2014 "),uO=n(lLe,"A",{href:!0});var $ct=s(uO);ltr=r($ct,"TFBertLMHeadModel"),$ct.forEach(t),itr=r(lLe," (BERT model)"),lLe.forEach(t),dtr=i(Ee),vT=n(Ee,"LI",{});var iLe=s(vT);fhe=n(iLe,"STRONG",{});var Ict=s(fhe);ctr=r(Ict,"ctrl"),Ict.forEach(t),ftr=r(iLe," \u2014 "),bO=n(iLe,"A",{href:!0});var jct=s(bO);mtr=r(jct,"TFCTRLLMHeadModel"),jct.forEach(t),gtr=r(iLe," (CTRL model)"),iLe.forEach(t),htr=i(Ee),TT=n(Ee,"LI",{});var dLe=s(TT);mhe=n(dLe,"STRONG",{});var Dct=s(mhe);ptr=r(Dct,"gpt2"),Dct.forEach(t),_tr=r(dLe," \u2014 "),vO=n(dLe,"A",{href:!0});var Nct=s(vO);utr=r(Nct,"TFGPT2LMHeadModel"),Nct.forEach(t),btr=r(dLe," (OpenAI GPT-2 model)"),dLe.forEach(t),vtr=i(Ee),FT=n(Ee,"LI",{});var cLe=s(FT);ghe=n(cLe,"STRONG",{});var qct=s(ghe);Ttr=r(qct,"openai-gpt"),qct.forEach(t),Ftr=r(cLe," \u2014 "),TO=n(cLe,"A",{href:!0});var Oct=s(TO);Ctr=r(Oct,"TFOpenAIGPTLMHeadModel"),Oct.forEach(t),Mtr=r(cLe," (OpenAI GPT model)"),cLe.forEach(t),Etr=i(Ee),CT=n(Ee,"LI",{});var fLe=s(CT);hhe=n(fLe,"STRONG",{});var Gct=s(hhe);ytr=r(Gct,"rembert"),Gct.forEach(t),wtr=r(fLe," \u2014 "),FO=n(fLe,"A",{href:!0});var Xct=s(FO);Atr=r(Xct,"TFRemBertForCausalLM"),Xct.forEach(t),Ltr=r(fLe," (RemBERT model)"),fLe.forEach(t),Btr=i(Ee),MT=n(Ee,"LI",{});var mLe=s(MT);phe=n(mLe,"STRONG",{});var Vct=s(phe);xtr=r(Vct,"roberta"),Vct.forEach(t),ktr=r(mLe," \u2014 "),CO=n(mLe,"A",{href:!0});var zct=s(CO);Rtr=r(zct,"TFRobertaForCausalLM"),zct.forEach(t),Str=r(mLe," (RoBERTa model)"),mLe.forEach(t),Ptr=i(Ee),ET=n(Ee,"LI",{});var gLe=s(ET);_he=n(gLe,"STRONG",{});var Wct=s(_he);$tr=r(Wct,"roformer"),Wct.forEach(t),Itr=r(gLe," \u2014 "),MO=n(gLe,"A",{href:!0});var Qct=s(MO);jtr=r(Qct,"TFRoFormerForCausalLM"),Qct.forEach(t),Dtr=r(gLe," (RoFormer model)"),gLe.forEach(t),Ntr=i(Ee),yT=n(Ee,"LI",{});var hLe=s(yT);uhe=n(hLe,"STRONG",{});var Hct=s(uhe);qtr=r(Hct,"transfo-xl"),Hct.forEach(t),Otr=r(hLe," \u2014 "),EO=n(hLe,"A",{href:!0});var Uct=s(EO);Gtr=r(Uct,"TFTransfoXLLMHeadModel"),Uct.forEach(t),Xtr=r(hLe," (Transformer-XL model)"),hLe.forEach(t),Vtr=i(Ee),wT=n(Ee,"LI",{});var pLe=s(wT);bhe=n(pLe,"STRONG",{});var Jct=s(bhe);ztr=r(Jct,"xlm"),Jct.forEach(t),Wtr=r(pLe," \u2014 "),yO=n(pLe,"A",{href:!0});var Yct=s(yO);Qtr=r(Yct,"TFXLMWithLMHeadModel"),Yct.forEach(t),Htr=r(pLe," (XLM model)"),pLe.forEach(t),Utr=i(Ee),AT=n(Ee,"LI",{});var _Le=s(AT);vhe=n(_Le,"STRONG",{});var Kct=s(vhe);Jtr=r(Kct,"xlnet"),Kct.forEach(t),Ytr=r(_Le," \u2014 "),wO=n(_Le,"A",{href:!0});var Zct=s(wO);Ktr=r(Zct,"TFXLNetLMHeadModel"),Zct.forEach(t),Ztr=r(_Le," (XLNet model)"),_Le.forEach(t),Ee.forEach(t),ear=i(ua),The=n(ua,"P",{});var eft=s(The);oar=r(eft,"Examples:"),eft.forEach(t),rar=i(ua),m(Yy.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),Bke=i(c),Cc=n(c,"H2",{class:!0});var qSe=s(Cc);LT=n(qSe,"A",{id:!0,class:!0,href:!0});var oft=s(LT);Fhe=n(oft,"SPAN",{});var rft=s(Fhe);m(Ky.$$.fragment,rft),rft.forEach(t),oft.forEach(t),tar=i(qSe),Che=n(qSe,"SPAN",{});var tft=s(Che);aar=r(tft,"TFAutoModelForImageClassification"),tft.forEach(t),qSe.forEach(t),xke=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(Zy.$$.fragment,zl),nar=i(zl),Mc=n(zl,"P",{});var xW=s(Mc);sar=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mhe=n(xW,"CODE",{});var aft=s(Mhe);lar=r(aft,"from_pretrained()"),aft.forEach(t),iar=r(xW,"class method or the "),Ehe=n(xW,"CODE",{});var nft=s(Ehe);dar=r(nft,"from_config()"),nft.forEach(t),car=r(xW,`class
method.`),xW.forEach(t),far=i(zl),ew=n(zl,"P",{});var OSe=s(ew);mar=r(OSe,"This class cannot be instantiated directly using "),yhe=n(OSe,"CODE",{});var sft=s(yhe);gar=r(sft,"__init__()"),sft.forEach(t),har=r(OSe," (throws an error)."),OSe.forEach(t),par=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(ow.$$.fragment,Wl),_ar=i(Wl),whe=n(Wl,"P",{});var lft=s(whe);uar=r(lft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lft.forEach(t),bar=i(Wl),Ec=n(Wl,"P",{});var kW=s(Ec);Tar=r(kW,`Note:
Loading a model from its configuration file does `),Ahe=n(kW,"STRONG",{});var ift=s(Ahe);Far=r(ift,"not"),ift.forEach(t),Car=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lhe=n(kW,"CODE",{});var dft=s(Lhe);Mar=r(dft,"from_pretrained()"),dft.forEach(t),Ear=r(kW,"to load the model weights."),kW.forEach(t),yar=i(Wl),Bhe=n(Wl,"P",{});var cft=s(Bhe);war=r(cft,"Examples:"),cft.forEach(t),Aar=i(Wl),m(rw.$$.fragment,Wl),Wl.forEach(t),Lar=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(tw.$$.fragment,ba),Bar=i(ba),xhe=n(ba,"P",{});var fft=s(xhe);xar=r(fft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fft.forEach(t),kar=i(ba),vn=n(ba,"P",{});var L4=s(vn);Rar=r(L4,"The model class to instantiate is selected based on the "),khe=n(L4,"CODE",{});var mft=s(khe);Sar=r(mft,"model_type"),mft.forEach(t),Par=r(L4,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(L4,"CODE",{});var gft=s(Rhe);$ar=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),Iar=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(L4,"CODE",{});var hft=s(She);jar=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),Dar=r(L4,":"),L4.forEach(t),Nar=i(ba),aw=n(ba,"UL",{});var GSe=s(aw);BT=n(GSe,"LI",{});var uLe=s(BT);Phe=n(uLe,"STRONG",{});var pft=s(Phe);qar=r(pft,"convnext"),pft.forEach(t),Oar=r(uLe," \u2014 "),AO=n(uLe,"A",{href:!0});var _ft=s(AO);Gar=r(_ft,"TFConvNextForImageClassification"),_ft.forEach(t),Xar=r(uLe," (ConvNext model)"),uLe.forEach(t),Var=i(GSe),xT=n(GSe,"LI",{});var bLe=s(xT);$he=n(bLe,"STRONG",{});var uft=s($he);zar=r(uft,"vit"),uft.forEach(t),War=r(bLe," \u2014 "),LO=n(bLe,"A",{href:!0});var bft=s(LO);Qar=r(bft,"TFViTForImageClassification"),bft.forEach(t),Har=r(bLe," (ViT model)"),bLe.forEach(t),GSe.forEach(t),Uar=i(ba),Ihe=n(ba,"P",{});var vft=s(Ihe);Jar=r(vft,"Examples:"),vft.forEach(t),Yar=i(ba),m(nw.$$.fragment,ba),ba.forEach(t),zl.forEach(t),kke=i(c),yc=n(c,"H2",{class:!0});var XSe=s(yc);kT=n(XSe,"A",{id:!0,class:!0,href:!0});var Tft=s(kT);jhe=n(Tft,"SPAN",{});var Fft=s(jhe);m(sw.$$.fragment,Fft),Fft.forEach(t),Tft.forEach(t),Kar=i(XSe),Dhe=n(XSe,"SPAN",{});var Cft=s(Dhe);Zar=r(Cft,"TFAutoModelForMaskedLM"),Cft.forEach(t),XSe.forEach(t),Rke=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(lw.$$.fragment,Ql),enr=i(Ql),wc=n(Ql,"P",{});var RW=s(wc);onr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nhe=n(RW,"CODE",{});var Mft=s(Nhe);rnr=r(Mft,"from_pretrained()"),Mft.forEach(t),tnr=r(RW,"class method or the "),qhe=n(RW,"CODE",{});var Eft=s(qhe);anr=r(Eft,"from_config()"),Eft.forEach(t),nnr=r(RW,`class
method.`),RW.forEach(t),snr=i(Ql),iw=n(Ql,"P",{});var VSe=s(iw);lnr=r(VSe,"This class cannot be instantiated directly using "),Ohe=n(VSe,"CODE",{});var yft=s(Ohe);inr=r(yft,"__init__()"),yft.forEach(t),dnr=r(VSe," (throws an error)."),VSe.forEach(t),cnr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(dw.$$.fragment,Hl),fnr=i(Hl),Ghe=n(Hl,"P",{});var wft=s(Ghe);mnr=r(wft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wft.forEach(t),gnr=i(Hl),Ac=n(Hl,"P",{});var SW=s(Ac);hnr=r(SW,`Note:
Loading a model from its configuration file does `),Xhe=n(SW,"STRONG",{});var Aft=s(Xhe);pnr=r(Aft,"not"),Aft.forEach(t),_nr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vhe=n(SW,"CODE",{});var Lft=s(Vhe);unr=r(Lft,"from_pretrained()"),Lft.forEach(t),bnr=r(SW,"to load the model weights."),SW.forEach(t),vnr=i(Hl),zhe=n(Hl,"P",{});var Bft=s(zhe);Tnr=r(Bft,"Examples:"),Bft.forEach(t),Fnr=i(Hl),m(cw.$$.fragment,Hl),Hl.forEach(t),Cnr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(fw.$$.fragment,va),Mnr=i(va),Whe=n(va,"P",{});var xft=s(Whe);Enr=r(xft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xft.forEach(t),ynr=i(va),Tn=n(va,"P",{});var B4=s(Tn);wnr=r(B4,"The model class to instantiate is selected based on the "),Qhe=n(B4,"CODE",{});var kft=s(Qhe);Anr=r(kft,"model_type"),kft.forEach(t),Lnr=r(B4,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(B4,"CODE",{});var Rft=s(Hhe);Bnr=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),xnr=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(B4,"CODE",{});var Sft=s(Uhe);knr=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Rnr=r(B4,":"),B4.forEach(t),Snr=i(va),Y=n(va,"UL",{});var ee=s(Y);RT=n(ee,"LI",{});var vLe=s(RT);Jhe=n(vLe,"STRONG",{});var Pft=s(Jhe);Pnr=r(Pft,"albert"),Pft.forEach(t),$nr=r(vLe," \u2014 "),BO=n(vLe,"A",{href:!0});var $ft=s(BO);Inr=r($ft,"TFAlbertForMaskedLM"),$ft.forEach(t),jnr=r(vLe," (ALBERT model)"),vLe.forEach(t),Dnr=i(ee),ST=n(ee,"LI",{});var TLe=s(ST);Yhe=n(TLe,"STRONG",{});var Ift=s(Yhe);Nnr=r(Ift,"bert"),Ift.forEach(t),qnr=r(TLe," \u2014 "),xO=n(TLe,"A",{href:!0});var jft=s(xO);Onr=r(jft,"TFBertForMaskedLM"),jft.forEach(t),Gnr=r(TLe," (BERT model)"),TLe.forEach(t),Xnr=i(ee),PT=n(ee,"LI",{});var FLe=s(PT);Khe=n(FLe,"STRONG",{});var Dft=s(Khe);Vnr=r(Dft,"camembert"),Dft.forEach(t),znr=r(FLe," \u2014 "),kO=n(FLe,"A",{href:!0});var Nft=s(kO);Wnr=r(Nft,"TFCamembertForMaskedLM"),Nft.forEach(t),Qnr=r(FLe," (CamemBERT model)"),FLe.forEach(t),Hnr=i(ee),$T=n(ee,"LI",{});var CLe=s($T);Zhe=n(CLe,"STRONG",{});var qft=s(Zhe);Unr=r(qft,"convbert"),qft.forEach(t),Jnr=r(CLe," \u2014 "),RO=n(CLe,"A",{href:!0});var Oft=s(RO);Ynr=r(Oft,"TFConvBertForMaskedLM"),Oft.forEach(t),Knr=r(CLe," (ConvBERT model)"),CLe.forEach(t),Znr=i(ee),IT=n(ee,"LI",{});var MLe=s(IT);epe=n(MLe,"STRONG",{});var Gft=s(epe);esr=r(Gft,"deberta"),Gft.forEach(t),osr=r(MLe," \u2014 "),SO=n(MLe,"A",{href:!0});var Xft=s(SO);rsr=r(Xft,"TFDebertaForMaskedLM"),Xft.forEach(t),tsr=r(MLe," (DeBERTa model)"),MLe.forEach(t),asr=i(ee),jT=n(ee,"LI",{});var ELe=s(jT);ope=n(ELe,"STRONG",{});var Vft=s(ope);nsr=r(Vft,"deberta-v2"),Vft.forEach(t),ssr=r(ELe," \u2014 "),PO=n(ELe,"A",{href:!0});var zft=s(PO);lsr=r(zft,"TFDebertaV2ForMaskedLM"),zft.forEach(t),isr=r(ELe," (DeBERTa-v2 model)"),ELe.forEach(t),dsr=i(ee),DT=n(ee,"LI",{});var yLe=s(DT);rpe=n(yLe,"STRONG",{});var Wft=s(rpe);csr=r(Wft,"distilbert"),Wft.forEach(t),fsr=r(yLe," \u2014 "),$O=n(yLe,"A",{href:!0});var Qft=s($O);msr=r(Qft,"TFDistilBertForMaskedLM"),Qft.forEach(t),gsr=r(yLe," (DistilBERT model)"),yLe.forEach(t),hsr=i(ee),NT=n(ee,"LI",{});var wLe=s(NT);tpe=n(wLe,"STRONG",{});var Hft=s(tpe);psr=r(Hft,"electra"),Hft.forEach(t),_sr=r(wLe," \u2014 "),IO=n(wLe,"A",{href:!0});var Uft=s(IO);usr=r(Uft,"TFElectraForMaskedLM"),Uft.forEach(t),bsr=r(wLe," (ELECTRA model)"),wLe.forEach(t),vsr=i(ee),qT=n(ee,"LI",{});var ALe=s(qT);ape=n(ALe,"STRONG",{});var Jft=s(ape);Tsr=r(Jft,"flaubert"),Jft.forEach(t),Fsr=r(ALe," \u2014 "),jO=n(ALe,"A",{href:!0});var Yft=s(jO);Csr=r(Yft,"TFFlaubertWithLMHeadModel"),Yft.forEach(t),Msr=r(ALe," (FlauBERT model)"),ALe.forEach(t),Esr=i(ee),OT=n(ee,"LI",{});var LLe=s(OT);npe=n(LLe,"STRONG",{});var Kft=s(npe);ysr=r(Kft,"funnel"),Kft.forEach(t),wsr=r(LLe," \u2014 "),DO=n(LLe,"A",{href:!0});var Zft=s(DO);Asr=r(Zft,"TFFunnelForMaskedLM"),Zft.forEach(t),Lsr=r(LLe," (Funnel Transformer model)"),LLe.forEach(t),Bsr=i(ee),GT=n(ee,"LI",{});var BLe=s(GT);spe=n(BLe,"STRONG",{});var emt=s(spe);xsr=r(emt,"layoutlm"),emt.forEach(t),ksr=r(BLe," \u2014 "),NO=n(BLe,"A",{href:!0});var omt=s(NO);Rsr=r(omt,"TFLayoutLMForMaskedLM"),omt.forEach(t),Ssr=r(BLe," (LayoutLM model)"),BLe.forEach(t),Psr=i(ee),XT=n(ee,"LI",{});var xLe=s(XT);lpe=n(xLe,"STRONG",{});var rmt=s(lpe);$sr=r(rmt,"longformer"),rmt.forEach(t),Isr=r(xLe," \u2014 "),qO=n(xLe,"A",{href:!0});var tmt=s(qO);jsr=r(tmt,"TFLongformerForMaskedLM"),tmt.forEach(t),Dsr=r(xLe," (Longformer model)"),xLe.forEach(t),Nsr=i(ee),VT=n(ee,"LI",{});var kLe=s(VT);ipe=n(kLe,"STRONG",{});var amt=s(ipe);qsr=r(amt,"mobilebert"),amt.forEach(t),Osr=r(kLe," \u2014 "),OO=n(kLe,"A",{href:!0});var nmt=s(OO);Gsr=r(nmt,"TFMobileBertForMaskedLM"),nmt.forEach(t),Xsr=r(kLe," (MobileBERT model)"),kLe.forEach(t),Vsr=i(ee),zT=n(ee,"LI",{});var RLe=s(zT);dpe=n(RLe,"STRONG",{});var smt=s(dpe);zsr=r(smt,"mpnet"),smt.forEach(t),Wsr=r(RLe," \u2014 "),GO=n(RLe,"A",{href:!0});var lmt=s(GO);Qsr=r(lmt,"TFMPNetForMaskedLM"),lmt.forEach(t),Hsr=r(RLe," (MPNet model)"),RLe.forEach(t),Usr=i(ee),WT=n(ee,"LI",{});var SLe=s(WT);cpe=n(SLe,"STRONG",{});var imt=s(cpe);Jsr=r(imt,"rembert"),imt.forEach(t),Ysr=r(SLe," \u2014 "),XO=n(SLe,"A",{href:!0});var dmt=s(XO);Ksr=r(dmt,"TFRemBertForMaskedLM"),dmt.forEach(t),Zsr=r(SLe," (RemBERT model)"),SLe.forEach(t),elr=i(ee),QT=n(ee,"LI",{});var PLe=s(QT);fpe=n(PLe,"STRONG",{});var cmt=s(fpe);olr=r(cmt,"roberta"),cmt.forEach(t),rlr=r(PLe," \u2014 "),VO=n(PLe,"A",{href:!0});var fmt=s(VO);tlr=r(fmt,"TFRobertaForMaskedLM"),fmt.forEach(t),alr=r(PLe," (RoBERTa model)"),PLe.forEach(t),nlr=i(ee),HT=n(ee,"LI",{});var $Le=s(HT);mpe=n($Le,"STRONG",{});var mmt=s(mpe);slr=r(mmt,"roformer"),mmt.forEach(t),llr=r($Le," \u2014 "),zO=n($Le,"A",{href:!0});var gmt=s(zO);ilr=r(gmt,"TFRoFormerForMaskedLM"),gmt.forEach(t),dlr=r($Le," (RoFormer model)"),$Le.forEach(t),clr=i(ee),UT=n(ee,"LI",{});var ILe=s(UT);gpe=n(ILe,"STRONG",{});var hmt=s(gpe);flr=r(hmt,"tapas"),hmt.forEach(t),mlr=r(ILe," \u2014 "),WO=n(ILe,"A",{href:!0});var pmt=s(WO);glr=r(pmt,"TFTapasForMaskedLM"),pmt.forEach(t),hlr=r(ILe," (TAPAS model)"),ILe.forEach(t),plr=i(ee),JT=n(ee,"LI",{});var jLe=s(JT);hpe=n(jLe,"STRONG",{});var _mt=s(hpe);_lr=r(_mt,"xlm"),_mt.forEach(t),ulr=r(jLe," \u2014 "),QO=n(jLe,"A",{href:!0});var umt=s(QO);blr=r(umt,"TFXLMWithLMHeadModel"),umt.forEach(t),vlr=r(jLe," (XLM model)"),jLe.forEach(t),Tlr=i(ee),YT=n(ee,"LI",{});var DLe=s(YT);ppe=n(DLe,"STRONG",{});var bmt=s(ppe);Flr=r(bmt,"xlm-roberta"),bmt.forEach(t),Clr=r(DLe," \u2014 "),HO=n(DLe,"A",{href:!0});var vmt=s(HO);Mlr=r(vmt,"TFXLMRobertaForMaskedLM"),vmt.forEach(t),Elr=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),ee.forEach(t),ylr=i(va),_pe=n(va,"P",{});var Tmt=s(_pe);wlr=r(Tmt,"Examples:"),Tmt.forEach(t),Alr=i(va),m(mw.$$.fragment,va),va.forEach(t),Ql.forEach(t),Ske=i(c),Lc=n(c,"H2",{class:!0});var zSe=s(Lc);KT=n(zSe,"A",{id:!0,class:!0,href:!0});var Fmt=s(KT);upe=n(Fmt,"SPAN",{});var Cmt=s(upe);m(gw.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),Llr=i(zSe),bpe=n(zSe,"SPAN",{});var Mmt=s(bpe);Blr=r(Mmt,"TFAutoModelForSeq2SeqLM"),Mmt.forEach(t),zSe.forEach(t),Pke=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(hw.$$.fragment,Ul),xlr=i(Ul),Bc=n(Ul,"P",{});var PW=s(Bc);klr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vpe=n(PW,"CODE",{});var Emt=s(vpe);Rlr=r(Emt,"from_pretrained()"),Emt.forEach(t),Slr=r(PW,"class method or the "),Tpe=n(PW,"CODE",{});var ymt=s(Tpe);Plr=r(ymt,"from_config()"),ymt.forEach(t),$lr=r(PW,`class
method.`),PW.forEach(t),Ilr=i(Ul),pw=n(Ul,"P",{});var WSe=s(pw);jlr=r(WSe,"This class cannot be instantiated directly using "),Fpe=n(WSe,"CODE",{});var wmt=s(Fpe);Dlr=r(wmt,"__init__()"),wmt.forEach(t),Nlr=r(WSe," (throws an error)."),WSe.forEach(t),qlr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(_w.$$.fragment,Jl),Olr=i(Jl),Cpe=n(Jl,"P",{});var Amt=s(Cpe);Glr=r(Amt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Amt.forEach(t),Xlr=i(Jl),xc=n(Jl,"P",{});var $W=s(xc);Vlr=r($W,`Note:
Loading a model from its configuration file does `),Mpe=n($W,"STRONG",{});var Lmt=s(Mpe);zlr=r(Lmt,"not"),Lmt.forEach(t),Wlr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=n($W,"CODE",{});var Bmt=s(Epe);Qlr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),Hlr=r($W,"to load the model weights."),$W.forEach(t),Ulr=i(Jl),ype=n(Jl,"P",{});var xmt=s(ype);Jlr=r(xmt,"Examples:"),xmt.forEach(t),Ylr=i(Jl),m(uw.$$.fragment,Jl),Jl.forEach(t),Klr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(bw.$$.fragment,Ta),Zlr=i(Ta),wpe=n(Ta,"P",{});var kmt=s(wpe);eir=r(kmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kmt.forEach(t),oir=i(Ta),Fn=n(Ta,"P",{});var x4=s(Fn);rir=r(x4,"The model class to instantiate is selected based on the "),Ape=n(x4,"CODE",{});var Rmt=s(Ape);tir=r(Rmt,"model_type"),Rmt.forEach(t),air=r(x4,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(x4,"CODE",{});var Smt=s(Lpe);nir=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),sir=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(x4,"CODE",{});var Pmt=s(Bpe);lir=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),iir=r(x4,":"),x4.forEach(t),dir=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);ZT=n(ye,"LI",{});var NLe=s(ZT);xpe=n(NLe,"STRONG",{});var $mt=s(xpe);cir=r($mt,"bart"),$mt.forEach(t),fir=r(NLe," \u2014 "),UO=n(NLe,"A",{href:!0});var Imt=s(UO);mir=r(Imt,"TFBartForConditionalGeneration"),Imt.forEach(t),gir=r(NLe," (BART model)"),NLe.forEach(t),hir=i(ye),e7=n(ye,"LI",{});var qLe=s(e7);kpe=n(qLe,"STRONG",{});var jmt=s(kpe);pir=r(jmt,"blenderbot"),jmt.forEach(t),_ir=r(qLe," \u2014 "),JO=n(qLe,"A",{href:!0});var Dmt=s(JO);uir=r(Dmt,"TFBlenderbotForConditionalGeneration"),Dmt.forEach(t),bir=r(qLe," (Blenderbot model)"),qLe.forEach(t),vir=i(ye),o7=n(ye,"LI",{});var OLe=s(o7);Rpe=n(OLe,"STRONG",{});var Nmt=s(Rpe);Tir=r(Nmt,"blenderbot-small"),Nmt.forEach(t),Fir=r(OLe," \u2014 "),YO=n(OLe,"A",{href:!0});var qmt=s(YO);Cir=r(qmt,"TFBlenderbotSmallForConditionalGeneration"),qmt.forEach(t),Mir=r(OLe," (BlenderbotSmall model)"),OLe.forEach(t),Eir=i(ye),r7=n(ye,"LI",{});var GLe=s(r7);Spe=n(GLe,"STRONG",{});var Omt=s(Spe);yir=r(Omt,"encoder-decoder"),Omt.forEach(t),wir=r(GLe," \u2014 "),KO=n(GLe,"A",{href:!0});var Gmt=s(KO);Air=r(Gmt,"TFEncoderDecoderModel"),Gmt.forEach(t),Lir=r(GLe," (Encoder decoder model)"),GLe.forEach(t),Bir=i(ye),t7=n(ye,"LI",{});var XLe=s(t7);Ppe=n(XLe,"STRONG",{});var Xmt=s(Ppe);xir=r(Xmt,"led"),Xmt.forEach(t),kir=r(XLe," \u2014 "),ZO=n(XLe,"A",{href:!0});var Vmt=s(ZO);Rir=r(Vmt,"TFLEDForConditionalGeneration"),Vmt.forEach(t),Sir=r(XLe," (LED model)"),XLe.forEach(t),Pir=i(ye),a7=n(ye,"LI",{});var VLe=s(a7);$pe=n(VLe,"STRONG",{});var zmt=s($pe);$ir=r(zmt,"marian"),zmt.forEach(t),Iir=r(VLe," \u2014 "),eG=n(VLe,"A",{href:!0});var Wmt=s(eG);jir=r(Wmt,"TFMarianMTModel"),Wmt.forEach(t),Dir=r(VLe," (Marian model)"),VLe.forEach(t),Nir=i(ye),n7=n(ye,"LI",{});var zLe=s(n7);Ipe=n(zLe,"STRONG",{});var Qmt=s(Ipe);qir=r(Qmt,"mbart"),Qmt.forEach(t),Oir=r(zLe," \u2014 "),oG=n(zLe,"A",{href:!0});var Hmt=s(oG);Gir=r(Hmt,"TFMBartForConditionalGeneration"),Hmt.forEach(t),Xir=r(zLe," (mBART model)"),zLe.forEach(t),Vir=i(ye),s7=n(ye,"LI",{});var WLe=s(s7);jpe=n(WLe,"STRONG",{});var Umt=s(jpe);zir=r(Umt,"mt5"),Umt.forEach(t),Wir=r(WLe," \u2014 "),rG=n(WLe,"A",{href:!0});var Jmt=s(rG);Qir=r(Jmt,"TFMT5ForConditionalGeneration"),Jmt.forEach(t),Hir=r(WLe," (mT5 model)"),WLe.forEach(t),Uir=i(ye),l7=n(ye,"LI",{});var QLe=s(l7);Dpe=n(QLe,"STRONG",{});var Ymt=s(Dpe);Jir=r(Ymt,"pegasus"),Ymt.forEach(t),Yir=r(QLe," \u2014 "),tG=n(QLe,"A",{href:!0});var Kmt=s(tG);Kir=r(Kmt,"TFPegasusForConditionalGeneration"),Kmt.forEach(t),Zir=r(QLe," (Pegasus model)"),QLe.forEach(t),edr=i(ye),i7=n(ye,"LI",{});var HLe=s(i7);Npe=n(HLe,"STRONG",{});var Zmt=s(Npe);odr=r(Zmt,"t5"),Zmt.forEach(t),rdr=r(HLe," \u2014 "),aG=n(HLe,"A",{href:!0});var egt=s(aG);tdr=r(egt,"TFT5ForConditionalGeneration"),egt.forEach(t),adr=r(HLe," (T5 model)"),HLe.forEach(t),ye.forEach(t),ndr=i(Ta),qpe=n(Ta,"P",{});var ogt=s(qpe);sdr=r(ogt,"Examples:"),ogt.forEach(t),ldr=i(Ta),m(vw.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),$ke=i(c),kc=n(c,"H2",{class:!0});var QSe=s(kc);d7=n(QSe,"A",{id:!0,class:!0,href:!0});var rgt=s(d7);Ope=n(rgt,"SPAN",{});var tgt=s(Ope);m(Tw.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),idr=i(QSe),Gpe=n(QSe,"SPAN",{});var agt=s(Gpe);ddr=r(agt,"TFAutoModelForSequenceClassification"),agt.forEach(t),QSe.forEach(t),Ike=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(Fw.$$.fragment,Yl),cdr=i(Yl),Rc=n(Yl,"P",{});var IW=s(Rc);fdr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xpe=n(IW,"CODE",{});var ngt=s(Xpe);mdr=r(ngt,"from_pretrained()"),ngt.forEach(t),gdr=r(IW,"class method or the "),Vpe=n(IW,"CODE",{});var sgt=s(Vpe);hdr=r(sgt,"from_config()"),sgt.forEach(t),pdr=r(IW,`class
method.`),IW.forEach(t),_dr=i(Yl),Cw=n(Yl,"P",{});var HSe=s(Cw);udr=r(HSe,"This class cannot be instantiated directly using "),zpe=n(HSe,"CODE",{});var lgt=s(zpe);bdr=r(lgt,"__init__()"),lgt.forEach(t),vdr=r(HSe," (throws an error)."),HSe.forEach(t),Tdr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(Mw.$$.fragment,Kl),Fdr=i(Kl),Wpe=n(Kl,"P",{});var igt=s(Wpe);Cdr=r(igt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),igt.forEach(t),Mdr=i(Kl),Sc=n(Kl,"P",{});var jW=s(Sc);Edr=r(jW,`Note:
Loading a model from its configuration file does `),Qpe=n(jW,"STRONG",{});var dgt=s(Qpe);ydr=r(dgt,"not"),dgt.forEach(t),wdr=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=n(jW,"CODE",{});var cgt=s(Hpe);Adr=r(cgt,"from_pretrained()"),cgt.forEach(t),Ldr=r(jW,"to load the model weights."),jW.forEach(t),Bdr=i(Kl),Upe=n(Kl,"P",{});var fgt=s(Upe);xdr=r(fgt,"Examples:"),fgt.forEach(t),kdr=i(Kl),m(Ew.$$.fragment,Kl),Kl.forEach(t),Rdr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(yw.$$.fragment,Fa),Sdr=i(Fa),Jpe=n(Fa,"P",{});var mgt=s(Jpe);Pdr=r(mgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mgt.forEach(t),$dr=i(Fa),Cn=n(Fa,"P",{});var k4=s(Cn);Idr=r(k4,"The model class to instantiate is selected based on the "),Ype=n(k4,"CODE",{});var ggt=s(Ype);jdr=r(ggt,"model_type"),ggt.forEach(t),Ddr=r(k4,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(k4,"CODE",{});var hgt=s(Kpe);Ndr=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),qdr=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(k4,"CODE",{});var pgt=s(Zpe);Odr=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),Gdr=r(k4,":"),k4.forEach(t),Xdr=i(Fa),V=n(Fa,"UL",{});var W=s(V);c7=n(W,"LI",{});var ULe=s(c7);e_e=n(ULe,"STRONG",{});var _gt=s(e_e);Vdr=r(_gt,"albert"),_gt.forEach(t),zdr=r(ULe," \u2014 "),nG=n(ULe,"A",{href:!0});var ugt=s(nG);Wdr=r(ugt,"TFAlbertForSequenceClassification"),ugt.forEach(t),Qdr=r(ULe," (ALBERT model)"),ULe.forEach(t),Hdr=i(W),f7=n(W,"LI",{});var JLe=s(f7);o_e=n(JLe,"STRONG",{});var bgt=s(o_e);Udr=r(bgt,"bert"),bgt.forEach(t),Jdr=r(JLe," \u2014 "),sG=n(JLe,"A",{href:!0});var vgt=s(sG);Ydr=r(vgt,"TFBertForSequenceClassification"),vgt.forEach(t),Kdr=r(JLe," (BERT model)"),JLe.forEach(t),Zdr=i(W),m7=n(W,"LI",{});var YLe=s(m7);r_e=n(YLe,"STRONG",{});var Tgt=s(r_e);ecr=r(Tgt,"camembert"),Tgt.forEach(t),ocr=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var Fgt=s(lG);rcr=r(Fgt,"TFCamembertForSequenceClassification"),Fgt.forEach(t),tcr=r(YLe," (CamemBERT model)"),YLe.forEach(t),acr=i(W),g7=n(W,"LI",{});var KLe=s(g7);t_e=n(KLe,"STRONG",{});var Cgt=s(t_e);ncr=r(Cgt,"convbert"),Cgt.forEach(t),scr=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var Mgt=s(iG);lcr=r(Mgt,"TFConvBertForSequenceClassification"),Mgt.forEach(t),icr=r(KLe," (ConvBERT model)"),KLe.forEach(t),dcr=i(W),h7=n(W,"LI",{});var ZLe=s(h7);a_e=n(ZLe,"STRONG",{});var Egt=s(a_e);ccr=r(Egt,"ctrl"),Egt.forEach(t),fcr=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var ygt=s(dG);mcr=r(ygt,"TFCTRLForSequenceClassification"),ygt.forEach(t),gcr=r(ZLe," (CTRL model)"),ZLe.forEach(t),hcr=i(W),p7=n(W,"LI",{});var e8e=s(p7);n_e=n(e8e,"STRONG",{});var wgt=s(n_e);pcr=r(wgt,"deberta"),wgt.forEach(t),_cr=r(e8e," \u2014 "),cG=n(e8e,"A",{href:!0});var Agt=s(cG);ucr=r(Agt,"TFDebertaForSequenceClassification"),Agt.forEach(t),bcr=r(e8e," (DeBERTa model)"),e8e.forEach(t),vcr=i(W),_7=n(W,"LI",{});var o8e=s(_7);s_e=n(o8e,"STRONG",{});var Lgt=s(s_e);Tcr=r(Lgt,"deberta-v2"),Lgt.forEach(t),Fcr=r(o8e," \u2014 "),fG=n(o8e,"A",{href:!0});var Bgt=s(fG);Ccr=r(Bgt,"TFDebertaV2ForSequenceClassification"),Bgt.forEach(t),Mcr=r(o8e," (DeBERTa-v2 model)"),o8e.forEach(t),Ecr=i(W),u7=n(W,"LI",{});var r8e=s(u7);l_e=n(r8e,"STRONG",{});var xgt=s(l_e);ycr=r(xgt,"distilbert"),xgt.forEach(t),wcr=r(r8e," \u2014 "),mG=n(r8e,"A",{href:!0});var kgt=s(mG);Acr=r(kgt,"TFDistilBertForSequenceClassification"),kgt.forEach(t),Lcr=r(r8e," (DistilBERT model)"),r8e.forEach(t),Bcr=i(W),b7=n(W,"LI",{});var t8e=s(b7);i_e=n(t8e,"STRONG",{});var Rgt=s(i_e);xcr=r(Rgt,"electra"),Rgt.forEach(t),kcr=r(t8e," \u2014 "),gG=n(t8e,"A",{href:!0});var Sgt=s(gG);Rcr=r(Sgt,"TFElectraForSequenceClassification"),Sgt.forEach(t),Scr=r(t8e," (ELECTRA model)"),t8e.forEach(t),Pcr=i(W),v7=n(W,"LI",{});var a8e=s(v7);d_e=n(a8e,"STRONG",{});var Pgt=s(d_e);$cr=r(Pgt,"flaubert"),Pgt.forEach(t),Icr=r(a8e," \u2014 "),hG=n(a8e,"A",{href:!0});var $gt=s(hG);jcr=r($gt,"TFFlaubertForSequenceClassification"),$gt.forEach(t),Dcr=r(a8e," (FlauBERT model)"),a8e.forEach(t),Ncr=i(W),T7=n(W,"LI",{});var n8e=s(T7);c_e=n(n8e,"STRONG",{});var Igt=s(c_e);qcr=r(Igt,"funnel"),Igt.forEach(t),Ocr=r(n8e," \u2014 "),pG=n(n8e,"A",{href:!0});var jgt=s(pG);Gcr=r(jgt,"TFFunnelForSequenceClassification"),jgt.forEach(t),Xcr=r(n8e," (Funnel Transformer model)"),n8e.forEach(t),Vcr=i(W),F7=n(W,"LI",{});var s8e=s(F7);f_e=n(s8e,"STRONG",{});var Dgt=s(f_e);zcr=r(Dgt,"gpt2"),Dgt.forEach(t),Wcr=r(s8e," \u2014 "),_G=n(s8e,"A",{href:!0});var Ngt=s(_G);Qcr=r(Ngt,"TFGPT2ForSequenceClassification"),Ngt.forEach(t),Hcr=r(s8e," (OpenAI GPT-2 model)"),s8e.forEach(t),Ucr=i(W),C7=n(W,"LI",{});var l8e=s(C7);m_e=n(l8e,"STRONG",{});var qgt=s(m_e);Jcr=r(qgt,"layoutlm"),qgt.forEach(t),Ycr=r(l8e," \u2014 "),uG=n(l8e,"A",{href:!0});var Ogt=s(uG);Kcr=r(Ogt,"TFLayoutLMForSequenceClassification"),Ogt.forEach(t),Zcr=r(l8e," (LayoutLM model)"),l8e.forEach(t),efr=i(W),M7=n(W,"LI",{});var i8e=s(M7);g_e=n(i8e,"STRONG",{});var Ggt=s(g_e);ofr=r(Ggt,"longformer"),Ggt.forEach(t),rfr=r(i8e," \u2014 "),bG=n(i8e,"A",{href:!0});var Xgt=s(bG);tfr=r(Xgt,"TFLongformerForSequenceClassification"),Xgt.forEach(t),afr=r(i8e," (Longformer model)"),i8e.forEach(t),nfr=i(W),E7=n(W,"LI",{});var d8e=s(E7);h_e=n(d8e,"STRONG",{});var Vgt=s(h_e);sfr=r(Vgt,"mobilebert"),Vgt.forEach(t),lfr=r(d8e," \u2014 "),vG=n(d8e,"A",{href:!0});var zgt=s(vG);ifr=r(zgt,"TFMobileBertForSequenceClassification"),zgt.forEach(t),dfr=r(d8e," (MobileBERT model)"),d8e.forEach(t),cfr=i(W),y7=n(W,"LI",{});var c8e=s(y7);p_e=n(c8e,"STRONG",{});var Wgt=s(p_e);ffr=r(Wgt,"mpnet"),Wgt.forEach(t),mfr=r(c8e," \u2014 "),TG=n(c8e,"A",{href:!0});var Qgt=s(TG);gfr=r(Qgt,"TFMPNetForSequenceClassification"),Qgt.forEach(t),hfr=r(c8e," (MPNet model)"),c8e.forEach(t),pfr=i(W),w7=n(W,"LI",{});var f8e=s(w7);__e=n(f8e,"STRONG",{});var Hgt=s(__e);_fr=r(Hgt,"openai-gpt"),Hgt.forEach(t),ufr=r(f8e," \u2014 "),FG=n(f8e,"A",{href:!0});var Ugt=s(FG);bfr=r(Ugt,"TFOpenAIGPTForSequenceClassification"),Ugt.forEach(t),vfr=r(f8e," (OpenAI GPT model)"),f8e.forEach(t),Tfr=i(W),A7=n(W,"LI",{});var m8e=s(A7);u_e=n(m8e,"STRONG",{});var Jgt=s(u_e);Ffr=r(Jgt,"rembert"),Jgt.forEach(t),Cfr=r(m8e," \u2014 "),CG=n(m8e,"A",{href:!0});var Ygt=s(CG);Mfr=r(Ygt,"TFRemBertForSequenceClassification"),Ygt.forEach(t),Efr=r(m8e," (RemBERT model)"),m8e.forEach(t),yfr=i(W),L7=n(W,"LI",{});var g8e=s(L7);b_e=n(g8e,"STRONG",{});var Kgt=s(b_e);wfr=r(Kgt,"roberta"),Kgt.forEach(t),Afr=r(g8e," \u2014 "),MG=n(g8e,"A",{href:!0});var Zgt=s(MG);Lfr=r(Zgt,"TFRobertaForSequenceClassification"),Zgt.forEach(t),Bfr=r(g8e," (RoBERTa model)"),g8e.forEach(t),xfr=i(W),B7=n(W,"LI",{});var h8e=s(B7);v_e=n(h8e,"STRONG",{});var eht=s(v_e);kfr=r(eht,"roformer"),eht.forEach(t),Rfr=r(h8e," \u2014 "),EG=n(h8e,"A",{href:!0});var oht=s(EG);Sfr=r(oht,"TFRoFormerForSequenceClassification"),oht.forEach(t),Pfr=r(h8e," (RoFormer model)"),h8e.forEach(t),$fr=i(W),x7=n(W,"LI",{});var p8e=s(x7);T_e=n(p8e,"STRONG",{});var rht=s(T_e);Ifr=r(rht,"tapas"),rht.forEach(t),jfr=r(p8e," \u2014 "),yG=n(p8e,"A",{href:!0});var tht=s(yG);Dfr=r(tht,"TFTapasForSequenceClassification"),tht.forEach(t),Nfr=r(p8e," (TAPAS model)"),p8e.forEach(t),qfr=i(W),k7=n(W,"LI",{});var _8e=s(k7);F_e=n(_8e,"STRONG",{});var aht=s(F_e);Ofr=r(aht,"transfo-xl"),aht.forEach(t),Gfr=r(_8e," \u2014 "),wG=n(_8e,"A",{href:!0});var nht=s(wG);Xfr=r(nht,"TFTransfoXLForSequenceClassification"),nht.forEach(t),Vfr=r(_8e," (Transformer-XL model)"),_8e.forEach(t),zfr=i(W),R7=n(W,"LI",{});var u8e=s(R7);C_e=n(u8e,"STRONG",{});var sht=s(C_e);Wfr=r(sht,"xlm"),sht.forEach(t),Qfr=r(u8e," \u2014 "),AG=n(u8e,"A",{href:!0});var lht=s(AG);Hfr=r(lht,"TFXLMForSequenceClassification"),lht.forEach(t),Ufr=r(u8e," (XLM model)"),u8e.forEach(t),Jfr=i(W),S7=n(W,"LI",{});var b8e=s(S7);M_e=n(b8e,"STRONG",{});var iht=s(M_e);Yfr=r(iht,"xlm-roberta"),iht.forEach(t),Kfr=r(b8e," \u2014 "),LG=n(b8e,"A",{href:!0});var dht=s(LG);Zfr=r(dht,"TFXLMRobertaForSequenceClassification"),dht.forEach(t),emr=r(b8e," (XLM-RoBERTa model)"),b8e.forEach(t),omr=i(W),P7=n(W,"LI",{});var v8e=s(P7);E_e=n(v8e,"STRONG",{});var cht=s(E_e);rmr=r(cht,"xlnet"),cht.forEach(t),tmr=r(v8e," \u2014 "),BG=n(v8e,"A",{href:!0});var fht=s(BG);amr=r(fht,"TFXLNetForSequenceClassification"),fht.forEach(t),nmr=r(v8e," (XLNet model)"),v8e.forEach(t),W.forEach(t),smr=i(Fa),y_e=n(Fa,"P",{});var mht=s(y_e);lmr=r(mht,"Examples:"),mht.forEach(t),imr=i(Fa),m(ww.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),jke=i(c),Pc=n(c,"H2",{class:!0});var USe=s(Pc);$7=n(USe,"A",{id:!0,class:!0,href:!0});var ght=s($7);w_e=n(ght,"SPAN",{});var hht=s(w_e);m(Aw.$$.fragment,hht),hht.forEach(t),ght.forEach(t),dmr=i(USe),A_e=n(USe,"SPAN",{});var pht=s(A_e);cmr=r(pht,"TFAutoModelForMultipleChoice"),pht.forEach(t),USe.forEach(t),Dke=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(Lw.$$.fragment,Zl),fmr=i(Zl),$c=n(Zl,"P",{});var DW=s($c);mmr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),L_e=n(DW,"CODE",{});var _ht=s(L_e);gmr=r(_ht,"from_pretrained()"),_ht.forEach(t),hmr=r(DW,"class method or the "),B_e=n(DW,"CODE",{});var uht=s(B_e);pmr=r(uht,"from_config()"),uht.forEach(t),_mr=r(DW,`class
method.`),DW.forEach(t),umr=i(Zl),Bw=n(Zl,"P",{});var JSe=s(Bw);bmr=r(JSe,"This class cannot be instantiated directly using "),x_e=n(JSe,"CODE",{});var bht=s(x_e);vmr=r(bht,"__init__()"),bht.forEach(t),Tmr=r(JSe," (throws an error)."),JSe.forEach(t),Fmr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(xw.$$.fragment,ei),Cmr=i(ei),k_e=n(ei,"P",{});var vht=s(k_e);Mmr=r(vht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vht.forEach(t),Emr=i(ei),Ic=n(ei,"P",{});var NW=s(Ic);ymr=r(NW,`Note:
Loading a model from its configuration file does `),R_e=n(NW,"STRONG",{});var Tht=s(R_e);wmr=r(Tht,"not"),Tht.forEach(t),Amr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),S_e=n(NW,"CODE",{});var Fht=s(S_e);Lmr=r(Fht,"from_pretrained()"),Fht.forEach(t),Bmr=r(NW,"to load the model weights."),NW.forEach(t),xmr=i(ei),P_e=n(ei,"P",{});var Cht=s(P_e);kmr=r(Cht,"Examples:"),Cht.forEach(t),Rmr=i(ei),m(kw.$$.fragment,ei),ei.forEach(t),Smr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Rw.$$.fragment,Ca),Pmr=i(Ca),$_e=n(Ca,"P",{});var Mht=s($_e);$mr=r(Mht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mht.forEach(t),Imr=i(Ca),Mn=n(Ca,"P",{});var R4=s(Mn);jmr=r(R4,"The model class to instantiate is selected based on the "),I_e=n(R4,"CODE",{});var Eht=s(I_e);Dmr=r(Eht,"model_type"),Eht.forEach(t),Nmr=r(R4,` property of the config object (either
passed as an argument or loaded from `),j_e=n(R4,"CODE",{});var yht=s(j_e);qmr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),Omr=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(R4,"CODE",{});var wht=s(D_e);Gmr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),Xmr=r(R4,":"),R4.forEach(t),Vmr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);I7=n(le,"LI",{});var T8e=s(I7);N_e=n(T8e,"STRONG",{});var Aht=s(N_e);zmr=r(Aht,"albert"),Aht.forEach(t),Wmr=r(T8e," \u2014 "),xG=n(T8e,"A",{href:!0});var Lht=s(xG);Qmr=r(Lht,"TFAlbertForMultipleChoice"),Lht.forEach(t),Hmr=r(T8e," (ALBERT model)"),T8e.forEach(t),Umr=i(le),j7=n(le,"LI",{});var F8e=s(j7);q_e=n(F8e,"STRONG",{});var Bht=s(q_e);Jmr=r(Bht,"bert"),Bht.forEach(t),Ymr=r(F8e," \u2014 "),kG=n(F8e,"A",{href:!0});var xht=s(kG);Kmr=r(xht,"TFBertForMultipleChoice"),xht.forEach(t),Zmr=r(F8e," (BERT model)"),F8e.forEach(t),egr=i(le),D7=n(le,"LI",{});var C8e=s(D7);O_e=n(C8e,"STRONG",{});var kht=s(O_e);ogr=r(kht,"camembert"),kht.forEach(t),rgr=r(C8e," \u2014 "),RG=n(C8e,"A",{href:!0});var Rht=s(RG);tgr=r(Rht,"TFCamembertForMultipleChoice"),Rht.forEach(t),agr=r(C8e," (CamemBERT model)"),C8e.forEach(t),ngr=i(le),N7=n(le,"LI",{});var M8e=s(N7);G_e=n(M8e,"STRONG",{});var Sht=s(G_e);sgr=r(Sht,"convbert"),Sht.forEach(t),lgr=r(M8e," \u2014 "),SG=n(M8e,"A",{href:!0});var Pht=s(SG);igr=r(Pht,"TFConvBertForMultipleChoice"),Pht.forEach(t),dgr=r(M8e," (ConvBERT model)"),M8e.forEach(t),cgr=i(le),q7=n(le,"LI",{});var E8e=s(q7);X_e=n(E8e,"STRONG",{});var $ht=s(X_e);fgr=r($ht,"distilbert"),$ht.forEach(t),mgr=r(E8e," \u2014 "),PG=n(E8e,"A",{href:!0});var Iht=s(PG);ggr=r(Iht,"TFDistilBertForMultipleChoice"),Iht.forEach(t),hgr=r(E8e," (DistilBERT model)"),E8e.forEach(t),pgr=i(le),O7=n(le,"LI",{});var y8e=s(O7);V_e=n(y8e,"STRONG",{});var jht=s(V_e);_gr=r(jht,"electra"),jht.forEach(t),ugr=r(y8e," \u2014 "),$G=n(y8e,"A",{href:!0});var Dht=s($G);bgr=r(Dht,"TFElectraForMultipleChoice"),Dht.forEach(t),vgr=r(y8e," (ELECTRA model)"),y8e.forEach(t),Tgr=i(le),G7=n(le,"LI",{});var w8e=s(G7);z_e=n(w8e,"STRONG",{});var Nht=s(z_e);Fgr=r(Nht,"flaubert"),Nht.forEach(t),Cgr=r(w8e," \u2014 "),IG=n(w8e,"A",{href:!0});var qht=s(IG);Mgr=r(qht,"TFFlaubertForMultipleChoice"),qht.forEach(t),Egr=r(w8e," (FlauBERT model)"),w8e.forEach(t),ygr=i(le),X7=n(le,"LI",{});var A8e=s(X7);W_e=n(A8e,"STRONG",{});var Oht=s(W_e);wgr=r(Oht,"funnel"),Oht.forEach(t),Agr=r(A8e," \u2014 "),jG=n(A8e,"A",{href:!0});var Ght=s(jG);Lgr=r(Ght,"TFFunnelForMultipleChoice"),Ght.forEach(t),Bgr=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),xgr=i(le),V7=n(le,"LI",{});var L8e=s(V7);Q_e=n(L8e,"STRONG",{});var Xht=s(Q_e);kgr=r(Xht,"longformer"),Xht.forEach(t),Rgr=r(L8e," \u2014 "),DG=n(L8e,"A",{href:!0});var Vht=s(DG);Sgr=r(Vht,"TFLongformerForMultipleChoice"),Vht.forEach(t),Pgr=r(L8e," (Longformer model)"),L8e.forEach(t),$gr=i(le),z7=n(le,"LI",{});var B8e=s(z7);H_e=n(B8e,"STRONG",{});var zht=s(H_e);Igr=r(zht,"mobilebert"),zht.forEach(t),jgr=r(B8e," \u2014 "),NG=n(B8e,"A",{href:!0});var Wht=s(NG);Dgr=r(Wht,"TFMobileBertForMultipleChoice"),Wht.forEach(t),Ngr=r(B8e," (MobileBERT model)"),B8e.forEach(t),qgr=i(le),W7=n(le,"LI",{});var x8e=s(W7);U_e=n(x8e,"STRONG",{});var Qht=s(U_e);Ogr=r(Qht,"mpnet"),Qht.forEach(t),Ggr=r(x8e," \u2014 "),qG=n(x8e,"A",{href:!0});var Hht=s(qG);Xgr=r(Hht,"TFMPNetForMultipleChoice"),Hht.forEach(t),Vgr=r(x8e," (MPNet model)"),x8e.forEach(t),zgr=i(le),Q7=n(le,"LI",{});var k8e=s(Q7);J_e=n(k8e,"STRONG",{});var Uht=s(J_e);Wgr=r(Uht,"rembert"),Uht.forEach(t),Qgr=r(k8e," \u2014 "),OG=n(k8e,"A",{href:!0});var Jht=s(OG);Hgr=r(Jht,"TFRemBertForMultipleChoice"),Jht.forEach(t),Ugr=r(k8e," (RemBERT model)"),k8e.forEach(t),Jgr=i(le),H7=n(le,"LI",{});var R8e=s(H7);Y_e=n(R8e,"STRONG",{});var Yht=s(Y_e);Ygr=r(Yht,"roberta"),Yht.forEach(t),Kgr=r(R8e," \u2014 "),GG=n(R8e,"A",{href:!0});var Kht=s(GG);Zgr=r(Kht,"TFRobertaForMultipleChoice"),Kht.forEach(t),ehr=r(R8e," (RoBERTa model)"),R8e.forEach(t),ohr=i(le),U7=n(le,"LI",{});var S8e=s(U7);K_e=n(S8e,"STRONG",{});var Zht=s(K_e);rhr=r(Zht,"roformer"),Zht.forEach(t),thr=r(S8e," \u2014 "),XG=n(S8e,"A",{href:!0});var ept=s(XG);ahr=r(ept,"TFRoFormerForMultipleChoice"),ept.forEach(t),nhr=r(S8e," (RoFormer model)"),S8e.forEach(t),shr=i(le),J7=n(le,"LI",{});var P8e=s(J7);Z_e=n(P8e,"STRONG",{});var opt=s(Z_e);lhr=r(opt,"xlm"),opt.forEach(t),ihr=r(P8e," \u2014 "),VG=n(P8e,"A",{href:!0});var rpt=s(VG);dhr=r(rpt,"TFXLMForMultipleChoice"),rpt.forEach(t),chr=r(P8e," (XLM model)"),P8e.forEach(t),fhr=i(le),Y7=n(le,"LI",{});var $8e=s(Y7);eue=n($8e,"STRONG",{});var tpt=s(eue);mhr=r(tpt,"xlm-roberta"),tpt.forEach(t),ghr=r($8e," \u2014 "),zG=n($8e,"A",{href:!0});var apt=s(zG);hhr=r(apt,"TFXLMRobertaForMultipleChoice"),apt.forEach(t),phr=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),_hr=i(le),K7=n(le,"LI",{});var I8e=s(K7);oue=n(I8e,"STRONG",{});var npt=s(oue);uhr=r(npt,"xlnet"),npt.forEach(t),bhr=r(I8e," \u2014 "),WG=n(I8e,"A",{href:!0});var spt=s(WG);vhr=r(spt,"TFXLNetForMultipleChoice"),spt.forEach(t),Thr=r(I8e," (XLNet model)"),I8e.forEach(t),le.forEach(t),Fhr=i(Ca),rue=n(Ca,"P",{});var lpt=s(rue);Chr=r(lpt,"Examples:"),lpt.forEach(t),Mhr=i(Ca),m(Sw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Nke=i(c),jc=n(c,"H2",{class:!0});var YSe=s(jc);Z7=n(YSe,"A",{id:!0,class:!0,href:!0});var ipt=s(Z7);tue=n(ipt,"SPAN",{});var dpt=s(tue);m(Pw.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),Ehr=i(YSe),aue=n(YSe,"SPAN",{});var cpt=s(aue);yhr=r(cpt,"TFAutoModelForTableQuestionAnswering"),cpt.forEach(t),YSe.forEach(t),qke=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m($w.$$.fragment,oi),whr=i(oi),Dc=n(oi,"P",{});var qW=s(Dc);Ahr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nue=n(qW,"CODE",{});var fpt=s(nue);Lhr=r(fpt,"from_pretrained()"),fpt.forEach(t),Bhr=r(qW,"class method or the "),sue=n(qW,"CODE",{});var mpt=s(sue);xhr=r(mpt,"from_config()"),mpt.forEach(t),khr=r(qW,`class
method.`),qW.forEach(t),Rhr=i(oi),Iw=n(oi,"P",{});var KSe=s(Iw);Shr=r(KSe,"This class cannot be instantiated directly using "),lue=n(KSe,"CODE",{});var gpt=s(lue);Phr=r(gpt,"__init__()"),gpt.forEach(t),$hr=r(KSe," (throws an error)."),KSe.forEach(t),Ihr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(jw.$$.fragment,ri),jhr=i(ri),iue=n(ri,"P",{});var hpt=s(iue);Dhr=r(hpt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hpt.forEach(t),Nhr=i(ri),Nc=n(ri,"P",{});var OW=s(Nc);qhr=r(OW,`Note:
Loading a model from its configuration file does `),due=n(OW,"STRONG",{});var ppt=s(due);Ohr=r(ppt,"not"),ppt.forEach(t),Ghr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=n(OW,"CODE",{});var _pt=s(cue);Xhr=r(_pt,"from_pretrained()"),_pt.forEach(t),Vhr=r(OW,"to load the model weights."),OW.forEach(t),zhr=i(ri),fue=n(ri,"P",{});var upt=s(fue);Whr=r(upt,"Examples:"),upt.forEach(t),Qhr=i(ri),m(Dw.$$.fragment,ri),ri.forEach(t),Hhr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(Nw.$$.fragment,Ma),Uhr=i(Ma),mue=n(Ma,"P",{});var bpt=s(mue);Jhr=r(bpt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bpt.forEach(t),Yhr=i(Ma),En=n(Ma,"P",{});var S4=s(En);Khr=r(S4,"The model class to instantiate is selected based on the "),gue=n(S4,"CODE",{});var vpt=s(gue);Zhr=r(vpt,"model_type"),vpt.forEach(t),epr=r(S4,` property of the config object (either
passed as an argument or loaded from `),hue=n(S4,"CODE",{});var Tpt=s(hue);opr=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),rpr=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(S4,"CODE",{});var Fpt=s(pue);tpr=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),apr=r(S4,":"),S4.forEach(t),npr=i(Ma),_ue=n(Ma,"UL",{});var Cpt=s(_ue);eF=n(Cpt,"LI",{});var j8e=s(eF);uue=n(j8e,"STRONG",{});var Mpt=s(uue);spr=r(Mpt,"tapas"),Mpt.forEach(t),lpr=r(j8e," \u2014 "),QG=n(j8e,"A",{href:!0});var Ept=s(QG);ipr=r(Ept,"TFTapasForQuestionAnswering"),Ept.forEach(t),dpr=r(j8e," (TAPAS model)"),j8e.forEach(t),Cpt.forEach(t),cpr=i(Ma),bue=n(Ma,"P",{});var ypt=s(bue);fpr=r(ypt,"Examples:"),ypt.forEach(t),mpr=i(Ma),m(qw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),Oke=i(c),qc=n(c,"H2",{class:!0});var ZSe=s(qc);oF=n(ZSe,"A",{id:!0,class:!0,href:!0});var wpt=s(oF);vue=n(wpt,"SPAN",{});var Apt=s(vue);m(Ow.$$.fragment,Apt),Apt.forEach(t),wpt.forEach(t),gpr=i(ZSe),Tue=n(ZSe,"SPAN",{});var Lpt=s(Tue);hpr=r(Lpt,"TFAutoModelForTokenClassification"),Lpt.forEach(t),ZSe.forEach(t),Gke=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(Gw.$$.fragment,ti),ppr=i(ti),Oc=n(ti,"P",{});var GW=s(Oc);_pr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fue=n(GW,"CODE",{});var Bpt=s(Fue);upr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),bpr=r(GW,"class method or the "),Cue=n(GW,"CODE",{});var xpt=s(Cue);vpr=r(xpt,"from_config()"),xpt.forEach(t),Tpr=r(GW,`class
method.`),GW.forEach(t),Fpr=i(ti),Xw=n(ti,"P",{});var ePe=s(Xw);Cpr=r(ePe,"This class cannot be instantiated directly using "),Mue=n(ePe,"CODE",{});var kpt=s(Mue);Mpr=r(kpt,"__init__()"),kpt.forEach(t),Epr=r(ePe," (throws an error)."),ePe.forEach(t),ypr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(Vw.$$.fragment,ai),wpr=i(ai),Eue=n(ai,"P",{});var Rpt=s(Eue);Apr=r(Rpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rpt.forEach(t),Lpr=i(ai),Gc=n(ai,"P",{});var XW=s(Gc);Bpr=r(XW,`Note:
Loading a model from its configuration file does `),yue=n(XW,"STRONG",{});var Spt=s(yue);xpr=r(Spt,"not"),Spt.forEach(t),kpr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wue=n(XW,"CODE",{});var Ppt=s(wue);Rpr=r(Ppt,"from_pretrained()"),Ppt.forEach(t),Spr=r(XW,"to load the model weights."),XW.forEach(t),Ppr=i(ai),Aue=n(ai,"P",{});var $pt=s(Aue);$pr=r($pt,"Examples:"),$pt.forEach(t),Ipr=i(ai),m(zw.$$.fragment,ai),ai.forEach(t),jpr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Ww.$$.fragment,Ea),Dpr=i(Ea),Lue=n(Ea,"P",{});var Ipt=s(Lue);Npr=r(Ipt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ipt.forEach(t),qpr=i(Ea),yn=n(Ea,"P",{});var P4=s(yn);Opr=r(P4,"The model class to instantiate is selected based on the "),Bue=n(P4,"CODE",{});var jpt=s(Bue);Gpr=r(jpt,"model_type"),jpt.forEach(t),Xpr=r(P4,` property of the config object (either
passed as an argument or loaded from `),xue=n(P4,"CODE",{});var Dpt=s(xue);Vpr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),zpr=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(P4,"CODE",{});var Npt=s(kue);Wpr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Qpr=r(P4,":"),P4.forEach(t),Hpr=i(Ea),K=n(Ea,"UL",{});var oe=s(K);rF=n(oe,"LI",{});var D8e=s(rF);Rue=n(D8e,"STRONG",{});var qpt=s(Rue);Upr=r(qpt,"albert"),qpt.forEach(t),Jpr=r(D8e," \u2014 "),HG=n(D8e,"A",{href:!0});var Opt=s(HG);Ypr=r(Opt,"TFAlbertForTokenClassification"),Opt.forEach(t),Kpr=r(D8e," (ALBERT model)"),D8e.forEach(t),Zpr=i(oe),tF=n(oe,"LI",{});var N8e=s(tF);Sue=n(N8e,"STRONG",{});var Gpt=s(Sue);e_r=r(Gpt,"bert"),Gpt.forEach(t),o_r=r(N8e," \u2014 "),UG=n(N8e,"A",{href:!0});var Xpt=s(UG);r_r=r(Xpt,"TFBertForTokenClassification"),Xpt.forEach(t),t_r=r(N8e," (BERT model)"),N8e.forEach(t),a_r=i(oe),aF=n(oe,"LI",{});var q8e=s(aF);Pue=n(q8e,"STRONG",{});var Vpt=s(Pue);n_r=r(Vpt,"camembert"),Vpt.forEach(t),s_r=r(q8e," \u2014 "),JG=n(q8e,"A",{href:!0});var zpt=s(JG);l_r=r(zpt,"TFCamembertForTokenClassification"),zpt.forEach(t),i_r=r(q8e," (CamemBERT model)"),q8e.forEach(t),d_r=i(oe),nF=n(oe,"LI",{});var O8e=s(nF);$ue=n(O8e,"STRONG",{});var Wpt=s($ue);c_r=r(Wpt,"convbert"),Wpt.forEach(t),f_r=r(O8e," \u2014 "),YG=n(O8e,"A",{href:!0});var Qpt=s(YG);m_r=r(Qpt,"TFConvBertForTokenClassification"),Qpt.forEach(t),g_r=r(O8e," (ConvBERT model)"),O8e.forEach(t),h_r=i(oe),sF=n(oe,"LI",{});var G8e=s(sF);Iue=n(G8e,"STRONG",{});var Hpt=s(Iue);p_r=r(Hpt,"deberta"),Hpt.forEach(t),__r=r(G8e," \u2014 "),KG=n(G8e,"A",{href:!0});var Upt=s(KG);u_r=r(Upt,"TFDebertaForTokenClassification"),Upt.forEach(t),b_r=r(G8e," (DeBERTa model)"),G8e.forEach(t),v_r=i(oe),lF=n(oe,"LI",{});var X8e=s(lF);jue=n(X8e,"STRONG",{});var Jpt=s(jue);T_r=r(Jpt,"deberta-v2"),Jpt.forEach(t),F_r=r(X8e," \u2014 "),ZG=n(X8e,"A",{href:!0});var Ypt=s(ZG);C_r=r(Ypt,"TFDebertaV2ForTokenClassification"),Ypt.forEach(t),M_r=r(X8e," (DeBERTa-v2 model)"),X8e.forEach(t),E_r=i(oe),iF=n(oe,"LI",{});var V8e=s(iF);Due=n(V8e,"STRONG",{});var Kpt=s(Due);y_r=r(Kpt,"distilbert"),Kpt.forEach(t),w_r=r(V8e," \u2014 "),eX=n(V8e,"A",{href:!0});var Zpt=s(eX);A_r=r(Zpt,"TFDistilBertForTokenClassification"),Zpt.forEach(t),L_r=r(V8e," (DistilBERT model)"),V8e.forEach(t),B_r=i(oe),dF=n(oe,"LI",{});var z8e=s(dF);Nue=n(z8e,"STRONG",{});var e_t=s(Nue);x_r=r(e_t,"electra"),e_t.forEach(t),k_r=r(z8e," \u2014 "),oX=n(z8e,"A",{href:!0});var o_t=s(oX);R_r=r(o_t,"TFElectraForTokenClassification"),o_t.forEach(t),S_r=r(z8e," (ELECTRA model)"),z8e.forEach(t),P_r=i(oe),cF=n(oe,"LI",{});var W8e=s(cF);que=n(W8e,"STRONG",{});var r_t=s(que);$_r=r(r_t,"flaubert"),r_t.forEach(t),I_r=r(W8e," \u2014 "),rX=n(W8e,"A",{href:!0});var t_t=s(rX);j_r=r(t_t,"TFFlaubertForTokenClassification"),t_t.forEach(t),D_r=r(W8e," (FlauBERT model)"),W8e.forEach(t),N_r=i(oe),fF=n(oe,"LI",{});var Q8e=s(fF);Oue=n(Q8e,"STRONG",{});var a_t=s(Oue);q_r=r(a_t,"funnel"),a_t.forEach(t),O_r=r(Q8e," \u2014 "),tX=n(Q8e,"A",{href:!0});var n_t=s(tX);G_r=r(n_t,"TFFunnelForTokenClassification"),n_t.forEach(t),X_r=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),V_r=i(oe),mF=n(oe,"LI",{});var H8e=s(mF);Gue=n(H8e,"STRONG",{});var s_t=s(Gue);z_r=r(s_t,"layoutlm"),s_t.forEach(t),W_r=r(H8e," \u2014 "),aX=n(H8e,"A",{href:!0});var l_t=s(aX);Q_r=r(l_t,"TFLayoutLMForTokenClassification"),l_t.forEach(t),H_r=r(H8e," (LayoutLM model)"),H8e.forEach(t),U_r=i(oe),gF=n(oe,"LI",{});var U8e=s(gF);Xue=n(U8e,"STRONG",{});var i_t=s(Xue);J_r=r(i_t,"longformer"),i_t.forEach(t),Y_r=r(U8e," \u2014 "),nX=n(U8e,"A",{href:!0});var d_t=s(nX);K_r=r(d_t,"TFLongformerForTokenClassification"),d_t.forEach(t),Z_r=r(U8e," (Longformer model)"),U8e.forEach(t),eur=i(oe),hF=n(oe,"LI",{});var J8e=s(hF);Vue=n(J8e,"STRONG",{});var c_t=s(Vue);our=r(c_t,"mobilebert"),c_t.forEach(t),rur=r(J8e," \u2014 "),sX=n(J8e,"A",{href:!0});var f_t=s(sX);tur=r(f_t,"TFMobileBertForTokenClassification"),f_t.forEach(t),aur=r(J8e," (MobileBERT model)"),J8e.forEach(t),nur=i(oe),pF=n(oe,"LI",{});var Y8e=s(pF);zue=n(Y8e,"STRONG",{});var m_t=s(zue);sur=r(m_t,"mpnet"),m_t.forEach(t),lur=r(Y8e," \u2014 "),lX=n(Y8e,"A",{href:!0});var g_t=s(lX);iur=r(g_t,"TFMPNetForTokenClassification"),g_t.forEach(t),dur=r(Y8e," (MPNet model)"),Y8e.forEach(t),cur=i(oe),_F=n(oe,"LI",{});var K8e=s(_F);Wue=n(K8e,"STRONG",{});var h_t=s(Wue);fur=r(h_t,"rembert"),h_t.forEach(t),mur=r(K8e," \u2014 "),iX=n(K8e,"A",{href:!0});var p_t=s(iX);gur=r(p_t,"TFRemBertForTokenClassification"),p_t.forEach(t),hur=r(K8e," (RemBERT model)"),K8e.forEach(t),pur=i(oe),uF=n(oe,"LI",{});var Z8e=s(uF);Que=n(Z8e,"STRONG",{});var __t=s(Que);_ur=r(__t,"roberta"),__t.forEach(t),uur=r(Z8e," \u2014 "),dX=n(Z8e,"A",{href:!0});var u_t=s(dX);bur=r(u_t,"TFRobertaForTokenClassification"),u_t.forEach(t),vur=r(Z8e," (RoBERTa model)"),Z8e.forEach(t),Tur=i(oe),bF=n(oe,"LI",{});var e9e=s(bF);Hue=n(e9e,"STRONG",{});var b_t=s(Hue);Fur=r(b_t,"roformer"),b_t.forEach(t),Cur=r(e9e," \u2014 "),cX=n(e9e,"A",{href:!0});var v_t=s(cX);Mur=r(v_t,"TFRoFormerForTokenClassification"),v_t.forEach(t),Eur=r(e9e," (RoFormer model)"),e9e.forEach(t),yur=i(oe),vF=n(oe,"LI",{});var o9e=s(vF);Uue=n(o9e,"STRONG",{});var T_t=s(Uue);wur=r(T_t,"xlm"),T_t.forEach(t),Aur=r(o9e," \u2014 "),fX=n(o9e,"A",{href:!0});var F_t=s(fX);Lur=r(F_t,"TFXLMForTokenClassification"),F_t.forEach(t),Bur=r(o9e," (XLM model)"),o9e.forEach(t),xur=i(oe),TF=n(oe,"LI",{});var r9e=s(TF);Jue=n(r9e,"STRONG",{});var C_t=s(Jue);kur=r(C_t,"xlm-roberta"),C_t.forEach(t),Rur=r(r9e," \u2014 "),mX=n(r9e,"A",{href:!0});var M_t=s(mX);Sur=r(M_t,"TFXLMRobertaForTokenClassification"),M_t.forEach(t),Pur=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),$ur=i(oe),FF=n(oe,"LI",{});var t9e=s(FF);Yue=n(t9e,"STRONG",{});var E_t=s(Yue);Iur=r(E_t,"xlnet"),E_t.forEach(t),jur=r(t9e," \u2014 "),gX=n(t9e,"A",{href:!0});var y_t=s(gX);Dur=r(y_t,"TFXLNetForTokenClassification"),y_t.forEach(t),Nur=r(t9e," (XLNet model)"),t9e.forEach(t),oe.forEach(t),qur=i(Ea),Kue=n(Ea,"P",{});var w_t=s(Kue);Our=r(w_t,"Examples:"),w_t.forEach(t),Gur=i(Ea),m(Qw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Xke=i(c),Xc=n(c,"H2",{class:!0});var oPe=s(Xc);CF=n(oPe,"A",{id:!0,class:!0,href:!0});var A_t=s(CF);Zue=n(A_t,"SPAN",{});var L_t=s(Zue);m(Hw.$$.fragment,L_t),L_t.forEach(t),A_t.forEach(t),Xur=i(oPe),e2e=n(oPe,"SPAN",{});var B_t=s(e2e);Vur=r(B_t,"TFAutoModelForQuestionAnswering"),B_t.forEach(t),oPe.forEach(t),Vke=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(Uw.$$.fragment,ni),zur=i(ni),Vc=n(ni,"P",{});var VW=s(Vc);Wur=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),o2e=n(VW,"CODE",{});var x_t=s(o2e);Qur=r(x_t,"from_pretrained()"),x_t.forEach(t),Hur=r(VW,"class method or the "),r2e=n(VW,"CODE",{});var k_t=s(r2e);Uur=r(k_t,"from_config()"),k_t.forEach(t),Jur=r(VW,`class
method.`),VW.forEach(t),Yur=i(ni),Jw=n(ni,"P",{});var rPe=s(Jw);Kur=r(rPe,"This class cannot be instantiated directly using "),t2e=n(rPe,"CODE",{});var R_t=s(t2e);Zur=r(R_t,"__init__()"),R_t.forEach(t),e2r=r(rPe," (throws an error)."),rPe.forEach(t),o2r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(Yw.$$.fragment,si),r2r=i(si),a2e=n(si,"P",{});var S_t=s(a2e);t2r=r(S_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S_t.forEach(t),a2r=i(si),zc=n(si,"P",{});var zW=s(zc);n2r=r(zW,`Note:
Loading a model from its configuration file does `),n2e=n(zW,"STRONG",{});var P_t=s(n2e);s2r=r(P_t,"not"),P_t.forEach(t),l2r=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),s2e=n(zW,"CODE",{});var $_t=s(s2e);i2r=r($_t,"from_pretrained()"),$_t.forEach(t),d2r=r(zW,"to load the model weights."),zW.forEach(t),c2r=i(si),l2e=n(si,"P",{});var I_t=s(l2e);f2r=r(I_t,"Examples:"),I_t.forEach(t),m2r=i(si),m(Kw.$$.fragment,si),si.forEach(t),g2r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(Zw.$$.fragment,ya),h2r=i(ya),i2e=n(ya,"P",{});var j_t=s(i2e);p2r=r(j_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j_t.forEach(t),_2r=i(ya),wn=n(ya,"P",{});var $4=s(wn);u2r=r($4,"The model class to instantiate is selected based on the "),d2e=n($4,"CODE",{});var D_t=s(d2e);b2r=r(D_t,"model_type"),D_t.forEach(t),v2r=r($4,` property of the config object (either
passed as an argument or loaded from `),c2e=n($4,"CODE",{});var N_t=s(c2e);T2r=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),F2r=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n($4,"CODE",{});var q_t=s(f2e);C2r=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),M2r=r($4,":"),$4.forEach(t),E2r=i(ya),Z=n(ya,"UL",{});var re=s(Z);MF=n(re,"LI",{});var a9e=s(MF);m2e=n(a9e,"STRONG",{});var O_t=s(m2e);y2r=r(O_t,"albert"),O_t.forEach(t),w2r=r(a9e," \u2014 "),hX=n(a9e,"A",{href:!0});var G_t=s(hX);A2r=r(G_t,"TFAlbertForQuestionAnswering"),G_t.forEach(t),L2r=r(a9e," (ALBERT model)"),a9e.forEach(t),B2r=i(re),EF=n(re,"LI",{});var n9e=s(EF);g2e=n(n9e,"STRONG",{});var X_t=s(g2e);x2r=r(X_t,"bert"),X_t.forEach(t),k2r=r(n9e," \u2014 "),pX=n(n9e,"A",{href:!0});var V_t=s(pX);R2r=r(V_t,"TFBertForQuestionAnswering"),V_t.forEach(t),S2r=r(n9e," (BERT model)"),n9e.forEach(t),P2r=i(re),yF=n(re,"LI",{});var s9e=s(yF);h2e=n(s9e,"STRONG",{});var z_t=s(h2e);$2r=r(z_t,"camembert"),z_t.forEach(t),I2r=r(s9e," \u2014 "),_X=n(s9e,"A",{href:!0});var W_t=s(_X);j2r=r(W_t,"TFCamembertForQuestionAnswering"),W_t.forEach(t),D2r=r(s9e," (CamemBERT model)"),s9e.forEach(t),N2r=i(re),wF=n(re,"LI",{});var l9e=s(wF);p2e=n(l9e,"STRONG",{});var Q_t=s(p2e);q2r=r(Q_t,"convbert"),Q_t.forEach(t),O2r=r(l9e," \u2014 "),uX=n(l9e,"A",{href:!0});var H_t=s(uX);G2r=r(H_t,"TFConvBertForQuestionAnswering"),H_t.forEach(t),X2r=r(l9e," (ConvBERT model)"),l9e.forEach(t),V2r=i(re),AF=n(re,"LI",{});var i9e=s(AF);_2e=n(i9e,"STRONG",{});var U_t=s(_2e);z2r=r(U_t,"deberta"),U_t.forEach(t),W2r=r(i9e," \u2014 "),bX=n(i9e,"A",{href:!0});var J_t=s(bX);Q2r=r(J_t,"TFDebertaForQuestionAnswering"),J_t.forEach(t),H2r=r(i9e," (DeBERTa model)"),i9e.forEach(t),U2r=i(re),LF=n(re,"LI",{});var d9e=s(LF);u2e=n(d9e,"STRONG",{});var Y_t=s(u2e);J2r=r(Y_t,"deberta-v2"),Y_t.forEach(t),Y2r=r(d9e," \u2014 "),vX=n(d9e,"A",{href:!0});var K_t=s(vX);K2r=r(K_t,"TFDebertaV2ForQuestionAnswering"),K_t.forEach(t),Z2r=r(d9e," (DeBERTa-v2 model)"),d9e.forEach(t),e1r=i(re),BF=n(re,"LI",{});var c9e=s(BF);b2e=n(c9e,"STRONG",{});var Z_t=s(b2e);o1r=r(Z_t,"distilbert"),Z_t.forEach(t),r1r=r(c9e," \u2014 "),TX=n(c9e,"A",{href:!0});var eut=s(TX);t1r=r(eut,"TFDistilBertForQuestionAnswering"),eut.forEach(t),a1r=r(c9e," (DistilBERT model)"),c9e.forEach(t),n1r=i(re),xF=n(re,"LI",{});var f9e=s(xF);v2e=n(f9e,"STRONG",{});var out=s(v2e);s1r=r(out,"electra"),out.forEach(t),l1r=r(f9e," \u2014 "),FX=n(f9e,"A",{href:!0});var rut=s(FX);i1r=r(rut,"TFElectraForQuestionAnswering"),rut.forEach(t),d1r=r(f9e," (ELECTRA model)"),f9e.forEach(t),c1r=i(re),kF=n(re,"LI",{});var m9e=s(kF);T2e=n(m9e,"STRONG",{});var tut=s(T2e);f1r=r(tut,"flaubert"),tut.forEach(t),m1r=r(m9e," \u2014 "),CX=n(m9e,"A",{href:!0});var aut=s(CX);g1r=r(aut,"TFFlaubertForQuestionAnsweringSimple"),aut.forEach(t),h1r=r(m9e," (FlauBERT model)"),m9e.forEach(t),p1r=i(re),RF=n(re,"LI",{});var g9e=s(RF);F2e=n(g9e,"STRONG",{});var nut=s(F2e);_1r=r(nut,"funnel"),nut.forEach(t),u1r=r(g9e," \u2014 "),MX=n(g9e,"A",{href:!0});var sut=s(MX);b1r=r(sut,"TFFunnelForQuestionAnswering"),sut.forEach(t),v1r=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),T1r=i(re),SF=n(re,"LI",{});var h9e=s(SF);C2e=n(h9e,"STRONG",{});var lut=s(C2e);F1r=r(lut,"longformer"),lut.forEach(t),C1r=r(h9e," \u2014 "),EX=n(h9e,"A",{href:!0});var iut=s(EX);M1r=r(iut,"TFLongformerForQuestionAnswering"),iut.forEach(t),E1r=r(h9e," (Longformer model)"),h9e.forEach(t),y1r=i(re),PF=n(re,"LI",{});var p9e=s(PF);M2e=n(p9e,"STRONG",{});var dut=s(M2e);w1r=r(dut,"mobilebert"),dut.forEach(t),A1r=r(p9e," \u2014 "),yX=n(p9e,"A",{href:!0});var cut=s(yX);L1r=r(cut,"TFMobileBertForQuestionAnswering"),cut.forEach(t),B1r=r(p9e," (MobileBERT model)"),p9e.forEach(t),x1r=i(re),$F=n(re,"LI",{});var _9e=s($F);E2e=n(_9e,"STRONG",{});var fut=s(E2e);k1r=r(fut,"mpnet"),fut.forEach(t),R1r=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var mut=s(wX);S1r=r(mut,"TFMPNetForQuestionAnswering"),mut.forEach(t),P1r=r(_9e," (MPNet model)"),_9e.forEach(t),$1r=i(re),IF=n(re,"LI",{});var u9e=s(IF);y2e=n(u9e,"STRONG",{});var gut=s(y2e);I1r=r(gut,"rembert"),gut.forEach(t),j1r=r(u9e," \u2014 "),AX=n(u9e,"A",{href:!0});var hut=s(AX);D1r=r(hut,"TFRemBertForQuestionAnswering"),hut.forEach(t),N1r=r(u9e," (RemBERT model)"),u9e.forEach(t),q1r=i(re),jF=n(re,"LI",{});var b9e=s(jF);w2e=n(b9e,"STRONG",{});var put=s(w2e);O1r=r(put,"roberta"),put.forEach(t),G1r=r(b9e," \u2014 "),LX=n(b9e,"A",{href:!0});var _ut=s(LX);X1r=r(_ut,"TFRobertaForQuestionAnswering"),_ut.forEach(t),V1r=r(b9e," (RoBERTa model)"),b9e.forEach(t),z1r=i(re),DF=n(re,"LI",{});var v9e=s(DF);A2e=n(v9e,"STRONG",{});var uut=s(A2e);W1r=r(uut,"roformer"),uut.forEach(t),Q1r=r(v9e," \u2014 "),BX=n(v9e,"A",{href:!0});var but=s(BX);H1r=r(but,"TFRoFormerForQuestionAnswering"),but.forEach(t),U1r=r(v9e," (RoFormer model)"),v9e.forEach(t),J1r=i(re),NF=n(re,"LI",{});var T9e=s(NF);L2e=n(T9e,"STRONG",{});var vut=s(L2e);Y1r=r(vut,"xlm"),vut.forEach(t),K1r=r(T9e," \u2014 "),xX=n(T9e,"A",{href:!0});var Tut=s(xX);Z1r=r(Tut,"TFXLMForQuestionAnsweringSimple"),Tut.forEach(t),ebr=r(T9e," (XLM model)"),T9e.forEach(t),obr=i(re),qF=n(re,"LI",{});var F9e=s(qF);B2e=n(F9e,"STRONG",{});var Fut=s(B2e);rbr=r(Fut,"xlm-roberta"),Fut.forEach(t),tbr=r(F9e," \u2014 "),kX=n(F9e,"A",{href:!0});var Cut=s(kX);abr=r(Cut,"TFXLMRobertaForQuestionAnswering"),Cut.forEach(t),nbr=r(F9e," (XLM-RoBERTa model)"),F9e.forEach(t),sbr=i(re),OF=n(re,"LI",{});var C9e=s(OF);x2e=n(C9e,"STRONG",{});var Mut=s(x2e);lbr=r(Mut,"xlnet"),Mut.forEach(t),ibr=r(C9e," \u2014 "),RX=n(C9e,"A",{href:!0});var Eut=s(RX);dbr=r(Eut,"TFXLNetForQuestionAnsweringSimple"),Eut.forEach(t),cbr=r(C9e," (XLNet model)"),C9e.forEach(t),re.forEach(t),fbr=i(ya),k2e=n(ya,"P",{});var yut=s(k2e);mbr=r(yut,"Examples:"),yut.forEach(t),gbr=i(ya),m(eA.$$.fragment,ya),ya.forEach(t),ni.forEach(t),zke=i(c),Wc=n(c,"H2",{class:!0});var tPe=s(Wc);GF=n(tPe,"A",{id:!0,class:!0,href:!0});var wut=s(GF);R2e=n(wut,"SPAN",{});var Aut=s(R2e);m(oA.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),hbr=i(tPe),S2e=n(tPe,"SPAN",{});var Lut=s(S2e);pbr=r(Lut,"TFAutoModelForVision2Seq"),Lut.forEach(t),tPe.forEach(t),Wke=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(rA.$$.fragment,li),_br=i(li),Qc=n(li,"P",{});var WW=s(Qc);ubr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),P2e=n(WW,"CODE",{});var But=s(P2e);bbr=r(But,"from_pretrained()"),But.forEach(t),vbr=r(WW,"class method or the "),$2e=n(WW,"CODE",{});var xut=s($2e);Tbr=r(xut,"from_config()"),xut.forEach(t),Fbr=r(WW,`class
method.`),WW.forEach(t),Cbr=i(li),tA=n(li,"P",{});var aPe=s(tA);Mbr=r(aPe,"This class cannot be instantiated directly using "),I2e=n(aPe,"CODE",{});var kut=s(I2e);Ebr=r(kut,"__init__()"),kut.forEach(t),ybr=r(aPe," (throws an error)."),aPe.forEach(t),wbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(aA.$$.fragment,ii),Abr=i(ii),j2e=n(ii,"P",{});var Rut=s(j2e);Lbr=r(Rut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rut.forEach(t),Bbr=i(ii),Hc=n(ii,"P",{});var QW=s(Hc);xbr=r(QW,`Note:
Loading a model from its configuration file does `),D2e=n(QW,"STRONG",{});var Sut=s(D2e);kbr=r(Sut,"not"),Sut.forEach(t),Rbr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=n(QW,"CODE",{});var Put=s(N2e);Sbr=r(Put,"from_pretrained()"),Put.forEach(t),Pbr=r(QW,"to load the model weights."),QW.forEach(t),$br=i(ii),q2e=n(ii,"P",{});var $ut=s(q2e);Ibr=r($ut,"Examples:"),$ut.forEach(t),jbr=i(ii),m(nA.$$.fragment,ii),ii.forEach(t),Dbr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(sA.$$.fragment,wa),Nbr=i(wa),O2e=n(wa,"P",{});var Iut=s(O2e);qbr=r(Iut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iut.forEach(t),Obr=i(wa),An=n(wa,"P",{});var I4=s(An);Gbr=r(I4,"The model class to instantiate is selected based on the "),G2e=n(I4,"CODE",{});var jut=s(G2e);Xbr=r(jut,"model_type"),jut.forEach(t),Vbr=r(I4,` property of the config object (either
passed as an argument or loaded from `),X2e=n(I4,"CODE",{});var Dut=s(X2e);zbr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Wbr=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(I4,"CODE",{});var Nut=s(V2e);Qbr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Hbr=r(I4,":"),I4.forEach(t),Ubr=i(wa),z2e=n(wa,"UL",{});var qut=s(z2e);XF=n(qut,"LI",{});var M9e=s(XF);W2e=n(M9e,"STRONG",{});var Out=s(W2e);Jbr=r(Out,"vision-encoder-decoder"),Out.forEach(t),Ybr=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var Gut=s(SX);Kbr=r(Gut,"TFVisionEncoderDecoderModel"),Gut.forEach(t),Zbr=r(M9e," (Vision Encoder decoder model)"),M9e.forEach(t),qut.forEach(t),evr=i(wa),Q2e=n(wa,"P",{});var Xut=s(Q2e);ovr=r(Xut,"Examples:"),Xut.forEach(t),rvr=i(wa),m(lA.$$.fragment,wa),wa.forEach(t),li.forEach(t),Qke=i(c),Uc=n(c,"H2",{class:!0});var nPe=s(Uc);VF=n(nPe,"A",{id:!0,class:!0,href:!0});var Vut=s(VF);H2e=n(Vut,"SPAN",{});var zut=s(H2e);m(iA.$$.fragment,zut),zut.forEach(t),Vut.forEach(t),tvr=i(nPe),U2e=n(nPe,"SPAN",{});var Wut=s(U2e);avr=r(Wut,"TFAutoModelForSpeechSeq2Seq"),Wut.forEach(t),nPe.forEach(t),Hke=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(dA.$$.fragment,di),nvr=i(di),Jc=n(di,"P",{});var HW=s(Jc);svr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),J2e=n(HW,"CODE",{});var Qut=s(J2e);lvr=r(Qut,"from_pretrained()"),Qut.forEach(t),ivr=r(HW,"class method or the "),Y2e=n(HW,"CODE",{});var Hut=s(Y2e);dvr=r(Hut,"from_config()"),Hut.forEach(t),cvr=r(HW,`class
method.`),HW.forEach(t),fvr=i(di),cA=n(di,"P",{});var sPe=s(cA);mvr=r(sPe,"This class cannot be instantiated directly using "),K2e=n(sPe,"CODE",{});var Uut=s(K2e);gvr=r(Uut,"__init__()"),Uut.forEach(t),hvr=r(sPe," (throws an error)."),sPe.forEach(t),pvr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(fA.$$.fragment,ci),_vr=i(ci),Z2e=n(ci,"P",{});var Jut=s(Z2e);uvr=r(Jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jut.forEach(t),bvr=i(ci),Yc=n(ci,"P",{});var UW=s(Yc);vvr=r(UW,`Note:
Loading a model from its configuration file does `),e1e=n(UW,"STRONG",{});var Yut=s(e1e);Tvr=r(Yut,"not"),Yut.forEach(t),Fvr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=n(UW,"CODE",{});var Kut=s(o1e);Cvr=r(Kut,"from_pretrained()"),Kut.forEach(t),Mvr=r(UW,"to load the model weights."),UW.forEach(t),Evr=i(ci),r1e=n(ci,"P",{});var Zut=s(r1e);yvr=r(Zut,"Examples:"),Zut.forEach(t),wvr=i(ci),m(mA.$$.fragment,ci),ci.forEach(t),Avr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(gA.$$.fragment,Aa),Lvr=i(Aa),t1e=n(Aa,"P",{});var e2t=s(t1e);Bvr=r(e2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e2t.forEach(t),xvr=i(Aa),Ln=n(Aa,"P",{});var j4=s(Ln);kvr=r(j4,"The model class to instantiate is selected based on the "),a1e=n(j4,"CODE",{});var o2t=s(a1e);Rvr=r(o2t,"model_type"),o2t.forEach(t),Svr=r(j4,` property of the config object (either
passed as an argument or loaded from `),n1e=n(j4,"CODE",{});var r2t=s(n1e);Pvr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),$vr=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(j4,"CODE",{});var t2t=s(s1e);Ivr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),jvr=r(j4,":"),j4.forEach(t),Dvr=i(Aa),l1e=n(Aa,"UL",{});var a2t=s(l1e);zF=n(a2t,"LI",{});var E9e=s(zF);i1e=n(E9e,"STRONG",{});var n2t=s(i1e);Nvr=r(n2t,"speech_to_text"),n2t.forEach(t),qvr=r(E9e," \u2014 "),PX=n(E9e,"A",{href:!0});var s2t=s(PX);Ovr=r(s2t,"TFSpeech2TextForConditionalGeneration"),s2t.forEach(t),Gvr=r(E9e," (Speech2Text model)"),E9e.forEach(t),a2t.forEach(t),Xvr=i(Aa),d1e=n(Aa,"P",{});var l2t=s(d1e);Vvr=r(l2t,"Examples:"),l2t.forEach(t),zvr=i(Aa),m(hA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Uke=i(c),Kc=n(c,"H2",{class:!0});var lPe=s(Kc);WF=n(lPe,"A",{id:!0,class:!0,href:!0});var i2t=s(WF);c1e=n(i2t,"SPAN",{});var d2t=s(c1e);m(pA.$$.fragment,d2t),d2t.forEach(t),i2t.forEach(t),Wvr=i(lPe),f1e=n(lPe,"SPAN",{});var c2t=s(f1e);Qvr=r(c2t,"FlaxAutoModel"),c2t.forEach(t),lPe.forEach(t),Jke=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(_A.$$.fragment,fi),Hvr=i(fi),Zc=n(fi,"P",{});var JW=s(Zc);Uvr=r(JW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),m1e=n(JW,"CODE",{});var f2t=s(m1e);Jvr=r(f2t,"from_pretrained()"),f2t.forEach(t),Yvr=r(JW,"class method or the "),g1e=n(JW,"CODE",{});var m2t=s(g1e);Kvr=r(m2t,"from_config()"),m2t.forEach(t),Zvr=r(JW,`class
method.`),JW.forEach(t),e6r=i(fi),uA=n(fi,"P",{});var iPe=s(uA);o6r=r(iPe,"This class cannot be instantiated directly using "),h1e=n(iPe,"CODE",{});var g2t=s(h1e);r6r=r(g2t,"__init__()"),g2t.forEach(t),t6r=r(iPe," (throws an error)."),iPe.forEach(t),a6r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(bA.$$.fragment,mi),n6r=i(mi),p1e=n(mi,"P",{});var h2t=s(p1e);s6r=r(h2t,"Instantiates one of the base model classes of the library from a configuration."),h2t.forEach(t),l6r=i(mi),ef=n(mi,"P",{});var YW=s(ef);i6r=r(YW,`Note:
Loading a model from its configuration file does `),_1e=n(YW,"STRONG",{});var p2t=s(_1e);d6r=r(p2t,"not"),p2t.forEach(t),c6r=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=n(YW,"CODE",{});var _2t=s(u1e);f6r=r(_2t,"from_pretrained()"),_2t.forEach(t),m6r=r(YW,"to load the model weights."),YW.forEach(t),g6r=i(mi),b1e=n(mi,"P",{});var u2t=s(b1e);h6r=r(u2t,"Examples:"),u2t.forEach(t),p6r=i(mi),m(vA.$$.fragment,mi),mi.forEach(t),_6r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(TA.$$.fragment,La),u6r=i(La),v1e=n(La,"P",{});var b2t=s(v1e);b6r=r(b2t,"Instantiate one of the base model classes of the library from a pretrained model."),b2t.forEach(t),v6r=i(La),Bn=n(La,"P",{});var D4=s(Bn);T6r=r(D4,"The model class to instantiate is selected based on the "),T1e=n(D4,"CODE",{});var v2t=s(T1e);F6r=r(v2t,"model_type"),v2t.forEach(t),C6r=r(D4,` property of the config object (either
passed as an argument or loaded from `),F1e=n(D4,"CODE",{});var T2t=s(F1e);M6r=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),E6r=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(D4,"CODE",{});var F2t=s(C1e);y6r=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),w6r=r(D4,":"),D4.forEach(t),A6r=i(La),z=n(La,"UL",{});var Q=s(z);QF=n(Q,"LI",{});var y9e=s(QF);M1e=n(y9e,"STRONG",{});var C2t=s(M1e);L6r=r(C2t,"albert"),C2t.forEach(t),B6r=r(y9e," \u2014 "),$X=n(y9e,"A",{href:!0});var M2t=s($X);x6r=r(M2t,"FlaxAlbertModel"),M2t.forEach(t),k6r=r(y9e," (ALBERT model)"),y9e.forEach(t),R6r=i(Q),HF=n(Q,"LI",{});var w9e=s(HF);E1e=n(w9e,"STRONG",{});var E2t=s(E1e);S6r=r(E2t,"bart"),E2t.forEach(t),P6r=r(w9e," \u2014 "),IX=n(w9e,"A",{href:!0});var y2t=s(IX);$6r=r(y2t,"FlaxBartModel"),y2t.forEach(t),I6r=r(w9e," (BART model)"),w9e.forEach(t),j6r=i(Q),UF=n(Q,"LI",{});var A9e=s(UF);y1e=n(A9e,"STRONG",{});var w2t=s(y1e);D6r=r(w2t,"beit"),w2t.forEach(t),N6r=r(A9e," \u2014 "),jX=n(A9e,"A",{href:!0});var A2t=s(jX);q6r=r(A2t,"FlaxBeitModel"),A2t.forEach(t),O6r=r(A9e," (BEiT model)"),A9e.forEach(t),G6r=i(Q),JF=n(Q,"LI",{});var L9e=s(JF);w1e=n(L9e,"STRONG",{});var L2t=s(w1e);X6r=r(L2t,"bert"),L2t.forEach(t),V6r=r(L9e," \u2014 "),DX=n(L9e,"A",{href:!0});var B2t=s(DX);z6r=r(B2t,"FlaxBertModel"),B2t.forEach(t),W6r=r(L9e," (BERT model)"),L9e.forEach(t),Q6r=i(Q),YF=n(Q,"LI",{});var B9e=s(YF);A1e=n(B9e,"STRONG",{});var x2t=s(A1e);H6r=r(x2t,"big_bird"),x2t.forEach(t),U6r=r(B9e," \u2014 "),NX=n(B9e,"A",{href:!0});var k2t=s(NX);J6r=r(k2t,"FlaxBigBirdModel"),k2t.forEach(t),Y6r=r(B9e," (BigBird model)"),B9e.forEach(t),K6r=i(Q),KF=n(Q,"LI",{});var x9e=s(KF);L1e=n(x9e,"STRONG",{});var R2t=s(L1e);Z6r=r(R2t,"blenderbot"),R2t.forEach(t),e0r=r(x9e," \u2014 "),qX=n(x9e,"A",{href:!0});var S2t=s(qX);o0r=r(S2t,"FlaxBlenderbotModel"),S2t.forEach(t),r0r=r(x9e," (Blenderbot model)"),x9e.forEach(t),t0r=i(Q),ZF=n(Q,"LI",{});var k9e=s(ZF);B1e=n(k9e,"STRONG",{});var P2t=s(B1e);a0r=r(P2t,"blenderbot-small"),P2t.forEach(t),n0r=r(k9e," \u2014 "),OX=n(k9e,"A",{href:!0});var $2t=s(OX);s0r=r($2t,"FlaxBlenderbotSmallModel"),$2t.forEach(t),l0r=r(k9e," (BlenderbotSmall model)"),k9e.forEach(t),i0r=i(Q),eC=n(Q,"LI",{});var R9e=s(eC);x1e=n(R9e,"STRONG",{});var I2t=s(x1e);d0r=r(I2t,"clip"),I2t.forEach(t),c0r=r(R9e," \u2014 "),GX=n(R9e,"A",{href:!0});var j2t=s(GX);f0r=r(j2t,"FlaxCLIPModel"),j2t.forEach(t),m0r=r(R9e," (CLIP model)"),R9e.forEach(t),g0r=i(Q),oC=n(Q,"LI",{});var S9e=s(oC);k1e=n(S9e,"STRONG",{});var D2t=s(k1e);h0r=r(D2t,"distilbert"),D2t.forEach(t),p0r=r(S9e," \u2014 "),XX=n(S9e,"A",{href:!0});var N2t=s(XX);_0r=r(N2t,"FlaxDistilBertModel"),N2t.forEach(t),u0r=r(S9e," (DistilBERT model)"),S9e.forEach(t),b0r=i(Q),rC=n(Q,"LI",{});var P9e=s(rC);R1e=n(P9e,"STRONG",{});var q2t=s(R1e);v0r=r(q2t,"electra"),q2t.forEach(t),T0r=r(P9e," \u2014 "),VX=n(P9e,"A",{href:!0});var O2t=s(VX);F0r=r(O2t,"FlaxElectraModel"),O2t.forEach(t),C0r=r(P9e," (ELECTRA model)"),P9e.forEach(t),M0r=i(Q),tC=n(Q,"LI",{});var $9e=s(tC);S1e=n($9e,"STRONG",{});var G2t=s(S1e);E0r=r(G2t,"gpt2"),G2t.forEach(t),y0r=r($9e," \u2014 "),zX=n($9e,"A",{href:!0});var X2t=s(zX);w0r=r(X2t,"FlaxGPT2Model"),X2t.forEach(t),A0r=r($9e," (OpenAI GPT-2 model)"),$9e.forEach(t),L0r=i(Q),aC=n(Q,"LI",{});var I9e=s(aC);P1e=n(I9e,"STRONG",{});var V2t=s(P1e);B0r=r(V2t,"gpt_neo"),V2t.forEach(t),x0r=r(I9e," \u2014 "),WX=n(I9e,"A",{href:!0});var z2t=s(WX);k0r=r(z2t,"FlaxGPTNeoModel"),z2t.forEach(t),R0r=r(I9e," (GPT Neo model)"),I9e.forEach(t),S0r=i(Q),nC=n(Q,"LI",{});var j9e=s(nC);$1e=n(j9e,"STRONG",{});var W2t=s($1e);P0r=r(W2t,"gptj"),W2t.forEach(t),$0r=r(j9e," \u2014 "),QX=n(j9e,"A",{href:!0});var Q2t=s(QX);I0r=r(Q2t,"FlaxGPTJModel"),Q2t.forEach(t),j0r=r(j9e," (GPT-J model)"),j9e.forEach(t),D0r=i(Q),sC=n(Q,"LI",{});var D9e=s(sC);I1e=n(D9e,"STRONG",{});var H2t=s(I1e);N0r=r(H2t,"marian"),H2t.forEach(t),q0r=r(D9e," \u2014 "),HX=n(D9e,"A",{href:!0});var U2t=s(HX);O0r=r(U2t,"FlaxMarianModel"),U2t.forEach(t),G0r=r(D9e," (Marian model)"),D9e.forEach(t),X0r=i(Q),lC=n(Q,"LI",{});var N9e=s(lC);j1e=n(N9e,"STRONG",{});var J2t=s(j1e);V0r=r(J2t,"mbart"),J2t.forEach(t),z0r=r(N9e," \u2014 "),UX=n(N9e,"A",{href:!0});var Y2t=s(UX);W0r=r(Y2t,"FlaxMBartModel"),Y2t.forEach(t),Q0r=r(N9e," (mBART model)"),N9e.forEach(t),H0r=i(Q),iC=n(Q,"LI",{});var q9e=s(iC);D1e=n(q9e,"STRONG",{});var K2t=s(D1e);U0r=r(K2t,"mt5"),K2t.forEach(t),J0r=r(q9e," \u2014 "),JX=n(q9e,"A",{href:!0});var Z2t=s(JX);Y0r=r(Z2t,"FlaxMT5Model"),Z2t.forEach(t),K0r=r(q9e," (mT5 model)"),q9e.forEach(t),Z0r=i(Q),dC=n(Q,"LI",{});var O9e=s(dC);N1e=n(O9e,"STRONG",{});var e1t=s(N1e);eTr=r(e1t,"pegasus"),e1t.forEach(t),oTr=r(O9e," \u2014 "),YX=n(O9e,"A",{href:!0});var o1t=s(YX);rTr=r(o1t,"FlaxPegasusModel"),o1t.forEach(t),tTr=r(O9e," (Pegasus model)"),O9e.forEach(t),aTr=i(Q),cC=n(Q,"LI",{});var G9e=s(cC);q1e=n(G9e,"STRONG",{});var r1t=s(q1e);nTr=r(r1t,"roberta"),r1t.forEach(t),sTr=r(G9e," \u2014 "),KX=n(G9e,"A",{href:!0});var t1t=s(KX);lTr=r(t1t,"FlaxRobertaModel"),t1t.forEach(t),iTr=r(G9e," (RoBERTa model)"),G9e.forEach(t),dTr=i(Q),fC=n(Q,"LI",{});var X9e=s(fC);O1e=n(X9e,"STRONG",{});var a1t=s(O1e);cTr=r(a1t,"roformer"),a1t.forEach(t),fTr=r(X9e," \u2014 "),ZX=n(X9e,"A",{href:!0});var n1t=s(ZX);mTr=r(n1t,"FlaxRoFormerModel"),n1t.forEach(t),gTr=r(X9e," (RoFormer model)"),X9e.forEach(t),hTr=i(Q),mC=n(Q,"LI",{});var V9e=s(mC);G1e=n(V9e,"STRONG",{});var s1t=s(G1e);pTr=r(s1t,"t5"),s1t.forEach(t),_Tr=r(V9e," \u2014 "),eV=n(V9e,"A",{href:!0});var l1t=s(eV);uTr=r(l1t,"FlaxT5Model"),l1t.forEach(t),bTr=r(V9e," (T5 model)"),V9e.forEach(t),vTr=i(Q),gC=n(Q,"LI",{});var z9e=s(gC);X1e=n(z9e,"STRONG",{});var i1t=s(X1e);TTr=r(i1t,"vision-text-dual-encoder"),i1t.forEach(t),FTr=r(z9e," \u2014 "),oV=n(z9e,"A",{href:!0});var d1t=s(oV);CTr=r(d1t,"FlaxVisionTextDualEncoderModel"),d1t.forEach(t),MTr=r(z9e," (VisionTextDualEncoder model)"),z9e.forEach(t),ETr=i(Q),hC=n(Q,"LI",{});var W9e=s(hC);V1e=n(W9e,"STRONG",{});var c1t=s(V1e);yTr=r(c1t,"vit"),c1t.forEach(t),wTr=r(W9e," \u2014 "),rV=n(W9e,"A",{href:!0});var f1t=s(rV);ATr=r(f1t,"FlaxViTModel"),f1t.forEach(t),LTr=r(W9e," (ViT model)"),W9e.forEach(t),BTr=i(Q),pC=n(Q,"LI",{});var Q9e=s(pC);z1e=n(Q9e,"STRONG",{});var m1t=s(z1e);xTr=r(m1t,"wav2vec2"),m1t.forEach(t),kTr=r(Q9e," \u2014 "),tV=n(Q9e,"A",{href:!0});var g1t=s(tV);RTr=r(g1t,"FlaxWav2Vec2Model"),g1t.forEach(t),STr=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),PTr=i(Q),_C=n(Q,"LI",{});var H9e=s(_C);W1e=n(H9e,"STRONG",{});var h1t=s(W1e);$Tr=r(h1t,"xglm"),h1t.forEach(t),ITr=r(H9e," \u2014 "),aV=n(H9e,"A",{href:!0});var p1t=s(aV);jTr=r(p1t,"FlaxXGLMModel"),p1t.forEach(t),DTr=r(H9e," (XGLM model)"),H9e.forEach(t),NTr=i(Q),uC=n(Q,"LI",{});var U9e=s(uC);Q1e=n(U9e,"STRONG",{});var _1t=s(Q1e);qTr=r(_1t,"xlm-roberta"),_1t.forEach(t),OTr=r(U9e," \u2014 "),nV=n(U9e,"A",{href:!0});var u1t=s(nV);GTr=r(u1t,"FlaxXLMRobertaModel"),u1t.forEach(t),XTr=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),Q.forEach(t),VTr=i(La),H1e=n(La,"P",{});var b1t=s(H1e);zTr=r(b1t,"Examples:"),b1t.forEach(t),WTr=i(La),m(FA.$$.fragment,La),La.forEach(t),fi.forEach(t),Yke=i(c),of=n(c,"H2",{class:!0});var dPe=s(of);bC=n(dPe,"A",{id:!0,class:!0,href:!0});var v1t=s(bC);U1e=n(v1t,"SPAN",{});var T1t=s(U1e);m(CA.$$.fragment,T1t),T1t.forEach(t),v1t.forEach(t),QTr=i(dPe),J1e=n(dPe,"SPAN",{});var F1t=s(J1e);HTr=r(F1t,"FlaxAutoModelForCausalLM"),F1t.forEach(t),dPe.forEach(t),Kke=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(MA.$$.fragment,gi),UTr=i(gi),rf=n(gi,"P",{});var KW=s(rf);JTr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y1e=n(KW,"CODE",{});var C1t=s(Y1e);YTr=r(C1t,"from_pretrained()"),C1t.forEach(t),KTr=r(KW,"class method or the "),K1e=n(KW,"CODE",{});var M1t=s(K1e);ZTr=r(M1t,"from_config()"),M1t.forEach(t),e7r=r(KW,`class
method.`),KW.forEach(t),o7r=i(gi),EA=n(gi,"P",{});var cPe=s(EA);r7r=r(cPe,"This class cannot be instantiated directly using "),Z1e=n(cPe,"CODE",{});var E1t=s(Z1e);t7r=r(E1t,"__init__()"),E1t.forEach(t),a7r=r(cPe," (throws an error)."),cPe.forEach(t),n7r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(yA.$$.fragment,hi),s7r=i(hi),ebe=n(hi,"P",{});var y1t=s(ebe);l7r=r(y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1t.forEach(t),i7r=i(hi),tf=n(hi,"P",{});var ZW=s(tf);d7r=r(ZW,`Note:
Loading a model from its configuration file does `),obe=n(ZW,"STRONG",{});var w1t=s(obe);c7r=r(w1t,"not"),w1t.forEach(t),f7r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=n(ZW,"CODE",{});var A1t=s(rbe);m7r=r(A1t,"from_pretrained()"),A1t.forEach(t),g7r=r(ZW,"to load the model weights."),ZW.forEach(t),h7r=i(hi),tbe=n(hi,"P",{});var L1t=s(tbe);p7r=r(L1t,"Examples:"),L1t.forEach(t),_7r=i(hi),m(wA.$$.fragment,hi),hi.forEach(t),u7r=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(AA.$$.fragment,Ba),b7r=i(Ba),abe=n(Ba,"P",{});var B1t=s(abe);v7r=r(B1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B1t.forEach(t),T7r=i(Ba),xn=n(Ba,"P",{});var N4=s(xn);F7r=r(N4,"The model class to instantiate is selected based on the "),nbe=n(N4,"CODE",{});var x1t=s(nbe);C7r=r(x1t,"model_type"),x1t.forEach(t),M7r=r(N4,` property of the config object (either
passed as an argument or loaded from `),sbe=n(N4,"CODE",{});var k1t=s(sbe);E7r=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),y7r=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(N4,"CODE",{});var R1t=s(lbe);w7r=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),A7r=r(N4,":"),N4.forEach(t),L7r=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);vC=n(pi,"LI",{});var J9e=s(vC);ibe=n(J9e,"STRONG",{});var S1t=s(ibe);B7r=r(S1t,"bart"),S1t.forEach(t),x7r=r(J9e," \u2014 "),sV=n(J9e,"A",{href:!0});var P1t=s(sV);k7r=r(P1t,"FlaxBartForCausalLM"),P1t.forEach(t),R7r=r(J9e," (BART model)"),J9e.forEach(t),S7r=i(pi),TC=n(pi,"LI",{});var Y9e=s(TC);dbe=n(Y9e,"STRONG",{});var $1t=s(dbe);P7r=r($1t,"gpt2"),$1t.forEach(t),$7r=r(Y9e," \u2014 "),lV=n(Y9e,"A",{href:!0});var I1t=s(lV);I7r=r(I1t,"FlaxGPT2LMHeadModel"),I1t.forEach(t),j7r=r(Y9e," (OpenAI GPT-2 model)"),Y9e.forEach(t),D7r=i(pi),FC=n(pi,"LI",{});var K9e=s(FC);cbe=n(K9e,"STRONG",{});var j1t=s(cbe);N7r=r(j1t,"gpt_neo"),j1t.forEach(t),q7r=r(K9e," \u2014 "),iV=n(K9e,"A",{href:!0});var D1t=s(iV);O7r=r(D1t,"FlaxGPTNeoForCausalLM"),D1t.forEach(t),G7r=r(K9e," (GPT Neo model)"),K9e.forEach(t),X7r=i(pi),CC=n(pi,"LI",{});var Z9e=s(CC);fbe=n(Z9e,"STRONG",{});var N1t=s(fbe);V7r=r(N1t,"gptj"),N1t.forEach(t),z7r=r(Z9e," \u2014 "),dV=n(Z9e,"A",{href:!0});var q1t=s(dV);W7r=r(q1t,"FlaxGPTJForCausalLM"),q1t.forEach(t),Q7r=r(Z9e," (GPT-J model)"),Z9e.forEach(t),H7r=i(pi),MC=n(pi,"LI",{});var eBe=s(MC);mbe=n(eBe,"STRONG",{});var O1t=s(mbe);U7r=r(O1t,"xglm"),O1t.forEach(t),J7r=r(eBe," \u2014 "),cV=n(eBe,"A",{href:!0});var G1t=s(cV);Y7r=r(G1t,"FlaxXGLMForCausalLM"),G1t.forEach(t),K7r=r(eBe," (XGLM model)"),eBe.forEach(t),pi.forEach(t),Z7r=i(Ba),gbe=n(Ba,"P",{});var X1t=s(gbe);eFr=r(X1t,"Examples:"),X1t.forEach(t),oFr=i(Ba),m(LA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),Zke=i(c),af=n(c,"H2",{class:!0});var fPe=s(af);EC=n(fPe,"A",{id:!0,class:!0,href:!0});var V1t=s(EC);hbe=n(V1t,"SPAN",{});var z1t=s(hbe);m(BA.$$.fragment,z1t),z1t.forEach(t),V1t.forEach(t),rFr=i(fPe),pbe=n(fPe,"SPAN",{});var W1t=s(pbe);tFr=r(W1t,"FlaxAutoModelForPreTraining"),W1t.forEach(t),fPe.forEach(t),eRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(xA.$$.fragment,_i),aFr=i(_i),nf=n(_i,"P",{});var eQ=s(nf);nFr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_be=n(eQ,"CODE",{});var Q1t=s(_be);sFr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),lFr=r(eQ,"class method or the "),ube=n(eQ,"CODE",{});var H1t=s(ube);iFr=r(H1t,"from_config()"),H1t.forEach(t),dFr=r(eQ,`class
method.`),eQ.forEach(t),cFr=i(_i),kA=n(_i,"P",{});var mPe=s(kA);fFr=r(mPe,"This class cannot be instantiated directly using "),bbe=n(mPe,"CODE",{});var U1t=s(bbe);mFr=r(U1t,"__init__()"),U1t.forEach(t),gFr=r(mPe," (throws an error)."),mPe.forEach(t),hFr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(RA.$$.fragment,ui),pFr=i(ui),vbe=n(ui,"P",{});var J1t=s(vbe);_Fr=r(J1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J1t.forEach(t),uFr=i(ui),sf=n(ui,"P",{});var oQ=s(sf);bFr=r(oQ,`Note:
Loading a model from its configuration file does `),Tbe=n(oQ,"STRONG",{});var Y1t=s(Tbe);vFr=r(Y1t,"not"),Y1t.forEach(t),TFr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=n(oQ,"CODE",{});var K1t=s(Fbe);FFr=r(K1t,"from_pretrained()"),K1t.forEach(t),CFr=r(oQ,"to load the model weights."),oQ.forEach(t),MFr=i(ui),Cbe=n(ui,"P",{});var Z1t=s(Cbe);EFr=r(Z1t,"Examples:"),Z1t.forEach(t),yFr=i(ui),m(SA.$$.fragment,ui),ui.forEach(t),wFr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(PA.$$.fragment,xa),AFr=i(xa),Mbe=n(xa,"P",{});var ebt=s(Mbe);LFr=r(ebt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ebt.forEach(t),BFr=i(xa),kn=n(xa,"P",{});var q4=s(kn);xFr=r(q4,"The model class to instantiate is selected based on the "),Ebe=n(q4,"CODE",{});var obt=s(Ebe);kFr=r(obt,"model_type"),obt.forEach(t),RFr=r(q4,` property of the config object (either
passed as an argument or loaded from `),ybe=n(q4,"CODE",{});var rbt=s(ybe);SFr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),PFr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(q4,"CODE",{});var tbt=s(wbe);$Fr=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),IFr=r(q4,":"),q4.forEach(t),jFr=i(xa),ce=n(xa,"UL",{});var me=s(ce);yC=n(me,"LI",{});var oBe=s(yC);Abe=n(oBe,"STRONG",{});var abt=s(Abe);DFr=r(abt,"albert"),abt.forEach(t),NFr=r(oBe," \u2014 "),fV=n(oBe,"A",{href:!0});var nbt=s(fV);qFr=r(nbt,"FlaxAlbertForPreTraining"),nbt.forEach(t),OFr=r(oBe," (ALBERT model)"),oBe.forEach(t),GFr=i(me),wC=n(me,"LI",{});var rBe=s(wC);Lbe=n(rBe,"STRONG",{});var sbt=s(Lbe);XFr=r(sbt,"bart"),sbt.forEach(t),VFr=r(rBe," \u2014 "),mV=n(rBe,"A",{href:!0});var lbt=s(mV);zFr=r(lbt,"FlaxBartForConditionalGeneration"),lbt.forEach(t),WFr=r(rBe," (BART model)"),rBe.forEach(t),QFr=i(me),AC=n(me,"LI",{});var tBe=s(AC);Bbe=n(tBe,"STRONG",{});var ibt=s(Bbe);HFr=r(ibt,"bert"),ibt.forEach(t),UFr=r(tBe," \u2014 "),gV=n(tBe,"A",{href:!0});var dbt=s(gV);JFr=r(dbt,"FlaxBertForPreTraining"),dbt.forEach(t),YFr=r(tBe," (BERT model)"),tBe.forEach(t),KFr=i(me),LC=n(me,"LI",{});var aBe=s(LC);xbe=n(aBe,"STRONG",{});var cbt=s(xbe);ZFr=r(cbt,"big_bird"),cbt.forEach(t),eCr=r(aBe," \u2014 "),hV=n(aBe,"A",{href:!0});var fbt=s(hV);oCr=r(fbt,"FlaxBigBirdForPreTraining"),fbt.forEach(t),rCr=r(aBe," (BigBird model)"),aBe.forEach(t),tCr=i(me),BC=n(me,"LI",{});var nBe=s(BC);kbe=n(nBe,"STRONG",{});var mbt=s(kbe);aCr=r(mbt,"electra"),mbt.forEach(t),nCr=r(nBe," \u2014 "),pV=n(nBe,"A",{href:!0});var gbt=s(pV);sCr=r(gbt,"FlaxElectraForPreTraining"),gbt.forEach(t),lCr=r(nBe," (ELECTRA model)"),nBe.forEach(t),iCr=i(me),xC=n(me,"LI",{});var sBe=s(xC);Rbe=n(sBe,"STRONG",{});var hbt=s(Rbe);dCr=r(hbt,"mbart"),hbt.forEach(t),cCr=r(sBe," \u2014 "),_V=n(sBe,"A",{href:!0});var pbt=s(_V);fCr=r(pbt,"FlaxMBartForConditionalGeneration"),pbt.forEach(t),mCr=r(sBe," (mBART model)"),sBe.forEach(t),gCr=i(me),kC=n(me,"LI",{});var lBe=s(kC);Sbe=n(lBe,"STRONG",{});var _bt=s(Sbe);hCr=r(_bt,"mt5"),_bt.forEach(t),pCr=r(lBe," \u2014 "),uV=n(lBe,"A",{href:!0});var ubt=s(uV);_Cr=r(ubt,"FlaxMT5ForConditionalGeneration"),ubt.forEach(t),uCr=r(lBe," (mT5 model)"),lBe.forEach(t),bCr=i(me),RC=n(me,"LI",{});var iBe=s(RC);Pbe=n(iBe,"STRONG",{});var bbt=s(Pbe);vCr=r(bbt,"roberta"),bbt.forEach(t),TCr=r(iBe," \u2014 "),bV=n(iBe,"A",{href:!0});var vbt=s(bV);FCr=r(vbt,"FlaxRobertaForMaskedLM"),vbt.forEach(t),CCr=r(iBe," (RoBERTa model)"),iBe.forEach(t),MCr=i(me),SC=n(me,"LI",{});var dBe=s(SC);$be=n(dBe,"STRONG",{});var Tbt=s($be);ECr=r(Tbt,"roformer"),Tbt.forEach(t),yCr=r(dBe," \u2014 "),vV=n(dBe,"A",{href:!0});var Fbt=s(vV);wCr=r(Fbt,"FlaxRoFormerForMaskedLM"),Fbt.forEach(t),ACr=r(dBe," (RoFormer model)"),dBe.forEach(t),LCr=i(me),PC=n(me,"LI",{});var cBe=s(PC);Ibe=n(cBe,"STRONG",{});var Cbt=s(Ibe);BCr=r(Cbt,"t5"),Cbt.forEach(t),xCr=r(cBe," \u2014 "),TV=n(cBe,"A",{href:!0});var Mbt=s(TV);kCr=r(Mbt,"FlaxT5ForConditionalGeneration"),Mbt.forEach(t),RCr=r(cBe," (T5 model)"),cBe.forEach(t),SCr=i(me),$C=n(me,"LI",{});var fBe=s($C);jbe=n(fBe,"STRONG",{});var Ebt=s(jbe);PCr=r(Ebt,"wav2vec2"),Ebt.forEach(t),$Cr=r(fBe," \u2014 "),FV=n(fBe,"A",{href:!0});var ybt=s(FV);ICr=r(ybt,"FlaxWav2Vec2ForPreTraining"),ybt.forEach(t),jCr=r(fBe," (Wav2Vec2 model)"),fBe.forEach(t),DCr=i(me),IC=n(me,"LI",{});var mBe=s(IC);Dbe=n(mBe,"STRONG",{});var wbt=s(Dbe);NCr=r(wbt,"xlm-roberta"),wbt.forEach(t),qCr=r(mBe," \u2014 "),CV=n(mBe,"A",{href:!0});var Abt=s(CV);OCr=r(Abt,"FlaxXLMRobertaForMaskedLM"),Abt.forEach(t),GCr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),me.forEach(t),XCr=i(xa),Nbe=n(xa,"P",{});var Lbt=s(Nbe);VCr=r(Lbt,"Examples:"),Lbt.forEach(t),zCr=i(xa),m($A.$$.fragment,xa),xa.forEach(t),_i.forEach(t),oRe=i(c),lf=n(c,"H2",{class:!0});var gPe=s(lf);jC=n(gPe,"A",{id:!0,class:!0,href:!0});var Bbt=s(jC);qbe=n(Bbt,"SPAN",{});var xbt=s(qbe);m(IA.$$.fragment,xbt),xbt.forEach(t),Bbt.forEach(t),WCr=i(gPe),Obe=n(gPe,"SPAN",{});var kbt=s(Obe);QCr=r(kbt,"FlaxAutoModelForMaskedLM"),kbt.forEach(t),gPe.forEach(t),rRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(jA.$$.fragment,bi),HCr=i(bi),df=n(bi,"P",{});var rQ=s(df);UCr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gbe=n(rQ,"CODE",{});var Rbt=s(Gbe);JCr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),YCr=r(rQ,"class method or the "),Xbe=n(rQ,"CODE",{});var Sbt=s(Xbe);KCr=r(Sbt,"from_config()"),Sbt.forEach(t),ZCr=r(rQ,`class
method.`),rQ.forEach(t),eMr=i(bi),DA=n(bi,"P",{});var hPe=s(DA);oMr=r(hPe,"This class cannot be instantiated directly using "),Vbe=n(hPe,"CODE",{});var Pbt=s(Vbe);rMr=r(Pbt,"__init__()"),Pbt.forEach(t),tMr=r(hPe," (throws an error)."),hPe.forEach(t),aMr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(NA.$$.fragment,vi),nMr=i(vi),zbe=n(vi,"P",{});var $bt=s(zbe);sMr=r($bt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$bt.forEach(t),lMr=i(vi),cf=n(vi,"P",{});var tQ=s(cf);iMr=r(tQ,`Note:
Loading a model from its configuration file does `),Wbe=n(tQ,"STRONG",{});var Ibt=s(Wbe);dMr=r(Ibt,"not"),Ibt.forEach(t),cMr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=n(tQ,"CODE",{});var jbt=s(Qbe);fMr=r(jbt,"from_pretrained()"),jbt.forEach(t),mMr=r(tQ,"to load the model weights."),tQ.forEach(t),gMr=i(vi),Hbe=n(vi,"P",{});var Dbt=s(Hbe);hMr=r(Dbt,"Examples:"),Dbt.forEach(t),pMr=i(vi),m(qA.$$.fragment,vi),vi.forEach(t),_Mr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(OA.$$.fragment,ka),uMr=i(ka),Ube=n(ka,"P",{});var Nbt=s(Ube);bMr=r(Nbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nbt.forEach(t),vMr=i(ka),Rn=n(ka,"P",{});var O4=s(Rn);TMr=r(O4,"The model class to instantiate is selected based on the "),Jbe=n(O4,"CODE",{});var qbt=s(Jbe);FMr=r(qbt,"model_type"),qbt.forEach(t),CMr=r(O4,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(O4,"CODE",{});var Obt=s(Ybe);MMr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),EMr=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(O4,"CODE",{});var Gbt=s(Kbe);yMr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),wMr=r(O4,":"),O4.forEach(t),AMr=i(ka),be=n(ka,"UL",{});var we=s(be);DC=n(we,"LI",{});var gBe=s(DC);Zbe=n(gBe,"STRONG",{});var Xbt=s(Zbe);LMr=r(Xbt,"albert"),Xbt.forEach(t),BMr=r(gBe," \u2014 "),MV=n(gBe,"A",{href:!0});var Vbt=s(MV);xMr=r(Vbt,"FlaxAlbertForMaskedLM"),Vbt.forEach(t),kMr=r(gBe," (ALBERT model)"),gBe.forEach(t),RMr=i(we),NC=n(we,"LI",{});var hBe=s(NC);eve=n(hBe,"STRONG",{});var zbt=s(eve);SMr=r(zbt,"bart"),zbt.forEach(t),PMr=r(hBe," \u2014 "),EV=n(hBe,"A",{href:!0});var Wbt=s(EV);$Mr=r(Wbt,"FlaxBartForConditionalGeneration"),Wbt.forEach(t),IMr=r(hBe," (BART model)"),hBe.forEach(t),jMr=i(we),qC=n(we,"LI",{});var pBe=s(qC);ove=n(pBe,"STRONG",{});var Qbt=s(ove);DMr=r(Qbt,"bert"),Qbt.forEach(t),NMr=r(pBe," \u2014 "),yV=n(pBe,"A",{href:!0});var Hbt=s(yV);qMr=r(Hbt,"FlaxBertForMaskedLM"),Hbt.forEach(t),OMr=r(pBe," (BERT model)"),pBe.forEach(t),GMr=i(we),OC=n(we,"LI",{});var _Be=s(OC);rve=n(_Be,"STRONG",{});var Ubt=s(rve);XMr=r(Ubt,"big_bird"),Ubt.forEach(t),VMr=r(_Be," \u2014 "),wV=n(_Be,"A",{href:!0});var Jbt=s(wV);zMr=r(Jbt,"FlaxBigBirdForMaskedLM"),Jbt.forEach(t),WMr=r(_Be," (BigBird model)"),_Be.forEach(t),QMr=i(we),GC=n(we,"LI",{});var uBe=s(GC);tve=n(uBe,"STRONG",{});var Ybt=s(tve);HMr=r(Ybt,"distilbert"),Ybt.forEach(t),UMr=r(uBe," \u2014 "),AV=n(uBe,"A",{href:!0});var Kbt=s(AV);JMr=r(Kbt,"FlaxDistilBertForMaskedLM"),Kbt.forEach(t),YMr=r(uBe," (DistilBERT model)"),uBe.forEach(t),KMr=i(we),XC=n(we,"LI",{});var bBe=s(XC);ave=n(bBe,"STRONG",{});var Zbt=s(ave);ZMr=r(Zbt,"electra"),Zbt.forEach(t),e4r=r(bBe," \u2014 "),LV=n(bBe,"A",{href:!0});var evt=s(LV);o4r=r(evt,"FlaxElectraForMaskedLM"),evt.forEach(t),r4r=r(bBe," (ELECTRA model)"),bBe.forEach(t),t4r=i(we),VC=n(we,"LI",{});var vBe=s(VC);nve=n(vBe,"STRONG",{});var ovt=s(nve);a4r=r(ovt,"mbart"),ovt.forEach(t),n4r=r(vBe," \u2014 "),BV=n(vBe,"A",{href:!0});var rvt=s(BV);s4r=r(rvt,"FlaxMBartForConditionalGeneration"),rvt.forEach(t),l4r=r(vBe," (mBART model)"),vBe.forEach(t),i4r=i(we),zC=n(we,"LI",{});var TBe=s(zC);sve=n(TBe,"STRONG",{});var tvt=s(sve);d4r=r(tvt,"roberta"),tvt.forEach(t),c4r=r(TBe," \u2014 "),xV=n(TBe,"A",{href:!0});var avt=s(xV);f4r=r(avt,"FlaxRobertaForMaskedLM"),avt.forEach(t),m4r=r(TBe," (RoBERTa model)"),TBe.forEach(t),g4r=i(we),WC=n(we,"LI",{});var FBe=s(WC);lve=n(FBe,"STRONG",{});var nvt=s(lve);h4r=r(nvt,"roformer"),nvt.forEach(t),p4r=r(FBe," \u2014 "),kV=n(FBe,"A",{href:!0});var svt=s(kV);_4r=r(svt,"FlaxRoFormerForMaskedLM"),svt.forEach(t),u4r=r(FBe," (RoFormer model)"),FBe.forEach(t),b4r=i(we),QC=n(we,"LI",{});var CBe=s(QC);ive=n(CBe,"STRONG",{});var lvt=s(ive);v4r=r(lvt,"xlm-roberta"),lvt.forEach(t),T4r=r(CBe," \u2014 "),RV=n(CBe,"A",{href:!0});var ivt=s(RV);F4r=r(ivt,"FlaxXLMRobertaForMaskedLM"),ivt.forEach(t),C4r=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),we.forEach(t),M4r=i(ka),dve=n(ka,"P",{});var dvt=s(dve);E4r=r(dvt,"Examples:"),dvt.forEach(t),y4r=i(ka),m(GA.$$.fragment,ka),ka.forEach(t),bi.forEach(t),tRe=i(c),ff=n(c,"H2",{class:!0});var pPe=s(ff);HC=n(pPe,"A",{id:!0,class:!0,href:!0});var cvt=s(HC);cve=n(cvt,"SPAN",{});var fvt=s(cve);m(XA.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),w4r=i(pPe),fve=n(pPe,"SPAN",{});var mvt=s(fve);A4r=r(mvt,"FlaxAutoModelForSeq2SeqLM"),mvt.forEach(t),pPe.forEach(t),aRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(VA.$$.fragment,Ti),L4r=i(Ti),mf=n(Ti,"P",{});var aQ=s(mf);B4r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mve=n(aQ,"CODE",{});var gvt=s(mve);x4r=r(gvt,"from_pretrained()"),gvt.forEach(t),k4r=r(aQ,"class method or the "),gve=n(aQ,"CODE",{});var hvt=s(gve);R4r=r(hvt,"from_config()"),hvt.forEach(t),S4r=r(aQ,`class
method.`),aQ.forEach(t),P4r=i(Ti),zA=n(Ti,"P",{});var _Pe=s(zA);$4r=r(_Pe,"This class cannot be instantiated directly using "),hve=n(_Pe,"CODE",{});var pvt=s(hve);I4r=r(pvt,"__init__()"),pvt.forEach(t),j4r=r(_Pe," (throws an error)."),_Pe.forEach(t),D4r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(WA.$$.fragment,Fi),N4r=i(Fi),pve=n(Fi,"P",{});var _vt=s(pve);q4r=r(_vt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_vt.forEach(t),O4r=i(Fi),gf=n(Fi,"P",{});var nQ=s(gf);G4r=r(nQ,`Note:
Loading a model from its configuration file does `),_ve=n(nQ,"STRONG",{});var uvt=s(_ve);X4r=r(uvt,"not"),uvt.forEach(t),V4r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=n(nQ,"CODE",{});var bvt=s(uve);z4r=r(bvt,"from_pretrained()"),bvt.forEach(t),W4r=r(nQ,"to load the model weights."),nQ.forEach(t),Q4r=i(Fi),bve=n(Fi,"P",{});var vvt=s(bve);H4r=r(vvt,"Examples:"),vvt.forEach(t),U4r=i(Fi),m(QA.$$.fragment,Fi),Fi.forEach(t),J4r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(HA.$$.fragment,Ra),Y4r=i(Ra),vve=n(Ra,"P",{});var Tvt=s(vve);K4r=r(Tvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tvt.forEach(t),Z4r=i(Ra),Sn=n(Ra,"P",{});var G4=s(Sn);eEr=r(G4,"The model class to instantiate is selected based on the "),Tve=n(G4,"CODE",{});var Fvt=s(Tve);oEr=r(Fvt,"model_type"),Fvt.forEach(t),rEr=r(G4,` property of the config object (either
passed as an argument or loaded from `),Fve=n(G4,"CODE",{});var Cvt=s(Fve);tEr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),aEr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(G4,"CODE",{});var Mvt=s(Cve);nEr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),sEr=r(G4,":"),G4.forEach(t),lEr=i(Ra),Ce=n(Ra,"UL",{});var lo=s(Ce);UC=n(lo,"LI",{});var MBe=s(UC);Mve=n(MBe,"STRONG",{});var Evt=s(Mve);iEr=r(Evt,"bart"),Evt.forEach(t),dEr=r(MBe," \u2014 "),SV=n(MBe,"A",{href:!0});var yvt=s(SV);cEr=r(yvt,"FlaxBartForConditionalGeneration"),yvt.forEach(t),fEr=r(MBe," (BART model)"),MBe.forEach(t),mEr=i(lo),JC=n(lo,"LI",{});var EBe=s(JC);Eve=n(EBe,"STRONG",{});var wvt=s(Eve);gEr=r(wvt,"blenderbot"),wvt.forEach(t),hEr=r(EBe," \u2014 "),PV=n(EBe,"A",{href:!0});var Avt=s(PV);pEr=r(Avt,"FlaxBlenderbotForConditionalGeneration"),Avt.forEach(t),_Er=r(EBe," (Blenderbot model)"),EBe.forEach(t),uEr=i(lo),YC=n(lo,"LI",{});var yBe=s(YC);yve=n(yBe,"STRONG",{});var Lvt=s(yve);bEr=r(Lvt,"blenderbot-small"),Lvt.forEach(t),vEr=r(yBe," \u2014 "),$V=n(yBe,"A",{href:!0});var Bvt=s($V);TEr=r(Bvt,"FlaxBlenderbotSmallForConditionalGeneration"),Bvt.forEach(t),FEr=r(yBe," (BlenderbotSmall model)"),yBe.forEach(t),CEr=i(lo),KC=n(lo,"LI",{});var wBe=s(KC);wve=n(wBe,"STRONG",{});var xvt=s(wve);MEr=r(xvt,"encoder-decoder"),xvt.forEach(t),EEr=r(wBe," \u2014 "),IV=n(wBe,"A",{href:!0});var kvt=s(IV);yEr=r(kvt,"FlaxEncoderDecoderModel"),kvt.forEach(t),wEr=r(wBe," (Encoder decoder model)"),wBe.forEach(t),AEr=i(lo),ZC=n(lo,"LI",{});var ABe=s(ZC);Ave=n(ABe,"STRONG",{});var Rvt=s(Ave);LEr=r(Rvt,"marian"),Rvt.forEach(t),BEr=r(ABe," \u2014 "),jV=n(ABe,"A",{href:!0});var Svt=s(jV);xEr=r(Svt,"FlaxMarianMTModel"),Svt.forEach(t),kEr=r(ABe," (Marian model)"),ABe.forEach(t),REr=i(lo),eM=n(lo,"LI",{});var LBe=s(eM);Lve=n(LBe,"STRONG",{});var Pvt=s(Lve);SEr=r(Pvt,"mbart"),Pvt.forEach(t),PEr=r(LBe," \u2014 "),DV=n(LBe,"A",{href:!0});var $vt=s(DV);$Er=r($vt,"FlaxMBartForConditionalGeneration"),$vt.forEach(t),IEr=r(LBe," (mBART model)"),LBe.forEach(t),jEr=i(lo),oM=n(lo,"LI",{});var BBe=s(oM);Bve=n(BBe,"STRONG",{});var Ivt=s(Bve);DEr=r(Ivt,"mt5"),Ivt.forEach(t),NEr=r(BBe," \u2014 "),NV=n(BBe,"A",{href:!0});var jvt=s(NV);qEr=r(jvt,"FlaxMT5ForConditionalGeneration"),jvt.forEach(t),OEr=r(BBe," (mT5 model)"),BBe.forEach(t),GEr=i(lo),rM=n(lo,"LI",{});var xBe=s(rM);xve=n(xBe,"STRONG",{});var Dvt=s(xve);XEr=r(Dvt,"pegasus"),Dvt.forEach(t),VEr=r(xBe," \u2014 "),qV=n(xBe,"A",{href:!0});var Nvt=s(qV);zEr=r(Nvt,"FlaxPegasusForConditionalGeneration"),Nvt.forEach(t),WEr=r(xBe," (Pegasus model)"),xBe.forEach(t),QEr=i(lo),tM=n(lo,"LI",{});var kBe=s(tM);kve=n(kBe,"STRONG",{});var qvt=s(kve);HEr=r(qvt,"t5"),qvt.forEach(t),UEr=r(kBe," \u2014 "),OV=n(kBe,"A",{href:!0});var Ovt=s(OV);JEr=r(Ovt,"FlaxT5ForConditionalGeneration"),Ovt.forEach(t),YEr=r(kBe," (T5 model)"),kBe.forEach(t),lo.forEach(t),KEr=i(Ra),Rve=n(Ra,"P",{});var Gvt=s(Rve);ZEr=r(Gvt,"Examples:"),Gvt.forEach(t),e3r=i(Ra),m(UA.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),nRe=i(c),hf=n(c,"H2",{class:!0});var uPe=s(hf);aM=n(uPe,"A",{id:!0,class:!0,href:!0});var Xvt=s(aM);Sve=n(Xvt,"SPAN",{});var Vvt=s(Sve);m(JA.$$.fragment,Vvt),Vvt.forEach(t),Xvt.forEach(t),o3r=i(uPe),Pve=n(uPe,"SPAN",{});var zvt=s(Pve);r3r=r(zvt,"FlaxAutoModelForSequenceClassification"),zvt.forEach(t),uPe.forEach(t),sRe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(YA.$$.fragment,Ci),t3r=i(Ci),pf=n(Ci,"P",{});var sQ=s(pf);a3r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$ve=n(sQ,"CODE",{});var Wvt=s($ve);n3r=r(Wvt,"from_pretrained()"),Wvt.forEach(t),s3r=r(sQ,"class method or the "),Ive=n(sQ,"CODE",{});var Qvt=s(Ive);l3r=r(Qvt,"from_config()"),Qvt.forEach(t),i3r=r(sQ,`class
method.`),sQ.forEach(t),d3r=i(Ci),KA=n(Ci,"P",{});var bPe=s(KA);c3r=r(bPe,"This class cannot be instantiated directly using "),jve=n(bPe,"CODE",{});var Hvt=s(jve);f3r=r(Hvt,"__init__()"),Hvt.forEach(t),m3r=r(bPe," (throws an error)."),bPe.forEach(t),g3r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(ZA.$$.fragment,Mi),h3r=i(Mi),Dve=n(Mi,"P",{});var Uvt=s(Dve);p3r=r(Uvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uvt.forEach(t),_3r=i(Mi),_f=n(Mi,"P",{});var lQ=s(_f);u3r=r(lQ,`Note:
Loading a model from its configuration file does `),Nve=n(lQ,"STRONG",{});var Jvt=s(Nve);b3r=r(Jvt,"not"),Jvt.forEach(t),v3r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qve=n(lQ,"CODE",{});var Yvt=s(qve);T3r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),F3r=r(lQ,"to load the model weights."),lQ.forEach(t),C3r=i(Mi),Ove=n(Mi,"P",{});var Kvt=s(Ove);M3r=r(Kvt,"Examples:"),Kvt.forEach(t),E3r=i(Mi),m(eL.$$.fragment,Mi),Mi.forEach(t),y3r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(oL.$$.fragment,Sa),w3r=i(Sa),Gve=n(Sa,"P",{});var Zvt=s(Gve);A3r=r(Zvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zvt.forEach(t),L3r=i(Sa),Pn=n(Sa,"P",{});var X4=s(Pn);B3r=r(X4,"The model class to instantiate is selected based on the "),Xve=n(X4,"CODE",{});var e6t=s(Xve);x3r=r(e6t,"model_type"),e6t.forEach(t),k3r=r(X4,` property of the config object (either
passed as an argument or loaded from `),Vve=n(X4,"CODE",{});var o6t=s(Vve);R3r=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),S3r=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(X4,"CODE",{});var r6t=s(zve);P3r=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),$3r=r(X4,":"),X4.forEach(t),I3r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);nM=n(Ae,"LI",{});var RBe=s(nM);Wve=n(RBe,"STRONG",{});var t6t=s(Wve);j3r=r(t6t,"albert"),t6t.forEach(t),D3r=r(RBe," \u2014 "),GV=n(RBe,"A",{href:!0});var a6t=s(GV);N3r=r(a6t,"FlaxAlbertForSequenceClassification"),a6t.forEach(t),q3r=r(RBe," (ALBERT model)"),RBe.forEach(t),O3r=i(Ae),sM=n(Ae,"LI",{});var SBe=s(sM);Qve=n(SBe,"STRONG",{});var n6t=s(Qve);G3r=r(n6t,"bart"),n6t.forEach(t),X3r=r(SBe," \u2014 "),XV=n(SBe,"A",{href:!0});var s6t=s(XV);V3r=r(s6t,"FlaxBartForSequenceClassification"),s6t.forEach(t),z3r=r(SBe," (BART model)"),SBe.forEach(t),W3r=i(Ae),lM=n(Ae,"LI",{});var PBe=s(lM);Hve=n(PBe,"STRONG",{});var l6t=s(Hve);Q3r=r(l6t,"bert"),l6t.forEach(t),H3r=r(PBe," \u2014 "),VV=n(PBe,"A",{href:!0});var i6t=s(VV);U3r=r(i6t,"FlaxBertForSequenceClassification"),i6t.forEach(t),J3r=r(PBe," (BERT model)"),PBe.forEach(t),Y3r=i(Ae),iM=n(Ae,"LI",{});var $Be=s(iM);Uve=n($Be,"STRONG",{});var d6t=s(Uve);K3r=r(d6t,"big_bird"),d6t.forEach(t),Z3r=r($Be," \u2014 "),zV=n($Be,"A",{href:!0});var c6t=s(zV);e5r=r(c6t,"FlaxBigBirdForSequenceClassification"),c6t.forEach(t),o5r=r($Be," (BigBird model)"),$Be.forEach(t),r5r=i(Ae),dM=n(Ae,"LI",{});var IBe=s(dM);Jve=n(IBe,"STRONG",{});var f6t=s(Jve);t5r=r(f6t,"distilbert"),f6t.forEach(t),a5r=r(IBe," \u2014 "),WV=n(IBe,"A",{href:!0});var m6t=s(WV);n5r=r(m6t,"FlaxDistilBertForSequenceClassification"),m6t.forEach(t),s5r=r(IBe," (DistilBERT model)"),IBe.forEach(t),l5r=i(Ae),cM=n(Ae,"LI",{});var jBe=s(cM);Yve=n(jBe,"STRONG",{});var g6t=s(Yve);i5r=r(g6t,"electra"),g6t.forEach(t),d5r=r(jBe," \u2014 "),QV=n(jBe,"A",{href:!0});var h6t=s(QV);c5r=r(h6t,"FlaxElectraForSequenceClassification"),h6t.forEach(t),f5r=r(jBe," (ELECTRA model)"),jBe.forEach(t),m5r=i(Ae),fM=n(Ae,"LI",{});var DBe=s(fM);Kve=n(DBe,"STRONG",{});var p6t=s(Kve);g5r=r(p6t,"mbart"),p6t.forEach(t),h5r=r(DBe," \u2014 "),HV=n(DBe,"A",{href:!0});var _6t=s(HV);p5r=r(_6t,"FlaxMBartForSequenceClassification"),_6t.forEach(t),_5r=r(DBe," (mBART model)"),DBe.forEach(t),u5r=i(Ae),mM=n(Ae,"LI",{});var NBe=s(mM);Zve=n(NBe,"STRONG",{});var u6t=s(Zve);b5r=r(u6t,"roberta"),u6t.forEach(t),v5r=r(NBe," \u2014 "),UV=n(NBe,"A",{href:!0});var b6t=s(UV);T5r=r(b6t,"FlaxRobertaForSequenceClassification"),b6t.forEach(t),F5r=r(NBe," (RoBERTa model)"),NBe.forEach(t),C5r=i(Ae),gM=n(Ae,"LI",{});var qBe=s(gM);e6e=n(qBe,"STRONG",{});var v6t=s(e6e);M5r=r(v6t,"roformer"),v6t.forEach(t),E5r=r(qBe," \u2014 "),JV=n(qBe,"A",{href:!0});var T6t=s(JV);y5r=r(T6t,"FlaxRoFormerForSequenceClassification"),T6t.forEach(t),w5r=r(qBe," (RoFormer model)"),qBe.forEach(t),A5r=i(Ae),hM=n(Ae,"LI",{});var OBe=s(hM);o6e=n(OBe,"STRONG",{});var F6t=s(o6e);L5r=r(F6t,"xlm-roberta"),F6t.forEach(t),B5r=r(OBe," \u2014 "),YV=n(OBe,"A",{href:!0});var C6t=s(YV);x5r=r(C6t,"FlaxXLMRobertaForSequenceClassification"),C6t.forEach(t),k5r=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),Ae.forEach(t),R5r=i(Sa),r6e=n(Sa,"P",{});var M6t=s(r6e);S5r=r(M6t,"Examples:"),M6t.forEach(t),P5r=i(Sa),m(rL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),lRe=i(c),uf=n(c,"H2",{class:!0});var vPe=s(uf);pM=n(vPe,"A",{id:!0,class:!0,href:!0});var E6t=s(pM);t6e=n(E6t,"SPAN",{});var y6t=s(t6e);m(tL.$$.fragment,y6t),y6t.forEach(t),E6t.forEach(t),$5r=i(vPe),a6e=n(vPe,"SPAN",{});var w6t=s(a6e);I5r=r(w6t,"FlaxAutoModelForQuestionAnswering"),w6t.forEach(t),vPe.forEach(t),iRe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(aL.$$.fragment,Ei),j5r=i(Ei),bf=n(Ei,"P",{});var iQ=s(bf);D5r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n6e=n(iQ,"CODE",{});var A6t=s(n6e);N5r=r(A6t,"from_pretrained()"),A6t.forEach(t),q5r=r(iQ,"class method or the "),s6e=n(iQ,"CODE",{});var L6t=s(s6e);O5r=r(L6t,"from_config()"),L6t.forEach(t),G5r=r(iQ,`class
method.`),iQ.forEach(t),X5r=i(Ei),nL=n(Ei,"P",{});var TPe=s(nL);V5r=r(TPe,"This class cannot be instantiated directly using "),l6e=n(TPe,"CODE",{});var B6t=s(l6e);z5r=r(B6t,"__init__()"),B6t.forEach(t),W5r=r(TPe," (throws an error)."),TPe.forEach(t),Q5r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(sL.$$.fragment,yi),H5r=i(yi),i6e=n(yi,"P",{});var x6t=s(i6e);U5r=r(x6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x6t.forEach(t),J5r=i(yi),vf=n(yi,"P",{});var dQ=s(vf);Y5r=r(dQ,`Note:
Loading a model from its configuration file does `),d6e=n(dQ,"STRONG",{});var k6t=s(d6e);K5r=r(k6t,"not"),k6t.forEach(t),Z5r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),c6e=n(dQ,"CODE",{});var R6t=s(c6e);eyr=r(R6t,"from_pretrained()"),R6t.forEach(t),oyr=r(dQ,"to load the model weights."),dQ.forEach(t),ryr=i(yi),f6e=n(yi,"P",{});var S6t=s(f6e);tyr=r(S6t,"Examples:"),S6t.forEach(t),ayr=i(yi),m(lL.$$.fragment,yi),yi.forEach(t),nyr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(iL.$$.fragment,Pa),syr=i(Pa),m6e=n(Pa,"P",{});var P6t=s(m6e);lyr=r(P6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),P6t.forEach(t),iyr=i(Pa),$n=n(Pa,"P",{});var V4=s($n);dyr=r(V4,"The model class to instantiate is selected based on the "),g6e=n(V4,"CODE",{});var $6t=s(g6e);cyr=r($6t,"model_type"),$6t.forEach(t),fyr=r(V4,` property of the config object (either
passed as an argument or loaded from `),h6e=n(V4,"CODE",{});var I6t=s(h6e);myr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),gyr=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(V4,"CODE",{});var j6t=s(p6e);hyr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),pyr=r(V4,":"),V4.forEach(t),_yr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);_M=n(Le,"LI",{});var GBe=s(_M);_6e=n(GBe,"STRONG",{});var D6t=s(_6e);uyr=r(D6t,"albert"),D6t.forEach(t),byr=r(GBe," \u2014 "),KV=n(GBe,"A",{href:!0});var N6t=s(KV);vyr=r(N6t,"FlaxAlbertForQuestionAnswering"),N6t.forEach(t),Tyr=r(GBe," (ALBERT model)"),GBe.forEach(t),Fyr=i(Le),uM=n(Le,"LI",{});var XBe=s(uM);u6e=n(XBe,"STRONG",{});var q6t=s(u6e);Cyr=r(q6t,"bart"),q6t.forEach(t),Myr=r(XBe," \u2014 "),ZV=n(XBe,"A",{href:!0});var O6t=s(ZV);Eyr=r(O6t,"FlaxBartForQuestionAnswering"),O6t.forEach(t),yyr=r(XBe," (BART model)"),XBe.forEach(t),wyr=i(Le),bM=n(Le,"LI",{});var VBe=s(bM);b6e=n(VBe,"STRONG",{});var G6t=s(b6e);Ayr=r(G6t,"bert"),G6t.forEach(t),Lyr=r(VBe," \u2014 "),ez=n(VBe,"A",{href:!0});var X6t=s(ez);Byr=r(X6t,"FlaxBertForQuestionAnswering"),X6t.forEach(t),xyr=r(VBe," (BERT model)"),VBe.forEach(t),kyr=i(Le),vM=n(Le,"LI",{});var zBe=s(vM);v6e=n(zBe,"STRONG",{});var V6t=s(v6e);Ryr=r(V6t,"big_bird"),V6t.forEach(t),Syr=r(zBe," \u2014 "),oz=n(zBe,"A",{href:!0});var z6t=s(oz);Pyr=r(z6t,"FlaxBigBirdForQuestionAnswering"),z6t.forEach(t),$yr=r(zBe," (BigBird model)"),zBe.forEach(t),Iyr=i(Le),TM=n(Le,"LI",{});var WBe=s(TM);T6e=n(WBe,"STRONG",{});var W6t=s(T6e);jyr=r(W6t,"distilbert"),W6t.forEach(t),Dyr=r(WBe," \u2014 "),rz=n(WBe,"A",{href:!0});var Q6t=s(rz);Nyr=r(Q6t,"FlaxDistilBertForQuestionAnswering"),Q6t.forEach(t),qyr=r(WBe," (DistilBERT model)"),WBe.forEach(t),Oyr=i(Le),FM=n(Le,"LI",{});var QBe=s(FM);F6e=n(QBe,"STRONG",{});var H6t=s(F6e);Gyr=r(H6t,"electra"),H6t.forEach(t),Xyr=r(QBe," \u2014 "),tz=n(QBe,"A",{href:!0});var U6t=s(tz);Vyr=r(U6t,"FlaxElectraForQuestionAnswering"),U6t.forEach(t),zyr=r(QBe," (ELECTRA model)"),QBe.forEach(t),Wyr=i(Le),CM=n(Le,"LI",{});var HBe=s(CM);C6e=n(HBe,"STRONG",{});var J6t=s(C6e);Qyr=r(J6t,"mbart"),J6t.forEach(t),Hyr=r(HBe," \u2014 "),az=n(HBe,"A",{href:!0});var Y6t=s(az);Uyr=r(Y6t,"FlaxMBartForQuestionAnswering"),Y6t.forEach(t),Jyr=r(HBe," (mBART model)"),HBe.forEach(t),Yyr=i(Le),MM=n(Le,"LI",{});var UBe=s(MM);M6e=n(UBe,"STRONG",{});var K6t=s(M6e);Kyr=r(K6t,"roberta"),K6t.forEach(t),Zyr=r(UBe," \u2014 "),nz=n(UBe,"A",{href:!0});var Z6t=s(nz);ewr=r(Z6t,"FlaxRobertaForQuestionAnswering"),Z6t.forEach(t),owr=r(UBe," (RoBERTa model)"),UBe.forEach(t),rwr=i(Le),EM=n(Le,"LI",{});var JBe=s(EM);E6e=n(JBe,"STRONG",{});var e0t=s(E6e);twr=r(e0t,"roformer"),e0t.forEach(t),awr=r(JBe," \u2014 "),sz=n(JBe,"A",{href:!0});var o0t=s(sz);nwr=r(o0t,"FlaxRoFormerForQuestionAnswering"),o0t.forEach(t),swr=r(JBe," (RoFormer model)"),JBe.forEach(t),lwr=i(Le),yM=n(Le,"LI",{});var YBe=s(yM);y6e=n(YBe,"STRONG",{});var r0t=s(y6e);iwr=r(r0t,"xlm-roberta"),r0t.forEach(t),dwr=r(YBe," \u2014 "),lz=n(YBe,"A",{href:!0});var t0t=s(lz);cwr=r(t0t,"FlaxXLMRobertaForQuestionAnswering"),t0t.forEach(t),fwr=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Le.forEach(t),mwr=i(Pa),w6e=n(Pa,"P",{});var a0t=s(w6e);gwr=r(a0t,"Examples:"),a0t.forEach(t),hwr=i(Pa),m(dL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),dRe=i(c),Tf=n(c,"H2",{class:!0});var FPe=s(Tf);wM=n(FPe,"A",{id:!0,class:!0,href:!0});var n0t=s(wM);A6e=n(n0t,"SPAN",{});var s0t=s(A6e);m(cL.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),pwr=i(FPe),L6e=n(FPe,"SPAN",{});var l0t=s(L6e);_wr=r(l0t,"FlaxAutoModelForTokenClassification"),l0t.forEach(t),FPe.forEach(t),cRe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(fL.$$.fragment,wi),uwr=i(wi),Ff=n(wi,"P",{});var cQ=s(Ff);bwr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B6e=n(cQ,"CODE",{});var i0t=s(B6e);vwr=r(i0t,"from_pretrained()"),i0t.forEach(t),Twr=r(cQ,"class method or the "),x6e=n(cQ,"CODE",{});var d0t=s(x6e);Fwr=r(d0t,"from_config()"),d0t.forEach(t),Cwr=r(cQ,`class
method.`),cQ.forEach(t),Mwr=i(wi),mL=n(wi,"P",{});var CPe=s(mL);Ewr=r(CPe,"This class cannot be instantiated directly using "),k6e=n(CPe,"CODE",{});var c0t=s(k6e);ywr=r(c0t,"__init__()"),c0t.forEach(t),wwr=r(CPe," (throws an error)."),CPe.forEach(t),Awr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(gL.$$.fragment,Ai),Lwr=i(Ai),R6e=n(Ai,"P",{});var f0t=s(R6e);Bwr=r(f0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f0t.forEach(t),xwr=i(Ai),Cf=n(Ai,"P",{});var fQ=s(Cf);kwr=r(fQ,`Note:
Loading a model from its configuration file does `),S6e=n(fQ,"STRONG",{});var m0t=s(S6e);Rwr=r(m0t,"not"),m0t.forEach(t),Swr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),P6e=n(fQ,"CODE",{});var g0t=s(P6e);Pwr=r(g0t,"from_pretrained()"),g0t.forEach(t),$wr=r(fQ,"to load the model weights."),fQ.forEach(t),Iwr=i(Ai),$6e=n(Ai,"P",{});var h0t=s($6e);jwr=r(h0t,"Examples:"),h0t.forEach(t),Dwr=i(Ai),m(hL.$$.fragment,Ai),Ai.forEach(t),Nwr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(pL.$$.fragment,$a),qwr=i($a),I6e=n($a,"P",{});var p0t=s(I6e);Owr=r(p0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p0t.forEach(t),Gwr=i($a),In=n($a,"P",{});var z4=s(In);Xwr=r(z4,"The model class to instantiate is selected based on the "),j6e=n(z4,"CODE",{});var _0t=s(j6e);Vwr=r(_0t,"model_type"),_0t.forEach(t),zwr=r(z4,` property of the config object (either
passed as an argument or loaded from `),D6e=n(z4,"CODE",{});var u0t=s(D6e);Wwr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),Qwr=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(z4,"CODE",{});var b0t=s(N6e);Hwr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),Uwr=r(z4,":"),z4.forEach(t),Jwr=i($a),Se=n($a,"UL",{});var Go=s(Se);AM=n(Go,"LI",{});var KBe=s(AM);q6e=n(KBe,"STRONG",{});var v0t=s(q6e);Ywr=r(v0t,"albert"),v0t.forEach(t),Kwr=r(KBe," \u2014 "),iz=n(KBe,"A",{href:!0});var T0t=s(iz);Zwr=r(T0t,"FlaxAlbertForTokenClassification"),T0t.forEach(t),eAr=r(KBe," (ALBERT model)"),KBe.forEach(t),oAr=i(Go),LM=n(Go,"LI",{});var ZBe=s(LM);O6e=n(ZBe,"STRONG",{});var F0t=s(O6e);rAr=r(F0t,"bert"),F0t.forEach(t),tAr=r(ZBe," \u2014 "),dz=n(ZBe,"A",{href:!0});var C0t=s(dz);aAr=r(C0t,"FlaxBertForTokenClassification"),C0t.forEach(t),nAr=r(ZBe," (BERT model)"),ZBe.forEach(t),sAr=i(Go),BM=n(Go,"LI",{});var exe=s(BM);G6e=n(exe,"STRONG",{});var M0t=s(G6e);lAr=r(M0t,"big_bird"),M0t.forEach(t),iAr=r(exe," \u2014 "),cz=n(exe,"A",{href:!0});var E0t=s(cz);dAr=r(E0t,"FlaxBigBirdForTokenClassification"),E0t.forEach(t),cAr=r(exe," (BigBird model)"),exe.forEach(t),fAr=i(Go),xM=n(Go,"LI",{});var oxe=s(xM);X6e=n(oxe,"STRONG",{});var y0t=s(X6e);mAr=r(y0t,"distilbert"),y0t.forEach(t),gAr=r(oxe," \u2014 "),fz=n(oxe,"A",{href:!0});var w0t=s(fz);hAr=r(w0t,"FlaxDistilBertForTokenClassification"),w0t.forEach(t),pAr=r(oxe," (DistilBERT model)"),oxe.forEach(t),_Ar=i(Go),kM=n(Go,"LI",{});var rxe=s(kM);V6e=n(rxe,"STRONG",{});var A0t=s(V6e);uAr=r(A0t,"electra"),A0t.forEach(t),bAr=r(rxe," \u2014 "),mz=n(rxe,"A",{href:!0});var L0t=s(mz);vAr=r(L0t,"FlaxElectraForTokenClassification"),L0t.forEach(t),TAr=r(rxe," (ELECTRA model)"),rxe.forEach(t),FAr=i(Go),RM=n(Go,"LI",{});var txe=s(RM);z6e=n(txe,"STRONG",{});var B0t=s(z6e);CAr=r(B0t,"roberta"),B0t.forEach(t),MAr=r(txe," \u2014 "),gz=n(txe,"A",{href:!0});var x0t=s(gz);EAr=r(x0t,"FlaxRobertaForTokenClassification"),x0t.forEach(t),yAr=r(txe," (RoBERTa model)"),txe.forEach(t),wAr=i(Go),SM=n(Go,"LI",{});var axe=s(SM);W6e=n(axe,"STRONG",{});var k0t=s(W6e);AAr=r(k0t,"roformer"),k0t.forEach(t),LAr=r(axe," \u2014 "),hz=n(axe,"A",{href:!0});var R0t=s(hz);BAr=r(R0t,"FlaxRoFormerForTokenClassification"),R0t.forEach(t),xAr=r(axe," (RoFormer model)"),axe.forEach(t),kAr=i(Go),PM=n(Go,"LI",{});var nxe=s(PM);Q6e=n(nxe,"STRONG",{});var S0t=s(Q6e);RAr=r(S0t,"xlm-roberta"),S0t.forEach(t),SAr=r(nxe," \u2014 "),pz=n(nxe,"A",{href:!0});var P0t=s(pz);PAr=r(P0t,"FlaxXLMRobertaForTokenClassification"),P0t.forEach(t),$Ar=r(nxe," (XLM-RoBERTa model)"),nxe.forEach(t),Go.forEach(t),IAr=i($a),H6e=n($a,"P",{});var $0t=s(H6e);jAr=r($0t,"Examples:"),$0t.forEach(t),DAr=i($a),m(_L.$$.fragment,$a),$a.forEach(t),wi.forEach(t),fRe=i(c),Mf=n(c,"H2",{class:!0});var MPe=s(Mf);$M=n(MPe,"A",{id:!0,class:!0,href:!0});var I0t=s($M);U6e=n(I0t,"SPAN",{});var j0t=s(U6e);m(uL.$$.fragment,j0t),j0t.forEach(t),I0t.forEach(t),NAr=i(MPe),J6e=n(MPe,"SPAN",{});var D0t=s(J6e);qAr=r(D0t,"FlaxAutoModelForMultipleChoice"),D0t.forEach(t),MPe.forEach(t),mRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(bL.$$.fragment,Li),OAr=i(Li),Ef=n(Li,"P",{});var mQ=s(Ef);GAr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y6e=n(mQ,"CODE",{});var N0t=s(Y6e);XAr=r(N0t,"from_pretrained()"),N0t.forEach(t),VAr=r(mQ,"class method or the "),K6e=n(mQ,"CODE",{});var q0t=s(K6e);zAr=r(q0t,"from_config()"),q0t.forEach(t),WAr=r(mQ,`class
method.`),mQ.forEach(t),QAr=i(Li),vL=n(Li,"P",{});var EPe=s(vL);HAr=r(EPe,"This class cannot be instantiated directly using "),Z6e=n(EPe,"CODE",{});var O0t=s(Z6e);UAr=r(O0t,"__init__()"),O0t.forEach(t),JAr=r(EPe," (throws an error)."),EPe.forEach(t),YAr=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(TL.$$.fragment,Bi),KAr=i(Bi),e0e=n(Bi,"P",{});var G0t=s(e0e);ZAr=r(G0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G0t.forEach(t),eLr=i(Bi),yf=n(Bi,"P",{});var gQ=s(yf);oLr=r(gQ,`Note:
Loading a model from its configuration file does `),o0e=n(gQ,"STRONG",{});var X0t=s(o0e);rLr=r(X0t,"not"),X0t.forEach(t),tLr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r0e=n(gQ,"CODE",{});var V0t=s(r0e);aLr=r(V0t,"from_pretrained()"),V0t.forEach(t),nLr=r(gQ,"to load the model weights."),gQ.forEach(t),sLr=i(Bi),t0e=n(Bi,"P",{});var z0t=s(t0e);lLr=r(z0t,"Examples:"),z0t.forEach(t),iLr=i(Bi),m(FL.$$.fragment,Bi),Bi.forEach(t),dLr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(CL.$$.fragment,Ia),cLr=i(Ia),a0e=n(Ia,"P",{});var W0t=s(a0e);fLr=r(W0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W0t.forEach(t),mLr=i(Ia),jn=n(Ia,"P",{});var W4=s(jn);gLr=r(W4,"The model class to instantiate is selected based on the "),n0e=n(W4,"CODE",{});var Q0t=s(n0e);hLr=r(Q0t,"model_type"),Q0t.forEach(t),pLr=r(W4,` property of the config object (either
passed as an argument or loaded from `),s0e=n(W4,"CODE",{});var H0t=s(s0e);_Lr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),uLr=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(W4,"CODE",{});var U0t=s(l0e);bLr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),vLr=r(W4,":"),W4.forEach(t),TLr=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);IM=n(Xo,"LI",{});var sxe=s(IM);i0e=n(sxe,"STRONG",{});var J0t=s(i0e);FLr=r(J0t,"albert"),J0t.forEach(t),CLr=r(sxe," \u2014 "),_z=n(sxe,"A",{href:!0});var Y0t=s(_z);MLr=r(Y0t,"FlaxAlbertForMultipleChoice"),Y0t.forEach(t),ELr=r(sxe," (ALBERT model)"),sxe.forEach(t),yLr=i(Xo),jM=n(Xo,"LI",{});var lxe=s(jM);d0e=n(lxe,"STRONG",{});var K0t=s(d0e);wLr=r(K0t,"bert"),K0t.forEach(t),ALr=r(lxe," \u2014 "),uz=n(lxe,"A",{href:!0});var Z0t=s(uz);LLr=r(Z0t,"FlaxBertForMultipleChoice"),Z0t.forEach(t),BLr=r(lxe," (BERT model)"),lxe.forEach(t),xLr=i(Xo),DM=n(Xo,"LI",{});var ixe=s(DM);c0e=n(ixe,"STRONG",{});var eTt=s(c0e);kLr=r(eTt,"big_bird"),eTt.forEach(t),RLr=r(ixe," \u2014 "),bz=n(ixe,"A",{href:!0});var oTt=s(bz);SLr=r(oTt,"FlaxBigBirdForMultipleChoice"),oTt.forEach(t),PLr=r(ixe," (BigBird model)"),ixe.forEach(t),$Lr=i(Xo),NM=n(Xo,"LI",{});var dxe=s(NM);f0e=n(dxe,"STRONG",{});var rTt=s(f0e);ILr=r(rTt,"distilbert"),rTt.forEach(t),jLr=r(dxe," \u2014 "),vz=n(dxe,"A",{href:!0});var tTt=s(vz);DLr=r(tTt,"FlaxDistilBertForMultipleChoice"),tTt.forEach(t),NLr=r(dxe," (DistilBERT model)"),dxe.forEach(t),qLr=i(Xo),qM=n(Xo,"LI",{});var cxe=s(qM);m0e=n(cxe,"STRONG",{});var aTt=s(m0e);OLr=r(aTt,"electra"),aTt.forEach(t),GLr=r(cxe," \u2014 "),Tz=n(cxe,"A",{href:!0});var nTt=s(Tz);XLr=r(nTt,"FlaxElectraForMultipleChoice"),nTt.forEach(t),VLr=r(cxe," (ELECTRA model)"),cxe.forEach(t),zLr=i(Xo),OM=n(Xo,"LI",{});var fxe=s(OM);g0e=n(fxe,"STRONG",{});var sTt=s(g0e);WLr=r(sTt,"roberta"),sTt.forEach(t),QLr=r(fxe," \u2014 "),Fz=n(fxe,"A",{href:!0});var lTt=s(Fz);HLr=r(lTt,"FlaxRobertaForMultipleChoice"),lTt.forEach(t),ULr=r(fxe," (RoBERTa model)"),fxe.forEach(t),JLr=i(Xo),GM=n(Xo,"LI",{});var mxe=s(GM);h0e=n(mxe,"STRONG",{});var iTt=s(h0e);YLr=r(iTt,"roformer"),iTt.forEach(t),KLr=r(mxe," \u2014 "),Cz=n(mxe,"A",{href:!0});var dTt=s(Cz);ZLr=r(dTt,"FlaxRoFormerForMultipleChoice"),dTt.forEach(t),e8r=r(mxe," (RoFormer model)"),mxe.forEach(t),o8r=i(Xo),XM=n(Xo,"LI",{});var gxe=s(XM);p0e=n(gxe,"STRONG",{});var cTt=s(p0e);r8r=r(cTt,"xlm-roberta"),cTt.forEach(t),t8r=r(gxe," \u2014 "),Mz=n(gxe,"A",{href:!0});var fTt=s(Mz);a8r=r(fTt,"FlaxXLMRobertaForMultipleChoice"),fTt.forEach(t),n8r=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),Xo.forEach(t),s8r=i(Ia),_0e=n(Ia,"P",{});var mTt=s(_0e);l8r=r(mTt,"Examples:"),mTt.forEach(t),i8r=i(Ia),m(ML.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),gRe=i(c),wf=n(c,"H2",{class:!0});var yPe=s(wf);VM=n(yPe,"A",{id:!0,class:!0,href:!0});var gTt=s(VM);u0e=n(gTt,"SPAN",{});var hTt=s(u0e);m(EL.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),d8r=i(yPe),b0e=n(yPe,"SPAN",{});var pTt=s(b0e);c8r=r(pTt,"FlaxAutoModelForNextSentencePrediction"),pTt.forEach(t),yPe.forEach(t),hRe=i(c),Or=n(c,"DIV",{class:!0});var xi=s(Or);m(yL.$$.fragment,xi),f8r=i(xi),Af=n(xi,"P",{});var hQ=s(Af);m8r=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),v0e=n(hQ,"CODE",{});var _Tt=s(v0e);g8r=r(_Tt,"from_pretrained()"),_Tt.forEach(t),h8r=r(hQ,"class method or the "),T0e=n(hQ,"CODE",{});var uTt=s(T0e);p8r=r(uTt,"from_config()"),uTt.forEach(t),_8r=r(hQ,`class
method.`),hQ.forEach(t),u8r=i(xi),wL=n(xi,"P",{});var wPe=s(wL);b8r=r(wPe,"This class cannot be instantiated directly using "),F0e=n(wPe,"CODE",{});var bTt=s(F0e);v8r=r(bTt,"__init__()"),bTt.forEach(t),T8r=r(wPe," (throws an error)."),wPe.forEach(t),F8r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(AL.$$.fragment,ki),C8r=i(ki),C0e=n(ki,"P",{});var vTt=s(C0e);M8r=r(vTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vTt.forEach(t),E8r=i(ki),Lf=n(ki,"P",{});var pQ=s(Lf);y8r=r(pQ,`Note:
Loading a model from its configuration file does `),M0e=n(pQ,"STRONG",{});var TTt=s(M0e);w8r=r(TTt,"not"),TTt.forEach(t),A8r=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E0e=n(pQ,"CODE",{});var FTt=s(E0e);L8r=r(FTt,"from_pretrained()"),FTt.forEach(t),B8r=r(pQ,"to load the model weights."),pQ.forEach(t),x8r=i(ki),y0e=n(ki,"P",{});var CTt=s(y0e);k8r=r(CTt,"Examples:"),CTt.forEach(t),R8r=i(ki),m(LL.$$.fragment,ki),ki.forEach(t),S8r=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(BL.$$.fragment,ja),P8r=i(ja),w0e=n(ja,"P",{});var MTt=s(w0e);$8r=r(MTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MTt.forEach(t),I8r=i(ja),Dn=n(ja,"P",{});var Q4=s(Dn);j8r=r(Q4,"The model class to instantiate is selected based on the "),A0e=n(Q4,"CODE",{});var ETt=s(A0e);D8r=r(ETt,"model_type"),ETt.forEach(t),N8r=r(Q4,` property of the config object (either
passed as an argument or loaded from `),L0e=n(Q4,"CODE",{});var yTt=s(L0e);q8r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),O8r=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(Q4,"CODE",{});var wTt=s(B0e);G8r=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),X8r=r(Q4,":"),Q4.forEach(t),V8r=i(ja),x0e=n(ja,"UL",{});var ATt=s(x0e);zM=n(ATt,"LI",{});var hxe=s(zM);k0e=n(hxe,"STRONG",{});var LTt=s(k0e);z8r=r(LTt,"bert"),LTt.forEach(t),W8r=r(hxe," \u2014 "),Ez=n(hxe,"A",{href:!0});var BTt=s(Ez);Q8r=r(BTt,"FlaxBertForNextSentencePrediction"),BTt.forEach(t),H8r=r(hxe," (BERT model)"),hxe.forEach(t),ATt.forEach(t),U8r=i(ja),R0e=n(ja,"P",{});var xTt=s(R0e);J8r=r(xTt,"Examples:"),xTt.forEach(t),Y8r=i(ja),m(xL.$$.fragment,ja),ja.forEach(t),xi.forEach(t),pRe=i(c),Bf=n(c,"H2",{class:!0});var APe=s(Bf);WM=n(APe,"A",{id:!0,class:!0,href:!0});var kTt=s(WM);S0e=n(kTt,"SPAN",{});var RTt=s(S0e);m(kL.$$.fragment,RTt),RTt.forEach(t),kTt.forEach(t),K8r=i(APe),P0e=n(APe,"SPAN",{});var STt=s(P0e);Z8r=r(STt,"FlaxAutoModelForImageClassification"),STt.forEach(t),APe.forEach(t),_Re=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(RL.$$.fragment,Ri),e9r=i(Ri),xf=n(Ri,"P",{});var _Q=s(xf);o9r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$0e=n(_Q,"CODE",{});var PTt=s($0e);r9r=r(PTt,"from_pretrained()"),PTt.forEach(t),t9r=r(_Q,"class method or the "),I0e=n(_Q,"CODE",{});var $Tt=s(I0e);a9r=r($Tt,"from_config()"),$Tt.forEach(t),n9r=r(_Q,`class
method.`),_Q.forEach(t),s9r=i(Ri),SL=n(Ri,"P",{});var LPe=s(SL);l9r=r(LPe,"This class cannot be instantiated directly using "),j0e=n(LPe,"CODE",{});var ITt=s(j0e);i9r=r(ITt,"__init__()"),ITt.forEach(t),d9r=r(LPe," (throws an error)."),LPe.forEach(t),c9r=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(PL.$$.fragment,Si),f9r=i(Si),D0e=n(Si,"P",{});var jTt=s(D0e);m9r=r(jTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jTt.forEach(t),g9r=i(Si),kf=n(Si,"P",{});var uQ=s(kf);h9r=r(uQ,`Note:
Loading a model from its configuration file does `),N0e=n(uQ,"STRONG",{});var DTt=s(N0e);p9r=r(DTt,"not"),DTt.forEach(t),_9r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q0e=n(uQ,"CODE",{});var NTt=s(q0e);u9r=r(NTt,"from_pretrained()"),NTt.forEach(t),b9r=r(uQ,"to load the model weights."),uQ.forEach(t),v9r=i(Si),O0e=n(Si,"P",{});var qTt=s(O0e);T9r=r(qTt,"Examples:"),qTt.forEach(t),F9r=i(Si),m($L.$$.fragment,Si),Si.forEach(t),C9r=i(Ri),jo=n(Ri,"DIV",{class:!0});var Da=s(jo);m(IL.$$.fragment,Da),M9r=i(Da),G0e=n(Da,"P",{});var OTt=s(G0e);E9r=r(OTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OTt.forEach(t),y9r=i(Da),Nn=n(Da,"P",{});var H4=s(Nn);w9r=r(H4,"The model class to instantiate is selected based on the "),X0e=n(H4,"CODE",{});var GTt=s(X0e);A9r=r(GTt,"model_type"),GTt.forEach(t),L9r=r(H4,` property of the config object (either
passed as an argument or loaded from `),V0e=n(H4,"CODE",{});var XTt=s(V0e);B9r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),x9r=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=n(H4,"CODE",{});var VTt=s(z0e);k9r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),R9r=r(H4,":"),H4.forEach(t),S9r=i(Da),jL=n(Da,"UL",{});var BPe=s(jL);QM=n(BPe,"LI",{});var pxe=s(QM);W0e=n(pxe,"STRONG",{});var zTt=s(W0e);P9r=r(zTt,"beit"),zTt.forEach(t),$9r=r(pxe," \u2014 "),yz=n(pxe,"A",{href:!0});var WTt=s(yz);I9r=r(WTt,"FlaxBeitForImageClassification"),WTt.forEach(t),j9r=r(pxe," (BEiT model)"),pxe.forEach(t),D9r=i(BPe),HM=n(BPe,"LI",{});var _xe=s(HM);Q0e=n(_xe,"STRONG",{});var QTt=s(Q0e);N9r=r(QTt,"vit"),QTt.forEach(t),q9r=r(_xe," \u2014 "),wz=n(_xe,"A",{href:!0});var HTt=s(wz);O9r=r(HTt,"FlaxViTForImageClassification"),HTt.forEach(t),G9r=r(_xe," (ViT model)"),_xe.forEach(t),BPe.forEach(t),X9r=i(Da),H0e=n(Da,"P",{});var UTt=s(H0e);V9r=r(UTt,"Examples:"),UTt.forEach(t),z9r=i(Da),m(DL.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),uRe=i(c),Rf=n(c,"H2",{class:!0});var xPe=s(Rf);UM=n(xPe,"A",{id:!0,class:!0,href:!0});var JTt=s(UM);U0e=n(JTt,"SPAN",{});var YTt=s(U0e);m(NL.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),W9r=i(xPe),J0e=n(xPe,"SPAN",{});var KTt=s(J0e);Q9r=r(KTt,"FlaxAutoModelForVision2Seq"),KTt.forEach(t),xPe.forEach(t),bRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(qL.$$.fragment,Pi),H9r=i(Pi),Sf=n(Pi,"P",{});var bQ=s(Sf);U9r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Y0e=n(bQ,"CODE",{});var ZTt=s(Y0e);J9r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),Y9r=r(bQ,"class method or the "),K0e=n(bQ,"CODE",{});var e7t=s(K0e);K9r=r(e7t,"from_config()"),e7t.forEach(t),Z9r=r(bQ,`class
method.`),bQ.forEach(t),eBr=i(Pi),OL=n(Pi,"P",{});var kPe=s(OL);oBr=r(kPe,"This class cannot be instantiated directly using "),Z0e=n(kPe,"CODE",{});var o7t=s(Z0e);rBr=r(o7t,"__init__()"),o7t.forEach(t),tBr=r(kPe," (throws an error)."),kPe.forEach(t),aBr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(GL.$$.fragment,$i),nBr=i($i),eTe=n($i,"P",{});var r7t=s(eTe);sBr=r(r7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r7t.forEach(t),lBr=i($i),Pf=n($i,"P",{});var vQ=s(Pf);iBr=r(vQ,`Note:
Loading a model from its configuration file does `),oTe=n(vQ,"STRONG",{});var t7t=s(oTe);dBr=r(t7t,"not"),t7t.forEach(t),cBr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rTe=n(vQ,"CODE",{});var a7t=s(rTe);fBr=r(a7t,"from_pretrained()"),a7t.forEach(t),mBr=r(vQ,"to load the model weights."),vQ.forEach(t),gBr=i($i),tTe=n($i,"P",{});var n7t=s(tTe);hBr=r(n7t,"Examples:"),n7t.forEach(t),pBr=i($i),m(XL.$$.fragment,$i),$i.forEach(t),_Br=i(Pi),Do=n(Pi,"DIV",{class:!0});var Na=s(Do);m(VL.$$.fragment,Na),uBr=i(Na),aTe=n(Na,"P",{});var s7t=s(aTe);bBr=r(s7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),s7t.forEach(t),vBr=i(Na),qn=n(Na,"P",{});var U4=s(qn);TBr=r(U4,"The model class to instantiate is selected based on the "),nTe=n(U4,"CODE",{});var l7t=s(nTe);FBr=r(l7t,"model_type"),l7t.forEach(t),CBr=r(U4,` property of the config object (either
passed as an argument or loaded from `),sTe=n(U4,"CODE",{});var i7t=s(sTe);MBr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),EBr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(U4,"CODE",{});var d7t=s(lTe);yBr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),wBr=r(U4,":"),U4.forEach(t),ABr=i(Na),iTe=n(Na,"UL",{});var c7t=s(iTe);JM=n(c7t,"LI",{});var uxe=s(JM);dTe=n(uxe,"STRONG",{});var f7t=s(dTe);LBr=r(f7t,"vision-encoder-decoder"),f7t.forEach(t),BBr=r(uxe," \u2014 "),Az=n(uxe,"A",{href:!0});var m7t=s(Az);xBr=r(m7t,"FlaxVisionEncoderDecoderModel"),m7t.forEach(t),kBr=r(uxe," (Vision Encoder decoder model)"),uxe.forEach(t),c7t.forEach(t),RBr=i(Na),cTe=n(Na,"P",{});var g7t=s(cTe);SBr=r(g7t,"Examples:"),g7t.forEach(t),PBr=i(Na),m(zL.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(C7t)),d(ge,"id","auto-classes"),d(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ge,"href","#auto-classes"),d(de,"class","relative group"),d(On,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Gf,"id","transformers.AutoConfig"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(U8,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(J8,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertConfig"),d(Y8,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartConfig"),d(K8,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitConfig"),d(Z8,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertConfig"),d(e9,"href","/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(o9,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdConfig"),d(r9,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(t9,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(a9,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(n9,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertConfig"),d(s9,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineConfig"),d(l9,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPConfig"),d(i9,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertConfig"),d(d9,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextConfig"),d(c9,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLConfig"),d(f9,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(m9,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(g9,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaConfig"),d(h9,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(p9,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTConfig"),d(_9,"href","/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrConfig"),d(u9,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertConfig"),d(b9,"href","/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRConfig"),d(v9,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraConfig"),d(T9,"href","/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(F9,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertConfig"),d(C9,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetConfig"),d(M9,"href","/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTConfig"),d(E9,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelConfig"),d(y9,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Config"),d(w9,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(A9,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJConfig"),d(L9,"href","/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertConfig"),d(B9,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertConfig"),d(x9,"href","/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(k9,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(R9,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(S9,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDConfig"),d(P9,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerConfig"),d($9,"href","/docs/transformers/pr_16027/en/model_doc/luke#transformers.LukeConfig"),d(I9,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertConfig"),d(j9,"href","/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Config"),d(D9,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianConfig"),d(N9,"href","/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(q9,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartConfig"),d(O9,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(G9,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(X9,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetConfig"),d(V9,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Config"),d(z9,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(W9,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Q9,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusConfig"),d(H9,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverConfig"),d(U9,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartConfig"),d(J9,"href","/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Y9,"href","/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(K9,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Z9,"href","/docs/transformers/pr_16027/en/model_doc/rag#transformers.RagConfig"),d(eB,"href","/docs/transformers/pr_16027/en/model_doc/realm#transformers.RealmConfig"),d(oB,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerConfig"),d(rB,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertConfig"),d(tB,"href","/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertConfig"),d(aB,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaConfig"),d(nB,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerConfig"),d(sB,"href","/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerConfig"),d(lB,"href","/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWConfig"),d(iB,"href","/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDConfig"),d(dB,"href","/docs/transformers/pr_16027/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(cB,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(fB,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(mB,"href","/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterConfig"),d(gB,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(hB,"href","/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinConfig"),d(pB,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Config"),d(_B,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasConfig"),d(uB,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(bB,"href","/docs/transformers/pr_16027/en/model_doc/trocr#transformers.TrOCRConfig"),d(vB,"href","/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(TB,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(FB,"href","/docs/transformers/pr_16027/en/model_doc/van#transformers.VanConfig"),d(CB,"href","/docs/transformers/pr_16027/en/model_doc/vilt#transformers.ViltConfig"),d(MB,"href","/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(EB,"href","/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(yB,"href","/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(wB,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTConfig"),d(AB,"href","/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(LB,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(BB,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMConfig"),d(xB,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMConfig"),d(kB,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMConfig"),d(RB,"href","/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(SB,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(PB,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d($B,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetConfig"),d(IB,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(xg,"class","docstring"),d(Wo,"class","docstring"),d(kg,"id","transformers.AutoTokenizer"),d(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(jB,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(DB,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertTokenizer"),d(NB,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(qB,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartTokenizer"),d(OB,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartTokenizerFast"),d(GB,"href","/docs/transformers/pr_16027/en/model_doc/barthez#transformers.BarthezTokenizer"),d(XB,"href","/docs/transformers/pr_16027/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(VB,"href","/docs/transformers/pr_16027/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(zB,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertTokenizer"),d(WB,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertTokenizerFast"),d(QB,"href","/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(HB,"href","/docs/transformers/pr_16027/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(UB,"href","/docs/transformers/pr_16027/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(JB,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(YB,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(KB,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ZB,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ex,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(ox,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(rx,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(tx,"href","/docs/transformers/pr_16027/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(ax,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertTokenizer"),d(nx,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(sx,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineTokenizer"),d(lx,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPTokenizer"),d(ix,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(dx,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(cx,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(fx,"href","/docs/transformers/pr_16027/en/model_doc/cpm#transformers.CpmTokenizer"),d(mx,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(gx,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaTokenizer"),d(hx,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(px,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(_x,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(ux,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(bx,"href","/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(vx,"href","/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Tx,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraTokenizer"),d(Fx,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Cx,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Mx,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetTokenizer"),d(Ex,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(yx,"href","/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(wx,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Ax,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Lx,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Bx,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(xx,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(kx,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Rx,"href","/docs/transformers/pr_16027/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Sx,"href","/docs/transformers/pr_16027/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Px,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d($x,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ix,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(jx,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Dx,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(qx,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Ox,"href","/docs/transformers/pr_16027/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Gx,"href","/docs/transformers/pr_16027/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Xx,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDTokenizer"),d(Vx,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDTokenizerFast"),d(zx,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerTokenizer"),d(Wx,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Qx,"href","/docs/transformers/pr_16027/en/model_doc/luke#transformers.LukeTokenizer"),d(Hx,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(Ux,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(Jx,"href","/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(Yx,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianTokenizer"),d(Kx,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartTokenizer"),d(Zx,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ek,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ok,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(rk,"href","/docs/transformers/pr_16027/en/model_doc/mluke#transformers.MLukeTokenizer"),d(tk,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(ak,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(nk,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(sk,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(lk,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.T5Tokenizer"),d(ik,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.T5TokenizerFast"),d(dk,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(ck,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(fk,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(mk,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(gk,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(hk,"href","/docs/transformers/pr_16027/en/model_doc/phobert#transformers.PhobertTokenizer"),d(pk,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartTokenizer"),d(_k,"href","/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(uk,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertTokenizer"),d(bk,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertTokenizerFast"),d(vk,"href","/docs/transformers/pr_16027/en/model_doc/rag#transformers.RagTokenizer"),d(Tk,"href","/docs/transformers/pr_16027/en/model_doc/realm#transformers.RealmTokenizer"),d(Fk,"href","/docs/transformers/pr_16027/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Mk,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertTokenizer"),d(yk,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(wk,"href","/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ak,"href","/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Bk,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(xk,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(kk,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Sk,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Pk,"href","/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterTokenizer"),d($k,"href","/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(jk,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.T5Tokenizer"),d(Nk,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.T5TokenizerFast"),d(qk,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasTokenizer"),d(Ok,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Gk,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Xk,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Vk,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMTokenizer"),d(zk,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMTokenizer"),d(Qk,"href","/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(Hk,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(Uk,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Yk,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(lh,"class","docstring"),d(Qo,"class","docstring"),d(ih,"id","transformers.AutoFeatureExtractor"),d(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ih,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(Kk,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(Zk,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(eR,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(oR,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rR,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(tR,"href","/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(aR,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(nR,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(sR,"href","/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(lR,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(iR,"href","/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(dR,"href","/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(cR,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(fR,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(mR,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(hR,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(pR,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Ah,"class","docstring"),d(Ho,"class","docstring"),d(Lh,"id","transformers.AutoProcessor"),d(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(_R,"href","/docs/transformers/pr_16027/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(uR,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPProcessor"),d(bR,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(vR,"href","/docs/transformers/pr_16027/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(TR,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(FR,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(CR,"href","/docs/transformers/pr_16027/en/model_doc/trocr#transformers.TrOCRProcessor"),d(MR,"href","/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(ER,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(je,"class","docstring"),d(Dh,"class","docstring"),d(Uo,"class","docstring"),d(Nh,"id","transformers.AutoModel"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(yR,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertModel"),d(wR,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartModel"),d(AR,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitModel"),d(LR,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertModel"),d(BR,"href","/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(xR,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdModel"),d(kR,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(RR,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(SR,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(PR,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertModel"),d($R,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineModel"),d(IR,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.CLIPModel"),d(jR,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertModel"),d(DR,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextModel"),d(NR,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLModel"),d(qR,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(OR,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(GR,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaModel"),d(XR,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(VR,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTModel"),d(zR,"href","/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrModel"),d(WR,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertModel"),d(QR,"href","/docs/transformers/pr_16027/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(HR,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraModel"),d(UR,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertModel"),d(JR,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetModel"),d(YR,"href","/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTModel"),d(KR,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelModel"),d(ZR,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelBaseModel"),d(eS,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2Model"),d(oS,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rS,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJModel"),d(tS,"href","/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertModel"),d(aS,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertModel"),d(nS,"href","/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(sS,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(lS,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(iS,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDModel"),d(dS,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerModel"),d(cS,"href","/docs/transformers/pr_16027/en/model_doc/luke#transformers.LukeModel"),d(fS,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertModel"),d(mS,"href","/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100Model"),d(gS,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianModel"),d(hS,"href","/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerModel"),d(pS,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartModel"),d(_S,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(uS,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertModel"),d(bS,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetModel"),d(vS,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5Model"),d(TS,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerModel"),d(FS,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(CS,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusModel"),d(MS,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverModel"),d(ES,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartModel"),d(yS,"href","/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerModel"),d(wS,"href","/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(AS,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LS,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerModel"),d(BS,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertModel"),d(xS,"href","/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertModel"),d(kS,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaModel"),d(RS,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerModel"),d(SS,"href","/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerModel"),d(PS,"href","/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWModel"),d($S,"href","/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDModel"),d(IS,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jS,"href","/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterModel"),d(DS,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(NS,"href","/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinModel"),d(qS,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5Model"),d(OS,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasModel"),d(GS,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(XS,"href","/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechModel"),d(VS,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(zS,"href","/docs/transformers/pr_16027/en/model_doc/van#transformers.VanModel"),d(WS,"href","/docs/transformers/pr_16027/en/model_doc/vilt#transformers.ViltModel"),d(QS,"href","/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(HS,"href","/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertModel"),d(US,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTModel"),d(JS,"href","/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(YS,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(KS,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMModel"),d(ZS,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMModel"),d(eP,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMModel"),d(oP,"href","/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(rP,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(tP,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(aP,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetModel"),d(nP,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(T_,"id","transformers.AutoModelForPreTraining"),d(T_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(sP,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForPreTraining"),d(lP,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(iP,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForPreTraining"),d(dP,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(cP,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(fP,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(mP,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(gP,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(hP,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(pP,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(_P,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForPreTraining"),d(uP,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(bP,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForPreTraining"),d(vP,"href","/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(TP,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(FP,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(CP,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(MP,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(EP,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(yP,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(wP,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(AP,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(LP,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(BP,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(xP,"href","/docs/transformers/pr_16027/en/model_doc/retribert#transformers.RetriBertModel"),d(kP,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(RP,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(SP,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(PP,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForMaskedLM"),d($P,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(IP,"href","/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(jP,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(DP,"href","/docs/transformers/pr_16027/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(NP,"href","/docs/transformers/pr_16027/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(qP,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(OP,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(GP,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(XP,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(VP,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(lu,"id","transformers.AutoModelForCausalLM"),d(lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(zP,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForCausalLM"),d(WP,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertLMHeadModel"),d(QP,"href","/docs/transformers/pr_16027/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(HP,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(UP,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(JP,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(YP,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(KP,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(ZP,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(e$,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(o$,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForCausalLM"),d(r$,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(t$,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(a$,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(n$,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianForCausalLM"),d(s$,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForCausalLM"),d(l$,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(i$,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(d$,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(c$,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(f$,"href","/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(m$,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(g$,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(h$,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(p$,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(_$,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(u$,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(b$,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(v$,"href","/docs/transformers/pr_16027/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(T$,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(F$,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(C$,"href","/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(M$,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(E$,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(y$,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Vu,"id","transformers.AutoModelForMaskedLM"),d(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(w$,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(A$,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForMaskedLM"),d(B$,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(x$,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(k$,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(R$,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(S$,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(P$,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($$,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(I$,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(j$,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(D$,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(N$,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(q$,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(O$,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(G$,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(X$,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(V$,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(z$,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(W$,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(H$,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(U$,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(J$,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(K$,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(eI,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(oI,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(rI,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tI,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aI,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nI,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Oe,"class","docstring"),d(Zo,"class","docstring"),d(A2,"id","transformers.AutoModelForSeq2SeqLM"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(sI,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(lI,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(iI,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(dI,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(cI,"href","/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(fI,"href","/docs/transformers/pr_16027/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(mI,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_16027/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(hI,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.MarianMTModel"),d(pI,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(vI,"href","/docs/transformers/pr_16027/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16027/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(z2,"id","transformers.AutoModelForSequenceClassification"),d(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z2,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(CI,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(MI,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForSequenceClassification"),d(EI,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForSequenceClassification"),d(yI,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(wI,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(AI,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(LI,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(BI,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(xI,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(kI,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(RI,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(SI,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(PI,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d($I,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(II,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16027/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(N1,"id","transformers.AutoModelForMultipleChoice"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(hj,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(pj,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForMultipleChoice"),d(_j,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(uj,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(bj,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(vj,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Tj,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Fj,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Cj,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Mj,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Ej,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(yj,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(wj,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Aj,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d($j,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(pb,"id","transformers.AutoModelForNextSentencePrediction"),d(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Gj,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Xj,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Vj,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(zj,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Wj,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(Cb,"id","transformers.AutoModelForTokenClassification"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(Qj,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(eD,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(oD,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(rD,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(tD,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(aD,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(nD,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(sD,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(lD,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(iD,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(dD,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(cD,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(fD,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(mD,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(gD,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(hD,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(pD,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(_D,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(uD,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(bD,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(vD,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(TD,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(FD,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(CD,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(MD,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(ED,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(yD,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(tv,"id","transformers.AutoModelForQuestionAnswering"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(wD,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16027/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16027/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(qD,"href","/docs/transformers/pr_16027/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16027/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16027/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_16027/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16027/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16027/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(eN,"href","/docs/transformers/pr_16027/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(oN,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(rN,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(tN,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(aN,"href","/docs/transformers/pr_16027/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(nN,"href","/docs/transformers/pr_16027/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(sN,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(lN,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(iN,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(dN,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(cN,"href","/docs/transformers/pr_16027/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(Vv,"id","transformers.AutoModelForTableQuestionAnswering"),d(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(fN,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(Qv,"id","transformers.AutoModelForImageClassification"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(mN,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitForImageClassification"),d(gN,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(hN,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForImageClassification"),d(pN,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(_N,"href","/docs/transformers/pr_16027/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(uN,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(bN,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(vN,"href","/docs/transformers/pr_16027/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(TN,"href","/docs/transformers/pr_16027/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(FN,"href","/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(CN,"href","/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinForImageClassification"),d(MN,"href","/docs/transformers/pr_16027/en/model_doc/van#transformers.VanForImageClassification"),d(EN,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(t6,"id","transformers.AutoModelForVision2Seq"),d(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t6,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(yN,"href","/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(s6,"id","transformers.AutoModelForAudioClassification"),d(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s6,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(wN,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(_6,"id","transformers.AutoModelForAudioFrameClassification"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(PN,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d($N,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(IN,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(jN,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(C6,"id","transformers.AutoModelForCTC"),d(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C6,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(DN,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(NN,"href","/docs/transformers/pr_16027/en/model_doc/hubert#transformers.HubertForCTC"),d(qN,"href","/docs/transformers/pr_16027/en/model_doc/sew#transformers.SEWForCTC"),d(ON,"href","/docs/transformers/pr_16027/en/model_doc/sew-d#transformers.SEWDForCTC"),d(GN,"href","/docs/transformers/pr_16027/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(XN,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(VN,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(zN,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(R6,"id","transformers.AutoModelForSpeechSeq2Seq"),d(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R6,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(WN,"href","/docs/transformers/pr_16027/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(QN,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(I6,"id","transformers.AutoModelForAudioXVector"),d(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I6,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(HN,"href","/docs/transformers/pr_16027/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(UN,"href","/docs/transformers/pr_16027/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(JN,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(YN,"href","/docs/transformers/pr_16027/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(G6,"id","transformers.AutoModelForMaskedImageModeling"),d(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G6,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(KN,"href","/docs/transformers/pr_16027/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(ZN,"href","/docs/transformers/pr_16027/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(eq,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Q6,"id","transformers.AutoModelForObjectDetection"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(oq,"href","/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(J6,"id","transformers.AutoModelForImageSegmentation"),d(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J6,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(rq,"href","/docs/transformers/pr_16027/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(Z6,"id","transformers.AutoModelForSemanticSegmentation"),d(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z6,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(tq,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(aq,"href","/docs/transformers/pr_16027/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(t0,"id","transformers.AutoModelForInstanceSegmentation"),d(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t0,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(nq,"href","/docs/transformers/pr_16027/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(s0,"id","transformers.TFAutoModel"),d(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s0,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(sq,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertModel"),d(lq,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartModel"),d(iq,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertModel"),d(dq,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(cq,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(fq,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertModel"),d(mq,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.TFCLIPModel"),d(gq,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertModel"),d(hq,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.TFConvNextModel"),d(pq,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLModel"),d(_q,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaModel"),d(uq,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(bq,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(vq,"href","/docs/transformers/pr_16027/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Tq,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraModel"),d(Fq,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Cq,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelModel"),d(Mq,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Eq,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2Model"),d(yq,"href","/docs/transformers/pr_16027/en/model_doc/hubert#transformers.TFHubertModel"),d(wq,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Aq,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.TFLEDModel"),d(Lq,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerModel"),d(Bq,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.TFLxmertModel"),d(xq,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.TFMarianModel"),d(kq,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.TFMBartModel"),d(Rq,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Sq,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Pq,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.TFMT5Model"),d($q,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Iq,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.TFPegasusModel"),d(jq,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertModel"),d(Dq,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaModel"),d(Nq,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerModel"),d(qq,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Oq,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5Model"),d(Gq,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasModel"),d(Xq,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(Vq,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.TFViTModel"),d(zq,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(Wq,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMModel"),d(Qq,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(Hq,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(H0,"id","transformers.TFAutoModelForPreTraining"),d(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H0,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(Uq,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Jq,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Yq,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Kq,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Zq,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(eO,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(oO,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(rO,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(tO,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(aO,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(nO,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sO,"href","/docs/transformers/pr_16027/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(lO,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(iO,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dO,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(cO,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fO,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(mO,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gO,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(hO,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(pO,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(_O,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(uT,"id","transformers.TFAutoModelForCausalLM"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(uO,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(bO,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vO,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(TO,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(FO,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(CO,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(MO,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(EO,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(yO,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wO,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(LT,"id","transformers.TFAutoModelForImageClassification"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(AO,"href","/docs/transformers/pr_16027/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(LO,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(kT,"id","transformers.TFAutoModelForMaskedLM"),d(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kT,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(BO,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(xO,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(kO,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(RO,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(SO,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(PO,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d($O,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(IO,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(jO,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(DO,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(NO,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(qO,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(OO,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(GO,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(XO,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(VO,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(zO,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(WO,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(QO,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(HO,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(KT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(UO,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(JO,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(YO,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(KO,"href","/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(ZO,"href","/docs/transformers/pr_16027/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(eG,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.TFMarianMTModel"),d(oG,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(rG,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(tG,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(aG,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(d7,"id","transformers.TFAutoModelForSequenceClassification"),d(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d7,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(nG,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(sG,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(lG,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(iG,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16027/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(_G,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16027/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(yG,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16027/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(LG,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d($7,"id","transformers.TFAutoModelForMultipleChoice"),d($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(xG,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(kG,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(RG,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(SG,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(PG,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d($G,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(IG,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(jG,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(DG,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(NG,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(qG,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(OG,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(XG,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(VG,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(zG,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(WG,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(Z7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(QG,"href","/docs/transformers/pr_16027/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(oF,"id","transformers.TFAutoModelForTokenClassification"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(HG,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(UG,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(JG,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(YG,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(KG,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(ZG,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(eX,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(oX,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(rX,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(tX,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(aX,"href","/docs/transformers/pr_16027/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(nX,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(sX,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(lX,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(iX,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(dX,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(cX,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(fX,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(mX,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(gX,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(CF,"id","transformers.TFAutoModelForQuestionAnswering"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(hX,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(pX,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(_X,"href","/docs/transformers/pr_16027/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(uX,"href","/docs/transformers/pr_16027/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(bX,"href","/docs/transformers/pr_16027/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(vX,"href","/docs/transformers/pr_16027/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(TX,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(FX,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(CX,"href","/docs/transformers/pr_16027/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(MX,"href","/docs/transformers/pr_16027/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(EX,"href","/docs/transformers/pr_16027/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(yX,"href","/docs/transformers/pr_16027/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(wX,"href","/docs/transformers/pr_16027/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(AX,"href","/docs/transformers/pr_16027/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(LX,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_16027/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(kX,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_16027/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(GF,"id","transformers.TFAutoModelForVision2Seq"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(SX,"href","/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(VF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(PX,"href","/docs/transformers/pr_16027/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(WF,"id","transformers.FlaxAutoModel"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d($X,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertModel"),d(IX,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartModel"),d(jX,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.FlaxBeitModel"),d(DX,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertModel"),d(NX,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(qX,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(OX,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(GX,"href","/docs/transformers/pr_16027/en/model_doc/clip#transformers.FlaxCLIPModel"),d(XX,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(VX,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraModel"),d(zX,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(WX,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(QX,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(HX,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.FlaxMarianModel"),d(UX,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartModel"),d(JX,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5Model"),d(YX,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(KX,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(ZX,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(eV,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5Model"),d(oV,"href","/docs/transformers/pr_16027/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(rV,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.FlaxViTModel"),d(tV,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(aV,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(nV,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(bC,"id","transformers.FlaxAutoModelForCausalLM"),d(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bC,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(sV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(lV,"href","/docs/transformers/pr_16027/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(iV,"href","/docs/transformers/pr_16027/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(dV,"href","/docs/transformers/pr_16027/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(cV,"href","/docs/transformers/pr_16027/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(EC,"id","transformers.FlaxAutoModelForPreTraining"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(fV,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(mV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(hV,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(pV,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(_V,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(uV,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(bV,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(vV,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(TV,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(FV,"href","/docs/transformers/pr_16027/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(CV,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(jC,"id","transformers.FlaxAutoModelForMaskedLM"),d(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(MV,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(EV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yV,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(wV,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(AV,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(LV,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(BV,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xV,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kV,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RV,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(HC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(SV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(PV,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16027/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_16027/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(jV,"href","/docs/transformers/pr_16027/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(DV,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(NV,"href","/docs/transformers/pr_16027/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_16027/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(OV,"href","/docs/transformers/pr_16027/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(aM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(GV,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(XV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(VV,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(zV,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(WV,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(QV,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(HV,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(UV,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(JV,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(YV,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(pM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(KV,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(ZV,"href","/docs/transformers/pr_16027/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(ez,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(oz,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(rz,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(tz,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(az,"href","/docs/transformers/pr_16027/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(nz,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(sz,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(lz,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(wM,"id","transformers.FlaxAutoModelForTokenClassification"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(iz,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(dz,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(cz,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(fz,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(mz,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(gz,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(hz,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(pz,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Nr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForMultipleChoice"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16027/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16027/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16027/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16027/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16027/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16027/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16027/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(VM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Ez,"href","/docs/transformers/pr_16027/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Or,"class","docstring"),d(WM,"id","transformers.FlaxAutoModelForImageClassification"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(yz,"href","/docs/transformers/pr_16027/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(wz,"href","/docs/transformers/pr_16027/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Gr,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForVision2Seq"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(jt,"class","docstring"),d(Az,"href","/docs/transformers/pr_16027/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,ge),e(ge,io),g(fe,io,null),e(de,Fe),e(de,Vo),e(Vo,ji),b(c,If,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,J4),e(fa,jf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,On),e(On,Y4),e(co,Gn),e(co,Xn),e(Xn,K4),e(co,Oi),e(co,Vn),e(Vn,Z4),e(co,Gi),b(c,Df,u),g(qa,c,u),b(c,fo,u),b(c,he,u),e(he,X8),e(he,Xi),e(Xi,V8),e(he,z8),b(c,zo,u),b(c,Oa,u),e(Oa,W8),e(Oa,Nf),e(Nf,Q8),e(Oa,RPe),b(c,bxe,u),b(c,Vi,u),e(Vi,qf),e(qf,TQ),g(eE,TQ,null),e(Vi,SPe),e(Vi,FQ),e(FQ,PPe),b(c,vxe,u),b(c,zn,u),e(zn,$Pe),e(zn,CQ),e(CQ,IPe),e(zn,jPe),e(zn,MQ),e(MQ,DPe),e(zn,NPe),b(c,Txe,u),g(oE,c,u),b(c,Fxe,u),b(c,H8,u),e(H8,qPe),b(c,Cxe,u),g(Of,c,u),b(c,Mxe,u),b(c,zi,u),e(zi,Gf),e(Gf,EQ),g(rE,EQ,null),e(zi,OPe),e(zi,yQ),e(yQ,GPe),b(c,Exe,u),b(c,Wo,u),g(tE,Wo,null),e(Wo,XPe),e(Wo,aE),e(aE,VPe),e(aE,U8),e(U8,zPe),e(aE,WPe),e(Wo,QPe),e(Wo,nE),e(nE,HPe),e(nE,wQ),e(wQ,UPe),e(nE,JPe),e(Wo,YPe),e(Wo,mo),g(sE,mo,null),e(mo,KPe),e(mo,AQ),e(AQ,ZPe),e(mo,e$e),e(mo,Wi),e(Wi,o$e),e(Wi,LQ),e(LQ,r$e),e(Wi,t$e),e(Wi,BQ),e(BQ,a$e),e(Wi,n$e),e(mo,s$e),e(mo,v),e(v,Xf),e(Xf,xQ),e(xQ,l$e),e(Xf,i$e),e(Xf,J8),e(J8,d$e),e(Xf,c$e),e(v,f$e),e(v,Vf),e(Vf,kQ),e(kQ,m$e),e(Vf,g$e),e(Vf,Y8),e(Y8,h$e),e(Vf,p$e),e(v,_$e),e(v,zf),e(zf,RQ),e(RQ,u$e),e(zf,b$e),e(zf,K8),e(K8,v$e),e(zf,T$e),e(v,F$e),e(v,Wf),e(Wf,SQ),e(SQ,C$e),e(Wf,M$e),e(Wf,Z8),e(Z8,E$e),e(Wf,y$e),e(v,w$e),e(v,Qf),e(Qf,PQ),e(PQ,A$e),e(Qf,L$e),e(Qf,e9),e(e9,B$e),e(Qf,x$e),e(v,k$e),e(v,Hf),e(Hf,$Q),e($Q,R$e),e(Hf,S$e),e(Hf,o9),e(o9,P$e),e(Hf,$$e),e(v,I$e),e(v,Uf),e(Uf,IQ),e(IQ,j$e),e(Uf,D$e),e(Uf,r9),e(r9,N$e),e(Uf,q$e),e(v,O$e),e(v,Jf),e(Jf,jQ),e(jQ,G$e),e(Jf,X$e),e(Jf,t9),e(t9,V$e),e(Jf,z$e),e(v,W$e),e(v,Yf),e(Yf,DQ),e(DQ,Q$e),e(Yf,H$e),e(Yf,a9),e(a9,U$e),e(Yf,J$e),e(v,Y$e),e(v,Kf),e(Kf,NQ),e(NQ,K$e),e(Kf,Z$e),e(Kf,n9),e(n9,eIe),e(Kf,oIe),e(v,rIe),e(v,Zf),e(Zf,qQ),e(qQ,tIe),e(Zf,aIe),e(Zf,s9),e(s9,nIe),e(Zf,sIe),e(v,lIe),e(v,em),e(em,OQ),e(OQ,iIe),e(em,dIe),e(em,l9),e(l9,cIe),e(em,fIe),e(v,mIe),e(v,om),e(om,GQ),e(GQ,gIe),e(om,hIe),e(om,i9),e(i9,pIe),e(om,_Ie),e(v,uIe),e(v,rm),e(rm,XQ),e(XQ,bIe),e(rm,vIe),e(rm,d9),e(d9,TIe),e(rm,FIe),e(v,CIe),e(v,tm),e(tm,VQ),e(VQ,MIe),e(tm,EIe),e(tm,c9),e(c9,yIe),e(tm,wIe),e(v,AIe),e(v,am),e(am,zQ),e(zQ,LIe),e(am,BIe),e(am,f9),e(f9,xIe),e(am,kIe),e(v,RIe),e(v,nm),e(nm,WQ),e(WQ,SIe),e(nm,PIe),e(nm,m9),e(m9,$Ie),e(nm,IIe),e(v,jIe),e(v,sm),e(sm,QQ),e(QQ,DIe),e(sm,NIe),e(sm,g9),e(g9,qIe),e(sm,OIe),e(v,GIe),e(v,lm),e(lm,HQ),e(HQ,XIe),e(lm,VIe),e(lm,h9),e(h9,zIe),e(lm,WIe),e(v,QIe),e(v,im),e(im,UQ),e(UQ,HIe),e(im,UIe),e(im,p9),e(p9,JIe),e(im,YIe),e(v,KIe),e(v,dm),e(dm,JQ),e(JQ,ZIe),e(dm,eje),e(dm,_9),e(_9,oje),e(dm,rje),e(v,tje),e(v,cm),e(cm,YQ),e(YQ,aje),e(cm,nje),e(cm,u9),e(u9,sje),e(cm,lje),e(v,ije),e(v,fm),e(fm,KQ),e(KQ,dje),e(fm,cje),e(fm,b9),e(b9,fje),e(fm,mje),e(v,gje),e(v,mm),e(mm,ZQ),e(ZQ,hje),e(mm,pje),e(mm,v9),e(v9,_je),e(mm,uje),e(v,bje),e(v,gm),e(gm,eH),e(eH,vje),e(gm,Tje),e(gm,T9),e(T9,Fje),e(gm,Cje),e(v,Mje),e(v,hm),e(hm,oH),e(oH,Eje),e(hm,yje),e(hm,F9),e(F9,wje),e(hm,Aje),e(v,Lje),e(v,pm),e(pm,rH),e(rH,Bje),e(pm,xje),e(pm,C9),e(C9,kje),e(pm,Rje),e(v,Sje),e(v,_m),e(_m,tH),e(tH,Pje),e(_m,$je),e(_m,M9),e(M9,Ije),e(_m,jje),e(v,Dje),e(v,um),e(um,aH),e(aH,Nje),e(um,qje),e(um,E9),e(E9,Oje),e(um,Gje),e(v,Xje),e(v,bm),e(bm,nH),e(nH,Vje),e(bm,zje),e(bm,y9),e(y9,Wje),e(bm,Qje),e(v,Hje),e(v,vm),e(vm,sH),e(sH,Uje),e(vm,Jje),e(vm,w9),e(w9,Yje),e(vm,Kje),e(v,Zje),e(v,Tm),e(Tm,lH),e(lH,eDe),e(Tm,oDe),e(Tm,A9),e(A9,rDe),e(Tm,tDe),e(v,aDe),e(v,Fm),e(Fm,iH),e(iH,nDe),e(Fm,sDe),e(Fm,L9),e(L9,lDe),e(Fm,iDe),e(v,dDe),e(v,Cm),e(Cm,dH),e(dH,cDe),e(Cm,fDe),e(Cm,B9),e(B9,mDe),e(Cm,gDe),e(v,hDe),e(v,Mm),e(Mm,cH),e(cH,pDe),e(Mm,_De),e(Mm,x9),e(x9,uDe),e(Mm,bDe),e(v,vDe),e(v,Em),e(Em,fH),e(fH,TDe),e(Em,FDe),e(Em,k9),e(k9,CDe),e(Em,MDe),e(v,EDe),e(v,ym),e(ym,mH),e(mH,yDe),e(ym,wDe),e(ym,R9),e(R9,ADe),e(ym,LDe),e(v,BDe),e(v,wm),e(wm,gH),e(gH,xDe),e(wm,kDe),e(wm,S9),e(S9,RDe),e(wm,SDe),e(v,PDe),e(v,Am),e(Am,hH),e(hH,$De),e(Am,IDe),e(Am,P9),e(P9,jDe),e(Am,DDe),e(v,NDe),e(v,Lm),e(Lm,pH),e(pH,qDe),e(Lm,ODe),e(Lm,$9),e($9,GDe),e(Lm,XDe),e(v,VDe),e(v,Bm),e(Bm,_H),e(_H,zDe),e(Bm,WDe),e(Bm,I9),e(I9,QDe),e(Bm,HDe),e(v,UDe),e(v,xm),e(xm,uH),e(uH,JDe),e(xm,YDe),e(xm,j9),e(j9,KDe),e(xm,ZDe),e(v,eNe),e(v,km),e(km,bH),e(bH,oNe),e(km,rNe),e(km,D9),e(D9,tNe),e(km,aNe),e(v,nNe),e(v,Rm),e(Rm,vH),e(vH,sNe),e(Rm,lNe),e(Rm,N9),e(N9,iNe),e(Rm,dNe),e(v,cNe),e(v,Sm),e(Sm,TH),e(TH,fNe),e(Sm,mNe),e(Sm,q9),e(q9,gNe),e(Sm,hNe),e(v,pNe),e(v,Pm),e(Pm,FH),e(FH,_Ne),e(Pm,uNe),e(Pm,O9),e(O9,bNe),e(Pm,vNe),e(v,TNe),e(v,$m),e($m,CH),e(CH,FNe),e($m,CNe),e($m,G9),e(G9,MNe),e($m,ENe),e(v,yNe),e(v,Im),e(Im,MH),e(MH,wNe),e(Im,ANe),e(Im,X9),e(X9,LNe),e(Im,BNe),e(v,xNe),e(v,jm),e(jm,EH),e(EH,kNe),e(jm,RNe),e(jm,V9),e(V9,SNe),e(jm,PNe),e(v,$Ne),e(v,Dm),e(Dm,yH),e(yH,INe),e(Dm,jNe),e(Dm,z9),e(z9,DNe),e(Dm,NNe),e(v,qNe),e(v,Nm),e(Nm,wH),e(wH,ONe),e(Nm,GNe),e(Nm,W9),e(W9,XNe),e(Nm,VNe),e(v,zNe),e(v,qm),e(qm,AH),e(AH,WNe),e(qm,QNe),e(qm,Q9),e(Q9,HNe),e(qm,UNe),e(v,JNe),e(v,Om),e(Om,LH),e(LH,YNe),e(Om,KNe),e(Om,H9),e(H9,ZNe),e(Om,eqe),e(v,oqe),e(v,Gm),e(Gm,BH),e(BH,rqe),e(Gm,tqe),e(Gm,U9),e(U9,aqe),e(Gm,nqe),e(v,sqe),e(v,Xm),e(Xm,xH),e(xH,lqe),e(Xm,iqe),e(Xm,J9),e(J9,dqe),e(Xm,cqe),e(v,fqe),e(v,Vm),e(Vm,kH),e(kH,mqe),e(Vm,gqe),e(Vm,Y9),e(Y9,hqe),e(Vm,pqe),e(v,_qe),e(v,zm),e(zm,RH),e(RH,uqe),e(zm,bqe),e(zm,K9),e(K9,vqe),e(zm,Tqe),e(v,Fqe),e(v,Wm),e(Wm,SH),e(SH,Cqe),e(Wm,Mqe),e(Wm,Z9),e(Z9,Eqe),e(Wm,yqe),e(v,wqe),e(v,Qm),e(Qm,PH),e(PH,Aqe),e(Qm,Lqe),e(Qm,eB),e(eB,Bqe),e(Qm,xqe),e(v,kqe),e(v,Hm),e(Hm,$H),e($H,Rqe),e(Hm,Sqe),e(Hm,oB),e(oB,Pqe),e(Hm,$qe),e(v,Iqe),e(v,Um),e(Um,IH),e(IH,jqe),e(Um,Dqe),e(Um,rB),e(rB,Nqe),e(Um,qqe),e(v,Oqe),e(v,Jm),e(Jm,jH),e(jH,Gqe),e(Jm,Xqe),e(Jm,tB),e(tB,Vqe),e(Jm,zqe),e(v,Wqe),e(v,Ym),e(Ym,DH),e(DH,Qqe),e(Ym,Hqe),e(Ym,aB),e(aB,Uqe),e(Ym,Jqe),e(v,Yqe),e(v,Km),e(Km,NH),e(NH,Kqe),e(Km,Zqe),e(Km,nB),e(nB,eOe),e(Km,oOe),e(v,rOe),e(v,Zm),e(Zm,qH),e(qH,tOe),e(Zm,aOe),e(Zm,sB),e(sB,nOe),e(Zm,sOe),e(v,lOe),e(v,eg),e(eg,OH),e(OH,iOe),e(eg,dOe),e(eg,lB),e(lB,cOe),e(eg,fOe),e(v,mOe),e(v,og),e(og,GH),e(GH,gOe),e(og,hOe),e(og,iB),e(iB,pOe),e(og,_Oe),e(v,uOe),e(v,rg),e(rg,XH),e(XH,bOe),e(rg,vOe),e(rg,dB),e(dB,TOe),e(rg,FOe),e(v,COe),e(v,tg),e(tg,VH),e(VH,MOe),e(tg,EOe),e(tg,cB),e(cB,yOe),e(tg,wOe),e(v,AOe),e(v,ag),e(ag,zH),e(zH,LOe),e(ag,BOe),e(ag,fB),e(fB,xOe),e(ag,kOe),e(v,ROe),e(v,ng),e(ng,WH),e(WH,SOe),e(ng,POe),e(ng,mB),e(mB,$Oe),e(ng,IOe),e(v,jOe),e(v,sg),e(sg,QH),e(QH,DOe),e(sg,NOe),e(sg,gB),e(gB,qOe),e(sg,OOe),e(v,GOe),e(v,lg),e(lg,HH),e(HH,XOe),e(lg,VOe),e(lg,hB),e(hB,zOe),e(lg,WOe),e(v,QOe),e(v,ig),e(ig,UH),e(UH,HOe),e(ig,UOe),e(ig,pB),e(pB,JOe),e(ig,YOe),e(v,KOe),e(v,dg),e(dg,JH),e(JH,ZOe),e(dg,eGe),e(dg,_B),e(_B,oGe),e(dg,rGe),e(v,tGe),e(v,cg),e(cg,YH),e(YH,aGe),e(cg,nGe),e(cg,uB),e(uB,sGe),e(cg,lGe),e(v,iGe),e(v,fg),e(fg,KH),e(KH,dGe),e(fg,cGe),e(fg,bB),e(bB,fGe),e(fg,mGe),e(v,gGe),e(v,mg),e(mg,ZH),e(ZH,hGe),e(mg,pGe),e(mg,vB),e(vB,_Ge),e(mg,uGe),e(v,bGe),e(v,gg),e(gg,eU),e(eU,vGe),e(gg,TGe),e(gg,TB),e(TB,FGe),e(gg,CGe),e(v,MGe),e(v,hg),e(hg,oU),e(oU,EGe),e(hg,yGe),e(hg,FB),e(FB,wGe),e(hg,AGe),e(v,LGe),e(v,pg),e(pg,rU),e(rU,BGe),e(pg,xGe),e(pg,CB),e(CB,kGe),e(pg,RGe),e(v,SGe),e(v,_g),e(_g,tU),e(tU,PGe),e(_g,$Ge),e(_g,MB),e(MB,IGe),e(_g,jGe),e(v,DGe),e(v,ug),e(ug,aU),e(aU,NGe),e(ug,qGe),e(ug,EB),e(EB,OGe),e(ug,GGe),e(v,XGe),e(v,bg),e(bg,nU),e(nU,VGe),e(bg,zGe),e(bg,yB),e(yB,WGe),e(bg,QGe),e(v,HGe),e(v,vg),e(vg,sU),e(sU,UGe),e(vg,JGe),e(vg,wB),e(wB,YGe),e(vg,KGe),e(v,ZGe),e(v,Tg),e(Tg,lU),e(lU,eXe),e(Tg,oXe),e(Tg,AB),e(AB,rXe),e(Tg,tXe),e(v,aXe),e(v,Fg),e(Fg,iU),e(iU,nXe),e(Fg,sXe),e(Fg,LB),e(LB,lXe),e(Fg,iXe),e(v,dXe),e(v,Cg),e(Cg,dU),e(dU,cXe),e(Cg,fXe),e(Cg,BB),e(BB,mXe),e(Cg,gXe),e(v,hXe),e(v,Mg),e(Mg,cU),e(cU,pXe),e(Mg,_Xe),e(Mg,xB),e(xB,uXe),e(Mg,bXe),e(v,vXe),e(v,Eg),e(Eg,fU),e(fU,TXe),e(Eg,FXe),e(Eg,kB),e(kB,CXe),e(Eg,MXe),e(v,EXe),e(v,yg),e(yg,mU),e(mU,yXe),e(yg,wXe),e(yg,RB),e(RB,AXe),e(yg,LXe),e(v,BXe),e(v,wg),e(wg,gU),e(gU,xXe),e(wg,kXe),e(wg,SB),e(SB,RXe),e(wg,SXe),e(v,PXe),e(v,Ag),e(Ag,hU),e(hU,$Xe),e(Ag,IXe),e(Ag,PB),e(PB,jXe),e(Ag,DXe),e(v,NXe),e(v,Lg),e(Lg,pU),e(pU,qXe),e(Lg,OXe),e(Lg,$B),e($B,GXe),e(Lg,XXe),e(v,VXe),e(v,Bg),e(Bg,_U),e(_U,zXe),e(Bg,WXe),e(Bg,IB),e(IB,QXe),e(Bg,HXe),e(mo,UXe),e(mo,uU),e(uU,JXe),e(mo,YXe),g(lE,mo,null),e(Wo,KXe),e(Wo,xg),g(iE,xg,null),e(xg,ZXe),e(xg,bU),e(bU,eVe),b(c,yxe,u),b(c,Qi,u),e(Qi,kg),e(kg,vU),g(dE,vU,null),e(Qi,oVe),e(Qi,TU),e(TU,rVe),b(c,wxe,u),b(c,Qo,u),g(cE,Qo,null),e(Qo,tVe),e(Qo,fE),e(fE,aVe),e(fE,jB),e(jB,nVe),e(fE,sVe),e(Qo,lVe),e(Qo,mE),e(mE,iVe),e(mE,FU),e(FU,dVe),e(mE,cVe),e(Qo,fVe),e(Qo,go),g(gE,go,null),e(go,mVe),e(go,CU),e(CU,gVe),e(go,hVe),e(go,Ga),e(Ga,pVe),e(Ga,MU),e(MU,_Ve),e(Ga,uVe),e(Ga,EU),e(EU,bVe),e(Ga,vVe),e(Ga,yU),e(yU,TVe),e(Ga,FVe),e(go,CVe),e(go,E),e(E,Wn),e(Wn,wU),e(wU,MVe),e(Wn,EVe),e(Wn,DB),e(DB,yVe),e(Wn,wVe),e(Wn,NB),e(NB,AVe),e(Wn,LVe),e(E,BVe),e(E,Qn),e(Qn,AU),e(AU,xVe),e(Qn,kVe),e(Qn,qB),e(qB,RVe),e(Qn,SVe),e(Qn,OB),e(OB,PVe),e(Qn,$Ve),e(E,IVe),e(E,Hn),e(Hn,LU),e(LU,jVe),e(Hn,DVe),e(Hn,GB),e(GB,NVe),e(Hn,qVe),e(Hn,XB),e(XB,OVe),e(Hn,GVe),e(E,XVe),e(E,Rg),e(Rg,BU),e(BU,VVe),e(Rg,zVe),e(Rg,VB),e(VB,WVe),e(Rg,QVe),e(E,HVe),e(E,Un),e(Un,xU),e(xU,UVe),e(Un,JVe),e(Un,zB),e(zB,YVe),e(Un,KVe),e(Un,WB),e(WB,ZVe),e(Un,eze),e(E,oze),e(E,Sg),e(Sg,kU),e(kU,rze),e(Sg,tze),e(Sg,QB),e(QB,aze),e(Sg,nze),e(E,sze),e(E,Pg),e(Pg,RU),e(RU,lze),e(Pg,ize),e(Pg,HB),e(HB,dze),e(Pg,cze),e(E,fze),e(E,$g),e($g,SU),e(SU,mze),e($g,gze),e($g,UB),e(UB,hze),e($g,pze),e(E,_ze),e(E,Jn),e(Jn,PU),e(PU,uze),e(Jn,bze),e(Jn,JB),e(JB,vze),e(Jn,Tze),e(Jn,YB),e(YB,Fze),e(Jn,Cze),e(E,Mze),e(E,Yn),e(Yn,$U),e($U,Eze),e(Yn,yze),e(Yn,KB),e(KB,wze),e(Yn,Aze),e(Yn,ZB),e(ZB,Lze),e(Yn,Bze),e(E,xze),e(E,Kn),e(Kn,IU),e(IU,kze),e(Kn,Rze),e(Kn,ex),e(ex,Sze),e(Kn,Pze),e(Kn,ox),e(ox,$ze),e(Kn,Ize),e(E,jze),e(E,Ig),e(Ig,jU),e(jU,Dze),e(Ig,Nze),e(Ig,rx),e(rx,qze),e(Ig,Oze),e(E,Gze),e(E,jg),e(jg,DU),e(DU,Xze),e(jg,Vze),e(jg,tx),e(tx,zze),e(jg,Wze),e(E,Qze),e(E,Zn),e(Zn,NU),e(NU,Hze),e(Zn,Uze),e(Zn,ax),e(ax,Jze),e(Zn,Yze),e(Zn,nx),e(nx,Kze),e(Zn,Zze),e(E,eWe),e(E,Dg),e(Dg,qU),e(qU,oWe),e(Dg,rWe),e(Dg,sx),e(sx,tWe),e(Dg,aWe),e(E,nWe),e(E,es),e(es,OU),e(OU,sWe),e(es,lWe),e(es,lx),e(lx,iWe),e(es,dWe),e(es,ix),e(ix,cWe),e(es,fWe),e(E,mWe),e(E,os),e(os,GU),e(GU,gWe),e(os,hWe),e(os,dx),e(dx,pWe),e(os,_We),e(os,cx),e(cx,uWe),e(os,bWe),e(E,vWe),e(E,rs),e(rs,XU),e(XU,TWe),e(rs,FWe),e(rs,fx),e(fx,CWe),e(rs,MWe),e(rs,VU),e(VU,EWe),e(rs,yWe),e(E,wWe),e(E,Ng),e(Ng,zU),e(zU,AWe),e(Ng,LWe),e(Ng,mx),e(mx,BWe),e(Ng,xWe),e(E,kWe),e(E,ts),e(ts,WU),e(WU,RWe),e(ts,SWe),e(ts,gx),e(gx,PWe),e(ts,$We),e(ts,hx),e(hx,IWe),e(ts,jWe),e(E,DWe),e(E,qg),e(qg,QU),e(QU,NWe),e(qg,qWe),e(qg,px),e(px,OWe),e(qg,GWe),e(E,XWe),e(E,as),e(as,HU),e(HU,VWe),e(as,zWe),e(as,_x),e(_x,WWe),e(as,QWe),e(as,ux),e(ux,HWe),e(as,UWe),e(E,JWe),e(E,ns),e(ns,UU),e(UU,YWe),e(ns,KWe),e(ns,bx),e(bx,ZWe),e(ns,eQe),e(ns,vx),e(vx,oQe),e(ns,rQe),e(E,tQe),e(E,ss),e(ss,JU),e(JU,aQe),e(ss,nQe),e(ss,Tx),e(Tx,sQe),e(ss,lQe),e(ss,Fx),e(Fx,iQe),e(ss,dQe),e(E,cQe),e(E,Og),e(Og,YU),e(YU,fQe),e(Og,mQe),e(Og,Cx),e(Cx,gQe),e(Og,hQe),e(E,pQe),e(E,ls),e(ls,KU),e(KU,_Qe),e(ls,uQe),e(ls,Mx),e(Mx,bQe),e(ls,vQe),e(ls,Ex),e(Ex,TQe),e(ls,FQe),e(E,CQe),e(E,Gg),e(Gg,ZU),e(ZU,MQe),e(Gg,EQe),e(Gg,yx),e(yx,yQe),e(Gg,wQe),e(E,AQe),e(E,is),e(is,eJ),e(eJ,LQe),e(is,BQe),e(is,wx),e(wx,xQe),e(is,kQe),e(is,Ax),e(Ax,RQe),e(is,SQe),e(E,PQe),e(E,ds),e(ds,oJ),e(oJ,$Qe),e(ds,IQe),e(ds,Lx),e(Lx,jQe),e(ds,DQe),e(ds,Bx),e(Bx,NQe),e(ds,qQe),e(E,OQe),e(E,cs),e(cs,rJ),e(rJ,GQe),e(cs,XQe),e(cs,xx),e(xx,VQe),e(cs,zQe),e(cs,kx),e(kx,WQe),e(cs,QQe),e(E,HQe),e(E,fs),e(fs,tJ),e(tJ,UQe),e(fs,JQe),e(fs,Rx),e(Rx,YQe),e(fs,KQe),e(fs,Sx),e(Sx,ZQe),e(fs,eHe),e(E,oHe),e(E,Xg),e(Xg,aJ),e(aJ,rHe),e(Xg,tHe),e(Xg,Px),e(Px,aHe),e(Xg,nHe),e(E,sHe),e(E,ms),e(ms,nJ),e(nJ,lHe),e(ms,iHe),e(ms,$x),e($x,dHe),e(ms,cHe),e(ms,Ix),e(Ix,fHe),e(ms,mHe),e(E,gHe),e(E,gs),e(gs,sJ),e(sJ,hHe),e(gs,pHe),e(gs,jx),e(jx,_He),e(gs,uHe),e(gs,Dx),e(Dx,bHe),e(gs,vHe),e(E,THe),e(E,hs),e(hs,lJ),e(lJ,FHe),e(hs,CHe),e(hs,Nx),e(Nx,MHe),e(hs,EHe),e(hs,qx),e(qx,yHe),e(hs,wHe),e(E,AHe),e(E,ps),e(ps,iJ),e(iJ,LHe),e(ps,BHe),e(ps,Ox),e(Ox,xHe),e(ps,kHe),e(ps,Gx),e(Gx,RHe),e(ps,SHe),e(E,PHe),e(E,_s),e(_s,dJ),e(dJ,$He),e(_s,IHe),e(_s,Xx),e(Xx,jHe),e(_s,DHe),e(_s,Vx),e(Vx,NHe),e(_s,qHe),e(E,OHe),e(E,us),e(us,cJ),e(cJ,GHe),e(us,XHe),e(us,zx),e(zx,VHe),e(us,zHe),e(us,Wx),e(Wx,WHe),e(us,QHe),e(E,HHe),e(E,Vg),e(Vg,fJ),e(fJ,UHe),e(Vg,JHe),e(Vg,Qx),e(Qx,YHe),e(Vg,KHe),e(E,ZHe),e(E,bs),e(bs,mJ),e(mJ,eUe),e(bs,oUe),e(bs,Hx),e(Hx,rUe),e(bs,tUe),e(bs,Ux),e(Ux,aUe),e(bs,nUe),e(E,sUe),e(E,zg),e(zg,gJ),e(gJ,lUe),e(zg,iUe),e(zg,Jx),e(Jx,dUe),e(zg,cUe),e(E,fUe),e(E,Wg),e(Wg,hJ),e(hJ,mUe),e(Wg,gUe),e(Wg,Yx),e(Yx,hUe),e(Wg,pUe),e(E,_Ue),e(E,vs),e(vs,pJ),e(pJ,uUe),e(vs,bUe),e(vs,Kx),e(Kx,vUe),e(vs,TUe),e(vs,Zx),e(Zx,FUe),e(vs,CUe),e(E,MUe),e(E,Ts),e(Ts,_J),e(_J,EUe),e(Ts,yUe),e(Ts,ek),e(ek,wUe),e(Ts,AUe),e(Ts,ok),e(ok,LUe),e(Ts,BUe),e(E,xUe),e(E,Qg),e(Qg,uJ),e(uJ,kUe),e(Qg,RUe),e(Qg,rk),e(rk,SUe),e(Qg,PUe),e(E,$Ue),e(E,Fs),e(Fs,bJ),e(bJ,IUe),e(Fs,jUe),e(Fs,tk),e(tk,DUe),e(Fs,NUe),e(Fs,ak),e(ak,qUe),e(Fs,OUe),e(E,GUe),e(E,Cs),e(Cs,vJ),e(vJ,XUe),e(Cs,VUe),e(Cs,nk),e(nk,zUe),e(Cs,WUe),e(Cs,sk),e(sk,QUe),e(Cs,HUe),e(E,UUe),e(E,Ms),e(Ms,TJ),e(TJ,JUe),e(Ms,YUe),e(Ms,lk),e(lk,KUe),e(Ms,ZUe),e(Ms,ik),e(ik,eJe),e(Ms,oJe),e(E,rJe),e(E,Es),e(Es,FJ),e(FJ,tJe),e(Es,aJe),e(Es,dk),e(dk,nJe),e(Es,sJe),e(Es,ck),e(ck,lJe),e(Es,iJe),e(E,dJe),e(E,ys),e(ys,CJ),e(CJ,cJe),e(ys,fJe),e(ys,fk),e(fk,mJe),e(ys,gJe),e(ys,mk),e(mk,hJe),e(ys,pJe),e(E,_Je),e(E,Hg),e(Hg,MJ),e(MJ,uJe),e(Hg,bJe),e(Hg,gk),e(gk,vJe),e(Hg,TJe),e(E,FJe),e(E,Ug),e(Ug,EJ),e(EJ,CJe),e(Ug,MJe),e(Ug,hk),e(hk,EJe),e(Ug,yJe),e(E,wJe),e(E,Jg),e(Jg,yJ),e(yJ,AJe),e(Jg,LJe),e(Jg,pk),e(pk,BJe),e(Jg,xJe),e(E,kJe),e(E,Yg),e(Yg,wJ),e(wJ,RJe),e(Yg,SJe),e(Yg,_k),e(_k,PJe),e(Yg,$Je),e(E,IJe),e(E,ws),e(ws,AJ),e(AJ,jJe),e(ws,DJe),e(ws,uk),e(uk,NJe),e(ws,qJe),e(ws,bk),e(bk,OJe),e(ws,GJe),e(E,XJe),e(E,Kg),e(Kg,LJ),e(LJ,VJe),e(Kg,zJe),e(Kg,vk),e(vk,WJe),e(Kg,QJe),e(E,HJe),e(E,As),e(As,BJ),e(BJ,UJe),e(As,JJe),e(As,Tk),e(Tk,YJe),e(As,KJe),e(As,Fk),e(Fk,ZJe),e(As,eYe),e(E,oYe),e(E,Ls),e(Ls,xJ),e(xJ,rYe),e(Ls,tYe),e(Ls,Ck),e(Ck,aYe),e(Ls,nYe),e(Ls,Mk),e(Mk,sYe),e(Ls,lYe),e(E,iYe),e(E,Bs),e(Bs,kJ),e(kJ,dYe),e(Bs,cYe),e(Bs,Ek),e(Ek,fYe),e(Bs,mYe),e(Bs,yk),e(yk,gYe),e(Bs,hYe),e(E,pYe),e(E,xs),e(xs,RJ),e(RJ,_Ye),e(xs,uYe),e(xs,wk),e(wk,bYe),e(xs,vYe),e(xs,Ak),e(Ak,TYe),e(xs,FYe),e(E,CYe),e(E,ks),e(ks,SJ),e(SJ,MYe),e(ks,EYe),e(ks,Lk),e(Lk,yYe),e(ks,wYe),e(ks,Bk),e(Bk,AYe),e(ks,LYe),e(E,BYe),e(E,Rs),e(Rs,PJ),e(PJ,xYe),e(Rs,kYe),e(Rs,xk),e(xk,RYe),e(Rs,SYe),e(Rs,kk),e(kk,PYe),e(Rs,$Ye),e(E,IYe),e(E,Zg),e(Zg,$J),e($J,jYe),e(Zg,DYe),e(Zg,Rk),e(Rk,NYe),e(Zg,qYe),e(E,OYe),e(E,eh),e(eh,IJ),e(IJ,GYe),e(eh,XYe),e(eh,Sk),e(Sk,VYe),e(eh,zYe),e(E,WYe),e(E,Ss),e(Ss,jJ),e(jJ,QYe),e(Ss,HYe),e(Ss,Pk),e(Pk,UYe),e(Ss,JYe),e(Ss,$k),e($k,YYe),e(Ss,KYe),e(E,ZYe),e(E,Ps),e(Ps,DJ),e(DJ,eKe),e(Ps,oKe),e(Ps,Ik),e(Ik,rKe),e(Ps,tKe),e(Ps,jk),e(jk,aKe),e(Ps,nKe),e(E,sKe),e(E,$s),e($s,NJ),e(NJ,lKe),e($s,iKe),e($s,Dk),e(Dk,dKe),e($s,cKe),e($s,Nk),e(Nk,fKe),e($s,mKe),e(E,gKe),e(E,oh),e(oh,qJ),e(qJ,hKe),e(oh,pKe),e(oh,qk),e(qk,_Ke),e(oh,uKe),e(E,bKe),e(E,rh),e(rh,OJ),e(OJ,vKe),e(rh,TKe),e(rh,Ok),e(Ok,FKe),e(rh,CKe),e(E,MKe),e(E,th),e(th,GJ),e(GJ,EKe),e(th,yKe),e(th,Gk),e(Gk,wKe),e(th,AKe),e(E,LKe),e(E,ah),e(ah,XJ),e(XJ,BKe),e(ah,xKe),e(ah,Xk),e(Xk,kKe),e(ah,RKe),e(E,SKe),e(E,Is),e(Is,VJ),e(VJ,PKe),e(Is,$Ke),e(Is,Vk),e(Vk,IKe),e(Is,jKe),e(Is,zk),e(zk,DKe),e(Is,NKe),e(E,qKe),e(E,nh),e(nh,zJ),e(zJ,OKe),e(nh,GKe),e(nh,Wk),e(Wk,XKe),e(nh,VKe),e(E,zKe),e(E,sh),e(sh,WJ),e(WJ,WKe),e(sh,QKe),e(sh,Qk),e(Qk,HKe),e(sh,UKe),e(E,JKe),e(E,js),e(js,QJ),e(QJ,YKe),e(js,KKe),e(js,Hk),e(Hk,ZKe),e(js,eZe),e(js,Uk),e(Uk,oZe),e(js,rZe),e(E,tZe),e(E,Ds),e(Ds,HJ),e(HJ,aZe),e(Ds,nZe),e(Ds,Jk),e(Jk,sZe),e(Ds,lZe),e(Ds,Yk),e(Yk,iZe),e(Ds,dZe),e(go,cZe),e(go,UJ),e(UJ,fZe),e(go,mZe),g(hE,go,null),e(Qo,gZe),e(Qo,lh),g(pE,lh,null),e(lh,hZe),e(lh,JJ),e(JJ,pZe),b(c,Axe,u),b(c,Hi,u),e(Hi,ih),e(ih,YJ),g(_E,YJ,null),e(Hi,_Ze),e(Hi,KJ),e(KJ,uZe),b(c,Lxe,u),b(c,Ho,u),g(uE,Ho,null),e(Ho,bZe),e(Ho,bE),e(bE,vZe),e(bE,Kk),e(Kk,TZe),e(bE,FZe),e(Ho,CZe),e(Ho,vE),e(vE,MZe),e(vE,ZJ),e(ZJ,EZe),e(vE,yZe),e(Ho,wZe),e(Ho,Ie),g(TE,Ie,null),e(Ie,AZe),e(Ie,eY),e(eY,LZe),e(Ie,BZe),e(Ie,Xa),e(Xa,xZe),e(Xa,oY),e(oY,kZe),e(Xa,RZe),e(Xa,rY),e(rY,SZe),e(Xa,PZe),e(Xa,tY),e(tY,$Ze),e(Xa,IZe),e(Ie,jZe),e(Ie,te),e(te,dh),e(dh,aY),e(aY,DZe),e(dh,NZe),e(dh,Zk),e(Zk,qZe),e(dh,OZe),e(te,GZe),e(te,ch),e(ch,nY),e(nY,XZe),e(ch,VZe),e(ch,eR),e(eR,zZe),e(ch,WZe),e(te,QZe),e(te,fh),e(fh,sY),e(sY,HZe),e(fh,UZe),e(fh,oR),e(oR,JZe),e(fh,YZe),e(te,KZe),e(te,mh),e(mh,lY),e(lY,ZZe),e(mh,eeo),e(mh,rR),e(rR,oeo),e(mh,reo),e(te,teo),e(te,gh),e(gh,iY),e(iY,aeo),e(gh,neo),e(gh,tR),e(tR,seo),e(gh,leo),e(te,ieo),e(te,hh),e(hh,dY),e(dY,deo),e(hh,ceo),e(hh,aR),e(aR,feo),e(hh,meo),e(te,geo),e(te,ph),e(ph,cY),e(cY,heo),e(ph,peo),e(ph,nR),e(nR,_eo),e(ph,ueo),e(te,beo),e(te,_h),e(_h,fY),e(fY,veo),e(_h,Teo),e(_h,sR),e(sR,Feo),e(_h,Ceo),e(te,Meo),e(te,uh),e(uh,mY),e(mY,Eeo),e(uh,yeo),e(uh,lR),e(lR,weo),e(uh,Aeo),e(te,Leo),e(te,bh),e(bh,gY),e(gY,Beo),e(bh,xeo),e(bh,iR),e(iR,keo),e(bh,Reo),e(te,Seo),e(te,vh),e(vh,hY),e(hY,Peo),e(vh,$eo),e(vh,dR),e(dR,Ieo),e(vh,jeo),e(te,Deo),e(te,Th),e(Th,pY),e(pY,Neo),e(Th,qeo),e(Th,cR),e(cR,Oeo),e(Th,Geo),e(te,Xeo),e(te,Fh),e(Fh,_Y),e(_Y,Veo),e(Fh,zeo),e(Fh,fR),e(fR,Weo),e(Fh,Qeo),e(te,Heo),e(te,Ch),e(Ch,uY),e(uY,Ueo),e(Ch,Jeo),e(Ch,mR),e(mR,Yeo),e(Ch,Keo),e(te,Zeo),e(te,Mh),e(Mh,bY),e(bY,eoo),e(Mh,ooo),e(Mh,gR),e(gR,roo),e(Mh,too),e(te,aoo),e(te,Eh),e(Eh,vY),e(vY,noo),e(Eh,soo),e(Eh,hR),e(hR,loo),e(Eh,ioo),e(te,doo),e(te,yh),e(yh,TY),e(TY,coo),e(yh,foo),e(yh,pR),e(pR,moo),e(yh,goo),e(Ie,hoo),g(wh,Ie,null),e(Ie,poo),e(Ie,FY),e(FY,_oo),e(Ie,uoo),g(FE,Ie,null),e(Ho,boo),e(Ho,Ah),g(CE,Ah,null),e(Ah,voo),e(Ah,CY),e(CY,Too),b(c,Bxe,u),b(c,Ui,u),e(Ui,Lh),e(Lh,MY),g(ME,MY,null),e(Ui,Foo),e(Ui,EY),e(EY,Coo),b(c,xxe,u),b(c,Uo,u),g(EE,Uo,null),e(Uo,Moo),e(Uo,yE),e(yE,Eoo),e(yE,_R),e(_R,yoo),e(yE,woo),e(Uo,Aoo),e(Uo,wE),e(wE,Loo),e(wE,yY),e(yY,Boo),e(wE,xoo),e(Uo,koo),e(Uo,je),g(AE,je,null),e(je,Roo),e(je,wY),e(wY,Soo),e(je,Poo),e(je,Ji),e(Ji,$oo),e(Ji,AY),e(AY,Ioo),e(Ji,joo),e(Ji,LY),e(LY,Doo),e(Ji,Noo),e(je,qoo),e(je,xe),e(xe,Bh),e(Bh,BY),e(BY,Ooo),e(Bh,Goo),e(Bh,uR),e(uR,Xoo),e(Bh,Voo),e(xe,zoo),e(xe,xh),e(xh,xY),e(xY,Woo),e(xh,Qoo),e(xh,bR),e(bR,Hoo),e(xh,Uoo),e(xe,Joo),e(xe,kh),e(kh,kY),e(kY,Yoo),e(kh,Koo),e(kh,vR),e(vR,Zoo),e(kh,ero),e(xe,oro),e(xe,Rh),e(Rh,RY),e(RY,rro),e(Rh,tro),e(Rh,TR),e(TR,aro),e(Rh,nro),e(xe,sro),e(xe,Sh),e(Sh,SY),e(SY,lro),e(Sh,iro),e(Sh,FR),e(FR,dro),e(Sh,cro),e(xe,fro),e(xe,Ph),e(Ph,PY),e(PY,mro),e(Ph,gro),e(Ph,CR),e(CR,hro),e(Ph,pro),e(xe,_ro),e(xe,$h),e($h,$Y),e($Y,uro),e($h,bro),e($h,MR),e(MR,vro),e($h,Tro),e(xe,Fro),e(xe,Ih),e(Ih,IY),e(IY,Cro),e(Ih,Mro),e(Ih,ER),e(ER,Ero),e(Ih,yro),e(je,wro),g(jh,je,null),e(je,Aro),e(je,jY),e(jY,Lro),e(je,Bro),g(LE,je,null),e(Uo,xro),e(Uo,Dh),g(BE,Dh,null),e(Dh,kro),e(Dh,DY),e(DY,Rro),b(c,kxe,u),b(c,Yi,u),e(Yi,Nh),e(Nh,NY),g(xE,NY,null),e(Yi,Sro),e(Yi,qY),e(qY,Pro),b(c,Rxe,u),b(c,Jo,u),g(kE,Jo,null),e(Jo,$ro),e(Jo,Ki),e(Ki,Iro),e(Ki,OY),e(OY,jro),e(Ki,Dro),e(Ki,GY),e(GY,Nro),e(Ki,qro),e(Jo,Oro),e(Jo,RE),e(RE,Gro),e(RE,XY),e(XY,Xro),e(RE,Vro),e(Jo,zro),e(Jo,Vr),g(SE,Vr,null),e(Vr,Wro),e(Vr,VY),e(VY,Qro),e(Vr,Hro),e(Vr,Zi),e(Zi,Uro),e(Zi,zY),e(zY,Jro),e(Zi,Yro),e(Zi,WY),e(WY,Kro),e(Zi,Zro),e(Vr,eto),e(Vr,QY),e(QY,oto),e(Vr,rto),g(PE,Vr,null),e(Jo,tto),e(Jo,De),g($E,De,null),e(De,ato),e(De,HY),e(HY,nto),e(De,sto),e(De,Va),e(Va,lto),e(Va,UY),e(UY,ito),e(Va,dto),e(Va,JY),e(JY,cto),e(Va,fto),e(Va,YY),e(YY,mto),e(Va,gto),e(De,hto),e(De,F),e(F,qh),e(qh,KY),e(KY,pto),e(qh,_to),e(qh,yR),e(yR,uto),e(qh,bto),e(F,vto),e(F,Oh),e(Oh,ZY),e(ZY,Tto),e(Oh,Fto),e(Oh,wR),e(wR,Cto),e(Oh,Mto),e(F,Eto),e(F,Gh),e(Gh,eK),e(eK,yto),e(Gh,wto),e(Gh,AR),e(AR,Ato),e(Gh,Lto),e(F,Bto),e(F,Xh),e(Xh,oK),e(oK,xto),e(Xh,kto),e(Xh,LR),e(LR,Rto),e(Xh,Sto),e(F,Pto),e(F,Vh),e(Vh,rK),e(rK,$to),e(Vh,Ito),e(Vh,BR),e(BR,jto),e(Vh,Dto),e(F,Nto),e(F,zh),e(zh,tK),e(tK,qto),e(zh,Oto),e(zh,xR),e(xR,Gto),e(zh,Xto),e(F,Vto),e(F,Wh),e(Wh,aK),e(aK,zto),e(Wh,Wto),e(Wh,kR),e(kR,Qto),e(Wh,Hto),e(F,Uto),e(F,Qh),e(Qh,nK),e(nK,Jto),e(Qh,Yto),e(Qh,RR),e(RR,Kto),e(Qh,Zto),e(F,eao),e(F,Hh),e(Hh,sK),e(sK,oao),e(Hh,rao),e(Hh,SR),e(SR,tao),e(Hh,aao),e(F,nao),e(F,Uh),e(Uh,lK),e(lK,sao),e(Uh,lao),e(Uh,PR),e(PR,iao),e(Uh,dao),e(F,cao),e(F,Jh),e(Jh,iK),e(iK,fao),e(Jh,mao),e(Jh,$R),e($R,gao),e(Jh,hao),e(F,pao),e(F,Yh),e(Yh,dK),e(dK,_ao),e(Yh,uao),e(Yh,IR),e(IR,bao),e(Yh,vao),e(F,Tao),e(F,Kh),e(Kh,cK),e(cK,Fao),e(Kh,Cao),e(Kh,jR),e(jR,Mao),e(Kh,Eao),e(F,yao),e(F,Zh),e(Zh,fK),e(fK,wao),e(Zh,Aao),e(Zh,DR),e(DR,Lao),e(Zh,Bao),e(F,xao),e(F,ep),e(ep,mK),e(mK,kao),e(ep,Rao),e(ep,NR),e(NR,Sao),e(ep,Pao),e(F,$ao),e(F,op),e(op,gK),e(gK,Iao),e(op,jao),e(op,qR),e(qR,Dao),e(op,Nao),e(F,qao),e(F,rp),e(rp,hK),e(hK,Oao),e(rp,Gao),e(rp,OR),e(OR,Xao),e(rp,Vao),e(F,zao),e(F,tp),e(tp,pK),e(pK,Wao),e(tp,Qao),e(tp,GR),e(GR,Hao),e(tp,Uao),e(F,Jao),e(F,ap),e(ap,_K),e(_K,Yao),e(ap,Kao),e(ap,XR),e(XR,Zao),e(ap,eno),e(F,ono),e(F,np),e(np,uK),e(uK,rno),e(np,tno),e(np,VR),e(VR,ano),e(np,nno),e(F,sno),e(F,sp),e(sp,bK),e(bK,lno),e(sp,ino),e(sp,zR),e(zR,dno),e(sp,cno),e(F,fno),e(F,lp),e(lp,vK),e(vK,mno),e(lp,gno),e(lp,WR),e(WR,hno),e(lp,pno),e(F,_no),e(F,ip),e(ip,TK),e(TK,uno),e(ip,bno),e(ip,QR),e(QR,vno),e(ip,Tno),e(F,Fno),e(F,dp),e(dp,FK),e(FK,Cno),e(dp,Mno),e(dp,HR),e(HR,Eno),e(dp,yno),e(F,wno),e(F,cp),e(cp,CK),e(CK,Ano),e(cp,Lno),e(cp,UR),e(UR,Bno),e(cp,xno),e(F,kno),e(F,fp),e(fp,MK),e(MK,Rno),e(fp,Sno),e(fp,JR),e(JR,Pno),e(fp,$no),e(F,Ino),e(F,mp),e(mp,EK),e(EK,jno),e(mp,Dno),e(mp,YR),e(YR,Nno),e(mp,qno),e(F,Ono),e(F,Ns),e(Ns,yK),e(yK,Gno),e(Ns,Xno),e(Ns,KR),e(KR,Vno),e(Ns,zno),e(Ns,ZR),e(ZR,Wno),e(Ns,Qno),e(F,Hno),e(F,gp),e(gp,wK),e(wK,Uno),e(gp,Jno),e(gp,eS),e(eS,Yno),e(gp,Kno),e(F,Zno),e(F,hp),e(hp,AK),e(AK,eso),e(hp,oso),e(hp,oS),e(oS,rso),e(hp,tso),e(F,aso),e(F,pp),e(pp,LK),e(LK,nso),e(pp,sso),e(pp,rS),e(rS,lso),e(pp,iso),e(F,dso),e(F,_p),e(_p,BK),e(BK,cso),e(_p,fso),e(_p,tS),e(tS,mso),e(_p,gso),e(F,hso),e(F,up),e(up,xK),e(xK,pso),e(up,_so),e(up,aS),e(aS,uso),e(up,bso),e(F,vso),e(F,bp),e(bp,kK),e(kK,Tso),e(bp,Fso),e(bp,nS),e(nS,Cso),e(bp,Mso),e(F,Eso),e(F,vp),e(vp,RK),e(RK,yso),e(vp,wso),e(vp,sS),e(sS,Aso),e(vp,Lso),e(F,Bso),e(F,Tp),e(Tp,SK),e(SK,xso),e(Tp,kso),e(Tp,lS),e(lS,Rso),e(Tp,Sso),e(F,Pso),e(F,Fp),e(Fp,PK),e(PK,$so),e(Fp,Iso),e(Fp,iS),e(iS,jso),e(Fp,Dso),e(F,Nso),e(F,Cp),e(Cp,$K),e($K,qso),e(Cp,Oso),e(Cp,dS),e(dS,Gso),e(Cp,Xso),e(F,Vso),e(F,Mp),e(Mp,IK),e(IK,zso),e(Mp,Wso),e(Mp,cS),e(cS,Qso),e(Mp,Hso),e(F,Uso),e(F,Ep),e(Ep,jK),e(jK,Jso),e(Ep,Yso),e(Ep,fS),e(fS,Kso),e(Ep,Zso),e(F,elo),e(F,yp),e(yp,DK),e(DK,olo),e(yp,rlo),e(yp,mS),e(mS,tlo),e(yp,alo),e(F,nlo),e(F,wp),e(wp,NK),e(NK,slo),e(wp,llo),e(wp,gS),e(gS,ilo),e(wp,dlo),e(F,clo),e(F,Ap),e(Ap,qK),e(qK,flo),e(Ap,mlo),e(Ap,hS),e(hS,glo),e(Ap,hlo),e(F,plo),e(F,Lp),e(Lp,OK),e(OK,_lo),e(Lp,ulo),e(Lp,pS),e(pS,blo),e(Lp,vlo),e(F,Tlo),e(F,Bp),e(Bp,GK),e(GK,Flo),e(Bp,Clo),e(Bp,_S),e(_S,Mlo),e(Bp,Elo),e(F,ylo),e(F,xp),e(xp,XK),e(XK,wlo),e(xp,Alo),e(xp,uS),e(uS,Llo),e(xp,Blo),e(F,xlo),e(F,kp),e(kp,VK),e(VK,klo),e(kp,Rlo),e(kp,bS),e(bS,Slo),e(kp,Plo),e(F,$lo),e(F,Rp),e(Rp,zK),e(zK,Ilo),e(Rp,jlo),e(Rp,vS),e(vS,Dlo),e(Rp,Nlo),e(F,qlo),e(F,Sp),e(Sp,WK),e(WK,Olo),e(Sp,Glo),e(Sp,TS),e(TS,Xlo),e(Sp,Vlo),e(F,zlo),e(F,Pp),e(Pp,QK),e(QK,Wlo),e(Pp,Qlo),e(Pp,FS),e(FS,Hlo),e(Pp,Ulo),e(F,Jlo),e(F,$p),e($p,HK),e(HK,Ylo),e($p,Klo),e($p,CS),e(CS,Zlo),e($p,eio),e(F,oio),e(F,Ip),e(Ip,UK),e(UK,rio),e(Ip,tio),e(Ip,MS),e(MS,aio),e(Ip,nio),e(F,sio),e(F,jp),e(jp,JK),e(JK,lio),e(jp,iio),e(jp,ES),e(ES,dio),e(jp,cio),e(F,fio),e(F,Dp),e(Dp,YK),e(YK,mio),e(Dp,gio),e(Dp,yS),e(yS,hio),e(Dp,pio),e(F,_io),e(F,Np),e(Np,KK),e(KK,uio),e(Np,bio),e(Np,wS),e(wS,vio),e(Np,Tio),e(F,Fio),e(F,qp),e(qp,ZK),e(ZK,Cio),e(qp,Mio),e(qp,AS),e(AS,Eio),e(qp,yio),e(F,wio),e(F,Op),e(Op,eZ),e(eZ,Aio),e(Op,Lio),e(Op,LS),e(LS,Bio),e(Op,xio),e(F,kio),e(F,Gp),e(Gp,oZ),e(oZ,Rio),e(Gp,Sio),e(Gp,BS),e(BS,Pio),e(Gp,$io),e(F,Iio),e(F,Xp),e(Xp,rZ),e(rZ,jio),e(Xp,Dio),e(Xp,xS),e(xS,Nio),e(Xp,qio),e(F,Oio),e(F,Vp),e(Vp,tZ),e(tZ,Gio),e(Vp,Xio),e(Vp,kS),e(kS,Vio),e(Vp,zio),e(F,Wio),e(F,zp),e(zp,aZ),e(aZ,Qio),e(zp,Hio),e(zp,RS),e(RS,Uio),e(zp,Jio),e(F,Yio),e(F,Wp),e(Wp,nZ),e(nZ,Kio),e(Wp,Zio),e(Wp,SS),e(SS,edo),e(Wp,odo),e(F,rdo),e(F,Qp),e(Qp,sZ),e(sZ,tdo),e(Qp,ado),e(Qp,PS),e(PS,ndo),e(Qp,sdo),e(F,ldo),e(F,Hp),e(Hp,lZ),e(lZ,ido),e(Hp,ddo),e(Hp,$S),e($S,cdo),e(Hp,fdo),e(F,mdo),e(F,Up),e(Up,iZ),e(iZ,gdo),e(Up,hdo),e(Up,IS),e(IS,pdo),e(Up,_do),e(F,udo),e(F,Jp),e(Jp,dZ),e(dZ,bdo),e(Jp,vdo),e(Jp,jS),e(jS,Tdo),e(Jp,Fdo),e(F,Cdo),e(F,Yp),e(Yp,cZ),e(cZ,Mdo),e(Yp,Edo),e(Yp,DS),e(DS,ydo),e(Yp,wdo),e(F,Ado),e(F,Kp),e(Kp,fZ),e(fZ,Ldo),e(Kp,Bdo),e(Kp,NS),e(NS,xdo),e(Kp,kdo),e(F,Rdo),e(F,Zp),e(Zp,mZ),e(mZ,Sdo),e(Zp,Pdo),e(Zp,qS),e(qS,$do),e(Zp,Ido),e(F,jdo),e(F,e_),e(e_,gZ),e(gZ,Ddo),e(e_,Ndo),e(e_,OS),e(OS,qdo),e(e_,Odo),e(F,Gdo),e(F,o_),e(o_,hZ),e(hZ,Xdo),e(o_,Vdo),e(o_,GS),e(GS,zdo),e(o_,Wdo),e(F,Qdo),e(F,r_),e(r_,pZ),e(pZ,Hdo),e(r_,Udo),e(r_,XS),e(XS,Jdo),e(r_,Ydo),e(F,Kdo),e(F,t_),e(t_,_Z),e(_Z,Zdo),e(t_,eco),e(t_,VS),e(VS,oco),e(t_,rco),e(F,tco),e(F,a_),e(a_,uZ),e(uZ,aco),e(a_,nco),e(a_,zS),e(zS,sco),e(a_,lco),e(F,ico),e(F,n_),e(n_,bZ),e(bZ,dco),e(n_,cco),e(n_,WS),e(WS,fco),e(n_,mco),e(F,gco),e(F,s_),e(s_,vZ),e(vZ,hco),e(s_,pco),e(s_,QS),e(QS,_co),e(s_,uco),e(F,bco),e(F,l_),e(l_,TZ),e(TZ,vco),e(l_,Tco),e(l_,HS),e(HS,Fco),e(l_,Cco),e(F,Mco),e(F,i_),e(i_,FZ),e(FZ,Eco),e(i_,yco),e(i_,US),e(US,wco),e(i_,Aco),e(F,Lco),e(F,d_),e(d_,CZ),e(CZ,Bco),e(d_,xco),e(d_,JS),e(JS,kco),e(d_,Rco),e(F,Sco),e(F,c_),e(c_,MZ),e(MZ,Pco),e(c_,$co),e(c_,YS),e(YS,Ico),e(c_,jco),e(F,Dco),e(F,f_),e(f_,EZ),e(EZ,Nco),e(f_,qco),e(f_,KS),e(KS,Oco),e(f_,Gco),e(F,Xco),e(F,m_),e(m_,yZ),e(yZ,Vco),e(m_,zco),e(m_,ZS),e(ZS,Wco),e(m_,Qco),e(F,Hco),e(F,g_),e(g_,wZ),e(wZ,Uco),e(g_,Jco),e(g_,eP),e(eP,Yco),e(g_,Kco),e(F,Zco),e(F,h_),e(h_,AZ),e(AZ,efo),e(h_,ofo),e(h_,oP),e(oP,rfo),e(h_,tfo),e(F,afo),e(F,p_),e(p_,LZ),e(LZ,nfo),e(p_,sfo),e(p_,rP),e(rP,lfo),e(p_,ifo),e(F,dfo),e(F,__),e(__,BZ),e(BZ,cfo),e(__,ffo),e(__,tP),e(tP,mfo),e(__,gfo),e(F,hfo),e(F,u_),e(u_,xZ),e(xZ,pfo),e(u_,_fo),e(u_,aP),e(aP,ufo),e(u_,bfo),e(F,vfo),e(F,b_),e(b_,kZ),e(kZ,Tfo),e(b_,Ffo),e(b_,nP),e(nP,Cfo),e(b_,Mfo),e(De,Efo),e(De,v_),e(v_,yfo),e(v_,RZ),e(RZ,wfo),e(v_,Afo),e(v_,SZ),e(SZ,Lfo),e(De,Bfo),e(De,PZ),e(PZ,xfo),e(De,kfo),g(IE,De,null),b(c,Sxe,u),b(c,ed,u),e(ed,T_),e(T_,$Z),g(jE,$Z,null),e(ed,Rfo),e(ed,IZ),e(IZ,Sfo),b(c,Pxe,u),b(c,Yo,u),g(DE,Yo,null),e(Yo,Pfo),e(Yo,od),e(od,$fo),e(od,jZ),e(jZ,Ifo),e(od,jfo),e(od,DZ),e(DZ,Dfo),e(od,Nfo),e(Yo,qfo),e(Yo,NE),e(NE,Ofo),e(NE,NZ),e(NZ,Gfo),e(NE,Xfo),e(Yo,Vfo),e(Yo,zr),g(qE,zr,null),e(zr,zfo),e(zr,qZ),e(qZ,Wfo),e(zr,Qfo),e(zr,rd),e(rd,Hfo),e(rd,OZ),e(OZ,Ufo),e(rd,Jfo),e(rd,GZ),e(GZ,Yfo),e(rd,Kfo),e(zr,Zfo),e(zr,XZ),e(XZ,emo),e(zr,omo),g(OE,zr,null),e(Yo,rmo),e(Yo,Ne),g(GE,Ne,null),e(Ne,tmo),e(Ne,VZ),e(VZ,amo),e(Ne,nmo),e(Ne,za),e(za,smo),e(za,zZ),e(zZ,lmo),e(za,imo),e(za,WZ),e(WZ,dmo),e(za,cmo),e(za,QZ),e(QZ,fmo),e(za,mmo),e(Ne,gmo),e(Ne,k),e(k,F_),e(F_,HZ),e(HZ,hmo),e(F_,pmo),e(F_,sP),e(sP,_mo),e(F_,umo),e(k,bmo),e(k,C_),e(C_,UZ),e(UZ,vmo),e(C_,Tmo),e(C_,lP),e(lP,Fmo),e(C_,Cmo),e(k,Mmo),e(k,M_),e(M_,JZ),e(JZ,Emo),e(M_,ymo),e(M_,iP),e(iP,wmo),e(M_,Amo),e(k,Lmo),e(k,E_),e(E_,YZ),e(YZ,Bmo),e(E_,xmo),e(E_,dP),e(dP,kmo),e(E_,Rmo),e(k,Smo),e(k,y_),e(y_,KZ),e(KZ,Pmo),e(y_,$mo),e(y_,cP),e(cP,Imo),e(y_,jmo),e(k,Dmo),e(k,w_),e(w_,ZZ),e(ZZ,Nmo),e(w_,qmo),e(w_,fP),e(fP,Omo),e(w_,Gmo),e(k,Xmo),e(k,A_),e(A_,eee),e(eee,Vmo),e(A_,zmo),e(A_,mP),e(mP,Wmo),e(A_,Qmo),e(k,Hmo),e(k,L_),e(L_,oee),e(oee,Umo),e(L_,Jmo),e(L_,gP),e(gP,Ymo),e(L_,Kmo),e(k,Zmo),e(k,B_),e(B_,ree),e(ree,ego),e(B_,ogo),e(B_,hP),e(hP,rgo),e(B_,tgo),e(k,ago),e(k,x_),e(x_,tee),e(tee,ngo),e(x_,sgo),e(x_,pP),e(pP,lgo),e(x_,igo),e(k,dgo),e(k,k_),e(k_,aee),e(aee,cgo),e(k_,fgo),e(k_,_P),e(_P,mgo),e(k_,ggo),e(k,hgo),e(k,R_),e(R_,nee),e(nee,pgo),e(R_,_go),e(R_,uP),e(uP,ugo),e(R_,bgo),e(k,vgo),e(k,S_),e(S_,see),e(see,Tgo),e(S_,Fgo),e(S_,bP),e(bP,Cgo),e(S_,Mgo),e(k,Ego),e(k,P_),e(P_,lee),e(lee,ygo),e(P_,wgo),e(P_,vP),e(vP,Ago),e(P_,Lgo),e(k,Bgo),e(k,$_),e($_,iee),e(iee,xgo),e($_,kgo),e($_,TP),e(TP,Rgo),e($_,Sgo),e(k,Pgo),e(k,I_),e(I_,dee),e(dee,$go),e(I_,Igo),e(I_,FP),e(FP,jgo),e(I_,Dgo),e(k,Ngo),e(k,j_),e(j_,cee),e(cee,qgo),e(j_,Ogo),e(j_,CP),e(CP,Ggo),e(j_,Xgo),e(k,Vgo),e(k,D_),e(D_,fee),e(fee,zgo),e(D_,Wgo),e(D_,MP),e(MP,Qgo),e(D_,Hgo),e(k,Ugo),e(k,N_),e(N_,mee),e(mee,Jgo),e(N_,Ygo),e(N_,EP),e(EP,Kgo),e(N_,Zgo),e(k,eho),e(k,q_),e(q_,gee),e(gee,oho),e(q_,rho),e(q_,yP),e(yP,tho),e(q_,aho),e(k,nho),e(k,O_),e(O_,hee),e(hee,sho),e(O_,lho),e(O_,wP),e(wP,iho),e(O_,dho),e(k,cho),e(k,G_),e(G_,pee),e(pee,fho),e(G_,mho),e(G_,AP),e(AP,gho),e(G_,hho),e(k,pho),e(k,X_),e(X_,_ee),e(_ee,_ho),e(X_,uho),e(X_,LP),e(LP,bho),e(X_,vho),e(k,Tho),e(k,V_),e(V_,uee),e(uee,Fho),e(V_,Cho),e(V_,BP),e(BP,Mho),e(V_,Eho),e(k,yho),e(k,z_),e(z_,bee),e(bee,who),e(z_,Aho),e(z_,xP),e(xP,Lho),e(z_,Bho),e(k,xho),e(k,W_),e(W_,vee),e(vee,kho),e(W_,Rho),e(W_,kP),e(kP,Sho),e(W_,Pho),e(k,$ho),e(k,Q_),e(Q_,Tee),e(Tee,Iho),e(Q_,jho),e(Q_,RP),e(RP,Dho),e(Q_,Nho),e(k,qho),e(k,H_),e(H_,Fee),e(Fee,Oho),e(H_,Gho),e(H_,SP),e(SP,Xho),e(H_,Vho),e(k,zho),e(k,U_),e(U_,Cee),e(Cee,Who),e(U_,Qho),e(U_,PP),e(PP,Hho),e(U_,Uho),e(k,Jho),e(k,J_),e(J_,Mee),e(Mee,Yho),e(J_,Kho),e(J_,$P),e($P,Zho),e(J_,epo),e(k,opo),e(k,Y_),e(Y_,Eee),e(Eee,rpo),e(Y_,tpo),e(Y_,IP),e(IP,apo),e(Y_,npo),e(k,spo),e(k,K_),e(K_,yee),e(yee,lpo),e(K_,ipo),e(K_,jP),e(jP,dpo),e(K_,cpo),e(k,fpo),e(k,Z_),e(Z_,wee),e(wee,mpo),e(Z_,gpo),e(Z_,DP),e(DP,hpo),e(Z_,ppo),e(k,_po),e(k,eu),e(eu,Aee),e(Aee,upo),e(eu,bpo),e(eu,NP),e(NP,vpo),e(eu,Tpo),e(k,Fpo),e(k,ou),e(ou,Lee),e(Lee,Cpo),e(ou,Mpo),e(ou,qP),e(qP,Epo),e(ou,ypo),e(k,wpo),e(k,ru),e(ru,Bee),e(Bee,Apo),e(ru,Lpo),e(ru,OP),e(OP,Bpo),e(ru,xpo),e(k,kpo),e(k,tu),e(tu,xee),e(xee,Rpo),e(tu,Spo),e(tu,GP),e(GP,Ppo),e(tu,$po),e(k,Ipo),e(k,au),e(au,kee),e(kee,jpo),e(au,Dpo),e(au,XP),e(XP,Npo),e(au,qpo),e(k,Opo),e(k,nu),e(nu,Ree),e(Ree,Gpo),e(nu,Xpo),e(nu,VP),e(VP,Vpo),e(nu,zpo),e(Ne,Wpo),e(Ne,su),e(su,Qpo),e(su,See),e(See,Hpo),e(su,Upo),e(su,Pee),e(Pee,Jpo),e(Ne,Ypo),e(Ne,$ee),e($ee,Kpo),e(Ne,Zpo),g(XE,Ne,null),b(c,$xe,u),b(c,td,u),e(td,lu),e(lu,Iee),g(VE,Iee,null),e(td,e_o),e(td,jee),e(jee,o_o),b(c,Ixe,u),b(c,Ko,u),g(zE,Ko,null),e(Ko,r_o),e(Ko,ad),e(ad,t_o),e(ad,Dee),e(Dee,a_o),e(ad,n_o),e(ad,Nee),e(Nee,s_o),e(ad,l_o),e(Ko,i_o),e(Ko,WE),e(WE,d_o),e(WE,qee),e(qee,c_o),e(WE,f_o),e(Ko,m_o),e(Ko,Wr),g(QE,Wr,null),e(Wr,g_o),e(Wr,Oee),e(Oee,h_o),e(Wr,p_o),e(Wr,nd),e(nd,__o),e(nd,Gee),e(Gee,u_o),e(nd,b_o),e(nd,Xee),e(Xee,v_o),e(nd,T_o),e(Wr,F_o),e(Wr,Vee),e(Vee,C_o),e(Wr,M_o),g(HE,Wr,null),e(Ko,E_o),e(Ko,qe),g(UE,qe,null),e(qe,y_o),e(qe,zee),e(zee,w_o),e(qe,A_o),e(qe,Wa),e(Wa,L_o),e(Wa,Wee),e(Wee,B_o),e(Wa,x_o),e(Wa,Qee),e(Qee,k_o),e(Wa,R_o),e(Wa,Hee),e(Hee,S_o),e(Wa,P_o),e(qe,$_o),e(qe,$),e($,iu),e(iu,Uee),e(Uee,I_o),e(iu,j_o),e(iu,zP),e(zP,D_o),e(iu,N_o),e($,q_o),e($,du),e(du,Jee),e(Jee,O_o),e(du,G_o),e(du,WP),e(WP,X_o),e(du,V_o),e($,z_o),e($,cu),e(cu,Yee),e(Yee,W_o),e(cu,Q_o),e(cu,QP),e(QP,H_o),e(cu,U_o),e($,J_o),e($,fu),e(fu,Kee),e(Kee,Y_o),e(fu,K_o),e(fu,HP),e(HP,Z_o),e(fu,euo),e($,ouo),e($,mu),e(mu,Zee),e(Zee,ruo),e(mu,tuo),e(mu,UP),e(UP,auo),e(mu,nuo),e($,suo),e($,gu),e(gu,eoe),e(eoe,luo),e(gu,iuo),e(gu,JP),e(JP,duo),e(gu,cuo),e($,fuo),e($,hu),e(hu,ooe),e(ooe,muo),e(hu,guo),e(hu,YP),e(YP,huo),e(hu,puo),e($,_uo),e($,pu),e(pu,roe),e(roe,uuo),e(pu,buo),e(pu,KP),e(KP,vuo),e(pu,Tuo),e($,Fuo),e($,_u),e(_u,toe),e(toe,Cuo),e(_u,Muo),e(_u,ZP),e(ZP,Euo),e(_u,yuo),e($,wuo),e($,uu),e(uu,aoe),e(aoe,Auo),e(uu,Luo),e(uu,e$),e(e$,Buo),e(uu,xuo),e($,kuo),e($,bu),e(bu,noe),e(noe,Ruo),e(bu,Suo),e(bu,o$),e(o$,Puo),e(bu,$uo),e($,Iuo),e($,vu),e(vu,soe),e(soe,juo),e(vu,Duo),e(vu,r$),e(r$,Nuo),e(vu,quo),e($,Ouo),e($,Tu),e(Tu,loe),e(loe,Guo),e(Tu,Xuo),e(Tu,t$),e(t$,Vuo),e(Tu,zuo),e($,Wuo),e($,Fu),e(Fu,ioe),e(ioe,Quo),e(Fu,Huo),e(Fu,a$),e(a$,Uuo),e(Fu,Juo),e($,Yuo),e($,Cu),e(Cu,doe),e(doe,Kuo),e(Cu,Zuo),e(Cu,n$),e(n$,e2o),e(Cu,o2o),e($,r2o),e($,Mu),e(Mu,coe),e(coe,t2o),e(Mu,a2o),e(Mu,s$),e(s$,n2o),e(Mu,s2o),e($,l2o),e($,Eu),e(Eu,foe),e(foe,i2o),e(Eu,d2o),e(Eu,l$),e(l$,c2o),e(Eu,f2o),e($,m2o),e($,yu),e(yu,moe),e(moe,g2o),e(yu,h2o),e(yu,i$),e(i$,p2o),e(yu,_2o),e($,u2o),e($,wu),e(wu,goe),e(goe,b2o),e(wu,v2o),e(wu,d$),e(d$,T2o),e(wu,F2o),e($,C2o),e($,Au),e(Au,hoe),e(hoe,M2o),e(Au,E2o),e(Au,c$),e(c$,y2o),e(Au,w2o),e($,A2o),e($,Lu),e(Lu,poe),e(poe,L2o),e(Lu,B2o),e(Lu,f$),e(f$,x2o),e(Lu,k2o),e($,R2o),e($,Bu),e(Bu,_oe),e(_oe,S2o),e(Bu,P2o),e(Bu,m$),e(m$,$2o),e(Bu,I2o),e($,j2o),e($,xu),e(xu,uoe),e(uoe,D2o),e(xu,N2o),e(xu,g$),e(g$,q2o),e(xu,O2o),e($,G2o),e($,ku),e(ku,boe),e(boe,X2o),e(ku,V2o),e(ku,h$),e(h$,z2o),e(ku,W2o),e($,Q2o),e($,Ru),e(Ru,voe),e(voe,H2o),e(Ru,U2o),e(Ru,p$),e(p$,J2o),e(Ru,Y2o),e($,K2o),e($,Su),e(Su,Toe),e(Toe,Z2o),e(Su,e1o),e(Su,_$),e(_$,o1o),e(Su,r1o),e($,t1o),e($,Pu),e(Pu,Foe),e(Foe,a1o),e(Pu,n1o),e(Pu,u$),e(u$,s1o),e(Pu,l1o),e($,i1o),e($,$u),e($u,Coe),e(Coe,d1o),e($u,c1o),e($u,b$),e(b$,f1o),e($u,m1o),e($,g1o),e($,Iu),e(Iu,Moe),e(Moe,h1o),e(Iu,p1o),e(Iu,v$),e(v$,_1o),e(Iu,u1o),e($,b1o),e($,ju),e(ju,Eoe),e(Eoe,v1o),e(ju,T1o),e(ju,T$),e(T$,F1o),e(ju,C1o),e($,M1o),e($,Du),e(Du,yoe),e(yoe,E1o),e(Du,y1o),e(Du,F$),e(F$,w1o),e(Du,A1o),e($,L1o),e($,Nu),e(Nu,woe),e(woe,B1o),e(Nu,x1o),e(Nu,C$),e(C$,k1o),e(Nu,R1o),e($,S1o),e($,qu),e(qu,Aoe),e(Aoe,P1o),e(qu,$1o),e(qu,M$),e(M$,I1o),e(qu,j1o),e($,D1o),e($,Ou),e(Ou,Loe),e(Loe,N1o),e(Ou,q1o),e(Ou,E$),e(E$,O1o),e(Ou,G1o),e($,X1o),e($,Gu),e(Gu,Boe),e(Boe,V1o),e(Gu,z1o),e(Gu,y$),e(y$,W1o),e(Gu,Q1o),e(qe,H1o),e(qe,Xu),e(Xu,U1o),e(Xu,xoe),e(xoe,J1o),e(Xu,Y1o),e(Xu,koe),e(koe,K1o),e(qe,Z1o),e(qe,Roe),e(Roe,ebo),e(qe,obo),g(JE,qe,null),b(c,jxe,u),b(c,sd,u),e(sd,Vu),e(Vu,Soe),g(YE,Soe,null),e(sd,rbo),e(sd,Poe),e(Poe,tbo),b(c,Dxe,u),b(c,Zo,u),g(KE,Zo,null),e(Zo,abo),e(Zo,ld),e(ld,nbo),e(ld,$oe),e($oe,sbo),e(ld,lbo),e(ld,Ioe),e(Ioe,ibo),e(ld,dbo),e(Zo,cbo),e(Zo,ZE),e(ZE,fbo),e(ZE,joe),e(joe,mbo),e(ZE,gbo),e(Zo,hbo),e(Zo,Qr),g(e3,Qr,null),e(Qr,pbo),e(Qr,Doe),e(Doe,_bo),e(Qr,ubo),e(Qr,id),e(id,bbo),e(id,Noe),e(Noe,vbo),e(id,Tbo),e(id,qoe),e(qoe,Fbo),e(id,Cbo),e(Qr,Mbo),e(Qr,Ooe),e(Ooe,Ebo),e(Qr,ybo),g(o3,Qr,null),e(Zo,wbo),e(Zo,Oe),g(r3,Oe,null),e(Oe,Abo),e(Oe,Goe),e(Goe,Lbo),e(Oe,Bbo),e(Oe,Qa),e(Qa,xbo),e(Qa,Xoe),e(Xoe,kbo),e(Qa,Rbo),e(Qa,Voe),e(Voe,Sbo),e(Qa,Pbo),e(Qa,zoe),e(zoe,$bo),e(Qa,Ibo),e(Oe,jbo),e(Oe,I),e(I,zu),e(zu,Woe),e(Woe,Dbo),e(zu,Nbo),e(zu,w$),e(w$,qbo),e(zu,Obo),e(I,Gbo),e(I,Wu),e(Wu,Qoe),e(Qoe,Xbo),e(Wu,Vbo),e(Wu,A$),e(A$,zbo),e(Wu,Wbo),e(I,Qbo),e(I,Qu),e(Qu,Hoe),e(Hoe,Hbo),e(Qu,Ubo),e(Qu,L$),e(L$,Jbo),e(Qu,Ybo),e(I,Kbo),e(I,Hu),e(Hu,Uoe),e(Uoe,Zbo),e(Hu,evo),e(Hu,B$),e(B$,ovo),e(Hu,rvo),e(I,tvo),e(I,Uu),e(Uu,Joe),e(Joe,avo),e(Uu,nvo),e(Uu,x$),e(x$,svo),e(Uu,lvo),e(I,ivo),e(I,Ju),e(Ju,Yoe),e(Yoe,dvo),e(Ju,cvo),e(Ju,k$),e(k$,fvo),e(Ju,mvo),e(I,gvo),e(I,Yu),e(Yu,Koe),e(Koe,hvo),e(Yu,pvo),e(Yu,R$),e(R$,_vo),e(Yu,uvo),e(I,bvo),e(I,Ku),e(Ku,Zoe),e(Zoe,vvo),e(Ku,Tvo),e(Ku,S$),e(S$,Fvo),e(Ku,Cvo),e(I,Mvo),e(I,Zu),e(Zu,ere),e(ere,Evo),e(Zu,yvo),e(Zu,P$),e(P$,wvo),e(Zu,Avo),e(I,Lvo),e(I,e2),e(e2,ore),e(ore,Bvo),e(e2,xvo),e(e2,$$),e($$,kvo),e(e2,Rvo),e(I,Svo),e(I,o2),e(o2,rre),e(rre,Pvo),e(o2,$vo),e(o2,I$),e(I$,Ivo),e(o2,jvo),e(I,Dvo),e(I,r2),e(r2,tre),e(tre,Nvo),e(r2,qvo),e(r2,j$),e(j$,Ovo),e(r2,Gvo),e(I,Xvo),e(I,t2),e(t2,are),e(are,Vvo),e(t2,zvo),e(t2,D$),e(D$,Wvo),e(t2,Qvo),e(I,Hvo),e(I,a2),e(a2,nre),e(nre,Uvo),e(a2,Jvo),e(a2,N$),e(N$,Yvo),e(a2,Kvo),e(I,Zvo),e(I,n2),e(n2,sre),e(sre,e6o),e(n2,o6o),e(n2,q$),e(q$,r6o),e(n2,t6o),e(I,a6o),e(I,s2),e(s2,lre),e(lre,n6o),e(s2,s6o),e(s2,O$),e(O$,l6o),e(s2,i6o),e(I,d6o),e(I,l2),e(l2,ire),e(ire,c6o),e(l2,f6o),e(l2,G$),e(G$,m6o),e(l2,g6o),e(I,h6o),e(I,i2),e(i2,dre),e(dre,p6o),e(i2,_6o),e(i2,X$),e(X$,u6o),e(i2,b6o),e(I,v6o),e(I,d2),e(d2,cre),e(cre,T6o),e(d2,F6o),e(d2,V$),e(V$,C6o),e(d2,M6o),e(I,E6o),e(I,c2),e(c2,fre),e(fre,y6o),e(c2,w6o),e(c2,z$),e(z$,A6o),e(c2,L6o),e(I,B6o),e(I,f2),e(f2,mre),e(mre,x6o),e(f2,k6o),e(f2,W$),e(W$,R6o),e(f2,S6o),e(I,P6o),e(I,m2),e(m2,gre),e(gre,$6o),e(m2,I6o),e(m2,Q$),e(Q$,j6o),e(m2,D6o),e(I,N6o),e(I,g2),e(g2,hre),e(hre,q6o),e(g2,O6o),e(g2,H$),e(H$,G6o),e(g2,X6o),e(I,V6o),e(I,h2),e(h2,pre),e(pre,z6o),e(h2,W6o),e(h2,U$),e(U$,Q6o),e(h2,H6o),e(I,U6o),e(I,p2),e(p2,_re),e(_re,J6o),e(p2,Y6o),e(p2,J$),e(J$,K6o),e(p2,Z6o),e(I,e0o),e(I,_2),e(_2,ure),e(ure,o0o),e(_2,r0o),e(_2,Y$),e(Y$,t0o),e(_2,a0o),e(I,n0o),e(I,u2),e(u2,bre),e(bre,s0o),e(u2,l0o),e(u2,K$),e(K$,i0o),e(u2,d0o),e(I,c0o),e(I,b2),e(b2,vre),e(vre,f0o),e(b2,m0o),e(b2,Z$),e(Z$,g0o),e(b2,h0o),e(I,p0o),e(I,v2),e(v2,Tre),e(Tre,_0o),e(v2,u0o),e(v2,eI),e(eI,b0o),e(v2,v0o),e(I,T0o),e(I,T2),e(T2,Fre),e(Fre,F0o),e(T2,C0o),e(T2,oI),e(oI,M0o),e(T2,E0o),e(I,y0o),e(I,F2),e(F2,Cre),e(Cre,w0o),e(F2,A0o),e(F2,Mre),e(Mre,L0o),e(F2,B0o),e(I,x0o),e(I,C2),e(C2,Ere),e(Ere,k0o),e(C2,R0o),e(C2,rI),e(rI,S0o),e(C2,P0o),e(I,$0o),e(I,M2),e(M2,yre),e(yre,I0o),e(M2,j0o),e(M2,tI),e(tI,D0o),e(M2,N0o),e(I,q0o),e(I,E2),e(E2,wre),e(wre,O0o),e(E2,G0o),e(E2,aI),e(aI,X0o),e(E2,V0o),e(I,z0o),e(I,y2),e(y2,Are),e(Are,W0o),e(y2,Q0o),e(y2,nI),e(nI,H0o),e(y2,U0o),e(Oe,J0o),e(Oe,w2),e(w2,Y0o),e(w2,Lre),e(Lre,K0o),e(w2,Z0o),e(w2,Bre),e(Bre,eTo),e(Oe,oTo),e(Oe,xre),e(xre,rTo),e(Oe,tTo),g(t3,Oe,null),b(c,Nxe,u),b(c,dd,u),e(dd,A2),e(A2,kre),g(a3,kre,null),e(dd,aTo),e(dd,Rre),e(Rre,nTo),b(c,qxe,u),b(c,er,u),g(n3,er,null),e(er,sTo),e(er,cd),e(cd,lTo),e(cd,Sre),e(Sre,iTo),e(cd,dTo),e(cd,Pre),e(Pre,cTo),e(cd,fTo),e(er,mTo),e(er,s3),e(s3,gTo),e(s3,$re),e($re,hTo),e(s3,pTo),e(er,_To),e(er,Hr),g(l3,Hr,null),e(Hr,uTo),e(Hr,Ire),e(Ire,bTo),e(Hr,vTo),e(Hr,fd),e(fd,TTo),e(fd,jre),e(jre,FTo),e(fd,CTo),e(fd,Dre),e(Dre,MTo),e(fd,ETo),e(Hr,yTo),e(Hr,Nre),e(Nre,wTo),e(Hr,ATo),g(i3,Hr,null),e(er,LTo),e(er,Ge),g(d3,Ge,null),e(Ge,BTo),e(Ge,qre),e(qre,xTo),e(Ge,kTo),e(Ge,Ha),e(Ha,RTo),e(Ha,Ore),e(Ore,STo),e(Ha,PTo),e(Ha,Gre),e(Gre,$To),e(Ha,ITo),e(Ha,Xre),e(Xre,jTo),e(Ha,DTo),e(Ge,NTo),e(Ge,ne),e(ne,L2),e(L2,Vre),e(Vre,qTo),e(L2,OTo),e(L2,sI),e(sI,GTo),e(L2,XTo),e(ne,VTo),e(ne,B2),e(B2,zre),e(zre,zTo),e(B2,WTo),e(B2,lI),e(lI,QTo),e(B2,HTo),e(ne,UTo),e(ne,x2),e(x2,Wre),e(Wre,JTo),e(x2,YTo),e(x2,iI),e(iI,KTo),e(x2,ZTo),e(ne,e7o),e(ne,k2),e(k2,Qre),e(Qre,o7o),e(k2,r7o),e(k2,dI),e(dI,t7o),e(k2,a7o),e(ne,n7o),e(ne,R2),e(R2,Hre),e(Hre,s7o),e(R2,l7o),e(R2,cI),e(cI,i7o),e(R2,d7o),e(ne,c7o),e(ne,S2),e(S2,Ure),e(Ure,f7o),e(S2,m7o),e(S2,fI),e(fI,g7o),e(S2,h7o),e(ne,p7o),e(ne,P2),e(P2,Jre),e(Jre,_7o),e(P2,u7o),e(P2,mI),e(mI,b7o),e(P2,v7o),e(ne,T7o),e(ne,$2),e($2,Yre),e(Yre,F7o),e($2,C7o),e($2,gI),e(gI,M7o),e($2,E7o),e(ne,y7o),e(ne,I2),e(I2,Kre),e(Kre,w7o),e(I2,A7o),e(I2,hI),e(hI,L7o),e(I2,B7o),e(ne,x7o),e(ne,j2),e(j2,Zre),e(Zre,k7o),e(j2,R7o),e(j2,pI),e(pI,S7o),e(j2,P7o),e(ne,$7o),e(ne,D2),e(D2,ete),e(ete,I7o),e(D2,j7o),e(D2,_I),e(_I,D7o),e(D2,N7o),e(ne,q7o),e(ne,N2),e(N2,ote),e(ote,O7o),e(N2,G7o),e(N2,uI),e(uI,X7o),e(N2,V7o),e(ne,z7o),e(ne,q2),e(q2,rte),e(rte,W7o),e(q2,Q7o),e(q2,bI),e(bI,H7o),e(q2,U7o),e(ne,J7o),e(ne,O2),e(O2,tte),e(tte,Y7o),e(O2,K7o),e(O2,vI),e(vI,Z7o),e(O2,eFo),e(ne,oFo),e(ne,G2),e(G2,ate),e(ate,rFo),e(G2,tFo),e(G2,TI),e(TI,aFo),e(G2,nFo),e(ne,sFo),e(ne,X2),e(X2,nte),e(nte,lFo),e(X2,iFo),e(X2,FI),e(FI,dFo),e(X2,cFo),e(Ge,fFo),e(Ge,V2),e(V2,mFo),e(V2,ste),e(ste,gFo),e(V2,hFo),e(V2,lte),e(lte,pFo),e(Ge,_Fo),e(Ge,ite),e(ite,uFo),e(Ge,bFo),g(c3,Ge,null),b(c,Oxe,u),b(c,md,u),e(md,z2),e(z2,dte),g(f3,dte,null),e(md,vFo),e(md,cte),e(cte,TFo),b(c,Gxe,u),b(c,or,u),g(m3,or,null),e(or,FFo),e(or,gd),e(gd,CFo),e(gd,fte),e(fte,MFo),e(gd,EFo),e(gd,mte),e(mte,yFo),e(gd,wFo),e(or,AFo),e(or,g3),e(g3,LFo),e(g3,gte),e(gte,BFo),e(g3,xFo),e(or,kFo),e(or,Ur),g(h3,Ur,null),e(Ur,RFo),e(Ur,hte),e(hte,SFo),e(Ur,PFo),e(Ur,hd),e(hd,$Fo),e(hd,pte),e(pte,IFo),e(hd,jFo),e(hd,_te),e(_te,DFo),e(hd,NFo),e(Ur,qFo),e(Ur,ute),e(ute,OFo),e(Ur,GFo),g(p3,Ur,null),e(or,XFo),e(or,Xe),g(_3,Xe,null),e(Xe,VFo),e(Xe,bte),e(bte,zFo),e(Xe,WFo),e(Xe,Ua),e(Ua,QFo),e(Ua,vte),e(vte,HFo),e(Ua,UFo),e(Ua,Tte),e(Tte,JFo),e(Ua,YFo),e(Ua,Fte),e(Fte,KFo),e(Ua,ZFo),e(Xe,eCo),e(Xe,A),e(A,W2),e(W2,Cte),e(Cte,oCo),e(W2,rCo),e(W2,CI),e(CI,tCo),e(W2,aCo),e(A,nCo),e(A,Q2),e(Q2,Mte),e(Mte,sCo),e(Q2,lCo),e(Q2,MI),e(MI,iCo),e(Q2,dCo),e(A,cCo),e(A,H2),e(H2,Ete),e(Ete,fCo),e(H2,mCo),e(H2,EI),e(EI,gCo),e(H2,hCo),e(A,pCo),e(A,U2),e(U2,yte),e(yte,_Co),e(U2,uCo),e(U2,yI),e(yI,bCo),e(U2,vCo),e(A,TCo),e(A,J2),e(J2,wte),e(wte,FCo),e(J2,CCo),e(J2,wI),e(wI,MCo),e(J2,ECo),e(A,yCo),e(A,Y2),e(Y2,Ate),e(Ate,wCo),e(Y2,ACo),e(Y2,AI),e(AI,LCo),e(Y2,BCo),e(A,xCo),e(A,K2),e(K2,Lte),e(Lte,kCo),e(K2,RCo),e(K2,LI),e(LI,SCo),e(K2,PCo),e(A,$Co),e(A,Z2),e(Z2,Bte),e(Bte,ICo),e(Z2,jCo),e(Z2,BI),e(BI,DCo),e(Z2,NCo),e(A,qCo),e(A,e1),e(e1,xte),e(xte,OCo),e(e1,GCo),e(e1,xI),e(xI,XCo),e(e1,VCo),e(A,zCo),e(A,o1),e(o1,kte),e(kte,WCo),e(o1,QCo),e(o1,kI),e(kI,HCo),e(o1,UCo),e(A,JCo),e(A,r1),e(r1,Rte),e(Rte,YCo),e(r1,KCo),e(r1,RI),e(RI,ZCo),e(r1,eMo),e(A,oMo),e(A,t1),e(t1,Ste),e(Ste,rMo),e(t1,tMo),e(t1,SI),e(SI,aMo),e(t1,nMo),e(A,sMo),e(A,a1),e(a1,Pte),e(Pte,lMo),e(a1,iMo),e(a1,PI),e(PI,dMo),e(a1,cMo),e(A,fMo),e(A,n1),e(n1,$te),e($te,mMo),e(n1,gMo),e(n1,$I),e($I,hMo),e(n1,pMo),e(A,_Mo),e(A,s1),e(s1,Ite),e(Ite,uMo),e(s1,bMo),e(s1,II),e(II,vMo),e(s1,TMo),e(A,FMo),e(A,l1),e(l1,jte),e(jte,CMo),e(l1,MMo),e(l1,jI),e(jI,EMo),e(l1,yMo),e(A,wMo),e(A,i1),e(i1,Dte),e(Dte,AMo),e(i1,LMo),e(i1,DI),e(DI,BMo),e(i1,xMo),e(A,kMo),e(A,d1),e(d1,Nte),e(Nte,RMo),e(d1,SMo),e(d1,NI),e(NI,PMo),e(d1,$Mo),e(A,IMo),e(A,c1),e(c1,qte),e(qte,jMo),e(c1,DMo),e(c1,qI),e(qI,NMo),e(c1,qMo),e(A,OMo),e(A,f1),e(f1,Ote),e(Ote,GMo),e(f1,XMo),e(f1,OI),e(OI,VMo),e(f1,zMo),e(A,WMo),e(A,m1),e(m1,Gte),e(Gte,QMo),e(m1,HMo),e(m1,GI),e(GI,UMo),e(m1,JMo),e(A,YMo),e(A,g1),e(g1,Xte),e(Xte,KMo),e(g1,ZMo),e(g1,XI),e(XI,e4o),e(g1,o4o),e(A,r4o),e(A,h1),e(h1,Vte),e(Vte,t4o),e(h1,a4o),e(h1,VI),e(VI,n4o),e(h1,s4o),e(A,l4o),e(A,p1),e(p1,zte),e(zte,i4o),e(p1,d4o),e(p1,zI),e(zI,c4o),e(p1,f4o),e(A,m4o),e(A,_1),e(_1,Wte),e(Wte,g4o),e(_1,h4o),e(_1,WI),e(WI,p4o),e(_1,_4o),e(A,u4o),e(A,u1),e(u1,Qte),e(Qte,b4o),e(u1,v4o),e(u1,QI),e(QI,T4o),e(u1,F4o),e(A,C4o),e(A,b1),e(b1,Hte),e(Hte,M4o),e(b1,E4o),e(b1,HI),e(HI,y4o),e(b1,w4o),e(A,A4o),e(A,v1),e(v1,Ute),e(Ute,L4o),e(v1,B4o),e(v1,UI),e(UI,x4o),e(v1,k4o),e(A,R4o),e(A,T1),e(T1,Jte),e(Jte,S4o),e(T1,P4o),e(T1,JI),e(JI,$4o),e(T1,I4o),e(A,j4o),e(A,F1),e(F1,Yte),e(Yte,D4o),e(F1,N4o),e(F1,YI),e(YI,q4o),e(F1,O4o),e(A,G4o),e(A,C1),e(C1,Kte),e(Kte,X4o),e(C1,V4o),e(C1,KI),e(KI,z4o),e(C1,W4o),e(A,Q4o),e(A,M1),e(M1,Zte),e(Zte,H4o),e(M1,U4o),e(M1,ZI),e(ZI,J4o),e(M1,Y4o),e(A,K4o),e(A,E1),e(E1,eae),e(eae,Z4o),e(E1,eEo),e(E1,ej),e(ej,oEo),e(E1,rEo),e(A,tEo),e(A,y1),e(y1,oae),e(oae,aEo),e(y1,nEo),e(y1,oj),e(oj,sEo),e(y1,lEo),e(A,iEo),e(A,w1),e(w1,rae),e(rae,dEo),e(w1,cEo),e(w1,rj),e(rj,fEo),e(w1,mEo),e(A,gEo),e(A,A1),e(A1,tae),e(tae,hEo),e(A1,pEo),e(A1,tj),e(tj,_Eo),e(A1,uEo),e(A,bEo),e(A,L1),e(L1,aae),e(aae,vEo),e(L1,TEo),e(L1,aj),e(aj,FEo),e(L1,CEo),e(A,MEo),e(A,B1),e(B1,nae),e(nae,EEo),e(B1,yEo),e(B1,nj),e(nj,wEo),e(B1,AEo),e(A,LEo),e(A,x1),e(x1,sae),e(sae,BEo),e(x1,xEo),e(x1,sj),e(sj,kEo),e(x1,REo),e(A,SEo),e(A,k1),e(k1,lae),e(lae,PEo),e(k1,$Eo),e(k1,lj),e(lj,IEo),e(k1,jEo),e(A,DEo),e(A,R1),e(R1,iae),e(iae,NEo),e(R1,qEo),e(R1,ij),e(ij,OEo),e(R1,GEo),e(A,XEo),e(A,S1),e(S1,dae),e(dae,VEo),e(S1,zEo),e(S1,dj),e(dj,WEo),e(S1,QEo),e(A,HEo),e(A,P1),e(P1,cae),e(cae,UEo),e(P1,JEo),e(P1,cj),e(cj,YEo),e(P1,KEo),e(A,ZEo),e(A,$1),e($1,fae),e(fae,e3o),e($1,o3o),e($1,fj),e(fj,r3o),e($1,t3o),e(A,a3o),e(A,I1),e(I1,mae),e(mae,n3o),e(I1,s3o),e(I1,mj),e(mj,l3o),e(I1,i3o),e(A,d3o),e(A,j1),e(j1,gae),e(gae,c3o),e(j1,f3o),e(j1,gj),e(gj,m3o),e(j1,g3o),e(Xe,h3o),e(Xe,D1),e(D1,p3o),e(D1,hae),e(hae,_3o),e(D1,u3o),e(D1,pae),e(pae,b3o),e(Xe,v3o),e(Xe,_ae),e(_ae,T3o),e(Xe,F3o),g(u3,Xe,null),b(c,Xxe,u),b(c,pd,u),e(pd,N1),e(N1,uae),g(b3,uae,null),e(pd,C3o),e(pd,bae),e(bae,M3o),b(c,Vxe,u),b(c,rr,u),g(v3,rr,null),e(rr,E3o),e(rr,_d),e(_d,y3o),e(_d,vae),e(vae,w3o),e(_d,A3o),e(_d,Tae),e(Tae,L3o),e(_d,B3o),e(rr,x3o),e(rr,T3),e(T3,k3o),e(T3,Fae),e(Fae,R3o),e(T3,S3o),e(rr,P3o),e(rr,Jr),g(F3,Jr,null),e(Jr,$3o),e(Jr,Cae),e(Cae,I3o),e(Jr,j3o),e(Jr,ud),e(ud,D3o),e(ud,Mae),e(Mae,N3o),e(ud,q3o),e(ud,Eae),e(Eae,O3o),e(ud,G3o),e(Jr,X3o),e(Jr,yae),e(yae,V3o),e(Jr,z3o),g(C3,Jr,null),e(rr,W3o),e(rr,Ve),g(M3,Ve,null),e(Ve,Q3o),e(Ve,wae),e(wae,H3o),e(Ve,U3o),e(Ve,Ja),e(Ja,J3o),e(Ja,Aae),e(Aae,Y3o),e(Ja,K3o),e(Ja,Lae),e(Lae,Z3o),e(Ja,e5o),e(Ja,Bae),e(Bae,o5o),e(Ja,r5o),e(Ve,t5o),e(Ve,O),e(O,q1),e(q1,xae),e(xae,a5o),e(q1,n5o),e(q1,hj),e(hj,s5o),e(q1,l5o),e(O,i5o),e(O,O1),e(O1,kae),e(kae,d5o),e(O1,c5o),e(O1,pj),e(pj,f5o),e(O1,m5o),e(O,g5o),e(O,G1),e(G1,Rae),e(Rae,h5o),e(G1,p5o),e(G1,_j),e(_j,_5o),e(G1,u5o),e(O,b5o),e(O,X1),e(X1,Sae),e(Sae,v5o),e(X1,T5o),e(X1,uj),e(uj,F5o),e(X1,C5o),e(O,M5o),e(O,V1),e(V1,Pae),e(Pae,E5o),e(V1,y5o),e(V1,bj),e(bj,w5o),e(V1,A5o),e(O,L5o),e(O,z1),e(z1,$ae),e($ae,B5o),e(z1,x5o),e(z1,vj),e(vj,k5o),e(z1,R5o),e(O,S5o),e(O,W1),e(W1,Iae),e(Iae,P5o),e(W1,$5o),e(W1,Tj),e(Tj,I5o),e(W1,j5o),e(O,D5o),e(O,Q1),e(Q1,jae),e(jae,N5o),e(Q1,q5o),e(Q1,Fj),e(Fj,O5o),e(Q1,G5o),e(O,X5o),e(O,H1),e(H1,Dae),e(Dae,V5o),e(H1,z5o),e(H1,Cj),e(Cj,W5o),e(H1,Q5o),e(O,H5o),e(O,U1),e(U1,Nae),e(Nae,U5o),e(U1,J5o),e(U1,Mj),e(Mj,Y5o),e(U1,K5o),e(O,Z5o),e(O,J1),e(J1,qae),e(qae,eyo),e(J1,oyo),e(J1,Ej),e(Ej,ryo),e(J1,tyo),e(O,ayo),e(O,Y1),e(Y1,Oae),e(Oae,nyo),e(Y1,syo),e(Y1,yj),e(yj,lyo),e(Y1,iyo),e(O,dyo),e(O,K1),e(K1,Gae),e(Gae,cyo),e(K1,fyo),e(K1,wj),e(wj,myo),e(K1,gyo),e(O,hyo),e(O,Z1),e(Z1,Xae),e(Xae,pyo),e(Z1,_yo),e(Z1,Aj),e(Aj,uyo),e(Z1,byo),e(O,vyo),e(O,eb),e(eb,Vae),e(Vae,Tyo),e(eb,Fyo),e(eb,Lj),e(Lj,Cyo),e(eb,Myo),e(O,Eyo),e(O,ob),e(ob,zae),e(zae,yyo),e(ob,wyo),e(ob,Bj),e(Bj,Ayo),e(ob,Lyo),e(O,Byo),e(O,rb),e(rb,Wae),e(Wae,xyo),e(rb,kyo),e(rb,xj),e(xj,Ryo),e(rb,Syo),e(O,Pyo),e(O,tb),e(tb,Qae),e(Qae,$yo),e(tb,Iyo),e(tb,kj),e(kj,jyo),e(tb,Dyo),e(O,Nyo),e(O,ab),e(ab,Hae),e(Hae,qyo),e(ab,Oyo),e(ab,Rj),e(Rj,Gyo),e(ab,Xyo),e(O,Vyo),e(O,nb),e(nb,Uae),e(Uae,zyo),e(nb,Wyo),e(nb,Sj),e(Sj,Qyo),e(nb,Hyo),e(O,Uyo),e(O,sb),e(sb,Jae),e(Jae,Jyo),e(sb,Yyo),e(sb,Pj),e(Pj,Kyo),e(sb,Zyo),e(O,ewo),e(O,lb),e(lb,Yae),e(Yae,owo),e(lb,rwo),e(lb,$j),e($j,two),e(lb,awo),e(O,nwo),e(O,ib),e(ib,Kae),e(Kae,swo),e(ib,lwo),e(ib,Ij),e(Ij,iwo),e(ib,dwo),e(O,cwo),e(O,db),e(db,Zae),e(Zae,fwo),e(db,mwo),e(db,jj),e(jj,gwo),e(db,hwo),e(O,pwo),e(O,cb),e(cb,ene),e(ene,_wo),e(cb,uwo),e(cb,Dj),e(Dj,bwo),e(cb,vwo),e(O,Two),e(O,fb),e(fb,one),e(one,Fwo),e(fb,Cwo),e(fb,Nj),e(Nj,Mwo),e(fb,Ewo),e(O,ywo),e(O,mb),e(mb,rne),e(rne,wwo),e(mb,Awo),e(mb,qj),e(qj,Lwo),e(mb,Bwo),e(O,xwo),e(O,gb),e(gb,tne),e(tne,kwo),e(gb,Rwo),e(gb,Oj),e(Oj,Swo),e(gb,Pwo),e(Ve,$wo),e(Ve,hb),e(hb,Iwo),e(hb,ane),e(ane,jwo),e(hb,Dwo),e(hb,nne),e(nne,Nwo),e(Ve,qwo),e(Ve,sne),e(sne,Owo),e(Ve,Gwo),g(E3,Ve,null),b(c,zxe,u),b(c,bd,u),e(bd,pb),e(pb,lne),g(y3,lne,null),e(bd,Xwo),e(bd,ine),e(ine,Vwo),b(c,Wxe,u),b(c,tr,u),g(w3,tr,null),e(tr,zwo),e(tr,vd),e(vd,Wwo),e(vd,dne),e(dne,Qwo),e(vd,Hwo),e(vd,cne),e(cne,Uwo),e(vd,Jwo),e(tr,Ywo),e(tr,A3),e(A3,Kwo),e(A3,fne),e(fne,Zwo),e(A3,eAo),e(tr,oAo),e(tr,Yr),g(L3,Yr,null),e(Yr,rAo),e(Yr,mne),e(mne,tAo),e(Yr,aAo),e(Yr,Td),e(Td,nAo),e(Td,gne),e(gne,sAo),e(Td,lAo),e(Td,hne),e(hne,iAo),e(Td,dAo),e(Yr,cAo),e(Yr,pne),e(pne,fAo),e(Yr,mAo),g(B3,Yr,null),e(tr,gAo),e(tr,ze),g(x3,ze,null),e(ze,hAo),e(ze,_ne),e(_ne,pAo),e(ze,_Ao),e(ze,Ya),e(Ya,uAo),e(Ya,une),e(une,bAo),e(Ya,vAo),e(Ya,bne),e(bne,TAo),e(Ya,FAo),e(Ya,vne),e(vne,CAo),e(Ya,MAo),e(ze,EAo),e(ze,da),e(da,_b),e(_b,Tne),e(Tne,yAo),e(_b,wAo),e(_b,Gj),e(Gj,AAo),e(_b,LAo),e(da,BAo),e(da,ub),e(ub,Fne),e(Fne,xAo),e(ub,kAo),e(ub,Xj),e(Xj,RAo),e(ub,SAo),e(da,PAo),e(da,bb),e(bb,Cne),e(Cne,$Ao),e(bb,IAo),e(bb,Vj),e(Vj,jAo),e(bb,DAo),e(da,NAo),e(da,vb),e(vb,Mne),e(Mne,qAo),e(vb,OAo),e(vb,zj),e(zj,GAo),e(vb,XAo),e(da,VAo),e(da,Tb),e(Tb,Ene),e(Ene,zAo),e(Tb,WAo),e(Tb,Wj),e(Wj,QAo),e(Tb,HAo),e(ze,UAo),e(ze,Fb),e(Fb,JAo),e(Fb,yne),e(yne,YAo),e(Fb,KAo),e(Fb,wne),e(wne,ZAo),e(ze,eLo),e(ze,Ane),e(Ane,oLo),e(ze,rLo),g(k3,ze,null),b(c,Qxe,u),b(c,Fd,u),e(Fd,Cb),e(Cb,Lne),g(R3,Lne,null),e(Fd,tLo),e(Fd,Bne),e(Bne,aLo),b(c,Hxe,u),b(c,ar,u),g(S3,ar,null),e(ar,nLo),e(ar,Cd),e(Cd,sLo),e(Cd,xne),e(xne,lLo),e(Cd,iLo),e(Cd,kne),e(kne,dLo),e(Cd,cLo),e(ar,fLo),e(ar,P3),e(P3,mLo),e(P3,Rne),e(Rne,gLo),e(P3,hLo),e(ar,pLo),e(ar,Kr),g($3,Kr,null),e(Kr,_Lo),e(Kr,Sne),e(Sne,uLo),e(Kr,bLo),e(Kr,Md),e(Md,vLo),e(Md,Pne),e(Pne,TLo),e(Md,FLo),e(Md,$ne),e($ne,CLo),e(Md,MLo),e(Kr,ELo),e(Kr,Ine),e(Ine,yLo),e(Kr,wLo),g(I3,Kr,null),e(ar,ALo),e(ar,We),g(j3,We,null),e(We,LLo),e(We,jne),e(jne,BLo),e(We,xLo),e(We,Ka),e(Ka,kLo),e(Ka,Dne),e(Dne,RLo),e(Ka,SLo),e(Ka,Nne),e(Nne,PLo),e(Ka,$Lo),e(Ka,qne),e(qne,ILo),e(Ka,jLo),e(We,DLo),e(We,N),e(N,Mb),e(Mb,One),e(One,NLo),e(Mb,qLo),e(Mb,Qj),e(Qj,OLo),e(Mb,GLo),e(N,XLo),e(N,Eb),e(Eb,Gne),e(Gne,VLo),e(Eb,zLo),e(Eb,Hj),e(Hj,WLo),e(Eb,QLo),e(N,HLo),e(N,yb),e(yb,Xne),e(Xne,ULo),e(yb,JLo),e(yb,Uj),e(Uj,YLo),e(yb,KLo),e(N,ZLo),e(N,wb),e(wb,Vne),e(Vne,e8o),e(wb,o8o),e(wb,Jj),e(Jj,r8o),e(wb,t8o),e(N,a8o),e(N,Ab),e(Ab,zne),e(zne,n8o),e(Ab,s8o),e(Ab,Yj),e(Yj,l8o),e(Ab,i8o),e(N,d8o),e(N,Lb),e(Lb,Wne),e(Wne,c8o),e(Lb,f8o),e(Lb,Kj),e(Kj,m8o),e(Lb,g8o),e(N,h8o),e(N,Bb),e(Bb,Qne),e(Qne,p8o),e(Bb,_8o),e(Bb,Zj),e(Zj,u8o),e(Bb,b8o),e(N,v8o),e(N,xb),e(xb,Hne),e(Hne,T8o),e(xb,F8o),e(xb,eD),e(eD,C8o),e(xb,M8o),e(N,E8o),e(N,kb),e(kb,Une),e(Une,y8o),e(kb,w8o),e(kb,oD),e(oD,A8o),e(kb,L8o),e(N,B8o),e(N,Rb),e(Rb,Jne),e(Jne,x8o),e(Rb,k8o),e(Rb,rD),e(rD,R8o),e(Rb,S8o),e(N,P8o),e(N,Sb),e(Sb,Yne),e(Yne,$8o),e(Sb,I8o),e(Sb,tD),e(tD,j8o),e(Sb,D8o),e(N,N8o),e(N,Pb),e(Pb,Kne),e(Kne,q8o),e(Pb,O8o),e(Pb,aD),e(aD,G8o),e(Pb,X8o),e(N,V8o),e(N,$b),e($b,Zne),e(Zne,z8o),e($b,W8o),e($b,nD),e(nD,Q8o),e($b,H8o),e(N,U8o),e(N,Ib),e(Ib,ese),e(ese,J8o),e(Ib,Y8o),e(Ib,sD),e(sD,K8o),e(Ib,Z8o),e(N,e9o),e(N,jb),e(jb,ose),e(ose,o9o),e(jb,r9o),e(jb,lD),e(lD,t9o),e(jb,a9o),e(N,n9o),e(N,Db),e(Db,rse),e(rse,s9o),e(Db,l9o),e(Db,iD),e(iD,i9o),e(Db,d9o),e(N,c9o),e(N,Nb),e(Nb,tse),e(tse,f9o),e(Nb,m9o),e(Nb,dD),e(dD,g9o),e(Nb,h9o),e(N,p9o),e(N,qb),e(qb,ase),e(ase,_9o),e(qb,u9o),e(qb,cD),e(cD,b9o),e(qb,v9o),e(N,T9o),e(N,Ob),e(Ob,nse),e(nse,F9o),e(Ob,C9o),e(Ob,fD),e(fD,M9o),e(Ob,E9o),e(N,y9o),e(N,Gb),e(Gb,sse),e(sse,w9o),e(Gb,A9o),e(Gb,mD),e(mD,L9o),e(Gb,B9o),e(N,x9o),e(N,Xb),e(Xb,lse),e(lse,k9o),e(Xb,R9o),e(Xb,gD),e(gD,S9o),e(Xb,P9o),e(N,$9o),e(N,Vb),e(Vb,ise),e(ise,I9o),e(Vb,j9o),e(Vb,hD),e(hD,D9o),e(Vb,N9o),e(N,q9o),e(N,zb),e(zb,dse),e(dse,O9o),e(zb,G9o),e(zb,pD),e(pD,X9o),e(zb,V9o),e(N,z9o),e(N,Wb),e(Wb,cse),e(cse,W9o),e(Wb,Q9o),e(Wb,_D),e(_D,H9o),e(Wb,U9o),e(N,J9o),e(N,Qb),e(Qb,fse),e(fse,Y9o),e(Qb,K9o),e(Qb,uD),e(uD,Z9o),e(Qb,eBo),e(N,oBo),e(N,Hb),e(Hb,mse),e(mse,rBo),e(Hb,tBo),e(Hb,bD),e(bD,aBo),e(Hb,nBo),e(N,sBo),e(N,Ub),e(Ub,gse),e(gse,lBo),e(Ub,iBo),e(Ub,vD),e(vD,dBo),e(Ub,cBo),e(N,fBo),e(N,Jb),e(Jb,hse),e(hse,mBo),e(Jb,gBo),e(Jb,TD),e(TD,hBo),e(Jb,pBo),e(N,_Bo),e(N,Yb),e(Yb,pse),e(pse,uBo),e(Yb,bBo),e(Yb,FD),e(FD,vBo),e(Yb,TBo),e(N,FBo),e(N,Kb),e(Kb,_se),e(_se,CBo),e(Kb,MBo),e(Kb,CD),e(CD,EBo),e(Kb,yBo),e(N,wBo),e(N,Zb),e(Zb,use),e(use,ABo),e(Zb,LBo),e(Zb,MD),e(MD,BBo),e(Zb,xBo),e(N,kBo),e(N,ev),e(ev,bse),e(bse,RBo),e(ev,SBo),e(ev,ED),e(ED,PBo),e(ev,$Bo),e(N,IBo),e(N,ov),e(ov,vse),e(vse,jBo),e(ov,DBo),e(ov,yD),e(yD,NBo),e(ov,qBo),e(We,OBo),e(We,rv),e(rv,GBo),e(rv,Tse),e(Tse,XBo),e(rv,VBo),e(rv,Fse),e(Fse,zBo),e(We,WBo),e(We,Cse),e(Cse,QBo),e(We,HBo),g(D3,We,null),b(c,Uxe,u),b(c,Ed,u),e(Ed,tv),e(tv,Mse),g(N3,Mse,null),e(Ed,UBo),e(Ed,Ese),e(Ese,JBo),b(c,Jxe,u),b(c,nr,u),g(q3,nr,null),e(nr,YBo),e(nr,yd),e(yd,KBo),e(yd,yse),e(yse,ZBo),e(yd,exo),e(yd,wse),e(wse,oxo),e(yd,rxo),e(nr,txo),e(nr,O3),e(O3,axo),e(O3,Ase),e(Ase,nxo),e(O3,sxo),e(nr,lxo),e(nr,Zr),g(G3,Zr,null),e(Zr,ixo),e(Zr,Lse),e(Lse,dxo),e(Zr,cxo),e(Zr,wd),e(wd,fxo),e(wd,Bse),e(Bse,mxo),e(wd,gxo),e(wd,xse),e(xse,hxo),e(wd,pxo),e(Zr,_xo),e(Zr,kse),e(kse,uxo),e(Zr,bxo),g(X3,Zr,null),e(nr,vxo),e(nr,Qe),g(V3,Qe,null),e(Qe,Txo),e(Qe,Rse),e(Rse,Fxo),e(Qe,Cxo),e(Qe,Za),e(Za,Mxo),e(Za,Sse),e(Sse,Exo),e(Za,yxo),e(Za,Pse),e(Pse,wxo),e(Za,Axo),e(Za,$se),e($se,Lxo),e(Za,Bxo),e(Qe,xxo),e(Qe,R),e(R,av),e(av,Ise),e(Ise,kxo),e(av,Rxo),e(av,wD),e(wD,Sxo),e(av,Pxo),e(R,$xo),e(R,nv),e(nv,jse),e(jse,Ixo),e(nv,jxo),e(nv,AD),e(AD,Dxo),e(nv,Nxo),e(R,qxo),e(R,sv),e(sv,Dse),e(Dse,Oxo),e(sv,Gxo),e(sv,LD),e(LD,Xxo),e(sv,Vxo),e(R,zxo),e(R,lv),e(lv,Nse),e(Nse,Wxo),e(lv,Qxo),e(lv,BD),e(BD,Hxo),e(lv,Uxo),e(R,Jxo),e(R,iv),e(iv,qse),e(qse,Yxo),e(iv,Kxo),e(iv,xD),e(xD,Zxo),e(iv,eko),e(R,oko),e(R,dv),e(dv,Ose),e(Ose,rko),e(dv,tko),e(dv,kD),e(kD,ako),e(dv,nko),e(R,sko),e(R,cv),e(cv,Gse),e(Gse,lko),e(cv,iko),e(cv,RD),e(RD,dko),e(cv,cko),e(R,fko),e(R,fv),e(fv,Xse),e(Xse,mko),e(fv,gko),e(fv,SD),e(SD,hko),e(fv,pko),e(R,_ko),e(R,mv),e(mv,Vse),e(Vse,uko),e(mv,bko),e(mv,PD),e(PD,vko),e(mv,Tko),e(R,Fko),e(R,gv),e(gv,zse),e(zse,Cko),e(gv,Mko),e(gv,$D),e($D,Eko),e(gv,yko),e(R,wko),e(R,hv),e(hv,Wse),e(Wse,Ako),e(hv,Lko),e(hv,ID),e(ID,Bko),e(hv,xko),e(R,kko),e(R,pv),e(pv,Qse),e(Qse,Rko),e(pv,Sko),e(pv,jD),e(jD,Pko),e(pv,$ko),e(R,Iko),e(R,_v),e(_v,Hse),e(Hse,jko),e(_v,Dko),e(_v,DD),e(DD,Nko),e(_v,qko),e(R,Oko),e(R,uv),e(uv,Use),e(Use,Gko),e(uv,Xko),e(uv,ND),e(ND,Vko),e(uv,zko),e(R,Wko),e(R,bv),e(bv,Jse),e(Jse,Qko),e(bv,Hko),e(bv,qD),e(qD,Uko),e(bv,Jko),e(R,Yko),e(R,vv),e(vv,Yse),e(Yse,Kko),e(vv,Zko),e(vv,OD),e(OD,eRo),e(vv,oRo),e(R,rRo),e(R,Tv),e(Tv,Kse),e(Kse,tRo),e(Tv,aRo),e(Tv,GD),e(GD,nRo),e(Tv,sRo),e(R,lRo),e(R,Fv),e(Fv,Zse),e(Zse,iRo),e(Fv,dRo),e(Fv,XD),e(XD,cRo),e(Fv,fRo),e(R,mRo),e(R,Cv),e(Cv,ele),e(ele,gRo),e(Cv,hRo),e(Cv,VD),e(VD,pRo),e(Cv,_Ro),e(R,uRo),e(R,Mv),e(Mv,ole),e(ole,bRo),e(Mv,vRo),e(Mv,zD),e(zD,TRo),e(Mv,FRo),e(R,CRo),e(R,Ev),e(Ev,rle),e(rle,MRo),e(Ev,ERo),e(Ev,WD),e(WD,yRo),e(Ev,wRo),e(R,ARo),e(R,yv),e(yv,tle),e(tle,LRo),e(yv,BRo),e(yv,QD),e(QD,xRo),e(yv,kRo),e(R,RRo),e(R,wv),e(wv,ale),e(ale,SRo),e(wv,PRo),e(wv,HD),e(HD,$Ro),e(wv,IRo),e(R,jRo),e(R,Av),e(Av,nle),e(nle,DRo),e(Av,NRo),e(Av,UD),e(UD,qRo),e(Av,ORo),e(R,GRo),e(R,Lv),e(Lv,sle),e(sle,XRo),e(Lv,VRo),e(Lv,JD),e(JD,zRo),e(Lv,WRo),e(R,QRo),e(R,Bv),e(Bv,lle),e(lle,HRo),e(Bv,URo),e(Bv,YD),e(YD,JRo),e(Bv,YRo),e(R,KRo),e(R,xv),e(xv,ile),e(ile,ZRo),e(xv,eSo),e(xv,KD),e(KD,oSo),e(xv,rSo),e(R,tSo),e(R,kv),e(kv,dle),e(dle,aSo),e(kv,nSo),e(kv,ZD),e(ZD,sSo),e(kv,lSo),e(R,iSo),e(R,Rv),e(Rv,cle),e(cle,dSo),e(Rv,cSo),e(Rv,eN),e(eN,fSo),e(Rv,mSo),e(R,gSo),e(R,Sv),e(Sv,fle),e(fle,hSo),e(Sv,pSo),e(Sv,oN),e(oN,_So),e(Sv,uSo),e(R,bSo),e(R,Pv),e(Pv,mle),e(mle,vSo),e(Pv,TSo),e(Pv,rN),e(rN,FSo),e(Pv,CSo),e(R,MSo),e(R,$v),e($v,gle),e(gle,ESo),e($v,ySo),e($v,tN),e(tN,wSo),e($v,ASo),e(R,LSo),e(R,Iv),e(Iv,hle),e(hle,BSo),e(Iv,xSo),e(Iv,aN),e(aN,kSo),e(Iv,RSo),e(R,SSo),e(R,jv),e(jv,ple),e(ple,PSo),e(jv,$So),e(jv,nN),e(nN,ISo),e(jv,jSo),e(R,DSo),e(R,Dv),e(Dv,_le),e(_le,NSo),e(Dv,qSo),e(Dv,sN),e(sN,OSo),e(Dv,GSo),e(R,XSo),e(R,Nv),e(Nv,ule),e(ule,VSo),e(Nv,zSo),e(Nv,lN),e(lN,WSo),e(Nv,QSo),e(R,HSo),e(R,qv),e(qv,ble),e(ble,USo),e(qv,JSo),e(qv,iN),e(iN,YSo),e(qv,KSo),e(R,ZSo),e(R,Ov),e(Ov,vle),e(vle,ePo),e(Ov,oPo),e(Ov,dN),e(dN,rPo),e(Ov,tPo),e(R,aPo),e(R,Gv),e(Gv,Tle),e(Tle,nPo),e(Gv,sPo),e(Gv,cN),e(cN,lPo),e(Gv,iPo),e(Qe,dPo),e(Qe,Xv),e(Xv,cPo),e(Xv,Fle),e(Fle,fPo),e(Xv,mPo),e(Xv,Cle),e(Cle,gPo),e(Qe,hPo),e(Qe,Mle),e(Mle,pPo),e(Qe,_Po),g(z3,Qe,null),b(c,Yxe,u),b(c,Ad,u),e(Ad,Vv),e(Vv,Ele),g(W3,Ele,null),e(Ad,uPo),e(Ad,yle),e(yle,bPo),b(c,Kxe,u),b(c,sr,u),g(Q3,sr,null),e(sr,vPo),e(sr,Ld),e(Ld,TPo),e(Ld,wle),e(wle,FPo),e(Ld,CPo),e(Ld,Ale),e(Ale,MPo),e(Ld,EPo),e(sr,yPo),e(sr,H3),e(H3,wPo),e(H3,Lle),e(Lle,APo),e(H3,LPo),e(sr,BPo),e(sr,et),g(U3,et,null),e(et,xPo),e(et,Ble),e(Ble,kPo),e(et,RPo),e(et,Bd),e(Bd,SPo),e(Bd,xle),e(xle,PPo),e(Bd,$Po),e(Bd,kle),e(kle,IPo),e(Bd,jPo),e(et,DPo),e(et,Rle),e(Rle,NPo),e(et,qPo),g(J3,et,null),e(sr,OPo),e(sr,He),g(Y3,He,null),e(He,GPo),e(He,Sle),e(Sle,XPo),e(He,VPo),e(He,en),e(en,zPo),e(en,Ple),e(Ple,WPo),e(en,QPo),e(en,$le),e($le,HPo),e(en,UPo),e(en,Ile),e(Ile,JPo),e(en,YPo),e(He,KPo),e(He,jle),e(jle,zv),e(zv,Dle),e(Dle,ZPo),e(zv,e$o),e(zv,fN),e(fN,o$o),e(zv,r$o),e(He,t$o),e(He,Wv),e(Wv,a$o),e(Wv,Nle),e(Nle,n$o),e(Wv,s$o),e(Wv,qle),e(qle,l$o),e(He,i$o),e(He,Ole),e(Ole,d$o),e(He,c$o),g(K3,He,null),b(c,Zxe,u),b(c,xd,u),e(xd,Qv),e(Qv,Gle),g(Z3,Gle,null),e(xd,f$o),e(xd,Xle),e(Xle,m$o),b(c,eke,u),b(c,lr,u),g(e5,lr,null),e(lr,g$o),e(lr,kd),e(kd,h$o),e(kd,Vle),e(Vle,p$o),e(kd,_$o),e(kd,zle),e(zle,u$o),e(kd,b$o),e(lr,v$o),e(lr,o5),e(o5,T$o),e(o5,Wle),e(Wle,F$o),e(o5,C$o),e(lr,M$o),e(lr,ot),g(r5,ot,null),e(ot,E$o),e(ot,Qle),e(Qle,y$o),e(ot,w$o),e(ot,Rd),e(Rd,A$o),e(Rd,Hle),e(Hle,L$o),e(Rd,B$o),e(Rd,Ule),e(Ule,x$o),e(Rd,k$o),e(ot,R$o),e(ot,Jle),e(Jle,S$o),e(ot,P$o),g(t5,ot,null),e(lr,$$o),e(lr,Ue),g(a5,Ue,null),e(Ue,I$o),e(Ue,Yle),e(Yle,j$o),e(Ue,D$o),e(Ue,on),e(on,N$o),e(on,Kle),e(Kle,q$o),e(on,O$o),e(on,Zle),e(Zle,G$o),e(on,X$o),e(on,eie),e(eie,V$o),e(on,z$o),e(Ue,W$o),e(Ue,pe),e(pe,Hv),e(Hv,oie),e(oie,Q$o),e(Hv,H$o),e(Hv,mN),e(mN,U$o),e(Hv,J$o),e(pe,Y$o),e(pe,Uv),e(Uv,rie),e(rie,K$o),e(Uv,Z$o),e(Uv,gN),e(gN,eIo),e(Uv,oIo),e(pe,rIo),e(pe,qs),e(qs,tie),e(tie,tIo),e(qs,aIo),e(qs,hN),e(hN,nIo),e(qs,sIo),e(qs,pN),e(pN,lIo),e(qs,iIo),e(pe,dIo),e(pe,Jv),e(Jv,aie),e(aie,cIo),e(Jv,fIo),e(Jv,_N),e(_N,mIo),e(Jv,gIo),e(pe,hIo),e(pe,ma),e(ma,nie),e(nie,pIo),e(ma,_Io),e(ma,uN),e(uN,uIo),e(ma,bIo),e(ma,bN),e(bN,vIo),e(ma,TIo),e(ma,vN),e(vN,FIo),e(ma,CIo),e(pe,MIo),e(pe,Yv),e(Yv,sie),e(sie,EIo),e(Yv,yIo),e(Yv,TN),e(TN,wIo),e(Yv,AIo),e(pe,LIo),e(pe,Kv),e(Kv,lie),e(lie,BIo),e(Kv,xIo),e(Kv,FN),e(FN,kIo),e(Kv,RIo),e(pe,SIo),e(pe,Zv),e(Zv,iie),e(iie,PIo),e(Zv,$Io),e(Zv,CN),e(CN,IIo),e(Zv,jIo),e(pe,DIo),e(pe,e6),e(e6,die),e(die,NIo),e(e6,qIo),e(e6,MN),e(MN,OIo),e(e6,GIo),e(pe,XIo),e(pe,o6),e(o6,cie),e(cie,VIo),e(o6,zIo),e(o6,EN),e(EN,WIo),e(o6,QIo),e(Ue,HIo),e(Ue,r6),e(r6,UIo),e(r6,fie),e(fie,JIo),e(r6,YIo),e(r6,mie),e(mie,KIo),e(Ue,ZIo),e(Ue,gie),e(gie,ejo),e(Ue,ojo),g(n5,Ue,null),b(c,oke,u),b(c,Sd,u),e(Sd,t6),e(t6,hie),g(s5,hie,null),e(Sd,rjo),e(Sd,pie),e(pie,tjo),b(c,rke,u),b(c,ir,u),g(l5,ir,null),e(ir,ajo),e(ir,Pd),e(Pd,njo),e(Pd,_ie),e(_ie,sjo),e(Pd,ljo),e(Pd,uie),e(uie,ijo),e(Pd,djo),e(ir,cjo),e(ir,i5),e(i5,fjo),e(i5,bie),e(bie,mjo),e(i5,gjo),e(ir,hjo),e(ir,rt),g(d5,rt,null),e(rt,pjo),e(rt,vie),e(vie,_jo),e(rt,ujo),e(rt,$d),e($d,bjo),e($d,Tie),e(Tie,vjo),e($d,Tjo),e($d,Fie),e(Fie,Fjo),e($d,Cjo),e(rt,Mjo),e(rt,Cie),e(Cie,Ejo),e(rt,yjo),g(c5,rt,null),e(ir,wjo),e(ir,Je),g(f5,Je,null),e(Je,Ajo),e(Je,Mie),e(Mie,Ljo),e(Je,Bjo),e(Je,rn),e(rn,xjo),e(rn,Eie),e(Eie,kjo),e(rn,Rjo),e(rn,yie),e(yie,Sjo),e(rn,Pjo),e(rn,wie),e(wie,$jo),e(rn,Ijo),e(Je,jjo),e(Je,Aie),e(Aie,a6),e(a6,Lie),e(Lie,Djo),e(a6,Njo),e(a6,yN),e(yN,qjo),e(a6,Ojo),e(Je,Gjo),e(Je,n6),e(n6,Xjo),e(n6,Bie),e(Bie,Vjo),e(n6,zjo),e(n6,xie),e(xie,Wjo),e(Je,Qjo),e(Je,kie),e(kie,Hjo),e(Je,Ujo),g(m5,Je,null),b(c,tke,u),b(c,Id,u),e(Id,s6),e(s6,Rie),g(g5,Rie,null),e(Id,Jjo),e(Id,Sie),e(Sie,Yjo),b(c,ake,u),b(c,dr,u),g(h5,dr,null),e(dr,Kjo),e(dr,jd),e(jd,Zjo),e(jd,Pie),e(Pie,eDo),e(jd,oDo),e(jd,$ie),e($ie,rDo),e(jd,tDo),e(dr,aDo),e(dr,p5),e(p5,nDo),e(p5,Iie),e(Iie,sDo),e(p5,lDo),e(dr,iDo),e(dr,tt),g(_5,tt,null),e(tt,dDo),e(tt,jie),e(jie,cDo),e(tt,fDo),e(tt,Dd),e(Dd,mDo),e(Dd,Die),e(Die,gDo),e(Dd,hDo),e(Dd,Nie),e(Nie,pDo),e(Dd,_Do),e(tt,uDo),e(tt,qie),e(qie,bDo),e(tt,vDo),g(u5,tt,null),e(dr,TDo),e(dr,Ye),g(b5,Ye,null),e(Ye,FDo),e(Ye,Oie),e(Oie,CDo),e(Ye,MDo),e(Ye,tn),e(tn,EDo),e(tn,Gie),e(Gie,yDo),e(tn,wDo),e(tn,Xie),e(Xie,ADo),e(tn,LDo),e(tn,Vie),e(Vie,BDo),e(tn,xDo),e(Ye,kDo),e(Ye,ke),e(ke,l6),e(l6,zie),e(zie,RDo),e(l6,SDo),e(l6,wN),e(wN,PDo),e(l6,$Do),e(ke,IDo),e(ke,i6),e(i6,Wie),e(Wie,jDo),e(i6,DDo),e(i6,AN),e(AN,NDo),e(i6,qDo),e(ke,ODo),e(ke,d6),e(d6,Qie),e(Qie,GDo),e(d6,XDo),e(d6,LN),e(LN,VDo),e(d6,zDo),e(ke,WDo),e(ke,c6),e(c6,Hie),e(Hie,QDo),e(c6,HDo),e(c6,BN),e(BN,UDo),e(c6,JDo),e(ke,YDo),e(ke,f6),e(f6,Uie),e(Uie,KDo),e(f6,ZDo),e(f6,xN),e(xN,eNo),e(f6,oNo),e(ke,rNo),e(ke,m6),e(m6,Jie),e(Jie,tNo),e(m6,aNo),e(m6,kN),e(kN,nNo),e(m6,sNo),e(ke,lNo),e(ke,g6),e(g6,Yie),e(Yie,iNo),e(g6,dNo),e(g6,RN),e(RN,cNo),e(g6,fNo),e(ke,mNo),e(ke,h6),e(h6,Kie),e(Kie,gNo),e(h6,hNo),e(h6,SN),e(SN,pNo),e(h6,_No),e(Ye,uNo),e(Ye,p6),e(p6,bNo),e(p6,Zie),e(Zie,vNo),e(p6,TNo),e(p6,ede),e(ede,FNo),e(Ye,CNo),e(Ye,ode),e(ode,MNo),e(Ye,ENo),g(v5,Ye,null),b(c,nke,u),b(c,Nd,u),e(Nd,_6),e(_6,rde),g(T5,rde,null),e(Nd,yNo),e(Nd,tde),e(tde,wNo),b(c,ske,u),b(c,cr,u),g(F5,cr,null),e(cr,ANo),e(cr,qd),e(qd,LNo),e(qd,ade),e(ade,BNo),e(qd,xNo),e(qd,nde),e(nde,kNo),e(qd,RNo),e(cr,SNo),e(cr,C5),e(C5,PNo),e(C5,sde),e(sde,$No),e(C5,INo),e(cr,jNo),e(cr,at),g(M5,at,null),e(at,DNo),e(at,lde),e(lde,NNo),e(at,qNo),e(at,Od),e(Od,ONo),e(Od,ide),e(ide,GNo),e(Od,XNo),e(Od,dde),e(dde,VNo),e(Od,zNo),e(at,WNo),e(at,cde),e(cde,QNo),e(at,HNo),g(E5,at,null),e(cr,UNo),e(cr,Ke),g(y5,Ke,null),e(Ke,JNo),e(Ke,fde),e(fde,YNo),e(Ke,KNo),e(Ke,an),e(an,ZNo),e(an,mde),e(mde,eqo),e(an,oqo),e(an,gde),e(gde,rqo),e(an,tqo),e(an,hde),e(hde,aqo),e(an,nqo),e(Ke,sqo),e(Ke,nn),e(nn,u6),e(u6,pde),e(pde,lqo),e(u6,iqo),e(u6,PN),e(PN,dqo),e(u6,cqo),e(nn,fqo),e(nn,b6),e(b6,_de),e(_de,mqo),e(b6,gqo),e(b6,$N),e($N,hqo),e(b6,pqo),e(nn,_qo),e(nn,v6),e(v6,ude),e(ude,uqo),e(v6,bqo),e(v6,IN),e(IN,vqo),e(v6,Tqo),e(nn,Fqo),e(nn,T6),e(T6,bde),e(bde,Cqo),e(T6,Mqo),e(T6,jN),e(jN,Eqo),e(T6,yqo),e(Ke,wqo),e(Ke,F6),e(F6,Aqo),e(F6,vde),e(vde,Lqo),e(F6,Bqo),e(F6,Tde),e(Tde,xqo),e(Ke,kqo),e(Ke,Fde),e(Fde,Rqo),e(Ke,Sqo),g(w5,Ke,null),b(c,lke,u),b(c,Gd,u),e(Gd,C6),e(C6,Cde),g(A5,Cde,null),e(Gd,Pqo),e(Gd,Mde),e(Mde,$qo),b(c,ike,u),b(c,fr,u),g(L5,fr,null),e(fr,Iqo),e(fr,Xd),e(Xd,jqo),e(Xd,Ede),e(Ede,Dqo),e(Xd,Nqo),e(Xd,yde),e(yde,qqo),e(Xd,Oqo),e(fr,Gqo),e(fr,B5),e(B5,Xqo),e(B5,wde),e(wde,Vqo),e(B5,zqo),e(fr,Wqo),e(fr,nt),g(x5,nt,null),e(nt,Qqo),e(nt,Ade),e(Ade,Hqo),e(nt,Uqo),e(nt,Vd),e(Vd,Jqo),e(Vd,Lde),e(Lde,Yqo),e(Vd,Kqo),e(Vd,Bde),e(Bde,Zqo),e(Vd,eOo),e(nt,oOo),e(nt,xde),e(xde,rOo),e(nt,tOo),g(k5,nt,null),e(fr,aOo),e(fr,Ze),g(R5,Ze,null),e(Ze,nOo),e(Ze,kde),e(kde,sOo),e(Ze,lOo),e(Ze,sn),e(sn,iOo),e(sn,Rde),e(Rde,dOo),e(sn,cOo),e(sn,Sde),e(Sde,fOo),e(sn,mOo),e(sn,Pde),e(Pde,gOo),e(sn,hOo),e(Ze,pOo),e(Ze,Re),e(Re,M6),e(M6,$de),e($de,_Oo),e(M6,uOo),e(M6,DN),e(DN,bOo),e(M6,vOo),e(Re,TOo),e(Re,E6),e(E6,Ide),e(Ide,FOo),e(E6,COo),e(E6,NN),e(NN,MOo),e(E6,EOo),e(Re,yOo),e(Re,y6),e(y6,jde),e(jde,wOo),e(y6,AOo),e(y6,qN),e(qN,LOo),e(y6,BOo),e(Re,xOo),e(Re,w6),e(w6,Dde),e(Dde,kOo),e(w6,ROo),e(w6,ON),e(ON,SOo),e(w6,POo),e(Re,$Oo),e(Re,A6),e(A6,Nde),e(Nde,IOo),e(A6,jOo),e(A6,GN),e(GN,DOo),e(A6,NOo),e(Re,qOo),e(Re,L6),e(L6,qde),e(qde,OOo),e(L6,GOo),e(L6,XN),e(XN,XOo),e(L6,VOo),e(Re,zOo),e(Re,B6),e(B6,Ode),e(Ode,WOo),e(B6,QOo),e(B6,VN),e(VN,HOo),e(B6,UOo),e(Re,JOo),e(Re,x6),e(x6,Gde),e(Gde,YOo),e(x6,KOo),e(x6,zN),e(zN,ZOo),e(x6,eGo),e(Ze,oGo),e(Ze,k6),e(k6,rGo),e(k6,Xde),e(Xde,tGo),e(k6,aGo),e(k6,Vde),e(Vde,nGo),e(Ze,sGo),e(Ze,zde),e(zde,lGo),e(Ze,iGo),g(S5,Ze,null),b(c,dke,u),b(c,zd,u),e(zd,R6),e(R6,Wde),g(P5,Wde,null),e(zd,dGo),e(zd,Qde),e(Qde,cGo),b(c,cke,u),b(c,mr,u),g($5,mr,null),e(mr,fGo),e(mr,Wd),e(Wd,mGo),e(Wd,Hde),e(Hde,gGo),e(Wd,hGo),e(Wd,Ude),e(Ude,pGo),e(Wd,_Go),e(mr,uGo),e(mr,I5),e(I5,bGo),e(I5,Jde),e(Jde,vGo),e(I5,TGo),e(mr,FGo),e(mr,st),g(j5,st,null),e(st,CGo),e(st,Yde),e(Yde,MGo),e(st,EGo),e(st,Qd),e(Qd,yGo),e(Qd,Kde),e(Kde,wGo),e(Qd,AGo),e(Qd,Zde),e(Zde,LGo),e(Qd,BGo),e(st,xGo),e(st,ece),e(ece,kGo),e(st,RGo),g(D5,st,null),e(mr,SGo),e(mr,eo),g(N5,eo,null),e(eo,PGo),e(eo,oce),e(oce,$Go),e(eo,IGo),e(eo,ln),e(ln,jGo),e(ln,rce),e(rce,DGo),e(ln,NGo),e(ln,tce),e(tce,qGo),e(ln,OGo),e(ln,ace),e(ace,GGo),e(ln,XGo),e(eo,VGo),e(eo,q5),e(q5,S6),e(S6,nce),e(nce,zGo),e(S6,WGo),e(S6,WN),e(WN,QGo),e(S6,HGo),e(q5,UGo),e(q5,P6),e(P6,sce),e(sce,JGo),e(P6,YGo),e(P6,QN),e(QN,KGo),e(P6,ZGo),e(eo,eXo),e(eo,$6),e($6,oXo),e($6,lce),e(lce,rXo),e($6,tXo),e($6,ice),e(ice,aXo),e(eo,nXo),e(eo,dce),e(dce,sXo),e(eo,lXo),g(O5,eo,null),b(c,fke,u),b(c,Hd,u),e(Hd,I6),e(I6,cce),g(G5,cce,null),e(Hd,iXo),e(Hd,fce),e(fce,dXo),b(c,mke,u),b(c,gr,u),g(X5,gr,null),e(gr,cXo),e(gr,Ud),e(Ud,fXo),e(Ud,mce),e(mce,mXo),e(Ud,gXo),e(Ud,gce),e(gce,hXo),e(Ud,pXo),e(gr,_Xo),e(gr,V5),e(V5,uXo),e(V5,hce),e(hce,bXo),e(V5,vXo),e(gr,TXo),e(gr,lt),g(z5,lt,null),e(lt,FXo),e(lt,pce),e(pce,CXo),e(lt,MXo),e(lt,Jd),e(Jd,EXo),e(Jd,_ce),e(_ce,yXo),e(Jd,wXo),e(Jd,uce),e(uce,AXo),e(Jd,LXo),e(lt,BXo),e(lt,bce),e(bce,xXo),e(lt,kXo),g(W5,lt,null),e(gr,RXo),e(gr,oo),g(Q5,oo,null),e(oo,SXo),e(oo,vce),e(vce,PXo),e(oo,$Xo),e(oo,dn),e(dn,IXo),e(dn,Tce),e(Tce,jXo),e(dn,DXo),e(dn,Fce),e(Fce,NXo),e(dn,qXo),e(dn,Cce),e(Cce,OXo),e(dn,GXo),e(oo,XXo),e(oo,cn),e(cn,j6),e(j6,Mce),e(Mce,VXo),e(j6,zXo),e(j6,HN),e(HN,WXo),e(j6,QXo),e(cn,HXo),e(cn,D6),e(D6,Ece),e(Ece,UXo),e(D6,JXo),e(D6,UN),e(UN,YXo),e(D6,KXo),e(cn,ZXo),e(cn,N6),e(N6,yce),e(yce,eVo),e(N6,oVo),e(N6,JN),e(JN,rVo),e(N6,tVo),e(cn,aVo),e(cn,q6),e(q6,wce),e(wce,nVo),e(q6,sVo),e(q6,YN),e(YN,lVo),e(q6,iVo),e(oo,dVo),e(oo,O6),e(O6,cVo),e(O6,Ace),e(Ace,fVo),e(O6,mVo),e(O6,Lce),e(Lce,gVo),e(oo,hVo),e(oo,Bce),e(Bce,pVo),e(oo,_Vo),g(H5,oo,null),b(c,gke,u),b(c,Yd,u),e(Yd,G6),e(G6,xce),g(U5,xce,null),e(Yd,uVo),e(Yd,kce),e(kce,bVo),b(c,hke,u),b(c,hr,u),g(J5,hr,null),e(hr,vVo),e(hr,Kd),e(Kd,TVo),e(Kd,Rce),e(Rce,FVo),e(Kd,CVo),e(Kd,Sce),e(Sce,MVo),e(Kd,EVo),e(hr,yVo),e(hr,Y5),e(Y5,wVo),e(Y5,Pce),e(Pce,AVo),e(Y5,LVo),e(hr,BVo),e(hr,it),g(K5,it,null),e(it,xVo),e(it,$ce),e($ce,kVo),e(it,RVo),e(it,Zd),e(Zd,SVo),e(Zd,Ice),e(Ice,PVo),e(Zd,$Vo),e(Zd,jce),e(jce,IVo),e(Zd,jVo),e(it,DVo),e(it,Dce),e(Dce,NVo),e(it,qVo),g(Z5,it,null),e(hr,OVo),e(hr,ro),g(ey,ro,null),e(ro,GVo),e(ro,Nce),e(Nce,XVo),e(ro,VVo),e(ro,fn),e(fn,zVo),e(fn,qce),e(qce,WVo),e(fn,QVo),e(fn,Oce),e(Oce,HVo),e(fn,UVo),e(fn,Gce),e(Gce,JVo),e(fn,YVo),e(ro,KVo),e(ro,ec),e(ec,X6),e(X6,Xce),e(Xce,ZVo),e(X6,ezo),e(X6,KN),e(KN,ozo),e(X6,rzo),e(ec,tzo),e(ec,V6),e(V6,Vce),e(Vce,azo),e(V6,nzo),e(V6,ZN),e(ZN,szo),e(V6,lzo),e(ec,izo),e(ec,z6),e(z6,zce),e(zce,dzo),e(z6,czo),e(z6,eq),e(eq,fzo),e(z6,mzo),e(ro,gzo),e(ro,W6),e(W6,hzo),e(W6,Wce),e(Wce,pzo),e(W6,_zo),e(W6,Qce),e(Qce,uzo),e(ro,bzo),e(ro,Hce),e(Hce,vzo),e(ro,Tzo),g(oy,ro,null),b(c,pke,u),b(c,oc,u),e(oc,Q6),e(Q6,Uce),g(ry,Uce,null),e(oc,Fzo),e(oc,Jce),e(Jce,Czo),b(c,_ke,u),b(c,pr,u),g(ty,pr,null),e(pr,Mzo),e(pr,rc),e(rc,Ezo),e(rc,Yce),e(Yce,yzo),e(rc,wzo),e(rc,Kce),e(Kce,Azo),e(rc,Lzo),e(pr,Bzo),e(pr,ay),e(ay,xzo),e(ay,Zce),e(Zce,kzo),e(ay,Rzo),e(pr,Szo),e(pr,dt),g(ny,dt,null),e(dt,Pzo),e(dt,efe),e(efe,$zo),e(dt,Izo),e(dt,tc),e(tc,jzo),e(tc,ofe),e(ofe,Dzo),e(tc,Nzo),e(tc,rfe),e(rfe,qzo),e(tc,Ozo),e(dt,Gzo),e(dt,tfe),e(tfe,Xzo),e(dt,Vzo),g(sy,dt,null),e(pr,zzo),e(pr,to),g(ly,to,null),e(to,Wzo),e(to,afe),e(afe,Qzo),e(to,Hzo),e(to,mn),e(mn,Uzo),e(mn,nfe),e(nfe,Jzo),e(mn,Yzo),e(mn,sfe),e(sfe,Kzo),e(mn,Zzo),e(mn,lfe),e(lfe,eWo),e(mn,oWo),e(to,rWo),e(to,ife),e(ife,H6),e(H6,dfe),e(dfe,tWo),e(H6,aWo),e(H6,oq),e(oq,nWo),e(H6,sWo),e(to,lWo),e(to,U6),e(U6,iWo),e(U6,cfe),e(cfe,dWo),e(U6,cWo),e(U6,ffe),e(ffe,fWo),e(to,mWo),e(to,mfe),e(mfe,gWo),e(to,hWo),g(iy,to,null),b(c,uke,u),b(c,ac,u),e(ac,J6),e(J6,gfe),g(dy,gfe,null),e(ac,pWo),e(ac,hfe),e(hfe,_Wo),b(c,bke,u),b(c,_r,u),g(cy,_r,null),e(_r,uWo),e(_r,nc),e(nc,bWo),e(nc,pfe),e(pfe,vWo),e(nc,TWo),e(nc,_fe),e(_fe,FWo),e(nc,CWo),e(_r,MWo),e(_r,fy),e(fy,EWo),e(fy,ufe),e(ufe,yWo),e(fy,wWo),e(_r,AWo),e(_r,ct),g(my,ct,null),e(ct,LWo),e(ct,bfe),e(bfe,BWo),e(ct,xWo),e(ct,sc),e(sc,kWo),e(sc,vfe),e(vfe,RWo),e(sc,SWo),e(sc,Tfe),e(Tfe,PWo),e(sc,$Wo),e(ct,IWo),e(ct,Ffe),e(Ffe,jWo),e(ct,DWo),g(gy,ct,null),e(_r,NWo),e(_r,ao),g(hy,ao,null),e(ao,qWo),e(ao,Cfe),e(Cfe,OWo),e(ao,GWo),e(ao,gn),e(gn,XWo),e(gn,Mfe),e(Mfe,VWo),e(gn,zWo),e(gn,Efe),e(Efe,WWo),e(gn,QWo),e(gn,yfe),e(yfe,HWo),e(gn,UWo),e(ao,JWo),e(ao,wfe),e(wfe,Y6),e(Y6,Afe),e(Afe,YWo),e(Y6,KWo),e(Y6,rq),e(rq,ZWo),e(Y6,eQo),e(ao,oQo),e(ao,K6),e(K6,rQo),e(K6,Lfe),e(Lfe,tQo),e(K6,aQo),e(K6,Bfe),e(Bfe,nQo),e(ao,sQo),e(ao,xfe),e(xfe,lQo),e(ao,iQo),g(py,ao,null),b(c,vke,u),b(c,lc,u),e(lc,Z6),e(Z6,kfe),g(_y,kfe,null),e(lc,dQo),e(lc,Rfe),e(Rfe,cQo),b(c,Tke,u),b(c,ur,u),g(uy,ur,null),e(ur,fQo),e(ur,ic),e(ic,mQo),e(ic,Sfe),e(Sfe,gQo),e(ic,hQo),e(ic,Pfe),e(Pfe,pQo),e(ic,_Qo),e(ur,uQo),e(ur,by),e(by,bQo),e(by,$fe),e($fe,vQo),e(by,TQo),e(ur,FQo),e(ur,ft),g(vy,ft,null),e(ft,CQo),e(ft,Ife),e(Ife,MQo),e(ft,EQo),e(ft,dc),e(dc,yQo),e(dc,jfe),e(jfe,wQo),e(dc,AQo),e(dc,Dfe),e(Dfe,LQo),e(dc,BQo),e(ft,xQo),e(ft,Nfe),e(Nfe,kQo),e(ft,RQo),g(Ty,ft,null),e(ur,SQo),e(ur,no),g(Fy,no,null),e(no,PQo),e(no,qfe),e(qfe,$Qo),e(no,IQo),e(no,hn),e(hn,jQo),e(hn,Ofe),e(Ofe,DQo),e(hn,NQo),e(hn,Gfe),e(Gfe,qQo),e(hn,OQo),e(hn,Xfe),e(Xfe,GQo),e(hn,XQo),e(no,VQo),e(no,Cy),e(Cy,e0),e(e0,Vfe),e(Vfe,zQo),e(e0,WQo),e(e0,tq),e(tq,QQo),e(e0,HQo),e(Cy,UQo),e(Cy,o0),e(o0,zfe),e(zfe,JQo),e(o0,YQo),e(o0,aq),e(aq,KQo),e(o0,ZQo),e(no,eHo),e(no,r0),e(r0,oHo),e(r0,Wfe),e(Wfe,rHo),e(r0,tHo),e(r0,Qfe),e(Qfe,aHo),e(no,nHo),e(no,Hfe),e(Hfe,sHo),e(no,lHo),g(My,no,null),b(c,Fke,u),b(c,cc,u),e(cc,t0),e(t0,Ufe),g(Ey,Ufe,null),e(cc,iHo),e(cc,Jfe),e(Jfe,dHo),b(c,Cke,u),b(c,br,u),g(yy,br,null),e(br,cHo),e(br,fc),e(fc,fHo),e(fc,Yfe),e(Yfe,mHo),e(fc,gHo),e(fc,Kfe),e(Kfe,hHo),e(fc,pHo),e(br,_Ho),e(br,wy),e(wy,uHo),e(wy,Zfe),e(Zfe,bHo),e(wy,vHo),e(br,THo),e(br,mt),g(Ay,mt,null),e(mt,FHo),e(mt,eme),e(eme,CHo),e(mt,MHo),e(mt,mc),e(mc,EHo),e(mc,ome),e(ome,yHo),e(mc,wHo),e(mc,rme),e(rme,AHo),e(mc,LHo),e(mt,BHo),e(mt,tme),e(tme,xHo),e(mt,kHo),g(Ly,mt,null),e(br,RHo),e(br,so),g(By,so,null),e(so,SHo),e(so,ame),e(ame,PHo),e(so,$Ho),e(so,pn),e(pn,IHo),e(pn,nme),e(nme,jHo),e(pn,DHo),e(pn,sme),e(sme,NHo),e(pn,qHo),e(pn,lme),e(lme,OHo),e(pn,GHo),e(so,XHo),e(so,ime),e(ime,a0),e(a0,dme),e(dme,VHo),e(a0,zHo),e(a0,nq),e(nq,WHo),e(a0,QHo),e(so,HHo),e(so,n0),e(n0,UHo),e(n0,cme),e(cme,JHo),e(n0,YHo),e(n0,fme),e(fme,KHo),e(so,ZHo),e(so,mme),e(mme,eUo),e(so,oUo),g(xy,so,null),b(c,Mke,u),b(c,gc,u),e(gc,s0),e(s0,gme),g(ky,gme,null),e(gc,rUo),e(gc,hme),e(hme,tUo),b(c,Eke,u),b(c,vr,u),g(Ry,vr,null),e(vr,aUo),e(vr,hc),e(hc,nUo),e(hc,pme),e(pme,sUo),e(hc,lUo),e(hc,_me),e(_me,iUo),e(hc,dUo),e(vr,cUo),e(vr,Sy),e(Sy,fUo),e(Sy,ume),e(ume,mUo),e(Sy,gUo),e(vr,hUo),e(vr,gt),g(Py,gt,null),e(gt,pUo),e(gt,bme),e(bme,_Uo),e(gt,uUo),e(gt,pc),e(pc,bUo),e(pc,vme),e(vme,vUo),e(pc,TUo),e(pc,Tme),e(Tme,FUo),e(pc,CUo),e(gt,MUo),e(gt,Fme),e(Fme,EUo),e(gt,yUo),g($y,gt,null),e(vr,wUo),e(vr,ho),g(Iy,ho,null),e(ho,AUo),e(ho,Cme),e(Cme,LUo),e(ho,BUo),e(ho,_n),e(_n,xUo),e(_n,Mme),e(Mme,kUo),e(_n,RUo),e(_n,Eme),e(Eme,SUo),e(_n,PUo),e(_n,yme),e(yme,$Uo),e(_n,IUo),e(ho,jUo),e(ho,B),e(B,l0),e(l0,wme),e(wme,DUo),e(l0,NUo),e(l0,sq),e(sq,qUo),e(l0,OUo),e(B,GUo),e(B,i0),e(i0,Ame),e(Ame,XUo),e(i0,VUo),e(i0,lq),e(lq,zUo),e(i0,WUo),e(B,QUo),e(B,d0),e(d0,Lme),e(Lme,HUo),e(d0,UUo),e(d0,iq),e(iq,JUo),e(d0,YUo),e(B,KUo),e(B,c0),e(c0,Bme),e(Bme,ZUo),e(c0,eJo),e(c0,dq),e(dq,oJo),e(c0,rJo),e(B,tJo),e(B,f0),e(f0,xme),e(xme,aJo),e(f0,nJo),e(f0,cq),e(cq,sJo),e(f0,lJo),e(B,iJo),e(B,m0),e(m0,kme),e(kme,dJo),e(m0,cJo),e(m0,fq),e(fq,fJo),e(m0,mJo),e(B,gJo),e(B,g0),e(g0,Rme),e(Rme,hJo),e(g0,pJo),e(g0,mq),e(mq,_Jo),e(g0,uJo),e(B,bJo),e(B,h0),e(h0,Sme),e(Sme,vJo),e(h0,TJo),e(h0,gq),e(gq,FJo),e(h0,CJo),e(B,MJo),e(B,p0),e(p0,Pme),e(Pme,EJo),e(p0,yJo),e(p0,hq),e(hq,wJo),e(p0,AJo),e(B,LJo),e(B,_0),e(_0,$me),e($me,BJo),e(_0,xJo),e(_0,pq),e(pq,kJo),e(_0,RJo),e(B,SJo),e(B,u0),e(u0,Ime),e(Ime,PJo),e(u0,$Jo),e(u0,_q),e(_q,IJo),e(u0,jJo),e(B,DJo),e(B,b0),e(b0,jme),e(jme,NJo),e(b0,qJo),e(b0,uq),e(uq,OJo),e(b0,GJo),e(B,XJo),e(B,v0),e(v0,Dme),e(Dme,VJo),e(v0,zJo),e(v0,bq),e(bq,WJo),e(v0,QJo),e(B,HJo),e(B,T0),e(T0,Nme),e(Nme,UJo),e(T0,JJo),e(T0,vq),e(vq,YJo),e(T0,KJo),e(B,ZJo),e(B,F0),e(F0,qme),e(qme,eYo),e(F0,oYo),e(F0,Tq),e(Tq,rYo),e(F0,tYo),e(B,aYo),e(B,C0),e(C0,Ome),e(Ome,nYo),e(C0,sYo),e(C0,Fq),e(Fq,lYo),e(C0,iYo),e(B,dYo),e(B,Os),e(Os,Gme),e(Gme,cYo),e(Os,fYo),e(Os,Cq),e(Cq,mYo),e(Os,gYo),e(Os,Mq),e(Mq,hYo),e(Os,pYo),e(B,_Yo),e(B,M0),e(M0,Xme),e(Xme,uYo),e(M0,bYo),e(M0,Eq),e(Eq,vYo),e(M0,TYo),e(B,FYo),e(B,E0),e(E0,Vme),e(Vme,CYo),e(E0,MYo),e(E0,yq),e(yq,EYo),e(E0,yYo),e(B,wYo),e(B,y0),e(y0,zme),e(zme,AYo),e(y0,LYo),e(y0,wq),e(wq,BYo),e(y0,xYo),e(B,kYo),e(B,w0),e(w0,Wme),e(Wme,RYo),e(w0,SYo),e(w0,Aq),e(Aq,PYo),e(w0,$Yo),e(B,IYo),e(B,A0),e(A0,Qme),e(Qme,jYo),e(A0,DYo),e(A0,Lq),e(Lq,NYo),e(A0,qYo),e(B,OYo),e(B,L0),e(L0,Hme),e(Hme,GYo),e(L0,XYo),e(L0,Bq),e(Bq,VYo),e(L0,zYo),e(B,WYo),e(B,B0),e(B0,Ume),e(Ume,QYo),e(B0,HYo),e(B0,xq),e(xq,UYo),e(B0,JYo),e(B,YYo),e(B,x0),e(x0,Jme),e(Jme,KYo),e(x0,ZYo),e(x0,kq),e(kq,eKo),e(x0,oKo),e(B,rKo),e(B,k0),e(k0,Yme),e(Yme,tKo),e(k0,aKo),e(k0,Rq),e(Rq,nKo),e(k0,sKo),e(B,lKo),e(B,R0),e(R0,Kme),e(Kme,iKo),e(R0,dKo),e(R0,Sq),e(Sq,cKo),e(R0,fKo),e(B,mKo),e(B,S0),e(S0,Zme),e(Zme,gKo),e(S0,hKo),e(S0,Pq),e(Pq,pKo),e(S0,_Ko),e(B,uKo),e(B,P0),e(P0,ege),e(ege,bKo),e(P0,vKo),e(P0,$q),e($q,TKo),e(P0,FKo),e(B,CKo),e(B,$0),e($0,oge),e(oge,MKo),e($0,EKo),e($0,Iq),e(Iq,yKo),e($0,wKo),e(B,AKo),e(B,I0),e(I0,rge),e(rge,LKo),e(I0,BKo),e(I0,jq),e(jq,xKo),e(I0,kKo),e(B,RKo),e(B,j0),e(j0,tge),e(tge,SKo),e(j0,PKo),e(j0,Dq),e(Dq,$Ko),e(j0,IKo),e(B,jKo),e(B,D0),e(D0,age),e(age,DKo),e(D0,NKo),e(D0,Nq),e(Nq,qKo),e(D0,OKo),e(B,GKo),e(B,N0),e(N0,nge),e(nge,XKo),e(N0,VKo),e(N0,qq),e(qq,zKo),e(N0,WKo),e(B,QKo),e(B,q0),e(q0,sge),e(sge,HKo),e(q0,UKo),e(q0,Oq),e(Oq,JKo),e(q0,YKo),e(B,KKo),e(B,O0),e(O0,lge),e(lge,ZKo),e(O0,eZo),e(O0,Gq),e(Gq,oZo),e(O0,rZo),e(B,tZo),e(B,G0),e(G0,ige),e(ige,aZo),e(G0,nZo),e(G0,Xq),e(Xq,sZo),e(G0,lZo),e(B,iZo),e(B,X0),e(X0,dge),e(dge,dZo),e(X0,cZo),e(X0,Vq),e(Vq,fZo),e(X0,mZo),e(B,gZo),e(B,V0),e(V0,cge),e(cge,hZo),e(V0,pZo),e(V0,zq),e(zq,_Zo),e(V0,uZo),e(B,bZo),e(B,z0),e(z0,fge),e(fge,vZo),e(z0,TZo),e(z0,Wq),e(Wq,FZo),e(z0,CZo),e(B,MZo),e(B,W0),e(W0,mge),e(mge,EZo),e(W0,yZo),e(W0,Qq),e(Qq,wZo),e(W0,AZo),e(B,LZo),e(B,Q0),e(Q0,gge),e(gge,BZo),e(Q0,xZo),e(Q0,Hq),e(Hq,kZo),e(Q0,RZo),e(ho,SZo),e(ho,hge),e(hge,PZo),e(ho,$Zo),g(jy,ho,null),b(c,yke,u),b(c,_c,u),e(_c,H0),e(H0,pge),g(Dy,pge,null),e(_c,IZo),e(_c,_ge),e(_ge,jZo),b(c,wke,u),b(c,Tr,u),g(Ny,Tr,null),e(Tr,DZo),e(Tr,uc),e(uc,NZo),e(uc,uge),e(uge,qZo),e(uc,OZo),e(uc,bge),e(bge,GZo),e(uc,XZo),e(Tr,VZo),e(Tr,qy),e(qy,zZo),e(qy,vge),e(vge,WZo),e(qy,QZo),e(Tr,HZo),e(Tr,ht),g(Oy,ht,null),e(ht,UZo),e(ht,Tge),e(Tge,JZo),e(ht,YZo),e(ht,bc),e(bc,KZo),e(bc,Fge),e(Fge,ZZo),e(bc,eer),e(bc,Cge),e(Cge,oer),e(bc,rer),e(ht,ter),e(ht,Mge),e(Mge,aer),e(ht,ner),g(Gy,ht,null),e(Tr,ser),e(Tr,po),g(Xy,po,null),e(po,ler),e(po,Ege),e(Ege,ier),e(po,der),e(po,un),e(un,cer),e(un,yge),e(yge,fer),e(un,mer),e(un,wge),e(wge,ger),e(un,her),e(un,Age),e(Age,per),e(un,_er),e(po,uer),e(po,H),e(H,U0),e(U0,Lge),e(Lge,ber),e(U0,ver),e(U0,Uq),e(Uq,Ter),e(U0,Fer),e(H,Cer),e(H,J0),e(J0,Bge),e(Bge,Mer),e(J0,Eer),e(J0,Jq),e(Jq,yer),e(J0,wer),e(H,Aer),e(H,Y0),e(Y0,xge),e(xge,Ler),e(Y0,Ber),e(Y0,Yq),e(Yq,xer),e(Y0,ker),e(H,Rer),e(H,K0),e(K0,kge),e(kge,Ser),e(K0,Per),e(K0,Kq),e(Kq,$er),e(K0,Ier),e(H,jer),e(H,Z0),e(Z0,Rge),e(Rge,Der),e(Z0,Ner),e(Z0,Zq),e(Zq,qer),e(Z0,Oer),e(H,Ger),e(H,eT),e(eT,Sge),e(Sge,Xer),e(eT,Ver),e(eT,eO),e(eO,zer),e(eT,Wer),e(H,Qer),e(H,oT),e(oT,Pge),e(Pge,Her),e(oT,Uer),e(oT,oO),e(oO,Jer),e(oT,Yer),e(H,Ker),e(H,rT),e(rT,$ge),e($ge,Zer),e(rT,eor),e(rT,rO),e(rO,oor),e(rT,ror),e(H,tor),e(H,tT),e(tT,Ige),e(Ige,aor),e(tT,nor),e(tT,tO),e(tO,sor),e(tT,lor),e(H,ior),e(H,aT),e(aT,jge),e(jge,dor),e(aT,cor),e(aT,aO),e(aO,mor),e(aT,gor),e(H,hor),e(H,nT),e(nT,Dge),e(Dge,por),e(nT,_or),e(nT,nO),e(nO,uor),e(nT,bor),e(H,vor),e(H,sT),e(sT,Nge),e(Nge,Tor),e(sT,For),e(sT,sO),e(sO,Cor),e(sT,Mor),e(H,Eor),e(H,lT),e(lT,qge),e(qge,yor),e(lT,wor),e(lT,lO),e(lO,Aor),e(lT,Lor),e(H,Bor),e(H,iT),e(iT,Oge),e(Oge,xor),e(iT,kor),e(iT,iO),e(iO,Ror),e(iT,Sor),e(H,Por),e(H,dT),e(dT,Gge),e(Gge,$or),e(dT,Ior),e(dT,dO),e(dO,jor),e(dT,Dor),e(H,Nor),e(H,cT),e(cT,Xge),e(Xge,qor),e(cT,Oor),e(cT,cO),e(cO,Gor),e(cT,Xor),e(H,Vor),e(H,fT),e(fT,Vge),e(Vge,zor),e(fT,Wor),e(fT,fO),e(fO,Qor),e(fT,Hor),e(H,Uor),e(H,mT),e(mT,zge),e(zge,Jor),e(mT,Yor),e(mT,mO),e(mO,Kor),e(mT,Zor),e(H,err),e(H,gT),e(gT,Wge),e(Wge,orr),e(gT,rrr),e(gT,gO),e(gO,trr),e(gT,arr),e(H,nrr),e(H,hT),e(hT,Qge),e(Qge,srr),e(hT,lrr),e(hT,hO),e(hO,irr),e(hT,drr),e(H,crr),e(H,pT),e(pT,Hge),e(Hge,frr),e(pT,mrr),e(pT,pO),e(pO,grr),e(pT,hrr),e(H,prr),e(H,_T),e(_T,Uge),e(Uge,_rr),e(_T,urr),e(_T,_O),e(_O,brr),e(_T,vrr),e(po,Trr),e(po,Jge),e(Jge,Frr),e(po,Crr),g(Vy,po,null),b(c,Ake,u),b(c,vc,u),e(vc,uT),e(uT,Yge),g(zy,Yge,null),e(vc,Mrr),e(vc,Kge),e(Kge,Err),b(c,Lke,u),b(c,Fr,u),g(Wy,Fr,null),e(Fr,yrr),e(Fr,Tc),e(Tc,wrr),e(Tc,Zge),e(Zge,Arr),e(Tc,Lrr),e(Tc,ehe),e(ehe,Brr),e(Tc,xrr),e(Fr,krr),e(Fr,Qy),e(Qy,Rrr),e(Qy,ohe),e(ohe,Srr),e(Qy,Prr),e(Fr,$rr),e(Fr,pt),g(Hy,pt,null),e(pt,Irr),e(pt,rhe),e(rhe,jrr),e(pt,Drr),e(pt,Fc),e(Fc,Nrr),e(Fc,the),e(the,qrr),e(Fc,Orr),e(Fc,ahe),e(ahe,Grr),e(Fc,Xrr),e(pt,Vrr),e(pt,nhe),e(nhe,zrr),e(pt,Wrr),g(Uy,pt,null),e(Fr,Qrr),e(Fr,_o),g(Jy,_o,null),e(_o,Hrr),e(_o,she),e(she,Urr),e(_o,Jrr),e(_o,bn),e(bn,Yrr),e(bn,lhe),e(lhe,Krr),e(bn,Zrr),e(bn,ihe),e(ihe,etr),e(bn,otr),e(bn,dhe),e(dhe,rtr),e(bn,ttr),e(_o,atr),e(_o,_e),e(_e,bT),e(bT,che),e(che,ntr),e(bT,str),e(bT,uO),e(uO,ltr),e(bT,itr),e(_e,dtr),e(_e,vT),e(vT,fhe),e(fhe,ctr),e(vT,ftr),e(vT,bO),e(bO,mtr),e(vT,gtr),e(_e,htr),e(_e,TT),e(TT,mhe),e(mhe,ptr),e(TT,_tr),e(TT,vO),e(vO,utr),e(TT,btr),e(_e,vtr),e(_e,FT),e(FT,ghe),e(ghe,Ttr),e(FT,Ftr),e(FT,TO),e(TO,Ctr),e(FT,Mtr),e(_e,Etr),e(_e,CT),e(CT,hhe),e(hhe,ytr),e(CT,wtr),e(CT,FO),e(FO,Atr),e(CT,Ltr),e(_e,Btr),e(_e,MT),e(MT,phe),e(phe,xtr),e(MT,ktr),e(MT,CO),e(CO,Rtr),e(MT,Str),e(_e,Ptr),e(_e,ET),e(ET,_he),e(_he,$tr),e(ET,Itr),e(ET,MO),e(MO,jtr),e(ET,Dtr),e(_e,Ntr),e(_e,yT),e(yT,uhe),e(uhe,qtr),e(yT,Otr),e(yT,EO),e(EO,Gtr),e(yT,Xtr),e(_e,Vtr),e(_e,wT),e(wT,bhe),e(bhe,ztr),e(wT,Wtr),e(wT,yO),e(yO,Qtr),e(wT,Htr),e(_e,Utr),e(_e,AT),e(AT,vhe),e(vhe,Jtr),e(AT,Ytr),e(AT,wO),e(wO,Ktr),e(AT,Ztr),e(_o,ear),e(_o,The),e(The,oar),e(_o,rar),g(Yy,_o,null),b(c,Bke,u),b(c,Cc,u),e(Cc,LT),e(LT,Fhe),g(Ky,Fhe,null),e(Cc,tar),e(Cc,Che),e(Che,aar),b(c,xke,u),b(c,Cr,u),g(Zy,Cr,null),e(Cr,nar),e(Cr,Mc),e(Mc,sar),e(Mc,Mhe),e(Mhe,lar),e(Mc,iar),e(Mc,Ehe),e(Ehe,dar),e(Mc,car),e(Cr,far),e(Cr,ew),e(ew,mar),e(ew,yhe),e(yhe,gar),e(ew,har),e(Cr,par),e(Cr,_t),g(ow,_t,null),e(_t,_ar),e(_t,whe),e(whe,uar),e(_t,bar),e(_t,Ec),e(Ec,Tar),e(Ec,Ahe),e(Ahe,Far),e(Ec,Car),e(Ec,Lhe),e(Lhe,Mar),e(Ec,Ear),e(_t,yar),e(_t,Bhe),e(Bhe,war),e(_t,Aar),g(rw,_t,null),e(Cr,Lar),e(Cr,uo),g(tw,uo,null),e(uo,Bar),e(uo,xhe),e(xhe,xar),e(uo,kar),e(uo,vn),e(vn,Rar),e(vn,khe),e(khe,Sar),e(vn,Par),e(vn,Rhe),e(Rhe,$ar),e(vn,Iar),e(vn,She),e(She,jar),e(vn,Dar),e(uo,Nar),e(uo,aw),e(aw,BT),e(BT,Phe),e(Phe,qar),e(BT,Oar),e(BT,AO),e(AO,Gar),e(BT,Xar),e(aw,Var),e(aw,xT),e(xT,$he),e($he,zar),e(xT,War),e(xT,LO),e(LO,Qar),e(xT,Har),e(uo,Uar),e(uo,Ihe),e(Ihe,Jar),e(uo,Yar),g(nw,uo,null),b(c,kke,u),b(c,yc,u),e(yc,kT),e(kT,jhe),g(sw,jhe,null),e(yc,Kar),e(yc,Dhe),e(Dhe,Zar),b(c,Rke,u),b(c,Mr,u),g(lw,Mr,null),e(Mr,enr),e(Mr,wc),e(wc,onr),e(wc,Nhe),e(Nhe,rnr),e(wc,tnr),e(wc,qhe),e(qhe,anr),e(wc,nnr),e(Mr,snr),e(Mr,iw),e(iw,lnr),e(iw,Ohe),e(Ohe,inr),e(iw,dnr),e(Mr,cnr),e(Mr,ut),g(dw,ut,null),e(ut,fnr),e(ut,Ghe),e(Ghe,mnr),e(ut,gnr),e(ut,Ac),e(Ac,hnr),e(Ac,Xhe),e(Xhe,pnr),e(Ac,_nr),e(Ac,Vhe),e(Vhe,unr),e(Ac,bnr),e(ut,vnr),e(ut,zhe),e(zhe,Tnr),e(ut,Fnr),g(cw,ut,null),e(Mr,Cnr),e(Mr,bo),g(fw,bo,null),e(bo,Mnr),e(bo,Whe),e(Whe,Enr),e(bo,ynr),e(bo,Tn),e(Tn,wnr),e(Tn,Qhe),e(Qhe,Anr),e(Tn,Lnr),e(Tn,Hhe),e(Hhe,Bnr),e(Tn,xnr),e(Tn,Uhe),e(Uhe,knr),e(Tn,Rnr),e(bo,Snr),e(bo,Y),e(Y,RT),e(RT,Jhe),e(Jhe,Pnr),e(RT,$nr),e(RT,BO),e(BO,Inr),e(RT,jnr),e(Y,Dnr),e(Y,ST),e(ST,Yhe),e(Yhe,Nnr),e(ST,qnr),e(ST,xO),e(xO,Onr),e(ST,Gnr),e(Y,Xnr),e(Y,PT),e(PT,Khe),e(Khe,Vnr),e(PT,znr),e(PT,kO),e(kO,Wnr),e(PT,Qnr),e(Y,Hnr),e(Y,$T),e($T,Zhe),e(Zhe,Unr),e($T,Jnr),e($T,RO),e(RO,Ynr),e($T,Knr),e(Y,Znr),e(Y,IT),e(IT,epe),e(epe,esr),e(IT,osr),e(IT,SO),e(SO,rsr),e(IT,tsr),e(Y,asr),e(Y,jT),e(jT,ope),e(ope,nsr),e(jT,ssr),e(jT,PO),e(PO,lsr),e(jT,isr),e(Y,dsr),e(Y,DT),e(DT,rpe),e(rpe,csr),e(DT,fsr),e(DT,$O),e($O,msr),e(DT,gsr),e(Y,hsr),e(Y,NT),e(NT,tpe),e(tpe,psr),e(NT,_sr),e(NT,IO),e(IO,usr),e(NT,bsr),e(Y,vsr),e(Y,qT),e(qT,ape),e(ape,Tsr),e(qT,Fsr),e(qT,jO),e(jO,Csr),e(qT,Msr),e(Y,Esr),e(Y,OT),e(OT,npe),e(npe,ysr),e(OT,wsr),e(OT,DO),e(DO,Asr),e(OT,Lsr),e(Y,Bsr),e(Y,GT),e(GT,spe),e(spe,xsr),e(GT,ksr),e(GT,NO),e(NO,Rsr),e(GT,Ssr),e(Y,Psr),e(Y,XT),e(XT,lpe),e(lpe,$sr),e(XT,Isr),e(XT,qO),e(qO,jsr),e(XT,Dsr),e(Y,Nsr),e(Y,VT),e(VT,ipe),e(ipe,qsr),e(VT,Osr),e(VT,OO),e(OO,Gsr),e(VT,Xsr),e(Y,Vsr),e(Y,zT),e(zT,dpe),e(dpe,zsr),e(zT,Wsr),e(zT,GO),e(GO,Qsr),e(zT,Hsr),e(Y,Usr),e(Y,WT),e(WT,cpe),e(cpe,Jsr),e(WT,Ysr),e(WT,XO),e(XO,Ksr),e(WT,Zsr),e(Y,elr),e(Y,QT),e(QT,fpe),e(fpe,olr),e(QT,rlr),e(QT,VO),e(VO,tlr),e(QT,alr),e(Y,nlr),e(Y,HT),e(HT,mpe),e(mpe,slr),e(HT,llr),e(HT,zO),e(zO,ilr),e(HT,dlr),e(Y,clr),e(Y,UT),e(UT,gpe),e(gpe,flr),e(UT,mlr),e(UT,WO),e(WO,glr),e(UT,hlr),e(Y,plr),e(Y,JT),e(JT,hpe),e(hpe,_lr),e(JT,ulr),e(JT,QO),e(QO,blr),e(JT,vlr),e(Y,Tlr),e(Y,YT),e(YT,ppe),e(ppe,Flr),e(YT,Clr),e(YT,HO),e(HO,Mlr),e(YT,Elr),e(bo,ylr),e(bo,_pe),e(_pe,wlr),e(bo,Alr),g(mw,bo,null),b(c,Ske,u),b(c,Lc,u),e(Lc,KT),e(KT,upe),g(gw,upe,null),e(Lc,Llr),e(Lc,bpe),e(bpe,Blr),b(c,Pke,u),b(c,Er,u),g(hw,Er,null),e(Er,xlr),e(Er,Bc),e(Bc,klr),e(Bc,vpe),e(vpe,Rlr),e(Bc,Slr),e(Bc,Tpe),e(Tpe,Plr),e(Bc,$lr),e(Er,Ilr),e(Er,pw),e(pw,jlr),e(pw,Fpe),e(Fpe,Dlr),e(pw,Nlr),e(Er,qlr),e(Er,bt),g(_w,bt,null),e(bt,Olr),e(bt,Cpe),e(Cpe,Glr),e(bt,Xlr),e(bt,xc),e(xc,Vlr),e(xc,Mpe),e(Mpe,zlr),e(xc,Wlr),e(xc,Epe),e(Epe,Qlr),e(xc,Hlr),e(bt,Ulr),e(bt,ype),e(ype,Jlr),e(bt,Ylr),g(uw,bt,null),e(Er,Klr),e(Er,vo),g(bw,vo,null),e(vo,Zlr),e(vo,wpe),e(wpe,eir),e(vo,oir),e(vo,Fn),e(Fn,rir),e(Fn,Ape),e(Ape,tir),e(Fn,air),e(Fn,Lpe),e(Lpe,nir),e(Fn,sir),e(Fn,Bpe),e(Bpe,lir),e(Fn,iir),e(vo,dir),e(vo,ue),e(ue,ZT),e(ZT,xpe),e(xpe,cir),e(ZT,fir),e(ZT,UO),e(UO,mir),e(ZT,gir),e(ue,hir),e(ue,e7),e(e7,kpe),e(kpe,pir),e(e7,_ir),e(e7,JO),e(JO,uir),e(e7,bir),e(ue,vir),e(ue,o7),e(o7,Rpe),e(Rpe,Tir),e(o7,Fir),e(o7,YO),e(YO,Cir),e(o7,Mir),e(ue,Eir),e(ue,r7),e(r7,Spe),e(Spe,yir),e(r7,wir),e(r7,KO),e(KO,Air),e(r7,Lir),e(ue,Bir),e(ue,t7),e(t7,Ppe),e(Ppe,xir),e(t7,kir),e(t7,ZO),e(ZO,Rir),e(t7,Sir),e(ue,Pir),e(ue,a7),e(a7,$pe),e($pe,$ir),e(a7,Iir),e(a7,eG),e(eG,jir),e(a7,Dir),e(ue,Nir),e(ue,n7),e(n7,Ipe),e(Ipe,qir),e(n7,Oir),e(n7,oG),e(oG,Gir),e(n7,Xir),e(ue,Vir),e(ue,s7),e(s7,jpe),e(jpe,zir),e(s7,Wir),e(s7,rG),e(rG,Qir),e(s7,Hir),e(ue,Uir),e(ue,l7),e(l7,Dpe),e(Dpe,Jir),e(l7,Yir),e(l7,tG),e(tG,Kir),e(l7,Zir),e(ue,edr),e(ue,i7),e(i7,Npe),e(Npe,odr),e(i7,rdr),e(i7,aG),e(aG,tdr),e(i7,adr),e(vo,ndr),e(vo,qpe),e(qpe,sdr),e(vo,ldr),g(vw,vo,null),b(c,$ke,u),b(c,kc,u),e(kc,d7),e(d7,Ope),g(Tw,Ope,null),e(kc,idr),e(kc,Gpe),e(Gpe,ddr),b(c,Ike,u),b(c,yr,u),g(Fw,yr,null),e(yr,cdr),e(yr,Rc),e(Rc,fdr),e(Rc,Xpe),e(Xpe,mdr),e(Rc,gdr),e(Rc,Vpe),e(Vpe,hdr),e(Rc,pdr),e(yr,_dr),e(yr,Cw),e(Cw,udr),e(Cw,zpe),e(zpe,bdr),e(Cw,vdr),e(yr,Tdr),e(yr,vt),g(Mw,vt,null),e(vt,Fdr),e(vt,Wpe),e(Wpe,Cdr),e(vt,Mdr),e(vt,Sc),e(Sc,Edr),e(Sc,Qpe),e(Qpe,ydr),e(Sc,wdr),e(Sc,Hpe),e(Hpe,Adr),e(Sc,Ldr),e(vt,Bdr),e(vt,Upe),e(Upe,xdr),e(vt,kdr),g(Ew,vt,null),e(yr,Rdr),e(yr,To),g(yw,To,null),e(To,Sdr),e(To,Jpe),e(Jpe,Pdr),e(To,$dr),e(To,Cn),e(Cn,Idr),e(Cn,Ype),e(Ype,jdr),e(Cn,Ddr),e(Cn,Kpe),e(Kpe,Ndr),e(Cn,qdr),e(Cn,Zpe),e(Zpe,Odr),e(Cn,Gdr),e(To,Xdr),e(To,V),e(V,c7),e(c7,e_e),e(e_e,Vdr),e(c7,zdr),e(c7,nG),e(nG,Wdr),e(c7,Qdr),e(V,Hdr),e(V,f7),e(f7,o_e),e(o_e,Udr),e(f7,Jdr),e(f7,sG),e(sG,Ydr),e(f7,Kdr),e(V,Zdr),e(V,m7),e(m7,r_e),e(r_e,ecr),e(m7,ocr),e(m7,lG),e(lG,rcr),e(m7,tcr),e(V,acr),e(V,g7),e(g7,t_e),e(t_e,ncr),e(g7,scr),e(g7,iG),e(iG,lcr),e(g7,icr),e(V,dcr),e(V,h7),e(h7,a_e),e(a_e,ccr),e(h7,fcr),e(h7,dG),e(dG,mcr),e(h7,gcr),e(V,hcr),e(V,p7),e(p7,n_e),e(n_e,pcr),e(p7,_cr),e(p7,cG),e(cG,ucr),e(p7,bcr),e(V,vcr),e(V,_7),e(_7,s_e),e(s_e,Tcr),e(_7,Fcr),e(_7,fG),e(fG,Ccr),e(_7,Mcr),e(V,Ecr),e(V,u7),e(u7,l_e),e(l_e,ycr),e(u7,wcr),e(u7,mG),e(mG,Acr),e(u7,Lcr),e(V,Bcr),e(V,b7),e(b7,i_e),e(i_e,xcr),e(b7,kcr),e(b7,gG),e(gG,Rcr),e(b7,Scr),e(V,Pcr),e(V,v7),e(v7,d_e),e(d_e,$cr),e(v7,Icr),e(v7,hG),e(hG,jcr),e(v7,Dcr),e(V,Ncr),e(V,T7),e(T7,c_e),e(c_e,qcr),e(T7,Ocr),e(T7,pG),e(pG,Gcr),e(T7,Xcr),e(V,Vcr),e(V,F7),e(F7,f_e),e(f_e,zcr),e(F7,Wcr),e(F7,_G),e(_G,Qcr),e(F7,Hcr),e(V,Ucr),e(V,C7),e(C7,m_e),e(m_e,Jcr),e(C7,Ycr),e(C7,uG),e(uG,Kcr),e(C7,Zcr),e(V,efr),e(V,M7),e(M7,g_e),e(g_e,ofr),e(M7,rfr),e(M7,bG),e(bG,tfr),e(M7,afr),e(V,nfr),e(V,E7),e(E7,h_e),e(h_e,sfr),e(E7,lfr),e(E7,vG),e(vG,ifr),e(E7,dfr),e(V,cfr),e(V,y7),e(y7,p_e),e(p_e,ffr),e(y7,mfr),e(y7,TG),e(TG,gfr),e(y7,hfr),e(V,pfr),e(V,w7),e(w7,__e),e(__e,_fr),e(w7,ufr),e(w7,FG),e(FG,bfr),e(w7,vfr),e(V,Tfr),e(V,A7),e(A7,u_e),e(u_e,Ffr),e(A7,Cfr),e(A7,CG),e(CG,Mfr),e(A7,Efr),e(V,yfr),e(V,L7),e(L7,b_e),e(b_e,wfr),e(L7,Afr),e(L7,MG),e(MG,Lfr),e(L7,Bfr),e(V,xfr),e(V,B7),e(B7,v_e),e(v_e,kfr),e(B7,Rfr),e(B7,EG),e(EG,Sfr),e(B7,Pfr),e(V,$fr),e(V,x7),e(x7,T_e),e(T_e,Ifr),e(x7,jfr),e(x7,yG),e(yG,Dfr),e(x7,Nfr),e(V,qfr),e(V,k7),e(k7,F_e),e(F_e,Ofr),e(k7,Gfr),e(k7,wG),e(wG,Xfr),e(k7,Vfr),e(V,zfr),e(V,R7),e(R7,C_e),e(C_e,Wfr),e(R7,Qfr),e(R7,AG),e(AG,Hfr),e(R7,Ufr),e(V,Jfr),e(V,S7),e(S7,M_e),e(M_e,Yfr),e(S7,Kfr),e(S7,LG),e(LG,Zfr),e(S7,emr),e(V,omr),e(V,P7),e(P7,E_e),e(E_e,rmr),e(P7,tmr),e(P7,BG),e(BG,amr),e(P7,nmr),e(To,smr),e(To,y_e),e(y_e,lmr),e(To,imr),g(ww,To,null),b(c,jke,u),b(c,Pc,u),e(Pc,$7),e($7,w_e),g(Aw,w_e,null),e(Pc,dmr),e(Pc,A_e),e(A_e,cmr),b(c,Dke,u),b(c,wr,u),g(Lw,wr,null),e(wr,fmr),e(wr,$c),e($c,mmr),e($c,L_e),e(L_e,gmr),e($c,hmr),e($c,B_e),e(B_e,pmr),e($c,_mr),e(wr,umr),e(wr,Bw),e(Bw,bmr),e(Bw,x_e),e(x_e,vmr),e(Bw,Tmr),e(wr,Fmr),e(wr,Tt),g(xw,Tt,null),e(Tt,Cmr),e(Tt,k_e),e(k_e,Mmr),e(Tt,Emr),e(Tt,Ic),e(Ic,ymr),e(Ic,R_e),e(R_e,wmr),e(Ic,Amr),e(Ic,S_e),e(S_e,Lmr),e(Ic,Bmr),e(Tt,xmr),e(Tt,P_e),e(P_e,kmr),e(Tt,Rmr),g(kw,Tt,null),e(wr,Smr),e(wr,Fo),g(Rw,Fo,null),e(Fo,Pmr),e(Fo,$_e),e($_e,$mr),e(Fo,Imr),e(Fo,Mn),e(Mn,jmr),e(Mn,I_e),e(I_e,Dmr),e(Mn,Nmr),e(Mn,j_e),e(j_e,qmr),e(Mn,Omr),e(Mn,D_e),e(D_e,Gmr),e(Mn,Xmr),e(Fo,Vmr),e(Fo,ae),e(ae,I7),e(I7,N_e),e(N_e,zmr),e(I7,Wmr),e(I7,xG),e(xG,Qmr),e(I7,Hmr),e(ae,Umr),e(ae,j7),e(j7,q_e),e(q_e,Jmr),e(j7,Ymr),e(j7,kG),e(kG,Kmr),e(j7,Zmr),e(ae,egr),e(ae,D7),e(D7,O_e),e(O_e,ogr),e(D7,rgr),e(D7,RG),e(RG,tgr),e(D7,agr),e(ae,ngr),e(ae,N7),e(N7,G_e),e(G_e,sgr),e(N7,lgr),e(N7,SG),e(SG,igr),e(N7,dgr),e(ae,cgr),e(ae,q7),e(q7,X_e),e(X_e,fgr),e(q7,mgr),e(q7,PG),e(PG,ggr),e(q7,hgr),e(ae,pgr),e(ae,O7),e(O7,V_e),e(V_e,_gr),e(O7,ugr),e(O7,$G),e($G,bgr),e(O7,vgr),e(ae,Tgr),e(ae,G7),e(G7,z_e),e(z_e,Fgr),e(G7,Cgr),e(G7,IG),e(IG,Mgr),e(G7,Egr),e(ae,ygr),e(ae,X7),e(X7,W_e),e(W_e,wgr),e(X7,Agr),e(X7,jG),e(jG,Lgr),e(X7,Bgr),e(ae,xgr),e(ae,V7),e(V7,Q_e),e(Q_e,kgr),e(V7,Rgr),e(V7,DG),e(DG,Sgr),e(V7,Pgr),e(ae,$gr),e(ae,z7),e(z7,H_e),e(H_e,Igr),e(z7,jgr),e(z7,NG),e(NG,Dgr),e(z7,Ngr),e(ae,qgr),e(ae,W7),e(W7,U_e),e(U_e,Ogr),e(W7,Ggr),e(W7,qG),e(qG,Xgr),e(W7,Vgr),e(ae,zgr),e(ae,Q7),e(Q7,J_e),e(J_e,Wgr),e(Q7,Qgr),e(Q7,OG),e(OG,Hgr),e(Q7,Ugr),e(ae,Jgr),e(ae,H7),e(H7,Y_e),e(Y_e,Ygr),e(H7,Kgr),e(H7,GG),e(GG,Zgr),e(H7,ehr),e(ae,ohr),e(ae,U7),e(U7,K_e),e(K_e,rhr),e(U7,thr),e(U7,XG),e(XG,ahr),e(U7,nhr),e(ae,shr),e(ae,J7),e(J7,Z_e),e(Z_e,lhr),e(J7,ihr),e(J7,VG),e(VG,dhr),e(J7,chr),e(ae,fhr),e(ae,Y7),e(Y7,eue),e(eue,mhr),e(Y7,ghr),e(Y7,zG),e(zG,hhr),e(Y7,phr),e(ae,_hr),e(ae,K7),e(K7,oue),e(oue,uhr),e(K7,bhr),e(K7,WG),e(WG,vhr),e(K7,Thr),e(Fo,Fhr),e(Fo,rue),e(rue,Chr),e(Fo,Mhr),g(Sw,Fo,null),b(c,Nke,u),b(c,jc,u),e(jc,Z7),e(Z7,tue),g(Pw,tue,null),e(jc,Ehr),e(jc,aue),e(aue,yhr),b(c,qke,u),b(c,Ar,u),g($w,Ar,null),e(Ar,whr),e(Ar,Dc),e(Dc,Ahr),e(Dc,nue),e(nue,Lhr),e(Dc,Bhr),e(Dc,sue),e(sue,xhr),e(Dc,khr),e(Ar,Rhr),e(Ar,Iw),e(Iw,Shr),e(Iw,lue),e(lue,Phr),e(Iw,$hr),e(Ar,Ihr),e(Ar,Ft),g(jw,Ft,null),e(Ft,jhr),e(Ft,iue),e(iue,Dhr),e(Ft,Nhr),e(Ft,Nc),e(Nc,qhr),e(Nc,due),e(due,Ohr),e(Nc,Ghr),e(Nc,cue),e(cue,Xhr),e(Nc,Vhr),e(Ft,zhr),e(Ft,fue),e(fue,Whr),e(Ft,Qhr),g(Dw,Ft,null),e(Ar,Hhr),e(Ar,Co),g(Nw,Co,null),e(Co,Uhr),e(Co,mue),e(mue,Jhr),e(Co,Yhr),e(Co,En),e(En,Khr),e(En,gue),e(gue,Zhr),e(En,epr),e(En,hue),e(hue,opr),e(En,rpr),e(En,pue),e(pue,tpr),e(En,apr),e(Co,npr),e(Co,_ue),e(_ue,eF),e(eF,uue),e(uue,spr),e(eF,lpr),e(eF,QG),e(QG,ipr),e(eF,dpr),e(Co,cpr),e(Co,bue),e(bue,fpr),e(Co,mpr),g(qw,Co,null),b(c,Oke,u),b(c,qc,u),e(qc,oF),e(oF,vue),g(Ow,vue,null),e(qc,gpr),e(qc,Tue),e(Tue,hpr),b(c,Gke,u),b(c,Lr,u),g(Gw,Lr,null),e(Lr,ppr),e(Lr,Oc),e(Oc,_pr),e(Oc,Fue),e(Fue,upr),e(Oc,bpr),e(Oc,Cue),e(Cue,vpr),e(Oc,Tpr),e(Lr,Fpr),e(Lr,Xw),e(Xw,Cpr),e(Xw,Mue),e(Mue,Mpr),e(Xw,Epr),e(Lr,ypr),e(Lr,Ct),g(Vw,Ct,null),e(Ct,wpr),e(Ct,Eue),e(Eue,Apr),e(Ct,Lpr),e(Ct,Gc),e(Gc,Bpr),e(Gc,yue),e(yue,xpr),e(Gc,kpr),e(Gc,wue),e(wue,Rpr),e(Gc,Spr),e(Ct,Ppr),e(Ct,Aue),e(Aue,$pr),e(Ct,Ipr),g(zw,Ct,null),e(Lr,jpr),e(Lr,Mo),g(Ww,Mo,null),e(Mo,Dpr),e(Mo,Lue),e(Lue,Npr),e(Mo,qpr),e(Mo,yn),e(yn,Opr),e(yn,Bue),e(Bue,Gpr),e(yn,Xpr),e(yn,xue),e(xue,Vpr),e(yn,zpr),e(yn,kue),e(kue,Wpr),e(yn,Qpr),e(Mo,Hpr),e(Mo,K),e(K,rF),e(rF,Rue),e(Rue,Upr),e(rF,Jpr),e(rF,HG),e(HG,Ypr),e(rF,Kpr),e(K,Zpr),e(K,tF),e(tF,Sue),e(Sue,e_r),e(tF,o_r),e(tF,UG),e(UG,r_r),e(tF,t_r),e(K,a_r),e(K,aF),e(aF,Pue),e(Pue,n_r),e(aF,s_r),e(aF,JG),e(JG,l_r),e(aF,i_r),e(K,d_r),e(K,nF),e(nF,$ue),e($ue,c_r),e(nF,f_r),e(nF,YG),e(YG,m_r),e(nF,g_r),e(K,h_r),e(K,sF),e(sF,Iue),e(Iue,p_r),e(sF,__r),e(sF,KG),e(KG,u_r),e(sF,b_r),e(K,v_r),e(K,lF),e(lF,jue),e(jue,T_r),e(lF,F_r),e(lF,ZG),e(ZG,C_r),e(lF,M_r),e(K,E_r),e(K,iF),e(iF,Due),e(Due,y_r),e(iF,w_r),e(iF,eX),e(eX,A_r),e(iF,L_r),e(K,B_r),e(K,dF),e(dF,Nue),e(Nue,x_r),e(dF,k_r),e(dF,oX),e(oX,R_r),e(dF,S_r),e(K,P_r),e(K,cF),e(cF,que),e(que,$_r),e(cF,I_r),e(cF,rX),e(rX,j_r),e(cF,D_r),e(K,N_r),e(K,fF),e(fF,Oue),e(Oue,q_r),e(fF,O_r),e(fF,tX),e(tX,G_r),e(fF,X_r),e(K,V_r),e(K,mF),e(mF,Gue),e(Gue,z_r),e(mF,W_r),e(mF,aX),e(aX,Q_r),e(mF,H_r),e(K,U_r),e(K,gF),e(gF,Xue),e(Xue,J_r),e(gF,Y_r),e(gF,nX),e(nX,K_r),e(gF,Z_r),e(K,eur),e(K,hF),e(hF,Vue),e(Vue,our),e(hF,rur),e(hF,sX),e(sX,tur),e(hF,aur),e(K,nur),e(K,pF),e(pF,zue),e(zue,sur),e(pF,lur),e(pF,lX),e(lX,iur),e(pF,dur),e(K,cur),e(K,_F),e(_F,Wue),e(Wue,fur),e(_F,mur),e(_F,iX),e(iX,gur),e(_F,hur),e(K,pur),e(K,uF),e(uF,Que),e(Que,_ur),e(uF,uur),e(uF,dX),e(dX,bur),e(uF,vur),e(K,Tur),e(K,bF),e(bF,Hue),e(Hue,Fur),e(bF,Cur),e(bF,cX),e(cX,Mur),e(bF,Eur),e(K,yur),e(K,vF),e(vF,Uue),e(Uue,wur),e(vF,Aur),e(vF,fX),e(fX,Lur),e(vF,Bur),e(K,xur),e(K,TF),e(TF,Jue),e(Jue,kur),e(TF,Rur),e(TF,mX),e(mX,Sur),e(TF,Pur),e(K,$ur),e(K,FF),e(FF,Yue),e(Yue,Iur),e(FF,jur),e(FF,gX),e(gX,Dur),e(FF,Nur),e(Mo,qur),e(Mo,Kue),e(Kue,Our),e(Mo,Gur),g(Qw,Mo,null),b(c,Xke,u),b(c,Xc,u),e(Xc,CF),e(CF,Zue),g(Hw,Zue,null),e(Xc,Xur),e(Xc,e2e),e(e2e,Vur),b(c,Vke,u),b(c,Br,u),g(Uw,Br,null),e(Br,zur),e(Br,Vc),e(Vc,Wur),e(Vc,o2e),e(o2e,Qur),e(Vc,Hur),e(Vc,r2e),e(r2e,Uur),e(Vc,Jur),e(Br,Yur),e(Br,Jw),e(Jw,Kur),e(Jw,t2e),e(t2e,Zur),e(Jw,e2r),e(Br,o2r),e(Br,Mt),g(Yw,Mt,null),e(Mt,r2r),e(Mt,a2e),e(a2e,t2r),e(Mt,a2r),e(Mt,zc),e(zc,n2r),e(zc,n2e),e(n2e,s2r),e(zc,l2r),e(zc,s2e),e(s2e,i2r),e(zc,d2r),e(Mt,c2r),e(Mt,l2e),e(l2e,f2r),e(Mt,m2r),g(Kw,Mt,null),e(Br,g2r),e(Br,Eo),g(Zw,Eo,null),e(Eo,h2r),e(Eo,i2e),e(i2e,p2r),e(Eo,_2r),e(Eo,wn),e(wn,u2r),e(wn,d2e),e(d2e,b2r),e(wn,v2r),e(wn,c2e),e(c2e,T2r),e(wn,F2r),e(wn,f2e),e(f2e,C2r),e(wn,M2r),e(Eo,E2r),e(Eo,Z),e(Z,MF),e(MF,m2e),e(m2e,y2r),e(MF,w2r),e(MF,hX),e(hX,A2r),e(MF,L2r),e(Z,B2r),e(Z,EF),e(EF,g2e),e(g2e,x2r),e(EF,k2r),e(EF,pX),e(pX,R2r),e(EF,S2r),e(Z,P2r),e(Z,yF),e(yF,h2e),e(h2e,$2r),e(yF,I2r),e(yF,_X),e(_X,j2r),e(yF,D2r),e(Z,N2r),e(Z,wF),e(wF,p2e),e(p2e,q2r),e(wF,O2r),e(wF,uX),e(uX,G2r),e(wF,X2r),e(Z,V2r),e(Z,AF),e(AF,_2e),e(_2e,z2r),e(AF,W2r),e(AF,bX),e(bX,Q2r),e(AF,H2r),e(Z,U2r),e(Z,LF),e(LF,u2e),e(u2e,J2r),e(LF,Y2r),e(LF,vX),e(vX,K2r),e(LF,Z2r),e(Z,e1r),e(Z,BF),e(BF,b2e),e(b2e,o1r),e(BF,r1r),e(BF,TX),e(TX,t1r),e(BF,a1r),e(Z,n1r),e(Z,xF),e(xF,v2e),e(v2e,s1r),e(xF,l1r),e(xF,FX),e(FX,i1r),e(xF,d1r),e(Z,c1r),e(Z,kF),e(kF,T2e),e(T2e,f1r),e(kF,m1r),e(kF,CX),e(CX,g1r),e(kF,h1r),e(Z,p1r),e(Z,RF),e(RF,F2e),e(F2e,_1r),e(RF,u1r),e(RF,MX),e(MX,b1r),e(RF,v1r),e(Z,T1r),e(Z,SF),e(SF,C2e),e(C2e,F1r),e(SF,C1r),e(SF,EX),e(EX,M1r),e(SF,E1r),e(Z,y1r),e(Z,PF),e(PF,M2e),e(M2e,w1r),e(PF,A1r),e(PF,yX),e(yX,L1r),e(PF,B1r),e(Z,x1r),e(Z,$F),e($F,E2e),e(E2e,k1r),e($F,R1r),e($F,wX),e(wX,S1r),e($F,P1r),e(Z,$1r),e(Z,IF),e(IF,y2e),e(y2e,I1r),e(IF,j1r),e(IF,AX),e(AX,D1r),e(IF,N1r),e(Z,q1r),e(Z,jF),e(jF,w2e),e(w2e,O1r),e(jF,G1r),e(jF,LX),e(LX,X1r),e(jF,V1r),e(Z,z1r),e(Z,DF),e(DF,A2e),e(A2e,W1r),e(DF,Q1r),e(DF,BX),e(BX,H1r),e(DF,U1r),e(Z,J1r),e(Z,NF),e(NF,L2e),e(L2e,Y1r),e(NF,K1r),e(NF,xX),e(xX,Z1r),e(NF,ebr),e(Z,obr),e(Z,qF),e(qF,B2e),e(B2e,rbr),e(qF,tbr),e(qF,kX),e(kX,abr),e(qF,nbr),e(Z,sbr),e(Z,OF),e(OF,x2e),e(x2e,lbr),e(OF,ibr),e(OF,RX),e(RX,dbr),e(OF,cbr),e(Eo,fbr),e(Eo,k2e),e(k2e,mbr),e(Eo,gbr),g(eA,Eo,null),b(c,zke,u),b(c,Wc,u),e(Wc,GF),e(GF,R2e),g(oA,R2e,null),e(Wc,hbr),e(Wc,S2e),e(S2e,pbr),b(c,Wke,u),b(c,xr,u),g(rA,xr,null),e(xr,_br),e(xr,Qc),e(Qc,ubr),e(Qc,P2e),e(P2e,bbr),e(Qc,vbr),e(Qc,$2e),e($2e,Tbr),e(Qc,Fbr),e(xr,Cbr),e(xr,tA),e(tA,Mbr),e(tA,I2e),e(I2e,Ebr),e(tA,ybr),e(xr,wbr),e(xr,Et),g(aA,Et,null),e(Et,Abr),e(Et,j2e),e(j2e,Lbr),e(Et,Bbr),e(Et,Hc),e(Hc,xbr),e(Hc,D2e),e(D2e,kbr),e(Hc,Rbr),e(Hc,N2e),e(N2e,Sbr),e(Hc,Pbr),e(Et,$br),e(Et,q2e),e(q2e,Ibr),e(Et,jbr),g(nA,Et,null),e(xr,Dbr),e(xr,yo),g(sA,yo,null),e(yo,Nbr),e(yo,O2e),e(O2e,qbr),e(yo,Obr),e(yo,An),e(An,Gbr),e(An,G2e),e(G2e,Xbr),e(An,Vbr),e(An,X2e),e(X2e,zbr),e(An,Wbr),e(An,V2e),e(V2e,Qbr),e(An,Hbr),e(yo,Ubr),e(yo,z2e),e(z2e,XF),e(XF,W2e),e(W2e,Jbr),e(XF,Ybr),e(XF,SX),e(SX,Kbr),e(XF,Zbr),e(yo,evr),e(yo,Q2e),e(Q2e,ovr),e(yo,rvr),g(lA,yo,null),b(c,Qke,u),b(c,Uc,u),e(Uc,VF),e(VF,H2e),g(iA,H2e,null),e(Uc,tvr),e(Uc,U2e),e(U2e,avr),b(c,Hke,u),b(c,kr,u),g(dA,kr,null),e(kr,nvr),e(kr,Jc),e(Jc,svr),e(Jc,J2e),e(J2e,lvr),e(Jc,ivr),e(Jc,Y2e),e(Y2e,dvr),e(Jc,cvr),e(kr,fvr),e(kr,cA),e(cA,mvr),e(cA,K2e),e(K2e,gvr),e(cA,hvr),e(kr,pvr),e(kr,yt),g(fA,yt,null),e(yt,_vr),e(yt,Z2e),e(Z2e,uvr),e(yt,bvr),e(yt,Yc),e(Yc,vvr),e(Yc,e1e),e(e1e,Tvr),e(Yc,Fvr),e(Yc,o1e),e(o1e,Cvr),e(Yc,Mvr),e(yt,Evr),e(yt,r1e),e(r1e,yvr),e(yt,wvr),g(mA,yt,null),e(kr,Avr),e(kr,wo),g(gA,wo,null),e(wo,Lvr),e(wo,t1e),e(t1e,Bvr),e(wo,xvr),e(wo,Ln),e(Ln,kvr),e(Ln,a1e),e(a1e,Rvr),e(Ln,Svr),e(Ln,n1e),e(n1e,Pvr),e(Ln,$vr),e(Ln,s1e),e(s1e,Ivr),e(Ln,jvr),e(wo,Dvr),e(wo,l1e),e(l1e,zF),e(zF,i1e),e(i1e,Nvr),e(zF,qvr),e(zF,PX),e(PX,Ovr),e(zF,Gvr),e(wo,Xvr),e(wo,d1e),e(d1e,Vvr),e(wo,zvr),g(hA,wo,null),b(c,Uke,u),b(c,Kc,u),e(Kc,WF),e(WF,c1e),g(pA,c1e,null),e(Kc,Wvr),e(Kc,f1e),e(f1e,Qvr),b(c,Jke,u),b(c,Rr,u),g(_A,Rr,null),e(Rr,Hvr),e(Rr,Zc),e(Zc,Uvr),e(Zc,m1e),e(m1e,Jvr),e(Zc,Yvr),e(Zc,g1e),e(g1e,Kvr),e(Zc,Zvr),e(Rr,e6r),e(Rr,uA),e(uA,o6r),e(uA,h1e),e(h1e,r6r),e(uA,t6r),e(Rr,a6r),e(Rr,wt),g(bA,wt,null),e(wt,n6r),e(wt,p1e),e(p1e,s6r),e(wt,l6r),e(wt,ef),e(ef,i6r),e(ef,_1e),e(_1e,d6r),e(ef,c6r),e(ef,u1e),e(u1e,f6r),e(ef,m6r),e(wt,g6r),e(wt,b1e),e(b1e,h6r),e(wt,p6r),g(vA,wt,null),e(Rr,_6r),e(Rr,Ao),g(TA,Ao,null),e(Ao,u6r),e(Ao,v1e),e(v1e,b6r),e(Ao,v6r),e(Ao,Bn),e(Bn,T6r),e(Bn,T1e),e(T1e,F6r),e(Bn,C6r),e(Bn,F1e),e(F1e,M6r),e(Bn,E6r),e(Bn,C1e),e(C1e,y6r),e(Bn,w6r),e(Ao,A6r),e(Ao,z),e(z,QF),e(QF,M1e),e(M1e,L6r),e(QF,B6r),e(QF,$X),e($X,x6r),e(QF,k6r),e(z,R6r),e(z,HF),e(HF,E1e),e(E1e,S6r),e(HF,P6r),e(HF,IX),e(IX,$6r),e(HF,I6r),e(z,j6r),e(z,UF),e(UF,y1e),e(y1e,D6r),e(UF,N6r),e(UF,jX),e(jX,q6r),e(UF,O6r),e(z,G6r),e(z,JF),e(JF,w1e),e(w1e,X6r),e(JF,V6r),e(JF,DX),e(DX,z6r),e(JF,W6r),e(z,Q6r),e(z,YF),e(YF,A1e),e(A1e,H6r),e(YF,U6r),e(YF,NX),e(NX,J6r),e(YF,Y6r),e(z,K6r),e(z,KF),e(KF,L1e),e(L1e,Z6r),e(KF,e0r),e(KF,qX),e(qX,o0r),e(KF,r0r),e(z,t0r),e(z,ZF),e(ZF,B1e),e(B1e,a0r),e(ZF,n0r),e(ZF,OX),e(OX,s0r),e(ZF,l0r),e(z,i0r),e(z,eC),e(eC,x1e),e(x1e,d0r),e(eC,c0r),e(eC,GX),e(GX,f0r),e(eC,m0r),e(z,g0r),e(z,oC),e(oC,k1e),e(k1e,h0r),e(oC,p0r),e(oC,XX),e(XX,_0r),e(oC,u0r),e(z,b0r),e(z,rC),e(rC,R1e),e(R1e,v0r),e(rC,T0r),e(rC,VX),e(VX,F0r),e(rC,C0r),e(z,M0r),e(z,tC),e(tC,S1e),e(S1e,E0r),e(tC,y0r),e(tC,zX),e(zX,w0r),e(tC,A0r),e(z,L0r),e(z,aC),e(aC,P1e),e(P1e,B0r),e(aC,x0r),e(aC,WX),e(WX,k0r),e(aC,R0r),e(z,S0r),e(z,nC),e(nC,$1e),e($1e,P0r),e(nC,$0r),e(nC,QX),e(QX,I0r),e(nC,j0r),e(z,D0r),e(z,sC),e(sC,I1e),e(I1e,N0r),e(sC,q0r),e(sC,HX),e(HX,O0r),e(sC,G0r),e(z,X0r),e(z,lC),e(lC,j1e),e(j1e,V0r),e(lC,z0r),e(lC,UX),e(UX,W0r),e(lC,Q0r),e(z,H0r),e(z,iC),e(iC,D1e),e(D1e,U0r),e(iC,J0r),e(iC,JX),e(JX,Y0r),e(iC,K0r),e(z,Z0r),e(z,dC),e(dC,N1e),e(N1e,eTr),e(dC,oTr),e(dC,YX),e(YX,rTr),e(dC,tTr),e(z,aTr),e(z,cC),e(cC,q1e),e(q1e,nTr),e(cC,sTr),e(cC,KX),e(KX,lTr),e(cC,iTr),e(z,dTr),e(z,fC),e(fC,O1e),e(O1e,cTr),e(fC,fTr),e(fC,ZX),e(ZX,mTr),e(fC,gTr),e(z,hTr),e(z,mC),e(mC,G1e),e(G1e,pTr),e(mC,_Tr),e(mC,eV),e(eV,uTr),e(mC,bTr),e(z,vTr),e(z,gC),e(gC,X1e),e(X1e,TTr),e(gC,FTr),e(gC,oV),e(oV,CTr),e(gC,MTr),e(z,ETr),e(z,hC),e(hC,V1e),e(V1e,yTr),e(hC,wTr),e(hC,rV),e(rV,ATr),e(hC,LTr),e(z,BTr),e(z,pC),e(pC,z1e),e(z1e,xTr),e(pC,kTr),e(pC,tV),e(tV,RTr),e(pC,STr),e(z,PTr),e(z,_C),e(_C,W1e),e(W1e,$Tr),e(_C,ITr),e(_C,aV),e(aV,jTr),e(_C,DTr),e(z,NTr),e(z,uC),e(uC,Q1e),e(Q1e,qTr),e(uC,OTr),e(uC,nV),e(nV,GTr),e(uC,XTr),e(Ao,VTr),e(Ao,H1e),e(H1e,zTr),e(Ao,WTr),g(FA,Ao,null),b(c,Yke,u),b(c,of,u),e(of,bC),e(bC,U1e),g(CA,U1e,null),e(of,QTr),e(of,J1e),e(J1e,HTr),b(c,Kke,u),b(c,Sr,u),g(MA,Sr,null),e(Sr,UTr),e(Sr,rf),e(rf,JTr),e(rf,Y1e),e(Y1e,YTr),e(rf,KTr),e(rf,K1e),e(K1e,ZTr),e(rf,e7r),e(Sr,o7r),e(Sr,EA),e(EA,r7r),e(EA,Z1e),e(Z1e,t7r),e(EA,a7r),e(Sr,n7r),e(Sr,At),g(yA,At,null),e(At,s7r),e(At,ebe),e(ebe,l7r),e(At,i7r),e(At,tf),e(tf,d7r),e(tf,obe),e(obe,c7r),e(tf,f7r),e(tf,rbe),e(rbe,m7r),e(tf,g7r),e(At,h7r),e(At,tbe),e(tbe,p7r),e(At,_7r),g(wA,At,null),e(Sr,u7r),e(Sr,Lo),g(AA,Lo,null),e(Lo,b7r),e(Lo,abe),e(abe,v7r),e(Lo,T7r),e(Lo,xn),e(xn,F7r),e(xn,nbe),e(nbe,C7r),e(xn,M7r),e(xn,sbe),e(sbe,E7r),e(xn,y7r),e(xn,lbe),e(lbe,w7r),e(xn,A7r),e(Lo,L7r),e(Lo,ca),e(ca,vC),e(vC,ibe),e(ibe,B7r),e(vC,x7r),e(vC,sV),e(sV,k7r),e(vC,R7r),e(ca,S7r),e(ca,TC),e(TC,dbe),e(dbe,P7r),e(TC,$7r),e(TC,lV),e(lV,I7r),e(TC,j7r),e(ca,D7r),e(ca,FC),e(FC,cbe),e(cbe,N7r),e(FC,q7r),e(FC,iV),e(iV,O7r),e(FC,G7r),e(ca,X7r),e(ca,CC),e(CC,fbe),e(fbe,V7r),e(CC,z7r),e(CC,dV),e(dV,W7r),e(CC,Q7r),e(ca,H7r),e(ca,MC),e(MC,mbe),e(mbe,U7r),e(MC,J7r),e(MC,cV),e(cV,Y7r),e(MC,K7r),e(Lo,Z7r),e(Lo,gbe),e(gbe,eFr),e(Lo,oFr),g(LA,Lo,null),b(c,Zke,u),b(c,af,u),e(af,EC),e(EC,hbe),g(BA,hbe,null),e(af,rFr),e(af,pbe),e(pbe,tFr),b(c,eRe,u),b(c,Pr,u),g(xA,Pr,null),e(Pr,aFr),e(Pr,nf),e(nf,nFr),e(nf,_be),e(_be,sFr),e(nf,lFr),e(nf,ube),e(ube,iFr),e(nf,dFr),e(Pr,cFr),e(Pr,kA),e(kA,fFr),e(kA,bbe),e(bbe,mFr),e(kA,gFr),e(Pr,hFr),e(Pr,Lt),g(RA,Lt,null),e(Lt,pFr),e(Lt,vbe),e(vbe,_Fr),e(Lt,uFr),e(Lt,sf),e(sf,bFr),e(sf,Tbe),e(Tbe,vFr),e(sf,TFr),e(sf,Fbe),e(Fbe,FFr),e(sf,CFr),e(Lt,MFr),e(Lt,Cbe),e(Cbe,EFr),e(Lt,yFr),g(SA,Lt,null),e(Pr,wFr),e(Pr,Bo),g(PA,Bo,null),e(Bo,AFr),e(Bo,Mbe),e(Mbe,LFr),e(Bo,BFr),e(Bo,kn),e(kn,xFr),e(kn,Ebe),e(Ebe,kFr),e(kn,RFr),e(kn,ybe),e(ybe,SFr),e(kn,PFr),e(kn,wbe),e(wbe,$Fr),e(kn,IFr),e(Bo,jFr),e(Bo,ce),e(ce,yC),e(yC,Abe),e(Abe,DFr),e(yC,NFr),e(yC,fV),e(fV,qFr),e(yC,OFr),e(ce,GFr),e(ce,wC),e(wC,Lbe),e(Lbe,XFr),e(wC,VFr),e(wC,mV),e(mV,zFr),e(wC,WFr),e(ce,QFr),e(ce,AC),e(AC,Bbe),e(Bbe,HFr),e(AC,UFr),e(AC,gV),e(gV,JFr),e(AC,YFr),e(ce,KFr),e(ce,LC),e(LC,xbe),e(xbe,ZFr),e(LC,eCr),e(LC,hV),e(hV,oCr),e(LC,rCr),e(ce,tCr),e(ce,BC),e(BC,kbe),e(kbe,aCr),e(BC,nCr),e(BC,pV),e(pV,sCr),e(BC,lCr),e(ce,iCr),e(ce,xC),e(xC,Rbe),e(Rbe,dCr),e(xC,cCr),e(xC,_V),e(_V,fCr),e(xC,mCr),e(ce,gCr),e(ce,kC),e(kC,Sbe),e(Sbe,hCr),e(kC,pCr),e(kC,uV),e(uV,_Cr),e(kC,uCr),e(ce,bCr),e(ce,RC),e(RC,Pbe),e(Pbe,vCr),e(RC,TCr),e(RC,bV),e(bV,FCr),e(RC,CCr),e(ce,MCr),e(ce,SC),e(SC,$be),e($be,ECr),e(SC,yCr),e(SC,vV),e(vV,wCr),e(SC,ACr),e(ce,LCr),e(ce,PC),e(PC,Ibe),e(Ibe,BCr),e(PC,xCr),e(PC,TV),e(TV,kCr),e(PC,RCr),e(ce,SCr),e(ce,$C),e($C,jbe),e(jbe,PCr),e($C,$Cr),e($C,FV),e(FV,ICr),e($C,jCr),e(ce,DCr),e(ce,IC),e(IC,Dbe),e(Dbe,NCr),e(IC,qCr),e(IC,CV),e(CV,OCr),e(IC,GCr),e(Bo,XCr),e(Bo,Nbe),e(Nbe,VCr),e(Bo,zCr),g($A,Bo,null),b(c,oRe,u),b(c,lf,u),e(lf,jC),e(jC,qbe),g(IA,qbe,null),e(lf,WCr),e(lf,Obe),e(Obe,QCr),b(c,rRe,u),b(c,$r,u),g(jA,$r,null),e($r,HCr),e($r,df),e(df,UCr),e(df,Gbe),e(Gbe,JCr),e(df,YCr),e(df,Xbe),e(Xbe,KCr),e(df,ZCr),e($r,eMr),e($r,DA),e(DA,oMr),e(DA,Vbe),e(Vbe,rMr),e(DA,tMr),e($r,aMr),e($r,Bt),g(NA,Bt,null),e(Bt,nMr),e(Bt,zbe),e(zbe,sMr),e(Bt,lMr),e(Bt,cf),e(cf,iMr),e(cf,Wbe),e(Wbe,dMr),e(cf,cMr),e(cf,Qbe),e(Qbe,fMr),e(cf,mMr),e(Bt,gMr),e(Bt,Hbe),e(Hbe,hMr),e(Bt,pMr),g(qA,Bt,null),e($r,_Mr),e($r,xo),g(OA,xo,null),e(xo,uMr),e(xo,Ube),e(Ube,bMr),e(xo,vMr),e(xo,Rn),e(Rn,TMr),e(Rn,Jbe),e(Jbe,FMr),e(Rn,CMr),e(Rn,Ybe),e(Ybe,MMr),e(Rn,EMr),e(Rn,Kbe),e(Kbe,yMr),e(Rn,wMr),e(xo,AMr),e(xo,be),e(be,DC),e(DC,Zbe),e(Zbe,LMr),e(DC,BMr),e(DC,MV),e(MV,xMr),e(DC,kMr),e(be,RMr),e(be,NC),e(NC,eve),e(eve,SMr),e(NC,PMr),e(NC,EV),e(EV,$Mr),e(NC,IMr),e(be,jMr),e(be,qC),e(qC,ove),e(ove,DMr),e(qC,NMr),e(qC,yV),e(yV,qMr),e(qC,OMr),e(be,GMr),e(be,OC),e(OC,rve),e(rve,XMr),e(OC,VMr),e(OC,wV),e(wV,zMr),e(OC,WMr),e(be,QMr),e(be,GC),e(GC,tve),e(tve,HMr),e(GC,UMr),e(GC,AV),e(AV,JMr),e(GC,YMr),e(be,KMr),e(be,XC),e(XC,ave),e(ave,ZMr),e(XC,e4r),e(XC,LV),e(LV,o4r),e(XC,r4r),e(be,t4r),e(be,VC),e(VC,nve),e(nve,a4r),e(VC,n4r),e(VC,BV),e(BV,s4r),e(VC,l4r),e(be,i4r),e(be,zC),e(zC,sve),e(sve,d4r),e(zC,c4r),e(zC,xV),e(xV,f4r),e(zC,m4r),e(be,g4r),e(be,WC),e(WC,lve),e(lve,h4r),e(WC,p4r),e(WC,kV),e(kV,_4r),e(WC,u4r),e(be,b4r),e(be,QC),e(QC,ive),e(ive,v4r),e(QC,T4r),e(QC,RV),e(RV,F4r),e(QC,C4r),e(xo,M4r),e(xo,dve),e(dve,E4r),e(xo,y4r),g(GA,xo,null),b(c,tRe,u),b(c,ff,u),e(ff,HC),e(HC,cve),g(XA,cve,null),e(ff,w4r),e(ff,fve),e(fve,A4r),b(c,aRe,u),b(c,Ir,u),g(VA,Ir,null),e(Ir,L4r),e(Ir,mf),e(mf,B4r),e(mf,mve),e(mve,x4r),e(mf,k4r),e(mf,gve),e(gve,R4r),e(mf,S4r),e(Ir,P4r),e(Ir,zA),e(zA,$4r),e(zA,hve),e(hve,I4r),e(zA,j4r),e(Ir,D4r),e(Ir,xt),g(WA,xt,null),e(xt,N4r),e(xt,pve),e(pve,q4r),e(xt,O4r),e(xt,gf),e(gf,G4r),e(gf,_ve),e(_ve,X4r),e(gf,V4r),e(gf,uve),e(uve,z4r),e(gf,W4r),e(xt,Q4r),e(xt,bve),e(bve,H4r),e(xt,U4r),g(QA,xt,null),e(Ir,J4r),e(Ir,ko),g(HA,ko,null),e(ko,Y4r),e(ko,vve),e(vve,K4r),e(ko,Z4r),e(ko,Sn),e(Sn,eEr),e(Sn,Tve),e(Tve,oEr),e(Sn,rEr),e(Sn,Fve),e(Fve,tEr),e(Sn,aEr),e(Sn,Cve),e(Cve,nEr),e(Sn,sEr),e(ko,lEr),e(ko,Ce),e(Ce,UC),e(UC,Mve),e(Mve,iEr),e(UC,dEr),e(UC,SV),e(SV,cEr),e(UC,fEr),e(Ce,mEr),e(Ce,JC),e(JC,Eve),e(Eve,gEr),e(JC,hEr),e(JC,PV),e(PV,pEr),e(JC,_Er),e(Ce,uEr),e(Ce,YC),e(YC,yve),e(yve,bEr),e(YC,vEr),e(YC,$V),e($V,TEr),e(YC,FEr),e(Ce,CEr),e(Ce,KC),e(KC,wve),e(wve,MEr),e(KC,EEr),e(KC,IV),e(IV,yEr),e(KC,wEr),e(Ce,AEr),e(Ce,ZC),e(ZC,Ave),e(Ave,LEr),e(ZC,BEr),e(ZC,jV),e(jV,xEr),e(ZC,kEr),e(Ce,REr),e(Ce,eM),e(eM,Lve),e(Lve,SEr),e(eM,PEr),e(eM,DV),e(DV,$Er),e(eM,IEr),e(Ce,jEr),e(Ce,oM),e(oM,Bve),e(Bve,DEr),e(oM,NEr),e(oM,NV),e(NV,qEr),e(oM,OEr),e(Ce,GEr),e(Ce,rM),e(rM,xve),e(xve,XEr),e(rM,VEr),e(rM,qV),e(qV,zEr),e(rM,WEr),e(Ce,QEr),e(Ce,tM),e(tM,kve),e(kve,HEr),e(tM,UEr),e(tM,OV),e(OV,JEr),e(tM,YEr),e(ko,KEr),e(ko,Rve),e(Rve,ZEr),e(ko,e3r),g(UA,ko,null),b(c,nRe,u),b(c,hf,u),e(hf,aM),e(aM,Sve),g(JA,Sve,null),e(hf,o3r),e(hf,Pve),e(Pve,r3r),b(c,sRe,u),b(c,jr,u),g(YA,jr,null),e(jr,t3r),e(jr,pf),e(pf,a3r),e(pf,$ve),e($ve,n3r),e(pf,s3r),e(pf,Ive),e(Ive,l3r),e(pf,i3r),e(jr,d3r),e(jr,KA),e(KA,c3r),e(KA,jve),e(jve,f3r),e(KA,m3r),e(jr,g3r),e(jr,kt),g(ZA,kt,null),e(kt,h3r),e(kt,Dve),e(Dve,p3r),e(kt,_3r),e(kt,_f),e(_f,u3r),e(_f,Nve),e(Nve,b3r),e(_f,v3r),e(_f,qve),e(qve,T3r),e(_f,F3r),e(kt,C3r),e(kt,Ove),e(Ove,M3r),e(kt,E3r),g(eL,kt,null),e(jr,y3r),e(jr,Ro),g(oL,Ro,null),e(Ro,w3r),e(Ro,Gve),e(Gve,A3r),e(Ro,L3r),e(Ro,Pn),e(Pn,B3r),e(Pn,Xve),e(Xve,x3r),e(Pn,k3r),e(Pn,Vve),e(Vve,R3r),e(Pn,S3r),e(Pn,zve),e(zve,P3r),e(Pn,$3r),e(Ro,I3r),e(Ro,ve),e(ve,nM),e(nM,Wve),e(Wve,j3r),e(nM,D3r),e(nM,GV),e(GV,N3r),e(nM,q3r),e(ve,O3r),e(ve,sM),e(sM,Qve),e(Qve,G3r),e(sM,X3r),e(sM,XV),e(XV,V3r),e(sM,z3r),e(ve,W3r),e(ve,lM),e(lM,Hve),e(Hve,Q3r),e(lM,H3r),e(lM,VV),e(VV,U3r),e(lM,J3r),e(ve,Y3r),e(ve,iM),e(iM,Uve),e(Uve,K3r),e(iM,Z3r),e(iM,zV),e(zV,e5r),e(iM,o5r),e(ve,r5r),e(ve,dM),e(dM,Jve),e(Jve,t5r),e(dM,a5r),e(dM,WV),e(WV,n5r),e(dM,s5r),e(ve,l5r),e(ve,cM),e(cM,Yve),e(Yve,i5r),e(cM,d5r),e(cM,QV),e(QV,c5r),e(cM,f5r),e(ve,m5r),e(ve,fM),e(fM,Kve),e(Kve,g5r),e(fM,h5r),e(fM,HV),e(HV,p5r),e(fM,_5r),e(ve,u5r),e(ve,mM),e(mM,Zve),e(Zve,b5r),e(mM,v5r),e(mM,UV),e(UV,T5r),e(mM,F5r),e(ve,C5r),e(ve,gM),e(gM,e6e),e(e6e,M5r),e(gM,E5r),e(gM,JV),e(JV,y5r),e(gM,w5r),e(ve,A5r),e(ve,hM),e(hM,o6e),e(o6e,L5r),e(hM,B5r),e(hM,YV),e(YV,x5r),e(hM,k5r),e(Ro,R5r),e(Ro,r6e),e(r6e,S5r),e(Ro,P5r),g(rL,Ro,null),b(c,lRe,u),b(c,uf,u),e(uf,pM),e(pM,t6e),g(tL,t6e,null),e(uf,$5r),e(uf,a6e),e(a6e,I5r),b(c,iRe,u),b(c,Dr,u),g(aL,Dr,null),e(Dr,j5r),e(Dr,bf),e(bf,D5r),e(bf,n6e),e(n6e,N5r),e(bf,q5r),e(bf,s6e),e(s6e,O5r),e(bf,G5r),e(Dr,X5r),e(Dr,nL),e(nL,V5r),e(nL,l6e),e(l6e,z5r),e(nL,W5r),e(Dr,Q5r),e(Dr,Rt),g(sL,Rt,null),e(Rt,H5r),e(Rt,i6e),e(i6e,U5r),e(Rt,J5r),e(Rt,vf),e(vf,Y5r),e(vf,d6e),e(d6e,K5r),e(vf,Z5r),e(vf,c6e),e(c6e,eyr),e(vf,oyr),e(Rt,ryr),e(Rt,f6e),e(f6e,tyr),e(Rt,ayr),g(lL,Rt,null),e(Dr,nyr),e(Dr,So),g(iL,So,null),e(So,syr),e(So,m6e),e(m6e,lyr),e(So,iyr),e(So,$n),e($n,dyr),e($n,g6e),e(g6e,cyr),e($n,fyr),e($n,h6e),e(h6e,myr),e($n,gyr),e($n,p6e),e(p6e,hyr),e($n,pyr),e(So,_yr),e(So,Te),e(Te,_M),e(_M,_6e),e(_6e,uyr),e(_M,byr),e(_M,KV),e(KV,vyr),e(_M,Tyr),e(Te,Fyr),e(Te,uM),e(uM,u6e),e(u6e,Cyr),e(uM,Myr),e(uM,ZV),e(ZV,Eyr),e(uM,yyr),e(Te,wyr),e(Te,bM),e(bM,b6e),e(b6e,Ayr),e(bM,Lyr),e(bM,ez),e(ez,Byr),e(bM,xyr),e(Te,kyr),e(Te,vM),e(vM,v6e),e(v6e,Ryr),e(vM,Syr),e(vM,oz),e(oz,Pyr),e(vM,$yr),e(Te,Iyr),e(Te,TM),e(TM,T6e),e(T6e,jyr),e(TM,Dyr),e(TM,rz),e(rz,Nyr),e(TM,qyr),e(Te,Oyr),e(Te,FM),e(FM,F6e),e(F6e,Gyr),e(FM,Xyr),e(FM,tz),e(tz,Vyr),e(FM,zyr),e(Te,Wyr),e(Te,CM),e(CM,C6e),e(C6e,Qyr),e(CM,Hyr),e(CM,az),e(az,Uyr),e(CM,Jyr),e(Te,Yyr),e(Te,MM),e(MM,M6e),e(M6e,Kyr),e(MM,Zyr),e(MM,nz),e(nz,ewr),e(MM,owr),e(Te,rwr),e(Te,EM),e(EM,E6e),e(E6e,twr),e(EM,awr),e(EM,sz),e(sz,nwr),e(EM,swr),e(Te,lwr),e(Te,yM),e(yM,y6e),e(y6e,iwr),e(yM,dwr),e(yM,lz),e(lz,cwr),e(yM,fwr),e(So,mwr),e(So,w6e),e(w6e,gwr),e(So,hwr),g(dL,So,null),b(c,dRe,u),b(c,Tf,u),e(Tf,wM),e(wM,A6e),g(cL,A6e,null),e(Tf,pwr),e(Tf,L6e),e(L6e,_wr),b(c,cRe,u),b(c,Nr,u),g(fL,Nr,null),e(Nr,uwr),e(Nr,Ff),e(Ff,bwr),e(Ff,B6e),e(B6e,vwr),e(Ff,Twr),e(Ff,x6e),e(x6e,Fwr),e(Ff,Cwr),e(Nr,Mwr),e(Nr,mL),e(mL,Ewr),e(mL,k6e),e(k6e,ywr),e(mL,wwr),e(Nr,Awr),e(Nr,St),g(gL,St,null),e(St,Lwr),e(St,R6e),e(R6e,Bwr),e(St,xwr),e(St,Cf),e(Cf,kwr),e(Cf,S6e),e(S6e,Rwr),e(Cf,Swr),e(Cf,P6e),e(P6e,Pwr),e(Cf,$wr),e(St,Iwr),e(St,$6e),e($6e,jwr),e(St,Dwr),g(hL,St,null),e(Nr,Nwr),e(Nr,Po),g(pL,Po,null),e(Po,qwr),e(Po,I6e),e(I6e,Owr),e(Po,Gwr),e(Po,In),e(In,Xwr),e(In,j6e),e(j6e,Vwr),e(In,zwr),e(In,D6e),e(D6e,Wwr),e(In,Qwr),e(In,N6e),e(N6e,Hwr),e(In,Uwr),e(Po,Jwr),e(Po,Se),e(Se,AM),e(AM,q6e),e(q6e,Ywr),e(AM,Kwr),e(AM,iz),e(iz,Zwr),e(AM,eAr),e(Se,oAr),e(Se,LM),e(LM,O6e),e(O6e,rAr),e(LM,tAr),e(LM,dz),e(dz,aAr),e(LM,nAr),e(Se,sAr),e(Se,BM),e(BM,G6e),e(G6e,lAr),e(BM,iAr),e(BM,cz),e(cz,dAr),e(BM,cAr),e(Se,fAr),e(Se,xM),e(xM,X6e),e(X6e,mAr),e(xM,gAr),e(xM,fz),e(fz,hAr),e(xM,pAr),e(Se,_Ar),e(Se,kM),e(kM,V6e),e(V6e,uAr),e(kM,bAr),e(kM,mz),e(mz,vAr),e(kM,TAr),e(Se,FAr),e(Se,RM),e(RM,z6e),e(z6e,CAr),e(RM,MAr),e(RM,gz),e(gz,EAr),e(RM,yAr),e(Se,wAr),e(Se,SM),e(SM,W6e),e(W6e,AAr),e(SM,LAr),e(SM,hz),e(hz,BAr),e(SM,xAr),e(Se,kAr),e(Se,PM),e(PM,Q6e),e(Q6e,RAr),e(PM,SAr),e(PM,pz),e(pz,PAr),e(PM,$Ar),e(Po,IAr),e(Po,H6e),e(H6e,jAr),e(Po,DAr),g(_L,Po,null),b(c,fRe,u),b(c,Mf,u),e(Mf,$M),e($M,U6e),g(uL,U6e,null),e(Mf,NAr),e(Mf,J6e),e(J6e,qAr),b(c,mRe,u),b(c,qr,u),g(bL,qr,null),e(qr,OAr),e(qr,Ef),e(Ef,GAr),e(Ef,Y6e),e(Y6e,XAr),e(Ef,VAr),e(Ef,K6e),e(K6e,zAr),e(Ef,WAr),e(qr,QAr),e(qr,vL),e(vL,HAr),e(vL,Z6e),e(Z6e,UAr),e(vL,JAr),e(qr,YAr),e(qr,Pt),g(TL,Pt,null),e(Pt,KAr),e(Pt,e0e),e(e0e,ZAr),e(Pt,eLr),e(Pt,yf),e(yf,oLr),e(yf,o0e),e(o0e,rLr),e(yf,tLr),e(yf,r0e),e(r0e,aLr),e(yf,nLr),e(Pt,sLr),e(Pt,t0e),e(t0e,lLr),e(Pt,iLr),g(FL,Pt,null),e(qr,dLr),e(qr,$o),g(CL,$o,null),e($o,cLr),e($o,a0e),e(a0e,fLr),e($o,mLr),e($o,jn),e(jn,gLr),e(jn,n0e),e(n0e,hLr),e(jn,pLr),e(jn,s0e),e(s0e,_Lr),e(jn,uLr),e(jn,l0e),e(l0e,bLr),e(jn,vLr),e($o,TLr),e($o,Pe),e(Pe,IM),e(IM,i0e),e(i0e,FLr),e(IM,CLr),e(IM,_z),e(_z,MLr),e(IM,ELr),e(Pe,yLr),e(Pe,jM),e(jM,d0e),e(d0e,wLr),e(jM,ALr),e(jM,uz),e(uz,LLr),e(jM,BLr),e(Pe,xLr),e(Pe,DM),e(DM,c0e),e(c0e,kLr),e(DM,RLr),e(DM,bz),e(bz,SLr),e(DM,PLr),e(Pe,$Lr),e(Pe,NM),e(NM,f0e),e(f0e,ILr),e(NM,jLr),e(NM,vz),e(vz,DLr),e(NM,NLr),e(Pe,qLr),e(Pe,qM),e(qM,m0e),e(m0e,OLr),e(qM,GLr),e(qM,Tz),e(Tz,XLr),e(qM,VLr),e(Pe,zLr),e(Pe,OM),e(OM,g0e),e(g0e,WLr),e(OM,QLr),e(OM,Fz),e(Fz,HLr),e(OM,ULr),e(Pe,JLr),e(Pe,GM),e(GM,h0e),e(h0e,YLr),e(GM,KLr),e(GM,Cz),e(Cz,ZLr),e(GM,e8r),e(Pe,o8r),e(Pe,XM),e(XM,p0e),e(p0e,r8r),e(XM,t8r),e(XM,Mz),e(Mz,a8r),e(XM,n8r),e($o,s8r),e($o,_0e),e(_0e,l8r),e($o,i8r),g(ML,$o,null),b(c,gRe,u),b(c,wf,u),e(wf,VM),e(VM,u0e),g(EL,u0e,null),e(wf,d8r),e(wf,b0e),e(b0e,c8r),b(c,hRe,u),b(c,Or,u),g(yL,Or,null),e(Or,f8r),e(Or,Af),e(Af,m8r),e(Af,v0e),e(v0e,g8r),e(Af,h8r),e(Af,T0e),e(T0e,p8r),e(Af,_8r),e(Or,u8r),e(Or,wL),e(wL,b8r),e(wL,F0e),e(F0e,v8r),e(wL,T8r),e(Or,F8r),e(Or,$t),g(AL,$t,null),e($t,C8r),e($t,C0e),e(C0e,M8r),e($t,E8r),e($t,Lf),e(Lf,y8r),e(Lf,M0e),e(M0e,w8r),e(Lf,A8r),e(Lf,E0e),e(E0e,L8r),e(Lf,B8r),e($t,x8r),e($t,y0e),e(y0e,k8r),e($t,R8r),g(LL,$t,null),e(Or,S8r),e(Or,Io),g(BL,Io,null),e(Io,P8r),e(Io,w0e),e(w0e,$8r),e(Io,I8r),e(Io,Dn),e(Dn,j8r),e(Dn,A0e),e(A0e,D8r),e(Dn,N8r),e(Dn,L0e),e(L0e,q8r),e(Dn,O8r),e(Dn,B0e),e(B0e,G8r),e(Dn,X8r),e(Io,V8r),e(Io,x0e),e(x0e,zM),e(zM,k0e),e(k0e,z8r),e(zM,W8r),e(zM,Ez),e(Ez,Q8r),e(zM,H8r),e(Io,U8r),e(Io,R0e),e(R0e,J8r),e(Io,Y8r),g(xL,Io,null),b(c,pRe,u),b(c,Bf,u),e(Bf,WM),e(WM,S0e),g(kL,S0e,null),e(Bf,K8r),e(Bf,P0e),e(P0e,Z8r),b(c,_Re,u),b(c,Gr,u),g(RL,Gr,null),e(Gr,e9r),e(Gr,xf),e(xf,o9r),e(xf,$0e),e($0e,r9r),e(xf,t9r),e(xf,I0e),e(I0e,a9r),e(xf,n9r),e(Gr,s9r),e(Gr,SL),e(SL,l9r),e(SL,j0e),e(j0e,i9r),e(SL,d9r),e(Gr,c9r),e(Gr,It),g(PL,It,null),e(It,f9r),e(It,D0e),e(D0e,m9r),e(It,g9r),e(It,kf),e(kf,h9r),e(kf,N0e),e(N0e,p9r),e(kf,_9r),e(kf,q0e),e(q0e,u9r),e(kf,b9r),e(It,v9r),e(It,O0e),e(O0e,T9r),e(It,F9r),g($L,It,null),e(Gr,C9r),e(Gr,jo),g(IL,jo,null),e(jo,M9r),e(jo,G0e),e(G0e,E9r),e(jo,y9r),e(jo,Nn),e(Nn,w9r),e(Nn,X0e),e(X0e,A9r),e(Nn,L9r),e(Nn,V0e),e(V0e,B9r),e(Nn,x9r),e(Nn,z0e),e(z0e,k9r),e(Nn,R9r),e(jo,S9r),e(jo,jL),e(jL,QM),e(QM,W0e),e(W0e,P9r),e(QM,$9r),e(QM,yz),e(yz,I9r),e(QM,j9r),e(jL,D9r),e(jL,HM),e(HM,Q0e),e(Q0e,N9r),e(HM,q9r),e(HM,wz),e(wz,O9r),e(HM,G9r),e(jo,X9r),e(jo,H0e),e(H0e,V9r),e(jo,z9r),g(DL,jo,null),b(c,uRe,u),b(c,Rf,u),e(Rf,UM),e(UM,U0e),g(NL,U0e,null),e(Rf,W9r),e(Rf,J0e),e(J0e,Q9r),b(c,bRe,u),b(c,Xr,u),g(qL,Xr,null),e(Xr,H9r),e(Xr,Sf),e(Sf,U9r),e(Sf,Y0e),e(Y0e,J9r),e(Sf,Y9r),e(Sf,K0e),e(K0e,K9r),e(Sf,Z9r),e(Xr,eBr),e(Xr,OL),e(OL,oBr),e(OL,Z0e),e(Z0e,rBr),e(OL,tBr),e(Xr,aBr),e(Xr,jt),g(GL,jt,null),e(jt,nBr),e(jt,eTe),e(eTe,sBr),e(jt,lBr),e(jt,Pf),e(Pf,iBr),e(Pf,oTe),e(oTe,dBr),e(Pf,cBr),e(Pf,rTe),e(rTe,fBr),e(Pf,mBr),e(jt,gBr),e(jt,tTe),e(tTe,hBr),e(jt,pBr),g(XL,jt,null),e(Xr,_Br),e(Xr,Do),g(VL,Do,null),e(Do,uBr),e(Do,aTe),e(aTe,bBr),e(Do,vBr),e(Do,qn),e(qn,TBr),e(qn,nTe),e(nTe,FBr),e(qn,CBr),e(qn,sTe),e(sTe,MBr),e(qn,EBr),e(qn,lTe),e(lTe,yBr),e(qn,wBr),e(Do,ABr),e(Do,iTe),e(iTe,JM),e(JM,dTe),e(dTe,LBr),e(JM,BBr),e(JM,Az),e(Az,xBr),e(JM,kBr),e(Do,RBr),e(Do,cTe),e(cTe,SBr),e(Do,PBr),g(zL,Do,null),vRe=!0},p(c,[u]){const WL={};u&2&&(WL.$$scope={dirty:u,ctx:c}),Of.$set(WL);const fTe={};u&2&&(fTe.$$scope={dirty:u,ctx:c}),wh.$set(fTe);const mTe={};u&2&&(mTe.$$scope={dirty:u,ctx:c}),jh.$set(mTe)},i(c){vRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(eE.$$.fragment,c),h(oE.$$.fragment,c),h(Of.$$.fragment,c),h(rE.$$.fragment,c),h(tE.$$.fragment,c),h(sE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(TE.$$.fragment,c),h(wh.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(AE.$$.fragment,c),h(jh.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(DE.$$.fragment,c),h(qE.$$.fragment,c),h(OE.$$.fragment,c),h(GE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(N3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(e5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(N5.$$.fragment,c),h(O5.$$.fragment,c),h(G5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(Oy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Gw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(NL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),vRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(eE.$$.fragment,c),p(oE.$$.fragment,c),p(Of.$$.fragment,c),p(rE.$$.fragment,c),p(tE.$$.fragment,c),p(sE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(TE.$$.fragment,c),p(wh.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(AE.$$.fragment,c),p(jh.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(DE.$$.fragment,c),p(qE.$$.fragment,c),p(OE.$$.fragment,c),p(GE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(N3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(e5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(y5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(N5.$$.fragment,c),p(O5.$$.fragment,c),p(G5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(Oy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Ow.$$.fragment,c),p(Gw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(DL.$$.fragment,c),p(NL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),vRe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Df),_(qa,c),c&&t(fo),c&&t(he),c&&t(zo),c&&t(Oa),c&&t(bxe),c&&t(Vi),_(eE),c&&t(vxe),c&&t(zn),c&&t(Txe),_(oE,c),c&&t(Fxe),c&&t(H8),c&&t(Cxe),_(Of,c),c&&t(Mxe),c&&t(zi),_(rE),c&&t(Exe),c&&t(Wo),_(tE),_(sE),_(lE),_(iE),c&&t(yxe),c&&t(Qi),_(dE),c&&t(wxe),c&&t(Qo),_(cE),_(gE),_(hE),_(pE),c&&t(Axe),c&&t(Hi),_(_E),c&&t(Lxe),c&&t(Ho),_(uE),_(TE),_(wh),_(FE),_(CE),c&&t(Bxe),c&&t(Ui),_(ME),c&&t(xxe),c&&t(Uo),_(EE),_(AE),_(jh),_(LE),_(BE),c&&t(kxe),c&&t(Yi),_(xE),c&&t(Rxe),c&&t(Jo),_(kE),_(SE),_(PE),_($E),_(IE),c&&t(Sxe),c&&t(ed),_(jE),c&&t(Pxe),c&&t(Yo),_(DE),_(qE),_(OE),_(GE),_(XE),c&&t($xe),c&&t(td),_(VE),c&&t(Ixe),c&&t(Ko),_(zE),_(QE),_(HE),_(UE),_(JE),c&&t(jxe),c&&t(sd),_(YE),c&&t(Dxe),c&&t(Zo),_(KE),_(e3),_(o3),_(r3),_(t3),c&&t(Nxe),c&&t(dd),_(a3),c&&t(qxe),c&&t(er),_(n3),_(l3),_(i3),_(d3),_(c3),c&&t(Oxe),c&&t(md),_(f3),c&&t(Gxe),c&&t(or),_(m3),_(h3),_(p3),_(_3),_(u3),c&&t(Xxe),c&&t(pd),_(b3),c&&t(Vxe),c&&t(rr),_(v3),_(F3),_(C3),_(M3),_(E3),c&&t(zxe),c&&t(bd),_(y3),c&&t(Wxe),c&&t(tr),_(w3),_(L3),_(B3),_(x3),_(k3),c&&t(Qxe),c&&t(Fd),_(R3),c&&t(Hxe),c&&t(ar),_(S3),_($3),_(I3),_(j3),_(D3),c&&t(Uxe),c&&t(Ed),_(N3),c&&t(Jxe),c&&t(nr),_(q3),_(G3),_(X3),_(V3),_(z3),c&&t(Yxe),c&&t(Ad),_(W3),c&&t(Kxe),c&&t(sr),_(Q3),_(U3),_(J3),_(Y3),_(K3),c&&t(Zxe),c&&t(xd),_(Z3),c&&t(eke),c&&t(lr),_(e5),_(r5),_(t5),_(a5),_(n5),c&&t(oke),c&&t(Sd),_(s5),c&&t(rke),c&&t(ir),_(l5),_(d5),_(c5),_(f5),_(m5),c&&t(tke),c&&t(Id),_(g5),c&&t(ake),c&&t(dr),_(h5),_(_5),_(u5),_(b5),_(v5),c&&t(nke),c&&t(Nd),_(T5),c&&t(ske),c&&t(cr),_(F5),_(M5),_(E5),_(y5),_(w5),c&&t(lke),c&&t(Gd),_(A5),c&&t(ike),c&&t(fr),_(L5),_(x5),_(k5),_(R5),_(S5),c&&t(dke),c&&t(zd),_(P5),c&&t(cke),c&&t(mr),_($5),_(j5),_(D5),_(N5),_(O5),c&&t(fke),c&&t(Hd),_(G5),c&&t(mke),c&&t(gr),_(X5),_(z5),_(W5),_(Q5),_(H5),c&&t(gke),c&&t(Yd),_(U5),c&&t(hke),c&&t(hr),_(J5),_(K5),_(Z5),_(ey),_(oy),c&&t(pke),c&&t(oc),_(ry),c&&t(_ke),c&&t(pr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(uke),c&&t(ac),_(dy),c&&t(bke),c&&t(_r),_(cy),_(my),_(gy),_(hy),_(py),c&&t(vke),c&&t(lc),_(_y),c&&t(Tke),c&&t(ur),_(uy),_(vy),_(Ty),_(Fy),_(My),c&&t(Fke),c&&t(cc),_(Ey),c&&t(Cke),c&&t(br),_(yy),_(Ay),_(Ly),_(By),_(xy),c&&t(Mke),c&&t(gc),_(ky),c&&t(Eke),c&&t(vr),_(Ry),_(Py),_($y),_(Iy),_(jy),c&&t(yke),c&&t(_c),_(Dy),c&&t(wke),c&&t(Tr),_(Ny),_(Oy),_(Gy),_(Xy),_(Vy),c&&t(Ake),c&&t(vc),_(zy),c&&t(Lke),c&&t(Fr),_(Wy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(Bke),c&&t(Cc),_(Ky),c&&t(xke),c&&t(Cr),_(Zy),_(ow),_(rw),_(tw),_(nw),c&&t(kke),c&&t(yc),_(sw),c&&t(Rke),c&&t(Mr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(Ske),c&&t(Lc),_(gw),c&&t(Pke),c&&t(Er),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t($ke),c&&t(kc),_(Tw),c&&t(Ike),c&&t(yr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),c&&t(jke),c&&t(Pc),_(Aw),c&&t(Dke),c&&t(wr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t(Nke),c&&t(jc),_(Pw),c&&t(qke),c&&t(Ar),_($w),_(jw),_(Dw),_(Nw),_(qw),c&&t(Oke),c&&t(qc),_(Ow),c&&t(Gke),c&&t(Lr),_(Gw),_(Vw),_(zw),_(Ww),_(Qw),c&&t(Xke),c&&t(Xc),_(Hw),c&&t(Vke),c&&t(Br),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(zke),c&&t(Wc),_(oA),c&&t(Wke),c&&t(xr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(Qke),c&&t(Uc),_(iA),c&&t(Hke),c&&t(kr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(Uke),c&&t(Kc),_(pA),c&&t(Jke),c&&t(Rr),_(_A),_(bA),_(vA),_(TA),_(FA),c&&t(Yke),c&&t(of),_(CA),c&&t(Kke),c&&t(Sr),_(MA),_(yA),_(wA),_(AA),_(LA),c&&t(Zke),c&&t(af),_(BA),c&&t(eRe),c&&t(Pr),_(xA),_(RA),_(SA),_(PA),_($A),c&&t(oRe),c&&t(lf),_(IA),c&&t(rRe),c&&t($r),_(jA),_(NA),_(qA),_(OA),_(GA),c&&t(tRe),c&&t(ff),_(XA),c&&t(aRe),c&&t(Ir),_(VA),_(WA),_(QA),_(HA),_(UA),c&&t(nRe),c&&t(hf),_(JA),c&&t(sRe),c&&t(jr),_(YA),_(ZA),_(eL),_(oL),_(rL),c&&t(lRe),c&&t(uf),_(tL),c&&t(iRe),c&&t(Dr),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(dRe),c&&t(Tf),_(cL),c&&t(cRe),c&&t(Nr),_(fL),_(gL),_(hL),_(pL),_(_L),c&&t(fRe),c&&t(Mf),_(uL),c&&t(mRe),c&&t(qr),_(bL),_(TL),_(FL),_(CL),_(ML),c&&t(gRe),c&&t(wf),_(EL),c&&t(hRe),c&&t(Or),_(yL),_(AL),_(LL),_(BL),_(xL),c&&t(pRe),c&&t(Bf),_(kL),c&&t(_Re),c&&t(Gr),_(RL),_(PL),_($L),_(IL),_(DL),c&&t(uRe),c&&t(Rf),_(NL),c&&t(bRe),c&&t(Xr),_(qL),_(GL),_(XL),_(VL),_(zL)}}}const C7t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function M7t(Ii,J,$e){let{fw:de}=J;return Ii.$$set=ge=>{"fw"in ge&&$e(0,de=ge.fw)},[de]}class x7t extends h7t{constructor(J){super();p7t(this,J,M7t,F7t,_7t,{fw:0})}}export{x7t as default,C7t as metadata};
