import{S as LCt,i as BCt,s as xCt,e as a,k as l,w as f,t as o,M as kCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as RCt}from"../../chunks/vendor-6b77c823.js";import{T as uRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function SCt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,g4,Nf,Be,co,ji,Gn,h4,On,Xn,p4,qi,Vn,_4,Gi,jf,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Df=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),g4=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),h4=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),p4=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),_4=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var n9=s(de);Ee=r(n9,"NewModelConfig"),n9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var s9=s(Ii);Df=r(s9,"model_type"),s9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Di=n(_e,"CODE",{});var l9=s(Di);Ni=r(l9,'"new-model"'),l9.forEach(t),g4=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),h4=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var i9=s(On);Xn=r(i9,"PreTrainedModel"),i9.forEach(t),p4=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var qf=s(qi);Vn=r(qf,"config_class"),qf.forEach(t),_4=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var d9=s(Gi);jf=r(d9,"NewModelConfig"),d9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,me),e(me,Ce),e(Z,Vo),e(Z,Ii),e(Ii,Df),e(Z,fa),e(Z,Di),e(Di,Ni),e(Z,g4),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,h4),e(Be,On),e(On,Xn),e(Be,p4),e(Be,qi),e(qi,Vn),e(Be,_4),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(Be)}}}function PCt(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function $Ct(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function ICt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,g4,Nf,Be,co,ji,Gn,h4,On,Xn,p4,qi,Vn,_4,Gi,jf,qa,fo,_e,n9,Oi,s9,l9,zo,Ga,i9,qf,d9,O$e,Bke,Xi,Gf,ZQ,u4,X$e,eH,V$e,xke,zn,z$e,oH,W$e,Q$e,rH,H$e,U$e,kke,b4,Rke,c9,J$e,Ske,Of,Pke,Vi,Xf,tH,v4,Y$e,aH,K$e,$ke,Wo,T4,Z$e,F4,eIe,f9,oIe,rIe,tIe,C4,aIe,nH,nIe,sIe,lIe,mo,M4,iIe,sH,dIe,cIe,zi,fIe,lH,mIe,gIe,iH,hIe,pIe,_Ie,v,Vf,dH,uIe,bIe,m9,vIe,TIe,FIe,zf,cH,CIe,MIe,g9,EIe,yIe,wIe,Wf,fH,AIe,LIe,h9,BIe,xIe,kIe,Qf,mH,RIe,SIe,p9,PIe,$Ie,IIe,Hf,gH,DIe,NIe,_9,jIe,qIe,GIe,Uf,hH,OIe,XIe,u9,VIe,zIe,WIe,Jf,pH,QIe,HIe,b9,UIe,JIe,YIe,Yf,_H,KIe,ZIe,v9,eDe,oDe,rDe,Kf,uH,tDe,aDe,T9,nDe,sDe,lDe,Zf,bH,iDe,dDe,F9,cDe,fDe,mDe,em,vH,gDe,hDe,C9,pDe,_De,uDe,om,TH,bDe,vDe,M9,TDe,FDe,CDe,rm,FH,MDe,EDe,E9,yDe,wDe,ADe,tm,CH,LDe,BDe,y9,xDe,kDe,RDe,am,MH,SDe,PDe,w9,$De,IDe,DDe,nm,EH,NDe,jDe,A9,qDe,GDe,ODe,sm,yH,XDe,VDe,L9,zDe,WDe,QDe,lm,wH,HDe,UDe,B9,JDe,YDe,KDe,im,AH,ZDe,eNe,x9,oNe,rNe,tNe,dm,LH,aNe,nNe,k9,sNe,lNe,iNe,cm,BH,dNe,cNe,R9,fNe,mNe,gNe,fm,xH,hNe,pNe,S9,_Ne,uNe,bNe,mm,kH,vNe,TNe,P9,FNe,CNe,MNe,gm,RH,ENe,yNe,$9,wNe,ANe,LNe,hm,SH,BNe,xNe,I9,kNe,RNe,SNe,pm,PH,PNe,$Ne,D9,INe,DNe,NNe,_m,$H,jNe,qNe,N9,GNe,ONe,XNe,um,IH,VNe,zNe,j9,WNe,QNe,HNe,bm,DH,UNe,JNe,q9,YNe,KNe,ZNe,vm,NH,eje,oje,G9,rje,tje,aje,Tm,jH,nje,sje,O9,lje,ije,dje,Fm,qH,cje,fje,X9,mje,gje,hje,Cm,GH,pje,_je,V9,uje,bje,vje,Mm,OH,Tje,Fje,z9,Cje,Mje,Eje,Em,XH,yje,wje,W9,Aje,Lje,Bje,ym,VH,xje,kje,Q9,Rje,Sje,Pje,wm,zH,$je,Ije,H9,Dje,Nje,jje,Am,WH,qje,Gje,U9,Oje,Xje,Vje,Lm,QH,zje,Wje,J9,Qje,Hje,Uje,Bm,HH,Jje,Yje,Y9,Kje,Zje,eqe,xm,UH,oqe,rqe,K9,tqe,aqe,nqe,km,JH,sqe,lqe,Z9,iqe,dqe,cqe,Rm,YH,fqe,mqe,eB,gqe,hqe,pqe,Sm,KH,_qe,uqe,oB,bqe,vqe,Tqe,Pm,ZH,Fqe,Cqe,rB,Mqe,Eqe,yqe,$m,eU,wqe,Aqe,tB,Lqe,Bqe,xqe,Im,oU,kqe,Rqe,aB,Sqe,Pqe,$qe,Dm,rU,Iqe,Dqe,nB,Nqe,jqe,qqe,Nm,tU,Gqe,Oqe,sB,Xqe,Vqe,zqe,jm,aU,Wqe,Qqe,lB,Hqe,Uqe,Jqe,qm,nU,Yqe,Kqe,iB,Zqe,eGe,oGe,Gm,sU,rGe,tGe,dB,aGe,nGe,sGe,Om,lU,lGe,iGe,cB,dGe,cGe,fGe,Xm,iU,mGe,gGe,fB,hGe,pGe,_Ge,Vm,dU,uGe,bGe,mB,vGe,TGe,FGe,zm,cU,CGe,MGe,gB,EGe,yGe,wGe,Wm,fU,AGe,LGe,hB,BGe,xGe,kGe,Qm,mU,RGe,SGe,pB,PGe,$Ge,IGe,Hm,gU,DGe,NGe,_B,jGe,qGe,GGe,Um,hU,OGe,XGe,uB,VGe,zGe,WGe,Jm,pU,QGe,HGe,bB,UGe,JGe,YGe,Ym,_U,KGe,ZGe,vB,eOe,oOe,rOe,Km,uU,tOe,aOe,TB,nOe,sOe,lOe,Zm,bU,iOe,dOe,FB,cOe,fOe,mOe,eg,vU,gOe,hOe,CB,pOe,_Oe,uOe,og,TU,bOe,vOe,MB,TOe,FOe,COe,rg,FU,MOe,EOe,EB,yOe,wOe,AOe,tg,CU,LOe,BOe,yB,xOe,kOe,ROe,ag,MU,SOe,POe,wB,$Oe,IOe,DOe,ng,EU,NOe,jOe,AB,qOe,GOe,OOe,sg,yU,XOe,VOe,LB,zOe,WOe,QOe,lg,wU,HOe,UOe,BB,JOe,YOe,KOe,ig,AU,ZOe,eXe,xB,oXe,rXe,tXe,dg,LU,aXe,nXe,kB,sXe,lXe,iXe,cg,BU,dXe,cXe,RB,fXe,mXe,gXe,fg,xU,hXe,pXe,SB,_Xe,uXe,bXe,mg,kU,vXe,TXe,PB,FXe,CXe,MXe,gg,RU,EXe,yXe,$B,wXe,AXe,LXe,hg,SU,BXe,xXe,IB,kXe,RXe,SXe,pg,PU,PXe,$Xe,DB,IXe,DXe,NXe,_g,$U,jXe,qXe,NB,GXe,OXe,XXe,ug,IU,VXe,zXe,jB,WXe,QXe,HXe,bg,DU,UXe,JXe,qB,YXe,KXe,ZXe,vg,NU,eVe,oVe,GB,rVe,tVe,aVe,Tg,jU,nVe,sVe,OB,lVe,iVe,dVe,Fg,qU,cVe,fVe,XB,mVe,gVe,hVe,Cg,GU,pVe,_Ve,VB,uVe,bVe,vVe,Mg,OU,TVe,FVe,zB,CVe,MVe,EVe,Eg,XU,yVe,wVe,WB,AVe,LVe,BVe,yg,VU,xVe,kVe,QB,RVe,SVe,PVe,wg,zU,$Ve,IVe,HB,DVe,NVe,jVe,Ag,WU,qVe,GVe,UB,OVe,XVe,VVe,Lg,QU,zVe,WVe,JB,QVe,HVe,UVe,Bg,HU,JVe,YVe,YB,KVe,ZVe,eze,xg,UU,oze,rze,KB,tze,aze,nze,kg,JU,sze,lze,ZB,ize,dze,cze,Rg,YU,fze,mze,ex,gze,hze,pze,Sg,KU,_ze,uze,ox,bze,vze,Tze,Pg,ZU,Fze,Cze,rx,Mze,Eze,yze,eJ,wze,Aze,E4,Lze,$g,y4,Bze,oJ,xze,Ike,Wi,Ig,rJ,w4,kze,tJ,Rze,Dke,Qo,A4,Sze,L4,Pze,tx,$ze,Ize,Dze,B4,Nze,aJ,jze,qze,Gze,go,x4,Oze,nJ,Xze,Vze,Oa,zze,sJ,Wze,Qze,lJ,Hze,Uze,iJ,Jze,Yze,Kze,E,Wn,dJ,Zze,eWe,ax,oWe,rWe,nx,tWe,aWe,nWe,Qn,cJ,sWe,lWe,sx,iWe,dWe,lx,cWe,fWe,mWe,Hn,fJ,gWe,hWe,ix,pWe,_We,dx,uWe,bWe,vWe,Dg,mJ,TWe,FWe,cx,CWe,MWe,EWe,Un,gJ,yWe,wWe,fx,AWe,LWe,mx,BWe,xWe,kWe,Ng,hJ,RWe,SWe,gx,PWe,$We,IWe,jg,pJ,DWe,NWe,hx,jWe,qWe,GWe,qg,_J,OWe,XWe,px,VWe,zWe,WWe,Jn,uJ,QWe,HWe,_x,UWe,JWe,ux,YWe,KWe,ZWe,Yn,bJ,eQe,oQe,bx,rQe,tQe,vx,aQe,nQe,sQe,Kn,vJ,lQe,iQe,Tx,dQe,cQe,Fx,fQe,mQe,gQe,Gg,TJ,hQe,pQe,Cx,_Qe,uQe,bQe,Og,FJ,vQe,TQe,Mx,FQe,CQe,MQe,Zn,CJ,EQe,yQe,Ex,wQe,AQe,yx,LQe,BQe,xQe,Xg,MJ,kQe,RQe,wx,SQe,PQe,$Qe,es,EJ,IQe,DQe,Ax,NQe,jQe,Lx,qQe,GQe,OQe,os,yJ,XQe,VQe,Bx,zQe,WQe,xx,QQe,HQe,UQe,rs,wJ,JQe,YQe,kx,KQe,ZQe,AJ,eHe,oHe,rHe,Vg,LJ,tHe,aHe,Rx,nHe,sHe,lHe,ts,BJ,iHe,dHe,Sx,cHe,fHe,Px,mHe,gHe,hHe,zg,xJ,pHe,_He,$x,uHe,bHe,vHe,as,kJ,THe,FHe,Ix,CHe,MHe,Dx,EHe,yHe,wHe,ns,RJ,AHe,LHe,Nx,BHe,xHe,jx,kHe,RHe,SHe,ss,SJ,PHe,$He,qx,IHe,DHe,Gx,NHe,jHe,qHe,Wg,PJ,GHe,OHe,Ox,XHe,VHe,zHe,ls,$J,WHe,QHe,Xx,HHe,UHe,Vx,JHe,YHe,KHe,Qg,IJ,ZHe,eUe,zx,oUe,rUe,tUe,is,DJ,aUe,nUe,Wx,sUe,lUe,Qx,iUe,dUe,cUe,ds,NJ,fUe,mUe,Hx,gUe,hUe,Ux,pUe,_Ue,uUe,cs,jJ,bUe,vUe,Jx,TUe,FUe,Yx,CUe,MUe,EUe,fs,qJ,yUe,wUe,Kx,AUe,LUe,Zx,BUe,xUe,kUe,Hg,GJ,RUe,SUe,ek,PUe,$Ue,IUe,ms,OJ,DUe,NUe,ok,jUe,qUe,rk,GUe,OUe,XUe,gs,XJ,VUe,zUe,tk,WUe,QUe,ak,HUe,UUe,JUe,hs,VJ,YUe,KUe,nk,ZUe,eJe,sk,oJe,rJe,tJe,ps,zJ,aJe,nJe,lk,sJe,lJe,ik,iJe,dJe,cJe,_s,WJ,fJe,mJe,dk,gJe,hJe,ck,pJe,_Je,uJe,us,QJ,bJe,vJe,fk,TJe,FJe,mk,CJe,MJe,EJe,Ug,HJ,yJe,wJe,gk,AJe,LJe,BJe,bs,UJ,xJe,kJe,hk,RJe,SJe,pk,PJe,$Je,IJe,Jg,JJ,DJe,NJe,_k,jJe,qJe,GJe,Yg,YJ,OJe,XJe,uk,VJe,zJe,WJe,vs,KJ,QJe,HJe,bk,UJe,JJe,vk,YJe,KJe,ZJe,Ts,ZJ,eYe,oYe,Tk,rYe,tYe,Fk,aYe,nYe,sYe,Kg,eY,lYe,iYe,Ck,dYe,cYe,fYe,Fs,oY,mYe,gYe,Mk,hYe,pYe,Ek,_Ye,uYe,bYe,Cs,rY,vYe,TYe,yk,FYe,CYe,wk,MYe,EYe,yYe,Ms,tY,wYe,AYe,Ak,LYe,BYe,Lk,xYe,kYe,RYe,Es,aY,SYe,PYe,Bk,$Ye,IYe,xk,DYe,NYe,jYe,ys,nY,qYe,GYe,kk,OYe,XYe,Rk,VYe,zYe,WYe,Zg,sY,QYe,HYe,Sk,UYe,JYe,YYe,eh,lY,KYe,ZYe,Pk,eKe,oKe,rKe,oh,iY,tKe,aKe,$k,nKe,sKe,lKe,rh,dY,iKe,dKe,Ik,cKe,fKe,mKe,ws,cY,gKe,hKe,Dk,pKe,_Ke,Nk,uKe,bKe,vKe,th,fY,TKe,FKe,jk,CKe,MKe,EKe,As,mY,yKe,wKe,qk,AKe,LKe,Gk,BKe,xKe,kKe,Ls,gY,RKe,SKe,Ok,PKe,$Ke,Xk,IKe,DKe,NKe,Bs,hY,jKe,qKe,Vk,GKe,OKe,zk,XKe,VKe,zKe,xs,pY,WKe,QKe,Wk,HKe,UKe,Qk,JKe,YKe,KKe,ks,_Y,ZKe,eZe,Hk,oZe,rZe,Uk,tZe,aZe,nZe,Rs,uY,sZe,lZe,Jk,iZe,dZe,Yk,cZe,fZe,mZe,ah,bY,gZe,hZe,Kk,pZe,_Ze,uZe,nh,vY,bZe,vZe,Zk,TZe,FZe,CZe,Ss,TY,MZe,EZe,eR,yZe,wZe,oR,AZe,LZe,BZe,Ps,FY,xZe,kZe,rR,RZe,SZe,tR,PZe,$Ze,IZe,$s,CY,DZe,NZe,aR,jZe,qZe,nR,GZe,OZe,XZe,sh,MY,VZe,zZe,sR,WZe,QZe,HZe,lh,EY,UZe,JZe,lR,YZe,KZe,ZZe,ih,yY,eeo,oeo,iR,reo,teo,aeo,dh,wY,neo,seo,dR,leo,ieo,deo,Is,AY,ceo,feo,cR,meo,geo,fR,heo,peo,_eo,ch,LY,ueo,beo,mR,veo,Teo,Feo,fh,BY,Ceo,Meo,gR,Eeo,yeo,weo,Ds,xY,Aeo,Leo,hR,Beo,xeo,pR,keo,Reo,Seo,Ns,kY,Peo,$eo,_R,Ieo,Deo,uR,Neo,jeo,qeo,RY,Geo,Oeo,k4,Xeo,mh,R4,Veo,SY,zeo,Nke,Qi,gh,PY,S4,Weo,$Y,Qeo,jke,Ho,P4,Heo,$4,Ueo,bR,Jeo,Yeo,Keo,I4,Zeo,IY,eoo,ooo,roo,$e,D4,too,DY,aoo,noo,Xa,soo,NY,loo,ioo,jY,doo,coo,qY,foo,moo,goo,te,hh,GY,hoo,poo,vR,_oo,uoo,boo,ph,OY,voo,Too,TR,Foo,Coo,Moo,_h,XY,Eoo,yoo,FR,woo,Aoo,Loo,uh,VY,Boo,xoo,CR,koo,Roo,Soo,bh,zY,Poo,$oo,MR,Ioo,Doo,Noo,vh,WY,joo,qoo,ER,Goo,Ooo,Xoo,Th,QY,Voo,zoo,yR,Woo,Qoo,Hoo,Fh,HY,Uoo,Joo,wR,Yoo,Koo,Zoo,Ch,UY,ero,oro,AR,rro,tro,aro,Mh,JY,nro,sro,LR,lro,iro,dro,Eh,YY,cro,fro,BR,mro,gro,hro,yh,KY,pro,_ro,xR,uro,bro,vro,wh,ZY,Tro,Fro,kR,Cro,Mro,Ero,Ah,eK,yro,wro,RR,Aro,Lro,Bro,Lh,oK,xro,kro,SR,Rro,Sro,Pro,Bh,rK,$ro,Iro,PR,Dro,Nro,jro,xh,tK,qro,Gro,$R,Oro,Xro,Vro,kh,aK,zro,Wro,IR,Qro,Hro,Uro,Rh,Jro,nK,Yro,Kro,N4,Zro,Sh,j4,eto,sK,oto,qke,Hi,Ph,lK,q4,rto,iK,tto,Gke,Uo,G4,ato,O4,nto,DR,sto,lto,ito,X4,dto,dK,cto,fto,mto,Ie,V4,gto,cK,hto,pto,Ui,_to,fK,uto,bto,mK,vto,Tto,Fto,xe,$h,gK,Cto,Mto,NR,Eto,yto,wto,Ih,hK,Ato,Lto,jR,Bto,xto,kto,Dh,pK,Rto,Sto,qR,Pto,$to,Ito,Nh,_K,Dto,Nto,GR,jto,qto,Gto,jh,uK,Oto,Xto,OR,Vto,zto,Wto,qh,bK,Qto,Hto,XR,Uto,Jto,Yto,Gh,vK,Kto,Zto,VR,eao,oao,rao,Oh,TK,tao,aao,zR,nao,sao,lao,Xh,iao,FK,dao,cao,z4,fao,Vh,W4,mao,CK,gao,Oke,Ji,zh,MK,Q4,hao,EK,pao,Xke,Jo,H4,_ao,Yi,uao,yK,bao,vao,wK,Tao,Fao,Cao,U4,Mao,AK,Eao,yao,wao,Vr,J4,Aao,LK,Lao,Bao,Ki,xao,BK,kao,Rao,xK,Sao,Pao,$ao,kK,Iao,Dao,Y4,Nao,De,K4,jao,RK,qao,Gao,Va,Oao,SK,Xao,Vao,PK,zao,Wao,$K,Qao,Hao,Uao,F,Wh,IK,Jao,Yao,WR,Kao,Zao,eno,Qh,DK,ono,rno,QR,tno,ano,nno,Hh,NK,sno,lno,HR,ino,dno,cno,Uh,jK,fno,mno,UR,gno,hno,pno,Jh,qK,_no,uno,JR,bno,vno,Tno,Yh,GK,Fno,Cno,YR,Mno,Eno,yno,Kh,OK,wno,Ano,KR,Lno,Bno,xno,Zh,XK,kno,Rno,ZR,Sno,Pno,$no,ep,VK,Ino,Dno,eS,Nno,jno,qno,op,zK,Gno,Ono,oS,Xno,Vno,zno,rp,WK,Wno,Qno,rS,Hno,Uno,Jno,tp,QK,Yno,Kno,tS,Zno,eso,oso,ap,HK,rso,tso,aS,aso,nso,sso,np,UK,lso,iso,nS,dso,cso,fso,sp,JK,mso,gso,sS,hso,pso,_so,lp,YK,uso,bso,lS,vso,Tso,Fso,ip,KK,Cso,Mso,iS,Eso,yso,wso,dp,ZK,Aso,Lso,dS,Bso,xso,kso,cp,eZ,Rso,Sso,cS,Pso,$so,Iso,fp,oZ,Dso,Nso,fS,jso,qso,Gso,mp,rZ,Oso,Xso,mS,Vso,zso,Wso,gp,tZ,Qso,Hso,gS,Uso,Jso,Yso,hp,aZ,Kso,Zso,hS,elo,olo,rlo,pp,nZ,tlo,alo,pS,nlo,slo,llo,_p,sZ,ilo,dlo,_S,clo,flo,mlo,up,lZ,glo,hlo,uS,plo,_lo,ulo,bp,iZ,blo,vlo,bS,Tlo,Flo,Clo,vp,dZ,Mlo,Elo,vS,ylo,wlo,Alo,Tp,cZ,Llo,Blo,TS,xlo,klo,Rlo,js,fZ,Slo,Plo,FS,$lo,Ilo,CS,Dlo,Nlo,jlo,Fp,mZ,qlo,Glo,MS,Olo,Xlo,Vlo,Cp,gZ,zlo,Wlo,ES,Qlo,Hlo,Ulo,Mp,hZ,Jlo,Ylo,yS,Klo,Zlo,eio,Ep,pZ,oio,rio,wS,tio,aio,nio,yp,_Z,sio,lio,AS,iio,dio,cio,wp,uZ,fio,mio,LS,gio,hio,pio,Ap,bZ,_io,uio,BS,bio,vio,Tio,Lp,vZ,Fio,Cio,xS,Mio,Eio,yio,Bp,TZ,wio,Aio,kS,Lio,Bio,xio,xp,FZ,kio,Rio,RS,Sio,Pio,$io,kp,CZ,Iio,Dio,SS,Nio,jio,qio,Rp,MZ,Gio,Oio,PS,Xio,Vio,zio,Sp,EZ,Wio,Qio,$S,Hio,Uio,Jio,Pp,yZ,Yio,Kio,IS,Zio,edo,odo,$p,wZ,rdo,tdo,DS,ado,ndo,sdo,Ip,AZ,ldo,ido,NS,ddo,cdo,fdo,Dp,LZ,mdo,gdo,jS,hdo,pdo,_do,Np,BZ,udo,bdo,qS,vdo,Tdo,Fdo,jp,xZ,Cdo,Mdo,GS,Edo,ydo,wdo,qp,kZ,Ado,Ldo,OS,Bdo,xdo,kdo,Gp,RZ,Rdo,Sdo,XS,Pdo,$do,Ido,Op,SZ,Ddo,Ndo,VS,jdo,qdo,Gdo,Xp,PZ,Odo,Xdo,zS,Vdo,zdo,Wdo,Vp,$Z,Qdo,Hdo,WS,Udo,Jdo,Ydo,zp,IZ,Kdo,Zdo,QS,eco,oco,rco,Wp,DZ,tco,aco,HS,nco,sco,lco,Qp,NZ,ico,dco,US,cco,fco,mco,Hp,jZ,gco,hco,JS,pco,_co,uco,Up,qZ,bco,vco,YS,Tco,Fco,Cco,Jp,GZ,Mco,Eco,KS,yco,wco,Aco,Yp,OZ,Lco,Bco,ZS,xco,kco,Rco,Kp,XZ,Sco,Pco,eP,$co,Ico,Dco,Zp,VZ,Nco,jco,oP,qco,Gco,Oco,e_,zZ,Xco,Vco,rP,zco,Wco,Qco,o_,WZ,Hco,Uco,tP,Jco,Yco,Kco,r_,QZ,Zco,efo,aP,ofo,rfo,tfo,t_,HZ,afo,nfo,nP,sfo,lfo,ifo,a_,UZ,dfo,cfo,sP,ffo,mfo,gfo,n_,JZ,hfo,pfo,lP,_fo,ufo,bfo,s_,YZ,vfo,Tfo,iP,Ffo,Cfo,Mfo,l_,KZ,Efo,yfo,dP,wfo,Afo,Lfo,i_,ZZ,Bfo,xfo,cP,kfo,Rfo,Sfo,d_,eee,Pfo,$fo,fP,Ifo,Dfo,Nfo,c_,oee,jfo,qfo,mP,Gfo,Ofo,Xfo,f_,ree,Vfo,zfo,gP,Wfo,Qfo,Hfo,m_,tee,Ufo,Jfo,hP,Yfo,Kfo,Zfo,g_,aee,emo,omo,pP,rmo,tmo,amo,h_,nee,nmo,smo,_P,lmo,imo,dmo,p_,see,cmo,fmo,uP,mmo,gmo,hmo,__,lee,pmo,_mo,bP,umo,bmo,vmo,u_,iee,Tmo,Fmo,vP,Cmo,Mmo,Emo,b_,dee,ymo,wmo,TP,Amo,Lmo,Bmo,v_,cee,xmo,kmo,FP,Rmo,Smo,Pmo,T_,fee,$mo,Imo,CP,Dmo,Nmo,jmo,F_,mee,qmo,Gmo,MP,Omo,Xmo,Vmo,C_,gee,zmo,Wmo,EP,Qmo,Hmo,Umo,M_,hee,Jmo,Ymo,yP,Kmo,Zmo,ego,E_,pee,ogo,rgo,wP,tgo,ago,ngo,y_,_ee,sgo,lgo,AP,igo,dgo,cgo,w_,uee,fgo,mgo,LP,ggo,hgo,pgo,A_,bee,_go,ugo,BP,bgo,vgo,Tgo,L_,vee,Fgo,Cgo,xP,Mgo,Ego,ygo,B_,wgo,Tee,Ago,Lgo,Fee,Bgo,xgo,Cee,kgo,Rgo,Z4,Vke,Zi,x_,Mee,eE,Sgo,Eee,Pgo,zke,Yo,oE,$go,ed,Igo,yee,Dgo,Ngo,wee,jgo,qgo,Ggo,rE,Ogo,Aee,Xgo,Vgo,zgo,zr,tE,Wgo,Lee,Qgo,Hgo,od,Ugo,Bee,Jgo,Ygo,xee,Kgo,Zgo,eho,kee,oho,rho,aE,tho,Ne,nE,aho,Ree,nho,sho,za,lho,See,iho,dho,Pee,cho,fho,$ee,mho,gho,hho,k,k_,Iee,pho,_ho,kP,uho,bho,vho,R_,Dee,Tho,Fho,RP,Cho,Mho,Eho,S_,Nee,yho,who,SP,Aho,Lho,Bho,P_,jee,xho,kho,PP,Rho,Sho,Pho,$_,qee,$ho,Iho,$P,Dho,Nho,jho,I_,Gee,qho,Gho,IP,Oho,Xho,Vho,D_,Oee,zho,Who,DP,Qho,Hho,Uho,N_,Xee,Jho,Yho,NP,Kho,Zho,epo,j_,Vee,opo,rpo,jP,tpo,apo,npo,q_,zee,spo,lpo,qP,ipo,dpo,cpo,G_,Wee,fpo,mpo,GP,gpo,hpo,ppo,O_,Qee,_po,upo,OP,bpo,vpo,Tpo,X_,Hee,Fpo,Cpo,XP,Mpo,Epo,ypo,V_,Uee,wpo,Apo,VP,Lpo,Bpo,xpo,z_,Jee,kpo,Rpo,zP,Spo,Ppo,$po,W_,Yee,Ipo,Dpo,WP,Npo,jpo,qpo,Q_,Kee,Gpo,Opo,QP,Xpo,Vpo,zpo,H_,Zee,Wpo,Qpo,HP,Hpo,Upo,Jpo,U_,eoe,Ypo,Kpo,UP,Zpo,e_o,o_o,J_,ooe,r_o,t_o,JP,a_o,n_o,s_o,Y_,roe,l_o,i_o,YP,d_o,c_o,f_o,K_,toe,m_o,g_o,KP,h_o,p_o,__o,Z_,aoe,u_o,b_o,ZP,v_o,T_o,F_o,eu,noe,C_o,M_o,e$,E_o,y_o,w_o,ou,soe,A_o,L_o,o$,B_o,x_o,k_o,ru,loe,R_o,S_o,r$,P_o,$_o,I_o,tu,ioe,D_o,N_o,t$,j_o,q_o,G_o,au,doe,O_o,X_o,a$,V_o,z_o,W_o,nu,coe,Q_o,H_o,n$,U_o,J_o,Y_o,su,foe,K_o,Z_o,s$,euo,ouo,ruo,lu,moe,tuo,auo,l$,nuo,suo,luo,iu,goe,iuo,duo,i$,cuo,fuo,muo,du,hoe,guo,huo,d$,puo,_uo,uuo,cu,poe,buo,vuo,c$,Tuo,Fuo,Cuo,fu,_oe,Muo,Euo,f$,yuo,wuo,Auo,mu,uoe,Luo,Buo,m$,xuo,kuo,Ruo,gu,boe,Suo,Puo,g$,$uo,Iuo,Duo,hu,voe,Nuo,juo,h$,quo,Guo,Ouo,pu,Toe,Xuo,Vuo,p$,zuo,Wuo,Quo,_u,Huo,Foe,Uuo,Juo,Coe,Yuo,Kuo,Moe,Zuo,e1o,sE,Wke,rd,uu,Eoe,lE,o1o,yoe,r1o,Qke,Ko,iE,t1o,td,a1o,woe,n1o,s1o,Aoe,l1o,i1o,d1o,dE,c1o,Loe,f1o,m1o,g1o,Wr,cE,h1o,Boe,p1o,_1o,ad,u1o,xoe,b1o,v1o,koe,T1o,F1o,C1o,Roe,M1o,E1o,fE,y1o,je,mE,w1o,Soe,A1o,L1o,Wa,B1o,Poe,x1o,k1o,$oe,R1o,S1o,Ioe,P1o,$1o,I1o,$,bu,Doe,D1o,N1o,_$,j1o,q1o,G1o,vu,Noe,O1o,X1o,u$,V1o,z1o,W1o,Tu,joe,Q1o,H1o,b$,U1o,J1o,Y1o,Fu,qoe,K1o,Z1o,v$,ebo,obo,rbo,Cu,Goe,tbo,abo,T$,nbo,sbo,lbo,Mu,Ooe,ibo,dbo,F$,cbo,fbo,mbo,Eu,Xoe,gbo,hbo,C$,pbo,_bo,ubo,yu,Voe,bbo,vbo,M$,Tbo,Fbo,Cbo,wu,zoe,Mbo,Ebo,E$,ybo,wbo,Abo,Au,Woe,Lbo,Bbo,y$,xbo,kbo,Rbo,Lu,Qoe,Sbo,Pbo,w$,$bo,Ibo,Dbo,Bu,Hoe,Nbo,jbo,A$,qbo,Gbo,Obo,xu,Uoe,Xbo,Vbo,L$,zbo,Wbo,Qbo,ku,Joe,Hbo,Ubo,B$,Jbo,Ybo,Kbo,Ru,Yoe,Zbo,e3o,x$,o3o,r3o,t3o,Su,Koe,a3o,n3o,k$,s3o,l3o,i3o,Pu,Zoe,d3o,c3o,R$,f3o,m3o,g3o,$u,ere,h3o,p3o,S$,_3o,u3o,b3o,Iu,ore,v3o,T3o,P$,F3o,C3o,M3o,Du,rre,E3o,y3o,$$,w3o,A3o,L3o,Nu,tre,B3o,x3o,I$,k3o,R3o,S3o,ju,are,P3o,$3o,D$,I3o,D3o,N3o,qu,nre,j3o,q3o,N$,G3o,O3o,X3o,Gu,sre,V3o,z3o,j$,W3o,Q3o,H3o,Ou,lre,U3o,J3o,q$,Y3o,K3o,Z3o,Xu,ire,e2o,o2o,G$,r2o,t2o,a2o,Vu,dre,n2o,s2o,O$,l2o,i2o,d2o,zu,cre,c2o,f2o,X$,m2o,g2o,h2o,Wu,fre,p2o,_2o,V$,u2o,b2o,v2o,Qu,mre,T2o,F2o,z$,C2o,M2o,E2o,Hu,gre,y2o,w2o,W$,A2o,L2o,B2o,Uu,hre,x2o,k2o,Q$,R2o,S2o,P2o,Ju,pre,$2o,I2o,H$,D2o,N2o,j2o,Yu,_re,q2o,G2o,U$,O2o,X2o,V2o,Ku,ure,z2o,W2o,J$,Q2o,H2o,U2o,Zu,J2o,bre,Y2o,K2o,vre,Z2o,evo,Tre,ovo,rvo,gE,Hke,nd,e1,Fre,hE,tvo,Cre,avo,Uke,Zo,pE,nvo,sd,svo,Mre,lvo,ivo,Ere,dvo,cvo,fvo,_E,mvo,yre,gvo,hvo,pvo,Qr,uE,_vo,wre,uvo,bvo,ld,vvo,Are,Tvo,Fvo,Lre,Cvo,Mvo,Evo,Bre,yvo,wvo,bE,Avo,qe,vE,Lvo,xre,Bvo,xvo,Qa,kvo,kre,Rvo,Svo,Rre,Pvo,$vo,Sre,Ivo,Dvo,Nvo,I,o1,Pre,jvo,qvo,Y$,Gvo,Ovo,Xvo,r1,$re,Vvo,zvo,K$,Wvo,Qvo,Hvo,t1,Ire,Uvo,Jvo,Z$,Yvo,Kvo,Zvo,a1,Dre,e6o,o6o,eI,r6o,t6o,a6o,n1,Nre,n6o,s6o,oI,l6o,i6o,d6o,s1,jre,c6o,f6o,rI,m6o,g6o,h6o,l1,qre,p6o,_6o,tI,u6o,b6o,v6o,i1,Gre,T6o,F6o,aI,C6o,M6o,E6o,d1,Ore,y6o,w6o,nI,A6o,L6o,B6o,c1,Xre,x6o,k6o,sI,R6o,S6o,P6o,f1,Vre,$6o,I6o,lI,D6o,N6o,j6o,m1,zre,q6o,G6o,iI,O6o,X6o,V6o,g1,Wre,z6o,W6o,dI,Q6o,H6o,U6o,h1,Qre,J6o,Y6o,cI,K6o,Z6o,e0o,p1,Hre,o0o,r0o,fI,t0o,a0o,n0o,_1,Ure,s0o,l0o,mI,i0o,d0o,c0o,u1,Jre,f0o,m0o,gI,g0o,h0o,p0o,b1,Yre,_0o,u0o,hI,b0o,v0o,T0o,v1,Kre,F0o,C0o,pI,M0o,E0o,y0o,T1,Zre,w0o,A0o,_I,L0o,B0o,x0o,F1,ete,k0o,R0o,uI,S0o,P0o,$0o,C1,ote,I0o,D0o,bI,N0o,j0o,q0o,M1,rte,G0o,O0o,vI,X0o,V0o,z0o,E1,tte,W0o,Q0o,TI,H0o,U0o,J0o,y1,ate,Y0o,K0o,FI,Z0o,eTo,oTo,w1,nte,rTo,tTo,CI,aTo,nTo,sTo,A1,ste,lTo,iTo,MI,dTo,cTo,fTo,L1,lte,mTo,gTo,EI,hTo,pTo,_To,B1,ite,uTo,bTo,yI,vTo,TTo,FTo,x1,dte,CTo,MTo,wI,ETo,yTo,wTo,k1,cte,ATo,LTo,fte,BTo,xTo,kTo,R1,mte,RTo,STo,AI,PTo,$To,ITo,S1,gte,DTo,NTo,LI,jTo,qTo,GTo,P1,hte,OTo,XTo,BI,VTo,zTo,WTo,$1,pte,QTo,HTo,xI,UTo,JTo,YTo,I1,KTo,_te,ZTo,e8o,ute,o8o,r8o,bte,t8o,a8o,TE,Jke,id,D1,vte,FE,n8o,Tte,s8o,Yke,er,CE,l8o,dd,i8o,Fte,d8o,c8o,Cte,f8o,m8o,g8o,ME,h8o,Mte,p8o,_8o,u8o,Hr,EE,b8o,Ete,v8o,T8o,cd,F8o,yte,C8o,M8o,wte,E8o,y8o,w8o,Ate,A8o,L8o,yE,B8o,Ge,wE,x8o,Lte,k8o,R8o,Ha,S8o,Bte,P8o,$8o,xte,I8o,D8o,kte,N8o,j8o,q8o,se,N1,Rte,G8o,O8o,kI,X8o,V8o,z8o,j1,Ste,W8o,Q8o,RI,H8o,U8o,J8o,q1,Pte,Y8o,K8o,SI,Z8o,eFo,oFo,G1,$te,rFo,tFo,PI,aFo,nFo,sFo,O1,Ite,lFo,iFo,$I,dFo,cFo,fFo,X1,Dte,mFo,gFo,II,hFo,pFo,_Fo,V1,Nte,uFo,bFo,DI,vFo,TFo,FFo,z1,jte,CFo,MFo,NI,EFo,yFo,wFo,W1,qte,AFo,LFo,jI,BFo,xFo,kFo,Q1,Gte,RFo,SFo,qI,PFo,$Fo,IFo,H1,Ote,DFo,NFo,GI,jFo,qFo,GFo,U1,Xte,OFo,XFo,OI,VFo,zFo,WFo,J1,Vte,QFo,HFo,XI,UFo,JFo,YFo,Y1,zte,KFo,ZFo,VI,eCo,oCo,rCo,K1,Wte,tCo,aCo,zI,nCo,sCo,lCo,Z1,Qte,iCo,dCo,WI,cCo,fCo,mCo,eb,gCo,Hte,hCo,pCo,Ute,_Co,uCo,Jte,bCo,vCo,AE,Kke,fd,ob,Yte,LE,TCo,Kte,FCo,Zke,or,BE,CCo,md,MCo,Zte,ECo,yCo,eae,wCo,ACo,LCo,xE,BCo,oae,xCo,kCo,RCo,Ur,kE,SCo,rae,PCo,$Co,gd,ICo,tae,DCo,NCo,aae,jCo,qCo,GCo,nae,OCo,XCo,RE,VCo,Oe,SE,zCo,sae,WCo,QCo,Ua,HCo,lae,UCo,JCo,iae,YCo,KCo,dae,ZCo,eMo,oMo,A,rb,cae,rMo,tMo,QI,aMo,nMo,sMo,tb,fae,lMo,iMo,HI,dMo,cMo,fMo,ab,mae,mMo,gMo,UI,hMo,pMo,_Mo,nb,gae,uMo,bMo,JI,vMo,TMo,FMo,sb,hae,CMo,MMo,YI,EMo,yMo,wMo,lb,pae,AMo,LMo,KI,BMo,xMo,kMo,ib,_ae,RMo,SMo,ZI,PMo,$Mo,IMo,db,uae,DMo,NMo,eD,jMo,qMo,GMo,cb,bae,OMo,XMo,oD,VMo,zMo,WMo,fb,vae,QMo,HMo,rD,UMo,JMo,YMo,mb,Tae,KMo,ZMo,tD,e4o,o4o,r4o,gb,Fae,t4o,a4o,aD,n4o,s4o,l4o,hb,Cae,i4o,d4o,nD,c4o,f4o,m4o,pb,Mae,g4o,h4o,sD,p4o,_4o,u4o,_b,Eae,b4o,v4o,lD,T4o,F4o,C4o,ub,yae,M4o,E4o,iD,y4o,w4o,A4o,bb,wae,L4o,B4o,dD,x4o,k4o,R4o,vb,Aae,S4o,P4o,cD,$4o,I4o,D4o,Tb,Lae,N4o,j4o,fD,q4o,G4o,O4o,Fb,Bae,X4o,V4o,mD,z4o,W4o,Q4o,Cb,xae,H4o,U4o,gD,J4o,Y4o,K4o,Mb,kae,Z4o,eEo,hD,oEo,rEo,tEo,Eb,Rae,aEo,nEo,pD,sEo,lEo,iEo,yb,Sae,dEo,cEo,_D,fEo,mEo,gEo,wb,Pae,hEo,pEo,uD,_Eo,uEo,bEo,Ab,$ae,vEo,TEo,bD,FEo,CEo,MEo,Lb,Iae,EEo,yEo,vD,wEo,AEo,LEo,Bb,Dae,BEo,xEo,TD,kEo,REo,SEo,xb,Nae,PEo,$Eo,FD,IEo,DEo,NEo,kb,jae,jEo,qEo,CD,GEo,OEo,XEo,Rb,qae,VEo,zEo,MD,WEo,QEo,HEo,Sb,Gae,UEo,JEo,ED,YEo,KEo,ZEo,Pb,Oae,e5o,o5o,yD,r5o,t5o,a5o,$b,Xae,n5o,s5o,wD,l5o,i5o,d5o,Ib,Vae,c5o,f5o,AD,m5o,g5o,h5o,Db,zae,p5o,_5o,LD,u5o,b5o,v5o,Nb,Wae,T5o,F5o,BD,C5o,M5o,E5o,jb,Qae,y5o,w5o,xD,A5o,L5o,B5o,qb,Hae,x5o,k5o,kD,R5o,S5o,P5o,Gb,Uae,$5o,I5o,RD,D5o,N5o,j5o,Ob,Jae,q5o,G5o,SD,O5o,X5o,V5o,Xb,Yae,z5o,W5o,PD,Q5o,H5o,U5o,Vb,Kae,J5o,Y5o,$D,K5o,Z5o,eyo,zb,Zae,oyo,ryo,ID,tyo,ayo,nyo,Wb,ene,syo,lyo,DD,iyo,dyo,cyo,Qb,one,fyo,myo,ND,gyo,hyo,pyo,Hb,_yo,rne,uyo,byo,tne,vyo,Tyo,ane,Fyo,Cyo,PE,eRe,hd,Ub,nne,$E,Myo,sne,Eyo,oRe,rr,IE,yyo,pd,wyo,lne,Ayo,Lyo,ine,Byo,xyo,kyo,DE,Ryo,dne,Syo,Pyo,$yo,Jr,NE,Iyo,cne,Dyo,Nyo,_d,jyo,fne,qyo,Gyo,mne,Oyo,Xyo,Vyo,gne,zyo,Wyo,jE,Qyo,Xe,qE,Hyo,hne,Uyo,Jyo,Ja,Yyo,pne,Kyo,Zyo,_ne,ewo,owo,une,rwo,two,awo,G,Jb,bne,nwo,swo,jD,lwo,iwo,dwo,Yb,vne,cwo,fwo,qD,mwo,gwo,hwo,Kb,Tne,pwo,_wo,GD,uwo,bwo,vwo,Zb,Fne,Two,Fwo,OD,Cwo,Mwo,Ewo,e3,Cne,ywo,wwo,XD,Awo,Lwo,Bwo,o3,Mne,xwo,kwo,VD,Rwo,Swo,Pwo,r3,Ene,$wo,Iwo,zD,Dwo,Nwo,jwo,t3,yne,qwo,Gwo,WD,Owo,Xwo,Vwo,a3,wne,zwo,Wwo,QD,Qwo,Hwo,Uwo,n3,Ane,Jwo,Ywo,HD,Kwo,Zwo,eAo,s3,Lne,oAo,rAo,UD,tAo,aAo,nAo,l3,Bne,sAo,lAo,JD,iAo,dAo,cAo,i3,xne,fAo,mAo,YD,gAo,hAo,pAo,d3,kne,_Ao,uAo,KD,bAo,vAo,TAo,c3,Rne,FAo,CAo,ZD,MAo,EAo,yAo,f3,Sne,wAo,AAo,eN,LAo,BAo,xAo,m3,Pne,kAo,RAo,oN,SAo,PAo,$Ao,g3,$ne,IAo,DAo,rN,NAo,jAo,qAo,h3,Ine,GAo,OAo,tN,XAo,VAo,zAo,p3,Dne,WAo,QAo,aN,HAo,UAo,JAo,_3,Nne,YAo,KAo,nN,ZAo,eLo,oLo,u3,jne,rLo,tLo,sN,aLo,nLo,sLo,b3,qne,lLo,iLo,lN,dLo,cLo,fLo,v3,Gne,mLo,gLo,iN,hLo,pLo,_Lo,T3,One,uLo,bLo,dN,vLo,TLo,FLo,F3,Xne,CLo,MLo,cN,ELo,yLo,wLo,C3,Vne,ALo,LLo,fN,BLo,xLo,kLo,M3,zne,RLo,SLo,mN,PLo,$Lo,ILo,E3,DLo,Wne,NLo,jLo,Qne,qLo,GLo,Hne,OLo,XLo,GE,rRe,ud,y3,Une,OE,VLo,Jne,zLo,tRe,tr,XE,WLo,bd,QLo,Yne,HLo,ULo,Kne,JLo,YLo,KLo,VE,ZLo,Zne,e7o,o7o,r7o,Yr,zE,t7o,ese,a7o,n7o,vd,s7o,ose,l7o,i7o,rse,d7o,c7o,f7o,tse,m7o,g7o,WE,h7o,Ve,QE,p7o,ase,_7o,u7o,Ya,b7o,nse,v7o,T7o,sse,F7o,C7o,lse,M7o,E7o,y7o,da,w3,ise,w7o,A7o,gN,L7o,B7o,x7o,A3,dse,k7o,R7o,hN,S7o,P7o,$7o,L3,cse,I7o,D7o,pN,N7o,j7o,q7o,B3,fse,G7o,O7o,_N,X7o,V7o,z7o,x3,mse,W7o,Q7o,uN,H7o,U7o,J7o,k3,Y7o,gse,K7o,Z7o,hse,e9o,o9o,pse,r9o,t9o,HE,aRe,Td,R3,_se,UE,a9o,use,n9o,nRe,ar,JE,s9o,Fd,l9o,bse,i9o,d9o,vse,c9o,f9o,m9o,YE,g9o,Tse,h9o,p9o,_9o,Kr,KE,u9o,Fse,b9o,v9o,Cd,T9o,Cse,F9o,C9o,Mse,M9o,E9o,y9o,Ese,w9o,A9o,ZE,L9o,ze,e5,B9o,yse,x9o,k9o,Ka,R9o,wse,S9o,P9o,Ase,$9o,I9o,Lse,D9o,N9o,j9o,j,S3,Bse,q9o,G9o,bN,O9o,X9o,V9o,P3,xse,z9o,W9o,vN,Q9o,H9o,U9o,$3,kse,J9o,Y9o,TN,K9o,Z9o,eBo,I3,Rse,oBo,rBo,FN,tBo,aBo,nBo,D3,Sse,sBo,lBo,CN,iBo,dBo,cBo,N3,Pse,fBo,mBo,MN,gBo,hBo,pBo,j3,$se,_Bo,uBo,EN,bBo,vBo,TBo,q3,Ise,FBo,CBo,yN,MBo,EBo,yBo,G3,Dse,wBo,ABo,wN,LBo,BBo,xBo,O3,Nse,kBo,RBo,AN,SBo,PBo,$Bo,X3,jse,IBo,DBo,LN,NBo,jBo,qBo,V3,qse,GBo,OBo,BN,XBo,VBo,zBo,z3,Gse,WBo,QBo,xN,HBo,UBo,JBo,W3,Ose,YBo,KBo,kN,ZBo,exo,oxo,Q3,Xse,rxo,txo,RN,axo,nxo,sxo,H3,Vse,lxo,ixo,SN,dxo,cxo,fxo,U3,zse,mxo,gxo,PN,hxo,pxo,_xo,J3,Wse,uxo,bxo,$N,vxo,Txo,Fxo,Y3,Qse,Cxo,Mxo,IN,Exo,yxo,wxo,K3,Hse,Axo,Lxo,DN,Bxo,xxo,kxo,Z3,Use,Rxo,Sxo,NN,Pxo,$xo,Ixo,e2,Jse,Dxo,Nxo,jN,jxo,qxo,Gxo,o2,Yse,Oxo,Xxo,qN,Vxo,zxo,Wxo,r2,Kse,Qxo,Hxo,GN,Uxo,Jxo,Yxo,t2,Zse,Kxo,Zxo,ON,eko,oko,rko,a2,ele,tko,ako,XN,nko,sko,lko,n2,ole,iko,dko,VN,cko,fko,mko,s2,rle,gko,hko,zN,pko,_ko,uko,l2,tle,bko,vko,WN,Tko,Fko,Cko,i2,ale,Mko,Eko,QN,yko,wko,Ako,d2,nle,Lko,Bko,HN,xko,kko,Rko,c2,sle,Sko,Pko,UN,$ko,Iko,Dko,f2,lle,Nko,jko,JN,qko,Gko,Oko,m2,Xko,ile,Vko,zko,dle,Wko,Qko,cle,Hko,Uko,o5,sRe,Md,g2,fle,r5,Jko,mle,Yko,lRe,nr,t5,Kko,Ed,Zko,gle,eRo,oRo,hle,rRo,tRo,aRo,a5,nRo,ple,sRo,lRo,iRo,Zr,n5,dRo,_le,cRo,fRo,yd,mRo,ule,gRo,hRo,ble,pRo,_Ro,uRo,vle,bRo,vRo,s5,TRo,We,l5,FRo,Tle,CRo,MRo,Za,ERo,Fle,yRo,wRo,Cle,ARo,LRo,Mle,BRo,xRo,kRo,R,h2,Ele,RRo,SRo,YN,PRo,$Ro,IRo,p2,yle,DRo,NRo,KN,jRo,qRo,GRo,_2,wle,ORo,XRo,ZN,VRo,zRo,WRo,u2,Ale,QRo,HRo,ej,URo,JRo,YRo,b2,Lle,KRo,ZRo,oj,eSo,oSo,rSo,v2,Ble,tSo,aSo,rj,nSo,sSo,lSo,T2,xle,iSo,dSo,tj,cSo,fSo,mSo,F2,kle,gSo,hSo,aj,pSo,_So,uSo,C2,Rle,bSo,vSo,nj,TSo,FSo,CSo,M2,Sle,MSo,ESo,sj,ySo,wSo,ASo,E2,Ple,LSo,BSo,lj,xSo,kSo,RSo,y2,$le,SSo,PSo,ij,$So,ISo,DSo,w2,Ile,NSo,jSo,dj,qSo,GSo,OSo,A2,Dle,XSo,VSo,cj,zSo,WSo,QSo,L2,Nle,HSo,USo,fj,JSo,YSo,KSo,B2,jle,ZSo,ePo,mj,oPo,rPo,tPo,x2,qle,aPo,nPo,gj,sPo,lPo,iPo,k2,Gle,dPo,cPo,hj,fPo,mPo,gPo,R2,Ole,hPo,pPo,pj,_Po,uPo,bPo,S2,Xle,vPo,TPo,_j,FPo,CPo,MPo,P2,Vle,EPo,yPo,uj,wPo,APo,LPo,$2,zle,BPo,xPo,bj,kPo,RPo,SPo,I2,Wle,PPo,$Po,vj,IPo,DPo,NPo,D2,Qle,jPo,qPo,Tj,GPo,OPo,XPo,N2,Hle,VPo,zPo,Fj,WPo,QPo,HPo,j2,Ule,UPo,JPo,Cj,YPo,KPo,ZPo,q2,Jle,e$o,o$o,Mj,r$o,t$o,a$o,G2,Yle,n$o,s$o,Ej,l$o,i$o,d$o,O2,Kle,c$o,f$o,yj,m$o,g$o,h$o,X2,Zle,p$o,_$o,wj,u$o,b$o,v$o,V2,eie,T$o,F$o,Aj,C$o,M$o,E$o,z2,oie,y$o,w$o,Lj,A$o,L$o,B$o,W2,rie,x$o,k$o,Bj,R$o,S$o,P$o,Q2,tie,$$o,I$o,xj,D$o,N$o,j$o,H2,aie,q$o,G$o,kj,O$o,X$o,V$o,U2,nie,z$o,W$o,Rj,Q$o,H$o,U$o,J2,sie,J$o,Y$o,Sj,K$o,Z$o,eIo,Y2,lie,oIo,rIo,Pj,tIo,aIo,nIo,K2,iie,sIo,lIo,$j,iIo,dIo,cIo,Z2,fIo,die,mIo,gIo,cie,hIo,pIo,fie,_Io,uIo,i5,iRe,wd,ev,mie,d5,bIo,gie,vIo,dRe,sr,c5,TIo,Ad,FIo,hie,CIo,MIo,pie,EIo,yIo,wIo,f5,AIo,_ie,LIo,BIo,xIo,et,m5,kIo,uie,RIo,SIo,Ld,PIo,bie,$Io,IIo,vie,DIo,NIo,jIo,Tie,qIo,GIo,g5,OIo,Qe,h5,XIo,Fie,VIo,zIo,en,WIo,Cie,QIo,HIo,Mie,UIo,JIo,Eie,YIo,KIo,ZIo,yie,ov,wie,eDo,oDo,Ij,rDo,tDo,aDo,rv,nDo,Aie,sDo,lDo,Lie,iDo,dDo,Bie,cDo,fDo,p5,cRe,Bd,tv,xie,_5,mDo,kie,gDo,fRe,lr,u5,hDo,xd,pDo,Rie,_Do,uDo,Sie,bDo,vDo,TDo,b5,FDo,Pie,CDo,MDo,EDo,ot,v5,yDo,$ie,wDo,ADo,kd,LDo,Iie,BDo,xDo,Die,kDo,RDo,SDo,Nie,PDo,$Do,T5,IDo,He,F5,DDo,jie,NDo,jDo,on,qDo,qie,GDo,ODo,Gie,XDo,VDo,Oie,zDo,WDo,QDo,ge,av,Xie,HDo,UDo,Dj,JDo,YDo,KDo,nv,Vie,ZDo,eNo,Nj,oNo,rNo,tNo,qs,zie,aNo,nNo,jj,sNo,lNo,qj,iNo,dNo,cNo,sv,Wie,fNo,mNo,Gj,gNo,hNo,pNo,ma,Qie,_No,uNo,Oj,bNo,vNo,Xj,TNo,FNo,Vj,CNo,MNo,ENo,lv,Hie,yNo,wNo,zj,ANo,LNo,BNo,iv,Uie,xNo,kNo,Wj,RNo,SNo,PNo,dv,Jie,$No,INo,Qj,DNo,NNo,jNo,cv,Yie,qNo,GNo,Hj,ONo,XNo,VNo,fv,Kie,zNo,WNo,Uj,QNo,HNo,UNo,mv,Zie,JNo,YNo,Jj,KNo,ZNo,ejo,gv,ojo,ede,rjo,tjo,ode,ajo,njo,rde,sjo,ljo,C5,mRe,Rd,hv,tde,M5,ijo,ade,djo,gRe,ir,E5,cjo,Sd,fjo,nde,mjo,gjo,sde,hjo,pjo,_jo,y5,ujo,lde,bjo,vjo,Tjo,rt,w5,Fjo,ide,Cjo,Mjo,Pd,Ejo,dde,yjo,wjo,cde,Ajo,Ljo,Bjo,fde,xjo,kjo,A5,Rjo,Ue,L5,Sjo,mde,Pjo,$jo,rn,Ijo,gde,Djo,Njo,hde,jjo,qjo,pde,Gjo,Ojo,Xjo,_de,pv,ude,Vjo,zjo,Yj,Wjo,Qjo,Hjo,_v,Ujo,bde,Jjo,Yjo,vde,Kjo,Zjo,Tde,eqo,oqo,B5,hRe,$d,uv,Fde,x5,rqo,Cde,tqo,pRe,dr,k5,aqo,Id,nqo,Mde,sqo,lqo,Ede,iqo,dqo,cqo,R5,fqo,yde,mqo,gqo,hqo,tt,S5,pqo,wde,_qo,uqo,Dd,bqo,Ade,vqo,Tqo,Lde,Fqo,Cqo,Mqo,Bde,Eqo,yqo,P5,wqo,Je,$5,Aqo,xde,Lqo,Bqo,tn,xqo,kde,kqo,Rqo,Rde,Sqo,Pqo,Sde,$qo,Iqo,Dqo,ke,bv,Pde,Nqo,jqo,Kj,qqo,Gqo,Oqo,vv,$de,Xqo,Vqo,Zj,zqo,Wqo,Qqo,Tv,Ide,Hqo,Uqo,eq,Jqo,Yqo,Kqo,Fv,Dde,Zqo,eGo,oq,oGo,rGo,tGo,Cv,Nde,aGo,nGo,rq,sGo,lGo,iGo,Mv,jde,dGo,cGo,tq,fGo,mGo,gGo,Ev,qde,hGo,pGo,aq,_Go,uGo,bGo,yv,Gde,vGo,TGo,nq,FGo,CGo,MGo,wv,EGo,Ode,yGo,wGo,Xde,AGo,LGo,Vde,BGo,xGo,I5,_Re,Nd,Av,zde,D5,kGo,Wde,RGo,uRe,cr,N5,SGo,jd,PGo,Qde,$Go,IGo,Hde,DGo,NGo,jGo,j5,qGo,Ude,GGo,OGo,XGo,at,q5,VGo,Jde,zGo,WGo,qd,QGo,Yde,HGo,UGo,Kde,JGo,YGo,KGo,Zde,ZGo,eOo,G5,oOo,Ye,O5,rOo,ece,tOo,aOo,an,nOo,oce,sOo,lOo,rce,iOo,dOo,tce,cOo,fOo,mOo,nn,Lv,ace,gOo,hOo,sq,pOo,_Oo,uOo,Bv,nce,bOo,vOo,lq,TOo,FOo,COo,xv,sce,MOo,EOo,iq,yOo,wOo,AOo,kv,lce,LOo,BOo,dq,xOo,kOo,ROo,Rv,SOo,ice,POo,$Oo,dce,IOo,DOo,cce,NOo,jOo,X5,bRe,Gd,Sv,fce,V5,qOo,mce,GOo,vRe,fr,z5,OOo,Od,XOo,gce,VOo,zOo,hce,WOo,QOo,HOo,W5,UOo,pce,JOo,YOo,KOo,nt,Q5,ZOo,_ce,eXo,oXo,Xd,rXo,uce,tXo,aXo,bce,nXo,sXo,lXo,vce,iXo,dXo,H5,cXo,Ke,U5,fXo,Tce,mXo,gXo,sn,hXo,Fce,pXo,_Xo,Cce,uXo,bXo,Mce,vXo,TXo,FXo,Re,Pv,Ece,CXo,MXo,cq,EXo,yXo,wXo,$v,yce,AXo,LXo,fq,BXo,xXo,kXo,Iv,wce,RXo,SXo,mq,PXo,$Xo,IXo,Dv,Ace,DXo,NXo,gq,jXo,qXo,GXo,Nv,Lce,OXo,XXo,hq,VXo,zXo,WXo,jv,Bce,QXo,HXo,pq,UXo,JXo,YXo,qv,xce,KXo,ZXo,_q,eVo,oVo,rVo,Gv,kce,tVo,aVo,uq,nVo,sVo,lVo,Ov,iVo,Rce,dVo,cVo,Sce,fVo,mVo,Pce,gVo,hVo,J5,TRe,Vd,Xv,$ce,Y5,pVo,Ice,_Vo,FRe,mr,K5,uVo,zd,bVo,Dce,vVo,TVo,Nce,FVo,CVo,MVo,Z5,EVo,jce,yVo,wVo,AVo,st,ey,LVo,qce,BVo,xVo,Wd,kVo,Gce,RVo,SVo,Oce,PVo,$Vo,IVo,Xce,DVo,NVo,oy,jVo,Ze,ry,qVo,Vce,GVo,OVo,ln,XVo,zce,VVo,zVo,Wce,WVo,QVo,Qce,HVo,UVo,JVo,ty,Vv,Hce,YVo,KVo,bq,ZVo,ezo,ozo,zv,Uce,rzo,tzo,vq,azo,nzo,szo,Wv,lzo,Jce,izo,dzo,Yce,czo,fzo,Kce,mzo,gzo,ay,CRe,Qd,Qv,Zce,ny,hzo,efe,pzo,MRe,gr,sy,_zo,Hd,uzo,ofe,bzo,vzo,rfe,Tzo,Fzo,Czo,ly,Mzo,tfe,Ezo,yzo,wzo,lt,iy,Azo,afe,Lzo,Bzo,Ud,xzo,nfe,kzo,Rzo,sfe,Szo,Pzo,$zo,lfe,Izo,Dzo,dy,Nzo,eo,cy,jzo,ife,qzo,Gzo,dn,Ozo,dfe,Xzo,Vzo,cfe,zzo,Wzo,ffe,Qzo,Hzo,Uzo,cn,Hv,mfe,Jzo,Yzo,Tq,Kzo,Zzo,eWo,Uv,gfe,oWo,rWo,Fq,tWo,aWo,nWo,Jv,hfe,sWo,lWo,Cq,iWo,dWo,cWo,Yv,pfe,fWo,mWo,Mq,gWo,hWo,pWo,Kv,_Wo,_fe,uWo,bWo,ufe,vWo,TWo,bfe,FWo,CWo,fy,ERe,Jd,Zv,vfe,my,MWo,Tfe,EWo,yRe,hr,gy,yWo,Yd,wWo,Ffe,AWo,LWo,Cfe,BWo,xWo,kWo,hy,RWo,Mfe,SWo,PWo,$Wo,it,py,IWo,Efe,DWo,NWo,Kd,jWo,yfe,qWo,GWo,wfe,OWo,XWo,VWo,Afe,zWo,WWo,_y,QWo,oo,uy,HWo,Lfe,UWo,JWo,fn,YWo,Bfe,KWo,ZWo,xfe,eQo,oQo,kfe,rQo,tQo,aQo,Zd,e6,Rfe,nQo,sQo,Eq,lQo,iQo,dQo,o6,Sfe,cQo,fQo,yq,mQo,gQo,hQo,r6,Pfe,pQo,_Qo,wq,uQo,bQo,vQo,t6,TQo,$fe,FQo,CQo,Ife,MQo,EQo,Dfe,yQo,wQo,by,wRe,ec,a6,Nfe,vy,AQo,jfe,LQo,ARe,pr,Ty,BQo,oc,xQo,qfe,kQo,RQo,Gfe,SQo,PQo,$Qo,Fy,IQo,Ofe,DQo,NQo,jQo,dt,Cy,qQo,Xfe,GQo,OQo,rc,XQo,Vfe,VQo,zQo,zfe,WQo,QQo,HQo,Wfe,UQo,JQo,My,YQo,ro,Ey,KQo,Qfe,ZQo,eHo,mn,oHo,Hfe,rHo,tHo,Ufe,aHo,nHo,Jfe,sHo,lHo,iHo,Yfe,n6,Kfe,dHo,cHo,Aq,fHo,mHo,gHo,s6,hHo,Zfe,pHo,_Ho,eme,uHo,bHo,ome,vHo,THo,yy,LRe,tc,l6,rme,wy,FHo,tme,CHo,BRe,_r,Ay,MHo,ac,EHo,ame,yHo,wHo,nme,AHo,LHo,BHo,Ly,xHo,sme,kHo,RHo,SHo,ct,By,PHo,lme,$Ho,IHo,nc,DHo,ime,NHo,jHo,dme,qHo,GHo,OHo,cme,XHo,VHo,xy,zHo,to,ky,WHo,fme,QHo,HHo,gn,UHo,mme,JHo,YHo,gme,KHo,ZHo,hme,eUo,oUo,rUo,pme,i6,_me,tUo,aUo,Lq,nUo,sUo,lUo,d6,iUo,ume,dUo,cUo,bme,fUo,mUo,vme,gUo,hUo,Ry,xRe,sc,c6,Tme,Sy,pUo,Fme,_Uo,kRe,ur,Py,uUo,lc,bUo,Cme,vUo,TUo,Mme,FUo,CUo,MUo,$y,EUo,Eme,yUo,wUo,AUo,ft,Iy,LUo,yme,BUo,xUo,ic,kUo,wme,RUo,SUo,Ame,PUo,$Uo,IUo,Lme,DUo,NUo,Dy,jUo,ao,Ny,qUo,Bme,GUo,OUo,hn,XUo,xme,VUo,zUo,kme,WUo,QUo,Rme,HUo,UUo,JUo,dc,f6,Sme,YUo,KUo,Bq,ZUo,eJo,oJo,m6,Pme,rJo,tJo,xq,aJo,nJo,sJo,g6,$me,lJo,iJo,kq,dJo,cJo,fJo,h6,mJo,Ime,gJo,hJo,Dme,pJo,_Jo,Nme,uJo,bJo,jy,RRe,cc,p6,jme,qy,vJo,qme,TJo,SRe,br,Gy,FJo,fc,CJo,Gme,MJo,EJo,Ome,yJo,wJo,AJo,Oy,LJo,Xme,BJo,xJo,kJo,mt,Xy,RJo,Vme,SJo,PJo,mc,$Jo,zme,IJo,DJo,Wme,NJo,jJo,qJo,Qme,GJo,OJo,Vy,XJo,no,zy,VJo,Hme,zJo,WJo,pn,QJo,Ume,HJo,UJo,Jme,JJo,YJo,Yme,KJo,ZJo,eYo,Kme,_6,Zme,oYo,rYo,Rq,tYo,aYo,nYo,u6,sYo,ege,lYo,iYo,oge,dYo,cYo,rge,fYo,mYo,Wy,PRe,gc,b6,tge,Qy,gYo,age,hYo,$Re,vr,Hy,pYo,hc,_Yo,nge,uYo,bYo,sge,vYo,TYo,FYo,Uy,CYo,lge,MYo,EYo,yYo,gt,Jy,wYo,ige,AYo,LYo,pc,BYo,dge,xYo,kYo,cge,RYo,SYo,PYo,fge,$Yo,IYo,Yy,DYo,ho,Ky,NYo,mge,jYo,qYo,_n,GYo,gge,OYo,XYo,hge,VYo,zYo,pge,WYo,QYo,HYo,B,v6,_ge,UYo,JYo,Sq,YYo,KYo,ZYo,T6,uge,eKo,oKo,Pq,rKo,tKo,aKo,F6,bge,nKo,sKo,$q,lKo,iKo,dKo,C6,vge,cKo,fKo,Iq,mKo,gKo,hKo,M6,Tge,pKo,_Ko,Dq,uKo,bKo,vKo,E6,Fge,TKo,FKo,Nq,CKo,MKo,EKo,y6,Cge,yKo,wKo,jq,AKo,LKo,BKo,w6,Mge,xKo,kKo,qq,RKo,SKo,PKo,A6,Ege,$Ko,IKo,Gq,DKo,NKo,jKo,L6,yge,qKo,GKo,Oq,OKo,XKo,VKo,B6,wge,zKo,WKo,Xq,QKo,HKo,UKo,x6,Age,JKo,YKo,Vq,KKo,ZKo,eZo,k6,Lge,oZo,rZo,zq,tZo,aZo,nZo,R6,Bge,sZo,lZo,Wq,iZo,dZo,cZo,S6,xge,fZo,mZo,Qq,gZo,hZo,pZo,P6,kge,_Zo,uZo,Hq,bZo,vZo,TZo,Gs,Rge,FZo,CZo,Uq,MZo,EZo,Jq,yZo,wZo,AZo,$6,Sge,LZo,BZo,Yq,xZo,kZo,RZo,I6,Pge,SZo,PZo,Kq,$Zo,IZo,DZo,D6,$ge,NZo,jZo,Zq,qZo,GZo,OZo,N6,Ige,XZo,VZo,eG,zZo,WZo,QZo,j6,Dge,HZo,UZo,oG,JZo,YZo,KZo,q6,Nge,ZZo,eer,rG,oer,rer,ter,G6,jge,aer,ner,tG,ser,ler,ier,O6,qge,der,cer,aG,fer,mer,ger,X6,Gge,her,per,nG,_er,uer,ber,V6,Oge,ver,Ter,sG,Fer,Cer,Mer,z6,Xge,Eer,yer,lG,wer,Aer,Ler,W6,Vge,Ber,xer,iG,ker,Rer,Ser,Q6,zge,Per,$er,dG,Ier,Der,Ner,H6,Wge,jer,qer,cG,Ger,Oer,Xer,U6,Qge,Ver,zer,fG,Wer,Qer,Her,J6,Hge,Uer,Jer,mG,Yer,Ker,Zer,Y6,Uge,eor,oor,gG,ror,tor,aor,K6,Jge,nor,sor,hG,lor,ior,dor,Z6,Yge,cor,mor,pG,gor,hor,por,e0,Kge,_or,uor,_G,bor,vor,Tor,o0,Zge,For,Cor,uG,Mor,Eor,yor,r0,ehe,wor,Aor,bG,Lor,Bor,xor,t0,ohe,kor,Ror,vG,Sor,Por,$or,a0,rhe,Ior,Dor,TG,Nor,jor,qor,n0,the,Gor,Oor,FG,Xor,Vor,zor,s0,ahe,Wor,Qor,CG,Hor,Uor,Jor,nhe,Yor,Kor,Zy,IRe,_c,l0,she,ew,Zor,lhe,err,DRe,Tr,ow,orr,uc,rrr,ihe,trr,arr,dhe,nrr,srr,lrr,rw,irr,che,drr,crr,frr,ht,tw,mrr,fhe,grr,hrr,bc,prr,mhe,_rr,urr,ghe,brr,vrr,Trr,hhe,Frr,Crr,aw,Mrr,po,nw,Err,phe,yrr,wrr,un,Arr,_he,Lrr,Brr,uhe,xrr,krr,bhe,Rrr,Srr,Prr,H,i0,vhe,$rr,Irr,MG,Drr,Nrr,jrr,d0,The,qrr,Grr,EG,Orr,Xrr,Vrr,c0,Fhe,zrr,Wrr,yG,Qrr,Hrr,Urr,f0,Che,Jrr,Yrr,wG,Krr,Zrr,etr,m0,Mhe,otr,rtr,AG,ttr,atr,ntr,g0,Ehe,str,ltr,LG,itr,dtr,ctr,h0,yhe,ftr,mtr,BG,gtr,htr,ptr,p0,whe,_tr,utr,xG,btr,vtr,Ttr,_0,Ahe,Ftr,Ctr,kG,Mtr,Etr,ytr,u0,Lhe,wtr,Atr,RG,Ltr,Btr,xtr,b0,Bhe,ktr,Rtr,SG,Str,Ptr,$tr,v0,xhe,Itr,Dtr,PG,Ntr,jtr,qtr,T0,khe,Gtr,Otr,$G,Xtr,Vtr,ztr,F0,Rhe,Wtr,Qtr,IG,Htr,Utr,Jtr,C0,She,Ytr,Ktr,DG,Ztr,ear,oar,M0,Phe,rar,tar,NG,aar,nar,sar,E0,$he,lar,iar,jG,dar,car,far,y0,Ihe,mar,gar,qG,har,par,_ar,w0,Dhe,uar,bar,GG,Tar,Far,Car,A0,Nhe,Mar,Ear,OG,yar,war,Aar,L0,jhe,Lar,Bar,XG,xar,kar,Rar,B0,qhe,Sar,Par,VG,$ar,Iar,Dar,Ghe,Nar,jar,sw,NRe,vc,x0,Ohe,lw,qar,Xhe,Gar,jRe,Fr,iw,Oar,Tc,Xar,Vhe,Var,zar,zhe,War,Qar,Har,dw,Uar,Whe,Jar,Yar,Kar,pt,cw,Zar,Qhe,enr,onr,Fc,rnr,Hhe,tnr,anr,Uhe,nnr,snr,lnr,Jhe,inr,dnr,fw,cnr,_o,mw,fnr,Yhe,mnr,gnr,bn,hnr,Khe,pnr,_nr,Zhe,unr,bnr,epe,vnr,Tnr,Fnr,ce,k0,ope,Cnr,Mnr,zG,Enr,ynr,wnr,R0,rpe,Anr,Lnr,WG,Bnr,xnr,knr,S0,tpe,Rnr,Snr,QG,Pnr,$nr,Inr,P0,ape,Dnr,Nnr,HG,jnr,qnr,Gnr,$0,npe,Onr,Xnr,UG,Vnr,znr,Wnr,I0,spe,Qnr,Hnr,JG,Unr,Jnr,Ynr,D0,lpe,Knr,Znr,YG,esr,osr,rsr,N0,ipe,tsr,asr,KG,nsr,ssr,lsr,j0,dpe,isr,dsr,ZG,csr,fsr,msr,q0,cpe,gsr,hsr,eO,psr,_sr,usr,G0,fpe,bsr,vsr,oO,Tsr,Fsr,Csr,O0,mpe,Msr,Esr,rO,ysr,wsr,Asr,gpe,Lsr,Bsr,gw,qRe,Cc,X0,hpe,hw,xsr,ppe,ksr,GRe,Cr,pw,Rsr,Mc,Ssr,_pe,Psr,$sr,upe,Isr,Dsr,Nsr,_w,jsr,bpe,qsr,Gsr,Osr,_t,uw,Xsr,vpe,Vsr,zsr,Ec,Wsr,Tpe,Qsr,Hsr,Fpe,Usr,Jsr,Ysr,Cpe,Ksr,Zsr,bw,elr,uo,vw,olr,Mpe,rlr,tlr,vn,alr,Epe,nlr,slr,ype,llr,ilr,wpe,dlr,clr,flr,Tw,V0,Ape,mlr,glr,tO,hlr,plr,_lr,z0,Lpe,ulr,blr,aO,vlr,Tlr,Flr,Bpe,Clr,Mlr,Fw,ORe,yc,W0,xpe,Cw,Elr,kpe,ylr,XRe,Mr,Mw,wlr,wc,Alr,Rpe,Llr,Blr,Spe,xlr,klr,Rlr,Ew,Slr,Ppe,Plr,$lr,Ilr,ut,yw,Dlr,$pe,Nlr,jlr,Ac,qlr,Ipe,Glr,Olr,Dpe,Xlr,Vlr,zlr,Npe,Wlr,Qlr,ww,Hlr,bo,Aw,Ulr,jpe,Jlr,Ylr,Tn,Klr,qpe,Zlr,eir,Gpe,oir,rir,Ope,tir,air,nir,J,Q0,Xpe,sir,lir,nO,iir,dir,cir,H0,Vpe,fir,mir,sO,gir,hir,pir,U0,zpe,_ir,uir,lO,bir,vir,Tir,J0,Wpe,Fir,Cir,iO,Mir,Eir,yir,Y0,Qpe,wir,Air,dO,Lir,Bir,xir,K0,Hpe,kir,Rir,cO,Sir,Pir,$ir,Z0,Upe,Iir,Dir,fO,Nir,jir,qir,eT,Jpe,Gir,Oir,mO,Xir,Vir,zir,oT,Ype,Wir,Qir,gO,Hir,Uir,Jir,rT,Kpe,Yir,Kir,hO,Zir,edr,odr,tT,Zpe,rdr,tdr,pO,adr,ndr,sdr,aT,e_e,ldr,idr,_O,ddr,cdr,fdr,nT,o_e,mdr,gdr,uO,hdr,pdr,_dr,sT,r_e,udr,bdr,bO,vdr,Tdr,Fdr,lT,t_e,Cdr,Mdr,vO,Edr,ydr,wdr,iT,a_e,Adr,Ldr,TO,Bdr,xdr,kdr,dT,n_e,Rdr,Sdr,FO,Pdr,$dr,Idr,cT,s_e,Ddr,Ndr,CO,jdr,qdr,Gdr,fT,l_e,Odr,Xdr,MO,Vdr,zdr,Wdr,mT,i_e,Qdr,Hdr,EO,Udr,Jdr,Ydr,d_e,Kdr,Zdr,Lw,VRe,Lc,gT,c_e,Bw,ecr,f_e,ocr,zRe,Er,xw,rcr,Bc,tcr,m_e,acr,ncr,g_e,scr,lcr,icr,kw,dcr,h_e,ccr,fcr,mcr,bt,Rw,gcr,p_e,hcr,pcr,xc,_cr,__e,ucr,bcr,u_e,vcr,Tcr,Fcr,b_e,Ccr,Mcr,Sw,Ecr,vo,Pw,ycr,v_e,wcr,Acr,Fn,Lcr,T_e,Bcr,xcr,F_e,kcr,Rcr,C_e,Scr,Pcr,$cr,ue,hT,M_e,Icr,Dcr,yO,Ncr,jcr,qcr,pT,E_e,Gcr,Ocr,wO,Xcr,Vcr,zcr,_T,y_e,Wcr,Qcr,AO,Hcr,Ucr,Jcr,uT,w_e,Ycr,Kcr,LO,Zcr,efr,ofr,bT,A_e,rfr,tfr,BO,afr,nfr,sfr,vT,L_e,lfr,ifr,xO,dfr,cfr,ffr,TT,B_e,mfr,gfr,kO,hfr,pfr,_fr,FT,x_e,ufr,bfr,RO,vfr,Tfr,Ffr,CT,k_e,Cfr,Mfr,SO,Efr,yfr,wfr,MT,R_e,Afr,Lfr,PO,Bfr,xfr,kfr,S_e,Rfr,Sfr,$w,WRe,kc,ET,P_e,Iw,Pfr,$_e,$fr,QRe,yr,Dw,Ifr,Rc,Dfr,I_e,Nfr,jfr,D_e,qfr,Gfr,Ofr,Nw,Xfr,N_e,Vfr,zfr,Wfr,vt,jw,Qfr,j_e,Hfr,Ufr,Sc,Jfr,q_e,Yfr,Kfr,G_e,Zfr,emr,omr,O_e,rmr,tmr,qw,amr,To,Gw,nmr,X_e,smr,lmr,Cn,imr,V_e,dmr,cmr,z_e,fmr,mmr,W_e,gmr,hmr,pmr,X,yT,Q_e,_mr,umr,$O,bmr,vmr,Tmr,wT,H_e,Fmr,Cmr,IO,Mmr,Emr,ymr,AT,U_e,wmr,Amr,DO,Lmr,Bmr,xmr,LT,J_e,kmr,Rmr,NO,Smr,Pmr,$mr,BT,Y_e,Imr,Dmr,jO,Nmr,jmr,qmr,xT,K_e,Gmr,Omr,qO,Xmr,Vmr,zmr,kT,Z_e,Wmr,Qmr,GO,Hmr,Umr,Jmr,RT,eue,Ymr,Kmr,OO,Zmr,egr,ogr,ST,oue,rgr,tgr,XO,agr,ngr,sgr,PT,rue,lgr,igr,VO,dgr,cgr,fgr,$T,tue,mgr,ggr,zO,hgr,pgr,_gr,IT,aue,ugr,bgr,WO,vgr,Tgr,Fgr,DT,nue,Cgr,Mgr,QO,Egr,ygr,wgr,NT,sue,Agr,Lgr,HO,Bgr,xgr,kgr,jT,lue,Rgr,Sgr,UO,Pgr,$gr,Igr,qT,iue,Dgr,Ngr,JO,jgr,qgr,Ggr,GT,due,Ogr,Xgr,YO,Vgr,zgr,Wgr,OT,cue,Qgr,Hgr,KO,Ugr,Jgr,Ygr,XT,fue,Kgr,Zgr,ZO,ehr,ohr,rhr,VT,mue,thr,ahr,eX,nhr,shr,lhr,zT,gue,ihr,dhr,oX,chr,fhr,mhr,WT,hue,ghr,hhr,rX,phr,_hr,uhr,QT,pue,bhr,vhr,tX,Thr,Fhr,Chr,HT,_ue,Mhr,Ehr,aX,yhr,whr,Ahr,UT,uue,Lhr,Bhr,nX,xhr,khr,Rhr,JT,bue,Shr,Phr,sX,$hr,Ihr,Dhr,vue,Nhr,jhr,Ow,HRe,Pc,YT,Tue,Xw,qhr,Fue,Ghr,URe,wr,Vw,Ohr,$c,Xhr,Cue,Vhr,zhr,Mue,Whr,Qhr,Hhr,zw,Uhr,Eue,Jhr,Yhr,Khr,Tt,Ww,Zhr,yue,epr,opr,Ic,rpr,wue,tpr,apr,Aue,npr,spr,lpr,Lue,ipr,dpr,Qw,cpr,Fo,Hw,fpr,Bue,mpr,gpr,Mn,hpr,xue,ppr,_pr,kue,upr,bpr,Rue,vpr,Tpr,Fpr,ae,KT,Sue,Cpr,Mpr,lX,Epr,ypr,wpr,ZT,Pue,Apr,Lpr,iX,Bpr,xpr,kpr,e8,$ue,Rpr,Spr,dX,Ppr,$pr,Ipr,o8,Iue,Dpr,Npr,cX,jpr,qpr,Gpr,r8,Due,Opr,Xpr,fX,Vpr,zpr,Wpr,t8,Nue,Qpr,Hpr,mX,Upr,Jpr,Ypr,a8,jue,Kpr,Zpr,gX,e_r,o_r,r_r,n8,que,t_r,a_r,hX,n_r,s_r,l_r,s8,Gue,i_r,d_r,pX,c_r,f_r,m_r,l8,Oue,g_r,h_r,_X,p_r,__r,u_r,i8,Xue,b_r,v_r,uX,T_r,F_r,C_r,d8,Vue,M_r,E_r,bX,y_r,w_r,A_r,c8,zue,L_r,B_r,vX,x_r,k_r,R_r,f8,Wue,S_r,P_r,TX,$_r,I_r,D_r,m8,Que,N_r,j_r,FX,q_r,G_r,O_r,g8,Hue,X_r,V_r,CX,z_r,W_r,Q_r,h8,Uue,H_r,U_r,MX,J_r,Y_r,K_r,Jue,Z_r,eur,Uw,JRe,Dc,p8,Yue,Jw,our,Kue,rur,YRe,Ar,Yw,tur,Nc,aur,Zue,nur,sur,e1e,lur,iur,dur,Kw,cur,o1e,fur,mur,gur,Ft,Zw,hur,r1e,pur,_ur,jc,uur,t1e,bur,vur,a1e,Tur,Fur,Cur,n1e,Mur,Eur,eA,yur,Co,oA,wur,s1e,Aur,Lur,En,Bur,l1e,xur,kur,i1e,Rur,Sur,d1e,Pur,$ur,Iur,c1e,_8,f1e,Dur,Nur,EX,jur,qur,Gur,m1e,Our,Xur,rA,KRe,qc,u8,g1e,tA,Vur,h1e,zur,ZRe,Lr,aA,Wur,Gc,Qur,p1e,Hur,Uur,_1e,Jur,Yur,Kur,nA,Zur,u1e,e1r,o1r,r1r,Ct,sA,t1r,b1e,a1r,n1r,Oc,s1r,v1e,l1r,i1r,T1e,d1r,c1r,f1r,F1e,m1r,g1r,lA,h1r,Mo,iA,p1r,C1e,_1r,u1r,yn,b1r,M1e,v1r,T1r,E1e,F1r,C1r,y1e,M1r,E1r,y1r,Y,b8,w1e,w1r,A1r,yX,L1r,B1r,x1r,v8,A1e,k1r,R1r,wX,S1r,P1r,$1r,T8,L1e,I1r,D1r,AX,N1r,j1r,q1r,F8,B1e,G1r,O1r,LX,X1r,V1r,z1r,C8,x1e,W1r,Q1r,BX,H1r,U1r,J1r,M8,k1e,Y1r,K1r,xX,Z1r,ebr,obr,E8,R1e,rbr,tbr,kX,abr,nbr,sbr,y8,S1e,lbr,ibr,RX,dbr,cbr,fbr,w8,P1e,mbr,gbr,SX,hbr,pbr,_br,A8,$1e,ubr,bbr,PX,vbr,Tbr,Fbr,L8,I1e,Cbr,Mbr,$X,Ebr,ybr,wbr,B8,D1e,Abr,Lbr,IX,Bbr,xbr,kbr,x8,N1e,Rbr,Sbr,DX,Pbr,$br,Ibr,k8,j1e,Dbr,Nbr,NX,jbr,qbr,Gbr,R8,q1e,Obr,Xbr,jX,Vbr,zbr,Wbr,S8,G1e,Qbr,Hbr,qX,Ubr,Jbr,Ybr,P8,O1e,Kbr,Zbr,GX,e3r,o3r,r3r,$8,X1e,t3r,a3r,OX,n3r,s3r,l3r,I8,V1e,i3r,d3r,XX,c3r,f3r,m3r,D8,z1e,g3r,h3r,VX,p3r,_3r,u3r,W1e,b3r,v3r,dA,eSe,Xc,N8,Q1e,cA,T3r,H1e,F3r,oSe,Br,fA,C3r,Vc,M3r,U1e,E3r,y3r,J1e,w3r,A3r,L3r,mA,B3r,Y1e,x3r,k3r,R3r,Mt,gA,S3r,K1e,P3r,$3r,zc,I3r,Z1e,D3r,N3r,ebe,j3r,q3r,G3r,obe,O3r,X3r,hA,V3r,Eo,pA,z3r,rbe,W3r,Q3r,wn,H3r,tbe,U3r,J3r,abe,Y3r,K3r,nbe,Z3r,e2r,o2r,K,j8,sbe,r2r,t2r,zX,a2r,n2r,s2r,q8,lbe,l2r,i2r,WX,d2r,c2r,f2r,G8,ibe,m2r,g2r,QX,h2r,p2r,_2r,O8,dbe,u2r,b2r,HX,v2r,T2r,F2r,X8,cbe,C2r,M2r,UX,E2r,y2r,w2r,V8,fbe,A2r,L2r,JX,B2r,x2r,k2r,z8,mbe,R2r,S2r,YX,P2r,$2r,I2r,W8,gbe,D2r,N2r,KX,j2r,q2r,G2r,Q8,hbe,O2r,X2r,ZX,V2r,z2r,W2r,H8,pbe,Q2r,H2r,eV,U2r,J2r,Y2r,U8,_be,K2r,Z2r,oV,evr,ovr,rvr,J8,ube,tvr,avr,rV,nvr,svr,lvr,Y8,bbe,ivr,dvr,tV,cvr,fvr,mvr,K8,vbe,gvr,hvr,aV,pvr,_vr,uvr,Z8,Tbe,bvr,vvr,nV,Tvr,Fvr,Cvr,eF,Fbe,Mvr,Evr,sV,yvr,wvr,Avr,oF,Cbe,Lvr,Bvr,lV,xvr,kvr,Rvr,rF,Mbe,Svr,Pvr,iV,$vr,Ivr,Dvr,tF,Ebe,Nvr,jvr,dV,qvr,Gvr,Ovr,aF,ybe,Xvr,Vvr,cV,zvr,Wvr,Qvr,wbe,Hvr,Uvr,_A,rSe,Wc,nF,Abe,uA,Jvr,Lbe,Yvr,tSe,xr,bA,Kvr,Qc,Zvr,Bbe,e6r,o6r,xbe,r6r,t6r,a6r,vA,n6r,kbe,s6r,l6r,i6r,Et,TA,d6r,Rbe,c6r,f6r,Hc,m6r,Sbe,g6r,h6r,Pbe,p6r,_6r,u6r,$be,b6r,v6r,FA,T6r,yo,CA,F6r,Ibe,C6r,M6r,An,E6r,Dbe,y6r,w6r,Nbe,A6r,L6r,jbe,B6r,x6r,k6r,qbe,sF,Gbe,R6r,S6r,fV,P6r,$6r,I6r,Obe,D6r,N6r,MA,aSe,Uc,lF,Xbe,EA,j6r,Vbe,q6r,nSe,kr,yA,G6r,Jc,O6r,zbe,X6r,V6r,Wbe,z6r,W6r,Q6r,wA,H6r,Qbe,U6r,J6r,Y6r,yt,AA,K6r,Hbe,Z6r,e0r,Yc,o0r,Ube,r0r,t0r,Jbe,a0r,n0r,s0r,Ybe,l0r,i0r,LA,d0r,wo,BA,c0r,Kbe,f0r,m0r,Ln,g0r,Zbe,h0r,p0r,e3e,_0r,u0r,o3e,b0r,v0r,T0r,r3e,iF,t3e,F0r,C0r,mV,M0r,E0r,y0r,a3e,w0r,A0r,xA,sSe,Kc,dF,n3e,kA,L0r,s3e,B0r,lSe,Rr,RA,x0r,Zc,k0r,l3e,R0r,S0r,i3e,P0r,$0r,I0r,SA,D0r,d3e,N0r,j0r,q0r,wt,PA,G0r,c3e,O0r,X0r,ef,V0r,f3e,z0r,W0r,m3e,Q0r,H0r,U0r,g3e,J0r,Y0r,$A,K0r,Ao,IA,Z0r,h3e,eTr,oTr,Bn,rTr,p3e,tTr,aTr,_3e,nTr,sTr,u3e,lTr,iTr,dTr,z,cF,b3e,cTr,fTr,gV,mTr,gTr,hTr,fF,v3e,pTr,_Tr,hV,uTr,bTr,vTr,mF,T3e,TTr,FTr,pV,CTr,MTr,ETr,gF,F3e,yTr,wTr,_V,ATr,LTr,BTr,hF,C3e,xTr,kTr,uV,RTr,STr,PTr,pF,M3e,$Tr,ITr,bV,DTr,NTr,jTr,_F,E3e,qTr,GTr,vV,OTr,XTr,VTr,uF,y3e,zTr,WTr,TV,QTr,HTr,UTr,bF,w3e,JTr,YTr,FV,KTr,ZTr,e8r,vF,A3e,o8r,r8r,CV,t8r,a8r,n8r,TF,L3e,s8r,l8r,MV,i8r,d8r,c8r,FF,B3e,f8r,m8r,EV,g8r,h8r,p8r,CF,x3e,_8r,u8r,yV,b8r,v8r,T8r,MF,k3e,F8r,C8r,wV,M8r,E8r,y8r,EF,R3e,w8r,A8r,AV,L8r,B8r,x8r,yF,S3e,k8r,R8r,LV,S8r,P8r,$8r,wF,P3e,I8r,D8r,BV,N8r,j8r,q8r,AF,$3e,G8r,O8r,xV,X8r,V8r,z8r,LF,I3e,W8r,Q8r,kV,H8r,U8r,J8r,BF,D3e,Y8r,K8r,RV,Z8r,eFr,oFr,xF,N3e,rFr,tFr,SV,aFr,nFr,sFr,kF,j3e,lFr,iFr,PV,dFr,cFr,fFr,RF,q3e,mFr,gFr,$V,hFr,pFr,_Fr,SF,G3e,uFr,bFr,IV,vFr,TFr,FFr,PF,O3e,CFr,MFr,DV,EFr,yFr,wFr,X3e,AFr,LFr,DA,iSe,of,$F,V3e,NA,BFr,z3e,xFr,dSe,Sr,jA,kFr,rf,RFr,W3e,SFr,PFr,Q3e,$Fr,IFr,DFr,qA,NFr,H3e,jFr,qFr,GFr,At,GA,OFr,U3e,XFr,VFr,tf,zFr,J3e,WFr,QFr,Y3e,HFr,UFr,JFr,K3e,YFr,KFr,OA,ZFr,Lo,XA,eCr,Z3e,oCr,rCr,xn,tCr,e2e,aCr,nCr,o2e,sCr,lCr,r2e,iCr,dCr,cCr,ca,IF,t2e,fCr,mCr,NV,gCr,hCr,pCr,DF,a2e,_Cr,uCr,jV,bCr,vCr,TCr,NF,n2e,FCr,CCr,qV,MCr,ECr,yCr,jF,s2e,wCr,ACr,GV,LCr,BCr,xCr,qF,l2e,kCr,RCr,OV,SCr,PCr,$Cr,i2e,ICr,DCr,VA,cSe,af,GF,d2e,zA,NCr,c2e,jCr,fSe,Pr,WA,qCr,nf,GCr,f2e,OCr,XCr,m2e,VCr,zCr,WCr,QA,QCr,g2e,HCr,UCr,JCr,Lt,HA,YCr,h2e,KCr,ZCr,sf,eMr,p2e,oMr,rMr,_2e,tMr,aMr,nMr,u2e,sMr,lMr,UA,iMr,Bo,JA,dMr,b2e,cMr,fMr,kn,mMr,v2e,gMr,hMr,T2e,pMr,_Mr,F2e,uMr,bMr,vMr,fe,OF,C2e,TMr,FMr,XV,CMr,MMr,EMr,XF,M2e,yMr,wMr,VV,AMr,LMr,BMr,VF,E2e,xMr,kMr,zV,RMr,SMr,PMr,zF,y2e,$Mr,IMr,WV,DMr,NMr,jMr,WF,w2e,qMr,GMr,QV,OMr,XMr,VMr,QF,A2e,zMr,WMr,HV,QMr,HMr,UMr,HF,L2e,JMr,YMr,UV,KMr,ZMr,e4r,UF,B2e,o4r,r4r,JV,t4r,a4r,n4r,JF,x2e,s4r,l4r,YV,i4r,d4r,c4r,YF,k2e,f4r,m4r,KV,g4r,h4r,p4r,KF,R2e,_4r,u4r,ZV,b4r,v4r,T4r,ZF,S2e,F4r,C4r,ez,M4r,E4r,y4r,P2e,w4r,A4r,YA,mSe,lf,eC,$2e,KA,L4r,I2e,B4r,gSe,$r,ZA,x4r,df,k4r,D2e,R4r,S4r,N2e,P4r,$4r,I4r,eL,D4r,j2e,N4r,j4r,q4r,Bt,oL,G4r,q2e,O4r,X4r,cf,V4r,G2e,z4r,W4r,O2e,Q4r,H4r,U4r,X2e,J4r,Y4r,rL,K4r,xo,tL,Z4r,V2e,eEr,oEr,Rn,rEr,z2e,tEr,aEr,W2e,nEr,sEr,Q2e,lEr,iEr,dEr,be,oC,H2e,cEr,fEr,oz,mEr,gEr,hEr,rC,U2e,pEr,_Er,rz,uEr,bEr,vEr,tC,J2e,TEr,FEr,tz,CEr,MEr,EEr,aC,Y2e,yEr,wEr,az,AEr,LEr,BEr,nC,K2e,xEr,kEr,nz,REr,SEr,PEr,sC,Z2e,$Er,IEr,sz,DEr,NEr,jEr,lC,eve,qEr,GEr,lz,OEr,XEr,VEr,iC,ove,zEr,WEr,iz,QEr,HEr,UEr,dC,rve,JEr,YEr,dz,KEr,ZEr,e5r,cC,tve,o5r,r5r,cz,t5r,a5r,n5r,ave,s5r,l5r,aL,hSe,ff,fC,nve,nL,i5r,sve,d5r,pSe,Ir,sL,c5r,mf,f5r,lve,m5r,g5r,ive,h5r,p5r,_5r,lL,u5r,dve,b5r,v5r,T5r,xt,iL,F5r,cve,C5r,M5r,gf,E5r,fve,y5r,w5r,mve,A5r,L5r,B5r,gve,x5r,k5r,dL,R5r,ko,cL,S5r,hve,P5r,$5r,Sn,I5r,pve,D5r,N5r,_ve,j5r,q5r,uve,G5r,O5r,X5r,Me,mC,bve,V5r,z5r,fz,W5r,Q5r,H5r,gC,vve,U5r,J5r,mz,Y5r,K5r,Z5r,hC,Tve,eyr,oyr,gz,ryr,tyr,ayr,pC,Fve,nyr,syr,hz,lyr,iyr,dyr,_C,Cve,cyr,fyr,pz,myr,gyr,hyr,uC,Mve,pyr,_yr,_z,uyr,byr,vyr,bC,Eve,Tyr,Fyr,uz,Cyr,Myr,Eyr,vC,yve,yyr,wyr,bz,Ayr,Lyr,Byr,TC,wve,xyr,kyr,vz,Ryr,Syr,Pyr,Ave,$yr,Iyr,fL,_Se,hf,FC,Lve,mL,Dyr,Bve,Nyr,uSe,Dr,gL,jyr,pf,qyr,xve,Gyr,Oyr,kve,Xyr,Vyr,zyr,hL,Wyr,Rve,Qyr,Hyr,Uyr,kt,pL,Jyr,Sve,Yyr,Kyr,_f,Zyr,Pve,ewr,owr,$ve,rwr,twr,awr,Ive,nwr,swr,_L,lwr,Ro,uL,iwr,Dve,dwr,cwr,Pn,fwr,Nve,mwr,gwr,jve,hwr,pwr,qve,_wr,uwr,bwr,ve,CC,Gve,vwr,Twr,Tz,Fwr,Cwr,Mwr,MC,Ove,Ewr,ywr,Fz,wwr,Awr,Lwr,EC,Xve,Bwr,xwr,Cz,kwr,Rwr,Swr,yC,Vve,Pwr,$wr,Mz,Iwr,Dwr,Nwr,wC,zve,jwr,qwr,Ez,Gwr,Owr,Xwr,AC,Wve,Vwr,zwr,yz,Wwr,Qwr,Hwr,LC,Qve,Uwr,Jwr,wz,Ywr,Kwr,Zwr,BC,Hve,eAr,oAr,Az,rAr,tAr,aAr,xC,Uve,nAr,sAr,Lz,lAr,iAr,dAr,kC,Jve,cAr,fAr,Bz,mAr,gAr,hAr,Yve,pAr,_Ar,bL,bSe,uf,RC,Kve,vL,uAr,Zve,bAr,vSe,Nr,TL,vAr,bf,TAr,e6e,FAr,CAr,o6e,MAr,EAr,yAr,FL,wAr,r6e,AAr,LAr,BAr,Rt,CL,xAr,t6e,kAr,RAr,vf,SAr,a6e,PAr,$Ar,n6e,IAr,DAr,NAr,s6e,jAr,qAr,ML,GAr,So,EL,OAr,l6e,XAr,VAr,$n,zAr,i6e,WAr,QAr,d6e,HAr,UAr,c6e,JAr,YAr,KAr,Te,SC,f6e,ZAr,eLr,xz,oLr,rLr,tLr,PC,m6e,aLr,nLr,kz,sLr,lLr,iLr,$C,g6e,dLr,cLr,Rz,fLr,mLr,gLr,IC,h6e,hLr,pLr,Sz,_Lr,uLr,bLr,DC,p6e,vLr,TLr,Pz,FLr,CLr,MLr,NC,_6e,ELr,yLr,$z,wLr,ALr,LLr,jC,u6e,BLr,xLr,Iz,kLr,RLr,SLr,qC,b6e,PLr,$Lr,Dz,ILr,DLr,NLr,GC,v6e,jLr,qLr,Nz,GLr,OLr,XLr,OC,T6e,VLr,zLr,jz,WLr,QLr,HLr,F6e,ULr,JLr,yL,TSe,Tf,XC,C6e,wL,YLr,M6e,KLr,FSe,jr,AL,ZLr,Ff,e7r,E6e,o7r,r7r,y6e,t7r,a7r,n7r,LL,s7r,w6e,l7r,i7r,d7r,St,BL,c7r,A6e,f7r,m7r,Cf,g7r,L6e,h7r,p7r,B6e,_7r,u7r,b7r,x6e,v7r,T7r,xL,F7r,Po,kL,C7r,k6e,M7r,E7r,In,y7r,R6e,w7r,A7r,S6e,L7r,B7r,P6e,x7r,k7r,R7r,Se,VC,$6e,S7r,P7r,qz,$7r,I7r,D7r,zC,I6e,N7r,j7r,Gz,q7r,G7r,O7r,WC,D6e,X7r,V7r,Oz,z7r,W7r,Q7r,QC,N6e,H7r,U7r,Xz,J7r,Y7r,K7r,HC,j6e,Z7r,e9r,Vz,o9r,r9r,t9r,UC,q6e,a9r,n9r,zz,s9r,l9r,i9r,JC,G6e,d9r,c9r,Wz,f9r,m9r,g9r,YC,O6e,h9r,p9r,Qz,_9r,u9r,b9r,X6e,v9r,T9r,RL,CSe,Mf,KC,V6e,SL,F9r,z6e,C9r,MSe,qr,PL,M9r,Ef,E9r,W6e,y9r,w9r,Q6e,A9r,L9r,B9r,$L,x9r,H6e,k9r,R9r,S9r,Pt,IL,P9r,U6e,$9r,I9r,yf,D9r,J6e,N9r,j9r,Y6e,q9r,G9r,O9r,K6e,X9r,V9r,DL,z9r,$o,NL,W9r,Z6e,Q9r,H9r,Dn,U9r,e0e,J9r,Y9r,o0e,K9r,Z9r,r0e,eBr,oBr,rBr,Pe,ZC,t0e,tBr,aBr,Hz,nBr,sBr,lBr,eM,a0e,iBr,dBr,Uz,cBr,fBr,mBr,oM,n0e,gBr,hBr,Jz,pBr,_Br,uBr,rM,s0e,bBr,vBr,Yz,TBr,FBr,CBr,tM,l0e,MBr,EBr,Kz,yBr,wBr,ABr,aM,i0e,LBr,BBr,Zz,xBr,kBr,RBr,nM,d0e,SBr,PBr,eW,$Br,IBr,DBr,sM,c0e,NBr,jBr,oW,qBr,GBr,OBr,f0e,XBr,VBr,jL,ESe,wf,lM,m0e,qL,zBr,g0e,WBr,ySe,Gr,GL,QBr,Af,HBr,h0e,UBr,JBr,p0e,YBr,KBr,ZBr,OL,exr,_0e,oxr,rxr,txr,$t,XL,axr,u0e,nxr,sxr,Lf,lxr,b0e,ixr,dxr,v0e,cxr,fxr,mxr,T0e,gxr,hxr,VL,pxr,Io,zL,_xr,F0e,uxr,bxr,Nn,vxr,C0e,Txr,Fxr,M0e,Cxr,Mxr,E0e,Exr,yxr,wxr,y0e,iM,w0e,Axr,Lxr,rW,Bxr,xxr,kxr,A0e,Rxr,Sxr,WL,wSe,Bf,dM,L0e,QL,Pxr,B0e,$xr,ASe,Or,HL,Ixr,xf,Dxr,x0e,Nxr,jxr,k0e,qxr,Gxr,Oxr,UL,Xxr,R0e,Vxr,zxr,Wxr,It,JL,Qxr,S0e,Hxr,Uxr,kf,Jxr,P0e,Yxr,Kxr,$0e,Zxr,ekr,okr,I0e,rkr,tkr,YL,akr,Do,KL,nkr,D0e,skr,lkr,jn,ikr,N0e,dkr,ckr,j0e,fkr,mkr,q0e,gkr,hkr,pkr,ZL,cM,G0e,_kr,ukr,tW,bkr,vkr,Tkr,fM,O0e,Fkr,Ckr,aW,Mkr,Ekr,ykr,X0e,wkr,Akr,e7,LSe,Rf,mM,V0e,o7,Lkr,z0e,Bkr,BSe,Xr,r7,xkr,Sf,kkr,W0e,Rkr,Skr,Q0e,Pkr,$kr,Ikr,t7,Dkr,H0e,Nkr,jkr,qkr,Dt,a7,Gkr,U0e,Okr,Xkr,Pf,Vkr,J0e,zkr,Wkr,Y0e,Qkr,Hkr,Ukr,K0e,Jkr,Ykr,n7,Kkr,No,s7,Zkr,Z0e,eRr,oRr,qn,rRr,eTe,tRr,aRr,oTe,nRr,sRr,rTe,lRr,iRr,dRr,tTe,gM,aTe,cRr,fRr,nW,mRr,gRr,hRr,nTe,pRr,_Rr,l7,xSe;return me=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),u4=new V({}),b4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uRr({props:{warning:!0,$$slots:{default:[SCt]},$$scope:{ctx:If}}}),v4=new V({}),T4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/configuration_auto.py#L541"}}),M4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),E4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),y4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),w4=new V({}),A4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/tokenization_auto.py#L351"}}),x4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_10638/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),k4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),R4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),S4=new V({}),P4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),D4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_10638/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new uRr({props:{$$slots:{default:[PCt]},$$scope:{ctx:If}}}),N4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),j4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),q4=new V({}),G4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/processing_auto.py#L70"}}),V4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new uRr({props:{$$slots:{default:[$Ct]},$$scope:{ctx:If}}}),z4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),W4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Q4=new V({}),H4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L707"}}),J4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Y4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),K4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eE=new V({}),oE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L714"}}),tE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),nE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lE=new V({}),iE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L729"}}),cE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),mE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hE=new V({}),pE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L736"}}),uE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),vE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FE=new V({}),CE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L743"}}),EE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),wE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LE=new V({}),BE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L752"}}),kE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),SE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$E=new V({}),IE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L786"}}),NE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),qE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OE=new V({}),XE=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L793"}}),zE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),QE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UE=new V({}),JE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L779"}}),KE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),e5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r5=new V({}),t5=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L761"}}),n5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),l5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d5=new V({}),c5=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L768"}}),m5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),g5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),h5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_5=new V({}),u5=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L802"}}),v5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),T5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),F5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M5=new V({}),E5=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L841"}}),w5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),A5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),L5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x5=new V({}),k5=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L848"}}),S5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),P5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),$5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D5=new V({}),N5=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L871"}}),q5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),O5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V5=new V({}),z5=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L855"}}),Q5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),H5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),U5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y5=new V({}),K5=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L862"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new V({}),sy=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L880"}}),iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new V({}),gy=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L887"}}),py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new V({}),Ty=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L834"}}),Cy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new V({}),Ay=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L809"}}),By=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new V({}),Py=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L816"}}),Iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new V({}),Gy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_auto.py#L825"}}),Xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new V({}),Hy=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),Jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new V({}),ow=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new V({}),iw=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new V({}),pw=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),uw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),vw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new V({}),Mw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new V({}),xw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new V({}),Dw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new V({}),Vw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),Ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new V({}),Yw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),Zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),oA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),sA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),iA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),fA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),gA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),bA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),TA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),CA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),AA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),BA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new V({}),jA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),XA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new V({}),WA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),HA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),JA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new V({}),ZA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new V({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new V({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new V({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new V({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new V({}),PL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),IL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),NL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new V({}),GL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new V({}),HL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),JL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),KL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new V({}),r7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),a7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),s7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_10638/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_10638/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_10638/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),Df=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),g4=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),h4=o("AutoConfig"),On=o(", "),Xn=a("a"),p4=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),_4=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),n9=o("will create a model that is an instance of "),Oi=a("a"),s9=o("BertModel"),l9=o("."),zo=l(),Ga=a("p"),i9=o("There is one class of "),qf=a("code"),d9=o("AutoModel"),O$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bke=l(),Xi=a("h2"),Gf=a("a"),ZQ=a("span"),f(u4.$$.fragment),X$e=l(),eH=a("span"),V$e=o("Extending the Auto Classes"),xke=l(),zn=a("p"),z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=a("code"),W$e=o("NewModel"),Q$e=o(", make sure you have a "),rH=a("code"),H$e=o("NewModelConfig"),U$e=o(` then you can add those to the auto
classes like this:`),kke=l(),f(b4.$$.fragment),Rke=l(),c9=a("p"),J$e=o("You will then be able to use the auto classes like you would usually do!"),Ske=l(),f(Of.$$.fragment),Pke=l(),Vi=a("h2"),Xf=a("a"),tH=a("span"),f(v4.$$.fragment),Y$e=l(),aH=a("span"),K$e=o("AutoConfig"),$ke=l(),Wo=a("div"),f(T4.$$.fragment),Z$e=l(),F4=a("p"),eIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=a("a"),oIe=o("from_pretrained()"),rIe=o(" class method."),tIe=l(),C4=a("p"),aIe=o("This class cannot be instantiated directly using "),nH=a("code"),nIe=o("__init__()"),sIe=o(" (throws an error)."),lIe=l(),mo=a("div"),f(M4.$$.fragment),iIe=l(),sH=a("p"),dIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cIe=l(),zi=a("p"),fIe=o("The configuration class to instantiate is selected based on the "),lH=a("code"),mIe=o("model_type"),gIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=a("code"),hIe=o("pretrained_model_name_or_path"),pIe=o(":"),_Ie=l(),v=a("ul"),Vf=a("li"),dH=a("strong"),uIe=o("albert"),bIe=o(" \u2014 "),m9=a("a"),vIe=o("AlbertConfig"),TIe=o(" (ALBERT model)"),FIe=l(),zf=a("li"),cH=a("strong"),CIe=o("bart"),MIe=o(" \u2014 "),g9=a("a"),EIe=o("BartConfig"),yIe=o(" (BART model)"),wIe=l(),Wf=a("li"),fH=a("strong"),AIe=o("beit"),LIe=o(" \u2014 "),h9=a("a"),BIe=o("BeitConfig"),xIe=o(" (BEiT model)"),kIe=l(),Qf=a("li"),mH=a("strong"),RIe=o("bert"),SIe=o(" \u2014 "),p9=a("a"),PIe=o("BertConfig"),$Ie=o(" (BERT model)"),IIe=l(),Hf=a("li"),gH=a("strong"),DIe=o("bert-generation"),NIe=o(" \u2014 "),_9=a("a"),jIe=o("BertGenerationConfig"),qIe=o(" (Bert Generation model)"),GIe=l(),Uf=a("li"),hH=a("strong"),OIe=o("big_bird"),XIe=o(" \u2014 "),u9=a("a"),VIe=o("BigBirdConfig"),zIe=o(" (BigBird model)"),WIe=l(),Jf=a("li"),pH=a("strong"),QIe=o("bigbird_pegasus"),HIe=o(" \u2014 "),b9=a("a"),UIe=o("BigBirdPegasusConfig"),JIe=o(" (BigBirdPegasus model)"),YIe=l(),Yf=a("li"),_H=a("strong"),KIe=o("blenderbot"),ZIe=o(" \u2014 "),v9=a("a"),eDe=o("BlenderbotConfig"),oDe=o(" (Blenderbot model)"),rDe=l(),Kf=a("li"),uH=a("strong"),tDe=o("blenderbot-small"),aDe=o(" \u2014 "),T9=a("a"),nDe=o("BlenderbotSmallConfig"),sDe=o(" (BlenderbotSmall model)"),lDe=l(),Zf=a("li"),bH=a("strong"),iDe=o("camembert"),dDe=o(" \u2014 "),F9=a("a"),cDe=o("CamembertConfig"),fDe=o(" (CamemBERT model)"),mDe=l(),em=a("li"),vH=a("strong"),gDe=o("canine"),hDe=o(" \u2014 "),C9=a("a"),pDe=o("CanineConfig"),_De=o(" (Canine model)"),uDe=l(),om=a("li"),TH=a("strong"),bDe=o("clip"),vDe=o(" \u2014 "),M9=a("a"),TDe=o("CLIPConfig"),FDe=o(" (CLIP model)"),CDe=l(),rm=a("li"),FH=a("strong"),MDe=o("convbert"),EDe=o(" \u2014 "),E9=a("a"),yDe=o("ConvBertConfig"),wDe=o(" (ConvBERT model)"),ADe=l(),tm=a("li"),CH=a("strong"),LDe=o("convnext"),BDe=o(" \u2014 "),y9=a("a"),xDe=o("ConvNextConfig"),kDe=o(" (ConvNext model)"),RDe=l(),am=a("li"),MH=a("strong"),SDe=o("ctrl"),PDe=o(" \u2014 "),w9=a("a"),$De=o("CTRLConfig"),IDe=o(" (CTRL model)"),DDe=l(),nm=a("li"),EH=a("strong"),NDe=o("data2vec-audio"),jDe=o(" \u2014 "),A9=a("a"),qDe=o("Data2VecAudioConfig"),GDe=o(" (Data2VecAudio model)"),ODe=l(),sm=a("li"),yH=a("strong"),XDe=o("data2vec-text"),VDe=o(" \u2014 "),L9=a("a"),zDe=o("Data2VecTextConfig"),WDe=o(" (Data2VecText model)"),QDe=l(),lm=a("li"),wH=a("strong"),HDe=o("deberta"),UDe=o(" \u2014 "),B9=a("a"),JDe=o("DebertaConfig"),YDe=o(" (DeBERTa model)"),KDe=l(),im=a("li"),AH=a("strong"),ZDe=o("deberta-v2"),eNe=o(" \u2014 "),x9=a("a"),oNe=o("DebertaV2Config"),rNe=o(" (DeBERTa-v2 model)"),tNe=l(),dm=a("li"),LH=a("strong"),aNe=o("decision_transformer"),nNe=o(" \u2014 "),k9=a("a"),sNe=o("DecisionTransformerConfig"),lNe=o(" (Decision Transformer model)"),iNe=l(),cm=a("li"),BH=a("strong"),dNe=o("deit"),cNe=o(" \u2014 "),R9=a("a"),fNe=o("DeiTConfig"),mNe=o(" (DeiT model)"),gNe=l(),fm=a("li"),xH=a("strong"),hNe=o("detr"),pNe=o(" \u2014 "),S9=a("a"),_Ne=o("DetrConfig"),uNe=o(" (DETR model)"),bNe=l(),mm=a("li"),kH=a("strong"),vNe=o("distilbert"),TNe=o(" \u2014 "),P9=a("a"),FNe=o("DistilBertConfig"),CNe=o(" (DistilBERT model)"),MNe=l(),gm=a("li"),RH=a("strong"),ENe=o("dpr"),yNe=o(" \u2014 "),$9=a("a"),wNe=o("DPRConfig"),ANe=o(" (DPR model)"),LNe=l(),hm=a("li"),SH=a("strong"),BNe=o("dpt"),xNe=o(" \u2014 "),I9=a("a"),kNe=o("DPTConfig"),RNe=o(" (DPT model)"),SNe=l(),pm=a("li"),PH=a("strong"),PNe=o("electra"),$Ne=o(" \u2014 "),D9=a("a"),INe=o("ElectraConfig"),DNe=o(" (ELECTRA model)"),NNe=l(),_m=a("li"),$H=a("strong"),jNe=o("encoder-decoder"),qNe=o(" \u2014 "),N9=a("a"),GNe=o("EncoderDecoderConfig"),ONe=o(" (Encoder decoder model)"),XNe=l(),um=a("li"),IH=a("strong"),VNe=o("flaubert"),zNe=o(" \u2014 "),j9=a("a"),WNe=o("FlaubertConfig"),QNe=o(" (FlauBERT model)"),HNe=l(),bm=a("li"),DH=a("strong"),UNe=o("fnet"),JNe=o(" \u2014 "),q9=a("a"),YNe=o("FNetConfig"),KNe=o(" (FNet model)"),ZNe=l(),vm=a("li"),NH=a("strong"),eje=o("fsmt"),oje=o(" \u2014 "),G9=a("a"),rje=o("FSMTConfig"),tje=o(" (FairSeq Machine-Translation model)"),aje=l(),Tm=a("li"),jH=a("strong"),nje=o("funnel"),sje=o(" \u2014 "),O9=a("a"),lje=o("FunnelConfig"),ije=o(" (Funnel Transformer model)"),dje=l(),Fm=a("li"),qH=a("strong"),cje=o("glpn"),fje=o(" \u2014 "),X9=a("a"),mje=o("GLPNConfig"),gje=o(" (GLPN model)"),hje=l(),Cm=a("li"),GH=a("strong"),pje=o("gpt2"),_je=o(" \u2014 "),V9=a("a"),uje=o("GPT2Config"),bje=o(" (OpenAI GPT-2 model)"),vje=l(),Mm=a("li"),OH=a("strong"),Tje=o("gpt_neo"),Fje=o(" \u2014 "),z9=a("a"),Cje=o("GPTNeoConfig"),Mje=o(" (GPT Neo model)"),Eje=l(),Em=a("li"),XH=a("strong"),yje=o("gptj"),wje=o(" \u2014 "),W9=a("a"),Aje=o("GPTJConfig"),Lje=o(" (GPT-J model)"),Bje=l(),ym=a("li"),VH=a("strong"),xje=o("hubert"),kje=o(" \u2014 "),Q9=a("a"),Rje=o("HubertConfig"),Sje=o(" (Hubert model)"),Pje=l(),wm=a("li"),zH=a("strong"),$je=o("ibert"),Ije=o(" \u2014 "),H9=a("a"),Dje=o("IBertConfig"),Nje=o(" (I-BERT model)"),jje=l(),Am=a("li"),WH=a("strong"),qje=o("imagegpt"),Gje=o(" \u2014 "),U9=a("a"),Oje=o("ImageGPTConfig"),Xje=o(" (ImageGPT model)"),Vje=l(),Lm=a("li"),QH=a("strong"),zje=o("layoutlm"),Wje=o(" \u2014 "),J9=a("a"),Qje=o("LayoutLMConfig"),Hje=o(" (LayoutLM model)"),Uje=l(),Bm=a("li"),HH=a("strong"),Jje=o("layoutlmv2"),Yje=o(" \u2014 "),Y9=a("a"),Kje=o("LayoutLMv2Config"),Zje=o(" (LayoutLMv2 model)"),eqe=l(),xm=a("li"),UH=a("strong"),oqe=o("led"),rqe=o(" \u2014 "),K9=a("a"),tqe=o("LEDConfig"),aqe=o(" (LED model)"),nqe=l(),km=a("li"),JH=a("strong"),sqe=o("longformer"),lqe=o(" \u2014 "),Z9=a("a"),iqe=o("LongformerConfig"),dqe=o(" (Longformer model)"),cqe=l(),Rm=a("li"),YH=a("strong"),fqe=o("luke"),mqe=o(" \u2014 "),eB=a("a"),gqe=o("LukeConfig"),hqe=o(" (LUKE model)"),pqe=l(),Sm=a("li"),KH=a("strong"),_qe=o("lxmert"),uqe=o(" \u2014 "),oB=a("a"),bqe=o("LxmertConfig"),vqe=o(" (LXMERT model)"),Tqe=l(),Pm=a("li"),ZH=a("strong"),Fqe=o("m2m_100"),Cqe=o(" \u2014 "),rB=a("a"),Mqe=o("M2M100Config"),Eqe=o(" (M2M100 model)"),yqe=l(),$m=a("li"),eU=a("strong"),wqe=o("marian"),Aqe=o(" \u2014 "),tB=a("a"),Lqe=o("MarianConfig"),Bqe=o(" (Marian model)"),xqe=l(),Im=a("li"),oU=a("strong"),kqe=o("maskformer"),Rqe=o(" \u2014 "),aB=a("a"),Sqe=o("MaskFormerConfig"),Pqe=o(" (MaskFormer model)"),$qe=l(),Dm=a("li"),rU=a("strong"),Iqe=o("mbart"),Dqe=o(" \u2014 "),nB=a("a"),Nqe=o("MBartConfig"),jqe=o(" (mBART model)"),qqe=l(),Nm=a("li"),tU=a("strong"),Gqe=o("megatron-bert"),Oqe=o(" \u2014 "),sB=a("a"),Xqe=o("MegatronBertConfig"),Vqe=o(" (MegatronBert model)"),zqe=l(),jm=a("li"),aU=a("strong"),Wqe=o("mobilebert"),Qqe=o(" \u2014 "),lB=a("a"),Hqe=o("MobileBertConfig"),Uqe=o(" (MobileBERT model)"),Jqe=l(),qm=a("li"),nU=a("strong"),Yqe=o("mpnet"),Kqe=o(" \u2014 "),iB=a("a"),Zqe=o("MPNetConfig"),eGe=o(" (MPNet model)"),oGe=l(),Gm=a("li"),sU=a("strong"),rGe=o("mt5"),tGe=o(" \u2014 "),dB=a("a"),aGe=o("MT5Config"),nGe=o(" (mT5 model)"),sGe=l(),Om=a("li"),lU=a("strong"),lGe=o("nystromformer"),iGe=o(" \u2014 "),cB=a("a"),dGe=o("NystromformerConfig"),cGe=o(" (Nystromformer model)"),fGe=l(),Xm=a("li"),iU=a("strong"),mGe=o("openai-gpt"),gGe=o(" \u2014 "),fB=a("a"),hGe=o("OpenAIGPTConfig"),pGe=o(" (OpenAI GPT model)"),_Ge=l(),Vm=a("li"),dU=a("strong"),uGe=o("pegasus"),bGe=o(" \u2014 "),mB=a("a"),vGe=o("PegasusConfig"),TGe=o(" (Pegasus model)"),FGe=l(),zm=a("li"),cU=a("strong"),CGe=o("perceiver"),MGe=o(" \u2014 "),gB=a("a"),EGe=o("PerceiverConfig"),yGe=o(" (Perceiver model)"),wGe=l(),Wm=a("li"),fU=a("strong"),AGe=o("plbart"),LGe=o(" \u2014 "),hB=a("a"),BGe=o("PLBartConfig"),xGe=o(" (PLBart model)"),kGe=l(),Qm=a("li"),mU=a("strong"),RGe=o("poolformer"),SGe=o(" \u2014 "),pB=a("a"),PGe=o("PoolFormerConfig"),$Ge=o(" (PoolFormer model)"),IGe=l(),Hm=a("li"),gU=a("strong"),DGe=o("prophetnet"),NGe=o(" \u2014 "),_B=a("a"),jGe=o("ProphetNetConfig"),qGe=o(" (ProphetNet model)"),GGe=l(),Um=a("li"),hU=a("strong"),OGe=o("qdqbert"),XGe=o(" \u2014 "),uB=a("a"),VGe=o("QDQBertConfig"),zGe=o(" (QDQBert model)"),WGe=l(),Jm=a("li"),pU=a("strong"),QGe=o("rag"),HGe=o(" \u2014 "),bB=a("a"),UGe=o("RagConfig"),JGe=o(" (RAG model)"),YGe=l(),Ym=a("li"),_U=a("strong"),KGe=o("realm"),ZGe=o(" \u2014 "),vB=a("a"),eOe=o("RealmConfig"),oOe=o(" (Realm model)"),rOe=l(),Km=a("li"),uU=a("strong"),tOe=o("reformer"),aOe=o(" \u2014 "),TB=a("a"),nOe=o("ReformerConfig"),sOe=o(" (Reformer model)"),lOe=l(),Zm=a("li"),bU=a("strong"),iOe=o("rembert"),dOe=o(" \u2014 "),FB=a("a"),cOe=o("RemBertConfig"),fOe=o(" (RemBERT model)"),mOe=l(),eg=a("li"),vU=a("strong"),gOe=o("resnet"),hOe=o(" \u2014 "),CB=a("a"),pOe=o("ResNetConfig"),_Oe=o(" (ResNet model)"),uOe=l(),og=a("li"),TU=a("strong"),bOe=o("retribert"),vOe=o(" \u2014 "),MB=a("a"),TOe=o("RetriBertConfig"),FOe=o(" (RetriBERT model)"),COe=l(),rg=a("li"),FU=a("strong"),MOe=o("roberta"),EOe=o(" \u2014 "),EB=a("a"),yOe=o("RobertaConfig"),wOe=o(" (RoBERTa model)"),AOe=l(),tg=a("li"),CU=a("strong"),LOe=o("roformer"),BOe=o(" \u2014 "),yB=a("a"),xOe=o("RoFormerConfig"),kOe=o(" (RoFormer model)"),ROe=l(),ag=a("li"),MU=a("strong"),SOe=o("segformer"),POe=o(" \u2014 "),wB=a("a"),$Oe=o("SegformerConfig"),IOe=o(" (SegFormer model)"),DOe=l(),ng=a("li"),EU=a("strong"),NOe=o("sew"),jOe=o(" \u2014 "),AB=a("a"),qOe=o("SEWConfig"),GOe=o(" (SEW model)"),OOe=l(),sg=a("li"),yU=a("strong"),XOe=o("sew-d"),VOe=o(" \u2014 "),LB=a("a"),zOe=o("SEWDConfig"),WOe=o(" (SEW-D model)"),QOe=l(),lg=a("li"),wU=a("strong"),HOe=o("speech-encoder-decoder"),UOe=o(" \u2014 "),BB=a("a"),JOe=o("SpeechEncoderDecoderConfig"),YOe=o(" (Speech Encoder decoder model)"),KOe=l(),ig=a("li"),AU=a("strong"),ZOe=o("speech_to_text"),eXe=o(" \u2014 "),xB=a("a"),oXe=o("Speech2TextConfig"),rXe=o(" (Speech2Text model)"),tXe=l(),dg=a("li"),LU=a("strong"),aXe=o("speech_to_text_2"),nXe=o(" \u2014 "),kB=a("a"),sXe=o("Speech2Text2Config"),lXe=o(" (Speech2Text2 model)"),iXe=l(),cg=a("li"),BU=a("strong"),dXe=o("splinter"),cXe=o(" \u2014 "),RB=a("a"),fXe=o("SplinterConfig"),mXe=o(" (Splinter model)"),gXe=l(),fg=a("li"),xU=a("strong"),hXe=o("squeezebert"),pXe=o(" \u2014 "),SB=a("a"),_Xe=o("SqueezeBertConfig"),uXe=o(" (SqueezeBERT model)"),bXe=l(),mg=a("li"),kU=a("strong"),vXe=o("swin"),TXe=o(" \u2014 "),PB=a("a"),FXe=o("SwinConfig"),CXe=o(" (Swin model)"),MXe=l(),gg=a("li"),RU=a("strong"),EXe=o("t5"),yXe=o(" \u2014 "),$B=a("a"),wXe=o("T5Config"),AXe=o(" (T5 model)"),LXe=l(),hg=a("li"),SU=a("strong"),BXe=o("tapas"),xXe=o(" \u2014 "),IB=a("a"),kXe=o("TapasConfig"),RXe=o(" (TAPAS model)"),SXe=l(),pg=a("li"),PU=a("strong"),PXe=o("transfo-xl"),$Xe=o(" \u2014 "),DB=a("a"),IXe=o("TransfoXLConfig"),DXe=o(" (Transformer-XL model)"),NXe=l(),_g=a("li"),$U=a("strong"),jXe=o("trocr"),qXe=o(" \u2014 "),NB=a("a"),GXe=o("TrOCRConfig"),OXe=o(" (TrOCR model)"),XXe=l(),ug=a("li"),IU=a("strong"),VXe=o("unispeech"),zXe=o(" \u2014 "),jB=a("a"),WXe=o("UniSpeechConfig"),QXe=o(" (UniSpeech model)"),HXe=l(),bg=a("li"),DU=a("strong"),UXe=o("unispeech-sat"),JXe=o(" \u2014 "),qB=a("a"),YXe=o("UniSpeechSatConfig"),KXe=o(" (UniSpeechSat model)"),ZXe=l(),vg=a("li"),NU=a("strong"),eVe=o("van"),oVe=o(" \u2014 "),GB=a("a"),rVe=o("VanConfig"),tVe=o(" (VAN model)"),aVe=l(),Tg=a("li"),jU=a("strong"),nVe=o("vilt"),sVe=o(" \u2014 "),OB=a("a"),lVe=o("ViltConfig"),iVe=o(" (ViLT model)"),dVe=l(),Fg=a("li"),qU=a("strong"),cVe=o("vision-encoder-decoder"),fVe=o(" \u2014 "),XB=a("a"),mVe=o("VisionEncoderDecoderConfig"),gVe=o(" (Vision Encoder decoder model)"),hVe=l(),Cg=a("li"),GU=a("strong"),pVe=o("vision-text-dual-encoder"),_Ve=o(" \u2014 "),VB=a("a"),uVe=o("VisionTextDualEncoderConfig"),bVe=o(" (VisionTextDualEncoder model)"),vVe=l(),Mg=a("li"),OU=a("strong"),TVe=o("visual_bert"),FVe=o(" \u2014 "),zB=a("a"),CVe=o("VisualBertConfig"),MVe=o(" (VisualBert model)"),EVe=l(),Eg=a("li"),XU=a("strong"),yVe=o("vit"),wVe=o(" \u2014 "),WB=a("a"),AVe=o("ViTConfig"),LVe=o(" (ViT model)"),BVe=l(),yg=a("li"),VU=a("strong"),xVe=o("vit_mae"),kVe=o(" \u2014 "),QB=a("a"),RVe=o("ViTMAEConfig"),SVe=o(" (ViTMAE model)"),PVe=l(),wg=a("li"),zU=a("strong"),$Ve=o("wav2vec2"),IVe=o(" \u2014 "),HB=a("a"),DVe=o("Wav2Vec2Config"),NVe=o(" (Wav2Vec2 model)"),jVe=l(),Ag=a("li"),WU=a("strong"),qVe=o("wavlm"),GVe=o(" \u2014 "),UB=a("a"),OVe=o("WavLMConfig"),XVe=o(" (WavLM model)"),VVe=l(),Lg=a("li"),QU=a("strong"),zVe=o("xglm"),WVe=o(" \u2014 "),JB=a("a"),QVe=o("XGLMConfig"),HVe=o(" (XGLM model)"),UVe=l(),Bg=a("li"),HU=a("strong"),JVe=o("xlm"),YVe=o(" \u2014 "),YB=a("a"),KVe=o("XLMConfig"),ZVe=o(" (XLM model)"),eze=l(),xg=a("li"),UU=a("strong"),oze=o("xlm-prophetnet"),rze=o(" \u2014 "),KB=a("a"),tze=o("XLMProphetNetConfig"),aze=o(" (XLMProphetNet model)"),nze=l(),kg=a("li"),JU=a("strong"),sze=o("xlm-roberta"),lze=o(" \u2014 "),ZB=a("a"),ize=o("XLMRobertaConfig"),dze=o(" (XLM-RoBERTa model)"),cze=l(),Rg=a("li"),YU=a("strong"),fze=o("xlm-roberta-xl"),mze=o(" \u2014 "),ex=a("a"),gze=o("XLMRobertaXLConfig"),hze=o(" (XLM-RoBERTa-XL model)"),pze=l(),Sg=a("li"),KU=a("strong"),_ze=o("xlnet"),uze=o(" \u2014 "),ox=a("a"),bze=o("XLNetConfig"),vze=o(" (XLNet model)"),Tze=l(),Pg=a("li"),ZU=a("strong"),Fze=o("yoso"),Cze=o(" \u2014 "),rx=a("a"),Mze=o("YosoConfig"),Eze=o(" (YOSO model)"),yze=l(),eJ=a("p"),wze=o("Examples:"),Aze=l(),f(E4.$$.fragment),Lze=l(),$g=a("div"),f(y4.$$.fragment),Bze=l(),oJ=a("p"),xze=o("Register a new configuration for this class."),Ike=l(),Wi=a("h2"),Ig=a("a"),rJ=a("span"),f(w4.$$.fragment),kze=l(),tJ=a("span"),Rze=o("AutoTokenizer"),Dke=l(),Qo=a("div"),f(A4.$$.fragment),Sze=l(),L4=a("p"),Pze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tx=a("a"),$ze=o("AutoTokenizer.from_pretrained()"),Ize=o(" class method."),Dze=l(),B4=a("p"),Nze=o("This class cannot be instantiated directly using "),aJ=a("code"),jze=o("__init__()"),qze=o(" (throws an error)."),Gze=l(),go=a("div"),f(x4.$$.fragment),Oze=l(),nJ=a("p"),Xze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Vze=l(),Oa=a("p"),zze=o("The tokenizer class to instantiate is selected based on the "),sJ=a("code"),Wze=o("model_type"),Qze=o(` property of the config object (either
passed as an argument or loaded from `),lJ=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iJ=a("code"),Jze=o("pretrained_model_name_or_path"),Yze=o(":"),Kze=l(),E=a("ul"),Wn=a("li"),dJ=a("strong"),Zze=o("albert"),eWe=o(" \u2014 "),ax=a("a"),oWe=o("AlbertTokenizer"),rWe=o(" or "),nx=a("a"),tWe=o("AlbertTokenizerFast"),aWe=o(" (ALBERT model)"),nWe=l(),Qn=a("li"),cJ=a("strong"),sWe=o("bart"),lWe=o(" \u2014 "),sx=a("a"),iWe=o("BartTokenizer"),dWe=o(" or "),lx=a("a"),cWe=o("BartTokenizerFast"),fWe=o(" (BART model)"),mWe=l(),Hn=a("li"),fJ=a("strong"),gWe=o("barthez"),hWe=o(" \u2014 "),ix=a("a"),pWe=o("BarthezTokenizer"),_We=o(" or "),dx=a("a"),uWe=o("BarthezTokenizerFast"),bWe=o(" (BARThez model)"),vWe=l(),Dg=a("li"),mJ=a("strong"),TWe=o("bartpho"),FWe=o(" \u2014 "),cx=a("a"),CWe=o("BartphoTokenizer"),MWe=o(" (BARTpho model)"),EWe=l(),Un=a("li"),gJ=a("strong"),yWe=o("bert"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("BertTokenizer"),LWe=o(" or "),mx=a("a"),BWe=o("BertTokenizerFast"),xWe=o(" (BERT model)"),kWe=l(),Ng=a("li"),hJ=a("strong"),RWe=o("bert-generation"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("BertGenerationTokenizer"),$We=o(" (Bert Generation model)"),IWe=l(),jg=a("li"),pJ=a("strong"),DWe=o("bert-japanese"),NWe=o(" \u2014 "),hx=a("a"),jWe=o("BertJapaneseTokenizer"),qWe=o(" (BertJapanese model)"),GWe=l(),qg=a("li"),_J=a("strong"),OWe=o("bertweet"),XWe=o(" \u2014 "),px=a("a"),VWe=o("BertweetTokenizer"),zWe=o(" (Bertweet model)"),WWe=l(),Jn=a("li"),uJ=a("strong"),QWe=o("big_bird"),HWe=o(" \u2014 "),_x=a("a"),UWe=o("BigBirdTokenizer"),JWe=o(" or "),ux=a("a"),YWe=o("BigBirdTokenizerFast"),KWe=o(" (BigBird model)"),ZWe=l(),Yn=a("li"),bJ=a("strong"),eQe=o("bigbird_pegasus"),oQe=o(" \u2014 "),bx=a("a"),rQe=o("PegasusTokenizer"),tQe=o(" or "),vx=a("a"),aQe=o("PegasusTokenizerFast"),nQe=o(" (BigBirdPegasus model)"),sQe=l(),Kn=a("li"),vJ=a("strong"),lQe=o("blenderbot"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("BlenderbotTokenizer"),cQe=o(" or "),Fx=a("a"),fQe=o("BlenderbotTokenizerFast"),mQe=o(" (Blenderbot model)"),gQe=l(),Gg=a("li"),TJ=a("strong"),hQe=o("blenderbot-small"),pQe=o(" \u2014 "),Cx=a("a"),_Qe=o("BlenderbotSmallTokenizer"),uQe=o(" (BlenderbotSmall model)"),bQe=l(),Og=a("li"),FJ=a("strong"),vQe=o("byt5"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("ByT5Tokenizer"),CQe=o(" (ByT5 model)"),MQe=l(),Zn=a("li"),CJ=a("strong"),EQe=o("camembert"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("CamembertTokenizer"),AQe=o(" or "),yx=a("a"),LQe=o("CamembertTokenizerFast"),BQe=o(" (CamemBERT model)"),xQe=l(),Xg=a("li"),MJ=a("strong"),kQe=o("canine"),RQe=o(" \u2014 "),wx=a("a"),SQe=o("CanineTokenizer"),PQe=o(" (Canine model)"),$Qe=l(),es=a("li"),EJ=a("strong"),IQe=o("clip"),DQe=o(" \u2014 "),Ax=a("a"),NQe=o("CLIPTokenizer"),jQe=o(" or "),Lx=a("a"),qQe=o("CLIPTokenizerFast"),GQe=o(" (CLIP model)"),OQe=l(),os=a("li"),yJ=a("strong"),XQe=o("convbert"),VQe=o(" \u2014 "),Bx=a("a"),zQe=o("ConvBertTokenizer"),WQe=o(" or "),xx=a("a"),QQe=o("ConvBertTokenizerFast"),HQe=o(" (ConvBERT model)"),UQe=l(),rs=a("li"),wJ=a("strong"),JQe=o("cpm"),YQe=o(" \u2014 "),kx=a("a"),KQe=o("CpmTokenizer"),ZQe=o(" or "),AJ=a("code"),eHe=o("CpmTokenizerFast"),oHe=o(" (CPM model)"),rHe=l(),Vg=a("li"),LJ=a("strong"),tHe=o("ctrl"),aHe=o(" \u2014 "),Rx=a("a"),nHe=o("CTRLTokenizer"),sHe=o(" (CTRL model)"),lHe=l(),ts=a("li"),BJ=a("strong"),iHe=o("deberta"),dHe=o(" \u2014 "),Sx=a("a"),cHe=o("DebertaTokenizer"),fHe=o(" or "),Px=a("a"),mHe=o("DebertaTokenizerFast"),gHe=o(" (DeBERTa model)"),hHe=l(),zg=a("li"),xJ=a("strong"),pHe=o("deberta-v2"),_He=o(" \u2014 "),$x=a("a"),uHe=o("DebertaV2Tokenizer"),bHe=o(" (DeBERTa-v2 model)"),vHe=l(),as=a("li"),kJ=a("strong"),THe=o("distilbert"),FHe=o(" \u2014 "),Ix=a("a"),CHe=o("DistilBertTokenizer"),MHe=o(" or "),Dx=a("a"),EHe=o("DistilBertTokenizerFast"),yHe=o(" (DistilBERT model)"),wHe=l(),ns=a("li"),RJ=a("strong"),AHe=o("dpr"),LHe=o(" \u2014 "),Nx=a("a"),BHe=o("DPRQuestionEncoderTokenizer"),xHe=o(" or "),jx=a("a"),kHe=o("DPRQuestionEncoderTokenizerFast"),RHe=o(" (DPR model)"),SHe=l(),ss=a("li"),SJ=a("strong"),PHe=o("electra"),$He=o(" \u2014 "),qx=a("a"),IHe=o("ElectraTokenizer"),DHe=o(" or "),Gx=a("a"),NHe=o("ElectraTokenizerFast"),jHe=o(" (ELECTRA model)"),qHe=l(),Wg=a("li"),PJ=a("strong"),GHe=o("flaubert"),OHe=o(" \u2014 "),Ox=a("a"),XHe=o("FlaubertTokenizer"),VHe=o(" (FlauBERT model)"),zHe=l(),ls=a("li"),$J=a("strong"),WHe=o("fnet"),QHe=o(" \u2014 "),Xx=a("a"),HHe=o("FNetTokenizer"),UHe=o(" or "),Vx=a("a"),JHe=o("FNetTokenizerFast"),YHe=o(" (FNet model)"),KHe=l(),Qg=a("li"),IJ=a("strong"),ZHe=o("fsmt"),eUe=o(" \u2014 "),zx=a("a"),oUe=o("FSMTTokenizer"),rUe=o(" (FairSeq Machine-Translation model)"),tUe=l(),is=a("li"),DJ=a("strong"),aUe=o("funnel"),nUe=o(" \u2014 "),Wx=a("a"),sUe=o("FunnelTokenizer"),lUe=o(" or "),Qx=a("a"),iUe=o("FunnelTokenizerFast"),dUe=o(" (Funnel Transformer model)"),cUe=l(),ds=a("li"),NJ=a("strong"),fUe=o("gpt2"),mUe=o(" \u2014 "),Hx=a("a"),gUe=o("GPT2Tokenizer"),hUe=o(" or "),Ux=a("a"),pUe=o("GPT2TokenizerFast"),_Ue=o(" (OpenAI GPT-2 model)"),uUe=l(),cs=a("li"),jJ=a("strong"),bUe=o("gpt_neo"),vUe=o(" \u2014 "),Jx=a("a"),TUe=o("GPT2Tokenizer"),FUe=o(" or "),Yx=a("a"),CUe=o("GPT2TokenizerFast"),MUe=o(" (GPT Neo model)"),EUe=l(),fs=a("li"),qJ=a("strong"),yUe=o("herbert"),wUe=o(" \u2014 "),Kx=a("a"),AUe=o("HerbertTokenizer"),LUe=o(" or "),Zx=a("a"),BUe=o("HerbertTokenizerFast"),xUe=o(" (HerBERT model)"),kUe=l(),Hg=a("li"),GJ=a("strong"),RUe=o("hubert"),SUe=o(" \u2014 "),ek=a("a"),PUe=o("Wav2Vec2CTCTokenizer"),$Ue=o(" (Hubert model)"),IUe=l(),ms=a("li"),OJ=a("strong"),DUe=o("ibert"),NUe=o(" \u2014 "),ok=a("a"),jUe=o("RobertaTokenizer"),qUe=o(" or "),rk=a("a"),GUe=o("RobertaTokenizerFast"),OUe=o(" (I-BERT model)"),XUe=l(),gs=a("li"),XJ=a("strong"),VUe=o("layoutlm"),zUe=o(" \u2014 "),tk=a("a"),WUe=o("LayoutLMTokenizer"),QUe=o(" or "),ak=a("a"),HUe=o("LayoutLMTokenizerFast"),UUe=o(" (LayoutLM model)"),JUe=l(),hs=a("li"),VJ=a("strong"),YUe=o("layoutlmv2"),KUe=o(" \u2014 "),nk=a("a"),ZUe=o("LayoutLMv2Tokenizer"),eJe=o(" or "),sk=a("a"),oJe=o("LayoutLMv2TokenizerFast"),rJe=o(" (LayoutLMv2 model)"),tJe=l(),ps=a("li"),zJ=a("strong"),aJe=o("layoutxlm"),nJe=o(" \u2014 "),lk=a("a"),sJe=o("LayoutXLMTokenizer"),lJe=o(" or "),ik=a("a"),iJe=o("LayoutXLMTokenizerFast"),dJe=o(" (LayoutXLM model)"),cJe=l(),_s=a("li"),WJ=a("strong"),fJe=o("led"),mJe=o(" \u2014 "),dk=a("a"),gJe=o("LEDTokenizer"),hJe=o(" or "),ck=a("a"),pJe=o("LEDTokenizerFast"),_Je=o(" (LED model)"),uJe=l(),us=a("li"),QJ=a("strong"),bJe=o("longformer"),vJe=o(" \u2014 "),fk=a("a"),TJe=o("LongformerTokenizer"),FJe=o(" or "),mk=a("a"),CJe=o("LongformerTokenizerFast"),MJe=o(" (Longformer model)"),EJe=l(),Ug=a("li"),HJ=a("strong"),yJe=o("luke"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("LukeTokenizer"),LJe=o(" (LUKE model)"),BJe=l(),bs=a("li"),UJ=a("strong"),xJe=o("lxmert"),kJe=o(" \u2014 "),hk=a("a"),RJe=o("LxmertTokenizer"),SJe=o(" or "),pk=a("a"),PJe=o("LxmertTokenizerFast"),$Je=o(" (LXMERT model)"),IJe=l(),Jg=a("li"),JJ=a("strong"),DJe=o("m2m_100"),NJe=o(" \u2014 "),_k=a("a"),jJe=o("M2M100Tokenizer"),qJe=o(" (M2M100 model)"),GJe=l(),Yg=a("li"),YJ=a("strong"),OJe=o("marian"),XJe=o(" \u2014 "),uk=a("a"),VJe=o("MarianTokenizer"),zJe=o(" (Marian model)"),WJe=l(),vs=a("li"),KJ=a("strong"),QJe=o("mbart"),HJe=o(" \u2014 "),bk=a("a"),UJe=o("MBartTokenizer"),JJe=o(" or "),vk=a("a"),YJe=o("MBartTokenizerFast"),KJe=o(" (mBART model)"),ZJe=l(),Ts=a("li"),ZJ=a("strong"),eYe=o("mbart50"),oYe=o(" \u2014 "),Tk=a("a"),rYe=o("MBart50Tokenizer"),tYe=o(" or "),Fk=a("a"),aYe=o("MBart50TokenizerFast"),nYe=o(" (mBART-50 model)"),sYe=l(),Kg=a("li"),eY=a("strong"),lYe=o("mluke"),iYe=o(" \u2014 "),Ck=a("a"),dYe=o("MLukeTokenizer"),cYe=o(" (mLUKE model)"),fYe=l(),Fs=a("li"),oY=a("strong"),mYe=o("mobilebert"),gYe=o(" \u2014 "),Mk=a("a"),hYe=o("MobileBertTokenizer"),pYe=o(" or "),Ek=a("a"),_Ye=o("MobileBertTokenizerFast"),uYe=o(" (MobileBERT model)"),bYe=l(),Cs=a("li"),rY=a("strong"),vYe=o("mpnet"),TYe=o(" \u2014 "),yk=a("a"),FYe=o("MPNetTokenizer"),CYe=o(" or "),wk=a("a"),MYe=o("MPNetTokenizerFast"),EYe=o(" (MPNet model)"),yYe=l(),Ms=a("li"),tY=a("strong"),wYe=o("mt5"),AYe=o(" \u2014 "),Ak=a("a"),LYe=o("MT5Tokenizer"),BYe=o(" or "),Lk=a("a"),xYe=o("MT5TokenizerFast"),kYe=o(" (mT5 model)"),RYe=l(),Es=a("li"),aY=a("strong"),SYe=o("openai-gpt"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("OpenAIGPTTokenizer"),IYe=o(" or "),xk=a("a"),DYe=o("OpenAIGPTTokenizerFast"),NYe=o(" (OpenAI GPT model)"),jYe=l(),ys=a("li"),nY=a("strong"),qYe=o("pegasus"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("PegasusTokenizer"),XYe=o(" or "),Rk=a("a"),VYe=o("PegasusTokenizerFast"),zYe=o(" (Pegasus model)"),WYe=l(),Zg=a("li"),sY=a("strong"),QYe=o("perceiver"),HYe=o(" \u2014 "),Sk=a("a"),UYe=o("PerceiverTokenizer"),JYe=o(" (Perceiver model)"),YYe=l(),eh=a("li"),lY=a("strong"),KYe=o("phobert"),ZYe=o(" \u2014 "),Pk=a("a"),eKe=o("PhobertTokenizer"),oKe=o(" (PhoBERT model)"),rKe=l(),oh=a("li"),iY=a("strong"),tKe=o("plbart"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("PLBartTokenizer"),sKe=o(" (PLBart model)"),lKe=l(),rh=a("li"),dY=a("strong"),iKe=o("prophetnet"),dKe=o(" \u2014 "),Ik=a("a"),cKe=o("ProphetNetTokenizer"),fKe=o(" (ProphetNet model)"),mKe=l(),ws=a("li"),cY=a("strong"),gKe=o("qdqbert"),hKe=o(" \u2014 "),Dk=a("a"),pKe=o("BertTokenizer"),_Ke=o(" or "),Nk=a("a"),uKe=o("BertTokenizerFast"),bKe=o(" (QDQBert model)"),vKe=l(),th=a("li"),fY=a("strong"),TKe=o("rag"),FKe=o(" \u2014 "),jk=a("a"),CKe=o("RagTokenizer"),MKe=o(" (RAG model)"),EKe=l(),As=a("li"),mY=a("strong"),yKe=o("realm"),wKe=o(" \u2014 "),qk=a("a"),AKe=o("RealmTokenizer"),LKe=o(" or "),Gk=a("a"),BKe=o("RealmTokenizerFast"),xKe=o(" (Realm model)"),kKe=l(),Ls=a("li"),gY=a("strong"),RKe=o("reformer"),SKe=o(" \u2014 "),Ok=a("a"),PKe=o("ReformerTokenizer"),$Ke=o(" or "),Xk=a("a"),IKe=o("ReformerTokenizerFast"),DKe=o(" (Reformer model)"),NKe=l(),Bs=a("li"),hY=a("strong"),jKe=o("rembert"),qKe=o(" \u2014 "),Vk=a("a"),GKe=o("RemBertTokenizer"),OKe=o(" or "),zk=a("a"),XKe=o("RemBertTokenizerFast"),VKe=o(" (RemBERT model)"),zKe=l(),xs=a("li"),pY=a("strong"),WKe=o("retribert"),QKe=o(" \u2014 "),Wk=a("a"),HKe=o("RetriBertTokenizer"),UKe=o(" or "),Qk=a("a"),JKe=o("RetriBertTokenizerFast"),YKe=o(" (RetriBERT model)"),KKe=l(),ks=a("li"),_Y=a("strong"),ZKe=o("roberta"),eZe=o(" \u2014 "),Hk=a("a"),oZe=o("RobertaTokenizer"),rZe=o(" or "),Uk=a("a"),tZe=o("RobertaTokenizerFast"),aZe=o(" (RoBERTa model)"),nZe=l(),Rs=a("li"),uY=a("strong"),sZe=o("roformer"),lZe=o(" \u2014 "),Jk=a("a"),iZe=o("RoFormerTokenizer"),dZe=o(" or "),Yk=a("a"),cZe=o("RoFormerTokenizerFast"),fZe=o(" (RoFormer model)"),mZe=l(),ah=a("li"),bY=a("strong"),gZe=o("speech_to_text"),hZe=o(" \u2014 "),Kk=a("a"),pZe=o("Speech2TextTokenizer"),_Ze=o(" (Speech2Text model)"),uZe=l(),nh=a("li"),vY=a("strong"),bZe=o("speech_to_text_2"),vZe=o(" \u2014 "),Zk=a("a"),TZe=o("Speech2Text2Tokenizer"),FZe=o(" (Speech2Text2 model)"),CZe=l(),Ss=a("li"),TY=a("strong"),MZe=o("splinter"),EZe=o(" \u2014 "),eR=a("a"),yZe=o("SplinterTokenizer"),wZe=o(" or "),oR=a("a"),AZe=o("SplinterTokenizerFast"),LZe=o(" (Splinter model)"),BZe=l(),Ps=a("li"),FY=a("strong"),xZe=o("squeezebert"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("SqueezeBertTokenizer"),SZe=o(" or "),tR=a("a"),PZe=o("SqueezeBertTokenizerFast"),$Ze=o(" (SqueezeBERT model)"),IZe=l(),$s=a("li"),CY=a("strong"),DZe=o("t5"),NZe=o(" \u2014 "),aR=a("a"),jZe=o("T5Tokenizer"),qZe=o(" or "),nR=a("a"),GZe=o("T5TokenizerFast"),OZe=o(" (T5 model)"),XZe=l(),sh=a("li"),MY=a("strong"),VZe=o("tapas"),zZe=o(" \u2014 "),sR=a("a"),WZe=o("TapasTokenizer"),QZe=o(" (TAPAS model)"),HZe=l(),lh=a("li"),EY=a("strong"),UZe=o("transfo-xl"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("TransfoXLTokenizer"),KZe=o(" (Transformer-XL model)"),ZZe=l(),ih=a("li"),yY=a("strong"),eeo=o("wav2vec2"),oeo=o(" \u2014 "),iR=a("a"),reo=o("Wav2Vec2CTCTokenizer"),teo=o(" (Wav2Vec2 model)"),aeo=l(),dh=a("li"),wY=a("strong"),neo=o("wav2vec2_phoneme"),seo=o(" \u2014 "),dR=a("a"),leo=o("Wav2Vec2PhonemeCTCTokenizer"),ieo=o(" (Wav2Vec2Phoneme model)"),deo=l(),Is=a("li"),AY=a("strong"),ceo=o("xglm"),feo=o(" \u2014 "),cR=a("a"),meo=o("XGLMTokenizer"),geo=o(" or "),fR=a("a"),heo=o("XGLMTokenizerFast"),peo=o(" (XGLM model)"),_eo=l(),ch=a("li"),LY=a("strong"),ueo=o("xlm"),beo=o(" \u2014 "),mR=a("a"),veo=o("XLMTokenizer"),Teo=o(" (XLM model)"),Feo=l(),fh=a("li"),BY=a("strong"),Ceo=o("xlm-prophetnet"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("XLMProphetNetTokenizer"),yeo=o(" (XLMProphetNet model)"),weo=l(),Ds=a("li"),xY=a("strong"),Aeo=o("xlm-roberta"),Leo=o(" \u2014 "),hR=a("a"),Beo=o("XLMRobertaTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("XLMRobertaTokenizerFast"),Reo=o(" (XLM-RoBERTa model)"),Seo=l(),Ns=a("li"),kY=a("strong"),Peo=o("xlnet"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("XLNetTokenizer"),Deo=o(" or "),uR=a("a"),Neo=o("XLNetTokenizerFast"),jeo=o(" (XLNet model)"),qeo=l(),RY=a("p"),Geo=o("Examples:"),Oeo=l(),f(k4.$$.fragment),Xeo=l(),mh=a("div"),f(R4.$$.fragment),Veo=l(),SY=a("p"),zeo=o("Register a new tokenizer in this mapping."),Nke=l(),Qi=a("h2"),gh=a("a"),PY=a("span"),f(S4.$$.fragment),Weo=l(),$Y=a("span"),Qeo=o("AutoFeatureExtractor"),jke=l(),Ho=a("div"),f(P4.$$.fragment),Heo=l(),$4=a("p"),Ueo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=a("a"),Jeo=o("AutoFeatureExtractor.from_pretrained()"),Yeo=o(" class method."),Keo=l(),I4=a("p"),Zeo=o("This class cannot be instantiated directly using "),IY=a("code"),eoo=o("__init__()"),ooo=o(" (throws an error)."),roo=l(),$e=a("div"),f(D4.$$.fragment),too=l(),DY=a("p"),aoo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),noo=l(),Xa=a("p"),soo=o("The feature extractor class to instantiate is selected based on the "),NY=a("code"),loo=o("model_type"),ioo=o(` property of the config object
(either passed as an argument or loaded from `),jY=a("code"),doo=o("pretrained_model_name_or_path"),coo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qY=a("code"),foo=o("pretrained_model_name_or_path"),moo=o(":"),goo=l(),te=a("ul"),hh=a("li"),GY=a("strong"),hoo=o("beit"),poo=o(" \u2014 "),vR=a("a"),_oo=o("BeitFeatureExtractor"),uoo=o(" (BEiT model)"),boo=l(),ph=a("li"),OY=a("strong"),voo=o("clip"),Too=o(" \u2014 "),TR=a("a"),Foo=o("CLIPFeatureExtractor"),Coo=o(" (CLIP model)"),Moo=l(),_h=a("li"),XY=a("strong"),Eoo=o("convnext"),yoo=o(" \u2014 "),FR=a("a"),woo=o("ConvNextFeatureExtractor"),Aoo=o(" (ConvNext model)"),Loo=l(),uh=a("li"),VY=a("strong"),Boo=o("deit"),xoo=o(" \u2014 "),CR=a("a"),koo=o("DeiTFeatureExtractor"),Roo=o(" (DeiT model)"),Soo=l(),bh=a("li"),zY=a("strong"),Poo=o("detr"),$oo=o(" \u2014 "),MR=a("a"),Ioo=o("DetrFeatureExtractor"),Doo=o(" (DETR model)"),Noo=l(),vh=a("li"),WY=a("strong"),joo=o("hubert"),qoo=o(" \u2014 "),ER=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Ooo=o(" (Hubert model)"),Xoo=l(),Th=a("li"),QY=a("strong"),Voo=o("layoutlmv2"),zoo=o(" \u2014 "),yR=a("a"),Woo=o("LayoutLMv2FeatureExtractor"),Qoo=o(" (LayoutLMv2 model)"),Hoo=l(),Fh=a("li"),HY=a("strong"),Uoo=o("maskformer"),Joo=o(" \u2014 "),wR=a("a"),Yoo=o("MaskFormerFeatureExtractor"),Koo=o(" (MaskFormer model)"),Zoo=l(),Ch=a("li"),UY=a("strong"),ero=o("perceiver"),oro=o(" \u2014 "),AR=a("a"),rro=o("PerceiverFeatureExtractor"),tro=o(" (Perceiver model)"),aro=l(),Mh=a("li"),JY=a("strong"),nro=o("poolformer"),sro=o(" \u2014 "),LR=a("a"),lro=o("PoolFormerFeatureExtractor"),iro=o(" (PoolFormer model)"),dro=l(),Eh=a("li"),YY=a("strong"),cro=o("resnet"),fro=o(" \u2014 "),BR=a("a"),mro=o("ConvNextFeatureExtractor"),gro=o(" (ResNet model)"),hro=l(),yh=a("li"),KY=a("strong"),pro=o("segformer"),_ro=o(" \u2014 "),xR=a("a"),uro=o("SegformerFeatureExtractor"),bro=o(" (SegFormer model)"),vro=l(),wh=a("li"),ZY=a("strong"),Tro=o("speech_to_text"),Fro=o(" \u2014 "),kR=a("a"),Cro=o("Speech2TextFeatureExtractor"),Mro=o(" (Speech2Text model)"),Ero=l(),Ah=a("li"),eK=a("strong"),yro=o("swin"),wro=o(" \u2014 "),RR=a("a"),Aro=o("ViTFeatureExtractor"),Lro=o(" (Swin model)"),Bro=l(),Lh=a("li"),oK=a("strong"),xro=o("van"),kro=o(" \u2014 "),SR=a("a"),Rro=o("ConvNextFeatureExtractor"),Sro=o(" (VAN model)"),Pro=l(),Bh=a("li"),rK=a("strong"),$ro=o("vit"),Iro=o(" \u2014 "),PR=a("a"),Dro=o("ViTFeatureExtractor"),Nro=o(" (ViT model)"),jro=l(),xh=a("li"),tK=a("strong"),qro=o("vit_mae"),Gro=o(" \u2014 "),$R=a("a"),Oro=o("ViTFeatureExtractor"),Xro=o(" (ViTMAE model)"),Vro=l(),kh=a("li"),aK=a("strong"),zro=o("wav2vec2"),Wro=o(" \u2014 "),IR=a("a"),Qro=o("Wav2Vec2FeatureExtractor"),Hro=o(" (Wav2Vec2 model)"),Uro=l(),f(Rh.$$.fragment),Jro=l(),nK=a("p"),Yro=o("Examples:"),Kro=l(),f(N4.$$.fragment),Zro=l(),Sh=a("div"),f(j4.$$.fragment),eto=l(),sK=a("p"),oto=o("Register a new feature extractor for this class."),qke=l(),Hi=a("h2"),Ph=a("a"),lK=a("span"),f(q4.$$.fragment),rto=l(),iK=a("span"),tto=o("AutoProcessor"),Gke=l(),Uo=a("div"),f(G4.$$.fragment),ato=l(),O4=a("p"),nto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=a("a"),sto=o("AutoProcessor.from_pretrained()"),lto=o(" class method."),ito=l(),X4=a("p"),dto=o("This class cannot be instantiated directly using "),dK=a("code"),cto=o("__init__()"),fto=o(" (throws an error)."),mto=l(),Ie=a("div"),f(V4.$$.fragment),gto=l(),cK=a("p"),hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pto=l(),Ui=a("p"),_to=o("The processor class to instantiate is selected based on the "),fK=a("code"),uto=o("model_type"),bto=o(` property of the config object (either
passed as an argument or loaded from `),mK=a("code"),vto=o("pretrained_model_name_or_path"),Tto=o(" if possible):"),Fto=l(),xe=a("ul"),$h=a("li"),gK=a("strong"),Cto=o("clip"),Mto=o(" \u2014 "),NR=a("a"),Eto=o("CLIPProcessor"),yto=o(" (CLIP model)"),wto=l(),Ih=a("li"),hK=a("strong"),Ato=o("layoutlmv2"),Lto=o(" \u2014 "),jR=a("a"),Bto=o("LayoutLMv2Processor"),xto=o(" (LayoutLMv2 model)"),kto=l(),Dh=a("li"),pK=a("strong"),Rto=o("layoutxlm"),Sto=o(" \u2014 "),qR=a("a"),Pto=o("LayoutXLMProcessor"),$to=o(" (LayoutXLM model)"),Ito=l(),Nh=a("li"),_K=a("strong"),Dto=o("speech_to_text"),Nto=o(" \u2014 "),GR=a("a"),jto=o("Speech2TextProcessor"),qto=o(" (Speech2Text model)"),Gto=l(),jh=a("li"),uK=a("strong"),Oto=o("speech_to_text_2"),Xto=o(" \u2014 "),OR=a("a"),Vto=o("Speech2Text2Processor"),zto=o(" (Speech2Text2 model)"),Wto=l(),qh=a("li"),bK=a("strong"),Qto=o("trocr"),Hto=o(" \u2014 "),XR=a("a"),Uto=o("TrOCRProcessor"),Jto=o(" (TrOCR model)"),Yto=l(),Gh=a("li"),vK=a("strong"),Kto=o("vision-text-dual-encoder"),Zto=o(" \u2014 "),VR=a("a"),eao=o("VisionTextDualEncoderProcessor"),oao=o(" (VisionTextDualEncoder model)"),rao=l(),Oh=a("li"),TK=a("strong"),tao=o("wav2vec2"),aao=o(" \u2014 "),zR=a("a"),nao=o("Wav2Vec2Processor"),sao=o(" (Wav2Vec2 model)"),lao=l(),f(Xh.$$.fragment),iao=l(),FK=a("p"),dao=o("Examples:"),cao=l(),f(z4.$$.fragment),fao=l(),Vh=a("div"),f(W4.$$.fragment),mao=l(),CK=a("p"),gao=o("Register a new processor for this class."),Oke=l(),Ji=a("h2"),zh=a("a"),MK=a("span"),f(Q4.$$.fragment),hao=l(),EK=a("span"),pao=o("AutoModel"),Xke=l(),Jo=a("div"),f(H4.$$.fragment),_ao=l(),Yi=a("p"),uao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yK=a("code"),bao=o("from_pretrained()"),vao=o("class method or the "),wK=a("code"),Tao=o("from_config()"),Fao=o(`class
method.`),Cao=l(),U4=a("p"),Mao=o("This class cannot be instantiated directly using "),AK=a("code"),Eao=o("__init__()"),yao=o(" (throws an error)."),wao=l(),Vr=a("div"),f(J4.$$.fragment),Aao=l(),LK=a("p"),Lao=o("Instantiates one of the base model classes of the library from a configuration."),Bao=l(),Ki=a("p"),xao=o(`Note:
Loading a model from its configuration file does `),BK=a("strong"),kao=o("not"),Rao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("code"),Sao=o("from_pretrained()"),Pao=o("to load the model weights."),$ao=l(),kK=a("p"),Iao=o("Examples:"),Dao=l(),f(Y4.$$.fragment),Nao=l(),De=a("div"),f(K4.$$.fragment),jao=l(),RK=a("p"),qao=o("Instantiate one of the base model classes of the library from a pretrained model."),Gao=l(),Va=a("p"),Oao=o("The model class to instantiate is selected based on the "),SK=a("code"),Xao=o("model_type"),Vao=o(` property of the config object (either
passed as an argument or loaded from `),PK=a("code"),zao=o("pretrained_model_name_or_path"),Wao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$K=a("code"),Qao=o("pretrained_model_name_or_path"),Hao=o(":"),Uao=l(),F=a("ul"),Wh=a("li"),IK=a("strong"),Jao=o("albert"),Yao=o(" \u2014 "),WR=a("a"),Kao=o("AlbertModel"),Zao=o(" (ALBERT model)"),eno=l(),Qh=a("li"),DK=a("strong"),ono=o("bart"),rno=o(" \u2014 "),QR=a("a"),tno=o("BartModel"),ano=o(" (BART model)"),nno=l(),Hh=a("li"),NK=a("strong"),sno=o("beit"),lno=o(" \u2014 "),HR=a("a"),ino=o("BeitModel"),dno=o(" (BEiT model)"),cno=l(),Uh=a("li"),jK=a("strong"),fno=o("bert"),mno=o(" \u2014 "),UR=a("a"),gno=o("BertModel"),hno=o(" (BERT model)"),pno=l(),Jh=a("li"),qK=a("strong"),_no=o("bert-generation"),uno=o(" \u2014 "),JR=a("a"),bno=o("BertGenerationEncoder"),vno=o(" (Bert Generation model)"),Tno=l(),Yh=a("li"),GK=a("strong"),Fno=o("big_bird"),Cno=o(" \u2014 "),YR=a("a"),Mno=o("BigBirdModel"),Eno=o(" (BigBird model)"),yno=l(),Kh=a("li"),OK=a("strong"),wno=o("bigbird_pegasus"),Ano=o(" \u2014 "),KR=a("a"),Lno=o("BigBirdPegasusModel"),Bno=o(" (BigBirdPegasus model)"),xno=l(),Zh=a("li"),XK=a("strong"),kno=o("blenderbot"),Rno=o(" \u2014 "),ZR=a("a"),Sno=o("BlenderbotModel"),Pno=o(" (Blenderbot model)"),$no=l(),ep=a("li"),VK=a("strong"),Ino=o("blenderbot-small"),Dno=o(" \u2014 "),eS=a("a"),Nno=o("BlenderbotSmallModel"),jno=o(" (BlenderbotSmall model)"),qno=l(),op=a("li"),zK=a("strong"),Gno=o("camembert"),Ono=o(" \u2014 "),oS=a("a"),Xno=o("CamembertModel"),Vno=o(" (CamemBERT model)"),zno=l(),rp=a("li"),WK=a("strong"),Wno=o("canine"),Qno=o(" \u2014 "),rS=a("a"),Hno=o("CanineModel"),Uno=o(" (Canine model)"),Jno=l(),tp=a("li"),QK=a("strong"),Yno=o("clip"),Kno=o(" \u2014 "),tS=a("a"),Zno=o("CLIPModel"),eso=o(" (CLIP model)"),oso=l(),ap=a("li"),HK=a("strong"),rso=o("convbert"),tso=o(" \u2014 "),aS=a("a"),aso=o("ConvBertModel"),nso=o(" (ConvBERT model)"),sso=l(),np=a("li"),UK=a("strong"),lso=o("convnext"),iso=o(" \u2014 "),nS=a("a"),dso=o("ConvNextModel"),cso=o(" (ConvNext model)"),fso=l(),sp=a("li"),JK=a("strong"),mso=o("ctrl"),gso=o(" \u2014 "),sS=a("a"),hso=o("CTRLModel"),pso=o(" (CTRL model)"),_so=l(),lp=a("li"),YK=a("strong"),uso=o("data2vec-audio"),bso=o(" \u2014 "),lS=a("a"),vso=o("Data2VecAudioModel"),Tso=o(" (Data2VecAudio model)"),Fso=l(),ip=a("li"),KK=a("strong"),Cso=o("data2vec-text"),Mso=o(" \u2014 "),iS=a("a"),Eso=o("Data2VecTextModel"),yso=o(" (Data2VecText model)"),wso=l(),dp=a("li"),ZK=a("strong"),Aso=o("deberta"),Lso=o(" \u2014 "),dS=a("a"),Bso=o("DebertaModel"),xso=o(" (DeBERTa model)"),kso=l(),cp=a("li"),eZ=a("strong"),Rso=o("deberta-v2"),Sso=o(" \u2014 "),cS=a("a"),Pso=o("DebertaV2Model"),$so=o(" (DeBERTa-v2 model)"),Iso=l(),fp=a("li"),oZ=a("strong"),Dso=o("decision_transformer"),Nso=o(" \u2014 "),fS=a("a"),jso=o("DecisionTransformerModel"),qso=o(" (Decision Transformer model)"),Gso=l(),mp=a("li"),rZ=a("strong"),Oso=o("deit"),Xso=o(" \u2014 "),mS=a("a"),Vso=o("DeiTModel"),zso=o(" (DeiT model)"),Wso=l(),gp=a("li"),tZ=a("strong"),Qso=o("detr"),Hso=o(" \u2014 "),gS=a("a"),Uso=o("DetrModel"),Jso=o(" (DETR model)"),Yso=l(),hp=a("li"),aZ=a("strong"),Kso=o("distilbert"),Zso=o(" \u2014 "),hS=a("a"),elo=o("DistilBertModel"),olo=o(" (DistilBERT model)"),rlo=l(),pp=a("li"),nZ=a("strong"),tlo=o("dpr"),alo=o(" \u2014 "),pS=a("a"),nlo=o("DPRQuestionEncoder"),slo=o(" (DPR model)"),llo=l(),_p=a("li"),sZ=a("strong"),ilo=o("dpt"),dlo=o(" \u2014 "),_S=a("a"),clo=o("DPTModel"),flo=o(" (DPT model)"),mlo=l(),up=a("li"),lZ=a("strong"),glo=o("electra"),hlo=o(" \u2014 "),uS=a("a"),plo=o("ElectraModel"),_lo=o(" (ELECTRA model)"),ulo=l(),bp=a("li"),iZ=a("strong"),blo=o("flaubert"),vlo=o(" \u2014 "),bS=a("a"),Tlo=o("FlaubertModel"),Flo=o(" (FlauBERT model)"),Clo=l(),vp=a("li"),dZ=a("strong"),Mlo=o("fnet"),Elo=o(" \u2014 "),vS=a("a"),ylo=o("FNetModel"),wlo=o(" (FNet model)"),Alo=l(),Tp=a("li"),cZ=a("strong"),Llo=o("fsmt"),Blo=o(" \u2014 "),TS=a("a"),xlo=o("FSMTModel"),klo=o(" (FairSeq Machine-Translation model)"),Rlo=l(),js=a("li"),fZ=a("strong"),Slo=o("funnel"),Plo=o(" \u2014 "),FS=a("a"),$lo=o("FunnelModel"),Ilo=o(" or "),CS=a("a"),Dlo=o("FunnelBaseModel"),Nlo=o(" (Funnel Transformer model)"),jlo=l(),Fp=a("li"),mZ=a("strong"),qlo=o("glpn"),Glo=o(" \u2014 "),MS=a("a"),Olo=o("GLPNModel"),Xlo=o(" (GLPN model)"),Vlo=l(),Cp=a("li"),gZ=a("strong"),zlo=o("gpt2"),Wlo=o(" \u2014 "),ES=a("a"),Qlo=o("GPT2Model"),Hlo=o(" (OpenAI GPT-2 model)"),Ulo=l(),Mp=a("li"),hZ=a("strong"),Jlo=o("gpt_neo"),Ylo=o(" \u2014 "),yS=a("a"),Klo=o("GPTNeoModel"),Zlo=o(" (GPT Neo model)"),eio=l(),Ep=a("li"),pZ=a("strong"),oio=o("gptj"),rio=o(" \u2014 "),wS=a("a"),tio=o("GPTJModel"),aio=o(" (GPT-J model)"),nio=l(),yp=a("li"),_Z=a("strong"),sio=o("hubert"),lio=o(" \u2014 "),AS=a("a"),iio=o("HubertModel"),dio=o(" (Hubert model)"),cio=l(),wp=a("li"),uZ=a("strong"),fio=o("ibert"),mio=o(" \u2014 "),LS=a("a"),gio=o("IBertModel"),hio=o(" (I-BERT model)"),pio=l(),Ap=a("li"),bZ=a("strong"),_io=o("imagegpt"),uio=o(" \u2014 "),BS=a("a"),bio=o("ImageGPTModel"),vio=o(" (ImageGPT model)"),Tio=l(),Lp=a("li"),vZ=a("strong"),Fio=o("layoutlm"),Cio=o(" \u2014 "),xS=a("a"),Mio=o("LayoutLMModel"),Eio=o(" (LayoutLM model)"),yio=l(),Bp=a("li"),TZ=a("strong"),wio=o("layoutlmv2"),Aio=o(" \u2014 "),kS=a("a"),Lio=o("LayoutLMv2Model"),Bio=o(" (LayoutLMv2 model)"),xio=l(),xp=a("li"),FZ=a("strong"),kio=o("led"),Rio=o(" \u2014 "),RS=a("a"),Sio=o("LEDModel"),Pio=o(" (LED model)"),$io=l(),kp=a("li"),CZ=a("strong"),Iio=o("longformer"),Dio=o(" \u2014 "),SS=a("a"),Nio=o("LongformerModel"),jio=o(" (Longformer model)"),qio=l(),Rp=a("li"),MZ=a("strong"),Gio=o("luke"),Oio=o(" \u2014 "),PS=a("a"),Xio=o("LukeModel"),Vio=o(" (LUKE model)"),zio=l(),Sp=a("li"),EZ=a("strong"),Wio=o("lxmert"),Qio=o(" \u2014 "),$S=a("a"),Hio=o("LxmertModel"),Uio=o(" (LXMERT model)"),Jio=l(),Pp=a("li"),yZ=a("strong"),Yio=o("m2m_100"),Kio=o(" \u2014 "),IS=a("a"),Zio=o("M2M100Model"),edo=o(" (M2M100 model)"),odo=l(),$p=a("li"),wZ=a("strong"),rdo=o("marian"),tdo=o(" \u2014 "),DS=a("a"),ado=o("MarianModel"),ndo=o(" (Marian model)"),sdo=l(),Ip=a("li"),AZ=a("strong"),ldo=o("maskformer"),ido=o(" \u2014 "),NS=a("a"),ddo=o("MaskFormerModel"),cdo=o(" (MaskFormer model)"),fdo=l(),Dp=a("li"),LZ=a("strong"),mdo=o("mbart"),gdo=o(" \u2014 "),jS=a("a"),hdo=o("MBartModel"),pdo=o(" (mBART model)"),_do=l(),Np=a("li"),BZ=a("strong"),udo=o("megatron-bert"),bdo=o(" \u2014 "),qS=a("a"),vdo=o("MegatronBertModel"),Tdo=o(" (MegatronBert model)"),Fdo=l(),jp=a("li"),xZ=a("strong"),Cdo=o("mobilebert"),Mdo=o(" \u2014 "),GS=a("a"),Edo=o("MobileBertModel"),ydo=o(" (MobileBERT model)"),wdo=l(),qp=a("li"),kZ=a("strong"),Ado=o("mpnet"),Ldo=o(" \u2014 "),OS=a("a"),Bdo=o("MPNetModel"),xdo=o(" (MPNet model)"),kdo=l(),Gp=a("li"),RZ=a("strong"),Rdo=o("mt5"),Sdo=o(" \u2014 "),XS=a("a"),Pdo=o("MT5Model"),$do=o(" (mT5 model)"),Ido=l(),Op=a("li"),SZ=a("strong"),Ddo=o("nystromformer"),Ndo=o(" \u2014 "),VS=a("a"),jdo=o("NystromformerModel"),qdo=o(" (Nystromformer model)"),Gdo=l(),Xp=a("li"),PZ=a("strong"),Odo=o("openai-gpt"),Xdo=o(" \u2014 "),zS=a("a"),Vdo=o("OpenAIGPTModel"),zdo=o(" (OpenAI GPT model)"),Wdo=l(),Vp=a("li"),$Z=a("strong"),Qdo=o("pegasus"),Hdo=o(" \u2014 "),WS=a("a"),Udo=o("PegasusModel"),Jdo=o(" (Pegasus model)"),Ydo=l(),zp=a("li"),IZ=a("strong"),Kdo=o("perceiver"),Zdo=o(" \u2014 "),QS=a("a"),eco=o("PerceiverModel"),oco=o(" (Perceiver model)"),rco=l(),Wp=a("li"),DZ=a("strong"),tco=o("plbart"),aco=o(" \u2014 "),HS=a("a"),nco=o("PLBartModel"),sco=o(" (PLBart model)"),lco=l(),Qp=a("li"),NZ=a("strong"),ico=o("poolformer"),dco=o(" \u2014 "),US=a("a"),cco=o("PoolFormerModel"),fco=o(" (PoolFormer model)"),mco=l(),Hp=a("li"),jZ=a("strong"),gco=o("prophetnet"),hco=o(" \u2014 "),JS=a("a"),pco=o("ProphetNetModel"),_co=o(" (ProphetNet model)"),uco=l(),Up=a("li"),qZ=a("strong"),bco=o("qdqbert"),vco=o(" \u2014 "),YS=a("a"),Tco=o("QDQBertModel"),Fco=o(" (QDQBert model)"),Cco=l(),Jp=a("li"),GZ=a("strong"),Mco=o("reformer"),Eco=o(" \u2014 "),KS=a("a"),yco=o("ReformerModel"),wco=o(" (Reformer model)"),Aco=l(),Yp=a("li"),OZ=a("strong"),Lco=o("rembert"),Bco=o(" \u2014 "),ZS=a("a"),xco=o("RemBertModel"),kco=o(" (RemBERT model)"),Rco=l(),Kp=a("li"),XZ=a("strong"),Sco=o("resnet"),Pco=o(" \u2014 "),eP=a("a"),$co=o("ResNetModel"),Ico=o(" (ResNet model)"),Dco=l(),Zp=a("li"),VZ=a("strong"),Nco=o("retribert"),jco=o(" \u2014 "),oP=a("a"),qco=o("RetriBertModel"),Gco=o(" (RetriBERT model)"),Oco=l(),e_=a("li"),zZ=a("strong"),Xco=o("roberta"),Vco=o(" \u2014 "),rP=a("a"),zco=o("RobertaModel"),Wco=o(" (RoBERTa model)"),Qco=l(),o_=a("li"),WZ=a("strong"),Hco=o("roformer"),Uco=o(" \u2014 "),tP=a("a"),Jco=o("RoFormerModel"),Yco=o(" (RoFormer model)"),Kco=l(),r_=a("li"),QZ=a("strong"),Zco=o("segformer"),efo=o(" \u2014 "),aP=a("a"),ofo=o("SegformerModel"),rfo=o(" (SegFormer model)"),tfo=l(),t_=a("li"),HZ=a("strong"),afo=o("sew"),nfo=o(" \u2014 "),nP=a("a"),sfo=o("SEWModel"),lfo=o(" (SEW model)"),ifo=l(),a_=a("li"),UZ=a("strong"),dfo=o("sew-d"),cfo=o(" \u2014 "),sP=a("a"),ffo=o("SEWDModel"),mfo=o(" (SEW-D model)"),gfo=l(),n_=a("li"),JZ=a("strong"),hfo=o("speech_to_text"),pfo=o(" \u2014 "),lP=a("a"),_fo=o("Speech2TextModel"),ufo=o(" (Speech2Text model)"),bfo=l(),s_=a("li"),YZ=a("strong"),vfo=o("splinter"),Tfo=o(" \u2014 "),iP=a("a"),Ffo=o("SplinterModel"),Cfo=o(" (Splinter model)"),Mfo=l(),l_=a("li"),KZ=a("strong"),Efo=o("squeezebert"),yfo=o(" \u2014 "),dP=a("a"),wfo=o("SqueezeBertModel"),Afo=o(" (SqueezeBERT model)"),Lfo=l(),i_=a("li"),ZZ=a("strong"),Bfo=o("swin"),xfo=o(" \u2014 "),cP=a("a"),kfo=o("SwinModel"),Rfo=o(" (Swin model)"),Sfo=l(),d_=a("li"),eee=a("strong"),Pfo=o("t5"),$fo=o(" \u2014 "),fP=a("a"),Ifo=o("T5Model"),Dfo=o(" (T5 model)"),Nfo=l(),c_=a("li"),oee=a("strong"),jfo=o("tapas"),qfo=o(" \u2014 "),mP=a("a"),Gfo=o("TapasModel"),Ofo=o(" (TAPAS model)"),Xfo=l(),f_=a("li"),ree=a("strong"),Vfo=o("transfo-xl"),zfo=o(" \u2014 "),gP=a("a"),Wfo=o("TransfoXLModel"),Qfo=o(" (Transformer-XL model)"),Hfo=l(),m_=a("li"),tee=a("strong"),Ufo=o("unispeech"),Jfo=o(" \u2014 "),hP=a("a"),Yfo=o("UniSpeechModel"),Kfo=o(" (UniSpeech model)"),Zfo=l(),g_=a("li"),aee=a("strong"),emo=o("unispeech-sat"),omo=o(" \u2014 "),pP=a("a"),rmo=o("UniSpeechSatModel"),tmo=o(" (UniSpeechSat model)"),amo=l(),h_=a("li"),nee=a("strong"),nmo=o("van"),smo=o(" \u2014 "),_P=a("a"),lmo=o("VanModel"),imo=o(" (VAN model)"),dmo=l(),p_=a("li"),see=a("strong"),cmo=o("vilt"),fmo=o(" \u2014 "),uP=a("a"),mmo=o("ViltModel"),gmo=o(" (ViLT model)"),hmo=l(),__=a("li"),lee=a("strong"),pmo=o("vision-text-dual-encoder"),_mo=o(" \u2014 "),bP=a("a"),umo=o("VisionTextDualEncoderModel"),bmo=o(" (VisionTextDualEncoder model)"),vmo=l(),u_=a("li"),iee=a("strong"),Tmo=o("visual_bert"),Fmo=o(" \u2014 "),vP=a("a"),Cmo=o("VisualBertModel"),Mmo=o(" (VisualBert model)"),Emo=l(),b_=a("li"),dee=a("strong"),ymo=o("vit"),wmo=o(" \u2014 "),TP=a("a"),Amo=o("ViTModel"),Lmo=o(" (ViT model)"),Bmo=l(),v_=a("li"),cee=a("strong"),xmo=o("vit_mae"),kmo=o(" \u2014 "),FP=a("a"),Rmo=o("ViTMAEModel"),Smo=o(" (ViTMAE model)"),Pmo=l(),T_=a("li"),fee=a("strong"),$mo=o("wav2vec2"),Imo=o(" \u2014 "),CP=a("a"),Dmo=o("Wav2Vec2Model"),Nmo=o(" (Wav2Vec2 model)"),jmo=l(),F_=a("li"),mee=a("strong"),qmo=o("wavlm"),Gmo=o(" \u2014 "),MP=a("a"),Omo=o("WavLMModel"),Xmo=o(" (WavLM model)"),Vmo=l(),C_=a("li"),gee=a("strong"),zmo=o("xglm"),Wmo=o(" \u2014 "),EP=a("a"),Qmo=o("XGLMModel"),Hmo=o(" (XGLM model)"),Umo=l(),M_=a("li"),hee=a("strong"),Jmo=o("xlm"),Ymo=o(" \u2014 "),yP=a("a"),Kmo=o("XLMModel"),Zmo=o(" (XLM model)"),ego=l(),E_=a("li"),pee=a("strong"),ogo=o("xlm-prophetnet"),rgo=o(" \u2014 "),wP=a("a"),tgo=o("XLMProphetNetModel"),ago=o(" (XLMProphetNet model)"),ngo=l(),y_=a("li"),_ee=a("strong"),sgo=o("xlm-roberta"),lgo=o(" \u2014 "),AP=a("a"),igo=o("XLMRobertaModel"),dgo=o(" (XLM-RoBERTa model)"),cgo=l(),w_=a("li"),uee=a("strong"),fgo=o("xlm-roberta-xl"),mgo=o(" \u2014 "),LP=a("a"),ggo=o("XLMRobertaXLModel"),hgo=o(" (XLM-RoBERTa-XL model)"),pgo=l(),A_=a("li"),bee=a("strong"),_go=o("xlnet"),ugo=o(" \u2014 "),BP=a("a"),bgo=o("XLNetModel"),vgo=o(" (XLNet model)"),Tgo=l(),L_=a("li"),vee=a("strong"),Fgo=o("yoso"),Cgo=o(" \u2014 "),xP=a("a"),Mgo=o("YosoModel"),Ego=o(" (YOSO model)"),ygo=l(),B_=a("p"),wgo=o("The model is set in evaluation mode by default using "),Tee=a("code"),Ago=o("model.eval()"),Lgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=a("code"),Bgo=o("model.train()"),xgo=l(),Cee=a("p"),kgo=o("Examples:"),Rgo=l(),f(Z4.$$.fragment),Vke=l(),Zi=a("h2"),x_=a("a"),Mee=a("span"),f(eE.$$.fragment),Sgo=l(),Eee=a("span"),Pgo=o("AutoModelForPreTraining"),zke=l(),Yo=a("div"),f(oE.$$.fragment),$go=l(),ed=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=a("code"),Dgo=o("from_pretrained()"),Ngo=o("class method or the "),wee=a("code"),jgo=o("from_config()"),qgo=o(`class
method.`),Ggo=l(),rE=a("p"),Ogo=o("This class cannot be instantiated directly using "),Aee=a("code"),Xgo=o("__init__()"),Vgo=o(" (throws an error)."),zgo=l(),zr=a("div"),f(tE.$$.fragment),Wgo=l(),Lee=a("p"),Qgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hgo=l(),od=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),Bee=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("code"),Kgo=o("from_pretrained()"),Zgo=o("to load the model weights."),eho=l(),kee=a("p"),oho=o("Examples:"),rho=l(),f(aE.$$.fragment),tho=l(),Ne=a("div"),f(nE.$$.fragment),aho=l(),Ree=a("p"),nho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sho=l(),za=a("p"),lho=o("The model class to instantiate is selected based on the "),See=a("code"),iho=o("model_type"),dho=o(` property of the config object (either
passed as an argument or loaded from `),Pee=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=a("code"),mho=o("pretrained_model_name_or_path"),gho=o(":"),hho=l(),k=a("ul"),k_=a("li"),Iee=a("strong"),pho=o("albert"),_ho=o(" \u2014 "),kP=a("a"),uho=o("AlbertForPreTraining"),bho=o(" (ALBERT model)"),vho=l(),R_=a("li"),Dee=a("strong"),Tho=o("bart"),Fho=o(" \u2014 "),RP=a("a"),Cho=o("BartForConditionalGeneration"),Mho=o(" (BART model)"),Eho=l(),S_=a("li"),Nee=a("strong"),yho=o("bert"),who=o(" \u2014 "),SP=a("a"),Aho=o("BertForPreTraining"),Lho=o(" (BERT model)"),Bho=l(),P_=a("li"),jee=a("strong"),xho=o("big_bird"),kho=o(" \u2014 "),PP=a("a"),Rho=o("BigBirdForPreTraining"),Sho=o(" (BigBird model)"),Pho=l(),$_=a("li"),qee=a("strong"),$ho=o("camembert"),Iho=o(" \u2014 "),$P=a("a"),Dho=o("CamembertForMaskedLM"),Nho=o(" (CamemBERT model)"),jho=l(),I_=a("li"),Gee=a("strong"),qho=o("ctrl"),Gho=o(" \u2014 "),IP=a("a"),Oho=o("CTRLLMHeadModel"),Xho=o(" (CTRL model)"),Vho=l(),D_=a("li"),Oee=a("strong"),zho=o("data2vec-text"),Who=o(" \u2014 "),DP=a("a"),Qho=o("Data2VecTextForMaskedLM"),Hho=o(" (Data2VecText model)"),Uho=l(),N_=a("li"),Xee=a("strong"),Jho=o("deberta"),Yho=o(" \u2014 "),NP=a("a"),Kho=o("DebertaForMaskedLM"),Zho=o(" (DeBERTa model)"),epo=l(),j_=a("li"),Vee=a("strong"),opo=o("deberta-v2"),rpo=o(" \u2014 "),jP=a("a"),tpo=o("DebertaV2ForMaskedLM"),apo=o(" (DeBERTa-v2 model)"),npo=l(),q_=a("li"),zee=a("strong"),spo=o("distilbert"),lpo=o(" \u2014 "),qP=a("a"),ipo=o("DistilBertForMaskedLM"),dpo=o(" (DistilBERT model)"),cpo=l(),G_=a("li"),Wee=a("strong"),fpo=o("electra"),mpo=o(" \u2014 "),GP=a("a"),gpo=o("ElectraForPreTraining"),hpo=o(" (ELECTRA model)"),ppo=l(),O_=a("li"),Qee=a("strong"),_po=o("flaubert"),upo=o(" \u2014 "),OP=a("a"),bpo=o("FlaubertWithLMHeadModel"),vpo=o(" (FlauBERT model)"),Tpo=l(),X_=a("li"),Hee=a("strong"),Fpo=o("fnet"),Cpo=o(" \u2014 "),XP=a("a"),Mpo=o("FNetForPreTraining"),Epo=o(" (FNet model)"),ypo=l(),V_=a("li"),Uee=a("strong"),wpo=o("fsmt"),Apo=o(" \u2014 "),VP=a("a"),Lpo=o("FSMTForConditionalGeneration"),Bpo=o(" (FairSeq Machine-Translation model)"),xpo=l(),z_=a("li"),Jee=a("strong"),kpo=o("funnel"),Rpo=o(" \u2014 "),zP=a("a"),Spo=o("FunnelForPreTraining"),Ppo=o(" (Funnel Transformer model)"),$po=l(),W_=a("li"),Yee=a("strong"),Ipo=o("gpt2"),Dpo=o(" \u2014 "),WP=a("a"),Npo=o("GPT2LMHeadModel"),jpo=o(" (OpenAI GPT-2 model)"),qpo=l(),Q_=a("li"),Kee=a("strong"),Gpo=o("ibert"),Opo=o(" \u2014 "),QP=a("a"),Xpo=o("IBertForMaskedLM"),Vpo=o(" (I-BERT model)"),zpo=l(),H_=a("li"),Zee=a("strong"),Wpo=o("layoutlm"),Qpo=o(" \u2014 "),HP=a("a"),Hpo=o("LayoutLMForMaskedLM"),Upo=o(" (LayoutLM model)"),Jpo=l(),U_=a("li"),eoe=a("strong"),Ypo=o("longformer"),Kpo=o(" \u2014 "),UP=a("a"),Zpo=o("LongformerForMaskedLM"),e_o=o(" (Longformer model)"),o_o=l(),J_=a("li"),ooe=a("strong"),r_o=o("lxmert"),t_o=o(" \u2014 "),JP=a("a"),a_o=o("LxmertForPreTraining"),n_o=o(" (LXMERT model)"),s_o=l(),Y_=a("li"),roe=a("strong"),l_o=o("megatron-bert"),i_o=o(" \u2014 "),YP=a("a"),d_o=o("MegatronBertForPreTraining"),c_o=o(" (MegatronBert model)"),f_o=l(),K_=a("li"),toe=a("strong"),m_o=o("mobilebert"),g_o=o(" \u2014 "),KP=a("a"),h_o=o("MobileBertForPreTraining"),p_o=o(" (MobileBERT model)"),__o=l(),Z_=a("li"),aoe=a("strong"),u_o=o("mpnet"),b_o=o(" \u2014 "),ZP=a("a"),v_o=o("MPNetForMaskedLM"),T_o=o(" (MPNet model)"),F_o=l(),eu=a("li"),noe=a("strong"),C_o=o("openai-gpt"),M_o=o(" \u2014 "),e$=a("a"),E_o=o("OpenAIGPTLMHeadModel"),y_o=o(" (OpenAI GPT model)"),w_o=l(),ou=a("li"),soe=a("strong"),A_o=o("retribert"),L_o=o(" \u2014 "),o$=a("a"),B_o=o("RetriBertModel"),x_o=o(" (RetriBERT model)"),k_o=l(),ru=a("li"),loe=a("strong"),R_o=o("roberta"),S_o=o(" \u2014 "),r$=a("a"),P_o=o("RobertaForMaskedLM"),$_o=o(" (RoBERTa model)"),I_o=l(),tu=a("li"),ioe=a("strong"),D_o=o("squeezebert"),N_o=o(" \u2014 "),t$=a("a"),j_o=o("SqueezeBertForMaskedLM"),q_o=o(" (SqueezeBERT model)"),G_o=l(),au=a("li"),doe=a("strong"),O_o=o("t5"),X_o=o(" \u2014 "),a$=a("a"),V_o=o("T5ForConditionalGeneration"),z_o=o(" (T5 model)"),W_o=l(),nu=a("li"),coe=a("strong"),Q_o=o("tapas"),H_o=o(" \u2014 "),n$=a("a"),U_o=o("TapasForMaskedLM"),J_o=o(" (TAPAS model)"),Y_o=l(),su=a("li"),foe=a("strong"),K_o=o("transfo-xl"),Z_o=o(" \u2014 "),s$=a("a"),euo=o("TransfoXLLMHeadModel"),ouo=o(" (Transformer-XL model)"),ruo=l(),lu=a("li"),moe=a("strong"),tuo=o("unispeech"),auo=o(" \u2014 "),l$=a("a"),nuo=o("UniSpeechForPreTraining"),suo=o(" (UniSpeech model)"),luo=l(),iu=a("li"),goe=a("strong"),iuo=o("unispeech-sat"),duo=o(" \u2014 "),i$=a("a"),cuo=o("UniSpeechSatForPreTraining"),fuo=o(" (UniSpeechSat model)"),muo=l(),du=a("li"),hoe=a("strong"),guo=o("visual_bert"),huo=o(" \u2014 "),d$=a("a"),puo=o("VisualBertForPreTraining"),_uo=o(" (VisualBert model)"),uuo=l(),cu=a("li"),poe=a("strong"),buo=o("vit_mae"),vuo=o(" \u2014 "),c$=a("a"),Tuo=o("ViTMAEForPreTraining"),Fuo=o(" (ViTMAE model)"),Cuo=l(),fu=a("li"),_oe=a("strong"),Muo=o("wav2vec2"),Euo=o(" \u2014 "),f$=a("a"),yuo=o("Wav2Vec2ForPreTraining"),wuo=o(" (Wav2Vec2 model)"),Auo=l(),mu=a("li"),uoe=a("strong"),Luo=o("xlm"),Buo=o(" \u2014 "),m$=a("a"),xuo=o("XLMWithLMHeadModel"),kuo=o(" (XLM model)"),Ruo=l(),gu=a("li"),boe=a("strong"),Suo=o("xlm-roberta"),Puo=o(" \u2014 "),g$=a("a"),$uo=o("XLMRobertaForMaskedLM"),Iuo=o(" (XLM-RoBERTa model)"),Duo=l(),hu=a("li"),voe=a("strong"),Nuo=o("xlm-roberta-xl"),juo=o(" \u2014 "),h$=a("a"),quo=o("XLMRobertaXLForMaskedLM"),Guo=o(" (XLM-RoBERTa-XL model)"),Ouo=l(),pu=a("li"),Toe=a("strong"),Xuo=o("xlnet"),Vuo=o(" \u2014 "),p$=a("a"),zuo=o("XLNetLMHeadModel"),Wuo=o(" (XLNet model)"),Quo=l(),_u=a("p"),Huo=o("The model is set in evaluation mode by default using "),Foe=a("code"),Uuo=o("model.eval()"),Juo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=a("code"),Yuo=o("model.train()"),Kuo=l(),Moe=a("p"),Zuo=o("Examples:"),e1o=l(),f(sE.$$.fragment),Wke=l(),rd=a("h2"),uu=a("a"),Eoe=a("span"),f(lE.$$.fragment),o1o=l(),yoe=a("span"),r1o=o("AutoModelForCausalLM"),Qke=l(),Ko=a("div"),f(iE.$$.fragment),t1o=l(),td=a("p"),a1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=a("code"),n1o=o("from_pretrained()"),s1o=o("class method or the "),Aoe=a("code"),l1o=o("from_config()"),i1o=o(`class
method.`),d1o=l(),dE=a("p"),c1o=o("This class cannot be instantiated directly using "),Loe=a("code"),f1o=o("__init__()"),m1o=o(" (throws an error)."),g1o=l(),Wr=a("div"),f(cE.$$.fragment),h1o=l(),Boe=a("p"),p1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_1o=l(),ad=a("p"),u1o=o(`Note:
Loading a model from its configuration file does `),xoe=a("strong"),b1o=o("not"),v1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("code"),T1o=o("from_pretrained()"),F1o=o("to load the model weights."),C1o=l(),Roe=a("p"),M1o=o("Examples:"),E1o=l(),f(fE.$$.fragment),y1o=l(),je=a("div"),f(mE.$$.fragment),w1o=l(),Soe=a("p"),A1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L1o=l(),Wa=a("p"),B1o=o("The model class to instantiate is selected based on the "),Poe=a("code"),x1o=o("model_type"),k1o=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),R1o=o("pretrained_model_name_or_path"),S1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),P1o=o("pretrained_model_name_or_path"),$1o=o(":"),I1o=l(),$=a("ul"),bu=a("li"),Doe=a("strong"),D1o=o("bart"),N1o=o(" \u2014 "),_$=a("a"),j1o=o("BartForCausalLM"),q1o=o(" (BART model)"),G1o=l(),vu=a("li"),Noe=a("strong"),O1o=o("bert"),X1o=o(" \u2014 "),u$=a("a"),V1o=o("BertLMHeadModel"),z1o=o(" (BERT model)"),W1o=l(),Tu=a("li"),joe=a("strong"),Q1o=o("bert-generation"),H1o=o(" \u2014 "),b$=a("a"),U1o=o("BertGenerationDecoder"),J1o=o(" (Bert Generation model)"),Y1o=l(),Fu=a("li"),qoe=a("strong"),K1o=o("big_bird"),Z1o=o(" \u2014 "),v$=a("a"),ebo=o("BigBirdForCausalLM"),obo=o(" (BigBird model)"),rbo=l(),Cu=a("li"),Goe=a("strong"),tbo=o("bigbird_pegasus"),abo=o(" \u2014 "),T$=a("a"),nbo=o("BigBirdPegasusForCausalLM"),sbo=o(" (BigBirdPegasus model)"),lbo=l(),Mu=a("li"),Ooe=a("strong"),ibo=o("blenderbot"),dbo=o(" \u2014 "),F$=a("a"),cbo=o("BlenderbotForCausalLM"),fbo=o(" (Blenderbot model)"),mbo=l(),Eu=a("li"),Xoe=a("strong"),gbo=o("blenderbot-small"),hbo=o(" \u2014 "),C$=a("a"),pbo=o("BlenderbotSmallForCausalLM"),_bo=o(" (BlenderbotSmall model)"),ubo=l(),yu=a("li"),Voe=a("strong"),bbo=o("camembert"),vbo=o(" \u2014 "),M$=a("a"),Tbo=o("CamembertForCausalLM"),Fbo=o(" (CamemBERT model)"),Cbo=l(),wu=a("li"),zoe=a("strong"),Mbo=o("ctrl"),Ebo=o(" \u2014 "),E$=a("a"),ybo=o("CTRLLMHeadModel"),wbo=o(" (CTRL model)"),Abo=l(),Au=a("li"),Woe=a("strong"),Lbo=o("data2vec-text"),Bbo=o(" \u2014 "),y$=a("a"),xbo=o("Data2VecTextForCausalLM"),kbo=o(" (Data2VecText model)"),Rbo=l(),Lu=a("li"),Qoe=a("strong"),Sbo=o("electra"),Pbo=o(" \u2014 "),w$=a("a"),$bo=o("ElectraForCausalLM"),Ibo=o(" (ELECTRA model)"),Dbo=l(),Bu=a("li"),Hoe=a("strong"),Nbo=o("gpt2"),jbo=o(" \u2014 "),A$=a("a"),qbo=o("GPT2LMHeadModel"),Gbo=o(" (OpenAI GPT-2 model)"),Obo=l(),xu=a("li"),Uoe=a("strong"),Xbo=o("gpt_neo"),Vbo=o(" \u2014 "),L$=a("a"),zbo=o("GPTNeoForCausalLM"),Wbo=o(" (GPT Neo model)"),Qbo=l(),ku=a("li"),Joe=a("strong"),Hbo=o("gptj"),Ubo=o(" \u2014 "),B$=a("a"),Jbo=o("GPTJForCausalLM"),Ybo=o(" (GPT-J model)"),Kbo=l(),Ru=a("li"),Yoe=a("strong"),Zbo=o("marian"),e3o=o(" \u2014 "),x$=a("a"),o3o=o("MarianForCausalLM"),r3o=o(" (Marian model)"),t3o=l(),Su=a("li"),Koe=a("strong"),a3o=o("mbart"),n3o=o(" \u2014 "),k$=a("a"),s3o=o("MBartForCausalLM"),l3o=o(" (mBART model)"),i3o=l(),Pu=a("li"),Zoe=a("strong"),d3o=o("megatron-bert"),c3o=o(" \u2014 "),R$=a("a"),f3o=o("MegatronBertForCausalLM"),m3o=o(" (MegatronBert model)"),g3o=l(),$u=a("li"),ere=a("strong"),h3o=o("openai-gpt"),p3o=o(" \u2014 "),S$=a("a"),_3o=o("OpenAIGPTLMHeadModel"),u3o=o(" (OpenAI GPT model)"),b3o=l(),Iu=a("li"),ore=a("strong"),v3o=o("pegasus"),T3o=o(" \u2014 "),P$=a("a"),F3o=o("PegasusForCausalLM"),C3o=o(" (Pegasus model)"),M3o=l(),Du=a("li"),rre=a("strong"),E3o=o("plbart"),y3o=o(" \u2014 "),$$=a("a"),w3o=o("PLBartForCausalLM"),A3o=o(" (PLBart model)"),L3o=l(),Nu=a("li"),tre=a("strong"),B3o=o("prophetnet"),x3o=o(" \u2014 "),I$=a("a"),k3o=o("ProphetNetForCausalLM"),R3o=o(" (ProphetNet model)"),S3o=l(),ju=a("li"),are=a("strong"),P3o=o("qdqbert"),$3o=o(" \u2014 "),D$=a("a"),I3o=o("QDQBertLMHeadModel"),D3o=o(" (QDQBert model)"),N3o=l(),qu=a("li"),nre=a("strong"),j3o=o("reformer"),q3o=o(" \u2014 "),N$=a("a"),G3o=o("ReformerModelWithLMHead"),O3o=o(" (Reformer model)"),X3o=l(),Gu=a("li"),sre=a("strong"),V3o=o("rembert"),z3o=o(" \u2014 "),j$=a("a"),W3o=o("RemBertForCausalLM"),Q3o=o(" (RemBERT model)"),H3o=l(),Ou=a("li"),lre=a("strong"),U3o=o("roberta"),J3o=o(" \u2014 "),q$=a("a"),Y3o=o("RobertaForCausalLM"),K3o=o(" (RoBERTa model)"),Z3o=l(),Xu=a("li"),ire=a("strong"),e2o=o("roformer"),o2o=o(" \u2014 "),G$=a("a"),r2o=o("RoFormerForCausalLM"),t2o=o(" (RoFormer model)"),a2o=l(),Vu=a("li"),dre=a("strong"),n2o=o("speech_to_text_2"),s2o=o(" \u2014 "),O$=a("a"),l2o=o("Speech2Text2ForCausalLM"),i2o=o(" (Speech2Text2 model)"),d2o=l(),zu=a("li"),cre=a("strong"),c2o=o("transfo-xl"),f2o=o(" \u2014 "),X$=a("a"),m2o=o("TransfoXLLMHeadModel"),g2o=o(" (Transformer-XL model)"),h2o=l(),Wu=a("li"),fre=a("strong"),p2o=o("trocr"),_2o=o(" \u2014 "),V$=a("a"),u2o=o("TrOCRForCausalLM"),b2o=o(" (TrOCR model)"),v2o=l(),Qu=a("li"),mre=a("strong"),T2o=o("xglm"),F2o=o(" \u2014 "),z$=a("a"),C2o=o("XGLMForCausalLM"),M2o=o(" (XGLM model)"),E2o=l(),Hu=a("li"),gre=a("strong"),y2o=o("xlm"),w2o=o(" \u2014 "),W$=a("a"),A2o=o("XLMWithLMHeadModel"),L2o=o(" (XLM model)"),B2o=l(),Uu=a("li"),hre=a("strong"),x2o=o("xlm-prophetnet"),k2o=o(" \u2014 "),Q$=a("a"),R2o=o("XLMProphetNetForCausalLM"),S2o=o(" (XLMProphetNet model)"),P2o=l(),Ju=a("li"),pre=a("strong"),$2o=o("xlm-roberta"),I2o=o(" \u2014 "),H$=a("a"),D2o=o("XLMRobertaForCausalLM"),N2o=o(" (XLM-RoBERTa model)"),j2o=l(),Yu=a("li"),_re=a("strong"),q2o=o("xlm-roberta-xl"),G2o=o(" \u2014 "),U$=a("a"),O2o=o("XLMRobertaXLForCausalLM"),X2o=o(" (XLM-RoBERTa-XL model)"),V2o=l(),Ku=a("li"),ure=a("strong"),z2o=o("xlnet"),W2o=o(" \u2014 "),J$=a("a"),Q2o=o("XLNetLMHeadModel"),H2o=o(" (XLNet model)"),U2o=l(),Zu=a("p"),J2o=o("The model is set in evaluation mode by default using "),bre=a("code"),Y2o=o("model.eval()"),K2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=a("code"),Z2o=o("model.train()"),evo=l(),Tre=a("p"),ovo=o("Examples:"),rvo=l(),f(gE.$$.fragment),Hke=l(),nd=a("h2"),e1=a("a"),Fre=a("span"),f(hE.$$.fragment),tvo=l(),Cre=a("span"),avo=o("AutoModelForMaskedLM"),Uke=l(),Zo=a("div"),f(pE.$$.fragment),nvo=l(),sd=a("p"),svo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=a("code"),lvo=o("from_pretrained()"),ivo=o("class method or the "),Ere=a("code"),dvo=o("from_config()"),cvo=o(`class
method.`),fvo=l(),_E=a("p"),mvo=o("This class cannot be instantiated directly using "),yre=a("code"),gvo=o("__init__()"),hvo=o(" (throws an error)."),pvo=l(),Qr=a("div"),f(uE.$$.fragment),_vo=l(),wre=a("p"),uvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bvo=l(),ld=a("p"),vvo=o(`Note:
Loading a model from its configuration file does `),Are=a("strong"),Tvo=o("not"),Fvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("code"),Cvo=o("from_pretrained()"),Mvo=o("to load the model weights."),Evo=l(),Bre=a("p"),yvo=o("Examples:"),wvo=l(),f(bE.$$.fragment),Avo=l(),qe=a("div"),f(vE.$$.fragment),Lvo=l(),xre=a("p"),Bvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xvo=l(),Qa=a("p"),kvo=o("The model class to instantiate is selected based on the "),kre=a("code"),Rvo=o("model_type"),Svo=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),Pvo=o("pretrained_model_name_or_path"),$vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),Ivo=o("pretrained_model_name_or_path"),Dvo=o(":"),Nvo=l(),I=a("ul"),o1=a("li"),Pre=a("strong"),jvo=o("albert"),qvo=o(" \u2014 "),Y$=a("a"),Gvo=o("AlbertForMaskedLM"),Ovo=o(" (ALBERT model)"),Xvo=l(),r1=a("li"),$re=a("strong"),Vvo=o("bart"),zvo=o(" \u2014 "),K$=a("a"),Wvo=o("BartForConditionalGeneration"),Qvo=o(" (BART model)"),Hvo=l(),t1=a("li"),Ire=a("strong"),Uvo=o("bert"),Jvo=o(" \u2014 "),Z$=a("a"),Yvo=o("BertForMaskedLM"),Kvo=o(" (BERT model)"),Zvo=l(),a1=a("li"),Dre=a("strong"),e6o=o("big_bird"),o6o=o(" \u2014 "),eI=a("a"),r6o=o("BigBirdForMaskedLM"),t6o=o(" (BigBird model)"),a6o=l(),n1=a("li"),Nre=a("strong"),n6o=o("camembert"),s6o=o(" \u2014 "),oI=a("a"),l6o=o("CamembertForMaskedLM"),i6o=o(" (CamemBERT model)"),d6o=l(),s1=a("li"),jre=a("strong"),c6o=o("convbert"),f6o=o(" \u2014 "),rI=a("a"),m6o=o("ConvBertForMaskedLM"),g6o=o(" (ConvBERT model)"),h6o=l(),l1=a("li"),qre=a("strong"),p6o=o("data2vec-text"),_6o=o(" \u2014 "),tI=a("a"),u6o=o("Data2VecTextForMaskedLM"),b6o=o(" (Data2VecText model)"),v6o=l(),i1=a("li"),Gre=a("strong"),T6o=o("deberta"),F6o=o(" \u2014 "),aI=a("a"),C6o=o("DebertaForMaskedLM"),M6o=o(" (DeBERTa model)"),E6o=l(),d1=a("li"),Ore=a("strong"),y6o=o("deberta-v2"),w6o=o(" \u2014 "),nI=a("a"),A6o=o("DebertaV2ForMaskedLM"),L6o=o(" (DeBERTa-v2 model)"),B6o=l(),c1=a("li"),Xre=a("strong"),x6o=o("distilbert"),k6o=o(" \u2014 "),sI=a("a"),R6o=o("DistilBertForMaskedLM"),S6o=o(" (DistilBERT model)"),P6o=l(),f1=a("li"),Vre=a("strong"),$6o=o("electra"),I6o=o(" \u2014 "),lI=a("a"),D6o=o("ElectraForMaskedLM"),N6o=o(" (ELECTRA model)"),j6o=l(),m1=a("li"),zre=a("strong"),q6o=o("flaubert"),G6o=o(" \u2014 "),iI=a("a"),O6o=o("FlaubertWithLMHeadModel"),X6o=o(" (FlauBERT model)"),V6o=l(),g1=a("li"),Wre=a("strong"),z6o=o("fnet"),W6o=o(" \u2014 "),dI=a("a"),Q6o=o("FNetForMaskedLM"),H6o=o(" (FNet model)"),U6o=l(),h1=a("li"),Qre=a("strong"),J6o=o("funnel"),Y6o=o(" \u2014 "),cI=a("a"),K6o=o("FunnelForMaskedLM"),Z6o=o(" (Funnel Transformer model)"),e0o=l(),p1=a("li"),Hre=a("strong"),o0o=o("ibert"),r0o=o(" \u2014 "),fI=a("a"),t0o=o("IBertForMaskedLM"),a0o=o(" (I-BERT model)"),n0o=l(),_1=a("li"),Ure=a("strong"),s0o=o("layoutlm"),l0o=o(" \u2014 "),mI=a("a"),i0o=o("LayoutLMForMaskedLM"),d0o=o(" (LayoutLM model)"),c0o=l(),u1=a("li"),Jre=a("strong"),f0o=o("longformer"),m0o=o(" \u2014 "),gI=a("a"),g0o=o("LongformerForMaskedLM"),h0o=o(" (Longformer model)"),p0o=l(),b1=a("li"),Yre=a("strong"),_0o=o("mbart"),u0o=o(" \u2014 "),hI=a("a"),b0o=o("MBartForConditionalGeneration"),v0o=o(" (mBART model)"),T0o=l(),v1=a("li"),Kre=a("strong"),F0o=o("megatron-bert"),C0o=o(" \u2014 "),pI=a("a"),M0o=o("MegatronBertForMaskedLM"),E0o=o(" (MegatronBert model)"),y0o=l(),T1=a("li"),Zre=a("strong"),w0o=o("mobilebert"),A0o=o(" \u2014 "),_I=a("a"),L0o=o("MobileBertForMaskedLM"),B0o=o(" (MobileBERT model)"),x0o=l(),F1=a("li"),ete=a("strong"),k0o=o("mpnet"),R0o=o(" \u2014 "),uI=a("a"),S0o=o("MPNetForMaskedLM"),P0o=o(" (MPNet model)"),$0o=l(),C1=a("li"),ote=a("strong"),I0o=o("nystromformer"),D0o=o(" \u2014 "),bI=a("a"),N0o=o("NystromformerForMaskedLM"),j0o=o(" (Nystromformer model)"),q0o=l(),M1=a("li"),rte=a("strong"),G0o=o("perceiver"),O0o=o(" \u2014 "),vI=a("a"),X0o=o("PerceiverForMaskedLM"),V0o=o(" (Perceiver model)"),z0o=l(),E1=a("li"),tte=a("strong"),W0o=o("qdqbert"),Q0o=o(" \u2014 "),TI=a("a"),H0o=o("QDQBertForMaskedLM"),U0o=o(" (QDQBert model)"),J0o=l(),y1=a("li"),ate=a("strong"),Y0o=o("reformer"),K0o=o(" \u2014 "),FI=a("a"),Z0o=o("ReformerForMaskedLM"),eTo=o(" (Reformer model)"),oTo=l(),w1=a("li"),nte=a("strong"),rTo=o("rembert"),tTo=o(" \u2014 "),CI=a("a"),aTo=o("RemBertForMaskedLM"),nTo=o(" (RemBERT model)"),sTo=l(),A1=a("li"),ste=a("strong"),lTo=o("roberta"),iTo=o(" \u2014 "),MI=a("a"),dTo=o("RobertaForMaskedLM"),cTo=o(" (RoBERTa model)"),fTo=l(),L1=a("li"),lte=a("strong"),mTo=o("roformer"),gTo=o(" \u2014 "),EI=a("a"),hTo=o("RoFormerForMaskedLM"),pTo=o(" (RoFormer model)"),_To=l(),B1=a("li"),ite=a("strong"),uTo=o("squeezebert"),bTo=o(" \u2014 "),yI=a("a"),vTo=o("SqueezeBertForMaskedLM"),TTo=o(" (SqueezeBERT model)"),FTo=l(),x1=a("li"),dte=a("strong"),CTo=o("tapas"),MTo=o(" \u2014 "),wI=a("a"),ETo=o("TapasForMaskedLM"),yTo=o(" (TAPAS model)"),wTo=l(),k1=a("li"),cte=a("strong"),ATo=o("wav2vec2"),LTo=o(" \u2014 "),fte=a("code"),BTo=o("Wav2Vec2ForMaskedLM"),xTo=o("(Wav2Vec2 model)"),kTo=l(),R1=a("li"),mte=a("strong"),RTo=o("xlm"),STo=o(" \u2014 "),AI=a("a"),PTo=o("XLMWithLMHeadModel"),$To=o(" (XLM model)"),ITo=l(),S1=a("li"),gte=a("strong"),DTo=o("xlm-roberta"),NTo=o(" \u2014 "),LI=a("a"),jTo=o("XLMRobertaForMaskedLM"),qTo=o(" (XLM-RoBERTa model)"),GTo=l(),P1=a("li"),hte=a("strong"),OTo=o("xlm-roberta-xl"),XTo=o(" \u2014 "),BI=a("a"),VTo=o("XLMRobertaXLForMaskedLM"),zTo=o(" (XLM-RoBERTa-XL model)"),WTo=l(),$1=a("li"),pte=a("strong"),QTo=o("yoso"),HTo=o(" \u2014 "),xI=a("a"),UTo=o("YosoForMaskedLM"),JTo=o(" (YOSO model)"),YTo=l(),I1=a("p"),KTo=o("The model is set in evaluation mode by default using "),_te=a("code"),ZTo=o("model.eval()"),e8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=a("code"),o8o=o("model.train()"),r8o=l(),bte=a("p"),t8o=o("Examples:"),a8o=l(),f(TE.$$.fragment),Jke=l(),id=a("h2"),D1=a("a"),vte=a("span"),f(FE.$$.fragment),n8o=l(),Tte=a("span"),s8o=o("AutoModelForSeq2SeqLM"),Yke=l(),er=a("div"),f(CE.$$.fragment),l8o=l(),dd=a("p"),i8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=a("code"),d8o=o("from_pretrained()"),c8o=o("class method or the "),Cte=a("code"),f8o=o("from_config()"),m8o=o(`class
method.`),g8o=l(),ME=a("p"),h8o=o("This class cannot be instantiated directly using "),Mte=a("code"),p8o=o("__init__()"),_8o=o(" (throws an error)."),u8o=l(),Hr=a("div"),f(EE.$$.fragment),b8o=l(),Ete=a("p"),v8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T8o=l(),cd=a("p"),F8o=o(`Note:
Loading a model from its configuration file does `),yte=a("strong"),C8o=o("not"),M8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("code"),E8o=o("from_pretrained()"),y8o=o("to load the model weights."),w8o=l(),Ate=a("p"),A8o=o("Examples:"),L8o=l(),f(yE.$$.fragment),B8o=l(),Ge=a("div"),f(wE.$$.fragment),x8o=l(),Lte=a("p"),k8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R8o=l(),Ha=a("p"),S8o=o("The model class to instantiate is selected based on the "),Bte=a("code"),P8o=o("model_type"),$8o=o(` property of the config object (either
passed as an argument or loaded from `),xte=a("code"),I8o=o("pretrained_model_name_or_path"),D8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=a("code"),N8o=o("pretrained_model_name_or_path"),j8o=o(":"),q8o=l(),se=a("ul"),N1=a("li"),Rte=a("strong"),G8o=o("bart"),O8o=o(" \u2014 "),kI=a("a"),X8o=o("BartForConditionalGeneration"),V8o=o(" (BART model)"),z8o=l(),j1=a("li"),Ste=a("strong"),W8o=o("bigbird_pegasus"),Q8o=o(" \u2014 "),RI=a("a"),H8o=o("BigBirdPegasusForConditionalGeneration"),U8o=o(" (BigBirdPegasus model)"),J8o=l(),q1=a("li"),Pte=a("strong"),Y8o=o("blenderbot"),K8o=o(" \u2014 "),SI=a("a"),Z8o=o("BlenderbotForConditionalGeneration"),eFo=o(" (Blenderbot model)"),oFo=l(),G1=a("li"),$te=a("strong"),rFo=o("blenderbot-small"),tFo=o(" \u2014 "),PI=a("a"),aFo=o("BlenderbotSmallForConditionalGeneration"),nFo=o(" (BlenderbotSmall model)"),sFo=l(),O1=a("li"),Ite=a("strong"),lFo=o("encoder-decoder"),iFo=o(" \u2014 "),$I=a("a"),dFo=o("EncoderDecoderModel"),cFo=o(" (Encoder decoder model)"),fFo=l(),X1=a("li"),Dte=a("strong"),mFo=o("fsmt"),gFo=o(" \u2014 "),II=a("a"),hFo=o("FSMTForConditionalGeneration"),pFo=o(" (FairSeq Machine-Translation model)"),_Fo=l(),V1=a("li"),Nte=a("strong"),uFo=o("led"),bFo=o(" \u2014 "),DI=a("a"),vFo=o("LEDForConditionalGeneration"),TFo=o(" (LED model)"),FFo=l(),z1=a("li"),jte=a("strong"),CFo=o("m2m_100"),MFo=o(" \u2014 "),NI=a("a"),EFo=o("M2M100ForConditionalGeneration"),yFo=o(" (M2M100 model)"),wFo=l(),W1=a("li"),qte=a("strong"),AFo=o("marian"),LFo=o(" \u2014 "),jI=a("a"),BFo=o("MarianMTModel"),xFo=o(" (Marian model)"),kFo=l(),Q1=a("li"),Gte=a("strong"),RFo=o("mbart"),SFo=o(" \u2014 "),qI=a("a"),PFo=o("MBartForConditionalGeneration"),$Fo=o(" (mBART model)"),IFo=l(),H1=a("li"),Ote=a("strong"),DFo=o("mt5"),NFo=o(" \u2014 "),GI=a("a"),jFo=o("MT5ForConditionalGeneration"),qFo=o(" (mT5 model)"),GFo=l(),U1=a("li"),Xte=a("strong"),OFo=o("pegasus"),XFo=o(" \u2014 "),OI=a("a"),VFo=o("PegasusForConditionalGeneration"),zFo=o(" (Pegasus model)"),WFo=l(),J1=a("li"),Vte=a("strong"),QFo=o("plbart"),HFo=o(" \u2014 "),XI=a("a"),UFo=o("PLBartForConditionalGeneration"),JFo=o(" (PLBart model)"),YFo=l(),Y1=a("li"),zte=a("strong"),KFo=o("prophetnet"),ZFo=o(" \u2014 "),VI=a("a"),eCo=o("ProphetNetForConditionalGeneration"),oCo=o(" (ProphetNet model)"),rCo=l(),K1=a("li"),Wte=a("strong"),tCo=o("t5"),aCo=o(" \u2014 "),zI=a("a"),nCo=o("T5ForConditionalGeneration"),sCo=o(" (T5 model)"),lCo=l(),Z1=a("li"),Qte=a("strong"),iCo=o("xlm-prophetnet"),dCo=o(" \u2014 "),WI=a("a"),cCo=o("XLMProphetNetForConditionalGeneration"),fCo=o(" (XLMProphetNet model)"),mCo=l(),eb=a("p"),gCo=o("The model is set in evaluation mode by default using "),Hte=a("code"),hCo=o("model.eval()"),pCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=a("code"),_Co=o("model.train()"),uCo=l(),Jte=a("p"),bCo=o("Examples:"),vCo=l(),f(AE.$$.fragment),Kke=l(),fd=a("h2"),ob=a("a"),Yte=a("span"),f(LE.$$.fragment),TCo=l(),Kte=a("span"),FCo=o("AutoModelForSequenceClassification"),Zke=l(),or=a("div"),f(BE.$$.fragment),CCo=l(),md=a("p"),MCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=a("code"),ECo=o("from_pretrained()"),yCo=o("class method or the "),eae=a("code"),wCo=o("from_config()"),ACo=o(`class
method.`),LCo=l(),xE=a("p"),BCo=o("This class cannot be instantiated directly using "),oae=a("code"),xCo=o("__init__()"),kCo=o(" (throws an error)."),RCo=l(),Ur=a("div"),f(kE.$$.fragment),SCo=l(),rae=a("p"),PCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Co=l(),gd=a("p"),ICo=o(`Note:
Loading a model from its configuration file does `),tae=a("strong"),DCo=o("not"),NCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=a("code"),jCo=o("from_pretrained()"),qCo=o("to load the model weights."),GCo=l(),nae=a("p"),OCo=o("Examples:"),XCo=l(),f(RE.$$.fragment),VCo=l(),Oe=a("div"),f(SE.$$.fragment),zCo=l(),sae=a("p"),WCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QCo=l(),Ua=a("p"),HCo=o("The model class to instantiate is selected based on the "),lae=a("code"),UCo=o("model_type"),JCo=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=a("code"),ZCo=o("pretrained_model_name_or_path"),eMo=o(":"),oMo=l(),A=a("ul"),rb=a("li"),cae=a("strong"),rMo=o("albert"),tMo=o(" \u2014 "),QI=a("a"),aMo=o("AlbertForSequenceClassification"),nMo=o(" (ALBERT model)"),sMo=l(),tb=a("li"),fae=a("strong"),lMo=o("bart"),iMo=o(" \u2014 "),HI=a("a"),dMo=o("BartForSequenceClassification"),cMo=o(" (BART model)"),fMo=l(),ab=a("li"),mae=a("strong"),mMo=o("bert"),gMo=o(" \u2014 "),UI=a("a"),hMo=o("BertForSequenceClassification"),pMo=o(" (BERT model)"),_Mo=l(),nb=a("li"),gae=a("strong"),uMo=o("big_bird"),bMo=o(" \u2014 "),JI=a("a"),vMo=o("BigBirdForSequenceClassification"),TMo=o(" (BigBird model)"),FMo=l(),sb=a("li"),hae=a("strong"),CMo=o("bigbird_pegasus"),MMo=o(" \u2014 "),YI=a("a"),EMo=o("BigBirdPegasusForSequenceClassification"),yMo=o(" (BigBirdPegasus model)"),wMo=l(),lb=a("li"),pae=a("strong"),AMo=o("camembert"),LMo=o(" \u2014 "),KI=a("a"),BMo=o("CamembertForSequenceClassification"),xMo=o(" (CamemBERT model)"),kMo=l(),ib=a("li"),_ae=a("strong"),RMo=o("canine"),SMo=o(" \u2014 "),ZI=a("a"),PMo=o("CanineForSequenceClassification"),$Mo=o(" (Canine model)"),IMo=l(),db=a("li"),uae=a("strong"),DMo=o("convbert"),NMo=o(" \u2014 "),eD=a("a"),jMo=o("ConvBertForSequenceClassification"),qMo=o(" (ConvBERT model)"),GMo=l(),cb=a("li"),bae=a("strong"),OMo=o("ctrl"),XMo=o(" \u2014 "),oD=a("a"),VMo=o("CTRLForSequenceClassification"),zMo=o(" (CTRL model)"),WMo=l(),fb=a("li"),vae=a("strong"),QMo=o("data2vec-text"),HMo=o(" \u2014 "),rD=a("a"),UMo=o("Data2VecTextForSequenceClassification"),JMo=o(" (Data2VecText model)"),YMo=l(),mb=a("li"),Tae=a("strong"),KMo=o("deberta"),ZMo=o(" \u2014 "),tD=a("a"),e4o=o("DebertaForSequenceClassification"),o4o=o(" (DeBERTa model)"),r4o=l(),gb=a("li"),Fae=a("strong"),t4o=o("deberta-v2"),a4o=o(" \u2014 "),aD=a("a"),n4o=o("DebertaV2ForSequenceClassification"),s4o=o(" (DeBERTa-v2 model)"),l4o=l(),hb=a("li"),Cae=a("strong"),i4o=o("distilbert"),d4o=o(" \u2014 "),nD=a("a"),c4o=o("DistilBertForSequenceClassification"),f4o=o(" (DistilBERT model)"),m4o=l(),pb=a("li"),Mae=a("strong"),g4o=o("electra"),h4o=o(" \u2014 "),sD=a("a"),p4o=o("ElectraForSequenceClassification"),_4o=o(" (ELECTRA model)"),u4o=l(),_b=a("li"),Eae=a("strong"),b4o=o("flaubert"),v4o=o(" \u2014 "),lD=a("a"),T4o=o("FlaubertForSequenceClassification"),F4o=o(" (FlauBERT model)"),C4o=l(),ub=a("li"),yae=a("strong"),M4o=o("fnet"),E4o=o(" \u2014 "),iD=a("a"),y4o=o("FNetForSequenceClassification"),w4o=o(" (FNet model)"),A4o=l(),bb=a("li"),wae=a("strong"),L4o=o("funnel"),B4o=o(" \u2014 "),dD=a("a"),x4o=o("FunnelForSequenceClassification"),k4o=o(" (Funnel Transformer model)"),R4o=l(),vb=a("li"),Aae=a("strong"),S4o=o("gpt2"),P4o=o(" \u2014 "),cD=a("a"),$4o=o("GPT2ForSequenceClassification"),I4o=o(" (OpenAI GPT-2 model)"),D4o=l(),Tb=a("li"),Lae=a("strong"),N4o=o("gpt_neo"),j4o=o(" \u2014 "),fD=a("a"),q4o=o("GPTNeoForSequenceClassification"),G4o=o(" (GPT Neo model)"),O4o=l(),Fb=a("li"),Bae=a("strong"),X4o=o("gptj"),V4o=o(" \u2014 "),mD=a("a"),z4o=o("GPTJForSequenceClassification"),W4o=o(" (GPT-J model)"),Q4o=l(),Cb=a("li"),xae=a("strong"),H4o=o("ibert"),U4o=o(" \u2014 "),gD=a("a"),J4o=o("IBertForSequenceClassification"),Y4o=o(" (I-BERT model)"),K4o=l(),Mb=a("li"),kae=a("strong"),Z4o=o("layoutlm"),eEo=o(" \u2014 "),hD=a("a"),oEo=o("LayoutLMForSequenceClassification"),rEo=o(" (LayoutLM model)"),tEo=l(),Eb=a("li"),Rae=a("strong"),aEo=o("layoutlmv2"),nEo=o(" \u2014 "),pD=a("a"),sEo=o("LayoutLMv2ForSequenceClassification"),lEo=o(" (LayoutLMv2 model)"),iEo=l(),yb=a("li"),Sae=a("strong"),dEo=o("led"),cEo=o(" \u2014 "),_D=a("a"),fEo=o("LEDForSequenceClassification"),mEo=o(" (LED model)"),gEo=l(),wb=a("li"),Pae=a("strong"),hEo=o("longformer"),pEo=o(" \u2014 "),uD=a("a"),_Eo=o("LongformerForSequenceClassification"),uEo=o(" (Longformer model)"),bEo=l(),Ab=a("li"),$ae=a("strong"),vEo=o("mbart"),TEo=o(" \u2014 "),bD=a("a"),FEo=o("MBartForSequenceClassification"),CEo=o(" (mBART model)"),MEo=l(),Lb=a("li"),Iae=a("strong"),EEo=o("megatron-bert"),yEo=o(" \u2014 "),vD=a("a"),wEo=o("MegatronBertForSequenceClassification"),AEo=o(" (MegatronBert model)"),LEo=l(),Bb=a("li"),Dae=a("strong"),BEo=o("mobilebert"),xEo=o(" \u2014 "),TD=a("a"),kEo=o("MobileBertForSequenceClassification"),REo=o(" (MobileBERT model)"),SEo=l(),xb=a("li"),Nae=a("strong"),PEo=o("mpnet"),$Eo=o(" \u2014 "),FD=a("a"),IEo=o("MPNetForSequenceClassification"),DEo=o(" (MPNet model)"),NEo=l(),kb=a("li"),jae=a("strong"),jEo=o("nystromformer"),qEo=o(" \u2014 "),CD=a("a"),GEo=o("NystromformerForSequenceClassification"),OEo=o(" (Nystromformer model)"),XEo=l(),Rb=a("li"),qae=a("strong"),VEo=o("openai-gpt"),zEo=o(" \u2014 "),MD=a("a"),WEo=o("OpenAIGPTForSequenceClassification"),QEo=o(" (OpenAI GPT model)"),HEo=l(),Sb=a("li"),Gae=a("strong"),UEo=o("perceiver"),JEo=o(" \u2014 "),ED=a("a"),YEo=o("PerceiverForSequenceClassification"),KEo=o(" (Perceiver model)"),ZEo=l(),Pb=a("li"),Oae=a("strong"),e5o=o("plbart"),o5o=o(" \u2014 "),yD=a("a"),r5o=o("PLBartForSequenceClassification"),t5o=o(" (PLBart model)"),a5o=l(),$b=a("li"),Xae=a("strong"),n5o=o("qdqbert"),s5o=o(" \u2014 "),wD=a("a"),l5o=o("QDQBertForSequenceClassification"),i5o=o(" (QDQBert model)"),d5o=l(),Ib=a("li"),Vae=a("strong"),c5o=o("reformer"),f5o=o(" \u2014 "),AD=a("a"),m5o=o("ReformerForSequenceClassification"),g5o=o(" (Reformer model)"),h5o=l(),Db=a("li"),zae=a("strong"),p5o=o("rembert"),_5o=o(" \u2014 "),LD=a("a"),u5o=o("RemBertForSequenceClassification"),b5o=o(" (RemBERT model)"),v5o=l(),Nb=a("li"),Wae=a("strong"),T5o=o("roberta"),F5o=o(" \u2014 "),BD=a("a"),C5o=o("RobertaForSequenceClassification"),M5o=o(" (RoBERTa model)"),E5o=l(),jb=a("li"),Qae=a("strong"),y5o=o("roformer"),w5o=o(" \u2014 "),xD=a("a"),A5o=o("RoFormerForSequenceClassification"),L5o=o(" (RoFormer model)"),B5o=l(),qb=a("li"),Hae=a("strong"),x5o=o("squeezebert"),k5o=o(" \u2014 "),kD=a("a"),R5o=o("SqueezeBertForSequenceClassification"),S5o=o(" (SqueezeBERT model)"),P5o=l(),Gb=a("li"),Uae=a("strong"),$5o=o("tapas"),I5o=o(" \u2014 "),RD=a("a"),D5o=o("TapasForSequenceClassification"),N5o=o(" (TAPAS model)"),j5o=l(),Ob=a("li"),Jae=a("strong"),q5o=o("transfo-xl"),G5o=o(" \u2014 "),SD=a("a"),O5o=o("TransfoXLForSequenceClassification"),X5o=o(" (Transformer-XL model)"),V5o=l(),Xb=a("li"),Yae=a("strong"),z5o=o("xlm"),W5o=o(" \u2014 "),PD=a("a"),Q5o=o("XLMForSequenceClassification"),H5o=o(" (XLM model)"),U5o=l(),Vb=a("li"),Kae=a("strong"),J5o=o("xlm-roberta"),Y5o=o(" \u2014 "),$D=a("a"),K5o=o("XLMRobertaForSequenceClassification"),Z5o=o(" (XLM-RoBERTa model)"),eyo=l(),zb=a("li"),Zae=a("strong"),oyo=o("xlm-roberta-xl"),ryo=o(" \u2014 "),ID=a("a"),tyo=o("XLMRobertaXLForSequenceClassification"),ayo=o(" (XLM-RoBERTa-XL model)"),nyo=l(),Wb=a("li"),ene=a("strong"),syo=o("xlnet"),lyo=o(" \u2014 "),DD=a("a"),iyo=o("XLNetForSequenceClassification"),dyo=o(" (XLNet model)"),cyo=l(),Qb=a("li"),one=a("strong"),fyo=o("yoso"),myo=o(" \u2014 "),ND=a("a"),gyo=o("YosoForSequenceClassification"),hyo=o(" (YOSO model)"),pyo=l(),Hb=a("p"),_yo=o("The model is set in evaluation mode by default using "),rne=a("code"),uyo=o("model.eval()"),byo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=a("code"),vyo=o("model.train()"),Tyo=l(),ane=a("p"),Fyo=o("Examples:"),Cyo=l(),f(PE.$$.fragment),eRe=l(),hd=a("h2"),Ub=a("a"),nne=a("span"),f($E.$$.fragment),Myo=l(),sne=a("span"),Eyo=o("AutoModelForMultipleChoice"),oRe=l(),rr=a("div"),f(IE.$$.fragment),yyo=l(),pd=a("p"),wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=a("code"),Ayo=o("from_pretrained()"),Lyo=o("class method or the "),ine=a("code"),Byo=o("from_config()"),xyo=o(`class
method.`),kyo=l(),DE=a("p"),Ryo=o("This class cannot be instantiated directly using "),dne=a("code"),Syo=o("__init__()"),Pyo=o(" (throws an error)."),$yo=l(),Jr=a("div"),f(NE.$$.fragment),Iyo=l(),cne=a("p"),Dyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nyo=l(),_d=a("p"),jyo=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),qyo=o("not"),Gyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("code"),Oyo=o("from_pretrained()"),Xyo=o("to load the model weights."),Vyo=l(),gne=a("p"),zyo=o("Examples:"),Wyo=l(),f(jE.$$.fragment),Qyo=l(),Xe=a("div"),f(qE.$$.fragment),Hyo=l(),hne=a("p"),Uyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jyo=l(),Ja=a("p"),Yyo=o("The model class to instantiate is selected based on the "),pne=a("code"),Kyo=o("model_type"),Zyo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),ewo=o("pretrained_model_name_or_path"),owo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=a("code"),rwo=o("pretrained_model_name_or_path"),two=o(":"),awo=l(),G=a("ul"),Jb=a("li"),bne=a("strong"),nwo=o("albert"),swo=o(" \u2014 "),jD=a("a"),lwo=o("AlbertForMultipleChoice"),iwo=o(" (ALBERT model)"),dwo=l(),Yb=a("li"),vne=a("strong"),cwo=o("bert"),fwo=o(" \u2014 "),qD=a("a"),mwo=o("BertForMultipleChoice"),gwo=o(" (BERT model)"),hwo=l(),Kb=a("li"),Tne=a("strong"),pwo=o("big_bird"),_wo=o(" \u2014 "),GD=a("a"),uwo=o("BigBirdForMultipleChoice"),bwo=o(" (BigBird model)"),vwo=l(),Zb=a("li"),Fne=a("strong"),Two=o("camembert"),Fwo=o(" \u2014 "),OD=a("a"),Cwo=o("CamembertForMultipleChoice"),Mwo=o(" (CamemBERT model)"),Ewo=l(),e3=a("li"),Cne=a("strong"),ywo=o("canine"),wwo=o(" \u2014 "),XD=a("a"),Awo=o("CanineForMultipleChoice"),Lwo=o(" (Canine model)"),Bwo=l(),o3=a("li"),Mne=a("strong"),xwo=o("convbert"),kwo=o(" \u2014 "),VD=a("a"),Rwo=o("ConvBertForMultipleChoice"),Swo=o(" (ConvBERT model)"),Pwo=l(),r3=a("li"),Ene=a("strong"),$wo=o("data2vec-text"),Iwo=o(" \u2014 "),zD=a("a"),Dwo=o("Data2VecTextForMultipleChoice"),Nwo=o(" (Data2VecText model)"),jwo=l(),t3=a("li"),yne=a("strong"),qwo=o("distilbert"),Gwo=o(" \u2014 "),WD=a("a"),Owo=o("DistilBertForMultipleChoice"),Xwo=o(" (DistilBERT model)"),Vwo=l(),a3=a("li"),wne=a("strong"),zwo=o("electra"),Wwo=o(" \u2014 "),QD=a("a"),Qwo=o("ElectraForMultipleChoice"),Hwo=o(" (ELECTRA model)"),Uwo=l(),n3=a("li"),Ane=a("strong"),Jwo=o("flaubert"),Ywo=o(" \u2014 "),HD=a("a"),Kwo=o("FlaubertForMultipleChoice"),Zwo=o(" (FlauBERT model)"),eAo=l(),s3=a("li"),Lne=a("strong"),oAo=o("fnet"),rAo=o(" \u2014 "),UD=a("a"),tAo=o("FNetForMultipleChoice"),aAo=o(" (FNet model)"),nAo=l(),l3=a("li"),Bne=a("strong"),sAo=o("funnel"),lAo=o(" \u2014 "),JD=a("a"),iAo=o("FunnelForMultipleChoice"),dAo=o(" (Funnel Transformer model)"),cAo=l(),i3=a("li"),xne=a("strong"),fAo=o("ibert"),mAo=o(" \u2014 "),YD=a("a"),gAo=o("IBertForMultipleChoice"),hAo=o(" (I-BERT model)"),pAo=l(),d3=a("li"),kne=a("strong"),_Ao=o("longformer"),uAo=o(" \u2014 "),KD=a("a"),bAo=o("LongformerForMultipleChoice"),vAo=o(" (Longformer model)"),TAo=l(),c3=a("li"),Rne=a("strong"),FAo=o("megatron-bert"),CAo=o(" \u2014 "),ZD=a("a"),MAo=o("MegatronBertForMultipleChoice"),EAo=o(" (MegatronBert model)"),yAo=l(),f3=a("li"),Sne=a("strong"),wAo=o("mobilebert"),AAo=o(" \u2014 "),eN=a("a"),LAo=o("MobileBertForMultipleChoice"),BAo=o(" (MobileBERT model)"),xAo=l(),m3=a("li"),Pne=a("strong"),kAo=o("mpnet"),RAo=o(" \u2014 "),oN=a("a"),SAo=o("MPNetForMultipleChoice"),PAo=o(" (MPNet model)"),$Ao=l(),g3=a("li"),$ne=a("strong"),IAo=o("nystromformer"),DAo=o(" \u2014 "),rN=a("a"),NAo=o("NystromformerForMultipleChoice"),jAo=o(" (Nystromformer model)"),qAo=l(),h3=a("li"),Ine=a("strong"),GAo=o("qdqbert"),OAo=o(" \u2014 "),tN=a("a"),XAo=o("QDQBertForMultipleChoice"),VAo=o(" (QDQBert model)"),zAo=l(),p3=a("li"),Dne=a("strong"),WAo=o("rembert"),QAo=o(" \u2014 "),aN=a("a"),HAo=o("RemBertForMultipleChoice"),UAo=o(" (RemBERT model)"),JAo=l(),_3=a("li"),Nne=a("strong"),YAo=o("roberta"),KAo=o(" \u2014 "),nN=a("a"),ZAo=o("RobertaForMultipleChoice"),eLo=o(" (RoBERTa model)"),oLo=l(),u3=a("li"),jne=a("strong"),rLo=o("roformer"),tLo=o(" \u2014 "),sN=a("a"),aLo=o("RoFormerForMultipleChoice"),nLo=o(" (RoFormer model)"),sLo=l(),b3=a("li"),qne=a("strong"),lLo=o("squeezebert"),iLo=o(" \u2014 "),lN=a("a"),dLo=o("SqueezeBertForMultipleChoice"),cLo=o(" (SqueezeBERT model)"),fLo=l(),v3=a("li"),Gne=a("strong"),mLo=o("xlm"),gLo=o(" \u2014 "),iN=a("a"),hLo=o("XLMForMultipleChoice"),pLo=o(" (XLM model)"),_Lo=l(),T3=a("li"),One=a("strong"),uLo=o("xlm-roberta"),bLo=o(" \u2014 "),dN=a("a"),vLo=o("XLMRobertaForMultipleChoice"),TLo=o(" (XLM-RoBERTa model)"),FLo=l(),F3=a("li"),Xne=a("strong"),CLo=o("xlm-roberta-xl"),MLo=o(" \u2014 "),cN=a("a"),ELo=o("XLMRobertaXLForMultipleChoice"),yLo=o(" (XLM-RoBERTa-XL model)"),wLo=l(),C3=a("li"),Vne=a("strong"),ALo=o("xlnet"),LLo=o(" \u2014 "),fN=a("a"),BLo=o("XLNetForMultipleChoice"),xLo=o(" (XLNet model)"),kLo=l(),M3=a("li"),zne=a("strong"),RLo=o("yoso"),SLo=o(" \u2014 "),mN=a("a"),PLo=o("YosoForMultipleChoice"),$Lo=o(" (YOSO model)"),ILo=l(),E3=a("p"),DLo=o("The model is set in evaluation mode by default using "),Wne=a("code"),NLo=o("model.eval()"),jLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=a("code"),qLo=o("model.train()"),GLo=l(),Hne=a("p"),OLo=o("Examples:"),XLo=l(),f(GE.$$.fragment),rRe=l(),ud=a("h2"),y3=a("a"),Une=a("span"),f(OE.$$.fragment),VLo=l(),Jne=a("span"),zLo=o("AutoModelForNextSentencePrediction"),tRe=l(),tr=a("div"),f(XE.$$.fragment),WLo=l(),bd=a("p"),QLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=a("code"),HLo=o("from_pretrained()"),ULo=o("class method or the "),Kne=a("code"),JLo=o("from_config()"),YLo=o(`class
method.`),KLo=l(),VE=a("p"),ZLo=o("This class cannot be instantiated directly using "),Zne=a("code"),e7o=o("__init__()"),o7o=o(" (throws an error)."),r7o=l(),Yr=a("div"),f(zE.$$.fragment),t7o=l(),ese=a("p"),a7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n7o=l(),vd=a("p"),s7o=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),l7o=o("not"),i7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=a("code"),d7o=o("from_pretrained()"),c7o=o("to load the model weights."),f7o=l(),tse=a("p"),m7o=o("Examples:"),g7o=l(),f(WE.$$.fragment),h7o=l(),Ve=a("div"),f(QE.$$.fragment),p7o=l(),ase=a("p"),_7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u7o=l(),Ya=a("p"),b7o=o("The model class to instantiate is selected based on the "),nse=a("code"),v7o=o("model_type"),T7o=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(":"),y7o=l(),da=a("ul"),w3=a("li"),ise=a("strong"),w7o=o("bert"),A7o=o(" \u2014 "),gN=a("a"),L7o=o("BertForNextSentencePrediction"),B7o=o(" (BERT model)"),x7o=l(),A3=a("li"),dse=a("strong"),k7o=o("fnet"),R7o=o(" \u2014 "),hN=a("a"),S7o=o("FNetForNextSentencePrediction"),P7o=o(" (FNet model)"),$7o=l(),L3=a("li"),cse=a("strong"),I7o=o("megatron-bert"),D7o=o(" \u2014 "),pN=a("a"),N7o=o("MegatronBertForNextSentencePrediction"),j7o=o(" (MegatronBert model)"),q7o=l(),B3=a("li"),fse=a("strong"),G7o=o("mobilebert"),O7o=o(" \u2014 "),_N=a("a"),X7o=o("MobileBertForNextSentencePrediction"),V7o=o(" (MobileBERT model)"),z7o=l(),x3=a("li"),mse=a("strong"),W7o=o("qdqbert"),Q7o=o(" \u2014 "),uN=a("a"),H7o=o("QDQBertForNextSentencePrediction"),U7o=o(" (QDQBert model)"),J7o=l(),k3=a("p"),Y7o=o("The model is set in evaluation mode by default using "),gse=a("code"),K7o=o("model.eval()"),Z7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=a("code"),e9o=o("model.train()"),o9o=l(),pse=a("p"),r9o=o("Examples:"),t9o=l(),f(HE.$$.fragment),aRe=l(),Td=a("h2"),R3=a("a"),_se=a("span"),f(UE.$$.fragment),a9o=l(),use=a("span"),n9o=o("AutoModelForTokenClassification"),nRe=l(),ar=a("div"),f(JE.$$.fragment),s9o=l(),Fd=a("p"),l9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=a("code"),i9o=o("from_pretrained()"),d9o=o("class method or the "),vse=a("code"),c9o=o("from_config()"),f9o=o(`class
method.`),m9o=l(),YE=a("p"),g9o=o("This class cannot be instantiated directly using "),Tse=a("code"),h9o=o("__init__()"),p9o=o(" (throws an error)."),_9o=l(),Kr=a("div"),f(KE.$$.fragment),u9o=l(),Fse=a("p"),b9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v9o=l(),Cd=a("p"),T9o=o(`Note:
Loading a model from its configuration file does `),Cse=a("strong"),F9o=o("not"),C9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=a("code"),M9o=o("from_pretrained()"),E9o=o("to load the model weights."),y9o=l(),Ese=a("p"),w9o=o("Examples:"),A9o=l(),f(ZE.$$.fragment),L9o=l(),ze=a("div"),f(e5.$$.fragment),B9o=l(),yse=a("p"),x9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k9o=l(),Ka=a("p"),R9o=o("The model class to instantiate is selected based on the "),wse=a("code"),S9o=o("model_type"),P9o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),$9o=o("pretrained_model_name_or_path"),I9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=a("code"),D9o=o("pretrained_model_name_or_path"),N9o=o(":"),j9o=l(),j=a("ul"),S3=a("li"),Bse=a("strong"),q9o=o("albert"),G9o=o(" \u2014 "),bN=a("a"),O9o=o("AlbertForTokenClassification"),X9o=o(" (ALBERT model)"),V9o=l(),P3=a("li"),xse=a("strong"),z9o=o("bert"),W9o=o(" \u2014 "),vN=a("a"),Q9o=o("BertForTokenClassification"),H9o=o(" (BERT model)"),U9o=l(),$3=a("li"),kse=a("strong"),J9o=o("big_bird"),Y9o=o(" \u2014 "),TN=a("a"),K9o=o("BigBirdForTokenClassification"),Z9o=o(" (BigBird model)"),eBo=l(),I3=a("li"),Rse=a("strong"),oBo=o("camembert"),rBo=o(" \u2014 "),FN=a("a"),tBo=o("CamembertForTokenClassification"),aBo=o(" (CamemBERT model)"),nBo=l(),D3=a("li"),Sse=a("strong"),sBo=o("canine"),lBo=o(" \u2014 "),CN=a("a"),iBo=o("CanineForTokenClassification"),dBo=o(" (Canine model)"),cBo=l(),N3=a("li"),Pse=a("strong"),fBo=o("convbert"),mBo=o(" \u2014 "),MN=a("a"),gBo=o("ConvBertForTokenClassification"),hBo=o(" (ConvBERT model)"),pBo=l(),j3=a("li"),$se=a("strong"),_Bo=o("data2vec-text"),uBo=o(" \u2014 "),EN=a("a"),bBo=o("Data2VecTextForTokenClassification"),vBo=o(" (Data2VecText model)"),TBo=l(),q3=a("li"),Ise=a("strong"),FBo=o("deberta"),CBo=o(" \u2014 "),yN=a("a"),MBo=o("DebertaForTokenClassification"),EBo=o(" (DeBERTa model)"),yBo=l(),G3=a("li"),Dse=a("strong"),wBo=o("deberta-v2"),ABo=o(" \u2014 "),wN=a("a"),LBo=o("DebertaV2ForTokenClassification"),BBo=o(" (DeBERTa-v2 model)"),xBo=l(),O3=a("li"),Nse=a("strong"),kBo=o("distilbert"),RBo=o(" \u2014 "),AN=a("a"),SBo=o("DistilBertForTokenClassification"),PBo=o(" (DistilBERT model)"),$Bo=l(),X3=a("li"),jse=a("strong"),IBo=o("electra"),DBo=o(" \u2014 "),LN=a("a"),NBo=o("ElectraForTokenClassification"),jBo=o(" (ELECTRA model)"),qBo=l(),V3=a("li"),qse=a("strong"),GBo=o("flaubert"),OBo=o(" \u2014 "),BN=a("a"),XBo=o("FlaubertForTokenClassification"),VBo=o(" (FlauBERT model)"),zBo=l(),z3=a("li"),Gse=a("strong"),WBo=o("fnet"),QBo=o(" \u2014 "),xN=a("a"),HBo=o("FNetForTokenClassification"),UBo=o(" (FNet model)"),JBo=l(),W3=a("li"),Ose=a("strong"),YBo=o("funnel"),KBo=o(" \u2014 "),kN=a("a"),ZBo=o("FunnelForTokenClassification"),exo=o(" (Funnel Transformer model)"),oxo=l(),Q3=a("li"),Xse=a("strong"),rxo=o("gpt2"),txo=o(" \u2014 "),RN=a("a"),axo=o("GPT2ForTokenClassification"),nxo=o(" (OpenAI GPT-2 model)"),sxo=l(),H3=a("li"),Vse=a("strong"),lxo=o("ibert"),ixo=o(" \u2014 "),SN=a("a"),dxo=o("IBertForTokenClassification"),cxo=o(" (I-BERT model)"),fxo=l(),U3=a("li"),zse=a("strong"),mxo=o("layoutlm"),gxo=o(" \u2014 "),PN=a("a"),hxo=o("LayoutLMForTokenClassification"),pxo=o(" (LayoutLM model)"),_xo=l(),J3=a("li"),Wse=a("strong"),uxo=o("layoutlmv2"),bxo=o(" \u2014 "),$N=a("a"),vxo=o("LayoutLMv2ForTokenClassification"),Txo=o(" (LayoutLMv2 model)"),Fxo=l(),Y3=a("li"),Qse=a("strong"),Cxo=o("longformer"),Mxo=o(" \u2014 "),IN=a("a"),Exo=o("LongformerForTokenClassification"),yxo=o(" (Longformer model)"),wxo=l(),K3=a("li"),Hse=a("strong"),Axo=o("megatron-bert"),Lxo=o(" \u2014 "),DN=a("a"),Bxo=o("MegatronBertForTokenClassification"),xxo=o(" (MegatronBert model)"),kxo=l(),Z3=a("li"),Use=a("strong"),Rxo=o("mobilebert"),Sxo=o(" \u2014 "),NN=a("a"),Pxo=o("MobileBertForTokenClassification"),$xo=o(" (MobileBERT model)"),Ixo=l(),e2=a("li"),Jse=a("strong"),Dxo=o("mpnet"),Nxo=o(" \u2014 "),jN=a("a"),jxo=o("MPNetForTokenClassification"),qxo=o(" (MPNet model)"),Gxo=l(),o2=a("li"),Yse=a("strong"),Oxo=o("nystromformer"),Xxo=o(" \u2014 "),qN=a("a"),Vxo=o("NystromformerForTokenClassification"),zxo=o(" (Nystromformer model)"),Wxo=l(),r2=a("li"),Kse=a("strong"),Qxo=o("qdqbert"),Hxo=o(" \u2014 "),GN=a("a"),Uxo=o("QDQBertForTokenClassification"),Jxo=o(" (QDQBert model)"),Yxo=l(),t2=a("li"),Zse=a("strong"),Kxo=o("rembert"),Zxo=o(" \u2014 "),ON=a("a"),eko=o("RemBertForTokenClassification"),oko=o(" (RemBERT model)"),rko=l(),a2=a("li"),ele=a("strong"),tko=o("roberta"),ako=o(" \u2014 "),XN=a("a"),nko=o("RobertaForTokenClassification"),sko=o(" (RoBERTa model)"),lko=l(),n2=a("li"),ole=a("strong"),iko=o("roformer"),dko=o(" \u2014 "),VN=a("a"),cko=o("RoFormerForTokenClassification"),fko=o(" (RoFormer model)"),mko=l(),s2=a("li"),rle=a("strong"),gko=o("squeezebert"),hko=o(" \u2014 "),zN=a("a"),pko=o("SqueezeBertForTokenClassification"),_ko=o(" (SqueezeBERT model)"),uko=l(),l2=a("li"),tle=a("strong"),bko=o("xlm"),vko=o(" \u2014 "),WN=a("a"),Tko=o("XLMForTokenClassification"),Fko=o(" (XLM model)"),Cko=l(),i2=a("li"),ale=a("strong"),Mko=o("xlm-roberta"),Eko=o(" \u2014 "),QN=a("a"),yko=o("XLMRobertaForTokenClassification"),wko=o(" (XLM-RoBERTa model)"),Ako=l(),d2=a("li"),nle=a("strong"),Lko=o("xlm-roberta-xl"),Bko=o(" \u2014 "),HN=a("a"),xko=o("XLMRobertaXLForTokenClassification"),kko=o(" (XLM-RoBERTa-XL model)"),Rko=l(),c2=a("li"),sle=a("strong"),Sko=o("xlnet"),Pko=o(" \u2014 "),UN=a("a"),$ko=o("XLNetForTokenClassification"),Iko=o(" (XLNet model)"),Dko=l(),f2=a("li"),lle=a("strong"),Nko=o("yoso"),jko=o(" \u2014 "),JN=a("a"),qko=o("YosoForTokenClassification"),Gko=o(" (YOSO model)"),Oko=l(),m2=a("p"),Xko=o("The model is set in evaluation mode by default using "),ile=a("code"),Vko=o("model.eval()"),zko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),Wko=o("model.train()"),Qko=l(),cle=a("p"),Hko=o("Examples:"),Uko=l(),f(o5.$$.fragment),sRe=l(),Md=a("h2"),g2=a("a"),fle=a("span"),f(r5.$$.fragment),Jko=l(),mle=a("span"),Yko=o("AutoModelForQuestionAnswering"),lRe=l(),nr=a("div"),f(t5.$$.fragment),Kko=l(),Ed=a("p"),Zko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=a("code"),eRo=o("from_pretrained()"),oRo=o("class method or the "),hle=a("code"),rRo=o("from_config()"),tRo=o(`class
method.`),aRo=l(),a5=a("p"),nRo=o("This class cannot be instantiated directly using "),ple=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),Zr=a("div"),f(n5.$$.fragment),dRo=l(),_le=a("p"),cRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fRo=l(),yd=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),ule=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("code"),pRo=o("from_pretrained()"),_Ro=o("to load the model weights."),uRo=l(),vle=a("p"),bRo=o("Examples:"),vRo=l(),f(s5.$$.fragment),TRo=l(),We=a("div"),f(l5.$$.fragment),FRo=l(),Tle=a("p"),CRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MRo=l(),Za=a("p"),ERo=o("The model class to instantiate is selected based on the "),Fle=a("code"),yRo=o("model_type"),wRo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),ARo=o("pretrained_model_name_or_path"),LRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),BRo=o("pretrained_model_name_or_path"),xRo=o(":"),kRo=l(),R=a("ul"),h2=a("li"),Ele=a("strong"),RRo=o("albert"),SRo=o(" \u2014 "),YN=a("a"),PRo=o("AlbertForQuestionAnswering"),$Ro=o(" (ALBERT model)"),IRo=l(),p2=a("li"),yle=a("strong"),DRo=o("bart"),NRo=o(" \u2014 "),KN=a("a"),jRo=o("BartForQuestionAnswering"),qRo=o(" (BART model)"),GRo=l(),_2=a("li"),wle=a("strong"),ORo=o("bert"),XRo=o(" \u2014 "),ZN=a("a"),VRo=o("BertForQuestionAnswering"),zRo=o(" (BERT model)"),WRo=l(),u2=a("li"),Ale=a("strong"),QRo=o("big_bird"),HRo=o(" \u2014 "),ej=a("a"),URo=o("BigBirdForQuestionAnswering"),JRo=o(" (BigBird model)"),YRo=l(),b2=a("li"),Lle=a("strong"),KRo=o("bigbird_pegasus"),ZRo=o(" \u2014 "),oj=a("a"),eSo=o("BigBirdPegasusForQuestionAnswering"),oSo=o(" (BigBirdPegasus model)"),rSo=l(),v2=a("li"),Ble=a("strong"),tSo=o("camembert"),aSo=o(" \u2014 "),rj=a("a"),nSo=o("CamembertForQuestionAnswering"),sSo=o(" (CamemBERT model)"),lSo=l(),T2=a("li"),xle=a("strong"),iSo=o("canine"),dSo=o(" \u2014 "),tj=a("a"),cSo=o("CanineForQuestionAnswering"),fSo=o(" (Canine model)"),mSo=l(),F2=a("li"),kle=a("strong"),gSo=o("convbert"),hSo=o(" \u2014 "),aj=a("a"),pSo=o("ConvBertForQuestionAnswering"),_So=o(" (ConvBERT model)"),uSo=l(),C2=a("li"),Rle=a("strong"),bSo=o("data2vec-text"),vSo=o(" \u2014 "),nj=a("a"),TSo=o("Data2VecTextForQuestionAnswering"),FSo=o(" (Data2VecText model)"),CSo=l(),M2=a("li"),Sle=a("strong"),MSo=o("deberta"),ESo=o(" \u2014 "),sj=a("a"),ySo=o("DebertaForQuestionAnswering"),wSo=o(" (DeBERTa model)"),ASo=l(),E2=a("li"),Ple=a("strong"),LSo=o("deberta-v2"),BSo=o(" \u2014 "),lj=a("a"),xSo=o("DebertaV2ForQuestionAnswering"),kSo=o(" (DeBERTa-v2 model)"),RSo=l(),y2=a("li"),$le=a("strong"),SSo=o("distilbert"),PSo=o(" \u2014 "),ij=a("a"),$So=o("DistilBertForQuestionAnswering"),ISo=o(" (DistilBERT model)"),DSo=l(),w2=a("li"),Ile=a("strong"),NSo=o("electra"),jSo=o(" \u2014 "),dj=a("a"),qSo=o("ElectraForQuestionAnswering"),GSo=o(" (ELECTRA model)"),OSo=l(),A2=a("li"),Dle=a("strong"),XSo=o("flaubert"),VSo=o(" \u2014 "),cj=a("a"),zSo=o("FlaubertForQuestionAnsweringSimple"),WSo=o(" (FlauBERT model)"),QSo=l(),L2=a("li"),Nle=a("strong"),HSo=o("fnet"),USo=o(" \u2014 "),fj=a("a"),JSo=o("FNetForQuestionAnswering"),YSo=o(" (FNet model)"),KSo=l(),B2=a("li"),jle=a("strong"),ZSo=o("funnel"),ePo=o(" \u2014 "),mj=a("a"),oPo=o("FunnelForQuestionAnswering"),rPo=o(" (Funnel Transformer model)"),tPo=l(),x2=a("li"),qle=a("strong"),aPo=o("gptj"),nPo=o(" \u2014 "),gj=a("a"),sPo=o("GPTJForQuestionAnswering"),lPo=o(" (GPT-J model)"),iPo=l(),k2=a("li"),Gle=a("strong"),dPo=o("ibert"),cPo=o(" \u2014 "),hj=a("a"),fPo=o("IBertForQuestionAnswering"),mPo=o(" (I-BERT model)"),gPo=l(),R2=a("li"),Ole=a("strong"),hPo=o("layoutlmv2"),pPo=o(" \u2014 "),pj=a("a"),_Po=o("LayoutLMv2ForQuestionAnswering"),uPo=o(" (LayoutLMv2 model)"),bPo=l(),S2=a("li"),Xle=a("strong"),vPo=o("led"),TPo=o(" \u2014 "),_j=a("a"),FPo=o("LEDForQuestionAnswering"),CPo=o(" (LED model)"),MPo=l(),P2=a("li"),Vle=a("strong"),EPo=o("longformer"),yPo=o(" \u2014 "),uj=a("a"),wPo=o("LongformerForQuestionAnswering"),APo=o(" (Longformer model)"),LPo=l(),$2=a("li"),zle=a("strong"),BPo=o("lxmert"),xPo=o(" \u2014 "),bj=a("a"),kPo=o("LxmertForQuestionAnswering"),RPo=o(" (LXMERT model)"),SPo=l(),I2=a("li"),Wle=a("strong"),PPo=o("mbart"),$Po=o(" \u2014 "),vj=a("a"),IPo=o("MBartForQuestionAnswering"),DPo=o(" (mBART model)"),NPo=l(),D2=a("li"),Qle=a("strong"),jPo=o("megatron-bert"),qPo=o(" \u2014 "),Tj=a("a"),GPo=o("MegatronBertForQuestionAnswering"),OPo=o(" (MegatronBert model)"),XPo=l(),N2=a("li"),Hle=a("strong"),VPo=o("mobilebert"),zPo=o(" \u2014 "),Fj=a("a"),WPo=o("MobileBertForQuestionAnswering"),QPo=o(" (MobileBERT model)"),HPo=l(),j2=a("li"),Ule=a("strong"),UPo=o("mpnet"),JPo=o(" \u2014 "),Cj=a("a"),YPo=o("MPNetForQuestionAnswering"),KPo=o(" (MPNet model)"),ZPo=l(),q2=a("li"),Jle=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),Mj=a("a"),r$o=o("NystromformerForQuestionAnswering"),t$o=o(" (Nystromformer model)"),a$o=l(),G2=a("li"),Yle=a("strong"),n$o=o("qdqbert"),s$o=o(" \u2014 "),Ej=a("a"),l$o=o("QDQBertForQuestionAnswering"),i$o=o(" (QDQBert model)"),d$o=l(),O2=a("li"),Kle=a("strong"),c$o=o("reformer"),f$o=o(" \u2014 "),yj=a("a"),m$o=o("ReformerForQuestionAnswering"),g$o=o(" (Reformer model)"),h$o=l(),X2=a("li"),Zle=a("strong"),p$o=o("rembert"),_$o=o(" \u2014 "),wj=a("a"),u$o=o("RemBertForQuestionAnswering"),b$o=o(" (RemBERT model)"),v$o=l(),V2=a("li"),eie=a("strong"),T$o=o("roberta"),F$o=o(" \u2014 "),Aj=a("a"),C$o=o("RobertaForQuestionAnswering"),M$o=o(" (RoBERTa model)"),E$o=l(),z2=a("li"),oie=a("strong"),y$o=o("roformer"),w$o=o(" \u2014 "),Lj=a("a"),A$o=o("RoFormerForQuestionAnswering"),L$o=o(" (RoFormer model)"),B$o=l(),W2=a("li"),rie=a("strong"),x$o=o("splinter"),k$o=o(" \u2014 "),Bj=a("a"),R$o=o("SplinterForQuestionAnswering"),S$o=o(" (Splinter model)"),P$o=l(),Q2=a("li"),tie=a("strong"),$$o=o("squeezebert"),I$o=o(" \u2014 "),xj=a("a"),D$o=o("SqueezeBertForQuestionAnswering"),N$o=o(" (SqueezeBERT model)"),j$o=l(),H2=a("li"),aie=a("strong"),q$o=o("xlm"),G$o=o(" \u2014 "),kj=a("a"),O$o=o("XLMForQuestionAnsweringSimple"),X$o=o(" (XLM model)"),V$o=l(),U2=a("li"),nie=a("strong"),z$o=o("xlm-roberta"),W$o=o(" \u2014 "),Rj=a("a"),Q$o=o("XLMRobertaForQuestionAnswering"),H$o=o(" (XLM-RoBERTa model)"),U$o=l(),J2=a("li"),sie=a("strong"),J$o=o("xlm-roberta-xl"),Y$o=o(" \u2014 "),Sj=a("a"),K$o=o("XLMRobertaXLForQuestionAnswering"),Z$o=o(" (XLM-RoBERTa-XL model)"),eIo=l(),Y2=a("li"),lie=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),Pj=a("a"),tIo=o("XLNetForQuestionAnsweringSimple"),aIo=o(" (XLNet model)"),nIo=l(),K2=a("li"),iie=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),$j=a("a"),iIo=o("YosoForQuestionAnswering"),dIo=o(" (YOSO model)"),cIo=l(),Z2=a("p"),fIo=o("The model is set in evaluation mode by default using "),die=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),hIo=o("model.train()"),pIo=l(),fie=a("p"),_Io=o("Examples:"),uIo=l(),f(i5.$$.fragment),iRe=l(),wd=a("h2"),ev=a("a"),mie=a("span"),f(d5.$$.fragment),bIo=l(),gie=a("span"),vIo=o("AutoModelForTableQuestionAnswering"),dRe=l(),sr=a("div"),f(c5.$$.fragment),TIo=l(),Ad=a("p"),FIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=a("code"),CIo=o("from_pretrained()"),MIo=o("class method or the "),pie=a("code"),EIo=o("from_config()"),yIo=o(`class
method.`),wIo=l(),f5=a("p"),AIo=o("This class cannot be instantiated directly using "),_ie=a("code"),LIo=o("__init__()"),BIo=o(" (throws an error)."),xIo=l(),et=a("div"),f(m5.$$.fragment),kIo=l(),uie=a("p"),RIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SIo=l(),Ld=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),$Io=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=a("code"),DIo=o("from_pretrained()"),NIo=o("to load the model weights."),jIo=l(),Tie=a("p"),qIo=o("Examples:"),GIo=l(),f(g5.$$.fragment),OIo=l(),Qe=a("div"),f(h5.$$.fragment),XIo=l(),Fie=a("p"),VIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zIo=l(),en=a("p"),WIo=o("The model class to instantiate is selected based on the "),Cie=a("code"),QIo=o("model_type"),HIo=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),yie=a("ul"),ov=a("li"),wie=a("strong"),eDo=o("tapas"),oDo=o(" \u2014 "),Ij=a("a"),rDo=o("TapasForQuestionAnswering"),tDo=o(" (TAPAS model)"),aDo=l(),rv=a("p"),nDo=o("The model is set in evaluation mode by default using "),Aie=a("code"),sDo=o("model.eval()"),lDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),iDo=o("model.train()"),dDo=l(),Bie=a("p"),cDo=o("Examples:"),fDo=l(),f(p5.$$.fragment),cRe=l(),Bd=a("h2"),tv=a("a"),xie=a("span"),f(_5.$$.fragment),mDo=l(),kie=a("span"),gDo=o("AutoModelForImageClassification"),fRe=l(),lr=a("div"),f(u5.$$.fragment),hDo=l(),xd=a("p"),pDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=a("code"),_Do=o("from_pretrained()"),uDo=o("class method or the "),Sie=a("code"),bDo=o("from_config()"),vDo=o(`class
method.`),TDo=l(),b5=a("p"),FDo=o("This class cannot be instantiated directly using "),Pie=a("code"),CDo=o("__init__()"),MDo=o(" (throws an error)."),EDo=l(),ot=a("div"),f(v5.$$.fragment),yDo=l(),$ie=a("p"),wDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ADo=l(),kd=a("p"),LDo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),BDo=o("not"),xDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=a("code"),kDo=o("from_pretrained()"),RDo=o("to load the model weights."),SDo=l(),Nie=a("p"),PDo=o("Examples:"),$Do=l(),f(T5.$$.fragment),IDo=l(),He=a("div"),f(F5.$$.fragment),DDo=l(),jie=a("p"),NDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jDo=l(),on=a("p"),qDo=o("The model class to instantiate is selected based on the "),qie=a("code"),GDo=o("model_type"),ODo=o(` property of the config object (either
passed as an argument or loaded from `),Gie=a("code"),XDo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=a("code"),zDo=o("pretrained_model_name_or_path"),WDo=o(":"),QDo=l(),ge=a("ul"),av=a("li"),Xie=a("strong"),HDo=o("beit"),UDo=o(" \u2014 "),Dj=a("a"),JDo=o("BeitForImageClassification"),YDo=o(" (BEiT model)"),KDo=l(),nv=a("li"),Vie=a("strong"),ZDo=o("convnext"),eNo=o(" \u2014 "),Nj=a("a"),oNo=o("ConvNextForImageClassification"),rNo=o(" (ConvNext model)"),tNo=l(),qs=a("li"),zie=a("strong"),aNo=o("deit"),nNo=o(" \u2014 "),jj=a("a"),sNo=o("DeiTForImageClassification"),lNo=o(" or "),qj=a("a"),iNo=o("DeiTForImageClassificationWithTeacher"),dNo=o(" (DeiT model)"),cNo=l(),sv=a("li"),Wie=a("strong"),fNo=o("imagegpt"),mNo=o(" \u2014 "),Gj=a("a"),gNo=o("ImageGPTForImageClassification"),hNo=o(" (ImageGPT model)"),pNo=l(),ma=a("li"),Qie=a("strong"),_No=o("perceiver"),uNo=o(" \u2014 "),Oj=a("a"),bNo=o("PerceiverForImageClassificationLearned"),vNo=o(" or "),Xj=a("a"),TNo=o("PerceiverForImageClassificationFourier"),FNo=o(" or "),Vj=a("a"),CNo=o("PerceiverForImageClassificationConvProcessing"),MNo=o(" (Perceiver model)"),ENo=l(),lv=a("li"),Hie=a("strong"),yNo=o("poolformer"),wNo=o(" \u2014 "),zj=a("a"),ANo=o("PoolFormerForImageClassification"),LNo=o(" (PoolFormer model)"),BNo=l(),iv=a("li"),Uie=a("strong"),xNo=o("resnet"),kNo=o(" \u2014 "),Wj=a("a"),RNo=o("ResNetForImageClassification"),SNo=o(" (ResNet model)"),PNo=l(),dv=a("li"),Jie=a("strong"),$No=o("segformer"),INo=o(" \u2014 "),Qj=a("a"),DNo=o("SegformerForImageClassification"),NNo=o(" (SegFormer model)"),jNo=l(),cv=a("li"),Yie=a("strong"),qNo=o("swin"),GNo=o(" \u2014 "),Hj=a("a"),ONo=o("SwinForImageClassification"),XNo=o(" (Swin model)"),VNo=l(),fv=a("li"),Kie=a("strong"),zNo=o("van"),WNo=o(" \u2014 "),Uj=a("a"),QNo=o("VanForImageClassification"),HNo=o(" (VAN model)"),UNo=l(),mv=a("li"),Zie=a("strong"),JNo=o("vit"),YNo=o(" \u2014 "),Jj=a("a"),KNo=o("ViTForImageClassification"),ZNo=o(" (ViT model)"),ejo=l(),gv=a("p"),ojo=o("The model is set in evaluation mode by default using "),ede=a("code"),rjo=o("model.eval()"),tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),ajo=o("model.train()"),njo=l(),rde=a("p"),sjo=o("Examples:"),ljo=l(),f(C5.$$.fragment),mRe=l(),Rd=a("h2"),hv=a("a"),tde=a("span"),f(M5.$$.fragment),ijo=l(),ade=a("span"),djo=o("AutoModelForVision2Seq"),gRe=l(),ir=a("div"),f(E5.$$.fragment),cjo=l(),Sd=a("p"),fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=a("code"),mjo=o("from_pretrained()"),gjo=o("class method or the "),sde=a("code"),hjo=o("from_config()"),pjo=o(`class
method.`),_jo=l(),y5=a("p"),ujo=o("This class cannot be instantiated directly using "),lde=a("code"),bjo=o("__init__()"),vjo=o(" (throws an error)."),Tjo=l(),rt=a("div"),f(w5.$$.fragment),Fjo=l(),ide=a("p"),Cjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mjo=l(),Pd=a("p"),Ejo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),yjo=o("not"),wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=a("code"),Ajo=o("from_pretrained()"),Ljo=o("to load the model weights."),Bjo=l(),fde=a("p"),xjo=o("Examples:"),kjo=l(),f(A5.$$.fragment),Rjo=l(),Ue=a("div"),f(L5.$$.fragment),Sjo=l(),mde=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$jo=l(),rn=a("p"),Ijo=o("The model class to instantiate is selected based on the "),gde=a("code"),Djo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),jjo=o("pretrained_model_name_or_path"),qjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Xjo=l(),_de=a("ul"),pv=a("li"),ude=a("strong"),Vjo=o("vision-encoder-decoder"),zjo=o(" \u2014 "),Yj=a("a"),Wjo=o("VisionEncoderDecoderModel"),Qjo=o(" (Vision Encoder decoder model)"),Hjo=l(),_v=a("p"),Ujo=o("The model is set in evaluation mode by default using "),bde=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),Kjo=o("model.train()"),Zjo=l(),Tde=a("p"),eqo=o("Examples:"),oqo=l(),f(B5.$$.fragment),hRe=l(),$d=a("h2"),uv=a("a"),Fde=a("span"),f(x5.$$.fragment),rqo=l(),Cde=a("span"),tqo=o("AutoModelForAudioClassification"),pRe=l(),dr=a("div"),f(k5.$$.fragment),aqo=l(),Id=a("p"),nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=a("code"),sqo=o("from_pretrained()"),lqo=o("class method or the "),Ede=a("code"),iqo=o("from_config()"),dqo=o(`class
method.`),cqo=l(),R5=a("p"),fqo=o("This class cannot be instantiated directly using "),yde=a("code"),mqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),tt=a("div"),f(S5.$$.fragment),pqo=l(),wde=a("p"),_qo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uqo=l(),Dd=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),vqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=a("code"),Fqo=o("from_pretrained()"),Cqo=o("to load the model weights."),Mqo=l(),Bde=a("p"),Eqo=o("Examples:"),yqo=l(),f(P5.$$.fragment),wqo=l(),Je=a("div"),f($5.$$.fragment),Aqo=l(),xde=a("p"),Lqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bqo=l(),tn=a("p"),xqo=o("The model class to instantiate is selected based on the "),kde=a("code"),kqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),Sqo=o("pretrained_model_name_or_path"),Pqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(":"),Dqo=l(),ke=a("ul"),bv=a("li"),Pde=a("strong"),Nqo=o("data2vec-audio"),jqo=o(" \u2014 "),Kj=a("a"),qqo=o("Data2VecAudioForSequenceClassification"),Gqo=o(" (Data2VecAudio model)"),Oqo=l(),vv=a("li"),$de=a("strong"),Xqo=o("hubert"),Vqo=o(" \u2014 "),Zj=a("a"),zqo=o("HubertForSequenceClassification"),Wqo=o(" (Hubert model)"),Qqo=l(),Tv=a("li"),Ide=a("strong"),Hqo=o("sew"),Uqo=o(" \u2014 "),eq=a("a"),Jqo=o("SEWForSequenceClassification"),Yqo=o(" (SEW model)"),Kqo=l(),Fv=a("li"),Dde=a("strong"),Zqo=o("sew-d"),eGo=o(" \u2014 "),oq=a("a"),oGo=o("SEWDForSequenceClassification"),rGo=o(" (SEW-D model)"),tGo=l(),Cv=a("li"),Nde=a("strong"),aGo=o("unispeech"),nGo=o(" \u2014 "),rq=a("a"),sGo=o("UniSpeechForSequenceClassification"),lGo=o(" (UniSpeech model)"),iGo=l(),Mv=a("li"),jde=a("strong"),dGo=o("unispeech-sat"),cGo=o(" \u2014 "),tq=a("a"),fGo=o("UniSpeechSatForSequenceClassification"),mGo=o(" (UniSpeechSat model)"),gGo=l(),Ev=a("li"),qde=a("strong"),hGo=o("wav2vec2"),pGo=o(" \u2014 "),aq=a("a"),_Go=o("Wav2Vec2ForSequenceClassification"),uGo=o(" (Wav2Vec2 model)"),bGo=l(),yv=a("li"),Gde=a("strong"),vGo=o("wavlm"),TGo=o(" \u2014 "),nq=a("a"),FGo=o("WavLMForSequenceClassification"),CGo=o(" (WavLM model)"),MGo=l(),wv=a("p"),EGo=o("The model is set in evaluation mode by default using "),Ode=a("code"),yGo=o("model.eval()"),wGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),AGo=o("model.train()"),LGo=l(),Vde=a("p"),BGo=o("Examples:"),xGo=l(),f(I5.$$.fragment),_Re=l(),Nd=a("h2"),Av=a("a"),zde=a("span"),f(D5.$$.fragment),kGo=l(),Wde=a("span"),RGo=o("AutoModelForAudioFrameClassification"),uRe=l(),cr=a("div"),f(N5.$$.fragment),SGo=l(),jd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=a("code"),$Go=o("from_pretrained()"),IGo=o("class method or the "),Hde=a("code"),DGo=o("from_config()"),NGo=o(`class
method.`),jGo=l(),j5=a("p"),qGo=o("This class cannot be instantiated directly using "),Ude=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),XGo=l(),at=a("div"),f(q5.$$.fragment),VGo=l(),Jde=a("p"),zGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WGo=l(),qd=a("p"),QGo=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=a("code"),JGo=o("from_pretrained()"),YGo=o("to load the model weights."),KGo=l(),Zde=a("p"),ZGo=o("Examples:"),eOo=l(),f(G5.$$.fragment),oOo=l(),Ye=a("div"),f(O5.$$.fragment),rOo=l(),ece=a("p"),tOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aOo=l(),an=a("p"),nOo=o("The model class to instantiate is selected based on the "),oce=a("code"),sOo=o("model_type"),lOo=o(` property of the config object (either
passed as an argument or loaded from `),rce=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=a("code"),cOo=o("pretrained_model_name_or_path"),fOo=o(":"),mOo=l(),nn=a("ul"),Lv=a("li"),ace=a("strong"),gOo=o("data2vec-audio"),hOo=o(" \u2014 "),sq=a("a"),pOo=o("Data2VecAudioForAudioFrameClassification"),_Oo=o(" (Data2VecAudio model)"),uOo=l(),Bv=a("li"),nce=a("strong"),bOo=o("unispeech-sat"),vOo=o(" \u2014 "),lq=a("a"),TOo=o("UniSpeechSatForAudioFrameClassification"),FOo=o(" (UniSpeechSat model)"),COo=l(),xv=a("li"),sce=a("strong"),MOo=o("wav2vec2"),EOo=o(" \u2014 "),iq=a("a"),yOo=o("Wav2Vec2ForAudioFrameClassification"),wOo=o(" (Wav2Vec2 model)"),AOo=l(),kv=a("li"),lce=a("strong"),LOo=o("wavlm"),BOo=o(" \u2014 "),dq=a("a"),xOo=o("WavLMForAudioFrameClassification"),kOo=o(" (WavLM model)"),ROo=l(),Rv=a("p"),SOo=o("The model is set in evaluation mode by default using "),ice=a("code"),POo=o("model.eval()"),$Oo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),IOo=o("model.train()"),DOo=l(),cce=a("p"),NOo=o("Examples:"),jOo=l(),f(X5.$$.fragment),bRe=l(),Gd=a("h2"),Sv=a("a"),fce=a("span"),f(V5.$$.fragment),qOo=l(),mce=a("span"),GOo=o("AutoModelForCTC"),vRe=l(),fr=a("div"),f(z5.$$.fragment),OOo=l(),Od=a("p"),XOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=a("code"),VOo=o("from_pretrained()"),zOo=o("class method or the "),hce=a("code"),WOo=o("from_config()"),QOo=o(`class
method.`),HOo=l(),W5=a("p"),UOo=o("This class cannot be instantiated directly using "),pce=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),nt=a("div"),f(Q5.$$.fragment),ZOo=l(),_ce=a("p"),eXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oXo=l(),Xd=a("p"),rXo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),tXo=o("not"),aXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=a("code"),nXo=o("from_pretrained()"),sXo=o("to load the model weights."),lXo=l(),vce=a("p"),iXo=o("Examples:"),dXo=l(),f(H5.$$.fragment),cXo=l(),Ke=a("div"),f(U5.$$.fragment),fXo=l(),Tce=a("p"),mXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gXo=l(),sn=a("p"),hXo=o("The model class to instantiate is selected based on the "),Fce=a("code"),pXo=o("model_type"),_Xo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),uXo=o("pretrained_model_name_or_path"),bXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(":"),FXo=l(),Re=a("ul"),Pv=a("li"),Ece=a("strong"),CXo=o("data2vec-audio"),MXo=o(" \u2014 "),cq=a("a"),EXo=o("Data2VecAudioForCTC"),yXo=o(" (Data2VecAudio model)"),wXo=l(),$v=a("li"),yce=a("strong"),AXo=o("hubert"),LXo=o(" \u2014 "),fq=a("a"),BXo=o("HubertForCTC"),xXo=o(" (Hubert model)"),kXo=l(),Iv=a("li"),wce=a("strong"),RXo=o("sew"),SXo=o(" \u2014 "),mq=a("a"),PXo=o("SEWForCTC"),$Xo=o(" (SEW model)"),IXo=l(),Dv=a("li"),Ace=a("strong"),DXo=o("sew-d"),NXo=o(" \u2014 "),gq=a("a"),jXo=o("SEWDForCTC"),qXo=o(" (SEW-D model)"),GXo=l(),Nv=a("li"),Lce=a("strong"),OXo=o("unispeech"),XXo=o(" \u2014 "),hq=a("a"),VXo=o("UniSpeechForCTC"),zXo=o(" (UniSpeech model)"),WXo=l(),jv=a("li"),Bce=a("strong"),QXo=o("unispeech-sat"),HXo=o(" \u2014 "),pq=a("a"),UXo=o("UniSpeechSatForCTC"),JXo=o(" (UniSpeechSat model)"),YXo=l(),qv=a("li"),xce=a("strong"),KXo=o("wav2vec2"),ZXo=o(" \u2014 "),_q=a("a"),eVo=o("Wav2Vec2ForCTC"),oVo=o(" (Wav2Vec2 model)"),rVo=l(),Gv=a("li"),kce=a("strong"),tVo=o("wavlm"),aVo=o(" \u2014 "),uq=a("a"),nVo=o("WavLMForCTC"),sVo=o(" (WavLM model)"),lVo=l(),Ov=a("p"),iVo=o("The model is set in evaluation mode by default using "),Rce=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),fVo=o("model.train()"),mVo=l(),Pce=a("p"),gVo=o("Examples:"),hVo=l(),f(J5.$$.fragment),TRe=l(),Vd=a("h2"),Xv=a("a"),$ce=a("span"),f(Y5.$$.fragment),pVo=l(),Ice=a("span"),_Vo=o("AutoModelForSpeechSeq2Seq"),FRe=l(),mr=a("div"),f(K5.$$.fragment),uVo=l(),zd=a("p"),bVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dce=a("code"),vVo=o("from_pretrained()"),TVo=o("class method or the "),Nce=a("code"),FVo=o("from_config()"),CVo=o(`class
method.`),MVo=l(),Z5=a("p"),EVo=o("This class cannot be instantiated directly using "),jce=a("code"),yVo=o("__init__()"),wVo=o(" (throws an error)."),AVo=l(),st=a("div"),f(ey.$$.fragment),LVo=l(),qce=a("p"),BVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xVo=l(),Wd=a("p"),kVo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),RVo=o("not"),SVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=a("code"),PVo=o("from_pretrained()"),$Vo=o("to load the model weights."),IVo=l(),Xce=a("p"),DVo=o("Examples:"),NVo=l(),f(oy.$$.fragment),jVo=l(),Ze=a("div"),f(ry.$$.fragment),qVo=l(),Vce=a("p"),GVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OVo=l(),ln=a("p"),XVo=o("The model class to instantiate is selected based on the "),zce=a("code"),VVo=o("model_type"),zVo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),WVo=o("pretrained_model_name_or_path"),QVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),HVo=o("pretrained_model_name_or_path"),UVo=o(":"),JVo=l(),ty=a("ul"),Vv=a("li"),Hce=a("strong"),YVo=o("speech-encoder-decoder"),KVo=o(" \u2014 "),bq=a("a"),ZVo=o("SpeechEncoderDecoderModel"),ezo=o(" (Speech Encoder decoder model)"),ozo=l(),zv=a("li"),Uce=a("strong"),rzo=o("speech_to_text"),tzo=o(" \u2014 "),vq=a("a"),azo=o("Speech2TextForConditionalGeneration"),nzo=o(" (Speech2Text model)"),szo=l(),Wv=a("p"),lzo=o("The model is set in evaluation mode by default using "),Jce=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),czo=o("model.train()"),fzo=l(),Kce=a("p"),mzo=o("Examples:"),gzo=l(),f(ay.$$.fragment),CRe=l(),Qd=a("h2"),Qv=a("a"),Zce=a("span"),f(ny.$$.fragment),hzo=l(),efe=a("span"),pzo=o("AutoModelForAudioXVector"),MRe=l(),gr=a("div"),f(sy.$$.fragment),_zo=l(),Hd=a("p"),uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=a("code"),bzo=o("from_pretrained()"),vzo=o("class method or the "),rfe=a("code"),Tzo=o("from_config()"),Fzo=o(`class
method.`),Czo=l(),ly=a("p"),Mzo=o("This class cannot be instantiated directly using "),tfe=a("code"),Ezo=o("__init__()"),yzo=o(" (throws an error)."),wzo=l(),lt=a("div"),f(iy.$$.fragment),Azo=l(),afe=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bzo=l(),Ud=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),kzo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=a("code"),Szo=o("from_pretrained()"),Pzo=o("to load the model weights."),$zo=l(),lfe=a("p"),Izo=o("Examples:"),Dzo=l(),f(dy.$$.fragment),Nzo=l(),eo=a("div"),f(cy.$$.fragment),jzo=l(),ife=a("p"),qzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gzo=l(),dn=a("p"),Ozo=o("The model class to instantiate is selected based on the "),dfe=a("code"),Xzo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),zzo=o("pretrained_model_name_or_path"),Wzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(":"),Uzo=l(),cn=a("ul"),Hv=a("li"),mfe=a("strong"),Jzo=o("data2vec-audio"),Yzo=o(" \u2014 "),Tq=a("a"),Kzo=o("Data2VecAudioForXVector"),Zzo=o(" (Data2VecAudio model)"),eWo=l(),Uv=a("li"),gfe=a("strong"),oWo=o("unispeech-sat"),rWo=o(" \u2014 "),Fq=a("a"),tWo=o("UniSpeechSatForXVector"),aWo=o(" (UniSpeechSat model)"),nWo=l(),Jv=a("li"),hfe=a("strong"),sWo=o("wav2vec2"),lWo=o(" \u2014 "),Cq=a("a"),iWo=o("Wav2Vec2ForXVector"),dWo=o(" (Wav2Vec2 model)"),cWo=l(),Yv=a("li"),pfe=a("strong"),fWo=o("wavlm"),mWo=o(" \u2014 "),Mq=a("a"),gWo=o("WavLMForXVector"),hWo=o(" (WavLM model)"),pWo=l(),Kv=a("p"),_Wo=o("The model is set in evaluation mode by default using "),_fe=a("code"),uWo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),vWo=o("model.train()"),TWo=l(),bfe=a("p"),FWo=o("Examples:"),CWo=l(),f(fy.$$.fragment),ERe=l(),Jd=a("h2"),Zv=a("a"),vfe=a("span"),f(my.$$.fragment),MWo=l(),Tfe=a("span"),EWo=o("AutoModelForMaskedImageModeling"),yRe=l(),hr=a("div"),f(gy.$$.fragment),yWo=l(),Yd=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=a("code"),AWo=o("from_pretrained()"),LWo=o("class method or the "),Cfe=a("code"),BWo=o("from_config()"),xWo=o(`class
method.`),kWo=l(),hy=a("p"),RWo=o("This class cannot be instantiated directly using "),Mfe=a("code"),SWo=o("__init__()"),PWo=o(" (throws an error)."),$Wo=l(),it=a("div"),f(py.$$.fragment),IWo=l(),Efe=a("p"),DWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NWo=l(),Kd=a("p"),jWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),qWo=o("not"),GWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),OWo=o("from_pretrained()"),XWo=o("to load the model weights."),VWo=l(),Afe=a("p"),zWo=o("Examples:"),WWo=l(),f(_y.$$.fragment),QWo=l(),oo=a("div"),f(uy.$$.fragment),HWo=l(),Lfe=a("p"),UWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JWo=l(),fn=a("p"),YWo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),Zd=a("ul"),e6=a("li"),Rfe=a("strong"),nQo=o("deit"),sQo=o(" \u2014 "),Eq=a("a"),lQo=o("DeiTForMaskedImageModeling"),iQo=o(" (DeiT model)"),dQo=l(),o6=a("li"),Sfe=a("strong"),cQo=o("swin"),fQo=o(" \u2014 "),yq=a("a"),mQo=o("SwinForMaskedImageModeling"),gQo=o(" (Swin model)"),hQo=l(),r6=a("li"),Pfe=a("strong"),pQo=o("vit"),_Qo=o(" \u2014 "),wq=a("a"),uQo=o("ViTForMaskedImageModeling"),bQo=o(" (ViT model)"),vQo=l(),t6=a("p"),TQo=o("The model is set in evaluation mode by default using "),$fe=a("code"),FQo=o("model.eval()"),CQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),MQo=o("model.train()"),EQo=l(),Dfe=a("p"),yQo=o("Examples:"),wQo=l(),f(by.$$.fragment),wRe=l(),ec=a("h2"),a6=a("a"),Nfe=a("span"),f(vy.$$.fragment),AQo=l(),jfe=a("span"),LQo=o("AutoModelForObjectDetection"),ARe=l(),pr=a("div"),f(Ty.$$.fragment),BQo=l(),oc=a("p"),xQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=a("code"),kQo=o("from_pretrained()"),RQo=o("class method or the "),Gfe=a("code"),SQo=o("from_config()"),PQo=o(`class
method.`),$Qo=l(),Fy=a("p"),IQo=o("This class cannot be instantiated directly using "),Ofe=a("code"),DQo=o("__init__()"),NQo=o(" (throws an error)."),jQo=l(),dt=a("div"),f(Cy.$$.fragment),qQo=l(),Xfe=a("p"),GQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),OQo=l(),rc=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),VQo=o("not"),zQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=a("code"),WQo=o("from_pretrained()"),QQo=o("to load the model weights."),HQo=l(),Wfe=a("p"),UQo=o("Examples:"),JQo=l(),f(My.$$.fragment),YQo=l(),ro=a("div"),f(Ey.$$.fragment),KQo=l(),Qfe=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eHo=l(),mn=a("p"),oHo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),Yfe=a("ul"),n6=a("li"),Kfe=a("strong"),dHo=o("detr"),cHo=o(" \u2014 "),Aq=a("a"),fHo=o("DetrForObjectDetection"),mHo=o(" (DETR model)"),gHo=l(),s6=a("p"),hHo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),pHo=o("model.eval()"),_Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),uHo=o("model.train()"),bHo=l(),ome=a("p"),vHo=o("Examples:"),THo=l(),f(yy.$$.fragment),LRe=l(),tc=a("h2"),l6=a("a"),rme=a("span"),f(wy.$$.fragment),FHo=l(),tme=a("span"),CHo=o("AutoModelForImageSegmentation"),BRe=l(),_r=a("div"),f(Ay.$$.fragment),MHo=l(),ac=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=a("code"),yHo=o("from_pretrained()"),wHo=o("class method or the "),nme=a("code"),AHo=o("from_config()"),LHo=o(`class
method.`),BHo=l(),Ly=a("p"),xHo=o("This class cannot be instantiated directly using "),sme=a("code"),kHo=o("__init__()"),RHo=o(" (throws an error)."),SHo=l(),ct=a("div"),f(By.$$.fragment),PHo=l(),lme=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),IHo=l(),nc=a("p"),DHo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),NHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=a("code"),qHo=o("from_pretrained()"),GHo=o("to load the model weights."),OHo=l(),cme=a("p"),XHo=o("Examples:"),VHo=l(),f(xy.$$.fragment),zHo=l(),to=a("div"),f(ky.$$.fragment),WHo=l(),fme=a("p"),QHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),HHo=l(),gn=a("p"),UHo=o("The model class to instantiate is selected based on the "),mme=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),pme=a("ul"),i6=a("li"),_me=a("strong"),tUo=o("detr"),aUo=o(" \u2014 "),Lq=a("a"),nUo=o("DetrForSegmentation"),sUo=o(" (DETR model)"),lUo=l(),d6=a("p"),iUo=o("The model is set in evaluation mode by default using "),ume=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),fUo=o("model.train()"),mUo=l(),vme=a("p"),gUo=o("Examples:"),hUo=l(),f(Ry.$$.fragment),xRe=l(),sc=a("h2"),c6=a("a"),Tme=a("span"),f(Sy.$$.fragment),pUo=l(),Fme=a("span"),_Uo=o("AutoModelForSemanticSegmentation"),kRe=l(),ur=a("div"),f(Py.$$.fragment),uUo=l(),lc=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=a("code"),vUo=o("from_pretrained()"),TUo=o("class method or the "),Mme=a("code"),FUo=o("from_config()"),CUo=o(`class
method.`),MUo=l(),$y=a("p"),EUo=o("This class cannot be instantiated directly using "),Eme=a("code"),yUo=o("__init__()"),wUo=o(" (throws an error)."),AUo=l(),ft=a("div"),f(Iy.$$.fragment),LUo=l(),yme=a("p"),BUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xUo=l(),ic=a("p"),kUo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),RUo=o("not"),SUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=a("code"),PUo=o("from_pretrained()"),$Uo=o("to load the model weights."),IUo=l(),Lme=a("p"),DUo=o("Examples:"),NUo=l(),f(Dy.$$.fragment),jUo=l(),ao=a("div"),f(Ny.$$.fragment),qUo=l(),Bme=a("p"),GUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),OUo=l(),hn=a("p"),XUo=o("The model class to instantiate is selected based on the "),xme=a("code"),VUo=o("model_type"),zUo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),WUo=o("pretrained_model_name_or_path"),QUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(":"),JUo=l(),dc=a("ul"),f6=a("li"),Sme=a("strong"),YUo=o("beit"),KUo=o(" \u2014 "),Bq=a("a"),ZUo=o("BeitForSemanticSegmentation"),eJo=o(" (BEiT model)"),oJo=l(),m6=a("li"),Pme=a("strong"),rJo=o("dpt"),tJo=o(" \u2014 "),xq=a("a"),aJo=o("DPTForSemanticSegmentation"),nJo=o(" (DPT model)"),sJo=l(),g6=a("li"),$me=a("strong"),lJo=o("segformer"),iJo=o(" \u2014 "),kq=a("a"),dJo=o("SegformerForSemanticSegmentation"),cJo=o(" (SegFormer model)"),fJo=l(),h6=a("p"),mJo=o("The model is set in evaluation mode by default using "),Ime=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),pJo=o("model.train()"),_Jo=l(),Nme=a("p"),uJo=o("Examples:"),bJo=l(),f(jy.$$.fragment),RRe=l(),cc=a("h2"),p6=a("a"),jme=a("span"),f(qy.$$.fragment),vJo=l(),qme=a("span"),TJo=o("AutoModelForInstanceSegmentation"),SRe=l(),br=a("div"),f(Gy.$$.fragment),FJo=l(),fc=a("p"),CJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Gme=a("code"),MJo=o("from_pretrained()"),EJo=o("class method or the "),Ome=a("code"),yJo=o("from_config()"),wJo=o(`class
method.`),AJo=l(),Oy=a("p"),LJo=o("This class cannot be instantiated directly using "),Xme=a("code"),BJo=o("__init__()"),xJo=o(" (throws an error)."),kJo=l(),mt=a("div"),f(Xy.$$.fragment),RJo=l(),Vme=a("p"),SJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),PJo=l(),mc=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),IJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),NJo=o("from_pretrained()"),jJo=o("to load the model weights."),qJo=l(),Qme=a("p"),GJo=o("Examples:"),OJo=l(),f(Vy.$$.fragment),XJo=l(),no=a("div"),f(zy.$$.fragment),VJo=l(),Hme=a("p"),zJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),WJo=l(),pn=a("p"),QJo=o("The model class to instantiate is selected based on the "),Ume=a("code"),HJo=o("model_type"),UJo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(":"),eYo=l(),Kme=a("ul"),_6=a("li"),Zme=a("strong"),oYo=o("maskformer"),rYo=o(" \u2014 "),Rq=a("a"),tYo=o("MaskFormerForInstanceSegmentation"),aYo=o(" (MaskFormer model)"),nYo=l(),u6=a("p"),sYo=o("The model is set in evaluation mode by default using "),ege=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),dYo=o("model.train()"),cYo=l(),rge=a("p"),fYo=o("Examples:"),mYo=l(),f(Wy.$$.fragment),PRe=l(),gc=a("h2"),b6=a("a"),tge=a("span"),f(Qy.$$.fragment),gYo=l(),age=a("span"),hYo=o("TFAutoModel"),$Re=l(),vr=a("div"),f(Hy.$$.fragment),pYo=l(),hc=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nge=a("code"),uYo=o("from_pretrained()"),bYo=o("class method or the "),sge=a("code"),vYo=o("from_config()"),TYo=o(`class
method.`),FYo=l(),Uy=a("p"),CYo=o("This class cannot be instantiated directly using "),lge=a("code"),MYo=o("__init__()"),EYo=o(" (throws an error)."),yYo=l(),gt=a("div"),f(Jy.$$.fragment),wYo=l(),ige=a("p"),AYo=o("Instantiates one of the base model classes of the library from a configuration."),LYo=l(),pc=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),xYo=o("not"),kYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),RYo=o("from_pretrained()"),SYo=o("to load the model weights."),PYo=l(),fge=a("p"),$Yo=o("Examples:"),IYo=l(),f(Yy.$$.fragment),DYo=l(),ho=a("div"),f(Ky.$$.fragment),NYo=l(),mge=a("p"),jYo=o("Instantiate one of the base model classes of the library from a pretrained model."),qYo=l(),_n=a("p"),GYo=o("The model class to instantiate is selected based on the "),gge=a("code"),OYo=o("model_type"),XYo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),VYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),WYo=o("pretrained_model_name_or_path"),QYo=o(":"),HYo=l(),B=a("ul"),v6=a("li"),_ge=a("strong"),UYo=o("albert"),JYo=o(" \u2014 "),Sq=a("a"),YYo=o("TFAlbertModel"),KYo=o(" (ALBERT model)"),ZYo=l(),T6=a("li"),uge=a("strong"),eKo=o("bart"),oKo=o(" \u2014 "),Pq=a("a"),rKo=o("TFBartModel"),tKo=o(" (BART model)"),aKo=l(),F6=a("li"),bge=a("strong"),nKo=o("bert"),sKo=o(" \u2014 "),$q=a("a"),lKo=o("TFBertModel"),iKo=o(" (BERT model)"),dKo=l(),C6=a("li"),vge=a("strong"),cKo=o("blenderbot"),fKo=o(" \u2014 "),Iq=a("a"),mKo=o("TFBlenderbotModel"),gKo=o(" (Blenderbot model)"),hKo=l(),M6=a("li"),Tge=a("strong"),pKo=o("blenderbot-small"),_Ko=o(" \u2014 "),Dq=a("a"),uKo=o("TFBlenderbotSmallModel"),bKo=o(" (BlenderbotSmall model)"),vKo=l(),E6=a("li"),Fge=a("strong"),TKo=o("camembert"),FKo=o(" \u2014 "),Nq=a("a"),CKo=o("TFCamembertModel"),MKo=o(" (CamemBERT model)"),EKo=l(),y6=a("li"),Cge=a("strong"),yKo=o("clip"),wKo=o(" \u2014 "),jq=a("a"),AKo=o("TFCLIPModel"),LKo=o(" (CLIP model)"),BKo=l(),w6=a("li"),Mge=a("strong"),xKo=o("convbert"),kKo=o(" \u2014 "),qq=a("a"),RKo=o("TFConvBertModel"),SKo=o(" (ConvBERT model)"),PKo=l(),A6=a("li"),Ege=a("strong"),$Ko=o("convnext"),IKo=o(" \u2014 "),Gq=a("a"),DKo=o("TFConvNextModel"),NKo=o(" (ConvNext model)"),jKo=l(),L6=a("li"),yge=a("strong"),qKo=o("ctrl"),GKo=o(" \u2014 "),Oq=a("a"),OKo=o("TFCTRLModel"),XKo=o(" (CTRL model)"),VKo=l(),B6=a("li"),wge=a("strong"),zKo=o("deberta"),WKo=o(" \u2014 "),Xq=a("a"),QKo=o("TFDebertaModel"),HKo=o(" (DeBERTa model)"),UKo=l(),x6=a("li"),Age=a("strong"),JKo=o("deberta-v2"),YKo=o(" \u2014 "),Vq=a("a"),KKo=o("TFDebertaV2Model"),ZKo=o(" (DeBERTa-v2 model)"),eZo=l(),k6=a("li"),Lge=a("strong"),oZo=o("distilbert"),rZo=o(" \u2014 "),zq=a("a"),tZo=o("TFDistilBertModel"),aZo=o(" (DistilBERT model)"),nZo=l(),R6=a("li"),Bge=a("strong"),sZo=o("dpr"),lZo=o(" \u2014 "),Wq=a("a"),iZo=o("TFDPRQuestionEncoder"),dZo=o(" (DPR model)"),cZo=l(),S6=a("li"),xge=a("strong"),fZo=o("electra"),mZo=o(" \u2014 "),Qq=a("a"),gZo=o("TFElectraModel"),hZo=o(" (ELECTRA model)"),pZo=l(),P6=a("li"),kge=a("strong"),_Zo=o("flaubert"),uZo=o(" \u2014 "),Hq=a("a"),bZo=o("TFFlaubertModel"),vZo=o(" (FlauBERT model)"),TZo=l(),Gs=a("li"),Rge=a("strong"),FZo=o("funnel"),CZo=o(" \u2014 "),Uq=a("a"),MZo=o("TFFunnelModel"),EZo=o(" or "),Jq=a("a"),yZo=o("TFFunnelBaseModel"),wZo=o(" (Funnel Transformer model)"),AZo=l(),$6=a("li"),Sge=a("strong"),LZo=o("gpt2"),BZo=o(" \u2014 "),Yq=a("a"),xZo=o("TFGPT2Model"),kZo=o(" (OpenAI GPT-2 model)"),RZo=l(),I6=a("li"),Pge=a("strong"),SZo=o("gptj"),PZo=o(" \u2014 "),Kq=a("a"),$Zo=o("TFGPTJModel"),IZo=o(" (GPT-J model)"),DZo=l(),D6=a("li"),$ge=a("strong"),NZo=o("hubert"),jZo=o(" \u2014 "),Zq=a("a"),qZo=o("TFHubertModel"),GZo=o(" (Hubert model)"),OZo=l(),N6=a("li"),Ige=a("strong"),XZo=o("layoutlm"),VZo=o(" \u2014 "),eG=a("a"),zZo=o("TFLayoutLMModel"),WZo=o(" (LayoutLM model)"),QZo=l(),j6=a("li"),Dge=a("strong"),HZo=o("led"),UZo=o(" \u2014 "),oG=a("a"),JZo=o("TFLEDModel"),YZo=o(" (LED model)"),KZo=l(),q6=a("li"),Nge=a("strong"),ZZo=o("longformer"),eer=o(" \u2014 "),rG=a("a"),oer=o("TFLongformerModel"),rer=o(" (Longformer model)"),ter=l(),G6=a("li"),jge=a("strong"),aer=o("lxmert"),ner=o(" \u2014 "),tG=a("a"),ser=o("TFLxmertModel"),ler=o(" (LXMERT model)"),ier=l(),O6=a("li"),qge=a("strong"),der=o("marian"),cer=o(" \u2014 "),aG=a("a"),fer=o("TFMarianModel"),mer=o(" (Marian model)"),ger=l(),X6=a("li"),Gge=a("strong"),her=o("mbart"),per=o(" \u2014 "),nG=a("a"),_er=o("TFMBartModel"),uer=o(" (mBART model)"),ber=l(),V6=a("li"),Oge=a("strong"),ver=o("mobilebert"),Ter=o(" \u2014 "),sG=a("a"),Fer=o("TFMobileBertModel"),Cer=o(" (MobileBERT model)"),Mer=l(),z6=a("li"),Xge=a("strong"),Eer=o("mpnet"),yer=o(" \u2014 "),lG=a("a"),wer=o("TFMPNetModel"),Aer=o(" (MPNet model)"),Ler=l(),W6=a("li"),Vge=a("strong"),Ber=o("mt5"),xer=o(" \u2014 "),iG=a("a"),ker=o("TFMT5Model"),Rer=o(" (mT5 model)"),Ser=l(),Q6=a("li"),zge=a("strong"),Per=o("openai-gpt"),$er=o(" \u2014 "),dG=a("a"),Ier=o("TFOpenAIGPTModel"),Der=o(" (OpenAI GPT model)"),Ner=l(),H6=a("li"),Wge=a("strong"),jer=o("pegasus"),qer=o(" \u2014 "),cG=a("a"),Ger=o("TFPegasusModel"),Oer=o(" (Pegasus model)"),Xer=l(),U6=a("li"),Qge=a("strong"),Ver=o("rembert"),zer=o(" \u2014 "),fG=a("a"),Wer=o("TFRemBertModel"),Qer=o(" (RemBERT model)"),Her=l(),J6=a("li"),Hge=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),mG=a("a"),Yer=o("TFRobertaModel"),Ker=o(" (RoBERTa model)"),Zer=l(),Y6=a("li"),Uge=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),gG=a("a"),ror=o("TFRoFormerModel"),tor=o(" (RoFormer model)"),aor=l(),K6=a("li"),Jge=a("strong"),nor=o("speech_to_text"),sor=o(" \u2014 "),hG=a("a"),lor=o("TFSpeech2TextModel"),ior=o(" (Speech2Text model)"),dor=l(),Z6=a("li"),Yge=a("strong"),cor=o("t5"),mor=o(" \u2014 "),pG=a("a"),gor=o("TFT5Model"),hor=o(" (T5 model)"),por=l(),e0=a("li"),Kge=a("strong"),_or=o("tapas"),uor=o(" \u2014 "),_G=a("a"),bor=o("TFTapasModel"),vor=o(" (TAPAS model)"),Tor=l(),o0=a("li"),Zge=a("strong"),For=o("transfo-xl"),Cor=o(" \u2014 "),uG=a("a"),Mor=o("TFTransfoXLModel"),Eor=o(" (Transformer-XL model)"),yor=l(),r0=a("li"),ehe=a("strong"),wor=o("vit"),Aor=o(" \u2014 "),bG=a("a"),Lor=o("TFViTModel"),Bor=o(" (ViT model)"),xor=l(),t0=a("li"),ohe=a("strong"),kor=o("wav2vec2"),Ror=o(" \u2014 "),vG=a("a"),Sor=o("TFWav2Vec2Model"),Por=o(" (Wav2Vec2 model)"),$or=l(),a0=a("li"),rhe=a("strong"),Ior=o("xlm"),Dor=o(" \u2014 "),TG=a("a"),Nor=o("TFXLMModel"),jor=o(" (XLM model)"),qor=l(),n0=a("li"),the=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),FG=a("a"),Xor=o("TFXLMRobertaModel"),Vor=o(" (XLM-RoBERTa model)"),zor=l(),s0=a("li"),ahe=a("strong"),Wor=o("xlnet"),Qor=o(" \u2014 "),CG=a("a"),Hor=o("TFXLNetModel"),Uor=o(" (XLNet model)"),Jor=l(),nhe=a("p"),Yor=o("Examples:"),Kor=l(),f(Zy.$$.fragment),IRe=l(),_c=a("h2"),l0=a("a"),she=a("span"),f(ew.$$.fragment),Zor=l(),lhe=a("span"),err=o("TFAutoModelForPreTraining"),DRe=l(),Tr=a("div"),f(ow.$$.fragment),orr=l(),uc=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ihe=a("code"),trr=o("from_pretrained()"),arr=o("class method or the "),dhe=a("code"),nrr=o("from_config()"),srr=o(`class
method.`),lrr=l(),rw=a("p"),irr=o("This class cannot be instantiated directly using "),che=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),ht=a("div"),f(tw.$$.fragment),mrr=l(),fhe=a("p"),grr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hrr=l(),bc=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),_rr=o("not"),urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ghe=a("code"),brr=o("from_pretrained()"),vrr=o("to load the model weights."),Trr=l(),hhe=a("p"),Frr=o("Examples:"),Crr=l(),f(aw.$$.fragment),Mrr=l(),po=a("div"),f(nw.$$.fragment),Err=l(),phe=a("p"),yrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wrr=l(),un=a("p"),Arr=o("The model class to instantiate is selected based on the "),_he=a("code"),Lrr=o("model_type"),Brr=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),xrr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),Rrr=o("pretrained_model_name_or_path"),Srr=o(":"),Prr=l(),H=a("ul"),i0=a("li"),vhe=a("strong"),$rr=o("albert"),Irr=o(" \u2014 "),MG=a("a"),Drr=o("TFAlbertForPreTraining"),Nrr=o(" (ALBERT model)"),jrr=l(),d0=a("li"),The=a("strong"),qrr=o("bart"),Grr=o(" \u2014 "),EG=a("a"),Orr=o("TFBartForConditionalGeneration"),Xrr=o(" (BART model)"),Vrr=l(),c0=a("li"),Fhe=a("strong"),zrr=o("bert"),Wrr=o(" \u2014 "),yG=a("a"),Qrr=o("TFBertForPreTraining"),Hrr=o(" (BERT model)"),Urr=l(),f0=a("li"),Che=a("strong"),Jrr=o("camembert"),Yrr=o(" \u2014 "),wG=a("a"),Krr=o("TFCamembertForMaskedLM"),Zrr=o(" (CamemBERT model)"),etr=l(),m0=a("li"),Mhe=a("strong"),otr=o("ctrl"),rtr=o(" \u2014 "),AG=a("a"),ttr=o("TFCTRLLMHeadModel"),atr=o(" (CTRL model)"),ntr=l(),g0=a("li"),Ehe=a("strong"),str=o("distilbert"),ltr=o(" \u2014 "),LG=a("a"),itr=o("TFDistilBertForMaskedLM"),dtr=o(" (DistilBERT model)"),ctr=l(),h0=a("li"),yhe=a("strong"),ftr=o("electra"),mtr=o(" \u2014 "),BG=a("a"),gtr=o("TFElectraForPreTraining"),htr=o(" (ELECTRA model)"),ptr=l(),p0=a("li"),whe=a("strong"),_tr=o("flaubert"),utr=o(" \u2014 "),xG=a("a"),btr=o("TFFlaubertWithLMHeadModel"),vtr=o(" (FlauBERT model)"),Ttr=l(),_0=a("li"),Ahe=a("strong"),Ftr=o("funnel"),Ctr=o(" \u2014 "),kG=a("a"),Mtr=o("TFFunnelForPreTraining"),Etr=o(" (Funnel Transformer model)"),ytr=l(),u0=a("li"),Lhe=a("strong"),wtr=o("gpt2"),Atr=o(" \u2014 "),RG=a("a"),Ltr=o("TFGPT2LMHeadModel"),Btr=o(" (OpenAI GPT-2 model)"),xtr=l(),b0=a("li"),Bhe=a("strong"),ktr=o("layoutlm"),Rtr=o(" \u2014 "),SG=a("a"),Str=o("TFLayoutLMForMaskedLM"),Ptr=o(" (LayoutLM model)"),$tr=l(),v0=a("li"),xhe=a("strong"),Itr=o("lxmert"),Dtr=o(" \u2014 "),PG=a("a"),Ntr=o("TFLxmertForPreTraining"),jtr=o(" (LXMERT model)"),qtr=l(),T0=a("li"),khe=a("strong"),Gtr=o("mobilebert"),Otr=o(" \u2014 "),$G=a("a"),Xtr=o("TFMobileBertForPreTraining"),Vtr=o(" (MobileBERT model)"),ztr=l(),F0=a("li"),Rhe=a("strong"),Wtr=o("mpnet"),Qtr=o(" \u2014 "),IG=a("a"),Htr=o("TFMPNetForMaskedLM"),Utr=o(" (MPNet model)"),Jtr=l(),C0=a("li"),She=a("strong"),Ytr=o("openai-gpt"),Ktr=o(" \u2014 "),DG=a("a"),Ztr=o("TFOpenAIGPTLMHeadModel"),ear=o(" (OpenAI GPT model)"),oar=l(),M0=a("li"),Phe=a("strong"),rar=o("roberta"),tar=o(" \u2014 "),NG=a("a"),aar=o("TFRobertaForMaskedLM"),nar=o(" (RoBERTa model)"),sar=l(),E0=a("li"),$he=a("strong"),lar=o("t5"),iar=o(" \u2014 "),jG=a("a"),dar=o("TFT5ForConditionalGeneration"),car=o(" (T5 model)"),far=l(),y0=a("li"),Ihe=a("strong"),mar=o("tapas"),gar=o(" \u2014 "),qG=a("a"),har=o("TFTapasForMaskedLM"),par=o(" (TAPAS model)"),_ar=l(),w0=a("li"),Dhe=a("strong"),uar=o("transfo-xl"),bar=o(" \u2014 "),GG=a("a"),Tar=o("TFTransfoXLLMHeadModel"),Far=o(" (Transformer-XL model)"),Car=l(),A0=a("li"),Nhe=a("strong"),Mar=o("xlm"),Ear=o(" \u2014 "),OG=a("a"),yar=o("TFXLMWithLMHeadModel"),war=o(" (XLM model)"),Aar=l(),L0=a("li"),jhe=a("strong"),Lar=o("xlm-roberta"),Bar=o(" \u2014 "),XG=a("a"),xar=o("TFXLMRobertaForMaskedLM"),kar=o(" (XLM-RoBERTa model)"),Rar=l(),B0=a("li"),qhe=a("strong"),Sar=o("xlnet"),Par=o(" \u2014 "),VG=a("a"),$ar=o("TFXLNetLMHeadModel"),Iar=o(" (XLNet model)"),Dar=l(),Ghe=a("p"),Nar=o("Examples:"),jar=l(),f(sw.$$.fragment),NRe=l(),vc=a("h2"),x0=a("a"),Ohe=a("span"),f(lw.$$.fragment),qar=l(),Xhe=a("span"),Gar=o("TFAutoModelForCausalLM"),jRe=l(),Fr=a("div"),f(iw.$$.fragment),Oar=l(),Tc=a("p"),Xar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vhe=a("code"),Var=o("from_pretrained()"),zar=o("class method or the "),zhe=a("code"),War=o("from_config()"),Qar=o(`class
method.`),Har=l(),dw=a("p"),Uar=o("This class cannot be instantiated directly using "),Whe=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),pt=a("div"),f(cw.$$.fragment),Zar=l(),Qhe=a("p"),enr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),onr=l(),Fc=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=a("code"),nnr=o("from_pretrained()"),snr=o("to load the model weights."),lnr=l(),Jhe=a("p"),inr=o("Examples:"),dnr=l(),f(fw.$$.fragment),cnr=l(),_o=a("div"),f(mw.$$.fragment),fnr=l(),Yhe=a("p"),mnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gnr=l(),bn=a("p"),hnr=o("The model class to instantiate is selected based on the "),Khe=a("code"),pnr=o("model_type"),_nr=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),vnr=o("pretrained_model_name_or_path"),Tnr=o(":"),Fnr=l(),ce=a("ul"),k0=a("li"),ope=a("strong"),Cnr=o("bert"),Mnr=o(" \u2014 "),zG=a("a"),Enr=o("TFBertLMHeadModel"),ynr=o(" (BERT model)"),wnr=l(),R0=a("li"),rpe=a("strong"),Anr=o("camembert"),Lnr=o(" \u2014 "),WG=a("a"),Bnr=o("TFCamembertForCausalLM"),xnr=o(" (CamemBERT model)"),knr=l(),S0=a("li"),tpe=a("strong"),Rnr=o("ctrl"),Snr=o(" \u2014 "),QG=a("a"),Pnr=o("TFCTRLLMHeadModel"),$nr=o(" (CTRL model)"),Inr=l(),P0=a("li"),ape=a("strong"),Dnr=o("gpt2"),Nnr=o(" \u2014 "),HG=a("a"),jnr=o("TFGPT2LMHeadModel"),qnr=o(" (OpenAI GPT-2 model)"),Gnr=l(),$0=a("li"),npe=a("strong"),Onr=o("gptj"),Xnr=o(" \u2014 "),UG=a("a"),Vnr=o("TFGPTJForCausalLM"),znr=o(" (GPT-J model)"),Wnr=l(),I0=a("li"),spe=a("strong"),Qnr=o("openai-gpt"),Hnr=o(" \u2014 "),JG=a("a"),Unr=o("TFOpenAIGPTLMHeadModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),D0=a("li"),lpe=a("strong"),Knr=o("rembert"),Znr=o(" \u2014 "),YG=a("a"),esr=o("TFRemBertForCausalLM"),osr=o(" (RemBERT model)"),rsr=l(),N0=a("li"),ipe=a("strong"),tsr=o("roberta"),asr=o(" \u2014 "),KG=a("a"),nsr=o("TFRobertaForCausalLM"),ssr=o(" (RoBERTa model)"),lsr=l(),j0=a("li"),dpe=a("strong"),isr=o("roformer"),dsr=o(" \u2014 "),ZG=a("a"),csr=o("TFRoFormerForCausalLM"),fsr=o(" (RoFormer model)"),msr=l(),q0=a("li"),cpe=a("strong"),gsr=o("transfo-xl"),hsr=o(" \u2014 "),eO=a("a"),psr=o("TFTransfoXLLMHeadModel"),_sr=o(" (Transformer-XL model)"),usr=l(),G0=a("li"),fpe=a("strong"),bsr=o("xlm"),vsr=o(" \u2014 "),oO=a("a"),Tsr=o("TFXLMWithLMHeadModel"),Fsr=o(" (XLM model)"),Csr=l(),O0=a("li"),mpe=a("strong"),Msr=o("xlnet"),Esr=o(" \u2014 "),rO=a("a"),ysr=o("TFXLNetLMHeadModel"),wsr=o(" (XLNet model)"),Asr=l(),gpe=a("p"),Lsr=o("Examples:"),Bsr=l(),f(gw.$$.fragment),qRe=l(),Cc=a("h2"),X0=a("a"),hpe=a("span"),f(hw.$$.fragment),xsr=l(),ppe=a("span"),ksr=o("TFAutoModelForImageClassification"),GRe=l(),Cr=a("div"),f(pw.$$.fragment),Rsr=l(),Mc=a("p"),Ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_pe=a("code"),Psr=o("from_pretrained()"),$sr=o("class method or the "),upe=a("code"),Isr=o("from_config()"),Dsr=o(`class
method.`),Nsr=l(),_w=a("p"),jsr=o("This class cannot be instantiated directly using "),bpe=a("code"),qsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),_t=a("div"),f(uw.$$.fragment),Xsr=l(),vpe=a("p"),Vsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zsr=l(),Ec=a("p"),Wsr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Qsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Usr=o("from_pretrained()"),Jsr=o("to load the model weights."),Ysr=l(),Cpe=a("p"),Ksr=o("Examples:"),Zsr=l(),f(bw.$$.fragment),elr=l(),uo=a("div"),f(vw.$$.fragment),olr=l(),Mpe=a("p"),rlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tlr=l(),vn=a("p"),alr=o("The model class to instantiate is selected based on the "),Epe=a("code"),nlr=o("model_type"),slr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),dlr=o("pretrained_model_name_or_path"),clr=o(":"),flr=l(),Tw=a("ul"),V0=a("li"),Ape=a("strong"),mlr=o("convnext"),glr=o(" \u2014 "),tO=a("a"),hlr=o("TFConvNextForImageClassification"),plr=o(" (ConvNext model)"),_lr=l(),z0=a("li"),Lpe=a("strong"),ulr=o("vit"),blr=o(" \u2014 "),aO=a("a"),vlr=o("TFViTForImageClassification"),Tlr=o(" (ViT model)"),Flr=l(),Bpe=a("p"),Clr=o("Examples:"),Mlr=l(),f(Fw.$$.fragment),ORe=l(),yc=a("h2"),W0=a("a"),xpe=a("span"),f(Cw.$$.fragment),Elr=l(),kpe=a("span"),ylr=o("TFAutoModelForMaskedLM"),XRe=l(),Mr=a("div"),f(Mw.$$.fragment),wlr=l(),wc=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rpe=a("code"),Llr=o("from_pretrained()"),Blr=o("class method or the "),Spe=a("code"),xlr=o("from_config()"),klr=o(`class
method.`),Rlr=l(),Ew=a("p"),Slr=o("This class cannot be instantiated directly using "),Ppe=a("code"),Plr=o("__init__()"),$lr=o(" (throws an error)."),Ilr=l(),ut=a("div"),f(yw.$$.fragment),Dlr=l(),$pe=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jlr=l(),Ac=a("p"),qlr=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),Glr=o("not"),Olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Xlr=o("from_pretrained()"),Vlr=o("to load the model weights."),zlr=l(),Npe=a("p"),Wlr=o("Examples:"),Qlr=l(),f(ww.$$.fragment),Hlr=l(),bo=a("div"),f(Aw.$$.fragment),Ulr=l(),jpe=a("p"),Jlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ylr=l(),Tn=a("p"),Klr=o("The model class to instantiate is selected based on the "),qpe=a("code"),Zlr=o("model_type"),eir=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),oir=o("pretrained_model_name_or_path"),rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),tir=o("pretrained_model_name_or_path"),air=o(":"),nir=l(),J=a("ul"),Q0=a("li"),Xpe=a("strong"),sir=o("albert"),lir=o(" \u2014 "),nO=a("a"),iir=o("TFAlbertForMaskedLM"),dir=o(" (ALBERT model)"),cir=l(),H0=a("li"),Vpe=a("strong"),fir=o("bert"),mir=o(" \u2014 "),sO=a("a"),gir=o("TFBertForMaskedLM"),hir=o(" (BERT model)"),pir=l(),U0=a("li"),zpe=a("strong"),_ir=o("camembert"),uir=o(" \u2014 "),lO=a("a"),bir=o("TFCamembertForMaskedLM"),vir=o(" (CamemBERT model)"),Tir=l(),J0=a("li"),Wpe=a("strong"),Fir=o("convbert"),Cir=o(" \u2014 "),iO=a("a"),Mir=o("TFConvBertForMaskedLM"),Eir=o(" (ConvBERT model)"),yir=l(),Y0=a("li"),Qpe=a("strong"),wir=o("deberta"),Air=o(" \u2014 "),dO=a("a"),Lir=o("TFDebertaForMaskedLM"),Bir=o(" (DeBERTa model)"),xir=l(),K0=a("li"),Hpe=a("strong"),kir=o("deberta-v2"),Rir=o(" \u2014 "),cO=a("a"),Sir=o("TFDebertaV2ForMaskedLM"),Pir=o(" (DeBERTa-v2 model)"),$ir=l(),Z0=a("li"),Upe=a("strong"),Iir=o("distilbert"),Dir=o(" \u2014 "),fO=a("a"),Nir=o("TFDistilBertForMaskedLM"),jir=o(" (DistilBERT model)"),qir=l(),eT=a("li"),Jpe=a("strong"),Gir=o("electra"),Oir=o(" \u2014 "),mO=a("a"),Xir=o("TFElectraForMaskedLM"),Vir=o(" (ELECTRA model)"),zir=l(),oT=a("li"),Ype=a("strong"),Wir=o("flaubert"),Qir=o(" \u2014 "),gO=a("a"),Hir=o("TFFlaubertWithLMHeadModel"),Uir=o(" (FlauBERT model)"),Jir=l(),rT=a("li"),Kpe=a("strong"),Yir=o("funnel"),Kir=o(" \u2014 "),hO=a("a"),Zir=o("TFFunnelForMaskedLM"),edr=o(" (Funnel Transformer model)"),odr=l(),tT=a("li"),Zpe=a("strong"),rdr=o("layoutlm"),tdr=o(" \u2014 "),pO=a("a"),adr=o("TFLayoutLMForMaskedLM"),ndr=o(" (LayoutLM model)"),sdr=l(),aT=a("li"),e_e=a("strong"),ldr=o("longformer"),idr=o(" \u2014 "),_O=a("a"),ddr=o("TFLongformerForMaskedLM"),cdr=o(" (Longformer model)"),fdr=l(),nT=a("li"),o_e=a("strong"),mdr=o("mobilebert"),gdr=o(" \u2014 "),uO=a("a"),hdr=o("TFMobileBertForMaskedLM"),pdr=o(" (MobileBERT model)"),_dr=l(),sT=a("li"),r_e=a("strong"),udr=o("mpnet"),bdr=o(" \u2014 "),bO=a("a"),vdr=o("TFMPNetForMaskedLM"),Tdr=o(" (MPNet model)"),Fdr=l(),lT=a("li"),t_e=a("strong"),Cdr=o("rembert"),Mdr=o(" \u2014 "),vO=a("a"),Edr=o("TFRemBertForMaskedLM"),ydr=o(" (RemBERT model)"),wdr=l(),iT=a("li"),a_e=a("strong"),Adr=o("roberta"),Ldr=o(" \u2014 "),TO=a("a"),Bdr=o("TFRobertaForMaskedLM"),xdr=o(" (RoBERTa model)"),kdr=l(),dT=a("li"),n_e=a("strong"),Rdr=o("roformer"),Sdr=o(" \u2014 "),FO=a("a"),Pdr=o("TFRoFormerForMaskedLM"),$dr=o(" (RoFormer model)"),Idr=l(),cT=a("li"),s_e=a("strong"),Ddr=o("tapas"),Ndr=o(" \u2014 "),CO=a("a"),jdr=o("TFTapasForMaskedLM"),qdr=o(" (TAPAS model)"),Gdr=l(),fT=a("li"),l_e=a("strong"),Odr=o("xlm"),Xdr=o(" \u2014 "),MO=a("a"),Vdr=o("TFXLMWithLMHeadModel"),zdr=o(" (XLM model)"),Wdr=l(),mT=a("li"),i_e=a("strong"),Qdr=o("xlm-roberta"),Hdr=o(" \u2014 "),EO=a("a"),Udr=o("TFXLMRobertaForMaskedLM"),Jdr=o(" (XLM-RoBERTa model)"),Ydr=l(),d_e=a("p"),Kdr=o("Examples:"),Zdr=l(),f(Lw.$$.fragment),VRe=l(),Lc=a("h2"),gT=a("a"),c_e=a("span"),f(Bw.$$.fragment),ecr=l(),f_e=a("span"),ocr=o("TFAutoModelForSeq2SeqLM"),zRe=l(),Er=a("div"),f(xw.$$.fragment),rcr=l(),Bc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m_e=a("code"),acr=o("from_pretrained()"),ncr=o("class method or the "),g_e=a("code"),scr=o("from_config()"),lcr=o(`class
method.`),icr=l(),kw=a("p"),dcr=o("This class cannot be instantiated directly using "),h_e=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),bt=a("div"),f(Rw.$$.fragment),gcr=l(),p_e=a("p"),hcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pcr=l(),xc=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),ucr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=a("code"),vcr=o("from_pretrained()"),Tcr=o("to load the model weights."),Fcr=l(),b_e=a("p"),Ccr=o("Examples:"),Mcr=l(),f(Sw.$$.fragment),Ecr=l(),vo=a("div"),f(Pw.$$.fragment),ycr=l(),v_e=a("p"),wcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Acr=l(),Fn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Bcr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),kcr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),Scr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),ue=a("ul"),hT=a("li"),M_e=a("strong"),Icr=o("bart"),Dcr=o(" \u2014 "),yO=a("a"),Ncr=o("TFBartForConditionalGeneration"),jcr=o(" (BART model)"),qcr=l(),pT=a("li"),E_e=a("strong"),Gcr=o("blenderbot"),Ocr=o(" \u2014 "),wO=a("a"),Xcr=o("TFBlenderbotForConditionalGeneration"),Vcr=o(" (Blenderbot model)"),zcr=l(),_T=a("li"),y_e=a("strong"),Wcr=o("blenderbot-small"),Qcr=o(" \u2014 "),AO=a("a"),Hcr=o("TFBlenderbotSmallForConditionalGeneration"),Ucr=o(" (BlenderbotSmall model)"),Jcr=l(),uT=a("li"),w_e=a("strong"),Ycr=o("encoder-decoder"),Kcr=o(" \u2014 "),LO=a("a"),Zcr=o("TFEncoderDecoderModel"),efr=o(" (Encoder decoder model)"),ofr=l(),bT=a("li"),A_e=a("strong"),rfr=o("led"),tfr=o(" \u2014 "),BO=a("a"),afr=o("TFLEDForConditionalGeneration"),nfr=o(" (LED model)"),sfr=l(),vT=a("li"),L_e=a("strong"),lfr=o("marian"),ifr=o(" \u2014 "),xO=a("a"),dfr=o("TFMarianMTModel"),cfr=o(" (Marian model)"),ffr=l(),TT=a("li"),B_e=a("strong"),mfr=o("mbart"),gfr=o(" \u2014 "),kO=a("a"),hfr=o("TFMBartForConditionalGeneration"),pfr=o(" (mBART model)"),_fr=l(),FT=a("li"),x_e=a("strong"),ufr=o("mt5"),bfr=o(" \u2014 "),RO=a("a"),vfr=o("TFMT5ForConditionalGeneration"),Tfr=o(" (mT5 model)"),Ffr=l(),CT=a("li"),k_e=a("strong"),Cfr=o("pegasus"),Mfr=o(" \u2014 "),SO=a("a"),Efr=o("TFPegasusForConditionalGeneration"),yfr=o(" (Pegasus model)"),wfr=l(),MT=a("li"),R_e=a("strong"),Afr=o("t5"),Lfr=o(" \u2014 "),PO=a("a"),Bfr=o("TFT5ForConditionalGeneration"),xfr=o(" (T5 model)"),kfr=l(),S_e=a("p"),Rfr=o("Examples:"),Sfr=l(),f($w.$$.fragment),WRe=l(),kc=a("h2"),ET=a("a"),P_e=a("span"),f(Iw.$$.fragment),Pfr=l(),$_e=a("span"),$fr=o("TFAutoModelForSequenceClassification"),QRe=l(),yr=a("div"),f(Dw.$$.fragment),Ifr=l(),Rc=a("p"),Dfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),I_e=a("code"),Nfr=o("from_pretrained()"),jfr=o("class method or the "),D_e=a("code"),qfr=o("from_config()"),Gfr=o(`class
method.`),Ofr=l(),Nw=a("p"),Xfr=o("This class cannot be instantiated directly using "),N_e=a("code"),Vfr=o("__init__()"),zfr=o(" (throws an error)."),Wfr=l(),vt=a("div"),f(jw.$$.fragment),Qfr=l(),j_e=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ufr=l(),Sc=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=a("code"),Zfr=o("from_pretrained()"),emr=o("to load the model weights."),omr=l(),O_e=a("p"),rmr=o("Examples:"),tmr=l(),f(qw.$$.fragment),amr=l(),To=a("div"),f(Gw.$$.fragment),nmr=l(),X_e=a("p"),smr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lmr=l(),Cn=a("p"),imr=o("The model class to instantiate is selected based on the "),V_e=a("code"),dmr=o("model_type"),cmr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(":"),pmr=l(),X=a("ul"),yT=a("li"),Q_e=a("strong"),_mr=o("albert"),umr=o(" \u2014 "),$O=a("a"),bmr=o("TFAlbertForSequenceClassification"),vmr=o(" (ALBERT model)"),Tmr=l(),wT=a("li"),H_e=a("strong"),Fmr=o("bert"),Cmr=o(" \u2014 "),IO=a("a"),Mmr=o("TFBertForSequenceClassification"),Emr=o(" (BERT model)"),ymr=l(),AT=a("li"),U_e=a("strong"),wmr=o("camembert"),Amr=o(" \u2014 "),DO=a("a"),Lmr=o("TFCamembertForSequenceClassification"),Bmr=o(" (CamemBERT model)"),xmr=l(),LT=a("li"),J_e=a("strong"),kmr=o("convbert"),Rmr=o(" \u2014 "),NO=a("a"),Smr=o("TFConvBertForSequenceClassification"),Pmr=o(" (ConvBERT model)"),$mr=l(),BT=a("li"),Y_e=a("strong"),Imr=o("ctrl"),Dmr=o(" \u2014 "),jO=a("a"),Nmr=o("TFCTRLForSequenceClassification"),jmr=o(" (CTRL model)"),qmr=l(),xT=a("li"),K_e=a("strong"),Gmr=o("deberta"),Omr=o(" \u2014 "),qO=a("a"),Xmr=o("TFDebertaForSequenceClassification"),Vmr=o(" (DeBERTa model)"),zmr=l(),kT=a("li"),Z_e=a("strong"),Wmr=o("deberta-v2"),Qmr=o(" \u2014 "),GO=a("a"),Hmr=o("TFDebertaV2ForSequenceClassification"),Umr=o(" (DeBERTa-v2 model)"),Jmr=l(),RT=a("li"),eue=a("strong"),Ymr=o("distilbert"),Kmr=o(" \u2014 "),OO=a("a"),Zmr=o("TFDistilBertForSequenceClassification"),egr=o(" (DistilBERT model)"),ogr=l(),ST=a("li"),oue=a("strong"),rgr=o("electra"),tgr=o(" \u2014 "),XO=a("a"),agr=o("TFElectraForSequenceClassification"),ngr=o(" (ELECTRA model)"),sgr=l(),PT=a("li"),rue=a("strong"),lgr=o("flaubert"),igr=o(" \u2014 "),VO=a("a"),dgr=o("TFFlaubertForSequenceClassification"),cgr=o(" (FlauBERT model)"),fgr=l(),$T=a("li"),tue=a("strong"),mgr=o("funnel"),ggr=o(" \u2014 "),zO=a("a"),hgr=o("TFFunnelForSequenceClassification"),pgr=o(" (Funnel Transformer model)"),_gr=l(),IT=a("li"),aue=a("strong"),ugr=o("gpt2"),bgr=o(" \u2014 "),WO=a("a"),vgr=o("TFGPT2ForSequenceClassification"),Tgr=o(" (OpenAI GPT-2 model)"),Fgr=l(),DT=a("li"),nue=a("strong"),Cgr=o("gptj"),Mgr=o(" \u2014 "),QO=a("a"),Egr=o("TFGPTJForSequenceClassification"),ygr=o(" (GPT-J model)"),wgr=l(),NT=a("li"),sue=a("strong"),Agr=o("layoutlm"),Lgr=o(" \u2014 "),HO=a("a"),Bgr=o("TFLayoutLMForSequenceClassification"),xgr=o(" (LayoutLM model)"),kgr=l(),jT=a("li"),lue=a("strong"),Rgr=o("longformer"),Sgr=o(" \u2014 "),UO=a("a"),Pgr=o("TFLongformerForSequenceClassification"),$gr=o(" (Longformer model)"),Igr=l(),qT=a("li"),iue=a("strong"),Dgr=o("mobilebert"),Ngr=o(" \u2014 "),JO=a("a"),jgr=o("TFMobileBertForSequenceClassification"),qgr=o(" (MobileBERT model)"),Ggr=l(),GT=a("li"),due=a("strong"),Ogr=o("mpnet"),Xgr=o(" \u2014 "),YO=a("a"),Vgr=o("TFMPNetForSequenceClassification"),zgr=o(" (MPNet model)"),Wgr=l(),OT=a("li"),cue=a("strong"),Qgr=o("openai-gpt"),Hgr=o(" \u2014 "),KO=a("a"),Ugr=o("TFOpenAIGPTForSequenceClassification"),Jgr=o(" (OpenAI GPT model)"),Ygr=l(),XT=a("li"),fue=a("strong"),Kgr=o("rembert"),Zgr=o(" \u2014 "),ZO=a("a"),ehr=o("TFRemBertForSequenceClassification"),ohr=o(" (RemBERT model)"),rhr=l(),VT=a("li"),mue=a("strong"),thr=o("roberta"),ahr=o(" \u2014 "),eX=a("a"),nhr=o("TFRobertaForSequenceClassification"),shr=o(" (RoBERTa model)"),lhr=l(),zT=a("li"),gue=a("strong"),ihr=o("roformer"),dhr=o(" \u2014 "),oX=a("a"),chr=o("TFRoFormerForSequenceClassification"),fhr=o(" (RoFormer model)"),mhr=l(),WT=a("li"),hue=a("strong"),ghr=o("tapas"),hhr=o(" \u2014 "),rX=a("a"),phr=o("TFTapasForSequenceClassification"),_hr=o(" (TAPAS model)"),uhr=l(),QT=a("li"),pue=a("strong"),bhr=o("transfo-xl"),vhr=o(" \u2014 "),tX=a("a"),Thr=o("TFTransfoXLForSequenceClassification"),Fhr=o(" (Transformer-XL model)"),Chr=l(),HT=a("li"),_ue=a("strong"),Mhr=o("xlm"),Ehr=o(" \u2014 "),aX=a("a"),yhr=o("TFXLMForSequenceClassification"),whr=o(" (XLM model)"),Ahr=l(),UT=a("li"),uue=a("strong"),Lhr=o("xlm-roberta"),Bhr=o(" \u2014 "),nX=a("a"),xhr=o("TFXLMRobertaForSequenceClassification"),khr=o(" (XLM-RoBERTa model)"),Rhr=l(),JT=a("li"),bue=a("strong"),Shr=o("xlnet"),Phr=o(" \u2014 "),sX=a("a"),$hr=o("TFXLNetForSequenceClassification"),Ihr=o(" (XLNet model)"),Dhr=l(),vue=a("p"),Nhr=o("Examples:"),jhr=l(),f(Ow.$$.fragment),HRe=l(),Pc=a("h2"),YT=a("a"),Tue=a("span"),f(Xw.$$.fragment),qhr=l(),Fue=a("span"),Ghr=o("TFAutoModelForMultipleChoice"),URe=l(),wr=a("div"),f(Vw.$$.fragment),Ohr=l(),$c=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cue=a("code"),Vhr=o("from_pretrained()"),zhr=o("class method or the "),Mue=a("code"),Whr=o("from_config()"),Qhr=o(`class
method.`),Hhr=l(),zw=a("p"),Uhr=o("This class cannot be instantiated directly using "),Eue=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),Tt=a("div"),f(Ww.$$.fragment),Zhr=l(),yue=a("p"),epr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),opr=l(),Ic=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=a("code"),npr=o("from_pretrained()"),spr=o("to load the model weights."),lpr=l(),Lue=a("p"),ipr=o("Examples:"),dpr=l(),f(Qw.$$.fragment),cpr=l(),Fo=a("div"),f(Hw.$$.fragment),fpr=l(),Bue=a("p"),mpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gpr=l(),Mn=a("p"),hpr=o("The model class to instantiate is selected based on the "),xue=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),vpr=o("pretrained_model_name_or_path"),Tpr=o(":"),Fpr=l(),ae=a("ul"),KT=a("li"),Sue=a("strong"),Cpr=o("albert"),Mpr=o(" \u2014 "),lX=a("a"),Epr=o("TFAlbertForMultipleChoice"),ypr=o(" (ALBERT model)"),wpr=l(),ZT=a("li"),Pue=a("strong"),Apr=o("bert"),Lpr=o(" \u2014 "),iX=a("a"),Bpr=o("TFBertForMultipleChoice"),xpr=o(" (BERT model)"),kpr=l(),e8=a("li"),$ue=a("strong"),Rpr=o("camembert"),Spr=o(" \u2014 "),dX=a("a"),Ppr=o("TFCamembertForMultipleChoice"),$pr=o(" (CamemBERT model)"),Ipr=l(),o8=a("li"),Iue=a("strong"),Dpr=o("convbert"),Npr=o(" \u2014 "),cX=a("a"),jpr=o("TFConvBertForMultipleChoice"),qpr=o(" (ConvBERT model)"),Gpr=l(),r8=a("li"),Due=a("strong"),Opr=o("distilbert"),Xpr=o(" \u2014 "),fX=a("a"),Vpr=o("TFDistilBertForMultipleChoice"),zpr=o(" (DistilBERT model)"),Wpr=l(),t8=a("li"),Nue=a("strong"),Qpr=o("electra"),Hpr=o(" \u2014 "),mX=a("a"),Upr=o("TFElectraForMultipleChoice"),Jpr=o(" (ELECTRA model)"),Ypr=l(),a8=a("li"),jue=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),gX=a("a"),e_r=o("TFFlaubertForMultipleChoice"),o_r=o(" (FlauBERT model)"),r_r=l(),n8=a("li"),que=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),hX=a("a"),n_r=o("TFFunnelForMultipleChoice"),s_r=o(" (Funnel Transformer model)"),l_r=l(),s8=a("li"),Gue=a("strong"),i_r=o("longformer"),d_r=o(" \u2014 "),pX=a("a"),c_r=o("TFLongformerForMultipleChoice"),f_r=o(" (Longformer model)"),m_r=l(),l8=a("li"),Oue=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),_X=a("a"),p_r=o("TFMobileBertForMultipleChoice"),__r=o(" (MobileBERT model)"),u_r=l(),i8=a("li"),Xue=a("strong"),b_r=o("mpnet"),v_r=o(" \u2014 "),uX=a("a"),T_r=o("TFMPNetForMultipleChoice"),F_r=o(" (MPNet model)"),C_r=l(),d8=a("li"),Vue=a("strong"),M_r=o("rembert"),E_r=o(" \u2014 "),bX=a("a"),y_r=o("TFRemBertForMultipleChoice"),w_r=o(" (RemBERT model)"),A_r=l(),c8=a("li"),zue=a("strong"),L_r=o("roberta"),B_r=o(" \u2014 "),vX=a("a"),x_r=o("TFRobertaForMultipleChoice"),k_r=o(" (RoBERTa model)"),R_r=l(),f8=a("li"),Wue=a("strong"),S_r=o("roformer"),P_r=o(" \u2014 "),TX=a("a"),$_r=o("TFRoFormerForMultipleChoice"),I_r=o(" (RoFormer model)"),D_r=l(),m8=a("li"),Que=a("strong"),N_r=o("xlm"),j_r=o(" \u2014 "),FX=a("a"),q_r=o("TFXLMForMultipleChoice"),G_r=o(" (XLM model)"),O_r=l(),g8=a("li"),Hue=a("strong"),X_r=o("xlm-roberta"),V_r=o(" \u2014 "),CX=a("a"),z_r=o("TFXLMRobertaForMultipleChoice"),W_r=o(" (XLM-RoBERTa model)"),Q_r=l(),h8=a("li"),Uue=a("strong"),H_r=o("xlnet"),U_r=o(" \u2014 "),MX=a("a"),J_r=o("TFXLNetForMultipleChoice"),Y_r=o(" (XLNet model)"),K_r=l(),Jue=a("p"),Z_r=o("Examples:"),eur=l(),f(Uw.$$.fragment),JRe=l(),Dc=a("h2"),p8=a("a"),Yue=a("span"),f(Jw.$$.fragment),our=l(),Kue=a("span"),rur=o("TFAutoModelForTableQuestionAnswering"),YRe=l(),Ar=a("div"),f(Yw.$$.fragment),tur=l(),Nc=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zue=a("code"),nur=o("from_pretrained()"),sur=o("class method or the "),e1e=a("code"),lur=o("from_config()"),iur=o(`class
method.`),dur=l(),Kw=a("p"),cur=o("This class cannot be instantiated directly using "),o1e=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),Ft=a("div"),f(Zw.$$.fragment),hur=l(),r1e=a("p"),pur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ur=l(),jc=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),bur=o("not"),vur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=a("code"),Tur=o("from_pretrained()"),Fur=o("to load the model weights."),Cur=l(),n1e=a("p"),Mur=o("Examples:"),Eur=l(),f(eA.$$.fragment),yur=l(),Co=a("div"),f(oA.$$.fragment),wur=l(),s1e=a("p"),Aur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lur=l(),En=a("p"),Bur=o("The model class to instantiate is selected based on the "),l1e=a("code"),xur=o("model_type"),kur=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Rur=o("pretrained_model_name_or_path"),Sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Pur=o("pretrained_model_name_or_path"),$ur=o(":"),Iur=l(),c1e=a("ul"),_8=a("li"),f1e=a("strong"),Dur=o("tapas"),Nur=o(" \u2014 "),EX=a("a"),jur=o("TFTapasForQuestionAnswering"),qur=o(" (TAPAS model)"),Gur=l(),m1e=a("p"),Our=o("Examples:"),Xur=l(),f(rA.$$.fragment),KRe=l(),qc=a("h2"),u8=a("a"),g1e=a("span"),f(tA.$$.fragment),Vur=l(),h1e=a("span"),zur=o("TFAutoModelForTokenClassification"),ZRe=l(),Lr=a("div"),f(aA.$$.fragment),Wur=l(),Gc=a("p"),Qur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),p1e=a("code"),Hur=o("from_pretrained()"),Uur=o("class method or the "),_1e=a("code"),Jur=o("from_config()"),Yur=o(`class
method.`),Kur=l(),nA=a("p"),Zur=o("This class cannot be instantiated directly using "),u1e=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),Ct=a("div"),f(sA.$$.fragment),t1r=l(),b1e=a("p"),a1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n1r=l(),Oc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=a("code"),d1r=o("from_pretrained()"),c1r=o("to load the model weights."),f1r=l(),F1e=a("p"),m1r=o("Examples:"),g1r=l(),f(lA.$$.fragment),h1r=l(),Mo=a("div"),f(iA.$$.fragment),p1r=l(),C1e=a("p"),_1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u1r=l(),yn=a("p"),b1r=o("The model class to instantiate is selected based on the "),M1e=a("code"),v1r=o("model_type"),T1r=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),F1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(":"),y1r=l(),Y=a("ul"),b8=a("li"),w1e=a("strong"),w1r=o("albert"),A1r=o(" \u2014 "),yX=a("a"),L1r=o("TFAlbertForTokenClassification"),B1r=o(" (ALBERT model)"),x1r=l(),v8=a("li"),A1e=a("strong"),k1r=o("bert"),R1r=o(" \u2014 "),wX=a("a"),S1r=o("TFBertForTokenClassification"),P1r=o(" (BERT model)"),$1r=l(),T8=a("li"),L1e=a("strong"),I1r=o("camembert"),D1r=o(" \u2014 "),AX=a("a"),N1r=o("TFCamembertForTokenClassification"),j1r=o(" (CamemBERT model)"),q1r=l(),F8=a("li"),B1e=a("strong"),G1r=o("convbert"),O1r=o(" \u2014 "),LX=a("a"),X1r=o("TFConvBertForTokenClassification"),V1r=o(" (ConvBERT model)"),z1r=l(),C8=a("li"),x1e=a("strong"),W1r=o("deberta"),Q1r=o(" \u2014 "),BX=a("a"),H1r=o("TFDebertaForTokenClassification"),U1r=o(" (DeBERTa model)"),J1r=l(),M8=a("li"),k1e=a("strong"),Y1r=o("deberta-v2"),K1r=o(" \u2014 "),xX=a("a"),Z1r=o("TFDebertaV2ForTokenClassification"),ebr=o(" (DeBERTa-v2 model)"),obr=l(),E8=a("li"),R1e=a("strong"),rbr=o("distilbert"),tbr=o(" \u2014 "),kX=a("a"),abr=o("TFDistilBertForTokenClassification"),nbr=o(" (DistilBERT model)"),sbr=l(),y8=a("li"),S1e=a("strong"),lbr=o("electra"),ibr=o(" \u2014 "),RX=a("a"),dbr=o("TFElectraForTokenClassification"),cbr=o(" (ELECTRA model)"),fbr=l(),w8=a("li"),P1e=a("strong"),mbr=o("flaubert"),gbr=o(" \u2014 "),SX=a("a"),hbr=o("TFFlaubertForTokenClassification"),pbr=o(" (FlauBERT model)"),_br=l(),A8=a("li"),$1e=a("strong"),ubr=o("funnel"),bbr=o(" \u2014 "),PX=a("a"),vbr=o("TFFunnelForTokenClassification"),Tbr=o(" (Funnel Transformer model)"),Fbr=l(),L8=a("li"),I1e=a("strong"),Cbr=o("layoutlm"),Mbr=o(" \u2014 "),$X=a("a"),Ebr=o("TFLayoutLMForTokenClassification"),ybr=o(" (LayoutLM model)"),wbr=l(),B8=a("li"),D1e=a("strong"),Abr=o("longformer"),Lbr=o(" \u2014 "),IX=a("a"),Bbr=o("TFLongformerForTokenClassification"),xbr=o(" (Longformer model)"),kbr=l(),x8=a("li"),N1e=a("strong"),Rbr=o("mobilebert"),Sbr=o(" \u2014 "),DX=a("a"),Pbr=o("TFMobileBertForTokenClassification"),$br=o(" (MobileBERT model)"),Ibr=l(),k8=a("li"),j1e=a("strong"),Dbr=o("mpnet"),Nbr=o(" \u2014 "),NX=a("a"),jbr=o("TFMPNetForTokenClassification"),qbr=o(" (MPNet model)"),Gbr=l(),R8=a("li"),q1e=a("strong"),Obr=o("rembert"),Xbr=o(" \u2014 "),jX=a("a"),Vbr=o("TFRemBertForTokenClassification"),zbr=o(" (RemBERT model)"),Wbr=l(),S8=a("li"),G1e=a("strong"),Qbr=o("roberta"),Hbr=o(" \u2014 "),qX=a("a"),Ubr=o("TFRobertaForTokenClassification"),Jbr=o(" (RoBERTa model)"),Ybr=l(),P8=a("li"),O1e=a("strong"),Kbr=o("roformer"),Zbr=o(" \u2014 "),GX=a("a"),e3r=o("TFRoFormerForTokenClassification"),o3r=o(" (RoFormer model)"),r3r=l(),$8=a("li"),X1e=a("strong"),t3r=o("xlm"),a3r=o(" \u2014 "),OX=a("a"),n3r=o("TFXLMForTokenClassification"),s3r=o(" (XLM model)"),l3r=l(),I8=a("li"),V1e=a("strong"),i3r=o("xlm-roberta"),d3r=o(" \u2014 "),XX=a("a"),c3r=o("TFXLMRobertaForTokenClassification"),f3r=o(" (XLM-RoBERTa model)"),m3r=l(),D8=a("li"),z1e=a("strong"),g3r=o("xlnet"),h3r=o(" \u2014 "),VX=a("a"),p3r=o("TFXLNetForTokenClassification"),_3r=o(" (XLNet model)"),u3r=l(),W1e=a("p"),b3r=o("Examples:"),v3r=l(),f(dA.$$.fragment),eSe=l(),Xc=a("h2"),N8=a("a"),Q1e=a("span"),f(cA.$$.fragment),T3r=l(),H1e=a("span"),F3r=o("TFAutoModelForQuestionAnswering"),oSe=l(),Br=a("div"),f(fA.$$.fragment),C3r=l(),Vc=a("p"),M3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),U1e=a("code"),E3r=o("from_pretrained()"),y3r=o("class method or the "),J1e=a("code"),w3r=o("from_config()"),A3r=o(`class
method.`),L3r=l(),mA=a("p"),B3r=o("This class cannot be instantiated directly using "),Y1e=a("code"),x3r=o("__init__()"),k3r=o(" (throws an error)."),R3r=l(),Mt=a("div"),f(gA.$$.fragment),S3r=l(),K1e=a("p"),P3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$3r=l(),zc=a("p"),I3r=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),D3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=a("code"),j3r=o("from_pretrained()"),q3r=o("to load the model weights."),G3r=l(),obe=a("p"),O3r=o("Examples:"),X3r=l(),f(hA.$$.fragment),V3r=l(),Eo=a("div"),f(pA.$$.fragment),z3r=l(),rbe=a("p"),W3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q3r=l(),wn=a("p"),H3r=o("The model class to instantiate is selected based on the "),tbe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Z3r=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),K=a("ul"),j8=a("li"),sbe=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),zX=a("a"),a2r=o("TFAlbertForQuestionAnswering"),n2r=o(" (ALBERT model)"),s2r=l(),q8=a("li"),lbe=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),WX=a("a"),d2r=o("TFBertForQuestionAnswering"),c2r=o(" (BERT model)"),f2r=l(),G8=a("li"),ibe=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),QX=a("a"),h2r=o("TFCamembertForQuestionAnswering"),p2r=o(" (CamemBERT model)"),_2r=l(),O8=a("li"),dbe=a("strong"),u2r=o("convbert"),b2r=o(" \u2014 "),HX=a("a"),v2r=o("TFConvBertForQuestionAnswering"),T2r=o(" (ConvBERT model)"),F2r=l(),X8=a("li"),cbe=a("strong"),C2r=o("deberta"),M2r=o(" \u2014 "),UX=a("a"),E2r=o("TFDebertaForQuestionAnswering"),y2r=o(" (DeBERTa model)"),w2r=l(),V8=a("li"),fbe=a("strong"),A2r=o("deberta-v2"),L2r=o(" \u2014 "),JX=a("a"),B2r=o("TFDebertaV2ForQuestionAnswering"),x2r=o(" (DeBERTa-v2 model)"),k2r=l(),z8=a("li"),mbe=a("strong"),R2r=o("distilbert"),S2r=o(" \u2014 "),YX=a("a"),P2r=o("TFDistilBertForQuestionAnswering"),$2r=o(" (DistilBERT model)"),I2r=l(),W8=a("li"),gbe=a("strong"),D2r=o("electra"),N2r=o(" \u2014 "),KX=a("a"),j2r=o("TFElectraForQuestionAnswering"),q2r=o(" (ELECTRA model)"),G2r=l(),Q8=a("li"),hbe=a("strong"),O2r=o("flaubert"),X2r=o(" \u2014 "),ZX=a("a"),V2r=o("TFFlaubertForQuestionAnsweringSimple"),z2r=o(" (FlauBERT model)"),W2r=l(),H8=a("li"),pbe=a("strong"),Q2r=o("funnel"),H2r=o(" \u2014 "),eV=a("a"),U2r=o("TFFunnelForQuestionAnswering"),J2r=o(" (Funnel Transformer model)"),Y2r=l(),U8=a("li"),_be=a("strong"),K2r=o("gptj"),Z2r=o(" \u2014 "),oV=a("a"),evr=o("TFGPTJForQuestionAnswering"),ovr=o(" (GPT-J model)"),rvr=l(),J8=a("li"),ube=a("strong"),tvr=o("longformer"),avr=o(" \u2014 "),rV=a("a"),nvr=o("TFLongformerForQuestionAnswering"),svr=o(" (Longformer model)"),lvr=l(),Y8=a("li"),bbe=a("strong"),ivr=o("mobilebert"),dvr=o(" \u2014 "),tV=a("a"),cvr=o("TFMobileBertForQuestionAnswering"),fvr=o(" (MobileBERT model)"),mvr=l(),K8=a("li"),vbe=a("strong"),gvr=o("mpnet"),hvr=o(" \u2014 "),aV=a("a"),pvr=o("TFMPNetForQuestionAnswering"),_vr=o(" (MPNet model)"),uvr=l(),Z8=a("li"),Tbe=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),nV=a("a"),Tvr=o("TFRemBertForQuestionAnswering"),Fvr=o(" (RemBERT model)"),Cvr=l(),eF=a("li"),Fbe=a("strong"),Mvr=o("roberta"),Evr=o(" \u2014 "),sV=a("a"),yvr=o("TFRobertaForQuestionAnswering"),wvr=o(" (RoBERTa model)"),Avr=l(),oF=a("li"),Cbe=a("strong"),Lvr=o("roformer"),Bvr=o(" \u2014 "),lV=a("a"),xvr=o("TFRoFormerForQuestionAnswering"),kvr=o(" (RoFormer model)"),Rvr=l(),rF=a("li"),Mbe=a("strong"),Svr=o("xlm"),Pvr=o(" \u2014 "),iV=a("a"),$vr=o("TFXLMForQuestionAnsweringSimple"),Ivr=o(" (XLM model)"),Dvr=l(),tF=a("li"),Ebe=a("strong"),Nvr=o("xlm-roberta"),jvr=o(" \u2014 "),dV=a("a"),qvr=o("TFXLMRobertaForQuestionAnswering"),Gvr=o(" (XLM-RoBERTa model)"),Ovr=l(),aF=a("li"),ybe=a("strong"),Xvr=o("xlnet"),Vvr=o(" \u2014 "),cV=a("a"),zvr=o("TFXLNetForQuestionAnsweringSimple"),Wvr=o(" (XLNet model)"),Qvr=l(),wbe=a("p"),Hvr=o("Examples:"),Uvr=l(),f(_A.$$.fragment),rSe=l(),Wc=a("h2"),nF=a("a"),Abe=a("span"),f(uA.$$.fragment),Jvr=l(),Lbe=a("span"),Yvr=o("TFAutoModelForVision2Seq"),tSe=l(),xr=a("div"),f(bA.$$.fragment),Kvr=l(),Qc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bbe=a("code"),e6r=o("from_pretrained()"),o6r=o("class method or the "),xbe=a("code"),r6r=o("from_config()"),t6r=o(`class
method.`),a6r=l(),vA=a("p"),n6r=o("This class cannot be instantiated directly using "),kbe=a("code"),s6r=o("__init__()"),l6r=o(" (throws an error)."),i6r=l(),Et=a("div"),f(TA.$$.fragment),d6r=l(),Rbe=a("p"),c6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f6r=l(),Hc=a("p"),m6r=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),g6r=o("not"),h6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pbe=a("code"),p6r=o("from_pretrained()"),_6r=o("to load the model weights."),u6r=l(),$be=a("p"),b6r=o("Examples:"),v6r=l(),f(FA.$$.fragment),T6r=l(),yo=a("div"),f(CA.$$.fragment),F6r=l(),Ibe=a("p"),C6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M6r=l(),An=a("p"),E6r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),y6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),B6r=o("pretrained_model_name_or_path"),x6r=o(":"),k6r=l(),qbe=a("ul"),sF=a("li"),Gbe=a("strong"),R6r=o("vision-encoder-decoder"),S6r=o(" \u2014 "),fV=a("a"),P6r=o("TFVisionEncoderDecoderModel"),$6r=o(" (Vision Encoder decoder model)"),I6r=l(),Obe=a("p"),D6r=o("Examples:"),N6r=l(),f(MA.$$.fragment),aSe=l(),Uc=a("h2"),lF=a("a"),Xbe=a("span"),f(EA.$$.fragment),j6r=l(),Vbe=a("span"),q6r=o("TFAutoModelForSpeechSeq2Seq"),nSe=l(),kr=a("div"),f(yA.$$.fragment),G6r=l(),Jc=a("p"),O6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zbe=a("code"),X6r=o("from_pretrained()"),V6r=o("class method or the "),Wbe=a("code"),z6r=o("from_config()"),W6r=o(`class
method.`),Q6r=l(),wA=a("p"),H6r=o("This class cannot be instantiated directly using "),Qbe=a("code"),U6r=o("__init__()"),J6r=o(" (throws an error)."),Y6r=l(),yt=a("div"),f(AA.$$.fragment),K6r=l(),Hbe=a("p"),Z6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e0r=l(),Yc=a("p"),o0r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),r0r=o("not"),t0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jbe=a("code"),a0r=o("from_pretrained()"),n0r=o("to load the model weights."),s0r=l(),Ybe=a("p"),l0r=o("Examples:"),i0r=l(),f(LA.$$.fragment),d0r=l(),wo=a("div"),f(BA.$$.fragment),c0r=l(),Kbe=a("p"),f0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m0r=l(),Ln=a("p"),g0r=o("The model class to instantiate is selected based on the "),Zbe=a("code"),h0r=o("model_type"),p0r=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(":"),T0r=l(),r3e=a("ul"),iF=a("li"),t3e=a("strong"),F0r=o("speech_to_text"),C0r=o(" \u2014 "),mV=a("a"),M0r=o("TFSpeech2TextForConditionalGeneration"),E0r=o(" (Speech2Text model)"),y0r=l(),a3e=a("p"),w0r=o("Examples:"),A0r=l(),f(xA.$$.fragment),sSe=l(),Kc=a("h2"),dF=a("a"),n3e=a("span"),f(kA.$$.fragment),L0r=l(),s3e=a("span"),B0r=o("FlaxAutoModel"),lSe=l(),Rr=a("div"),f(RA.$$.fragment),x0r=l(),Zc=a("p"),k0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),l3e=a("code"),R0r=o("from_pretrained()"),S0r=o("class method or the "),i3e=a("code"),P0r=o("from_config()"),$0r=o(`class
method.`),I0r=l(),SA=a("p"),D0r=o("This class cannot be instantiated directly using "),d3e=a("code"),N0r=o("__init__()"),j0r=o(" (throws an error)."),q0r=l(),wt=a("div"),f(PA.$$.fragment),G0r=l(),c3e=a("p"),O0r=o("Instantiates one of the base model classes of the library from a configuration."),X0r=l(),ef=a("p"),V0r=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),z0r=o("not"),W0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m3e=a("code"),Q0r=o("from_pretrained()"),H0r=o("to load the model weights."),U0r=l(),g3e=a("p"),J0r=o("Examples:"),Y0r=l(),f($A.$$.fragment),K0r=l(),Ao=a("div"),f(IA.$$.fragment),Z0r=l(),h3e=a("p"),eTr=o("Instantiate one of the base model classes of the library from a pretrained model."),oTr=l(),Bn=a("p"),rTr=o("The model class to instantiate is selected based on the "),p3e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),z=a("ul"),cF=a("li"),b3e=a("strong"),cTr=o("albert"),fTr=o(" \u2014 "),gV=a("a"),mTr=o("FlaxAlbertModel"),gTr=o(" (ALBERT model)"),hTr=l(),fF=a("li"),v3e=a("strong"),pTr=o("bart"),_Tr=o(" \u2014 "),hV=a("a"),uTr=o("FlaxBartModel"),bTr=o(" (BART model)"),vTr=l(),mF=a("li"),T3e=a("strong"),TTr=o("beit"),FTr=o(" \u2014 "),pV=a("a"),CTr=o("FlaxBeitModel"),MTr=o(" (BEiT model)"),ETr=l(),gF=a("li"),F3e=a("strong"),yTr=o("bert"),wTr=o(" \u2014 "),_V=a("a"),ATr=o("FlaxBertModel"),LTr=o(" (BERT model)"),BTr=l(),hF=a("li"),C3e=a("strong"),xTr=o("big_bird"),kTr=o(" \u2014 "),uV=a("a"),RTr=o("FlaxBigBirdModel"),STr=o(" (BigBird model)"),PTr=l(),pF=a("li"),M3e=a("strong"),$Tr=o("blenderbot"),ITr=o(" \u2014 "),bV=a("a"),DTr=o("FlaxBlenderbotModel"),NTr=o(" (Blenderbot model)"),jTr=l(),_F=a("li"),E3e=a("strong"),qTr=o("blenderbot-small"),GTr=o(" \u2014 "),vV=a("a"),OTr=o("FlaxBlenderbotSmallModel"),XTr=o(" (BlenderbotSmall model)"),VTr=l(),uF=a("li"),y3e=a("strong"),zTr=o("clip"),WTr=o(" \u2014 "),TV=a("a"),QTr=o("FlaxCLIPModel"),HTr=o(" (CLIP model)"),UTr=l(),bF=a("li"),w3e=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),FV=a("a"),KTr=o("FlaxDistilBertModel"),ZTr=o(" (DistilBERT model)"),e8r=l(),vF=a("li"),A3e=a("strong"),o8r=o("electra"),r8r=o(" \u2014 "),CV=a("a"),t8r=o("FlaxElectraModel"),a8r=o(" (ELECTRA model)"),n8r=l(),TF=a("li"),L3e=a("strong"),s8r=o("gpt2"),l8r=o(" \u2014 "),MV=a("a"),i8r=o("FlaxGPT2Model"),d8r=o(" (OpenAI GPT-2 model)"),c8r=l(),FF=a("li"),B3e=a("strong"),f8r=o("gpt_neo"),m8r=o(" \u2014 "),EV=a("a"),g8r=o("FlaxGPTNeoModel"),h8r=o(" (GPT Neo model)"),p8r=l(),CF=a("li"),x3e=a("strong"),_8r=o("gptj"),u8r=o(" \u2014 "),yV=a("a"),b8r=o("FlaxGPTJModel"),v8r=o(" (GPT-J model)"),T8r=l(),MF=a("li"),k3e=a("strong"),F8r=o("marian"),C8r=o(" \u2014 "),wV=a("a"),M8r=o("FlaxMarianModel"),E8r=o(" (Marian model)"),y8r=l(),EF=a("li"),R3e=a("strong"),w8r=o("mbart"),A8r=o(" \u2014 "),AV=a("a"),L8r=o("FlaxMBartModel"),B8r=o(" (mBART model)"),x8r=l(),yF=a("li"),S3e=a("strong"),k8r=o("mt5"),R8r=o(" \u2014 "),LV=a("a"),S8r=o("FlaxMT5Model"),P8r=o(" (mT5 model)"),$8r=l(),wF=a("li"),P3e=a("strong"),I8r=o("pegasus"),D8r=o(" \u2014 "),BV=a("a"),N8r=o("FlaxPegasusModel"),j8r=o(" (Pegasus model)"),q8r=l(),AF=a("li"),$3e=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),xV=a("a"),X8r=o("FlaxRobertaModel"),V8r=o(" (RoBERTa model)"),z8r=l(),LF=a("li"),I3e=a("strong"),W8r=o("roformer"),Q8r=o(" \u2014 "),kV=a("a"),H8r=o("FlaxRoFormerModel"),U8r=o(" (RoFormer model)"),J8r=l(),BF=a("li"),D3e=a("strong"),Y8r=o("t5"),K8r=o(" \u2014 "),RV=a("a"),Z8r=o("FlaxT5Model"),eFr=o(" (T5 model)"),oFr=l(),xF=a("li"),N3e=a("strong"),rFr=o("vision-text-dual-encoder"),tFr=o(" \u2014 "),SV=a("a"),aFr=o("FlaxVisionTextDualEncoderModel"),nFr=o(" (VisionTextDualEncoder model)"),sFr=l(),kF=a("li"),j3e=a("strong"),lFr=o("vit"),iFr=o(" \u2014 "),PV=a("a"),dFr=o("FlaxViTModel"),cFr=o(" (ViT model)"),fFr=l(),RF=a("li"),q3e=a("strong"),mFr=o("wav2vec2"),gFr=o(" \u2014 "),$V=a("a"),hFr=o("FlaxWav2Vec2Model"),pFr=o(" (Wav2Vec2 model)"),_Fr=l(),SF=a("li"),G3e=a("strong"),uFr=o("xglm"),bFr=o(" \u2014 "),IV=a("a"),vFr=o("FlaxXGLMModel"),TFr=o(" (XGLM model)"),FFr=l(),PF=a("li"),O3e=a("strong"),CFr=o("xlm-roberta"),MFr=o(" \u2014 "),DV=a("a"),EFr=o("FlaxXLMRobertaModel"),yFr=o(" (XLM-RoBERTa model)"),wFr=l(),X3e=a("p"),AFr=o("Examples:"),LFr=l(),f(DA.$$.fragment),iSe=l(),of=a("h2"),$F=a("a"),V3e=a("span"),f(NA.$$.fragment),BFr=l(),z3e=a("span"),xFr=o("FlaxAutoModelForCausalLM"),dSe=l(),Sr=a("div"),f(jA.$$.fragment),kFr=l(),rf=a("p"),RFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),W3e=a("code"),SFr=o("from_pretrained()"),PFr=o("class method or the "),Q3e=a("code"),$Fr=o("from_config()"),IFr=o(`class
method.`),DFr=l(),qA=a("p"),NFr=o("This class cannot be instantiated directly using "),H3e=a("code"),jFr=o("__init__()"),qFr=o(" (throws an error)."),GFr=l(),At=a("div"),f(GA.$$.fragment),OFr=l(),U3e=a("p"),XFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VFr=l(),tf=a("p"),zFr=o(`Note:
Loading a model from its configuration file does `),J3e=a("strong"),WFr=o("not"),QFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y3e=a("code"),HFr=o("from_pretrained()"),UFr=o("to load the model weights."),JFr=l(),K3e=a("p"),YFr=o("Examples:"),KFr=l(),f(OA.$$.fragment),ZFr=l(),Lo=a("div"),f(XA.$$.fragment),eCr=l(),Z3e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rCr=l(),xn=a("p"),tCr=o("The model class to instantiate is selected based on the "),e2e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),ca=a("ul"),IF=a("li"),t2e=a("strong"),fCr=o("bart"),mCr=o(" \u2014 "),NV=a("a"),gCr=o("FlaxBartForCausalLM"),hCr=o(" (BART model)"),pCr=l(),DF=a("li"),a2e=a("strong"),_Cr=o("gpt2"),uCr=o(" \u2014 "),jV=a("a"),bCr=o("FlaxGPT2LMHeadModel"),vCr=o(" (OpenAI GPT-2 model)"),TCr=l(),NF=a("li"),n2e=a("strong"),FCr=o("gpt_neo"),CCr=o(" \u2014 "),qV=a("a"),MCr=o("FlaxGPTNeoForCausalLM"),ECr=o(" (GPT Neo model)"),yCr=l(),jF=a("li"),s2e=a("strong"),wCr=o("gptj"),ACr=o(" \u2014 "),GV=a("a"),LCr=o("FlaxGPTJForCausalLM"),BCr=o(" (GPT-J model)"),xCr=l(),qF=a("li"),l2e=a("strong"),kCr=o("xglm"),RCr=o(" \u2014 "),OV=a("a"),SCr=o("FlaxXGLMForCausalLM"),PCr=o(" (XGLM model)"),$Cr=l(),i2e=a("p"),ICr=o("Examples:"),DCr=l(),f(VA.$$.fragment),cSe=l(),af=a("h2"),GF=a("a"),d2e=a("span"),f(zA.$$.fragment),NCr=l(),c2e=a("span"),jCr=o("FlaxAutoModelForPreTraining"),fSe=l(),Pr=a("div"),f(WA.$$.fragment),qCr=l(),nf=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f2e=a("code"),OCr=o("from_pretrained()"),XCr=o("class method or the "),m2e=a("code"),VCr=o("from_config()"),zCr=o(`class
method.`),WCr=l(),QA=a("p"),QCr=o("This class cannot be instantiated directly using "),g2e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),Lt=a("div"),f(HA.$$.fragment),YCr=l(),h2e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZCr=l(),sf=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_2e=a("code"),tMr=o("from_pretrained()"),aMr=o("to load the model weights."),nMr=l(),u2e=a("p"),sMr=o("Examples:"),lMr=l(),f(UA.$$.fragment),iMr=l(),Bo=a("div"),f(JA.$$.fragment),dMr=l(),b2e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fMr=l(),kn=a("p"),mMr=o("The model class to instantiate is selected based on the "),v2e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),fe=a("ul"),OF=a("li"),C2e=a("strong"),TMr=o("albert"),FMr=o(" \u2014 "),XV=a("a"),CMr=o("FlaxAlbertForPreTraining"),MMr=o(" (ALBERT model)"),EMr=l(),XF=a("li"),M2e=a("strong"),yMr=o("bart"),wMr=o(" \u2014 "),VV=a("a"),AMr=o("FlaxBartForConditionalGeneration"),LMr=o(" (BART model)"),BMr=l(),VF=a("li"),E2e=a("strong"),xMr=o("bert"),kMr=o(" \u2014 "),zV=a("a"),RMr=o("FlaxBertForPreTraining"),SMr=o(" (BERT model)"),PMr=l(),zF=a("li"),y2e=a("strong"),$Mr=o("big_bird"),IMr=o(" \u2014 "),WV=a("a"),DMr=o("FlaxBigBirdForPreTraining"),NMr=o(" (BigBird model)"),jMr=l(),WF=a("li"),w2e=a("strong"),qMr=o("electra"),GMr=o(" \u2014 "),QV=a("a"),OMr=o("FlaxElectraForPreTraining"),XMr=o(" (ELECTRA model)"),VMr=l(),QF=a("li"),A2e=a("strong"),zMr=o("mbart"),WMr=o(" \u2014 "),HV=a("a"),QMr=o("FlaxMBartForConditionalGeneration"),HMr=o(" (mBART model)"),UMr=l(),HF=a("li"),L2e=a("strong"),JMr=o("mt5"),YMr=o(" \u2014 "),UV=a("a"),KMr=o("FlaxMT5ForConditionalGeneration"),ZMr=o(" (mT5 model)"),e4r=l(),UF=a("li"),B2e=a("strong"),o4r=o("roberta"),r4r=o(" \u2014 "),JV=a("a"),t4r=o("FlaxRobertaForMaskedLM"),a4r=o(" (RoBERTa model)"),n4r=l(),JF=a("li"),x2e=a("strong"),s4r=o("roformer"),l4r=o(" \u2014 "),YV=a("a"),i4r=o("FlaxRoFormerForMaskedLM"),d4r=o(" (RoFormer model)"),c4r=l(),YF=a("li"),k2e=a("strong"),f4r=o("t5"),m4r=o(" \u2014 "),KV=a("a"),g4r=o("FlaxT5ForConditionalGeneration"),h4r=o(" (T5 model)"),p4r=l(),KF=a("li"),R2e=a("strong"),_4r=o("wav2vec2"),u4r=o(" \u2014 "),ZV=a("a"),b4r=o("FlaxWav2Vec2ForPreTraining"),v4r=o(" (Wav2Vec2 model)"),T4r=l(),ZF=a("li"),S2e=a("strong"),F4r=o("xlm-roberta"),C4r=o(" \u2014 "),ez=a("a"),M4r=o("FlaxXLMRobertaForMaskedLM"),E4r=o(" (XLM-RoBERTa model)"),y4r=l(),P2e=a("p"),w4r=o("Examples:"),A4r=l(),f(YA.$$.fragment),mSe=l(),lf=a("h2"),eC=a("a"),$2e=a("span"),f(KA.$$.fragment),L4r=l(),I2e=a("span"),B4r=o("FlaxAutoModelForMaskedLM"),gSe=l(),$r=a("div"),f(ZA.$$.fragment),x4r=l(),df=a("p"),k4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D2e=a("code"),R4r=o("from_pretrained()"),S4r=o("class method or the "),N2e=a("code"),P4r=o("from_config()"),$4r=o(`class
method.`),I4r=l(),eL=a("p"),D4r=o("This class cannot be instantiated directly using "),j2e=a("code"),N4r=o("__init__()"),j4r=o(" (throws an error)."),q4r=l(),Bt=a("div"),f(oL.$$.fragment),G4r=l(),q2e=a("p"),O4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X4r=l(),cf=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),z4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O2e=a("code"),Q4r=o("from_pretrained()"),H4r=o("to load the model weights."),U4r=l(),X2e=a("p"),J4r=o("Examples:"),Y4r=l(),f(rL.$$.fragment),K4r=l(),xo=a("div"),f(tL.$$.fragment),Z4r=l(),V2e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oEr=l(),Rn=a("p"),rEr=o("The model class to instantiate is selected based on the "),z2e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),be=a("ul"),oC=a("li"),H2e=a("strong"),cEr=o("albert"),fEr=o(" \u2014 "),oz=a("a"),mEr=o("FlaxAlbertForMaskedLM"),gEr=o(" (ALBERT model)"),hEr=l(),rC=a("li"),U2e=a("strong"),pEr=o("bart"),_Er=o(" \u2014 "),rz=a("a"),uEr=o("FlaxBartForConditionalGeneration"),bEr=o(" (BART model)"),vEr=l(),tC=a("li"),J2e=a("strong"),TEr=o("bert"),FEr=o(" \u2014 "),tz=a("a"),CEr=o("FlaxBertForMaskedLM"),MEr=o(" (BERT model)"),EEr=l(),aC=a("li"),Y2e=a("strong"),yEr=o("big_bird"),wEr=o(" \u2014 "),az=a("a"),AEr=o("FlaxBigBirdForMaskedLM"),LEr=o(" (BigBird model)"),BEr=l(),nC=a("li"),K2e=a("strong"),xEr=o("distilbert"),kEr=o(" \u2014 "),nz=a("a"),REr=o("FlaxDistilBertForMaskedLM"),SEr=o(" (DistilBERT model)"),PEr=l(),sC=a("li"),Z2e=a("strong"),$Er=o("electra"),IEr=o(" \u2014 "),sz=a("a"),DEr=o("FlaxElectraForMaskedLM"),NEr=o(" (ELECTRA model)"),jEr=l(),lC=a("li"),eve=a("strong"),qEr=o("mbart"),GEr=o(" \u2014 "),lz=a("a"),OEr=o("FlaxMBartForConditionalGeneration"),XEr=o(" (mBART model)"),VEr=l(),iC=a("li"),ove=a("strong"),zEr=o("roberta"),WEr=o(" \u2014 "),iz=a("a"),QEr=o("FlaxRobertaForMaskedLM"),HEr=o(" (RoBERTa model)"),UEr=l(),dC=a("li"),rve=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),dz=a("a"),KEr=o("FlaxRoFormerForMaskedLM"),ZEr=o(" (RoFormer model)"),e5r=l(),cC=a("li"),tve=a("strong"),o5r=o("xlm-roberta"),r5r=o(" \u2014 "),cz=a("a"),t5r=o("FlaxXLMRobertaForMaskedLM"),a5r=o(" (XLM-RoBERTa model)"),n5r=l(),ave=a("p"),s5r=o("Examples:"),l5r=l(),f(aL.$$.fragment),hSe=l(),ff=a("h2"),fC=a("a"),nve=a("span"),f(nL.$$.fragment),i5r=l(),sve=a("span"),d5r=o("FlaxAutoModelForSeq2SeqLM"),pSe=l(),Ir=a("div"),f(sL.$$.fragment),c5r=l(),mf=a("p"),f5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lve=a("code"),m5r=o("from_pretrained()"),g5r=o("class method or the "),ive=a("code"),h5r=o("from_config()"),p5r=o(`class
method.`),_5r=l(),lL=a("p"),u5r=o("This class cannot be instantiated directly using "),dve=a("code"),b5r=o("__init__()"),v5r=o(" (throws an error)."),T5r=l(),xt=a("div"),f(iL.$$.fragment),F5r=l(),cve=a("p"),C5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M5r=l(),gf=a("p"),E5r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),y5r=o("not"),w5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=a("code"),A5r=o("from_pretrained()"),L5r=o("to load the model weights."),B5r=l(),gve=a("p"),x5r=o("Examples:"),k5r=l(),f(dL.$$.fragment),R5r=l(),ko=a("div"),f(cL.$$.fragment),S5r=l(),hve=a("p"),P5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$5r=l(),Sn=a("p"),I5r=o("The model class to instantiate is selected based on the "),pve=a("code"),D5r=o("model_type"),N5r=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),j5r=o("pretrained_model_name_or_path"),q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),G5r=o("pretrained_model_name_or_path"),O5r=o(":"),X5r=l(),Me=a("ul"),mC=a("li"),bve=a("strong"),V5r=o("bart"),z5r=o(" \u2014 "),fz=a("a"),W5r=o("FlaxBartForConditionalGeneration"),Q5r=o(" (BART model)"),H5r=l(),gC=a("li"),vve=a("strong"),U5r=o("blenderbot"),J5r=o(" \u2014 "),mz=a("a"),Y5r=o("FlaxBlenderbotForConditionalGeneration"),K5r=o(" (Blenderbot model)"),Z5r=l(),hC=a("li"),Tve=a("strong"),eyr=o("blenderbot-small"),oyr=o(" \u2014 "),gz=a("a"),ryr=o("FlaxBlenderbotSmallForConditionalGeneration"),tyr=o(" (BlenderbotSmall model)"),ayr=l(),pC=a("li"),Fve=a("strong"),nyr=o("encoder-decoder"),syr=o(" \u2014 "),hz=a("a"),lyr=o("FlaxEncoderDecoderModel"),iyr=o(" (Encoder decoder model)"),dyr=l(),_C=a("li"),Cve=a("strong"),cyr=o("marian"),fyr=o(" \u2014 "),pz=a("a"),myr=o("FlaxMarianMTModel"),gyr=o(" (Marian model)"),hyr=l(),uC=a("li"),Mve=a("strong"),pyr=o("mbart"),_yr=o(" \u2014 "),_z=a("a"),uyr=o("FlaxMBartForConditionalGeneration"),byr=o(" (mBART model)"),vyr=l(),bC=a("li"),Eve=a("strong"),Tyr=o("mt5"),Fyr=o(" \u2014 "),uz=a("a"),Cyr=o("FlaxMT5ForConditionalGeneration"),Myr=o(" (mT5 model)"),Eyr=l(),vC=a("li"),yve=a("strong"),yyr=o("pegasus"),wyr=o(" \u2014 "),bz=a("a"),Ayr=o("FlaxPegasusForConditionalGeneration"),Lyr=o(" (Pegasus model)"),Byr=l(),TC=a("li"),wve=a("strong"),xyr=o("t5"),kyr=o(" \u2014 "),vz=a("a"),Ryr=o("FlaxT5ForConditionalGeneration"),Syr=o(" (T5 model)"),Pyr=l(),Ave=a("p"),$yr=o("Examples:"),Iyr=l(),f(fL.$$.fragment),_Se=l(),hf=a("h2"),FC=a("a"),Lve=a("span"),f(mL.$$.fragment),Dyr=l(),Bve=a("span"),Nyr=o("FlaxAutoModelForSequenceClassification"),uSe=l(),Dr=a("div"),f(gL.$$.fragment),jyr=l(),pf=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xve=a("code"),Gyr=o("from_pretrained()"),Oyr=o("class method or the "),kve=a("code"),Xyr=o("from_config()"),Vyr=o(`class
method.`),zyr=l(),hL=a("p"),Wyr=o("This class cannot be instantiated directly using "),Rve=a("code"),Qyr=o("__init__()"),Hyr=o(" (throws an error)."),Uyr=l(),kt=a("div"),f(pL.$$.fragment),Jyr=l(),Sve=a("p"),Yyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kyr=l(),_f=a("p"),Zyr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),ewr=o("not"),owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=a("code"),rwr=o("from_pretrained()"),twr=o("to load the model weights."),awr=l(),Ive=a("p"),nwr=o("Examples:"),swr=l(),f(_L.$$.fragment),lwr=l(),Ro=a("div"),f(uL.$$.fragment),iwr=l(),Dve=a("p"),dwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cwr=l(),Pn=a("p"),fwr=o("The model class to instantiate is selected based on the "),Nve=a("code"),mwr=o("model_type"),gwr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),_wr=o("pretrained_model_name_or_path"),uwr=o(":"),bwr=l(),ve=a("ul"),CC=a("li"),Gve=a("strong"),vwr=o("albert"),Twr=o(" \u2014 "),Tz=a("a"),Fwr=o("FlaxAlbertForSequenceClassification"),Cwr=o(" (ALBERT model)"),Mwr=l(),MC=a("li"),Ove=a("strong"),Ewr=o("bart"),ywr=o(" \u2014 "),Fz=a("a"),wwr=o("FlaxBartForSequenceClassification"),Awr=o(" (BART model)"),Lwr=l(),EC=a("li"),Xve=a("strong"),Bwr=o("bert"),xwr=o(" \u2014 "),Cz=a("a"),kwr=o("FlaxBertForSequenceClassification"),Rwr=o(" (BERT model)"),Swr=l(),yC=a("li"),Vve=a("strong"),Pwr=o("big_bird"),$wr=o(" \u2014 "),Mz=a("a"),Iwr=o("FlaxBigBirdForSequenceClassification"),Dwr=o(" (BigBird model)"),Nwr=l(),wC=a("li"),zve=a("strong"),jwr=o("distilbert"),qwr=o(" \u2014 "),Ez=a("a"),Gwr=o("FlaxDistilBertForSequenceClassification"),Owr=o(" (DistilBERT model)"),Xwr=l(),AC=a("li"),Wve=a("strong"),Vwr=o("electra"),zwr=o(" \u2014 "),yz=a("a"),Wwr=o("FlaxElectraForSequenceClassification"),Qwr=o(" (ELECTRA model)"),Hwr=l(),LC=a("li"),Qve=a("strong"),Uwr=o("mbart"),Jwr=o(" \u2014 "),wz=a("a"),Ywr=o("FlaxMBartForSequenceClassification"),Kwr=o(" (mBART model)"),Zwr=l(),BC=a("li"),Hve=a("strong"),eAr=o("roberta"),oAr=o(" \u2014 "),Az=a("a"),rAr=o("FlaxRobertaForSequenceClassification"),tAr=o(" (RoBERTa model)"),aAr=l(),xC=a("li"),Uve=a("strong"),nAr=o("roformer"),sAr=o(" \u2014 "),Lz=a("a"),lAr=o("FlaxRoFormerForSequenceClassification"),iAr=o(" (RoFormer model)"),dAr=l(),kC=a("li"),Jve=a("strong"),cAr=o("xlm-roberta"),fAr=o(" \u2014 "),Bz=a("a"),mAr=o("FlaxXLMRobertaForSequenceClassification"),gAr=o(" (XLM-RoBERTa model)"),hAr=l(),Yve=a("p"),pAr=o("Examples:"),_Ar=l(),f(bL.$$.fragment),bSe=l(),uf=a("h2"),RC=a("a"),Kve=a("span"),f(vL.$$.fragment),uAr=l(),Zve=a("span"),bAr=o("FlaxAutoModelForQuestionAnswering"),vSe=l(),Nr=a("div"),f(TL.$$.fragment),vAr=l(),bf=a("p"),TAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e6e=a("code"),FAr=o("from_pretrained()"),CAr=o("class method or the "),o6e=a("code"),MAr=o("from_config()"),EAr=o(`class
method.`),yAr=l(),FL=a("p"),wAr=o("This class cannot be instantiated directly using "),r6e=a("code"),AAr=o("__init__()"),LAr=o(" (throws an error)."),BAr=l(),Rt=a("div"),f(CL.$$.fragment),xAr=l(),t6e=a("p"),kAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RAr=l(),vf=a("p"),SAr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),PAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=a("code"),IAr=o("from_pretrained()"),DAr=o("to load the model weights."),NAr=l(),s6e=a("p"),jAr=o("Examples:"),qAr=l(),f(ML.$$.fragment),GAr=l(),So=a("div"),f(EL.$$.fragment),OAr=l(),l6e=a("p"),XAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VAr=l(),$n=a("p"),zAr=o("The model class to instantiate is selected based on the "),i6e=a("code"),WAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(":"),KAr=l(),Te=a("ul"),SC=a("li"),f6e=a("strong"),ZAr=o("albert"),eLr=o(" \u2014 "),xz=a("a"),oLr=o("FlaxAlbertForQuestionAnswering"),rLr=o(" (ALBERT model)"),tLr=l(),PC=a("li"),m6e=a("strong"),aLr=o("bart"),nLr=o(" \u2014 "),kz=a("a"),sLr=o("FlaxBartForQuestionAnswering"),lLr=o(" (BART model)"),iLr=l(),$C=a("li"),g6e=a("strong"),dLr=o("bert"),cLr=o(" \u2014 "),Rz=a("a"),fLr=o("FlaxBertForQuestionAnswering"),mLr=o(" (BERT model)"),gLr=l(),IC=a("li"),h6e=a("strong"),hLr=o("big_bird"),pLr=o(" \u2014 "),Sz=a("a"),_Lr=o("FlaxBigBirdForQuestionAnswering"),uLr=o(" (BigBird model)"),bLr=l(),DC=a("li"),p6e=a("strong"),vLr=o("distilbert"),TLr=o(" \u2014 "),Pz=a("a"),FLr=o("FlaxDistilBertForQuestionAnswering"),CLr=o(" (DistilBERT model)"),MLr=l(),NC=a("li"),_6e=a("strong"),ELr=o("electra"),yLr=o(" \u2014 "),$z=a("a"),wLr=o("FlaxElectraForQuestionAnswering"),ALr=o(" (ELECTRA model)"),LLr=l(),jC=a("li"),u6e=a("strong"),BLr=o("mbart"),xLr=o(" \u2014 "),Iz=a("a"),kLr=o("FlaxMBartForQuestionAnswering"),RLr=o(" (mBART model)"),SLr=l(),qC=a("li"),b6e=a("strong"),PLr=o("roberta"),$Lr=o(" \u2014 "),Dz=a("a"),ILr=o("FlaxRobertaForQuestionAnswering"),DLr=o(" (RoBERTa model)"),NLr=l(),GC=a("li"),v6e=a("strong"),jLr=o("roformer"),qLr=o(" \u2014 "),Nz=a("a"),GLr=o("FlaxRoFormerForQuestionAnswering"),OLr=o(" (RoFormer model)"),XLr=l(),OC=a("li"),T6e=a("strong"),VLr=o("xlm-roberta"),zLr=o(" \u2014 "),jz=a("a"),WLr=o("FlaxXLMRobertaForQuestionAnswering"),QLr=o(" (XLM-RoBERTa model)"),HLr=l(),F6e=a("p"),ULr=o("Examples:"),JLr=l(),f(yL.$$.fragment),TSe=l(),Tf=a("h2"),XC=a("a"),C6e=a("span"),f(wL.$$.fragment),YLr=l(),M6e=a("span"),KLr=o("FlaxAutoModelForTokenClassification"),FSe=l(),jr=a("div"),f(AL.$$.fragment),ZLr=l(),Ff=a("p"),e7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E6e=a("code"),o7r=o("from_pretrained()"),r7r=o("class method or the "),y6e=a("code"),t7r=o("from_config()"),a7r=o(`class
method.`),n7r=l(),LL=a("p"),s7r=o("This class cannot be instantiated directly using "),w6e=a("code"),l7r=o("__init__()"),i7r=o(" (throws an error)."),d7r=l(),St=a("div"),f(BL.$$.fragment),c7r=l(),A6e=a("p"),f7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m7r=l(),Cf=a("p"),g7r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),h7r=o("not"),p7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=a("code"),_7r=o("from_pretrained()"),u7r=o("to load the model weights."),b7r=l(),x6e=a("p"),v7r=o("Examples:"),T7r=l(),f(xL.$$.fragment),F7r=l(),Po=a("div"),f(kL.$$.fragment),C7r=l(),k6e=a("p"),M7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E7r=l(),In=a("p"),y7r=o("The model class to instantiate is selected based on the "),R6e=a("code"),w7r=o("model_type"),A7r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),L7r=o("pretrained_model_name_or_path"),B7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),x7r=o("pretrained_model_name_or_path"),k7r=o(":"),R7r=l(),Se=a("ul"),VC=a("li"),$6e=a("strong"),S7r=o("albert"),P7r=o(" \u2014 "),qz=a("a"),$7r=o("FlaxAlbertForTokenClassification"),I7r=o(" (ALBERT model)"),D7r=l(),zC=a("li"),I6e=a("strong"),N7r=o("bert"),j7r=o(" \u2014 "),Gz=a("a"),q7r=o("FlaxBertForTokenClassification"),G7r=o(" (BERT model)"),O7r=l(),WC=a("li"),D6e=a("strong"),X7r=o("big_bird"),V7r=o(" \u2014 "),Oz=a("a"),z7r=o("FlaxBigBirdForTokenClassification"),W7r=o(" (BigBird model)"),Q7r=l(),QC=a("li"),N6e=a("strong"),H7r=o("distilbert"),U7r=o(" \u2014 "),Xz=a("a"),J7r=o("FlaxDistilBertForTokenClassification"),Y7r=o(" (DistilBERT model)"),K7r=l(),HC=a("li"),j6e=a("strong"),Z7r=o("electra"),e9r=o(" \u2014 "),Vz=a("a"),o9r=o("FlaxElectraForTokenClassification"),r9r=o(" (ELECTRA model)"),t9r=l(),UC=a("li"),q6e=a("strong"),a9r=o("roberta"),n9r=o(" \u2014 "),zz=a("a"),s9r=o("FlaxRobertaForTokenClassification"),l9r=o(" (RoBERTa model)"),i9r=l(),JC=a("li"),G6e=a("strong"),d9r=o("roformer"),c9r=o(" \u2014 "),Wz=a("a"),f9r=o("FlaxRoFormerForTokenClassification"),m9r=o(" (RoFormer model)"),g9r=l(),YC=a("li"),O6e=a("strong"),h9r=o("xlm-roberta"),p9r=o(" \u2014 "),Qz=a("a"),_9r=o("FlaxXLMRobertaForTokenClassification"),u9r=o(" (XLM-RoBERTa model)"),b9r=l(),X6e=a("p"),v9r=o("Examples:"),T9r=l(),f(RL.$$.fragment),CSe=l(),Mf=a("h2"),KC=a("a"),V6e=a("span"),f(SL.$$.fragment),F9r=l(),z6e=a("span"),C9r=o("FlaxAutoModelForMultipleChoice"),MSe=l(),qr=a("div"),f(PL.$$.fragment),M9r=l(),Ef=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),W6e=a("code"),y9r=o("from_pretrained()"),w9r=o("class method or the "),Q6e=a("code"),A9r=o("from_config()"),L9r=o(`class
method.`),B9r=l(),$L=a("p"),x9r=o("This class cannot be instantiated directly using "),H6e=a("code"),k9r=o("__init__()"),R9r=o(" (throws an error)."),S9r=l(),Pt=a("div"),f(IL.$$.fragment),P9r=l(),U6e=a("p"),$9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I9r=l(),yf=a("p"),D9r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),N9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=a("code"),q9r=o("from_pretrained()"),G9r=o("to load the model weights."),O9r=l(),K6e=a("p"),X9r=o("Examples:"),V9r=l(),f(DL.$$.fragment),z9r=l(),$o=a("div"),f(NL.$$.fragment),W9r=l(),Z6e=a("p"),Q9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H9r=l(),Dn=a("p"),U9r=o("The model class to instantiate is selected based on the "),e0e=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),Pe=a("ul"),ZC=a("li"),t0e=a("strong"),tBr=o("albert"),aBr=o(" \u2014 "),Hz=a("a"),nBr=o("FlaxAlbertForMultipleChoice"),sBr=o(" (ALBERT model)"),lBr=l(),eM=a("li"),a0e=a("strong"),iBr=o("bert"),dBr=o(" \u2014 "),Uz=a("a"),cBr=o("FlaxBertForMultipleChoice"),fBr=o(" (BERT model)"),mBr=l(),oM=a("li"),n0e=a("strong"),gBr=o("big_bird"),hBr=o(" \u2014 "),Jz=a("a"),pBr=o("FlaxBigBirdForMultipleChoice"),_Br=o(" (BigBird model)"),uBr=l(),rM=a("li"),s0e=a("strong"),bBr=o("distilbert"),vBr=o(" \u2014 "),Yz=a("a"),TBr=o("FlaxDistilBertForMultipleChoice"),FBr=o(" (DistilBERT model)"),CBr=l(),tM=a("li"),l0e=a("strong"),MBr=o("electra"),EBr=o(" \u2014 "),Kz=a("a"),yBr=o("FlaxElectraForMultipleChoice"),wBr=o(" (ELECTRA model)"),ABr=l(),aM=a("li"),i0e=a("strong"),LBr=o("roberta"),BBr=o(" \u2014 "),Zz=a("a"),xBr=o("FlaxRobertaForMultipleChoice"),kBr=o(" (RoBERTa model)"),RBr=l(),nM=a("li"),d0e=a("strong"),SBr=o("roformer"),PBr=o(" \u2014 "),eW=a("a"),$Br=o("FlaxRoFormerForMultipleChoice"),IBr=o(" (RoFormer model)"),DBr=l(),sM=a("li"),c0e=a("strong"),NBr=o("xlm-roberta"),jBr=o(" \u2014 "),oW=a("a"),qBr=o("FlaxXLMRobertaForMultipleChoice"),GBr=o(" (XLM-RoBERTa model)"),OBr=l(),f0e=a("p"),XBr=o("Examples:"),VBr=l(),f(jL.$$.fragment),ESe=l(),wf=a("h2"),lM=a("a"),m0e=a("span"),f(qL.$$.fragment),zBr=l(),g0e=a("span"),WBr=o("FlaxAutoModelForNextSentencePrediction"),ySe=l(),Gr=a("div"),f(GL.$$.fragment),QBr=l(),Af=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),h0e=a("code"),UBr=o("from_pretrained()"),JBr=o("class method or the "),p0e=a("code"),YBr=o("from_config()"),KBr=o(`class
method.`),ZBr=l(),OL=a("p"),exr=o("This class cannot be instantiated directly using "),_0e=a("code"),oxr=o("__init__()"),rxr=o(" (throws an error)."),txr=l(),$t=a("div"),f(XL.$$.fragment),axr=l(),u0e=a("p"),nxr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sxr=l(),Lf=a("p"),lxr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),ixr=o("not"),dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v0e=a("code"),cxr=o("from_pretrained()"),fxr=o("to load the model weights."),mxr=l(),T0e=a("p"),gxr=o("Examples:"),hxr=l(),f(VL.$$.fragment),pxr=l(),Io=a("div"),f(zL.$$.fragment),_xr=l(),F0e=a("p"),uxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bxr=l(),Nn=a("p"),vxr=o("The model class to instantiate is selected based on the "),C0e=a("code"),Txr=o("model_type"),Fxr=o(` property of the config object (either
passed as an argument or loaded from `),M0e=a("code"),Cxr=o("pretrained_model_name_or_path"),Mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=a("code"),Exr=o("pretrained_model_name_or_path"),yxr=o(":"),wxr=l(),y0e=a("ul"),iM=a("li"),w0e=a("strong"),Axr=o("bert"),Lxr=o(" \u2014 "),rW=a("a"),Bxr=o("FlaxBertForNextSentencePrediction"),xxr=o(" (BERT model)"),kxr=l(),A0e=a("p"),Rxr=o("Examples:"),Sxr=l(),f(WL.$$.fragment),wSe=l(),Bf=a("h2"),dM=a("a"),L0e=a("span"),f(QL.$$.fragment),Pxr=l(),B0e=a("span"),$xr=o("FlaxAutoModelForImageClassification"),ASe=l(),Or=a("div"),f(HL.$$.fragment),Ixr=l(),xf=a("p"),Dxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),x0e=a("code"),Nxr=o("from_pretrained()"),jxr=o("class method or the "),k0e=a("code"),qxr=o("from_config()"),Gxr=o(`class
method.`),Oxr=l(),UL=a("p"),Xxr=o("This class cannot be instantiated directly using "),R0e=a("code"),Vxr=o("__init__()"),zxr=o(" (throws an error)."),Wxr=l(),It=a("div"),f(JL.$$.fragment),Qxr=l(),S0e=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Uxr=l(),kf=a("p"),Jxr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),Yxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$0e=a("code"),Zxr=o("from_pretrained()"),ekr=o("to load the model weights."),okr=l(),I0e=a("p"),rkr=o("Examples:"),tkr=l(),f(YL.$$.fragment),akr=l(),Do=a("div"),f(KL.$$.fragment),nkr=l(),D0e=a("p"),skr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lkr=l(),jn=a("p"),ikr=o("The model class to instantiate is selected based on the "),N0e=a("code"),dkr=o("model_type"),ckr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),gkr=o("pretrained_model_name_or_path"),hkr=o(":"),pkr=l(),ZL=a("ul"),cM=a("li"),G0e=a("strong"),_kr=o("beit"),ukr=o(" \u2014 "),tW=a("a"),bkr=o("FlaxBeitForImageClassification"),vkr=o(" (BEiT model)"),Tkr=l(),fM=a("li"),O0e=a("strong"),Fkr=o("vit"),Ckr=o(" \u2014 "),aW=a("a"),Mkr=o("FlaxViTForImageClassification"),Ekr=o(" (ViT model)"),ykr=l(),X0e=a("p"),wkr=o("Examples:"),Akr=l(),f(e7.$$.fragment),LSe=l(),Rf=a("h2"),mM=a("a"),V0e=a("span"),f(o7.$$.fragment),Lkr=l(),z0e=a("span"),Bkr=o("FlaxAutoModelForVision2Seq"),BSe=l(),Xr=a("div"),f(r7.$$.fragment),xkr=l(),Sf=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),W0e=a("code"),Rkr=o("from_pretrained()"),Skr=o("class method or the "),Q0e=a("code"),Pkr=o("from_config()"),$kr=o(`class
method.`),Ikr=l(),t7=a("p"),Dkr=o("This class cannot be instantiated directly using "),H0e=a("code"),Nkr=o("__init__()"),jkr=o(" (throws an error)."),qkr=l(),Dt=a("div"),f(a7.$$.fragment),Gkr=l(),U0e=a("p"),Okr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xkr=l(),Pf=a("p"),Vkr=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y0e=a("code"),Qkr=o("from_pretrained()"),Hkr=o("to load the model weights."),Ukr=l(),K0e=a("p"),Jkr=o("Examples:"),Ykr=l(),f(n7.$$.fragment),Kkr=l(),No=a("div"),f(s7.$$.fragment),Zkr=l(),Z0e=a("p"),eRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oRr=l(),qn=a("p"),rRr=o("The model class to instantiate is selected based on the "),eTe=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),tTe=a("ul"),gM=a("li"),aTe=a("strong"),cRr=o("vision-encoder-decoder"),fRr=o(" \u2014 "),nW=a("a"),mRr=o("FlaxVisionEncoderDecoderModel"),gRr=o(" (Vision Encoder decoder model)"),hRr=l(),nTe=a("p"),pRr=o("Examples:"),_Rr=l(),f(l7.$$.fragment),this.h()},l(c){const u=kCt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var i7=s(de);Ee=n(i7,"A",{id:!0,class:!0,href:!0});var sTe=s(Ee);lo=n(sTe,"SPAN",{});var lTe=s(lo);m(me.$$.fragment,lTe),lTe.forEach(t),sTe.forEach(t),Ce=i(i7),Vo=n(i7,"SPAN",{});var bRr=s(Vo);Ii=r(bRr,"Auto Classes"),bRr.forEach(t),i7.forEach(t),Df=i(c),fa=n(c,"P",{});var kSe=s(fa);Di=r(kSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(kSe,"CODE",{});var vRr=s(Ni);g4=r(vRr,"from_pretrained()"),vRr.forEach(t),Nf=r(kSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kSe.forEach(t),Be=i(c),co=n(c,"P",{});var hM=s(co);ji=r(hM,"Instantiating one of "),Gn=n(hM,"A",{href:!0});var TRr=s(Gn);h4=r(TRr,"AutoConfig"),TRr.forEach(t),On=r(hM,", "),Xn=n(hM,"A",{href:!0});var FRr=s(Xn);p4=r(FRr,"AutoModel"),FRr.forEach(t),qi=r(hM,`, and
`),Vn=n(hM,"A",{href:!0});var CRr=s(Vn);_4=r(CRr,"AutoTokenizer"),CRr.forEach(t),Gi=r(hM," will directly create a class of the relevant architecture. For instance"),hM.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var RSe=s(_e);n9=r(RSe,"will create a model that is an instance of "),Oi=n(RSe,"A",{href:!0});var MRr=s(Oi);s9=r(MRr,"BertModel"),MRr.forEach(t),l9=r(RSe,"."),RSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var SSe=s(Ga);i9=r(SSe,"There is one class of "),qf=n(SSe,"CODE",{});var ERr=s(qf);d9=r(ERr,"AutoModel"),ERr.forEach(t),O$e=r(SSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SSe.forEach(t),Bke=i(c),Xi=n(c,"H2",{class:!0});var PSe=s(Xi);Gf=n(PSe,"A",{id:!0,class:!0,href:!0});var yRr=s(Gf);ZQ=n(yRr,"SPAN",{});var wRr=s(ZQ);m(u4.$$.fragment,wRr),wRr.forEach(t),yRr.forEach(t),X$e=i(PSe),eH=n(PSe,"SPAN",{});var ARr=s(eH);V$e=r(ARr,"Extending the Auto Classes"),ARr.forEach(t),PSe.forEach(t),xke=i(c),zn=n(c,"P",{});var sW=s(zn);z$e=r(sW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=n(sW,"CODE",{});var LRr=s(oH);W$e=r(LRr,"NewModel"),LRr.forEach(t),Q$e=r(sW,", make sure you have a "),rH=n(sW,"CODE",{});var BRr=s(rH);H$e=r(BRr,"NewModelConfig"),BRr.forEach(t),U$e=r(sW,` then you can add those to the auto
classes like this:`),sW.forEach(t),kke=i(c),m(b4.$$.fragment,c),Rke=i(c),c9=n(c,"P",{});var xRr=s(c9);J$e=r(xRr,"You will then be able to use the auto classes like you would usually do!"),xRr.forEach(t),Ske=i(c),m(Of.$$.fragment,c),Pke=i(c),Vi=n(c,"H2",{class:!0});var $Se=s(Vi);Xf=n($Se,"A",{id:!0,class:!0,href:!0});var kRr=s(Xf);tH=n(kRr,"SPAN",{});var RRr=s(tH);m(v4.$$.fragment,RRr),RRr.forEach(t),kRr.forEach(t),Y$e=i($Se),aH=n($Se,"SPAN",{});var SRr=s(aH);K$e=r(SRr,"AutoConfig"),SRr.forEach(t),$Se.forEach(t),$ke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(T4.$$.fragment,Os),Z$e=i(Os),F4=n(Os,"P",{});var ISe=s(F4);eIe=r(ISe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f9=n(ISe,"A",{href:!0});var PRr=s(f9);oIe=r(PRr,"from_pretrained()"),PRr.forEach(t),rIe=r(ISe," class method."),ISe.forEach(t),tIe=i(Os),C4=n(Os,"P",{});var DSe=s(C4);aIe=r(DSe,"This class cannot be instantiated directly using "),nH=n(DSe,"CODE",{});var $Rr=s(nH);nIe=r($Rr,"__init__()"),$Rr.forEach(t),sIe=r(DSe," (throws an error)."),DSe.forEach(t),lIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(M4.$$.fragment,ga),iIe=i(ga),sH=n(ga,"P",{});var IRr=s(sH);dIe=r(IRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IRr.forEach(t),cIe=i(ga),zi=n(ga,"P",{});var lW=s(zi);fIe=r(lW,"The configuration class to instantiate is selected based on the "),lH=n(lW,"CODE",{});var DRr=s(lH);mIe=r(DRr,"model_type"),DRr.forEach(t),gIe=r(lW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=n(lW,"CODE",{});var NRr=s(iH);hIe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),pIe=r(lW,":"),lW.forEach(t),_Ie=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var iTe=s(Vf);dH=n(iTe,"STRONG",{});var jRr=s(dH);uIe=r(jRr,"albert"),jRr.forEach(t),bIe=r(iTe," \u2014 "),m9=n(iTe,"A",{href:!0});var qRr=s(m9);vIe=r(qRr,"AlbertConfig"),qRr.forEach(t),TIe=r(iTe," (ALBERT model)"),iTe.forEach(t),FIe=i(T),zf=n(T,"LI",{});var dTe=s(zf);cH=n(dTe,"STRONG",{});var GRr=s(cH);CIe=r(GRr,"bart"),GRr.forEach(t),MIe=r(dTe," \u2014 "),g9=n(dTe,"A",{href:!0});var ORr=s(g9);EIe=r(ORr,"BartConfig"),ORr.forEach(t),yIe=r(dTe," (BART model)"),dTe.forEach(t),wIe=i(T),Wf=n(T,"LI",{});var cTe=s(Wf);fH=n(cTe,"STRONG",{});var XRr=s(fH);AIe=r(XRr,"beit"),XRr.forEach(t),LIe=r(cTe," \u2014 "),h9=n(cTe,"A",{href:!0});var VRr=s(h9);BIe=r(VRr,"BeitConfig"),VRr.forEach(t),xIe=r(cTe," (BEiT model)"),cTe.forEach(t),kIe=i(T),Qf=n(T,"LI",{});var fTe=s(Qf);mH=n(fTe,"STRONG",{});var zRr=s(mH);RIe=r(zRr,"bert"),zRr.forEach(t),SIe=r(fTe," \u2014 "),p9=n(fTe,"A",{href:!0});var WRr=s(p9);PIe=r(WRr,"BertConfig"),WRr.forEach(t),$Ie=r(fTe," (BERT model)"),fTe.forEach(t),IIe=i(T),Hf=n(T,"LI",{});var mTe=s(Hf);gH=n(mTe,"STRONG",{});var QRr=s(gH);DIe=r(QRr,"bert-generation"),QRr.forEach(t),NIe=r(mTe," \u2014 "),_9=n(mTe,"A",{href:!0});var HRr=s(_9);jIe=r(HRr,"BertGenerationConfig"),HRr.forEach(t),qIe=r(mTe," (Bert Generation model)"),mTe.forEach(t),GIe=i(T),Uf=n(T,"LI",{});var gTe=s(Uf);hH=n(gTe,"STRONG",{});var URr=s(hH);OIe=r(URr,"big_bird"),URr.forEach(t),XIe=r(gTe," \u2014 "),u9=n(gTe,"A",{href:!0});var JRr=s(u9);VIe=r(JRr,"BigBirdConfig"),JRr.forEach(t),zIe=r(gTe," (BigBird model)"),gTe.forEach(t),WIe=i(T),Jf=n(T,"LI",{});var hTe=s(Jf);pH=n(hTe,"STRONG",{});var YRr=s(pH);QIe=r(YRr,"bigbird_pegasus"),YRr.forEach(t),HIe=r(hTe," \u2014 "),b9=n(hTe,"A",{href:!0});var KRr=s(b9);UIe=r(KRr,"BigBirdPegasusConfig"),KRr.forEach(t),JIe=r(hTe," (BigBirdPegasus model)"),hTe.forEach(t),YIe=i(T),Yf=n(T,"LI",{});var pTe=s(Yf);_H=n(pTe,"STRONG",{});var ZRr=s(_H);KIe=r(ZRr,"blenderbot"),ZRr.forEach(t),ZIe=r(pTe," \u2014 "),v9=n(pTe,"A",{href:!0});var eSr=s(v9);eDe=r(eSr,"BlenderbotConfig"),eSr.forEach(t),oDe=r(pTe," (Blenderbot model)"),pTe.forEach(t),rDe=i(T),Kf=n(T,"LI",{});var _Te=s(Kf);uH=n(_Te,"STRONG",{});var oSr=s(uH);tDe=r(oSr,"blenderbot-small"),oSr.forEach(t),aDe=r(_Te," \u2014 "),T9=n(_Te,"A",{href:!0});var rSr=s(T9);nDe=r(rSr,"BlenderbotSmallConfig"),rSr.forEach(t),sDe=r(_Te," (BlenderbotSmall model)"),_Te.forEach(t),lDe=i(T),Zf=n(T,"LI",{});var uTe=s(Zf);bH=n(uTe,"STRONG",{});var tSr=s(bH);iDe=r(tSr,"camembert"),tSr.forEach(t),dDe=r(uTe," \u2014 "),F9=n(uTe,"A",{href:!0});var aSr=s(F9);cDe=r(aSr,"CamembertConfig"),aSr.forEach(t),fDe=r(uTe," (CamemBERT model)"),uTe.forEach(t),mDe=i(T),em=n(T,"LI",{});var bTe=s(em);vH=n(bTe,"STRONG",{});var nSr=s(vH);gDe=r(nSr,"canine"),nSr.forEach(t),hDe=r(bTe," \u2014 "),C9=n(bTe,"A",{href:!0});var sSr=s(C9);pDe=r(sSr,"CanineConfig"),sSr.forEach(t),_De=r(bTe," (Canine model)"),bTe.forEach(t),uDe=i(T),om=n(T,"LI",{});var vTe=s(om);TH=n(vTe,"STRONG",{});var lSr=s(TH);bDe=r(lSr,"clip"),lSr.forEach(t),vDe=r(vTe," \u2014 "),M9=n(vTe,"A",{href:!0});var iSr=s(M9);TDe=r(iSr,"CLIPConfig"),iSr.forEach(t),FDe=r(vTe," (CLIP model)"),vTe.forEach(t),CDe=i(T),rm=n(T,"LI",{});var TTe=s(rm);FH=n(TTe,"STRONG",{});var dSr=s(FH);MDe=r(dSr,"convbert"),dSr.forEach(t),EDe=r(TTe," \u2014 "),E9=n(TTe,"A",{href:!0});var cSr=s(E9);yDe=r(cSr,"ConvBertConfig"),cSr.forEach(t),wDe=r(TTe," (ConvBERT model)"),TTe.forEach(t),ADe=i(T),tm=n(T,"LI",{});var FTe=s(tm);CH=n(FTe,"STRONG",{});var fSr=s(CH);LDe=r(fSr,"convnext"),fSr.forEach(t),BDe=r(FTe," \u2014 "),y9=n(FTe,"A",{href:!0});var mSr=s(y9);xDe=r(mSr,"ConvNextConfig"),mSr.forEach(t),kDe=r(FTe," (ConvNext model)"),FTe.forEach(t),RDe=i(T),am=n(T,"LI",{});var CTe=s(am);MH=n(CTe,"STRONG",{});var gSr=s(MH);SDe=r(gSr,"ctrl"),gSr.forEach(t),PDe=r(CTe," \u2014 "),w9=n(CTe,"A",{href:!0});var hSr=s(w9);$De=r(hSr,"CTRLConfig"),hSr.forEach(t),IDe=r(CTe," (CTRL model)"),CTe.forEach(t),DDe=i(T),nm=n(T,"LI",{});var MTe=s(nm);EH=n(MTe,"STRONG",{});var pSr=s(EH);NDe=r(pSr,"data2vec-audio"),pSr.forEach(t),jDe=r(MTe," \u2014 "),A9=n(MTe,"A",{href:!0});var _Sr=s(A9);qDe=r(_Sr,"Data2VecAudioConfig"),_Sr.forEach(t),GDe=r(MTe," (Data2VecAudio model)"),MTe.forEach(t),ODe=i(T),sm=n(T,"LI",{});var ETe=s(sm);yH=n(ETe,"STRONG",{});var uSr=s(yH);XDe=r(uSr,"data2vec-text"),uSr.forEach(t),VDe=r(ETe," \u2014 "),L9=n(ETe,"A",{href:!0});var bSr=s(L9);zDe=r(bSr,"Data2VecTextConfig"),bSr.forEach(t),WDe=r(ETe," (Data2VecText model)"),ETe.forEach(t),QDe=i(T),lm=n(T,"LI",{});var yTe=s(lm);wH=n(yTe,"STRONG",{});var vSr=s(wH);HDe=r(vSr,"deberta"),vSr.forEach(t),UDe=r(yTe," \u2014 "),B9=n(yTe,"A",{href:!0});var TSr=s(B9);JDe=r(TSr,"DebertaConfig"),TSr.forEach(t),YDe=r(yTe," (DeBERTa model)"),yTe.forEach(t),KDe=i(T),im=n(T,"LI",{});var wTe=s(im);AH=n(wTe,"STRONG",{});var FSr=s(AH);ZDe=r(FSr,"deberta-v2"),FSr.forEach(t),eNe=r(wTe," \u2014 "),x9=n(wTe,"A",{href:!0});var CSr=s(x9);oNe=r(CSr,"DebertaV2Config"),CSr.forEach(t),rNe=r(wTe," (DeBERTa-v2 model)"),wTe.forEach(t),tNe=i(T),dm=n(T,"LI",{});var ATe=s(dm);LH=n(ATe,"STRONG",{});var MSr=s(LH);aNe=r(MSr,"decision_transformer"),MSr.forEach(t),nNe=r(ATe," \u2014 "),k9=n(ATe,"A",{href:!0});var ESr=s(k9);sNe=r(ESr,"DecisionTransformerConfig"),ESr.forEach(t),lNe=r(ATe," (Decision Transformer model)"),ATe.forEach(t),iNe=i(T),cm=n(T,"LI",{});var LTe=s(cm);BH=n(LTe,"STRONG",{});var ySr=s(BH);dNe=r(ySr,"deit"),ySr.forEach(t),cNe=r(LTe," \u2014 "),R9=n(LTe,"A",{href:!0});var wSr=s(R9);fNe=r(wSr,"DeiTConfig"),wSr.forEach(t),mNe=r(LTe," (DeiT model)"),LTe.forEach(t),gNe=i(T),fm=n(T,"LI",{});var BTe=s(fm);xH=n(BTe,"STRONG",{});var ASr=s(xH);hNe=r(ASr,"detr"),ASr.forEach(t),pNe=r(BTe," \u2014 "),S9=n(BTe,"A",{href:!0});var LSr=s(S9);_Ne=r(LSr,"DetrConfig"),LSr.forEach(t),uNe=r(BTe," (DETR model)"),BTe.forEach(t),bNe=i(T),mm=n(T,"LI",{});var xTe=s(mm);kH=n(xTe,"STRONG",{});var BSr=s(kH);vNe=r(BSr,"distilbert"),BSr.forEach(t),TNe=r(xTe," \u2014 "),P9=n(xTe,"A",{href:!0});var xSr=s(P9);FNe=r(xSr,"DistilBertConfig"),xSr.forEach(t),CNe=r(xTe," (DistilBERT model)"),xTe.forEach(t),MNe=i(T),gm=n(T,"LI",{});var kTe=s(gm);RH=n(kTe,"STRONG",{});var kSr=s(RH);ENe=r(kSr,"dpr"),kSr.forEach(t),yNe=r(kTe," \u2014 "),$9=n(kTe,"A",{href:!0});var RSr=s($9);wNe=r(RSr,"DPRConfig"),RSr.forEach(t),ANe=r(kTe," (DPR model)"),kTe.forEach(t),LNe=i(T),hm=n(T,"LI",{});var RTe=s(hm);SH=n(RTe,"STRONG",{});var SSr=s(SH);BNe=r(SSr,"dpt"),SSr.forEach(t),xNe=r(RTe," \u2014 "),I9=n(RTe,"A",{href:!0});var PSr=s(I9);kNe=r(PSr,"DPTConfig"),PSr.forEach(t),RNe=r(RTe," (DPT model)"),RTe.forEach(t),SNe=i(T),pm=n(T,"LI",{});var STe=s(pm);PH=n(STe,"STRONG",{});var $Sr=s(PH);PNe=r($Sr,"electra"),$Sr.forEach(t),$Ne=r(STe," \u2014 "),D9=n(STe,"A",{href:!0});var ISr=s(D9);INe=r(ISr,"ElectraConfig"),ISr.forEach(t),DNe=r(STe," (ELECTRA model)"),STe.forEach(t),NNe=i(T),_m=n(T,"LI",{});var PTe=s(_m);$H=n(PTe,"STRONG",{});var DSr=s($H);jNe=r(DSr,"encoder-decoder"),DSr.forEach(t),qNe=r(PTe," \u2014 "),N9=n(PTe,"A",{href:!0});var NSr=s(N9);GNe=r(NSr,"EncoderDecoderConfig"),NSr.forEach(t),ONe=r(PTe," (Encoder decoder model)"),PTe.forEach(t),XNe=i(T),um=n(T,"LI",{});var $Te=s(um);IH=n($Te,"STRONG",{});var jSr=s(IH);VNe=r(jSr,"flaubert"),jSr.forEach(t),zNe=r($Te," \u2014 "),j9=n($Te,"A",{href:!0});var qSr=s(j9);WNe=r(qSr,"FlaubertConfig"),qSr.forEach(t),QNe=r($Te," (FlauBERT model)"),$Te.forEach(t),HNe=i(T),bm=n(T,"LI",{});var ITe=s(bm);DH=n(ITe,"STRONG",{});var GSr=s(DH);UNe=r(GSr,"fnet"),GSr.forEach(t),JNe=r(ITe," \u2014 "),q9=n(ITe,"A",{href:!0});var OSr=s(q9);YNe=r(OSr,"FNetConfig"),OSr.forEach(t),KNe=r(ITe," (FNet model)"),ITe.forEach(t),ZNe=i(T),vm=n(T,"LI",{});var DTe=s(vm);NH=n(DTe,"STRONG",{});var XSr=s(NH);eje=r(XSr,"fsmt"),XSr.forEach(t),oje=r(DTe," \u2014 "),G9=n(DTe,"A",{href:!0});var VSr=s(G9);rje=r(VSr,"FSMTConfig"),VSr.forEach(t),tje=r(DTe," (FairSeq Machine-Translation model)"),DTe.forEach(t),aje=i(T),Tm=n(T,"LI",{});var NTe=s(Tm);jH=n(NTe,"STRONG",{});var zSr=s(jH);nje=r(zSr,"funnel"),zSr.forEach(t),sje=r(NTe," \u2014 "),O9=n(NTe,"A",{href:!0});var WSr=s(O9);lje=r(WSr,"FunnelConfig"),WSr.forEach(t),ije=r(NTe," (Funnel Transformer model)"),NTe.forEach(t),dje=i(T),Fm=n(T,"LI",{});var jTe=s(Fm);qH=n(jTe,"STRONG",{});var QSr=s(qH);cje=r(QSr,"glpn"),QSr.forEach(t),fje=r(jTe," \u2014 "),X9=n(jTe,"A",{href:!0});var HSr=s(X9);mje=r(HSr,"GLPNConfig"),HSr.forEach(t),gje=r(jTe," (GLPN model)"),jTe.forEach(t),hje=i(T),Cm=n(T,"LI",{});var qTe=s(Cm);GH=n(qTe,"STRONG",{});var USr=s(GH);pje=r(USr,"gpt2"),USr.forEach(t),_je=r(qTe," \u2014 "),V9=n(qTe,"A",{href:!0});var JSr=s(V9);uje=r(JSr,"GPT2Config"),JSr.forEach(t),bje=r(qTe," (OpenAI GPT-2 model)"),qTe.forEach(t),vje=i(T),Mm=n(T,"LI",{});var GTe=s(Mm);OH=n(GTe,"STRONG",{});var YSr=s(OH);Tje=r(YSr,"gpt_neo"),YSr.forEach(t),Fje=r(GTe," \u2014 "),z9=n(GTe,"A",{href:!0});var KSr=s(z9);Cje=r(KSr,"GPTNeoConfig"),KSr.forEach(t),Mje=r(GTe," (GPT Neo model)"),GTe.forEach(t),Eje=i(T),Em=n(T,"LI",{});var OTe=s(Em);XH=n(OTe,"STRONG",{});var ZSr=s(XH);yje=r(ZSr,"gptj"),ZSr.forEach(t),wje=r(OTe," \u2014 "),W9=n(OTe,"A",{href:!0});var ePr=s(W9);Aje=r(ePr,"GPTJConfig"),ePr.forEach(t),Lje=r(OTe," (GPT-J model)"),OTe.forEach(t),Bje=i(T),ym=n(T,"LI",{});var XTe=s(ym);VH=n(XTe,"STRONG",{});var oPr=s(VH);xje=r(oPr,"hubert"),oPr.forEach(t),kje=r(XTe," \u2014 "),Q9=n(XTe,"A",{href:!0});var rPr=s(Q9);Rje=r(rPr,"HubertConfig"),rPr.forEach(t),Sje=r(XTe," (Hubert model)"),XTe.forEach(t),Pje=i(T),wm=n(T,"LI",{});var VTe=s(wm);zH=n(VTe,"STRONG",{});var tPr=s(zH);$je=r(tPr,"ibert"),tPr.forEach(t),Ije=r(VTe," \u2014 "),H9=n(VTe,"A",{href:!0});var aPr=s(H9);Dje=r(aPr,"IBertConfig"),aPr.forEach(t),Nje=r(VTe," (I-BERT model)"),VTe.forEach(t),jje=i(T),Am=n(T,"LI",{});var zTe=s(Am);WH=n(zTe,"STRONG",{});var nPr=s(WH);qje=r(nPr,"imagegpt"),nPr.forEach(t),Gje=r(zTe," \u2014 "),U9=n(zTe,"A",{href:!0});var sPr=s(U9);Oje=r(sPr,"ImageGPTConfig"),sPr.forEach(t),Xje=r(zTe," (ImageGPT model)"),zTe.forEach(t),Vje=i(T),Lm=n(T,"LI",{});var WTe=s(Lm);QH=n(WTe,"STRONG",{});var lPr=s(QH);zje=r(lPr,"layoutlm"),lPr.forEach(t),Wje=r(WTe," \u2014 "),J9=n(WTe,"A",{href:!0});var iPr=s(J9);Qje=r(iPr,"LayoutLMConfig"),iPr.forEach(t),Hje=r(WTe," (LayoutLM model)"),WTe.forEach(t),Uje=i(T),Bm=n(T,"LI",{});var QTe=s(Bm);HH=n(QTe,"STRONG",{});var dPr=s(HH);Jje=r(dPr,"layoutlmv2"),dPr.forEach(t),Yje=r(QTe," \u2014 "),Y9=n(QTe,"A",{href:!0});var cPr=s(Y9);Kje=r(cPr,"LayoutLMv2Config"),cPr.forEach(t),Zje=r(QTe," (LayoutLMv2 model)"),QTe.forEach(t),eqe=i(T),xm=n(T,"LI",{});var HTe=s(xm);UH=n(HTe,"STRONG",{});var fPr=s(UH);oqe=r(fPr,"led"),fPr.forEach(t),rqe=r(HTe," \u2014 "),K9=n(HTe,"A",{href:!0});var mPr=s(K9);tqe=r(mPr,"LEDConfig"),mPr.forEach(t),aqe=r(HTe," (LED model)"),HTe.forEach(t),nqe=i(T),km=n(T,"LI",{});var UTe=s(km);JH=n(UTe,"STRONG",{});var gPr=s(JH);sqe=r(gPr,"longformer"),gPr.forEach(t),lqe=r(UTe," \u2014 "),Z9=n(UTe,"A",{href:!0});var hPr=s(Z9);iqe=r(hPr,"LongformerConfig"),hPr.forEach(t),dqe=r(UTe," (Longformer model)"),UTe.forEach(t),cqe=i(T),Rm=n(T,"LI",{});var JTe=s(Rm);YH=n(JTe,"STRONG",{});var pPr=s(YH);fqe=r(pPr,"luke"),pPr.forEach(t),mqe=r(JTe," \u2014 "),eB=n(JTe,"A",{href:!0});var _Pr=s(eB);gqe=r(_Pr,"LukeConfig"),_Pr.forEach(t),hqe=r(JTe," (LUKE model)"),JTe.forEach(t),pqe=i(T),Sm=n(T,"LI",{});var YTe=s(Sm);KH=n(YTe,"STRONG",{});var uPr=s(KH);_qe=r(uPr,"lxmert"),uPr.forEach(t),uqe=r(YTe," \u2014 "),oB=n(YTe,"A",{href:!0});var bPr=s(oB);bqe=r(bPr,"LxmertConfig"),bPr.forEach(t),vqe=r(YTe," (LXMERT model)"),YTe.forEach(t),Tqe=i(T),Pm=n(T,"LI",{});var KTe=s(Pm);ZH=n(KTe,"STRONG",{});var vPr=s(ZH);Fqe=r(vPr,"m2m_100"),vPr.forEach(t),Cqe=r(KTe," \u2014 "),rB=n(KTe,"A",{href:!0});var TPr=s(rB);Mqe=r(TPr,"M2M100Config"),TPr.forEach(t),Eqe=r(KTe," (M2M100 model)"),KTe.forEach(t),yqe=i(T),$m=n(T,"LI",{});var ZTe=s($m);eU=n(ZTe,"STRONG",{});var FPr=s(eU);wqe=r(FPr,"marian"),FPr.forEach(t),Aqe=r(ZTe," \u2014 "),tB=n(ZTe,"A",{href:!0});var CPr=s(tB);Lqe=r(CPr,"MarianConfig"),CPr.forEach(t),Bqe=r(ZTe," (Marian model)"),ZTe.forEach(t),xqe=i(T),Im=n(T,"LI",{});var e8e=s(Im);oU=n(e8e,"STRONG",{});var MPr=s(oU);kqe=r(MPr,"maskformer"),MPr.forEach(t),Rqe=r(e8e," \u2014 "),aB=n(e8e,"A",{href:!0});var EPr=s(aB);Sqe=r(EPr,"MaskFormerConfig"),EPr.forEach(t),Pqe=r(e8e," (MaskFormer model)"),e8e.forEach(t),$qe=i(T),Dm=n(T,"LI",{});var o8e=s(Dm);rU=n(o8e,"STRONG",{});var yPr=s(rU);Iqe=r(yPr,"mbart"),yPr.forEach(t),Dqe=r(o8e," \u2014 "),nB=n(o8e,"A",{href:!0});var wPr=s(nB);Nqe=r(wPr,"MBartConfig"),wPr.forEach(t),jqe=r(o8e," (mBART model)"),o8e.forEach(t),qqe=i(T),Nm=n(T,"LI",{});var r8e=s(Nm);tU=n(r8e,"STRONG",{});var APr=s(tU);Gqe=r(APr,"megatron-bert"),APr.forEach(t),Oqe=r(r8e," \u2014 "),sB=n(r8e,"A",{href:!0});var LPr=s(sB);Xqe=r(LPr,"MegatronBertConfig"),LPr.forEach(t),Vqe=r(r8e," (MegatronBert model)"),r8e.forEach(t),zqe=i(T),jm=n(T,"LI",{});var t8e=s(jm);aU=n(t8e,"STRONG",{});var BPr=s(aU);Wqe=r(BPr,"mobilebert"),BPr.forEach(t),Qqe=r(t8e," \u2014 "),lB=n(t8e,"A",{href:!0});var xPr=s(lB);Hqe=r(xPr,"MobileBertConfig"),xPr.forEach(t),Uqe=r(t8e," (MobileBERT model)"),t8e.forEach(t),Jqe=i(T),qm=n(T,"LI",{});var a8e=s(qm);nU=n(a8e,"STRONG",{});var kPr=s(nU);Yqe=r(kPr,"mpnet"),kPr.forEach(t),Kqe=r(a8e," \u2014 "),iB=n(a8e,"A",{href:!0});var RPr=s(iB);Zqe=r(RPr,"MPNetConfig"),RPr.forEach(t),eGe=r(a8e," (MPNet model)"),a8e.forEach(t),oGe=i(T),Gm=n(T,"LI",{});var n8e=s(Gm);sU=n(n8e,"STRONG",{});var SPr=s(sU);rGe=r(SPr,"mt5"),SPr.forEach(t),tGe=r(n8e," \u2014 "),dB=n(n8e,"A",{href:!0});var PPr=s(dB);aGe=r(PPr,"MT5Config"),PPr.forEach(t),nGe=r(n8e," (mT5 model)"),n8e.forEach(t),sGe=i(T),Om=n(T,"LI",{});var s8e=s(Om);lU=n(s8e,"STRONG",{});var $Pr=s(lU);lGe=r($Pr,"nystromformer"),$Pr.forEach(t),iGe=r(s8e," \u2014 "),cB=n(s8e,"A",{href:!0});var IPr=s(cB);dGe=r(IPr,"NystromformerConfig"),IPr.forEach(t),cGe=r(s8e," (Nystromformer model)"),s8e.forEach(t),fGe=i(T),Xm=n(T,"LI",{});var l8e=s(Xm);iU=n(l8e,"STRONG",{});var DPr=s(iU);mGe=r(DPr,"openai-gpt"),DPr.forEach(t),gGe=r(l8e," \u2014 "),fB=n(l8e,"A",{href:!0});var NPr=s(fB);hGe=r(NPr,"OpenAIGPTConfig"),NPr.forEach(t),pGe=r(l8e," (OpenAI GPT model)"),l8e.forEach(t),_Ge=i(T),Vm=n(T,"LI",{});var i8e=s(Vm);dU=n(i8e,"STRONG",{});var jPr=s(dU);uGe=r(jPr,"pegasus"),jPr.forEach(t),bGe=r(i8e," \u2014 "),mB=n(i8e,"A",{href:!0});var qPr=s(mB);vGe=r(qPr,"PegasusConfig"),qPr.forEach(t),TGe=r(i8e," (Pegasus model)"),i8e.forEach(t),FGe=i(T),zm=n(T,"LI",{});var d8e=s(zm);cU=n(d8e,"STRONG",{});var GPr=s(cU);CGe=r(GPr,"perceiver"),GPr.forEach(t),MGe=r(d8e," \u2014 "),gB=n(d8e,"A",{href:!0});var OPr=s(gB);EGe=r(OPr,"PerceiverConfig"),OPr.forEach(t),yGe=r(d8e," (Perceiver model)"),d8e.forEach(t),wGe=i(T),Wm=n(T,"LI",{});var c8e=s(Wm);fU=n(c8e,"STRONG",{});var XPr=s(fU);AGe=r(XPr,"plbart"),XPr.forEach(t),LGe=r(c8e," \u2014 "),hB=n(c8e,"A",{href:!0});var VPr=s(hB);BGe=r(VPr,"PLBartConfig"),VPr.forEach(t),xGe=r(c8e," (PLBart model)"),c8e.forEach(t),kGe=i(T),Qm=n(T,"LI",{});var f8e=s(Qm);mU=n(f8e,"STRONG",{});var zPr=s(mU);RGe=r(zPr,"poolformer"),zPr.forEach(t),SGe=r(f8e," \u2014 "),pB=n(f8e,"A",{href:!0});var WPr=s(pB);PGe=r(WPr,"PoolFormerConfig"),WPr.forEach(t),$Ge=r(f8e," (PoolFormer model)"),f8e.forEach(t),IGe=i(T),Hm=n(T,"LI",{});var m8e=s(Hm);gU=n(m8e,"STRONG",{});var QPr=s(gU);DGe=r(QPr,"prophetnet"),QPr.forEach(t),NGe=r(m8e," \u2014 "),_B=n(m8e,"A",{href:!0});var HPr=s(_B);jGe=r(HPr,"ProphetNetConfig"),HPr.forEach(t),qGe=r(m8e," (ProphetNet model)"),m8e.forEach(t),GGe=i(T),Um=n(T,"LI",{});var g8e=s(Um);hU=n(g8e,"STRONG",{});var UPr=s(hU);OGe=r(UPr,"qdqbert"),UPr.forEach(t),XGe=r(g8e," \u2014 "),uB=n(g8e,"A",{href:!0});var JPr=s(uB);VGe=r(JPr,"QDQBertConfig"),JPr.forEach(t),zGe=r(g8e," (QDQBert model)"),g8e.forEach(t),WGe=i(T),Jm=n(T,"LI",{});var h8e=s(Jm);pU=n(h8e,"STRONG",{});var YPr=s(pU);QGe=r(YPr,"rag"),YPr.forEach(t),HGe=r(h8e," \u2014 "),bB=n(h8e,"A",{href:!0});var KPr=s(bB);UGe=r(KPr,"RagConfig"),KPr.forEach(t),JGe=r(h8e," (RAG model)"),h8e.forEach(t),YGe=i(T),Ym=n(T,"LI",{});var p8e=s(Ym);_U=n(p8e,"STRONG",{});var ZPr=s(_U);KGe=r(ZPr,"realm"),ZPr.forEach(t),ZGe=r(p8e," \u2014 "),vB=n(p8e,"A",{href:!0});var e$r=s(vB);eOe=r(e$r,"RealmConfig"),e$r.forEach(t),oOe=r(p8e," (Realm model)"),p8e.forEach(t),rOe=i(T),Km=n(T,"LI",{});var _8e=s(Km);uU=n(_8e,"STRONG",{});var o$r=s(uU);tOe=r(o$r,"reformer"),o$r.forEach(t),aOe=r(_8e," \u2014 "),TB=n(_8e,"A",{href:!0});var r$r=s(TB);nOe=r(r$r,"ReformerConfig"),r$r.forEach(t),sOe=r(_8e," (Reformer model)"),_8e.forEach(t),lOe=i(T),Zm=n(T,"LI",{});var u8e=s(Zm);bU=n(u8e,"STRONG",{});var t$r=s(bU);iOe=r(t$r,"rembert"),t$r.forEach(t),dOe=r(u8e," \u2014 "),FB=n(u8e,"A",{href:!0});var a$r=s(FB);cOe=r(a$r,"RemBertConfig"),a$r.forEach(t),fOe=r(u8e," (RemBERT model)"),u8e.forEach(t),mOe=i(T),eg=n(T,"LI",{});var b8e=s(eg);vU=n(b8e,"STRONG",{});var n$r=s(vU);gOe=r(n$r,"resnet"),n$r.forEach(t),hOe=r(b8e," \u2014 "),CB=n(b8e,"A",{href:!0});var s$r=s(CB);pOe=r(s$r,"ResNetConfig"),s$r.forEach(t),_Oe=r(b8e," (ResNet model)"),b8e.forEach(t),uOe=i(T),og=n(T,"LI",{});var v8e=s(og);TU=n(v8e,"STRONG",{});var l$r=s(TU);bOe=r(l$r,"retribert"),l$r.forEach(t),vOe=r(v8e," \u2014 "),MB=n(v8e,"A",{href:!0});var i$r=s(MB);TOe=r(i$r,"RetriBertConfig"),i$r.forEach(t),FOe=r(v8e," (RetriBERT model)"),v8e.forEach(t),COe=i(T),rg=n(T,"LI",{});var T8e=s(rg);FU=n(T8e,"STRONG",{});var d$r=s(FU);MOe=r(d$r,"roberta"),d$r.forEach(t),EOe=r(T8e," \u2014 "),EB=n(T8e,"A",{href:!0});var c$r=s(EB);yOe=r(c$r,"RobertaConfig"),c$r.forEach(t),wOe=r(T8e," (RoBERTa model)"),T8e.forEach(t),AOe=i(T),tg=n(T,"LI",{});var F8e=s(tg);CU=n(F8e,"STRONG",{});var f$r=s(CU);LOe=r(f$r,"roformer"),f$r.forEach(t),BOe=r(F8e," \u2014 "),yB=n(F8e,"A",{href:!0});var m$r=s(yB);xOe=r(m$r,"RoFormerConfig"),m$r.forEach(t),kOe=r(F8e," (RoFormer model)"),F8e.forEach(t),ROe=i(T),ag=n(T,"LI",{});var C8e=s(ag);MU=n(C8e,"STRONG",{});var g$r=s(MU);SOe=r(g$r,"segformer"),g$r.forEach(t),POe=r(C8e," \u2014 "),wB=n(C8e,"A",{href:!0});var h$r=s(wB);$Oe=r(h$r,"SegformerConfig"),h$r.forEach(t),IOe=r(C8e," (SegFormer model)"),C8e.forEach(t),DOe=i(T),ng=n(T,"LI",{});var M8e=s(ng);EU=n(M8e,"STRONG",{});var p$r=s(EU);NOe=r(p$r,"sew"),p$r.forEach(t),jOe=r(M8e," \u2014 "),AB=n(M8e,"A",{href:!0});var _$r=s(AB);qOe=r(_$r,"SEWConfig"),_$r.forEach(t),GOe=r(M8e," (SEW model)"),M8e.forEach(t),OOe=i(T),sg=n(T,"LI",{});var E8e=s(sg);yU=n(E8e,"STRONG",{});var u$r=s(yU);XOe=r(u$r,"sew-d"),u$r.forEach(t),VOe=r(E8e," \u2014 "),LB=n(E8e,"A",{href:!0});var b$r=s(LB);zOe=r(b$r,"SEWDConfig"),b$r.forEach(t),WOe=r(E8e," (SEW-D model)"),E8e.forEach(t),QOe=i(T),lg=n(T,"LI",{});var y8e=s(lg);wU=n(y8e,"STRONG",{});var v$r=s(wU);HOe=r(v$r,"speech-encoder-decoder"),v$r.forEach(t),UOe=r(y8e," \u2014 "),BB=n(y8e,"A",{href:!0});var T$r=s(BB);JOe=r(T$r,"SpeechEncoderDecoderConfig"),T$r.forEach(t),YOe=r(y8e," (Speech Encoder decoder model)"),y8e.forEach(t),KOe=i(T),ig=n(T,"LI",{});var w8e=s(ig);AU=n(w8e,"STRONG",{});var F$r=s(AU);ZOe=r(F$r,"speech_to_text"),F$r.forEach(t),eXe=r(w8e," \u2014 "),xB=n(w8e,"A",{href:!0});var C$r=s(xB);oXe=r(C$r,"Speech2TextConfig"),C$r.forEach(t),rXe=r(w8e," (Speech2Text model)"),w8e.forEach(t),tXe=i(T),dg=n(T,"LI",{});var A8e=s(dg);LU=n(A8e,"STRONG",{});var M$r=s(LU);aXe=r(M$r,"speech_to_text_2"),M$r.forEach(t),nXe=r(A8e," \u2014 "),kB=n(A8e,"A",{href:!0});var E$r=s(kB);sXe=r(E$r,"Speech2Text2Config"),E$r.forEach(t),lXe=r(A8e," (Speech2Text2 model)"),A8e.forEach(t),iXe=i(T),cg=n(T,"LI",{});var L8e=s(cg);BU=n(L8e,"STRONG",{});var y$r=s(BU);dXe=r(y$r,"splinter"),y$r.forEach(t),cXe=r(L8e," \u2014 "),RB=n(L8e,"A",{href:!0});var w$r=s(RB);fXe=r(w$r,"SplinterConfig"),w$r.forEach(t),mXe=r(L8e," (Splinter model)"),L8e.forEach(t),gXe=i(T),fg=n(T,"LI",{});var B8e=s(fg);xU=n(B8e,"STRONG",{});var A$r=s(xU);hXe=r(A$r,"squeezebert"),A$r.forEach(t),pXe=r(B8e," \u2014 "),SB=n(B8e,"A",{href:!0});var L$r=s(SB);_Xe=r(L$r,"SqueezeBertConfig"),L$r.forEach(t),uXe=r(B8e," (SqueezeBERT model)"),B8e.forEach(t),bXe=i(T),mg=n(T,"LI",{});var x8e=s(mg);kU=n(x8e,"STRONG",{});var B$r=s(kU);vXe=r(B$r,"swin"),B$r.forEach(t),TXe=r(x8e," \u2014 "),PB=n(x8e,"A",{href:!0});var x$r=s(PB);FXe=r(x$r,"SwinConfig"),x$r.forEach(t),CXe=r(x8e," (Swin model)"),x8e.forEach(t),MXe=i(T),gg=n(T,"LI",{});var k8e=s(gg);RU=n(k8e,"STRONG",{});var k$r=s(RU);EXe=r(k$r,"t5"),k$r.forEach(t),yXe=r(k8e," \u2014 "),$B=n(k8e,"A",{href:!0});var R$r=s($B);wXe=r(R$r,"T5Config"),R$r.forEach(t),AXe=r(k8e," (T5 model)"),k8e.forEach(t),LXe=i(T),hg=n(T,"LI",{});var R8e=s(hg);SU=n(R8e,"STRONG",{});var S$r=s(SU);BXe=r(S$r,"tapas"),S$r.forEach(t),xXe=r(R8e," \u2014 "),IB=n(R8e,"A",{href:!0});var P$r=s(IB);kXe=r(P$r,"TapasConfig"),P$r.forEach(t),RXe=r(R8e," (TAPAS model)"),R8e.forEach(t),SXe=i(T),pg=n(T,"LI",{});var S8e=s(pg);PU=n(S8e,"STRONG",{});var $$r=s(PU);PXe=r($$r,"transfo-xl"),$$r.forEach(t),$Xe=r(S8e," \u2014 "),DB=n(S8e,"A",{href:!0});var I$r=s(DB);IXe=r(I$r,"TransfoXLConfig"),I$r.forEach(t),DXe=r(S8e," (Transformer-XL model)"),S8e.forEach(t),NXe=i(T),_g=n(T,"LI",{});var P8e=s(_g);$U=n(P8e,"STRONG",{});var D$r=s($U);jXe=r(D$r,"trocr"),D$r.forEach(t),qXe=r(P8e," \u2014 "),NB=n(P8e,"A",{href:!0});var N$r=s(NB);GXe=r(N$r,"TrOCRConfig"),N$r.forEach(t),OXe=r(P8e," (TrOCR model)"),P8e.forEach(t),XXe=i(T),ug=n(T,"LI",{});var $8e=s(ug);IU=n($8e,"STRONG",{});var j$r=s(IU);VXe=r(j$r,"unispeech"),j$r.forEach(t),zXe=r($8e," \u2014 "),jB=n($8e,"A",{href:!0});var q$r=s(jB);WXe=r(q$r,"UniSpeechConfig"),q$r.forEach(t),QXe=r($8e," (UniSpeech model)"),$8e.forEach(t),HXe=i(T),bg=n(T,"LI",{});var I8e=s(bg);DU=n(I8e,"STRONG",{});var G$r=s(DU);UXe=r(G$r,"unispeech-sat"),G$r.forEach(t),JXe=r(I8e," \u2014 "),qB=n(I8e,"A",{href:!0});var O$r=s(qB);YXe=r(O$r,"UniSpeechSatConfig"),O$r.forEach(t),KXe=r(I8e," (UniSpeechSat model)"),I8e.forEach(t),ZXe=i(T),vg=n(T,"LI",{});var D8e=s(vg);NU=n(D8e,"STRONG",{});var X$r=s(NU);eVe=r(X$r,"van"),X$r.forEach(t),oVe=r(D8e," \u2014 "),GB=n(D8e,"A",{href:!0});var V$r=s(GB);rVe=r(V$r,"VanConfig"),V$r.forEach(t),tVe=r(D8e," (VAN model)"),D8e.forEach(t),aVe=i(T),Tg=n(T,"LI",{});var N8e=s(Tg);jU=n(N8e,"STRONG",{});var z$r=s(jU);nVe=r(z$r,"vilt"),z$r.forEach(t),sVe=r(N8e," \u2014 "),OB=n(N8e,"A",{href:!0});var W$r=s(OB);lVe=r(W$r,"ViltConfig"),W$r.forEach(t),iVe=r(N8e," (ViLT model)"),N8e.forEach(t),dVe=i(T),Fg=n(T,"LI",{});var j8e=s(Fg);qU=n(j8e,"STRONG",{});var Q$r=s(qU);cVe=r(Q$r,"vision-encoder-decoder"),Q$r.forEach(t),fVe=r(j8e," \u2014 "),XB=n(j8e,"A",{href:!0});var H$r=s(XB);mVe=r(H$r,"VisionEncoderDecoderConfig"),H$r.forEach(t),gVe=r(j8e," (Vision Encoder decoder model)"),j8e.forEach(t),hVe=i(T),Cg=n(T,"LI",{});var q8e=s(Cg);GU=n(q8e,"STRONG",{});var U$r=s(GU);pVe=r(U$r,"vision-text-dual-encoder"),U$r.forEach(t),_Ve=r(q8e," \u2014 "),VB=n(q8e,"A",{href:!0});var J$r=s(VB);uVe=r(J$r,"VisionTextDualEncoderConfig"),J$r.forEach(t),bVe=r(q8e," (VisionTextDualEncoder model)"),q8e.forEach(t),vVe=i(T),Mg=n(T,"LI",{});var G8e=s(Mg);OU=n(G8e,"STRONG",{});var Y$r=s(OU);TVe=r(Y$r,"visual_bert"),Y$r.forEach(t),FVe=r(G8e," \u2014 "),zB=n(G8e,"A",{href:!0});var K$r=s(zB);CVe=r(K$r,"VisualBertConfig"),K$r.forEach(t),MVe=r(G8e," (VisualBert model)"),G8e.forEach(t),EVe=i(T),Eg=n(T,"LI",{});var O8e=s(Eg);XU=n(O8e,"STRONG",{});var Z$r=s(XU);yVe=r(Z$r,"vit"),Z$r.forEach(t),wVe=r(O8e," \u2014 "),WB=n(O8e,"A",{href:!0});var eIr=s(WB);AVe=r(eIr,"ViTConfig"),eIr.forEach(t),LVe=r(O8e," (ViT model)"),O8e.forEach(t),BVe=i(T),yg=n(T,"LI",{});var X8e=s(yg);VU=n(X8e,"STRONG",{});var oIr=s(VU);xVe=r(oIr,"vit_mae"),oIr.forEach(t),kVe=r(X8e," \u2014 "),QB=n(X8e,"A",{href:!0});var rIr=s(QB);RVe=r(rIr,"ViTMAEConfig"),rIr.forEach(t),SVe=r(X8e," (ViTMAE model)"),X8e.forEach(t),PVe=i(T),wg=n(T,"LI",{});var V8e=s(wg);zU=n(V8e,"STRONG",{});var tIr=s(zU);$Ve=r(tIr,"wav2vec2"),tIr.forEach(t),IVe=r(V8e," \u2014 "),HB=n(V8e,"A",{href:!0});var aIr=s(HB);DVe=r(aIr,"Wav2Vec2Config"),aIr.forEach(t),NVe=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),jVe=i(T),Ag=n(T,"LI",{});var z8e=s(Ag);WU=n(z8e,"STRONG",{});var nIr=s(WU);qVe=r(nIr,"wavlm"),nIr.forEach(t),GVe=r(z8e," \u2014 "),UB=n(z8e,"A",{href:!0});var sIr=s(UB);OVe=r(sIr,"WavLMConfig"),sIr.forEach(t),XVe=r(z8e," (WavLM model)"),z8e.forEach(t),VVe=i(T),Lg=n(T,"LI",{});var W8e=s(Lg);QU=n(W8e,"STRONG",{});var lIr=s(QU);zVe=r(lIr,"xglm"),lIr.forEach(t),WVe=r(W8e," \u2014 "),JB=n(W8e,"A",{href:!0});var iIr=s(JB);QVe=r(iIr,"XGLMConfig"),iIr.forEach(t),HVe=r(W8e," (XGLM model)"),W8e.forEach(t),UVe=i(T),Bg=n(T,"LI",{});var Q8e=s(Bg);HU=n(Q8e,"STRONG",{});var dIr=s(HU);JVe=r(dIr,"xlm"),dIr.forEach(t),YVe=r(Q8e," \u2014 "),YB=n(Q8e,"A",{href:!0});var cIr=s(YB);KVe=r(cIr,"XLMConfig"),cIr.forEach(t),ZVe=r(Q8e," (XLM model)"),Q8e.forEach(t),eze=i(T),xg=n(T,"LI",{});var H8e=s(xg);UU=n(H8e,"STRONG",{});var fIr=s(UU);oze=r(fIr,"xlm-prophetnet"),fIr.forEach(t),rze=r(H8e," \u2014 "),KB=n(H8e,"A",{href:!0});var mIr=s(KB);tze=r(mIr,"XLMProphetNetConfig"),mIr.forEach(t),aze=r(H8e," (XLMProphetNet model)"),H8e.forEach(t),nze=i(T),kg=n(T,"LI",{});var U8e=s(kg);JU=n(U8e,"STRONG",{});var gIr=s(JU);sze=r(gIr,"xlm-roberta"),gIr.forEach(t),lze=r(U8e," \u2014 "),ZB=n(U8e,"A",{href:!0});var hIr=s(ZB);ize=r(hIr,"XLMRobertaConfig"),hIr.forEach(t),dze=r(U8e," (XLM-RoBERTa model)"),U8e.forEach(t),cze=i(T),Rg=n(T,"LI",{});var J8e=s(Rg);YU=n(J8e,"STRONG",{});var pIr=s(YU);fze=r(pIr,"xlm-roberta-xl"),pIr.forEach(t),mze=r(J8e," \u2014 "),ex=n(J8e,"A",{href:!0});var _Ir=s(ex);gze=r(_Ir,"XLMRobertaXLConfig"),_Ir.forEach(t),hze=r(J8e," (XLM-RoBERTa-XL model)"),J8e.forEach(t),pze=i(T),Sg=n(T,"LI",{});var Y8e=s(Sg);KU=n(Y8e,"STRONG",{});var uIr=s(KU);_ze=r(uIr,"xlnet"),uIr.forEach(t),uze=r(Y8e," \u2014 "),ox=n(Y8e,"A",{href:!0});var bIr=s(ox);bze=r(bIr,"XLNetConfig"),bIr.forEach(t),vze=r(Y8e," (XLNet model)"),Y8e.forEach(t),Tze=i(T),Pg=n(T,"LI",{});var K8e=s(Pg);ZU=n(K8e,"STRONG",{});var vIr=s(ZU);Fze=r(vIr,"yoso"),vIr.forEach(t),Cze=r(K8e," \u2014 "),rx=n(K8e,"A",{href:!0});var TIr=s(rx);Mze=r(TIr,"YosoConfig"),TIr.forEach(t),Eze=r(K8e," (YOSO model)"),K8e.forEach(t),T.forEach(t),yze=i(ga),eJ=n(ga,"P",{});var FIr=s(eJ);wze=r(FIr,"Examples:"),FIr.forEach(t),Aze=i(ga),m(E4.$$.fragment,ga),ga.forEach(t),Lze=i(Os),$g=n(Os,"DIV",{class:!0});var NSe=s($g);m(y4.$$.fragment,NSe),Bze=i(NSe),oJ=n(NSe,"P",{});var CIr=s(oJ);xze=r(CIr,"Register a new configuration for this class."),CIr.forEach(t),NSe.forEach(t),Os.forEach(t),Ike=i(c),Wi=n(c,"H2",{class:!0});var jSe=s(Wi);Ig=n(jSe,"A",{id:!0,class:!0,href:!0});var MIr=s(Ig);rJ=n(MIr,"SPAN",{});var EIr=s(rJ);m(w4.$$.fragment,EIr),EIr.forEach(t),MIr.forEach(t),kze=i(jSe),tJ=n(jSe,"SPAN",{});var yIr=s(tJ);Rze=r(yIr,"AutoTokenizer"),yIr.forEach(t),jSe.forEach(t),Dke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(A4.$$.fragment,Xs),Sze=i(Xs),L4=n(Xs,"P",{});var qSe=s(L4);Pze=r(qSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tx=n(qSe,"A",{href:!0});var wIr=s(tx);$ze=r(wIr,"AutoTokenizer.from_pretrained()"),wIr.forEach(t),Ize=r(qSe," class method."),qSe.forEach(t),Dze=i(Xs),B4=n(Xs,"P",{});var GSe=s(B4);Nze=r(GSe,"This class cannot be instantiated directly using "),aJ=n(GSe,"CODE",{});var AIr=s(aJ);jze=r(AIr,"__init__()"),AIr.forEach(t),qze=r(GSe," (throws an error)."),GSe.forEach(t),Gze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(x4.$$.fragment,ha),Oze=i(ha),nJ=n(ha,"P",{});var LIr=s(nJ);Xze=r(LIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LIr.forEach(t),Vze=i(ha),Oa=n(ha,"P",{});var pM=s(Oa);zze=r(pM,"The tokenizer class to instantiate is selected based on the "),sJ=n(pM,"CODE",{});var BIr=s(sJ);Wze=r(BIr,"model_type"),BIr.forEach(t),Qze=r(pM,` property of the config object (either
passed as an argument or loaded from `),lJ=n(pM,"CODE",{});var xIr=s(lJ);Hze=r(xIr,"pretrained_model_name_or_path"),xIr.forEach(t),Uze=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iJ=n(pM,"CODE",{});var kIr=s(iJ);Jze=r(kIr,"pretrained_model_name_or_path"),kIr.forEach(t),Yze=r(pM,":"),pM.forEach(t),Kze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var d7=s(Wn);dJ=n(d7,"STRONG",{});var RIr=s(dJ);Zze=r(RIr,"albert"),RIr.forEach(t),eWe=r(d7," \u2014 "),ax=n(d7,"A",{href:!0});var SIr=s(ax);oWe=r(SIr,"AlbertTokenizer"),SIr.forEach(t),rWe=r(d7," or "),nx=n(d7,"A",{href:!0});var PIr=s(nx);tWe=r(PIr,"AlbertTokenizerFast"),PIr.forEach(t),aWe=r(d7," (ALBERT model)"),d7.forEach(t),nWe=i(y),Qn=n(y,"LI",{});var c7=s(Qn);cJ=n(c7,"STRONG",{});var $Ir=s(cJ);sWe=r($Ir,"bart"),$Ir.forEach(t),lWe=r(c7," \u2014 "),sx=n(c7,"A",{href:!0});var IIr=s(sx);iWe=r(IIr,"BartTokenizer"),IIr.forEach(t),dWe=r(c7," or "),lx=n(c7,"A",{href:!0});var DIr=s(lx);cWe=r(DIr,"BartTokenizerFast"),DIr.forEach(t),fWe=r(c7," (BART model)"),c7.forEach(t),mWe=i(y),Hn=n(y,"LI",{});var f7=s(Hn);fJ=n(f7,"STRONG",{});var NIr=s(fJ);gWe=r(NIr,"barthez"),NIr.forEach(t),hWe=r(f7," \u2014 "),ix=n(f7,"A",{href:!0});var jIr=s(ix);pWe=r(jIr,"BarthezTokenizer"),jIr.forEach(t),_We=r(f7," or "),dx=n(f7,"A",{href:!0});var qIr=s(dx);uWe=r(qIr,"BarthezTokenizerFast"),qIr.forEach(t),bWe=r(f7," (BARThez model)"),f7.forEach(t),vWe=i(y),Dg=n(y,"LI",{});var Z8e=s(Dg);mJ=n(Z8e,"STRONG",{});var GIr=s(mJ);TWe=r(GIr,"bartpho"),GIr.forEach(t),FWe=r(Z8e," \u2014 "),cx=n(Z8e,"A",{href:!0});var OIr=s(cx);CWe=r(OIr,"BartphoTokenizer"),OIr.forEach(t),MWe=r(Z8e," (BARTpho model)"),Z8e.forEach(t),EWe=i(y),Un=n(y,"LI",{});var m7=s(Un);gJ=n(m7,"STRONG",{});var XIr=s(gJ);yWe=r(XIr,"bert"),XIr.forEach(t),wWe=r(m7," \u2014 "),fx=n(m7,"A",{href:!0});var VIr=s(fx);AWe=r(VIr,"BertTokenizer"),VIr.forEach(t),LWe=r(m7," or "),mx=n(m7,"A",{href:!0});var zIr=s(mx);BWe=r(zIr,"BertTokenizerFast"),zIr.forEach(t),xWe=r(m7," (BERT model)"),m7.forEach(t),kWe=i(y),Ng=n(y,"LI",{});var eFe=s(Ng);hJ=n(eFe,"STRONG",{});var WIr=s(hJ);RWe=r(WIr,"bert-generation"),WIr.forEach(t),SWe=r(eFe," \u2014 "),gx=n(eFe,"A",{href:!0});var QIr=s(gx);PWe=r(QIr,"BertGenerationTokenizer"),QIr.forEach(t),$We=r(eFe," (Bert Generation model)"),eFe.forEach(t),IWe=i(y),jg=n(y,"LI",{});var oFe=s(jg);pJ=n(oFe,"STRONG",{});var HIr=s(pJ);DWe=r(HIr,"bert-japanese"),HIr.forEach(t),NWe=r(oFe," \u2014 "),hx=n(oFe,"A",{href:!0});var UIr=s(hx);jWe=r(UIr,"BertJapaneseTokenizer"),UIr.forEach(t),qWe=r(oFe," (BertJapanese model)"),oFe.forEach(t),GWe=i(y),qg=n(y,"LI",{});var rFe=s(qg);_J=n(rFe,"STRONG",{});var JIr=s(_J);OWe=r(JIr,"bertweet"),JIr.forEach(t),XWe=r(rFe," \u2014 "),px=n(rFe,"A",{href:!0});var YIr=s(px);VWe=r(YIr,"BertweetTokenizer"),YIr.forEach(t),zWe=r(rFe," (Bertweet model)"),rFe.forEach(t),WWe=i(y),Jn=n(y,"LI",{});var g7=s(Jn);uJ=n(g7,"STRONG",{});var KIr=s(uJ);QWe=r(KIr,"big_bird"),KIr.forEach(t),HWe=r(g7," \u2014 "),_x=n(g7,"A",{href:!0});var ZIr=s(_x);UWe=r(ZIr,"BigBirdTokenizer"),ZIr.forEach(t),JWe=r(g7," or "),ux=n(g7,"A",{href:!0});var eDr=s(ux);YWe=r(eDr,"BigBirdTokenizerFast"),eDr.forEach(t),KWe=r(g7," (BigBird model)"),g7.forEach(t),ZWe=i(y),Yn=n(y,"LI",{});var h7=s(Yn);bJ=n(h7,"STRONG",{});var oDr=s(bJ);eQe=r(oDr,"bigbird_pegasus"),oDr.forEach(t),oQe=r(h7," \u2014 "),bx=n(h7,"A",{href:!0});var rDr=s(bx);rQe=r(rDr,"PegasusTokenizer"),rDr.forEach(t),tQe=r(h7," or "),vx=n(h7,"A",{href:!0});var tDr=s(vx);aQe=r(tDr,"PegasusTokenizerFast"),tDr.forEach(t),nQe=r(h7," (BigBirdPegasus model)"),h7.forEach(t),sQe=i(y),Kn=n(y,"LI",{});var p7=s(Kn);vJ=n(p7,"STRONG",{});var aDr=s(vJ);lQe=r(aDr,"blenderbot"),aDr.forEach(t),iQe=r(p7," \u2014 "),Tx=n(p7,"A",{href:!0});var nDr=s(Tx);dQe=r(nDr,"BlenderbotTokenizer"),nDr.forEach(t),cQe=r(p7," or "),Fx=n(p7,"A",{href:!0});var sDr=s(Fx);fQe=r(sDr,"BlenderbotTokenizerFast"),sDr.forEach(t),mQe=r(p7," (Blenderbot model)"),p7.forEach(t),gQe=i(y),Gg=n(y,"LI",{});var tFe=s(Gg);TJ=n(tFe,"STRONG",{});var lDr=s(TJ);hQe=r(lDr,"blenderbot-small"),lDr.forEach(t),pQe=r(tFe," \u2014 "),Cx=n(tFe,"A",{href:!0});var iDr=s(Cx);_Qe=r(iDr,"BlenderbotSmallTokenizer"),iDr.forEach(t),uQe=r(tFe," (BlenderbotSmall model)"),tFe.forEach(t),bQe=i(y),Og=n(y,"LI",{});var aFe=s(Og);FJ=n(aFe,"STRONG",{});var dDr=s(FJ);vQe=r(dDr,"byt5"),dDr.forEach(t),TQe=r(aFe," \u2014 "),Mx=n(aFe,"A",{href:!0});var cDr=s(Mx);FQe=r(cDr,"ByT5Tokenizer"),cDr.forEach(t),CQe=r(aFe," (ByT5 model)"),aFe.forEach(t),MQe=i(y),Zn=n(y,"LI",{});var _7=s(Zn);CJ=n(_7,"STRONG",{});var fDr=s(CJ);EQe=r(fDr,"camembert"),fDr.forEach(t),yQe=r(_7," \u2014 "),Ex=n(_7,"A",{href:!0});var mDr=s(Ex);wQe=r(mDr,"CamembertTokenizer"),mDr.forEach(t),AQe=r(_7," or "),yx=n(_7,"A",{href:!0});var gDr=s(yx);LQe=r(gDr,"CamembertTokenizerFast"),gDr.forEach(t),BQe=r(_7," (CamemBERT model)"),_7.forEach(t),xQe=i(y),Xg=n(y,"LI",{});var nFe=s(Xg);MJ=n(nFe,"STRONG",{});var hDr=s(MJ);kQe=r(hDr,"canine"),hDr.forEach(t),RQe=r(nFe," \u2014 "),wx=n(nFe,"A",{href:!0});var pDr=s(wx);SQe=r(pDr,"CanineTokenizer"),pDr.forEach(t),PQe=r(nFe," (Canine model)"),nFe.forEach(t),$Qe=i(y),es=n(y,"LI",{});var u7=s(es);EJ=n(u7,"STRONG",{});var _Dr=s(EJ);IQe=r(_Dr,"clip"),_Dr.forEach(t),DQe=r(u7," \u2014 "),Ax=n(u7,"A",{href:!0});var uDr=s(Ax);NQe=r(uDr,"CLIPTokenizer"),uDr.forEach(t),jQe=r(u7," or "),Lx=n(u7,"A",{href:!0});var bDr=s(Lx);qQe=r(bDr,"CLIPTokenizerFast"),bDr.forEach(t),GQe=r(u7," (CLIP model)"),u7.forEach(t),OQe=i(y),os=n(y,"LI",{});var b7=s(os);yJ=n(b7,"STRONG",{});var vDr=s(yJ);XQe=r(vDr,"convbert"),vDr.forEach(t),VQe=r(b7," \u2014 "),Bx=n(b7,"A",{href:!0});var TDr=s(Bx);zQe=r(TDr,"ConvBertTokenizer"),TDr.forEach(t),WQe=r(b7," or "),xx=n(b7,"A",{href:!0});var FDr=s(xx);QQe=r(FDr,"ConvBertTokenizerFast"),FDr.forEach(t),HQe=r(b7," (ConvBERT model)"),b7.forEach(t),UQe=i(y),rs=n(y,"LI",{});var v7=s(rs);wJ=n(v7,"STRONG",{});var CDr=s(wJ);JQe=r(CDr,"cpm"),CDr.forEach(t),YQe=r(v7," \u2014 "),kx=n(v7,"A",{href:!0});var MDr=s(kx);KQe=r(MDr,"CpmTokenizer"),MDr.forEach(t),ZQe=r(v7," or "),AJ=n(v7,"CODE",{});var EDr=s(AJ);eHe=r(EDr,"CpmTokenizerFast"),EDr.forEach(t),oHe=r(v7," (CPM model)"),v7.forEach(t),rHe=i(y),Vg=n(y,"LI",{});var sFe=s(Vg);LJ=n(sFe,"STRONG",{});var yDr=s(LJ);tHe=r(yDr,"ctrl"),yDr.forEach(t),aHe=r(sFe," \u2014 "),Rx=n(sFe,"A",{href:!0});var wDr=s(Rx);nHe=r(wDr,"CTRLTokenizer"),wDr.forEach(t),sHe=r(sFe," (CTRL model)"),sFe.forEach(t),lHe=i(y),ts=n(y,"LI",{});var T7=s(ts);BJ=n(T7,"STRONG",{});var ADr=s(BJ);iHe=r(ADr,"deberta"),ADr.forEach(t),dHe=r(T7," \u2014 "),Sx=n(T7,"A",{href:!0});var LDr=s(Sx);cHe=r(LDr,"DebertaTokenizer"),LDr.forEach(t),fHe=r(T7," or "),Px=n(T7,"A",{href:!0});var BDr=s(Px);mHe=r(BDr,"DebertaTokenizerFast"),BDr.forEach(t),gHe=r(T7," (DeBERTa model)"),T7.forEach(t),hHe=i(y),zg=n(y,"LI",{});var lFe=s(zg);xJ=n(lFe,"STRONG",{});var xDr=s(xJ);pHe=r(xDr,"deberta-v2"),xDr.forEach(t),_He=r(lFe," \u2014 "),$x=n(lFe,"A",{href:!0});var kDr=s($x);uHe=r(kDr,"DebertaV2Tokenizer"),kDr.forEach(t),bHe=r(lFe," (DeBERTa-v2 model)"),lFe.forEach(t),vHe=i(y),as=n(y,"LI",{});var F7=s(as);kJ=n(F7,"STRONG",{});var RDr=s(kJ);THe=r(RDr,"distilbert"),RDr.forEach(t),FHe=r(F7," \u2014 "),Ix=n(F7,"A",{href:!0});var SDr=s(Ix);CHe=r(SDr,"DistilBertTokenizer"),SDr.forEach(t),MHe=r(F7," or "),Dx=n(F7,"A",{href:!0});var PDr=s(Dx);EHe=r(PDr,"DistilBertTokenizerFast"),PDr.forEach(t),yHe=r(F7," (DistilBERT model)"),F7.forEach(t),wHe=i(y),ns=n(y,"LI",{});var C7=s(ns);RJ=n(C7,"STRONG",{});var $Dr=s(RJ);AHe=r($Dr,"dpr"),$Dr.forEach(t),LHe=r(C7," \u2014 "),Nx=n(C7,"A",{href:!0});var IDr=s(Nx);BHe=r(IDr,"DPRQuestionEncoderTokenizer"),IDr.forEach(t),xHe=r(C7," or "),jx=n(C7,"A",{href:!0});var DDr=s(jx);kHe=r(DDr,"DPRQuestionEncoderTokenizerFast"),DDr.forEach(t),RHe=r(C7," (DPR model)"),C7.forEach(t),SHe=i(y),ss=n(y,"LI",{});var M7=s(ss);SJ=n(M7,"STRONG",{});var NDr=s(SJ);PHe=r(NDr,"electra"),NDr.forEach(t),$He=r(M7," \u2014 "),qx=n(M7,"A",{href:!0});var jDr=s(qx);IHe=r(jDr,"ElectraTokenizer"),jDr.forEach(t),DHe=r(M7," or "),Gx=n(M7,"A",{href:!0});var qDr=s(Gx);NHe=r(qDr,"ElectraTokenizerFast"),qDr.forEach(t),jHe=r(M7," (ELECTRA model)"),M7.forEach(t),qHe=i(y),Wg=n(y,"LI",{});var iFe=s(Wg);PJ=n(iFe,"STRONG",{});var GDr=s(PJ);GHe=r(GDr,"flaubert"),GDr.forEach(t),OHe=r(iFe," \u2014 "),Ox=n(iFe,"A",{href:!0});var ODr=s(Ox);XHe=r(ODr,"FlaubertTokenizer"),ODr.forEach(t),VHe=r(iFe," (FlauBERT model)"),iFe.forEach(t),zHe=i(y),ls=n(y,"LI",{});var E7=s(ls);$J=n(E7,"STRONG",{});var XDr=s($J);WHe=r(XDr,"fnet"),XDr.forEach(t),QHe=r(E7," \u2014 "),Xx=n(E7,"A",{href:!0});var VDr=s(Xx);HHe=r(VDr,"FNetTokenizer"),VDr.forEach(t),UHe=r(E7," or "),Vx=n(E7,"A",{href:!0});var zDr=s(Vx);JHe=r(zDr,"FNetTokenizerFast"),zDr.forEach(t),YHe=r(E7," (FNet model)"),E7.forEach(t),KHe=i(y),Qg=n(y,"LI",{});var dFe=s(Qg);IJ=n(dFe,"STRONG",{});var WDr=s(IJ);ZHe=r(WDr,"fsmt"),WDr.forEach(t),eUe=r(dFe," \u2014 "),zx=n(dFe,"A",{href:!0});var QDr=s(zx);oUe=r(QDr,"FSMTTokenizer"),QDr.forEach(t),rUe=r(dFe," (FairSeq Machine-Translation model)"),dFe.forEach(t),tUe=i(y),is=n(y,"LI",{});var y7=s(is);DJ=n(y7,"STRONG",{});var HDr=s(DJ);aUe=r(HDr,"funnel"),HDr.forEach(t),nUe=r(y7," \u2014 "),Wx=n(y7,"A",{href:!0});var UDr=s(Wx);sUe=r(UDr,"FunnelTokenizer"),UDr.forEach(t),lUe=r(y7," or "),Qx=n(y7,"A",{href:!0});var JDr=s(Qx);iUe=r(JDr,"FunnelTokenizerFast"),JDr.forEach(t),dUe=r(y7," (Funnel Transformer model)"),y7.forEach(t),cUe=i(y),ds=n(y,"LI",{});var w7=s(ds);NJ=n(w7,"STRONG",{});var YDr=s(NJ);fUe=r(YDr,"gpt2"),YDr.forEach(t),mUe=r(w7," \u2014 "),Hx=n(w7,"A",{href:!0});var KDr=s(Hx);gUe=r(KDr,"GPT2Tokenizer"),KDr.forEach(t),hUe=r(w7," or "),Ux=n(w7,"A",{href:!0});var ZDr=s(Ux);pUe=r(ZDr,"GPT2TokenizerFast"),ZDr.forEach(t),_Ue=r(w7," (OpenAI GPT-2 model)"),w7.forEach(t),uUe=i(y),cs=n(y,"LI",{});var A7=s(cs);jJ=n(A7,"STRONG",{});var eNr=s(jJ);bUe=r(eNr,"gpt_neo"),eNr.forEach(t),vUe=r(A7," \u2014 "),Jx=n(A7,"A",{href:!0});var oNr=s(Jx);TUe=r(oNr,"GPT2Tokenizer"),oNr.forEach(t),FUe=r(A7," or "),Yx=n(A7,"A",{href:!0});var rNr=s(Yx);CUe=r(rNr,"GPT2TokenizerFast"),rNr.forEach(t),MUe=r(A7," (GPT Neo model)"),A7.forEach(t),EUe=i(y),fs=n(y,"LI",{});var L7=s(fs);qJ=n(L7,"STRONG",{});var tNr=s(qJ);yUe=r(tNr,"herbert"),tNr.forEach(t),wUe=r(L7," \u2014 "),Kx=n(L7,"A",{href:!0});var aNr=s(Kx);AUe=r(aNr,"HerbertTokenizer"),aNr.forEach(t),LUe=r(L7," or "),Zx=n(L7,"A",{href:!0});var nNr=s(Zx);BUe=r(nNr,"HerbertTokenizerFast"),nNr.forEach(t),xUe=r(L7," (HerBERT model)"),L7.forEach(t),kUe=i(y),Hg=n(y,"LI",{});var cFe=s(Hg);GJ=n(cFe,"STRONG",{});var sNr=s(GJ);RUe=r(sNr,"hubert"),sNr.forEach(t),SUe=r(cFe," \u2014 "),ek=n(cFe,"A",{href:!0});var lNr=s(ek);PUe=r(lNr,"Wav2Vec2CTCTokenizer"),lNr.forEach(t),$Ue=r(cFe," (Hubert model)"),cFe.forEach(t),IUe=i(y),ms=n(y,"LI",{});var B7=s(ms);OJ=n(B7,"STRONG",{});var iNr=s(OJ);DUe=r(iNr,"ibert"),iNr.forEach(t),NUe=r(B7," \u2014 "),ok=n(B7,"A",{href:!0});var dNr=s(ok);jUe=r(dNr,"RobertaTokenizer"),dNr.forEach(t),qUe=r(B7," or "),rk=n(B7,"A",{href:!0});var cNr=s(rk);GUe=r(cNr,"RobertaTokenizerFast"),cNr.forEach(t),OUe=r(B7," (I-BERT model)"),B7.forEach(t),XUe=i(y),gs=n(y,"LI",{});var x7=s(gs);XJ=n(x7,"STRONG",{});var fNr=s(XJ);VUe=r(fNr,"layoutlm"),fNr.forEach(t),zUe=r(x7," \u2014 "),tk=n(x7,"A",{href:!0});var mNr=s(tk);WUe=r(mNr,"LayoutLMTokenizer"),mNr.forEach(t),QUe=r(x7," or "),ak=n(x7,"A",{href:!0});var gNr=s(ak);HUe=r(gNr,"LayoutLMTokenizerFast"),gNr.forEach(t),UUe=r(x7," (LayoutLM model)"),x7.forEach(t),JUe=i(y),hs=n(y,"LI",{});var k7=s(hs);VJ=n(k7,"STRONG",{});var hNr=s(VJ);YUe=r(hNr,"layoutlmv2"),hNr.forEach(t),KUe=r(k7," \u2014 "),nk=n(k7,"A",{href:!0});var pNr=s(nk);ZUe=r(pNr,"LayoutLMv2Tokenizer"),pNr.forEach(t),eJe=r(k7," or "),sk=n(k7,"A",{href:!0});var _Nr=s(sk);oJe=r(_Nr,"LayoutLMv2TokenizerFast"),_Nr.forEach(t),rJe=r(k7," (LayoutLMv2 model)"),k7.forEach(t),tJe=i(y),ps=n(y,"LI",{});var R7=s(ps);zJ=n(R7,"STRONG",{});var uNr=s(zJ);aJe=r(uNr,"layoutxlm"),uNr.forEach(t),nJe=r(R7," \u2014 "),lk=n(R7,"A",{href:!0});var bNr=s(lk);sJe=r(bNr,"LayoutXLMTokenizer"),bNr.forEach(t),lJe=r(R7," or "),ik=n(R7,"A",{href:!0});var vNr=s(ik);iJe=r(vNr,"LayoutXLMTokenizerFast"),vNr.forEach(t),dJe=r(R7," (LayoutXLM model)"),R7.forEach(t),cJe=i(y),_s=n(y,"LI",{});var S7=s(_s);WJ=n(S7,"STRONG",{});var TNr=s(WJ);fJe=r(TNr,"led"),TNr.forEach(t),mJe=r(S7," \u2014 "),dk=n(S7,"A",{href:!0});var FNr=s(dk);gJe=r(FNr,"LEDTokenizer"),FNr.forEach(t),hJe=r(S7," or "),ck=n(S7,"A",{href:!0});var CNr=s(ck);pJe=r(CNr,"LEDTokenizerFast"),CNr.forEach(t),_Je=r(S7," (LED model)"),S7.forEach(t),uJe=i(y),us=n(y,"LI",{});var P7=s(us);QJ=n(P7,"STRONG",{});var MNr=s(QJ);bJe=r(MNr,"longformer"),MNr.forEach(t),vJe=r(P7," \u2014 "),fk=n(P7,"A",{href:!0});var ENr=s(fk);TJe=r(ENr,"LongformerTokenizer"),ENr.forEach(t),FJe=r(P7," or "),mk=n(P7,"A",{href:!0});var yNr=s(mk);CJe=r(yNr,"LongformerTokenizerFast"),yNr.forEach(t),MJe=r(P7," (Longformer model)"),P7.forEach(t),EJe=i(y),Ug=n(y,"LI",{});var fFe=s(Ug);HJ=n(fFe,"STRONG",{});var wNr=s(HJ);yJe=r(wNr,"luke"),wNr.forEach(t),wJe=r(fFe," \u2014 "),gk=n(fFe,"A",{href:!0});var ANr=s(gk);AJe=r(ANr,"LukeTokenizer"),ANr.forEach(t),LJe=r(fFe," (LUKE model)"),fFe.forEach(t),BJe=i(y),bs=n(y,"LI",{});var $7=s(bs);UJ=n($7,"STRONG",{});var LNr=s(UJ);xJe=r(LNr,"lxmert"),LNr.forEach(t),kJe=r($7," \u2014 "),hk=n($7,"A",{href:!0});var BNr=s(hk);RJe=r(BNr,"LxmertTokenizer"),BNr.forEach(t),SJe=r($7," or "),pk=n($7,"A",{href:!0});var xNr=s(pk);PJe=r(xNr,"LxmertTokenizerFast"),xNr.forEach(t),$Je=r($7," (LXMERT model)"),$7.forEach(t),IJe=i(y),Jg=n(y,"LI",{});var mFe=s(Jg);JJ=n(mFe,"STRONG",{});var kNr=s(JJ);DJe=r(kNr,"m2m_100"),kNr.forEach(t),NJe=r(mFe," \u2014 "),_k=n(mFe,"A",{href:!0});var RNr=s(_k);jJe=r(RNr,"M2M100Tokenizer"),RNr.forEach(t),qJe=r(mFe," (M2M100 model)"),mFe.forEach(t),GJe=i(y),Yg=n(y,"LI",{});var gFe=s(Yg);YJ=n(gFe,"STRONG",{});var SNr=s(YJ);OJe=r(SNr,"marian"),SNr.forEach(t),XJe=r(gFe," \u2014 "),uk=n(gFe,"A",{href:!0});var PNr=s(uk);VJe=r(PNr,"MarianTokenizer"),PNr.forEach(t),zJe=r(gFe," (Marian model)"),gFe.forEach(t),WJe=i(y),vs=n(y,"LI",{});var I7=s(vs);KJ=n(I7,"STRONG",{});var $Nr=s(KJ);QJe=r($Nr,"mbart"),$Nr.forEach(t),HJe=r(I7," \u2014 "),bk=n(I7,"A",{href:!0});var INr=s(bk);UJe=r(INr,"MBartTokenizer"),INr.forEach(t),JJe=r(I7," or "),vk=n(I7,"A",{href:!0});var DNr=s(vk);YJe=r(DNr,"MBartTokenizerFast"),DNr.forEach(t),KJe=r(I7," (mBART model)"),I7.forEach(t),ZJe=i(y),Ts=n(y,"LI",{});var D7=s(Ts);ZJ=n(D7,"STRONG",{});var NNr=s(ZJ);eYe=r(NNr,"mbart50"),NNr.forEach(t),oYe=r(D7," \u2014 "),Tk=n(D7,"A",{href:!0});var jNr=s(Tk);rYe=r(jNr,"MBart50Tokenizer"),jNr.forEach(t),tYe=r(D7," or "),Fk=n(D7,"A",{href:!0});var qNr=s(Fk);aYe=r(qNr,"MBart50TokenizerFast"),qNr.forEach(t),nYe=r(D7," (mBART-50 model)"),D7.forEach(t),sYe=i(y),Kg=n(y,"LI",{});var hFe=s(Kg);eY=n(hFe,"STRONG",{});var GNr=s(eY);lYe=r(GNr,"mluke"),GNr.forEach(t),iYe=r(hFe," \u2014 "),Ck=n(hFe,"A",{href:!0});var ONr=s(Ck);dYe=r(ONr,"MLukeTokenizer"),ONr.forEach(t),cYe=r(hFe," (mLUKE model)"),hFe.forEach(t),fYe=i(y),Fs=n(y,"LI",{});var N7=s(Fs);oY=n(N7,"STRONG",{});var XNr=s(oY);mYe=r(XNr,"mobilebert"),XNr.forEach(t),gYe=r(N7," \u2014 "),Mk=n(N7,"A",{href:!0});var VNr=s(Mk);hYe=r(VNr,"MobileBertTokenizer"),VNr.forEach(t),pYe=r(N7," or "),Ek=n(N7,"A",{href:!0});var zNr=s(Ek);_Ye=r(zNr,"MobileBertTokenizerFast"),zNr.forEach(t),uYe=r(N7," (MobileBERT model)"),N7.forEach(t),bYe=i(y),Cs=n(y,"LI",{});var j7=s(Cs);rY=n(j7,"STRONG",{});var WNr=s(rY);vYe=r(WNr,"mpnet"),WNr.forEach(t),TYe=r(j7," \u2014 "),yk=n(j7,"A",{href:!0});var QNr=s(yk);FYe=r(QNr,"MPNetTokenizer"),QNr.forEach(t),CYe=r(j7," or "),wk=n(j7,"A",{href:!0});var HNr=s(wk);MYe=r(HNr,"MPNetTokenizerFast"),HNr.forEach(t),EYe=r(j7," (MPNet model)"),j7.forEach(t),yYe=i(y),Ms=n(y,"LI",{});var q7=s(Ms);tY=n(q7,"STRONG",{});var UNr=s(tY);wYe=r(UNr,"mt5"),UNr.forEach(t),AYe=r(q7," \u2014 "),Ak=n(q7,"A",{href:!0});var JNr=s(Ak);LYe=r(JNr,"MT5Tokenizer"),JNr.forEach(t),BYe=r(q7," or "),Lk=n(q7,"A",{href:!0});var YNr=s(Lk);xYe=r(YNr,"MT5TokenizerFast"),YNr.forEach(t),kYe=r(q7," (mT5 model)"),q7.forEach(t),RYe=i(y),Es=n(y,"LI",{});var G7=s(Es);aY=n(G7,"STRONG",{});var KNr=s(aY);SYe=r(KNr,"openai-gpt"),KNr.forEach(t),PYe=r(G7," \u2014 "),Bk=n(G7,"A",{href:!0});var ZNr=s(Bk);$Ye=r(ZNr,"OpenAIGPTTokenizer"),ZNr.forEach(t),IYe=r(G7," or "),xk=n(G7,"A",{href:!0});var ejr=s(xk);DYe=r(ejr,"OpenAIGPTTokenizerFast"),ejr.forEach(t),NYe=r(G7," (OpenAI GPT model)"),G7.forEach(t),jYe=i(y),ys=n(y,"LI",{});var O7=s(ys);nY=n(O7,"STRONG",{});var ojr=s(nY);qYe=r(ojr,"pegasus"),ojr.forEach(t),GYe=r(O7," \u2014 "),kk=n(O7,"A",{href:!0});var rjr=s(kk);OYe=r(rjr,"PegasusTokenizer"),rjr.forEach(t),XYe=r(O7," or "),Rk=n(O7,"A",{href:!0});var tjr=s(Rk);VYe=r(tjr,"PegasusTokenizerFast"),tjr.forEach(t),zYe=r(O7," (Pegasus model)"),O7.forEach(t),WYe=i(y),Zg=n(y,"LI",{});var pFe=s(Zg);sY=n(pFe,"STRONG",{});var ajr=s(sY);QYe=r(ajr,"perceiver"),ajr.forEach(t),HYe=r(pFe," \u2014 "),Sk=n(pFe,"A",{href:!0});var njr=s(Sk);UYe=r(njr,"PerceiverTokenizer"),njr.forEach(t),JYe=r(pFe," (Perceiver model)"),pFe.forEach(t),YYe=i(y),eh=n(y,"LI",{});var _Fe=s(eh);lY=n(_Fe,"STRONG",{});var sjr=s(lY);KYe=r(sjr,"phobert"),sjr.forEach(t),ZYe=r(_Fe," \u2014 "),Pk=n(_Fe,"A",{href:!0});var ljr=s(Pk);eKe=r(ljr,"PhobertTokenizer"),ljr.forEach(t),oKe=r(_Fe," (PhoBERT model)"),_Fe.forEach(t),rKe=i(y),oh=n(y,"LI",{});var uFe=s(oh);iY=n(uFe,"STRONG",{});var ijr=s(iY);tKe=r(ijr,"plbart"),ijr.forEach(t),aKe=r(uFe," \u2014 "),$k=n(uFe,"A",{href:!0});var djr=s($k);nKe=r(djr,"PLBartTokenizer"),djr.forEach(t),sKe=r(uFe," (PLBart model)"),uFe.forEach(t),lKe=i(y),rh=n(y,"LI",{});var bFe=s(rh);dY=n(bFe,"STRONG",{});var cjr=s(dY);iKe=r(cjr,"prophetnet"),cjr.forEach(t),dKe=r(bFe," \u2014 "),Ik=n(bFe,"A",{href:!0});var fjr=s(Ik);cKe=r(fjr,"ProphetNetTokenizer"),fjr.forEach(t),fKe=r(bFe," (ProphetNet model)"),bFe.forEach(t),mKe=i(y),ws=n(y,"LI",{});var X7=s(ws);cY=n(X7,"STRONG",{});var mjr=s(cY);gKe=r(mjr,"qdqbert"),mjr.forEach(t),hKe=r(X7," \u2014 "),Dk=n(X7,"A",{href:!0});var gjr=s(Dk);pKe=r(gjr,"BertTokenizer"),gjr.forEach(t),_Ke=r(X7," or "),Nk=n(X7,"A",{href:!0});var hjr=s(Nk);uKe=r(hjr,"BertTokenizerFast"),hjr.forEach(t),bKe=r(X7," (QDQBert model)"),X7.forEach(t),vKe=i(y),th=n(y,"LI",{});var vFe=s(th);fY=n(vFe,"STRONG",{});var pjr=s(fY);TKe=r(pjr,"rag"),pjr.forEach(t),FKe=r(vFe," \u2014 "),jk=n(vFe,"A",{href:!0});var _jr=s(jk);CKe=r(_jr,"RagTokenizer"),_jr.forEach(t),MKe=r(vFe," (RAG model)"),vFe.forEach(t),EKe=i(y),As=n(y,"LI",{});var V7=s(As);mY=n(V7,"STRONG",{});var ujr=s(mY);yKe=r(ujr,"realm"),ujr.forEach(t),wKe=r(V7," \u2014 "),qk=n(V7,"A",{href:!0});var bjr=s(qk);AKe=r(bjr,"RealmTokenizer"),bjr.forEach(t),LKe=r(V7," or "),Gk=n(V7,"A",{href:!0});var vjr=s(Gk);BKe=r(vjr,"RealmTokenizerFast"),vjr.forEach(t),xKe=r(V7," (Realm model)"),V7.forEach(t),kKe=i(y),Ls=n(y,"LI",{});var z7=s(Ls);gY=n(z7,"STRONG",{});var Tjr=s(gY);RKe=r(Tjr,"reformer"),Tjr.forEach(t),SKe=r(z7," \u2014 "),Ok=n(z7,"A",{href:!0});var Fjr=s(Ok);PKe=r(Fjr,"ReformerTokenizer"),Fjr.forEach(t),$Ke=r(z7," or "),Xk=n(z7,"A",{href:!0});var Cjr=s(Xk);IKe=r(Cjr,"ReformerTokenizerFast"),Cjr.forEach(t),DKe=r(z7," (Reformer model)"),z7.forEach(t),NKe=i(y),Bs=n(y,"LI",{});var W7=s(Bs);hY=n(W7,"STRONG",{});var Mjr=s(hY);jKe=r(Mjr,"rembert"),Mjr.forEach(t),qKe=r(W7," \u2014 "),Vk=n(W7,"A",{href:!0});var Ejr=s(Vk);GKe=r(Ejr,"RemBertTokenizer"),Ejr.forEach(t),OKe=r(W7," or "),zk=n(W7,"A",{href:!0});var yjr=s(zk);XKe=r(yjr,"RemBertTokenizerFast"),yjr.forEach(t),VKe=r(W7," (RemBERT model)"),W7.forEach(t),zKe=i(y),xs=n(y,"LI",{});var Q7=s(xs);pY=n(Q7,"STRONG",{});var wjr=s(pY);WKe=r(wjr,"retribert"),wjr.forEach(t),QKe=r(Q7," \u2014 "),Wk=n(Q7,"A",{href:!0});var Ajr=s(Wk);HKe=r(Ajr,"RetriBertTokenizer"),Ajr.forEach(t),UKe=r(Q7," or "),Qk=n(Q7,"A",{href:!0});var Ljr=s(Qk);JKe=r(Ljr,"RetriBertTokenizerFast"),Ljr.forEach(t),YKe=r(Q7," (RetriBERT model)"),Q7.forEach(t),KKe=i(y),ks=n(y,"LI",{});var H7=s(ks);_Y=n(H7,"STRONG",{});var Bjr=s(_Y);ZKe=r(Bjr,"roberta"),Bjr.forEach(t),eZe=r(H7," \u2014 "),Hk=n(H7,"A",{href:!0});var xjr=s(Hk);oZe=r(xjr,"RobertaTokenizer"),xjr.forEach(t),rZe=r(H7," or "),Uk=n(H7,"A",{href:!0});var kjr=s(Uk);tZe=r(kjr,"RobertaTokenizerFast"),kjr.forEach(t),aZe=r(H7," (RoBERTa model)"),H7.forEach(t),nZe=i(y),Rs=n(y,"LI",{});var U7=s(Rs);uY=n(U7,"STRONG",{});var Rjr=s(uY);sZe=r(Rjr,"roformer"),Rjr.forEach(t),lZe=r(U7," \u2014 "),Jk=n(U7,"A",{href:!0});var Sjr=s(Jk);iZe=r(Sjr,"RoFormerTokenizer"),Sjr.forEach(t),dZe=r(U7," or "),Yk=n(U7,"A",{href:!0});var Pjr=s(Yk);cZe=r(Pjr,"RoFormerTokenizerFast"),Pjr.forEach(t),fZe=r(U7," (RoFormer model)"),U7.forEach(t),mZe=i(y),ah=n(y,"LI",{});var TFe=s(ah);bY=n(TFe,"STRONG",{});var $jr=s(bY);gZe=r($jr,"speech_to_text"),$jr.forEach(t),hZe=r(TFe," \u2014 "),Kk=n(TFe,"A",{href:!0});var Ijr=s(Kk);pZe=r(Ijr,"Speech2TextTokenizer"),Ijr.forEach(t),_Ze=r(TFe," (Speech2Text model)"),TFe.forEach(t),uZe=i(y),nh=n(y,"LI",{});var FFe=s(nh);vY=n(FFe,"STRONG",{});var Djr=s(vY);bZe=r(Djr,"speech_to_text_2"),Djr.forEach(t),vZe=r(FFe," \u2014 "),Zk=n(FFe,"A",{href:!0});var Njr=s(Zk);TZe=r(Njr,"Speech2Text2Tokenizer"),Njr.forEach(t),FZe=r(FFe," (Speech2Text2 model)"),FFe.forEach(t),CZe=i(y),Ss=n(y,"LI",{});var J7=s(Ss);TY=n(J7,"STRONG",{});var jjr=s(TY);MZe=r(jjr,"splinter"),jjr.forEach(t),EZe=r(J7," \u2014 "),eR=n(J7,"A",{href:!0});var qjr=s(eR);yZe=r(qjr,"SplinterTokenizer"),qjr.forEach(t),wZe=r(J7," or "),oR=n(J7,"A",{href:!0});var Gjr=s(oR);AZe=r(Gjr,"SplinterTokenizerFast"),Gjr.forEach(t),LZe=r(J7," (Splinter model)"),J7.forEach(t),BZe=i(y),Ps=n(y,"LI",{});var Y7=s(Ps);FY=n(Y7,"STRONG",{});var Ojr=s(FY);xZe=r(Ojr,"squeezebert"),Ojr.forEach(t),kZe=r(Y7," \u2014 "),rR=n(Y7,"A",{href:!0});var Xjr=s(rR);RZe=r(Xjr,"SqueezeBertTokenizer"),Xjr.forEach(t),SZe=r(Y7," or "),tR=n(Y7,"A",{href:!0});var Vjr=s(tR);PZe=r(Vjr,"SqueezeBertTokenizerFast"),Vjr.forEach(t),$Ze=r(Y7," (SqueezeBERT model)"),Y7.forEach(t),IZe=i(y),$s=n(y,"LI",{});var K7=s($s);CY=n(K7,"STRONG",{});var zjr=s(CY);DZe=r(zjr,"t5"),zjr.forEach(t),NZe=r(K7," \u2014 "),aR=n(K7,"A",{href:!0});var Wjr=s(aR);jZe=r(Wjr,"T5Tokenizer"),Wjr.forEach(t),qZe=r(K7," or "),nR=n(K7,"A",{href:!0});var Qjr=s(nR);GZe=r(Qjr,"T5TokenizerFast"),Qjr.forEach(t),OZe=r(K7," (T5 model)"),K7.forEach(t),XZe=i(y),sh=n(y,"LI",{});var CFe=s(sh);MY=n(CFe,"STRONG",{});var Hjr=s(MY);VZe=r(Hjr,"tapas"),Hjr.forEach(t),zZe=r(CFe," \u2014 "),sR=n(CFe,"A",{href:!0});var Ujr=s(sR);WZe=r(Ujr,"TapasTokenizer"),Ujr.forEach(t),QZe=r(CFe," (TAPAS model)"),CFe.forEach(t),HZe=i(y),lh=n(y,"LI",{});var MFe=s(lh);EY=n(MFe,"STRONG",{});var Jjr=s(EY);UZe=r(Jjr,"transfo-xl"),Jjr.forEach(t),JZe=r(MFe," \u2014 "),lR=n(MFe,"A",{href:!0});var Yjr=s(lR);YZe=r(Yjr,"TransfoXLTokenizer"),Yjr.forEach(t),KZe=r(MFe," (Transformer-XL model)"),MFe.forEach(t),ZZe=i(y),ih=n(y,"LI",{});var EFe=s(ih);yY=n(EFe,"STRONG",{});var Kjr=s(yY);eeo=r(Kjr,"wav2vec2"),Kjr.forEach(t),oeo=r(EFe," \u2014 "),iR=n(EFe,"A",{href:!0});var Zjr=s(iR);reo=r(Zjr,"Wav2Vec2CTCTokenizer"),Zjr.forEach(t),teo=r(EFe," (Wav2Vec2 model)"),EFe.forEach(t),aeo=i(y),dh=n(y,"LI",{});var yFe=s(dh);wY=n(yFe,"STRONG",{});var eqr=s(wY);neo=r(eqr,"wav2vec2_phoneme"),eqr.forEach(t),seo=r(yFe," \u2014 "),dR=n(yFe,"A",{href:!0});var oqr=s(dR);leo=r(oqr,"Wav2Vec2PhonemeCTCTokenizer"),oqr.forEach(t),ieo=r(yFe," (Wav2Vec2Phoneme model)"),yFe.forEach(t),deo=i(y),Is=n(y,"LI",{});var Z7=s(Is);AY=n(Z7,"STRONG",{});var rqr=s(AY);ceo=r(rqr,"xglm"),rqr.forEach(t),feo=r(Z7," \u2014 "),cR=n(Z7,"A",{href:!0});var tqr=s(cR);meo=r(tqr,"XGLMTokenizer"),tqr.forEach(t),geo=r(Z7," or "),fR=n(Z7,"A",{href:!0});var aqr=s(fR);heo=r(aqr,"XGLMTokenizerFast"),aqr.forEach(t),peo=r(Z7," (XGLM model)"),Z7.forEach(t),_eo=i(y),ch=n(y,"LI",{});var wFe=s(ch);LY=n(wFe,"STRONG",{});var nqr=s(LY);ueo=r(nqr,"xlm"),nqr.forEach(t),beo=r(wFe," \u2014 "),mR=n(wFe,"A",{href:!0});var sqr=s(mR);veo=r(sqr,"XLMTokenizer"),sqr.forEach(t),Teo=r(wFe," (XLM model)"),wFe.forEach(t),Feo=i(y),fh=n(y,"LI",{});var AFe=s(fh);BY=n(AFe,"STRONG",{});var lqr=s(BY);Ceo=r(lqr,"xlm-prophetnet"),lqr.forEach(t),Meo=r(AFe," \u2014 "),gR=n(AFe,"A",{href:!0});var iqr=s(gR);Eeo=r(iqr,"XLMProphetNetTokenizer"),iqr.forEach(t),yeo=r(AFe," (XLMProphetNet model)"),AFe.forEach(t),weo=i(y),Ds=n(y,"LI",{});var e9=s(Ds);xY=n(e9,"STRONG",{});var dqr=s(xY);Aeo=r(dqr,"xlm-roberta"),dqr.forEach(t),Leo=r(e9," \u2014 "),hR=n(e9,"A",{href:!0});var cqr=s(hR);Beo=r(cqr,"XLMRobertaTokenizer"),cqr.forEach(t),xeo=r(e9," or "),pR=n(e9,"A",{href:!0});var fqr=s(pR);keo=r(fqr,"XLMRobertaTokenizerFast"),fqr.forEach(t),Reo=r(e9," (XLM-RoBERTa model)"),e9.forEach(t),Seo=i(y),Ns=n(y,"LI",{});var o9=s(Ns);kY=n(o9,"STRONG",{});var mqr=s(kY);Peo=r(mqr,"xlnet"),mqr.forEach(t),$eo=r(o9," \u2014 "),_R=n(o9,"A",{href:!0});var gqr=s(_R);Ieo=r(gqr,"XLNetTokenizer"),gqr.forEach(t),Deo=r(o9," or "),uR=n(o9,"A",{href:!0});var hqr=s(uR);Neo=r(hqr,"XLNetTokenizerFast"),hqr.forEach(t),jeo=r(o9," (XLNet model)"),o9.forEach(t),y.forEach(t),qeo=i(ha),RY=n(ha,"P",{});var pqr=s(RY);Geo=r(pqr,"Examples:"),pqr.forEach(t),Oeo=i(ha),m(k4.$$.fragment,ha),ha.forEach(t),Xeo=i(Xs),mh=n(Xs,"DIV",{class:!0});var OSe=s(mh);m(R4.$$.fragment,OSe),Veo=i(OSe),SY=n(OSe,"P",{});var _qr=s(SY);zeo=r(_qr,"Register a new tokenizer in this mapping."),_qr.forEach(t),OSe.forEach(t),Xs.forEach(t),Nke=i(c),Qi=n(c,"H2",{class:!0});var XSe=s(Qi);gh=n(XSe,"A",{id:!0,class:!0,href:!0});var uqr=s(gh);PY=n(uqr,"SPAN",{});var bqr=s(PY);m(S4.$$.fragment,bqr),bqr.forEach(t),uqr.forEach(t),Weo=i(XSe),$Y=n(XSe,"SPAN",{});var vqr=s($Y);Qeo=r(vqr,"AutoFeatureExtractor"),vqr.forEach(t),XSe.forEach(t),jke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(P4.$$.fragment,Vs),Heo=i(Vs),$4=n(Vs,"P",{});var VSe=s($4);Ueo=r(VSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=n(VSe,"A",{href:!0});var Tqr=s(bR);Jeo=r(Tqr,"AutoFeatureExtractor.from_pretrained()"),Tqr.forEach(t),Yeo=r(VSe," class method."),VSe.forEach(t),Keo=i(Vs),I4=n(Vs,"P",{});var zSe=s(I4);Zeo=r(zSe,"This class cannot be instantiated directly using "),IY=n(zSe,"CODE",{});var Fqr=s(IY);eoo=r(Fqr,"__init__()"),Fqr.forEach(t),ooo=r(zSe," (throws an error)."),zSe.forEach(t),roo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);m(D4.$$.fragment,Nt),too=i(Nt),DY=n(Nt,"P",{});var Cqr=s(DY);aoo=r(Cqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cqr.forEach(t),noo=i(Nt),Xa=n(Nt,"P",{});var _M=s(Xa);soo=r(_M,"The feature extractor class to instantiate is selected based on the "),NY=n(_M,"CODE",{});var Mqr=s(NY);loo=r(Mqr,"model_type"),Mqr.forEach(t),ioo=r(_M,` property of the config object
(either passed as an argument or loaded from `),jY=n(_M,"CODE",{});var Eqr=s(jY);doo=r(Eqr,"pretrained_model_name_or_path"),Eqr.forEach(t),coo=r(_M,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qY=n(_M,"CODE",{});var yqr=s(qY);foo=r(yqr,"pretrained_model_name_or_path"),yqr.forEach(t),moo=r(_M,":"),_M.forEach(t),goo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var LFe=s(hh);GY=n(LFe,"STRONG",{});var wqr=s(GY);hoo=r(wqr,"beit"),wqr.forEach(t),poo=r(LFe," \u2014 "),vR=n(LFe,"A",{href:!0});var Aqr=s(vR);_oo=r(Aqr,"BeitFeatureExtractor"),Aqr.forEach(t),uoo=r(LFe," (BEiT model)"),LFe.forEach(t),boo=i(ne),ph=n(ne,"LI",{});var BFe=s(ph);OY=n(BFe,"STRONG",{});var Lqr=s(OY);voo=r(Lqr,"clip"),Lqr.forEach(t),Too=r(BFe," \u2014 "),TR=n(BFe,"A",{href:!0});var Bqr=s(TR);Foo=r(Bqr,"CLIPFeatureExtractor"),Bqr.forEach(t),Coo=r(BFe," (CLIP model)"),BFe.forEach(t),Moo=i(ne),_h=n(ne,"LI",{});var xFe=s(_h);XY=n(xFe,"STRONG",{});var xqr=s(XY);Eoo=r(xqr,"convnext"),xqr.forEach(t),yoo=r(xFe," \u2014 "),FR=n(xFe,"A",{href:!0});var kqr=s(FR);woo=r(kqr,"ConvNextFeatureExtractor"),kqr.forEach(t),Aoo=r(xFe," (ConvNext model)"),xFe.forEach(t),Loo=i(ne),uh=n(ne,"LI",{});var kFe=s(uh);VY=n(kFe,"STRONG",{});var Rqr=s(VY);Boo=r(Rqr,"deit"),Rqr.forEach(t),xoo=r(kFe," \u2014 "),CR=n(kFe,"A",{href:!0});var Sqr=s(CR);koo=r(Sqr,"DeiTFeatureExtractor"),Sqr.forEach(t),Roo=r(kFe," (DeiT model)"),kFe.forEach(t),Soo=i(ne),bh=n(ne,"LI",{});var RFe=s(bh);zY=n(RFe,"STRONG",{});var Pqr=s(zY);Poo=r(Pqr,"detr"),Pqr.forEach(t),$oo=r(RFe," \u2014 "),MR=n(RFe,"A",{href:!0});var $qr=s(MR);Ioo=r($qr,"DetrFeatureExtractor"),$qr.forEach(t),Doo=r(RFe," (DETR model)"),RFe.forEach(t),Noo=i(ne),vh=n(ne,"LI",{});var SFe=s(vh);WY=n(SFe,"STRONG",{});var Iqr=s(WY);joo=r(Iqr,"hubert"),Iqr.forEach(t),qoo=r(SFe," \u2014 "),ER=n(SFe,"A",{href:!0});var Dqr=s(ER);Goo=r(Dqr,"Wav2Vec2FeatureExtractor"),Dqr.forEach(t),Ooo=r(SFe," (Hubert model)"),SFe.forEach(t),Xoo=i(ne),Th=n(ne,"LI",{});var PFe=s(Th);QY=n(PFe,"STRONG",{});var Nqr=s(QY);Voo=r(Nqr,"layoutlmv2"),Nqr.forEach(t),zoo=r(PFe," \u2014 "),yR=n(PFe,"A",{href:!0});var jqr=s(yR);Woo=r(jqr,"LayoutLMv2FeatureExtractor"),jqr.forEach(t),Qoo=r(PFe," (LayoutLMv2 model)"),PFe.forEach(t),Hoo=i(ne),Fh=n(ne,"LI",{});var $Fe=s(Fh);HY=n($Fe,"STRONG",{});var qqr=s(HY);Uoo=r(qqr,"maskformer"),qqr.forEach(t),Joo=r($Fe," \u2014 "),wR=n($Fe,"A",{href:!0});var Gqr=s(wR);Yoo=r(Gqr,"MaskFormerFeatureExtractor"),Gqr.forEach(t),Koo=r($Fe," (MaskFormer model)"),$Fe.forEach(t),Zoo=i(ne),Ch=n(ne,"LI",{});var IFe=s(Ch);UY=n(IFe,"STRONG",{});var Oqr=s(UY);ero=r(Oqr,"perceiver"),Oqr.forEach(t),oro=r(IFe," \u2014 "),AR=n(IFe,"A",{href:!0});var Xqr=s(AR);rro=r(Xqr,"PerceiverFeatureExtractor"),Xqr.forEach(t),tro=r(IFe," (Perceiver model)"),IFe.forEach(t),aro=i(ne),Mh=n(ne,"LI",{});var DFe=s(Mh);JY=n(DFe,"STRONG",{});var Vqr=s(JY);nro=r(Vqr,"poolformer"),Vqr.forEach(t),sro=r(DFe," \u2014 "),LR=n(DFe,"A",{href:!0});var zqr=s(LR);lro=r(zqr,"PoolFormerFeatureExtractor"),zqr.forEach(t),iro=r(DFe," (PoolFormer model)"),DFe.forEach(t),dro=i(ne),Eh=n(ne,"LI",{});var NFe=s(Eh);YY=n(NFe,"STRONG",{});var Wqr=s(YY);cro=r(Wqr,"resnet"),Wqr.forEach(t),fro=r(NFe," \u2014 "),BR=n(NFe,"A",{href:!0});var Qqr=s(BR);mro=r(Qqr,"ConvNextFeatureExtractor"),Qqr.forEach(t),gro=r(NFe," (ResNet model)"),NFe.forEach(t),hro=i(ne),yh=n(ne,"LI",{});var jFe=s(yh);KY=n(jFe,"STRONG",{});var Hqr=s(KY);pro=r(Hqr,"segformer"),Hqr.forEach(t),_ro=r(jFe," \u2014 "),xR=n(jFe,"A",{href:!0});var Uqr=s(xR);uro=r(Uqr,"SegformerFeatureExtractor"),Uqr.forEach(t),bro=r(jFe," (SegFormer model)"),jFe.forEach(t),vro=i(ne),wh=n(ne,"LI",{});var qFe=s(wh);ZY=n(qFe,"STRONG",{});var Jqr=s(ZY);Tro=r(Jqr,"speech_to_text"),Jqr.forEach(t),Fro=r(qFe," \u2014 "),kR=n(qFe,"A",{href:!0});var Yqr=s(kR);Cro=r(Yqr,"Speech2TextFeatureExtractor"),Yqr.forEach(t),Mro=r(qFe," (Speech2Text model)"),qFe.forEach(t),Ero=i(ne),Ah=n(ne,"LI",{});var GFe=s(Ah);eK=n(GFe,"STRONG",{});var Kqr=s(eK);yro=r(Kqr,"swin"),Kqr.forEach(t),wro=r(GFe," \u2014 "),RR=n(GFe,"A",{href:!0});var Zqr=s(RR);Aro=r(Zqr,"ViTFeatureExtractor"),Zqr.forEach(t),Lro=r(GFe," (Swin model)"),GFe.forEach(t),Bro=i(ne),Lh=n(ne,"LI",{});var OFe=s(Lh);oK=n(OFe,"STRONG",{});var eGr=s(oK);xro=r(eGr,"van"),eGr.forEach(t),kro=r(OFe," \u2014 "),SR=n(OFe,"A",{href:!0});var oGr=s(SR);Rro=r(oGr,"ConvNextFeatureExtractor"),oGr.forEach(t),Sro=r(OFe," (VAN model)"),OFe.forEach(t),Pro=i(ne),Bh=n(ne,"LI",{});var XFe=s(Bh);rK=n(XFe,"STRONG",{});var rGr=s(rK);$ro=r(rGr,"vit"),rGr.forEach(t),Iro=r(XFe," \u2014 "),PR=n(XFe,"A",{href:!0});var tGr=s(PR);Dro=r(tGr,"ViTFeatureExtractor"),tGr.forEach(t),Nro=r(XFe," (ViT model)"),XFe.forEach(t),jro=i(ne),xh=n(ne,"LI",{});var VFe=s(xh);tK=n(VFe,"STRONG",{});var aGr=s(tK);qro=r(aGr,"vit_mae"),aGr.forEach(t),Gro=r(VFe," \u2014 "),$R=n(VFe,"A",{href:!0});var nGr=s($R);Oro=r(nGr,"ViTFeatureExtractor"),nGr.forEach(t),Xro=r(VFe," (ViTMAE model)"),VFe.forEach(t),Vro=i(ne),kh=n(ne,"LI",{});var zFe=s(kh);aK=n(zFe,"STRONG",{});var sGr=s(aK);zro=r(sGr,"wav2vec2"),sGr.forEach(t),Wro=r(zFe," \u2014 "),IR=n(zFe,"A",{href:!0});var lGr=s(IR);Qro=r(lGr,"Wav2Vec2FeatureExtractor"),lGr.forEach(t),Hro=r(zFe," (Wav2Vec2 model)"),zFe.forEach(t),ne.forEach(t),Uro=i(Nt),m(Rh.$$.fragment,Nt),Jro=i(Nt),nK=n(Nt,"P",{});var iGr=s(nK);Yro=r(iGr,"Examples:"),iGr.forEach(t),Kro=i(Nt),m(N4.$$.fragment,Nt),Nt.forEach(t),Zro=i(Vs),Sh=n(Vs,"DIV",{class:!0});var WSe=s(Sh);m(j4.$$.fragment,WSe),eto=i(WSe),sK=n(WSe,"P",{});var dGr=s(sK);oto=r(dGr,"Register a new feature extractor for this class."),dGr.forEach(t),WSe.forEach(t),Vs.forEach(t),qke=i(c),Hi=n(c,"H2",{class:!0});var QSe=s(Hi);Ph=n(QSe,"A",{id:!0,class:!0,href:!0});var cGr=s(Ph);lK=n(cGr,"SPAN",{});var fGr=s(lK);m(q4.$$.fragment,fGr),fGr.forEach(t),cGr.forEach(t),rto=i(QSe),iK=n(QSe,"SPAN",{});var mGr=s(iK);tto=r(mGr,"AutoProcessor"),mGr.forEach(t),QSe.forEach(t),Gke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(G4.$$.fragment,zs),ato=i(zs),O4=n(zs,"P",{});var HSe=s(O4);nto=r(HSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=n(HSe,"A",{href:!0});var gGr=s(DR);sto=r(gGr,"AutoProcessor.from_pretrained()"),gGr.forEach(t),lto=r(HSe," class method."),HSe.forEach(t),ito=i(zs),X4=n(zs,"P",{});var USe=s(X4);dto=r(USe,"This class cannot be instantiated directly using "),dK=n(USe,"CODE",{});var hGr=s(dK);cto=r(hGr,"__init__()"),hGr.forEach(t),fto=r(USe," (throws an error)."),USe.forEach(t),mto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(V4.$$.fragment,jt),gto=i(jt),cK=n(jt,"P",{});var pGr=s(cK);hto=r(pGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pGr.forEach(t),pto=i(jt),Ui=n(jt,"P",{});var iW=s(Ui);_to=r(iW,"The processor class to instantiate is selected based on the "),fK=n(iW,"CODE",{});var _Gr=s(fK);uto=r(_Gr,"model_type"),_Gr.forEach(t),bto=r(iW,` property of the config object (either
passed as an argument or loaded from `),mK=n(iW,"CODE",{});var uGr=s(mK);vto=r(uGr,"pretrained_model_name_or_path"),uGr.forEach(t),Tto=r(iW," if possible):"),iW.forEach(t),Fto=i(jt),xe=n(jt,"UL",{});var jo=s(xe);$h=n(jo,"LI",{});var WFe=s($h);gK=n(WFe,"STRONG",{});var bGr=s(gK);Cto=r(bGr,"clip"),bGr.forEach(t),Mto=r(WFe," \u2014 "),NR=n(WFe,"A",{href:!0});var vGr=s(NR);Eto=r(vGr,"CLIPProcessor"),vGr.forEach(t),yto=r(WFe," (CLIP model)"),WFe.forEach(t),wto=i(jo),Ih=n(jo,"LI",{});var QFe=s(Ih);hK=n(QFe,"STRONG",{});var TGr=s(hK);Ato=r(TGr,"layoutlmv2"),TGr.forEach(t),Lto=r(QFe," \u2014 "),jR=n(QFe,"A",{href:!0});var FGr=s(jR);Bto=r(FGr,"LayoutLMv2Processor"),FGr.forEach(t),xto=r(QFe," (LayoutLMv2 model)"),QFe.forEach(t),kto=i(jo),Dh=n(jo,"LI",{});var HFe=s(Dh);pK=n(HFe,"STRONG",{});var CGr=s(pK);Rto=r(CGr,"layoutxlm"),CGr.forEach(t),Sto=r(HFe," \u2014 "),qR=n(HFe,"A",{href:!0});var MGr=s(qR);Pto=r(MGr,"LayoutXLMProcessor"),MGr.forEach(t),$to=r(HFe," (LayoutXLM model)"),HFe.forEach(t),Ito=i(jo),Nh=n(jo,"LI",{});var UFe=s(Nh);_K=n(UFe,"STRONG",{});var EGr=s(_K);Dto=r(EGr,"speech_to_text"),EGr.forEach(t),Nto=r(UFe," \u2014 "),GR=n(UFe,"A",{href:!0});var yGr=s(GR);jto=r(yGr,"Speech2TextProcessor"),yGr.forEach(t),qto=r(UFe," (Speech2Text model)"),UFe.forEach(t),Gto=i(jo),jh=n(jo,"LI",{});var JFe=s(jh);uK=n(JFe,"STRONG",{});var wGr=s(uK);Oto=r(wGr,"speech_to_text_2"),wGr.forEach(t),Xto=r(JFe," \u2014 "),OR=n(JFe,"A",{href:!0});var AGr=s(OR);Vto=r(AGr,"Speech2Text2Processor"),AGr.forEach(t),zto=r(JFe," (Speech2Text2 model)"),JFe.forEach(t),Wto=i(jo),qh=n(jo,"LI",{});var YFe=s(qh);bK=n(YFe,"STRONG",{});var LGr=s(bK);Qto=r(LGr,"trocr"),LGr.forEach(t),Hto=r(YFe," \u2014 "),XR=n(YFe,"A",{href:!0});var BGr=s(XR);Uto=r(BGr,"TrOCRProcessor"),BGr.forEach(t),Jto=r(YFe," (TrOCR model)"),YFe.forEach(t),Yto=i(jo),Gh=n(jo,"LI",{});var KFe=s(Gh);vK=n(KFe,"STRONG",{});var xGr=s(vK);Kto=r(xGr,"vision-text-dual-encoder"),xGr.forEach(t),Zto=r(KFe," \u2014 "),VR=n(KFe,"A",{href:!0});var kGr=s(VR);eao=r(kGr,"VisionTextDualEncoderProcessor"),kGr.forEach(t),oao=r(KFe," (VisionTextDualEncoder model)"),KFe.forEach(t),rao=i(jo),Oh=n(jo,"LI",{});var ZFe=s(Oh);TK=n(ZFe,"STRONG",{});var RGr=s(TK);tao=r(RGr,"wav2vec2"),RGr.forEach(t),aao=r(ZFe," \u2014 "),zR=n(ZFe,"A",{href:!0});var SGr=s(zR);nao=r(SGr,"Wav2Vec2Processor"),SGr.forEach(t),sao=r(ZFe," (Wav2Vec2 model)"),ZFe.forEach(t),jo.forEach(t),lao=i(jt),m(Xh.$$.fragment,jt),iao=i(jt),FK=n(jt,"P",{});var PGr=s(FK);dao=r(PGr,"Examples:"),PGr.forEach(t),cao=i(jt),m(z4.$$.fragment,jt),jt.forEach(t),fao=i(zs),Vh=n(zs,"DIV",{class:!0});var JSe=s(Vh);m(W4.$$.fragment,JSe),mao=i(JSe),CK=n(JSe,"P",{});var $Gr=s(CK);gao=r($Gr,"Register a new processor for this class."),$Gr.forEach(t),JSe.forEach(t),zs.forEach(t),Oke=i(c),Ji=n(c,"H2",{class:!0});var YSe=s(Ji);zh=n(YSe,"A",{id:!0,class:!0,href:!0});var IGr=s(zh);MK=n(IGr,"SPAN",{});var DGr=s(MK);m(Q4.$$.fragment,DGr),DGr.forEach(t),IGr.forEach(t),hao=i(YSe),EK=n(YSe,"SPAN",{});var NGr=s(EK);pao=r(NGr,"AutoModel"),NGr.forEach(t),YSe.forEach(t),Xke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(H4.$$.fragment,Ws),_ao=i(Ws),Yi=n(Ws,"P",{});var dW=s(Yi);uao=r(dW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yK=n(dW,"CODE",{});var jGr=s(yK);bao=r(jGr,"from_pretrained()"),jGr.forEach(t),vao=r(dW,"class method or the "),wK=n(dW,"CODE",{});var qGr=s(wK);Tao=r(qGr,"from_config()"),qGr.forEach(t),Fao=r(dW,`class
method.`),dW.forEach(t),Cao=i(Ws),U4=n(Ws,"P",{});var KSe=s(U4);Mao=r(KSe,"This class cannot be instantiated directly using "),AK=n(KSe,"CODE",{});var GGr=s(AK);Eao=r(GGr,"__init__()"),GGr.forEach(t),yao=r(KSe," (throws an error)."),KSe.forEach(t),wao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(J4.$$.fragment,Qs),Aao=i(Qs),LK=n(Qs,"P",{});var OGr=s(LK);Lao=r(OGr,"Instantiates one of the base model classes of the library from a configuration."),OGr.forEach(t),Bao=i(Qs),Ki=n(Qs,"P",{});var cW=s(Ki);xao=r(cW,`Note:
Loading a model from its configuration file does `),BK=n(cW,"STRONG",{});var XGr=s(BK);kao=r(XGr,"not"),XGr.forEach(t),Rao=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(cW,"CODE",{});var VGr=s(xK);Sao=r(VGr,"from_pretrained()"),VGr.forEach(t),Pao=r(cW,"to load the model weights."),cW.forEach(t),$ao=i(Qs),kK=n(Qs,"P",{});var zGr=s(kK);Iao=r(zGr,"Examples:"),zGr.forEach(t),Dao=i(Qs),m(Y4.$$.fragment,Qs),Qs.forEach(t),Nao=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(K4.$$.fragment,qt),jao=i(qt),RK=n(qt,"P",{});var WGr=s(RK);qao=r(WGr,"Instantiate one of the base model classes of the library from a pretrained model."),WGr.forEach(t),Gao=i(qt),Va=n(qt,"P",{});var uM=s(Va);Oao=r(uM,"The model class to instantiate is selected based on the "),SK=n(uM,"CODE",{});var QGr=s(SK);Xao=r(QGr,"model_type"),QGr.forEach(t),Vao=r(uM,` property of the config object (either
passed as an argument or loaded from `),PK=n(uM,"CODE",{});var HGr=s(PK);zao=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),Wao=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$K=n(uM,"CODE",{});var UGr=s($K);Qao=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),Hao=r(uM,":"),uM.forEach(t),Uao=i(qt),F=n(qt,"UL",{});var C=s(F);Wh=n(C,"LI",{});var eCe=s(Wh);IK=n(eCe,"STRONG",{});var JGr=s(IK);Jao=r(JGr,"albert"),JGr.forEach(t),Yao=r(eCe," \u2014 "),WR=n(eCe,"A",{href:!0});var YGr=s(WR);Kao=r(YGr,"AlbertModel"),YGr.forEach(t),Zao=r(eCe," (ALBERT model)"),eCe.forEach(t),eno=i(C),Qh=n(C,"LI",{});var oCe=s(Qh);DK=n(oCe,"STRONG",{});var KGr=s(DK);ono=r(KGr,"bart"),KGr.forEach(t),rno=r(oCe," \u2014 "),QR=n(oCe,"A",{href:!0});var ZGr=s(QR);tno=r(ZGr,"BartModel"),ZGr.forEach(t),ano=r(oCe," (BART model)"),oCe.forEach(t),nno=i(C),Hh=n(C,"LI",{});var rCe=s(Hh);NK=n(rCe,"STRONG",{});var eOr=s(NK);sno=r(eOr,"beit"),eOr.forEach(t),lno=r(rCe," \u2014 "),HR=n(rCe,"A",{href:!0});var oOr=s(HR);ino=r(oOr,"BeitModel"),oOr.forEach(t),dno=r(rCe," (BEiT model)"),rCe.forEach(t),cno=i(C),Uh=n(C,"LI",{});var tCe=s(Uh);jK=n(tCe,"STRONG",{});var rOr=s(jK);fno=r(rOr,"bert"),rOr.forEach(t),mno=r(tCe," \u2014 "),UR=n(tCe,"A",{href:!0});var tOr=s(UR);gno=r(tOr,"BertModel"),tOr.forEach(t),hno=r(tCe," (BERT model)"),tCe.forEach(t),pno=i(C),Jh=n(C,"LI",{});var aCe=s(Jh);qK=n(aCe,"STRONG",{});var aOr=s(qK);_no=r(aOr,"bert-generation"),aOr.forEach(t),uno=r(aCe," \u2014 "),JR=n(aCe,"A",{href:!0});var nOr=s(JR);bno=r(nOr,"BertGenerationEncoder"),nOr.forEach(t),vno=r(aCe," (Bert Generation model)"),aCe.forEach(t),Tno=i(C),Yh=n(C,"LI",{});var nCe=s(Yh);GK=n(nCe,"STRONG",{});var sOr=s(GK);Fno=r(sOr,"big_bird"),sOr.forEach(t),Cno=r(nCe," \u2014 "),YR=n(nCe,"A",{href:!0});var lOr=s(YR);Mno=r(lOr,"BigBirdModel"),lOr.forEach(t),Eno=r(nCe," (BigBird model)"),nCe.forEach(t),yno=i(C),Kh=n(C,"LI",{});var sCe=s(Kh);OK=n(sCe,"STRONG",{});var iOr=s(OK);wno=r(iOr,"bigbird_pegasus"),iOr.forEach(t),Ano=r(sCe," \u2014 "),KR=n(sCe,"A",{href:!0});var dOr=s(KR);Lno=r(dOr,"BigBirdPegasusModel"),dOr.forEach(t),Bno=r(sCe," (BigBirdPegasus model)"),sCe.forEach(t),xno=i(C),Zh=n(C,"LI",{});var lCe=s(Zh);XK=n(lCe,"STRONG",{});var cOr=s(XK);kno=r(cOr,"blenderbot"),cOr.forEach(t),Rno=r(lCe," \u2014 "),ZR=n(lCe,"A",{href:!0});var fOr=s(ZR);Sno=r(fOr,"BlenderbotModel"),fOr.forEach(t),Pno=r(lCe," (Blenderbot model)"),lCe.forEach(t),$no=i(C),ep=n(C,"LI",{});var iCe=s(ep);VK=n(iCe,"STRONG",{});var mOr=s(VK);Ino=r(mOr,"blenderbot-small"),mOr.forEach(t),Dno=r(iCe," \u2014 "),eS=n(iCe,"A",{href:!0});var gOr=s(eS);Nno=r(gOr,"BlenderbotSmallModel"),gOr.forEach(t),jno=r(iCe," (BlenderbotSmall model)"),iCe.forEach(t),qno=i(C),op=n(C,"LI",{});var dCe=s(op);zK=n(dCe,"STRONG",{});var hOr=s(zK);Gno=r(hOr,"camembert"),hOr.forEach(t),Ono=r(dCe," \u2014 "),oS=n(dCe,"A",{href:!0});var pOr=s(oS);Xno=r(pOr,"CamembertModel"),pOr.forEach(t),Vno=r(dCe," (CamemBERT model)"),dCe.forEach(t),zno=i(C),rp=n(C,"LI",{});var cCe=s(rp);WK=n(cCe,"STRONG",{});var _Or=s(WK);Wno=r(_Or,"canine"),_Or.forEach(t),Qno=r(cCe," \u2014 "),rS=n(cCe,"A",{href:!0});var uOr=s(rS);Hno=r(uOr,"CanineModel"),uOr.forEach(t),Uno=r(cCe," (Canine model)"),cCe.forEach(t),Jno=i(C),tp=n(C,"LI",{});var fCe=s(tp);QK=n(fCe,"STRONG",{});var bOr=s(QK);Yno=r(bOr,"clip"),bOr.forEach(t),Kno=r(fCe," \u2014 "),tS=n(fCe,"A",{href:!0});var vOr=s(tS);Zno=r(vOr,"CLIPModel"),vOr.forEach(t),eso=r(fCe," (CLIP model)"),fCe.forEach(t),oso=i(C),ap=n(C,"LI",{});var mCe=s(ap);HK=n(mCe,"STRONG",{});var TOr=s(HK);rso=r(TOr,"convbert"),TOr.forEach(t),tso=r(mCe," \u2014 "),aS=n(mCe,"A",{href:!0});var FOr=s(aS);aso=r(FOr,"ConvBertModel"),FOr.forEach(t),nso=r(mCe," (ConvBERT model)"),mCe.forEach(t),sso=i(C),np=n(C,"LI",{});var gCe=s(np);UK=n(gCe,"STRONG",{});var COr=s(UK);lso=r(COr,"convnext"),COr.forEach(t),iso=r(gCe," \u2014 "),nS=n(gCe,"A",{href:!0});var MOr=s(nS);dso=r(MOr,"ConvNextModel"),MOr.forEach(t),cso=r(gCe," (ConvNext model)"),gCe.forEach(t),fso=i(C),sp=n(C,"LI",{});var hCe=s(sp);JK=n(hCe,"STRONG",{});var EOr=s(JK);mso=r(EOr,"ctrl"),EOr.forEach(t),gso=r(hCe," \u2014 "),sS=n(hCe,"A",{href:!0});var yOr=s(sS);hso=r(yOr,"CTRLModel"),yOr.forEach(t),pso=r(hCe," (CTRL model)"),hCe.forEach(t),_so=i(C),lp=n(C,"LI",{});var pCe=s(lp);YK=n(pCe,"STRONG",{});var wOr=s(YK);uso=r(wOr,"data2vec-audio"),wOr.forEach(t),bso=r(pCe," \u2014 "),lS=n(pCe,"A",{href:!0});var AOr=s(lS);vso=r(AOr,"Data2VecAudioModel"),AOr.forEach(t),Tso=r(pCe," (Data2VecAudio model)"),pCe.forEach(t),Fso=i(C),ip=n(C,"LI",{});var _Ce=s(ip);KK=n(_Ce,"STRONG",{});var LOr=s(KK);Cso=r(LOr,"data2vec-text"),LOr.forEach(t),Mso=r(_Ce," \u2014 "),iS=n(_Ce,"A",{href:!0});var BOr=s(iS);Eso=r(BOr,"Data2VecTextModel"),BOr.forEach(t),yso=r(_Ce," (Data2VecText model)"),_Ce.forEach(t),wso=i(C),dp=n(C,"LI",{});var uCe=s(dp);ZK=n(uCe,"STRONG",{});var xOr=s(ZK);Aso=r(xOr,"deberta"),xOr.forEach(t),Lso=r(uCe," \u2014 "),dS=n(uCe,"A",{href:!0});var kOr=s(dS);Bso=r(kOr,"DebertaModel"),kOr.forEach(t),xso=r(uCe," (DeBERTa model)"),uCe.forEach(t),kso=i(C),cp=n(C,"LI",{});var bCe=s(cp);eZ=n(bCe,"STRONG",{});var ROr=s(eZ);Rso=r(ROr,"deberta-v2"),ROr.forEach(t),Sso=r(bCe," \u2014 "),cS=n(bCe,"A",{href:!0});var SOr=s(cS);Pso=r(SOr,"DebertaV2Model"),SOr.forEach(t),$so=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),Iso=i(C),fp=n(C,"LI",{});var vCe=s(fp);oZ=n(vCe,"STRONG",{});var POr=s(oZ);Dso=r(POr,"decision_transformer"),POr.forEach(t),Nso=r(vCe," \u2014 "),fS=n(vCe,"A",{href:!0});var $Or=s(fS);jso=r($Or,"DecisionTransformerModel"),$Or.forEach(t),qso=r(vCe," (Decision Transformer model)"),vCe.forEach(t),Gso=i(C),mp=n(C,"LI",{});var TCe=s(mp);rZ=n(TCe,"STRONG",{});var IOr=s(rZ);Oso=r(IOr,"deit"),IOr.forEach(t),Xso=r(TCe," \u2014 "),mS=n(TCe,"A",{href:!0});var DOr=s(mS);Vso=r(DOr,"DeiTModel"),DOr.forEach(t),zso=r(TCe," (DeiT model)"),TCe.forEach(t),Wso=i(C),gp=n(C,"LI",{});var FCe=s(gp);tZ=n(FCe,"STRONG",{});var NOr=s(tZ);Qso=r(NOr,"detr"),NOr.forEach(t),Hso=r(FCe," \u2014 "),gS=n(FCe,"A",{href:!0});var jOr=s(gS);Uso=r(jOr,"DetrModel"),jOr.forEach(t),Jso=r(FCe," (DETR model)"),FCe.forEach(t),Yso=i(C),hp=n(C,"LI",{});var CCe=s(hp);aZ=n(CCe,"STRONG",{});var qOr=s(aZ);Kso=r(qOr,"distilbert"),qOr.forEach(t),Zso=r(CCe," \u2014 "),hS=n(CCe,"A",{href:!0});var GOr=s(hS);elo=r(GOr,"DistilBertModel"),GOr.forEach(t),olo=r(CCe," (DistilBERT model)"),CCe.forEach(t),rlo=i(C),pp=n(C,"LI",{});var MCe=s(pp);nZ=n(MCe,"STRONG",{});var OOr=s(nZ);tlo=r(OOr,"dpr"),OOr.forEach(t),alo=r(MCe," \u2014 "),pS=n(MCe,"A",{href:!0});var XOr=s(pS);nlo=r(XOr,"DPRQuestionEncoder"),XOr.forEach(t),slo=r(MCe," (DPR model)"),MCe.forEach(t),llo=i(C),_p=n(C,"LI",{});var ECe=s(_p);sZ=n(ECe,"STRONG",{});var VOr=s(sZ);ilo=r(VOr,"dpt"),VOr.forEach(t),dlo=r(ECe," \u2014 "),_S=n(ECe,"A",{href:!0});var zOr=s(_S);clo=r(zOr,"DPTModel"),zOr.forEach(t),flo=r(ECe," (DPT model)"),ECe.forEach(t),mlo=i(C),up=n(C,"LI",{});var yCe=s(up);lZ=n(yCe,"STRONG",{});var WOr=s(lZ);glo=r(WOr,"electra"),WOr.forEach(t),hlo=r(yCe," \u2014 "),uS=n(yCe,"A",{href:!0});var QOr=s(uS);plo=r(QOr,"ElectraModel"),QOr.forEach(t),_lo=r(yCe," (ELECTRA model)"),yCe.forEach(t),ulo=i(C),bp=n(C,"LI",{});var wCe=s(bp);iZ=n(wCe,"STRONG",{});var HOr=s(iZ);blo=r(HOr,"flaubert"),HOr.forEach(t),vlo=r(wCe," \u2014 "),bS=n(wCe,"A",{href:!0});var UOr=s(bS);Tlo=r(UOr,"FlaubertModel"),UOr.forEach(t),Flo=r(wCe," (FlauBERT model)"),wCe.forEach(t),Clo=i(C),vp=n(C,"LI",{});var ACe=s(vp);dZ=n(ACe,"STRONG",{});var JOr=s(dZ);Mlo=r(JOr,"fnet"),JOr.forEach(t),Elo=r(ACe," \u2014 "),vS=n(ACe,"A",{href:!0});var YOr=s(vS);ylo=r(YOr,"FNetModel"),YOr.forEach(t),wlo=r(ACe," (FNet model)"),ACe.forEach(t),Alo=i(C),Tp=n(C,"LI",{});var LCe=s(Tp);cZ=n(LCe,"STRONG",{});var KOr=s(cZ);Llo=r(KOr,"fsmt"),KOr.forEach(t),Blo=r(LCe," \u2014 "),TS=n(LCe,"A",{href:!0});var ZOr=s(TS);xlo=r(ZOr,"FSMTModel"),ZOr.forEach(t),klo=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),Rlo=i(C),js=n(C,"LI",{});var r9=s(js);fZ=n(r9,"STRONG",{});var eXr=s(fZ);Slo=r(eXr,"funnel"),eXr.forEach(t),Plo=r(r9," \u2014 "),FS=n(r9,"A",{href:!0});var oXr=s(FS);$lo=r(oXr,"FunnelModel"),oXr.forEach(t),Ilo=r(r9," or "),CS=n(r9,"A",{href:!0});var rXr=s(CS);Dlo=r(rXr,"FunnelBaseModel"),rXr.forEach(t),Nlo=r(r9," (Funnel Transformer model)"),r9.forEach(t),jlo=i(C),Fp=n(C,"LI",{});var BCe=s(Fp);mZ=n(BCe,"STRONG",{});var tXr=s(mZ);qlo=r(tXr,"glpn"),tXr.forEach(t),Glo=r(BCe," \u2014 "),MS=n(BCe,"A",{href:!0});var aXr=s(MS);Olo=r(aXr,"GLPNModel"),aXr.forEach(t),Xlo=r(BCe," (GLPN model)"),BCe.forEach(t),Vlo=i(C),Cp=n(C,"LI",{});var xCe=s(Cp);gZ=n(xCe,"STRONG",{});var nXr=s(gZ);zlo=r(nXr,"gpt2"),nXr.forEach(t),Wlo=r(xCe," \u2014 "),ES=n(xCe,"A",{href:!0});var sXr=s(ES);Qlo=r(sXr,"GPT2Model"),sXr.forEach(t),Hlo=r(xCe," (OpenAI GPT-2 model)"),xCe.forEach(t),Ulo=i(C),Mp=n(C,"LI",{});var kCe=s(Mp);hZ=n(kCe,"STRONG",{});var lXr=s(hZ);Jlo=r(lXr,"gpt_neo"),lXr.forEach(t),Ylo=r(kCe," \u2014 "),yS=n(kCe,"A",{href:!0});var iXr=s(yS);Klo=r(iXr,"GPTNeoModel"),iXr.forEach(t),Zlo=r(kCe," (GPT Neo model)"),kCe.forEach(t),eio=i(C),Ep=n(C,"LI",{});var RCe=s(Ep);pZ=n(RCe,"STRONG",{});var dXr=s(pZ);oio=r(dXr,"gptj"),dXr.forEach(t),rio=r(RCe," \u2014 "),wS=n(RCe,"A",{href:!0});var cXr=s(wS);tio=r(cXr,"GPTJModel"),cXr.forEach(t),aio=r(RCe," (GPT-J model)"),RCe.forEach(t),nio=i(C),yp=n(C,"LI",{});var SCe=s(yp);_Z=n(SCe,"STRONG",{});var fXr=s(_Z);sio=r(fXr,"hubert"),fXr.forEach(t),lio=r(SCe," \u2014 "),AS=n(SCe,"A",{href:!0});var mXr=s(AS);iio=r(mXr,"HubertModel"),mXr.forEach(t),dio=r(SCe," (Hubert model)"),SCe.forEach(t),cio=i(C),wp=n(C,"LI",{});var PCe=s(wp);uZ=n(PCe,"STRONG",{});var gXr=s(uZ);fio=r(gXr,"ibert"),gXr.forEach(t),mio=r(PCe," \u2014 "),LS=n(PCe,"A",{href:!0});var hXr=s(LS);gio=r(hXr,"IBertModel"),hXr.forEach(t),hio=r(PCe," (I-BERT model)"),PCe.forEach(t),pio=i(C),Ap=n(C,"LI",{});var $Ce=s(Ap);bZ=n($Ce,"STRONG",{});var pXr=s(bZ);_io=r(pXr,"imagegpt"),pXr.forEach(t),uio=r($Ce," \u2014 "),BS=n($Ce,"A",{href:!0});var _Xr=s(BS);bio=r(_Xr,"ImageGPTModel"),_Xr.forEach(t),vio=r($Ce," (ImageGPT model)"),$Ce.forEach(t),Tio=i(C),Lp=n(C,"LI",{});var ICe=s(Lp);vZ=n(ICe,"STRONG",{});var uXr=s(vZ);Fio=r(uXr,"layoutlm"),uXr.forEach(t),Cio=r(ICe," \u2014 "),xS=n(ICe,"A",{href:!0});var bXr=s(xS);Mio=r(bXr,"LayoutLMModel"),bXr.forEach(t),Eio=r(ICe," (LayoutLM model)"),ICe.forEach(t),yio=i(C),Bp=n(C,"LI",{});var DCe=s(Bp);TZ=n(DCe,"STRONG",{});var vXr=s(TZ);wio=r(vXr,"layoutlmv2"),vXr.forEach(t),Aio=r(DCe," \u2014 "),kS=n(DCe,"A",{href:!0});var TXr=s(kS);Lio=r(TXr,"LayoutLMv2Model"),TXr.forEach(t),Bio=r(DCe," (LayoutLMv2 model)"),DCe.forEach(t),xio=i(C),xp=n(C,"LI",{});var NCe=s(xp);FZ=n(NCe,"STRONG",{});var FXr=s(FZ);kio=r(FXr,"led"),FXr.forEach(t),Rio=r(NCe," \u2014 "),RS=n(NCe,"A",{href:!0});var CXr=s(RS);Sio=r(CXr,"LEDModel"),CXr.forEach(t),Pio=r(NCe," (LED model)"),NCe.forEach(t),$io=i(C),kp=n(C,"LI",{});var jCe=s(kp);CZ=n(jCe,"STRONG",{});var MXr=s(CZ);Iio=r(MXr,"longformer"),MXr.forEach(t),Dio=r(jCe," \u2014 "),SS=n(jCe,"A",{href:!0});var EXr=s(SS);Nio=r(EXr,"LongformerModel"),EXr.forEach(t),jio=r(jCe," (Longformer model)"),jCe.forEach(t),qio=i(C),Rp=n(C,"LI",{});var qCe=s(Rp);MZ=n(qCe,"STRONG",{});var yXr=s(MZ);Gio=r(yXr,"luke"),yXr.forEach(t),Oio=r(qCe," \u2014 "),PS=n(qCe,"A",{href:!0});var wXr=s(PS);Xio=r(wXr,"LukeModel"),wXr.forEach(t),Vio=r(qCe," (LUKE model)"),qCe.forEach(t),zio=i(C),Sp=n(C,"LI",{});var GCe=s(Sp);EZ=n(GCe,"STRONG",{});var AXr=s(EZ);Wio=r(AXr,"lxmert"),AXr.forEach(t),Qio=r(GCe," \u2014 "),$S=n(GCe,"A",{href:!0});var LXr=s($S);Hio=r(LXr,"LxmertModel"),LXr.forEach(t),Uio=r(GCe," (LXMERT model)"),GCe.forEach(t),Jio=i(C),Pp=n(C,"LI",{});var OCe=s(Pp);yZ=n(OCe,"STRONG",{});var BXr=s(yZ);Yio=r(BXr,"m2m_100"),BXr.forEach(t),Kio=r(OCe," \u2014 "),IS=n(OCe,"A",{href:!0});var xXr=s(IS);Zio=r(xXr,"M2M100Model"),xXr.forEach(t),edo=r(OCe," (M2M100 model)"),OCe.forEach(t),odo=i(C),$p=n(C,"LI",{});var XCe=s($p);wZ=n(XCe,"STRONG",{});var kXr=s(wZ);rdo=r(kXr,"marian"),kXr.forEach(t),tdo=r(XCe," \u2014 "),DS=n(XCe,"A",{href:!0});var RXr=s(DS);ado=r(RXr,"MarianModel"),RXr.forEach(t),ndo=r(XCe," (Marian model)"),XCe.forEach(t),sdo=i(C),Ip=n(C,"LI",{});var VCe=s(Ip);AZ=n(VCe,"STRONG",{});var SXr=s(AZ);ldo=r(SXr,"maskformer"),SXr.forEach(t),ido=r(VCe," \u2014 "),NS=n(VCe,"A",{href:!0});var PXr=s(NS);ddo=r(PXr,"MaskFormerModel"),PXr.forEach(t),cdo=r(VCe," (MaskFormer model)"),VCe.forEach(t),fdo=i(C),Dp=n(C,"LI",{});var zCe=s(Dp);LZ=n(zCe,"STRONG",{});var $Xr=s(LZ);mdo=r($Xr,"mbart"),$Xr.forEach(t),gdo=r(zCe," \u2014 "),jS=n(zCe,"A",{href:!0});var IXr=s(jS);hdo=r(IXr,"MBartModel"),IXr.forEach(t),pdo=r(zCe," (mBART model)"),zCe.forEach(t),_do=i(C),Np=n(C,"LI",{});var WCe=s(Np);BZ=n(WCe,"STRONG",{});var DXr=s(BZ);udo=r(DXr,"megatron-bert"),DXr.forEach(t),bdo=r(WCe," \u2014 "),qS=n(WCe,"A",{href:!0});var NXr=s(qS);vdo=r(NXr,"MegatronBertModel"),NXr.forEach(t),Tdo=r(WCe," (MegatronBert model)"),WCe.forEach(t),Fdo=i(C),jp=n(C,"LI",{});var QCe=s(jp);xZ=n(QCe,"STRONG",{});var jXr=s(xZ);Cdo=r(jXr,"mobilebert"),jXr.forEach(t),Mdo=r(QCe," \u2014 "),GS=n(QCe,"A",{href:!0});var qXr=s(GS);Edo=r(qXr,"MobileBertModel"),qXr.forEach(t),ydo=r(QCe," (MobileBERT model)"),QCe.forEach(t),wdo=i(C),qp=n(C,"LI",{});var HCe=s(qp);kZ=n(HCe,"STRONG",{});var GXr=s(kZ);Ado=r(GXr,"mpnet"),GXr.forEach(t),Ldo=r(HCe," \u2014 "),OS=n(HCe,"A",{href:!0});var OXr=s(OS);Bdo=r(OXr,"MPNetModel"),OXr.forEach(t),xdo=r(HCe," (MPNet model)"),HCe.forEach(t),kdo=i(C),Gp=n(C,"LI",{});var UCe=s(Gp);RZ=n(UCe,"STRONG",{});var XXr=s(RZ);Rdo=r(XXr,"mt5"),XXr.forEach(t),Sdo=r(UCe," \u2014 "),XS=n(UCe,"A",{href:!0});var VXr=s(XS);Pdo=r(VXr,"MT5Model"),VXr.forEach(t),$do=r(UCe," (mT5 model)"),UCe.forEach(t),Ido=i(C),Op=n(C,"LI",{});var JCe=s(Op);SZ=n(JCe,"STRONG",{});var zXr=s(SZ);Ddo=r(zXr,"nystromformer"),zXr.forEach(t),Ndo=r(JCe," \u2014 "),VS=n(JCe,"A",{href:!0});var WXr=s(VS);jdo=r(WXr,"NystromformerModel"),WXr.forEach(t),qdo=r(JCe," (Nystromformer model)"),JCe.forEach(t),Gdo=i(C),Xp=n(C,"LI",{});var YCe=s(Xp);PZ=n(YCe,"STRONG",{});var QXr=s(PZ);Odo=r(QXr,"openai-gpt"),QXr.forEach(t),Xdo=r(YCe," \u2014 "),zS=n(YCe,"A",{href:!0});var HXr=s(zS);Vdo=r(HXr,"OpenAIGPTModel"),HXr.forEach(t),zdo=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),Wdo=i(C),Vp=n(C,"LI",{});var KCe=s(Vp);$Z=n(KCe,"STRONG",{});var UXr=s($Z);Qdo=r(UXr,"pegasus"),UXr.forEach(t),Hdo=r(KCe," \u2014 "),WS=n(KCe,"A",{href:!0});var JXr=s(WS);Udo=r(JXr,"PegasusModel"),JXr.forEach(t),Jdo=r(KCe," (Pegasus model)"),KCe.forEach(t),Ydo=i(C),zp=n(C,"LI",{});var ZCe=s(zp);IZ=n(ZCe,"STRONG",{});var YXr=s(IZ);Kdo=r(YXr,"perceiver"),YXr.forEach(t),Zdo=r(ZCe," \u2014 "),QS=n(ZCe,"A",{href:!0});var KXr=s(QS);eco=r(KXr,"PerceiverModel"),KXr.forEach(t),oco=r(ZCe," (Perceiver model)"),ZCe.forEach(t),rco=i(C),Wp=n(C,"LI",{});var eMe=s(Wp);DZ=n(eMe,"STRONG",{});var ZXr=s(DZ);tco=r(ZXr,"plbart"),ZXr.forEach(t),aco=r(eMe," \u2014 "),HS=n(eMe,"A",{href:!0});var eVr=s(HS);nco=r(eVr,"PLBartModel"),eVr.forEach(t),sco=r(eMe," (PLBart model)"),eMe.forEach(t),lco=i(C),Qp=n(C,"LI",{});var oMe=s(Qp);NZ=n(oMe,"STRONG",{});var oVr=s(NZ);ico=r(oVr,"poolformer"),oVr.forEach(t),dco=r(oMe," \u2014 "),US=n(oMe,"A",{href:!0});var rVr=s(US);cco=r(rVr,"PoolFormerModel"),rVr.forEach(t),fco=r(oMe," (PoolFormer model)"),oMe.forEach(t),mco=i(C),Hp=n(C,"LI",{});var rMe=s(Hp);jZ=n(rMe,"STRONG",{});var tVr=s(jZ);gco=r(tVr,"prophetnet"),tVr.forEach(t),hco=r(rMe," \u2014 "),JS=n(rMe,"A",{href:!0});var aVr=s(JS);pco=r(aVr,"ProphetNetModel"),aVr.forEach(t),_co=r(rMe," (ProphetNet model)"),rMe.forEach(t),uco=i(C),Up=n(C,"LI",{});var tMe=s(Up);qZ=n(tMe,"STRONG",{});var nVr=s(qZ);bco=r(nVr,"qdqbert"),nVr.forEach(t),vco=r(tMe," \u2014 "),YS=n(tMe,"A",{href:!0});var sVr=s(YS);Tco=r(sVr,"QDQBertModel"),sVr.forEach(t),Fco=r(tMe," (QDQBert model)"),tMe.forEach(t),Cco=i(C),Jp=n(C,"LI",{});var aMe=s(Jp);GZ=n(aMe,"STRONG",{});var lVr=s(GZ);Mco=r(lVr,"reformer"),lVr.forEach(t),Eco=r(aMe," \u2014 "),KS=n(aMe,"A",{href:!0});var iVr=s(KS);yco=r(iVr,"ReformerModel"),iVr.forEach(t),wco=r(aMe," (Reformer model)"),aMe.forEach(t),Aco=i(C),Yp=n(C,"LI",{});var nMe=s(Yp);OZ=n(nMe,"STRONG",{});var dVr=s(OZ);Lco=r(dVr,"rembert"),dVr.forEach(t),Bco=r(nMe," \u2014 "),ZS=n(nMe,"A",{href:!0});var cVr=s(ZS);xco=r(cVr,"RemBertModel"),cVr.forEach(t),kco=r(nMe," (RemBERT model)"),nMe.forEach(t),Rco=i(C),Kp=n(C,"LI",{});var sMe=s(Kp);XZ=n(sMe,"STRONG",{});var fVr=s(XZ);Sco=r(fVr,"resnet"),fVr.forEach(t),Pco=r(sMe," \u2014 "),eP=n(sMe,"A",{href:!0});var mVr=s(eP);$co=r(mVr,"ResNetModel"),mVr.forEach(t),Ico=r(sMe," (ResNet model)"),sMe.forEach(t),Dco=i(C),Zp=n(C,"LI",{});var lMe=s(Zp);VZ=n(lMe,"STRONG",{});var gVr=s(VZ);Nco=r(gVr,"retribert"),gVr.forEach(t),jco=r(lMe," \u2014 "),oP=n(lMe,"A",{href:!0});var hVr=s(oP);qco=r(hVr,"RetriBertModel"),hVr.forEach(t),Gco=r(lMe," (RetriBERT model)"),lMe.forEach(t),Oco=i(C),e_=n(C,"LI",{});var iMe=s(e_);zZ=n(iMe,"STRONG",{});var pVr=s(zZ);Xco=r(pVr,"roberta"),pVr.forEach(t),Vco=r(iMe," \u2014 "),rP=n(iMe,"A",{href:!0});var _Vr=s(rP);zco=r(_Vr,"RobertaModel"),_Vr.forEach(t),Wco=r(iMe," (RoBERTa model)"),iMe.forEach(t),Qco=i(C),o_=n(C,"LI",{});var dMe=s(o_);WZ=n(dMe,"STRONG",{});var uVr=s(WZ);Hco=r(uVr,"roformer"),uVr.forEach(t),Uco=r(dMe," \u2014 "),tP=n(dMe,"A",{href:!0});var bVr=s(tP);Jco=r(bVr,"RoFormerModel"),bVr.forEach(t),Yco=r(dMe," (RoFormer model)"),dMe.forEach(t),Kco=i(C),r_=n(C,"LI",{});var cMe=s(r_);QZ=n(cMe,"STRONG",{});var vVr=s(QZ);Zco=r(vVr,"segformer"),vVr.forEach(t),efo=r(cMe," \u2014 "),aP=n(cMe,"A",{href:!0});var TVr=s(aP);ofo=r(TVr,"SegformerModel"),TVr.forEach(t),rfo=r(cMe," (SegFormer model)"),cMe.forEach(t),tfo=i(C),t_=n(C,"LI",{});var fMe=s(t_);HZ=n(fMe,"STRONG",{});var FVr=s(HZ);afo=r(FVr,"sew"),FVr.forEach(t),nfo=r(fMe," \u2014 "),nP=n(fMe,"A",{href:!0});var CVr=s(nP);sfo=r(CVr,"SEWModel"),CVr.forEach(t),lfo=r(fMe," (SEW model)"),fMe.forEach(t),ifo=i(C),a_=n(C,"LI",{});var mMe=s(a_);UZ=n(mMe,"STRONG",{});var MVr=s(UZ);dfo=r(MVr,"sew-d"),MVr.forEach(t),cfo=r(mMe," \u2014 "),sP=n(mMe,"A",{href:!0});var EVr=s(sP);ffo=r(EVr,"SEWDModel"),EVr.forEach(t),mfo=r(mMe," (SEW-D model)"),mMe.forEach(t),gfo=i(C),n_=n(C,"LI",{});var gMe=s(n_);JZ=n(gMe,"STRONG",{});var yVr=s(JZ);hfo=r(yVr,"speech_to_text"),yVr.forEach(t),pfo=r(gMe," \u2014 "),lP=n(gMe,"A",{href:!0});var wVr=s(lP);_fo=r(wVr,"Speech2TextModel"),wVr.forEach(t),ufo=r(gMe," (Speech2Text model)"),gMe.forEach(t),bfo=i(C),s_=n(C,"LI",{});var hMe=s(s_);YZ=n(hMe,"STRONG",{});var AVr=s(YZ);vfo=r(AVr,"splinter"),AVr.forEach(t),Tfo=r(hMe," \u2014 "),iP=n(hMe,"A",{href:!0});var LVr=s(iP);Ffo=r(LVr,"SplinterModel"),LVr.forEach(t),Cfo=r(hMe," (Splinter model)"),hMe.forEach(t),Mfo=i(C),l_=n(C,"LI",{});var pMe=s(l_);KZ=n(pMe,"STRONG",{});var BVr=s(KZ);Efo=r(BVr,"squeezebert"),BVr.forEach(t),yfo=r(pMe," \u2014 "),dP=n(pMe,"A",{href:!0});var xVr=s(dP);wfo=r(xVr,"SqueezeBertModel"),xVr.forEach(t),Afo=r(pMe," (SqueezeBERT model)"),pMe.forEach(t),Lfo=i(C),i_=n(C,"LI",{});var _Me=s(i_);ZZ=n(_Me,"STRONG",{});var kVr=s(ZZ);Bfo=r(kVr,"swin"),kVr.forEach(t),xfo=r(_Me," \u2014 "),cP=n(_Me,"A",{href:!0});var RVr=s(cP);kfo=r(RVr,"SwinModel"),RVr.forEach(t),Rfo=r(_Me," (Swin model)"),_Me.forEach(t),Sfo=i(C),d_=n(C,"LI",{});var uMe=s(d_);eee=n(uMe,"STRONG",{});var SVr=s(eee);Pfo=r(SVr,"t5"),SVr.forEach(t),$fo=r(uMe," \u2014 "),fP=n(uMe,"A",{href:!0});var PVr=s(fP);Ifo=r(PVr,"T5Model"),PVr.forEach(t),Dfo=r(uMe," (T5 model)"),uMe.forEach(t),Nfo=i(C),c_=n(C,"LI",{});var bMe=s(c_);oee=n(bMe,"STRONG",{});var $Vr=s(oee);jfo=r($Vr,"tapas"),$Vr.forEach(t),qfo=r(bMe," \u2014 "),mP=n(bMe,"A",{href:!0});var IVr=s(mP);Gfo=r(IVr,"TapasModel"),IVr.forEach(t),Ofo=r(bMe," (TAPAS model)"),bMe.forEach(t),Xfo=i(C),f_=n(C,"LI",{});var vMe=s(f_);ree=n(vMe,"STRONG",{});var DVr=s(ree);Vfo=r(DVr,"transfo-xl"),DVr.forEach(t),zfo=r(vMe," \u2014 "),gP=n(vMe,"A",{href:!0});var NVr=s(gP);Wfo=r(NVr,"TransfoXLModel"),NVr.forEach(t),Qfo=r(vMe," (Transformer-XL model)"),vMe.forEach(t),Hfo=i(C),m_=n(C,"LI",{});var TMe=s(m_);tee=n(TMe,"STRONG",{});var jVr=s(tee);Ufo=r(jVr,"unispeech"),jVr.forEach(t),Jfo=r(TMe," \u2014 "),hP=n(TMe,"A",{href:!0});var qVr=s(hP);Yfo=r(qVr,"UniSpeechModel"),qVr.forEach(t),Kfo=r(TMe," (UniSpeech model)"),TMe.forEach(t),Zfo=i(C),g_=n(C,"LI",{});var FMe=s(g_);aee=n(FMe,"STRONG",{});var GVr=s(aee);emo=r(GVr,"unispeech-sat"),GVr.forEach(t),omo=r(FMe," \u2014 "),pP=n(FMe,"A",{href:!0});var OVr=s(pP);rmo=r(OVr,"UniSpeechSatModel"),OVr.forEach(t),tmo=r(FMe," (UniSpeechSat model)"),FMe.forEach(t),amo=i(C),h_=n(C,"LI",{});var CMe=s(h_);nee=n(CMe,"STRONG",{});var XVr=s(nee);nmo=r(XVr,"van"),XVr.forEach(t),smo=r(CMe," \u2014 "),_P=n(CMe,"A",{href:!0});var VVr=s(_P);lmo=r(VVr,"VanModel"),VVr.forEach(t),imo=r(CMe," (VAN model)"),CMe.forEach(t),dmo=i(C),p_=n(C,"LI",{});var MMe=s(p_);see=n(MMe,"STRONG",{});var zVr=s(see);cmo=r(zVr,"vilt"),zVr.forEach(t),fmo=r(MMe," \u2014 "),uP=n(MMe,"A",{href:!0});var WVr=s(uP);mmo=r(WVr,"ViltModel"),WVr.forEach(t),gmo=r(MMe," (ViLT model)"),MMe.forEach(t),hmo=i(C),__=n(C,"LI",{});var EMe=s(__);lee=n(EMe,"STRONG",{});var QVr=s(lee);pmo=r(QVr,"vision-text-dual-encoder"),QVr.forEach(t),_mo=r(EMe," \u2014 "),bP=n(EMe,"A",{href:!0});var HVr=s(bP);umo=r(HVr,"VisionTextDualEncoderModel"),HVr.forEach(t),bmo=r(EMe," (VisionTextDualEncoder model)"),EMe.forEach(t),vmo=i(C),u_=n(C,"LI",{});var yMe=s(u_);iee=n(yMe,"STRONG",{});var UVr=s(iee);Tmo=r(UVr,"visual_bert"),UVr.forEach(t),Fmo=r(yMe," \u2014 "),vP=n(yMe,"A",{href:!0});var JVr=s(vP);Cmo=r(JVr,"VisualBertModel"),JVr.forEach(t),Mmo=r(yMe," (VisualBert model)"),yMe.forEach(t),Emo=i(C),b_=n(C,"LI",{});var wMe=s(b_);dee=n(wMe,"STRONG",{});var YVr=s(dee);ymo=r(YVr,"vit"),YVr.forEach(t),wmo=r(wMe," \u2014 "),TP=n(wMe,"A",{href:!0});var KVr=s(TP);Amo=r(KVr,"ViTModel"),KVr.forEach(t),Lmo=r(wMe," (ViT model)"),wMe.forEach(t),Bmo=i(C),v_=n(C,"LI",{});var AMe=s(v_);cee=n(AMe,"STRONG",{});var ZVr=s(cee);xmo=r(ZVr,"vit_mae"),ZVr.forEach(t),kmo=r(AMe," \u2014 "),FP=n(AMe,"A",{href:!0});var ezr=s(FP);Rmo=r(ezr,"ViTMAEModel"),ezr.forEach(t),Smo=r(AMe," (ViTMAE model)"),AMe.forEach(t),Pmo=i(C),T_=n(C,"LI",{});var LMe=s(T_);fee=n(LMe,"STRONG",{});var ozr=s(fee);$mo=r(ozr,"wav2vec2"),ozr.forEach(t),Imo=r(LMe," \u2014 "),CP=n(LMe,"A",{href:!0});var rzr=s(CP);Dmo=r(rzr,"Wav2Vec2Model"),rzr.forEach(t),Nmo=r(LMe," (Wav2Vec2 model)"),LMe.forEach(t),jmo=i(C),F_=n(C,"LI",{});var BMe=s(F_);mee=n(BMe,"STRONG",{});var tzr=s(mee);qmo=r(tzr,"wavlm"),tzr.forEach(t),Gmo=r(BMe," \u2014 "),MP=n(BMe,"A",{href:!0});var azr=s(MP);Omo=r(azr,"WavLMModel"),azr.forEach(t),Xmo=r(BMe," (WavLM model)"),BMe.forEach(t),Vmo=i(C),C_=n(C,"LI",{});var xMe=s(C_);gee=n(xMe,"STRONG",{});var nzr=s(gee);zmo=r(nzr,"xglm"),nzr.forEach(t),Wmo=r(xMe," \u2014 "),EP=n(xMe,"A",{href:!0});var szr=s(EP);Qmo=r(szr,"XGLMModel"),szr.forEach(t),Hmo=r(xMe," (XGLM model)"),xMe.forEach(t),Umo=i(C),M_=n(C,"LI",{});var kMe=s(M_);hee=n(kMe,"STRONG",{});var lzr=s(hee);Jmo=r(lzr,"xlm"),lzr.forEach(t),Ymo=r(kMe," \u2014 "),yP=n(kMe,"A",{href:!0});var izr=s(yP);Kmo=r(izr,"XLMModel"),izr.forEach(t),Zmo=r(kMe," (XLM model)"),kMe.forEach(t),ego=i(C),E_=n(C,"LI",{});var RMe=s(E_);pee=n(RMe,"STRONG",{});var dzr=s(pee);ogo=r(dzr,"xlm-prophetnet"),dzr.forEach(t),rgo=r(RMe," \u2014 "),wP=n(RMe,"A",{href:!0});var czr=s(wP);tgo=r(czr,"XLMProphetNetModel"),czr.forEach(t),ago=r(RMe," (XLMProphetNet model)"),RMe.forEach(t),ngo=i(C),y_=n(C,"LI",{});var SMe=s(y_);_ee=n(SMe,"STRONG",{});var fzr=s(_ee);sgo=r(fzr,"xlm-roberta"),fzr.forEach(t),lgo=r(SMe," \u2014 "),AP=n(SMe,"A",{href:!0});var mzr=s(AP);igo=r(mzr,"XLMRobertaModel"),mzr.forEach(t),dgo=r(SMe," (XLM-RoBERTa model)"),SMe.forEach(t),cgo=i(C),w_=n(C,"LI",{});var PMe=s(w_);uee=n(PMe,"STRONG",{});var gzr=s(uee);fgo=r(gzr,"xlm-roberta-xl"),gzr.forEach(t),mgo=r(PMe," \u2014 "),LP=n(PMe,"A",{href:!0});var hzr=s(LP);ggo=r(hzr,"XLMRobertaXLModel"),hzr.forEach(t),hgo=r(PMe," (XLM-RoBERTa-XL model)"),PMe.forEach(t),pgo=i(C),A_=n(C,"LI",{});var $Me=s(A_);bee=n($Me,"STRONG",{});var pzr=s(bee);_go=r(pzr,"xlnet"),pzr.forEach(t),ugo=r($Me," \u2014 "),BP=n($Me,"A",{href:!0});var _zr=s(BP);bgo=r(_zr,"XLNetModel"),_zr.forEach(t),vgo=r($Me," (XLNet model)"),$Me.forEach(t),Tgo=i(C),L_=n(C,"LI",{});var IMe=s(L_);vee=n(IMe,"STRONG",{});var uzr=s(vee);Fgo=r(uzr,"yoso"),uzr.forEach(t),Cgo=r(IMe," \u2014 "),xP=n(IMe,"A",{href:!0});var bzr=s(xP);Mgo=r(bzr,"YosoModel"),bzr.forEach(t),Ego=r(IMe," (YOSO model)"),IMe.forEach(t),C.forEach(t),ygo=i(qt),B_=n(qt,"P",{});var DMe=s(B_);wgo=r(DMe,"The model is set in evaluation mode by default using "),Tee=n(DMe,"CODE",{});var vzr=s(Tee);Ago=r(vzr,"model.eval()"),vzr.forEach(t),Lgo=r(DMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=n(DMe,"CODE",{});var Tzr=s(Fee);Bgo=r(Tzr,"model.train()"),Tzr.forEach(t),DMe.forEach(t),xgo=i(qt),Cee=n(qt,"P",{});var Fzr=s(Cee);kgo=r(Fzr,"Examples:"),Fzr.forEach(t),Rgo=i(qt),m(Z4.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Vke=i(c),Zi=n(c,"H2",{class:!0});var ZSe=s(Zi);x_=n(ZSe,"A",{id:!0,class:!0,href:!0});var Czr=s(x_);Mee=n(Czr,"SPAN",{});var Mzr=s(Mee);m(eE.$$.fragment,Mzr),Mzr.forEach(t),Czr.forEach(t),Sgo=i(ZSe),Eee=n(ZSe,"SPAN",{});var Ezr=s(Eee);Pgo=r(Ezr,"AutoModelForPreTraining"),Ezr.forEach(t),ZSe.forEach(t),zke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(oE.$$.fragment,Hs),$go=i(Hs),ed=n(Hs,"P",{});var fW=s(ed);Igo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=n(fW,"CODE",{});var yzr=s(yee);Dgo=r(yzr,"from_pretrained()"),yzr.forEach(t),Ngo=r(fW,"class method or the "),wee=n(fW,"CODE",{});var wzr=s(wee);jgo=r(wzr,"from_config()"),wzr.forEach(t),qgo=r(fW,`class
method.`),fW.forEach(t),Ggo=i(Hs),rE=n(Hs,"P",{});var ePe=s(rE);Ogo=r(ePe,"This class cannot be instantiated directly using "),Aee=n(ePe,"CODE",{});var Azr=s(Aee);Xgo=r(Azr,"__init__()"),Azr.forEach(t),Vgo=r(ePe," (throws an error)."),ePe.forEach(t),zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(tE.$$.fragment,Us),Wgo=i(Us),Lee=n(Us,"P",{});var Lzr=s(Lee);Qgo=r(Lzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lzr.forEach(t),Hgo=i(Us),od=n(Us,"P",{});var mW=s(od);Ugo=r(mW,`Note:
Loading a model from its configuration file does `),Bee=n(mW,"STRONG",{});var Bzr=s(Bee);Jgo=r(Bzr,"not"),Bzr.forEach(t),Ygo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(mW,"CODE",{});var xzr=s(xee);Kgo=r(xzr,"from_pretrained()"),xzr.forEach(t),Zgo=r(mW,"to load the model weights."),mW.forEach(t),eho=i(Us),kee=n(Us,"P",{});var kzr=s(kee);oho=r(kzr,"Examples:"),kzr.forEach(t),rho=i(Us),m(aE.$$.fragment,Us),Us.forEach(t),tho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(nE.$$.fragment,Gt),aho=i(Gt),Ree=n(Gt,"P",{});var Rzr=s(Ree);nho=r(Rzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rzr.forEach(t),sho=i(Gt),za=n(Gt,"P",{});var bM=s(za);lho=r(bM,"The model class to instantiate is selected based on the "),See=n(bM,"CODE",{});var Szr=s(See);iho=r(Szr,"model_type"),Szr.forEach(t),dho=r(bM,` property of the config object (either
passed as an argument or loaded from `),Pee=n(bM,"CODE",{});var Pzr=s(Pee);cho=r(Pzr,"pretrained_model_name_or_path"),Pzr.forEach(t),fho=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=n(bM,"CODE",{});var $zr=s($ee);mho=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),gho=r(bM,":"),bM.forEach(t),hho=i(Gt),k=n(Gt,"UL",{});var S=s(k);k_=n(S,"LI",{});var NMe=s(k_);Iee=n(NMe,"STRONG",{});var Izr=s(Iee);pho=r(Izr,"albert"),Izr.forEach(t),_ho=r(NMe," \u2014 "),kP=n(NMe,"A",{href:!0});var Dzr=s(kP);uho=r(Dzr,"AlbertForPreTraining"),Dzr.forEach(t),bho=r(NMe," (ALBERT model)"),NMe.forEach(t),vho=i(S),R_=n(S,"LI",{});var jMe=s(R_);Dee=n(jMe,"STRONG",{});var Nzr=s(Dee);Tho=r(Nzr,"bart"),Nzr.forEach(t),Fho=r(jMe," \u2014 "),RP=n(jMe,"A",{href:!0});var jzr=s(RP);Cho=r(jzr,"BartForConditionalGeneration"),jzr.forEach(t),Mho=r(jMe," (BART model)"),jMe.forEach(t),Eho=i(S),S_=n(S,"LI",{});var qMe=s(S_);Nee=n(qMe,"STRONG",{});var qzr=s(Nee);yho=r(qzr,"bert"),qzr.forEach(t),who=r(qMe," \u2014 "),SP=n(qMe,"A",{href:!0});var Gzr=s(SP);Aho=r(Gzr,"BertForPreTraining"),Gzr.forEach(t),Lho=r(qMe," (BERT model)"),qMe.forEach(t),Bho=i(S),P_=n(S,"LI",{});var GMe=s(P_);jee=n(GMe,"STRONG",{});var Ozr=s(jee);xho=r(Ozr,"big_bird"),Ozr.forEach(t),kho=r(GMe," \u2014 "),PP=n(GMe,"A",{href:!0});var Xzr=s(PP);Rho=r(Xzr,"BigBirdForPreTraining"),Xzr.forEach(t),Sho=r(GMe," (BigBird model)"),GMe.forEach(t),Pho=i(S),$_=n(S,"LI",{});var OMe=s($_);qee=n(OMe,"STRONG",{});var Vzr=s(qee);$ho=r(Vzr,"camembert"),Vzr.forEach(t),Iho=r(OMe," \u2014 "),$P=n(OMe,"A",{href:!0});var zzr=s($P);Dho=r(zzr,"CamembertForMaskedLM"),zzr.forEach(t),Nho=r(OMe," (CamemBERT model)"),OMe.forEach(t),jho=i(S),I_=n(S,"LI",{});var XMe=s(I_);Gee=n(XMe,"STRONG",{});var Wzr=s(Gee);qho=r(Wzr,"ctrl"),Wzr.forEach(t),Gho=r(XMe," \u2014 "),IP=n(XMe,"A",{href:!0});var Qzr=s(IP);Oho=r(Qzr,"CTRLLMHeadModel"),Qzr.forEach(t),Xho=r(XMe," (CTRL model)"),XMe.forEach(t),Vho=i(S),D_=n(S,"LI",{});var VMe=s(D_);Oee=n(VMe,"STRONG",{});var Hzr=s(Oee);zho=r(Hzr,"data2vec-text"),Hzr.forEach(t),Who=r(VMe," \u2014 "),DP=n(VMe,"A",{href:!0});var Uzr=s(DP);Qho=r(Uzr,"Data2VecTextForMaskedLM"),Uzr.forEach(t),Hho=r(VMe," (Data2VecText model)"),VMe.forEach(t),Uho=i(S),N_=n(S,"LI",{});var zMe=s(N_);Xee=n(zMe,"STRONG",{});var Jzr=s(Xee);Jho=r(Jzr,"deberta"),Jzr.forEach(t),Yho=r(zMe," \u2014 "),NP=n(zMe,"A",{href:!0});var Yzr=s(NP);Kho=r(Yzr,"DebertaForMaskedLM"),Yzr.forEach(t),Zho=r(zMe," (DeBERTa model)"),zMe.forEach(t),epo=i(S),j_=n(S,"LI",{});var WMe=s(j_);Vee=n(WMe,"STRONG",{});var Kzr=s(Vee);opo=r(Kzr,"deberta-v2"),Kzr.forEach(t),rpo=r(WMe," \u2014 "),jP=n(WMe,"A",{href:!0});var Zzr=s(jP);tpo=r(Zzr,"DebertaV2ForMaskedLM"),Zzr.forEach(t),apo=r(WMe," (DeBERTa-v2 model)"),WMe.forEach(t),npo=i(S),q_=n(S,"LI",{});var QMe=s(q_);zee=n(QMe,"STRONG",{});var eWr=s(zee);spo=r(eWr,"distilbert"),eWr.forEach(t),lpo=r(QMe," \u2014 "),qP=n(QMe,"A",{href:!0});var oWr=s(qP);ipo=r(oWr,"DistilBertForMaskedLM"),oWr.forEach(t),dpo=r(QMe," (DistilBERT model)"),QMe.forEach(t),cpo=i(S),G_=n(S,"LI",{});var HMe=s(G_);Wee=n(HMe,"STRONG",{});var rWr=s(Wee);fpo=r(rWr,"electra"),rWr.forEach(t),mpo=r(HMe," \u2014 "),GP=n(HMe,"A",{href:!0});var tWr=s(GP);gpo=r(tWr,"ElectraForPreTraining"),tWr.forEach(t),hpo=r(HMe," (ELECTRA model)"),HMe.forEach(t),ppo=i(S),O_=n(S,"LI",{});var UMe=s(O_);Qee=n(UMe,"STRONG",{});var aWr=s(Qee);_po=r(aWr,"flaubert"),aWr.forEach(t),upo=r(UMe," \u2014 "),OP=n(UMe,"A",{href:!0});var nWr=s(OP);bpo=r(nWr,"FlaubertWithLMHeadModel"),nWr.forEach(t),vpo=r(UMe," (FlauBERT model)"),UMe.forEach(t),Tpo=i(S),X_=n(S,"LI",{});var JMe=s(X_);Hee=n(JMe,"STRONG",{});var sWr=s(Hee);Fpo=r(sWr,"fnet"),sWr.forEach(t),Cpo=r(JMe," \u2014 "),XP=n(JMe,"A",{href:!0});var lWr=s(XP);Mpo=r(lWr,"FNetForPreTraining"),lWr.forEach(t),Epo=r(JMe," (FNet model)"),JMe.forEach(t),ypo=i(S),V_=n(S,"LI",{});var YMe=s(V_);Uee=n(YMe,"STRONG",{});var iWr=s(Uee);wpo=r(iWr,"fsmt"),iWr.forEach(t),Apo=r(YMe," \u2014 "),VP=n(YMe,"A",{href:!0});var dWr=s(VP);Lpo=r(dWr,"FSMTForConditionalGeneration"),dWr.forEach(t),Bpo=r(YMe," (FairSeq Machine-Translation model)"),YMe.forEach(t),xpo=i(S),z_=n(S,"LI",{});var KMe=s(z_);Jee=n(KMe,"STRONG",{});var cWr=s(Jee);kpo=r(cWr,"funnel"),cWr.forEach(t),Rpo=r(KMe," \u2014 "),zP=n(KMe,"A",{href:!0});var fWr=s(zP);Spo=r(fWr,"FunnelForPreTraining"),fWr.forEach(t),Ppo=r(KMe," (Funnel Transformer model)"),KMe.forEach(t),$po=i(S),W_=n(S,"LI",{});var ZMe=s(W_);Yee=n(ZMe,"STRONG",{});var mWr=s(Yee);Ipo=r(mWr,"gpt2"),mWr.forEach(t),Dpo=r(ZMe," \u2014 "),WP=n(ZMe,"A",{href:!0});var gWr=s(WP);Npo=r(gWr,"GPT2LMHeadModel"),gWr.forEach(t),jpo=r(ZMe," (OpenAI GPT-2 model)"),ZMe.forEach(t),qpo=i(S),Q_=n(S,"LI",{});var e4e=s(Q_);Kee=n(e4e,"STRONG",{});var hWr=s(Kee);Gpo=r(hWr,"ibert"),hWr.forEach(t),Opo=r(e4e," \u2014 "),QP=n(e4e,"A",{href:!0});var pWr=s(QP);Xpo=r(pWr,"IBertForMaskedLM"),pWr.forEach(t),Vpo=r(e4e," (I-BERT model)"),e4e.forEach(t),zpo=i(S),H_=n(S,"LI",{});var o4e=s(H_);Zee=n(o4e,"STRONG",{});var _Wr=s(Zee);Wpo=r(_Wr,"layoutlm"),_Wr.forEach(t),Qpo=r(o4e," \u2014 "),HP=n(o4e,"A",{href:!0});var uWr=s(HP);Hpo=r(uWr,"LayoutLMForMaskedLM"),uWr.forEach(t),Upo=r(o4e," (LayoutLM model)"),o4e.forEach(t),Jpo=i(S),U_=n(S,"LI",{});var r4e=s(U_);eoe=n(r4e,"STRONG",{});var bWr=s(eoe);Ypo=r(bWr,"longformer"),bWr.forEach(t),Kpo=r(r4e," \u2014 "),UP=n(r4e,"A",{href:!0});var vWr=s(UP);Zpo=r(vWr,"LongformerForMaskedLM"),vWr.forEach(t),e_o=r(r4e," (Longformer model)"),r4e.forEach(t),o_o=i(S),J_=n(S,"LI",{});var t4e=s(J_);ooe=n(t4e,"STRONG",{});var TWr=s(ooe);r_o=r(TWr,"lxmert"),TWr.forEach(t),t_o=r(t4e," \u2014 "),JP=n(t4e,"A",{href:!0});var FWr=s(JP);a_o=r(FWr,"LxmertForPreTraining"),FWr.forEach(t),n_o=r(t4e," (LXMERT model)"),t4e.forEach(t),s_o=i(S),Y_=n(S,"LI",{});var a4e=s(Y_);roe=n(a4e,"STRONG",{});var CWr=s(roe);l_o=r(CWr,"megatron-bert"),CWr.forEach(t),i_o=r(a4e," \u2014 "),YP=n(a4e,"A",{href:!0});var MWr=s(YP);d_o=r(MWr,"MegatronBertForPreTraining"),MWr.forEach(t),c_o=r(a4e," (MegatronBert model)"),a4e.forEach(t),f_o=i(S),K_=n(S,"LI",{});var n4e=s(K_);toe=n(n4e,"STRONG",{});var EWr=s(toe);m_o=r(EWr,"mobilebert"),EWr.forEach(t),g_o=r(n4e," \u2014 "),KP=n(n4e,"A",{href:!0});var yWr=s(KP);h_o=r(yWr,"MobileBertForPreTraining"),yWr.forEach(t),p_o=r(n4e," (MobileBERT model)"),n4e.forEach(t),__o=i(S),Z_=n(S,"LI",{});var s4e=s(Z_);aoe=n(s4e,"STRONG",{});var wWr=s(aoe);u_o=r(wWr,"mpnet"),wWr.forEach(t),b_o=r(s4e," \u2014 "),ZP=n(s4e,"A",{href:!0});var AWr=s(ZP);v_o=r(AWr,"MPNetForMaskedLM"),AWr.forEach(t),T_o=r(s4e," (MPNet model)"),s4e.forEach(t),F_o=i(S),eu=n(S,"LI",{});var l4e=s(eu);noe=n(l4e,"STRONG",{});var LWr=s(noe);C_o=r(LWr,"openai-gpt"),LWr.forEach(t),M_o=r(l4e," \u2014 "),e$=n(l4e,"A",{href:!0});var BWr=s(e$);E_o=r(BWr,"OpenAIGPTLMHeadModel"),BWr.forEach(t),y_o=r(l4e," (OpenAI GPT model)"),l4e.forEach(t),w_o=i(S),ou=n(S,"LI",{});var i4e=s(ou);soe=n(i4e,"STRONG",{});var xWr=s(soe);A_o=r(xWr,"retribert"),xWr.forEach(t),L_o=r(i4e," \u2014 "),o$=n(i4e,"A",{href:!0});var kWr=s(o$);B_o=r(kWr,"RetriBertModel"),kWr.forEach(t),x_o=r(i4e," (RetriBERT model)"),i4e.forEach(t),k_o=i(S),ru=n(S,"LI",{});var d4e=s(ru);loe=n(d4e,"STRONG",{});var RWr=s(loe);R_o=r(RWr,"roberta"),RWr.forEach(t),S_o=r(d4e," \u2014 "),r$=n(d4e,"A",{href:!0});var SWr=s(r$);P_o=r(SWr,"RobertaForMaskedLM"),SWr.forEach(t),$_o=r(d4e," (RoBERTa model)"),d4e.forEach(t),I_o=i(S),tu=n(S,"LI",{});var c4e=s(tu);ioe=n(c4e,"STRONG",{});var PWr=s(ioe);D_o=r(PWr,"squeezebert"),PWr.forEach(t),N_o=r(c4e," \u2014 "),t$=n(c4e,"A",{href:!0});var $Wr=s(t$);j_o=r($Wr,"SqueezeBertForMaskedLM"),$Wr.forEach(t),q_o=r(c4e," (SqueezeBERT model)"),c4e.forEach(t),G_o=i(S),au=n(S,"LI",{});var f4e=s(au);doe=n(f4e,"STRONG",{});var IWr=s(doe);O_o=r(IWr,"t5"),IWr.forEach(t),X_o=r(f4e," \u2014 "),a$=n(f4e,"A",{href:!0});var DWr=s(a$);V_o=r(DWr,"T5ForConditionalGeneration"),DWr.forEach(t),z_o=r(f4e," (T5 model)"),f4e.forEach(t),W_o=i(S),nu=n(S,"LI",{});var m4e=s(nu);coe=n(m4e,"STRONG",{});var NWr=s(coe);Q_o=r(NWr,"tapas"),NWr.forEach(t),H_o=r(m4e," \u2014 "),n$=n(m4e,"A",{href:!0});var jWr=s(n$);U_o=r(jWr,"TapasForMaskedLM"),jWr.forEach(t),J_o=r(m4e," (TAPAS model)"),m4e.forEach(t),Y_o=i(S),su=n(S,"LI",{});var g4e=s(su);foe=n(g4e,"STRONG",{});var qWr=s(foe);K_o=r(qWr,"transfo-xl"),qWr.forEach(t),Z_o=r(g4e," \u2014 "),s$=n(g4e,"A",{href:!0});var GWr=s(s$);euo=r(GWr,"TransfoXLLMHeadModel"),GWr.forEach(t),ouo=r(g4e," (Transformer-XL model)"),g4e.forEach(t),ruo=i(S),lu=n(S,"LI",{});var h4e=s(lu);moe=n(h4e,"STRONG",{});var OWr=s(moe);tuo=r(OWr,"unispeech"),OWr.forEach(t),auo=r(h4e," \u2014 "),l$=n(h4e,"A",{href:!0});var XWr=s(l$);nuo=r(XWr,"UniSpeechForPreTraining"),XWr.forEach(t),suo=r(h4e," (UniSpeech model)"),h4e.forEach(t),luo=i(S),iu=n(S,"LI",{});var p4e=s(iu);goe=n(p4e,"STRONG",{});var VWr=s(goe);iuo=r(VWr,"unispeech-sat"),VWr.forEach(t),duo=r(p4e," \u2014 "),i$=n(p4e,"A",{href:!0});var zWr=s(i$);cuo=r(zWr,"UniSpeechSatForPreTraining"),zWr.forEach(t),fuo=r(p4e," (UniSpeechSat model)"),p4e.forEach(t),muo=i(S),du=n(S,"LI",{});var _4e=s(du);hoe=n(_4e,"STRONG",{});var WWr=s(hoe);guo=r(WWr,"visual_bert"),WWr.forEach(t),huo=r(_4e," \u2014 "),d$=n(_4e,"A",{href:!0});var QWr=s(d$);puo=r(QWr,"VisualBertForPreTraining"),QWr.forEach(t),_uo=r(_4e," (VisualBert model)"),_4e.forEach(t),uuo=i(S),cu=n(S,"LI",{});var u4e=s(cu);poe=n(u4e,"STRONG",{});var HWr=s(poe);buo=r(HWr,"vit_mae"),HWr.forEach(t),vuo=r(u4e," \u2014 "),c$=n(u4e,"A",{href:!0});var UWr=s(c$);Tuo=r(UWr,"ViTMAEForPreTraining"),UWr.forEach(t),Fuo=r(u4e," (ViTMAE model)"),u4e.forEach(t),Cuo=i(S),fu=n(S,"LI",{});var b4e=s(fu);_oe=n(b4e,"STRONG",{});var JWr=s(_oe);Muo=r(JWr,"wav2vec2"),JWr.forEach(t),Euo=r(b4e," \u2014 "),f$=n(b4e,"A",{href:!0});var YWr=s(f$);yuo=r(YWr,"Wav2Vec2ForPreTraining"),YWr.forEach(t),wuo=r(b4e," (Wav2Vec2 model)"),b4e.forEach(t),Auo=i(S),mu=n(S,"LI",{});var v4e=s(mu);uoe=n(v4e,"STRONG",{});var KWr=s(uoe);Luo=r(KWr,"xlm"),KWr.forEach(t),Buo=r(v4e," \u2014 "),m$=n(v4e,"A",{href:!0});var ZWr=s(m$);xuo=r(ZWr,"XLMWithLMHeadModel"),ZWr.forEach(t),kuo=r(v4e," (XLM model)"),v4e.forEach(t),Ruo=i(S),gu=n(S,"LI",{});var T4e=s(gu);boe=n(T4e,"STRONG",{});var eQr=s(boe);Suo=r(eQr,"xlm-roberta"),eQr.forEach(t),Puo=r(T4e," \u2014 "),g$=n(T4e,"A",{href:!0});var oQr=s(g$);$uo=r(oQr,"XLMRobertaForMaskedLM"),oQr.forEach(t),Iuo=r(T4e," (XLM-RoBERTa model)"),T4e.forEach(t),Duo=i(S),hu=n(S,"LI",{});var F4e=s(hu);voe=n(F4e,"STRONG",{});var rQr=s(voe);Nuo=r(rQr,"xlm-roberta-xl"),rQr.forEach(t),juo=r(F4e," \u2014 "),h$=n(F4e,"A",{href:!0});var tQr=s(h$);quo=r(tQr,"XLMRobertaXLForMaskedLM"),tQr.forEach(t),Guo=r(F4e," (XLM-RoBERTa-XL model)"),F4e.forEach(t),Ouo=i(S),pu=n(S,"LI",{});var C4e=s(pu);Toe=n(C4e,"STRONG",{});var aQr=s(Toe);Xuo=r(aQr,"xlnet"),aQr.forEach(t),Vuo=r(C4e," \u2014 "),p$=n(C4e,"A",{href:!0});var nQr=s(p$);zuo=r(nQr,"XLNetLMHeadModel"),nQr.forEach(t),Wuo=r(C4e," (XLNet model)"),C4e.forEach(t),S.forEach(t),Quo=i(Gt),_u=n(Gt,"P",{});var M4e=s(_u);Huo=r(M4e,"The model is set in evaluation mode by default using "),Foe=n(M4e,"CODE",{});var sQr=s(Foe);Uuo=r(sQr,"model.eval()"),sQr.forEach(t),Juo=r(M4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=n(M4e,"CODE",{});var lQr=s(Coe);Yuo=r(lQr,"model.train()"),lQr.forEach(t),M4e.forEach(t),Kuo=i(Gt),Moe=n(Gt,"P",{});var iQr=s(Moe);Zuo=r(iQr,"Examples:"),iQr.forEach(t),e1o=i(Gt),m(sE.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Wke=i(c),rd=n(c,"H2",{class:!0});var oPe=s(rd);uu=n(oPe,"A",{id:!0,class:!0,href:!0});var dQr=s(uu);Eoe=n(dQr,"SPAN",{});var cQr=s(Eoe);m(lE.$$.fragment,cQr),cQr.forEach(t),dQr.forEach(t),o1o=i(oPe),yoe=n(oPe,"SPAN",{});var fQr=s(yoe);r1o=r(fQr,"AutoModelForCausalLM"),fQr.forEach(t),oPe.forEach(t),Qke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(iE.$$.fragment,Js),t1o=i(Js),td=n(Js,"P",{});var gW=s(td);a1o=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=n(gW,"CODE",{});var mQr=s(woe);n1o=r(mQr,"from_pretrained()"),mQr.forEach(t),s1o=r(gW,"class method or the "),Aoe=n(gW,"CODE",{});var gQr=s(Aoe);l1o=r(gQr,"from_config()"),gQr.forEach(t),i1o=r(gW,`class
method.`),gW.forEach(t),d1o=i(Js),dE=n(Js,"P",{});var rPe=s(dE);c1o=r(rPe,"This class cannot be instantiated directly using "),Loe=n(rPe,"CODE",{});var hQr=s(Loe);f1o=r(hQr,"__init__()"),hQr.forEach(t),m1o=r(rPe," (throws an error)."),rPe.forEach(t),g1o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(cE.$$.fragment,Ys),h1o=i(Ys),Boe=n(Ys,"P",{});var pQr=s(Boe);p1o=r(pQr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pQr.forEach(t),_1o=i(Ys),ad=n(Ys,"P",{});var hW=s(ad);u1o=r(hW,`Note:
Loading a model from its configuration file does `),xoe=n(hW,"STRONG",{});var _Qr=s(xoe);b1o=r(_Qr,"not"),_Qr.forEach(t),v1o=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(hW,"CODE",{});var uQr=s(koe);T1o=r(uQr,"from_pretrained()"),uQr.forEach(t),F1o=r(hW,"to load the model weights."),hW.forEach(t),C1o=i(Ys),Roe=n(Ys,"P",{});var bQr=s(Roe);M1o=r(bQr,"Examples:"),bQr.forEach(t),E1o=i(Ys),m(fE.$$.fragment,Ys),Ys.forEach(t),y1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(mE.$$.fragment,Ot),w1o=i(Ot),Soe=n(Ot,"P",{});var vQr=s(Soe);A1o=r(vQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vQr.forEach(t),L1o=i(Ot),Wa=n(Ot,"P",{});var vM=s(Wa);B1o=r(vM,"The model class to instantiate is selected based on the "),Poe=n(vM,"CODE",{});var TQr=s(Poe);x1o=r(TQr,"model_type"),TQr.forEach(t),k1o=r(vM,` property of the config object (either
passed as an argument or loaded from `),$oe=n(vM,"CODE",{});var FQr=s($oe);R1o=r(FQr,"pretrained_model_name_or_path"),FQr.forEach(t),S1o=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(vM,"CODE",{});var CQr=s(Ioe);P1o=r(CQr,"pretrained_model_name_or_path"),CQr.forEach(t),$1o=r(vM,":"),vM.forEach(t),I1o=i(Ot),$=n(Ot,"UL",{});var D=s($);bu=n(D,"LI",{});var E4e=s(bu);Doe=n(E4e,"STRONG",{});var MQr=s(Doe);D1o=r(MQr,"bart"),MQr.forEach(t),N1o=r(E4e," \u2014 "),_$=n(E4e,"A",{href:!0});var EQr=s(_$);j1o=r(EQr,"BartForCausalLM"),EQr.forEach(t),q1o=r(E4e," (BART model)"),E4e.forEach(t),G1o=i(D),vu=n(D,"LI",{});var y4e=s(vu);Noe=n(y4e,"STRONG",{});var yQr=s(Noe);O1o=r(yQr,"bert"),yQr.forEach(t),X1o=r(y4e," \u2014 "),u$=n(y4e,"A",{href:!0});var wQr=s(u$);V1o=r(wQr,"BertLMHeadModel"),wQr.forEach(t),z1o=r(y4e," (BERT model)"),y4e.forEach(t),W1o=i(D),Tu=n(D,"LI",{});var w4e=s(Tu);joe=n(w4e,"STRONG",{});var AQr=s(joe);Q1o=r(AQr,"bert-generation"),AQr.forEach(t),H1o=r(w4e," \u2014 "),b$=n(w4e,"A",{href:!0});var LQr=s(b$);U1o=r(LQr,"BertGenerationDecoder"),LQr.forEach(t),J1o=r(w4e," (Bert Generation model)"),w4e.forEach(t),Y1o=i(D),Fu=n(D,"LI",{});var A4e=s(Fu);qoe=n(A4e,"STRONG",{});var BQr=s(qoe);K1o=r(BQr,"big_bird"),BQr.forEach(t),Z1o=r(A4e," \u2014 "),v$=n(A4e,"A",{href:!0});var xQr=s(v$);ebo=r(xQr,"BigBirdForCausalLM"),xQr.forEach(t),obo=r(A4e," (BigBird model)"),A4e.forEach(t),rbo=i(D),Cu=n(D,"LI",{});var L4e=s(Cu);Goe=n(L4e,"STRONG",{});var kQr=s(Goe);tbo=r(kQr,"bigbird_pegasus"),kQr.forEach(t),abo=r(L4e," \u2014 "),T$=n(L4e,"A",{href:!0});var RQr=s(T$);nbo=r(RQr,"BigBirdPegasusForCausalLM"),RQr.forEach(t),sbo=r(L4e," (BigBirdPegasus model)"),L4e.forEach(t),lbo=i(D),Mu=n(D,"LI",{});var B4e=s(Mu);Ooe=n(B4e,"STRONG",{});var SQr=s(Ooe);ibo=r(SQr,"blenderbot"),SQr.forEach(t),dbo=r(B4e," \u2014 "),F$=n(B4e,"A",{href:!0});var PQr=s(F$);cbo=r(PQr,"BlenderbotForCausalLM"),PQr.forEach(t),fbo=r(B4e," (Blenderbot model)"),B4e.forEach(t),mbo=i(D),Eu=n(D,"LI",{});var x4e=s(Eu);Xoe=n(x4e,"STRONG",{});var $Qr=s(Xoe);gbo=r($Qr,"blenderbot-small"),$Qr.forEach(t),hbo=r(x4e," \u2014 "),C$=n(x4e,"A",{href:!0});var IQr=s(C$);pbo=r(IQr,"BlenderbotSmallForCausalLM"),IQr.forEach(t),_bo=r(x4e," (BlenderbotSmall model)"),x4e.forEach(t),ubo=i(D),yu=n(D,"LI",{});var k4e=s(yu);Voe=n(k4e,"STRONG",{});var DQr=s(Voe);bbo=r(DQr,"camembert"),DQr.forEach(t),vbo=r(k4e," \u2014 "),M$=n(k4e,"A",{href:!0});var NQr=s(M$);Tbo=r(NQr,"CamembertForCausalLM"),NQr.forEach(t),Fbo=r(k4e," (CamemBERT model)"),k4e.forEach(t),Cbo=i(D),wu=n(D,"LI",{});var R4e=s(wu);zoe=n(R4e,"STRONG",{});var jQr=s(zoe);Mbo=r(jQr,"ctrl"),jQr.forEach(t),Ebo=r(R4e," \u2014 "),E$=n(R4e,"A",{href:!0});var qQr=s(E$);ybo=r(qQr,"CTRLLMHeadModel"),qQr.forEach(t),wbo=r(R4e," (CTRL model)"),R4e.forEach(t),Abo=i(D),Au=n(D,"LI",{});var S4e=s(Au);Woe=n(S4e,"STRONG",{});var GQr=s(Woe);Lbo=r(GQr,"data2vec-text"),GQr.forEach(t),Bbo=r(S4e," \u2014 "),y$=n(S4e,"A",{href:!0});var OQr=s(y$);xbo=r(OQr,"Data2VecTextForCausalLM"),OQr.forEach(t),kbo=r(S4e," (Data2VecText model)"),S4e.forEach(t),Rbo=i(D),Lu=n(D,"LI",{});var P4e=s(Lu);Qoe=n(P4e,"STRONG",{});var XQr=s(Qoe);Sbo=r(XQr,"electra"),XQr.forEach(t),Pbo=r(P4e," \u2014 "),w$=n(P4e,"A",{href:!0});var VQr=s(w$);$bo=r(VQr,"ElectraForCausalLM"),VQr.forEach(t),Ibo=r(P4e," (ELECTRA model)"),P4e.forEach(t),Dbo=i(D),Bu=n(D,"LI",{});var $4e=s(Bu);Hoe=n($4e,"STRONG",{});var zQr=s(Hoe);Nbo=r(zQr,"gpt2"),zQr.forEach(t),jbo=r($4e," \u2014 "),A$=n($4e,"A",{href:!0});var WQr=s(A$);qbo=r(WQr,"GPT2LMHeadModel"),WQr.forEach(t),Gbo=r($4e," (OpenAI GPT-2 model)"),$4e.forEach(t),Obo=i(D),xu=n(D,"LI",{});var I4e=s(xu);Uoe=n(I4e,"STRONG",{});var QQr=s(Uoe);Xbo=r(QQr,"gpt_neo"),QQr.forEach(t),Vbo=r(I4e," \u2014 "),L$=n(I4e,"A",{href:!0});var HQr=s(L$);zbo=r(HQr,"GPTNeoForCausalLM"),HQr.forEach(t),Wbo=r(I4e," (GPT Neo model)"),I4e.forEach(t),Qbo=i(D),ku=n(D,"LI",{});var D4e=s(ku);Joe=n(D4e,"STRONG",{});var UQr=s(Joe);Hbo=r(UQr,"gptj"),UQr.forEach(t),Ubo=r(D4e," \u2014 "),B$=n(D4e,"A",{href:!0});var JQr=s(B$);Jbo=r(JQr,"GPTJForCausalLM"),JQr.forEach(t),Ybo=r(D4e," (GPT-J model)"),D4e.forEach(t),Kbo=i(D),Ru=n(D,"LI",{});var N4e=s(Ru);Yoe=n(N4e,"STRONG",{});var YQr=s(Yoe);Zbo=r(YQr,"marian"),YQr.forEach(t),e3o=r(N4e," \u2014 "),x$=n(N4e,"A",{href:!0});var KQr=s(x$);o3o=r(KQr,"MarianForCausalLM"),KQr.forEach(t),r3o=r(N4e," (Marian model)"),N4e.forEach(t),t3o=i(D),Su=n(D,"LI",{});var j4e=s(Su);Koe=n(j4e,"STRONG",{});var ZQr=s(Koe);a3o=r(ZQr,"mbart"),ZQr.forEach(t),n3o=r(j4e," \u2014 "),k$=n(j4e,"A",{href:!0});var eHr=s(k$);s3o=r(eHr,"MBartForCausalLM"),eHr.forEach(t),l3o=r(j4e," (mBART model)"),j4e.forEach(t),i3o=i(D),Pu=n(D,"LI",{});var q4e=s(Pu);Zoe=n(q4e,"STRONG",{});var oHr=s(Zoe);d3o=r(oHr,"megatron-bert"),oHr.forEach(t),c3o=r(q4e," \u2014 "),R$=n(q4e,"A",{href:!0});var rHr=s(R$);f3o=r(rHr,"MegatronBertForCausalLM"),rHr.forEach(t),m3o=r(q4e," (MegatronBert model)"),q4e.forEach(t),g3o=i(D),$u=n(D,"LI",{});var G4e=s($u);ere=n(G4e,"STRONG",{});var tHr=s(ere);h3o=r(tHr,"openai-gpt"),tHr.forEach(t),p3o=r(G4e," \u2014 "),S$=n(G4e,"A",{href:!0});var aHr=s(S$);_3o=r(aHr,"OpenAIGPTLMHeadModel"),aHr.forEach(t),u3o=r(G4e," (OpenAI GPT model)"),G4e.forEach(t),b3o=i(D),Iu=n(D,"LI",{});var O4e=s(Iu);ore=n(O4e,"STRONG",{});var nHr=s(ore);v3o=r(nHr,"pegasus"),nHr.forEach(t),T3o=r(O4e," \u2014 "),P$=n(O4e,"A",{href:!0});var sHr=s(P$);F3o=r(sHr,"PegasusForCausalLM"),sHr.forEach(t),C3o=r(O4e," (Pegasus model)"),O4e.forEach(t),M3o=i(D),Du=n(D,"LI",{});var X4e=s(Du);rre=n(X4e,"STRONG",{});var lHr=s(rre);E3o=r(lHr,"plbart"),lHr.forEach(t),y3o=r(X4e," \u2014 "),$$=n(X4e,"A",{href:!0});var iHr=s($$);w3o=r(iHr,"PLBartForCausalLM"),iHr.forEach(t),A3o=r(X4e," (PLBart model)"),X4e.forEach(t),L3o=i(D),Nu=n(D,"LI",{});var V4e=s(Nu);tre=n(V4e,"STRONG",{});var dHr=s(tre);B3o=r(dHr,"prophetnet"),dHr.forEach(t),x3o=r(V4e," \u2014 "),I$=n(V4e,"A",{href:!0});var cHr=s(I$);k3o=r(cHr,"ProphetNetForCausalLM"),cHr.forEach(t),R3o=r(V4e," (ProphetNet model)"),V4e.forEach(t),S3o=i(D),ju=n(D,"LI",{});var z4e=s(ju);are=n(z4e,"STRONG",{});var fHr=s(are);P3o=r(fHr,"qdqbert"),fHr.forEach(t),$3o=r(z4e," \u2014 "),D$=n(z4e,"A",{href:!0});var mHr=s(D$);I3o=r(mHr,"QDQBertLMHeadModel"),mHr.forEach(t),D3o=r(z4e," (QDQBert model)"),z4e.forEach(t),N3o=i(D),qu=n(D,"LI",{});var W4e=s(qu);nre=n(W4e,"STRONG",{});var gHr=s(nre);j3o=r(gHr,"reformer"),gHr.forEach(t),q3o=r(W4e," \u2014 "),N$=n(W4e,"A",{href:!0});var hHr=s(N$);G3o=r(hHr,"ReformerModelWithLMHead"),hHr.forEach(t),O3o=r(W4e," (Reformer model)"),W4e.forEach(t),X3o=i(D),Gu=n(D,"LI",{});var Q4e=s(Gu);sre=n(Q4e,"STRONG",{});var pHr=s(sre);V3o=r(pHr,"rembert"),pHr.forEach(t),z3o=r(Q4e," \u2014 "),j$=n(Q4e,"A",{href:!0});var _Hr=s(j$);W3o=r(_Hr,"RemBertForCausalLM"),_Hr.forEach(t),Q3o=r(Q4e," (RemBERT model)"),Q4e.forEach(t),H3o=i(D),Ou=n(D,"LI",{});var H4e=s(Ou);lre=n(H4e,"STRONG",{});var uHr=s(lre);U3o=r(uHr,"roberta"),uHr.forEach(t),J3o=r(H4e," \u2014 "),q$=n(H4e,"A",{href:!0});var bHr=s(q$);Y3o=r(bHr,"RobertaForCausalLM"),bHr.forEach(t),K3o=r(H4e," (RoBERTa model)"),H4e.forEach(t),Z3o=i(D),Xu=n(D,"LI",{});var U4e=s(Xu);ire=n(U4e,"STRONG",{});var vHr=s(ire);e2o=r(vHr,"roformer"),vHr.forEach(t),o2o=r(U4e," \u2014 "),G$=n(U4e,"A",{href:!0});var THr=s(G$);r2o=r(THr,"RoFormerForCausalLM"),THr.forEach(t),t2o=r(U4e," (RoFormer model)"),U4e.forEach(t),a2o=i(D),Vu=n(D,"LI",{});var J4e=s(Vu);dre=n(J4e,"STRONG",{});var FHr=s(dre);n2o=r(FHr,"speech_to_text_2"),FHr.forEach(t),s2o=r(J4e," \u2014 "),O$=n(J4e,"A",{href:!0});var CHr=s(O$);l2o=r(CHr,"Speech2Text2ForCausalLM"),CHr.forEach(t),i2o=r(J4e," (Speech2Text2 model)"),J4e.forEach(t),d2o=i(D),zu=n(D,"LI",{});var Y4e=s(zu);cre=n(Y4e,"STRONG",{});var MHr=s(cre);c2o=r(MHr,"transfo-xl"),MHr.forEach(t),f2o=r(Y4e," \u2014 "),X$=n(Y4e,"A",{href:!0});var EHr=s(X$);m2o=r(EHr,"TransfoXLLMHeadModel"),EHr.forEach(t),g2o=r(Y4e," (Transformer-XL model)"),Y4e.forEach(t),h2o=i(D),Wu=n(D,"LI",{});var K4e=s(Wu);fre=n(K4e,"STRONG",{});var yHr=s(fre);p2o=r(yHr,"trocr"),yHr.forEach(t),_2o=r(K4e," \u2014 "),V$=n(K4e,"A",{href:!0});var wHr=s(V$);u2o=r(wHr,"TrOCRForCausalLM"),wHr.forEach(t),b2o=r(K4e," (TrOCR model)"),K4e.forEach(t),v2o=i(D),Qu=n(D,"LI",{});var Z4e=s(Qu);mre=n(Z4e,"STRONG",{});var AHr=s(mre);T2o=r(AHr,"xglm"),AHr.forEach(t),F2o=r(Z4e," \u2014 "),z$=n(Z4e,"A",{href:!0});var LHr=s(z$);C2o=r(LHr,"XGLMForCausalLM"),LHr.forEach(t),M2o=r(Z4e," (XGLM model)"),Z4e.forEach(t),E2o=i(D),Hu=n(D,"LI",{});var eEe=s(Hu);gre=n(eEe,"STRONG",{});var BHr=s(gre);y2o=r(BHr,"xlm"),BHr.forEach(t),w2o=r(eEe," \u2014 "),W$=n(eEe,"A",{href:!0});var xHr=s(W$);A2o=r(xHr,"XLMWithLMHeadModel"),xHr.forEach(t),L2o=r(eEe," (XLM model)"),eEe.forEach(t),B2o=i(D),Uu=n(D,"LI",{});var oEe=s(Uu);hre=n(oEe,"STRONG",{});var kHr=s(hre);x2o=r(kHr,"xlm-prophetnet"),kHr.forEach(t),k2o=r(oEe," \u2014 "),Q$=n(oEe,"A",{href:!0});var RHr=s(Q$);R2o=r(RHr,"XLMProphetNetForCausalLM"),RHr.forEach(t),S2o=r(oEe," (XLMProphetNet model)"),oEe.forEach(t),P2o=i(D),Ju=n(D,"LI",{});var rEe=s(Ju);pre=n(rEe,"STRONG",{});var SHr=s(pre);$2o=r(SHr,"xlm-roberta"),SHr.forEach(t),I2o=r(rEe," \u2014 "),H$=n(rEe,"A",{href:!0});var PHr=s(H$);D2o=r(PHr,"XLMRobertaForCausalLM"),PHr.forEach(t),N2o=r(rEe," (XLM-RoBERTa model)"),rEe.forEach(t),j2o=i(D),Yu=n(D,"LI",{});var tEe=s(Yu);_re=n(tEe,"STRONG",{});var $Hr=s(_re);q2o=r($Hr,"xlm-roberta-xl"),$Hr.forEach(t),G2o=r(tEe," \u2014 "),U$=n(tEe,"A",{href:!0});var IHr=s(U$);O2o=r(IHr,"XLMRobertaXLForCausalLM"),IHr.forEach(t),X2o=r(tEe," (XLM-RoBERTa-XL model)"),tEe.forEach(t),V2o=i(D),Ku=n(D,"LI",{});var aEe=s(Ku);ure=n(aEe,"STRONG",{});var DHr=s(ure);z2o=r(DHr,"xlnet"),DHr.forEach(t),W2o=r(aEe," \u2014 "),J$=n(aEe,"A",{href:!0});var NHr=s(J$);Q2o=r(NHr,"XLNetLMHeadModel"),NHr.forEach(t),H2o=r(aEe," (XLNet model)"),aEe.forEach(t),D.forEach(t),U2o=i(Ot),Zu=n(Ot,"P",{});var nEe=s(Zu);J2o=r(nEe,"The model is set in evaluation mode by default using "),bre=n(nEe,"CODE",{});var jHr=s(bre);Y2o=r(jHr,"model.eval()"),jHr.forEach(t),K2o=r(nEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=n(nEe,"CODE",{});var qHr=s(vre);Z2o=r(qHr,"model.train()"),qHr.forEach(t),nEe.forEach(t),evo=i(Ot),Tre=n(Ot,"P",{});var GHr=s(Tre);ovo=r(GHr,"Examples:"),GHr.forEach(t),rvo=i(Ot),m(gE.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Hke=i(c),nd=n(c,"H2",{class:!0});var tPe=s(nd);e1=n(tPe,"A",{id:!0,class:!0,href:!0});var OHr=s(e1);Fre=n(OHr,"SPAN",{});var XHr=s(Fre);m(hE.$$.fragment,XHr),XHr.forEach(t),OHr.forEach(t),tvo=i(tPe),Cre=n(tPe,"SPAN",{});var VHr=s(Cre);avo=r(VHr,"AutoModelForMaskedLM"),VHr.forEach(t),tPe.forEach(t),Uke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(pE.$$.fragment,Ks),nvo=i(Ks),sd=n(Ks,"P",{});var pW=s(sd);svo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=n(pW,"CODE",{});var zHr=s(Mre);lvo=r(zHr,"from_pretrained()"),zHr.forEach(t),ivo=r(pW,"class method or the "),Ere=n(pW,"CODE",{});var WHr=s(Ere);dvo=r(WHr,"from_config()"),WHr.forEach(t),cvo=r(pW,`class
method.`),pW.forEach(t),fvo=i(Ks),_E=n(Ks,"P",{});var aPe=s(_E);mvo=r(aPe,"This class cannot be instantiated directly using "),yre=n(aPe,"CODE",{});var QHr=s(yre);gvo=r(QHr,"__init__()"),QHr.forEach(t),hvo=r(aPe," (throws an error)."),aPe.forEach(t),pvo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(uE.$$.fragment,Zs),_vo=i(Zs),wre=n(Zs,"P",{});var HHr=s(wre);uvo=r(HHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HHr.forEach(t),bvo=i(Zs),ld=n(Zs,"P",{});var _W=s(ld);vvo=r(_W,`Note:
Loading a model from its configuration file does `),Are=n(_W,"STRONG",{});var UHr=s(Are);Tvo=r(UHr,"not"),UHr.forEach(t),Fvo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(_W,"CODE",{});var JHr=s(Lre);Cvo=r(JHr,"from_pretrained()"),JHr.forEach(t),Mvo=r(_W,"to load the model weights."),_W.forEach(t),Evo=i(Zs),Bre=n(Zs,"P",{});var YHr=s(Bre);yvo=r(YHr,"Examples:"),YHr.forEach(t),wvo=i(Zs),m(bE.$$.fragment,Zs),Zs.forEach(t),Avo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(vE.$$.fragment,Xt),Lvo=i(Xt),xre=n(Xt,"P",{});var KHr=s(xre);Bvo=r(KHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KHr.forEach(t),xvo=i(Xt),Qa=n(Xt,"P",{});var TM=s(Qa);kvo=r(TM,"The model class to instantiate is selected based on the "),kre=n(TM,"CODE",{});var ZHr=s(kre);Rvo=r(ZHr,"model_type"),ZHr.forEach(t),Svo=r(TM,` property of the config object (either
passed as an argument or loaded from `),Rre=n(TM,"CODE",{});var eUr=s(Rre);Pvo=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),$vo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(TM,"CODE",{});var oUr=s(Sre);Ivo=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),Dvo=r(TM,":"),TM.forEach(t),Nvo=i(Xt),I=n(Xt,"UL",{});var N=s(I);o1=n(N,"LI",{});var sEe=s(o1);Pre=n(sEe,"STRONG",{});var rUr=s(Pre);jvo=r(rUr,"albert"),rUr.forEach(t),qvo=r(sEe," \u2014 "),Y$=n(sEe,"A",{href:!0});var tUr=s(Y$);Gvo=r(tUr,"AlbertForMaskedLM"),tUr.forEach(t),Ovo=r(sEe," (ALBERT model)"),sEe.forEach(t),Xvo=i(N),r1=n(N,"LI",{});var lEe=s(r1);$re=n(lEe,"STRONG",{});var aUr=s($re);Vvo=r(aUr,"bart"),aUr.forEach(t),zvo=r(lEe," \u2014 "),K$=n(lEe,"A",{href:!0});var nUr=s(K$);Wvo=r(nUr,"BartForConditionalGeneration"),nUr.forEach(t),Qvo=r(lEe," (BART model)"),lEe.forEach(t),Hvo=i(N),t1=n(N,"LI",{});var iEe=s(t1);Ire=n(iEe,"STRONG",{});var sUr=s(Ire);Uvo=r(sUr,"bert"),sUr.forEach(t),Jvo=r(iEe," \u2014 "),Z$=n(iEe,"A",{href:!0});var lUr=s(Z$);Yvo=r(lUr,"BertForMaskedLM"),lUr.forEach(t),Kvo=r(iEe," (BERT model)"),iEe.forEach(t),Zvo=i(N),a1=n(N,"LI",{});var dEe=s(a1);Dre=n(dEe,"STRONG",{});var iUr=s(Dre);e6o=r(iUr,"big_bird"),iUr.forEach(t),o6o=r(dEe," \u2014 "),eI=n(dEe,"A",{href:!0});var dUr=s(eI);r6o=r(dUr,"BigBirdForMaskedLM"),dUr.forEach(t),t6o=r(dEe," (BigBird model)"),dEe.forEach(t),a6o=i(N),n1=n(N,"LI",{});var cEe=s(n1);Nre=n(cEe,"STRONG",{});var cUr=s(Nre);n6o=r(cUr,"camembert"),cUr.forEach(t),s6o=r(cEe," \u2014 "),oI=n(cEe,"A",{href:!0});var fUr=s(oI);l6o=r(fUr,"CamembertForMaskedLM"),fUr.forEach(t),i6o=r(cEe," (CamemBERT model)"),cEe.forEach(t),d6o=i(N),s1=n(N,"LI",{});var fEe=s(s1);jre=n(fEe,"STRONG",{});var mUr=s(jre);c6o=r(mUr,"convbert"),mUr.forEach(t),f6o=r(fEe," \u2014 "),rI=n(fEe,"A",{href:!0});var gUr=s(rI);m6o=r(gUr,"ConvBertForMaskedLM"),gUr.forEach(t),g6o=r(fEe," (ConvBERT model)"),fEe.forEach(t),h6o=i(N),l1=n(N,"LI",{});var mEe=s(l1);qre=n(mEe,"STRONG",{});var hUr=s(qre);p6o=r(hUr,"data2vec-text"),hUr.forEach(t),_6o=r(mEe," \u2014 "),tI=n(mEe,"A",{href:!0});var pUr=s(tI);u6o=r(pUr,"Data2VecTextForMaskedLM"),pUr.forEach(t),b6o=r(mEe," (Data2VecText model)"),mEe.forEach(t),v6o=i(N),i1=n(N,"LI",{});var gEe=s(i1);Gre=n(gEe,"STRONG",{});var _Ur=s(Gre);T6o=r(_Ur,"deberta"),_Ur.forEach(t),F6o=r(gEe," \u2014 "),aI=n(gEe,"A",{href:!0});var uUr=s(aI);C6o=r(uUr,"DebertaForMaskedLM"),uUr.forEach(t),M6o=r(gEe," (DeBERTa model)"),gEe.forEach(t),E6o=i(N),d1=n(N,"LI",{});var hEe=s(d1);Ore=n(hEe,"STRONG",{});var bUr=s(Ore);y6o=r(bUr,"deberta-v2"),bUr.forEach(t),w6o=r(hEe," \u2014 "),nI=n(hEe,"A",{href:!0});var vUr=s(nI);A6o=r(vUr,"DebertaV2ForMaskedLM"),vUr.forEach(t),L6o=r(hEe," (DeBERTa-v2 model)"),hEe.forEach(t),B6o=i(N),c1=n(N,"LI",{});var pEe=s(c1);Xre=n(pEe,"STRONG",{});var TUr=s(Xre);x6o=r(TUr,"distilbert"),TUr.forEach(t),k6o=r(pEe," \u2014 "),sI=n(pEe,"A",{href:!0});var FUr=s(sI);R6o=r(FUr,"DistilBertForMaskedLM"),FUr.forEach(t),S6o=r(pEe," (DistilBERT model)"),pEe.forEach(t),P6o=i(N),f1=n(N,"LI",{});var _Ee=s(f1);Vre=n(_Ee,"STRONG",{});var CUr=s(Vre);$6o=r(CUr,"electra"),CUr.forEach(t),I6o=r(_Ee," \u2014 "),lI=n(_Ee,"A",{href:!0});var MUr=s(lI);D6o=r(MUr,"ElectraForMaskedLM"),MUr.forEach(t),N6o=r(_Ee," (ELECTRA model)"),_Ee.forEach(t),j6o=i(N),m1=n(N,"LI",{});var uEe=s(m1);zre=n(uEe,"STRONG",{});var EUr=s(zre);q6o=r(EUr,"flaubert"),EUr.forEach(t),G6o=r(uEe," \u2014 "),iI=n(uEe,"A",{href:!0});var yUr=s(iI);O6o=r(yUr,"FlaubertWithLMHeadModel"),yUr.forEach(t),X6o=r(uEe," (FlauBERT model)"),uEe.forEach(t),V6o=i(N),g1=n(N,"LI",{});var bEe=s(g1);Wre=n(bEe,"STRONG",{});var wUr=s(Wre);z6o=r(wUr,"fnet"),wUr.forEach(t),W6o=r(bEe," \u2014 "),dI=n(bEe,"A",{href:!0});var AUr=s(dI);Q6o=r(AUr,"FNetForMaskedLM"),AUr.forEach(t),H6o=r(bEe," (FNet model)"),bEe.forEach(t),U6o=i(N),h1=n(N,"LI",{});var vEe=s(h1);Qre=n(vEe,"STRONG",{});var LUr=s(Qre);J6o=r(LUr,"funnel"),LUr.forEach(t),Y6o=r(vEe," \u2014 "),cI=n(vEe,"A",{href:!0});var BUr=s(cI);K6o=r(BUr,"FunnelForMaskedLM"),BUr.forEach(t),Z6o=r(vEe," (Funnel Transformer model)"),vEe.forEach(t),e0o=i(N),p1=n(N,"LI",{});var TEe=s(p1);Hre=n(TEe,"STRONG",{});var xUr=s(Hre);o0o=r(xUr,"ibert"),xUr.forEach(t),r0o=r(TEe," \u2014 "),fI=n(TEe,"A",{href:!0});var kUr=s(fI);t0o=r(kUr,"IBertForMaskedLM"),kUr.forEach(t),a0o=r(TEe," (I-BERT model)"),TEe.forEach(t),n0o=i(N),_1=n(N,"LI",{});var FEe=s(_1);Ure=n(FEe,"STRONG",{});var RUr=s(Ure);s0o=r(RUr,"layoutlm"),RUr.forEach(t),l0o=r(FEe," \u2014 "),mI=n(FEe,"A",{href:!0});var SUr=s(mI);i0o=r(SUr,"LayoutLMForMaskedLM"),SUr.forEach(t),d0o=r(FEe," (LayoutLM model)"),FEe.forEach(t),c0o=i(N),u1=n(N,"LI",{});var CEe=s(u1);Jre=n(CEe,"STRONG",{});var PUr=s(Jre);f0o=r(PUr,"longformer"),PUr.forEach(t),m0o=r(CEe," \u2014 "),gI=n(CEe,"A",{href:!0});var $Ur=s(gI);g0o=r($Ur,"LongformerForMaskedLM"),$Ur.forEach(t),h0o=r(CEe," (Longformer model)"),CEe.forEach(t),p0o=i(N),b1=n(N,"LI",{});var MEe=s(b1);Yre=n(MEe,"STRONG",{});var IUr=s(Yre);_0o=r(IUr,"mbart"),IUr.forEach(t),u0o=r(MEe," \u2014 "),hI=n(MEe,"A",{href:!0});var DUr=s(hI);b0o=r(DUr,"MBartForConditionalGeneration"),DUr.forEach(t),v0o=r(MEe," (mBART model)"),MEe.forEach(t),T0o=i(N),v1=n(N,"LI",{});var EEe=s(v1);Kre=n(EEe,"STRONG",{});var NUr=s(Kre);F0o=r(NUr,"megatron-bert"),NUr.forEach(t),C0o=r(EEe," \u2014 "),pI=n(EEe,"A",{href:!0});var jUr=s(pI);M0o=r(jUr,"MegatronBertForMaskedLM"),jUr.forEach(t),E0o=r(EEe," (MegatronBert model)"),EEe.forEach(t),y0o=i(N),T1=n(N,"LI",{});var yEe=s(T1);Zre=n(yEe,"STRONG",{});var qUr=s(Zre);w0o=r(qUr,"mobilebert"),qUr.forEach(t),A0o=r(yEe," \u2014 "),_I=n(yEe,"A",{href:!0});var GUr=s(_I);L0o=r(GUr,"MobileBertForMaskedLM"),GUr.forEach(t),B0o=r(yEe," (MobileBERT model)"),yEe.forEach(t),x0o=i(N),F1=n(N,"LI",{});var wEe=s(F1);ete=n(wEe,"STRONG",{});var OUr=s(ete);k0o=r(OUr,"mpnet"),OUr.forEach(t),R0o=r(wEe," \u2014 "),uI=n(wEe,"A",{href:!0});var XUr=s(uI);S0o=r(XUr,"MPNetForMaskedLM"),XUr.forEach(t),P0o=r(wEe," (MPNet model)"),wEe.forEach(t),$0o=i(N),C1=n(N,"LI",{});var AEe=s(C1);ote=n(AEe,"STRONG",{});var VUr=s(ote);I0o=r(VUr,"nystromformer"),VUr.forEach(t),D0o=r(AEe," \u2014 "),bI=n(AEe,"A",{href:!0});var zUr=s(bI);N0o=r(zUr,"NystromformerForMaskedLM"),zUr.forEach(t),j0o=r(AEe," (Nystromformer model)"),AEe.forEach(t),q0o=i(N),M1=n(N,"LI",{});var LEe=s(M1);rte=n(LEe,"STRONG",{});var WUr=s(rte);G0o=r(WUr,"perceiver"),WUr.forEach(t),O0o=r(LEe," \u2014 "),vI=n(LEe,"A",{href:!0});var QUr=s(vI);X0o=r(QUr,"PerceiverForMaskedLM"),QUr.forEach(t),V0o=r(LEe," (Perceiver model)"),LEe.forEach(t),z0o=i(N),E1=n(N,"LI",{});var BEe=s(E1);tte=n(BEe,"STRONG",{});var HUr=s(tte);W0o=r(HUr,"qdqbert"),HUr.forEach(t),Q0o=r(BEe," \u2014 "),TI=n(BEe,"A",{href:!0});var UUr=s(TI);H0o=r(UUr,"QDQBertForMaskedLM"),UUr.forEach(t),U0o=r(BEe," (QDQBert model)"),BEe.forEach(t),J0o=i(N),y1=n(N,"LI",{});var xEe=s(y1);ate=n(xEe,"STRONG",{});var JUr=s(ate);Y0o=r(JUr,"reformer"),JUr.forEach(t),K0o=r(xEe," \u2014 "),FI=n(xEe,"A",{href:!0});var YUr=s(FI);Z0o=r(YUr,"ReformerForMaskedLM"),YUr.forEach(t),eTo=r(xEe," (Reformer model)"),xEe.forEach(t),oTo=i(N),w1=n(N,"LI",{});var kEe=s(w1);nte=n(kEe,"STRONG",{});var KUr=s(nte);rTo=r(KUr,"rembert"),KUr.forEach(t),tTo=r(kEe," \u2014 "),CI=n(kEe,"A",{href:!0});var ZUr=s(CI);aTo=r(ZUr,"RemBertForMaskedLM"),ZUr.forEach(t),nTo=r(kEe," (RemBERT model)"),kEe.forEach(t),sTo=i(N),A1=n(N,"LI",{});var REe=s(A1);ste=n(REe,"STRONG",{});var eJr=s(ste);lTo=r(eJr,"roberta"),eJr.forEach(t),iTo=r(REe," \u2014 "),MI=n(REe,"A",{href:!0});var oJr=s(MI);dTo=r(oJr,"RobertaForMaskedLM"),oJr.forEach(t),cTo=r(REe," (RoBERTa model)"),REe.forEach(t),fTo=i(N),L1=n(N,"LI",{});var SEe=s(L1);lte=n(SEe,"STRONG",{});var rJr=s(lte);mTo=r(rJr,"roformer"),rJr.forEach(t),gTo=r(SEe," \u2014 "),EI=n(SEe,"A",{href:!0});var tJr=s(EI);hTo=r(tJr,"RoFormerForMaskedLM"),tJr.forEach(t),pTo=r(SEe," (RoFormer model)"),SEe.forEach(t),_To=i(N),B1=n(N,"LI",{});var PEe=s(B1);ite=n(PEe,"STRONG",{});var aJr=s(ite);uTo=r(aJr,"squeezebert"),aJr.forEach(t),bTo=r(PEe," \u2014 "),yI=n(PEe,"A",{href:!0});var nJr=s(yI);vTo=r(nJr,"SqueezeBertForMaskedLM"),nJr.forEach(t),TTo=r(PEe," (SqueezeBERT model)"),PEe.forEach(t),FTo=i(N),x1=n(N,"LI",{});var $Ee=s(x1);dte=n($Ee,"STRONG",{});var sJr=s(dte);CTo=r(sJr,"tapas"),sJr.forEach(t),MTo=r($Ee," \u2014 "),wI=n($Ee,"A",{href:!0});var lJr=s(wI);ETo=r(lJr,"TapasForMaskedLM"),lJr.forEach(t),yTo=r($Ee," (TAPAS model)"),$Ee.forEach(t),wTo=i(N),k1=n(N,"LI",{});var IEe=s(k1);cte=n(IEe,"STRONG",{});var iJr=s(cte);ATo=r(iJr,"wav2vec2"),iJr.forEach(t),LTo=r(IEe," \u2014 "),fte=n(IEe,"CODE",{});var dJr=s(fte);BTo=r(dJr,"Wav2Vec2ForMaskedLM"),dJr.forEach(t),xTo=r(IEe,"(Wav2Vec2 model)"),IEe.forEach(t),kTo=i(N),R1=n(N,"LI",{});var DEe=s(R1);mte=n(DEe,"STRONG",{});var cJr=s(mte);RTo=r(cJr,"xlm"),cJr.forEach(t),STo=r(DEe," \u2014 "),AI=n(DEe,"A",{href:!0});var fJr=s(AI);PTo=r(fJr,"XLMWithLMHeadModel"),fJr.forEach(t),$To=r(DEe," (XLM model)"),DEe.forEach(t),ITo=i(N),S1=n(N,"LI",{});var NEe=s(S1);gte=n(NEe,"STRONG",{});var mJr=s(gte);DTo=r(mJr,"xlm-roberta"),mJr.forEach(t),NTo=r(NEe," \u2014 "),LI=n(NEe,"A",{href:!0});var gJr=s(LI);jTo=r(gJr,"XLMRobertaForMaskedLM"),gJr.forEach(t),qTo=r(NEe," (XLM-RoBERTa model)"),NEe.forEach(t),GTo=i(N),P1=n(N,"LI",{});var jEe=s(P1);hte=n(jEe,"STRONG",{});var hJr=s(hte);OTo=r(hJr,"xlm-roberta-xl"),hJr.forEach(t),XTo=r(jEe," \u2014 "),BI=n(jEe,"A",{href:!0});var pJr=s(BI);VTo=r(pJr,"XLMRobertaXLForMaskedLM"),pJr.forEach(t),zTo=r(jEe," (XLM-RoBERTa-XL model)"),jEe.forEach(t),WTo=i(N),$1=n(N,"LI",{});var qEe=s($1);pte=n(qEe,"STRONG",{});var _Jr=s(pte);QTo=r(_Jr,"yoso"),_Jr.forEach(t),HTo=r(qEe," \u2014 "),xI=n(qEe,"A",{href:!0});var uJr=s(xI);UTo=r(uJr,"YosoForMaskedLM"),uJr.forEach(t),JTo=r(qEe," (YOSO model)"),qEe.forEach(t),N.forEach(t),YTo=i(Xt),I1=n(Xt,"P",{});var GEe=s(I1);KTo=r(GEe,"The model is set in evaluation mode by default using "),_te=n(GEe,"CODE",{});var bJr=s(_te);ZTo=r(bJr,"model.eval()"),bJr.forEach(t),e8o=r(GEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=n(GEe,"CODE",{});var vJr=s(ute);o8o=r(vJr,"model.train()"),vJr.forEach(t),GEe.forEach(t),r8o=i(Xt),bte=n(Xt,"P",{});var TJr=s(bte);t8o=r(TJr,"Examples:"),TJr.forEach(t),a8o=i(Xt),m(TE.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Jke=i(c),id=n(c,"H2",{class:!0});var nPe=s(id);D1=n(nPe,"A",{id:!0,class:!0,href:!0});var FJr=s(D1);vte=n(FJr,"SPAN",{});var CJr=s(vte);m(FE.$$.fragment,CJr),CJr.forEach(t),FJr.forEach(t),n8o=i(nPe),Tte=n(nPe,"SPAN",{});var MJr=s(Tte);s8o=r(MJr,"AutoModelForSeq2SeqLM"),MJr.forEach(t),nPe.forEach(t),Yke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(CE.$$.fragment,el),l8o=i(el),dd=n(el,"P",{});var uW=s(dd);i8o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=n(uW,"CODE",{});var EJr=s(Fte);d8o=r(EJr,"from_pretrained()"),EJr.forEach(t),c8o=r(uW,"class method or the "),Cte=n(uW,"CODE",{});var yJr=s(Cte);f8o=r(yJr,"from_config()"),yJr.forEach(t),m8o=r(uW,`class
method.`),uW.forEach(t),g8o=i(el),ME=n(el,"P",{});var sPe=s(ME);h8o=r(sPe,"This class cannot be instantiated directly using "),Mte=n(sPe,"CODE",{});var wJr=s(Mte);p8o=r(wJr,"__init__()"),wJr.forEach(t),_8o=r(sPe," (throws an error)."),sPe.forEach(t),u8o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(EE.$$.fragment,ol),b8o=i(ol),Ete=n(ol,"P",{});var AJr=s(Ete);v8o=r(AJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AJr.forEach(t),T8o=i(ol),cd=n(ol,"P",{});var bW=s(cd);F8o=r(bW,`Note:
Loading a model from its configuration file does `),yte=n(bW,"STRONG",{});var LJr=s(yte);C8o=r(LJr,"not"),LJr.forEach(t),M8o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(bW,"CODE",{});var BJr=s(wte);E8o=r(BJr,"from_pretrained()"),BJr.forEach(t),y8o=r(bW,"to load the model weights."),bW.forEach(t),w8o=i(ol),Ate=n(ol,"P",{});var xJr=s(Ate);A8o=r(xJr,"Examples:"),xJr.forEach(t),L8o=i(ol),m(yE.$$.fragment,ol),ol.forEach(t),B8o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(wE.$$.fragment,Vt),x8o=i(Vt),Lte=n(Vt,"P",{});var kJr=s(Lte);k8o=r(kJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kJr.forEach(t),R8o=i(Vt),Ha=n(Vt,"P",{});var FM=s(Ha);S8o=r(FM,"The model class to instantiate is selected based on the "),Bte=n(FM,"CODE",{});var RJr=s(Bte);P8o=r(RJr,"model_type"),RJr.forEach(t),$8o=r(FM,` property of the config object (either
passed as an argument or loaded from `),xte=n(FM,"CODE",{});var SJr=s(xte);I8o=r(SJr,"pretrained_model_name_or_path"),SJr.forEach(t),D8o=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=n(FM,"CODE",{});var PJr=s(kte);N8o=r(PJr,"pretrained_model_name_or_path"),PJr.forEach(t),j8o=r(FM,":"),FM.forEach(t),q8o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var OEe=s(N1);Rte=n(OEe,"STRONG",{});var $Jr=s(Rte);G8o=r($Jr,"bart"),$Jr.forEach(t),O8o=r(OEe," \u2014 "),kI=n(OEe,"A",{href:!0});var IJr=s(kI);X8o=r(IJr,"BartForConditionalGeneration"),IJr.forEach(t),V8o=r(OEe," (BART model)"),OEe.forEach(t),z8o=i(ie),j1=n(ie,"LI",{});var XEe=s(j1);Ste=n(XEe,"STRONG",{});var DJr=s(Ste);W8o=r(DJr,"bigbird_pegasus"),DJr.forEach(t),Q8o=r(XEe," \u2014 "),RI=n(XEe,"A",{href:!0});var NJr=s(RI);H8o=r(NJr,"BigBirdPegasusForConditionalGeneration"),NJr.forEach(t),U8o=r(XEe," (BigBirdPegasus model)"),XEe.forEach(t),J8o=i(ie),q1=n(ie,"LI",{});var VEe=s(q1);Pte=n(VEe,"STRONG",{});var jJr=s(Pte);Y8o=r(jJr,"blenderbot"),jJr.forEach(t),K8o=r(VEe," \u2014 "),SI=n(VEe,"A",{href:!0});var qJr=s(SI);Z8o=r(qJr,"BlenderbotForConditionalGeneration"),qJr.forEach(t),eFo=r(VEe," (Blenderbot model)"),VEe.forEach(t),oFo=i(ie),G1=n(ie,"LI",{});var zEe=s(G1);$te=n(zEe,"STRONG",{});var GJr=s($te);rFo=r(GJr,"blenderbot-small"),GJr.forEach(t),tFo=r(zEe," \u2014 "),PI=n(zEe,"A",{href:!0});var OJr=s(PI);aFo=r(OJr,"BlenderbotSmallForConditionalGeneration"),OJr.forEach(t),nFo=r(zEe," (BlenderbotSmall model)"),zEe.forEach(t),sFo=i(ie),O1=n(ie,"LI",{});var WEe=s(O1);Ite=n(WEe,"STRONG",{});var XJr=s(Ite);lFo=r(XJr,"encoder-decoder"),XJr.forEach(t),iFo=r(WEe," \u2014 "),$I=n(WEe,"A",{href:!0});var VJr=s($I);dFo=r(VJr,"EncoderDecoderModel"),VJr.forEach(t),cFo=r(WEe," (Encoder decoder model)"),WEe.forEach(t),fFo=i(ie),X1=n(ie,"LI",{});var QEe=s(X1);Dte=n(QEe,"STRONG",{});var zJr=s(Dte);mFo=r(zJr,"fsmt"),zJr.forEach(t),gFo=r(QEe," \u2014 "),II=n(QEe,"A",{href:!0});var WJr=s(II);hFo=r(WJr,"FSMTForConditionalGeneration"),WJr.forEach(t),pFo=r(QEe," (FairSeq Machine-Translation model)"),QEe.forEach(t),_Fo=i(ie),V1=n(ie,"LI",{});var HEe=s(V1);Nte=n(HEe,"STRONG",{});var QJr=s(Nte);uFo=r(QJr,"led"),QJr.forEach(t),bFo=r(HEe," \u2014 "),DI=n(HEe,"A",{href:!0});var HJr=s(DI);vFo=r(HJr,"LEDForConditionalGeneration"),HJr.forEach(t),TFo=r(HEe," (LED model)"),HEe.forEach(t),FFo=i(ie),z1=n(ie,"LI",{});var UEe=s(z1);jte=n(UEe,"STRONG",{});var UJr=s(jte);CFo=r(UJr,"m2m_100"),UJr.forEach(t),MFo=r(UEe," \u2014 "),NI=n(UEe,"A",{href:!0});var JJr=s(NI);EFo=r(JJr,"M2M100ForConditionalGeneration"),JJr.forEach(t),yFo=r(UEe," (M2M100 model)"),UEe.forEach(t),wFo=i(ie),W1=n(ie,"LI",{});var JEe=s(W1);qte=n(JEe,"STRONG",{});var YJr=s(qte);AFo=r(YJr,"marian"),YJr.forEach(t),LFo=r(JEe," \u2014 "),jI=n(JEe,"A",{href:!0});var KJr=s(jI);BFo=r(KJr,"MarianMTModel"),KJr.forEach(t),xFo=r(JEe," (Marian model)"),JEe.forEach(t),kFo=i(ie),Q1=n(ie,"LI",{});var YEe=s(Q1);Gte=n(YEe,"STRONG",{});var ZJr=s(Gte);RFo=r(ZJr,"mbart"),ZJr.forEach(t),SFo=r(YEe," \u2014 "),qI=n(YEe,"A",{href:!0});var eYr=s(qI);PFo=r(eYr,"MBartForConditionalGeneration"),eYr.forEach(t),$Fo=r(YEe," (mBART model)"),YEe.forEach(t),IFo=i(ie),H1=n(ie,"LI",{});var KEe=s(H1);Ote=n(KEe,"STRONG",{});var oYr=s(Ote);DFo=r(oYr,"mt5"),oYr.forEach(t),NFo=r(KEe," \u2014 "),GI=n(KEe,"A",{href:!0});var rYr=s(GI);jFo=r(rYr,"MT5ForConditionalGeneration"),rYr.forEach(t),qFo=r(KEe," (mT5 model)"),KEe.forEach(t),GFo=i(ie),U1=n(ie,"LI",{});var ZEe=s(U1);Xte=n(ZEe,"STRONG",{});var tYr=s(Xte);OFo=r(tYr,"pegasus"),tYr.forEach(t),XFo=r(ZEe," \u2014 "),OI=n(ZEe,"A",{href:!0});var aYr=s(OI);VFo=r(aYr,"PegasusForConditionalGeneration"),aYr.forEach(t),zFo=r(ZEe," (Pegasus model)"),ZEe.forEach(t),WFo=i(ie),J1=n(ie,"LI",{});var e5e=s(J1);Vte=n(e5e,"STRONG",{});var nYr=s(Vte);QFo=r(nYr,"plbart"),nYr.forEach(t),HFo=r(e5e," \u2014 "),XI=n(e5e,"A",{href:!0});var sYr=s(XI);UFo=r(sYr,"PLBartForConditionalGeneration"),sYr.forEach(t),JFo=r(e5e," (PLBart model)"),e5e.forEach(t),YFo=i(ie),Y1=n(ie,"LI",{});var o5e=s(Y1);zte=n(o5e,"STRONG",{});var lYr=s(zte);KFo=r(lYr,"prophetnet"),lYr.forEach(t),ZFo=r(o5e," \u2014 "),VI=n(o5e,"A",{href:!0});var iYr=s(VI);eCo=r(iYr,"ProphetNetForConditionalGeneration"),iYr.forEach(t),oCo=r(o5e," (ProphetNet model)"),o5e.forEach(t),rCo=i(ie),K1=n(ie,"LI",{});var r5e=s(K1);Wte=n(r5e,"STRONG",{});var dYr=s(Wte);tCo=r(dYr,"t5"),dYr.forEach(t),aCo=r(r5e," \u2014 "),zI=n(r5e,"A",{href:!0});var cYr=s(zI);nCo=r(cYr,"T5ForConditionalGeneration"),cYr.forEach(t),sCo=r(r5e," (T5 model)"),r5e.forEach(t),lCo=i(ie),Z1=n(ie,"LI",{});var t5e=s(Z1);Qte=n(t5e,"STRONG",{});var fYr=s(Qte);iCo=r(fYr,"xlm-prophetnet"),fYr.forEach(t),dCo=r(t5e," \u2014 "),WI=n(t5e,"A",{href:!0});var mYr=s(WI);cCo=r(mYr,"XLMProphetNetForConditionalGeneration"),mYr.forEach(t),fCo=r(t5e," (XLMProphetNet model)"),t5e.forEach(t),ie.forEach(t),mCo=i(Vt),eb=n(Vt,"P",{});var a5e=s(eb);gCo=r(a5e,"The model is set in evaluation mode by default using "),Hte=n(a5e,"CODE",{});var gYr=s(Hte);hCo=r(gYr,"model.eval()"),gYr.forEach(t),pCo=r(a5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=n(a5e,"CODE",{});var hYr=s(Ute);_Co=r(hYr,"model.train()"),hYr.forEach(t),a5e.forEach(t),uCo=i(Vt),Jte=n(Vt,"P",{});var pYr=s(Jte);bCo=r(pYr,"Examples:"),pYr.forEach(t),vCo=i(Vt),m(AE.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Kke=i(c),fd=n(c,"H2",{class:!0});var lPe=s(fd);ob=n(lPe,"A",{id:!0,class:!0,href:!0});var _Yr=s(ob);Yte=n(_Yr,"SPAN",{});var uYr=s(Yte);m(LE.$$.fragment,uYr),uYr.forEach(t),_Yr.forEach(t),TCo=i(lPe),Kte=n(lPe,"SPAN",{});var bYr=s(Kte);FCo=r(bYr,"AutoModelForSequenceClassification"),bYr.forEach(t),lPe.forEach(t),Zke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(BE.$$.fragment,rl),CCo=i(rl),md=n(rl,"P",{});var vW=s(md);MCo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=n(vW,"CODE",{});var vYr=s(Zte);ECo=r(vYr,"from_pretrained()"),vYr.forEach(t),yCo=r(vW,"class method or the "),eae=n(vW,"CODE",{});var TYr=s(eae);wCo=r(TYr,"from_config()"),TYr.forEach(t),ACo=r(vW,`class
method.`),vW.forEach(t),LCo=i(rl),xE=n(rl,"P",{});var iPe=s(xE);BCo=r(iPe,"This class cannot be instantiated directly using "),oae=n(iPe,"CODE",{});var FYr=s(oae);xCo=r(FYr,"__init__()"),FYr.forEach(t),kCo=r(iPe," (throws an error)."),iPe.forEach(t),RCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(kE.$$.fragment,tl),SCo=i(tl),rae=n(tl,"P",{});var CYr=s(rae);PCo=r(CYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CYr.forEach(t),$Co=i(tl),gd=n(tl,"P",{});var TW=s(gd);ICo=r(TW,`Note:
Loading a model from its configuration file does `),tae=n(TW,"STRONG",{});var MYr=s(tae);DCo=r(MYr,"not"),MYr.forEach(t),NCo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=n(TW,"CODE",{});var EYr=s(aae);jCo=r(EYr,"from_pretrained()"),EYr.forEach(t),qCo=r(TW,"to load the model weights."),TW.forEach(t),GCo=i(tl),nae=n(tl,"P",{});var yYr=s(nae);OCo=r(yYr,"Examples:"),yYr.forEach(t),XCo=i(tl),m(RE.$$.fragment,tl),tl.forEach(t),VCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(SE.$$.fragment,zt),zCo=i(zt),sae=n(zt,"P",{});var wYr=s(sae);WCo=r(wYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wYr.forEach(t),QCo=i(zt),Ua=n(zt,"P",{});var CM=s(Ua);HCo=r(CM,"The model class to instantiate is selected based on the "),lae=n(CM,"CODE",{});var AYr=s(lae);UCo=r(AYr,"model_type"),AYr.forEach(t),JCo=r(CM,` property of the config object (either
passed as an argument or loaded from `),iae=n(CM,"CODE",{});var LYr=s(iae);YCo=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),KCo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=n(CM,"CODE",{});var BYr=s(dae);ZCo=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),eMo=r(CM,":"),CM.forEach(t),oMo=i(zt),A=n(zt,"UL",{});var L=s(A);rb=n(L,"LI",{});var n5e=s(rb);cae=n(n5e,"STRONG",{});var xYr=s(cae);rMo=r(xYr,"albert"),xYr.forEach(t),tMo=r(n5e," \u2014 "),QI=n(n5e,"A",{href:!0});var kYr=s(QI);aMo=r(kYr,"AlbertForSequenceClassification"),kYr.forEach(t),nMo=r(n5e," (ALBERT model)"),n5e.forEach(t),sMo=i(L),tb=n(L,"LI",{});var s5e=s(tb);fae=n(s5e,"STRONG",{});var RYr=s(fae);lMo=r(RYr,"bart"),RYr.forEach(t),iMo=r(s5e," \u2014 "),HI=n(s5e,"A",{href:!0});var SYr=s(HI);dMo=r(SYr,"BartForSequenceClassification"),SYr.forEach(t),cMo=r(s5e," (BART model)"),s5e.forEach(t),fMo=i(L),ab=n(L,"LI",{});var l5e=s(ab);mae=n(l5e,"STRONG",{});var PYr=s(mae);mMo=r(PYr,"bert"),PYr.forEach(t),gMo=r(l5e," \u2014 "),UI=n(l5e,"A",{href:!0});var $Yr=s(UI);hMo=r($Yr,"BertForSequenceClassification"),$Yr.forEach(t),pMo=r(l5e," (BERT model)"),l5e.forEach(t),_Mo=i(L),nb=n(L,"LI",{});var i5e=s(nb);gae=n(i5e,"STRONG",{});var IYr=s(gae);uMo=r(IYr,"big_bird"),IYr.forEach(t),bMo=r(i5e," \u2014 "),JI=n(i5e,"A",{href:!0});var DYr=s(JI);vMo=r(DYr,"BigBirdForSequenceClassification"),DYr.forEach(t),TMo=r(i5e," (BigBird model)"),i5e.forEach(t),FMo=i(L),sb=n(L,"LI",{});var d5e=s(sb);hae=n(d5e,"STRONG",{});var NYr=s(hae);CMo=r(NYr,"bigbird_pegasus"),NYr.forEach(t),MMo=r(d5e," \u2014 "),YI=n(d5e,"A",{href:!0});var jYr=s(YI);EMo=r(jYr,"BigBirdPegasusForSequenceClassification"),jYr.forEach(t),yMo=r(d5e," (BigBirdPegasus model)"),d5e.forEach(t),wMo=i(L),lb=n(L,"LI",{});var c5e=s(lb);pae=n(c5e,"STRONG",{});var qYr=s(pae);AMo=r(qYr,"camembert"),qYr.forEach(t),LMo=r(c5e," \u2014 "),KI=n(c5e,"A",{href:!0});var GYr=s(KI);BMo=r(GYr,"CamembertForSequenceClassification"),GYr.forEach(t),xMo=r(c5e," (CamemBERT model)"),c5e.forEach(t),kMo=i(L),ib=n(L,"LI",{});var f5e=s(ib);_ae=n(f5e,"STRONG",{});var OYr=s(_ae);RMo=r(OYr,"canine"),OYr.forEach(t),SMo=r(f5e," \u2014 "),ZI=n(f5e,"A",{href:!0});var XYr=s(ZI);PMo=r(XYr,"CanineForSequenceClassification"),XYr.forEach(t),$Mo=r(f5e," (Canine model)"),f5e.forEach(t),IMo=i(L),db=n(L,"LI",{});var m5e=s(db);uae=n(m5e,"STRONG",{});var VYr=s(uae);DMo=r(VYr,"convbert"),VYr.forEach(t),NMo=r(m5e," \u2014 "),eD=n(m5e,"A",{href:!0});var zYr=s(eD);jMo=r(zYr,"ConvBertForSequenceClassification"),zYr.forEach(t),qMo=r(m5e," (ConvBERT model)"),m5e.forEach(t),GMo=i(L),cb=n(L,"LI",{});var g5e=s(cb);bae=n(g5e,"STRONG",{});var WYr=s(bae);OMo=r(WYr,"ctrl"),WYr.forEach(t),XMo=r(g5e," \u2014 "),oD=n(g5e,"A",{href:!0});var QYr=s(oD);VMo=r(QYr,"CTRLForSequenceClassification"),QYr.forEach(t),zMo=r(g5e," (CTRL model)"),g5e.forEach(t),WMo=i(L),fb=n(L,"LI",{});var h5e=s(fb);vae=n(h5e,"STRONG",{});var HYr=s(vae);QMo=r(HYr,"data2vec-text"),HYr.forEach(t),HMo=r(h5e," \u2014 "),rD=n(h5e,"A",{href:!0});var UYr=s(rD);UMo=r(UYr,"Data2VecTextForSequenceClassification"),UYr.forEach(t),JMo=r(h5e," (Data2VecText model)"),h5e.forEach(t),YMo=i(L),mb=n(L,"LI",{});var p5e=s(mb);Tae=n(p5e,"STRONG",{});var JYr=s(Tae);KMo=r(JYr,"deberta"),JYr.forEach(t),ZMo=r(p5e," \u2014 "),tD=n(p5e,"A",{href:!0});var YYr=s(tD);e4o=r(YYr,"DebertaForSequenceClassification"),YYr.forEach(t),o4o=r(p5e," (DeBERTa model)"),p5e.forEach(t),r4o=i(L),gb=n(L,"LI",{});var _5e=s(gb);Fae=n(_5e,"STRONG",{});var KYr=s(Fae);t4o=r(KYr,"deberta-v2"),KYr.forEach(t),a4o=r(_5e," \u2014 "),aD=n(_5e,"A",{href:!0});var ZYr=s(aD);n4o=r(ZYr,"DebertaV2ForSequenceClassification"),ZYr.forEach(t),s4o=r(_5e," (DeBERTa-v2 model)"),_5e.forEach(t),l4o=i(L),hb=n(L,"LI",{});var u5e=s(hb);Cae=n(u5e,"STRONG",{});var eKr=s(Cae);i4o=r(eKr,"distilbert"),eKr.forEach(t),d4o=r(u5e," \u2014 "),nD=n(u5e,"A",{href:!0});var oKr=s(nD);c4o=r(oKr,"DistilBertForSequenceClassification"),oKr.forEach(t),f4o=r(u5e," (DistilBERT model)"),u5e.forEach(t),m4o=i(L),pb=n(L,"LI",{});var b5e=s(pb);Mae=n(b5e,"STRONG",{});var rKr=s(Mae);g4o=r(rKr,"electra"),rKr.forEach(t),h4o=r(b5e," \u2014 "),sD=n(b5e,"A",{href:!0});var tKr=s(sD);p4o=r(tKr,"ElectraForSequenceClassification"),tKr.forEach(t),_4o=r(b5e," (ELECTRA model)"),b5e.forEach(t),u4o=i(L),_b=n(L,"LI",{});var v5e=s(_b);Eae=n(v5e,"STRONG",{});var aKr=s(Eae);b4o=r(aKr,"flaubert"),aKr.forEach(t),v4o=r(v5e," \u2014 "),lD=n(v5e,"A",{href:!0});var nKr=s(lD);T4o=r(nKr,"FlaubertForSequenceClassification"),nKr.forEach(t),F4o=r(v5e," (FlauBERT model)"),v5e.forEach(t),C4o=i(L),ub=n(L,"LI",{});var T5e=s(ub);yae=n(T5e,"STRONG",{});var sKr=s(yae);M4o=r(sKr,"fnet"),sKr.forEach(t),E4o=r(T5e," \u2014 "),iD=n(T5e,"A",{href:!0});var lKr=s(iD);y4o=r(lKr,"FNetForSequenceClassification"),lKr.forEach(t),w4o=r(T5e," (FNet model)"),T5e.forEach(t),A4o=i(L),bb=n(L,"LI",{});var F5e=s(bb);wae=n(F5e,"STRONG",{});var iKr=s(wae);L4o=r(iKr,"funnel"),iKr.forEach(t),B4o=r(F5e," \u2014 "),dD=n(F5e,"A",{href:!0});var dKr=s(dD);x4o=r(dKr,"FunnelForSequenceClassification"),dKr.forEach(t),k4o=r(F5e," (Funnel Transformer model)"),F5e.forEach(t),R4o=i(L),vb=n(L,"LI",{});var C5e=s(vb);Aae=n(C5e,"STRONG",{});var cKr=s(Aae);S4o=r(cKr,"gpt2"),cKr.forEach(t),P4o=r(C5e," \u2014 "),cD=n(C5e,"A",{href:!0});var fKr=s(cD);$4o=r(fKr,"GPT2ForSequenceClassification"),fKr.forEach(t),I4o=r(C5e," (OpenAI GPT-2 model)"),C5e.forEach(t),D4o=i(L),Tb=n(L,"LI",{});var M5e=s(Tb);Lae=n(M5e,"STRONG",{});var mKr=s(Lae);N4o=r(mKr,"gpt_neo"),mKr.forEach(t),j4o=r(M5e," \u2014 "),fD=n(M5e,"A",{href:!0});var gKr=s(fD);q4o=r(gKr,"GPTNeoForSequenceClassification"),gKr.forEach(t),G4o=r(M5e," (GPT Neo model)"),M5e.forEach(t),O4o=i(L),Fb=n(L,"LI",{});var E5e=s(Fb);Bae=n(E5e,"STRONG",{});var hKr=s(Bae);X4o=r(hKr,"gptj"),hKr.forEach(t),V4o=r(E5e," \u2014 "),mD=n(E5e,"A",{href:!0});var pKr=s(mD);z4o=r(pKr,"GPTJForSequenceClassification"),pKr.forEach(t),W4o=r(E5e," (GPT-J model)"),E5e.forEach(t),Q4o=i(L),Cb=n(L,"LI",{});var y5e=s(Cb);xae=n(y5e,"STRONG",{});var _Kr=s(xae);H4o=r(_Kr,"ibert"),_Kr.forEach(t),U4o=r(y5e," \u2014 "),gD=n(y5e,"A",{href:!0});var uKr=s(gD);J4o=r(uKr,"IBertForSequenceClassification"),uKr.forEach(t),Y4o=r(y5e," (I-BERT model)"),y5e.forEach(t),K4o=i(L),Mb=n(L,"LI",{});var w5e=s(Mb);kae=n(w5e,"STRONG",{});var bKr=s(kae);Z4o=r(bKr,"layoutlm"),bKr.forEach(t),eEo=r(w5e," \u2014 "),hD=n(w5e,"A",{href:!0});var vKr=s(hD);oEo=r(vKr,"LayoutLMForSequenceClassification"),vKr.forEach(t),rEo=r(w5e," (LayoutLM model)"),w5e.forEach(t),tEo=i(L),Eb=n(L,"LI",{});var A5e=s(Eb);Rae=n(A5e,"STRONG",{});var TKr=s(Rae);aEo=r(TKr,"layoutlmv2"),TKr.forEach(t),nEo=r(A5e," \u2014 "),pD=n(A5e,"A",{href:!0});var FKr=s(pD);sEo=r(FKr,"LayoutLMv2ForSequenceClassification"),FKr.forEach(t),lEo=r(A5e," (LayoutLMv2 model)"),A5e.forEach(t),iEo=i(L),yb=n(L,"LI",{});var L5e=s(yb);Sae=n(L5e,"STRONG",{});var CKr=s(Sae);dEo=r(CKr,"led"),CKr.forEach(t),cEo=r(L5e," \u2014 "),_D=n(L5e,"A",{href:!0});var MKr=s(_D);fEo=r(MKr,"LEDForSequenceClassification"),MKr.forEach(t),mEo=r(L5e," (LED model)"),L5e.forEach(t),gEo=i(L),wb=n(L,"LI",{});var B5e=s(wb);Pae=n(B5e,"STRONG",{});var EKr=s(Pae);hEo=r(EKr,"longformer"),EKr.forEach(t),pEo=r(B5e," \u2014 "),uD=n(B5e,"A",{href:!0});var yKr=s(uD);_Eo=r(yKr,"LongformerForSequenceClassification"),yKr.forEach(t),uEo=r(B5e," (Longformer model)"),B5e.forEach(t),bEo=i(L),Ab=n(L,"LI",{});var x5e=s(Ab);$ae=n(x5e,"STRONG",{});var wKr=s($ae);vEo=r(wKr,"mbart"),wKr.forEach(t),TEo=r(x5e," \u2014 "),bD=n(x5e,"A",{href:!0});var AKr=s(bD);FEo=r(AKr,"MBartForSequenceClassification"),AKr.forEach(t),CEo=r(x5e," (mBART model)"),x5e.forEach(t),MEo=i(L),Lb=n(L,"LI",{});var k5e=s(Lb);Iae=n(k5e,"STRONG",{});var LKr=s(Iae);EEo=r(LKr,"megatron-bert"),LKr.forEach(t),yEo=r(k5e," \u2014 "),vD=n(k5e,"A",{href:!0});var BKr=s(vD);wEo=r(BKr,"MegatronBertForSequenceClassification"),BKr.forEach(t),AEo=r(k5e," (MegatronBert model)"),k5e.forEach(t),LEo=i(L),Bb=n(L,"LI",{});var R5e=s(Bb);Dae=n(R5e,"STRONG",{});var xKr=s(Dae);BEo=r(xKr,"mobilebert"),xKr.forEach(t),xEo=r(R5e," \u2014 "),TD=n(R5e,"A",{href:!0});var kKr=s(TD);kEo=r(kKr,"MobileBertForSequenceClassification"),kKr.forEach(t),REo=r(R5e," (MobileBERT model)"),R5e.forEach(t),SEo=i(L),xb=n(L,"LI",{});var S5e=s(xb);Nae=n(S5e,"STRONG",{});var RKr=s(Nae);PEo=r(RKr,"mpnet"),RKr.forEach(t),$Eo=r(S5e," \u2014 "),FD=n(S5e,"A",{href:!0});var SKr=s(FD);IEo=r(SKr,"MPNetForSequenceClassification"),SKr.forEach(t),DEo=r(S5e," (MPNet model)"),S5e.forEach(t),NEo=i(L),kb=n(L,"LI",{});var P5e=s(kb);jae=n(P5e,"STRONG",{});var PKr=s(jae);jEo=r(PKr,"nystromformer"),PKr.forEach(t),qEo=r(P5e," \u2014 "),CD=n(P5e,"A",{href:!0});var $Kr=s(CD);GEo=r($Kr,"NystromformerForSequenceClassification"),$Kr.forEach(t),OEo=r(P5e," (Nystromformer model)"),P5e.forEach(t),XEo=i(L),Rb=n(L,"LI",{});var $5e=s(Rb);qae=n($5e,"STRONG",{});var IKr=s(qae);VEo=r(IKr,"openai-gpt"),IKr.forEach(t),zEo=r($5e," \u2014 "),MD=n($5e,"A",{href:!0});var DKr=s(MD);WEo=r(DKr,"OpenAIGPTForSequenceClassification"),DKr.forEach(t),QEo=r($5e," (OpenAI GPT model)"),$5e.forEach(t),HEo=i(L),Sb=n(L,"LI",{});var I5e=s(Sb);Gae=n(I5e,"STRONG",{});var NKr=s(Gae);UEo=r(NKr,"perceiver"),NKr.forEach(t),JEo=r(I5e," \u2014 "),ED=n(I5e,"A",{href:!0});var jKr=s(ED);YEo=r(jKr,"PerceiverForSequenceClassification"),jKr.forEach(t),KEo=r(I5e," (Perceiver model)"),I5e.forEach(t),ZEo=i(L),Pb=n(L,"LI",{});var D5e=s(Pb);Oae=n(D5e,"STRONG",{});var qKr=s(Oae);e5o=r(qKr,"plbart"),qKr.forEach(t),o5o=r(D5e," \u2014 "),yD=n(D5e,"A",{href:!0});var GKr=s(yD);r5o=r(GKr,"PLBartForSequenceClassification"),GKr.forEach(t),t5o=r(D5e," (PLBart model)"),D5e.forEach(t),a5o=i(L),$b=n(L,"LI",{});var N5e=s($b);Xae=n(N5e,"STRONG",{});var OKr=s(Xae);n5o=r(OKr,"qdqbert"),OKr.forEach(t),s5o=r(N5e," \u2014 "),wD=n(N5e,"A",{href:!0});var XKr=s(wD);l5o=r(XKr,"QDQBertForSequenceClassification"),XKr.forEach(t),i5o=r(N5e," (QDQBert model)"),N5e.forEach(t),d5o=i(L),Ib=n(L,"LI",{});var j5e=s(Ib);Vae=n(j5e,"STRONG",{});var VKr=s(Vae);c5o=r(VKr,"reformer"),VKr.forEach(t),f5o=r(j5e," \u2014 "),AD=n(j5e,"A",{href:!0});var zKr=s(AD);m5o=r(zKr,"ReformerForSequenceClassification"),zKr.forEach(t),g5o=r(j5e," (Reformer model)"),j5e.forEach(t),h5o=i(L),Db=n(L,"LI",{});var q5e=s(Db);zae=n(q5e,"STRONG",{});var WKr=s(zae);p5o=r(WKr,"rembert"),WKr.forEach(t),_5o=r(q5e," \u2014 "),LD=n(q5e,"A",{href:!0});var QKr=s(LD);u5o=r(QKr,"RemBertForSequenceClassification"),QKr.forEach(t),b5o=r(q5e," (RemBERT model)"),q5e.forEach(t),v5o=i(L),Nb=n(L,"LI",{});var G5e=s(Nb);Wae=n(G5e,"STRONG",{});var HKr=s(Wae);T5o=r(HKr,"roberta"),HKr.forEach(t),F5o=r(G5e," \u2014 "),BD=n(G5e,"A",{href:!0});var UKr=s(BD);C5o=r(UKr,"RobertaForSequenceClassification"),UKr.forEach(t),M5o=r(G5e," (RoBERTa model)"),G5e.forEach(t),E5o=i(L),jb=n(L,"LI",{});var O5e=s(jb);Qae=n(O5e,"STRONG",{});var JKr=s(Qae);y5o=r(JKr,"roformer"),JKr.forEach(t),w5o=r(O5e," \u2014 "),xD=n(O5e,"A",{href:!0});var YKr=s(xD);A5o=r(YKr,"RoFormerForSequenceClassification"),YKr.forEach(t),L5o=r(O5e," (RoFormer model)"),O5e.forEach(t),B5o=i(L),qb=n(L,"LI",{});var X5e=s(qb);Hae=n(X5e,"STRONG",{});var KKr=s(Hae);x5o=r(KKr,"squeezebert"),KKr.forEach(t),k5o=r(X5e," \u2014 "),kD=n(X5e,"A",{href:!0});var ZKr=s(kD);R5o=r(ZKr,"SqueezeBertForSequenceClassification"),ZKr.forEach(t),S5o=r(X5e," (SqueezeBERT model)"),X5e.forEach(t),P5o=i(L),Gb=n(L,"LI",{});var V5e=s(Gb);Uae=n(V5e,"STRONG",{});var eZr=s(Uae);$5o=r(eZr,"tapas"),eZr.forEach(t),I5o=r(V5e," \u2014 "),RD=n(V5e,"A",{href:!0});var oZr=s(RD);D5o=r(oZr,"TapasForSequenceClassification"),oZr.forEach(t),N5o=r(V5e," (TAPAS model)"),V5e.forEach(t),j5o=i(L),Ob=n(L,"LI",{});var z5e=s(Ob);Jae=n(z5e,"STRONG",{});var rZr=s(Jae);q5o=r(rZr,"transfo-xl"),rZr.forEach(t),G5o=r(z5e," \u2014 "),SD=n(z5e,"A",{href:!0});var tZr=s(SD);O5o=r(tZr,"TransfoXLForSequenceClassification"),tZr.forEach(t),X5o=r(z5e," (Transformer-XL model)"),z5e.forEach(t),V5o=i(L),Xb=n(L,"LI",{});var W5e=s(Xb);Yae=n(W5e,"STRONG",{});var aZr=s(Yae);z5o=r(aZr,"xlm"),aZr.forEach(t),W5o=r(W5e," \u2014 "),PD=n(W5e,"A",{href:!0});var nZr=s(PD);Q5o=r(nZr,"XLMForSequenceClassification"),nZr.forEach(t),H5o=r(W5e," (XLM model)"),W5e.forEach(t),U5o=i(L),Vb=n(L,"LI",{});var Q5e=s(Vb);Kae=n(Q5e,"STRONG",{});var sZr=s(Kae);J5o=r(sZr,"xlm-roberta"),sZr.forEach(t),Y5o=r(Q5e," \u2014 "),$D=n(Q5e,"A",{href:!0});var lZr=s($D);K5o=r(lZr,"XLMRobertaForSequenceClassification"),lZr.forEach(t),Z5o=r(Q5e," (XLM-RoBERTa model)"),Q5e.forEach(t),eyo=i(L),zb=n(L,"LI",{});var H5e=s(zb);Zae=n(H5e,"STRONG",{});var iZr=s(Zae);oyo=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),ryo=r(H5e," \u2014 "),ID=n(H5e,"A",{href:!0});var dZr=s(ID);tyo=r(dZr,"XLMRobertaXLForSequenceClassification"),dZr.forEach(t),ayo=r(H5e," (XLM-RoBERTa-XL model)"),H5e.forEach(t),nyo=i(L),Wb=n(L,"LI",{});var U5e=s(Wb);ene=n(U5e,"STRONG",{});var cZr=s(ene);syo=r(cZr,"xlnet"),cZr.forEach(t),lyo=r(U5e," \u2014 "),DD=n(U5e,"A",{href:!0});var fZr=s(DD);iyo=r(fZr,"XLNetForSequenceClassification"),fZr.forEach(t),dyo=r(U5e," (XLNet model)"),U5e.forEach(t),cyo=i(L),Qb=n(L,"LI",{});var J5e=s(Qb);one=n(J5e,"STRONG",{});var mZr=s(one);fyo=r(mZr,"yoso"),mZr.forEach(t),myo=r(J5e," \u2014 "),ND=n(J5e,"A",{href:!0});var gZr=s(ND);gyo=r(gZr,"YosoForSequenceClassification"),gZr.forEach(t),hyo=r(J5e," (YOSO model)"),J5e.forEach(t),L.forEach(t),pyo=i(zt),Hb=n(zt,"P",{});var Y5e=s(Hb);_yo=r(Y5e,"The model is set in evaluation mode by default using "),rne=n(Y5e,"CODE",{});var hZr=s(rne);uyo=r(hZr,"model.eval()"),hZr.forEach(t),byo=r(Y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=n(Y5e,"CODE",{});var pZr=s(tne);vyo=r(pZr,"model.train()"),pZr.forEach(t),Y5e.forEach(t),Tyo=i(zt),ane=n(zt,"P",{});var _Zr=s(ane);Fyo=r(_Zr,"Examples:"),_Zr.forEach(t),Cyo=i(zt),m(PE.$$.fragment,zt),zt.forEach(t),rl.forEach(t),eRe=i(c),hd=n(c,"H2",{class:!0});var dPe=s(hd);Ub=n(dPe,"A",{id:!0,class:!0,href:!0});var uZr=s(Ub);nne=n(uZr,"SPAN",{});var bZr=s(nne);m($E.$$.fragment,bZr),bZr.forEach(t),uZr.forEach(t),Myo=i(dPe),sne=n(dPe,"SPAN",{});var vZr=s(sne);Eyo=r(vZr,"AutoModelForMultipleChoice"),vZr.forEach(t),dPe.forEach(t),oRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(IE.$$.fragment,al),yyo=i(al),pd=n(al,"P",{});var FW=s(pd);wyo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=n(FW,"CODE",{});var TZr=s(lne);Ayo=r(TZr,"from_pretrained()"),TZr.forEach(t),Lyo=r(FW,"class method or the "),ine=n(FW,"CODE",{});var FZr=s(ine);Byo=r(FZr,"from_config()"),FZr.forEach(t),xyo=r(FW,`class
method.`),FW.forEach(t),kyo=i(al),DE=n(al,"P",{});var cPe=s(DE);Ryo=r(cPe,"This class cannot be instantiated directly using "),dne=n(cPe,"CODE",{});var CZr=s(dne);Syo=r(CZr,"__init__()"),CZr.forEach(t),Pyo=r(cPe," (throws an error)."),cPe.forEach(t),$yo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(NE.$$.fragment,nl),Iyo=i(nl),cne=n(nl,"P",{});var MZr=s(cne);Dyo=r(MZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MZr.forEach(t),Nyo=i(nl),_d=n(nl,"P",{});var CW=s(_d);jyo=r(CW,`Note:
Loading a model from its configuration file does `),fne=n(CW,"STRONG",{});var EZr=s(fne);qyo=r(EZr,"not"),EZr.forEach(t),Gyo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(CW,"CODE",{});var yZr=s(mne);Oyo=r(yZr,"from_pretrained()"),yZr.forEach(t),Xyo=r(CW,"to load the model weights."),CW.forEach(t),Vyo=i(nl),gne=n(nl,"P",{});var wZr=s(gne);zyo=r(wZr,"Examples:"),wZr.forEach(t),Wyo=i(nl),m(jE.$$.fragment,nl),nl.forEach(t),Qyo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(qE.$$.fragment,Wt),Hyo=i(Wt),hne=n(Wt,"P",{});var AZr=s(hne);Uyo=r(AZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AZr.forEach(t),Jyo=i(Wt),Ja=n(Wt,"P",{});var MM=s(Ja);Yyo=r(MM,"The model class to instantiate is selected based on the "),pne=n(MM,"CODE",{});var LZr=s(pne);Kyo=r(LZr,"model_type"),LZr.forEach(t),Zyo=r(MM,` property of the config object (either
passed as an argument or loaded from `),_ne=n(MM,"CODE",{});var BZr=s(_ne);ewo=r(BZr,"pretrained_model_name_or_path"),BZr.forEach(t),owo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=n(MM,"CODE",{});var xZr=s(une);rwo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),two=r(MM,":"),MM.forEach(t),awo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Jb=n(O,"LI",{});var K5e=s(Jb);bne=n(K5e,"STRONG",{});var kZr=s(bne);nwo=r(kZr,"albert"),kZr.forEach(t),swo=r(K5e," \u2014 "),jD=n(K5e,"A",{href:!0});var RZr=s(jD);lwo=r(RZr,"AlbertForMultipleChoice"),RZr.forEach(t),iwo=r(K5e," (ALBERT model)"),K5e.forEach(t),dwo=i(O),Yb=n(O,"LI",{});var Z5e=s(Yb);vne=n(Z5e,"STRONG",{});var SZr=s(vne);cwo=r(SZr,"bert"),SZr.forEach(t),fwo=r(Z5e," \u2014 "),qD=n(Z5e,"A",{href:!0});var PZr=s(qD);mwo=r(PZr,"BertForMultipleChoice"),PZr.forEach(t),gwo=r(Z5e," (BERT model)"),Z5e.forEach(t),hwo=i(O),Kb=n(O,"LI",{});var eye=s(Kb);Tne=n(eye,"STRONG",{});var $Zr=s(Tne);pwo=r($Zr,"big_bird"),$Zr.forEach(t),_wo=r(eye," \u2014 "),GD=n(eye,"A",{href:!0});var IZr=s(GD);uwo=r(IZr,"BigBirdForMultipleChoice"),IZr.forEach(t),bwo=r(eye," (BigBird model)"),eye.forEach(t),vwo=i(O),Zb=n(O,"LI",{});var oye=s(Zb);Fne=n(oye,"STRONG",{});var DZr=s(Fne);Two=r(DZr,"camembert"),DZr.forEach(t),Fwo=r(oye," \u2014 "),OD=n(oye,"A",{href:!0});var NZr=s(OD);Cwo=r(NZr,"CamembertForMultipleChoice"),NZr.forEach(t),Mwo=r(oye," (CamemBERT model)"),oye.forEach(t),Ewo=i(O),e3=n(O,"LI",{});var rye=s(e3);Cne=n(rye,"STRONG",{});var jZr=s(Cne);ywo=r(jZr,"canine"),jZr.forEach(t),wwo=r(rye," \u2014 "),XD=n(rye,"A",{href:!0});var qZr=s(XD);Awo=r(qZr,"CanineForMultipleChoice"),qZr.forEach(t),Lwo=r(rye," (Canine model)"),rye.forEach(t),Bwo=i(O),o3=n(O,"LI",{});var tye=s(o3);Mne=n(tye,"STRONG",{});var GZr=s(Mne);xwo=r(GZr,"convbert"),GZr.forEach(t),kwo=r(tye," \u2014 "),VD=n(tye,"A",{href:!0});var OZr=s(VD);Rwo=r(OZr,"ConvBertForMultipleChoice"),OZr.forEach(t),Swo=r(tye," (ConvBERT model)"),tye.forEach(t),Pwo=i(O),r3=n(O,"LI",{});var aye=s(r3);Ene=n(aye,"STRONG",{});var XZr=s(Ene);$wo=r(XZr,"data2vec-text"),XZr.forEach(t),Iwo=r(aye," \u2014 "),zD=n(aye,"A",{href:!0});var VZr=s(zD);Dwo=r(VZr,"Data2VecTextForMultipleChoice"),VZr.forEach(t),Nwo=r(aye," (Data2VecText model)"),aye.forEach(t),jwo=i(O),t3=n(O,"LI",{});var nye=s(t3);yne=n(nye,"STRONG",{});var zZr=s(yne);qwo=r(zZr,"distilbert"),zZr.forEach(t),Gwo=r(nye," \u2014 "),WD=n(nye,"A",{href:!0});var WZr=s(WD);Owo=r(WZr,"DistilBertForMultipleChoice"),WZr.forEach(t),Xwo=r(nye," (DistilBERT model)"),nye.forEach(t),Vwo=i(O),a3=n(O,"LI",{});var sye=s(a3);wne=n(sye,"STRONG",{});var QZr=s(wne);zwo=r(QZr,"electra"),QZr.forEach(t),Wwo=r(sye," \u2014 "),QD=n(sye,"A",{href:!0});var HZr=s(QD);Qwo=r(HZr,"ElectraForMultipleChoice"),HZr.forEach(t),Hwo=r(sye," (ELECTRA model)"),sye.forEach(t),Uwo=i(O),n3=n(O,"LI",{});var lye=s(n3);Ane=n(lye,"STRONG",{});var UZr=s(Ane);Jwo=r(UZr,"flaubert"),UZr.forEach(t),Ywo=r(lye," \u2014 "),HD=n(lye,"A",{href:!0});var JZr=s(HD);Kwo=r(JZr,"FlaubertForMultipleChoice"),JZr.forEach(t),Zwo=r(lye," (FlauBERT model)"),lye.forEach(t),eAo=i(O),s3=n(O,"LI",{});var iye=s(s3);Lne=n(iye,"STRONG",{});var YZr=s(Lne);oAo=r(YZr,"fnet"),YZr.forEach(t),rAo=r(iye," \u2014 "),UD=n(iye,"A",{href:!0});var KZr=s(UD);tAo=r(KZr,"FNetForMultipleChoice"),KZr.forEach(t),aAo=r(iye," (FNet model)"),iye.forEach(t),nAo=i(O),l3=n(O,"LI",{});var dye=s(l3);Bne=n(dye,"STRONG",{});var ZZr=s(Bne);sAo=r(ZZr,"funnel"),ZZr.forEach(t),lAo=r(dye," \u2014 "),JD=n(dye,"A",{href:!0});var eet=s(JD);iAo=r(eet,"FunnelForMultipleChoice"),eet.forEach(t),dAo=r(dye," (Funnel Transformer model)"),dye.forEach(t),cAo=i(O),i3=n(O,"LI",{});var cye=s(i3);xne=n(cye,"STRONG",{});var oet=s(xne);fAo=r(oet,"ibert"),oet.forEach(t),mAo=r(cye," \u2014 "),YD=n(cye,"A",{href:!0});var ret=s(YD);gAo=r(ret,"IBertForMultipleChoice"),ret.forEach(t),hAo=r(cye," (I-BERT model)"),cye.forEach(t),pAo=i(O),d3=n(O,"LI",{});var fye=s(d3);kne=n(fye,"STRONG",{});var tet=s(kne);_Ao=r(tet,"longformer"),tet.forEach(t),uAo=r(fye," \u2014 "),KD=n(fye,"A",{href:!0});var aet=s(KD);bAo=r(aet,"LongformerForMultipleChoice"),aet.forEach(t),vAo=r(fye," (Longformer model)"),fye.forEach(t),TAo=i(O),c3=n(O,"LI",{});var mye=s(c3);Rne=n(mye,"STRONG",{});var net=s(Rne);FAo=r(net,"megatron-bert"),net.forEach(t),CAo=r(mye," \u2014 "),ZD=n(mye,"A",{href:!0});var set=s(ZD);MAo=r(set,"MegatronBertForMultipleChoice"),set.forEach(t),EAo=r(mye," (MegatronBert model)"),mye.forEach(t),yAo=i(O),f3=n(O,"LI",{});var gye=s(f3);Sne=n(gye,"STRONG",{});var iet=s(Sne);wAo=r(iet,"mobilebert"),iet.forEach(t),AAo=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var det=s(eN);LAo=r(det,"MobileBertForMultipleChoice"),det.forEach(t),BAo=r(gye," (MobileBERT model)"),gye.forEach(t),xAo=i(O),m3=n(O,"LI",{});var hye=s(m3);Pne=n(hye,"STRONG",{});var cet=s(Pne);kAo=r(cet,"mpnet"),cet.forEach(t),RAo=r(hye," \u2014 "),oN=n(hye,"A",{href:!0});var fet=s(oN);SAo=r(fet,"MPNetForMultipleChoice"),fet.forEach(t),PAo=r(hye," (MPNet model)"),hye.forEach(t),$Ao=i(O),g3=n(O,"LI",{});var pye=s(g3);$ne=n(pye,"STRONG",{});var met=s($ne);IAo=r(met,"nystromformer"),met.forEach(t),DAo=r(pye," \u2014 "),rN=n(pye,"A",{href:!0});var get=s(rN);NAo=r(get,"NystromformerForMultipleChoice"),get.forEach(t),jAo=r(pye," (Nystromformer model)"),pye.forEach(t),qAo=i(O),h3=n(O,"LI",{});var _ye=s(h3);Ine=n(_ye,"STRONG",{});var het=s(Ine);GAo=r(het,"qdqbert"),het.forEach(t),OAo=r(_ye," \u2014 "),tN=n(_ye,"A",{href:!0});var pet=s(tN);XAo=r(pet,"QDQBertForMultipleChoice"),pet.forEach(t),VAo=r(_ye," (QDQBert model)"),_ye.forEach(t),zAo=i(O),p3=n(O,"LI",{});var uye=s(p3);Dne=n(uye,"STRONG",{});var _et=s(Dne);WAo=r(_et,"rembert"),_et.forEach(t),QAo=r(uye," \u2014 "),aN=n(uye,"A",{href:!0});var uet=s(aN);HAo=r(uet,"RemBertForMultipleChoice"),uet.forEach(t),UAo=r(uye," (RemBERT model)"),uye.forEach(t),JAo=i(O),_3=n(O,"LI",{});var bye=s(_3);Nne=n(bye,"STRONG",{});var bet=s(Nne);YAo=r(bet,"roberta"),bet.forEach(t),KAo=r(bye," \u2014 "),nN=n(bye,"A",{href:!0});var vet=s(nN);ZAo=r(vet,"RobertaForMultipleChoice"),vet.forEach(t),eLo=r(bye," (RoBERTa model)"),bye.forEach(t),oLo=i(O),u3=n(O,"LI",{});var vye=s(u3);jne=n(vye,"STRONG",{});var Tet=s(jne);rLo=r(Tet,"roformer"),Tet.forEach(t),tLo=r(vye," \u2014 "),sN=n(vye,"A",{href:!0});var Fet=s(sN);aLo=r(Fet,"RoFormerForMultipleChoice"),Fet.forEach(t),nLo=r(vye," (RoFormer model)"),vye.forEach(t),sLo=i(O),b3=n(O,"LI",{});var Tye=s(b3);qne=n(Tye,"STRONG",{});var Cet=s(qne);lLo=r(Cet,"squeezebert"),Cet.forEach(t),iLo=r(Tye," \u2014 "),lN=n(Tye,"A",{href:!0});var Met=s(lN);dLo=r(Met,"SqueezeBertForMultipleChoice"),Met.forEach(t),cLo=r(Tye," (SqueezeBERT model)"),Tye.forEach(t),fLo=i(O),v3=n(O,"LI",{});var Fye=s(v3);Gne=n(Fye,"STRONG",{});var Eet=s(Gne);mLo=r(Eet,"xlm"),Eet.forEach(t),gLo=r(Fye," \u2014 "),iN=n(Fye,"A",{href:!0});var yet=s(iN);hLo=r(yet,"XLMForMultipleChoice"),yet.forEach(t),pLo=r(Fye," (XLM model)"),Fye.forEach(t),_Lo=i(O),T3=n(O,"LI",{});var Cye=s(T3);One=n(Cye,"STRONG",{});var wet=s(One);uLo=r(wet,"xlm-roberta"),wet.forEach(t),bLo=r(Cye," \u2014 "),dN=n(Cye,"A",{href:!0});var Aet=s(dN);vLo=r(Aet,"XLMRobertaForMultipleChoice"),Aet.forEach(t),TLo=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),FLo=i(O),F3=n(O,"LI",{});var Mye=s(F3);Xne=n(Mye,"STRONG",{});var Let=s(Xne);CLo=r(Let,"xlm-roberta-xl"),Let.forEach(t),MLo=r(Mye," \u2014 "),cN=n(Mye,"A",{href:!0});var Bet=s(cN);ELo=r(Bet,"XLMRobertaXLForMultipleChoice"),Bet.forEach(t),yLo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),wLo=i(O),C3=n(O,"LI",{});var Eye=s(C3);Vne=n(Eye,"STRONG",{});var xet=s(Vne);ALo=r(xet,"xlnet"),xet.forEach(t),LLo=r(Eye," \u2014 "),fN=n(Eye,"A",{href:!0});var ket=s(fN);BLo=r(ket,"XLNetForMultipleChoice"),ket.forEach(t),xLo=r(Eye," (XLNet model)"),Eye.forEach(t),kLo=i(O),M3=n(O,"LI",{});var yye=s(M3);zne=n(yye,"STRONG",{});var Ret=s(zne);RLo=r(Ret,"yoso"),Ret.forEach(t),SLo=r(yye," \u2014 "),mN=n(yye,"A",{href:!0});var Set=s(mN);PLo=r(Set,"YosoForMultipleChoice"),Set.forEach(t),$Lo=r(yye," (YOSO model)"),yye.forEach(t),O.forEach(t),ILo=i(Wt),E3=n(Wt,"P",{});var wye=s(E3);DLo=r(wye,"The model is set in evaluation mode by default using "),Wne=n(wye,"CODE",{});var Pet=s(Wne);NLo=r(Pet,"model.eval()"),Pet.forEach(t),jLo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=n(wye,"CODE",{});var $et=s(Qne);qLo=r($et,"model.train()"),$et.forEach(t),wye.forEach(t),GLo=i(Wt),Hne=n(Wt,"P",{});var Iet=s(Hne);OLo=r(Iet,"Examples:"),Iet.forEach(t),XLo=i(Wt),m(GE.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),rRe=i(c),ud=n(c,"H2",{class:!0});var fPe=s(ud);y3=n(fPe,"A",{id:!0,class:!0,href:!0});var Det=s(y3);Une=n(Det,"SPAN",{});var Net=s(Une);m(OE.$$.fragment,Net),Net.forEach(t),Det.forEach(t),VLo=i(fPe),Jne=n(fPe,"SPAN",{});var jet=s(Jne);zLo=r(jet,"AutoModelForNextSentencePrediction"),jet.forEach(t),fPe.forEach(t),tRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(XE.$$.fragment,sl),WLo=i(sl),bd=n(sl,"P",{});var MW=s(bd);QLo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=n(MW,"CODE",{});var qet=s(Yne);HLo=r(qet,"from_pretrained()"),qet.forEach(t),ULo=r(MW,"class method or the "),Kne=n(MW,"CODE",{});var Get=s(Kne);JLo=r(Get,"from_config()"),Get.forEach(t),YLo=r(MW,`class
method.`),MW.forEach(t),KLo=i(sl),VE=n(sl,"P",{});var mPe=s(VE);ZLo=r(mPe,"This class cannot be instantiated directly using "),Zne=n(mPe,"CODE",{});var Oet=s(Zne);e7o=r(Oet,"__init__()"),Oet.forEach(t),o7o=r(mPe," (throws an error)."),mPe.forEach(t),r7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(zE.$$.fragment,ll),t7o=i(ll),ese=n(ll,"P",{});var Xet=s(ese);a7o=r(Xet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xet.forEach(t),n7o=i(ll),vd=n(ll,"P",{});var EW=s(vd);s7o=r(EW,`Note:
Loading a model from its configuration file does `),ose=n(EW,"STRONG",{});var Vet=s(ose);l7o=r(Vet,"not"),Vet.forEach(t),i7o=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=n(EW,"CODE",{});var zet=s(rse);d7o=r(zet,"from_pretrained()"),zet.forEach(t),c7o=r(EW,"to load the model weights."),EW.forEach(t),f7o=i(ll),tse=n(ll,"P",{});var Wet=s(tse);m7o=r(Wet,"Examples:"),Wet.forEach(t),g7o=i(ll),m(WE.$$.fragment,ll),ll.forEach(t),h7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(QE.$$.fragment,Qt),p7o=i(Qt),ase=n(Qt,"P",{});var Qet=s(ase);_7o=r(Qet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qet.forEach(t),u7o=i(Qt),Ya=n(Qt,"P",{});var EM=s(Ya);b7o=r(EM,"The model class to instantiate is selected based on the "),nse=n(EM,"CODE",{});var Het=s(nse);v7o=r(Het,"model_type"),Het.forEach(t),T7o=r(EM,` property of the config object (either
passed as an argument or loaded from `),sse=n(EM,"CODE",{});var Uet=s(sse);F7o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),C7o=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=n(EM,"CODE",{});var Jet=s(lse);M7o=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),E7o=r(EM,":"),EM.forEach(t),y7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);w3=n(il,"LI",{});var Aye=s(w3);ise=n(Aye,"STRONG",{});var Yet=s(ise);w7o=r(Yet,"bert"),Yet.forEach(t),A7o=r(Aye," \u2014 "),gN=n(Aye,"A",{href:!0});var Ket=s(gN);L7o=r(Ket,"BertForNextSentencePrediction"),Ket.forEach(t),B7o=r(Aye," (BERT model)"),Aye.forEach(t),x7o=i(il),A3=n(il,"LI",{});var Lye=s(A3);dse=n(Lye,"STRONG",{});var Zet=s(dse);k7o=r(Zet,"fnet"),Zet.forEach(t),R7o=r(Lye," \u2014 "),hN=n(Lye,"A",{href:!0});var eot=s(hN);S7o=r(eot,"FNetForNextSentencePrediction"),eot.forEach(t),P7o=r(Lye," (FNet model)"),Lye.forEach(t),$7o=i(il),L3=n(il,"LI",{});var Bye=s(L3);cse=n(Bye,"STRONG",{});var oot=s(cse);I7o=r(oot,"megatron-bert"),oot.forEach(t),D7o=r(Bye," \u2014 "),pN=n(Bye,"A",{href:!0});var rot=s(pN);N7o=r(rot,"MegatronBertForNextSentencePrediction"),rot.forEach(t),j7o=r(Bye," (MegatronBert model)"),Bye.forEach(t),q7o=i(il),B3=n(il,"LI",{});var xye=s(B3);fse=n(xye,"STRONG",{});var tot=s(fse);G7o=r(tot,"mobilebert"),tot.forEach(t),O7o=r(xye," \u2014 "),_N=n(xye,"A",{href:!0});var aot=s(_N);X7o=r(aot,"MobileBertForNextSentencePrediction"),aot.forEach(t),V7o=r(xye," (MobileBERT model)"),xye.forEach(t),z7o=i(il),x3=n(il,"LI",{});var kye=s(x3);mse=n(kye,"STRONG",{});var not=s(mse);W7o=r(not,"qdqbert"),not.forEach(t),Q7o=r(kye," \u2014 "),uN=n(kye,"A",{href:!0});var sot=s(uN);H7o=r(sot,"QDQBertForNextSentencePrediction"),sot.forEach(t),U7o=r(kye," (QDQBert model)"),kye.forEach(t),il.forEach(t),J7o=i(Qt),k3=n(Qt,"P",{});var Rye=s(k3);Y7o=r(Rye,"The model is set in evaluation mode by default using "),gse=n(Rye,"CODE",{});var lot=s(gse);K7o=r(lot,"model.eval()"),lot.forEach(t),Z7o=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=n(Rye,"CODE",{});var iot=s(hse);e9o=r(iot,"model.train()"),iot.forEach(t),Rye.forEach(t),o9o=i(Qt),pse=n(Qt,"P",{});var dot=s(pse);r9o=r(dot,"Examples:"),dot.forEach(t),t9o=i(Qt),m(HE.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),aRe=i(c),Td=n(c,"H2",{class:!0});var gPe=s(Td);R3=n(gPe,"A",{id:!0,class:!0,href:!0});var cot=s(R3);_se=n(cot,"SPAN",{});var fot=s(_se);m(UE.$$.fragment,fot),fot.forEach(t),cot.forEach(t),a9o=i(gPe),use=n(gPe,"SPAN",{});var mot=s(use);n9o=r(mot,"AutoModelForTokenClassification"),mot.forEach(t),gPe.forEach(t),nRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(JE.$$.fragment,dl),s9o=i(dl),Fd=n(dl,"P",{});var yW=s(Fd);l9o=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=n(yW,"CODE",{});var got=s(bse);i9o=r(got,"from_pretrained()"),got.forEach(t),d9o=r(yW,"class method or the "),vse=n(yW,"CODE",{});var hot=s(vse);c9o=r(hot,"from_config()"),hot.forEach(t),f9o=r(yW,`class
method.`),yW.forEach(t),m9o=i(dl),YE=n(dl,"P",{});var hPe=s(YE);g9o=r(hPe,"This class cannot be instantiated directly using "),Tse=n(hPe,"CODE",{});var pot=s(Tse);h9o=r(pot,"__init__()"),pot.forEach(t),p9o=r(hPe," (throws an error)."),hPe.forEach(t),_9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(KE.$$.fragment,cl),u9o=i(cl),Fse=n(cl,"P",{});var _ot=s(Fse);b9o=r(_ot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_ot.forEach(t),v9o=i(cl),Cd=n(cl,"P",{});var wW=s(Cd);T9o=r(wW,`Note:
Loading a model from its configuration file does `),Cse=n(wW,"STRONG",{});var uot=s(Cse);F9o=r(uot,"not"),uot.forEach(t),C9o=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=n(wW,"CODE",{});var bot=s(Mse);M9o=r(bot,"from_pretrained()"),bot.forEach(t),E9o=r(wW,"to load the model weights."),wW.forEach(t),y9o=i(cl),Ese=n(cl,"P",{});var vot=s(Ese);w9o=r(vot,"Examples:"),vot.forEach(t),A9o=i(cl),m(ZE.$$.fragment,cl),cl.forEach(t),L9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(e5.$$.fragment,Ht),B9o=i(Ht),yse=n(Ht,"P",{});var Tot=s(yse);x9o=r(Tot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tot.forEach(t),k9o=i(Ht),Ka=n(Ht,"P",{});var yM=s(Ka);R9o=r(yM,"The model class to instantiate is selected based on the "),wse=n(yM,"CODE",{});var Fot=s(wse);S9o=r(Fot,"model_type"),Fot.forEach(t),P9o=r(yM,` property of the config object (either
passed as an argument or loaded from `),Ase=n(yM,"CODE",{});var Cot=s(Ase);$9o=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),I9o=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=n(yM,"CODE",{});var Mot=s(Lse);D9o=r(Mot,"pretrained_model_name_or_path"),Mot.forEach(t),N9o=r(yM,":"),yM.forEach(t),j9o=i(Ht),j=n(Ht,"UL",{});var q=s(j);S3=n(q,"LI",{});var Sye=s(S3);Bse=n(Sye,"STRONG",{});var Eot=s(Bse);q9o=r(Eot,"albert"),Eot.forEach(t),G9o=r(Sye," \u2014 "),bN=n(Sye,"A",{href:!0});var yot=s(bN);O9o=r(yot,"AlbertForTokenClassification"),yot.forEach(t),X9o=r(Sye," (ALBERT model)"),Sye.forEach(t),V9o=i(q),P3=n(q,"LI",{});var Pye=s(P3);xse=n(Pye,"STRONG",{});var wot=s(xse);z9o=r(wot,"bert"),wot.forEach(t),W9o=r(Pye," \u2014 "),vN=n(Pye,"A",{href:!0});var Aot=s(vN);Q9o=r(Aot,"BertForTokenClassification"),Aot.forEach(t),H9o=r(Pye," (BERT model)"),Pye.forEach(t),U9o=i(q),$3=n(q,"LI",{});var $ye=s($3);kse=n($ye,"STRONG",{});var Lot=s(kse);J9o=r(Lot,"big_bird"),Lot.forEach(t),Y9o=r($ye," \u2014 "),TN=n($ye,"A",{href:!0});var Bot=s(TN);K9o=r(Bot,"BigBirdForTokenClassification"),Bot.forEach(t),Z9o=r($ye," (BigBird model)"),$ye.forEach(t),eBo=i(q),I3=n(q,"LI",{});var Iye=s(I3);Rse=n(Iye,"STRONG",{});var xot=s(Rse);oBo=r(xot,"camembert"),xot.forEach(t),rBo=r(Iye," \u2014 "),FN=n(Iye,"A",{href:!0});var kot=s(FN);tBo=r(kot,"CamembertForTokenClassification"),kot.forEach(t),aBo=r(Iye," (CamemBERT model)"),Iye.forEach(t),nBo=i(q),D3=n(q,"LI",{});var Dye=s(D3);Sse=n(Dye,"STRONG",{});var Rot=s(Sse);sBo=r(Rot,"canine"),Rot.forEach(t),lBo=r(Dye," \u2014 "),CN=n(Dye,"A",{href:!0});var Sot=s(CN);iBo=r(Sot,"CanineForTokenClassification"),Sot.forEach(t),dBo=r(Dye," (Canine model)"),Dye.forEach(t),cBo=i(q),N3=n(q,"LI",{});var Nye=s(N3);Pse=n(Nye,"STRONG",{});var Pot=s(Pse);fBo=r(Pot,"convbert"),Pot.forEach(t),mBo=r(Nye," \u2014 "),MN=n(Nye,"A",{href:!0});var $ot=s(MN);gBo=r($ot,"ConvBertForTokenClassification"),$ot.forEach(t),hBo=r(Nye," (ConvBERT model)"),Nye.forEach(t),pBo=i(q),j3=n(q,"LI",{});var jye=s(j3);$se=n(jye,"STRONG",{});var Iot=s($se);_Bo=r(Iot,"data2vec-text"),Iot.forEach(t),uBo=r(jye," \u2014 "),EN=n(jye,"A",{href:!0});var Dot=s(EN);bBo=r(Dot,"Data2VecTextForTokenClassification"),Dot.forEach(t),vBo=r(jye," (Data2VecText model)"),jye.forEach(t),TBo=i(q),q3=n(q,"LI",{});var qye=s(q3);Ise=n(qye,"STRONG",{});var Not=s(Ise);FBo=r(Not,"deberta"),Not.forEach(t),CBo=r(qye," \u2014 "),yN=n(qye,"A",{href:!0});var jot=s(yN);MBo=r(jot,"DebertaForTokenClassification"),jot.forEach(t),EBo=r(qye," (DeBERTa model)"),qye.forEach(t),yBo=i(q),G3=n(q,"LI",{});var Gye=s(G3);Dse=n(Gye,"STRONG",{});var qot=s(Dse);wBo=r(qot,"deberta-v2"),qot.forEach(t),ABo=r(Gye," \u2014 "),wN=n(Gye,"A",{href:!0});var Got=s(wN);LBo=r(Got,"DebertaV2ForTokenClassification"),Got.forEach(t),BBo=r(Gye," (DeBERTa-v2 model)"),Gye.forEach(t),xBo=i(q),O3=n(q,"LI",{});var Oye=s(O3);Nse=n(Oye,"STRONG",{});var Oot=s(Nse);kBo=r(Oot,"distilbert"),Oot.forEach(t),RBo=r(Oye," \u2014 "),AN=n(Oye,"A",{href:!0});var Xot=s(AN);SBo=r(Xot,"DistilBertForTokenClassification"),Xot.forEach(t),PBo=r(Oye," (DistilBERT model)"),Oye.forEach(t),$Bo=i(q),X3=n(q,"LI",{});var Xye=s(X3);jse=n(Xye,"STRONG",{});var Vot=s(jse);IBo=r(Vot,"electra"),Vot.forEach(t),DBo=r(Xye," \u2014 "),LN=n(Xye,"A",{href:!0});var zot=s(LN);NBo=r(zot,"ElectraForTokenClassification"),zot.forEach(t),jBo=r(Xye," (ELECTRA model)"),Xye.forEach(t),qBo=i(q),V3=n(q,"LI",{});var Vye=s(V3);qse=n(Vye,"STRONG",{});var Wot=s(qse);GBo=r(Wot,"flaubert"),Wot.forEach(t),OBo=r(Vye," \u2014 "),BN=n(Vye,"A",{href:!0});var Qot=s(BN);XBo=r(Qot,"FlaubertForTokenClassification"),Qot.forEach(t),VBo=r(Vye," (FlauBERT model)"),Vye.forEach(t),zBo=i(q),z3=n(q,"LI",{});var zye=s(z3);Gse=n(zye,"STRONG",{});var Hot=s(Gse);WBo=r(Hot,"fnet"),Hot.forEach(t),QBo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var Uot=s(xN);HBo=r(Uot,"FNetForTokenClassification"),Uot.forEach(t),UBo=r(zye," (FNet model)"),zye.forEach(t),JBo=i(q),W3=n(q,"LI",{});var Wye=s(W3);Ose=n(Wye,"STRONG",{});var Jot=s(Ose);YBo=r(Jot,"funnel"),Jot.forEach(t),KBo=r(Wye," \u2014 "),kN=n(Wye,"A",{href:!0});var Yot=s(kN);ZBo=r(Yot,"FunnelForTokenClassification"),Yot.forEach(t),exo=r(Wye," (Funnel Transformer model)"),Wye.forEach(t),oxo=i(q),Q3=n(q,"LI",{});var Qye=s(Q3);Xse=n(Qye,"STRONG",{});var Kot=s(Xse);rxo=r(Kot,"gpt2"),Kot.forEach(t),txo=r(Qye," \u2014 "),RN=n(Qye,"A",{href:!0});var Zot=s(RN);axo=r(Zot,"GPT2ForTokenClassification"),Zot.forEach(t),nxo=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),sxo=i(q),H3=n(q,"LI",{});var Hye=s(H3);Vse=n(Hye,"STRONG",{});var ert=s(Vse);lxo=r(ert,"ibert"),ert.forEach(t),ixo=r(Hye," \u2014 "),SN=n(Hye,"A",{href:!0});var ort=s(SN);dxo=r(ort,"IBertForTokenClassification"),ort.forEach(t),cxo=r(Hye," (I-BERT model)"),Hye.forEach(t),fxo=i(q),U3=n(q,"LI",{});var Uye=s(U3);zse=n(Uye,"STRONG",{});var rrt=s(zse);mxo=r(rrt,"layoutlm"),rrt.forEach(t),gxo=r(Uye," \u2014 "),PN=n(Uye,"A",{href:!0});var trt=s(PN);hxo=r(trt,"LayoutLMForTokenClassification"),trt.forEach(t),pxo=r(Uye," (LayoutLM model)"),Uye.forEach(t),_xo=i(q),J3=n(q,"LI",{});var Jye=s(J3);Wse=n(Jye,"STRONG",{});var art=s(Wse);uxo=r(art,"layoutlmv2"),art.forEach(t),bxo=r(Jye," \u2014 "),$N=n(Jye,"A",{href:!0});var nrt=s($N);vxo=r(nrt,"LayoutLMv2ForTokenClassification"),nrt.forEach(t),Txo=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),Fxo=i(q),Y3=n(q,"LI",{});var Yye=s(Y3);Qse=n(Yye,"STRONG",{});var srt=s(Qse);Cxo=r(srt,"longformer"),srt.forEach(t),Mxo=r(Yye," \u2014 "),IN=n(Yye,"A",{href:!0});var lrt=s(IN);Exo=r(lrt,"LongformerForTokenClassification"),lrt.forEach(t),yxo=r(Yye," (Longformer model)"),Yye.forEach(t),wxo=i(q),K3=n(q,"LI",{});var Kye=s(K3);Hse=n(Kye,"STRONG",{});var irt=s(Hse);Axo=r(irt,"megatron-bert"),irt.forEach(t),Lxo=r(Kye," \u2014 "),DN=n(Kye,"A",{href:!0});var drt=s(DN);Bxo=r(drt,"MegatronBertForTokenClassification"),drt.forEach(t),xxo=r(Kye," (MegatronBert model)"),Kye.forEach(t),kxo=i(q),Z3=n(q,"LI",{});var Zye=s(Z3);Use=n(Zye,"STRONG",{});var crt=s(Use);Rxo=r(crt,"mobilebert"),crt.forEach(t),Sxo=r(Zye," \u2014 "),NN=n(Zye,"A",{href:!0});var frt=s(NN);Pxo=r(frt,"MobileBertForTokenClassification"),frt.forEach(t),$xo=r(Zye," (MobileBERT model)"),Zye.forEach(t),Ixo=i(q),e2=n(q,"LI",{});var ewe=s(e2);Jse=n(ewe,"STRONG",{});var mrt=s(Jse);Dxo=r(mrt,"mpnet"),mrt.forEach(t),Nxo=r(ewe," \u2014 "),jN=n(ewe,"A",{href:!0});var grt=s(jN);jxo=r(grt,"MPNetForTokenClassification"),grt.forEach(t),qxo=r(ewe," (MPNet model)"),ewe.forEach(t),Gxo=i(q),o2=n(q,"LI",{});var owe=s(o2);Yse=n(owe,"STRONG",{});var hrt=s(Yse);Oxo=r(hrt,"nystromformer"),hrt.forEach(t),Xxo=r(owe," \u2014 "),qN=n(owe,"A",{href:!0});var prt=s(qN);Vxo=r(prt,"NystromformerForTokenClassification"),prt.forEach(t),zxo=r(owe," (Nystromformer model)"),owe.forEach(t),Wxo=i(q),r2=n(q,"LI",{});var rwe=s(r2);Kse=n(rwe,"STRONG",{});var _rt=s(Kse);Qxo=r(_rt,"qdqbert"),_rt.forEach(t),Hxo=r(rwe," \u2014 "),GN=n(rwe,"A",{href:!0});var urt=s(GN);Uxo=r(urt,"QDQBertForTokenClassification"),urt.forEach(t),Jxo=r(rwe," (QDQBert model)"),rwe.forEach(t),Yxo=i(q),t2=n(q,"LI",{});var twe=s(t2);Zse=n(twe,"STRONG",{});var brt=s(Zse);Kxo=r(brt,"rembert"),brt.forEach(t),Zxo=r(twe," \u2014 "),ON=n(twe,"A",{href:!0});var vrt=s(ON);eko=r(vrt,"RemBertForTokenClassification"),vrt.forEach(t),oko=r(twe," (RemBERT model)"),twe.forEach(t),rko=i(q),a2=n(q,"LI",{});var awe=s(a2);ele=n(awe,"STRONG",{});var Trt=s(ele);tko=r(Trt,"roberta"),Trt.forEach(t),ako=r(awe," \u2014 "),XN=n(awe,"A",{href:!0});var Frt=s(XN);nko=r(Frt,"RobertaForTokenClassification"),Frt.forEach(t),sko=r(awe," (RoBERTa model)"),awe.forEach(t),lko=i(q),n2=n(q,"LI",{});var nwe=s(n2);ole=n(nwe,"STRONG",{});var Crt=s(ole);iko=r(Crt,"roformer"),Crt.forEach(t),dko=r(nwe," \u2014 "),VN=n(nwe,"A",{href:!0});var Mrt=s(VN);cko=r(Mrt,"RoFormerForTokenClassification"),Mrt.forEach(t),fko=r(nwe," (RoFormer model)"),nwe.forEach(t),mko=i(q),s2=n(q,"LI",{});var swe=s(s2);rle=n(swe,"STRONG",{});var Ert=s(rle);gko=r(Ert,"squeezebert"),Ert.forEach(t),hko=r(swe," \u2014 "),zN=n(swe,"A",{href:!0});var yrt=s(zN);pko=r(yrt,"SqueezeBertForTokenClassification"),yrt.forEach(t),_ko=r(swe," (SqueezeBERT model)"),swe.forEach(t),uko=i(q),l2=n(q,"LI",{});var lwe=s(l2);tle=n(lwe,"STRONG",{});var wrt=s(tle);bko=r(wrt,"xlm"),wrt.forEach(t),vko=r(lwe," \u2014 "),WN=n(lwe,"A",{href:!0});var Art=s(WN);Tko=r(Art,"XLMForTokenClassification"),Art.forEach(t),Fko=r(lwe," (XLM model)"),lwe.forEach(t),Cko=i(q),i2=n(q,"LI",{});var iwe=s(i2);ale=n(iwe,"STRONG",{});var Lrt=s(ale);Mko=r(Lrt,"xlm-roberta"),Lrt.forEach(t),Eko=r(iwe," \u2014 "),QN=n(iwe,"A",{href:!0});var Brt=s(QN);yko=r(Brt,"XLMRobertaForTokenClassification"),Brt.forEach(t),wko=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),Ako=i(q),d2=n(q,"LI",{});var dwe=s(d2);nle=n(dwe,"STRONG",{});var xrt=s(nle);Lko=r(xrt,"xlm-roberta-xl"),xrt.forEach(t),Bko=r(dwe," \u2014 "),HN=n(dwe,"A",{href:!0});var krt=s(HN);xko=r(krt,"XLMRobertaXLForTokenClassification"),krt.forEach(t),kko=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),Rko=i(q),c2=n(q,"LI",{});var cwe=s(c2);sle=n(cwe,"STRONG",{});var Rrt=s(sle);Sko=r(Rrt,"xlnet"),Rrt.forEach(t),Pko=r(cwe," \u2014 "),UN=n(cwe,"A",{href:!0});var Srt=s(UN);$ko=r(Srt,"XLNetForTokenClassification"),Srt.forEach(t),Iko=r(cwe," (XLNet model)"),cwe.forEach(t),Dko=i(q),f2=n(q,"LI",{});var fwe=s(f2);lle=n(fwe,"STRONG",{});var Prt=s(lle);Nko=r(Prt,"yoso"),Prt.forEach(t),jko=r(fwe," \u2014 "),JN=n(fwe,"A",{href:!0});var $rt=s(JN);qko=r($rt,"YosoForTokenClassification"),$rt.forEach(t),Gko=r(fwe," (YOSO model)"),fwe.forEach(t),q.forEach(t),Oko=i(Ht),m2=n(Ht,"P",{});var mwe=s(m2);Xko=r(mwe,"The model is set in evaluation mode by default using "),ile=n(mwe,"CODE",{});var Irt=s(ile);Vko=r(Irt,"model.eval()"),Irt.forEach(t),zko=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(mwe,"CODE",{});var Drt=s(dle);Wko=r(Drt,"model.train()"),Drt.forEach(t),mwe.forEach(t),Qko=i(Ht),cle=n(Ht,"P",{});var Nrt=s(cle);Hko=r(Nrt,"Examples:"),Nrt.forEach(t),Uko=i(Ht),m(o5.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),sRe=i(c),Md=n(c,"H2",{class:!0});var pPe=s(Md);g2=n(pPe,"A",{id:!0,class:!0,href:!0});var jrt=s(g2);fle=n(jrt,"SPAN",{});var qrt=s(fle);m(r5.$$.fragment,qrt),qrt.forEach(t),jrt.forEach(t),Jko=i(pPe),mle=n(pPe,"SPAN",{});var Grt=s(mle);Yko=r(Grt,"AutoModelForQuestionAnswering"),Grt.forEach(t),pPe.forEach(t),lRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(t5.$$.fragment,fl),Kko=i(fl),Ed=n(fl,"P",{});var AW=s(Ed);Zko=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=n(AW,"CODE",{});var Ort=s(gle);eRo=r(Ort,"from_pretrained()"),Ort.forEach(t),oRo=r(AW,"class method or the "),hle=n(AW,"CODE",{});var Xrt=s(hle);rRo=r(Xrt,"from_config()"),Xrt.forEach(t),tRo=r(AW,`class
method.`),AW.forEach(t),aRo=i(fl),a5=n(fl,"P",{});var _Pe=s(a5);nRo=r(_Pe,"This class cannot be instantiated directly using "),ple=n(_Pe,"CODE",{});var Vrt=s(ple);sRo=r(Vrt,"__init__()"),Vrt.forEach(t),lRo=r(_Pe," (throws an error)."),_Pe.forEach(t),iRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(n5.$$.fragment,ml),dRo=i(ml),_le=n(ml,"P",{});var zrt=s(_le);cRo=r(zrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zrt.forEach(t),fRo=i(ml),yd=n(ml,"P",{});var LW=s(yd);mRo=r(LW,`Note:
Loading a model from its configuration file does `),ule=n(LW,"STRONG",{});var Wrt=s(ule);gRo=r(Wrt,"not"),Wrt.forEach(t),hRo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=n(LW,"CODE",{});var Qrt=s(ble);pRo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),_Ro=r(LW,"to load the model weights."),LW.forEach(t),uRo=i(ml),vle=n(ml,"P",{});var Hrt=s(vle);bRo=r(Hrt,"Examples:"),Hrt.forEach(t),vRo=i(ml),m(s5.$$.fragment,ml),ml.forEach(t),TRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(l5.$$.fragment,Ut),FRo=i(Ut),Tle=n(Ut,"P",{});var Urt=s(Tle);CRo=r(Urt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Urt.forEach(t),MRo=i(Ut),Za=n(Ut,"P",{});var wM=s(Za);ERo=r(wM,"The model class to instantiate is selected based on the "),Fle=n(wM,"CODE",{});var Jrt=s(Fle);yRo=r(Jrt,"model_type"),Jrt.forEach(t),wRo=r(wM,` property of the config object (either
passed as an argument or loaded from `),Cle=n(wM,"CODE",{});var Yrt=s(Cle);ARo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),LRo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=n(wM,"CODE",{});var Krt=s(Mle);BRo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),xRo=r(wM,":"),wM.forEach(t),kRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h2=n(P,"LI",{});var gwe=s(h2);Ele=n(gwe,"STRONG",{});var Zrt=s(Ele);RRo=r(Zrt,"albert"),Zrt.forEach(t),SRo=r(gwe," \u2014 "),YN=n(gwe,"A",{href:!0});var ett=s(YN);PRo=r(ett,"AlbertForQuestionAnswering"),ett.forEach(t),$Ro=r(gwe," (ALBERT model)"),gwe.forEach(t),IRo=i(P),p2=n(P,"LI",{});var hwe=s(p2);yle=n(hwe,"STRONG",{});var ott=s(yle);DRo=r(ott,"bart"),ott.forEach(t),NRo=r(hwe," \u2014 "),KN=n(hwe,"A",{href:!0});var rtt=s(KN);jRo=r(rtt,"BartForQuestionAnswering"),rtt.forEach(t),qRo=r(hwe," (BART model)"),hwe.forEach(t),GRo=i(P),_2=n(P,"LI",{});var pwe=s(_2);wle=n(pwe,"STRONG",{});var ttt=s(wle);ORo=r(ttt,"bert"),ttt.forEach(t),XRo=r(pwe," \u2014 "),ZN=n(pwe,"A",{href:!0});var att=s(ZN);VRo=r(att,"BertForQuestionAnswering"),att.forEach(t),zRo=r(pwe," (BERT model)"),pwe.forEach(t),WRo=i(P),u2=n(P,"LI",{});var _we=s(u2);Ale=n(_we,"STRONG",{});var ntt=s(Ale);QRo=r(ntt,"big_bird"),ntt.forEach(t),HRo=r(_we," \u2014 "),ej=n(_we,"A",{href:!0});var stt=s(ej);URo=r(stt,"BigBirdForQuestionAnswering"),stt.forEach(t),JRo=r(_we," (BigBird model)"),_we.forEach(t),YRo=i(P),b2=n(P,"LI",{});var uwe=s(b2);Lle=n(uwe,"STRONG",{});var ltt=s(Lle);KRo=r(ltt,"bigbird_pegasus"),ltt.forEach(t),ZRo=r(uwe," \u2014 "),oj=n(uwe,"A",{href:!0});var itt=s(oj);eSo=r(itt,"BigBirdPegasusForQuestionAnswering"),itt.forEach(t),oSo=r(uwe," (BigBirdPegasus model)"),uwe.forEach(t),rSo=i(P),v2=n(P,"LI",{});var bwe=s(v2);Ble=n(bwe,"STRONG",{});var dtt=s(Ble);tSo=r(dtt,"camembert"),dtt.forEach(t),aSo=r(bwe," \u2014 "),rj=n(bwe,"A",{href:!0});var ctt=s(rj);nSo=r(ctt,"CamembertForQuestionAnswering"),ctt.forEach(t),sSo=r(bwe," (CamemBERT model)"),bwe.forEach(t),lSo=i(P),T2=n(P,"LI",{});var vwe=s(T2);xle=n(vwe,"STRONG",{});var ftt=s(xle);iSo=r(ftt,"canine"),ftt.forEach(t),dSo=r(vwe," \u2014 "),tj=n(vwe,"A",{href:!0});var mtt=s(tj);cSo=r(mtt,"CanineForQuestionAnswering"),mtt.forEach(t),fSo=r(vwe," (Canine model)"),vwe.forEach(t),mSo=i(P),F2=n(P,"LI",{});var Twe=s(F2);kle=n(Twe,"STRONG",{});var gtt=s(kle);gSo=r(gtt,"convbert"),gtt.forEach(t),hSo=r(Twe," \u2014 "),aj=n(Twe,"A",{href:!0});var htt=s(aj);pSo=r(htt,"ConvBertForQuestionAnswering"),htt.forEach(t),_So=r(Twe," (ConvBERT model)"),Twe.forEach(t),uSo=i(P),C2=n(P,"LI",{});var Fwe=s(C2);Rle=n(Fwe,"STRONG",{});var ptt=s(Rle);bSo=r(ptt,"data2vec-text"),ptt.forEach(t),vSo=r(Fwe," \u2014 "),nj=n(Fwe,"A",{href:!0});var _tt=s(nj);TSo=r(_tt,"Data2VecTextForQuestionAnswering"),_tt.forEach(t),FSo=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),CSo=i(P),M2=n(P,"LI",{});var Cwe=s(M2);Sle=n(Cwe,"STRONG",{});var utt=s(Sle);MSo=r(utt,"deberta"),utt.forEach(t),ESo=r(Cwe," \u2014 "),sj=n(Cwe,"A",{href:!0});var btt=s(sj);ySo=r(btt,"DebertaForQuestionAnswering"),btt.forEach(t),wSo=r(Cwe," (DeBERTa model)"),Cwe.forEach(t),ASo=i(P),E2=n(P,"LI",{});var Mwe=s(E2);Ple=n(Mwe,"STRONG",{});var vtt=s(Ple);LSo=r(vtt,"deberta-v2"),vtt.forEach(t),BSo=r(Mwe," \u2014 "),lj=n(Mwe,"A",{href:!0});var Ttt=s(lj);xSo=r(Ttt,"DebertaV2ForQuestionAnswering"),Ttt.forEach(t),kSo=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),RSo=i(P),y2=n(P,"LI",{});var Ewe=s(y2);$le=n(Ewe,"STRONG",{});var Ftt=s($le);SSo=r(Ftt,"distilbert"),Ftt.forEach(t),PSo=r(Ewe," \u2014 "),ij=n(Ewe,"A",{href:!0});var Ctt=s(ij);$So=r(Ctt,"DistilBertForQuestionAnswering"),Ctt.forEach(t),ISo=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),DSo=i(P),w2=n(P,"LI",{});var ywe=s(w2);Ile=n(ywe,"STRONG",{});var Mtt=s(Ile);NSo=r(Mtt,"electra"),Mtt.forEach(t),jSo=r(ywe," \u2014 "),dj=n(ywe,"A",{href:!0});var Ett=s(dj);qSo=r(Ett,"ElectraForQuestionAnswering"),Ett.forEach(t),GSo=r(ywe," (ELECTRA model)"),ywe.forEach(t),OSo=i(P),A2=n(P,"LI",{});var wwe=s(A2);Dle=n(wwe,"STRONG",{});var ytt=s(Dle);XSo=r(ytt,"flaubert"),ytt.forEach(t),VSo=r(wwe," \u2014 "),cj=n(wwe,"A",{href:!0});var wtt=s(cj);zSo=r(wtt,"FlaubertForQuestionAnsweringSimple"),wtt.forEach(t),WSo=r(wwe," (FlauBERT model)"),wwe.forEach(t),QSo=i(P),L2=n(P,"LI",{});var Awe=s(L2);Nle=n(Awe,"STRONG",{});var Att=s(Nle);HSo=r(Att,"fnet"),Att.forEach(t),USo=r(Awe," \u2014 "),fj=n(Awe,"A",{href:!0});var Ltt=s(fj);JSo=r(Ltt,"FNetForQuestionAnswering"),Ltt.forEach(t),YSo=r(Awe," (FNet model)"),Awe.forEach(t),KSo=i(P),B2=n(P,"LI",{});var Lwe=s(B2);jle=n(Lwe,"STRONG",{});var Btt=s(jle);ZSo=r(Btt,"funnel"),Btt.forEach(t),ePo=r(Lwe," \u2014 "),mj=n(Lwe,"A",{href:!0});var xtt=s(mj);oPo=r(xtt,"FunnelForQuestionAnswering"),xtt.forEach(t),rPo=r(Lwe," (Funnel Transformer model)"),Lwe.forEach(t),tPo=i(P),x2=n(P,"LI",{});var Bwe=s(x2);qle=n(Bwe,"STRONG",{});var ktt=s(qle);aPo=r(ktt,"gptj"),ktt.forEach(t),nPo=r(Bwe," \u2014 "),gj=n(Bwe,"A",{href:!0});var Rtt=s(gj);sPo=r(Rtt,"GPTJForQuestionAnswering"),Rtt.forEach(t),lPo=r(Bwe," (GPT-J model)"),Bwe.forEach(t),iPo=i(P),k2=n(P,"LI",{});var xwe=s(k2);Gle=n(xwe,"STRONG",{});var Stt=s(Gle);dPo=r(Stt,"ibert"),Stt.forEach(t),cPo=r(xwe," \u2014 "),hj=n(xwe,"A",{href:!0});var Ptt=s(hj);fPo=r(Ptt,"IBertForQuestionAnswering"),Ptt.forEach(t),mPo=r(xwe," (I-BERT model)"),xwe.forEach(t),gPo=i(P),R2=n(P,"LI",{});var kwe=s(R2);Ole=n(kwe,"STRONG",{});var $tt=s(Ole);hPo=r($tt,"layoutlmv2"),$tt.forEach(t),pPo=r(kwe," \u2014 "),pj=n(kwe,"A",{href:!0});var Itt=s(pj);_Po=r(Itt,"LayoutLMv2ForQuestionAnswering"),Itt.forEach(t),uPo=r(kwe," (LayoutLMv2 model)"),kwe.forEach(t),bPo=i(P),S2=n(P,"LI",{});var Rwe=s(S2);Xle=n(Rwe,"STRONG",{});var Dtt=s(Xle);vPo=r(Dtt,"led"),Dtt.forEach(t),TPo=r(Rwe," \u2014 "),_j=n(Rwe,"A",{href:!0});var Ntt=s(_j);FPo=r(Ntt,"LEDForQuestionAnswering"),Ntt.forEach(t),CPo=r(Rwe," (LED model)"),Rwe.forEach(t),MPo=i(P),P2=n(P,"LI",{});var Swe=s(P2);Vle=n(Swe,"STRONG",{});var jtt=s(Vle);EPo=r(jtt,"longformer"),jtt.forEach(t),yPo=r(Swe," \u2014 "),uj=n(Swe,"A",{href:!0});var qtt=s(uj);wPo=r(qtt,"LongformerForQuestionAnswering"),qtt.forEach(t),APo=r(Swe," (Longformer model)"),Swe.forEach(t),LPo=i(P),$2=n(P,"LI",{});var Pwe=s($2);zle=n(Pwe,"STRONG",{});var Gtt=s(zle);BPo=r(Gtt,"lxmert"),Gtt.forEach(t),xPo=r(Pwe," \u2014 "),bj=n(Pwe,"A",{href:!0});var Ott=s(bj);kPo=r(Ott,"LxmertForQuestionAnswering"),Ott.forEach(t),RPo=r(Pwe," (LXMERT model)"),Pwe.forEach(t),SPo=i(P),I2=n(P,"LI",{});var $we=s(I2);Wle=n($we,"STRONG",{});var Xtt=s(Wle);PPo=r(Xtt,"mbart"),Xtt.forEach(t),$Po=r($we," \u2014 "),vj=n($we,"A",{href:!0});var Vtt=s(vj);IPo=r(Vtt,"MBartForQuestionAnswering"),Vtt.forEach(t),DPo=r($we," (mBART model)"),$we.forEach(t),NPo=i(P),D2=n(P,"LI",{});var Iwe=s(D2);Qle=n(Iwe,"STRONG",{});var ztt=s(Qle);jPo=r(ztt,"megatron-bert"),ztt.forEach(t),qPo=r(Iwe," \u2014 "),Tj=n(Iwe,"A",{href:!0});var Wtt=s(Tj);GPo=r(Wtt,"MegatronBertForQuestionAnswering"),Wtt.forEach(t),OPo=r(Iwe," (MegatronBert model)"),Iwe.forEach(t),XPo=i(P),N2=n(P,"LI",{});var Dwe=s(N2);Hle=n(Dwe,"STRONG",{});var Qtt=s(Hle);VPo=r(Qtt,"mobilebert"),Qtt.forEach(t),zPo=r(Dwe," \u2014 "),Fj=n(Dwe,"A",{href:!0});var Htt=s(Fj);WPo=r(Htt,"MobileBertForQuestionAnswering"),Htt.forEach(t),QPo=r(Dwe," (MobileBERT model)"),Dwe.forEach(t),HPo=i(P),j2=n(P,"LI",{});var Nwe=s(j2);Ule=n(Nwe,"STRONG",{});var Utt=s(Ule);UPo=r(Utt,"mpnet"),Utt.forEach(t),JPo=r(Nwe," \u2014 "),Cj=n(Nwe,"A",{href:!0});var Jtt=s(Cj);YPo=r(Jtt,"MPNetForQuestionAnswering"),Jtt.forEach(t),KPo=r(Nwe," (MPNet model)"),Nwe.forEach(t),ZPo=i(P),q2=n(P,"LI",{});var jwe=s(q2);Jle=n(jwe,"STRONG",{});var Ytt=s(Jle);e$o=r(Ytt,"nystromformer"),Ytt.forEach(t),o$o=r(jwe," \u2014 "),Mj=n(jwe,"A",{href:!0});var Ktt=s(Mj);r$o=r(Ktt,"NystromformerForQuestionAnswering"),Ktt.forEach(t),t$o=r(jwe," (Nystromformer model)"),jwe.forEach(t),a$o=i(P),G2=n(P,"LI",{});var qwe=s(G2);Yle=n(qwe,"STRONG",{});var Ztt=s(Yle);n$o=r(Ztt,"qdqbert"),Ztt.forEach(t),s$o=r(qwe," \u2014 "),Ej=n(qwe,"A",{href:!0});var eat=s(Ej);l$o=r(eat,"QDQBertForQuestionAnswering"),eat.forEach(t),i$o=r(qwe," (QDQBert model)"),qwe.forEach(t),d$o=i(P),O2=n(P,"LI",{});var Gwe=s(O2);Kle=n(Gwe,"STRONG",{});var oat=s(Kle);c$o=r(oat,"reformer"),oat.forEach(t),f$o=r(Gwe," \u2014 "),yj=n(Gwe,"A",{href:!0});var rat=s(yj);m$o=r(rat,"ReformerForQuestionAnswering"),rat.forEach(t),g$o=r(Gwe," (Reformer model)"),Gwe.forEach(t),h$o=i(P),X2=n(P,"LI",{});var Owe=s(X2);Zle=n(Owe,"STRONG",{});var tat=s(Zle);p$o=r(tat,"rembert"),tat.forEach(t),_$o=r(Owe," \u2014 "),wj=n(Owe,"A",{href:!0});var aat=s(wj);u$o=r(aat,"RemBertForQuestionAnswering"),aat.forEach(t),b$o=r(Owe," (RemBERT model)"),Owe.forEach(t),v$o=i(P),V2=n(P,"LI",{});var Xwe=s(V2);eie=n(Xwe,"STRONG",{});var nat=s(eie);T$o=r(nat,"roberta"),nat.forEach(t),F$o=r(Xwe," \u2014 "),Aj=n(Xwe,"A",{href:!0});var sat=s(Aj);C$o=r(sat,"RobertaForQuestionAnswering"),sat.forEach(t),M$o=r(Xwe," (RoBERTa model)"),Xwe.forEach(t),E$o=i(P),z2=n(P,"LI",{});var Vwe=s(z2);oie=n(Vwe,"STRONG",{});var lat=s(oie);y$o=r(lat,"roformer"),lat.forEach(t),w$o=r(Vwe," \u2014 "),Lj=n(Vwe,"A",{href:!0});var iat=s(Lj);A$o=r(iat,"RoFormerForQuestionAnswering"),iat.forEach(t),L$o=r(Vwe," (RoFormer model)"),Vwe.forEach(t),B$o=i(P),W2=n(P,"LI",{});var zwe=s(W2);rie=n(zwe,"STRONG",{});var dat=s(rie);x$o=r(dat,"splinter"),dat.forEach(t),k$o=r(zwe," \u2014 "),Bj=n(zwe,"A",{href:!0});var cat=s(Bj);R$o=r(cat,"SplinterForQuestionAnswering"),cat.forEach(t),S$o=r(zwe," (Splinter model)"),zwe.forEach(t),P$o=i(P),Q2=n(P,"LI",{});var Wwe=s(Q2);tie=n(Wwe,"STRONG",{});var fat=s(tie);$$o=r(fat,"squeezebert"),fat.forEach(t),I$o=r(Wwe," \u2014 "),xj=n(Wwe,"A",{href:!0});var mat=s(xj);D$o=r(mat,"SqueezeBertForQuestionAnswering"),mat.forEach(t),N$o=r(Wwe," (SqueezeBERT model)"),Wwe.forEach(t),j$o=i(P),H2=n(P,"LI",{});var Qwe=s(H2);aie=n(Qwe,"STRONG",{});var gat=s(aie);q$o=r(gat,"xlm"),gat.forEach(t),G$o=r(Qwe," \u2014 "),kj=n(Qwe,"A",{href:!0});var hat=s(kj);O$o=r(hat,"XLMForQuestionAnsweringSimple"),hat.forEach(t),X$o=r(Qwe," (XLM model)"),Qwe.forEach(t),V$o=i(P),U2=n(P,"LI",{});var Hwe=s(U2);nie=n(Hwe,"STRONG",{});var pat=s(nie);z$o=r(pat,"xlm-roberta"),pat.forEach(t),W$o=r(Hwe," \u2014 "),Rj=n(Hwe,"A",{href:!0});var _at=s(Rj);Q$o=r(_at,"XLMRobertaForQuestionAnswering"),_at.forEach(t),H$o=r(Hwe," (XLM-RoBERTa model)"),Hwe.forEach(t),U$o=i(P),J2=n(P,"LI",{});var Uwe=s(J2);sie=n(Uwe,"STRONG",{});var uat=s(sie);J$o=r(uat,"xlm-roberta-xl"),uat.forEach(t),Y$o=r(Uwe," \u2014 "),Sj=n(Uwe,"A",{href:!0});var bat=s(Sj);K$o=r(bat,"XLMRobertaXLForQuestionAnswering"),bat.forEach(t),Z$o=r(Uwe," (XLM-RoBERTa-XL model)"),Uwe.forEach(t),eIo=i(P),Y2=n(P,"LI",{});var Jwe=s(Y2);lie=n(Jwe,"STRONG",{});var vat=s(lie);oIo=r(vat,"xlnet"),vat.forEach(t),rIo=r(Jwe," \u2014 "),Pj=n(Jwe,"A",{href:!0});var Tat=s(Pj);tIo=r(Tat,"XLNetForQuestionAnsweringSimple"),Tat.forEach(t),aIo=r(Jwe," (XLNet model)"),Jwe.forEach(t),nIo=i(P),K2=n(P,"LI",{});var Ywe=s(K2);iie=n(Ywe,"STRONG",{});var Fat=s(iie);sIo=r(Fat,"yoso"),Fat.forEach(t),lIo=r(Ywe," \u2014 "),$j=n(Ywe,"A",{href:!0});var Cat=s($j);iIo=r(Cat,"YosoForQuestionAnswering"),Cat.forEach(t),dIo=r(Ywe," (YOSO model)"),Ywe.forEach(t),P.forEach(t),cIo=i(Ut),Z2=n(Ut,"P",{});var Kwe=s(Z2);fIo=r(Kwe,"The model is set in evaluation mode by default using "),die=n(Kwe,"CODE",{});var Mat=s(die);mIo=r(Mat,"model.eval()"),Mat.forEach(t),gIo=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(Kwe,"CODE",{});var Eat=s(cie);hIo=r(Eat,"model.train()"),Eat.forEach(t),Kwe.forEach(t),pIo=i(Ut),fie=n(Ut,"P",{});var yat=s(fie);_Io=r(yat,"Examples:"),yat.forEach(t),uIo=i(Ut),m(i5.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),iRe=i(c),wd=n(c,"H2",{class:!0});var uPe=s(wd);ev=n(uPe,"A",{id:!0,class:!0,href:!0});var wat=s(ev);mie=n(wat,"SPAN",{});var Aat=s(mie);m(d5.$$.fragment,Aat),Aat.forEach(t),wat.forEach(t),bIo=i(uPe),gie=n(uPe,"SPAN",{});var Lat=s(gie);vIo=r(Lat,"AutoModelForTableQuestionAnswering"),Lat.forEach(t),uPe.forEach(t),dRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(c5.$$.fragment,gl),TIo=i(gl),Ad=n(gl,"P",{});var BW=s(Ad);FIo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=n(BW,"CODE",{});var Bat=s(hie);CIo=r(Bat,"from_pretrained()"),Bat.forEach(t),MIo=r(BW,"class method or the "),pie=n(BW,"CODE",{});var xat=s(pie);EIo=r(xat,"from_config()"),xat.forEach(t),yIo=r(BW,`class
method.`),BW.forEach(t),wIo=i(gl),f5=n(gl,"P",{});var bPe=s(f5);AIo=r(bPe,"This class cannot be instantiated directly using "),_ie=n(bPe,"CODE",{});var kat=s(_ie);LIo=r(kat,"__init__()"),kat.forEach(t),BIo=r(bPe," (throws an error)."),bPe.forEach(t),xIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(m5.$$.fragment,hl),kIo=i(hl),uie=n(hl,"P",{});var Rat=s(uie);RIo=r(Rat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rat.forEach(t),SIo=i(hl),Ld=n(hl,"P",{});var xW=s(Ld);PIo=r(xW,`Note:
Loading a model from its configuration file does `),bie=n(xW,"STRONG",{});var Sat=s(bie);$Io=r(Sat,"not"),Sat.forEach(t),IIo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=n(xW,"CODE",{});var Pat=s(vie);DIo=r(Pat,"from_pretrained()"),Pat.forEach(t),NIo=r(xW,"to load the model weights."),xW.forEach(t),jIo=i(hl),Tie=n(hl,"P",{});var $at=s(Tie);qIo=r($at,"Examples:"),$at.forEach(t),GIo=i(hl),m(g5.$$.fragment,hl),hl.forEach(t),OIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(h5.$$.fragment,Jt),XIo=i(Jt),Fie=n(Jt,"P",{});var Iat=s(Fie);VIo=r(Iat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iat.forEach(t),zIo=i(Jt),en=n(Jt,"P",{});var AM=s(en);WIo=r(AM,"The model class to instantiate is selected based on the "),Cie=n(AM,"CODE",{});var Dat=s(Cie);QIo=r(Dat,"model_type"),Dat.forEach(t),HIo=r(AM,` property of the config object (either
passed as an argument or loaded from `),Mie=n(AM,"CODE",{});var Nat=s(Mie);UIo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),JIo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(AM,"CODE",{});var jat=s(Eie);YIo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),KIo=r(AM,":"),AM.forEach(t),ZIo=i(Jt),yie=n(Jt,"UL",{});var qat=s(yie);ov=n(qat,"LI",{});var Zwe=s(ov);wie=n(Zwe,"STRONG",{});var Gat=s(wie);eDo=r(Gat,"tapas"),Gat.forEach(t),oDo=r(Zwe," \u2014 "),Ij=n(Zwe,"A",{href:!0});var Oat=s(Ij);rDo=r(Oat,"TapasForQuestionAnswering"),Oat.forEach(t),tDo=r(Zwe," (TAPAS model)"),Zwe.forEach(t),qat.forEach(t),aDo=i(Jt),rv=n(Jt,"P",{});var eAe=s(rv);nDo=r(eAe,"The model is set in evaluation mode by default using "),Aie=n(eAe,"CODE",{});var Xat=s(Aie);sDo=r(Xat,"model.eval()"),Xat.forEach(t),lDo=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(eAe,"CODE",{});var Vat=s(Lie);iDo=r(Vat,"model.train()"),Vat.forEach(t),eAe.forEach(t),dDo=i(Jt),Bie=n(Jt,"P",{});var zat=s(Bie);cDo=r(zat,"Examples:"),zat.forEach(t),fDo=i(Jt),m(p5.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),cRe=i(c),Bd=n(c,"H2",{class:!0});var vPe=s(Bd);tv=n(vPe,"A",{id:!0,class:!0,href:!0});var Wat=s(tv);xie=n(Wat,"SPAN",{});var Qat=s(xie);m(_5.$$.fragment,Qat),Qat.forEach(t),Wat.forEach(t),mDo=i(vPe),kie=n(vPe,"SPAN",{});var Hat=s(kie);gDo=r(Hat,"AutoModelForImageClassification"),Hat.forEach(t),vPe.forEach(t),fRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(u5.$$.fragment,pl),hDo=i(pl),xd=n(pl,"P",{});var kW=s(xd);pDo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=n(kW,"CODE",{});var Uat=s(Rie);_Do=r(Uat,"from_pretrained()"),Uat.forEach(t),uDo=r(kW,"class method or the "),Sie=n(kW,"CODE",{});var Jat=s(Sie);bDo=r(Jat,"from_config()"),Jat.forEach(t),vDo=r(kW,`class
method.`),kW.forEach(t),TDo=i(pl),b5=n(pl,"P",{});var TPe=s(b5);FDo=r(TPe,"This class cannot be instantiated directly using "),Pie=n(TPe,"CODE",{});var Yat=s(Pie);CDo=r(Yat,"__init__()"),Yat.forEach(t),MDo=r(TPe," (throws an error)."),TPe.forEach(t),EDo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(v5.$$.fragment,_l),yDo=i(_l),$ie=n(_l,"P",{});var Kat=s($ie);wDo=r(Kat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kat.forEach(t),ADo=i(_l),kd=n(_l,"P",{});var RW=s(kd);LDo=r(RW,`Note:
Loading a model from its configuration file does `),Iie=n(RW,"STRONG",{});var Zat=s(Iie);BDo=r(Zat,"not"),Zat.forEach(t),xDo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=n(RW,"CODE",{});var ent=s(Die);kDo=r(ent,"from_pretrained()"),ent.forEach(t),RDo=r(RW,"to load the model weights."),RW.forEach(t),SDo=i(_l),Nie=n(_l,"P",{});var ont=s(Nie);PDo=r(ont,"Examples:"),ont.forEach(t),$Do=i(_l),m(T5.$$.fragment,_l),_l.forEach(t),IDo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(F5.$$.fragment,Yt),DDo=i(Yt),jie=n(Yt,"P",{});var rnt=s(jie);NDo=r(rnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rnt.forEach(t),jDo=i(Yt),on=n(Yt,"P",{});var LM=s(on);qDo=r(LM,"The model class to instantiate is selected based on the "),qie=n(LM,"CODE",{});var tnt=s(qie);GDo=r(tnt,"model_type"),tnt.forEach(t),ODo=r(LM,` property of the config object (either
passed as an argument or loaded from `),Gie=n(LM,"CODE",{});var ant=s(Gie);XDo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),VDo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=n(LM,"CODE",{});var nnt=s(Oie);zDo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),WDo=r(LM,":"),LM.forEach(t),QDo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);av=n(Fe,"LI",{});var oAe=s(av);Xie=n(oAe,"STRONG",{});var snt=s(Xie);HDo=r(snt,"beit"),snt.forEach(t),UDo=r(oAe," \u2014 "),Dj=n(oAe,"A",{href:!0});var lnt=s(Dj);JDo=r(lnt,"BeitForImageClassification"),lnt.forEach(t),YDo=r(oAe," (BEiT model)"),oAe.forEach(t),KDo=i(Fe),nv=n(Fe,"LI",{});var rAe=s(nv);Vie=n(rAe,"STRONG",{});var int=s(Vie);ZDo=r(int,"convnext"),int.forEach(t),eNo=r(rAe," \u2014 "),Nj=n(rAe,"A",{href:!0});var dnt=s(Nj);oNo=r(dnt,"ConvNextForImageClassification"),dnt.forEach(t),rNo=r(rAe," (ConvNext model)"),rAe.forEach(t),tNo=i(Fe),qs=n(Fe,"LI",{});var t9=s(qs);zie=n(t9,"STRONG",{});var cnt=s(zie);aNo=r(cnt,"deit"),cnt.forEach(t),nNo=r(t9," \u2014 "),jj=n(t9,"A",{href:!0});var fnt=s(jj);sNo=r(fnt,"DeiTForImageClassification"),fnt.forEach(t),lNo=r(t9," or "),qj=n(t9,"A",{href:!0});var mnt=s(qj);iNo=r(mnt,"DeiTForImageClassificationWithTeacher"),mnt.forEach(t),dNo=r(t9," (DeiT model)"),t9.forEach(t),cNo=i(Fe),sv=n(Fe,"LI",{});var tAe=s(sv);Wie=n(tAe,"STRONG",{});var gnt=s(Wie);fNo=r(gnt,"imagegpt"),gnt.forEach(t),mNo=r(tAe," \u2014 "),Gj=n(tAe,"A",{href:!0});var hnt=s(Gj);gNo=r(hnt,"ImageGPTForImageClassification"),hnt.forEach(t),hNo=r(tAe," (ImageGPT model)"),tAe.forEach(t),pNo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);Qie=n($f,"STRONG",{});var pnt=s(Qie);_No=r(pnt,"perceiver"),pnt.forEach(t),uNo=r($f," \u2014 "),Oj=n($f,"A",{href:!0});var _nt=s(Oj);bNo=r(_nt,"PerceiverForImageClassificationLearned"),_nt.forEach(t),vNo=r($f," or "),Xj=n($f,"A",{href:!0});var unt=s(Xj);TNo=r(unt,"PerceiverForImageClassificationFourier"),unt.forEach(t),FNo=r($f," or "),Vj=n($f,"A",{href:!0});var bnt=s(Vj);CNo=r(bnt,"PerceiverForImageClassificationConvProcessing"),bnt.forEach(t),MNo=r($f," (Perceiver model)"),$f.forEach(t),ENo=i(Fe),lv=n(Fe,"LI",{});var aAe=s(lv);Hie=n(aAe,"STRONG",{});var vnt=s(Hie);yNo=r(vnt,"poolformer"),vnt.forEach(t),wNo=r(aAe," \u2014 "),zj=n(aAe,"A",{href:!0});var Tnt=s(zj);ANo=r(Tnt,"PoolFormerForImageClassification"),Tnt.forEach(t),LNo=r(aAe," (PoolFormer model)"),aAe.forEach(t),BNo=i(Fe),iv=n(Fe,"LI",{});var nAe=s(iv);Uie=n(nAe,"STRONG",{});var Fnt=s(Uie);xNo=r(Fnt,"resnet"),Fnt.forEach(t),kNo=r(nAe," \u2014 "),Wj=n(nAe,"A",{href:!0});var Cnt=s(Wj);RNo=r(Cnt,"ResNetForImageClassification"),Cnt.forEach(t),SNo=r(nAe," (ResNet model)"),nAe.forEach(t),PNo=i(Fe),dv=n(Fe,"LI",{});var sAe=s(dv);Jie=n(sAe,"STRONG",{});var Mnt=s(Jie);$No=r(Mnt,"segformer"),Mnt.forEach(t),INo=r(sAe," \u2014 "),Qj=n(sAe,"A",{href:!0});var Ent=s(Qj);DNo=r(Ent,"SegformerForImageClassification"),Ent.forEach(t),NNo=r(sAe," (SegFormer model)"),sAe.forEach(t),jNo=i(Fe),cv=n(Fe,"LI",{});var lAe=s(cv);Yie=n(lAe,"STRONG",{});var ynt=s(Yie);qNo=r(ynt,"swin"),ynt.forEach(t),GNo=r(lAe," \u2014 "),Hj=n(lAe,"A",{href:!0});var wnt=s(Hj);ONo=r(wnt,"SwinForImageClassification"),wnt.forEach(t),XNo=r(lAe," (Swin model)"),lAe.forEach(t),VNo=i(Fe),fv=n(Fe,"LI",{});var iAe=s(fv);Kie=n(iAe,"STRONG",{});var Ant=s(Kie);zNo=r(Ant,"van"),Ant.forEach(t),WNo=r(iAe," \u2014 "),Uj=n(iAe,"A",{href:!0});var Lnt=s(Uj);QNo=r(Lnt,"VanForImageClassification"),Lnt.forEach(t),HNo=r(iAe," (VAN model)"),iAe.forEach(t),UNo=i(Fe),mv=n(Fe,"LI",{});var dAe=s(mv);Zie=n(dAe,"STRONG",{});var Bnt=s(Zie);JNo=r(Bnt,"vit"),Bnt.forEach(t),YNo=r(dAe," \u2014 "),Jj=n(dAe,"A",{href:!0});var xnt=s(Jj);KNo=r(xnt,"ViTForImageClassification"),xnt.forEach(t),ZNo=r(dAe," (ViT model)"),dAe.forEach(t),Fe.forEach(t),ejo=i(Yt),gv=n(Yt,"P",{});var cAe=s(gv);ojo=r(cAe,"The model is set in evaluation mode by default using "),ede=n(cAe,"CODE",{});var knt=s(ede);rjo=r(knt,"model.eval()"),knt.forEach(t),tjo=r(cAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(cAe,"CODE",{});var Rnt=s(ode);ajo=r(Rnt,"model.train()"),Rnt.forEach(t),cAe.forEach(t),njo=i(Yt),rde=n(Yt,"P",{});var Snt=s(rde);sjo=r(Snt,"Examples:"),Snt.forEach(t),ljo=i(Yt),m(C5.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),mRe=i(c),Rd=n(c,"H2",{class:!0});var FPe=s(Rd);hv=n(FPe,"A",{id:!0,class:!0,href:!0});var Pnt=s(hv);tde=n(Pnt,"SPAN",{});var $nt=s(tde);m(M5.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),ijo=i(FPe),ade=n(FPe,"SPAN",{});var Int=s(ade);djo=r(Int,"AutoModelForVision2Seq"),Int.forEach(t),FPe.forEach(t),gRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(E5.$$.fragment,ul),cjo=i(ul),Sd=n(ul,"P",{});var SW=s(Sd);fjo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=n(SW,"CODE",{});var Dnt=s(nde);mjo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),gjo=r(SW,"class method or the "),sde=n(SW,"CODE",{});var Nnt=s(sde);hjo=r(Nnt,"from_config()"),Nnt.forEach(t),pjo=r(SW,`class
method.`),SW.forEach(t),_jo=i(ul),y5=n(ul,"P",{});var CPe=s(y5);ujo=r(CPe,"This class cannot be instantiated directly using "),lde=n(CPe,"CODE",{});var jnt=s(lde);bjo=r(jnt,"__init__()"),jnt.forEach(t),vjo=r(CPe," (throws an error)."),CPe.forEach(t),Tjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(w5.$$.fragment,bl),Fjo=i(bl),ide=n(bl,"P",{});var qnt=s(ide);Cjo=r(qnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qnt.forEach(t),Mjo=i(bl),Pd=n(bl,"P",{});var PW=s(Pd);Ejo=r(PW,`Note:
Loading a model from its configuration file does `),dde=n(PW,"STRONG",{});var Gnt=s(dde);yjo=r(Gnt,"not"),Gnt.forEach(t),wjo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=n(PW,"CODE",{});var Ont=s(cde);Ajo=r(Ont,"from_pretrained()"),Ont.forEach(t),Ljo=r(PW,"to load the model weights."),PW.forEach(t),Bjo=i(bl),fde=n(bl,"P",{});var Xnt=s(fde);xjo=r(Xnt,"Examples:"),Xnt.forEach(t),kjo=i(bl),m(A5.$$.fragment,bl),bl.forEach(t),Rjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(L5.$$.fragment,Kt),Sjo=i(Kt),mde=n(Kt,"P",{});var Vnt=s(mde);Pjo=r(Vnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vnt.forEach(t),$jo=i(Kt),rn=n(Kt,"P",{});var BM=s(rn);Ijo=r(BM,"The model class to instantiate is selected based on the "),gde=n(BM,"CODE",{});var znt=s(gde);Djo=r(znt,"model_type"),znt.forEach(t),Njo=r(BM,` property of the config object (either
passed as an argument or loaded from `),hde=n(BM,"CODE",{});var Wnt=s(hde);jjo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),qjo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(BM,"CODE",{});var Qnt=s(pde);Gjo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Ojo=r(BM,":"),BM.forEach(t),Xjo=i(Kt),_de=n(Kt,"UL",{});var Hnt=s(_de);pv=n(Hnt,"LI",{});var fAe=s(pv);ude=n(fAe,"STRONG",{});var Unt=s(ude);Vjo=r(Unt,"vision-encoder-decoder"),Unt.forEach(t),zjo=r(fAe," \u2014 "),Yj=n(fAe,"A",{href:!0});var Jnt=s(Yj);Wjo=r(Jnt,"VisionEncoderDecoderModel"),Jnt.forEach(t),Qjo=r(fAe," (Vision Encoder decoder model)"),fAe.forEach(t),Hnt.forEach(t),Hjo=i(Kt),_v=n(Kt,"P",{});var mAe=s(_v);Ujo=r(mAe,"The model is set in evaluation mode by default using "),bde=n(mAe,"CODE",{});var Ynt=s(bde);Jjo=r(Ynt,"model.eval()"),Ynt.forEach(t),Yjo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(mAe,"CODE",{});var Knt=s(vde);Kjo=r(Knt,"model.train()"),Knt.forEach(t),mAe.forEach(t),Zjo=i(Kt),Tde=n(Kt,"P",{});var Znt=s(Tde);eqo=r(Znt,"Examples:"),Znt.forEach(t),oqo=i(Kt),m(B5.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),hRe=i(c),$d=n(c,"H2",{class:!0});var MPe=s($d);uv=n(MPe,"A",{id:!0,class:!0,href:!0});var est=s(uv);Fde=n(est,"SPAN",{});var ost=s(Fde);m(x5.$$.fragment,ost),ost.forEach(t),est.forEach(t),rqo=i(MPe),Cde=n(MPe,"SPAN",{});var rst=s(Cde);tqo=r(rst,"AutoModelForAudioClassification"),rst.forEach(t),MPe.forEach(t),pRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(k5.$$.fragment,vl),aqo=i(vl),Id=n(vl,"P",{});var $W=s(Id);nqo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=n($W,"CODE",{});var tst=s(Mde);sqo=r(tst,"from_pretrained()"),tst.forEach(t),lqo=r($W,"class method or the "),Ede=n($W,"CODE",{});var ast=s(Ede);iqo=r(ast,"from_config()"),ast.forEach(t),dqo=r($W,`class
method.`),$W.forEach(t),cqo=i(vl),R5=n(vl,"P",{});var EPe=s(R5);fqo=r(EPe,"This class cannot be instantiated directly using "),yde=n(EPe,"CODE",{});var nst=s(yde);mqo=r(nst,"__init__()"),nst.forEach(t),gqo=r(EPe," (throws an error)."),EPe.forEach(t),hqo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(S5.$$.fragment,Tl),pqo=i(Tl),wde=n(Tl,"P",{});var sst=s(wde);_qo=r(sst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sst.forEach(t),uqo=i(Tl),Dd=n(Tl,"P",{});var IW=s(Dd);bqo=r(IW,`Note:
Loading a model from its configuration file does `),Ade=n(IW,"STRONG",{});var lst=s(Ade);vqo=r(lst,"not"),lst.forEach(t),Tqo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=n(IW,"CODE",{});var ist=s(Lde);Fqo=r(ist,"from_pretrained()"),ist.forEach(t),Cqo=r(IW,"to load the model weights."),IW.forEach(t),Mqo=i(Tl),Bde=n(Tl,"P",{});var dst=s(Bde);Eqo=r(dst,"Examples:"),dst.forEach(t),yqo=i(Tl),m(P5.$$.fragment,Tl),Tl.forEach(t),wqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m($5.$$.fragment,Zt),Aqo=i(Zt),xde=n(Zt,"P",{});var cst=s(xde);Lqo=r(cst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cst.forEach(t),Bqo=i(Zt),tn=n(Zt,"P",{});var xM=s(tn);xqo=r(xM,"The model class to instantiate is selected based on the "),kde=n(xM,"CODE",{});var fst=s(kde);kqo=r(fst,"model_type"),fst.forEach(t),Rqo=r(xM,` property of the config object (either
passed as an argument or loaded from `),Rde=n(xM,"CODE",{});var mst=s(Rde);Sqo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),Pqo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(xM,"CODE",{});var gst=s(Sde);$qo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),Iqo=r(xM,":"),xM.forEach(t),Dqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);bv=n(qo,"LI",{});var gAe=s(bv);Pde=n(gAe,"STRONG",{});var hst=s(Pde);Nqo=r(hst,"data2vec-audio"),hst.forEach(t),jqo=r(gAe," \u2014 "),Kj=n(gAe,"A",{href:!0});var pst=s(Kj);qqo=r(pst,"Data2VecAudioForSequenceClassification"),pst.forEach(t),Gqo=r(gAe," (Data2VecAudio model)"),gAe.forEach(t),Oqo=i(qo),vv=n(qo,"LI",{});var hAe=s(vv);$de=n(hAe,"STRONG",{});var _st=s($de);Xqo=r(_st,"hubert"),_st.forEach(t),Vqo=r(hAe," \u2014 "),Zj=n(hAe,"A",{href:!0});var ust=s(Zj);zqo=r(ust,"HubertForSequenceClassification"),ust.forEach(t),Wqo=r(hAe," (Hubert model)"),hAe.forEach(t),Qqo=i(qo),Tv=n(qo,"LI",{});var pAe=s(Tv);Ide=n(pAe,"STRONG",{});var bst=s(Ide);Hqo=r(bst,"sew"),bst.forEach(t),Uqo=r(pAe," \u2014 "),eq=n(pAe,"A",{href:!0});var vst=s(eq);Jqo=r(vst,"SEWForSequenceClassification"),vst.forEach(t),Yqo=r(pAe," (SEW model)"),pAe.forEach(t),Kqo=i(qo),Fv=n(qo,"LI",{});var _Ae=s(Fv);Dde=n(_Ae,"STRONG",{});var Tst=s(Dde);Zqo=r(Tst,"sew-d"),Tst.forEach(t),eGo=r(_Ae," \u2014 "),oq=n(_Ae,"A",{href:!0});var Fst=s(oq);oGo=r(Fst,"SEWDForSequenceClassification"),Fst.forEach(t),rGo=r(_Ae," (SEW-D model)"),_Ae.forEach(t),tGo=i(qo),Cv=n(qo,"LI",{});var uAe=s(Cv);Nde=n(uAe,"STRONG",{});var Cst=s(Nde);aGo=r(Cst,"unispeech"),Cst.forEach(t),nGo=r(uAe," \u2014 "),rq=n(uAe,"A",{href:!0});var Mst=s(rq);sGo=r(Mst,"UniSpeechForSequenceClassification"),Mst.forEach(t),lGo=r(uAe," (UniSpeech model)"),uAe.forEach(t),iGo=i(qo),Mv=n(qo,"LI",{});var bAe=s(Mv);jde=n(bAe,"STRONG",{});var Est=s(jde);dGo=r(Est,"unispeech-sat"),Est.forEach(t),cGo=r(bAe," \u2014 "),tq=n(bAe,"A",{href:!0});var yst=s(tq);fGo=r(yst,"UniSpeechSatForSequenceClassification"),yst.forEach(t),mGo=r(bAe," (UniSpeechSat model)"),bAe.forEach(t),gGo=i(qo),Ev=n(qo,"LI",{});var vAe=s(Ev);qde=n(vAe,"STRONG",{});var wst=s(qde);hGo=r(wst,"wav2vec2"),wst.forEach(t),pGo=r(vAe," \u2014 "),aq=n(vAe,"A",{href:!0});var Ast=s(aq);_Go=r(Ast,"Wav2Vec2ForSequenceClassification"),Ast.forEach(t),uGo=r(vAe," (Wav2Vec2 model)"),vAe.forEach(t),bGo=i(qo),yv=n(qo,"LI",{});var TAe=s(yv);Gde=n(TAe,"STRONG",{});var Lst=s(Gde);vGo=r(Lst,"wavlm"),Lst.forEach(t),TGo=r(TAe," \u2014 "),nq=n(TAe,"A",{href:!0});var Bst=s(nq);FGo=r(Bst,"WavLMForSequenceClassification"),Bst.forEach(t),CGo=r(TAe," (WavLM model)"),TAe.forEach(t),qo.forEach(t),MGo=i(Zt),wv=n(Zt,"P",{});var FAe=s(wv);EGo=r(FAe,"The model is set in evaluation mode by default using "),Ode=n(FAe,"CODE",{});var xst=s(Ode);yGo=r(xst,"model.eval()"),xst.forEach(t),wGo=r(FAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(FAe,"CODE",{});var kst=s(Xde);AGo=r(kst,"model.train()"),kst.forEach(t),FAe.forEach(t),LGo=i(Zt),Vde=n(Zt,"P",{});var Rst=s(Vde);BGo=r(Rst,"Examples:"),Rst.forEach(t),xGo=i(Zt),m(I5.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),_Re=i(c),Nd=n(c,"H2",{class:!0});var yPe=s(Nd);Av=n(yPe,"A",{id:!0,class:!0,href:!0});var Sst=s(Av);zde=n(Sst,"SPAN",{});var Pst=s(zde);m(D5.$$.fragment,Pst),Pst.forEach(t),Sst.forEach(t),kGo=i(yPe),Wde=n(yPe,"SPAN",{});var $st=s(Wde);RGo=r($st,"AutoModelForAudioFrameClassification"),$st.forEach(t),yPe.forEach(t),uRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(N5.$$.fragment,Fl),SGo=i(Fl),jd=n(Fl,"P",{});var DW=s(jd);PGo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=n(DW,"CODE",{});var Ist=s(Qde);$Go=r(Ist,"from_pretrained()"),Ist.forEach(t),IGo=r(DW,"class method or the "),Hde=n(DW,"CODE",{});var Dst=s(Hde);DGo=r(Dst,"from_config()"),Dst.forEach(t),NGo=r(DW,`class
method.`),DW.forEach(t),jGo=i(Fl),j5=n(Fl,"P",{});var wPe=s(j5);qGo=r(wPe,"This class cannot be instantiated directly using "),Ude=n(wPe,"CODE",{});var Nst=s(Ude);GGo=r(Nst,"__init__()"),Nst.forEach(t),OGo=r(wPe," (throws an error)."),wPe.forEach(t),XGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(q5.$$.fragment,Cl),VGo=i(Cl),Jde=n(Cl,"P",{});var jst=s(Jde);zGo=r(jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jst.forEach(t),WGo=i(Cl),qd=n(Cl,"P",{});var NW=s(qd);QGo=r(NW,`Note:
Loading a model from its configuration file does `),Yde=n(NW,"STRONG",{});var qst=s(Yde);HGo=r(qst,"not"),qst.forEach(t),UGo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=n(NW,"CODE",{});var Gst=s(Kde);JGo=r(Gst,"from_pretrained()"),Gst.forEach(t),YGo=r(NW,"to load the model weights."),NW.forEach(t),KGo=i(Cl),Zde=n(Cl,"P",{});var Ost=s(Zde);ZGo=r(Ost,"Examples:"),Ost.forEach(t),eOo=i(Cl),m(G5.$$.fragment,Cl),Cl.forEach(t),oOo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(O5.$$.fragment,ea),rOo=i(ea),ece=n(ea,"P",{});var Xst=s(ece);tOo=r(Xst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Xst.forEach(t),aOo=i(ea),an=n(ea,"P",{});var kM=s(an);nOo=r(kM,"The model class to instantiate is selected based on the "),oce=n(kM,"CODE",{});var Vst=s(oce);sOo=r(Vst,"model_type"),Vst.forEach(t),lOo=r(kM,` property of the config object (either
passed as an argument or loaded from `),rce=n(kM,"CODE",{});var zst=s(rce);iOo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),dOo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=n(kM,"CODE",{});var Wst=s(tce);cOo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),fOo=r(kM,":"),kM.forEach(t),mOo=i(ea),nn=n(ea,"UL",{});var RM=s(nn);Lv=n(RM,"LI",{});var CAe=s(Lv);ace=n(CAe,"STRONG",{});var Qst=s(ace);gOo=r(Qst,"data2vec-audio"),Qst.forEach(t),hOo=r(CAe," \u2014 "),sq=n(CAe,"A",{href:!0});var Hst=s(sq);pOo=r(Hst,"Data2VecAudioForAudioFrameClassification"),Hst.forEach(t),_Oo=r(CAe," (Data2VecAudio model)"),CAe.forEach(t),uOo=i(RM),Bv=n(RM,"LI",{});var MAe=s(Bv);nce=n(MAe,"STRONG",{});var Ust=s(nce);bOo=r(Ust,"unispeech-sat"),Ust.forEach(t),vOo=r(MAe," \u2014 "),lq=n(MAe,"A",{href:!0});var Jst=s(lq);TOo=r(Jst,"UniSpeechSatForAudioFrameClassification"),Jst.forEach(t),FOo=r(MAe," (UniSpeechSat model)"),MAe.forEach(t),COo=i(RM),xv=n(RM,"LI",{});var EAe=s(xv);sce=n(EAe,"STRONG",{});var Yst=s(sce);MOo=r(Yst,"wav2vec2"),Yst.forEach(t),EOo=r(EAe," \u2014 "),iq=n(EAe,"A",{href:!0});var Kst=s(iq);yOo=r(Kst,"Wav2Vec2ForAudioFrameClassification"),Kst.forEach(t),wOo=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),AOo=i(RM),kv=n(RM,"LI",{});var yAe=s(kv);lce=n(yAe,"STRONG",{});var Zst=s(lce);LOo=r(Zst,"wavlm"),Zst.forEach(t),BOo=r(yAe," \u2014 "),dq=n(yAe,"A",{href:!0});var elt=s(dq);xOo=r(elt,"WavLMForAudioFrameClassification"),elt.forEach(t),kOo=r(yAe," (WavLM model)"),yAe.forEach(t),RM.forEach(t),ROo=i(ea),Rv=n(ea,"P",{});var wAe=s(Rv);SOo=r(wAe,"The model is set in evaluation mode by default using "),ice=n(wAe,"CODE",{});var olt=s(ice);POo=r(olt,"model.eval()"),olt.forEach(t),$Oo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(wAe,"CODE",{});var rlt=s(dce);IOo=r(rlt,"model.train()"),rlt.forEach(t),wAe.forEach(t),DOo=i(ea),cce=n(ea,"P",{});var tlt=s(cce);NOo=r(tlt,"Examples:"),tlt.forEach(t),jOo=i(ea),m(X5.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),bRe=i(c),Gd=n(c,"H2",{class:!0});var APe=s(Gd);Sv=n(APe,"A",{id:!0,class:!0,href:!0});var alt=s(Sv);fce=n(alt,"SPAN",{});var nlt=s(fce);m(V5.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),qOo=i(APe),mce=n(APe,"SPAN",{});var slt=s(mce);GOo=r(slt,"AutoModelForCTC"),slt.forEach(t),APe.forEach(t),vRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(z5.$$.fragment,Ml),OOo=i(Ml),Od=n(Ml,"P",{});var jW=s(Od);XOo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=n(jW,"CODE",{});var llt=s(gce);VOo=r(llt,"from_pretrained()"),llt.forEach(t),zOo=r(jW,"class method or the "),hce=n(jW,"CODE",{});var ilt=s(hce);WOo=r(ilt,"from_config()"),ilt.forEach(t),QOo=r(jW,`class
method.`),jW.forEach(t),HOo=i(Ml),W5=n(Ml,"P",{});var LPe=s(W5);UOo=r(LPe,"This class cannot be instantiated directly using "),pce=n(LPe,"CODE",{});var dlt=s(pce);JOo=r(dlt,"__init__()"),dlt.forEach(t),YOo=r(LPe," (throws an error)."),LPe.forEach(t),KOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Q5.$$.fragment,El),ZOo=i(El),_ce=n(El,"P",{});var clt=s(_ce);eXo=r(clt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),clt.forEach(t),oXo=i(El),Xd=n(El,"P",{});var qW=s(Xd);rXo=r(qW,`Note:
Loading a model from its configuration file does `),uce=n(qW,"STRONG",{});var flt=s(uce);tXo=r(flt,"not"),flt.forEach(t),aXo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=n(qW,"CODE",{});var mlt=s(bce);nXo=r(mlt,"from_pretrained()"),mlt.forEach(t),sXo=r(qW,"to load the model weights."),qW.forEach(t),lXo=i(El),vce=n(El,"P",{});var glt=s(vce);iXo=r(glt,"Examples:"),glt.forEach(t),dXo=i(El),m(H5.$$.fragment,El),El.forEach(t),cXo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(U5.$$.fragment,oa),fXo=i(oa),Tce=n(oa,"P",{});var hlt=s(Tce);mXo=r(hlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hlt.forEach(t),gXo=i(oa),sn=n(oa,"P",{});var SM=s(sn);hXo=r(SM,"The model class to instantiate is selected based on the "),Fce=n(SM,"CODE",{});var plt=s(Fce);pXo=r(plt,"model_type"),plt.forEach(t),_Xo=r(SM,` property of the config object (either
passed as an argument or loaded from `),Cce=n(SM,"CODE",{});var _lt=s(Cce);uXo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),bXo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(SM,"CODE",{});var ult=s(Mce);vXo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),TXo=r(SM,":"),SM.forEach(t),FXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Pv=n(Go,"LI",{});var AAe=s(Pv);Ece=n(AAe,"STRONG",{});var blt=s(Ece);CXo=r(blt,"data2vec-audio"),blt.forEach(t),MXo=r(AAe," \u2014 "),cq=n(AAe,"A",{href:!0});var vlt=s(cq);EXo=r(vlt,"Data2VecAudioForCTC"),vlt.forEach(t),yXo=r(AAe," (Data2VecAudio model)"),AAe.forEach(t),wXo=i(Go),$v=n(Go,"LI",{});var LAe=s($v);yce=n(LAe,"STRONG",{});var Tlt=s(yce);AXo=r(Tlt,"hubert"),Tlt.forEach(t),LXo=r(LAe," \u2014 "),fq=n(LAe,"A",{href:!0});var Flt=s(fq);BXo=r(Flt,"HubertForCTC"),Flt.forEach(t),xXo=r(LAe," (Hubert model)"),LAe.forEach(t),kXo=i(Go),Iv=n(Go,"LI",{});var BAe=s(Iv);wce=n(BAe,"STRONG",{});var Clt=s(wce);RXo=r(Clt,"sew"),Clt.forEach(t),SXo=r(BAe," \u2014 "),mq=n(BAe,"A",{href:!0});var Mlt=s(mq);PXo=r(Mlt,"SEWForCTC"),Mlt.forEach(t),$Xo=r(BAe," (SEW model)"),BAe.forEach(t),IXo=i(Go),Dv=n(Go,"LI",{});var xAe=s(Dv);Ace=n(xAe,"STRONG",{});var Elt=s(Ace);DXo=r(Elt,"sew-d"),Elt.forEach(t),NXo=r(xAe," \u2014 "),gq=n(xAe,"A",{href:!0});var ylt=s(gq);jXo=r(ylt,"SEWDForCTC"),ylt.forEach(t),qXo=r(xAe," (SEW-D model)"),xAe.forEach(t),GXo=i(Go),Nv=n(Go,"LI",{});var kAe=s(Nv);Lce=n(kAe,"STRONG",{});var wlt=s(Lce);OXo=r(wlt,"unispeech"),wlt.forEach(t),XXo=r(kAe," \u2014 "),hq=n(kAe,"A",{href:!0});var Alt=s(hq);VXo=r(Alt,"UniSpeechForCTC"),Alt.forEach(t),zXo=r(kAe," (UniSpeech model)"),kAe.forEach(t),WXo=i(Go),jv=n(Go,"LI",{});var RAe=s(jv);Bce=n(RAe,"STRONG",{});var Llt=s(Bce);QXo=r(Llt,"unispeech-sat"),Llt.forEach(t),HXo=r(RAe," \u2014 "),pq=n(RAe,"A",{href:!0});var Blt=s(pq);UXo=r(Blt,"UniSpeechSatForCTC"),Blt.forEach(t),JXo=r(RAe," (UniSpeechSat model)"),RAe.forEach(t),YXo=i(Go),qv=n(Go,"LI",{});var SAe=s(qv);xce=n(SAe,"STRONG",{});var xlt=s(xce);KXo=r(xlt,"wav2vec2"),xlt.forEach(t),ZXo=r(SAe," \u2014 "),_q=n(SAe,"A",{href:!0});var klt=s(_q);eVo=r(klt,"Wav2Vec2ForCTC"),klt.forEach(t),oVo=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),rVo=i(Go),Gv=n(Go,"LI",{});var PAe=s(Gv);kce=n(PAe,"STRONG",{});var Rlt=s(kce);tVo=r(Rlt,"wavlm"),Rlt.forEach(t),aVo=r(PAe," \u2014 "),uq=n(PAe,"A",{href:!0});var Slt=s(uq);nVo=r(Slt,"WavLMForCTC"),Slt.forEach(t),sVo=r(PAe," (WavLM model)"),PAe.forEach(t),Go.forEach(t),lVo=i(oa),Ov=n(oa,"P",{});var $Ae=s(Ov);iVo=r($Ae,"The model is set in evaluation mode by default using "),Rce=n($Ae,"CODE",{});var Plt=s(Rce);dVo=r(Plt,"model.eval()"),Plt.forEach(t),cVo=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n($Ae,"CODE",{});var $lt=s(Sce);fVo=r($lt,"model.train()"),$lt.forEach(t),$Ae.forEach(t),mVo=i(oa),Pce=n(oa,"P",{});var Ilt=s(Pce);gVo=r(Ilt,"Examples:"),Ilt.forEach(t),hVo=i(oa),m(J5.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),TRe=i(c),Vd=n(c,"H2",{class:!0});var BPe=s(Vd);Xv=n(BPe,"A",{id:!0,class:!0,href:!0});var Dlt=s(Xv);$ce=n(Dlt,"SPAN",{});var Nlt=s($ce);m(Y5.$$.fragment,Nlt),Nlt.forEach(t),Dlt.forEach(t),pVo=i(BPe),Ice=n(BPe,"SPAN",{});var jlt=s(Ice);_Vo=r(jlt,"AutoModelForSpeechSeq2Seq"),jlt.forEach(t),BPe.forEach(t),FRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(K5.$$.fragment,yl),uVo=i(yl),zd=n(yl,"P",{});var GW=s(zd);bVo=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dce=n(GW,"CODE",{});var qlt=s(Dce);vVo=r(qlt,"from_pretrained()"),qlt.forEach(t),TVo=r(GW,"class method or the "),Nce=n(GW,"CODE",{});var Glt=s(Nce);FVo=r(Glt,"from_config()"),Glt.forEach(t),CVo=r(GW,`class
method.`),GW.forEach(t),MVo=i(yl),Z5=n(yl,"P",{});var xPe=s(Z5);EVo=r(xPe,"This class cannot be instantiated directly using "),jce=n(xPe,"CODE",{});var Olt=s(jce);yVo=r(Olt,"__init__()"),Olt.forEach(t),wVo=r(xPe," (throws an error)."),xPe.forEach(t),AVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(ey.$$.fragment,wl),LVo=i(wl),qce=n(wl,"P",{});var Xlt=s(qce);BVo=r(Xlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xlt.forEach(t),xVo=i(wl),Wd=n(wl,"P",{});var OW=s(Wd);kVo=r(OW,`Note:
Loading a model from its configuration file does `),Gce=n(OW,"STRONG",{});var Vlt=s(Gce);RVo=r(Vlt,"not"),Vlt.forEach(t),SVo=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=n(OW,"CODE",{});var zlt=s(Oce);PVo=r(zlt,"from_pretrained()"),zlt.forEach(t),$Vo=r(OW,"to load the model weights."),OW.forEach(t),IVo=i(wl),Xce=n(wl,"P",{});var Wlt=s(Xce);DVo=r(Wlt,"Examples:"),Wlt.forEach(t),NVo=i(wl),m(oy.$$.fragment,wl),wl.forEach(t),jVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(ry.$$.fragment,ra),qVo=i(ra),Vce=n(ra,"P",{});var Qlt=s(Vce);GVo=r(Qlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qlt.forEach(t),OVo=i(ra),ln=n(ra,"P",{});var PM=s(ln);XVo=r(PM,"The model class to instantiate is selected based on the "),zce=n(PM,"CODE",{});var Hlt=s(zce);VVo=r(Hlt,"model_type"),Hlt.forEach(t),zVo=r(PM,` property of the config object (either
passed as an argument or loaded from `),Wce=n(PM,"CODE",{});var Ult=s(Wce);WVo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),QVo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(PM,"CODE",{});var Jlt=s(Qce);HVo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),UVo=r(PM,":"),PM.forEach(t),JVo=i(ra),ty=n(ra,"UL",{});var kPe=s(ty);Vv=n(kPe,"LI",{});var IAe=s(Vv);Hce=n(IAe,"STRONG",{});var Ylt=s(Hce);YVo=r(Ylt,"speech-encoder-decoder"),Ylt.forEach(t),KVo=r(IAe," \u2014 "),bq=n(IAe,"A",{href:!0});var Klt=s(bq);ZVo=r(Klt,"SpeechEncoderDecoderModel"),Klt.forEach(t),ezo=r(IAe," (Speech Encoder decoder model)"),IAe.forEach(t),ozo=i(kPe),zv=n(kPe,"LI",{});var DAe=s(zv);Uce=n(DAe,"STRONG",{});var Zlt=s(Uce);rzo=r(Zlt,"speech_to_text"),Zlt.forEach(t),tzo=r(DAe," \u2014 "),vq=n(DAe,"A",{href:!0});var eit=s(vq);azo=r(eit,"Speech2TextForConditionalGeneration"),eit.forEach(t),nzo=r(DAe," (Speech2Text model)"),DAe.forEach(t),kPe.forEach(t),szo=i(ra),Wv=n(ra,"P",{});var NAe=s(Wv);lzo=r(NAe,"The model is set in evaluation mode by default using "),Jce=n(NAe,"CODE",{});var oit=s(Jce);izo=r(oit,"model.eval()"),oit.forEach(t),dzo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(NAe,"CODE",{});var rit=s(Yce);czo=r(rit,"model.train()"),rit.forEach(t),NAe.forEach(t),fzo=i(ra),Kce=n(ra,"P",{});var tit=s(Kce);mzo=r(tit,"Examples:"),tit.forEach(t),gzo=i(ra),m(ay.$$.fragment,ra),ra.forEach(t),yl.forEach(t),CRe=i(c),Qd=n(c,"H2",{class:!0});var RPe=s(Qd);Qv=n(RPe,"A",{id:!0,class:!0,href:!0});var ait=s(Qv);Zce=n(ait,"SPAN",{});var nit=s(Zce);m(ny.$$.fragment,nit),nit.forEach(t),ait.forEach(t),hzo=i(RPe),efe=n(RPe,"SPAN",{});var sit=s(efe);pzo=r(sit,"AutoModelForAudioXVector"),sit.forEach(t),RPe.forEach(t),MRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(sy.$$.fragment,Al),_zo=i(Al),Hd=n(Al,"P",{});var XW=s(Hd);uzo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=n(XW,"CODE",{});var lit=s(ofe);bzo=r(lit,"from_pretrained()"),lit.forEach(t),vzo=r(XW,"class method or the "),rfe=n(XW,"CODE",{});var iit=s(rfe);Tzo=r(iit,"from_config()"),iit.forEach(t),Fzo=r(XW,`class
method.`),XW.forEach(t),Czo=i(Al),ly=n(Al,"P",{});var SPe=s(ly);Mzo=r(SPe,"This class cannot be instantiated directly using "),tfe=n(SPe,"CODE",{});var dit=s(tfe);Ezo=r(dit,"__init__()"),dit.forEach(t),yzo=r(SPe," (throws an error)."),SPe.forEach(t),wzo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(iy.$$.fragment,Ll),Azo=i(Ll),afe=n(Ll,"P",{});var cit=s(afe);Lzo=r(cit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cit.forEach(t),Bzo=i(Ll),Ud=n(Ll,"P",{});var VW=s(Ud);xzo=r(VW,`Note:
Loading a model from its configuration file does `),nfe=n(VW,"STRONG",{});var fit=s(nfe);kzo=r(fit,"not"),fit.forEach(t),Rzo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=n(VW,"CODE",{});var mit=s(sfe);Szo=r(mit,"from_pretrained()"),mit.forEach(t),Pzo=r(VW,"to load the model weights."),VW.forEach(t),$zo=i(Ll),lfe=n(Ll,"P",{});var git=s(lfe);Izo=r(git,"Examples:"),git.forEach(t),Dzo=i(Ll),m(dy.$$.fragment,Ll),Ll.forEach(t),Nzo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(cy.$$.fragment,ta),jzo=i(ta),ife=n(ta,"P",{});var hit=s(ife);qzo=r(hit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hit.forEach(t),Gzo=i(ta),dn=n(ta,"P",{});var $M=s(dn);Ozo=r($M,"The model class to instantiate is selected based on the "),dfe=n($M,"CODE",{});var pit=s(dfe);Xzo=r(pit,"model_type"),pit.forEach(t),Vzo=r($M,` property of the config object (either
passed as an argument or loaded from `),cfe=n($M,"CODE",{});var _it=s(cfe);zzo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),Wzo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n($M,"CODE",{});var uit=s(ffe);Qzo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),Hzo=r($M,":"),$M.forEach(t),Uzo=i(ta),cn=n(ta,"UL",{});var IM=s(cn);Hv=n(IM,"LI",{});var jAe=s(Hv);mfe=n(jAe,"STRONG",{});var bit=s(mfe);Jzo=r(bit,"data2vec-audio"),bit.forEach(t),Yzo=r(jAe," \u2014 "),Tq=n(jAe,"A",{href:!0});var vit=s(Tq);Kzo=r(vit,"Data2VecAudioForXVector"),vit.forEach(t),Zzo=r(jAe," (Data2VecAudio model)"),jAe.forEach(t),eWo=i(IM),Uv=n(IM,"LI",{});var qAe=s(Uv);gfe=n(qAe,"STRONG",{});var Tit=s(gfe);oWo=r(Tit,"unispeech-sat"),Tit.forEach(t),rWo=r(qAe," \u2014 "),Fq=n(qAe,"A",{href:!0});var Fit=s(Fq);tWo=r(Fit,"UniSpeechSatForXVector"),Fit.forEach(t),aWo=r(qAe," (UniSpeechSat model)"),qAe.forEach(t),nWo=i(IM),Jv=n(IM,"LI",{});var GAe=s(Jv);hfe=n(GAe,"STRONG",{});var Cit=s(hfe);sWo=r(Cit,"wav2vec2"),Cit.forEach(t),lWo=r(GAe," \u2014 "),Cq=n(GAe,"A",{href:!0});var Mit=s(Cq);iWo=r(Mit,"Wav2Vec2ForXVector"),Mit.forEach(t),dWo=r(GAe," (Wav2Vec2 model)"),GAe.forEach(t),cWo=i(IM),Yv=n(IM,"LI",{});var OAe=s(Yv);pfe=n(OAe,"STRONG",{});var Eit=s(pfe);fWo=r(Eit,"wavlm"),Eit.forEach(t),mWo=r(OAe," \u2014 "),Mq=n(OAe,"A",{href:!0});var yit=s(Mq);gWo=r(yit,"WavLMForXVector"),yit.forEach(t),hWo=r(OAe," (WavLM model)"),OAe.forEach(t),IM.forEach(t),pWo=i(ta),Kv=n(ta,"P",{});var XAe=s(Kv);_Wo=r(XAe,"The model is set in evaluation mode by default using "),_fe=n(XAe,"CODE",{});var wit=s(_fe);uWo=r(wit,"model.eval()"),wit.forEach(t),bWo=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(XAe,"CODE",{});var Ait=s(ufe);vWo=r(Ait,"model.train()"),Ait.forEach(t),XAe.forEach(t),TWo=i(ta),bfe=n(ta,"P",{});var Lit=s(bfe);FWo=r(Lit,"Examples:"),Lit.forEach(t),CWo=i(ta),m(fy.$$.fragment,ta),ta.forEach(t),Al.forEach(t),ERe=i(c),Jd=n(c,"H2",{class:!0});var PPe=s(Jd);Zv=n(PPe,"A",{id:!0,class:!0,href:!0});var Bit=s(Zv);vfe=n(Bit,"SPAN",{});var xit=s(vfe);m(my.$$.fragment,xit),xit.forEach(t),Bit.forEach(t),MWo=i(PPe),Tfe=n(PPe,"SPAN",{});var kit=s(Tfe);EWo=r(kit,"AutoModelForMaskedImageModeling"),kit.forEach(t),PPe.forEach(t),yRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(gy.$$.fragment,Bl),yWo=i(Bl),Yd=n(Bl,"P",{});var zW=s(Yd);wWo=r(zW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=n(zW,"CODE",{});var Rit=s(Ffe);AWo=r(Rit,"from_pretrained()"),Rit.forEach(t),LWo=r(zW,"class method or the "),Cfe=n(zW,"CODE",{});var Sit=s(Cfe);BWo=r(Sit,"from_config()"),Sit.forEach(t),xWo=r(zW,`class
method.`),zW.forEach(t),kWo=i(Bl),hy=n(Bl,"P",{});var $Pe=s(hy);RWo=r($Pe,"This class cannot be instantiated directly using "),Mfe=n($Pe,"CODE",{});var Pit=s(Mfe);SWo=r(Pit,"__init__()"),Pit.forEach(t),PWo=r($Pe," (throws an error)."),$Pe.forEach(t),$Wo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(py.$$.fragment,xl),IWo=i(xl),Efe=n(xl,"P",{});var $it=s(Efe);DWo=r($it,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$it.forEach(t),NWo=i(xl),Kd=n(xl,"P",{});var WW=s(Kd);jWo=r(WW,`Note:
Loading a model from its configuration file does `),yfe=n(WW,"STRONG",{});var Iit=s(yfe);qWo=r(Iit,"not"),Iit.forEach(t),GWo=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n(WW,"CODE",{});var Dit=s(wfe);OWo=r(Dit,"from_pretrained()"),Dit.forEach(t),XWo=r(WW,"to load the model weights."),WW.forEach(t),VWo=i(xl),Afe=n(xl,"P",{});var Nit=s(Afe);zWo=r(Nit,"Examples:"),Nit.forEach(t),WWo=i(xl),m(_y.$$.fragment,xl),xl.forEach(t),QWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(uy.$$.fragment,aa),HWo=i(aa),Lfe=n(aa,"P",{});var jit=s(Lfe);UWo=r(jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jit.forEach(t),JWo=i(aa),fn=n(aa,"P",{});var DM=s(fn);YWo=r(DM,"The model class to instantiate is selected based on the "),Bfe=n(DM,"CODE",{});var qit=s(Bfe);KWo=r(qit,"model_type"),qit.forEach(t),ZWo=r(DM,` property of the config object (either
passed as an argument or loaded from `),xfe=n(DM,"CODE",{});var Git=s(xfe);eQo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),oQo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(DM,"CODE",{});var Oit=s(kfe);rQo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),tQo=r(DM,":"),DM.forEach(t),aQo=i(aa),Zd=n(aa,"UL",{});var QW=s(Zd);e6=n(QW,"LI",{});var VAe=s(e6);Rfe=n(VAe,"STRONG",{});var Xit=s(Rfe);nQo=r(Xit,"deit"),Xit.forEach(t),sQo=r(VAe," \u2014 "),Eq=n(VAe,"A",{href:!0});var Vit=s(Eq);lQo=r(Vit,"DeiTForMaskedImageModeling"),Vit.forEach(t),iQo=r(VAe," (DeiT model)"),VAe.forEach(t),dQo=i(QW),o6=n(QW,"LI",{});var zAe=s(o6);Sfe=n(zAe,"STRONG",{});var zit=s(Sfe);cQo=r(zit,"swin"),zit.forEach(t),fQo=r(zAe," \u2014 "),yq=n(zAe,"A",{href:!0});var Wit=s(yq);mQo=r(Wit,"SwinForMaskedImageModeling"),Wit.forEach(t),gQo=r(zAe," (Swin model)"),zAe.forEach(t),hQo=i(QW),r6=n(QW,"LI",{});var WAe=s(r6);Pfe=n(WAe,"STRONG",{});var Qit=s(Pfe);pQo=r(Qit,"vit"),Qit.forEach(t),_Qo=r(WAe," \u2014 "),wq=n(WAe,"A",{href:!0});var Hit=s(wq);uQo=r(Hit,"ViTForMaskedImageModeling"),Hit.forEach(t),bQo=r(WAe," (ViT model)"),WAe.forEach(t),QW.forEach(t),vQo=i(aa),t6=n(aa,"P",{});var QAe=s(t6);TQo=r(QAe,"The model is set in evaluation mode by default using "),$fe=n(QAe,"CODE",{});var Uit=s($fe);FQo=r(Uit,"model.eval()"),Uit.forEach(t),CQo=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(QAe,"CODE",{});var Jit=s(Ife);MQo=r(Jit,"model.train()"),Jit.forEach(t),QAe.forEach(t),EQo=i(aa),Dfe=n(aa,"P",{});var Yit=s(Dfe);yQo=r(Yit,"Examples:"),Yit.forEach(t),wQo=i(aa),m(by.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),wRe=i(c),ec=n(c,"H2",{class:!0});var IPe=s(ec);a6=n(IPe,"A",{id:!0,class:!0,href:!0});var Kit=s(a6);Nfe=n(Kit,"SPAN",{});var Zit=s(Nfe);m(vy.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),AQo=i(IPe),jfe=n(IPe,"SPAN",{});var edt=s(jfe);LQo=r(edt,"AutoModelForObjectDetection"),edt.forEach(t),IPe.forEach(t),ARe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Ty.$$.fragment,kl),BQo=i(kl),oc=n(kl,"P",{});var HW=s(oc);xQo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=n(HW,"CODE",{});var odt=s(qfe);kQo=r(odt,"from_pretrained()"),odt.forEach(t),RQo=r(HW,"class method or the "),Gfe=n(HW,"CODE",{});var rdt=s(Gfe);SQo=r(rdt,"from_config()"),rdt.forEach(t),PQo=r(HW,`class
method.`),HW.forEach(t),$Qo=i(kl),Fy=n(kl,"P",{});var DPe=s(Fy);IQo=r(DPe,"This class cannot be instantiated directly using "),Ofe=n(DPe,"CODE",{});var tdt=s(Ofe);DQo=r(tdt,"__init__()"),tdt.forEach(t),NQo=r(DPe," (throws an error)."),DPe.forEach(t),jQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(Cy.$$.fragment,Rl),qQo=i(Rl),Xfe=n(Rl,"P",{});var adt=s(Xfe);GQo=r(adt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),adt.forEach(t),OQo=i(Rl),rc=n(Rl,"P",{});var UW=s(rc);XQo=r(UW,`Note:
Loading a model from its configuration file does `),Vfe=n(UW,"STRONG",{});var ndt=s(Vfe);VQo=r(ndt,"not"),ndt.forEach(t),zQo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=n(UW,"CODE",{});var sdt=s(zfe);WQo=r(sdt,"from_pretrained()"),sdt.forEach(t),QQo=r(UW,"to load the model weights."),UW.forEach(t),HQo=i(Rl),Wfe=n(Rl,"P",{});var ldt=s(Wfe);UQo=r(ldt,"Examples:"),ldt.forEach(t),JQo=i(Rl),m(My.$$.fragment,Rl),Rl.forEach(t),YQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(Ey.$$.fragment,na),KQo=i(na),Qfe=n(na,"P",{});var idt=s(Qfe);ZQo=r(idt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),idt.forEach(t),eHo=i(na),mn=n(na,"P",{});var NM=s(mn);oHo=r(NM,"The model class to instantiate is selected based on the "),Hfe=n(NM,"CODE",{});var ddt=s(Hfe);rHo=r(ddt,"model_type"),ddt.forEach(t),tHo=r(NM,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(NM,"CODE",{});var cdt=s(Ufe);aHo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),nHo=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(NM,"CODE",{});var fdt=s(Jfe);sHo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),lHo=r(NM,":"),NM.forEach(t),iHo=i(na),Yfe=n(na,"UL",{});var mdt=s(Yfe);n6=n(mdt,"LI",{});var HAe=s(n6);Kfe=n(HAe,"STRONG",{});var gdt=s(Kfe);dHo=r(gdt,"detr"),gdt.forEach(t),cHo=r(HAe," \u2014 "),Aq=n(HAe,"A",{href:!0});var hdt=s(Aq);fHo=r(hdt,"DetrForObjectDetection"),hdt.forEach(t),mHo=r(HAe," (DETR model)"),HAe.forEach(t),mdt.forEach(t),gHo=i(na),s6=n(na,"P",{});var UAe=s(s6);hHo=r(UAe,"The model is set in evaluation mode by default using "),Zfe=n(UAe,"CODE",{});var pdt=s(Zfe);pHo=r(pdt,"model.eval()"),pdt.forEach(t),_Ho=r(UAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(UAe,"CODE",{});var _dt=s(eme);uHo=r(_dt,"model.train()"),_dt.forEach(t),UAe.forEach(t),bHo=i(na),ome=n(na,"P",{});var udt=s(ome);vHo=r(udt,"Examples:"),udt.forEach(t),THo=i(na),m(yy.$$.fragment,na),na.forEach(t),kl.forEach(t),LRe=i(c),tc=n(c,"H2",{class:!0});var NPe=s(tc);l6=n(NPe,"A",{id:!0,class:!0,href:!0});var bdt=s(l6);rme=n(bdt,"SPAN",{});var vdt=s(rme);m(wy.$$.fragment,vdt),vdt.forEach(t),bdt.forEach(t),FHo=i(NPe),tme=n(NPe,"SPAN",{});var Tdt=s(tme);CHo=r(Tdt,"AutoModelForImageSegmentation"),Tdt.forEach(t),NPe.forEach(t),BRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(Ay.$$.fragment,Sl),MHo=i(Sl),ac=n(Sl,"P",{});var JW=s(ac);EHo=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=n(JW,"CODE",{});var Fdt=s(ame);yHo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),wHo=r(JW,"class method or the "),nme=n(JW,"CODE",{});var Cdt=s(nme);AHo=r(Cdt,"from_config()"),Cdt.forEach(t),LHo=r(JW,`class
method.`),JW.forEach(t),BHo=i(Sl),Ly=n(Sl,"P",{});var jPe=s(Ly);xHo=r(jPe,"This class cannot be instantiated directly using "),sme=n(jPe,"CODE",{});var Mdt=s(sme);kHo=r(Mdt,"__init__()"),Mdt.forEach(t),RHo=r(jPe," (throws an error)."),jPe.forEach(t),SHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(By.$$.fragment,Pl),PHo=i(Pl),lme=n(Pl,"P",{});var Edt=s(lme);$Ho=r(Edt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Edt.forEach(t),IHo=i(Pl),nc=n(Pl,"P",{});var YW=s(nc);DHo=r(YW,`Note:
Loading a model from its configuration file does `),ime=n(YW,"STRONG",{});var ydt=s(ime);NHo=r(ydt,"not"),ydt.forEach(t),jHo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=n(YW,"CODE",{});var wdt=s(dme);qHo=r(wdt,"from_pretrained()"),wdt.forEach(t),GHo=r(YW,"to load the model weights."),YW.forEach(t),OHo=i(Pl),cme=n(Pl,"P",{});var Adt=s(cme);XHo=r(Adt,"Examples:"),Adt.forEach(t),VHo=i(Pl),m(xy.$$.fragment,Pl),Pl.forEach(t),zHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(ky.$$.fragment,sa),WHo=i(sa),fme=n(sa,"P",{});var Ldt=s(fme);QHo=r(Ldt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ldt.forEach(t),HHo=i(sa),gn=n(sa,"P",{});var jM=s(gn);UHo=r(jM,"The model class to instantiate is selected based on the "),mme=n(jM,"CODE",{});var Bdt=s(mme);JHo=r(Bdt,"model_type"),Bdt.forEach(t),YHo=r(jM,` property of the config object (either
passed as an argument or loaded from `),gme=n(jM,"CODE",{});var xdt=s(gme);KHo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),ZHo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(jM,"CODE",{});var kdt=s(hme);eUo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),oUo=r(jM,":"),jM.forEach(t),rUo=i(sa),pme=n(sa,"UL",{});var Rdt=s(pme);i6=n(Rdt,"LI",{});var JAe=s(i6);_me=n(JAe,"STRONG",{});var Sdt=s(_me);tUo=r(Sdt,"detr"),Sdt.forEach(t),aUo=r(JAe," \u2014 "),Lq=n(JAe,"A",{href:!0});var Pdt=s(Lq);nUo=r(Pdt,"DetrForSegmentation"),Pdt.forEach(t),sUo=r(JAe," (DETR model)"),JAe.forEach(t),Rdt.forEach(t),lUo=i(sa),d6=n(sa,"P",{});var YAe=s(d6);iUo=r(YAe,"The model is set in evaluation mode by default using "),ume=n(YAe,"CODE",{});var $dt=s(ume);dUo=r($dt,"model.eval()"),$dt.forEach(t),cUo=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(YAe,"CODE",{});var Idt=s(bme);fUo=r(Idt,"model.train()"),Idt.forEach(t),YAe.forEach(t),mUo=i(sa),vme=n(sa,"P",{});var Ddt=s(vme);gUo=r(Ddt,"Examples:"),Ddt.forEach(t),hUo=i(sa),m(Ry.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),xRe=i(c),sc=n(c,"H2",{class:!0});var qPe=s(sc);c6=n(qPe,"A",{id:!0,class:!0,href:!0});var Ndt=s(c6);Tme=n(Ndt,"SPAN",{});var jdt=s(Tme);m(Sy.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),pUo=i(qPe),Fme=n(qPe,"SPAN",{});var qdt=s(Fme);_Uo=r(qdt,"AutoModelForSemanticSegmentation"),qdt.forEach(t),qPe.forEach(t),kRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Py.$$.fragment,$l),uUo=i($l),lc=n($l,"P",{});var KW=s(lc);bUo=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=n(KW,"CODE",{});var Gdt=s(Cme);vUo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),TUo=r(KW,"class method or the "),Mme=n(KW,"CODE",{});var Odt=s(Mme);FUo=r(Odt,"from_config()"),Odt.forEach(t),CUo=r(KW,`class
method.`),KW.forEach(t),MUo=i($l),$y=n($l,"P",{});var GPe=s($y);EUo=r(GPe,"This class cannot be instantiated directly using "),Eme=n(GPe,"CODE",{});var Xdt=s(Eme);yUo=r(Xdt,"__init__()"),Xdt.forEach(t),wUo=r(GPe," (throws an error)."),GPe.forEach(t),AUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Iy.$$.fragment,Il),LUo=i(Il),yme=n(Il,"P",{});var Vdt=s(yme);BUo=r(Vdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vdt.forEach(t),xUo=i(Il),ic=n(Il,"P",{});var ZW=s(ic);kUo=r(ZW,`Note:
Loading a model from its configuration file does `),wme=n(ZW,"STRONG",{});var zdt=s(wme);RUo=r(zdt,"not"),zdt.forEach(t),SUo=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=n(ZW,"CODE",{});var Wdt=s(Ame);PUo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),$Uo=r(ZW,"to load the model weights."),ZW.forEach(t),IUo=i(Il),Lme=n(Il,"P",{});var Qdt=s(Lme);DUo=r(Qdt,"Examples:"),Qdt.forEach(t),NUo=i(Il),m(Dy.$$.fragment,Il),Il.forEach(t),jUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Ny.$$.fragment,la),qUo=i(la),Bme=n(la,"P",{});var Hdt=s(Bme);GUo=r(Hdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hdt.forEach(t),OUo=i(la),hn=n(la,"P",{});var qM=s(hn);XUo=r(qM,"The model class to instantiate is selected based on the "),xme=n(qM,"CODE",{});var Udt=s(xme);VUo=r(Udt,"model_type"),Udt.forEach(t),zUo=r(qM,` property of the config object (either
passed as an argument or loaded from `),kme=n(qM,"CODE",{});var Jdt=s(kme);WUo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),QUo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(qM,"CODE",{});var Ydt=s(Rme);HUo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),UUo=r(qM,":"),qM.forEach(t),JUo=i(la),dc=n(la,"UL",{});var eQ=s(dc);f6=n(eQ,"LI",{});var KAe=s(f6);Sme=n(KAe,"STRONG",{});var Kdt=s(Sme);YUo=r(Kdt,"beit"),Kdt.forEach(t),KUo=r(KAe," \u2014 "),Bq=n(KAe,"A",{href:!0});var Zdt=s(Bq);ZUo=r(Zdt,"BeitForSemanticSegmentation"),Zdt.forEach(t),eJo=r(KAe," (BEiT model)"),KAe.forEach(t),oJo=i(eQ),m6=n(eQ,"LI",{});var ZAe=s(m6);Pme=n(ZAe,"STRONG",{});var ect=s(Pme);rJo=r(ect,"dpt"),ect.forEach(t),tJo=r(ZAe," \u2014 "),xq=n(ZAe,"A",{href:!0});var oct=s(xq);aJo=r(oct,"DPTForSemanticSegmentation"),oct.forEach(t),nJo=r(ZAe," (DPT model)"),ZAe.forEach(t),sJo=i(eQ),g6=n(eQ,"LI",{});var eLe=s(g6);$me=n(eLe,"STRONG",{});var rct=s($me);lJo=r(rct,"segformer"),rct.forEach(t),iJo=r(eLe," \u2014 "),kq=n(eLe,"A",{href:!0});var tct=s(kq);dJo=r(tct,"SegformerForSemanticSegmentation"),tct.forEach(t),cJo=r(eLe," (SegFormer model)"),eLe.forEach(t),eQ.forEach(t),fJo=i(la),h6=n(la,"P",{});var oLe=s(h6);mJo=r(oLe,"The model is set in evaluation mode by default using "),Ime=n(oLe,"CODE",{});var act=s(Ime);gJo=r(act,"model.eval()"),act.forEach(t),hJo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(oLe,"CODE",{});var nct=s(Dme);pJo=r(nct,"model.train()"),nct.forEach(t),oLe.forEach(t),_Jo=i(la),Nme=n(la,"P",{});var sct=s(Nme);uJo=r(sct,"Examples:"),sct.forEach(t),bJo=i(la),m(jy.$$.fragment,la),la.forEach(t),$l.forEach(t),RRe=i(c),cc=n(c,"H2",{class:!0});var OPe=s(cc);p6=n(OPe,"A",{id:!0,class:!0,href:!0});var lct=s(p6);jme=n(lct,"SPAN",{});var ict=s(jme);m(qy.$$.fragment,ict),ict.forEach(t),lct.forEach(t),vJo=i(OPe),qme=n(OPe,"SPAN",{});var dct=s(qme);TJo=r(dct,"AutoModelForInstanceSegmentation"),dct.forEach(t),OPe.forEach(t),SRe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(Gy.$$.fragment,Dl),FJo=i(Dl),fc=n(Dl,"P",{});var oQ=s(fc);CJo=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Gme=n(oQ,"CODE",{});var cct=s(Gme);MJo=r(cct,"from_pretrained()"),cct.forEach(t),EJo=r(oQ,"class method or the "),Ome=n(oQ,"CODE",{});var fct=s(Ome);yJo=r(fct,"from_config()"),fct.forEach(t),wJo=r(oQ,`class
method.`),oQ.forEach(t),AJo=i(Dl),Oy=n(Dl,"P",{});var XPe=s(Oy);LJo=r(XPe,"This class cannot be instantiated directly using "),Xme=n(XPe,"CODE",{});var mct=s(Xme);BJo=r(mct,"__init__()"),mct.forEach(t),xJo=r(XPe," (throws an error)."),XPe.forEach(t),kJo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(Xy.$$.fragment,Nl),RJo=i(Nl),Vme=n(Nl,"P",{});var gct=s(Vme);SJo=r(gct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gct.forEach(t),PJo=i(Nl),mc=n(Nl,"P",{});var rQ=s(mc);$Jo=r(rQ,`Note:
Loading a model from its configuration file does `),zme=n(rQ,"STRONG",{});var hct=s(zme);IJo=r(hct,"not"),hct.forEach(t),DJo=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(rQ,"CODE",{});var pct=s(Wme);NJo=r(pct,"from_pretrained()"),pct.forEach(t),jJo=r(rQ,"to load the model weights."),rQ.forEach(t),qJo=i(Nl),Qme=n(Nl,"P",{});var _ct=s(Qme);GJo=r(_ct,"Examples:"),_ct.forEach(t),OJo=i(Nl),m(Vy.$$.fragment,Nl),Nl.forEach(t),XJo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(zy.$$.fragment,ia),VJo=i(ia),Hme=n(ia,"P",{});var uct=s(Hme);zJo=r(uct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uct.forEach(t),WJo=i(ia),pn=n(ia,"P",{});var GM=s(pn);QJo=r(GM,"The model class to instantiate is selected based on the "),Ume=n(GM,"CODE",{});var bct=s(Ume);HJo=r(bct,"model_type"),bct.forEach(t),UJo=r(GM,` property of the config object (either
passed as an argument or loaded from `),Jme=n(GM,"CODE",{});var vct=s(Jme);JJo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),YJo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(GM,"CODE",{});var Tct=s(Yme);KJo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),ZJo=r(GM,":"),GM.forEach(t),eYo=i(ia),Kme=n(ia,"UL",{});var Fct=s(Kme);_6=n(Fct,"LI",{});var rLe=s(_6);Zme=n(rLe,"STRONG",{});var Cct=s(Zme);oYo=r(Cct,"maskformer"),Cct.forEach(t),rYo=r(rLe," \u2014 "),Rq=n(rLe,"A",{href:!0});var Mct=s(Rq);tYo=r(Mct,"MaskFormerForInstanceSegmentation"),Mct.forEach(t),aYo=r(rLe," (MaskFormer model)"),rLe.forEach(t),Fct.forEach(t),nYo=i(ia),u6=n(ia,"P",{});var tLe=s(u6);sYo=r(tLe,"The model is set in evaluation mode by default using "),ege=n(tLe,"CODE",{});var Ect=s(ege);lYo=r(Ect,"model.eval()"),Ect.forEach(t),iYo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(tLe,"CODE",{});var yct=s(oge);dYo=r(yct,"model.train()"),yct.forEach(t),tLe.forEach(t),cYo=i(ia),rge=n(ia,"P",{});var wct=s(rge);fYo=r(wct,"Examples:"),wct.forEach(t),mYo=i(ia),m(Wy.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),PRe=i(c),gc=n(c,"H2",{class:!0});var VPe=s(gc);b6=n(VPe,"A",{id:!0,class:!0,href:!0});var Act=s(b6);tge=n(Act,"SPAN",{});var Lct=s(tge);m(Qy.$$.fragment,Lct),Lct.forEach(t),Act.forEach(t),gYo=i(VPe),age=n(VPe,"SPAN",{});var Bct=s(age);hYo=r(Bct,"TFAutoModel"),Bct.forEach(t),VPe.forEach(t),$Re=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(Hy.$$.fragment,jl),pYo=i(jl),hc=n(jl,"P",{});var tQ=s(hc);_Yo=r(tQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nge=n(tQ,"CODE",{});var xct=s(nge);uYo=r(xct,"from_pretrained()"),xct.forEach(t),bYo=r(tQ,"class method or the "),sge=n(tQ,"CODE",{});var kct=s(sge);vYo=r(kct,"from_config()"),kct.forEach(t),TYo=r(tQ,`class
method.`),tQ.forEach(t),FYo=i(jl),Uy=n(jl,"P",{});var zPe=s(Uy);CYo=r(zPe,"This class cannot be instantiated directly using "),lge=n(zPe,"CODE",{});var Rct=s(lge);MYo=r(Rct,"__init__()"),Rct.forEach(t),EYo=r(zPe," (throws an error)."),zPe.forEach(t),yYo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(Jy.$$.fragment,ql),wYo=i(ql),ige=n(ql,"P",{});var Sct=s(ige);AYo=r(Sct,"Instantiates one of the base model classes of the library from a configuration."),Sct.forEach(t),LYo=i(ql),pc=n(ql,"P",{});var aQ=s(pc);BYo=r(aQ,`Note:
Loading a model from its configuration file does `),dge=n(aQ,"STRONG",{});var Pct=s(dge);xYo=r(Pct,"not"),Pct.forEach(t),kYo=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=n(aQ,"CODE",{});var $ct=s(cge);RYo=r($ct,"from_pretrained()"),$ct.forEach(t),SYo=r(aQ,"to load the model weights."),aQ.forEach(t),PYo=i(ql),fge=n(ql,"P",{});var Ict=s(fge);$Yo=r(Ict,"Examples:"),Ict.forEach(t),IYo=i(ql),m(Yy.$$.fragment,ql),ql.forEach(t),DYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(Ky.$$.fragment,pa),NYo=i(pa),mge=n(pa,"P",{});var Dct=s(mge);jYo=r(Dct,"Instantiate one of the base model classes of the library from a pretrained model."),Dct.forEach(t),qYo=i(pa),_n=n(pa,"P",{});var OM=s(_n);GYo=r(OM,"The model class to instantiate is selected based on the "),gge=n(OM,"CODE",{});var Nct=s(gge);OYo=r(Nct,"model_type"),Nct.forEach(t),XYo=r(OM,` property of the config object (either
passed as an argument or loaded from `),hge=n(OM,"CODE",{});var jct=s(hge);VYo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zYo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(OM,"CODE",{});var qct=s(pge);WYo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),QYo=r(OM,":"),OM.forEach(t),HYo=i(pa),B=n(pa,"UL",{});var x=s(B);v6=n(x,"LI",{});var aLe=s(v6);_ge=n(aLe,"STRONG",{});var Gct=s(_ge);UYo=r(Gct,"albert"),Gct.forEach(t),JYo=r(aLe," \u2014 "),Sq=n(aLe,"A",{href:!0});var Oct=s(Sq);YYo=r(Oct,"TFAlbertModel"),Oct.forEach(t),KYo=r(aLe," (ALBERT model)"),aLe.forEach(t),ZYo=i(x),T6=n(x,"LI",{});var nLe=s(T6);uge=n(nLe,"STRONG",{});var Xct=s(uge);eKo=r(Xct,"bart"),Xct.forEach(t),oKo=r(nLe," \u2014 "),Pq=n(nLe,"A",{href:!0});var Vct=s(Pq);rKo=r(Vct,"TFBartModel"),Vct.forEach(t),tKo=r(nLe," (BART model)"),nLe.forEach(t),aKo=i(x),F6=n(x,"LI",{});var sLe=s(F6);bge=n(sLe,"STRONG",{});var zct=s(bge);nKo=r(zct,"bert"),zct.forEach(t),sKo=r(sLe," \u2014 "),$q=n(sLe,"A",{href:!0});var Wct=s($q);lKo=r(Wct,"TFBertModel"),Wct.forEach(t),iKo=r(sLe," (BERT model)"),sLe.forEach(t),dKo=i(x),C6=n(x,"LI",{});var lLe=s(C6);vge=n(lLe,"STRONG",{});var Qct=s(vge);cKo=r(Qct,"blenderbot"),Qct.forEach(t),fKo=r(lLe," \u2014 "),Iq=n(lLe,"A",{href:!0});var Hct=s(Iq);mKo=r(Hct,"TFBlenderbotModel"),Hct.forEach(t),gKo=r(lLe," (Blenderbot model)"),lLe.forEach(t),hKo=i(x),M6=n(x,"LI",{});var iLe=s(M6);Tge=n(iLe,"STRONG",{});var Uct=s(Tge);pKo=r(Uct,"blenderbot-small"),Uct.forEach(t),_Ko=r(iLe," \u2014 "),Dq=n(iLe,"A",{href:!0});var Jct=s(Dq);uKo=r(Jct,"TFBlenderbotSmallModel"),Jct.forEach(t),bKo=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),vKo=i(x),E6=n(x,"LI",{});var dLe=s(E6);Fge=n(dLe,"STRONG",{});var Yct=s(Fge);TKo=r(Yct,"camembert"),Yct.forEach(t),FKo=r(dLe," \u2014 "),Nq=n(dLe,"A",{href:!0});var Kct=s(Nq);CKo=r(Kct,"TFCamembertModel"),Kct.forEach(t),MKo=r(dLe," (CamemBERT model)"),dLe.forEach(t),EKo=i(x),y6=n(x,"LI",{});var cLe=s(y6);Cge=n(cLe,"STRONG",{});var Zct=s(Cge);yKo=r(Zct,"clip"),Zct.forEach(t),wKo=r(cLe," \u2014 "),jq=n(cLe,"A",{href:!0});var eft=s(jq);AKo=r(eft,"TFCLIPModel"),eft.forEach(t),LKo=r(cLe," (CLIP model)"),cLe.forEach(t),BKo=i(x),w6=n(x,"LI",{});var fLe=s(w6);Mge=n(fLe,"STRONG",{});var oft=s(Mge);xKo=r(oft,"convbert"),oft.forEach(t),kKo=r(fLe," \u2014 "),qq=n(fLe,"A",{href:!0});var rft=s(qq);RKo=r(rft,"TFConvBertModel"),rft.forEach(t),SKo=r(fLe," (ConvBERT model)"),fLe.forEach(t),PKo=i(x),A6=n(x,"LI",{});var mLe=s(A6);Ege=n(mLe,"STRONG",{});var tft=s(Ege);$Ko=r(tft,"convnext"),tft.forEach(t),IKo=r(mLe," \u2014 "),Gq=n(mLe,"A",{href:!0});var aft=s(Gq);DKo=r(aft,"TFConvNextModel"),aft.forEach(t),NKo=r(mLe," (ConvNext model)"),mLe.forEach(t),jKo=i(x),L6=n(x,"LI",{});var gLe=s(L6);yge=n(gLe,"STRONG",{});var nft=s(yge);qKo=r(nft,"ctrl"),nft.forEach(t),GKo=r(gLe," \u2014 "),Oq=n(gLe,"A",{href:!0});var sft=s(Oq);OKo=r(sft,"TFCTRLModel"),sft.forEach(t),XKo=r(gLe," (CTRL model)"),gLe.forEach(t),VKo=i(x),B6=n(x,"LI",{});var hLe=s(B6);wge=n(hLe,"STRONG",{});var lft=s(wge);zKo=r(lft,"deberta"),lft.forEach(t),WKo=r(hLe," \u2014 "),Xq=n(hLe,"A",{href:!0});var ift=s(Xq);QKo=r(ift,"TFDebertaModel"),ift.forEach(t),HKo=r(hLe," (DeBERTa model)"),hLe.forEach(t),UKo=i(x),x6=n(x,"LI",{});var pLe=s(x6);Age=n(pLe,"STRONG",{});var dft=s(Age);JKo=r(dft,"deberta-v2"),dft.forEach(t),YKo=r(pLe," \u2014 "),Vq=n(pLe,"A",{href:!0});var cft=s(Vq);KKo=r(cft,"TFDebertaV2Model"),cft.forEach(t),ZKo=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),eZo=i(x),k6=n(x,"LI",{});var _Le=s(k6);Lge=n(_Le,"STRONG",{});var fft=s(Lge);oZo=r(fft,"distilbert"),fft.forEach(t),rZo=r(_Le," \u2014 "),zq=n(_Le,"A",{href:!0});var mft=s(zq);tZo=r(mft,"TFDistilBertModel"),mft.forEach(t),aZo=r(_Le," (DistilBERT model)"),_Le.forEach(t),nZo=i(x),R6=n(x,"LI",{});var uLe=s(R6);Bge=n(uLe,"STRONG",{});var gft=s(Bge);sZo=r(gft,"dpr"),gft.forEach(t),lZo=r(uLe," \u2014 "),Wq=n(uLe,"A",{href:!0});var hft=s(Wq);iZo=r(hft,"TFDPRQuestionEncoder"),hft.forEach(t),dZo=r(uLe," (DPR model)"),uLe.forEach(t),cZo=i(x),S6=n(x,"LI",{});var bLe=s(S6);xge=n(bLe,"STRONG",{});var pft=s(xge);fZo=r(pft,"electra"),pft.forEach(t),mZo=r(bLe," \u2014 "),Qq=n(bLe,"A",{href:!0});var _ft=s(Qq);gZo=r(_ft,"TFElectraModel"),_ft.forEach(t),hZo=r(bLe," (ELECTRA model)"),bLe.forEach(t),pZo=i(x),P6=n(x,"LI",{});var vLe=s(P6);kge=n(vLe,"STRONG",{});var uft=s(kge);_Zo=r(uft,"flaubert"),uft.forEach(t),uZo=r(vLe," \u2014 "),Hq=n(vLe,"A",{href:!0});var bft=s(Hq);bZo=r(bft,"TFFlaubertModel"),bft.forEach(t),vZo=r(vLe," (FlauBERT model)"),vLe.forEach(t),TZo=i(x),Gs=n(x,"LI",{});var a9=s(Gs);Rge=n(a9,"STRONG",{});var vft=s(Rge);FZo=r(vft,"funnel"),vft.forEach(t),CZo=r(a9," \u2014 "),Uq=n(a9,"A",{href:!0});var Tft=s(Uq);MZo=r(Tft,"TFFunnelModel"),Tft.forEach(t),EZo=r(a9," or "),Jq=n(a9,"A",{href:!0});var Fft=s(Jq);yZo=r(Fft,"TFFunnelBaseModel"),Fft.forEach(t),wZo=r(a9," (Funnel Transformer model)"),a9.forEach(t),AZo=i(x),$6=n(x,"LI",{});var TLe=s($6);Sge=n(TLe,"STRONG",{});var Cft=s(Sge);LZo=r(Cft,"gpt2"),Cft.forEach(t),BZo=r(TLe," \u2014 "),Yq=n(TLe,"A",{href:!0});var Mft=s(Yq);xZo=r(Mft,"TFGPT2Model"),Mft.forEach(t),kZo=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),RZo=i(x),I6=n(x,"LI",{});var FLe=s(I6);Pge=n(FLe,"STRONG",{});var Eft=s(Pge);SZo=r(Eft,"gptj"),Eft.forEach(t),PZo=r(FLe," \u2014 "),Kq=n(FLe,"A",{href:!0});var yft=s(Kq);$Zo=r(yft,"TFGPTJModel"),yft.forEach(t),IZo=r(FLe," (GPT-J model)"),FLe.forEach(t),DZo=i(x),D6=n(x,"LI",{});var CLe=s(D6);$ge=n(CLe,"STRONG",{});var wft=s($ge);NZo=r(wft,"hubert"),wft.forEach(t),jZo=r(CLe," \u2014 "),Zq=n(CLe,"A",{href:!0});var Aft=s(Zq);qZo=r(Aft,"TFHubertModel"),Aft.forEach(t),GZo=r(CLe," (Hubert model)"),CLe.forEach(t),OZo=i(x),N6=n(x,"LI",{});var MLe=s(N6);Ige=n(MLe,"STRONG",{});var Lft=s(Ige);XZo=r(Lft,"layoutlm"),Lft.forEach(t),VZo=r(MLe," \u2014 "),eG=n(MLe,"A",{href:!0});var Bft=s(eG);zZo=r(Bft,"TFLayoutLMModel"),Bft.forEach(t),WZo=r(MLe," (LayoutLM model)"),MLe.forEach(t),QZo=i(x),j6=n(x,"LI",{});var ELe=s(j6);Dge=n(ELe,"STRONG",{});var xft=s(Dge);HZo=r(xft,"led"),xft.forEach(t),UZo=r(ELe," \u2014 "),oG=n(ELe,"A",{href:!0});var kft=s(oG);JZo=r(kft,"TFLEDModel"),kft.forEach(t),YZo=r(ELe," (LED model)"),ELe.forEach(t),KZo=i(x),q6=n(x,"LI",{});var yLe=s(q6);Nge=n(yLe,"STRONG",{});var Rft=s(Nge);ZZo=r(Rft,"longformer"),Rft.forEach(t),eer=r(yLe," \u2014 "),rG=n(yLe,"A",{href:!0});var Sft=s(rG);oer=r(Sft,"TFLongformerModel"),Sft.forEach(t),rer=r(yLe," (Longformer model)"),yLe.forEach(t),ter=i(x),G6=n(x,"LI",{});var wLe=s(G6);jge=n(wLe,"STRONG",{});var Pft=s(jge);aer=r(Pft,"lxmert"),Pft.forEach(t),ner=r(wLe," \u2014 "),tG=n(wLe,"A",{href:!0});var $ft=s(tG);ser=r($ft,"TFLxmertModel"),$ft.forEach(t),ler=r(wLe," (LXMERT model)"),wLe.forEach(t),ier=i(x),O6=n(x,"LI",{});var ALe=s(O6);qge=n(ALe,"STRONG",{});var Ift=s(qge);der=r(Ift,"marian"),Ift.forEach(t),cer=r(ALe," \u2014 "),aG=n(ALe,"A",{href:!0});var Dft=s(aG);fer=r(Dft,"TFMarianModel"),Dft.forEach(t),mer=r(ALe," (Marian model)"),ALe.forEach(t),ger=i(x),X6=n(x,"LI",{});var LLe=s(X6);Gge=n(LLe,"STRONG",{});var Nft=s(Gge);her=r(Nft,"mbart"),Nft.forEach(t),per=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var jft=s(nG);_er=r(jft,"TFMBartModel"),jft.forEach(t),uer=r(LLe," (mBART model)"),LLe.forEach(t),ber=i(x),V6=n(x,"LI",{});var BLe=s(V6);Oge=n(BLe,"STRONG",{});var qft=s(Oge);ver=r(qft,"mobilebert"),qft.forEach(t),Ter=r(BLe," \u2014 "),sG=n(BLe,"A",{href:!0});var Gft=s(sG);Fer=r(Gft,"TFMobileBertModel"),Gft.forEach(t),Cer=r(BLe," (MobileBERT model)"),BLe.forEach(t),Mer=i(x),z6=n(x,"LI",{});var xLe=s(z6);Xge=n(xLe,"STRONG",{});var Oft=s(Xge);Eer=r(Oft,"mpnet"),Oft.forEach(t),yer=r(xLe," \u2014 "),lG=n(xLe,"A",{href:!0});var Xft=s(lG);wer=r(Xft,"TFMPNetModel"),Xft.forEach(t),Aer=r(xLe," (MPNet model)"),xLe.forEach(t),Ler=i(x),W6=n(x,"LI",{});var kLe=s(W6);Vge=n(kLe,"STRONG",{});var Vft=s(Vge);Ber=r(Vft,"mt5"),Vft.forEach(t),xer=r(kLe," \u2014 "),iG=n(kLe,"A",{href:!0});var zft=s(iG);ker=r(zft,"TFMT5Model"),zft.forEach(t),Rer=r(kLe," (mT5 model)"),kLe.forEach(t),Ser=i(x),Q6=n(x,"LI",{});var RLe=s(Q6);zge=n(RLe,"STRONG",{});var Wft=s(zge);Per=r(Wft,"openai-gpt"),Wft.forEach(t),$er=r(RLe," \u2014 "),dG=n(RLe,"A",{href:!0});var Qft=s(dG);Ier=r(Qft,"TFOpenAIGPTModel"),Qft.forEach(t),Der=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),Ner=i(x),H6=n(x,"LI",{});var SLe=s(H6);Wge=n(SLe,"STRONG",{});var Hft=s(Wge);jer=r(Hft,"pegasus"),Hft.forEach(t),qer=r(SLe," \u2014 "),cG=n(SLe,"A",{href:!0});var Uft=s(cG);Ger=r(Uft,"TFPegasusModel"),Uft.forEach(t),Oer=r(SLe," (Pegasus model)"),SLe.forEach(t),Xer=i(x),U6=n(x,"LI",{});var PLe=s(U6);Qge=n(PLe,"STRONG",{});var Jft=s(Qge);Ver=r(Jft,"rembert"),Jft.forEach(t),zer=r(PLe," \u2014 "),fG=n(PLe,"A",{href:!0});var Yft=s(fG);Wer=r(Yft,"TFRemBertModel"),Yft.forEach(t),Qer=r(PLe," (RemBERT model)"),PLe.forEach(t),Her=i(x),J6=n(x,"LI",{});var $Le=s(J6);Hge=n($Le,"STRONG",{});var Kft=s(Hge);Uer=r(Kft,"roberta"),Kft.forEach(t),Jer=r($Le," \u2014 "),mG=n($Le,"A",{href:!0});var Zft=s(mG);Yer=r(Zft,"TFRobertaModel"),Zft.forEach(t),Ker=r($Le," (RoBERTa model)"),$Le.forEach(t),Zer=i(x),Y6=n(x,"LI",{});var ILe=s(Y6);Uge=n(ILe,"STRONG",{});var emt=s(Uge);eor=r(emt,"roformer"),emt.forEach(t),oor=r(ILe," \u2014 "),gG=n(ILe,"A",{href:!0});var omt=s(gG);ror=r(omt,"TFRoFormerModel"),omt.forEach(t),tor=r(ILe," (RoFormer model)"),ILe.forEach(t),aor=i(x),K6=n(x,"LI",{});var DLe=s(K6);Jge=n(DLe,"STRONG",{});var rmt=s(Jge);nor=r(rmt,"speech_to_text"),rmt.forEach(t),sor=r(DLe," \u2014 "),hG=n(DLe,"A",{href:!0});var tmt=s(hG);lor=r(tmt,"TFSpeech2TextModel"),tmt.forEach(t),ior=r(DLe," (Speech2Text model)"),DLe.forEach(t),dor=i(x),Z6=n(x,"LI",{});var NLe=s(Z6);Yge=n(NLe,"STRONG",{});var amt=s(Yge);cor=r(amt,"t5"),amt.forEach(t),mor=r(NLe," \u2014 "),pG=n(NLe,"A",{href:!0});var nmt=s(pG);gor=r(nmt,"TFT5Model"),nmt.forEach(t),hor=r(NLe," (T5 model)"),NLe.forEach(t),por=i(x),e0=n(x,"LI",{});var jLe=s(e0);Kge=n(jLe,"STRONG",{});var smt=s(Kge);_or=r(smt,"tapas"),smt.forEach(t),uor=r(jLe," \u2014 "),_G=n(jLe,"A",{href:!0});var lmt=s(_G);bor=r(lmt,"TFTapasModel"),lmt.forEach(t),vor=r(jLe," (TAPAS model)"),jLe.forEach(t),Tor=i(x),o0=n(x,"LI",{});var qLe=s(o0);Zge=n(qLe,"STRONG",{});var imt=s(Zge);For=r(imt,"transfo-xl"),imt.forEach(t),Cor=r(qLe," \u2014 "),uG=n(qLe,"A",{href:!0});var dmt=s(uG);Mor=r(dmt,"TFTransfoXLModel"),dmt.forEach(t),Eor=r(qLe," (Transformer-XL model)"),qLe.forEach(t),yor=i(x),r0=n(x,"LI",{});var GLe=s(r0);ehe=n(GLe,"STRONG",{});var cmt=s(ehe);wor=r(cmt,"vit"),cmt.forEach(t),Aor=r(GLe," \u2014 "),bG=n(GLe,"A",{href:!0});var fmt=s(bG);Lor=r(fmt,"TFViTModel"),fmt.forEach(t),Bor=r(GLe," (ViT model)"),GLe.forEach(t),xor=i(x),t0=n(x,"LI",{});var OLe=s(t0);ohe=n(OLe,"STRONG",{});var mmt=s(ohe);kor=r(mmt,"wav2vec2"),mmt.forEach(t),Ror=r(OLe," \u2014 "),vG=n(OLe,"A",{href:!0});var gmt=s(vG);Sor=r(gmt,"TFWav2Vec2Model"),gmt.forEach(t),Por=r(OLe," (Wav2Vec2 model)"),OLe.forEach(t),$or=i(x),a0=n(x,"LI",{});var XLe=s(a0);rhe=n(XLe,"STRONG",{});var hmt=s(rhe);Ior=r(hmt,"xlm"),hmt.forEach(t),Dor=r(XLe," \u2014 "),TG=n(XLe,"A",{href:!0});var pmt=s(TG);Nor=r(pmt,"TFXLMModel"),pmt.forEach(t),jor=r(XLe," (XLM model)"),XLe.forEach(t),qor=i(x),n0=n(x,"LI",{});var VLe=s(n0);the=n(VLe,"STRONG",{});var _mt=s(the);Gor=r(_mt,"xlm-roberta"),_mt.forEach(t),Oor=r(VLe," \u2014 "),FG=n(VLe,"A",{href:!0});var umt=s(FG);Xor=r(umt,"TFXLMRobertaModel"),umt.forEach(t),Vor=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),zor=i(x),s0=n(x,"LI",{});var zLe=s(s0);ahe=n(zLe,"STRONG",{});var bmt=s(ahe);Wor=r(bmt,"xlnet"),bmt.forEach(t),Qor=r(zLe," \u2014 "),CG=n(zLe,"A",{href:!0});var vmt=s(CG);Hor=r(vmt,"TFXLNetModel"),vmt.forEach(t),Uor=r(zLe," (XLNet model)"),zLe.forEach(t),x.forEach(t),Jor=i(pa),nhe=n(pa,"P",{});var Tmt=s(nhe);Yor=r(Tmt,"Examples:"),Tmt.forEach(t),Kor=i(pa),m(Zy.$$.fragment,pa),pa.forEach(t),jl.forEach(t),IRe=i(c),_c=n(c,"H2",{class:!0});var WPe=s(_c);l0=n(WPe,"A",{id:!0,class:!0,href:!0});var Fmt=s(l0);she=n(Fmt,"SPAN",{});var Cmt=s(she);m(ew.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),Zor=i(WPe),lhe=n(WPe,"SPAN",{});var Mmt=s(lhe);err=r(Mmt,"TFAutoModelForPreTraining"),Mmt.forEach(t),WPe.forEach(t),DRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(ow.$$.fragment,Gl),orr=i(Gl),uc=n(Gl,"P",{});var nQ=s(uc);rrr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ihe=n(nQ,"CODE",{});var Emt=s(ihe);trr=r(Emt,"from_pretrained()"),Emt.forEach(t),arr=r(nQ,"class method or the "),dhe=n(nQ,"CODE",{});var ymt=s(dhe);nrr=r(ymt,"from_config()"),ymt.forEach(t),srr=r(nQ,`class
method.`),nQ.forEach(t),lrr=i(Gl),rw=n(Gl,"P",{});var QPe=s(rw);irr=r(QPe,"This class cannot be instantiated directly using "),che=n(QPe,"CODE",{});var wmt=s(che);drr=r(wmt,"__init__()"),wmt.forEach(t),crr=r(QPe," (throws an error)."),QPe.forEach(t),frr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(tw.$$.fragment,Ol),mrr=i(Ol),fhe=n(Ol,"P",{});var Amt=s(fhe);grr=r(Amt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Amt.forEach(t),hrr=i(Ol),bc=n(Ol,"P",{});var sQ=s(bc);prr=r(sQ,`Note:
Loading a model from its configuration file does `),mhe=n(sQ,"STRONG",{});var Lmt=s(mhe);_rr=r(Lmt,"not"),Lmt.forEach(t),urr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ghe=n(sQ,"CODE",{});var Bmt=s(ghe);brr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),vrr=r(sQ,"to load the model weights."),sQ.forEach(t),Trr=i(Ol),hhe=n(Ol,"P",{});var xmt=s(hhe);Frr=r(xmt,"Examples:"),xmt.forEach(t),Crr=i(Ol),m(aw.$$.fragment,Ol),Ol.forEach(t),Mrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(nw.$$.fragment,_a),Err=i(_a),phe=n(_a,"P",{});var kmt=s(phe);yrr=r(kmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kmt.forEach(t),wrr=i(_a),un=n(_a,"P",{});var XM=s(un);Arr=r(XM,"The model class to instantiate is selected based on the "),_he=n(XM,"CODE",{});var Rmt=s(_he);Lrr=r(Rmt,"model_type"),Rmt.forEach(t),Brr=r(XM,` property of the config object (either
passed as an argument or loaded from `),uhe=n(XM,"CODE",{});var Smt=s(uhe);xrr=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),krr=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(XM,"CODE",{});var Pmt=s(bhe);Rrr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Srr=r(XM,":"),XM.forEach(t),Prr=i(_a),H=n(_a,"UL",{});var U=s(H);i0=n(U,"LI",{});var WLe=s(i0);vhe=n(WLe,"STRONG",{});var $mt=s(vhe);$rr=r($mt,"albert"),$mt.forEach(t),Irr=r(WLe," \u2014 "),MG=n(WLe,"A",{href:!0});var Imt=s(MG);Drr=r(Imt,"TFAlbertForPreTraining"),Imt.forEach(t),Nrr=r(WLe," (ALBERT model)"),WLe.forEach(t),jrr=i(U),d0=n(U,"LI",{});var QLe=s(d0);The=n(QLe,"STRONG",{});var Dmt=s(The);qrr=r(Dmt,"bart"),Dmt.forEach(t),Grr=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var Nmt=s(EG);Orr=r(Nmt,"TFBartForConditionalGeneration"),Nmt.forEach(t),Xrr=r(QLe," (BART model)"),QLe.forEach(t),Vrr=i(U),c0=n(U,"LI",{});var HLe=s(c0);Fhe=n(HLe,"STRONG",{});var jmt=s(Fhe);zrr=r(jmt,"bert"),jmt.forEach(t),Wrr=r(HLe," \u2014 "),yG=n(HLe,"A",{href:!0});var qmt=s(yG);Qrr=r(qmt,"TFBertForPreTraining"),qmt.forEach(t),Hrr=r(HLe," (BERT model)"),HLe.forEach(t),Urr=i(U),f0=n(U,"LI",{});var ULe=s(f0);Che=n(ULe,"STRONG",{});var Gmt=s(Che);Jrr=r(Gmt,"camembert"),Gmt.forEach(t),Yrr=r(ULe," \u2014 "),wG=n(ULe,"A",{href:!0});var Omt=s(wG);Krr=r(Omt,"TFCamembertForMaskedLM"),Omt.forEach(t),Zrr=r(ULe," (CamemBERT model)"),ULe.forEach(t),etr=i(U),m0=n(U,"LI",{});var JLe=s(m0);Mhe=n(JLe,"STRONG",{});var Xmt=s(Mhe);otr=r(Xmt,"ctrl"),Xmt.forEach(t),rtr=r(JLe," \u2014 "),AG=n(JLe,"A",{href:!0});var Vmt=s(AG);ttr=r(Vmt,"TFCTRLLMHeadModel"),Vmt.forEach(t),atr=r(JLe," (CTRL model)"),JLe.forEach(t),ntr=i(U),g0=n(U,"LI",{});var YLe=s(g0);Ehe=n(YLe,"STRONG",{});var zmt=s(Ehe);str=r(zmt,"distilbert"),zmt.forEach(t),ltr=r(YLe," \u2014 "),LG=n(YLe,"A",{href:!0});var Wmt=s(LG);itr=r(Wmt,"TFDistilBertForMaskedLM"),Wmt.forEach(t),dtr=r(YLe," (DistilBERT model)"),YLe.forEach(t),ctr=i(U),h0=n(U,"LI",{});var KLe=s(h0);yhe=n(KLe,"STRONG",{});var Qmt=s(yhe);ftr=r(Qmt,"electra"),Qmt.forEach(t),mtr=r(KLe," \u2014 "),BG=n(KLe,"A",{href:!0});var Hmt=s(BG);gtr=r(Hmt,"TFElectraForPreTraining"),Hmt.forEach(t),htr=r(KLe," (ELECTRA model)"),KLe.forEach(t),ptr=i(U),p0=n(U,"LI",{});var ZLe=s(p0);whe=n(ZLe,"STRONG",{});var Umt=s(whe);_tr=r(Umt,"flaubert"),Umt.forEach(t),utr=r(ZLe," \u2014 "),xG=n(ZLe,"A",{href:!0});var Jmt=s(xG);btr=r(Jmt,"TFFlaubertWithLMHeadModel"),Jmt.forEach(t),vtr=r(ZLe," (FlauBERT model)"),ZLe.forEach(t),Ttr=i(U),_0=n(U,"LI",{});var e7e=s(_0);Ahe=n(e7e,"STRONG",{});var Ymt=s(Ahe);Ftr=r(Ymt,"funnel"),Ymt.forEach(t),Ctr=r(e7e," \u2014 "),kG=n(e7e,"A",{href:!0});var Kmt=s(kG);Mtr=r(Kmt,"TFFunnelForPreTraining"),Kmt.forEach(t),Etr=r(e7e," (Funnel Transformer model)"),e7e.forEach(t),ytr=i(U),u0=n(U,"LI",{});var o7e=s(u0);Lhe=n(o7e,"STRONG",{});var Zmt=s(Lhe);wtr=r(Zmt,"gpt2"),Zmt.forEach(t),Atr=r(o7e," \u2014 "),RG=n(o7e,"A",{href:!0});var egt=s(RG);Ltr=r(egt,"TFGPT2LMHeadModel"),egt.forEach(t),Btr=r(o7e," (OpenAI GPT-2 model)"),o7e.forEach(t),xtr=i(U),b0=n(U,"LI",{});var r7e=s(b0);Bhe=n(r7e,"STRONG",{});var ogt=s(Bhe);ktr=r(ogt,"layoutlm"),ogt.forEach(t),Rtr=r(r7e," \u2014 "),SG=n(r7e,"A",{href:!0});var rgt=s(SG);Str=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Ptr=r(r7e," (LayoutLM model)"),r7e.forEach(t),$tr=i(U),v0=n(U,"LI",{});var t7e=s(v0);xhe=n(t7e,"STRONG",{});var tgt=s(xhe);Itr=r(tgt,"lxmert"),tgt.forEach(t),Dtr=r(t7e," \u2014 "),PG=n(t7e,"A",{href:!0});var agt=s(PG);Ntr=r(agt,"TFLxmertForPreTraining"),agt.forEach(t),jtr=r(t7e," (LXMERT model)"),t7e.forEach(t),qtr=i(U),T0=n(U,"LI",{});var a7e=s(T0);khe=n(a7e,"STRONG",{});var ngt=s(khe);Gtr=r(ngt,"mobilebert"),ngt.forEach(t),Otr=r(a7e," \u2014 "),$G=n(a7e,"A",{href:!0});var sgt=s($G);Xtr=r(sgt,"TFMobileBertForPreTraining"),sgt.forEach(t),Vtr=r(a7e," (MobileBERT model)"),a7e.forEach(t),ztr=i(U),F0=n(U,"LI",{});var n7e=s(F0);Rhe=n(n7e,"STRONG",{});var lgt=s(Rhe);Wtr=r(lgt,"mpnet"),lgt.forEach(t),Qtr=r(n7e," \u2014 "),IG=n(n7e,"A",{href:!0});var igt=s(IG);Htr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Utr=r(n7e," (MPNet model)"),n7e.forEach(t),Jtr=i(U),C0=n(U,"LI",{});var s7e=s(C0);She=n(s7e,"STRONG",{});var dgt=s(She);Ytr=r(dgt,"openai-gpt"),dgt.forEach(t),Ktr=r(s7e," \u2014 "),DG=n(s7e,"A",{href:!0});var cgt=s(DG);Ztr=r(cgt,"TFOpenAIGPTLMHeadModel"),cgt.forEach(t),ear=r(s7e," (OpenAI GPT model)"),s7e.forEach(t),oar=i(U),M0=n(U,"LI",{});var l7e=s(M0);Phe=n(l7e,"STRONG",{});var fgt=s(Phe);rar=r(fgt,"roberta"),fgt.forEach(t),tar=r(l7e," \u2014 "),NG=n(l7e,"A",{href:!0});var mgt=s(NG);aar=r(mgt,"TFRobertaForMaskedLM"),mgt.forEach(t),nar=r(l7e," (RoBERTa model)"),l7e.forEach(t),sar=i(U),E0=n(U,"LI",{});var i7e=s(E0);$he=n(i7e,"STRONG",{});var ggt=s($he);lar=r(ggt,"t5"),ggt.forEach(t),iar=r(i7e," \u2014 "),jG=n(i7e,"A",{href:!0});var hgt=s(jG);dar=r(hgt,"TFT5ForConditionalGeneration"),hgt.forEach(t),car=r(i7e," (T5 model)"),i7e.forEach(t),far=i(U),y0=n(U,"LI",{});var d7e=s(y0);Ihe=n(d7e,"STRONG",{});var pgt=s(Ihe);mar=r(pgt,"tapas"),pgt.forEach(t),gar=r(d7e," \u2014 "),qG=n(d7e,"A",{href:!0});var _gt=s(qG);har=r(_gt,"TFTapasForMaskedLM"),_gt.forEach(t),par=r(d7e," (TAPAS model)"),d7e.forEach(t),_ar=i(U),w0=n(U,"LI",{});var c7e=s(w0);Dhe=n(c7e,"STRONG",{});var ugt=s(Dhe);uar=r(ugt,"transfo-xl"),ugt.forEach(t),bar=r(c7e," \u2014 "),GG=n(c7e,"A",{href:!0});var bgt=s(GG);Tar=r(bgt,"TFTransfoXLLMHeadModel"),bgt.forEach(t),Far=r(c7e," (Transformer-XL model)"),c7e.forEach(t),Car=i(U),A0=n(U,"LI",{});var f7e=s(A0);Nhe=n(f7e,"STRONG",{});var vgt=s(Nhe);Mar=r(vgt,"xlm"),vgt.forEach(t),Ear=r(f7e," \u2014 "),OG=n(f7e,"A",{href:!0});var Tgt=s(OG);yar=r(Tgt,"TFXLMWithLMHeadModel"),Tgt.forEach(t),war=r(f7e," (XLM model)"),f7e.forEach(t),Aar=i(U),L0=n(U,"LI",{});var m7e=s(L0);jhe=n(m7e,"STRONG",{});var Fgt=s(jhe);Lar=r(Fgt,"xlm-roberta"),Fgt.forEach(t),Bar=r(m7e," \u2014 "),XG=n(m7e,"A",{href:!0});var Cgt=s(XG);xar=r(Cgt,"TFXLMRobertaForMaskedLM"),Cgt.forEach(t),kar=r(m7e," (XLM-RoBERTa model)"),m7e.forEach(t),Rar=i(U),B0=n(U,"LI",{});var g7e=s(B0);qhe=n(g7e,"STRONG",{});var Mgt=s(qhe);Sar=r(Mgt,"xlnet"),Mgt.forEach(t),Par=r(g7e," \u2014 "),VG=n(g7e,"A",{href:!0});var Egt=s(VG);$ar=r(Egt,"TFXLNetLMHeadModel"),Egt.forEach(t),Iar=r(g7e," (XLNet model)"),g7e.forEach(t),U.forEach(t),Dar=i(_a),Ghe=n(_a,"P",{});var ygt=s(Ghe);Nar=r(ygt,"Examples:"),ygt.forEach(t),jar=i(_a),m(sw.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),NRe=i(c),vc=n(c,"H2",{class:!0});var HPe=s(vc);x0=n(HPe,"A",{id:!0,class:!0,href:!0});var wgt=s(x0);Ohe=n(wgt,"SPAN",{});var Agt=s(Ohe);m(lw.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),qar=i(HPe),Xhe=n(HPe,"SPAN",{});var Lgt=s(Xhe);Gar=r(Lgt,"TFAutoModelForCausalLM"),Lgt.forEach(t),HPe.forEach(t),jRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(iw.$$.fragment,Xl),Oar=i(Xl),Tc=n(Xl,"P",{});var lQ=s(Tc);Xar=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vhe=n(lQ,"CODE",{});var Bgt=s(Vhe);Var=r(Bgt,"from_pretrained()"),Bgt.forEach(t),zar=r(lQ,"class method or the "),zhe=n(lQ,"CODE",{});var xgt=s(zhe);War=r(xgt,"from_config()"),xgt.forEach(t),Qar=r(lQ,`class
method.`),lQ.forEach(t),Har=i(Xl),dw=n(Xl,"P",{});var UPe=s(dw);Uar=r(UPe,"This class cannot be instantiated directly using "),Whe=n(UPe,"CODE",{});var kgt=s(Whe);Jar=r(kgt,"__init__()"),kgt.forEach(t),Yar=r(UPe," (throws an error)."),UPe.forEach(t),Kar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(cw.$$.fragment,Vl),Zar=i(Vl),Qhe=n(Vl,"P",{});var Rgt=s(Qhe);enr=r(Rgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt.forEach(t),onr=i(Vl),Fc=n(Vl,"P",{});var iQ=s(Fc);rnr=r(iQ,`Note:
Loading a model from its configuration file does `),Hhe=n(iQ,"STRONG",{});var Sgt=s(Hhe);tnr=r(Sgt,"not"),Sgt.forEach(t),anr=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=n(iQ,"CODE",{});var Pgt=s(Uhe);nnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),snr=r(iQ,"to load the model weights."),iQ.forEach(t),lnr=i(Vl),Jhe=n(Vl,"P",{});var $gt=s(Jhe);inr=r($gt,"Examples:"),$gt.forEach(t),dnr=i(Vl),m(fw.$$.fragment,Vl),Vl.forEach(t),cnr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(mw.$$.fragment,ua),fnr=i(ua),Yhe=n(ua,"P",{});var Igt=s(Yhe);mnr=r(Igt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Igt.forEach(t),gnr=i(ua),bn=n(ua,"P",{});var VM=s(bn);hnr=r(VM,"The model class to instantiate is selected based on the "),Khe=n(VM,"CODE",{});var Dgt=s(Khe);pnr=r(Dgt,"model_type"),Dgt.forEach(t),_nr=r(VM,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(VM,"CODE",{});var Ngt=s(Zhe);unr=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),bnr=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(VM,"CODE",{});var jgt=s(epe);vnr=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),Tnr=r(VM,":"),VM.forEach(t),Fnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);k0=n(he,"LI",{});var h7e=s(k0);ope=n(h7e,"STRONG",{});var qgt=s(ope);Cnr=r(qgt,"bert"),qgt.forEach(t),Mnr=r(h7e," \u2014 "),zG=n(h7e,"A",{href:!0});var Ggt=s(zG);Enr=r(Ggt,"TFBertLMHeadModel"),Ggt.forEach(t),ynr=r(h7e," (BERT model)"),h7e.forEach(t),wnr=i(he),R0=n(he,"LI",{});var p7e=s(R0);rpe=n(p7e,"STRONG",{});var Ogt=s(rpe);Anr=r(Ogt,"camembert"),Ogt.forEach(t),Lnr=r(p7e," \u2014 "),WG=n(p7e,"A",{href:!0});var Xgt=s(WG);Bnr=r(Xgt,"TFCamembertForCausalLM"),Xgt.forEach(t),xnr=r(p7e," (CamemBERT model)"),p7e.forEach(t),knr=i(he),S0=n(he,"LI",{});var _7e=s(S0);tpe=n(_7e,"STRONG",{});var Vgt=s(tpe);Rnr=r(Vgt,"ctrl"),Vgt.forEach(t),Snr=r(_7e," \u2014 "),QG=n(_7e,"A",{href:!0});var zgt=s(QG);Pnr=r(zgt,"TFCTRLLMHeadModel"),zgt.forEach(t),$nr=r(_7e," (CTRL model)"),_7e.forEach(t),Inr=i(he),P0=n(he,"LI",{});var u7e=s(P0);ape=n(u7e,"STRONG",{});var Wgt=s(ape);Dnr=r(Wgt,"gpt2"),Wgt.forEach(t),Nnr=r(u7e," \u2014 "),HG=n(u7e,"A",{href:!0});var Qgt=s(HG);jnr=r(Qgt,"TFGPT2LMHeadModel"),Qgt.forEach(t),qnr=r(u7e," (OpenAI GPT-2 model)"),u7e.forEach(t),Gnr=i(he),$0=n(he,"LI",{});var b7e=s($0);npe=n(b7e,"STRONG",{});var Hgt=s(npe);Onr=r(Hgt,"gptj"),Hgt.forEach(t),Xnr=r(b7e," \u2014 "),UG=n(b7e,"A",{href:!0});var Ugt=s(UG);Vnr=r(Ugt,"TFGPTJForCausalLM"),Ugt.forEach(t),znr=r(b7e," (GPT-J model)"),b7e.forEach(t),Wnr=i(he),I0=n(he,"LI",{});var v7e=s(I0);spe=n(v7e,"STRONG",{});var Jgt=s(spe);Qnr=r(Jgt,"openai-gpt"),Jgt.forEach(t),Hnr=r(v7e," \u2014 "),JG=n(v7e,"A",{href:!0});var Ygt=s(JG);Unr=r(Ygt,"TFOpenAIGPTLMHeadModel"),Ygt.forEach(t),Jnr=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),Ynr=i(he),D0=n(he,"LI",{});var T7e=s(D0);lpe=n(T7e,"STRONG",{});var Kgt=s(lpe);Knr=r(Kgt,"rembert"),Kgt.forEach(t),Znr=r(T7e," \u2014 "),YG=n(T7e,"A",{href:!0});var Zgt=s(YG);esr=r(Zgt,"TFRemBertForCausalLM"),Zgt.forEach(t),osr=r(T7e," (RemBERT model)"),T7e.forEach(t),rsr=i(he),N0=n(he,"LI",{});var F7e=s(N0);ipe=n(F7e,"STRONG",{});var eht=s(ipe);tsr=r(eht,"roberta"),eht.forEach(t),asr=r(F7e," \u2014 "),KG=n(F7e,"A",{href:!0});var oht=s(KG);nsr=r(oht,"TFRobertaForCausalLM"),oht.forEach(t),ssr=r(F7e," (RoBERTa model)"),F7e.forEach(t),lsr=i(he),j0=n(he,"LI",{});var C7e=s(j0);dpe=n(C7e,"STRONG",{});var rht=s(dpe);isr=r(rht,"roformer"),rht.forEach(t),dsr=r(C7e," \u2014 "),ZG=n(C7e,"A",{href:!0});var tht=s(ZG);csr=r(tht,"TFRoFormerForCausalLM"),tht.forEach(t),fsr=r(C7e," (RoFormer model)"),C7e.forEach(t),msr=i(he),q0=n(he,"LI",{});var M7e=s(q0);cpe=n(M7e,"STRONG",{});var aht=s(cpe);gsr=r(aht,"transfo-xl"),aht.forEach(t),hsr=r(M7e," \u2014 "),eO=n(M7e,"A",{href:!0});var nht=s(eO);psr=r(nht,"TFTransfoXLLMHeadModel"),nht.forEach(t),_sr=r(M7e," (Transformer-XL model)"),M7e.forEach(t),usr=i(he),G0=n(he,"LI",{});var E7e=s(G0);fpe=n(E7e,"STRONG",{});var sht=s(fpe);bsr=r(sht,"xlm"),sht.forEach(t),vsr=r(E7e," \u2014 "),oO=n(E7e,"A",{href:!0});var lht=s(oO);Tsr=r(lht,"TFXLMWithLMHeadModel"),lht.forEach(t),Fsr=r(E7e," (XLM model)"),E7e.forEach(t),Csr=i(he),O0=n(he,"LI",{});var y7e=s(O0);mpe=n(y7e,"STRONG",{});var iht=s(mpe);Msr=r(iht,"xlnet"),iht.forEach(t),Esr=r(y7e," \u2014 "),rO=n(y7e,"A",{href:!0});var dht=s(rO);ysr=r(dht,"TFXLNetLMHeadModel"),dht.forEach(t),wsr=r(y7e," (XLNet model)"),y7e.forEach(t),he.forEach(t),Asr=i(ua),gpe=n(ua,"P",{});var cht=s(gpe);Lsr=r(cht,"Examples:"),cht.forEach(t),Bsr=i(ua),m(gw.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),qRe=i(c),Cc=n(c,"H2",{class:!0});var JPe=s(Cc);X0=n(JPe,"A",{id:!0,class:!0,href:!0});var fht=s(X0);hpe=n(fht,"SPAN",{});var mht=s(hpe);m(hw.$$.fragment,mht),mht.forEach(t),fht.forEach(t),xsr=i(JPe),ppe=n(JPe,"SPAN",{});var ght=s(ppe);ksr=r(ght,"TFAutoModelForImageClassification"),ght.forEach(t),JPe.forEach(t),GRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(pw.$$.fragment,zl),Rsr=i(zl),Mc=n(zl,"P",{});var dQ=s(Mc);Ssr=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_pe=n(dQ,"CODE",{});var hht=s(_pe);Psr=r(hht,"from_pretrained()"),hht.forEach(t),$sr=r(dQ,"class method or the "),upe=n(dQ,"CODE",{});var pht=s(upe);Isr=r(pht,"from_config()"),pht.forEach(t),Dsr=r(dQ,`class
method.`),dQ.forEach(t),Nsr=i(zl),_w=n(zl,"P",{});var YPe=s(_w);jsr=r(YPe,"This class cannot be instantiated directly using "),bpe=n(YPe,"CODE",{});var _ht=s(bpe);qsr=r(_ht,"__init__()"),_ht.forEach(t),Gsr=r(YPe," (throws an error)."),YPe.forEach(t),Osr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(uw.$$.fragment,Wl),Xsr=i(Wl),vpe=n(Wl,"P",{});var uht=s(vpe);Vsr=r(uht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uht.forEach(t),zsr=i(Wl),Ec=n(Wl,"P",{});var cQ=s(Ec);Wsr=r(cQ,`Note:
Loading a model from its configuration file does `),Tpe=n(cQ,"STRONG",{});var bht=s(Tpe);Qsr=r(bht,"not"),bht.forEach(t),Hsr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(cQ,"CODE",{});var vht=s(Fpe);Usr=r(vht,"from_pretrained()"),vht.forEach(t),Jsr=r(cQ,"to load the model weights."),cQ.forEach(t),Ysr=i(Wl),Cpe=n(Wl,"P",{});var Tht=s(Cpe);Ksr=r(Tht,"Examples:"),Tht.forEach(t),Zsr=i(Wl),m(bw.$$.fragment,Wl),Wl.forEach(t),elr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(vw.$$.fragment,ba),olr=i(ba),Mpe=n(ba,"P",{});var Fht=s(Mpe);rlr=r(Fht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fht.forEach(t),tlr=i(ba),vn=n(ba,"P",{});var zM=s(vn);alr=r(zM,"The model class to instantiate is selected based on the "),Epe=n(zM,"CODE",{});var Cht=s(Epe);nlr=r(Cht,"model_type"),Cht.forEach(t),slr=r(zM,` property of the config object (either
passed as an argument or loaded from `),ype=n(zM,"CODE",{});var Mht=s(ype);llr=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),ilr=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(zM,"CODE",{});var Eht=s(wpe);dlr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),clr=r(zM,":"),zM.forEach(t),flr=i(ba),Tw=n(ba,"UL",{});var KPe=s(Tw);V0=n(KPe,"LI",{});var w7e=s(V0);Ape=n(w7e,"STRONG",{});var yht=s(Ape);mlr=r(yht,"convnext"),yht.forEach(t),glr=r(w7e," \u2014 "),tO=n(w7e,"A",{href:!0});var wht=s(tO);hlr=r(wht,"TFConvNextForImageClassification"),wht.forEach(t),plr=r(w7e," (ConvNext model)"),w7e.forEach(t),_lr=i(KPe),z0=n(KPe,"LI",{});var A7e=s(z0);Lpe=n(A7e,"STRONG",{});var Aht=s(Lpe);ulr=r(Aht,"vit"),Aht.forEach(t),blr=r(A7e," \u2014 "),aO=n(A7e,"A",{href:!0});var Lht=s(aO);vlr=r(Lht,"TFViTForImageClassification"),Lht.forEach(t),Tlr=r(A7e," (ViT model)"),A7e.forEach(t),KPe.forEach(t),Flr=i(ba),Bpe=n(ba,"P",{});var Bht=s(Bpe);Clr=r(Bht,"Examples:"),Bht.forEach(t),Mlr=i(ba),m(Fw.$$.fragment,ba),ba.forEach(t),zl.forEach(t),ORe=i(c),yc=n(c,"H2",{class:!0});var ZPe=s(yc);W0=n(ZPe,"A",{id:!0,class:!0,href:!0});var xht=s(W0);xpe=n(xht,"SPAN",{});var kht=s(xpe);m(Cw.$$.fragment,kht),kht.forEach(t),xht.forEach(t),Elr=i(ZPe),kpe=n(ZPe,"SPAN",{});var Rht=s(kpe);ylr=r(Rht,"TFAutoModelForMaskedLM"),Rht.forEach(t),ZPe.forEach(t),XRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(Mw.$$.fragment,Ql),wlr=i(Ql),wc=n(Ql,"P",{});var fQ=s(wc);Alr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rpe=n(fQ,"CODE",{});var Sht=s(Rpe);Llr=r(Sht,"from_pretrained()"),Sht.forEach(t),Blr=r(fQ,"class method or the "),Spe=n(fQ,"CODE",{});var Pht=s(Spe);xlr=r(Pht,"from_config()"),Pht.forEach(t),klr=r(fQ,`class
method.`),fQ.forEach(t),Rlr=i(Ql),Ew=n(Ql,"P",{});var e$e=s(Ew);Slr=r(e$e,"This class cannot be instantiated directly using "),Ppe=n(e$e,"CODE",{});var $ht=s(Ppe);Plr=r($ht,"__init__()"),$ht.forEach(t),$lr=r(e$e," (throws an error)."),e$e.forEach(t),Ilr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(yw.$$.fragment,Hl),Dlr=i(Hl),$pe=n(Hl,"P",{});var Iht=s($pe);Nlr=r(Iht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iht.forEach(t),jlr=i(Hl),Ac=n(Hl,"P",{});var mQ=s(Ac);qlr=r(mQ,`Note:
Loading a model from its configuration file does `),Ipe=n(mQ,"STRONG",{});var Dht=s(Ipe);Glr=r(Dht,"not"),Dht.forEach(t),Olr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(mQ,"CODE",{});var Nht=s(Dpe);Xlr=r(Nht,"from_pretrained()"),Nht.forEach(t),Vlr=r(mQ,"to load the model weights."),mQ.forEach(t),zlr=i(Hl),Npe=n(Hl,"P",{});var jht=s(Npe);Wlr=r(jht,"Examples:"),jht.forEach(t),Qlr=i(Hl),m(ww.$$.fragment,Hl),Hl.forEach(t),Hlr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(Aw.$$.fragment,va),Ulr=i(va),jpe=n(va,"P",{});var qht=s(jpe);Jlr=r(qht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qht.forEach(t),Ylr=i(va),Tn=n(va,"P",{});var WM=s(Tn);Klr=r(WM,"The model class to instantiate is selected based on the "),qpe=n(WM,"CODE",{});var Ght=s(qpe);Zlr=r(Ght,"model_type"),Ght.forEach(t),eir=r(WM,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(WM,"CODE",{});var Oht=s(Gpe);oir=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),rir=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(WM,"CODE",{});var Xht=s(Ope);tir=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),air=r(WM,":"),WM.forEach(t),nir=i(va),J=n(va,"UL",{});var ee=s(J);Q0=n(ee,"LI",{});var L7e=s(Q0);Xpe=n(L7e,"STRONG",{});var Vht=s(Xpe);sir=r(Vht,"albert"),Vht.forEach(t),lir=r(L7e," \u2014 "),nO=n(L7e,"A",{href:!0});var zht=s(nO);iir=r(zht,"TFAlbertForMaskedLM"),zht.forEach(t),dir=r(L7e," (ALBERT model)"),L7e.forEach(t),cir=i(ee),H0=n(ee,"LI",{});var B7e=s(H0);Vpe=n(B7e,"STRONG",{});var Wht=s(Vpe);fir=r(Wht,"bert"),Wht.forEach(t),mir=r(B7e," \u2014 "),sO=n(B7e,"A",{href:!0});var Qht=s(sO);gir=r(Qht,"TFBertForMaskedLM"),Qht.forEach(t),hir=r(B7e," (BERT model)"),B7e.forEach(t),pir=i(ee),U0=n(ee,"LI",{});var x7e=s(U0);zpe=n(x7e,"STRONG",{});var Hht=s(zpe);_ir=r(Hht,"camembert"),Hht.forEach(t),uir=r(x7e," \u2014 "),lO=n(x7e,"A",{href:!0});var Uht=s(lO);bir=r(Uht,"TFCamembertForMaskedLM"),Uht.forEach(t),vir=r(x7e," (CamemBERT model)"),x7e.forEach(t),Tir=i(ee),J0=n(ee,"LI",{});var k7e=s(J0);Wpe=n(k7e,"STRONG",{});var Jht=s(Wpe);Fir=r(Jht,"convbert"),Jht.forEach(t),Cir=r(k7e," \u2014 "),iO=n(k7e,"A",{href:!0});var Yht=s(iO);Mir=r(Yht,"TFConvBertForMaskedLM"),Yht.forEach(t),Eir=r(k7e," (ConvBERT model)"),k7e.forEach(t),yir=i(ee),Y0=n(ee,"LI",{});var R7e=s(Y0);Qpe=n(R7e,"STRONG",{});var Kht=s(Qpe);wir=r(Kht,"deberta"),Kht.forEach(t),Air=r(R7e," \u2014 "),dO=n(R7e,"A",{href:!0});var Zht=s(dO);Lir=r(Zht,"TFDebertaForMaskedLM"),Zht.forEach(t),Bir=r(R7e," (DeBERTa model)"),R7e.forEach(t),xir=i(ee),K0=n(ee,"LI",{});var S7e=s(K0);Hpe=n(S7e,"STRONG",{});var ept=s(Hpe);kir=r(ept,"deberta-v2"),ept.forEach(t),Rir=r(S7e," \u2014 "),cO=n(S7e,"A",{href:!0});var opt=s(cO);Sir=r(opt,"TFDebertaV2ForMaskedLM"),opt.forEach(t),Pir=r(S7e," (DeBERTa-v2 model)"),S7e.forEach(t),$ir=i(ee),Z0=n(ee,"LI",{});var P7e=s(Z0);Upe=n(P7e,"STRONG",{});var rpt=s(Upe);Iir=r(rpt,"distilbert"),rpt.forEach(t),Dir=r(P7e," \u2014 "),fO=n(P7e,"A",{href:!0});var tpt=s(fO);Nir=r(tpt,"TFDistilBertForMaskedLM"),tpt.forEach(t),jir=r(P7e," (DistilBERT model)"),P7e.forEach(t),qir=i(ee),eT=n(ee,"LI",{});var $7e=s(eT);Jpe=n($7e,"STRONG",{});var apt=s(Jpe);Gir=r(apt,"electra"),apt.forEach(t),Oir=r($7e," \u2014 "),mO=n($7e,"A",{href:!0});var npt=s(mO);Xir=r(npt,"TFElectraForMaskedLM"),npt.forEach(t),Vir=r($7e," (ELECTRA model)"),$7e.forEach(t),zir=i(ee),oT=n(ee,"LI",{});var I7e=s(oT);Ype=n(I7e,"STRONG",{});var spt=s(Ype);Wir=r(spt,"flaubert"),spt.forEach(t),Qir=r(I7e," \u2014 "),gO=n(I7e,"A",{href:!0});var lpt=s(gO);Hir=r(lpt,"TFFlaubertWithLMHeadModel"),lpt.forEach(t),Uir=r(I7e," (FlauBERT model)"),I7e.forEach(t),Jir=i(ee),rT=n(ee,"LI",{});var D7e=s(rT);Kpe=n(D7e,"STRONG",{});var ipt=s(Kpe);Yir=r(ipt,"funnel"),ipt.forEach(t),Kir=r(D7e," \u2014 "),hO=n(D7e,"A",{href:!0});var dpt=s(hO);Zir=r(dpt,"TFFunnelForMaskedLM"),dpt.forEach(t),edr=r(D7e," (Funnel Transformer model)"),D7e.forEach(t),odr=i(ee),tT=n(ee,"LI",{});var N7e=s(tT);Zpe=n(N7e,"STRONG",{});var cpt=s(Zpe);rdr=r(cpt,"layoutlm"),cpt.forEach(t),tdr=r(N7e," \u2014 "),pO=n(N7e,"A",{href:!0});var fpt=s(pO);adr=r(fpt,"TFLayoutLMForMaskedLM"),fpt.forEach(t),ndr=r(N7e," (LayoutLM model)"),N7e.forEach(t),sdr=i(ee),aT=n(ee,"LI",{});var j7e=s(aT);e_e=n(j7e,"STRONG",{});var mpt=s(e_e);ldr=r(mpt,"longformer"),mpt.forEach(t),idr=r(j7e," \u2014 "),_O=n(j7e,"A",{href:!0});var gpt=s(_O);ddr=r(gpt,"TFLongformerForMaskedLM"),gpt.forEach(t),cdr=r(j7e," (Longformer model)"),j7e.forEach(t),fdr=i(ee),nT=n(ee,"LI",{});var q7e=s(nT);o_e=n(q7e,"STRONG",{});var hpt=s(o_e);mdr=r(hpt,"mobilebert"),hpt.forEach(t),gdr=r(q7e," \u2014 "),uO=n(q7e,"A",{href:!0});var ppt=s(uO);hdr=r(ppt,"TFMobileBertForMaskedLM"),ppt.forEach(t),pdr=r(q7e," (MobileBERT model)"),q7e.forEach(t),_dr=i(ee),sT=n(ee,"LI",{});var G7e=s(sT);r_e=n(G7e,"STRONG",{});var _pt=s(r_e);udr=r(_pt,"mpnet"),_pt.forEach(t),bdr=r(G7e," \u2014 "),bO=n(G7e,"A",{href:!0});var upt=s(bO);vdr=r(upt,"TFMPNetForMaskedLM"),upt.forEach(t),Tdr=r(G7e," (MPNet model)"),G7e.forEach(t),Fdr=i(ee),lT=n(ee,"LI",{});var O7e=s(lT);t_e=n(O7e,"STRONG",{});var bpt=s(t_e);Cdr=r(bpt,"rembert"),bpt.forEach(t),Mdr=r(O7e," \u2014 "),vO=n(O7e,"A",{href:!0});var vpt=s(vO);Edr=r(vpt,"TFRemBertForMaskedLM"),vpt.forEach(t),ydr=r(O7e," (RemBERT model)"),O7e.forEach(t),wdr=i(ee),iT=n(ee,"LI",{});var X7e=s(iT);a_e=n(X7e,"STRONG",{});var Tpt=s(a_e);Adr=r(Tpt,"roberta"),Tpt.forEach(t),Ldr=r(X7e," \u2014 "),TO=n(X7e,"A",{href:!0});var Fpt=s(TO);Bdr=r(Fpt,"TFRobertaForMaskedLM"),Fpt.forEach(t),xdr=r(X7e," (RoBERTa model)"),X7e.forEach(t),kdr=i(ee),dT=n(ee,"LI",{});var V7e=s(dT);n_e=n(V7e,"STRONG",{});var Cpt=s(n_e);Rdr=r(Cpt,"roformer"),Cpt.forEach(t),Sdr=r(V7e," \u2014 "),FO=n(V7e,"A",{href:!0});var Mpt=s(FO);Pdr=r(Mpt,"TFRoFormerForMaskedLM"),Mpt.forEach(t),$dr=r(V7e," (RoFormer model)"),V7e.forEach(t),Idr=i(ee),cT=n(ee,"LI",{});var z7e=s(cT);s_e=n(z7e,"STRONG",{});var Ept=s(s_e);Ddr=r(Ept,"tapas"),Ept.forEach(t),Ndr=r(z7e," \u2014 "),CO=n(z7e,"A",{href:!0});var ypt=s(CO);jdr=r(ypt,"TFTapasForMaskedLM"),ypt.forEach(t),qdr=r(z7e," (TAPAS model)"),z7e.forEach(t),Gdr=i(ee),fT=n(ee,"LI",{});var W7e=s(fT);l_e=n(W7e,"STRONG",{});var wpt=s(l_e);Odr=r(wpt,"xlm"),wpt.forEach(t),Xdr=r(W7e," \u2014 "),MO=n(W7e,"A",{href:!0});var Apt=s(MO);Vdr=r(Apt,"TFXLMWithLMHeadModel"),Apt.forEach(t),zdr=r(W7e," (XLM model)"),W7e.forEach(t),Wdr=i(ee),mT=n(ee,"LI",{});var Q7e=s(mT);i_e=n(Q7e,"STRONG",{});var Lpt=s(i_e);Qdr=r(Lpt,"xlm-roberta"),Lpt.forEach(t),Hdr=r(Q7e," \u2014 "),EO=n(Q7e,"A",{href:!0});var Bpt=s(EO);Udr=r(Bpt,"TFXLMRobertaForMaskedLM"),Bpt.forEach(t),Jdr=r(Q7e," (XLM-RoBERTa model)"),Q7e.forEach(t),ee.forEach(t),Ydr=i(va),d_e=n(va,"P",{});var xpt=s(d_e);Kdr=r(xpt,"Examples:"),xpt.forEach(t),Zdr=i(va),m(Lw.$$.fragment,va),va.forEach(t),Ql.forEach(t),VRe=i(c),Lc=n(c,"H2",{class:!0});var o$e=s(Lc);gT=n(o$e,"A",{id:!0,class:!0,href:!0});var kpt=s(gT);c_e=n(kpt,"SPAN",{});var Rpt=s(c_e);m(Bw.$$.fragment,Rpt),Rpt.forEach(t),kpt.forEach(t),ecr=i(o$e),f_e=n(o$e,"SPAN",{});var Spt=s(f_e);ocr=r(Spt,"TFAutoModelForSeq2SeqLM"),Spt.forEach(t),o$e.forEach(t),zRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(xw.$$.fragment,Ul),rcr=i(Ul),Bc=n(Ul,"P",{});var gQ=s(Bc);tcr=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m_e=n(gQ,"CODE",{});var Ppt=s(m_e);acr=r(Ppt,"from_pretrained()"),Ppt.forEach(t),ncr=r(gQ,"class method or the "),g_e=n(gQ,"CODE",{});var $pt=s(g_e);scr=r($pt,"from_config()"),$pt.forEach(t),lcr=r(gQ,`class
method.`),gQ.forEach(t),icr=i(Ul),kw=n(Ul,"P",{});var r$e=s(kw);dcr=r(r$e,"This class cannot be instantiated directly using "),h_e=n(r$e,"CODE",{});var Ipt=s(h_e);ccr=r(Ipt,"__init__()"),Ipt.forEach(t),fcr=r(r$e," (throws an error)."),r$e.forEach(t),mcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Rw.$$.fragment,Jl),gcr=i(Jl),p_e=n(Jl,"P",{});var Dpt=s(p_e);hcr=r(Dpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dpt.forEach(t),pcr=i(Jl),xc=n(Jl,"P",{});var hQ=s(xc);_cr=r(hQ,`Note:
Loading a model from its configuration file does `),__e=n(hQ,"STRONG",{});var Npt=s(__e);ucr=r(Npt,"not"),Npt.forEach(t),bcr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=n(hQ,"CODE",{});var jpt=s(u_e);vcr=r(jpt,"from_pretrained()"),jpt.forEach(t),Tcr=r(hQ,"to load the model weights."),hQ.forEach(t),Fcr=i(Jl),b_e=n(Jl,"P",{});var qpt=s(b_e);Ccr=r(qpt,"Examples:"),qpt.forEach(t),Mcr=i(Jl),m(Sw.$$.fragment,Jl),Jl.forEach(t),Ecr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(Pw.$$.fragment,Ta),ycr=i(Ta),v_e=n(Ta,"P",{});var Gpt=s(v_e);wcr=r(Gpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gpt.forEach(t),Acr=i(Ta),Fn=n(Ta,"P",{});var QM=s(Fn);Lcr=r(QM,"The model class to instantiate is selected based on the "),T_e=n(QM,"CODE",{});var Opt=s(T_e);Bcr=r(Opt,"model_type"),Opt.forEach(t),xcr=r(QM,` property of the config object (either
passed as an argument or loaded from `),F_e=n(QM,"CODE",{});var Xpt=s(F_e);kcr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Rcr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(QM,"CODE",{});var Vpt=s(C_e);Scr=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Pcr=r(QM,":"),QM.forEach(t),$cr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);hT=n(ye,"LI",{});var H7e=s(hT);M_e=n(H7e,"STRONG",{});var zpt=s(M_e);Icr=r(zpt,"bart"),zpt.forEach(t),Dcr=r(H7e," \u2014 "),yO=n(H7e,"A",{href:!0});var Wpt=s(yO);Ncr=r(Wpt,"TFBartForConditionalGeneration"),Wpt.forEach(t),jcr=r(H7e," (BART model)"),H7e.forEach(t),qcr=i(ye),pT=n(ye,"LI",{});var U7e=s(pT);E_e=n(U7e,"STRONG",{});var Qpt=s(E_e);Gcr=r(Qpt,"blenderbot"),Qpt.forEach(t),Ocr=r(U7e," \u2014 "),wO=n(U7e,"A",{href:!0});var Hpt=s(wO);Xcr=r(Hpt,"TFBlenderbotForConditionalGeneration"),Hpt.forEach(t),Vcr=r(U7e," (Blenderbot model)"),U7e.forEach(t),zcr=i(ye),_T=n(ye,"LI",{});var J7e=s(_T);y_e=n(J7e,"STRONG",{});var Upt=s(y_e);Wcr=r(Upt,"blenderbot-small"),Upt.forEach(t),Qcr=r(J7e," \u2014 "),AO=n(J7e,"A",{href:!0});var Jpt=s(AO);Hcr=r(Jpt,"TFBlenderbotSmallForConditionalGeneration"),Jpt.forEach(t),Ucr=r(J7e," (BlenderbotSmall model)"),J7e.forEach(t),Jcr=i(ye),uT=n(ye,"LI",{});var Y7e=s(uT);w_e=n(Y7e,"STRONG",{});var Ypt=s(w_e);Ycr=r(Ypt,"encoder-decoder"),Ypt.forEach(t),Kcr=r(Y7e," \u2014 "),LO=n(Y7e,"A",{href:!0});var Kpt=s(LO);Zcr=r(Kpt,"TFEncoderDecoderModel"),Kpt.forEach(t),efr=r(Y7e," (Encoder decoder model)"),Y7e.forEach(t),ofr=i(ye),bT=n(ye,"LI",{});var K7e=s(bT);A_e=n(K7e,"STRONG",{});var Zpt=s(A_e);rfr=r(Zpt,"led"),Zpt.forEach(t),tfr=r(K7e," \u2014 "),BO=n(K7e,"A",{href:!0});var e_t=s(BO);afr=r(e_t,"TFLEDForConditionalGeneration"),e_t.forEach(t),nfr=r(K7e," (LED model)"),K7e.forEach(t),sfr=i(ye),vT=n(ye,"LI",{});var Z7e=s(vT);L_e=n(Z7e,"STRONG",{});var o_t=s(L_e);lfr=r(o_t,"marian"),o_t.forEach(t),ifr=r(Z7e," \u2014 "),xO=n(Z7e,"A",{href:!0});var r_t=s(xO);dfr=r(r_t,"TFMarianMTModel"),r_t.forEach(t),cfr=r(Z7e," (Marian model)"),Z7e.forEach(t),ffr=i(ye),TT=n(ye,"LI",{});var e9e=s(TT);B_e=n(e9e,"STRONG",{});var t_t=s(B_e);mfr=r(t_t,"mbart"),t_t.forEach(t),gfr=r(e9e," \u2014 "),kO=n(e9e,"A",{href:!0});var a_t=s(kO);hfr=r(a_t,"TFMBartForConditionalGeneration"),a_t.forEach(t),pfr=r(e9e," (mBART model)"),e9e.forEach(t),_fr=i(ye),FT=n(ye,"LI",{});var o9e=s(FT);x_e=n(o9e,"STRONG",{});var n_t=s(x_e);ufr=r(n_t,"mt5"),n_t.forEach(t),bfr=r(o9e," \u2014 "),RO=n(o9e,"A",{href:!0});var s_t=s(RO);vfr=r(s_t,"TFMT5ForConditionalGeneration"),s_t.forEach(t),Tfr=r(o9e," (mT5 model)"),o9e.forEach(t),Ffr=i(ye),CT=n(ye,"LI",{});var r9e=s(CT);k_e=n(r9e,"STRONG",{});var l_t=s(k_e);Cfr=r(l_t,"pegasus"),l_t.forEach(t),Mfr=r(r9e," \u2014 "),SO=n(r9e,"A",{href:!0});var i_t=s(SO);Efr=r(i_t,"TFPegasusForConditionalGeneration"),i_t.forEach(t),yfr=r(r9e," (Pegasus model)"),r9e.forEach(t),wfr=i(ye),MT=n(ye,"LI",{});var t9e=s(MT);R_e=n(t9e,"STRONG",{});var d_t=s(R_e);Afr=r(d_t,"t5"),d_t.forEach(t),Lfr=r(t9e," \u2014 "),PO=n(t9e,"A",{href:!0});var c_t=s(PO);Bfr=r(c_t,"TFT5ForConditionalGeneration"),c_t.forEach(t),xfr=r(t9e," (T5 model)"),t9e.forEach(t),ye.forEach(t),kfr=i(Ta),S_e=n(Ta,"P",{});var f_t=s(S_e);Rfr=r(f_t,"Examples:"),f_t.forEach(t),Sfr=i(Ta),m($w.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),WRe=i(c),kc=n(c,"H2",{class:!0});var t$e=s(kc);ET=n(t$e,"A",{id:!0,class:!0,href:!0});var m_t=s(ET);P_e=n(m_t,"SPAN",{});var g_t=s(P_e);m(Iw.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),Pfr=i(t$e),$_e=n(t$e,"SPAN",{});var h_t=s($_e);$fr=r(h_t,"TFAutoModelForSequenceClassification"),h_t.forEach(t),t$e.forEach(t),QRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(Dw.$$.fragment,Yl),Ifr=i(Yl),Rc=n(Yl,"P",{});var pQ=s(Rc);Dfr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),I_e=n(pQ,"CODE",{});var p_t=s(I_e);Nfr=r(p_t,"from_pretrained()"),p_t.forEach(t),jfr=r(pQ,"class method or the "),D_e=n(pQ,"CODE",{});var __t=s(D_e);qfr=r(__t,"from_config()"),__t.forEach(t),Gfr=r(pQ,`class
method.`),pQ.forEach(t),Ofr=i(Yl),Nw=n(Yl,"P",{});var a$e=s(Nw);Xfr=r(a$e,"This class cannot be instantiated directly using "),N_e=n(a$e,"CODE",{});var u_t=s(N_e);Vfr=r(u_t,"__init__()"),u_t.forEach(t),zfr=r(a$e," (throws an error)."),a$e.forEach(t),Wfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(jw.$$.fragment,Kl),Qfr=i(Kl),j_e=n(Kl,"P",{});var b_t=s(j_e);Hfr=r(b_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b_t.forEach(t),Ufr=i(Kl),Sc=n(Kl,"P",{});var _Q=s(Sc);Jfr=r(_Q,`Note:
Loading a model from its configuration file does `),q_e=n(_Q,"STRONG",{});var v_t=s(q_e);Yfr=r(v_t,"not"),v_t.forEach(t),Kfr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=n(_Q,"CODE",{});var T_t=s(G_e);Zfr=r(T_t,"from_pretrained()"),T_t.forEach(t),emr=r(_Q,"to load the model weights."),_Q.forEach(t),omr=i(Kl),O_e=n(Kl,"P",{});var F_t=s(O_e);rmr=r(F_t,"Examples:"),F_t.forEach(t),tmr=i(Kl),m(qw.$$.fragment,Kl),Kl.forEach(t),amr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(Gw.$$.fragment,Fa),nmr=i(Fa),X_e=n(Fa,"P",{});var C_t=s(X_e);smr=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),lmr=i(Fa),Cn=n(Fa,"P",{});var HM=s(Cn);imr=r(HM,"The model class to instantiate is selected based on the "),V_e=n(HM,"CODE",{});var M_t=s(V_e);dmr=r(M_t,"model_type"),M_t.forEach(t),cmr=r(HM,` property of the config object (either
passed as an argument or loaded from `),z_e=n(HM,"CODE",{});var E_t=s(z_e);fmr=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),mmr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(HM,"CODE",{});var y_t=s(W_e);gmr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),hmr=r(HM,":"),HM.forEach(t),pmr=i(Fa),X=n(Fa,"UL",{});var W=s(X);yT=n(W,"LI",{});var a9e=s(yT);Q_e=n(a9e,"STRONG",{});var w_t=s(Q_e);_mr=r(w_t,"albert"),w_t.forEach(t),umr=r(a9e," \u2014 "),$O=n(a9e,"A",{href:!0});var A_t=s($O);bmr=r(A_t,"TFAlbertForSequenceClassification"),A_t.forEach(t),vmr=r(a9e," (ALBERT model)"),a9e.forEach(t),Tmr=i(W),wT=n(W,"LI",{});var n9e=s(wT);H_e=n(n9e,"STRONG",{});var L_t=s(H_e);Fmr=r(L_t,"bert"),L_t.forEach(t),Cmr=r(n9e," \u2014 "),IO=n(n9e,"A",{href:!0});var B_t=s(IO);Mmr=r(B_t,"TFBertForSequenceClassification"),B_t.forEach(t),Emr=r(n9e," (BERT model)"),n9e.forEach(t),ymr=i(W),AT=n(W,"LI",{});var s9e=s(AT);U_e=n(s9e,"STRONG",{});var x_t=s(U_e);wmr=r(x_t,"camembert"),x_t.forEach(t),Amr=r(s9e," \u2014 "),DO=n(s9e,"A",{href:!0});var k_t=s(DO);Lmr=r(k_t,"TFCamembertForSequenceClassification"),k_t.forEach(t),Bmr=r(s9e," (CamemBERT model)"),s9e.forEach(t),xmr=i(W),LT=n(W,"LI",{});var l9e=s(LT);J_e=n(l9e,"STRONG",{});var R_t=s(J_e);kmr=r(R_t,"convbert"),R_t.forEach(t),Rmr=r(l9e," \u2014 "),NO=n(l9e,"A",{href:!0});var S_t=s(NO);Smr=r(S_t,"TFConvBertForSequenceClassification"),S_t.forEach(t),Pmr=r(l9e," (ConvBERT model)"),l9e.forEach(t),$mr=i(W),BT=n(W,"LI",{});var i9e=s(BT);Y_e=n(i9e,"STRONG",{});var P_t=s(Y_e);Imr=r(P_t,"ctrl"),P_t.forEach(t),Dmr=r(i9e," \u2014 "),jO=n(i9e,"A",{href:!0});var $_t=s(jO);Nmr=r($_t,"TFCTRLForSequenceClassification"),$_t.forEach(t),jmr=r(i9e," (CTRL model)"),i9e.forEach(t),qmr=i(W),xT=n(W,"LI",{});var d9e=s(xT);K_e=n(d9e,"STRONG",{});var I_t=s(K_e);Gmr=r(I_t,"deberta"),I_t.forEach(t),Omr=r(d9e," \u2014 "),qO=n(d9e,"A",{href:!0});var D_t=s(qO);Xmr=r(D_t,"TFDebertaForSequenceClassification"),D_t.forEach(t),Vmr=r(d9e," (DeBERTa model)"),d9e.forEach(t),zmr=i(W),kT=n(W,"LI",{});var c9e=s(kT);Z_e=n(c9e,"STRONG",{});var N_t=s(Z_e);Wmr=r(N_t,"deberta-v2"),N_t.forEach(t),Qmr=r(c9e," \u2014 "),GO=n(c9e,"A",{href:!0});var j_t=s(GO);Hmr=r(j_t,"TFDebertaV2ForSequenceClassification"),j_t.forEach(t),Umr=r(c9e," (DeBERTa-v2 model)"),c9e.forEach(t),Jmr=i(W),RT=n(W,"LI",{});var f9e=s(RT);eue=n(f9e,"STRONG",{});var q_t=s(eue);Ymr=r(q_t,"distilbert"),q_t.forEach(t),Kmr=r(f9e," \u2014 "),OO=n(f9e,"A",{href:!0});var G_t=s(OO);Zmr=r(G_t,"TFDistilBertForSequenceClassification"),G_t.forEach(t),egr=r(f9e," (DistilBERT model)"),f9e.forEach(t),ogr=i(W),ST=n(W,"LI",{});var m9e=s(ST);oue=n(m9e,"STRONG",{});var O_t=s(oue);rgr=r(O_t,"electra"),O_t.forEach(t),tgr=r(m9e," \u2014 "),XO=n(m9e,"A",{href:!0});var X_t=s(XO);agr=r(X_t,"TFElectraForSequenceClassification"),X_t.forEach(t),ngr=r(m9e," (ELECTRA model)"),m9e.forEach(t),sgr=i(W),PT=n(W,"LI",{});var g9e=s(PT);rue=n(g9e,"STRONG",{});var V_t=s(rue);lgr=r(V_t,"flaubert"),V_t.forEach(t),igr=r(g9e," \u2014 "),VO=n(g9e,"A",{href:!0});var z_t=s(VO);dgr=r(z_t,"TFFlaubertForSequenceClassification"),z_t.forEach(t),cgr=r(g9e," (FlauBERT model)"),g9e.forEach(t),fgr=i(W),$T=n(W,"LI",{});var h9e=s($T);tue=n(h9e,"STRONG",{});var W_t=s(tue);mgr=r(W_t,"funnel"),W_t.forEach(t),ggr=r(h9e," \u2014 "),zO=n(h9e,"A",{href:!0});var Q_t=s(zO);hgr=r(Q_t,"TFFunnelForSequenceClassification"),Q_t.forEach(t),pgr=r(h9e," (Funnel Transformer model)"),h9e.forEach(t),_gr=i(W),IT=n(W,"LI",{});var p9e=s(IT);aue=n(p9e,"STRONG",{});var H_t=s(aue);ugr=r(H_t,"gpt2"),H_t.forEach(t),bgr=r(p9e," \u2014 "),WO=n(p9e,"A",{href:!0});var U_t=s(WO);vgr=r(U_t,"TFGPT2ForSequenceClassification"),U_t.forEach(t),Tgr=r(p9e," (OpenAI GPT-2 model)"),p9e.forEach(t),Fgr=i(W),DT=n(W,"LI",{});var _9e=s(DT);nue=n(_9e,"STRONG",{});var J_t=s(nue);Cgr=r(J_t,"gptj"),J_t.forEach(t),Mgr=r(_9e," \u2014 "),QO=n(_9e,"A",{href:!0});var Y_t=s(QO);Egr=r(Y_t,"TFGPTJForSequenceClassification"),Y_t.forEach(t),ygr=r(_9e," (GPT-J model)"),_9e.forEach(t),wgr=i(W),NT=n(W,"LI",{});var u9e=s(NT);sue=n(u9e,"STRONG",{});var K_t=s(sue);Agr=r(K_t,"layoutlm"),K_t.forEach(t),Lgr=r(u9e," \u2014 "),HO=n(u9e,"A",{href:!0});var Z_t=s(HO);Bgr=r(Z_t,"TFLayoutLMForSequenceClassification"),Z_t.forEach(t),xgr=r(u9e," (LayoutLM model)"),u9e.forEach(t),kgr=i(W),jT=n(W,"LI",{});var b9e=s(jT);lue=n(b9e,"STRONG",{});var eut=s(lue);Rgr=r(eut,"longformer"),eut.forEach(t),Sgr=r(b9e," \u2014 "),UO=n(b9e,"A",{href:!0});var out=s(UO);Pgr=r(out,"TFLongformerForSequenceClassification"),out.forEach(t),$gr=r(b9e," (Longformer model)"),b9e.forEach(t),Igr=i(W),qT=n(W,"LI",{});var v9e=s(qT);iue=n(v9e,"STRONG",{});var rut=s(iue);Dgr=r(rut,"mobilebert"),rut.forEach(t),Ngr=r(v9e," \u2014 "),JO=n(v9e,"A",{href:!0});var tut=s(JO);jgr=r(tut,"TFMobileBertForSequenceClassification"),tut.forEach(t),qgr=r(v9e," (MobileBERT model)"),v9e.forEach(t),Ggr=i(W),GT=n(W,"LI",{});var T9e=s(GT);due=n(T9e,"STRONG",{});var aut=s(due);Ogr=r(aut,"mpnet"),aut.forEach(t),Xgr=r(T9e," \u2014 "),YO=n(T9e,"A",{href:!0});var nut=s(YO);Vgr=r(nut,"TFMPNetForSequenceClassification"),nut.forEach(t),zgr=r(T9e," (MPNet model)"),T9e.forEach(t),Wgr=i(W),OT=n(W,"LI",{});var F9e=s(OT);cue=n(F9e,"STRONG",{});var sut=s(cue);Qgr=r(sut,"openai-gpt"),sut.forEach(t),Hgr=r(F9e," \u2014 "),KO=n(F9e,"A",{href:!0});var lut=s(KO);Ugr=r(lut,"TFOpenAIGPTForSequenceClassification"),lut.forEach(t),Jgr=r(F9e," (OpenAI GPT model)"),F9e.forEach(t),Ygr=i(W),XT=n(W,"LI",{});var C9e=s(XT);fue=n(C9e,"STRONG",{});var iut=s(fue);Kgr=r(iut,"rembert"),iut.forEach(t),Zgr=r(C9e," \u2014 "),ZO=n(C9e,"A",{href:!0});var dut=s(ZO);ehr=r(dut,"TFRemBertForSequenceClassification"),dut.forEach(t),ohr=r(C9e," (RemBERT model)"),C9e.forEach(t),rhr=i(W),VT=n(W,"LI",{});var M9e=s(VT);mue=n(M9e,"STRONG",{});var cut=s(mue);thr=r(cut,"roberta"),cut.forEach(t),ahr=r(M9e," \u2014 "),eX=n(M9e,"A",{href:!0});var fut=s(eX);nhr=r(fut,"TFRobertaForSequenceClassification"),fut.forEach(t),shr=r(M9e," (RoBERTa model)"),M9e.forEach(t),lhr=i(W),zT=n(W,"LI",{});var E9e=s(zT);gue=n(E9e,"STRONG",{});var mut=s(gue);ihr=r(mut,"roformer"),mut.forEach(t),dhr=r(E9e," \u2014 "),oX=n(E9e,"A",{href:!0});var gut=s(oX);chr=r(gut,"TFRoFormerForSequenceClassification"),gut.forEach(t),fhr=r(E9e," (RoFormer model)"),E9e.forEach(t),mhr=i(W),WT=n(W,"LI",{});var y9e=s(WT);hue=n(y9e,"STRONG",{});var hut=s(hue);ghr=r(hut,"tapas"),hut.forEach(t),hhr=r(y9e," \u2014 "),rX=n(y9e,"A",{href:!0});var put=s(rX);phr=r(put,"TFTapasForSequenceClassification"),put.forEach(t),_hr=r(y9e," (TAPAS model)"),y9e.forEach(t),uhr=i(W),QT=n(W,"LI",{});var w9e=s(QT);pue=n(w9e,"STRONG",{});var _ut=s(pue);bhr=r(_ut,"transfo-xl"),_ut.forEach(t),vhr=r(w9e," \u2014 "),tX=n(w9e,"A",{href:!0});var uut=s(tX);Thr=r(uut,"TFTransfoXLForSequenceClassification"),uut.forEach(t),Fhr=r(w9e," (Transformer-XL model)"),w9e.forEach(t),Chr=i(W),HT=n(W,"LI",{});var A9e=s(HT);_ue=n(A9e,"STRONG",{});var but=s(_ue);Mhr=r(but,"xlm"),but.forEach(t),Ehr=r(A9e," \u2014 "),aX=n(A9e,"A",{href:!0});var vut=s(aX);yhr=r(vut,"TFXLMForSequenceClassification"),vut.forEach(t),whr=r(A9e," (XLM model)"),A9e.forEach(t),Ahr=i(W),UT=n(W,"LI",{});var L9e=s(UT);uue=n(L9e,"STRONG",{});var Tut=s(uue);Lhr=r(Tut,"xlm-roberta"),Tut.forEach(t),Bhr=r(L9e," \u2014 "),nX=n(L9e,"A",{href:!0});var Fut=s(nX);xhr=r(Fut,"TFXLMRobertaForSequenceClassification"),Fut.forEach(t),khr=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),Rhr=i(W),JT=n(W,"LI",{});var B9e=s(JT);bue=n(B9e,"STRONG",{});var Cut=s(bue);Shr=r(Cut,"xlnet"),Cut.forEach(t),Phr=r(B9e," \u2014 "),sX=n(B9e,"A",{href:!0});var Mut=s(sX);$hr=r(Mut,"TFXLNetForSequenceClassification"),Mut.forEach(t),Ihr=r(B9e," (XLNet model)"),B9e.forEach(t),W.forEach(t),Dhr=i(Fa),vue=n(Fa,"P",{});var Eut=s(vue);Nhr=r(Eut,"Examples:"),Eut.forEach(t),jhr=i(Fa),m(Ow.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),HRe=i(c),Pc=n(c,"H2",{class:!0});var n$e=s(Pc);YT=n(n$e,"A",{id:!0,class:!0,href:!0});var yut=s(YT);Tue=n(yut,"SPAN",{});var wut=s(Tue);m(Xw.$$.fragment,wut),wut.forEach(t),yut.forEach(t),qhr=i(n$e),Fue=n(n$e,"SPAN",{});var Aut=s(Fue);Ghr=r(Aut,"TFAutoModelForMultipleChoice"),Aut.forEach(t),n$e.forEach(t),URe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(Vw.$$.fragment,Zl),Ohr=i(Zl),$c=n(Zl,"P",{});var uQ=s($c);Xhr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cue=n(uQ,"CODE",{});var Lut=s(Cue);Vhr=r(Lut,"from_pretrained()"),Lut.forEach(t),zhr=r(uQ,"class method or the "),Mue=n(uQ,"CODE",{});var But=s(Mue);Whr=r(But,"from_config()"),But.forEach(t),Qhr=r(uQ,`class
method.`),uQ.forEach(t),Hhr=i(Zl),zw=n(Zl,"P",{});var s$e=s(zw);Uhr=r(s$e,"This class cannot be instantiated directly using "),Eue=n(s$e,"CODE",{});var xut=s(Eue);Jhr=r(xut,"__init__()"),xut.forEach(t),Yhr=r(s$e," (throws an error)."),s$e.forEach(t),Khr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(Ww.$$.fragment,ei),Zhr=i(ei),yue=n(ei,"P",{});var kut=s(yue);epr=r(kut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kut.forEach(t),opr=i(ei),Ic=n(ei,"P",{});var bQ=s(Ic);rpr=r(bQ,`Note:
Loading a model from its configuration file does `),wue=n(bQ,"STRONG",{});var Rut=s(wue);tpr=r(Rut,"not"),Rut.forEach(t),apr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=n(bQ,"CODE",{});var Sut=s(Aue);npr=r(Sut,"from_pretrained()"),Sut.forEach(t),spr=r(bQ,"to load the model weights."),bQ.forEach(t),lpr=i(ei),Lue=n(ei,"P",{});var Put=s(Lue);ipr=r(Put,"Examples:"),Put.forEach(t),dpr=i(ei),m(Qw.$$.fragment,ei),ei.forEach(t),cpr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Hw.$$.fragment,Ca),fpr=i(Ca),Bue=n(Ca,"P",{});var $ut=s(Bue);mpr=r($ut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$ut.forEach(t),gpr=i(Ca),Mn=n(Ca,"P",{});var UM=s(Mn);hpr=r(UM,"The model class to instantiate is selected based on the "),xue=n(UM,"CODE",{});var Iut=s(xue);ppr=r(Iut,"model_type"),Iut.forEach(t),_pr=r(UM,` property of the config object (either
passed as an argument or loaded from `),kue=n(UM,"CODE",{});var Dut=s(kue);upr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),bpr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(UM,"CODE",{});var Nut=s(Rue);vpr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Tpr=r(UM,":"),UM.forEach(t),Fpr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);KT=n(le,"LI",{});var x9e=s(KT);Sue=n(x9e,"STRONG",{});var jut=s(Sue);Cpr=r(jut,"albert"),jut.forEach(t),Mpr=r(x9e," \u2014 "),lX=n(x9e,"A",{href:!0});var qut=s(lX);Epr=r(qut,"TFAlbertForMultipleChoice"),qut.forEach(t),ypr=r(x9e," (ALBERT model)"),x9e.forEach(t),wpr=i(le),ZT=n(le,"LI",{});var k9e=s(ZT);Pue=n(k9e,"STRONG",{});var Gut=s(Pue);Apr=r(Gut,"bert"),Gut.forEach(t),Lpr=r(k9e," \u2014 "),iX=n(k9e,"A",{href:!0});var Out=s(iX);Bpr=r(Out,"TFBertForMultipleChoice"),Out.forEach(t),xpr=r(k9e," (BERT model)"),k9e.forEach(t),kpr=i(le),e8=n(le,"LI",{});var R9e=s(e8);$ue=n(R9e,"STRONG",{});var Xut=s($ue);Rpr=r(Xut,"camembert"),Xut.forEach(t),Spr=r(R9e," \u2014 "),dX=n(R9e,"A",{href:!0});var Vut=s(dX);Ppr=r(Vut,"TFCamembertForMultipleChoice"),Vut.forEach(t),$pr=r(R9e," (CamemBERT model)"),R9e.forEach(t),Ipr=i(le),o8=n(le,"LI",{});var S9e=s(o8);Iue=n(S9e,"STRONG",{});var zut=s(Iue);Dpr=r(zut,"convbert"),zut.forEach(t),Npr=r(S9e," \u2014 "),cX=n(S9e,"A",{href:!0});var Wut=s(cX);jpr=r(Wut,"TFConvBertForMultipleChoice"),Wut.forEach(t),qpr=r(S9e," (ConvBERT model)"),S9e.forEach(t),Gpr=i(le),r8=n(le,"LI",{});var P9e=s(r8);Due=n(P9e,"STRONG",{});var Qut=s(Due);Opr=r(Qut,"distilbert"),Qut.forEach(t),Xpr=r(P9e," \u2014 "),fX=n(P9e,"A",{href:!0});var Hut=s(fX);Vpr=r(Hut,"TFDistilBertForMultipleChoice"),Hut.forEach(t),zpr=r(P9e," (DistilBERT model)"),P9e.forEach(t),Wpr=i(le),t8=n(le,"LI",{});var $9e=s(t8);Nue=n($9e,"STRONG",{});var Uut=s(Nue);Qpr=r(Uut,"electra"),Uut.forEach(t),Hpr=r($9e," \u2014 "),mX=n($9e,"A",{href:!0});var Jut=s(mX);Upr=r(Jut,"TFElectraForMultipleChoice"),Jut.forEach(t),Jpr=r($9e," (ELECTRA model)"),$9e.forEach(t),Ypr=i(le),a8=n(le,"LI",{});var I9e=s(a8);jue=n(I9e,"STRONG",{});var Yut=s(jue);Kpr=r(Yut,"flaubert"),Yut.forEach(t),Zpr=r(I9e," \u2014 "),gX=n(I9e,"A",{href:!0});var Kut=s(gX);e_r=r(Kut,"TFFlaubertForMultipleChoice"),Kut.forEach(t),o_r=r(I9e," (FlauBERT model)"),I9e.forEach(t),r_r=i(le),n8=n(le,"LI",{});var D9e=s(n8);que=n(D9e,"STRONG",{});var Zut=s(que);t_r=r(Zut,"funnel"),Zut.forEach(t),a_r=r(D9e," \u2014 "),hX=n(D9e,"A",{href:!0});var e1t=s(hX);n_r=r(e1t,"TFFunnelForMultipleChoice"),e1t.forEach(t),s_r=r(D9e," (Funnel Transformer model)"),D9e.forEach(t),l_r=i(le),s8=n(le,"LI",{});var N9e=s(s8);Gue=n(N9e,"STRONG",{});var o1t=s(Gue);i_r=r(o1t,"longformer"),o1t.forEach(t),d_r=r(N9e," \u2014 "),pX=n(N9e,"A",{href:!0});var r1t=s(pX);c_r=r(r1t,"TFLongformerForMultipleChoice"),r1t.forEach(t),f_r=r(N9e," (Longformer model)"),N9e.forEach(t),m_r=i(le),l8=n(le,"LI",{});var j9e=s(l8);Oue=n(j9e,"STRONG",{});var t1t=s(Oue);g_r=r(t1t,"mobilebert"),t1t.forEach(t),h_r=r(j9e," \u2014 "),_X=n(j9e,"A",{href:!0});var a1t=s(_X);p_r=r(a1t,"TFMobileBertForMultipleChoice"),a1t.forEach(t),__r=r(j9e," (MobileBERT model)"),j9e.forEach(t),u_r=i(le),i8=n(le,"LI",{});var q9e=s(i8);Xue=n(q9e,"STRONG",{});var n1t=s(Xue);b_r=r(n1t,"mpnet"),n1t.forEach(t),v_r=r(q9e," \u2014 "),uX=n(q9e,"A",{href:!0});var s1t=s(uX);T_r=r(s1t,"TFMPNetForMultipleChoice"),s1t.forEach(t),F_r=r(q9e," (MPNet model)"),q9e.forEach(t),C_r=i(le),d8=n(le,"LI",{});var G9e=s(d8);Vue=n(G9e,"STRONG",{});var l1t=s(Vue);M_r=r(l1t,"rembert"),l1t.forEach(t),E_r=r(G9e," \u2014 "),bX=n(G9e,"A",{href:!0});var i1t=s(bX);y_r=r(i1t,"TFRemBertForMultipleChoice"),i1t.forEach(t),w_r=r(G9e," (RemBERT model)"),G9e.forEach(t),A_r=i(le),c8=n(le,"LI",{});var O9e=s(c8);zue=n(O9e,"STRONG",{});var d1t=s(zue);L_r=r(d1t,"roberta"),d1t.forEach(t),B_r=r(O9e," \u2014 "),vX=n(O9e,"A",{href:!0});var c1t=s(vX);x_r=r(c1t,"TFRobertaForMultipleChoice"),c1t.forEach(t),k_r=r(O9e," (RoBERTa model)"),O9e.forEach(t),R_r=i(le),f8=n(le,"LI",{});var X9e=s(f8);Wue=n(X9e,"STRONG",{});var f1t=s(Wue);S_r=r(f1t,"roformer"),f1t.forEach(t),P_r=r(X9e," \u2014 "),TX=n(X9e,"A",{href:!0});var m1t=s(TX);$_r=r(m1t,"TFRoFormerForMultipleChoice"),m1t.forEach(t),I_r=r(X9e," (RoFormer model)"),X9e.forEach(t),D_r=i(le),m8=n(le,"LI",{});var V9e=s(m8);Que=n(V9e,"STRONG",{});var g1t=s(Que);N_r=r(g1t,"xlm"),g1t.forEach(t),j_r=r(V9e," \u2014 "),FX=n(V9e,"A",{href:!0});var h1t=s(FX);q_r=r(h1t,"TFXLMForMultipleChoice"),h1t.forEach(t),G_r=r(V9e," (XLM model)"),V9e.forEach(t),O_r=i(le),g8=n(le,"LI",{});var z9e=s(g8);Hue=n(z9e,"STRONG",{});var p1t=s(Hue);X_r=r(p1t,"xlm-roberta"),p1t.forEach(t),V_r=r(z9e," \u2014 "),CX=n(z9e,"A",{href:!0});var _1t=s(CX);z_r=r(_1t,"TFXLMRobertaForMultipleChoice"),_1t.forEach(t),W_r=r(z9e," (XLM-RoBERTa model)"),z9e.forEach(t),Q_r=i(le),h8=n(le,"LI",{});var W9e=s(h8);Uue=n(W9e,"STRONG",{});var u1t=s(Uue);H_r=r(u1t,"xlnet"),u1t.forEach(t),U_r=r(W9e," \u2014 "),MX=n(W9e,"A",{href:!0});var b1t=s(MX);J_r=r(b1t,"TFXLNetForMultipleChoice"),b1t.forEach(t),Y_r=r(W9e," (XLNet model)"),W9e.forEach(t),le.forEach(t),K_r=i(Ca),Jue=n(Ca,"P",{});var v1t=s(Jue);Z_r=r(v1t,"Examples:"),v1t.forEach(t),eur=i(Ca),m(Uw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),JRe=i(c),Dc=n(c,"H2",{class:!0});var l$e=s(Dc);p8=n(l$e,"A",{id:!0,class:!0,href:!0});var T1t=s(p8);Yue=n(T1t,"SPAN",{});var F1t=s(Yue);m(Jw.$$.fragment,F1t),F1t.forEach(t),T1t.forEach(t),our=i(l$e),Kue=n(l$e,"SPAN",{});var C1t=s(Kue);rur=r(C1t,"TFAutoModelForTableQuestionAnswering"),C1t.forEach(t),l$e.forEach(t),YRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(Yw.$$.fragment,oi),tur=i(oi),Nc=n(oi,"P",{});var vQ=s(Nc);aur=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zue=n(vQ,"CODE",{});var M1t=s(Zue);nur=r(M1t,"from_pretrained()"),M1t.forEach(t),sur=r(vQ,"class method or the "),e1e=n(vQ,"CODE",{});var E1t=s(e1e);lur=r(E1t,"from_config()"),E1t.forEach(t),iur=r(vQ,`class
method.`),vQ.forEach(t),dur=i(oi),Kw=n(oi,"P",{});var i$e=s(Kw);cur=r(i$e,"This class cannot be instantiated directly using "),o1e=n(i$e,"CODE",{});var y1t=s(o1e);fur=r(y1t,"__init__()"),y1t.forEach(t),mur=r(i$e," (throws an error)."),i$e.forEach(t),gur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(Zw.$$.fragment,ri),hur=i(ri),r1e=n(ri,"P",{});var w1t=s(r1e);pur=r(w1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w1t.forEach(t),_ur=i(ri),jc=n(ri,"P",{});var TQ=s(jc);uur=r(TQ,`Note:
Loading a model from its configuration file does `),t1e=n(TQ,"STRONG",{});var A1t=s(t1e);bur=r(A1t,"not"),A1t.forEach(t),vur=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=n(TQ,"CODE",{});var L1t=s(a1e);Tur=r(L1t,"from_pretrained()"),L1t.forEach(t),Fur=r(TQ,"to load the model weights."),TQ.forEach(t),Cur=i(ri),n1e=n(ri,"P",{});var B1t=s(n1e);Mur=r(B1t,"Examples:"),B1t.forEach(t),Eur=i(ri),m(eA.$$.fragment,ri),ri.forEach(t),yur=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(oA.$$.fragment,Ma),wur=i(Ma),s1e=n(Ma,"P",{});var x1t=s(s1e);Aur=r(x1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),x1t.forEach(t),Lur=i(Ma),En=n(Ma,"P",{});var JM=s(En);Bur=r(JM,"The model class to instantiate is selected based on the "),l1e=n(JM,"CODE",{});var k1t=s(l1e);xur=r(k1t,"model_type"),k1t.forEach(t),kur=r(JM,` property of the config object (either
passed as an argument or loaded from `),i1e=n(JM,"CODE",{});var R1t=s(i1e);Rur=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Sur=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(JM,"CODE",{});var S1t=s(d1e);Pur=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),$ur=r(JM,":"),JM.forEach(t),Iur=i(Ma),c1e=n(Ma,"UL",{});var P1t=s(c1e);_8=n(P1t,"LI",{});var Q9e=s(_8);f1e=n(Q9e,"STRONG",{});var $1t=s(f1e);Dur=r($1t,"tapas"),$1t.forEach(t),Nur=r(Q9e," \u2014 "),EX=n(Q9e,"A",{href:!0});var I1t=s(EX);jur=r(I1t,"TFTapasForQuestionAnswering"),I1t.forEach(t),qur=r(Q9e," (TAPAS model)"),Q9e.forEach(t),P1t.forEach(t),Gur=i(Ma),m1e=n(Ma,"P",{});var D1t=s(m1e);Our=r(D1t,"Examples:"),D1t.forEach(t),Xur=i(Ma),m(rA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),KRe=i(c),qc=n(c,"H2",{class:!0});var d$e=s(qc);u8=n(d$e,"A",{id:!0,class:!0,href:!0});var N1t=s(u8);g1e=n(N1t,"SPAN",{});var j1t=s(g1e);m(tA.$$.fragment,j1t),j1t.forEach(t),N1t.forEach(t),Vur=i(d$e),h1e=n(d$e,"SPAN",{});var q1t=s(h1e);zur=r(q1t,"TFAutoModelForTokenClassification"),q1t.forEach(t),d$e.forEach(t),ZRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(aA.$$.fragment,ti),Wur=i(ti),Gc=n(ti,"P",{});var FQ=s(Gc);Qur=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),p1e=n(FQ,"CODE",{});var G1t=s(p1e);Hur=r(G1t,"from_pretrained()"),G1t.forEach(t),Uur=r(FQ,"class method or the "),_1e=n(FQ,"CODE",{});var O1t=s(_1e);Jur=r(O1t,"from_config()"),O1t.forEach(t),Yur=r(FQ,`class
method.`),FQ.forEach(t),Kur=i(ti),nA=n(ti,"P",{});var c$e=s(nA);Zur=r(c$e,"This class cannot be instantiated directly using "),u1e=n(c$e,"CODE",{});var X1t=s(u1e);e1r=r(X1t,"__init__()"),X1t.forEach(t),o1r=r(c$e," (throws an error)."),c$e.forEach(t),r1r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(sA.$$.fragment,ai),t1r=i(ai),b1e=n(ai,"P",{});var V1t=s(b1e);a1r=r(V1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V1t.forEach(t),n1r=i(ai),Oc=n(ai,"P",{});var CQ=s(Oc);s1r=r(CQ,`Note:
Loading a model from its configuration file does `),v1e=n(CQ,"STRONG",{});var z1t=s(v1e);l1r=r(z1t,"not"),z1t.forEach(t),i1r=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=n(CQ,"CODE",{});var W1t=s(T1e);d1r=r(W1t,"from_pretrained()"),W1t.forEach(t),c1r=r(CQ,"to load the model weights."),CQ.forEach(t),f1r=i(ai),F1e=n(ai,"P",{});var Q1t=s(F1e);m1r=r(Q1t,"Examples:"),Q1t.forEach(t),g1r=i(ai),m(lA.$$.fragment,ai),ai.forEach(t),h1r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(iA.$$.fragment,Ea),p1r=i(Ea),C1e=n(Ea,"P",{});var H1t=s(C1e);_1r=r(H1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H1t.forEach(t),u1r=i(Ea),yn=n(Ea,"P",{});var YM=s(yn);b1r=r(YM,"The model class to instantiate is selected based on the "),M1e=n(YM,"CODE",{});var U1t=s(M1e);v1r=r(U1t,"model_type"),U1t.forEach(t),T1r=r(YM,` property of the config object (either
passed as an argument or loaded from `),E1e=n(YM,"CODE",{});var J1t=s(E1e);F1r=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),C1r=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(YM,"CODE",{});var Y1t=s(y1e);M1r=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),E1r=r(YM,":"),YM.forEach(t),y1r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);b8=n(oe,"LI",{});var H9e=s(b8);w1e=n(H9e,"STRONG",{});var K1t=s(w1e);w1r=r(K1t,"albert"),K1t.forEach(t),A1r=r(H9e," \u2014 "),yX=n(H9e,"A",{href:!0});var Z1t=s(yX);L1r=r(Z1t,"TFAlbertForTokenClassification"),Z1t.forEach(t),B1r=r(H9e," (ALBERT model)"),H9e.forEach(t),x1r=i(oe),v8=n(oe,"LI",{});var U9e=s(v8);A1e=n(U9e,"STRONG",{});var ebt=s(A1e);k1r=r(ebt,"bert"),ebt.forEach(t),R1r=r(U9e," \u2014 "),wX=n(U9e,"A",{href:!0});var obt=s(wX);S1r=r(obt,"TFBertForTokenClassification"),obt.forEach(t),P1r=r(U9e," (BERT model)"),U9e.forEach(t),$1r=i(oe),T8=n(oe,"LI",{});var J9e=s(T8);L1e=n(J9e,"STRONG",{});var rbt=s(L1e);I1r=r(rbt,"camembert"),rbt.forEach(t),D1r=r(J9e," \u2014 "),AX=n(J9e,"A",{href:!0});var tbt=s(AX);N1r=r(tbt,"TFCamembertForTokenClassification"),tbt.forEach(t),j1r=r(J9e," (CamemBERT model)"),J9e.forEach(t),q1r=i(oe),F8=n(oe,"LI",{});var Y9e=s(F8);B1e=n(Y9e,"STRONG",{});var abt=s(B1e);G1r=r(abt,"convbert"),abt.forEach(t),O1r=r(Y9e," \u2014 "),LX=n(Y9e,"A",{href:!0});var nbt=s(LX);X1r=r(nbt,"TFConvBertForTokenClassification"),nbt.forEach(t),V1r=r(Y9e," (ConvBERT model)"),Y9e.forEach(t),z1r=i(oe),C8=n(oe,"LI",{});var K9e=s(C8);x1e=n(K9e,"STRONG",{});var sbt=s(x1e);W1r=r(sbt,"deberta"),sbt.forEach(t),Q1r=r(K9e," \u2014 "),BX=n(K9e,"A",{href:!0});var lbt=s(BX);H1r=r(lbt,"TFDebertaForTokenClassification"),lbt.forEach(t),U1r=r(K9e," (DeBERTa model)"),K9e.forEach(t),J1r=i(oe),M8=n(oe,"LI",{});var Z9e=s(M8);k1e=n(Z9e,"STRONG",{});var ibt=s(k1e);Y1r=r(ibt,"deberta-v2"),ibt.forEach(t),K1r=r(Z9e," \u2014 "),xX=n(Z9e,"A",{href:!0});var dbt=s(xX);Z1r=r(dbt,"TFDebertaV2ForTokenClassification"),dbt.forEach(t),ebr=r(Z9e," (DeBERTa-v2 model)"),Z9e.forEach(t),obr=i(oe),E8=n(oe,"LI",{});var eBe=s(E8);R1e=n(eBe,"STRONG",{});var cbt=s(R1e);rbr=r(cbt,"distilbert"),cbt.forEach(t),tbr=r(eBe," \u2014 "),kX=n(eBe,"A",{href:!0});var fbt=s(kX);abr=r(fbt,"TFDistilBertForTokenClassification"),fbt.forEach(t),nbr=r(eBe," (DistilBERT model)"),eBe.forEach(t),sbr=i(oe),y8=n(oe,"LI",{});var oBe=s(y8);S1e=n(oBe,"STRONG",{});var mbt=s(S1e);lbr=r(mbt,"electra"),mbt.forEach(t),ibr=r(oBe," \u2014 "),RX=n(oBe,"A",{href:!0});var gbt=s(RX);dbr=r(gbt,"TFElectraForTokenClassification"),gbt.forEach(t),cbr=r(oBe," (ELECTRA model)"),oBe.forEach(t),fbr=i(oe),w8=n(oe,"LI",{});var rBe=s(w8);P1e=n(rBe,"STRONG",{});var hbt=s(P1e);mbr=r(hbt,"flaubert"),hbt.forEach(t),gbr=r(rBe," \u2014 "),SX=n(rBe,"A",{href:!0});var pbt=s(SX);hbr=r(pbt,"TFFlaubertForTokenClassification"),pbt.forEach(t),pbr=r(rBe," (FlauBERT model)"),rBe.forEach(t),_br=i(oe),A8=n(oe,"LI",{});var tBe=s(A8);$1e=n(tBe,"STRONG",{});var _bt=s($1e);ubr=r(_bt,"funnel"),_bt.forEach(t),bbr=r(tBe," \u2014 "),PX=n(tBe,"A",{href:!0});var ubt=s(PX);vbr=r(ubt,"TFFunnelForTokenClassification"),ubt.forEach(t),Tbr=r(tBe," (Funnel Transformer model)"),tBe.forEach(t),Fbr=i(oe),L8=n(oe,"LI",{});var aBe=s(L8);I1e=n(aBe,"STRONG",{});var bbt=s(I1e);Cbr=r(bbt,"layoutlm"),bbt.forEach(t),Mbr=r(aBe," \u2014 "),$X=n(aBe,"A",{href:!0});var vbt=s($X);Ebr=r(vbt,"TFLayoutLMForTokenClassification"),vbt.forEach(t),ybr=r(aBe," (LayoutLM model)"),aBe.forEach(t),wbr=i(oe),B8=n(oe,"LI",{});var nBe=s(B8);D1e=n(nBe,"STRONG",{});var Tbt=s(D1e);Abr=r(Tbt,"longformer"),Tbt.forEach(t),Lbr=r(nBe," \u2014 "),IX=n(nBe,"A",{href:!0});var Fbt=s(IX);Bbr=r(Fbt,"TFLongformerForTokenClassification"),Fbt.forEach(t),xbr=r(nBe," (Longformer model)"),nBe.forEach(t),kbr=i(oe),x8=n(oe,"LI",{});var sBe=s(x8);N1e=n(sBe,"STRONG",{});var Cbt=s(N1e);Rbr=r(Cbt,"mobilebert"),Cbt.forEach(t),Sbr=r(sBe," \u2014 "),DX=n(sBe,"A",{href:!0});var Mbt=s(DX);Pbr=r(Mbt,"TFMobileBertForTokenClassification"),Mbt.forEach(t),$br=r(sBe," (MobileBERT model)"),sBe.forEach(t),Ibr=i(oe),k8=n(oe,"LI",{});var lBe=s(k8);j1e=n(lBe,"STRONG",{});var Ebt=s(j1e);Dbr=r(Ebt,"mpnet"),Ebt.forEach(t),Nbr=r(lBe," \u2014 "),NX=n(lBe,"A",{href:!0});var ybt=s(NX);jbr=r(ybt,"TFMPNetForTokenClassification"),ybt.forEach(t),qbr=r(lBe," (MPNet model)"),lBe.forEach(t),Gbr=i(oe),R8=n(oe,"LI",{});var iBe=s(R8);q1e=n(iBe,"STRONG",{});var wbt=s(q1e);Obr=r(wbt,"rembert"),wbt.forEach(t),Xbr=r(iBe," \u2014 "),jX=n(iBe,"A",{href:!0});var Abt=s(jX);Vbr=r(Abt,"TFRemBertForTokenClassification"),Abt.forEach(t),zbr=r(iBe," (RemBERT model)"),iBe.forEach(t),Wbr=i(oe),S8=n(oe,"LI",{});var dBe=s(S8);G1e=n(dBe,"STRONG",{});var Lbt=s(G1e);Qbr=r(Lbt,"roberta"),Lbt.forEach(t),Hbr=r(dBe," \u2014 "),qX=n(dBe,"A",{href:!0});var Bbt=s(qX);Ubr=r(Bbt,"TFRobertaForTokenClassification"),Bbt.forEach(t),Jbr=r(dBe," (RoBERTa model)"),dBe.forEach(t),Ybr=i(oe),P8=n(oe,"LI",{});var cBe=s(P8);O1e=n(cBe,"STRONG",{});var xbt=s(O1e);Kbr=r(xbt,"roformer"),xbt.forEach(t),Zbr=r(cBe," \u2014 "),GX=n(cBe,"A",{href:!0});var kbt=s(GX);e3r=r(kbt,"TFRoFormerForTokenClassification"),kbt.forEach(t),o3r=r(cBe," (RoFormer model)"),cBe.forEach(t),r3r=i(oe),$8=n(oe,"LI",{});var fBe=s($8);X1e=n(fBe,"STRONG",{});var Rbt=s(X1e);t3r=r(Rbt,"xlm"),Rbt.forEach(t),a3r=r(fBe," \u2014 "),OX=n(fBe,"A",{href:!0});var Sbt=s(OX);n3r=r(Sbt,"TFXLMForTokenClassification"),Sbt.forEach(t),s3r=r(fBe," (XLM model)"),fBe.forEach(t),l3r=i(oe),I8=n(oe,"LI",{});var mBe=s(I8);V1e=n(mBe,"STRONG",{});var Pbt=s(V1e);i3r=r(Pbt,"xlm-roberta"),Pbt.forEach(t),d3r=r(mBe," \u2014 "),XX=n(mBe,"A",{href:!0});var $bt=s(XX);c3r=r($bt,"TFXLMRobertaForTokenClassification"),$bt.forEach(t),f3r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),m3r=i(oe),D8=n(oe,"LI",{});var gBe=s(D8);z1e=n(gBe,"STRONG",{});var Ibt=s(z1e);g3r=r(Ibt,"xlnet"),Ibt.forEach(t),h3r=r(gBe," \u2014 "),VX=n(gBe,"A",{href:!0});var Dbt=s(VX);p3r=r(Dbt,"TFXLNetForTokenClassification"),Dbt.forEach(t),_3r=r(gBe," (XLNet model)"),gBe.forEach(t),oe.forEach(t),u3r=i(Ea),W1e=n(Ea,"P",{});var Nbt=s(W1e);b3r=r(Nbt,"Examples:"),Nbt.forEach(t),v3r=i(Ea),m(dA.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),eSe=i(c),Xc=n(c,"H2",{class:!0});var f$e=s(Xc);N8=n(f$e,"A",{id:!0,class:!0,href:!0});var jbt=s(N8);Q1e=n(jbt,"SPAN",{});var qbt=s(Q1e);m(cA.$$.fragment,qbt),qbt.forEach(t),jbt.forEach(t),T3r=i(f$e),H1e=n(f$e,"SPAN",{});var Gbt=s(H1e);F3r=r(Gbt,"TFAutoModelForQuestionAnswering"),Gbt.forEach(t),f$e.forEach(t),oSe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(fA.$$.fragment,ni),C3r=i(ni),Vc=n(ni,"P",{});var MQ=s(Vc);M3r=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),U1e=n(MQ,"CODE",{});var Obt=s(U1e);E3r=r(Obt,"from_pretrained()"),Obt.forEach(t),y3r=r(MQ,"class method or the "),J1e=n(MQ,"CODE",{});var Xbt=s(J1e);w3r=r(Xbt,"from_config()"),Xbt.forEach(t),A3r=r(MQ,`class
method.`),MQ.forEach(t),L3r=i(ni),mA=n(ni,"P",{});var m$e=s(mA);B3r=r(m$e,"This class cannot be instantiated directly using "),Y1e=n(m$e,"CODE",{});var Vbt=s(Y1e);x3r=r(Vbt,"__init__()"),Vbt.forEach(t),k3r=r(m$e," (throws an error)."),m$e.forEach(t),R3r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(gA.$$.fragment,si),S3r=i(si),K1e=n(si,"P",{});var zbt=s(K1e);P3r=r(zbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zbt.forEach(t),$3r=i(si),zc=n(si,"P",{});var EQ=s(zc);I3r=r(EQ,`Note:
Loading a model from its configuration file does `),Z1e=n(EQ,"STRONG",{});var Wbt=s(Z1e);D3r=r(Wbt,"not"),Wbt.forEach(t),N3r=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=n(EQ,"CODE",{});var Qbt=s(ebe);j3r=r(Qbt,"from_pretrained()"),Qbt.forEach(t),q3r=r(EQ,"to load the model weights."),EQ.forEach(t),G3r=i(si),obe=n(si,"P",{});var Hbt=s(obe);O3r=r(Hbt,"Examples:"),Hbt.forEach(t),X3r=i(si),m(hA.$$.fragment,si),si.forEach(t),V3r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(pA.$$.fragment,ya),z3r=i(ya),rbe=n(ya,"P",{});var Ubt=s(rbe);W3r=r(Ubt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ubt.forEach(t),Q3r=i(ya),wn=n(ya,"P",{});var KM=s(wn);H3r=r(KM,"The model class to instantiate is selected based on the "),tbe=n(KM,"CODE",{});var Jbt=s(tbe);U3r=r(Jbt,"model_type"),Jbt.forEach(t),J3r=r(KM,` property of the config object (either
passed as an argument or loaded from `),abe=n(KM,"CODE",{});var Ybt=s(abe);Y3r=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),K3r=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(KM,"CODE",{});var Kbt=s(nbe);Z3r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),e2r=r(KM,":"),KM.forEach(t),o2r=i(ya),K=n(ya,"UL",{});var re=s(K);j8=n(re,"LI",{});var hBe=s(j8);sbe=n(hBe,"STRONG",{});var Zbt=s(sbe);r2r=r(Zbt,"albert"),Zbt.forEach(t),t2r=r(hBe," \u2014 "),zX=n(hBe,"A",{href:!0});var e3t=s(zX);a2r=r(e3t,"TFAlbertForQuestionAnswering"),e3t.forEach(t),n2r=r(hBe," (ALBERT model)"),hBe.forEach(t),s2r=i(re),q8=n(re,"LI",{});var pBe=s(q8);lbe=n(pBe,"STRONG",{});var o3t=s(lbe);l2r=r(o3t,"bert"),o3t.forEach(t),i2r=r(pBe," \u2014 "),WX=n(pBe,"A",{href:!0});var r3t=s(WX);d2r=r(r3t,"TFBertForQuestionAnswering"),r3t.forEach(t),c2r=r(pBe," (BERT model)"),pBe.forEach(t),f2r=i(re),G8=n(re,"LI",{});var _Be=s(G8);ibe=n(_Be,"STRONG",{});var t3t=s(ibe);m2r=r(t3t,"camembert"),t3t.forEach(t),g2r=r(_Be," \u2014 "),QX=n(_Be,"A",{href:!0});var a3t=s(QX);h2r=r(a3t,"TFCamembertForQuestionAnswering"),a3t.forEach(t),p2r=r(_Be," (CamemBERT model)"),_Be.forEach(t),_2r=i(re),O8=n(re,"LI",{});var uBe=s(O8);dbe=n(uBe,"STRONG",{});var n3t=s(dbe);u2r=r(n3t,"convbert"),n3t.forEach(t),b2r=r(uBe," \u2014 "),HX=n(uBe,"A",{href:!0});var s3t=s(HX);v2r=r(s3t,"TFConvBertForQuestionAnswering"),s3t.forEach(t),T2r=r(uBe," (ConvBERT model)"),uBe.forEach(t),F2r=i(re),X8=n(re,"LI",{});var bBe=s(X8);cbe=n(bBe,"STRONG",{});var l3t=s(cbe);C2r=r(l3t,"deberta"),l3t.forEach(t),M2r=r(bBe," \u2014 "),UX=n(bBe,"A",{href:!0});var i3t=s(UX);E2r=r(i3t,"TFDebertaForQuestionAnswering"),i3t.forEach(t),y2r=r(bBe," (DeBERTa model)"),bBe.forEach(t),w2r=i(re),V8=n(re,"LI",{});var vBe=s(V8);fbe=n(vBe,"STRONG",{});var d3t=s(fbe);A2r=r(d3t,"deberta-v2"),d3t.forEach(t),L2r=r(vBe," \u2014 "),JX=n(vBe,"A",{href:!0});var c3t=s(JX);B2r=r(c3t,"TFDebertaV2ForQuestionAnswering"),c3t.forEach(t),x2r=r(vBe," (DeBERTa-v2 model)"),vBe.forEach(t),k2r=i(re),z8=n(re,"LI",{});var TBe=s(z8);mbe=n(TBe,"STRONG",{});var f3t=s(mbe);R2r=r(f3t,"distilbert"),f3t.forEach(t),S2r=r(TBe," \u2014 "),YX=n(TBe,"A",{href:!0});var m3t=s(YX);P2r=r(m3t,"TFDistilBertForQuestionAnswering"),m3t.forEach(t),$2r=r(TBe," (DistilBERT model)"),TBe.forEach(t),I2r=i(re),W8=n(re,"LI",{});var FBe=s(W8);gbe=n(FBe,"STRONG",{});var g3t=s(gbe);D2r=r(g3t,"electra"),g3t.forEach(t),N2r=r(FBe," \u2014 "),KX=n(FBe,"A",{href:!0});var h3t=s(KX);j2r=r(h3t,"TFElectraForQuestionAnswering"),h3t.forEach(t),q2r=r(FBe," (ELECTRA model)"),FBe.forEach(t),G2r=i(re),Q8=n(re,"LI",{});var CBe=s(Q8);hbe=n(CBe,"STRONG",{});var p3t=s(hbe);O2r=r(p3t,"flaubert"),p3t.forEach(t),X2r=r(CBe," \u2014 "),ZX=n(CBe,"A",{href:!0});var _3t=s(ZX);V2r=r(_3t,"TFFlaubertForQuestionAnsweringSimple"),_3t.forEach(t),z2r=r(CBe," (FlauBERT model)"),CBe.forEach(t),W2r=i(re),H8=n(re,"LI",{});var MBe=s(H8);pbe=n(MBe,"STRONG",{});var u3t=s(pbe);Q2r=r(u3t,"funnel"),u3t.forEach(t),H2r=r(MBe," \u2014 "),eV=n(MBe,"A",{href:!0});var b3t=s(eV);U2r=r(b3t,"TFFunnelForQuestionAnswering"),b3t.forEach(t),J2r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),Y2r=i(re),U8=n(re,"LI",{});var EBe=s(U8);_be=n(EBe,"STRONG",{});var v3t=s(_be);K2r=r(v3t,"gptj"),v3t.forEach(t),Z2r=r(EBe," \u2014 "),oV=n(EBe,"A",{href:!0});var T3t=s(oV);evr=r(T3t,"TFGPTJForQuestionAnswering"),T3t.forEach(t),ovr=r(EBe," (GPT-J model)"),EBe.forEach(t),rvr=i(re),J8=n(re,"LI",{});var yBe=s(J8);ube=n(yBe,"STRONG",{});var F3t=s(ube);tvr=r(F3t,"longformer"),F3t.forEach(t),avr=r(yBe," \u2014 "),rV=n(yBe,"A",{href:!0});var C3t=s(rV);nvr=r(C3t,"TFLongformerForQuestionAnswering"),C3t.forEach(t),svr=r(yBe," (Longformer model)"),yBe.forEach(t),lvr=i(re),Y8=n(re,"LI",{});var wBe=s(Y8);bbe=n(wBe,"STRONG",{});var M3t=s(bbe);ivr=r(M3t,"mobilebert"),M3t.forEach(t),dvr=r(wBe," \u2014 "),tV=n(wBe,"A",{href:!0});var E3t=s(tV);cvr=r(E3t,"TFMobileBertForQuestionAnswering"),E3t.forEach(t),fvr=r(wBe," (MobileBERT model)"),wBe.forEach(t),mvr=i(re),K8=n(re,"LI",{});var ABe=s(K8);vbe=n(ABe,"STRONG",{});var y3t=s(vbe);gvr=r(y3t,"mpnet"),y3t.forEach(t),hvr=r(ABe," \u2014 "),aV=n(ABe,"A",{href:!0});var w3t=s(aV);pvr=r(w3t,"TFMPNetForQuestionAnswering"),w3t.forEach(t),_vr=r(ABe," (MPNet model)"),ABe.forEach(t),uvr=i(re),Z8=n(re,"LI",{});var LBe=s(Z8);Tbe=n(LBe,"STRONG",{});var A3t=s(Tbe);bvr=r(A3t,"rembert"),A3t.forEach(t),vvr=r(LBe," \u2014 "),nV=n(LBe,"A",{href:!0});var L3t=s(nV);Tvr=r(L3t,"TFRemBertForQuestionAnswering"),L3t.forEach(t),Fvr=r(LBe," (RemBERT model)"),LBe.forEach(t),Cvr=i(re),eF=n(re,"LI",{});var BBe=s(eF);Fbe=n(BBe,"STRONG",{});var B3t=s(Fbe);Mvr=r(B3t,"roberta"),B3t.forEach(t),Evr=r(BBe," \u2014 "),sV=n(BBe,"A",{href:!0});var x3t=s(sV);yvr=r(x3t,"TFRobertaForQuestionAnswering"),x3t.forEach(t),wvr=r(BBe," (RoBERTa model)"),BBe.forEach(t),Avr=i(re),oF=n(re,"LI",{});var xBe=s(oF);Cbe=n(xBe,"STRONG",{});var k3t=s(Cbe);Lvr=r(k3t,"roformer"),k3t.forEach(t),Bvr=r(xBe," \u2014 "),lV=n(xBe,"A",{href:!0});var R3t=s(lV);xvr=r(R3t,"TFRoFormerForQuestionAnswering"),R3t.forEach(t),kvr=r(xBe," (RoFormer model)"),xBe.forEach(t),Rvr=i(re),rF=n(re,"LI",{});var kBe=s(rF);Mbe=n(kBe,"STRONG",{});var S3t=s(Mbe);Svr=r(S3t,"xlm"),S3t.forEach(t),Pvr=r(kBe," \u2014 "),iV=n(kBe,"A",{href:!0});var P3t=s(iV);$vr=r(P3t,"TFXLMForQuestionAnsweringSimple"),P3t.forEach(t),Ivr=r(kBe," (XLM model)"),kBe.forEach(t),Dvr=i(re),tF=n(re,"LI",{});var RBe=s(tF);Ebe=n(RBe,"STRONG",{});var $3t=s(Ebe);Nvr=r($3t,"xlm-roberta"),$3t.forEach(t),jvr=r(RBe," \u2014 "),dV=n(RBe,"A",{href:!0});var I3t=s(dV);qvr=r(I3t,"TFXLMRobertaForQuestionAnswering"),I3t.forEach(t),Gvr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),Ovr=i(re),aF=n(re,"LI",{});var SBe=s(aF);ybe=n(SBe,"STRONG",{});var D3t=s(ybe);Xvr=r(D3t,"xlnet"),D3t.forEach(t),Vvr=r(SBe," \u2014 "),cV=n(SBe,"A",{href:!0});var N3t=s(cV);zvr=r(N3t,"TFXLNetForQuestionAnsweringSimple"),N3t.forEach(t),Wvr=r(SBe," (XLNet model)"),SBe.forEach(t),re.forEach(t),Qvr=i(ya),wbe=n(ya,"P",{});var j3t=s(wbe);Hvr=r(j3t,"Examples:"),j3t.forEach(t),Uvr=i(ya),m(_A.$$.fragment,ya),ya.forEach(t),ni.forEach(t),rSe=i(c),Wc=n(c,"H2",{class:!0});var g$e=s(Wc);nF=n(g$e,"A",{id:!0,class:!0,href:!0});var q3t=s(nF);Abe=n(q3t,"SPAN",{});var G3t=s(Abe);m(uA.$$.fragment,G3t),G3t.forEach(t),q3t.forEach(t),Jvr=i(g$e),Lbe=n(g$e,"SPAN",{});var O3t=s(Lbe);Yvr=r(O3t,"TFAutoModelForVision2Seq"),O3t.forEach(t),g$e.forEach(t),tSe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(bA.$$.fragment,li),Kvr=i(li),Qc=n(li,"P",{});var yQ=s(Qc);Zvr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bbe=n(yQ,"CODE",{});var X3t=s(Bbe);e6r=r(X3t,"from_pretrained()"),X3t.forEach(t),o6r=r(yQ,"class method or the "),xbe=n(yQ,"CODE",{});var V3t=s(xbe);r6r=r(V3t,"from_config()"),V3t.forEach(t),t6r=r(yQ,`class
method.`),yQ.forEach(t),a6r=i(li),vA=n(li,"P",{});var h$e=s(vA);n6r=r(h$e,"This class cannot be instantiated directly using "),kbe=n(h$e,"CODE",{});var z3t=s(kbe);s6r=r(z3t,"__init__()"),z3t.forEach(t),l6r=r(h$e," (throws an error)."),h$e.forEach(t),i6r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(TA.$$.fragment,ii),d6r=i(ii),Rbe=n(ii,"P",{});var W3t=s(Rbe);c6r=r(W3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W3t.forEach(t),f6r=i(ii),Hc=n(ii,"P",{});var wQ=s(Hc);m6r=r(wQ,`Note:
Loading a model from its configuration file does `),Sbe=n(wQ,"STRONG",{});var Q3t=s(Sbe);g6r=r(Q3t,"not"),Q3t.forEach(t),h6r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pbe=n(wQ,"CODE",{});var H3t=s(Pbe);p6r=r(H3t,"from_pretrained()"),H3t.forEach(t),_6r=r(wQ,"to load the model weights."),wQ.forEach(t),u6r=i(ii),$be=n(ii,"P",{});var U3t=s($be);b6r=r(U3t,"Examples:"),U3t.forEach(t),v6r=i(ii),m(FA.$$.fragment,ii),ii.forEach(t),T6r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(CA.$$.fragment,wa),F6r=i(wa),Ibe=n(wa,"P",{});var J3t=s(Ibe);C6r=r(J3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J3t.forEach(t),M6r=i(wa),An=n(wa,"P",{});var ZM=s(An);E6r=r(ZM,"The model class to instantiate is selected based on the "),Dbe=n(ZM,"CODE",{});var Y3t=s(Dbe);y6r=r(Y3t,"model_type"),Y3t.forEach(t),w6r=r(ZM,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(ZM,"CODE",{});var K3t=s(Nbe);A6r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),L6r=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(ZM,"CODE",{});var Z3t=s(jbe);B6r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),x6r=r(ZM,":"),ZM.forEach(t),k6r=i(wa),qbe=n(wa,"UL",{});var e2t=s(qbe);sF=n(e2t,"LI",{});var PBe=s(sF);Gbe=n(PBe,"STRONG",{});var o2t=s(Gbe);R6r=r(o2t,"vision-encoder-decoder"),o2t.forEach(t),S6r=r(PBe," \u2014 "),fV=n(PBe,"A",{href:!0});var r2t=s(fV);P6r=r(r2t,"TFVisionEncoderDecoderModel"),r2t.forEach(t),$6r=r(PBe," (Vision Encoder decoder model)"),PBe.forEach(t),e2t.forEach(t),I6r=i(wa),Obe=n(wa,"P",{});var t2t=s(Obe);D6r=r(t2t,"Examples:"),t2t.forEach(t),N6r=i(wa),m(MA.$$.fragment,wa),wa.forEach(t),li.forEach(t),aSe=i(c),Uc=n(c,"H2",{class:!0});var p$e=s(Uc);lF=n(p$e,"A",{id:!0,class:!0,href:!0});var a2t=s(lF);Xbe=n(a2t,"SPAN",{});var n2t=s(Xbe);m(EA.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),j6r=i(p$e),Vbe=n(p$e,"SPAN",{});var s2t=s(Vbe);q6r=r(s2t,"TFAutoModelForSpeechSeq2Seq"),s2t.forEach(t),p$e.forEach(t),nSe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(yA.$$.fragment,di),G6r=i(di),Jc=n(di,"P",{});var AQ=s(Jc);O6r=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zbe=n(AQ,"CODE",{});var l2t=s(zbe);X6r=r(l2t,"from_pretrained()"),l2t.forEach(t),V6r=r(AQ,"class method or the "),Wbe=n(AQ,"CODE",{});var i2t=s(Wbe);z6r=r(i2t,"from_config()"),i2t.forEach(t),W6r=r(AQ,`class
method.`),AQ.forEach(t),Q6r=i(di),wA=n(di,"P",{});var _$e=s(wA);H6r=r(_$e,"This class cannot be instantiated directly using "),Qbe=n(_$e,"CODE",{});var d2t=s(Qbe);U6r=r(d2t,"__init__()"),d2t.forEach(t),J6r=r(_$e," (throws an error)."),_$e.forEach(t),Y6r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(AA.$$.fragment,ci),K6r=i(ci),Hbe=n(ci,"P",{});var c2t=s(Hbe);Z6r=r(c2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c2t.forEach(t),e0r=i(ci),Yc=n(ci,"P",{});var LQ=s(Yc);o0r=r(LQ,`Note:
Loading a model from its configuration file does `),Ube=n(LQ,"STRONG",{});var f2t=s(Ube);r0r=r(f2t,"not"),f2t.forEach(t),t0r=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jbe=n(LQ,"CODE",{});var m2t=s(Jbe);a0r=r(m2t,"from_pretrained()"),m2t.forEach(t),n0r=r(LQ,"to load the model weights."),LQ.forEach(t),s0r=i(ci),Ybe=n(ci,"P",{});var g2t=s(Ybe);l0r=r(g2t,"Examples:"),g2t.forEach(t),i0r=i(ci),m(LA.$$.fragment,ci),ci.forEach(t),d0r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(BA.$$.fragment,Aa),c0r=i(Aa),Kbe=n(Aa,"P",{});var h2t=s(Kbe);f0r=r(h2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h2t.forEach(t),m0r=i(Aa),Ln=n(Aa,"P",{});var e4=s(Ln);g0r=r(e4,"The model class to instantiate is selected based on the "),Zbe=n(e4,"CODE",{});var p2t=s(Zbe);h0r=r(p2t,"model_type"),p2t.forEach(t),p0r=r(e4,` property of the config object (either
passed as an argument or loaded from `),e3e=n(e4,"CODE",{});var _2t=s(e3e);_0r=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),u0r=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(e4,"CODE",{});var u2t=s(o3e);b0r=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),v0r=r(e4,":"),e4.forEach(t),T0r=i(Aa),r3e=n(Aa,"UL",{});var b2t=s(r3e);iF=n(b2t,"LI",{});var $Be=s(iF);t3e=n($Be,"STRONG",{});var v2t=s(t3e);F0r=r(v2t,"speech_to_text"),v2t.forEach(t),C0r=r($Be," \u2014 "),mV=n($Be,"A",{href:!0});var T2t=s(mV);M0r=r(T2t,"TFSpeech2TextForConditionalGeneration"),T2t.forEach(t),E0r=r($Be," (Speech2Text model)"),$Be.forEach(t),b2t.forEach(t),y0r=i(Aa),a3e=n(Aa,"P",{});var F2t=s(a3e);w0r=r(F2t,"Examples:"),F2t.forEach(t),A0r=i(Aa),m(xA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),sSe=i(c),Kc=n(c,"H2",{class:!0});var u$e=s(Kc);dF=n(u$e,"A",{id:!0,class:!0,href:!0});var C2t=s(dF);n3e=n(C2t,"SPAN",{});var M2t=s(n3e);m(kA.$$.fragment,M2t),M2t.forEach(t),C2t.forEach(t),L0r=i(u$e),s3e=n(u$e,"SPAN",{});var E2t=s(s3e);B0r=r(E2t,"FlaxAutoModel"),E2t.forEach(t),u$e.forEach(t),lSe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(RA.$$.fragment,fi),x0r=i(fi),Zc=n(fi,"P",{});var BQ=s(Zc);k0r=r(BQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),l3e=n(BQ,"CODE",{});var y2t=s(l3e);R0r=r(y2t,"from_pretrained()"),y2t.forEach(t),S0r=r(BQ,"class method or the "),i3e=n(BQ,"CODE",{});var w2t=s(i3e);P0r=r(w2t,"from_config()"),w2t.forEach(t),$0r=r(BQ,`class
method.`),BQ.forEach(t),I0r=i(fi),SA=n(fi,"P",{});var b$e=s(SA);D0r=r(b$e,"This class cannot be instantiated directly using "),d3e=n(b$e,"CODE",{});var A2t=s(d3e);N0r=r(A2t,"__init__()"),A2t.forEach(t),j0r=r(b$e," (throws an error)."),b$e.forEach(t),q0r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(PA.$$.fragment,mi),G0r=i(mi),c3e=n(mi,"P",{});var L2t=s(c3e);O0r=r(L2t,"Instantiates one of the base model classes of the library from a configuration."),L2t.forEach(t),X0r=i(mi),ef=n(mi,"P",{});var xQ=s(ef);V0r=r(xQ,`Note:
Loading a model from its configuration file does `),f3e=n(xQ,"STRONG",{});var B2t=s(f3e);z0r=r(B2t,"not"),B2t.forEach(t),W0r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),m3e=n(xQ,"CODE",{});var x2t=s(m3e);Q0r=r(x2t,"from_pretrained()"),x2t.forEach(t),H0r=r(xQ,"to load the model weights."),xQ.forEach(t),U0r=i(mi),g3e=n(mi,"P",{});var k2t=s(g3e);J0r=r(k2t,"Examples:"),k2t.forEach(t),Y0r=i(mi),m($A.$$.fragment,mi),mi.forEach(t),K0r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(IA.$$.fragment,La),Z0r=i(La),h3e=n(La,"P",{});var R2t=s(h3e);eTr=r(R2t,"Instantiate one of the base model classes of the library from a pretrained model."),R2t.forEach(t),oTr=i(La),Bn=n(La,"P",{});var o4=s(Bn);rTr=r(o4,"The model class to instantiate is selected based on the "),p3e=n(o4,"CODE",{});var S2t=s(p3e);tTr=r(S2t,"model_type"),S2t.forEach(t),aTr=r(o4,` property of the config object (either
passed as an argument or loaded from `),_3e=n(o4,"CODE",{});var P2t=s(_3e);nTr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),sTr=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(o4,"CODE",{});var $2t=s(u3e);lTr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),iTr=r(o4,":"),o4.forEach(t),dTr=i(La),z=n(La,"UL",{});var Q=s(z);cF=n(Q,"LI",{});var IBe=s(cF);b3e=n(IBe,"STRONG",{});var I2t=s(b3e);cTr=r(I2t,"albert"),I2t.forEach(t),fTr=r(IBe," \u2014 "),gV=n(IBe,"A",{href:!0});var D2t=s(gV);mTr=r(D2t,"FlaxAlbertModel"),D2t.forEach(t),gTr=r(IBe," (ALBERT model)"),IBe.forEach(t),hTr=i(Q),fF=n(Q,"LI",{});var DBe=s(fF);v3e=n(DBe,"STRONG",{});var N2t=s(v3e);pTr=r(N2t,"bart"),N2t.forEach(t),_Tr=r(DBe," \u2014 "),hV=n(DBe,"A",{href:!0});var j2t=s(hV);uTr=r(j2t,"FlaxBartModel"),j2t.forEach(t),bTr=r(DBe," (BART model)"),DBe.forEach(t),vTr=i(Q),mF=n(Q,"LI",{});var NBe=s(mF);T3e=n(NBe,"STRONG",{});var q2t=s(T3e);TTr=r(q2t,"beit"),q2t.forEach(t),FTr=r(NBe," \u2014 "),pV=n(NBe,"A",{href:!0});var G2t=s(pV);CTr=r(G2t,"FlaxBeitModel"),G2t.forEach(t),MTr=r(NBe," (BEiT model)"),NBe.forEach(t),ETr=i(Q),gF=n(Q,"LI",{});var jBe=s(gF);F3e=n(jBe,"STRONG",{});var O2t=s(F3e);yTr=r(O2t,"bert"),O2t.forEach(t),wTr=r(jBe," \u2014 "),_V=n(jBe,"A",{href:!0});var X2t=s(_V);ATr=r(X2t,"FlaxBertModel"),X2t.forEach(t),LTr=r(jBe," (BERT model)"),jBe.forEach(t),BTr=i(Q),hF=n(Q,"LI",{});var qBe=s(hF);C3e=n(qBe,"STRONG",{});var V2t=s(C3e);xTr=r(V2t,"big_bird"),V2t.forEach(t),kTr=r(qBe," \u2014 "),uV=n(qBe,"A",{href:!0});var z2t=s(uV);RTr=r(z2t,"FlaxBigBirdModel"),z2t.forEach(t),STr=r(qBe," (BigBird model)"),qBe.forEach(t),PTr=i(Q),pF=n(Q,"LI",{});var GBe=s(pF);M3e=n(GBe,"STRONG",{});var W2t=s(M3e);$Tr=r(W2t,"blenderbot"),W2t.forEach(t),ITr=r(GBe," \u2014 "),bV=n(GBe,"A",{href:!0});var Q2t=s(bV);DTr=r(Q2t,"FlaxBlenderbotModel"),Q2t.forEach(t),NTr=r(GBe," (Blenderbot model)"),GBe.forEach(t),jTr=i(Q),_F=n(Q,"LI",{});var OBe=s(_F);E3e=n(OBe,"STRONG",{});var H2t=s(E3e);qTr=r(H2t,"blenderbot-small"),H2t.forEach(t),GTr=r(OBe," \u2014 "),vV=n(OBe,"A",{href:!0});var U2t=s(vV);OTr=r(U2t,"FlaxBlenderbotSmallModel"),U2t.forEach(t),XTr=r(OBe," (BlenderbotSmall model)"),OBe.forEach(t),VTr=i(Q),uF=n(Q,"LI",{});var XBe=s(uF);y3e=n(XBe,"STRONG",{});var J2t=s(y3e);zTr=r(J2t,"clip"),J2t.forEach(t),WTr=r(XBe," \u2014 "),TV=n(XBe,"A",{href:!0});var Y2t=s(TV);QTr=r(Y2t,"FlaxCLIPModel"),Y2t.forEach(t),HTr=r(XBe," (CLIP model)"),XBe.forEach(t),UTr=i(Q),bF=n(Q,"LI",{});var VBe=s(bF);w3e=n(VBe,"STRONG",{});var K2t=s(w3e);JTr=r(K2t,"distilbert"),K2t.forEach(t),YTr=r(VBe," \u2014 "),FV=n(VBe,"A",{href:!0});var Z2t=s(FV);KTr=r(Z2t,"FlaxDistilBertModel"),Z2t.forEach(t),ZTr=r(VBe," (DistilBERT model)"),VBe.forEach(t),e8r=i(Q),vF=n(Q,"LI",{});var zBe=s(vF);A3e=n(zBe,"STRONG",{});var evt=s(A3e);o8r=r(evt,"electra"),evt.forEach(t),r8r=r(zBe," \u2014 "),CV=n(zBe,"A",{href:!0});var ovt=s(CV);t8r=r(ovt,"FlaxElectraModel"),ovt.forEach(t),a8r=r(zBe," (ELECTRA model)"),zBe.forEach(t),n8r=i(Q),TF=n(Q,"LI",{});var WBe=s(TF);L3e=n(WBe,"STRONG",{});var rvt=s(L3e);s8r=r(rvt,"gpt2"),rvt.forEach(t),l8r=r(WBe," \u2014 "),MV=n(WBe,"A",{href:!0});var tvt=s(MV);i8r=r(tvt,"FlaxGPT2Model"),tvt.forEach(t),d8r=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),c8r=i(Q),FF=n(Q,"LI",{});var QBe=s(FF);B3e=n(QBe,"STRONG",{});var avt=s(B3e);f8r=r(avt,"gpt_neo"),avt.forEach(t),m8r=r(QBe," \u2014 "),EV=n(QBe,"A",{href:!0});var nvt=s(EV);g8r=r(nvt,"FlaxGPTNeoModel"),nvt.forEach(t),h8r=r(QBe," (GPT Neo model)"),QBe.forEach(t),p8r=i(Q),CF=n(Q,"LI",{});var HBe=s(CF);x3e=n(HBe,"STRONG",{});var svt=s(x3e);_8r=r(svt,"gptj"),svt.forEach(t),u8r=r(HBe," \u2014 "),yV=n(HBe,"A",{href:!0});var lvt=s(yV);b8r=r(lvt,"FlaxGPTJModel"),lvt.forEach(t),v8r=r(HBe," (GPT-J model)"),HBe.forEach(t),T8r=i(Q),MF=n(Q,"LI",{});var UBe=s(MF);k3e=n(UBe,"STRONG",{});var ivt=s(k3e);F8r=r(ivt,"marian"),ivt.forEach(t),C8r=r(UBe," \u2014 "),wV=n(UBe,"A",{href:!0});var dvt=s(wV);M8r=r(dvt,"FlaxMarianModel"),dvt.forEach(t),E8r=r(UBe," (Marian model)"),UBe.forEach(t),y8r=i(Q),EF=n(Q,"LI",{});var JBe=s(EF);R3e=n(JBe,"STRONG",{});var cvt=s(R3e);w8r=r(cvt,"mbart"),cvt.forEach(t),A8r=r(JBe," \u2014 "),AV=n(JBe,"A",{href:!0});var fvt=s(AV);L8r=r(fvt,"FlaxMBartModel"),fvt.forEach(t),B8r=r(JBe," (mBART model)"),JBe.forEach(t),x8r=i(Q),yF=n(Q,"LI",{});var YBe=s(yF);S3e=n(YBe,"STRONG",{});var mvt=s(S3e);k8r=r(mvt,"mt5"),mvt.forEach(t),R8r=r(YBe," \u2014 "),LV=n(YBe,"A",{href:!0});var gvt=s(LV);S8r=r(gvt,"FlaxMT5Model"),gvt.forEach(t),P8r=r(YBe," (mT5 model)"),YBe.forEach(t),$8r=i(Q),wF=n(Q,"LI",{});var KBe=s(wF);P3e=n(KBe,"STRONG",{});var hvt=s(P3e);I8r=r(hvt,"pegasus"),hvt.forEach(t),D8r=r(KBe," \u2014 "),BV=n(KBe,"A",{href:!0});var pvt=s(BV);N8r=r(pvt,"FlaxPegasusModel"),pvt.forEach(t),j8r=r(KBe," (Pegasus model)"),KBe.forEach(t),q8r=i(Q),AF=n(Q,"LI",{});var ZBe=s(AF);$3e=n(ZBe,"STRONG",{});var _vt=s($3e);G8r=r(_vt,"roberta"),_vt.forEach(t),O8r=r(ZBe," \u2014 "),xV=n(ZBe,"A",{href:!0});var uvt=s(xV);X8r=r(uvt,"FlaxRobertaModel"),uvt.forEach(t),V8r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),z8r=i(Q),LF=n(Q,"LI",{});var exe=s(LF);I3e=n(exe,"STRONG",{});var bvt=s(I3e);W8r=r(bvt,"roformer"),bvt.forEach(t),Q8r=r(exe," \u2014 "),kV=n(exe,"A",{href:!0});var vvt=s(kV);H8r=r(vvt,"FlaxRoFormerModel"),vvt.forEach(t),U8r=r(exe," (RoFormer model)"),exe.forEach(t),J8r=i(Q),BF=n(Q,"LI",{});var oxe=s(BF);D3e=n(oxe,"STRONG",{});var Tvt=s(D3e);Y8r=r(Tvt,"t5"),Tvt.forEach(t),K8r=r(oxe," \u2014 "),RV=n(oxe,"A",{href:!0});var Fvt=s(RV);Z8r=r(Fvt,"FlaxT5Model"),Fvt.forEach(t),eFr=r(oxe," (T5 model)"),oxe.forEach(t),oFr=i(Q),xF=n(Q,"LI",{});var rxe=s(xF);N3e=n(rxe,"STRONG",{});var Cvt=s(N3e);rFr=r(Cvt,"vision-text-dual-encoder"),Cvt.forEach(t),tFr=r(rxe," \u2014 "),SV=n(rxe,"A",{href:!0});var Mvt=s(SV);aFr=r(Mvt,"FlaxVisionTextDualEncoderModel"),Mvt.forEach(t),nFr=r(rxe," (VisionTextDualEncoder model)"),rxe.forEach(t),sFr=i(Q),kF=n(Q,"LI",{});var txe=s(kF);j3e=n(txe,"STRONG",{});var Evt=s(j3e);lFr=r(Evt,"vit"),Evt.forEach(t),iFr=r(txe," \u2014 "),PV=n(txe,"A",{href:!0});var yvt=s(PV);dFr=r(yvt,"FlaxViTModel"),yvt.forEach(t),cFr=r(txe," (ViT model)"),txe.forEach(t),fFr=i(Q),RF=n(Q,"LI",{});var axe=s(RF);q3e=n(axe,"STRONG",{});var wvt=s(q3e);mFr=r(wvt,"wav2vec2"),wvt.forEach(t),gFr=r(axe," \u2014 "),$V=n(axe,"A",{href:!0});var Avt=s($V);hFr=r(Avt,"FlaxWav2Vec2Model"),Avt.forEach(t),pFr=r(axe," (Wav2Vec2 model)"),axe.forEach(t),_Fr=i(Q),SF=n(Q,"LI",{});var nxe=s(SF);G3e=n(nxe,"STRONG",{});var Lvt=s(G3e);uFr=r(Lvt,"xglm"),Lvt.forEach(t),bFr=r(nxe," \u2014 "),IV=n(nxe,"A",{href:!0});var Bvt=s(IV);vFr=r(Bvt,"FlaxXGLMModel"),Bvt.forEach(t),TFr=r(nxe," (XGLM model)"),nxe.forEach(t),FFr=i(Q),PF=n(Q,"LI",{});var sxe=s(PF);O3e=n(sxe,"STRONG",{});var xvt=s(O3e);CFr=r(xvt,"xlm-roberta"),xvt.forEach(t),MFr=r(sxe," \u2014 "),DV=n(sxe,"A",{href:!0});var kvt=s(DV);EFr=r(kvt,"FlaxXLMRobertaModel"),kvt.forEach(t),yFr=r(sxe," (XLM-RoBERTa model)"),sxe.forEach(t),Q.forEach(t),wFr=i(La),X3e=n(La,"P",{});var Rvt=s(X3e);AFr=r(Rvt,"Examples:"),Rvt.forEach(t),LFr=i(La),m(DA.$$.fragment,La),La.forEach(t),fi.forEach(t),iSe=i(c),of=n(c,"H2",{class:!0});var v$e=s(of);$F=n(v$e,"A",{id:!0,class:!0,href:!0});var Svt=s($F);V3e=n(Svt,"SPAN",{});var Pvt=s(V3e);m(NA.$$.fragment,Pvt),Pvt.forEach(t),Svt.forEach(t),BFr=i(v$e),z3e=n(v$e,"SPAN",{});var $vt=s(z3e);xFr=r($vt,"FlaxAutoModelForCausalLM"),$vt.forEach(t),v$e.forEach(t),dSe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(jA.$$.fragment,gi),kFr=i(gi),rf=n(gi,"P",{});var kQ=s(rf);RFr=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),W3e=n(kQ,"CODE",{});var Ivt=s(W3e);SFr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),PFr=r(kQ,"class method or the "),Q3e=n(kQ,"CODE",{});var Dvt=s(Q3e);$Fr=r(Dvt,"from_config()"),Dvt.forEach(t),IFr=r(kQ,`class
method.`),kQ.forEach(t),DFr=i(gi),qA=n(gi,"P",{});var T$e=s(qA);NFr=r(T$e,"This class cannot be instantiated directly using "),H3e=n(T$e,"CODE",{});var Nvt=s(H3e);jFr=r(Nvt,"__init__()"),Nvt.forEach(t),qFr=r(T$e," (throws an error)."),T$e.forEach(t),GFr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(GA.$$.fragment,hi),OFr=i(hi),U3e=n(hi,"P",{});var jvt=s(U3e);XFr=r(jvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jvt.forEach(t),VFr=i(hi),tf=n(hi,"P",{});var RQ=s(tf);zFr=r(RQ,`Note:
Loading a model from its configuration file does `),J3e=n(RQ,"STRONG",{});var qvt=s(J3e);WFr=r(qvt,"not"),qvt.forEach(t),QFr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y3e=n(RQ,"CODE",{});var Gvt=s(Y3e);HFr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),UFr=r(RQ,"to load the model weights."),RQ.forEach(t),JFr=i(hi),K3e=n(hi,"P",{});var Ovt=s(K3e);YFr=r(Ovt,"Examples:"),Ovt.forEach(t),KFr=i(hi),m(OA.$$.fragment,hi),hi.forEach(t),ZFr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(XA.$$.fragment,Ba),eCr=i(Ba),Z3e=n(Ba,"P",{});var Xvt=s(Z3e);oCr=r(Xvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xvt.forEach(t),rCr=i(Ba),xn=n(Ba,"P",{});var r4=s(xn);tCr=r(r4,"The model class to instantiate is selected based on the "),e2e=n(r4,"CODE",{});var Vvt=s(e2e);aCr=r(Vvt,"model_type"),Vvt.forEach(t),nCr=r(r4,` property of the config object (either
passed as an argument or loaded from `),o2e=n(r4,"CODE",{});var zvt=s(o2e);sCr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),lCr=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(r4,"CODE",{});var Wvt=s(r2e);iCr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),dCr=r(r4,":"),r4.forEach(t),cCr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);IF=n(pi,"LI",{});var lxe=s(IF);t2e=n(lxe,"STRONG",{});var Qvt=s(t2e);fCr=r(Qvt,"bart"),Qvt.forEach(t),mCr=r(lxe," \u2014 "),NV=n(lxe,"A",{href:!0});var Hvt=s(NV);gCr=r(Hvt,"FlaxBartForCausalLM"),Hvt.forEach(t),hCr=r(lxe," (BART model)"),lxe.forEach(t),pCr=i(pi),DF=n(pi,"LI",{});var ixe=s(DF);a2e=n(ixe,"STRONG",{});var Uvt=s(a2e);_Cr=r(Uvt,"gpt2"),Uvt.forEach(t),uCr=r(ixe," \u2014 "),jV=n(ixe,"A",{href:!0});var Jvt=s(jV);bCr=r(Jvt,"FlaxGPT2LMHeadModel"),Jvt.forEach(t),vCr=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),TCr=i(pi),NF=n(pi,"LI",{});var dxe=s(NF);n2e=n(dxe,"STRONG",{});var Yvt=s(n2e);FCr=r(Yvt,"gpt_neo"),Yvt.forEach(t),CCr=r(dxe," \u2014 "),qV=n(dxe,"A",{href:!0});var Kvt=s(qV);MCr=r(Kvt,"FlaxGPTNeoForCausalLM"),Kvt.forEach(t),ECr=r(dxe," (GPT Neo model)"),dxe.forEach(t),yCr=i(pi),jF=n(pi,"LI",{});var cxe=s(jF);s2e=n(cxe,"STRONG",{});var Zvt=s(s2e);wCr=r(Zvt,"gptj"),Zvt.forEach(t),ACr=r(cxe," \u2014 "),GV=n(cxe,"A",{href:!0});var e6t=s(GV);LCr=r(e6t,"FlaxGPTJForCausalLM"),e6t.forEach(t),BCr=r(cxe," (GPT-J model)"),cxe.forEach(t),xCr=i(pi),qF=n(pi,"LI",{});var fxe=s(qF);l2e=n(fxe,"STRONG",{});var o6t=s(l2e);kCr=r(o6t,"xglm"),o6t.forEach(t),RCr=r(fxe," \u2014 "),OV=n(fxe,"A",{href:!0});var r6t=s(OV);SCr=r(r6t,"FlaxXGLMForCausalLM"),r6t.forEach(t),PCr=r(fxe," (XGLM model)"),fxe.forEach(t),pi.forEach(t),$Cr=i(Ba),i2e=n(Ba,"P",{});var t6t=s(i2e);ICr=r(t6t,"Examples:"),t6t.forEach(t),DCr=i(Ba),m(VA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),cSe=i(c),af=n(c,"H2",{class:!0});var F$e=s(af);GF=n(F$e,"A",{id:!0,class:!0,href:!0});var a6t=s(GF);d2e=n(a6t,"SPAN",{});var n6t=s(d2e);m(zA.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),NCr=i(F$e),c2e=n(F$e,"SPAN",{});var s6t=s(c2e);jCr=r(s6t,"FlaxAutoModelForPreTraining"),s6t.forEach(t),F$e.forEach(t),fSe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(WA.$$.fragment,_i),qCr=i(_i),nf=n(_i,"P",{});var SQ=s(nf);GCr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f2e=n(SQ,"CODE",{});var l6t=s(f2e);OCr=r(l6t,"from_pretrained()"),l6t.forEach(t),XCr=r(SQ,"class method or the "),m2e=n(SQ,"CODE",{});var i6t=s(m2e);VCr=r(i6t,"from_config()"),i6t.forEach(t),zCr=r(SQ,`class
method.`),SQ.forEach(t),WCr=i(_i),QA=n(_i,"P",{});var C$e=s(QA);QCr=r(C$e,"This class cannot be instantiated directly using "),g2e=n(C$e,"CODE",{});var d6t=s(g2e);HCr=r(d6t,"__init__()"),d6t.forEach(t),UCr=r(C$e," (throws an error)."),C$e.forEach(t),JCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(HA.$$.fragment,ui),YCr=i(ui),h2e=n(ui,"P",{});var c6t=s(h2e);KCr=r(c6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c6t.forEach(t),ZCr=i(ui),sf=n(ui,"P",{});var PQ=s(sf);eMr=r(PQ,`Note:
Loading a model from its configuration file does `),p2e=n(PQ,"STRONG",{});var f6t=s(p2e);oMr=r(f6t,"not"),f6t.forEach(t),rMr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_2e=n(PQ,"CODE",{});var m6t=s(_2e);tMr=r(m6t,"from_pretrained()"),m6t.forEach(t),aMr=r(PQ,"to load the model weights."),PQ.forEach(t),nMr=i(ui),u2e=n(ui,"P",{});var g6t=s(u2e);sMr=r(g6t,"Examples:"),g6t.forEach(t),lMr=i(ui),m(UA.$$.fragment,ui),ui.forEach(t),iMr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(JA.$$.fragment,xa),dMr=i(xa),b2e=n(xa,"P",{});var h6t=s(b2e);cMr=r(h6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h6t.forEach(t),fMr=i(xa),kn=n(xa,"P",{});var t4=s(kn);mMr=r(t4,"The model class to instantiate is selected based on the "),v2e=n(t4,"CODE",{});var p6t=s(v2e);gMr=r(p6t,"model_type"),p6t.forEach(t),hMr=r(t4,` property of the config object (either
passed as an argument or loaded from `),T2e=n(t4,"CODE",{});var _6t=s(T2e);pMr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),_Mr=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(t4,"CODE",{});var u6t=s(F2e);uMr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),bMr=r(t4,":"),t4.forEach(t),vMr=i(xa),fe=n(xa,"UL",{});var pe=s(fe);OF=n(pe,"LI",{});var mxe=s(OF);C2e=n(mxe,"STRONG",{});var b6t=s(C2e);TMr=r(b6t,"albert"),b6t.forEach(t),FMr=r(mxe," \u2014 "),XV=n(mxe,"A",{href:!0});var v6t=s(XV);CMr=r(v6t,"FlaxAlbertForPreTraining"),v6t.forEach(t),MMr=r(mxe," (ALBERT model)"),mxe.forEach(t),EMr=i(pe),XF=n(pe,"LI",{});var gxe=s(XF);M2e=n(gxe,"STRONG",{});var T6t=s(M2e);yMr=r(T6t,"bart"),T6t.forEach(t),wMr=r(gxe," \u2014 "),VV=n(gxe,"A",{href:!0});var F6t=s(VV);AMr=r(F6t,"FlaxBartForConditionalGeneration"),F6t.forEach(t),LMr=r(gxe," (BART model)"),gxe.forEach(t),BMr=i(pe),VF=n(pe,"LI",{});var hxe=s(VF);E2e=n(hxe,"STRONG",{});var C6t=s(E2e);xMr=r(C6t,"bert"),C6t.forEach(t),kMr=r(hxe," \u2014 "),zV=n(hxe,"A",{href:!0});var M6t=s(zV);RMr=r(M6t,"FlaxBertForPreTraining"),M6t.forEach(t),SMr=r(hxe," (BERT model)"),hxe.forEach(t),PMr=i(pe),zF=n(pe,"LI",{});var pxe=s(zF);y2e=n(pxe,"STRONG",{});var E6t=s(y2e);$Mr=r(E6t,"big_bird"),E6t.forEach(t),IMr=r(pxe," \u2014 "),WV=n(pxe,"A",{href:!0});var y6t=s(WV);DMr=r(y6t,"FlaxBigBirdForPreTraining"),y6t.forEach(t),NMr=r(pxe," (BigBird model)"),pxe.forEach(t),jMr=i(pe),WF=n(pe,"LI",{});var _xe=s(WF);w2e=n(_xe,"STRONG",{});var w6t=s(w2e);qMr=r(w6t,"electra"),w6t.forEach(t),GMr=r(_xe," \u2014 "),QV=n(_xe,"A",{href:!0});var A6t=s(QV);OMr=r(A6t,"FlaxElectraForPreTraining"),A6t.forEach(t),XMr=r(_xe," (ELECTRA model)"),_xe.forEach(t),VMr=i(pe),QF=n(pe,"LI",{});var uxe=s(QF);A2e=n(uxe,"STRONG",{});var L6t=s(A2e);zMr=r(L6t,"mbart"),L6t.forEach(t),WMr=r(uxe," \u2014 "),HV=n(uxe,"A",{href:!0});var B6t=s(HV);QMr=r(B6t,"FlaxMBartForConditionalGeneration"),B6t.forEach(t),HMr=r(uxe," (mBART model)"),uxe.forEach(t),UMr=i(pe),HF=n(pe,"LI",{});var bxe=s(HF);L2e=n(bxe,"STRONG",{});var x6t=s(L2e);JMr=r(x6t,"mt5"),x6t.forEach(t),YMr=r(bxe," \u2014 "),UV=n(bxe,"A",{href:!0});var k6t=s(UV);KMr=r(k6t,"FlaxMT5ForConditionalGeneration"),k6t.forEach(t),ZMr=r(bxe," (mT5 model)"),bxe.forEach(t),e4r=i(pe),UF=n(pe,"LI",{});var vxe=s(UF);B2e=n(vxe,"STRONG",{});var R6t=s(B2e);o4r=r(R6t,"roberta"),R6t.forEach(t),r4r=r(vxe," \u2014 "),JV=n(vxe,"A",{href:!0});var S6t=s(JV);t4r=r(S6t,"FlaxRobertaForMaskedLM"),S6t.forEach(t),a4r=r(vxe," (RoBERTa model)"),vxe.forEach(t),n4r=i(pe),JF=n(pe,"LI",{});var Txe=s(JF);x2e=n(Txe,"STRONG",{});var P6t=s(x2e);s4r=r(P6t,"roformer"),P6t.forEach(t),l4r=r(Txe," \u2014 "),YV=n(Txe,"A",{href:!0});var $6t=s(YV);i4r=r($6t,"FlaxRoFormerForMaskedLM"),$6t.forEach(t),d4r=r(Txe," (RoFormer model)"),Txe.forEach(t),c4r=i(pe),YF=n(pe,"LI",{});var Fxe=s(YF);k2e=n(Fxe,"STRONG",{});var I6t=s(k2e);f4r=r(I6t,"t5"),I6t.forEach(t),m4r=r(Fxe," \u2014 "),KV=n(Fxe,"A",{href:!0});var D6t=s(KV);g4r=r(D6t,"FlaxT5ForConditionalGeneration"),D6t.forEach(t),h4r=r(Fxe," (T5 model)"),Fxe.forEach(t),p4r=i(pe),KF=n(pe,"LI",{});var Cxe=s(KF);R2e=n(Cxe,"STRONG",{});var N6t=s(R2e);_4r=r(N6t,"wav2vec2"),N6t.forEach(t),u4r=r(Cxe," \u2014 "),ZV=n(Cxe,"A",{href:!0});var j6t=s(ZV);b4r=r(j6t,"FlaxWav2Vec2ForPreTraining"),j6t.forEach(t),v4r=r(Cxe," (Wav2Vec2 model)"),Cxe.forEach(t),T4r=i(pe),ZF=n(pe,"LI",{});var Mxe=s(ZF);S2e=n(Mxe,"STRONG",{});var q6t=s(S2e);F4r=r(q6t,"xlm-roberta"),q6t.forEach(t),C4r=r(Mxe," \u2014 "),ez=n(Mxe,"A",{href:!0});var G6t=s(ez);M4r=r(G6t,"FlaxXLMRobertaForMaskedLM"),G6t.forEach(t),E4r=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),pe.forEach(t),y4r=i(xa),P2e=n(xa,"P",{});var O6t=s(P2e);w4r=r(O6t,"Examples:"),O6t.forEach(t),A4r=i(xa),m(YA.$$.fragment,xa),xa.forEach(t),_i.forEach(t),mSe=i(c),lf=n(c,"H2",{class:!0});var M$e=s(lf);eC=n(M$e,"A",{id:!0,class:!0,href:!0});var X6t=s(eC);$2e=n(X6t,"SPAN",{});var V6t=s($2e);m(KA.$$.fragment,V6t),V6t.forEach(t),X6t.forEach(t),L4r=i(M$e),I2e=n(M$e,"SPAN",{});var z6t=s(I2e);B4r=r(z6t,"FlaxAutoModelForMaskedLM"),z6t.forEach(t),M$e.forEach(t),gSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(ZA.$$.fragment,bi),x4r=i(bi),df=n(bi,"P",{});var $Q=s(df);k4r=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D2e=n($Q,"CODE",{});var W6t=s(D2e);R4r=r(W6t,"from_pretrained()"),W6t.forEach(t),S4r=r($Q,"class method or the "),N2e=n($Q,"CODE",{});var Q6t=s(N2e);P4r=r(Q6t,"from_config()"),Q6t.forEach(t),$4r=r($Q,`class
method.`),$Q.forEach(t),I4r=i(bi),eL=n(bi,"P",{});var E$e=s(eL);D4r=r(E$e,"This class cannot be instantiated directly using "),j2e=n(E$e,"CODE",{});var H6t=s(j2e);N4r=r(H6t,"__init__()"),H6t.forEach(t),j4r=r(E$e," (throws an error)."),E$e.forEach(t),q4r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(oL.$$.fragment,vi),G4r=i(vi),q2e=n(vi,"P",{});var U6t=s(q2e);O4r=r(U6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),U6t.forEach(t),X4r=i(vi),cf=n(vi,"P",{});var IQ=s(cf);V4r=r(IQ,`Note:
Loading a model from its configuration file does `),G2e=n(IQ,"STRONG",{});var J6t=s(G2e);z4r=r(J6t,"not"),J6t.forEach(t),W4r=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),O2e=n(IQ,"CODE",{});var Y6t=s(O2e);Q4r=r(Y6t,"from_pretrained()"),Y6t.forEach(t),H4r=r(IQ,"to load the model weights."),IQ.forEach(t),U4r=i(vi),X2e=n(vi,"P",{});var K6t=s(X2e);J4r=r(K6t,"Examples:"),K6t.forEach(t),Y4r=i(vi),m(rL.$$.fragment,vi),vi.forEach(t),K4r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(tL.$$.fragment,ka),Z4r=i(ka),V2e=n(ka,"P",{});var Z6t=s(V2e);eEr=r(Z6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z6t.forEach(t),oEr=i(ka),Rn=n(ka,"P",{});var a4=s(Rn);rEr=r(a4,"The model class to instantiate is selected based on the "),z2e=n(a4,"CODE",{});var e0t=s(z2e);tEr=r(e0t,"model_type"),e0t.forEach(t),aEr=r(a4,` property of the config object (either
passed as an argument or loaded from `),W2e=n(a4,"CODE",{});var o0t=s(W2e);nEr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),sEr=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(a4,"CODE",{});var r0t=s(Q2e);lEr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),iEr=r(a4,":"),a4.forEach(t),dEr=i(ka),be=n(ka,"UL",{});var we=s(be);oC=n(we,"LI",{});var Exe=s(oC);H2e=n(Exe,"STRONG",{});var t0t=s(H2e);cEr=r(t0t,"albert"),t0t.forEach(t),fEr=r(Exe," \u2014 "),oz=n(Exe,"A",{href:!0});var a0t=s(oz);mEr=r(a0t,"FlaxAlbertForMaskedLM"),a0t.forEach(t),gEr=r(Exe," (ALBERT model)"),Exe.forEach(t),hEr=i(we),rC=n(we,"LI",{});var yxe=s(rC);U2e=n(yxe,"STRONG",{});var n0t=s(U2e);pEr=r(n0t,"bart"),n0t.forEach(t),_Er=r(yxe," \u2014 "),rz=n(yxe,"A",{href:!0});var s0t=s(rz);uEr=r(s0t,"FlaxBartForConditionalGeneration"),s0t.forEach(t),bEr=r(yxe," (BART model)"),yxe.forEach(t),vEr=i(we),tC=n(we,"LI",{});var wxe=s(tC);J2e=n(wxe,"STRONG",{});var l0t=s(J2e);TEr=r(l0t,"bert"),l0t.forEach(t),FEr=r(wxe," \u2014 "),tz=n(wxe,"A",{href:!0});var i0t=s(tz);CEr=r(i0t,"FlaxBertForMaskedLM"),i0t.forEach(t),MEr=r(wxe," (BERT model)"),wxe.forEach(t),EEr=i(we),aC=n(we,"LI",{});var Axe=s(aC);Y2e=n(Axe,"STRONG",{});var d0t=s(Y2e);yEr=r(d0t,"big_bird"),d0t.forEach(t),wEr=r(Axe," \u2014 "),az=n(Axe,"A",{href:!0});var c0t=s(az);AEr=r(c0t,"FlaxBigBirdForMaskedLM"),c0t.forEach(t),LEr=r(Axe," (BigBird model)"),Axe.forEach(t),BEr=i(we),nC=n(we,"LI",{});var Lxe=s(nC);K2e=n(Lxe,"STRONG",{});var f0t=s(K2e);xEr=r(f0t,"distilbert"),f0t.forEach(t),kEr=r(Lxe," \u2014 "),nz=n(Lxe,"A",{href:!0});var m0t=s(nz);REr=r(m0t,"FlaxDistilBertForMaskedLM"),m0t.forEach(t),SEr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),PEr=i(we),sC=n(we,"LI",{});var Bxe=s(sC);Z2e=n(Bxe,"STRONG",{});var g0t=s(Z2e);$Er=r(g0t,"electra"),g0t.forEach(t),IEr=r(Bxe," \u2014 "),sz=n(Bxe,"A",{href:!0});var h0t=s(sz);DEr=r(h0t,"FlaxElectraForMaskedLM"),h0t.forEach(t),NEr=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),jEr=i(we),lC=n(we,"LI",{});var xxe=s(lC);eve=n(xxe,"STRONG",{});var p0t=s(eve);qEr=r(p0t,"mbart"),p0t.forEach(t),GEr=r(xxe," \u2014 "),lz=n(xxe,"A",{href:!0});var _0t=s(lz);OEr=r(_0t,"FlaxMBartForConditionalGeneration"),_0t.forEach(t),XEr=r(xxe," (mBART model)"),xxe.forEach(t),VEr=i(we),iC=n(we,"LI",{});var kxe=s(iC);ove=n(kxe,"STRONG",{});var u0t=s(ove);zEr=r(u0t,"roberta"),u0t.forEach(t),WEr=r(kxe," \u2014 "),iz=n(kxe,"A",{href:!0});var b0t=s(iz);QEr=r(b0t,"FlaxRobertaForMaskedLM"),b0t.forEach(t),HEr=r(kxe," (RoBERTa model)"),kxe.forEach(t),UEr=i(we),dC=n(we,"LI",{});var Rxe=s(dC);rve=n(Rxe,"STRONG",{});var v0t=s(rve);JEr=r(v0t,"roformer"),v0t.forEach(t),YEr=r(Rxe," \u2014 "),dz=n(Rxe,"A",{href:!0});var T0t=s(dz);KEr=r(T0t,"FlaxRoFormerForMaskedLM"),T0t.forEach(t),ZEr=r(Rxe," (RoFormer model)"),Rxe.forEach(t),e5r=i(we),cC=n(we,"LI",{});var Sxe=s(cC);tve=n(Sxe,"STRONG",{});var F0t=s(tve);o5r=r(F0t,"xlm-roberta"),F0t.forEach(t),r5r=r(Sxe," \u2014 "),cz=n(Sxe,"A",{href:!0});var C0t=s(cz);t5r=r(C0t,"FlaxXLMRobertaForMaskedLM"),C0t.forEach(t),a5r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),we.forEach(t),n5r=i(ka),ave=n(ka,"P",{});var M0t=s(ave);s5r=r(M0t,"Examples:"),M0t.forEach(t),l5r=i(ka),m(aL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),hSe=i(c),ff=n(c,"H2",{class:!0});var y$e=s(ff);fC=n(y$e,"A",{id:!0,class:!0,href:!0});var E0t=s(fC);nve=n(E0t,"SPAN",{});var y0t=s(nve);m(nL.$$.fragment,y0t),y0t.forEach(t),E0t.forEach(t),i5r=i(y$e),sve=n(y$e,"SPAN",{});var w0t=s(sve);d5r=r(w0t,"FlaxAutoModelForSeq2SeqLM"),w0t.forEach(t),y$e.forEach(t),pSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(sL.$$.fragment,Ti),c5r=i(Ti),mf=n(Ti,"P",{});var DQ=s(mf);f5r=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lve=n(DQ,"CODE",{});var A0t=s(lve);m5r=r(A0t,"from_pretrained()"),A0t.forEach(t),g5r=r(DQ,"class method or the "),ive=n(DQ,"CODE",{});var L0t=s(ive);h5r=r(L0t,"from_config()"),L0t.forEach(t),p5r=r(DQ,`class
method.`),DQ.forEach(t),_5r=i(Ti),lL=n(Ti,"P",{});var w$e=s(lL);u5r=r(w$e,"This class cannot be instantiated directly using "),dve=n(w$e,"CODE",{});var B0t=s(dve);b5r=r(B0t,"__init__()"),B0t.forEach(t),v5r=r(w$e," (throws an error)."),w$e.forEach(t),T5r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(iL.$$.fragment,Fi),F5r=i(Fi),cve=n(Fi,"P",{});var x0t=s(cve);C5r=r(x0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x0t.forEach(t),M5r=i(Fi),gf=n(Fi,"P",{});var NQ=s(gf);E5r=r(NQ,`Note:
Loading a model from its configuration file does `),fve=n(NQ,"STRONG",{});var k0t=s(fve);y5r=r(k0t,"not"),k0t.forEach(t),w5r=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=n(NQ,"CODE",{});var R0t=s(mve);A5r=r(R0t,"from_pretrained()"),R0t.forEach(t),L5r=r(NQ,"to load the model weights."),NQ.forEach(t),B5r=i(Fi),gve=n(Fi,"P",{});var S0t=s(gve);x5r=r(S0t,"Examples:"),S0t.forEach(t),k5r=i(Fi),m(dL.$$.fragment,Fi),Fi.forEach(t),R5r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(cL.$$.fragment,Ra),S5r=i(Ra),hve=n(Ra,"P",{});var P0t=s(hve);P5r=r(P0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P0t.forEach(t),$5r=i(Ra),Sn=n(Ra,"P",{});var n4=s(Sn);I5r=r(n4,"The model class to instantiate is selected based on the "),pve=n(n4,"CODE",{});var $0t=s(pve);D5r=r($0t,"model_type"),$0t.forEach(t),N5r=r(n4,` property of the config object (either
passed as an argument or loaded from `),_ve=n(n4,"CODE",{});var I0t=s(_ve);j5r=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),q5r=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(n4,"CODE",{});var D0t=s(uve);G5r=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),O5r=r(n4,":"),n4.forEach(t),X5r=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);mC=n(so,"LI",{});var Pxe=s(mC);bve=n(Pxe,"STRONG",{});var N0t=s(bve);V5r=r(N0t,"bart"),N0t.forEach(t),z5r=r(Pxe," \u2014 "),fz=n(Pxe,"A",{href:!0});var j0t=s(fz);W5r=r(j0t,"FlaxBartForConditionalGeneration"),j0t.forEach(t),Q5r=r(Pxe," (BART model)"),Pxe.forEach(t),H5r=i(so),gC=n(so,"LI",{});var $xe=s(gC);vve=n($xe,"STRONG",{});var q0t=s(vve);U5r=r(q0t,"blenderbot"),q0t.forEach(t),J5r=r($xe," \u2014 "),mz=n($xe,"A",{href:!0});var G0t=s(mz);Y5r=r(G0t,"FlaxBlenderbotForConditionalGeneration"),G0t.forEach(t),K5r=r($xe," (Blenderbot model)"),$xe.forEach(t),Z5r=i(so),hC=n(so,"LI",{});var Ixe=s(hC);Tve=n(Ixe,"STRONG",{});var O0t=s(Tve);eyr=r(O0t,"blenderbot-small"),O0t.forEach(t),oyr=r(Ixe," \u2014 "),gz=n(Ixe,"A",{href:!0});var X0t=s(gz);ryr=r(X0t,"FlaxBlenderbotSmallForConditionalGeneration"),X0t.forEach(t),tyr=r(Ixe," (BlenderbotSmall model)"),Ixe.forEach(t),ayr=i(so),pC=n(so,"LI",{});var Dxe=s(pC);Fve=n(Dxe,"STRONG",{});var V0t=s(Fve);nyr=r(V0t,"encoder-decoder"),V0t.forEach(t),syr=r(Dxe," \u2014 "),hz=n(Dxe,"A",{href:!0});var z0t=s(hz);lyr=r(z0t,"FlaxEncoderDecoderModel"),z0t.forEach(t),iyr=r(Dxe," (Encoder decoder model)"),Dxe.forEach(t),dyr=i(so),_C=n(so,"LI",{});var Nxe=s(_C);Cve=n(Nxe,"STRONG",{});var W0t=s(Cve);cyr=r(W0t,"marian"),W0t.forEach(t),fyr=r(Nxe," \u2014 "),pz=n(Nxe,"A",{href:!0});var Q0t=s(pz);myr=r(Q0t,"FlaxMarianMTModel"),Q0t.forEach(t),gyr=r(Nxe," (Marian model)"),Nxe.forEach(t),hyr=i(so),uC=n(so,"LI",{});var jxe=s(uC);Mve=n(jxe,"STRONG",{});var H0t=s(Mve);pyr=r(H0t,"mbart"),H0t.forEach(t),_yr=r(jxe," \u2014 "),_z=n(jxe,"A",{href:!0});var U0t=s(_z);uyr=r(U0t,"FlaxMBartForConditionalGeneration"),U0t.forEach(t),byr=r(jxe," (mBART model)"),jxe.forEach(t),vyr=i(so),bC=n(so,"LI",{});var qxe=s(bC);Eve=n(qxe,"STRONG",{});var J0t=s(Eve);Tyr=r(J0t,"mt5"),J0t.forEach(t),Fyr=r(qxe," \u2014 "),uz=n(qxe,"A",{href:!0});var Y0t=s(uz);Cyr=r(Y0t,"FlaxMT5ForConditionalGeneration"),Y0t.forEach(t),Myr=r(qxe," (mT5 model)"),qxe.forEach(t),Eyr=i(so),vC=n(so,"LI",{});var Gxe=s(vC);yve=n(Gxe,"STRONG",{});var K0t=s(yve);yyr=r(K0t,"pegasus"),K0t.forEach(t),wyr=r(Gxe," \u2014 "),bz=n(Gxe,"A",{href:!0});var Z0t=s(bz);Ayr=r(Z0t,"FlaxPegasusForConditionalGeneration"),Z0t.forEach(t),Lyr=r(Gxe," (Pegasus model)"),Gxe.forEach(t),Byr=i(so),TC=n(so,"LI",{});var Oxe=s(TC);wve=n(Oxe,"STRONG",{});var eTt=s(wve);xyr=r(eTt,"t5"),eTt.forEach(t),kyr=r(Oxe," \u2014 "),vz=n(Oxe,"A",{href:!0});var oTt=s(vz);Ryr=r(oTt,"FlaxT5ForConditionalGeneration"),oTt.forEach(t),Syr=r(Oxe," (T5 model)"),Oxe.forEach(t),so.forEach(t),Pyr=i(Ra),Ave=n(Ra,"P",{});var rTt=s(Ave);$yr=r(rTt,"Examples:"),rTt.forEach(t),Iyr=i(Ra),m(fL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),_Se=i(c),hf=n(c,"H2",{class:!0});var A$e=s(hf);FC=n(A$e,"A",{id:!0,class:!0,href:!0});var tTt=s(FC);Lve=n(tTt,"SPAN",{});var aTt=s(Lve);m(mL.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),Dyr=i(A$e),Bve=n(A$e,"SPAN",{});var nTt=s(Bve);Nyr=r(nTt,"FlaxAutoModelForSequenceClassification"),nTt.forEach(t),A$e.forEach(t),uSe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(gL.$$.fragment,Ci),jyr=i(Ci),pf=n(Ci,"P",{});var jQ=s(pf);qyr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xve=n(jQ,"CODE",{});var sTt=s(xve);Gyr=r(sTt,"from_pretrained()"),sTt.forEach(t),Oyr=r(jQ,"class method or the "),kve=n(jQ,"CODE",{});var lTt=s(kve);Xyr=r(lTt,"from_config()"),lTt.forEach(t),Vyr=r(jQ,`class
method.`),jQ.forEach(t),zyr=i(Ci),hL=n(Ci,"P",{});var L$e=s(hL);Wyr=r(L$e,"This class cannot be instantiated directly using "),Rve=n(L$e,"CODE",{});var iTt=s(Rve);Qyr=r(iTt,"__init__()"),iTt.forEach(t),Hyr=r(L$e," (throws an error)."),L$e.forEach(t),Uyr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(pL.$$.fragment,Mi),Jyr=i(Mi),Sve=n(Mi,"P",{});var dTt=s(Sve);Yyr=r(dTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dTt.forEach(t),Kyr=i(Mi),_f=n(Mi,"P",{});var qQ=s(_f);Zyr=r(qQ,`Note:
Loading a model from its configuration file does `),Pve=n(qQ,"STRONG",{});var cTt=s(Pve);ewr=r(cTt,"not"),cTt.forEach(t),owr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=n(qQ,"CODE",{});var fTt=s($ve);rwr=r(fTt,"from_pretrained()"),fTt.forEach(t),twr=r(qQ,"to load the model weights."),qQ.forEach(t),awr=i(Mi),Ive=n(Mi,"P",{});var mTt=s(Ive);nwr=r(mTt,"Examples:"),mTt.forEach(t),swr=i(Mi),m(_L.$$.fragment,Mi),Mi.forEach(t),lwr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(uL.$$.fragment,Sa),iwr=i(Sa),Dve=n(Sa,"P",{});var gTt=s(Dve);dwr=r(gTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gTt.forEach(t),cwr=i(Sa),Pn=n(Sa,"P",{});var s4=s(Pn);fwr=r(s4,"The model class to instantiate is selected based on the "),Nve=n(s4,"CODE",{});var hTt=s(Nve);mwr=r(hTt,"model_type"),hTt.forEach(t),gwr=r(s4,` property of the config object (either
passed as an argument or loaded from `),jve=n(s4,"CODE",{});var pTt=s(jve);hwr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),pwr=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(s4,"CODE",{});var _Tt=s(qve);_wr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),uwr=r(s4,":"),s4.forEach(t),bwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);CC=n(Ae,"LI",{});var Xxe=s(CC);Gve=n(Xxe,"STRONG",{});var uTt=s(Gve);vwr=r(uTt,"albert"),uTt.forEach(t),Twr=r(Xxe," \u2014 "),Tz=n(Xxe,"A",{href:!0});var bTt=s(Tz);Fwr=r(bTt,"FlaxAlbertForSequenceClassification"),bTt.forEach(t),Cwr=r(Xxe," (ALBERT model)"),Xxe.forEach(t),Mwr=i(Ae),MC=n(Ae,"LI",{});var Vxe=s(MC);Ove=n(Vxe,"STRONG",{});var vTt=s(Ove);Ewr=r(vTt,"bart"),vTt.forEach(t),ywr=r(Vxe," \u2014 "),Fz=n(Vxe,"A",{href:!0});var TTt=s(Fz);wwr=r(TTt,"FlaxBartForSequenceClassification"),TTt.forEach(t),Awr=r(Vxe," (BART model)"),Vxe.forEach(t),Lwr=i(Ae),EC=n(Ae,"LI",{});var zxe=s(EC);Xve=n(zxe,"STRONG",{});var FTt=s(Xve);Bwr=r(FTt,"bert"),FTt.forEach(t),xwr=r(zxe," \u2014 "),Cz=n(zxe,"A",{href:!0});var CTt=s(Cz);kwr=r(CTt,"FlaxBertForSequenceClassification"),CTt.forEach(t),Rwr=r(zxe," (BERT model)"),zxe.forEach(t),Swr=i(Ae),yC=n(Ae,"LI",{});var Wxe=s(yC);Vve=n(Wxe,"STRONG",{});var MTt=s(Vve);Pwr=r(MTt,"big_bird"),MTt.forEach(t),$wr=r(Wxe," \u2014 "),Mz=n(Wxe,"A",{href:!0});var ETt=s(Mz);Iwr=r(ETt,"FlaxBigBirdForSequenceClassification"),ETt.forEach(t),Dwr=r(Wxe," (BigBird model)"),Wxe.forEach(t),Nwr=i(Ae),wC=n(Ae,"LI",{});var Qxe=s(wC);zve=n(Qxe,"STRONG",{});var yTt=s(zve);jwr=r(yTt,"distilbert"),yTt.forEach(t),qwr=r(Qxe," \u2014 "),Ez=n(Qxe,"A",{href:!0});var wTt=s(Ez);Gwr=r(wTt,"FlaxDistilBertForSequenceClassification"),wTt.forEach(t),Owr=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),Xwr=i(Ae),AC=n(Ae,"LI",{});var Hxe=s(AC);Wve=n(Hxe,"STRONG",{});var ATt=s(Wve);Vwr=r(ATt,"electra"),ATt.forEach(t),zwr=r(Hxe," \u2014 "),yz=n(Hxe,"A",{href:!0});var LTt=s(yz);Wwr=r(LTt,"FlaxElectraForSequenceClassification"),LTt.forEach(t),Qwr=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),Hwr=i(Ae),LC=n(Ae,"LI",{});var Uxe=s(LC);Qve=n(Uxe,"STRONG",{});var BTt=s(Qve);Uwr=r(BTt,"mbart"),BTt.forEach(t),Jwr=r(Uxe," \u2014 "),wz=n(Uxe,"A",{href:!0});var xTt=s(wz);Ywr=r(xTt,"FlaxMBartForSequenceClassification"),xTt.forEach(t),Kwr=r(Uxe," (mBART model)"),Uxe.forEach(t),Zwr=i(Ae),BC=n(Ae,"LI",{});var Jxe=s(BC);Hve=n(Jxe,"STRONG",{});var kTt=s(Hve);eAr=r(kTt,"roberta"),kTt.forEach(t),oAr=r(Jxe," \u2014 "),Az=n(Jxe,"A",{href:!0});var RTt=s(Az);rAr=r(RTt,"FlaxRobertaForSequenceClassification"),RTt.forEach(t),tAr=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),aAr=i(Ae),xC=n(Ae,"LI",{});var Yxe=s(xC);Uve=n(Yxe,"STRONG",{});var STt=s(Uve);nAr=r(STt,"roformer"),STt.forEach(t),sAr=r(Yxe," \u2014 "),Lz=n(Yxe,"A",{href:!0});var PTt=s(Lz);lAr=r(PTt,"FlaxRoFormerForSequenceClassification"),PTt.forEach(t),iAr=r(Yxe," (RoFormer model)"),Yxe.forEach(t),dAr=i(Ae),kC=n(Ae,"LI",{});var Kxe=s(kC);Jve=n(Kxe,"STRONG",{});var $Tt=s(Jve);cAr=r($Tt,"xlm-roberta"),$Tt.forEach(t),fAr=r(Kxe," \u2014 "),Bz=n(Kxe,"A",{href:!0});var ITt=s(Bz);mAr=r(ITt,"FlaxXLMRobertaForSequenceClassification"),ITt.forEach(t),gAr=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),Ae.forEach(t),hAr=i(Sa),Yve=n(Sa,"P",{});var DTt=s(Yve);pAr=r(DTt,"Examples:"),DTt.forEach(t),_Ar=i(Sa),m(bL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),bSe=i(c),uf=n(c,"H2",{class:!0});var B$e=s(uf);RC=n(B$e,"A",{id:!0,class:!0,href:!0});var NTt=s(RC);Kve=n(NTt,"SPAN",{});var jTt=s(Kve);m(vL.$$.fragment,jTt),jTt.forEach(t),NTt.forEach(t),uAr=i(B$e),Zve=n(B$e,"SPAN",{});var qTt=s(Zve);bAr=r(qTt,"FlaxAutoModelForQuestionAnswering"),qTt.forEach(t),B$e.forEach(t),vSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(TL.$$.fragment,Ei),vAr=i(Ei),bf=n(Ei,"P",{});var GQ=s(bf);TAr=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e6e=n(GQ,"CODE",{});var GTt=s(e6e);FAr=r(GTt,"from_pretrained()"),GTt.forEach(t),CAr=r(GQ,"class method or the "),o6e=n(GQ,"CODE",{});var OTt=s(o6e);MAr=r(OTt,"from_config()"),OTt.forEach(t),EAr=r(GQ,`class
method.`),GQ.forEach(t),yAr=i(Ei),FL=n(Ei,"P",{});var x$e=s(FL);wAr=r(x$e,"This class cannot be instantiated directly using "),r6e=n(x$e,"CODE",{});var XTt=s(r6e);AAr=r(XTt,"__init__()"),XTt.forEach(t),LAr=r(x$e," (throws an error)."),x$e.forEach(t),BAr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(CL.$$.fragment,yi),xAr=i(yi),t6e=n(yi,"P",{});var VTt=s(t6e);kAr=r(VTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VTt.forEach(t),RAr=i(yi),vf=n(yi,"P",{});var OQ=s(vf);SAr=r(OQ,`Note:
Loading a model from its configuration file does `),a6e=n(OQ,"STRONG",{});var zTt=s(a6e);PAr=r(zTt,"not"),zTt.forEach(t),$Ar=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=n(OQ,"CODE",{});var WTt=s(n6e);IAr=r(WTt,"from_pretrained()"),WTt.forEach(t),DAr=r(OQ,"to load the model weights."),OQ.forEach(t),NAr=i(yi),s6e=n(yi,"P",{});var QTt=s(s6e);jAr=r(QTt,"Examples:"),QTt.forEach(t),qAr=i(yi),m(ML.$$.fragment,yi),yi.forEach(t),GAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(EL.$$.fragment,Pa),OAr=i(Pa),l6e=n(Pa,"P",{});var HTt=s(l6e);XAr=r(HTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HTt.forEach(t),VAr=i(Pa),$n=n(Pa,"P",{});var l4=s($n);zAr=r(l4,"The model class to instantiate is selected based on the "),i6e=n(l4,"CODE",{});var UTt=s(i6e);WAr=r(UTt,"model_type"),UTt.forEach(t),QAr=r(l4,` property of the config object (either
passed as an argument or loaded from `),d6e=n(l4,"CODE",{});var JTt=s(d6e);HAr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),UAr=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(l4,"CODE",{});var YTt=s(c6e);JAr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),YAr=r(l4,":"),l4.forEach(t),KAr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);SC=n(Le,"LI",{});var Zxe=s(SC);f6e=n(Zxe,"STRONG",{});var KTt=s(f6e);ZAr=r(KTt,"albert"),KTt.forEach(t),eLr=r(Zxe," \u2014 "),xz=n(Zxe,"A",{href:!0});var ZTt=s(xz);oLr=r(ZTt,"FlaxAlbertForQuestionAnswering"),ZTt.forEach(t),rLr=r(Zxe," (ALBERT model)"),Zxe.forEach(t),tLr=i(Le),PC=n(Le,"LI",{});var eke=s(PC);m6e=n(eke,"STRONG",{});var e8t=s(m6e);aLr=r(e8t,"bart"),e8t.forEach(t),nLr=r(eke," \u2014 "),kz=n(eke,"A",{href:!0});var o8t=s(kz);sLr=r(o8t,"FlaxBartForQuestionAnswering"),o8t.forEach(t),lLr=r(eke," (BART model)"),eke.forEach(t),iLr=i(Le),$C=n(Le,"LI",{});var oke=s($C);g6e=n(oke,"STRONG",{});var r8t=s(g6e);dLr=r(r8t,"bert"),r8t.forEach(t),cLr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var t8t=s(Rz);fLr=r(t8t,"FlaxBertForQuestionAnswering"),t8t.forEach(t),mLr=r(oke," (BERT model)"),oke.forEach(t),gLr=i(Le),IC=n(Le,"LI",{});var rke=s(IC);h6e=n(rke,"STRONG",{});var a8t=s(h6e);hLr=r(a8t,"big_bird"),a8t.forEach(t),pLr=r(rke," \u2014 "),Sz=n(rke,"A",{href:!0});var n8t=s(Sz);_Lr=r(n8t,"FlaxBigBirdForQuestionAnswering"),n8t.forEach(t),uLr=r(rke," (BigBird model)"),rke.forEach(t),bLr=i(Le),DC=n(Le,"LI",{});var tke=s(DC);p6e=n(tke,"STRONG",{});var s8t=s(p6e);vLr=r(s8t,"distilbert"),s8t.forEach(t),TLr=r(tke," \u2014 "),Pz=n(tke,"A",{href:!0});var l8t=s(Pz);FLr=r(l8t,"FlaxDistilBertForQuestionAnswering"),l8t.forEach(t),CLr=r(tke," (DistilBERT model)"),tke.forEach(t),MLr=i(Le),NC=n(Le,"LI",{});var ake=s(NC);_6e=n(ake,"STRONG",{});var i8t=s(_6e);ELr=r(i8t,"electra"),i8t.forEach(t),yLr=r(ake," \u2014 "),$z=n(ake,"A",{href:!0});var d8t=s($z);wLr=r(d8t,"FlaxElectraForQuestionAnswering"),d8t.forEach(t),ALr=r(ake," (ELECTRA model)"),ake.forEach(t),LLr=i(Le),jC=n(Le,"LI",{});var nke=s(jC);u6e=n(nke,"STRONG",{});var c8t=s(u6e);BLr=r(c8t,"mbart"),c8t.forEach(t),xLr=r(nke," \u2014 "),Iz=n(nke,"A",{href:!0});var f8t=s(Iz);kLr=r(f8t,"FlaxMBartForQuestionAnswering"),f8t.forEach(t),RLr=r(nke," (mBART model)"),nke.forEach(t),SLr=i(Le),qC=n(Le,"LI",{});var ske=s(qC);b6e=n(ske,"STRONG",{});var m8t=s(b6e);PLr=r(m8t,"roberta"),m8t.forEach(t),$Lr=r(ske," \u2014 "),Dz=n(ske,"A",{href:!0});var g8t=s(Dz);ILr=r(g8t,"FlaxRobertaForQuestionAnswering"),g8t.forEach(t),DLr=r(ske," (RoBERTa model)"),ske.forEach(t),NLr=i(Le),GC=n(Le,"LI",{});var lke=s(GC);v6e=n(lke,"STRONG",{});var h8t=s(v6e);jLr=r(h8t,"roformer"),h8t.forEach(t),qLr=r(lke," \u2014 "),Nz=n(lke,"A",{href:!0});var p8t=s(Nz);GLr=r(p8t,"FlaxRoFormerForQuestionAnswering"),p8t.forEach(t),OLr=r(lke," (RoFormer model)"),lke.forEach(t),XLr=i(Le),OC=n(Le,"LI",{});var ike=s(OC);T6e=n(ike,"STRONG",{});var _8t=s(T6e);VLr=r(_8t,"xlm-roberta"),_8t.forEach(t),zLr=r(ike," \u2014 "),jz=n(ike,"A",{href:!0});var u8t=s(jz);WLr=r(u8t,"FlaxXLMRobertaForQuestionAnswering"),u8t.forEach(t),QLr=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Le.forEach(t),HLr=i(Pa),F6e=n(Pa,"P",{});var b8t=s(F6e);ULr=r(b8t,"Examples:"),b8t.forEach(t),JLr=i(Pa),m(yL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),TSe=i(c),Tf=n(c,"H2",{class:!0});var k$e=s(Tf);XC=n(k$e,"A",{id:!0,class:!0,href:!0});var v8t=s(XC);C6e=n(v8t,"SPAN",{});var T8t=s(C6e);m(wL.$$.fragment,T8t),T8t.forEach(t),v8t.forEach(t),YLr=i(k$e),M6e=n(k$e,"SPAN",{});var F8t=s(M6e);KLr=r(F8t,"FlaxAutoModelForTokenClassification"),F8t.forEach(t),k$e.forEach(t),FSe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(AL.$$.fragment,wi),ZLr=i(wi),Ff=n(wi,"P",{});var XQ=s(Ff);e7r=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E6e=n(XQ,"CODE",{});var C8t=s(E6e);o7r=r(C8t,"from_pretrained()"),C8t.forEach(t),r7r=r(XQ,"class method or the "),y6e=n(XQ,"CODE",{});var M8t=s(y6e);t7r=r(M8t,"from_config()"),M8t.forEach(t),a7r=r(XQ,`class
method.`),XQ.forEach(t),n7r=i(wi),LL=n(wi,"P",{});var R$e=s(LL);s7r=r(R$e,"This class cannot be instantiated directly using "),w6e=n(R$e,"CODE",{});var E8t=s(w6e);l7r=r(E8t,"__init__()"),E8t.forEach(t),i7r=r(R$e," (throws an error)."),R$e.forEach(t),d7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(BL.$$.fragment,Ai),c7r=i(Ai),A6e=n(Ai,"P",{});var y8t=s(A6e);f7r=r(y8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y8t.forEach(t),m7r=i(Ai),Cf=n(Ai,"P",{});var VQ=s(Cf);g7r=r(VQ,`Note:
Loading a model from its configuration file does `),L6e=n(VQ,"STRONG",{});var w8t=s(L6e);h7r=r(w8t,"not"),w8t.forEach(t),p7r=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=n(VQ,"CODE",{});var A8t=s(B6e);_7r=r(A8t,"from_pretrained()"),A8t.forEach(t),u7r=r(VQ,"to load the model weights."),VQ.forEach(t),b7r=i(Ai),x6e=n(Ai,"P",{});var L8t=s(x6e);v7r=r(L8t,"Examples:"),L8t.forEach(t),T7r=i(Ai),m(xL.$$.fragment,Ai),Ai.forEach(t),F7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(kL.$$.fragment,$a),C7r=i($a),k6e=n($a,"P",{});var B8t=s(k6e);M7r=r(B8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B8t.forEach(t),E7r=i($a),In=n($a,"P",{});var i4=s(In);y7r=r(i4,"The model class to instantiate is selected based on the "),R6e=n(i4,"CODE",{});var x8t=s(R6e);w7r=r(x8t,"model_type"),x8t.forEach(t),A7r=r(i4,` property of the config object (either
passed as an argument or loaded from `),S6e=n(i4,"CODE",{});var k8t=s(S6e);L7r=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),B7r=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(i4,"CODE",{});var R8t=s(P6e);x7r=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),k7r=r(i4,":"),i4.forEach(t),R7r=i($a),Se=n($a,"UL",{});var Oo=s(Se);VC=n(Oo,"LI",{});var dke=s(VC);$6e=n(dke,"STRONG",{});var S8t=s($6e);S7r=r(S8t,"albert"),S8t.forEach(t),P7r=r(dke," \u2014 "),qz=n(dke,"A",{href:!0});var P8t=s(qz);$7r=r(P8t,"FlaxAlbertForTokenClassification"),P8t.forEach(t),I7r=r(dke," (ALBERT model)"),dke.forEach(t),D7r=i(Oo),zC=n(Oo,"LI",{});var cke=s(zC);I6e=n(cke,"STRONG",{});var $8t=s(I6e);N7r=r($8t,"bert"),$8t.forEach(t),j7r=r(cke," \u2014 "),Gz=n(cke,"A",{href:!0});var I8t=s(Gz);q7r=r(I8t,"FlaxBertForTokenClassification"),I8t.forEach(t),G7r=r(cke," (BERT model)"),cke.forEach(t),O7r=i(Oo),WC=n(Oo,"LI",{});var fke=s(WC);D6e=n(fke,"STRONG",{});var D8t=s(D6e);X7r=r(D8t,"big_bird"),D8t.forEach(t),V7r=r(fke," \u2014 "),Oz=n(fke,"A",{href:!0});var N8t=s(Oz);z7r=r(N8t,"FlaxBigBirdForTokenClassification"),N8t.forEach(t),W7r=r(fke," (BigBird model)"),fke.forEach(t),Q7r=i(Oo),QC=n(Oo,"LI",{});var mke=s(QC);N6e=n(mke,"STRONG",{});var j8t=s(N6e);H7r=r(j8t,"distilbert"),j8t.forEach(t),U7r=r(mke," \u2014 "),Xz=n(mke,"A",{href:!0});var q8t=s(Xz);J7r=r(q8t,"FlaxDistilBertForTokenClassification"),q8t.forEach(t),Y7r=r(mke," (DistilBERT model)"),mke.forEach(t),K7r=i(Oo),HC=n(Oo,"LI",{});var gke=s(HC);j6e=n(gke,"STRONG",{});var G8t=s(j6e);Z7r=r(G8t,"electra"),G8t.forEach(t),e9r=r(gke," \u2014 "),Vz=n(gke,"A",{href:!0});var O8t=s(Vz);o9r=r(O8t,"FlaxElectraForTokenClassification"),O8t.forEach(t),r9r=r(gke," (ELECTRA model)"),gke.forEach(t),t9r=i(Oo),UC=n(Oo,"LI",{});var hke=s(UC);q6e=n(hke,"STRONG",{});var X8t=s(q6e);a9r=r(X8t,"roberta"),X8t.forEach(t),n9r=r(hke," \u2014 "),zz=n(hke,"A",{href:!0});var V8t=s(zz);s9r=r(V8t,"FlaxRobertaForTokenClassification"),V8t.forEach(t),l9r=r(hke," (RoBERTa model)"),hke.forEach(t),i9r=i(Oo),JC=n(Oo,"LI",{});var pke=s(JC);G6e=n(pke,"STRONG",{});var z8t=s(G6e);d9r=r(z8t,"roformer"),z8t.forEach(t),c9r=r(pke," \u2014 "),Wz=n(pke,"A",{href:!0});var W8t=s(Wz);f9r=r(W8t,"FlaxRoFormerForTokenClassification"),W8t.forEach(t),m9r=r(pke," (RoFormer model)"),pke.forEach(t),g9r=i(Oo),YC=n(Oo,"LI",{});var _ke=s(YC);O6e=n(_ke,"STRONG",{});var Q8t=s(O6e);h9r=r(Q8t,"xlm-roberta"),Q8t.forEach(t),p9r=r(_ke," \u2014 "),Qz=n(_ke,"A",{href:!0});var H8t=s(Qz);_9r=r(H8t,"FlaxXLMRobertaForTokenClassification"),H8t.forEach(t),u9r=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),Oo.forEach(t),b9r=i($a),X6e=n($a,"P",{});var U8t=s(X6e);v9r=r(U8t,"Examples:"),U8t.forEach(t),T9r=i($a),m(RL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),CSe=i(c),Mf=n(c,"H2",{class:!0});var S$e=s(Mf);KC=n(S$e,"A",{id:!0,class:!0,href:!0});var J8t=s(KC);V6e=n(J8t,"SPAN",{});var Y8t=s(V6e);m(SL.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),F9r=i(S$e),z6e=n(S$e,"SPAN",{});var K8t=s(z6e);C9r=r(K8t,"FlaxAutoModelForMultipleChoice"),K8t.forEach(t),S$e.forEach(t),MSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(PL.$$.fragment,Li),M9r=i(Li),Ef=n(Li,"P",{});var zQ=s(Ef);E9r=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),W6e=n(zQ,"CODE",{});var Z8t=s(W6e);y9r=r(Z8t,"from_pretrained()"),Z8t.forEach(t),w9r=r(zQ,"class method or the "),Q6e=n(zQ,"CODE",{});var eFt=s(Q6e);A9r=r(eFt,"from_config()"),eFt.forEach(t),L9r=r(zQ,`class
method.`),zQ.forEach(t),B9r=i(Li),$L=n(Li,"P",{});var P$e=s($L);x9r=r(P$e,"This class cannot be instantiated directly using "),H6e=n(P$e,"CODE",{});var oFt=s(H6e);k9r=r(oFt,"__init__()"),oFt.forEach(t),R9r=r(P$e," (throws an error)."),P$e.forEach(t),S9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(IL.$$.fragment,Bi),P9r=i(Bi),U6e=n(Bi,"P",{});var rFt=s(U6e);$9r=r(rFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rFt.forEach(t),I9r=i(Bi),yf=n(Bi,"P",{});var WQ=s(yf);D9r=r(WQ,`Note:
Loading a model from its configuration file does `),J6e=n(WQ,"STRONG",{});var tFt=s(J6e);N9r=r(tFt,"not"),tFt.forEach(t),j9r=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=n(WQ,"CODE",{});var aFt=s(Y6e);q9r=r(aFt,"from_pretrained()"),aFt.forEach(t),G9r=r(WQ,"to load the model weights."),WQ.forEach(t),O9r=i(Bi),K6e=n(Bi,"P",{});var nFt=s(K6e);X9r=r(nFt,"Examples:"),nFt.forEach(t),V9r=i(Bi),m(DL.$$.fragment,Bi),Bi.forEach(t),z9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(NL.$$.fragment,Ia),W9r=i(Ia),Z6e=n(Ia,"P",{});var sFt=s(Z6e);Q9r=r(sFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sFt.forEach(t),H9r=i(Ia),Dn=n(Ia,"P",{});var d4=s(Dn);U9r=r(d4,"The model class to instantiate is selected based on the "),e0e=n(d4,"CODE",{});var lFt=s(e0e);J9r=r(lFt,"model_type"),lFt.forEach(t),Y9r=r(d4,` property of the config object (either
passed as an argument or loaded from `),o0e=n(d4,"CODE",{});var iFt=s(o0e);K9r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),Z9r=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(d4,"CODE",{});var dFt=s(r0e);eBr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),oBr=r(d4,":"),d4.forEach(t),rBr=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);ZC=n(Xo,"LI",{});var uke=s(ZC);t0e=n(uke,"STRONG",{});var cFt=s(t0e);tBr=r(cFt,"albert"),cFt.forEach(t),aBr=r(uke," \u2014 "),Hz=n(uke,"A",{href:!0});var fFt=s(Hz);nBr=r(fFt,"FlaxAlbertForMultipleChoice"),fFt.forEach(t),sBr=r(uke," (ALBERT model)"),uke.forEach(t),lBr=i(Xo),eM=n(Xo,"LI",{});var bke=s(eM);a0e=n(bke,"STRONG",{});var mFt=s(a0e);iBr=r(mFt,"bert"),mFt.forEach(t),dBr=r(bke," \u2014 "),Uz=n(bke,"A",{href:!0});var gFt=s(Uz);cBr=r(gFt,"FlaxBertForMultipleChoice"),gFt.forEach(t),fBr=r(bke," (BERT model)"),bke.forEach(t),mBr=i(Xo),oM=n(Xo,"LI",{});var vke=s(oM);n0e=n(vke,"STRONG",{});var hFt=s(n0e);gBr=r(hFt,"big_bird"),hFt.forEach(t),hBr=r(vke," \u2014 "),Jz=n(vke,"A",{href:!0});var pFt=s(Jz);pBr=r(pFt,"FlaxBigBirdForMultipleChoice"),pFt.forEach(t),_Br=r(vke," (BigBird model)"),vke.forEach(t),uBr=i(Xo),rM=n(Xo,"LI",{});var Tke=s(rM);s0e=n(Tke,"STRONG",{});var _Ft=s(s0e);bBr=r(_Ft,"distilbert"),_Ft.forEach(t),vBr=r(Tke," \u2014 "),Yz=n(Tke,"A",{href:!0});var uFt=s(Yz);TBr=r(uFt,"FlaxDistilBertForMultipleChoice"),uFt.forEach(t),FBr=r(Tke," (DistilBERT model)"),Tke.forEach(t),CBr=i(Xo),tM=n(Xo,"LI",{});var Fke=s(tM);l0e=n(Fke,"STRONG",{});var bFt=s(l0e);MBr=r(bFt,"electra"),bFt.forEach(t),EBr=r(Fke," \u2014 "),Kz=n(Fke,"A",{href:!0});var vFt=s(Kz);yBr=r(vFt,"FlaxElectraForMultipleChoice"),vFt.forEach(t),wBr=r(Fke," (ELECTRA model)"),Fke.forEach(t),ABr=i(Xo),aM=n(Xo,"LI",{});var Cke=s(aM);i0e=n(Cke,"STRONG",{});var TFt=s(i0e);LBr=r(TFt,"roberta"),TFt.forEach(t),BBr=r(Cke," \u2014 "),Zz=n(Cke,"A",{href:!0});var FFt=s(Zz);xBr=r(FFt,"FlaxRobertaForMultipleChoice"),FFt.forEach(t),kBr=r(Cke," (RoBERTa model)"),Cke.forEach(t),RBr=i(Xo),nM=n(Xo,"LI",{});var Mke=s(nM);d0e=n(Mke,"STRONG",{});var CFt=s(d0e);SBr=r(CFt,"roformer"),CFt.forEach(t),PBr=r(Mke," \u2014 "),eW=n(Mke,"A",{href:!0});var MFt=s(eW);$Br=r(MFt,"FlaxRoFormerForMultipleChoice"),MFt.forEach(t),IBr=r(Mke," (RoFormer model)"),Mke.forEach(t),DBr=i(Xo),sM=n(Xo,"LI",{});var Eke=s(sM);c0e=n(Eke,"STRONG",{});var EFt=s(c0e);NBr=r(EFt,"xlm-roberta"),EFt.forEach(t),jBr=r(Eke," \u2014 "),oW=n(Eke,"A",{href:!0});var yFt=s(oW);qBr=r(yFt,"FlaxXLMRobertaForMultipleChoice"),yFt.forEach(t),GBr=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),Xo.forEach(t),OBr=i(Ia),f0e=n(Ia,"P",{});var wFt=s(f0e);XBr=r(wFt,"Examples:"),wFt.forEach(t),VBr=i(Ia),m(jL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),ESe=i(c),wf=n(c,"H2",{class:!0});var $$e=s(wf);lM=n($$e,"A",{id:!0,class:!0,href:!0});var AFt=s(lM);m0e=n(AFt,"SPAN",{});var LFt=s(m0e);m(qL.$$.fragment,LFt),LFt.forEach(t),AFt.forEach(t),zBr=i($$e),g0e=n($$e,"SPAN",{});var BFt=s(g0e);WBr=r(BFt,"FlaxAutoModelForNextSentencePrediction"),BFt.forEach(t),$$e.forEach(t),ySe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(GL.$$.fragment,xi),QBr=i(xi),Af=n(xi,"P",{});var QQ=s(Af);HBr=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),h0e=n(QQ,"CODE",{});var xFt=s(h0e);UBr=r(xFt,"from_pretrained()"),xFt.forEach(t),JBr=r(QQ,"class method or the "),p0e=n(QQ,"CODE",{});var kFt=s(p0e);YBr=r(kFt,"from_config()"),kFt.forEach(t),KBr=r(QQ,`class
method.`),QQ.forEach(t),ZBr=i(xi),OL=n(xi,"P",{});var I$e=s(OL);exr=r(I$e,"This class cannot be instantiated directly using "),_0e=n(I$e,"CODE",{});var RFt=s(_0e);oxr=r(RFt,"__init__()"),RFt.forEach(t),rxr=r(I$e," (throws an error)."),I$e.forEach(t),txr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(XL.$$.fragment,ki),axr=i(ki),u0e=n(ki,"P",{});var SFt=s(u0e);nxr=r(SFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SFt.forEach(t),sxr=i(ki),Lf=n(ki,"P",{});var HQ=s(Lf);lxr=r(HQ,`Note:
Loading a model from its configuration file does `),b0e=n(HQ,"STRONG",{});var PFt=s(b0e);ixr=r(PFt,"not"),PFt.forEach(t),dxr=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),v0e=n(HQ,"CODE",{});var $Ft=s(v0e);cxr=r($Ft,"from_pretrained()"),$Ft.forEach(t),fxr=r(HQ,"to load the model weights."),HQ.forEach(t),mxr=i(ki),T0e=n(ki,"P",{});var IFt=s(T0e);gxr=r(IFt,"Examples:"),IFt.forEach(t),hxr=i(ki),m(VL.$$.fragment,ki),ki.forEach(t),pxr=i(xi),Io=n(xi,"DIV",{class:!0});var Da=s(Io);m(zL.$$.fragment,Da),_xr=i(Da),F0e=n(Da,"P",{});var DFt=s(F0e);uxr=r(DFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DFt.forEach(t),bxr=i(Da),Nn=n(Da,"P",{});var c4=s(Nn);vxr=r(c4,"The model class to instantiate is selected based on the "),C0e=n(c4,"CODE",{});var NFt=s(C0e);Txr=r(NFt,"model_type"),NFt.forEach(t),Fxr=r(c4,` property of the config object (either
passed as an argument or loaded from `),M0e=n(c4,"CODE",{});var jFt=s(M0e);Cxr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),Mxr=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=n(c4,"CODE",{});var qFt=s(E0e);Exr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),yxr=r(c4,":"),c4.forEach(t),wxr=i(Da),y0e=n(Da,"UL",{});var GFt=s(y0e);iM=n(GFt,"LI",{});var yke=s(iM);w0e=n(yke,"STRONG",{});var OFt=s(w0e);Axr=r(OFt,"bert"),OFt.forEach(t),Lxr=r(yke," \u2014 "),rW=n(yke,"A",{href:!0});var XFt=s(rW);Bxr=r(XFt,"FlaxBertForNextSentencePrediction"),XFt.forEach(t),xxr=r(yke," (BERT model)"),yke.forEach(t),GFt.forEach(t),kxr=i(Da),A0e=n(Da,"P",{});var VFt=s(A0e);Rxr=r(VFt,"Examples:"),VFt.forEach(t),Sxr=i(Da),m(WL.$$.fragment,Da),Da.forEach(t),xi.forEach(t),wSe=i(c),Bf=n(c,"H2",{class:!0});var D$e=s(Bf);dM=n(D$e,"A",{id:!0,class:!0,href:!0});var zFt=s(dM);L0e=n(zFt,"SPAN",{});var WFt=s(L0e);m(QL.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),Pxr=i(D$e),B0e=n(D$e,"SPAN",{});var QFt=s(B0e);$xr=r(QFt,"FlaxAutoModelForImageClassification"),QFt.forEach(t),D$e.forEach(t),ASe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(HL.$$.fragment,Ri),Ixr=i(Ri),xf=n(Ri,"P",{});var UQ=s(xf);Dxr=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),x0e=n(UQ,"CODE",{});var HFt=s(x0e);Nxr=r(HFt,"from_pretrained()"),HFt.forEach(t),jxr=r(UQ,"class method or the "),k0e=n(UQ,"CODE",{});var UFt=s(k0e);qxr=r(UFt,"from_config()"),UFt.forEach(t),Gxr=r(UQ,`class
method.`),UQ.forEach(t),Oxr=i(Ri),UL=n(Ri,"P",{});var N$e=s(UL);Xxr=r(N$e,"This class cannot be instantiated directly using "),R0e=n(N$e,"CODE",{});var JFt=s(R0e);Vxr=r(JFt,"__init__()"),JFt.forEach(t),zxr=r(N$e," (throws an error)."),N$e.forEach(t),Wxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(JL.$$.fragment,Si),Qxr=i(Si),S0e=n(Si,"P",{});var YFt=s(S0e);Hxr=r(YFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YFt.forEach(t),Uxr=i(Si),kf=n(Si,"P",{});var JQ=s(kf);Jxr=r(JQ,`Note:
Loading a model from its configuration file does `),P0e=n(JQ,"STRONG",{});var KFt=s(P0e);Yxr=r(KFt,"not"),KFt.forEach(t),Kxr=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$0e=n(JQ,"CODE",{});var ZFt=s($0e);Zxr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),ekr=r(JQ,"to load the model weights."),JQ.forEach(t),okr=i(Si),I0e=n(Si,"P",{});var eCt=s(I0e);rkr=r(eCt,"Examples:"),eCt.forEach(t),tkr=i(Si),m(YL.$$.fragment,Si),Si.forEach(t),akr=i(Ri),Do=n(Ri,"DIV",{class:!0});var Na=s(Do);m(KL.$$.fragment,Na),nkr=i(Na),D0e=n(Na,"P",{});var oCt=s(D0e);skr=r(oCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oCt.forEach(t),lkr=i(Na),jn=n(Na,"P",{});var f4=s(jn);ikr=r(f4,"The model class to instantiate is selected based on the "),N0e=n(f4,"CODE",{});var rCt=s(N0e);dkr=r(rCt,"model_type"),rCt.forEach(t),ckr=r(f4,` property of the config object (either
passed as an argument or loaded from `),j0e=n(f4,"CODE",{});var tCt=s(j0e);fkr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),mkr=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(f4,"CODE",{});var aCt=s(q0e);gkr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),hkr=r(f4,":"),f4.forEach(t),pkr=i(Na),ZL=n(Na,"UL",{});var j$e=s(ZL);cM=n(j$e,"LI",{});var wke=s(cM);G0e=n(wke,"STRONG",{});var nCt=s(G0e);_kr=r(nCt,"beit"),nCt.forEach(t),ukr=r(wke," \u2014 "),tW=n(wke,"A",{href:!0});var sCt=s(tW);bkr=r(sCt,"FlaxBeitForImageClassification"),sCt.forEach(t),vkr=r(wke," (BEiT model)"),wke.forEach(t),Tkr=i(j$e),fM=n(j$e,"LI",{});var Ake=s(fM);O0e=n(Ake,"STRONG",{});var lCt=s(O0e);Fkr=r(lCt,"vit"),lCt.forEach(t),Ckr=r(Ake," \u2014 "),aW=n(Ake,"A",{href:!0});var iCt=s(aW);Mkr=r(iCt,"FlaxViTForImageClassification"),iCt.forEach(t),Ekr=r(Ake," (ViT model)"),Ake.forEach(t),j$e.forEach(t),ykr=i(Na),X0e=n(Na,"P",{});var dCt=s(X0e);wkr=r(dCt,"Examples:"),dCt.forEach(t),Akr=i(Na),m(e7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),LSe=i(c),Rf=n(c,"H2",{class:!0});var q$e=s(Rf);mM=n(q$e,"A",{id:!0,class:!0,href:!0});var cCt=s(mM);V0e=n(cCt,"SPAN",{});var fCt=s(V0e);m(o7.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),Lkr=i(q$e),z0e=n(q$e,"SPAN",{});var mCt=s(z0e);Bkr=r(mCt,"FlaxAutoModelForVision2Seq"),mCt.forEach(t),q$e.forEach(t),BSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(r7.$$.fragment,Pi),xkr=i(Pi),Sf=n(Pi,"P",{});var YQ=s(Sf);kkr=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),W0e=n(YQ,"CODE",{});var gCt=s(W0e);Rkr=r(gCt,"from_pretrained()"),gCt.forEach(t),Skr=r(YQ,"class method or the "),Q0e=n(YQ,"CODE",{});var hCt=s(Q0e);Pkr=r(hCt,"from_config()"),hCt.forEach(t),$kr=r(YQ,`class
method.`),YQ.forEach(t),Ikr=i(Pi),t7=n(Pi,"P",{});var G$e=s(t7);Dkr=r(G$e,"This class cannot be instantiated directly using "),H0e=n(G$e,"CODE",{});var pCt=s(H0e);Nkr=r(pCt,"__init__()"),pCt.forEach(t),jkr=r(G$e," (throws an error)."),G$e.forEach(t),qkr=i(Pi),Dt=n(Pi,"DIV",{class:!0});var $i=s(Dt);m(a7.$$.fragment,$i),Gkr=i($i),U0e=n($i,"P",{});var _Ct=s(U0e);Okr=r(_Ct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ct.forEach(t),Xkr=i($i),Pf=n($i,"P",{});var KQ=s(Pf);Vkr=r(KQ,`Note:
Loading a model from its configuration file does `),J0e=n(KQ,"STRONG",{});var uCt=s(J0e);zkr=r(uCt,"not"),uCt.forEach(t),Wkr=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y0e=n(KQ,"CODE",{});var bCt=s(Y0e);Qkr=r(bCt,"from_pretrained()"),bCt.forEach(t),Hkr=r(KQ,"to load the model weights."),KQ.forEach(t),Ukr=i($i),K0e=n($i,"P",{});var vCt=s(K0e);Jkr=r(vCt,"Examples:"),vCt.forEach(t),Ykr=i($i),m(n7.$$.fragment,$i),$i.forEach(t),Kkr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(s7.$$.fragment,ja),Zkr=i(ja),Z0e=n(ja,"P",{});var TCt=s(Z0e);eRr=r(TCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TCt.forEach(t),oRr=i(ja),qn=n(ja,"P",{});var m4=s(qn);rRr=r(m4,"The model class to instantiate is selected based on the "),eTe=n(m4,"CODE",{});var FCt=s(eTe);tRr=r(FCt,"model_type"),FCt.forEach(t),aRr=r(m4,` property of the config object (either
passed as an argument or loaded from `),oTe=n(m4,"CODE",{});var CCt=s(oTe);nRr=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),sRr=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(m4,"CODE",{});var MCt=s(rTe);lRr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),iRr=r(m4,":"),m4.forEach(t),dRr=i(ja),tTe=n(ja,"UL",{});var ECt=s(tTe);gM=n(ECt,"LI",{});var Lke=s(gM);aTe=n(Lke,"STRONG",{});var yCt=s(aTe);cRr=r(yCt,"vision-encoder-decoder"),yCt.forEach(t),fRr=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var wCt=s(nW);mRr=r(wCt,"FlaxVisionEncoderDecoderModel"),wCt.forEach(t),gRr=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),ECt.forEach(t),hRr=i(ja),nTe=n(ja,"P",{});var ACt=s(nTe);pRr=r(ACt,"Examples:"),ACt.forEach(t),_Rr=i(ja),m(l7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(DCt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(f9,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(m9,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertConfig"),d(g9,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartConfig"),d(h9,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitConfig"),d(p9,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertConfig"),d(_9,"href","/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(u9,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdConfig"),d(b9,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(v9,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(T9,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(F9,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertConfig"),d(C9,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineConfig"),d(M9,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPConfig"),d(E9,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertConfig"),d(y9,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextConfig"),d(w9,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLConfig"),d(A9,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(L9,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(B9,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaConfig"),d(x9,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(k9,"href","/docs/transformers/pr_10638/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(R9,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTConfig"),d(S9,"href","/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrConfig"),d(P9,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertConfig"),d($9,"href","/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRConfig"),d(I9,"href","/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTConfig"),d(D9,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraConfig"),d(N9,"href","/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(j9,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertConfig"),d(q9,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetConfig"),d(G9,"href","/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTConfig"),d(O9,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelConfig"),d(X9,"href","/docs/transformers/pr_10638/en/model_doc/glpn#transformers.GLPNConfig"),d(V9,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Config"),d(z9,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(W9,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJConfig"),d(Q9,"href","/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertConfig"),d(H9,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertConfig"),d(U9,"href","/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(J9,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Y9,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(K9,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDConfig"),d(Z9,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerConfig"),d(eB,"href","/docs/transformers/pr_10638/en/model_doc/luke#transformers.LukeConfig"),d(oB,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertConfig"),d(rB,"href","/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Config"),d(tB,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianConfig"),d(aB,"href","/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(nB,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartConfig"),d(sB,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lB,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(iB,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetConfig"),d(dB,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Config"),d(cB,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(fB,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(mB,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusConfig"),d(gB,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverConfig"),d(hB,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartConfig"),d(pB,"href","/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(_B,"href","/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(uB,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(bB,"href","/docs/transformers/pr_10638/en/model_doc/rag#transformers.RagConfig"),d(vB,"href","/docs/transformers/pr_10638/en/model_doc/realm#transformers.RealmConfig"),d(TB,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerConfig"),d(FB,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertConfig"),d(CB,"href","/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetConfig"),d(MB,"href","/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertConfig"),d(EB,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaConfig"),d(yB,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerConfig"),d(wB,"href","/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerConfig"),d(AB,"href","/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWConfig"),d(LB,"href","/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDConfig"),d(BB,"href","/docs/transformers/pr_10638/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(xB,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(kB,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(RB,"href","/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterConfig"),d(SB,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(PB,"href","/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinConfig"),d($B,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Config"),d(IB,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasConfig"),d(DB,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(NB,"href","/docs/transformers/pr_10638/en/model_doc/trocr#transformers.TrOCRConfig"),d(jB,"href","/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(qB,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(GB,"href","/docs/transformers/pr_10638/en/model_doc/van#transformers.VanConfig"),d(OB,"href","/docs/transformers/pr_10638/en/model_doc/vilt#transformers.ViltConfig"),d(XB,"href","/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(VB,"href","/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(zB,"href","/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(WB,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTConfig"),d(QB,"href","/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(HB,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(UB,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMConfig"),d(JB,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMConfig"),d(YB,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMConfig"),d(KB,"href","/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ZB,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ex,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ox,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetConfig"),d(rx,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Wo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(tx,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ax,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertTokenizer"),d(nx,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(sx,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartTokenizer"),d(lx,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartTokenizerFast"),d(ix,"href","/docs/transformers/pr_10638/en/model_doc/barthez#transformers.BarthezTokenizer"),d(dx,"href","/docs/transformers/pr_10638/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(cx,"href","/docs/transformers/pr_10638/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(fx,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertTokenizer"),d(mx,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertTokenizerFast"),d(gx,"href","/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(hx,"href","/docs/transformers/pr_10638/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(px,"href","/docs/transformers/pr_10638/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(_x,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(ux,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(bx,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(vx,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Tx,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Fx,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Cx,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Mx,"href","/docs/transformers/pr_10638/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ex,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertTokenizer"),d(yx,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(wx,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineTokenizer"),d(Ax,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPTokenizer"),d(Lx,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Bx,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(xx,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(kx,"href","/docs/transformers/pr_10638/en/model_doc/cpm#transformers.CpmTokenizer"),d(Rx,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Sx,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Px,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d($x,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Ix,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Dx,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Nx,"href","/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jx,"href","/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(qx,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraTokenizer"),d(Gx,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Ox,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Xx,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetTokenizer"),d(Vx,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(zx,"href","/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Wx,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Qx,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Hx,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ux,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Jx,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yx,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kx,"href","/docs/transformers/pr_10638/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Zx,"href","/docs/transformers/pr_10638/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ek,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ok,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rk,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tk,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ak,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(nk,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(sk,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(lk,"href","/docs/transformers/pr_10638/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ik,"href","/docs/transformers/pr_10638/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(dk,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDTokenizer"),d(ck,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDTokenizerFast"),d(fk,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerTokenizer"),d(mk,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(gk,"href","/docs/transformers/pr_10638/en/model_doc/luke#transformers.LukeTokenizer"),d(hk,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(pk,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(_k,"href","/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(uk,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianTokenizer"),d(bk,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartTokenizer"),d(vk,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Tk,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Fk,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Ck,"href","/docs/transformers/pr_10638/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Mk,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Ek,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yk,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(wk,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ak,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.T5Tokenizer"),d(Lk,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Bk,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(xk,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(kk,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Rk,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Sk,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Pk,"href","/docs/transformers/pr_10638/en/model_doc/phobert#transformers.PhobertTokenizer"),d($k,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ik,"href","/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Dk,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertTokenizer"),d(Nk,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertTokenizerFast"),d(jk,"href","/docs/transformers/pr_10638/en/model_doc/rag#transformers.RagTokenizer"),d(qk,"href","/docs/transformers/pr_10638/en/model_doc/realm#transformers.RealmTokenizer"),d(Gk,"href","/docs/transformers/pr_10638/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Ok,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Xk,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Vk,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zk,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Qk,"href","/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Uk,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jk,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Yk,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Kk,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Zk,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(eR,"href","/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterTokenizer"),d(oR,"href","/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rR,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tR,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(aR,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.T5Tokenizer"),d(nR,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sR,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasTokenizer"),d(lR,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(iR,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dR,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(cR,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fR,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(mR,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMTokenizer"),d(gR,"href","/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hR,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pR,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_R,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uR,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Qo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(bR,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(vR,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(TR,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(FR,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(MR,"href","/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(ER,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yR,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(wR,"href","/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(AR,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(LR,"href","/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(kR,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(SR,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Sh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(DR,"href","/docs/transformers/pr_10638/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(NR,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPProcessor"),d(jR,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(qR,"href","/docs/transformers/pr_10638/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(GR,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(OR,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(XR,"href","/docs/transformers/pr_10638/en/model_doc/trocr#transformers.TrOCRProcessor"),d(VR,"href","/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(zR,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Vh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(WR,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertModel"),d(QR,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartModel"),d(HR,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitModel"),d(UR,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertModel"),d(JR,"href","/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(YR,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdModel"),d(KR,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(ZR,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(eS,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(oS,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertModel"),d(rS,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineModel"),d(tS,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.CLIPModel"),d(aS,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertModel"),d(nS,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextModel"),d(sS,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLModel"),d(lS,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(iS,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(dS,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaModel"),d(cS,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(fS,"href","/docs/transformers/pr_10638/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(mS,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTModel"),d(gS,"href","/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrModel"),d(hS,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertModel"),d(pS,"href","/docs/transformers/pr_10638/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(_S,"href","/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTModel"),d(uS,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraModel"),d(bS,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertModel"),d(vS,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetModel"),d(TS,"href","/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTModel"),d(FS,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelModel"),d(CS,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelBaseModel"),d(MS,"href","/docs/transformers/pr_10638/en/model_doc/glpn#transformers.GLPNModel"),d(ES,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2Model"),d(yS,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(wS,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJModel"),d(AS,"href","/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertModel"),d(LS,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertModel"),d(BS,"href","/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(xS,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(kS,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(RS,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDModel"),d(SS,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerModel"),d(PS,"href","/docs/transformers/pr_10638/en/model_doc/luke#transformers.LukeModel"),d($S,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertModel"),d(IS,"href","/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100Model"),d(DS,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianModel"),d(NS,"href","/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerModel"),d(jS,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartModel"),d(qS,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(GS,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertModel"),d(OS,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetModel"),d(XS,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5Model"),d(VS,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerModel"),d(zS,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(WS,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusModel"),d(QS,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverModel"),d(HS,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartModel"),d(US,"href","/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerModel"),d(JS,"href","/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(YS,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertModel"),d(KS,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerModel"),d(ZS,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertModel"),d(eP,"href","/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetModel"),d(oP,"href","/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertModel"),d(rP,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaModel"),d(tP,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerModel"),d(aP,"href","/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerModel"),d(nP,"href","/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWModel"),d(sP,"href","/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDModel"),d(lP,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(iP,"href","/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterModel"),d(dP,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(cP,"href","/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinModel"),d(fP,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5Model"),d(mP,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasModel"),d(gP,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(hP,"href","/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechModel"),d(pP,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(_P,"href","/docs/transformers/pr_10638/en/model_doc/van#transformers.VanModel"),d(uP,"href","/docs/transformers/pr_10638/en/model_doc/vilt#transformers.ViltModel"),d(bP,"href","/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(vP,"href","/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertModel"),d(TP,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTModel"),d(FP,"href","/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(CP,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(MP,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMModel"),d(EP,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMModel"),d(yP,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMModel"),d(wP,"href","/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(AP,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(LP,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(BP,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetModel"),d(xP,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(x_,"id","transformers.AutoModelForPreTraining"),d(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(kP,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForPreTraining"),d(RP,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(SP,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForPreTraining"),d(PP,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d($P,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(IP,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(DP,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(NP,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(jP,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(qP,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(GP,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForPreTraining"),d(OP,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(XP,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForPreTraining"),d(VP,"href","/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(zP,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(WP,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(QP,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(HP,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(UP,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(JP,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(YP,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(KP,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(ZP,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(e$,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(o$,"href","/docs/transformers/pr_10638/en/model_doc/retribert#transformers.RetriBertModel"),d(r$,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(t$,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(n$,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(s$,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(l$,"href","/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(i$,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(d$,"href","/docs/transformers/pr_10638/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(c$,"href","/docs/transformers/pr_10638/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(f$,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(m$,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(g$,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(h$,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(p$,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(_$,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForCausalLM"),d(u$,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertLMHeadModel"),d(b$,"href","/docs/transformers/pr_10638/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(v$,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(T$,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(F$,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(C$,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(M$,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(E$,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(y$,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(w$,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForCausalLM"),d(A$,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(L$,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(B$,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(x$,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianForCausalLM"),d(k$,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForCausalLM"),d(R$,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(S$,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(P$,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d($$,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(I$,"href","/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(D$,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(N$,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(j$,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(q$,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(G$,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(O$,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(X$,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(V$,"href","/docs/transformers/pr_10638/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(z$,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(W$,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Q$,"href","/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(H$,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(U$,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(J$,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(Y$,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(K$,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Z$,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForMaskedLM"),d(eI,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(oI,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(rI,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(aI,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(nI,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(sI,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(lI,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(iI,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(dI,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(cI,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(fI,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(gI,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(hI,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(_I,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(bI,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(vI,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(TI,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(CI,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(MI,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(EI,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(yI,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(wI,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(AI,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(LI,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(BI,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(xI,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(D1,"id","transformers.AutoModelForSeq2SeqLM"),d(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(kI,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d($I,"href","/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(II,"href","/docs/transformers/pr_10638/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_10638/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.MarianMTModel"),d(qI,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(VI,"href","/docs/transformers/pr_10638/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(zI,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WI,"href","/docs/transformers/pr_10638/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(ob,"id","transformers.AutoModelForSequenceClassification"),d(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ob,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(QI,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(HI,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForSequenceClassification"),d(UI,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(YI,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(KI,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(eD,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(oD,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(rD,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(tD,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(aD,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(nD,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(sD,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(lD,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(iD,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(dD,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(cD,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(fD,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(mD,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(gD,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(hD,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(pD,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(_D,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForSequenceClassification"),d(uD,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(bD,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(vD,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(TD,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(FD,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(CD,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(MD,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(ED,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(yD,"href","/docs/transformers/pr_10638/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(wD,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(AD,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(LD,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(BD,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(xD,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(kD,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(RD,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(SD,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(PD,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d($D,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(ID,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(DD,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(ND,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(Ub,"id","transformers.AutoModelForMultipleChoice"),d(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ub,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(jD,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(qD,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForMultipleChoice"),d(GD,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(OD,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(XD,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(VD,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(zD,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(WD,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(QD,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(HD,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(UD,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(JD,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(YD,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(KD,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(ZD,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(eN,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(oN,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(rN,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(tN,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(aN,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(nN,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(sN,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(lN,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(iN,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(dN,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(cN,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(fN,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(mN,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(y3,"id","transformers.AutoModelForNextSentencePrediction"),d(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y3,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(gN,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hN,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(pN,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(_N,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(uN,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(R3,"id","transformers.AutoModelForTokenClassification"),d(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R3,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(bN,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(vN,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForTokenClassification"),d(TN,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(FN,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(CN,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForTokenClassification"),d(MN,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(EN,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(yN,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(wN,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(AN,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(LN,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(BN,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(xN,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(kN,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(RN,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(SN,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(PN,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d($N,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(IN,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(DN,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(NN,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(jN,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qN,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(GN,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(ON,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(XN,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(VN,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(zN,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(WN,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(QN,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(HN,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(UN,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(JN,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g2,"id","transformers.AutoModelForQuestionAnswering"),d(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g2,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(YN,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_10638/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_10638/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(fj,"href","/docs/transformers/pr_10638/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_10638/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_10638/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_10638/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_10638/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_10638/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_10638/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_10638/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(xj,"href","/docs/transformers/pr_10638/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Rj,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d($j,"href","/docs/transformers/pr_10638/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(ev,"id","transformers.AutoModelForTableQuestionAnswering"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Ij,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(tv,"id","transformers.AutoModelForImageClassification"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Dj,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitForImageClassification"),d(Nj,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(jj,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForImageClassification"),d(qj,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Gj,"href","/docs/transformers/pr_10638/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Oj,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Xj,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Vj,"href","/docs/transformers/pr_10638/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(zj,"href","/docs/transformers/pr_10638/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Wj,"href","/docs/transformers/pr_10638/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Qj,"href","/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Hj,"href","/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinForImageClassification"),d(Uj,"href","/docs/transformers/pr_10638/en/model_doc/van#transformers.VanForImageClassification"),d(Jj,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(hv,"id","transformers.AutoModelForVision2Seq"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Yj,"href","/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(uv,"id","transformers.AutoModelForAudioClassification"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Kj,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Zj,"href","/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(eq,"href","/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(oq,"href","/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(rq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(tq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(aq,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(nq,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Av,"id","transformers.AutoModelForAudioFrameClassification"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(sq,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(lq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(iq,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(dq,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(Sv,"id","transformers.AutoModelForCTC"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(cq,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(fq,"href","/docs/transformers/pr_10638/en/model_doc/hubert#transformers.HubertForCTC"),d(mq,"href","/docs/transformers/pr_10638/en/model_doc/sew#transformers.SEWForCTC"),d(gq,"href","/docs/transformers/pr_10638/en/model_doc/sew-d#transformers.SEWDForCTC"),d(hq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(pq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(_q,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(uq,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Xv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(bq,"href","/docs/transformers/pr_10638/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(vq,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Qv,"id","transformers.AutoModelForAudioXVector"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(Tq,"href","/docs/transformers/pr_10638/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Fq,"href","/docs/transformers/pr_10638/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(Cq,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(Mq,"href","/docs/transformers/pr_10638/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Zv,"id","transformers.AutoModelForMaskedImageModeling"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(Eq,"href","/docs/transformers/pr_10638/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(yq,"href","/docs/transformers/pr_10638/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(wq,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(a6,"id","transformers.AutoModelForObjectDetection"),d(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a6,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Aq,"href","/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(l6,"id","transformers.AutoModelForImageSegmentation"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Lq,"href","/docs/transformers/pr_10638/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(c6,"id","transformers.AutoModelForSemanticSegmentation"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Bq,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(xq,"href","/docs/transformers/pr_10638/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(kq,"href","/docs/transformers/pr_10638/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(p6,"id","transformers.AutoModelForInstanceSegmentation"),d(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p6,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Rq,"href","/docs/transformers/pr_10638/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(b6,"id","transformers.TFAutoModel"),d(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b6,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(Sq,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertModel"),d(Pq,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartModel"),d($q,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertModel"),d(Iq,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Dq,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Nq,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertModel"),d(jq,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.TFCLIPModel"),d(qq,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertModel"),d(Gq,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.TFConvNextModel"),d(Oq,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Xq,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaModel"),d(Vq,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(zq,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Wq,"href","/docs/transformers/pr_10638/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Qq,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraModel"),d(Hq,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Uq,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelModel"),d(Jq,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Yq,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Kq,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJModel"),d(Zq,"href","/docs/transformers/pr_10638/en/model_doc/hubert#transformers.TFHubertModel"),d(eG,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(oG,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.TFLEDModel"),d(rG,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerModel"),d(tG,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.TFLxmertModel"),d(aG,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.TFMarianModel"),d(nG,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.TFMBartModel"),d(sG,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(lG,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetModel"),d(iG,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.TFMT5Model"),d(dG,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(cG,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.TFPegasusModel"),d(fG,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertModel"),d(mG,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaModel"),d(gG,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerModel"),d(hG,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(pG,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5Model"),d(_G,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasModel"),d(uG,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(bG,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.TFViTModel"),d(vG,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(TG,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMModel"),d(FG,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(CG,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(l0,"id","transformers.TFAutoModelForPreTraining"),d(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l0,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(MG,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(EG,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(yG,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForPreTraining"),d(wG,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(AG,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(LG,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(BG,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(xG,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(kG,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(RG,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(SG,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(PG,"href","/docs/transformers/pr_10638/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d($G,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(IG,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(DG,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(NG,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(jG,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(qG,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(GG,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(OG,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(XG,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(VG,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(x0,"id","transformers.TFAutoModelForCausalLM"),d(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x0,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(zG,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(WG,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(QG,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(HG,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(UG,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(JG,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(YG,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(KG,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(ZG,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(eO,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(oO,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(rO,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(X0,"id","transformers.TFAutoModelForImageClassification"),d(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X0,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(tO,"href","/docs/transformers/pr_10638/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(aO,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(W0,"id","transformers.TFAutoModelForMaskedLM"),d(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W0,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(nO,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sO,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lO,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iO,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dO,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(cO,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fO,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mO,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gO,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(hO,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pO,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_O,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uO,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(bO,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(vO,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(TO,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(FO,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(CO,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(MO,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(EO,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(gT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(yO,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(AO,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(BO,"href","/docs/transformers/pr_10638/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(xO,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.TFMarianMTModel"),d(kO,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(RO,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(SO,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(PO,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(ET,"id","transformers.TFAutoModelForSequenceClassification"),d(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ET,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d($O,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(IO,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(DO,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(NO,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_10638/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(qO,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(GO,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(OO,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(XO,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(VO,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(zO,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(WO,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(QO,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(HO,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(UO,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(JO,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(YO,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(KO,"href","/docs/transformers/pr_10638/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(eX,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(oX,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(rX,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(tX,"href","/docs/transformers/pr_10638/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(aX,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(nX,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(sX,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(YT,"id","transformers.TFAutoModelForMultipleChoice"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(lX,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(dX,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(cX,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(fX,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(gX,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(hX,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(pX,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(_X,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(uX,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(bX,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(vX,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(TX,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(FX,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(CX,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(MX,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(p8,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(Ft,"class","docstring"),d(EX,"href","/docs/transformers/pr_10638/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(u8,"id","transformers.TFAutoModelForTokenClassification"),d(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u8,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(yX,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(wX,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(LX,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(BX,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(xX,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(kX,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(RX,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(SX,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(PX,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d($X,"href","/docs/transformers/pr_10638/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(IX,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(DX,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(NX,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(jX,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(qX,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(GX,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(OX,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(XX,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(VX,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(N8,"id","transformers.TFAutoModelForQuestionAnswering"),d(N8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(zX,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_10638/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_10638/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_10638/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_10638/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_10638/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(eV,"href","/docs/transformers/pr_10638/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_10638/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(tV,"href","/docs/transformers/pr_10638/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_10638/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_10638/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(lV,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_10638/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(dV,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_10638/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(nF,"id","transformers.TFAutoModelForVision2Seq"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(fV,"href","/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(lF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(mV,"href","/docs/transformers/pr_10638/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(dF,"id","transformers.FlaxAutoModel"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(gV,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertModel"),d(hV,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartModel"),d(pV,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.FlaxBeitModel"),d(_V,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertModel"),d(uV,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(bV,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(vV,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(TV,"href","/docs/transformers/pr_10638/en/model_doc/clip#transformers.FlaxCLIPModel"),d(FV,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(CV,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraModel"),d(MV,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(EV,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(yV,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(wV,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.FlaxMarianModel"),d(AV,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartModel"),d(LV,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5Model"),d(BV,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(xV,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(kV,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(RV,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5Model"),d(SV,"href","/docs/transformers/pr_10638/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(PV,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.FlaxViTModel"),d($V,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(IV,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(DV,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d($F,"id","transformers.FlaxAutoModelForCausalLM"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(NV,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(jV,"href","/docs/transformers/pr_10638/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(qV,"href","/docs/transformers/pr_10638/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(GV,"href","/docs/transformers/pr_10638/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(OV,"href","/docs/transformers/pr_10638/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(GF,"id","transformers.FlaxAutoModelForPreTraining"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(XV,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(VV,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(WV,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(QV,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(HV,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_10638/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(ez,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(eC,"id","transformers.FlaxAutoModelForMaskedLM"),d(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(oz,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(rz,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(az,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(nz,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(sz,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(lz,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(iz,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(dz,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(cz,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(fC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(fz,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(mz,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(gz,"href","/docs/transformers/pr_10638/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(hz,"href","/docs/transformers/pr_10638/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(pz,"href","/docs/transformers/pr_10638/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(_z,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(uz,"href","/docs/transformers/pr_10638/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(bz,"href","/docs/transformers/pr_10638/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(vz,"href","/docs/transformers/pr_10638/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(FC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(Tz,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(yz,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(wz,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Az,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Bz,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Dr,"class","docstring"),d(RC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(xz,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_10638/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Rz,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Pz,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d($z,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Iz,"href","/docs/transformers/pr_10638/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Dz,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Nz,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(jz,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(XC,"id","transformers.FlaxAutoModelForTokenClassification"),d(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(qz,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Xz,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(zz,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Wz,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Qz,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(KC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(Hz,"href","/docs/transformers/pr_10638/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_10638/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_10638/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_10638/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_10638/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(eW,"href","/docs/transformers/pr_10638/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(oW,"href","/docs/transformers/pr_10638/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(lM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(rW,"href","/docs/transformers/pr_10638/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(dM,"id","transformers.FlaxAutoModelForImageClassification"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(tW,"href","/docs/transformers/pr_10638/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(aW,"href","/docs/transformers/pr_10638/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Do,"class","docstring"),d(Or,"class","docstring"),d(mM,"id","transformers.FlaxAutoModelForVision2Seq"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Dt,"class","docstring"),d(nW,"href","/docs/transformers/pr_10638/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,Df,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,g4),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,h4),e(co,On),e(co,Xn),e(Xn,p4),e(co,qi),e(co,Vn),e(Vn,_4),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,n9),e(_e,Oi),e(Oi,s9),e(_e,l9),b(c,zo,u),b(c,Ga,u),e(Ga,i9),e(Ga,qf),e(qf,d9),e(Ga,O$e),b(c,Bke,u),b(c,Xi,u),e(Xi,Gf),e(Gf,ZQ),g(u4,ZQ,null),e(Xi,X$e),e(Xi,eH),e(eH,V$e),b(c,xke,u),b(c,zn,u),e(zn,z$e),e(zn,oH),e(oH,W$e),e(zn,Q$e),e(zn,rH),e(rH,H$e),e(zn,U$e),b(c,kke,u),g(b4,c,u),b(c,Rke,u),b(c,c9,u),e(c9,J$e),b(c,Ske,u),g(Of,c,u),b(c,Pke,u),b(c,Vi,u),e(Vi,Xf),e(Xf,tH),g(v4,tH,null),e(Vi,Y$e),e(Vi,aH),e(aH,K$e),b(c,$ke,u),b(c,Wo,u),g(T4,Wo,null),e(Wo,Z$e),e(Wo,F4),e(F4,eIe),e(F4,f9),e(f9,oIe),e(F4,rIe),e(Wo,tIe),e(Wo,C4),e(C4,aIe),e(C4,nH),e(nH,nIe),e(C4,sIe),e(Wo,lIe),e(Wo,mo),g(M4,mo,null),e(mo,iIe),e(mo,sH),e(sH,dIe),e(mo,cIe),e(mo,zi),e(zi,fIe),e(zi,lH),e(lH,mIe),e(zi,gIe),e(zi,iH),e(iH,hIe),e(zi,pIe),e(mo,_Ie),e(mo,v),e(v,Vf),e(Vf,dH),e(dH,uIe),e(Vf,bIe),e(Vf,m9),e(m9,vIe),e(Vf,TIe),e(v,FIe),e(v,zf),e(zf,cH),e(cH,CIe),e(zf,MIe),e(zf,g9),e(g9,EIe),e(zf,yIe),e(v,wIe),e(v,Wf),e(Wf,fH),e(fH,AIe),e(Wf,LIe),e(Wf,h9),e(h9,BIe),e(Wf,xIe),e(v,kIe),e(v,Qf),e(Qf,mH),e(mH,RIe),e(Qf,SIe),e(Qf,p9),e(p9,PIe),e(Qf,$Ie),e(v,IIe),e(v,Hf),e(Hf,gH),e(gH,DIe),e(Hf,NIe),e(Hf,_9),e(_9,jIe),e(Hf,qIe),e(v,GIe),e(v,Uf),e(Uf,hH),e(hH,OIe),e(Uf,XIe),e(Uf,u9),e(u9,VIe),e(Uf,zIe),e(v,WIe),e(v,Jf),e(Jf,pH),e(pH,QIe),e(Jf,HIe),e(Jf,b9),e(b9,UIe),e(Jf,JIe),e(v,YIe),e(v,Yf),e(Yf,_H),e(_H,KIe),e(Yf,ZIe),e(Yf,v9),e(v9,eDe),e(Yf,oDe),e(v,rDe),e(v,Kf),e(Kf,uH),e(uH,tDe),e(Kf,aDe),e(Kf,T9),e(T9,nDe),e(Kf,sDe),e(v,lDe),e(v,Zf),e(Zf,bH),e(bH,iDe),e(Zf,dDe),e(Zf,F9),e(F9,cDe),e(Zf,fDe),e(v,mDe),e(v,em),e(em,vH),e(vH,gDe),e(em,hDe),e(em,C9),e(C9,pDe),e(em,_De),e(v,uDe),e(v,om),e(om,TH),e(TH,bDe),e(om,vDe),e(om,M9),e(M9,TDe),e(om,FDe),e(v,CDe),e(v,rm),e(rm,FH),e(FH,MDe),e(rm,EDe),e(rm,E9),e(E9,yDe),e(rm,wDe),e(v,ADe),e(v,tm),e(tm,CH),e(CH,LDe),e(tm,BDe),e(tm,y9),e(y9,xDe),e(tm,kDe),e(v,RDe),e(v,am),e(am,MH),e(MH,SDe),e(am,PDe),e(am,w9),e(w9,$De),e(am,IDe),e(v,DDe),e(v,nm),e(nm,EH),e(EH,NDe),e(nm,jDe),e(nm,A9),e(A9,qDe),e(nm,GDe),e(v,ODe),e(v,sm),e(sm,yH),e(yH,XDe),e(sm,VDe),e(sm,L9),e(L9,zDe),e(sm,WDe),e(v,QDe),e(v,lm),e(lm,wH),e(wH,HDe),e(lm,UDe),e(lm,B9),e(B9,JDe),e(lm,YDe),e(v,KDe),e(v,im),e(im,AH),e(AH,ZDe),e(im,eNe),e(im,x9),e(x9,oNe),e(im,rNe),e(v,tNe),e(v,dm),e(dm,LH),e(LH,aNe),e(dm,nNe),e(dm,k9),e(k9,sNe),e(dm,lNe),e(v,iNe),e(v,cm),e(cm,BH),e(BH,dNe),e(cm,cNe),e(cm,R9),e(R9,fNe),e(cm,mNe),e(v,gNe),e(v,fm),e(fm,xH),e(xH,hNe),e(fm,pNe),e(fm,S9),e(S9,_Ne),e(fm,uNe),e(v,bNe),e(v,mm),e(mm,kH),e(kH,vNe),e(mm,TNe),e(mm,P9),e(P9,FNe),e(mm,CNe),e(v,MNe),e(v,gm),e(gm,RH),e(RH,ENe),e(gm,yNe),e(gm,$9),e($9,wNe),e(gm,ANe),e(v,LNe),e(v,hm),e(hm,SH),e(SH,BNe),e(hm,xNe),e(hm,I9),e(I9,kNe),e(hm,RNe),e(v,SNe),e(v,pm),e(pm,PH),e(PH,PNe),e(pm,$Ne),e(pm,D9),e(D9,INe),e(pm,DNe),e(v,NNe),e(v,_m),e(_m,$H),e($H,jNe),e(_m,qNe),e(_m,N9),e(N9,GNe),e(_m,ONe),e(v,XNe),e(v,um),e(um,IH),e(IH,VNe),e(um,zNe),e(um,j9),e(j9,WNe),e(um,QNe),e(v,HNe),e(v,bm),e(bm,DH),e(DH,UNe),e(bm,JNe),e(bm,q9),e(q9,YNe),e(bm,KNe),e(v,ZNe),e(v,vm),e(vm,NH),e(NH,eje),e(vm,oje),e(vm,G9),e(G9,rje),e(vm,tje),e(v,aje),e(v,Tm),e(Tm,jH),e(jH,nje),e(Tm,sje),e(Tm,O9),e(O9,lje),e(Tm,ije),e(v,dje),e(v,Fm),e(Fm,qH),e(qH,cje),e(Fm,fje),e(Fm,X9),e(X9,mje),e(Fm,gje),e(v,hje),e(v,Cm),e(Cm,GH),e(GH,pje),e(Cm,_je),e(Cm,V9),e(V9,uje),e(Cm,bje),e(v,vje),e(v,Mm),e(Mm,OH),e(OH,Tje),e(Mm,Fje),e(Mm,z9),e(z9,Cje),e(Mm,Mje),e(v,Eje),e(v,Em),e(Em,XH),e(XH,yje),e(Em,wje),e(Em,W9),e(W9,Aje),e(Em,Lje),e(v,Bje),e(v,ym),e(ym,VH),e(VH,xje),e(ym,kje),e(ym,Q9),e(Q9,Rje),e(ym,Sje),e(v,Pje),e(v,wm),e(wm,zH),e(zH,$je),e(wm,Ije),e(wm,H9),e(H9,Dje),e(wm,Nje),e(v,jje),e(v,Am),e(Am,WH),e(WH,qje),e(Am,Gje),e(Am,U9),e(U9,Oje),e(Am,Xje),e(v,Vje),e(v,Lm),e(Lm,QH),e(QH,zje),e(Lm,Wje),e(Lm,J9),e(J9,Qje),e(Lm,Hje),e(v,Uje),e(v,Bm),e(Bm,HH),e(HH,Jje),e(Bm,Yje),e(Bm,Y9),e(Y9,Kje),e(Bm,Zje),e(v,eqe),e(v,xm),e(xm,UH),e(UH,oqe),e(xm,rqe),e(xm,K9),e(K9,tqe),e(xm,aqe),e(v,nqe),e(v,km),e(km,JH),e(JH,sqe),e(km,lqe),e(km,Z9),e(Z9,iqe),e(km,dqe),e(v,cqe),e(v,Rm),e(Rm,YH),e(YH,fqe),e(Rm,mqe),e(Rm,eB),e(eB,gqe),e(Rm,hqe),e(v,pqe),e(v,Sm),e(Sm,KH),e(KH,_qe),e(Sm,uqe),e(Sm,oB),e(oB,bqe),e(Sm,vqe),e(v,Tqe),e(v,Pm),e(Pm,ZH),e(ZH,Fqe),e(Pm,Cqe),e(Pm,rB),e(rB,Mqe),e(Pm,Eqe),e(v,yqe),e(v,$m),e($m,eU),e(eU,wqe),e($m,Aqe),e($m,tB),e(tB,Lqe),e($m,Bqe),e(v,xqe),e(v,Im),e(Im,oU),e(oU,kqe),e(Im,Rqe),e(Im,aB),e(aB,Sqe),e(Im,Pqe),e(v,$qe),e(v,Dm),e(Dm,rU),e(rU,Iqe),e(Dm,Dqe),e(Dm,nB),e(nB,Nqe),e(Dm,jqe),e(v,qqe),e(v,Nm),e(Nm,tU),e(tU,Gqe),e(Nm,Oqe),e(Nm,sB),e(sB,Xqe),e(Nm,Vqe),e(v,zqe),e(v,jm),e(jm,aU),e(aU,Wqe),e(jm,Qqe),e(jm,lB),e(lB,Hqe),e(jm,Uqe),e(v,Jqe),e(v,qm),e(qm,nU),e(nU,Yqe),e(qm,Kqe),e(qm,iB),e(iB,Zqe),e(qm,eGe),e(v,oGe),e(v,Gm),e(Gm,sU),e(sU,rGe),e(Gm,tGe),e(Gm,dB),e(dB,aGe),e(Gm,nGe),e(v,sGe),e(v,Om),e(Om,lU),e(lU,lGe),e(Om,iGe),e(Om,cB),e(cB,dGe),e(Om,cGe),e(v,fGe),e(v,Xm),e(Xm,iU),e(iU,mGe),e(Xm,gGe),e(Xm,fB),e(fB,hGe),e(Xm,pGe),e(v,_Ge),e(v,Vm),e(Vm,dU),e(dU,uGe),e(Vm,bGe),e(Vm,mB),e(mB,vGe),e(Vm,TGe),e(v,FGe),e(v,zm),e(zm,cU),e(cU,CGe),e(zm,MGe),e(zm,gB),e(gB,EGe),e(zm,yGe),e(v,wGe),e(v,Wm),e(Wm,fU),e(fU,AGe),e(Wm,LGe),e(Wm,hB),e(hB,BGe),e(Wm,xGe),e(v,kGe),e(v,Qm),e(Qm,mU),e(mU,RGe),e(Qm,SGe),e(Qm,pB),e(pB,PGe),e(Qm,$Ge),e(v,IGe),e(v,Hm),e(Hm,gU),e(gU,DGe),e(Hm,NGe),e(Hm,_B),e(_B,jGe),e(Hm,qGe),e(v,GGe),e(v,Um),e(Um,hU),e(hU,OGe),e(Um,XGe),e(Um,uB),e(uB,VGe),e(Um,zGe),e(v,WGe),e(v,Jm),e(Jm,pU),e(pU,QGe),e(Jm,HGe),e(Jm,bB),e(bB,UGe),e(Jm,JGe),e(v,YGe),e(v,Ym),e(Ym,_U),e(_U,KGe),e(Ym,ZGe),e(Ym,vB),e(vB,eOe),e(Ym,oOe),e(v,rOe),e(v,Km),e(Km,uU),e(uU,tOe),e(Km,aOe),e(Km,TB),e(TB,nOe),e(Km,sOe),e(v,lOe),e(v,Zm),e(Zm,bU),e(bU,iOe),e(Zm,dOe),e(Zm,FB),e(FB,cOe),e(Zm,fOe),e(v,mOe),e(v,eg),e(eg,vU),e(vU,gOe),e(eg,hOe),e(eg,CB),e(CB,pOe),e(eg,_Oe),e(v,uOe),e(v,og),e(og,TU),e(TU,bOe),e(og,vOe),e(og,MB),e(MB,TOe),e(og,FOe),e(v,COe),e(v,rg),e(rg,FU),e(FU,MOe),e(rg,EOe),e(rg,EB),e(EB,yOe),e(rg,wOe),e(v,AOe),e(v,tg),e(tg,CU),e(CU,LOe),e(tg,BOe),e(tg,yB),e(yB,xOe),e(tg,kOe),e(v,ROe),e(v,ag),e(ag,MU),e(MU,SOe),e(ag,POe),e(ag,wB),e(wB,$Oe),e(ag,IOe),e(v,DOe),e(v,ng),e(ng,EU),e(EU,NOe),e(ng,jOe),e(ng,AB),e(AB,qOe),e(ng,GOe),e(v,OOe),e(v,sg),e(sg,yU),e(yU,XOe),e(sg,VOe),e(sg,LB),e(LB,zOe),e(sg,WOe),e(v,QOe),e(v,lg),e(lg,wU),e(wU,HOe),e(lg,UOe),e(lg,BB),e(BB,JOe),e(lg,YOe),e(v,KOe),e(v,ig),e(ig,AU),e(AU,ZOe),e(ig,eXe),e(ig,xB),e(xB,oXe),e(ig,rXe),e(v,tXe),e(v,dg),e(dg,LU),e(LU,aXe),e(dg,nXe),e(dg,kB),e(kB,sXe),e(dg,lXe),e(v,iXe),e(v,cg),e(cg,BU),e(BU,dXe),e(cg,cXe),e(cg,RB),e(RB,fXe),e(cg,mXe),e(v,gXe),e(v,fg),e(fg,xU),e(xU,hXe),e(fg,pXe),e(fg,SB),e(SB,_Xe),e(fg,uXe),e(v,bXe),e(v,mg),e(mg,kU),e(kU,vXe),e(mg,TXe),e(mg,PB),e(PB,FXe),e(mg,CXe),e(v,MXe),e(v,gg),e(gg,RU),e(RU,EXe),e(gg,yXe),e(gg,$B),e($B,wXe),e(gg,AXe),e(v,LXe),e(v,hg),e(hg,SU),e(SU,BXe),e(hg,xXe),e(hg,IB),e(IB,kXe),e(hg,RXe),e(v,SXe),e(v,pg),e(pg,PU),e(PU,PXe),e(pg,$Xe),e(pg,DB),e(DB,IXe),e(pg,DXe),e(v,NXe),e(v,_g),e(_g,$U),e($U,jXe),e(_g,qXe),e(_g,NB),e(NB,GXe),e(_g,OXe),e(v,XXe),e(v,ug),e(ug,IU),e(IU,VXe),e(ug,zXe),e(ug,jB),e(jB,WXe),e(ug,QXe),e(v,HXe),e(v,bg),e(bg,DU),e(DU,UXe),e(bg,JXe),e(bg,qB),e(qB,YXe),e(bg,KXe),e(v,ZXe),e(v,vg),e(vg,NU),e(NU,eVe),e(vg,oVe),e(vg,GB),e(GB,rVe),e(vg,tVe),e(v,aVe),e(v,Tg),e(Tg,jU),e(jU,nVe),e(Tg,sVe),e(Tg,OB),e(OB,lVe),e(Tg,iVe),e(v,dVe),e(v,Fg),e(Fg,qU),e(qU,cVe),e(Fg,fVe),e(Fg,XB),e(XB,mVe),e(Fg,gVe),e(v,hVe),e(v,Cg),e(Cg,GU),e(GU,pVe),e(Cg,_Ve),e(Cg,VB),e(VB,uVe),e(Cg,bVe),e(v,vVe),e(v,Mg),e(Mg,OU),e(OU,TVe),e(Mg,FVe),e(Mg,zB),e(zB,CVe),e(Mg,MVe),e(v,EVe),e(v,Eg),e(Eg,XU),e(XU,yVe),e(Eg,wVe),e(Eg,WB),e(WB,AVe),e(Eg,LVe),e(v,BVe),e(v,yg),e(yg,VU),e(VU,xVe),e(yg,kVe),e(yg,QB),e(QB,RVe),e(yg,SVe),e(v,PVe),e(v,wg),e(wg,zU),e(zU,$Ve),e(wg,IVe),e(wg,HB),e(HB,DVe),e(wg,NVe),e(v,jVe),e(v,Ag),e(Ag,WU),e(WU,qVe),e(Ag,GVe),e(Ag,UB),e(UB,OVe),e(Ag,XVe),e(v,VVe),e(v,Lg),e(Lg,QU),e(QU,zVe),e(Lg,WVe),e(Lg,JB),e(JB,QVe),e(Lg,HVe),e(v,UVe),e(v,Bg),e(Bg,HU),e(HU,JVe),e(Bg,YVe),e(Bg,YB),e(YB,KVe),e(Bg,ZVe),e(v,eze),e(v,xg),e(xg,UU),e(UU,oze),e(xg,rze),e(xg,KB),e(KB,tze),e(xg,aze),e(v,nze),e(v,kg),e(kg,JU),e(JU,sze),e(kg,lze),e(kg,ZB),e(ZB,ize),e(kg,dze),e(v,cze),e(v,Rg),e(Rg,YU),e(YU,fze),e(Rg,mze),e(Rg,ex),e(ex,gze),e(Rg,hze),e(v,pze),e(v,Sg),e(Sg,KU),e(KU,_ze),e(Sg,uze),e(Sg,ox),e(ox,bze),e(Sg,vze),e(v,Tze),e(v,Pg),e(Pg,ZU),e(ZU,Fze),e(Pg,Cze),e(Pg,rx),e(rx,Mze),e(Pg,Eze),e(mo,yze),e(mo,eJ),e(eJ,wze),e(mo,Aze),g(E4,mo,null),e(Wo,Lze),e(Wo,$g),g(y4,$g,null),e($g,Bze),e($g,oJ),e(oJ,xze),b(c,Ike,u),b(c,Wi,u),e(Wi,Ig),e(Ig,rJ),g(w4,rJ,null),e(Wi,kze),e(Wi,tJ),e(tJ,Rze),b(c,Dke,u),b(c,Qo,u),g(A4,Qo,null),e(Qo,Sze),e(Qo,L4),e(L4,Pze),e(L4,tx),e(tx,$ze),e(L4,Ize),e(Qo,Dze),e(Qo,B4),e(B4,Nze),e(B4,aJ),e(aJ,jze),e(B4,qze),e(Qo,Gze),e(Qo,go),g(x4,go,null),e(go,Oze),e(go,nJ),e(nJ,Xze),e(go,Vze),e(go,Oa),e(Oa,zze),e(Oa,sJ),e(sJ,Wze),e(Oa,Qze),e(Oa,lJ),e(lJ,Hze),e(Oa,Uze),e(Oa,iJ),e(iJ,Jze),e(Oa,Yze),e(go,Kze),e(go,E),e(E,Wn),e(Wn,dJ),e(dJ,Zze),e(Wn,eWe),e(Wn,ax),e(ax,oWe),e(Wn,rWe),e(Wn,nx),e(nx,tWe),e(Wn,aWe),e(E,nWe),e(E,Qn),e(Qn,cJ),e(cJ,sWe),e(Qn,lWe),e(Qn,sx),e(sx,iWe),e(Qn,dWe),e(Qn,lx),e(lx,cWe),e(Qn,fWe),e(E,mWe),e(E,Hn),e(Hn,fJ),e(fJ,gWe),e(Hn,hWe),e(Hn,ix),e(ix,pWe),e(Hn,_We),e(Hn,dx),e(dx,uWe),e(Hn,bWe),e(E,vWe),e(E,Dg),e(Dg,mJ),e(mJ,TWe),e(Dg,FWe),e(Dg,cx),e(cx,CWe),e(Dg,MWe),e(E,EWe),e(E,Un),e(Un,gJ),e(gJ,yWe),e(Un,wWe),e(Un,fx),e(fx,AWe),e(Un,LWe),e(Un,mx),e(mx,BWe),e(Un,xWe),e(E,kWe),e(E,Ng),e(Ng,hJ),e(hJ,RWe),e(Ng,SWe),e(Ng,gx),e(gx,PWe),e(Ng,$We),e(E,IWe),e(E,jg),e(jg,pJ),e(pJ,DWe),e(jg,NWe),e(jg,hx),e(hx,jWe),e(jg,qWe),e(E,GWe),e(E,qg),e(qg,_J),e(_J,OWe),e(qg,XWe),e(qg,px),e(px,VWe),e(qg,zWe),e(E,WWe),e(E,Jn),e(Jn,uJ),e(uJ,QWe),e(Jn,HWe),e(Jn,_x),e(_x,UWe),e(Jn,JWe),e(Jn,ux),e(ux,YWe),e(Jn,KWe),e(E,ZWe),e(E,Yn),e(Yn,bJ),e(bJ,eQe),e(Yn,oQe),e(Yn,bx),e(bx,rQe),e(Yn,tQe),e(Yn,vx),e(vx,aQe),e(Yn,nQe),e(E,sQe),e(E,Kn),e(Kn,vJ),e(vJ,lQe),e(Kn,iQe),e(Kn,Tx),e(Tx,dQe),e(Kn,cQe),e(Kn,Fx),e(Fx,fQe),e(Kn,mQe),e(E,gQe),e(E,Gg),e(Gg,TJ),e(TJ,hQe),e(Gg,pQe),e(Gg,Cx),e(Cx,_Qe),e(Gg,uQe),e(E,bQe),e(E,Og),e(Og,FJ),e(FJ,vQe),e(Og,TQe),e(Og,Mx),e(Mx,FQe),e(Og,CQe),e(E,MQe),e(E,Zn),e(Zn,CJ),e(CJ,EQe),e(Zn,yQe),e(Zn,Ex),e(Ex,wQe),e(Zn,AQe),e(Zn,yx),e(yx,LQe),e(Zn,BQe),e(E,xQe),e(E,Xg),e(Xg,MJ),e(MJ,kQe),e(Xg,RQe),e(Xg,wx),e(wx,SQe),e(Xg,PQe),e(E,$Qe),e(E,es),e(es,EJ),e(EJ,IQe),e(es,DQe),e(es,Ax),e(Ax,NQe),e(es,jQe),e(es,Lx),e(Lx,qQe),e(es,GQe),e(E,OQe),e(E,os),e(os,yJ),e(yJ,XQe),e(os,VQe),e(os,Bx),e(Bx,zQe),e(os,WQe),e(os,xx),e(xx,QQe),e(os,HQe),e(E,UQe),e(E,rs),e(rs,wJ),e(wJ,JQe),e(rs,YQe),e(rs,kx),e(kx,KQe),e(rs,ZQe),e(rs,AJ),e(AJ,eHe),e(rs,oHe),e(E,rHe),e(E,Vg),e(Vg,LJ),e(LJ,tHe),e(Vg,aHe),e(Vg,Rx),e(Rx,nHe),e(Vg,sHe),e(E,lHe),e(E,ts),e(ts,BJ),e(BJ,iHe),e(ts,dHe),e(ts,Sx),e(Sx,cHe),e(ts,fHe),e(ts,Px),e(Px,mHe),e(ts,gHe),e(E,hHe),e(E,zg),e(zg,xJ),e(xJ,pHe),e(zg,_He),e(zg,$x),e($x,uHe),e(zg,bHe),e(E,vHe),e(E,as),e(as,kJ),e(kJ,THe),e(as,FHe),e(as,Ix),e(Ix,CHe),e(as,MHe),e(as,Dx),e(Dx,EHe),e(as,yHe),e(E,wHe),e(E,ns),e(ns,RJ),e(RJ,AHe),e(ns,LHe),e(ns,Nx),e(Nx,BHe),e(ns,xHe),e(ns,jx),e(jx,kHe),e(ns,RHe),e(E,SHe),e(E,ss),e(ss,SJ),e(SJ,PHe),e(ss,$He),e(ss,qx),e(qx,IHe),e(ss,DHe),e(ss,Gx),e(Gx,NHe),e(ss,jHe),e(E,qHe),e(E,Wg),e(Wg,PJ),e(PJ,GHe),e(Wg,OHe),e(Wg,Ox),e(Ox,XHe),e(Wg,VHe),e(E,zHe),e(E,ls),e(ls,$J),e($J,WHe),e(ls,QHe),e(ls,Xx),e(Xx,HHe),e(ls,UHe),e(ls,Vx),e(Vx,JHe),e(ls,YHe),e(E,KHe),e(E,Qg),e(Qg,IJ),e(IJ,ZHe),e(Qg,eUe),e(Qg,zx),e(zx,oUe),e(Qg,rUe),e(E,tUe),e(E,is),e(is,DJ),e(DJ,aUe),e(is,nUe),e(is,Wx),e(Wx,sUe),e(is,lUe),e(is,Qx),e(Qx,iUe),e(is,dUe),e(E,cUe),e(E,ds),e(ds,NJ),e(NJ,fUe),e(ds,mUe),e(ds,Hx),e(Hx,gUe),e(ds,hUe),e(ds,Ux),e(Ux,pUe),e(ds,_Ue),e(E,uUe),e(E,cs),e(cs,jJ),e(jJ,bUe),e(cs,vUe),e(cs,Jx),e(Jx,TUe),e(cs,FUe),e(cs,Yx),e(Yx,CUe),e(cs,MUe),e(E,EUe),e(E,fs),e(fs,qJ),e(qJ,yUe),e(fs,wUe),e(fs,Kx),e(Kx,AUe),e(fs,LUe),e(fs,Zx),e(Zx,BUe),e(fs,xUe),e(E,kUe),e(E,Hg),e(Hg,GJ),e(GJ,RUe),e(Hg,SUe),e(Hg,ek),e(ek,PUe),e(Hg,$Ue),e(E,IUe),e(E,ms),e(ms,OJ),e(OJ,DUe),e(ms,NUe),e(ms,ok),e(ok,jUe),e(ms,qUe),e(ms,rk),e(rk,GUe),e(ms,OUe),e(E,XUe),e(E,gs),e(gs,XJ),e(XJ,VUe),e(gs,zUe),e(gs,tk),e(tk,WUe),e(gs,QUe),e(gs,ak),e(ak,HUe),e(gs,UUe),e(E,JUe),e(E,hs),e(hs,VJ),e(VJ,YUe),e(hs,KUe),e(hs,nk),e(nk,ZUe),e(hs,eJe),e(hs,sk),e(sk,oJe),e(hs,rJe),e(E,tJe),e(E,ps),e(ps,zJ),e(zJ,aJe),e(ps,nJe),e(ps,lk),e(lk,sJe),e(ps,lJe),e(ps,ik),e(ik,iJe),e(ps,dJe),e(E,cJe),e(E,_s),e(_s,WJ),e(WJ,fJe),e(_s,mJe),e(_s,dk),e(dk,gJe),e(_s,hJe),e(_s,ck),e(ck,pJe),e(_s,_Je),e(E,uJe),e(E,us),e(us,QJ),e(QJ,bJe),e(us,vJe),e(us,fk),e(fk,TJe),e(us,FJe),e(us,mk),e(mk,CJe),e(us,MJe),e(E,EJe),e(E,Ug),e(Ug,HJ),e(HJ,yJe),e(Ug,wJe),e(Ug,gk),e(gk,AJe),e(Ug,LJe),e(E,BJe),e(E,bs),e(bs,UJ),e(UJ,xJe),e(bs,kJe),e(bs,hk),e(hk,RJe),e(bs,SJe),e(bs,pk),e(pk,PJe),e(bs,$Je),e(E,IJe),e(E,Jg),e(Jg,JJ),e(JJ,DJe),e(Jg,NJe),e(Jg,_k),e(_k,jJe),e(Jg,qJe),e(E,GJe),e(E,Yg),e(Yg,YJ),e(YJ,OJe),e(Yg,XJe),e(Yg,uk),e(uk,VJe),e(Yg,zJe),e(E,WJe),e(E,vs),e(vs,KJ),e(KJ,QJe),e(vs,HJe),e(vs,bk),e(bk,UJe),e(vs,JJe),e(vs,vk),e(vk,YJe),e(vs,KJe),e(E,ZJe),e(E,Ts),e(Ts,ZJ),e(ZJ,eYe),e(Ts,oYe),e(Ts,Tk),e(Tk,rYe),e(Ts,tYe),e(Ts,Fk),e(Fk,aYe),e(Ts,nYe),e(E,sYe),e(E,Kg),e(Kg,eY),e(eY,lYe),e(Kg,iYe),e(Kg,Ck),e(Ck,dYe),e(Kg,cYe),e(E,fYe),e(E,Fs),e(Fs,oY),e(oY,mYe),e(Fs,gYe),e(Fs,Mk),e(Mk,hYe),e(Fs,pYe),e(Fs,Ek),e(Ek,_Ye),e(Fs,uYe),e(E,bYe),e(E,Cs),e(Cs,rY),e(rY,vYe),e(Cs,TYe),e(Cs,yk),e(yk,FYe),e(Cs,CYe),e(Cs,wk),e(wk,MYe),e(Cs,EYe),e(E,yYe),e(E,Ms),e(Ms,tY),e(tY,wYe),e(Ms,AYe),e(Ms,Ak),e(Ak,LYe),e(Ms,BYe),e(Ms,Lk),e(Lk,xYe),e(Ms,kYe),e(E,RYe),e(E,Es),e(Es,aY),e(aY,SYe),e(Es,PYe),e(Es,Bk),e(Bk,$Ye),e(Es,IYe),e(Es,xk),e(xk,DYe),e(Es,NYe),e(E,jYe),e(E,ys),e(ys,nY),e(nY,qYe),e(ys,GYe),e(ys,kk),e(kk,OYe),e(ys,XYe),e(ys,Rk),e(Rk,VYe),e(ys,zYe),e(E,WYe),e(E,Zg),e(Zg,sY),e(sY,QYe),e(Zg,HYe),e(Zg,Sk),e(Sk,UYe),e(Zg,JYe),e(E,YYe),e(E,eh),e(eh,lY),e(lY,KYe),e(eh,ZYe),e(eh,Pk),e(Pk,eKe),e(eh,oKe),e(E,rKe),e(E,oh),e(oh,iY),e(iY,tKe),e(oh,aKe),e(oh,$k),e($k,nKe),e(oh,sKe),e(E,lKe),e(E,rh),e(rh,dY),e(dY,iKe),e(rh,dKe),e(rh,Ik),e(Ik,cKe),e(rh,fKe),e(E,mKe),e(E,ws),e(ws,cY),e(cY,gKe),e(ws,hKe),e(ws,Dk),e(Dk,pKe),e(ws,_Ke),e(ws,Nk),e(Nk,uKe),e(ws,bKe),e(E,vKe),e(E,th),e(th,fY),e(fY,TKe),e(th,FKe),e(th,jk),e(jk,CKe),e(th,MKe),e(E,EKe),e(E,As),e(As,mY),e(mY,yKe),e(As,wKe),e(As,qk),e(qk,AKe),e(As,LKe),e(As,Gk),e(Gk,BKe),e(As,xKe),e(E,kKe),e(E,Ls),e(Ls,gY),e(gY,RKe),e(Ls,SKe),e(Ls,Ok),e(Ok,PKe),e(Ls,$Ke),e(Ls,Xk),e(Xk,IKe),e(Ls,DKe),e(E,NKe),e(E,Bs),e(Bs,hY),e(hY,jKe),e(Bs,qKe),e(Bs,Vk),e(Vk,GKe),e(Bs,OKe),e(Bs,zk),e(zk,XKe),e(Bs,VKe),e(E,zKe),e(E,xs),e(xs,pY),e(pY,WKe),e(xs,QKe),e(xs,Wk),e(Wk,HKe),e(xs,UKe),e(xs,Qk),e(Qk,JKe),e(xs,YKe),e(E,KKe),e(E,ks),e(ks,_Y),e(_Y,ZKe),e(ks,eZe),e(ks,Hk),e(Hk,oZe),e(ks,rZe),e(ks,Uk),e(Uk,tZe),e(ks,aZe),e(E,nZe),e(E,Rs),e(Rs,uY),e(uY,sZe),e(Rs,lZe),e(Rs,Jk),e(Jk,iZe),e(Rs,dZe),e(Rs,Yk),e(Yk,cZe),e(Rs,fZe),e(E,mZe),e(E,ah),e(ah,bY),e(bY,gZe),e(ah,hZe),e(ah,Kk),e(Kk,pZe),e(ah,_Ze),e(E,uZe),e(E,nh),e(nh,vY),e(vY,bZe),e(nh,vZe),e(nh,Zk),e(Zk,TZe),e(nh,FZe),e(E,CZe),e(E,Ss),e(Ss,TY),e(TY,MZe),e(Ss,EZe),e(Ss,eR),e(eR,yZe),e(Ss,wZe),e(Ss,oR),e(oR,AZe),e(Ss,LZe),e(E,BZe),e(E,Ps),e(Ps,FY),e(FY,xZe),e(Ps,kZe),e(Ps,rR),e(rR,RZe),e(Ps,SZe),e(Ps,tR),e(tR,PZe),e(Ps,$Ze),e(E,IZe),e(E,$s),e($s,CY),e(CY,DZe),e($s,NZe),e($s,aR),e(aR,jZe),e($s,qZe),e($s,nR),e(nR,GZe),e($s,OZe),e(E,XZe),e(E,sh),e(sh,MY),e(MY,VZe),e(sh,zZe),e(sh,sR),e(sR,WZe),e(sh,QZe),e(E,HZe),e(E,lh),e(lh,EY),e(EY,UZe),e(lh,JZe),e(lh,lR),e(lR,YZe),e(lh,KZe),e(E,ZZe),e(E,ih),e(ih,yY),e(yY,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(E,aeo),e(E,dh),e(dh,wY),e(wY,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(E,deo),e(E,Is),e(Is,AY),e(AY,ceo),e(Is,feo),e(Is,cR),e(cR,meo),e(Is,geo),e(Is,fR),e(fR,heo),e(Is,peo),e(E,_eo),e(E,ch),e(ch,LY),e(LY,ueo),e(ch,beo),e(ch,mR),e(mR,veo),e(ch,Teo),e(E,Feo),e(E,fh),e(fh,BY),e(BY,Ceo),e(fh,Meo),e(fh,gR),e(gR,Eeo),e(fh,yeo),e(E,weo),e(E,Ds),e(Ds,xY),e(xY,Aeo),e(Ds,Leo),e(Ds,hR),e(hR,Beo),e(Ds,xeo),e(Ds,pR),e(pR,keo),e(Ds,Reo),e(E,Seo),e(E,Ns),e(Ns,kY),e(kY,Peo),e(Ns,$eo),e(Ns,_R),e(_R,Ieo),e(Ns,Deo),e(Ns,uR),e(uR,Neo),e(Ns,jeo),e(go,qeo),e(go,RY),e(RY,Geo),e(go,Oeo),g(k4,go,null),e(Qo,Xeo),e(Qo,mh),g(R4,mh,null),e(mh,Veo),e(mh,SY),e(SY,zeo),b(c,Nke,u),b(c,Qi,u),e(Qi,gh),e(gh,PY),g(S4,PY,null),e(Qi,Weo),e(Qi,$Y),e($Y,Qeo),b(c,jke,u),b(c,Ho,u),g(P4,Ho,null),e(Ho,Heo),e(Ho,$4),e($4,Ueo),e($4,bR),e(bR,Jeo),e($4,Yeo),e(Ho,Keo),e(Ho,I4),e(I4,Zeo),e(I4,IY),e(IY,eoo),e(I4,ooo),e(Ho,roo),e(Ho,$e),g(D4,$e,null),e($e,too),e($e,DY),e(DY,aoo),e($e,noo),e($e,Xa),e(Xa,soo),e(Xa,NY),e(NY,loo),e(Xa,ioo),e(Xa,jY),e(jY,doo),e(Xa,coo),e(Xa,qY),e(qY,foo),e(Xa,moo),e($e,goo),e($e,te),e(te,hh),e(hh,GY),e(GY,hoo),e(hh,poo),e(hh,vR),e(vR,_oo),e(hh,uoo),e(te,boo),e(te,ph),e(ph,OY),e(OY,voo),e(ph,Too),e(ph,TR),e(TR,Foo),e(ph,Coo),e(te,Moo),e(te,_h),e(_h,XY),e(XY,Eoo),e(_h,yoo),e(_h,FR),e(FR,woo),e(_h,Aoo),e(te,Loo),e(te,uh),e(uh,VY),e(VY,Boo),e(uh,xoo),e(uh,CR),e(CR,koo),e(uh,Roo),e(te,Soo),e(te,bh),e(bh,zY),e(zY,Poo),e(bh,$oo),e(bh,MR),e(MR,Ioo),e(bh,Doo),e(te,Noo),e(te,vh),e(vh,WY),e(WY,joo),e(vh,qoo),e(vh,ER),e(ER,Goo),e(vh,Ooo),e(te,Xoo),e(te,Th),e(Th,QY),e(QY,Voo),e(Th,zoo),e(Th,yR),e(yR,Woo),e(Th,Qoo),e(te,Hoo),e(te,Fh),e(Fh,HY),e(HY,Uoo),e(Fh,Joo),e(Fh,wR),e(wR,Yoo),e(Fh,Koo),e(te,Zoo),e(te,Ch),e(Ch,UY),e(UY,ero),e(Ch,oro),e(Ch,AR),e(AR,rro),e(Ch,tro),e(te,aro),e(te,Mh),e(Mh,JY),e(JY,nro),e(Mh,sro),e(Mh,LR),e(LR,lro),e(Mh,iro),e(te,dro),e(te,Eh),e(Eh,YY),e(YY,cro),e(Eh,fro),e(Eh,BR),e(BR,mro),e(Eh,gro),e(te,hro),e(te,yh),e(yh,KY),e(KY,pro),e(yh,_ro),e(yh,xR),e(xR,uro),e(yh,bro),e(te,vro),e(te,wh),e(wh,ZY),e(ZY,Tro),e(wh,Fro),e(wh,kR),e(kR,Cro),e(wh,Mro),e(te,Ero),e(te,Ah),e(Ah,eK),e(eK,yro),e(Ah,wro),e(Ah,RR),e(RR,Aro),e(Ah,Lro),e(te,Bro),e(te,Lh),e(Lh,oK),e(oK,xro),e(Lh,kro),e(Lh,SR),e(SR,Rro),e(Lh,Sro),e(te,Pro),e(te,Bh),e(Bh,rK),e(rK,$ro),e(Bh,Iro),e(Bh,PR),e(PR,Dro),e(Bh,Nro),e(te,jro),e(te,xh),e(xh,tK),e(tK,qro),e(xh,Gro),e(xh,$R),e($R,Oro),e(xh,Xro),e(te,Vro),e(te,kh),e(kh,aK),e(aK,zro),e(kh,Wro),e(kh,IR),e(IR,Qro),e(kh,Hro),e($e,Uro),g(Rh,$e,null),e($e,Jro),e($e,nK),e(nK,Yro),e($e,Kro),g(N4,$e,null),e(Ho,Zro),e(Ho,Sh),g(j4,Sh,null),e(Sh,eto),e(Sh,sK),e(sK,oto),b(c,qke,u),b(c,Hi,u),e(Hi,Ph),e(Ph,lK),g(q4,lK,null),e(Hi,rto),e(Hi,iK),e(iK,tto),b(c,Gke,u),b(c,Uo,u),g(G4,Uo,null),e(Uo,ato),e(Uo,O4),e(O4,nto),e(O4,DR),e(DR,sto),e(O4,lto),e(Uo,ito),e(Uo,X4),e(X4,dto),e(X4,dK),e(dK,cto),e(X4,fto),e(Uo,mto),e(Uo,Ie),g(V4,Ie,null),e(Ie,gto),e(Ie,cK),e(cK,hto),e(Ie,pto),e(Ie,Ui),e(Ui,_to),e(Ui,fK),e(fK,uto),e(Ui,bto),e(Ui,mK),e(mK,vto),e(Ui,Tto),e(Ie,Fto),e(Ie,xe),e(xe,$h),e($h,gK),e(gK,Cto),e($h,Mto),e($h,NR),e(NR,Eto),e($h,yto),e(xe,wto),e(xe,Ih),e(Ih,hK),e(hK,Ato),e(Ih,Lto),e(Ih,jR),e(jR,Bto),e(Ih,xto),e(xe,kto),e(xe,Dh),e(Dh,pK),e(pK,Rto),e(Dh,Sto),e(Dh,qR),e(qR,Pto),e(Dh,$to),e(xe,Ito),e(xe,Nh),e(Nh,_K),e(_K,Dto),e(Nh,Nto),e(Nh,GR),e(GR,jto),e(Nh,qto),e(xe,Gto),e(xe,jh),e(jh,uK),e(uK,Oto),e(jh,Xto),e(jh,OR),e(OR,Vto),e(jh,zto),e(xe,Wto),e(xe,qh),e(qh,bK),e(bK,Qto),e(qh,Hto),e(qh,XR),e(XR,Uto),e(qh,Jto),e(xe,Yto),e(xe,Gh),e(Gh,vK),e(vK,Kto),e(Gh,Zto),e(Gh,VR),e(VR,eao),e(Gh,oao),e(xe,rao),e(xe,Oh),e(Oh,TK),e(TK,tao),e(Oh,aao),e(Oh,zR),e(zR,nao),e(Oh,sao),e(Ie,lao),g(Xh,Ie,null),e(Ie,iao),e(Ie,FK),e(FK,dao),e(Ie,cao),g(z4,Ie,null),e(Uo,fao),e(Uo,Vh),g(W4,Vh,null),e(Vh,mao),e(Vh,CK),e(CK,gao),b(c,Oke,u),b(c,Ji,u),e(Ji,zh),e(zh,MK),g(Q4,MK,null),e(Ji,hao),e(Ji,EK),e(EK,pao),b(c,Xke,u),b(c,Jo,u),g(H4,Jo,null),e(Jo,_ao),e(Jo,Yi),e(Yi,uao),e(Yi,yK),e(yK,bao),e(Yi,vao),e(Yi,wK),e(wK,Tao),e(Yi,Fao),e(Jo,Cao),e(Jo,U4),e(U4,Mao),e(U4,AK),e(AK,Eao),e(U4,yao),e(Jo,wao),e(Jo,Vr),g(J4,Vr,null),e(Vr,Aao),e(Vr,LK),e(LK,Lao),e(Vr,Bao),e(Vr,Ki),e(Ki,xao),e(Ki,BK),e(BK,kao),e(Ki,Rao),e(Ki,xK),e(xK,Sao),e(Ki,Pao),e(Vr,$ao),e(Vr,kK),e(kK,Iao),e(Vr,Dao),g(Y4,Vr,null),e(Jo,Nao),e(Jo,De),g(K4,De,null),e(De,jao),e(De,RK),e(RK,qao),e(De,Gao),e(De,Va),e(Va,Oao),e(Va,SK),e(SK,Xao),e(Va,Vao),e(Va,PK),e(PK,zao),e(Va,Wao),e(Va,$K),e($K,Qao),e(Va,Hao),e(De,Uao),e(De,F),e(F,Wh),e(Wh,IK),e(IK,Jao),e(Wh,Yao),e(Wh,WR),e(WR,Kao),e(Wh,Zao),e(F,eno),e(F,Qh),e(Qh,DK),e(DK,ono),e(Qh,rno),e(Qh,QR),e(QR,tno),e(Qh,ano),e(F,nno),e(F,Hh),e(Hh,NK),e(NK,sno),e(Hh,lno),e(Hh,HR),e(HR,ino),e(Hh,dno),e(F,cno),e(F,Uh),e(Uh,jK),e(jK,fno),e(Uh,mno),e(Uh,UR),e(UR,gno),e(Uh,hno),e(F,pno),e(F,Jh),e(Jh,qK),e(qK,_no),e(Jh,uno),e(Jh,JR),e(JR,bno),e(Jh,vno),e(F,Tno),e(F,Yh),e(Yh,GK),e(GK,Fno),e(Yh,Cno),e(Yh,YR),e(YR,Mno),e(Yh,Eno),e(F,yno),e(F,Kh),e(Kh,OK),e(OK,wno),e(Kh,Ano),e(Kh,KR),e(KR,Lno),e(Kh,Bno),e(F,xno),e(F,Zh),e(Zh,XK),e(XK,kno),e(Zh,Rno),e(Zh,ZR),e(ZR,Sno),e(Zh,Pno),e(F,$no),e(F,ep),e(ep,VK),e(VK,Ino),e(ep,Dno),e(ep,eS),e(eS,Nno),e(ep,jno),e(F,qno),e(F,op),e(op,zK),e(zK,Gno),e(op,Ono),e(op,oS),e(oS,Xno),e(op,Vno),e(F,zno),e(F,rp),e(rp,WK),e(WK,Wno),e(rp,Qno),e(rp,rS),e(rS,Hno),e(rp,Uno),e(F,Jno),e(F,tp),e(tp,QK),e(QK,Yno),e(tp,Kno),e(tp,tS),e(tS,Zno),e(tp,eso),e(F,oso),e(F,ap),e(ap,HK),e(HK,rso),e(ap,tso),e(ap,aS),e(aS,aso),e(ap,nso),e(F,sso),e(F,np),e(np,UK),e(UK,lso),e(np,iso),e(np,nS),e(nS,dso),e(np,cso),e(F,fso),e(F,sp),e(sp,JK),e(JK,mso),e(sp,gso),e(sp,sS),e(sS,hso),e(sp,pso),e(F,_so),e(F,lp),e(lp,YK),e(YK,uso),e(lp,bso),e(lp,lS),e(lS,vso),e(lp,Tso),e(F,Fso),e(F,ip),e(ip,KK),e(KK,Cso),e(ip,Mso),e(ip,iS),e(iS,Eso),e(ip,yso),e(F,wso),e(F,dp),e(dp,ZK),e(ZK,Aso),e(dp,Lso),e(dp,dS),e(dS,Bso),e(dp,xso),e(F,kso),e(F,cp),e(cp,eZ),e(eZ,Rso),e(cp,Sso),e(cp,cS),e(cS,Pso),e(cp,$so),e(F,Iso),e(F,fp),e(fp,oZ),e(oZ,Dso),e(fp,Nso),e(fp,fS),e(fS,jso),e(fp,qso),e(F,Gso),e(F,mp),e(mp,rZ),e(rZ,Oso),e(mp,Xso),e(mp,mS),e(mS,Vso),e(mp,zso),e(F,Wso),e(F,gp),e(gp,tZ),e(tZ,Qso),e(gp,Hso),e(gp,gS),e(gS,Uso),e(gp,Jso),e(F,Yso),e(F,hp),e(hp,aZ),e(aZ,Kso),e(hp,Zso),e(hp,hS),e(hS,elo),e(hp,olo),e(F,rlo),e(F,pp),e(pp,nZ),e(nZ,tlo),e(pp,alo),e(pp,pS),e(pS,nlo),e(pp,slo),e(F,llo),e(F,_p),e(_p,sZ),e(sZ,ilo),e(_p,dlo),e(_p,_S),e(_S,clo),e(_p,flo),e(F,mlo),e(F,up),e(up,lZ),e(lZ,glo),e(up,hlo),e(up,uS),e(uS,plo),e(up,_lo),e(F,ulo),e(F,bp),e(bp,iZ),e(iZ,blo),e(bp,vlo),e(bp,bS),e(bS,Tlo),e(bp,Flo),e(F,Clo),e(F,vp),e(vp,dZ),e(dZ,Mlo),e(vp,Elo),e(vp,vS),e(vS,ylo),e(vp,wlo),e(F,Alo),e(F,Tp),e(Tp,cZ),e(cZ,Llo),e(Tp,Blo),e(Tp,TS),e(TS,xlo),e(Tp,klo),e(F,Rlo),e(F,js),e(js,fZ),e(fZ,Slo),e(js,Plo),e(js,FS),e(FS,$lo),e(js,Ilo),e(js,CS),e(CS,Dlo),e(js,Nlo),e(F,jlo),e(F,Fp),e(Fp,mZ),e(mZ,qlo),e(Fp,Glo),e(Fp,MS),e(MS,Olo),e(Fp,Xlo),e(F,Vlo),e(F,Cp),e(Cp,gZ),e(gZ,zlo),e(Cp,Wlo),e(Cp,ES),e(ES,Qlo),e(Cp,Hlo),e(F,Ulo),e(F,Mp),e(Mp,hZ),e(hZ,Jlo),e(Mp,Ylo),e(Mp,yS),e(yS,Klo),e(Mp,Zlo),e(F,eio),e(F,Ep),e(Ep,pZ),e(pZ,oio),e(Ep,rio),e(Ep,wS),e(wS,tio),e(Ep,aio),e(F,nio),e(F,yp),e(yp,_Z),e(_Z,sio),e(yp,lio),e(yp,AS),e(AS,iio),e(yp,dio),e(F,cio),e(F,wp),e(wp,uZ),e(uZ,fio),e(wp,mio),e(wp,LS),e(LS,gio),e(wp,hio),e(F,pio),e(F,Ap),e(Ap,bZ),e(bZ,_io),e(Ap,uio),e(Ap,BS),e(BS,bio),e(Ap,vio),e(F,Tio),e(F,Lp),e(Lp,vZ),e(vZ,Fio),e(Lp,Cio),e(Lp,xS),e(xS,Mio),e(Lp,Eio),e(F,yio),e(F,Bp),e(Bp,TZ),e(TZ,wio),e(Bp,Aio),e(Bp,kS),e(kS,Lio),e(Bp,Bio),e(F,xio),e(F,xp),e(xp,FZ),e(FZ,kio),e(xp,Rio),e(xp,RS),e(RS,Sio),e(xp,Pio),e(F,$io),e(F,kp),e(kp,CZ),e(CZ,Iio),e(kp,Dio),e(kp,SS),e(SS,Nio),e(kp,jio),e(F,qio),e(F,Rp),e(Rp,MZ),e(MZ,Gio),e(Rp,Oio),e(Rp,PS),e(PS,Xio),e(Rp,Vio),e(F,zio),e(F,Sp),e(Sp,EZ),e(EZ,Wio),e(Sp,Qio),e(Sp,$S),e($S,Hio),e(Sp,Uio),e(F,Jio),e(F,Pp),e(Pp,yZ),e(yZ,Yio),e(Pp,Kio),e(Pp,IS),e(IS,Zio),e(Pp,edo),e(F,odo),e(F,$p),e($p,wZ),e(wZ,rdo),e($p,tdo),e($p,DS),e(DS,ado),e($p,ndo),e(F,sdo),e(F,Ip),e(Ip,AZ),e(AZ,ldo),e(Ip,ido),e(Ip,NS),e(NS,ddo),e(Ip,cdo),e(F,fdo),e(F,Dp),e(Dp,LZ),e(LZ,mdo),e(Dp,gdo),e(Dp,jS),e(jS,hdo),e(Dp,pdo),e(F,_do),e(F,Np),e(Np,BZ),e(BZ,udo),e(Np,bdo),e(Np,qS),e(qS,vdo),e(Np,Tdo),e(F,Fdo),e(F,jp),e(jp,xZ),e(xZ,Cdo),e(jp,Mdo),e(jp,GS),e(GS,Edo),e(jp,ydo),e(F,wdo),e(F,qp),e(qp,kZ),e(kZ,Ado),e(qp,Ldo),e(qp,OS),e(OS,Bdo),e(qp,xdo),e(F,kdo),e(F,Gp),e(Gp,RZ),e(RZ,Rdo),e(Gp,Sdo),e(Gp,XS),e(XS,Pdo),e(Gp,$do),e(F,Ido),e(F,Op),e(Op,SZ),e(SZ,Ddo),e(Op,Ndo),e(Op,VS),e(VS,jdo),e(Op,qdo),e(F,Gdo),e(F,Xp),e(Xp,PZ),e(PZ,Odo),e(Xp,Xdo),e(Xp,zS),e(zS,Vdo),e(Xp,zdo),e(F,Wdo),e(F,Vp),e(Vp,$Z),e($Z,Qdo),e(Vp,Hdo),e(Vp,WS),e(WS,Udo),e(Vp,Jdo),e(F,Ydo),e(F,zp),e(zp,IZ),e(IZ,Kdo),e(zp,Zdo),e(zp,QS),e(QS,eco),e(zp,oco),e(F,rco),e(F,Wp),e(Wp,DZ),e(DZ,tco),e(Wp,aco),e(Wp,HS),e(HS,nco),e(Wp,sco),e(F,lco),e(F,Qp),e(Qp,NZ),e(NZ,ico),e(Qp,dco),e(Qp,US),e(US,cco),e(Qp,fco),e(F,mco),e(F,Hp),e(Hp,jZ),e(jZ,gco),e(Hp,hco),e(Hp,JS),e(JS,pco),e(Hp,_co),e(F,uco),e(F,Up),e(Up,qZ),e(qZ,bco),e(Up,vco),e(Up,YS),e(YS,Tco),e(Up,Fco),e(F,Cco),e(F,Jp),e(Jp,GZ),e(GZ,Mco),e(Jp,Eco),e(Jp,KS),e(KS,yco),e(Jp,wco),e(F,Aco),e(F,Yp),e(Yp,OZ),e(OZ,Lco),e(Yp,Bco),e(Yp,ZS),e(ZS,xco),e(Yp,kco),e(F,Rco),e(F,Kp),e(Kp,XZ),e(XZ,Sco),e(Kp,Pco),e(Kp,eP),e(eP,$co),e(Kp,Ico),e(F,Dco),e(F,Zp),e(Zp,VZ),e(VZ,Nco),e(Zp,jco),e(Zp,oP),e(oP,qco),e(Zp,Gco),e(F,Oco),e(F,e_),e(e_,zZ),e(zZ,Xco),e(e_,Vco),e(e_,rP),e(rP,zco),e(e_,Wco),e(F,Qco),e(F,o_),e(o_,WZ),e(WZ,Hco),e(o_,Uco),e(o_,tP),e(tP,Jco),e(o_,Yco),e(F,Kco),e(F,r_),e(r_,QZ),e(QZ,Zco),e(r_,efo),e(r_,aP),e(aP,ofo),e(r_,rfo),e(F,tfo),e(F,t_),e(t_,HZ),e(HZ,afo),e(t_,nfo),e(t_,nP),e(nP,sfo),e(t_,lfo),e(F,ifo),e(F,a_),e(a_,UZ),e(UZ,dfo),e(a_,cfo),e(a_,sP),e(sP,ffo),e(a_,mfo),e(F,gfo),e(F,n_),e(n_,JZ),e(JZ,hfo),e(n_,pfo),e(n_,lP),e(lP,_fo),e(n_,ufo),e(F,bfo),e(F,s_),e(s_,YZ),e(YZ,vfo),e(s_,Tfo),e(s_,iP),e(iP,Ffo),e(s_,Cfo),e(F,Mfo),e(F,l_),e(l_,KZ),e(KZ,Efo),e(l_,yfo),e(l_,dP),e(dP,wfo),e(l_,Afo),e(F,Lfo),e(F,i_),e(i_,ZZ),e(ZZ,Bfo),e(i_,xfo),e(i_,cP),e(cP,kfo),e(i_,Rfo),e(F,Sfo),e(F,d_),e(d_,eee),e(eee,Pfo),e(d_,$fo),e(d_,fP),e(fP,Ifo),e(d_,Dfo),e(F,Nfo),e(F,c_),e(c_,oee),e(oee,jfo),e(c_,qfo),e(c_,mP),e(mP,Gfo),e(c_,Ofo),e(F,Xfo),e(F,f_),e(f_,ree),e(ree,Vfo),e(f_,zfo),e(f_,gP),e(gP,Wfo),e(f_,Qfo),e(F,Hfo),e(F,m_),e(m_,tee),e(tee,Ufo),e(m_,Jfo),e(m_,hP),e(hP,Yfo),e(m_,Kfo),e(F,Zfo),e(F,g_),e(g_,aee),e(aee,emo),e(g_,omo),e(g_,pP),e(pP,rmo),e(g_,tmo),e(F,amo),e(F,h_),e(h_,nee),e(nee,nmo),e(h_,smo),e(h_,_P),e(_P,lmo),e(h_,imo),e(F,dmo),e(F,p_),e(p_,see),e(see,cmo),e(p_,fmo),e(p_,uP),e(uP,mmo),e(p_,gmo),e(F,hmo),e(F,__),e(__,lee),e(lee,pmo),e(__,_mo),e(__,bP),e(bP,umo),e(__,bmo),e(F,vmo),e(F,u_),e(u_,iee),e(iee,Tmo),e(u_,Fmo),e(u_,vP),e(vP,Cmo),e(u_,Mmo),e(F,Emo),e(F,b_),e(b_,dee),e(dee,ymo),e(b_,wmo),e(b_,TP),e(TP,Amo),e(b_,Lmo),e(F,Bmo),e(F,v_),e(v_,cee),e(cee,xmo),e(v_,kmo),e(v_,FP),e(FP,Rmo),e(v_,Smo),e(F,Pmo),e(F,T_),e(T_,fee),e(fee,$mo),e(T_,Imo),e(T_,CP),e(CP,Dmo),e(T_,Nmo),e(F,jmo),e(F,F_),e(F_,mee),e(mee,qmo),e(F_,Gmo),e(F_,MP),e(MP,Omo),e(F_,Xmo),e(F,Vmo),e(F,C_),e(C_,gee),e(gee,zmo),e(C_,Wmo),e(C_,EP),e(EP,Qmo),e(C_,Hmo),e(F,Umo),e(F,M_),e(M_,hee),e(hee,Jmo),e(M_,Ymo),e(M_,yP),e(yP,Kmo),e(M_,Zmo),e(F,ego),e(F,E_),e(E_,pee),e(pee,ogo),e(E_,rgo),e(E_,wP),e(wP,tgo),e(E_,ago),e(F,ngo),e(F,y_),e(y_,_ee),e(_ee,sgo),e(y_,lgo),e(y_,AP),e(AP,igo),e(y_,dgo),e(F,cgo),e(F,w_),e(w_,uee),e(uee,fgo),e(w_,mgo),e(w_,LP),e(LP,ggo),e(w_,hgo),e(F,pgo),e(F,A_),e(A_,bee),e(bee,_go),e(A_,ugo),e(A_,BP),e(BP,bgo),e(A_,vgo),e(F,Tgo),e(F,L_),e(L_,vee),e(vee,Fgo),e(L_,Cgo),e(L_,xP),e(xP,Mgo),e(L_,Ego),e(De,ygo),e(De,B_),e(B_,wgo),e(B_,Tee),e(Tee,Ago),e(B_,Lgo),e(B_,Fee),e(Fee,Bgo),e(De,xgo),e(De,Cee),e(Cee,kgo),e(De,Rgo),g(Z4,De,null),b(c,Vke,u),b(c,Zi,u),e(Zi,x_),e(x_,Mee),g(eE,Mee,null),e(Zi,Sgo),e(Zi,Eee),e(Eee,Pgo),b(c,zke,u),b(c,Yo,u),g(oE,Yo,null),e(Yo,$go),e(Yo,ed),e(ed,Igo),e(ed,yee),e(yee,Dgo),e(ed,Ngo),e(ed,wee),e(wee,jgo),e(ed,qgo),e(Yo,Ggo),e(Yo,rE),e(rE,Ogo),e(rE,Aee),e(Aee,Xgo),e(rE,Vgo),e(Yo,zgo),e(Yo,zr),g(tE,zr,null),e(zr,Wgo),e(zr,Lee),e(Lee,Qgo),e(zr,Hgo),e(zr,od),e(od,Ugo),e(od,Bee),e(Bee,Jgo),e(od,Ygo),e(od,xee),e(xee,Kgo),e(od,Zgo),e(zr,eho),e(zr,kee),e(kee,oho),e(zr,rho),g(aE,zr,null),e(Yo,tho),e(Yo,Ne),g(nE,Ne,null),e(Ne,aho),e(Ne,Ree),e(Ree,nho),e(Ne,sho),e(Ne,za),e(za,lho),e(za,See),e(See,iho),e(za,dho),e(za,Pee),e(Pee,cho),e(za,fho),e(za,$ee),e($ee,mho),e(za,gho),e(Ne,hho),e(Ne,k),e(k,k_),e(k_,Iee),e(Iee,pho),e(k_,_ho),e(k_,kP),e(kP,uho),e(k_,bho),e(k,vho),e(k,R_),e(R_,Dee),e(Dee,Tho),e(R_,Fho),e(R_,RP),e(RP,Cho),e(R_,Mho),e(k,Eho),e(k,S_),e(S_,Nee),e(Nee,yho),e(S_,who),e(S_,SP),e(SP,Aho),e(S_,Lho),e(k,Bho),e(k,P_),e(P_,jee),e(jee,xho),e(P_,kho),e(P_,PP),e(PP,Rho),e(P_,Sho),e(k,Pho),e(k,$_),e($_,qee),e(qee,$ho),e($_,Iho),e($_,$P),e($P,Dho),e($_,Nho),e(k,jho),e(k,I_),e(I_,Gee),e(Gee,qho),e(I_,Gho),e(I_,IP),e(IP,Oho),e(I_,Xho),e(k,Vho),e(k,D_),e(D_,Oee),e(Oee,zho),e(D_,Who),e(D_,DP),e(DP,Qho),e(D_,Hho),e(k,Uho),e(k,N_),e(N_,Xee),e(Xee,Jho),e(N_,Yho),e(N_,NP),e(NP,Kho),e(N_,Zho),e(k,epo),e(k,j_),e(j_,Vee),e(Vee,opo),e(j_,rpo),e(j_,jP),e(jP,tpo),e(j_,apo),e(k,npo),e(k,q_),e(q_,zee),e(zee,spo),e(q_,lpo),e(q_,qP),e(qP,ipo),e(q_,dpo),e(k,cpo),e(k,G_),e(G_,Wee),e(Wee,fpo),e(G_,mpo),e(G_,GP),e(GP,gpo),e(G_,hpo),e(k,ppo),e(k,O_),e(O_,Qee),e(Qee,_po),e(O_,upo),e(O_,OP),e(OP,bpo),e(O_,vpo),e(k,Tpo),e(k,X_),e(X_,Hee),e(Hee,Fpo),e(X_,Cpo),e(X_,XP),e(XP,Mpo),e(X_,Epo),e(k,ypo),e(k,V_),e(V_,Uee),e(Uee,wpo),e(V_,Apo),e(V_,VP),e(VP,Lpo),e(V_,Bpo),e(k,xpo),e(k,z_),e(z_,Jee),e(Jee,kpo),e(z_,Rpo),e(z_,zP),e(zP,Spo),e(z_,Ppo),e(k,$po),e(k,W_),e(W_,Yee),e(Yee,Ipo),e(W_,Dpo),e(W_,WP),e(WP,Npo),e(W_,jpo),e(k,qpo),e(k,Q_),e(Q_,Kee),e(Kee,Gpo),e(Q_,Opo),e(Q_,QP),e(QP,Xpo),e(Q_,Vpo),e(k,zpo),e(k,H_),e(H_,Zee),e(Zee,Wpo),e(H_,Qpo),e(H_,HP),e(HP,Hpo),e(H_,Upo),e(k,Jpo),e(k,U_),e(U_,eoe),e(eoe,Ypo),e(U_,Kpo),e(U_,UP),e(UP,Zpo),e(U_,e_o),e(k,o_o),e(k,J_),e(J_,ooe),e(ooe,r_o),e(J_,t_o),e(J_,JP),e(JP,a_o),e(J_,n_o),e(k,s_o),e(k,Y_),e(Y_,roe),e(roe,l_o),e(Y_,i_o),e(Y_,YP),e(YP,d_o),e(Y_,c_o),e(k,f_o),e(k,K_),e(K_,toe),e(toe,m_o),e(K_,g_o),e(K_,KP),e(KP,h_o),e(K_,p_o),e(k,__o),e(k,Z_),e(Z_,aoe),e(aoe,u_o),e(Z_,b_o),e(Z_,ZP),e(ZP,v_o),e(Z_,T_o),e(k,F_o),e(k,eu),e(eu,noe),e(noe,C_o),e(eu,M_o),e(eu,e$),e(e$,E_o),e(eu,y_o),e(k,w_o),e(k,ou),e(ou,soe),e(soe,A_o),e(ou,L_o),e(ou,o$),e(o$,B_o),e(ou,x_o),e(k,k_o),e(k,ru),e(ru,loe),e(loe,R_o),e(ru,S_o),e(ru,r$),e(r$,P_o),e(ru,$_o),e(k,I_o),e(k,tu),e(tu,ioe),e(ioe,D_o),e(tu,N_o),e(tu,t$),e(t$,j_o),e(tu,q_o),e(k,G_o),e(k,au),e(au,doe),e(doe,O_o),e(au,X_o),e(au,a$),e(a$,V_o),e(au,z_o),e(k,W_o),e(k,nu),e(nu,coe),e(coe,Q_o),e(nu,H_o),e(nu,n$),e(n$,U_o),e(nu,J_o),e(k,Y_o),e(k,su),e(su,foe),e(foe,K_o),e(su,Z_o),e(su,s$),e(s$,euo),e(su,ouo),e(k,ruo),e(k,lu),e(lu,moe),e(moe,tuo),e(lu,auo),e(lu,l$),e(l$,nuo),e(lu,suo),e(k,luo),e(k,iu),e(iu,goe),e(goe,iuo),e(iu,duo),e(iu,i$),e(i$,cuo),e(iu,fuo),e(k,muo),e(k,du),e(du,hoe),e(hoe,guo),e(du,huo),e(du,d$),e(d$,puo),e(du,_uo),e(k,uuo),e(k,cu),e(cu,poe),e(poe,buo),e(cu,vuo),e(cu,c$),e(c$,Tuo),e(cu,Fuo),e(k,Cuo),e(k,fu),e(fu,_oe),e(_oe,Muo),e(fu,Euo),e(fu,f$),e(f$,yuo),e(fu,wuo),e(k,Auo),e(k,mu),e(mu,uoe),e(uoe,Luo),e(mu,Buo),e(mu,m$),e(m$,xuo),e(mu,kuo),e(k,Ruo),e(k,gu),e(gu,boe),e(boe,Suo),e(gu,Puo),e(gu,g$),e(g$,$uo),e(gu,Iuo),e(k,Duo),e(k,hu),e(hu,voe),e(voe,Nuo),e(hu,juo),e(hu,h$),e(h$,quo),e(hu,Guo),e(k,Ouo),e(k,pu),e(pu,Toe),e(Toe,Xuo),e(pu,Vuo),e(pu,p$),e(p$,zuo),e(pu,Wuo),e(Ne,Quo),e(Ne,_u),e(_u,Huo),e(_u,Foe),e(Foe,Uuo),e(_u,Juo),e(_u,Coe),e(Coe,Yuo),e(Ne,Kuo),e(Ne,Moe),e(Moe,Zuo),e(Ne,e1o),g(sE,Ne,null),b(c,Wke,u),b(c,rd,u),e(rd,uu),e(uu,Eoe),g(lE,Eoe,null),e(rd,o1o),e(rd,yoe),e(yoe,r1o),b(c,Qke,u),b(c,Ko,u),g(iE,Ko,null),e(Ko,t1o),e(Ko,td),e(td,a1o),e(td,woe),e(woe,n1o),e(td,s1o),e(td,Aoe),e(Aoe,l1o),e(td,i1o),e(Ko,d1o),e(Ko,dE),e(dE,c1o),e(dE,Loe),e(Loe,f1o),e(dE,m1o),e(Ko,g1o),e(Ko,Wr),g(cE,Wr,null),e(Wr,h1o),e(Wr,Boe),e(Boe,p1o),e(Wr,_1o),e(Wr,ad),e(ad,u1o),e(ad,xoe),e(xoe,b1o),e(ad,v1o),e(ad,koe),e(koe,T1o),e(ad,F1o),e(Wr,C1o),e(Wr,Roe),e(Roe,M1o),e(Wr,E1o),g(fE,Wr,null),e(Ko,y1o),e(Ko,je),g(mE,je,null),e(je,w1o),e(je,Soe),e(Soe,A1o),e(je,L1o),e(je,Wa),e(Wa,B1o),e(Wa,Poe),e(Poe,x1o),e(Wa,k1o),e(Wa,$oe),e($oe,R1o),e(Wa,S1o),e(Wa,Ioe),e(Ioe,P1o),e(Wa,$1o),e(je,I1o),e(je,$),e($,bu),e(bu,Doe),e(Doe,D1o),e(bu,N1o),e(bu,_$),e(_$,j1o),e(bu,q1o),e($,G1o),e($,vu),e(vu,Noe),e(Noe,O1o),e(vu,X1o),e(vu,u$),e(u$,V1o),e(vu,z1o),e($,W1o),e($,Tu),e(Tu,joe),e(joe,Q1o),e(Tu,H1o),e(Tu,b$),e(b$,U1o),e(Tu,J1o),e($,Y1o),e($,Fu),e(Fu,qoe),e(qoe,K1o),e(Fu,Z1o),e(Fu,v$),e(v$,ebo),e(Fu,obo),e($,rbo),e($,Cu),e(Cu,Goe),e(Goe,tbo),e(Cu,abo),e(Cu,T$),e(T$,nbo),e(Cu,sbo),e($,lbo),e($,Mu),e(Mu,Ooe),e(Ooe,ibo),e(Mu,dbo),e(Mu,F$),e(F$,cbo),e(Mu,fbo),e($,mbo),e($,Eu),e(Eu,Xoe),e(Xoe,gbo),e(Eu,hbo),e(Eu,C$),e(C$,pbo),e(Eu,_bo),e($,ubo),e($,yu),e(yu,Voe),e(Voe,bbo),e(yu,vbo),e(yu,M$),e(M$,Tbo),e(yu,Fbo),e($,Cbo),e($,wu),e(wu,zoe),e(zoe,Mbo),e(wu,Ebo),e(wu,E$),e(E$,ybo),e(wu,wbo),e($,Abo),e($,Au),e(Au,Woe),e(Woe,Lbo),e(Au,Bbo),e(Au,y$),e(y$,xbo),e(Au,kbo),e($,Rbo),e($,Lu),e(Lu,Qoe),e(Qoe,Sbo),e(Lu,Pbo),e(Lu,w$),e(w$,$bo),e(Lu,Ibo),e($,Dbo),e($,Bu),e(Bu,Hoe),e(Hoe,Nbo),e(Bu,jbo),e(Bu,A$),e(A$,qbo),e(Bu,Gbo),e($,Obo),e($,xu),e(xu,Uoe),e(Uoe,Xbo),e(xu,Vbo),e(xu,L$),e(L$,zbo),e(xu,Wbo),e($,Qbo),e($,ku),e(ku,Joe),e(Joe,Hbo),e(ku,Ubo),e(ku,B$),e(B$,Jbo),e(ku,Ybo),e($,Kbo),e($,Ru),e(Ru,Yoe),e(Yoe,Zbo),e(Ru,e3o),e(Ru,x$),e(x$,o3o),e(Ru,r3o),e($,t3o),e($,Su),e(Su,Koe),e(Koe,a3o),e(Su,n3o),e(Su,k$),e(k$,s3o),e(Su,l3o),e($,i3o),e($,Pu),e(Pu,Zoe),e(Zoe,d3o),e(Pu,c3o),e(Pu,R$),e(R$,f3o),e(Pu,m3o),e($,g3o),e($,$u),e($u,ere),e(ere,h3o),e($u,p3o),e($u,S$),e(S$,_3o),e($u,u3o),e($,b3o),e($,Iu),e(Iu,ore),e(ore,v3o),e(Iu,T3o),e(Iu,P$),e(P$,F3o),e(Iu,C3o),e($,M3o),e($,Du),e(Du,rre),e(rre,E3o),e(Du,y3o),e(Du,$$),e($$,w3o),e(Du,A3o),e($,L3o),e($,Nu),e(Nu,tre),e(tre,B3o),e(Nu,x3o),e(Nu,I$),e(I$,k3o),e(Nu,R3o),e($,S3o),e($,ju),e(ju,are),e(are,P3o),e(ju,$3o),e(ju,D$),e(D$,I3o),e(ju,D3o),e($,N3o),e($,qu),e(qu,nre),e(nre,j3o),e(qu,q3o),e(qu,N$),e(N$,G3o),e(qu,O3o),e($,X3o),e($,Gu),e(Gu,sre),e(sre,V3o),e(Gu,z3o),e(Gu,j$),e(j$,W3o),e(Gu,Q3o),e($,H3o),e($,Ou),e(Ou,lre),e(lre,U3o),e(Ou,J3o),e(Ou,q$),e(q$,Y3o),e(Ou,K3o),e($,Z3o),e($,Xu),e(Xu,ire),e(ire,e2o),e(Xu,o2o),e(Xu,G$),e(G$,r2o),e(Xu,t2o),e($,a2o),e($,Vu),e(Vu,dre),e(dre,n2o),e(Vu,s2o),e(Vu,O$),e(O$,l2o),e(Vu,i2o),e($,d2o),e($,zu),e(zu,cre),e(cre,c2o),e(zu,f2o),e(zu,X$),e(X$,m2o),e(zu,g2o),e($,h2o),e($,Wu),e(Wu,fre),e(fre,p2o),e(Wu,_2o),e(Wu,V$),e(V$,u2o),e(Wu,b2o),e($,v2o),e($,Qu),e(Qu,mre),e(mre,T2o),e(Qu,F2o),e(Qu,z$),e(z$,C2o),e(Qu,M2o),e($,E2o),e($,Hu),e(Hu,gre),e(gre,y2o),e(Hu,w2o),e(Hu,W$),e(W$,A2o),e(Hu,L2o),e($,B2o),e($,Uu),e(Uu,hre),e(hre,x2o),e(Uu,k2o),e(Uu,Q$),e(Q$,R2o),e(Uu,S2o),e($,P2o),e($,Ju),e(Ju,pre),e(pre,$2o),e(Ju,I2o),e(Ju,H$),e(H$,D2o),e(Ju,N2o),e($,j2o),e($,Yu),e(Yu,_re),e(_re,q2o),e(Yu,G2o),e(Yu,U$),e(U$,O2o),e(Yu,X2o),e($,V2o),e($,Ku),e(Ku,ure),e(ure,z2o),e(Ku,W2o),e(Ku,J$),e(J$,Q2o),e(Ku,H2o),e(je,U2o),e(je,Zu),e(Zu,J2o),e(Zu,bre),e(bre,Y2o),e(Zu,K2o),e(Zu,vre),e(vre,Z2o),e(je,evo),e(je,Tre),e(Tre,ovo),e(je,rvo),g(gE,je,null),b(c,Hke,u),b(c,nd,u),e(nd,e1),e(e1,Fre),g(hE,Fre,null),e(nd,tvo),e(nd,Cre),e(Cre,avo),b(c,Uke,u),b(c,Zo,u),g(pE,Zo,null),e(Zo,nvo),e(Zo,sd),e(sd,svo),e(sd,Mre),e(Mre,lvo),e(sd,ivo),e(sd,Ere),e(Ere,dvo),e(sd,cvo),e(Zo,fvo),e(Zo,_E),e(_E,mvo),e(_E,yre),e(yre,gvo),e(_E,hvo),e(Zo,pvo),e(Zo,Qr),g(uE,Qr,null),e(Qr,_vo),e(Qr,wre),e(wre,uvo),e(Qr,bvo),e(Qr,ld),e(ld,vvo),e(ld,Are),e(Are,Tvo),e(ld,Fvo),e(ld,Lre),e(Lre,Cvo),e(ld,Mvo),e(Qr,Evo),e(Qr,Bre),e(Bre,yvo),e(Qr,wvo),g(bE,Qr,null),e(Zo,Avo),e(Zo,qe),g(vE,qe,null),e(qe,Lvo),e(qe,xre),e(xre,Bvo),e(qe,xvo),e(qe,Qa),e(Qa,kvo),e(Qa,kre),e(kre,Rvo),e(Qa,Svo),e(Qa,Rre),e(Rre,Pvo),e(Qa,$vo),e(Qa,Sre),e(Sre,Ivo),e(Qa,Dvo),e(qe,Nvo),e(qe,I),e(I,o1),e(o1,Pre),e(Pre,jvo),e(o1,qvo),e(o1,Y$),e(Y$,Gvo),e(o1,Ovo),e(I,Xvo),e(I,r1),e(r1,$re),e($re,Vvo),e(r1,zvo),e(r1,K$),e(K$,Wvo),e(r1,Qvo),e(I,Hvo),e(I,t1),e(t1,Ire),e(Ire,Uvo),e(t1,Jvo),e(t1,Z$),e(Z$,Yvo),e(t1,Kvo),e(I,Zvo),e(I,a1),e(a1,Dre),e(Dre,e6o),e(a1,o6o),e(a1,eI),e(eI,r6o),e(a1,t6o),e(I,a6o),e(I,n1),e(n1,Nre),e(Nre,n6o),e(n1,s6o),e(n1,oI),e(oI,l6o),e(n1,i6o),e(I,d6o),e(I,s1),e(s1,jre),e(jre,c6o),e(s1,f6o),e(s1,rI),e(rI,m6o),e(s1,g6o),e(I,h6o),e(I,l1),e(l1,qre),e(qre,p6o),e(l1,_6o),e(l1,tI),e(tI,u6o),e(l1,b6o),e(I,v6o),e(I,i1),e(i1,Gre),e(Gre,T6o),e(i1,F6o),e(i1,aI),e(aI,C6o),e(i1,M6o),e(I,E6o),e(I,d1),e(d1,Ore),e(Ore,y6o),e(d1,w6o),e(d1,nI),e(nI,A6o),e(d1,L6o),e(I,B6o),e(I,c1),e(c1,Xre),e(Xre,x6o),e(c1,k6o),e(c1,sI),e(sI,R6o),e(c1,S6o),e(I,P6o),e(I,f1),e(f1,Vre),e(Vre,$6o),e(f1,I6o),e(f1,lI),e(lI,D6o),e(f1,N6o),e(I,j6o),e(I,m1),e(m1,zre),e(zre,q6o),e(m1,G6o),e(m1,iI),e(iI,O6o),e(m1,X6o),e(I,V6o),e(I,g1),e(g1,Wre),e(Wre,z6o),e(g1,W6o),e(g1,dI),e(dI,Q6o),e(g1,H6o),e(I,U6o),e(I,h1),e(h1,Qre),e(Qre,J6o),e(h1,Y6o),e(h1,cI),e(cI,K6o),e(h1,Z6o),e(I,e0o),e(I,p1),e(p1,Hre),e(Hre,o0o),e(p1,r0o),e(p1,fI),e(fI,t0o),e(p1,a0o),e(I,n0o),e(I,_1),e(_1,Ure),e(Ure,s0o),e(_1,l0o),e(_1,mI),e(mI,i0o),e(_1,d0o),e(I,c0o),e(I,u1),e(u1,Jre),e(Jre,f0o),e(u1,m0o),e(u1,gI),e(gI,g0o),e(u1,h0o),e(I,p0o),e(I,b1),e(b1,Yre),e(Yre,_0o),e(b1,u0o),e(b1,hI),e(hI,b0o),e(b1,v0o),e(I,T0o),e(I,v1),e(v1,Kre),e(Kre,F0o),e(v1,C0o),e(v1,pI),e(pI,M0o),e(v1,E0o),e(I,y0o),e(I,T1),e(T1,Zre),e(Zre,w0o),e(T1,A0o),e(T1,_I),e(_I,L0o),e(T1,B0o),e(I,x0o),e(I,F1),e(F1,ete),e(ete,k0o),e(F1,R0o),e(F1,uI),e(uI,S0o),e(F1,P0o),e(I,$0o),e(I,C1),e(C1,ote),e(ote,I0o),e(C1,D0o),e(C1,bI),e(bI,N0o),e(C1,j0o),e(I,q0o),e(I,M1),e(M1,rte),e(rte,G0o),e(M1,O0o),e(M1,vI),e(vI,X0o),e(M1,V0o),e(I,z0o),e(I,E1),e(E1,tte),e(tte,W0o),e(E1,Q0o),e(E1,TI),e(TI,H0o),e(E1,U0o),e(I,J0o),e(I,y1),e(y1,ate),e(ate,Y0o),e(y1,K0o),e(y1,FI),e(FI,Z0o),e(y1,eTo),e(I,oTo),e(I,w1),e(w1,nte),e(nte,rTo),e(w1,tTo),e(w1,CI),e(CI,aTo),e(w1,nTo),e(I,sTo),e(I,A1),e(A1,ste),e(ste,lTo),e(A1,iTo),e(A1,MI),e(MI,dTo),e(A1,cTo),e(I,fTo),e(I,L1),e(L1,lte),e(lte,mTo),e(L1,gTo),e(L1,EI),e(EI,hTo),e(L1,pTo),e(I,_To),e(I,B1),e(B1,ite),e(ite,uTo),e(B1,bTo),e(B1,yI),e(yI,vTo),e(B1,TTo),e(I,FTo),e(I,x1),e(x1,dte),e(dte,CTo),e(x1,MTo),e(x1,wI),e(wI,ETo),e(x1,yTo),e(I,wTo),e(I,k1),e(k1,cte),e(cte,ATo),e(k1,LTo),e(k1,fte),e(fte,BTo),e(k1,xTo),e(I,kTo),e(I,R1),e(R1,mte),e(mte,RTo),e(R1,STo),e(R1,AI),e(AI,PTo),e(R1,$To),e(I,ITo),e(I,S1),e(S1,gte),e(gte,DTo),e(S1,NTo),e(S1,LI),e(LI,jTo),e(S1,qTo),e(I,GTo),e(I,P1),e(P1,hte),e(hte,OTo),e(P1,XTo),e(P1,BI),e(BI,VTo),e(P1,zTo),e(I,WTo),e(I,$1),e($1,pte),e(pte,QTo),e($1,HTo),e($1,xI),e(xI,UTo),e($1,JTo),e(qe,YTo),e(qe,I1),e(I1,KTo),e(I1,_te),e(_te,ZTo),e(I1,e8o),e(I1,ute),e(ute,o8o),e(qe,r8o),e(qe,bte),e(bte,t8o),e(qe,a8o),g(TE,qe,null),b(c,Jke,u),b(c,id,u),e(id,D1),e(D1,vte),g(FE,vte,null),e(id,n8o),e(id,Tte),e(Tte,s8o),b(c,Yke,u),b(c,er,u),g(CE,er,null),e(er,l8o),e(er,dd),e(dd,i8o),e(dd,Fte),e(Fte,d8o),e(dd,c8o),e(dd,Cte),e(Cte,f8o),e(dd,m8o),e(er,g8o),e(er,ME),e(ME,h8o),e(ME,Mte),e(Mte,p8o),e(ME,_8o),e(er,u8o),e(er,Hr),g(EE,Hr,null),e(Hr,b8o),e(Hr,Ete),e(Ete,v8o),e(Hr,T8o),e(Hr,cd),e(cd,F8o),e(cd,yte),e(yte,C8o),e(cd,M8o),e(cd,wte),e(wte,E8o),e(cd,y8o),e(Hr,w8o),e(Hr,Ate),e(Ate,A8o),e(Hr,L8o),g(yE,Hr,null),e(er,B8o),e(er,Ge),g(wE,Ge,null),e(Ge,x8o),e(Ge,Lte),e(Lte,k8o),e(Ge,R8o),e(Ge,Ha),e(Ha,S8o),e(Ha,Bte),e(Bte,P8o),e(Ha,$8o),e(Ha,xte),e(xte,I8o),e(Ha,D8o),e(Ha,kte),e(kte,N8o),e(Ha,j8o),e(Ge,q8o),e(Ge,se),e(se,N1),e(N1,Rte),e(Rte,G8o),e(N1,O8o),e(N1,kI),e(kI,X8o),e(N1,V8o),e(se,z8o),e(se,j1),e(j1,Ste),e(Ste,W8o),e(j1,Q8o),e(j1,RI),e(RI,H8o),e(j1,U8o),e(se,J8o),e(se,q1),e(q1,Pte),e(Pte,Y8o),e(q1,K8o),e(q1,SI),e(SI,Z8o),e(q1,eFo),e(se,oFo),e(se,G1),e(G1,$te),e($te,rFo),e(G1,tFo),e(G1,PI),e(PI,aFo),e(G1,nFo),e(se,sFo),e(se,O1),e(O1,Ite),e(Ite,lFo),e(O1,iFo),e(O1,$I),e($I,dFo),e(O1,cFo),e(se,fFo),e(se,X1),e(X1,Dte),e(Dte,mFo),e(X1,gFo),e(X1,II),e(II,hFo),e(X1,pFo),e(se,_Fo),e(se,V1),e(V1,Nte),e(Nte,uFo),e(V1,bFo),e(V1,DI),e(DI,vFo),e(V1,TFo),e(se,FFo),e(se,z1),e(z1,jte),e(jte,CFo),e(z1,MFo),e(z1,NI),e(NI,EFo),e(z1,yFo),e(se,wFo),e(se,W1),e(W1,qte),e(qte,AFo),e(W1,LFo),e(W1,jI),e(jI,BFo),e(W1,xFo),e(se,kFo),e(se,Q1),e(Q1,Gte),e(Gte,RFo),e(Q1,SFo),e(Q1,qI),e(qI,PFo),e(Q1,$Fo),e(se,IFo),e(se,H1),e(H1,Ote),e(Ote,DFo),e(H1,NFo),e(H1,GI),e(GI,jFo),e(H1,qFo),e(se,GFo),e(se,U1),e(U1,Xte),e(Xte,OFo),e(U1,XFo),e(U1,OI),e(OI,VFo),e(U1,zFo),e(se,WFo),e(se,J1),e(J1,Vte),e(Vte,QFo),e(J1,HFo),e(J1,XI),e(XI,UFo),e(J1,JFo),e(se,YFo),e(se,Y1),e(Y1,zte),e(zte,KFo),e(Y1,ZFo),e(Y1,VI),e(VI,eCo),e(Y1,oCo),e(se,rCo),e(se,K1),e(K1,Wte),e(Wte,tCo),e(K1,aCo),e(K1,zI),e(zI,nCo),e(K1,sCo),e(se,lCo),e(se,Z1),e(Z1,Qte),e(Qte,iCo),e(Z1,dCo),e(Z1,WI),e(WI,cCo),e(Z1,fCo),e(Ge,mCo),e(Ge,eb),e(eb,gCo),e(eb,Hte),e(Hte,hCo),e(eb,pCo),e(eb,Ute),e(Ute,_Co),e(Ge,uCo),e(Ge,Jte),e(Jte,bCo),e(Ge,vCo),g(AE,Ge,null),b(c,Kke,u),b(c,fd,u),e(fd,ob),e(ob,Yte),g(LE,Yte,null),e(fd,TCo),e(fd,Kte),e(Kte,FCo),b(c,Zke,u),b(c,or,u),g(BE,or,null),e(or,CCo),e(or,md),e(md,MCo),e(md,Zte),e(Zte,ECo),e(md,yCo),e(md,eae),e(eae,wCo),e(md,ACo),e(or,LCo),e(or,xE),e(xE,BCo),e(xE,oae),e(oae,xCo),e(xE,kCo),e(or,RCo),e(or,Ur),g(kE,Ur,null),e(Ur,SCo),e(Ur,rae),e(rae,PCo),e(Ur,$Co),e(Ur,gd),e(gd,ICo),e(gd,tae),e(tae,DCo),e(gd,NCo),e(gd,aae),e(aae,jCo),e(gd,qCo),e(Ur,GCo),e(Ur,nae),e(nae,OCo),e(Ur,XCo),g(RE,Ur,null),e(or,VCo),e(or,Oe),g(SE,Oe,null),e(Oe,zCo),e(Oe,sae),e(sae,WCo),e(Oe,QCo),e(Oe,Ua),e(Ua,HCo),e(Ua,lae),e(lae,UCo),e(Ua,JCo),e(Ua,iae),e(iae,YCo),e(Ua,KCo),e(Ua,dae),e(dae,ZCo),e(Ua,eMo),e(Oe,oMo),e(Oe,A),e(A,rb),e(rb,cae),e(cae,rMo),e(rb,tMo),e(rb,QI),e(QI,aMo),e(rb,nMo),e(A,sMo),e(A,tb),e(tb,fae),e(fae,lMo),e(tb,iMo),e(tb,HI),e(HI,dMo),e(tb,cMo),e(A,fMo),e(A,ab),e(ab,mae),e(mae,mMo),e(ab,gMo),e(ab,UI),e(UI,hMo),e(ab,pMo),e(A,_Mo),e(A,nb),e(nb,gae),e(gae,uMo),e(nb,bMo),e(nb,JI),e(JI,vMo),e(nb,TMo),e(A,FMo),e(A,sb),e(sb,hae),e(hae,CMo),e(sb,MMo),e(sb,YI),e(YI,EMo),e(sb,yMo),e(A,wMo),e(A,lb),e(lb,pae),e(pae,AMo),e(lb,LMo),e(lb,KI),e(KI,BMo),e(lb,xMo),e(A,kMo),e(A,ib),e(ib,_ae),e(_ae,RMo),e(ib,SMo),e(ib,ZI),e(ZI,PMo),e(ib,$Mo),e(A,IMo),e(A,db),e(db,uae),e(uae,DMo),e(db,NMo),e(db,eD),e(eD,jMo),e(db,qMo),e(A,GMo),e(A,cb),e(cb,bae),e(bae,OMo),e(cb,XMo),e(cb,oD),e(oD,VMo),e(cb,zMo),e(A,WMo),e(A,fb),e(fb,vae),e(vae,QMo),e(fb,HMo),e(fb,rD),e(rD,UMo),e(fb,JMo),e(A,YMo),e(A,mb),e(mb,Tae),e(Tae,KMo),e(mb,ZMo),e(mb,tD),e(tD,e4o),e(mb,o4o),e(A,r4o),e(A,gb),e(gb,Fae),e(Fae,t4o),e(gb,a4o),e(gb,aD),e(aD,n4o),e(gb,s4o),e(A,l4o),e(A,hb),e(hb,Cae),e(Cae,i4o),e(hb,d4o),e(hb,nD),e(nD,c4o),e(hb,f4o),e(A,m4o),e(A,pb),e(pb,Mae),e(Mae,g4o),e(pb,h4o),e(pb,sD),e(sD,p4o),e(pb,_4o),e(A,u4o),e(A,_b),e(_b,Eae),e(Eae,b4o),e(_b,v4o),e(_b,lD),e(lD,T4o),e(_b,F4o),e(A,C4o),e(A,ub),e(ub,yae),e(yae,M4o),e(ub,E4o),e(ub,iD),e(iD,y4o),e(ub,w4o),e(A,A4o),e(A,bb),e(bb,wae),e(wae,L4o),e(bb,B4o),e(bb,dD),e(dD,x4o),e(bb,k4o),e(A,R4o),e(A,vb),e(vb,Aae),e(Aae,S4o),e(vb,P4o),e(vb,cD),e(cD,$4o),e(vb,I4o),e(A,D4o),e(A,Tb),e(Tb,Lae),e(Lae,N4o),e(Tb,j4o),e(Tb,fD),e(fD,q4o),e(Tb,G4o),e(A,O4o),e(A,Fb),e(Fb,Bae),e(Bae,X4o),e(Fb,V4o),e(Fb,mD),e(mD,z4o),e(Fb,W4o),e(A,Q4o),e(A,Cb),e(Cb,xae),e(xae,H4o),e(Cb,U4o),e(Cb,gD),e(gD,J4o),e(Cb,Y4o),e(A,K4o),e(A,Mb),e(Mb,kae),e(kae,Z4o),e(Mb,eEo),e(Mb,hD),e(hD,oEo),e(Mb,rEo),e(A,tEo),e(A,Eb),e(Eb,Rae),e(Rae,aEo),e(Eb,nEo),e(Eb,pD),e(pD,sEo),e(Eb,lEo),e(A,iEo),e(A,yb),e(yb,Sae),e(Sae,dEo),e(yb,cEo),e(yb,_D),e(_D,fEo),e(yb,mEo),e(A,gEo),e(A,wb),e(wb,Pae),e(Pae,hEo),e(wb,pEo),e(wb,uD),e(uD,_Eo),e(wb,uEo),e(A,bEo),e(A,Ab),e(Ab,$ae),e($ae,vEo),e(Ab,TEo),e(Ab,bD),e(bD,FEo),e(Ab,CEo),e(A,MEo),e(A,Lb),e(Lb,Iae),e(Iae,EEo),e(Lb,yEo),e(Lb,vD),e(vD,wEo),e(Lb,AEo),e(A,LEo),e(A,Bb),e(Bb,Dae),e(Dae,BEo),e(Bb,xEo),e(Bb,TD),e(TD,kEo),e(Bb,REo),e(A,SEo),e(A,xb),e(xb,Nae),e(Nae,PEo),e(xb,$Eo),e(xb,FD),e(FD,IEo),e(xb,DEo),e(A,NEo),e(A,kb),e(kb,jae),e(jae,jEo),e(kb,qEo),e(kb,CD),e(CD,GEo),e(kb,OEo),e(A,XEo),e(A,Rb),e(Rb,qae),e(qae,VEo),e(Rb,zEo),e(Rb,MD),e(MD,WEo),e(Rb,QEo),e(A,HEo),e(A,Sb),e(Sb,Gae),e(Gae,UEo),e(Sb,JEo),e(Sb,ED),e(ED,YEo),e(Sb,KEo),e(A,ZEo),e(A,Pb),e(Pb,Oae),e(Oae,e5o),e(Pb,o5o),e(Pb,yD),e(yD,r5o),e(Pb,t5o),e(A,a5o),e(A,$b),e($b,Xae),e(Xae,n5o),e($b,s5o),e($b,wD),e(wD,l5o),e($b,i5o),e(A,d5o),e(A,Ib),e(Ib,Vae),e(Vae,c5o),e(Ib,f5o),e(Ib,AD),e(AD,m5o),e(Ib,g5o),e(A,h5o),e(A,Db),e(Db,zae),e(zae,p5o),e(Db,_5o),e(Db,LD),e(LD,u5o),e(Db,b5o),e(A,v5o),e(A,Nb),e(Nb,Wae),e(Wae,T5o),e(Nb,F5o),e(Nb,BD),e(BD,C5o),e(Nb,M5o),e(A,E5o),e(A,jb),e(jb,Qae),e(Qae,y5o),e(jb,w5o),e(jb,xD),e(xD,A5o),e(jb,L5o),e(A,B5o),e(A,qb),e(qb,Hae),e(Hae,x5o),e(qb,k5o),e(qb,kD),e(kD,R5o),e(qb,S5o),e(A,P5o),e(A,Gb),e(Gb,Uae),e(Uae,$5o),e(Gb,I5o),e(Gb,RD),e(RD,D5o),e(Gb,N5o),e(A,j5o),e(A,Ob),e(Ob,Jae),e(Jae,q5o),e(Ob,G5o),e(Ob,SD),e(SD,O5o),e(Ob,X5o),e(A,V5o),e(A,Xb),e(Xb,Yae),e(Yae,z5o),e(Xb,W5o),e(Xb,PD),e(PD,Q5o),e(Xb,H5o),e(A,U5o),e(A,Vb),e(Vb,Kae),e(Kae,J5o),e(Vb,Y5o),e(Vb,$D),e($D,K5o),e(Vb,Z5o),e(A,eyo),e(A,zb),e(zb,Zae),e(Zae,oyo),e(zb,ryo),e(zb,ID),e(ID,tyo),e(zb,ayo),e(A,nyo),e(A,Wb),e(Wb,ene),e(ene,syo),e(Wb,lyo),e(Wb,DD),e(DD,iyo),e(Wb,dyo),e(A,cyo),e(A,Qb),e(Qb,one),e(one,fyo),e(Qb,myo),e(Qb,ND),e(ND,gyo),e(Qb,hyo),e(Oe,pyo),e(Oe,Hb),e(Hb,_yo),e(Hb,rne),e(rne,uyo),e(Hb,byo),e(Hb,tne),e(tne,vyo),e(Oe,Tyo),e(Oe,ane),e(ane,Fyo),e(Oe,Cyo),g(PE,Oe,null),b(c,eRe,u),b(c,hd,u),e(hd,Ub),e(Ub,nne),g($E,nne,null),e(hd,Myo),e(hd,sne),e(sne,Eyo),b(c,oRe,u),b(c,rr,u),g(IE,rr,null),e(rr,yyo),e(rr,pd),e(pd,wyo),e(pd,lne),e(lne,Ayo),e(pd,Lyo),e(pd,ine),e(ine,Byo),e(pd,xyo),e(rr,kyo),e(rr,DE),e(DE,Ryo),e(DE,dne),e(dne,Syo),e(DE,Pyo),e(rr,$yo),e(rr,Jr),g(NE,Jr,null),e(Jr,Iyo),e(Jr,cne),e(cne,Dyo),e(Jr,Nyo),e(Jr,_d),e(_d,jyo),e(_d,fne),e(fne,qyo),e(_d,Gyo),e(_d,mne),e(mne,Oyo),e(_d,Xyo),e(Jr,Vyo),e(Jr,gne),e(gne,zyo),e(Jr,Wyo),g(jE,Jr,null),e(rr,Qyo),e(rr,Xe),g(qE,Xe,null),e(Xe,Hyo),e(Xe,hne),e(hne,Uyo),e(Xe,Jyo),e(Xe,Ja),e(Ja,Yyo),e(Ja,pne),e(pne,Kyo),e(Ja,Zyo),e(Ja,_ne),e(_ne,ewo),e(Ja,owo),e(Ja,une),e(une,rwo),e(Ja,two),e(Xe,awo),e(Xe,G),e(G,Jb),e(Jb,bne),e(bne,nwo),e(Jb,swo),e(Jb,jD),e(jD,lwo),e(Jb,iwo),e(G,dwo),e(G,Yb),e(Yb,vne),e(vne,cwo),e(Yb,fwo),e(Yb,qD),e(qD,mwo),e(Yb,gwo),e(G,hwo),e(G,Kb),e(Kb,Tne),e(Tne,pwo),e(Kb,_wo),e(Kb,GD),e(GD,uwo),e(Kb,bwo),e(G,vwo),e(G,Zb),e(Zb,Fne),e(Fne,Two),e(Zb,Fwo),e(Zb,OD),e(OD,Cwo),e(Zb,Mwo),e(G,Ewo),e(G,e3),e(e3,Cne),e(Cne,ywo),e(e3,wwo),e(e3,XD),e(XD,Awo),e(e3,Lwo),e(G,Bwo),e(G,o3),e(o3,Mne),e(Mne,xwo),e(o3,kwo),e(o3,VD),e(VD,Rwo),e(o3,Swo),e(G,Pwo),e(G,r3),e(r3,Ene),e(Ene,$wo),e(r3,Iwo),e(r3,zD),e(zD,Dwo),e(r3,Nwo),e(G,jwo),e(G,t3),e(t3,yne),e(yne,qwo),e(t3,Gwo),e(t3,WD),e(WD,Owo),e(t3,Xwo),e(G,Vwo),e(G,a3),e(a3,wne),e(wne,zwo),e(a3,Wwo),e(a3,QD),e(QD,Qwo),e(a3,Hwo),e(G,Uwo),e(G,n3),e(n3,Ane),e(Ane,Jwo),e(n3,Ywo),e(n3,HD),e(HD,Kwo),e(n3,Zwo),e(G,eAo),e(G,s3),e(s3,Lne),e(Lne,oAo),e(s3,rAo),e(s3,UD),e(UD,tAo),e(s3,aAo),e(G,nAo),e(G,l3),e(l3,Bne),e(Bne,sAo),e(l3,lAo),e(l3,JD),e(JD,iAo),e(l3,dAo),e(G,cAo),e(G,i3),e(i3,xne),e(xne,fAo),e(i3,mAo),e(i3,YD),e(YD,gAo),e(i3,hAo),e(G,pAo),e(G,d3),e(d3,kne),e(kne,_Ao),e(d3,uAo),e(d3,KD),e(KD,bAo),e(d3,vAo),e(G,TAo),e(G,c3),e(c3,Rne),e(Rne,FAo),e(c3,CAo),e(c3,ZD),e(ZD,MAo),e(c3,EAo),e(G,yAo),e(G,f3),e(f3,Sne),e(Sne,wAo),e(f3,AAo),e(f3,eN),e(eN,LAo),e(f3,BAo),e(G,xAo),e(G,m3),e(m3,Pne),e(Pne,kAo),e(m3,RAo),e(m3,oN),e(oN,SAo),e(m3,PAo),e(G,$Ao),e(G,g3),e(g3,$ne),e($ne,IAo),e(g3,DAo),e(g3,rN),e(rN,NAo),e(g3,jAo),e(G,qAo),e(G,h3),e(h3,Ine),e(Ine,GAo),e(h3,OAo),e(h3,tN),e(tN,XAo),e(h3,VAo),e(G,zAo),e(G,p3),e(p3,Dne),e(Dne,WAo),e(p3,QAo),e(p3,aN),e(aN,HAo),e(p3,UAo),e(G,JAo),e(G,_3),e(_3,Nne),e(Nne,YAo),e(_3,KAo),e(_3,nN),e(nN,ZAo),e(_3,eLo),e(G,oLo),e(G,u3),e(u3,jne),e(jne,rLo),e(u3,tLo),e(u3,sN),e(sN,aLo),e(u3,nLo),e(G,sLo),e(G,b3),e(b3,qne),e(qne,lLo),e(b3,iLo),e(b3,lN),e(lN,dLo),e(b3,cLo),e(G,fLo),e(G,v3),e(v3,Gne),e(Gne,mLo),e(v3,gLo),e(v3,iN),e(iN,hLo),e(v3,pLo),e(G,_Lo),e(G,T3),e(T3,One),e(One,uLo),e(T3,bLo),e(T3,dN),e(dN,vLo),e(T3,TLo),e(G,FLo),e(G,F3),e(F3,Xne),e(Xne,CLo),e(F3,MLo),e(F3,cN),e(cN,ELo),e(F3,yLo),e(G,wLo),e(G,C3),e(C3,Vne),e(Vne,ALo),e(C3,LLo),e(C3,fN),e(fN,BLo),e(C3,xLo),e(G,kLo),e(G,M3),e(M3,zne),e(zne,RLo),e(M3,SLo),e(M3,mN),e(mN,PLo),e(M3,$Lo),e(Xe,ILo),e(Xe,E3),e(E3,DLo),e(E3,Wne),e(Wne,NLo),e(E3,jLo),e(E3,Qne),e(Qne,qLo),e(Xe,GLo),e(Xe,Hne),e(Hne,OLo),e(Xe,XLo),g(GE,Xe,null),b(c,rRe,u),b(c,ud,u),e(ud,y3),e(y3,Une),g(OE,Une,null),e(ud,VLo),e(ud,Jne),e(Jne,zLo),b(c,tRe,u),b(c,tr,u),g(XE,tr,null),e(tr,WLo),e(tr,bd),e(bd,QLo),e(bd,Yne),e(Yne,HLo),e(bd,ULo),e(bd,Kne),e(Kne,JLo),e(bd,YLo),e(tr,KLo),e(tr,VE),e(VE,ZLo),e(VE,Zne),e(Zne,e7o),e(VE,o7o),e(tr,r7o),e(tr,Yr),g(zE,Yr,null),e(Yr,t7o),e(Yr,ese),e(ese,a7o),e(Yr,n7o),e(Yr,vd),e(vd,s7o),e(vd,ose),e(ose,l7o),e(vd,i7o),e(vd,rse),e(rse,d7o),e(vd,c7o),e(Yr,f7o),e(Yr,tse),e(tse,m7o),e(Yr,g7o),g(WE,Yr,null),e(tr,h7o),e(tr,Ve),g(QE,Ve,null),e(Ve,p7o),e(Ve,ase),e(ase,_7o),e(Ve,u7o),e(Ve,Ya),e(Ya,b7o),e(Ya,nse),e(nse,v7o),e(Ya,T7o),e(Ya,sse),e(sse,F7o),e(Ya,C7o),e(Ya,lse),e(lse,M7o),e(Ya,E7o),e(Ve,y7o),e(Ve,da),e(da,w3),e(w3,ise),e(ise,w7o),e(w3,A7o),e(w3,gN),e(gN,L7o),e(w3,B7o),e(da,x7o),e(da,A3),e(A3,dse),e(dse,k7o),e(A3,R7o),e(A3,hN),e(hN,S7o),e(A3,P7o),e(da,$7o),e(da,L3),e(L3,cse),e(cse,I7o),e(L3,D7o),e(L3,pN),e(pN,N7o),e(L3,j7o),e(da,q7o),e(da,B3),e(B3,fse),e(fse,G7o),e(B3,O7o),e(B3,_N),e(_N,X7o),e(B3,V7o),e(da,z7o),e(da,x3),e(x3,mse),e(mse,W7o),e(x3,Q7o),e(x3,uN),e(uN,H7o),e(x3,U7o),e(Ve,J7o),e(Ve,k3),e(k3,Y7o),e(k3,gse),e(gse,K7o),e(k3,Z7o),e(k3,hse),e(hse,e9o),e(Ve,o9o),e(Ve,pse),e(pse,r9o),e(Ve,t9o),g(HE,Ve,null),b(c,aRe,u),b(c,Td,u),e(Td,R3),e(R3,_se),g(UE,_se,null),e(Td,a9o),e(Td,use),e(use,n9o),b(c,nRe,u),b(c,ar,u),g(JE,ar,null),e(ar,s9o),e(ar,Fd),e(Fd,l9o),e(Fd,bse),e(bse,i9o),e(Fd,d9o),e(Fd,vse),e(vse,c9o),e(Fd,f9o),e(ar,m9o),e(ar,YE),e(YE,g9o),e(YE,Tse),e(Tse,h9o),e(YE,p9o),e(ar,_9o),e(ar,Kr),g(KE,Kr,null),e(Kr,u9o),e(Kr,Fse),e(Fse,b9o),e(Kr,v9o),e(Kr,Cd),e(Cd,T9o),e(Cd,Cse),e(Cse,F9o),e(Cd,C9o),e(Cd,Mse),e(Mse,M9o),e(Cd,E9o),e(Kr,y9o),e(Kr,Ese),e(Ese,w9o),e(Kr,A9o),g(ZE,Kr,null),e(ar,L9o),e(ar,ze),g(e5,ze,null),e(ze,B9o),e(ze,yse),e(yse,x9o),e(ze,k9o),e(ze,Ka),e(Ka,R9o),e(Ka,wse),e(wse,S9o),e(Ka,P9o),e(Ka,Ase),e(Ase,$9o),e(Ka,I9o),e(Ka,Lse),e(Lse,D9o),e(Ka,N9o),e(ze,j9o),e(ze,j),e(j,S3),e(S3,Bse),e(Bse,q9o),e(S3,G9o),e(S3,bN),e(bN,O9o),e(S3,X9o),e(j,V9o),e(j,P3),e(P3,xse),e(xse,z9o),e(P3,W9o),e(P3,vN),e(vN,Q9o),e(P3,H9o),e(j,U9o),e(j,$3),e($3,kse),e(kse,J9o),e($3,Y9o),e($3,TN),e(TN,K9o),e($3,Z9o),e(j,eBo),e(j,I3),e(I3,Rse),e(Rse,oBo),e(I3,rBo),e(I3,FN),e(FN,tBo),e(I3,aBo),e(j,nBo),e(j,D3),e(D3,Sse),e(Sse,sBo),e(D3,lBo),e(D3,CN),e(CN,iBo),e(D3,dBo),e(j,cBo),e(j,N3),e(N3,Pse),e(Pse,fBo),e(N3,mBo),e(N3,MN),e(MN,gBo),e(N3,hBo),e(j,pBo),e(j,j3),e(j3,$se),e($se,_Bo),e(j3,uBo),e(j3,EN),e(EN,bBo),e(j3,vBo),e(j,TBo),e(j,q3),e(q3,Ise),e(Ise,FBo),e(q3,CBo),e(q3,yN),e(yN,MBo),e(q3,EBo),e(j,yBo),e(j,G3),e(G3,Dse),e(Dse,wBo),e(G3,ABo),e(G3,wN),e(wN,LBo),e(G3,BBo),e(j,xBo),e(j,O3),e(O3,Nse),e(Nse,kBo),e(O3,RBo),e(O3,AN),e(AN,SBo),e(O3,PBo),e(j,$Bo),e(j,X3),e(X3,jse),e(jse,IBo),e(X3,DBo),e(X3,LN),e(LN,NBo),e(X3,jBo),e(j,qBo),e(j,V3),e(V3,qse),e(qse,GBo),e(V3,OBo),e(V3,BN),e(BN,XBo),e(V3,VBo),e(j,zBo),e(j,z3),e(z3,Gse),e(Gse,WBo),e(z3,QBo),e(z3,xN),e(xN,HBo),e(z3,UBo),e(j,JBo),e(j,W3),e(W3,Ose),e(Ose,YBo),e(W3,KBo),e(W3,kN),e(kN,ZBo),e(W3,exo),e(j,oxo),e(j,Q3),e(Q3,Xse),e(Xse,rxo),e(Q3,txo),e(Q3,RN),e(RN,axo),e(Q3,nxo),e(j,sxo),e(j,H3),e(H3,Vse),e(Vse,lxo),e(H3,ixo),e(H3,SN),e(SN,dxo),e(H3,cxo),e(j,fxo),e(j,U3),e(U3,zse),e(zse,mxo),e(U3,gxo),e(U3,PN),e(PN,hxo),e(U3,pxo),e(j,_xo),e(j,J3),e(J3,Wse),e(Wse,uxo),e(J3,bxo),e(J3,$N),e($N,vxo),e(J3,Txo),e(j,Fxo),e(j,Y3),e(Y3,Qse),e(Qse,Cxo),e(Y3,Mxo),e(Y3,IN),e(IN,Exo),e(Y3,yxo),e(j,wxo),e(j,K3),e(K3,Hse),e(Hse,Axo),e(K3,Lxo),e(K3,DN),e(DN,Bxo),e(K3,xxo),e(j,kxo),e(j,Z3),e(Z3,Use),e(Use,Rxo),e(Z3,Sxo),e(Z3,NN),e(NN,Pxo),e(Z3,$xo),e(j,Ixo),e(j,e2),e(e2,Jse),e(Jse,Dxo),e(e2,Nxo),e(e2,jN),e(jN,jxo),e(e2,qxo),e(j,Gxo),e(j,o2),e(o2,Yse),e(Yse,Oxo),e(o2,Xxo),e(o2,qN),e(qN,Vxo),e(o2,zxo),e(j,Wxo),e(j,r2),e(r2,Kse),e(Kse,Qxo),e(r2,Hxo),e(r2,GN),e(GN,Uxo),e(r2,Jxo),e(j,Yxo),e(j,t2),e(t2,Zse),e(Zse,Kxo),e(t2,Zxo),e(t2,ON),e(ON,eko),e(t2,oko),e(j,rko),e(j,a2),e(a2,ele),e(ele,tko),e(a2,ako),e(a2,XN),e(XN,nko),e(a2,sko),e(j,lko),e(j,n2),e(n2,ole),e(ole,iko),e(n2,dko),e(n2,VN),e(VN,cko),e(n2,fko),e(j,mko),e(j,s2),e(s2,rle),e(rle,gko),e(s2,hko),e(s2,zN),e(zN,pko),e(s2,_ko),e(j,uko),e(j,l2),e(l2,tle),e(tle,bko),e(l2,vko),e(l2,WN),e(WN,Tko),e(l2,Fko),e(j,Cko),e(j,i2),e(i2,ale),e(ale,Mko),e(i2,Eko),e(i2,QN),e(QN,yko),e(i2,wko),e(j,Ako),e(j,d2),e(d2,nle),e(nle,Lko),e(d2,Bko),e(d2,HN),e(HN,xko),e(d2,kko),e(j,Rko),e(j,c2),e(c2,sle),e(sle,Sko),e(c2,Pko),e(c2,UN),e(UN,$ko),e(c2,Iko),e(j,Dko),e(j,f2),e(f2,lle),e(lle,Nko),e(f2,jko),e(f2,JN),e(JN,qko),e(f2,Gko),e(ze,Oko),e(ze,m2),e(m2,Xko),e(m2,ile),e(ile,Vko),e(m2,zko),e(m2,dle),e(dle,Wko),e(ze,Qko),e(ze,cle),e(cle,Hko),e(ze,Uko),g(o5,ze,null),b(c,sRe,u),b(c,Md,u),e(Md,g2),e(g2,fle),g(r5,fle,null),e(Md,Jko),e(Md,mle),e(mle,Yko),b(c,lRe,u),b(c,nr,u),g(t5,nr,null),e(nr,Kko),e(nr,Ed),e(Ed,Zko),e(Ed,gle),e(gle,eRo),e(Ed,oRo),e(Ed,hle),e(hle,rRo),e(Ed,tRo),e(nr,aRo),e(nr,a5),e(a5,nRo),e(a5,ple),e(ple,sRo),e(a5,lRo),e(nr,iRo),e(nr,Zr),g(n5,Zr,null),e(Zr,dRo),e(Zr,_le),e(_le,cRo),e(Zr,fRo),e(Zr,yd),e(yd,mRo),e(yd,ule),e(ule,gRo),e(yd,hRo),e(yd,ble),e(ble,pRo),e(yd,_Ro),e(Zr,uRo),e(Zr,vle),e(vle,bRo),e(Zr,vRo),g(s5,Zr,null),e(nr,TRo),e(nr,We),g(l5,We,null),e(We,FRo),e(We,Tle),e(Tle,CRo),e(We,MRo),e(We,Za),e(Za,ERo),e(Za,Fle),e(Fle,yRo),e(Za,wRo),e(Za,Cle),e(Cle,ARo),e(Za,LRo),e(Za,Mle),e(Mle,BRo),e(Za,xRo),e(We,kRo),e(We,R),e(R,h2),e(h2,Ele),e(Ele,RRo),e(h2,SRo),e(h2,YN),e(YN,PRo),e(h2,$Ro),e(R,IRo),e(R,p2),e(p2,yle),e(yle,DRo),e(p2,NRo),e(p2,KN),e(KN,jRo),e(p2,qRo),e(R,GRo),e(R,_2),e(_2,wle),e(wle,ORo),e(_2,XRo),e(_2,ZN),e(ZN,VRo),e(_2,zRo),e(R,WRo),e(R,u2),e(u2,Ale),e(Ale,QRo),e(u2,HRo),e(u2,ej),e(ej,URo),e(u2,JRo),e(R,YRo),e(R,b2),e(b2,Lle),e(Lle,KRo),e(b2,ZRo),e(b2,oj),e(oj,eSo),e(b2,oSo),e(R,rSo),e(R,v2),e(v2,Ble),e(Ble,tSo),e(v2,aSo),e(v2,rj),e(rj,nSo),e(v2,sSo),e(R,lSo),e(R,T2),e(T2,xle),e(xle,iSo),e(T2,dSo),e(T2,tj),e(tj,cSo),e(T2,fSo),e(R,mSo),e(R,F2),e(F2,kle),e(kle,gSo),e(F2,hSo),e(F2,aj),e(aj,pSo),e(F2,_So),e(R,uSo),e(R,C2),e(C2,Rle),e(Rle,bSo),e(C2,vSo),e(C2,nj),e(nj,TSo),e(C2,FSo),e(R,CSo),e(R,M2),e(M2,Sle),e(Sle,MSo),e(M2,ESo),e(M2,sj),e(sj,ySo),e(M2,wSo),e(R,ASo),e(R,E2),e(E2,Ple),e(Ple,LSo),e(E2,BSo),e(E2,lj),e(lj,xSo),e(E2,kSo),e(R,RSo),e(R,y2),e(y2,$le),e($le,SSo),e(y2,PSo),e(y2,ij),e(ij,$So),e(y2,ISo),e(R,DSo),e(R,w2),e(w2,Ile),e(Ile,NSo),e(w2,jSo),e(w2,dj),e(dj,qSo),e(w2,GSo),e(R,OSo),e(R,A2),e(A2,Dle),e(Dle,XSo),e(A2,VSo),e(A2,cj),e(cj,zSo),e(A2,WSo),e(R,QSo),e(R,L2),e(L2,Nle),e(Nle,HSo),e(L2,USo),e(L2,fj),e(fj,JSo),e(L2,YSo),e(R,KSo),e(R,B2),e(B2,jle),e(jle,ZSo),e(B2,ePo),e(B2,mj),e(mj,oPo),e(B2,rPo),e(R,tPo),e(R,x2),e(x2,qle),e(qle,aPo),e(x2,nPo),e(x2,gj),e(gj,sPo),e(x2,lPo),e(R,iPo),e(R,k2),e(k2,Gle),e(Gle,dPo),e(k2,cPo),e(k2,hj),e(hj,fPo),e(k2,mPo),e(R,gPo),e(R,R2),e(R2,Ole),e(Ole,hPo),e(R2,pPo),e(R2,pj),e(pj,_Po),e(R2,uPo),e(R,bPo),e(R,S2),e(S2,Xle),e(Xle,vPo),e(S2,TPo),e(S2,_j),e(_j,FPo),e(S2,CPo),e(R,MPo),e(R,P2),e(P2,Vle),e(Vle,EPo),e(P2,yPo),e(P2,uj),e(uj,wPo),e(P2,APo),e(R,LPo),e(R,$2),e($2,zle),e(zle,BPo),e($2,xPo),e($2,bj),e(bj,kPo),e($2,RPo),e(R,SPo),e(R,I2),e(I2,Wle),e(Wle,PPo),e(I2,$Po),e(I2,vj),e(vj,IPo),e(I2,DPo),e(R,NPo),e(R,D2),e(D2,Qle),e(Qle,jPo),e(D2,qPo),e(D2,Tj),e(Tj,GPo),e(D2,OPo),e(R,XPo),e(R,N2),e(N2,Hle),e(Hle,VPo),e(N2,zPo),e(N2,Fj),e(Fj,WPo),e(N2,QPo),e(R,HPo),e(R,j2),e(j2,Ule),e(Ule,UPo),e(j2,JPo),e(j2,Cj),e(Cj,YPo),e(j2,KPo),e(R,ZPo),e(R,q2),e(q2,Jle),e(Jle,e$o),e(q2,o$o),e(q2,Mj),e(Mj,r$o),e(q2,t$o),e(R,a$o),e(R,G2),e(G2,Yle),e(Yle,n$o),e(G2,s$o),e(G2,Ej),e(Ej,l$o),e(G2,i$o),e(R,d$o),e(R,O2),e(O2,Kle),e(Kle,c$o),e(O2,f$o),e(O2,yj),e(yj,m$o),e(O2,g$o),e(R,h$o),e(R,X2),e(X2,Zle),e(Zle,p$o),e(X2,_$o),e(X2,wj),e(wj,u$o),e(X2,b$o),e(R,v$o),e(R,V2),e(V2,eie),e(eie,T$o),e(V2,F$o),e(V2,Aj),e(Aj,C$o),e(V2,M$o),e(R,E$o),e(R,z2),e(z2,oie),e(oie,y$o),e(z2,w$o),e(z2,Lj),e(Lj,A$o),e(z2,L$o),e(R,B$o),e(R,W2),e(W2,rie),e(rie,x$o),e(W2,k$o),e(W2,Bj),e(Bj,R$o),e(W2,S$o),e(R,P$o),e(R,Q2),e(Q2,tie),e(tie,$$o),e(Q2,I$o),e(Q2,xj),e(xj,D$o),e(Q2,N$o),e(R,j$o),e(R,H2),e(H2,aie),e(aie,q$o),e(H2,G$o),e(H2,kj),e(kj,O$o),e(H2,X$o),e(R,V$o),e(R,U2),e(U2,nie),e(nie,z$o),e(U2,W$o),e(U2,Rj),e(Rj,Q$o),e(U2,H$o),e(R,U$o),e(R,J2),e(J2,sie),e(sie,J$o),e(J2,Y$o),e(J2,Sj),e(Sj,K$o),e(J2,Z$o),e(R,eIo),e(R,Y2),e(Y2,lie),e(lie,oIo),e(Y2,rIo),e(Y2,Pj),e(Pj,tIo),e(Y2,aIo),e(R,nIo),e(R,K2),e(K2,iie),e(iie,sIo),e(K2,lIo),e(K2,$j),e($j,iIo),e(K2,dIo),e(We,cIo),e(We,Z2),e(Z2,fIo),e(Z2,die),e(die,mIo),e(Z2,gIo),e(Z2,cie),e(cie,hIo),e(We,pIo),e(We,fie),e(fie,_Io),e(We,uIo),g(i5,We,null),b(c,iRe,u),b(c,wd,u),e(wd,ev),e(ev,mie),g(d5,mie,null),e(wd,bIo),e(wd,gie),e(gie,vIo),b(c,dRe,u),b(c,sr,u),g(c5,sr,null),e(sr,TIo),e(sr,Ad),e(Ad,FIo),e(Ad,hie),e(hie,CIo),e(Ad,MIo),e(Ad,pie),e(pie,EIo),e(Ad,yIo),e(sr,wIo),e(sr,f5),e(f5,AIo),e(f5,_ie),e(_ie,LIo),e(f5,BIo),e(sr,xIo),e(sr,et),g(m5,et,null),e(et,kIo),e(et,uie),e(uie,RIo),e(et,SIo),e(et,Ld),e(Ld,PIo),e(Ld,bie),e(bie,$Io),e(Ld,IIo),e(Ld,vie),e(vie,DIo),e(Ld,NIo),e(et,jIo),e(et,Tie),e(Tie,qIo),e(et,GIo),g(g5,et,null),e(sr,OIo),e(sr,Qe),g(h5,Qe,null),e(Qe,XIo),e(Qe,Fie),e(Fie,VIo),e(Qe,zIo),e(Qe,en),e(en,WIo),e(en,Cie),e(Cie,QIo),e(en,HIo),e(en,Mie),e(Mie,UIo),e(en,JIo),e(en,Eie),e(Eie,YIo),e(en,KIo),e(Qe,ZIo),e(Qe,yie),e(yie,ov),e(ov,wie),e(wie,eDo),e(ov,oDo),e(ov,Ij),e(Ij,rDo),e(ov,tDo),e(Qe,aDo),e(Qe,rv),e(rv,nDo),e(rv,Aie),e(Aie,sDo),e(rv,lDo),e(rv,Lie),e(Lie,iDo),e(Qe,dDo),e(Qe,Bie),e(Bie,cDo),e(Qe,fDo),g(p5,Qe,null),b(c,cRe,u),b(c,Bd,u),e(Bd,tv),e(tv,xie),g(_5,xie,null),e(Bd,mDo),e(Bd,kie),e(kie,gDo),b(c,fRe,u),b(c,lr,u),g(u5,lr,null),e(lr,hDo),e(lr,xd),e(xd,pDo),e(xd,Rie),e(Rie,_Do),e(xd,uDo),e(xd,Sie),e(Sie,bDo),e(xd,vDo),e(lr,TDo),e(lr,b5),e(b5,FDo),e(b5,Pie),e(Pie,CDo),e(b5,MDo),e(lr,EDo),e(lr,ot),g(v5,ot,null),e(ot,yDo),e(ot,$ie),e($ie,wDo),e(ot,ADo),e(ot,kd),e(kd,LDo),e(kd,Iie),e(Iie,BDo),e(kd,xDo),e(kd,Die),e(Die,kDo),e(kd,RDo),e(ot,SDo),e(ot,Nie),e(Nie,PDo),e(ot,$Do),g(T5,ot,null),e(lr,IDo),e(lr,He),g(F5,He,null),e(He,DDo),e(He,jie),e(jie,NDo),e(He,jDo),e(He,on),e(on,qDo),e(on,qie),e(qie,GDo),e(on,ODo),e(on,Gie),e(Gie,XDo),e(on,VDo),e(on,Oie),e(Oie,zDo),e(on,WDo),e(He,QDo),e(He,ge),e(ge,av),e(av,Xie),e(Xie,HDo),e(av,UDo),e(av,Dj),e(Dj,JDo),e(av,YDo),e(ge,KDo),e(ge,nv),e(nv,Vie),e(Vie,ZDo),e(nv,eNo),e(nv,Nj),e(Nj,oNo),e(nv,rNo),e(ge,tNo),e(ge,qs),e(qs,zie),e(zie,aNo),e(qs,nNo),e(qs,jj),e(jj,sNo),e(qs,lNo),e(qs,qj),e(qj,iNo),e(qs,dNo),e(ge,cNo),e(ge,sv),e(sv,Wie),e(Wie,fNo),e(sv,mNo),e(sv,Gj),e(Gj,gNo),e(sv,hNo),e(ge,pNo),e(ge,ma),e(ma,Qie),e(Qie,_No),e(ma,uNo),e(ma,Oj),e(Oj,bNo),e(ma,vNo),e(ma,Xj),e(Xj,TNo),e(ma,FNo),e(ma,Vj),e(Vj,CNo),e(ma,MNo),e(ge,ENo),e(ge,lv),e(lv,Hie),e(Hie,yNo),e(lv,wNo),e(lv,zj),e(zj,ANo),e(lv,LNo),e(ge,BNo),e(ge,iv),e(iv,Uie),e(Uie,xNo),e(iv,kNo),e(iv,Wj),e(Wj,RNo),e(iv,SNo),e(ge,PNo),e(ge,dv),e(dv,Jie),e(Jie,$No),e(dv,INo),e(dv,Qj),e(Qj,DNo),e(dv,NNo),e(ge,jNo),e(ge,cv),e(cv,Yie),e(Yie,qNo),e(cv,GNo),e(cv,Hj),e(Hj,ONo),e(cv,XNo),e(ge,VNo),e(ge,fv),e(fv,Kie),e(Kie,zNo),e(fv,WNo),e(fv,Uj),e(Uj,QNo),e(fv,HNo),e(ge,UNo),e(ge,mv),e(mv,Zie),e(Zie,JNo),e(mv,YNo),e(mv,Jj),e(Jj,KNo),e(mv,ZNo),e(He,ejo),e(He,gv),e(gv,ojo),e(gv,ede),e(ede,rjo),e(gv,tjo),e(gv,ode),e(ode,ajo),e(He,njo),e(He,rde),e(rde,sjo),e(He,ljo),g(C5,He,null),b(c,mRe,u),b(c,Rd,u),e(Rd,hv),e(hv,tde),g(M5,tde,null),e(Rd,ijo),e(Rd,ade),e(ade,djo),b(c,gRe,u),b(c,ir,u),g(E5,ir,null),e(ir,cjo),e(ir,Sd),e(Sd,fjo),e(Sd,nde),e(nde,mjo),e(Sd,gjo),e(Sd,sde),e(sde,hjo),e(Sd,pjo),e(ir,_jo),e(ir,y5),e(y5,ujo),e(y5,lde),e(lde,bjo),e(y5,vjo),e(ir,Tjo),e(ir,rt),g(w5,rt,null),e(rt,Fjo),e(rt,ide),e(ide,Cjo),e(rt,Mjo),e(rt,Pd),e(Pd,Ejo),e(Pd,dde),e(dde,yjo),e(Pd,wjo),e(Pd,cde),e(cde,Ajo),e(Pd,Ljo),e(rt,Bjo),e(rt,fde),e(fde,xjo),e(rt,kjo),g(A5,rt,null),e(ir,Rjo),e(ir,Ue),g(L5,Ue,null),e(Ue,Sjo),e(Ue,mde),e(mde,Pjo),e(Ue,$jo),e(Ue,rn),e(rn,Ijo),e(rn,gde),e(gde,Djo),e(rn,Njo),e(rn,hde),e(hde,jjo),e(rn,qjo),e(rn,pde),e(pde,Gjo),e(rn,Ojo),e(Ue,Xjo),e(Ue,_de),e(_de,pv),e(pv,ude),e(ude,Vjo),e(pv,zjo),e(pv,Yj),e(Yj,Wjo),e(pv,Qjo),e(Ue,Hjo),e(Ue,_v),e(_v,Ujo),e(_v,bde),e(bde,Jjo),e(_v,Yjo),e(_v,vde),e(vde,Kjo),e(Ue,Zjo),e(Ue,Tde),e(Tde,eqo),e(Ue,oqo),g(B5,Ue,null),b(c,hRe,u),b(c,$d,u),e($d,uv),e(uv,Fde),g(x5,Fde,null),e($d,rqo),e($d,Cde),e(Cde,tqo),b(c,pRe,u),b(c,dr,u),g(k5,dr,null),e(dr,aqo),e(dr,Id),e(Id,nqo),e(Id,Mde),e(Mde,sqo),e(Id,lqo),e(Id,Ede),e(Ede,iqo),e(Id,dqo),e(dr,cqo),e(dr,R5),e(R5,fqo),e(R5,yde),e(yde,mqo),e(R5,gqo),e(dr,hqo),e(dr,tt),g(S5,tt,null),e(tt,pqo),e(tt,wde),e(wde,_qo),e(tt,uqo),e(tt,Dd),e(Dd,bqo),e(Dd,Ade),e(Ade,vqo),e(Dd,Tqo),e(Dd,Lde),e(Lde,Fqo),e(Dd,Cqo),e(tt,Mqo),e(tt,Bde),e(Bde,Eqo),e(tt,yqo),g(P5,tt,null),e(dr,wqo),e(dr,Je),g($5,Je,null),e(Je,Aqo),e(Je,xde),e(xde,Lqo),e(Je,Bqo),e(Je,tn),e(tn,xqo),e(tn,kde),e(kde,kqo),e(tn,Rqo),e(tn,Rde),e(Rde,Sqo),e(tn,Pqo),e(tn,Sde),e(Sde,$qo),e(tn,Iqo),e(Je,Dqo),e(Je,ke),e(ke,bv),e(bv,Pde),e(Pde,Nqo),e(bv,jqo),e(bv,Kj),e(Kj,qqo),e(bv,Gqo),e(ke,Oqo),e(ke,vv),e(vv,$de),e($de,Xqo),e(vv,Vqo),e(vv,Zj),e(Zj,zqo),e(vv,Wqo),e(ke,Qqo),e(ke,Tv),e(Tv,Ide),e(Ide,Hqo),e(Tv,Uqo),e(Tv,eq),e(eq,Jqo),e(Tv,Yqo),e(ke,Kqo),e(ke,Fv),e(Fv,Dde),e(Dde,Zqo),e(Fv,eGo),e(Fv,oq),e(oq,oGo),e(Fv,rGo),e(ke,tGo),e(ke,Cv),e(Cv,Nde),e(Nde,aGo),e(Cv,nGo),e(Cv,rq),e(rq,sGo),e(Cv,lGo),e(ke,iGo),e(ke,Mv),e(Mv,jde),e(jde,dGo),e(Mv,cGo),e(Mv,tq),e(tq,fGo),e(Mv,mGo),e(ke,gGo),e(ke,Ev),e(Ev,qde),e(qde,hGo),e(Ev,pGo),e(Ev,aq),e(aq,_Go),e(Ev,uGo),e(ke,bGo),e(ke,yv),e(yv,Gde),e(Gde,vGo),e(yv,TGo),e(yv,nq),e(nq,FGo),e(yv,CGo),e(Je,MGo),e(Je,wv),e(wv,EGo),e(wv,Ode),e(Ode,yGo),e(wv,wGo),e(wv,Xde),e(Xde,AGo),e(Je,LGo),e(Je,Vde),e(Vde,BGo),e(Je,xGo),g(I5,Je,null),b(c,_Re,u),b(c,Nd,u),e(Nd,Av),e(Av,zde),g(D5,zde,null),e(Nd,kGo),e(Nd,Wde),e(Wde,RGo),b(c,uRe,u),b(c,cr,u),g(N5,cr,null),e(cr,SGo),e(cr,jd),e(jd,PGo),e(jd,Qde),e(Qde,$Go),e(jd,IGo),e(jd,Hde),e(Hde,DGo),e(jd,NGo),e(cr,jGo),e(cr,j5),e(j5,qGo),e(j5,Ude),e(Ude,GGo),e(j5,OGo),e(cr,XGo),e(cr,at),g(q5,at,null),e(at,VGo),e(at,Jde),e(Jde,zGo),e(at,WGo),e(at,qd),e(qd,QGo),e(qd,Yde),e(Yde,HGo),e(qd,UGo),e(qd,Kde),e(Kde,JGo),e(qd,YGo),e(at,KGo),e(at,Zde),e(Zde,ZGo),e(at,eOo),g(G5,at,null),e(cr,oOo),e(cr,Ye),g(O5,Ye,null),e(Ye,rOo),e(Ye,ece),e(ece,tOo),e(Ye,aOo),e(Ye,an),e(an,nOo),e(an,oce),e(oce,sOo),e(an,lOo),e(an,rce),e(rce,iOo),e(an,dOo),e(an,tce),e(tce,cOo),e(an,fOo),e(Ye,mOo),e(Ye,nn),e(nn,Lv),e(Lv,ace),e(ace,gOo),e(Lv,hOo),e(Lv,sq),e(sq,pOo),e(Lv,_Oo),e(nn,uOo),e(nn,Bv),e(Bv,nce),e(nce,bOo),e(Bv,vOo),e(Bv,lq),e(lq,TOo),e(Bv,FOo),e(nn,COo),e(nn,xv),e(xv,sce),e(sce,MOo),e(xv,EOo),e(xv,iq),e(iq,yOo),e(xv,wOo),e(nn,AOo),e(nn,kv),e(kv,lce),e(lce,LOo),e(kv,BOo),e(kv,dq),e(dq,xOo),e(kv,kOo),e(Ye,ROo),e(Ye,Rv),e(Rv,SOo),e(Rv,ice),e(ice,POo),e(Rv,$Oo),e(Rv,dce),e(dce,IOo),e(Ye,DOo),e(Ye,cce),e(cce,NOo),e(Ye,jOo),g(X5,Ye,null),b(c,bRe,u),b(c,Gd,u),e(Gd,Sv),e(Sv,fce),g(V5,fce,null),e(Gd,qOo),e(Gd,mce),e(mce,GOo),b(c,vRe,u),b(c,fr,u),g(z5,fr,null),e(fr,OOo),e(fr,Od),e(Od,XOo),e(Od,gce),e(gce,VOo),e(Od,zOo),e(Od,hce),e(hce,WOo),e(Od,QOo),e(fr,HOo),e(fr,W5),e(W5,UOo),e(W5,pce),e(pce,JOo),e(W5,YOo),e(fr,KOo),e(fr,nt),g(Q5,nt,null),e(nt,ZOo),e(nt,_ce),e(_ce,eXo),e(nt,oXo),e(nt,Xd),e(Xd,rXo),e(Xd,uce),e(uce,tXo),e(Xd,aXo),e(Xd,bce),e(bce,nXo),e(Xd,sXo),e(nt,lXo),e(nt,vce),e(vce,iXo),e(nt,dXo),g(H5,nt,null),e(fr,cXo),e(fr,Ke),g(U5,Ke,null),e(Ke,fXo),e(Ke,Tce),e(Tce,mXo),e(Ke,gXo),e(Ke,sn),e(sn,hXo),e(sn,Fce),e(Fce,pXo),e(sn,_Xo),e(sn,Cce),e(Cce,uXo),e(sn,bXo),e(sn,Mce),e(Mce,vXo),e(sn,TXo),e(Ke,FXo),e(Ke,Re),e(Re,Pv),e(Pv,Ece),e(Ece,CXo),e(Pv,MXo),e(Pv,cq),e(cq,EXo),e(Pv,yXo),e(Re,wXo),e(Re,$v),e($v,yce),e(yce,AXo),e($v,LXo),e($v,fq),e(fq,BXo),e($v,xXo),e(Re,kXo),e(Re,Iv),e(Iv,wce),e(wce,RXo),e(Iv,SXo),e(Iv,mq),e(mq,PXo),e(Iv,$Xo),e(Re,IXo),e(Re,Dv),e(Dv,Ace),e(Ace,DXo),e(Dv,NXo),e(Dv,gq),e(gq,jXo),e(Dv,qXo),e(Re,GXo),e(Re,Nv),e(Nv,Lce),e(Lce,OXo),e(Nv,XXo),e(Nv,hq),e(hq,VXo),e(Nv,zXo),e(Re,WXo),e(Re,jv),e(jv,Bce),e(Bce,QXo),e(jv,HXo),e(jv,pq),e(pq,UXo),e(jv,JXo),e(Re,YXo),e(Re,qv),e(qv,xce),e(xce,KXo),e(qv,ZXo),e(qv,_q),e(_q,eVo),e(qv,oVo),e(Re,rVo),e(Re,Gv),e(Gv,kce),e(kce,tVo),e(Gv,aVo),e(Gv,uq),e(uq,nVo),e(Gv,sVo),e(Ke,lVo),e(Ke,Ov),e(Ov,iVo),e(Ov,Rce),e(Rce,dVo),e(Ov,cVo),e(Ov,Sce),e(Sce,fVo),e(Ke,mVo),e(Ke,Pce),e(Pce,gVo),e(Ke,hVo),g(J5,Ke,null),b(c,TRe,u),b(c,Vd,u),e(Vd,Xv),e(Xv,$ce),g(Y5,$ce,null),e(Vd,pVo),e(Vd,Ice),e(Ice,_Vo),b(c,FRe,u),b(c,mr,u),g(K5,mr,null),e(mr,uVo),e(mr,zd),e(zd,bVo),e(zd,Dce),e(Dce,vVo),e(zd,TVo),e(zd,Nce),e(Nce,FVo),e(zd,CVo),e(mr,MVo),e(mr,Z5),e(Z5,EVo),e(Z5,jce),e(jce,yVo),e(Z5,wVo),e(mr,AVo),e(mr,st),g(ey,st,null),e(st,LVo),e(st,qce),e(qce,BVo),e(st,xVo),e(st,Wd),e(Wd,kVo),e(Wd,Gce),e(Gce,RVo),e(Wd,SVo),e(Wd,Oce),e(Oce,PVo),e(Wd,$Vo),e(st,IVo),e(st,Xce),e(Xce,DVo),e(st,NVo),g(oy,st,null),e(mr,jVo),e(mr,Ze),g(ry,Ze,null),e(Ze,qVo),e(Ze,Vce),e(Vce,GVo),e(Ze,OVo),e(Ze,ln),e(ln,XVo),e(ln,zce),e(zce,VVo),e(ln,zVo),e(ln,Wce),e(Wce,WVo),e(ln,QVo),e(ln,Qce),e(Qce,HVo),e(ln,UVo),e(Ze,JVo),e(Ze,ty),e(ty,Vv),e(Vv,Hce),e(Hce,YVo),e(Vv,KVo),e(Vv,bq),e(bq,ZVo),e(Vv,ezo),e(ty,ozo),e(ty,zv),e(zv,Uce),e(Uce,rzo),e(zv,tzo),e(zv,vq),e(vq,azo),e(zv,nzo),e(Ze,szo),e(Ze,Wv),e(Wv,lzo),e(Wv,Jce),e(Jce,izo),e(Wv,dzo),e(Wv,Yce),e(Yce,czo),e(Ze,fzo),e(Ze,Kce),e(Kce,mzo),e(Ze,gzo),g(ay,Ze,null),b(c,CRe,u),b(c,Qd,u),e(Qd,Qv),e(Qv,Zce),g(ny,Zce,null),e(Qd,hzo),e(Qd,efe),e(efe,pzo),b(c,MRe,u),b(c,gr,u),g(sy,gr,null),e(gr,_zo),e(gr,Hd),e(Hd,uzo),e(Hd,ofe),e(ofe,bzo),e(Hd,vzo),e(Hd,rfe),e(rfe,Tzo),e(Hd,Fzo),e(gr,Czo),e(gr,ly),e(ly,Mzo),e(ly,tfe),e(tfe,Ezo),e(ly,yzo),e(gr,wzo),e(gr,lt),g(iy,lt,null),e(lt,Azo),e(lt,afe),e(afe,Lzo),e(lt,Bzo),e(lt,Ud),e(Ud,xzo),e(Ud,nfe),e(nfe,kzo),e(Ud,Rzo),e(Ud,sfe),e(sfe,Szo),e(Ud,Pzo),e(lt,$zo),e(lt,lfe),e(lfe,Izo),e(lt,Dzo),g(dy,lt,null),e(gr,Nzo),e(gr,eo),g(cy,eo,null),e(eo,jzo),e(eo,ife),e(ife,qzo),e(eo,Gzo),e(eo,dn),e(dn,Ozo),e(dn,dfe),e(dfe,Xzo),e(dn,Vzo),e(dn,cfe),e(cfe,zzo),e(dn,Wzo),e(dn,ffe),e(ffe,Qzo),e(dn,Hzo),e(eo,Uzo),e(eo,cn),e(cn,Hv),e(Hv,mfe),e(mfe,Jzo),e(Hv,Yzo),e(Hv,Tq),e(Tq,Kzo),e(Hv,Zzo),e(cn,eWo),e(cn,Uv),e(Uv,gfe),e(gfe,oWo),e(Uv,rWo),e(Uv,Fq),e(Fq,tWo),e(Uv,aWo),e(cn,nWo),e(cn,Jv),e(Jv,hfe),e(hfe,sWo),e(Jv,lWo),e(Jv,Cq),e(Cq,iWo),e(Jv,dWo),e(cn,cWo),e(cn,Yv),e(Yv,pfe),e(pfe,fWo),e(Yv,mWo),e(Yv,Mq),e(Mq,gWo),e(Yv,hWo),e(eo,pWo),e(eo,Kv),e(Kv,_Wo),e(Kv,_fe),e(_fe,uWo),e(Kv,bWo),e(Kv,ufe),e(ufe,vWo),e(eo,TWo),e(eo,bfe),e(bfe,FWo),e(eo,CWo),g(fy,eo,null),b(c,ERe,u),b(c,Jd,u),e(Jd,Zv),e(Zv,vfe),g(my,vfe,null),e(Jd,MWo),e(Jd,Tfe),e(Tfe,EWo),b(c,yRe,u),b(c,hr,u),g(gy,hr,null),e(hr,yWo),e(hr,Yd),e(Yd,wWo),e(Yd,Ffe),e(Ffe,AWo),e(Yd,LWo),e(Yd,Cfe),e(Cfe,BWo),e(Yd,xWo),e(hr,kWo),e(hr,hy),e(hy,RWo),e(hy,Mfe),e(Mfe,SWo),e(hy,PWo),e(hr,$Wo),e(hr,it),g(py,it,null),e(it,IWo),e(it,Efe),e(Efe,DWo),e(it,NWo),e(it,Kd),e(Kd,jWo),e(Kd,yfe),e(yfe,qWo),e(Kd,GWo),e(Kd,wfe),e(wfe,OWo),e(Kd,XWo),e(it,VWo),e(it,Afe),e(Afe,zWo),e(it,WWo),g(_y,it,null),e(hr,QWo),e(hr,oo),g(uy,oo,null),e(oo,HWo),e(oo,Lfe),e(Lfe,UWo),e(oo,JWo),e(oo,fn),e(fn,YWo),e(fn,Bfe),e(Bfe,KWo),e(fn,ZWo),e(fn,xfe),e(xfe,eQo),e(fn,oQo),e(fn,kfe),e(kfe,rQo),e(fn,tQo),e(oo,aQo),e(oo,Zd),e(Zd,e6),e(e6,Rfe),e(Rfe,nQo),e(e6,sQo),e(e6,Eq),e(Eq,lQo),e(e6,iQo),e(Zd,dQo),e(Zd,o6),e(o6,Sfe),e(Sfe,cQo),e(o6,fQo),e(o6,yq),e(yq,mQo),e(o6,gQo),e(Zd,hQo),e(Zd,r6),e(r6,Pfe),e(Pfe,pQo),e(r6,_Qo),e(r6,wq),e(wq,uQo),e(r6,bQo),e(oo,vQo),e(oo,t6),e(t6,TQo),e(t6,$fe),e($fe,FQo),e(t6,CQo),e(t6,Ife),e(Ife,MQo),e(oo,EQo),e(oo,Dfe),e(Dfe,yQo),e(oo,wQo),g(by,oo,null),b(c,wRe,u),b(c,ec,u),e(ec,a6),e(a6,Nfe),g(vy,Nfe,null),e(ec,AQo),e(ec,jfe),e(jfe,LQo),b(c,ARe,u),b(c,pr,u),g(Ty,pr,null),e(pr,BQo),e(pr,oc),e(oc,xQo),e(oc,qfe),e(qfe,kQo),e(oc,RQo),e(oc,Gfe),e(Gfe,SQo),e(oc,PQo),e(pr,$Qo),e(pr,Fy),e(Fy,IQo),e(Fy,Ofe),e(Ofe,DQo),e(Fy,NQo),e(pr,jQo),e(pr,dt),g(Cy,dt,null),e(dt,qQo),e(dt,Xfe),e(Xfe,GQo),e(dt,OQo),e(dt,rc),e(rc,XQo),e(rc,Vfe),e(Vfe,VQo),e(rc,zQo),e(rc,zfe),e(zfe,WQo),e(rc,QQo),e(dt,HQo),e(dt,Wfe),e(Wfe,UQo),e(dt,JQo),g(My,dt,null),e(pr,YQo),e(pr,ro),g(Ey,ro,null),e(ro,KQo),e(ro,Qfe),e(Qfe,ZQo),e(ro,eHo),e(ro,mn),e(mn,oHo),e(mn,Hfe),e(Hfe,rHo),e(mn,tHo),e(mn,Ufe),e(Ufe,aHo),e(mn,nHo),e(mn,Jfe),e(Jfe,sHo),e(mn,lHo),e(ro,iHo),e(ro,Yfe),e(Yfe,n6),e(n6,Kfe),e(Kfe,dHo),e(n6,cHo),e(n6,Aq),e(Aq,fHo),e(n6,mHo),e(ro,gHo),e(ro,s6),e(s6,hHo),e(s6,Zfe),e(Zfe,pHo),e(s6,_Ho),e(s6,eme),e(eme,uHo),e(ro,bHo),e(ro,ome),e(ome,vHo),e(ro,THo),g(yy,ro,null),b(c,LRe,u),b(c,tc,u),e(tc,l6),e(l6,rme),g(wy,rme,null),e(tc,FHo),e(tc,tme),e(tme,CHo),b(c,BRe,u),b(c,_r,u),g(Ay,_r,null),e(_r,MHo),e(_r,ac),e(ac,EHo),e(ac,ame),e(ame,yHo),e(ac,wHo),e(ac,nme),e(nme,AHo),e(ac,LHo),e(_r,BHo),e(_r,Ly),e(Ly,xHo),e(Ly,sme),e(sme,kHo),e(Ly,RHo),e(_r,SHo),e(_r,ct),g(By,ct,null),e(ct,PHo),e(ct,lme),e(lme,$Ho),e(ct,IHo),e(ct,nc),e(nc,DHo),e(nc,ime),e(ime,NHo),e(nc,jHo),e(nc,dme),e(dme,qHo),e(nc,GHo),e(ct,OHo),e(ct,cme),e(cme,XHo),e(ct,VHo),g(xy,ct,null),e(_r,zHo),e(_r,to),g(ky,to,null),e(to,WHo),e(to,fme),e(fme,QHo),e(to,HHo),e(to,gn),e(gn,UHo),e(gn,mme),e(mme,JHo),e(gn,YHo),e(gn,gme),e(gme,KHo),e(gn,ZHo),e(gn,hme),e(hme,eUo),e(gn,oUo),e(to,rUo),e(to,pme),e(pme,i6),e(i6,_me),e(_me,tUo),e(i6,aUo),e(i6,Lq),e(Lq,nUo),e(i6,sUo),e(to,lUo),e(to,d6),e(d6,iUo),e(d6,ume),e(ume,dUo),e(d6,cUo),e(d6,bme),e(bme,fUo),e(to,mUo),e(to,vme),e(vme,gUo),e(to,hUo),g(Ry,to,null),b(c,xRe,u),b(c,sc,u),e(sc,c6),e(c6,Tme),g(Sy,Tme,null),e(sc,pUo),e(sc,Fme),e(Fme,_Uo),b(c,kRe,u),b(c,ur,u),g(Py,ur,null),e(ur,uUo),e(ur,lc),e(lc,bUo),e(lc,Cme),e(Cme,vUo),e(lc,TUo),e(lc,Mme),e(Mme,FUo),e(lc,CUo),e(ur,MUo),e(ur,$y),e($y,EUo),e($y,Eme),e(Eme,yUo),e($y,wUo),e(ur,AUo),e(ur,ft),g(Iy,ft,null),e(ft,LUo),e(ft,yme),e(yme,BUo),e(ft,xUo),e(ft,ic),e(ic,kUo),e(ic,wme),e(wme,RUo),e(ic,SUo),e(ic,Ame),e(Ame,PUo),e(ic,$Uo),e(ft,IUo),e(ft,Lme),e(Lme,DUo),e(ft,NUo),g(Dy,ft,null),e(ur,jUo),e(ur,ao),g(Ny,ao,null),e(ao,qUo),e(ao,Bme),e(Bme,GUo),e(ao,OUo),e(ao,hn),e(hn,XUo),e(hn,xme),e(xme,VUo),e(hn,zUo),e(hn,kme),e(kme,WUo),e(hn,QUo),e(hn,Rme),e(Rme,HUo),e(hn,UUo),e(ao,JUo),e(ao,dc),e(dc,f6),e(f6,Sme),e(Sme,YUo),e(f6,KUo),e(f6,Bq),e(Bq,ZUo),e(f6,eJo),e(dc,oJo),e(dc,m6),e(m6,Pme),e(Pme,rJo),e(m6,tJo),e(m6,xq),e(xq,aJo),e(m6,nJo),e(dc,sJo),e(dc,g6),e(g6,$me),e($me,lJo),e(g6,iJo),e(g6,kq),e(kq,dJo),e(g6,cJo),e(ao,fJo),e(ao,h6),e(h6,mJo),e(h6,Ime),e(Ime,gJo),e(h6,hJo),e(h6,Dme),e(Dme,pJo),e(ao,_Jo),e(ao,Nme),e(Nme,uJo),e(ao,bJo),g(jy,ao,null),b(c,RRe,u),b(c,cc,u),e(cc,p6),e(p6,jme),g(qy,jme,null),e(cc,vJo),e(cc,qme),e(qme,TJo),b(c,SRe,u),b(c,br,u),g(Gy,br,null),e(br,FJo),e(br,fc),e(fc,CJo),e(fc,Gme),e(Gme,MJo),e(fc,EJo),e(fc,Ome),e(Ome,yJo),e(fc,wJo),e(br,AJo),e(br,Oy),e(Oy,LJo),e(Oy,Xme),e(Xme,BJo),e(Oy,xJo),e(br,kJo),e(br,mt),g(Xy,mt,null),e(mt,RJo),e(mt,Vme),e(Vme,SJo),e(mt,PJo),e(mt,mc),e(mc,$Jo),e(mc,zme),e(zme,IJo),e(mc,DJo),e(mc,Wme),e(Wme,NJo),e(mc,jJo),e(mt,qJo),e(mt,Qme),e(Qme,GJo),e(mt,OJo),g(Vy,mt,null),e(br,XJo),e(br,no),g(zy,no,null),e(no,VJo),e(no,Hme),e(Hme,zJo),e(no,WJo),e(no,pn),e(pn,QJo),e(pn,Ume),e(Ume,HJo),e(pn,UJo),e(pn,Jme),e(Jme,JJo),e(pn,YJo),e(pn,Yme),e(Yme,KJo),e(pn,ZJo),e(no,eYo),e(no,Kme),e(Kme,_6),e(_6,Zme),e(Zme,oYo),e(_6,rYo),e(_6,Rq),e(Rq,tYo),e(_6,aYo),e(no,nYo),e(no,u6),e(u6,sYo),e(u6,ege),e(ege,lYo),e(u6,iYo),e(u6,oge),e(oge,dYo),e(no,cYo),e(no,rge),e(rge,fYo),e(no,mYo),g(Wy,no,null),b(c,PRe,u),b(c,gc,u),e(gc,b6),e(b6,tge),g(Qy,tge,null),e(gc,gYo),e(gc,age),e(age,hYo),b(c,$Re,u),b(c,vr,u),g(Hy,vr,null),e(vr,pYo),e(vr,hc),e(hc,_Yo),e(hc,nge),e(nge,uYo),e(hc,bYo),e(hc,sge),e(sge,vYo),e(hc,TYo),e(vr,FYo),e(vr,Uy),e(Uy,CYo),e(Uy,lge),e(lge,MYo),e(Uy,EYo),e(vr,yYo),e(vr,gt),g(Jy,gt,null),e(gt,wYo),e(gt,ige),e(ige,AYo),e(gt,LYo),e(gt,pc),e(pc,BYo),e(pc,dge),e(dge,xYo),e(pc,kYo),e(pc,cge),e(cge,RYo),e(pc,SYo),e(gt,PYo),e(gt,fge),e(fge,$Yo),e(gt,IYo),g(Yy,gt,null),e(vr,DYo),e(vr,ho),g(Ky,ho,null),e(ho,NYo),e(ho,mge),e(mge,jYo),e(ho,qYo),e(ho,_n),e(_n,GYo),e(_n,gge),e(gge,OYo),e(_n,XYo),e(_n,hge),e(hge,VYo),e(_n,zYo),e(_n,pge),e(pge,WYo),e(_n,QYo),e(ho,HYo),e(ho,B),e(B,v6),e(v6,_ge),e(_ge,UYo),e(v6,JYo),e(v6,Sq),e(Sq,YYo),e(v6,KYo),e(B,ZYo),e(B,T6),e(T6,uge),e(uge,eKo),e(T6,oKo),e(T6,Pq),e(Pq,rKo),e(T6,tKo),e(B,aKo),e(B,F6),e(F6,bge),e(bge,nKo),e(F6,sKo),e(F6,$q),e($q,lKo),e(F6,iKo),e(B,dKo),e(B,C6),e(C6,vge),e(vge,cKo),e(C6,fKo),e(C6,Iq),e(Iq,mKo),e(C6,gKo),e(B,hKo),e(B,M6),e(M6,Tge),e(Tge,pKo),e(M6,_Ko),e(M6,Dq),e(Dq,uKo),e(M6,bKo),e(B,vKo),e(B,E6),e(E6,Fge),e(Fge,TKo),e(E6,FKo),e(E6,Nq),e(Nq,CKo),e(E6,MKo),e(B,EKo),e(B,y6),e(y6,Cge),e(Cge,yKo),e(y6,wKo),e(y6,jq),e(jq,AKo),e(y6,LKo),e(B,BKo),e(B,w6),e(w6,Mge),e(Mge,xKo),e(w6,kKo),e(w6,qq),e(qq,RKo),e(w6,SKo),e(B,PKo),e(B,A6),e(A6,Ege),e(Ege,$Ko),e(A6,IKo),e(A6,Gq),e(Gq,DKo),e(A6,NKo),e(B,jKo),e(B,L6),e(L6,yge),e(yge,qKo),e(L6,GKo),e(L6,Oq),e(Oq,OKo),e(L6,XKo),e(B,VKo),e(B,B6),e(B6,wge),e(wge,zKo),e(B6,WKo),e(B6,Xq),e(Xq,QKo),e(B6,HKo),e(B,UKo),e(B,x6),e(x6,Age),e(Age,JKo),e(x6,YKo),e(x6,Vq),e(Vq,KKo),e(x6,ZKo),e(B,eZo),e(B,k6),e(k6,Lge),e(Lge,oZo),e(k6,rZo),e(k6,zq),e(zq,tZo),e(k6,aZo),e(B,nZo),e(B,R6),e(R6,Bge),e(Bge,sZo),e(R6,lZo),e(R6,Wq),e(Wq,iZo),e(R6,dZo),e(B,cZo),e(B,S6),e(S6,xge),e(xge,fZo),e(S6,mZo),e(S6,Qq),e(Qq,gZo),e(S6,hZo),e(B,pZo),e(B,P6),e(P6,kge),e(kge,_Zo),e(P6,uZo),e(P6,Hq),e(Hq,bZo),e(P6,vZo),e(B,TZo),e(B,Gs),e(Gs,Rge),e(Rge,FZo),e(Gs,CZo),e(Gs,Uq),e(Uq,MZo),e(Gs,EZo),e(Gs,Jq),e(Jq,yZo),e(Gs,wZo),e(B,AZo),e(B,$6),e($6,Sge),e(Sge,LZo),e($6,BZo),e($6,Yq),e(Yq,xZo),e($6,kZo),e(B,RZo),e(B,I6),e(I6,Pge),e(Pge,SZo),e(I6,PZo),e(I6,Kq),e(Kq,$Zo),e(I6,IZo),e(B,DZo),e(B,D6),e(D6,$ge),e($ge,NZo),e(D6,jZo),e(D6,Zq),e(Zq,qZo),e(D6,GZo),e(B,OZo),e(B,N6),e(N6,Ige),e(Ige,XZo),e(N6,VZo),e(N6,eG),e(eG,zZo),e(N6,WZo),e(B,QZo),e(B,j6),e(j6,Dge),e(Dge,HZo),e(j6,UZo),e(j6,oG),e(oG,JZo),e(j6,YZo),e(B,KZo),e(B,q6),e(q6,Nge),e(Nge,ZZo),e(q6,eer),e(q6,rG),e(rG,oer),e(q6,rer),e(B,ter),e(B,G6),e(G6,jge),e(jge,aer),e(G6,ner),e(G6,tG),e(tG,ser),e(G6,ler),e(B,ier),e(B,O6),e(O6,qge),e(qge,der),e(O6,cer),e(O6,aG),e(aG,fer),e(O6,mer),e(B,ger),e(B,X6),e(X6,Gge),e(Gge,her),e(X6,per),e(X6,nG),e(nG,_er),e(X6,uer),e(B,ber),e(B,V6),e(V6,Oge),e(Oge,ver),e(V6,Ter),e(V6,sG),e(sG,Fer),e(V6,Cer),e(B,Mer),e(B,z6),e(z6,Xge),e(Xge,Eer),e(z6,yer),e(z6,lG),e(lG,wer),e(z6,Aer),e(B,Ler),e(B,W6),e(W6,Vge),e(Vge,Ber),e(W6,xer),e(W6,iG),e(iG,ker),e(W6,Rer),e(B,Ser),e(B,Q6),e(Q6,zge),e(zge,Per),e(Q6,$er),e(Q6,dG),e(dG,Ier),e(Q6,Der),e(B,Ner),e(B,H6),e(H6,Wge),e(Wge,jer),e(H6,qer),e(H6,cG),e(cG,Ger),e(H6,Oer),e(B,Xer),e(B,U6),e(U6,Qge),e(Qge,Ver),e(U6,zer),e(U6,fG),e(fG,Wer),e(U6,Qer),e(B,Her),e(B,J6),e(J6,Hge),e(Hge,Uer),e(J6,Jer),e(J6,mG),e(mG,Yer),e(J6,Ker),e(B,Zer),e(B,Y6),e(Y6,Uge),e(Uge,eor),e(Y6,oor),e(Y6,gG),e(gG,ror),e(Y6,tor),e(B,aor),e(B,K6),e(K6,Jge),e(Jge,nor),e(K6,sor),e(K6,hG),e(hG,lor),e(K6,ior),e(B,dor),e(B,Z6),e(Z6,Yge),e(Yge,cor),e(Z6,mor),e(Z6,pG),e(pG,gor),e(Z6,hor),e(B,por),e(B,e0),e(e0,Kge),e(Kge,_or),e(e0,uor),e(e0,_G),e(_G,bor),e(e0,vor),e(B,Tor),e(B,o0),e(o0,Zge),e(Zge,For),e(o0,Cor),e(o0,uG),e(uG,Mor),e(o0,Eor),e(B,yor),e(B,r0),e(r0,ehe),e(ehe,wor),e(r0,Aor),e(r0,bG),e(bG,Lor),e(r0,Bor),e(B,xor),e(B,t0),e(t0,ohe),e(ohe,kor),e(t0,Ror),e(t0,vG),e(vG,Sor),e(t0,Por),e(B,$or),e(B,a0),e(a0,rhe),e(rhe,Ior),e(a0,Dor),e(a0,TG),e(TG,Nor),e(a0,jor),e(B,qor),e(B,n0),e(n0,the),e(the,Gor),e(n0,Oor),e(n0,FG),e(FG,Xor),e(n0,Vor),e(B,zor),e(B,s0),e(s0,ahe),e(ahe,Wor),e(s0,Qor),e(s0,CG),e(CG,Hor),e(s0,Uor),e(ho,Jor),e(ho,nhe),e(nhe,Yor),e(ho,Kor),g(Zy,ho,null),b(c,IRe,u),b(c,_c,u),e(_c,l0),e(l0,she),g(ew,she,null),e(_c,Zor),e(_c,lhe),e(lhe,err),b(c,DRe,u),b(c,Tr,u),g(ow,Tr,null),e(Tr,orr),e(Tr,uc),e(uc,rrr),e(uc,ihe),e(ihe,trr),e(uc,arr),e(uc,dhe),e(dhe,nrr),e(uc,srr),e(Tr,lrr),e(Tr,rw),e(rw,irr),e(rw,che),e(che,drr),e(rw,crr),e(Tr,frr),e(Tr,ht),g(tw,ht,null),e(ht,mrr),e(ht,fhe),e(fhe,grr),e(ht,hrr),e(ht,bc),e(bc,prr),e(bc,mhe),e(mhe,_rr),e(bc,urr),e(bc,ghe),e(ghe,brr),e(bc,vrr),e(ht,Trr),e(ht,hhe),e(hhe,Frr),e(ht,Crr),g(aw,ht,null),e(Tr,Mrr),e(Tr,po),g(nw,po,null),e(po,Err),e(po,phe),e(phe,yrr),e(po,wrr),e(po,un),e(un,Arr),e(un,_he),e(_he,Lrr),e(un,Brr),e(un,uhe),e(uhe,xrr),e(un,krr),e(un,bhe),e(bhe,Rrr),e(un,Srr),e(po,Prr),e(po,H),e(H,i0),e(i0,vhe),e(vhe,$rr),e(i0,Irr),e(i0,MG),e(MG,Drr),e(i0,Nrr),e(H,jrr),e(H,d0),e(d0,The),e(The,qrr),e(d0,Grr),e(d0,EG),e(EG,Orr),e(d0,Xrr),e(H,Vrr),e(H,c0),e(c0,Fhe),e(Fhe,zrr),e(c0,Wrr),e(c0,yG),e(yG,Qrr),e(c0,Hrr),e(H,Urr),e(H,f0),e(f0,Che),e(Che,Jrr),e(f0,Yrr),e(f0,wG),e(wG,Krr),e(f0,Zrr),e(H,etr),e(H,m0),e(m0,Mhe),e(Mhe,otr),e(m0,rtr),e(m0,AG),e(AG,ttr),e(m0,atr),e(H,ntr),e(H,g0),e(g0,Ehe),e(Ehe,str),e(g0,ltr),e(g0,LG),e(LG,itr),e(g0,dtr),e(H,ctr),e(H,h0),e(h0,yhe),e(yhe,ftr),e(h0,mtr),e(h0,BG),e(BG,gtr),e(h0,htr),e(H,ptr),e(H,p0),e(p0,whe),e(whe,_tr),e(p0,utr),e(p0,xG),e(xG,btr),e(p0,vtr),e(H,Ttr),e(H,_0),e(_0,Ahe),e(Ahe,Ftr),e(_0,Ctr),e(_0,kG),e(kG,Mtr),e(_0,Etr),e(H,ytr),e(H,u0),e(u0,Lhe),e(Lhe,wtr),e(u0,Atr),e(u0,RG),e(RG,Ltr),e(u0,Btr),e(H,xtr),e(H,b0),e(b0,Bhe),e(Bhe,ktr),e(b0,Rtr),e(b0,SG),e(SG,Str),e(b0,Ptr),e(H,$tr),e(H,v0),e(v0,xhe),e(xhe,Itr),e(v0,Dtr),e(v0,PG),e(PG,Ntr),e(v0,jtr),e(H,qtr),e(H,T0),e(T0,khe),e(khe,Gtr),e(T0,Otr),e(T0,$G),e($G,Xtr),e(T0,Vtr),e(H,ztr),e(H,F0),e(F0,Rhe),e(Rhe,Wtr),e(F0,Qtr),e(F0,IG),e(IG,Htr),e(F0,Utr),e(H,Jtr),e(H,C0),e(C0,She),e(She,Ytr),e(C0,Ktr),e(C0,DG),e(DG,Ztr),e(C0,ear),e(H,oar),e(H,M0),e(M0,Phe),e(Phe,rar),e(M0,tar),e(M0,NG),e(NG,aar),e(M0,nar),e(H,sar),e(H,E0),e(E0,$he),e($he,lar),e(E0,iar),e(E0,jG),e(jG,dar),e(E0,car),e(H,far),e(H,y0),e(y0,Ihe),e(Ihe,mar),e(y0,gar),e(y0,qG),e(qG,har),e(y0,par),e(H,_ar),e(H,w0),e(w0,Dhe),e(Dhe,uar),e(w0,bar),e(w0,GG),e(GG,Tar),e(w0,Far),e(H,Car),e(H,A0),e(A0,Nhe),e(Nhe,Mar),e(A0,Ear),e(A0,OG),e(OG,yar),e(A0,war),e(H,Aar),e(H,L0),e(L0,jhe),e(jhe,Lar),e(L0,Bar),e(L0,XG),e(XG,xar),e(L0,kar),e(H,Rar),e(H,B0),e(B0,qhe),e(qhe,Sar),e(B0,Par),e(B0,VG),e(VG,$ar),e(B0,Iar),e(po,Dar),e(po,Ghe),e(Ghe,Nar),e(po,jar),g(sw,po,null),b(c,NRe,u),b(c,vc,u),e(vc,x0),e(x0,Ohe),g(lw,Ohe,null),e(vc,qar),e(vc,Xhe),e(Xhe,Gar),b(c,jRe,u),b(c,Fr,u),g(iw,Fr,null),e(Fr,Oar),e(Fr,Tc),e(Tc,Xar),e(Tc,Vhe),e(Vhe,Var),e(Tc,zar),e(Tc,zhe),e(zhe,War),e(Tc,Qar),e(Fr,Har),e(Fr,dw),e(dw,Uar),e(dw,Whe),e(Whe,Jar),e(dw,Yar),e(Fr,Kar),e(Fr,pt),g(cw,pt,null),e(pt,Zar),e(pt,Qhe),e(Qhe,enr),e(pt,onr),e(pt,Fc),e(Fc,rnr),e(Fc,Hhe),e(Hhe,tnr),e(Fc,anr),e(Fc,Uhe),e(Uhe,nnr),e(Fc,snr),e(pt,lnr),e(pt,Jhe),e(Jhe,inr),e(pt,dnr),g(fw,pt,null),e(Fr,cnr),e(Fr,_o),g(mw,_o,null),e(_o,fnr),e(_o,Yhe),e(Yhe,mnr),e(_o,gnr),e(_o,bn),e(bn,hnr),e(bn,Khe),e(Khe,pnr),e(bn,_nr),e(bn,Zhe),e(Zhe,unr),e(bn,bnr),e(bn,epe),e(epe,vnr),e(bn,Tnr),e(_o,Fnr),e(_o,ce),e(ce,k0),e(k0,ope),e(ope,Cnr),e(k0,Mnr),e(k0,zG),e(zG,Enr),e(k0,ynr),e(ce,wnr),e(ce,R0),e(R0,rpe),e(rpe,Anr),e(R0,Lnr),e(R0,WG),e(WG,Bnr),e(R0,xnr),e(ce,knr),e(ce,S0),e(S0,tpe),e(tpe,Rnr),e(S0,Snr),e(S0,QG),e(QG,Pnr),e(S0,$nr),e(ce,Inr),e(ce,P0),e(P0,ape),e(ape,Dnr),e(P0,Nnr),e(P0,HG),e(HG,jnr),e(P0,qnr),e(ce,Gnr),e(ce,$0),e($0,npe),e(npe,Onr),e($0,Xnr),e($0,UG),e(UG,Vnr),e($0,znr),e(ce,Wnr),e(ce,I0),e(I0,spe),e(spe,Qnr),e(I0,Hnr),e(I0,JG),e(JG,Unr),e(I0,Jnr),e(ce,Ynr),e(ce,D0),e(D0,lpe),e(lpe,Knr),e(D0,Znr),e(D0,YG),e(YG,esr),e(D0,osr),e(ce,rsr),e(ce,N0),e(N0,ipe),e(ipe,tsr),e(N0,asr),e(N0,KG),e(KG,nsr),e(N0,ssr),e(ce,lsr),e(ce,j0),e(j0,dpe),e(dpe,isr),e(j0,dsr),e(j0,ZG),e(ZG,csr),e(j0,fsr),e(ce,msr),e(ce,q0),e(q0,cpe),e(cpe,gsr),e(q0,hsr),e(q0,eO),e(eO,psr),e(q0,_sr),e(ce,usr),e(ce,G0),e(G0,fpe),e(fpe,bsr),e(G0,vsr),e(G0,oO),e(oO,Tsr),e(G0,Fsr),e(ce,Csr),e(ce,O0),e(O0,mpe),e(mpe,Msr),e(O0,Esr),e(O0,rO),e(rO,ysr),e(O0,wsr),e(_o,Asr),e(_o,gpe),e(gpe,Lsr),e(_o,Bsr),g(gw,_o,null),b(c,qRe,u),b(c,Cc,u),e(Cc,X0),e(X0,hpe),g(hw,hpe,null),e(Cc,xsr),e(Cc,ppe),e(ppe,ksr),b(c,GRe,u),b(c,Cr,u),g(pw,Cr,null),e(Cr,Rsr),e(Cr,Mc),e(Mc,Ssr),e(Mc,_pe),e(_pe,Psr),e(Mc,$sr),e(Mc,upe),e(upe,Isr),e(Mc,Dsr),e(Cr,Nsr),e(Cr,_w),e(_w,jsr),e(_w,bpe),e(bpe,qsr),e(_w,Gsr),e(Cr,Osr),e(Cr,_t),g(uw,_t,null),e(_t,Xsr),e(_t,vpe),e(vpe,Vsr),e(_t,zsr),e(_t,Ec),e(Ec,Wsr),e(Ec,Tpe),e(Tpe,Qsr),e(Ec,Hsr),e(Ec,Fpe),e(Fpe,Usr),e(Ec,Jsr),e(_t,Ysr),e(_t,Cpe),e(Cpe,Ksr),e(_t,Zsr),g(bw,_t,null),e(Cr,elr),e(Cr,uo),g(vw,uo,null),e(uo,olr),e(uo,Mpe),e(Mpe,rlr),e(uo,tlr),e(uo,vn),e(vn,alr),e(vn,Epe),e(Epe,nlr),e(vn,slr),e(vn,ype),e(ype,llr),e(vn,ilr),e(vn,wpe),e(wpe,dlr),e(vn,clr),e(uo,flr),e(uo,Tw),e(Tw,V0),e(V0,Ape),e(Ape,mlr),e(V0,glr),e(V0,tO),e(tO,hlr),e(V0,plr),e(Tw,_lr),e(Tw,z0),e(z0,Lpe),e(Lpe,ulr),e(z0,blr),e(z0,aO),e(aO,vlr),e(z0,Tlr),e(uo,Flr),e(uo,Bpe),e(Bpe,Clr),e(uo,Mlr),g(Fw,uo,null),b(c,ORe,u),b(c,yc,u),e(yc,W0),e(W0,xpe),g(Cw,xpe,null),e(yc,Elr),e(yc,kpe),e(kpe,ylr),b(c,XRe,u),b(c,Mr,u),g(Mw,Mr,null),e(Mr,wlr),e(Mr,wc),e(wc,Alr),e(wc,Rpe),e(Rpe,Llr),e(wc,Blr),e(wc,Spe),e(Spe,xlr),e(wc,klr),e(Mr,Rlr),e(Mr,Ew),e(Ew,Slr),e(Ew,Ppe),e(Ppe,Plr),e(Ew,$lr),e(Mr,Ilr),e(Mr,ut),g(yw,ut,null),e(ut,Dlr),e(ut,$pe),e($pe,Nlr),e(ut,jlr),e(ut,Ac),e(Ac,qlr),e(Ac,Ipe),e(Ipe,Glr),e(Ac,Olr),e(Ac,Dpe),e(Dpe,Xlr),e(Ac,Vlr),e(ut,zlr),e(ut,Npe),e(Npe,Wlr),e(ut,Qlr),g(ww,ut,null),e(Mr,Hlr),e(Mr,bo),g(Aw,bo,null),e(bo,Ulr),e(bo,jpe),e(jpe,Jlr),e(bo,Ylr),e(bo,Tn),e(Tn,Klr),e(Tn,qpe),e(qpe,Zlr),e(Tn,eir),e(Tn,Gpe),e(Gpe,oir),e(Tn,rir),e(Tn,Ope),e(Ope,tir),e(Tn,air),e(bo,nir),e(bo,J),e(J,Q0),e(Q0,Xpe),e(Xpe,sir),e(Q0,lir),e(Q0,nO),e(nO,iir),e(Q0,dir),e(J,cir),e(J,H0),e(H0,Vpe),e(Vpe,fir),e(H0,mir),e(H0,sO),e(sO,gir),e(H0,hir),e(J,pir),e(J,U0),e(U0,zpe),e(zpe,_ir),e(U0,uir),e(U0,lO),e(lO,bir),e(U0,vir),e(J,Tir),e(J,J0),e(J0,Wpe),e(Wpe,Fir),e(J0,Cir),e(J0,iO),e(iO,Mir),e(J0,Eir),e(J,yir),e(J,Y0),e(Y0,Qpe),e(Qpe,wir),e(Y0,Air),e(Y0,dO),e(dO,Lir),e(Y0,Bir),e(J,xir),e(J,K0),e(K0,Hpe),e(Hpe,kir),e(K0,Rir),e(K0,cO),e(cO,Sir),e(K0,Pir),e(J,$ir),e(J,Z0),e(Z0,Upe),e(Upe,Iir),e(Z0,Dir),e(Z0,fO),e(fO,Nir),e(Z0,jir),e(J,qir),e(J,eT),e(eT,Jpe),e(Jpe,Gir),e(eT,Oir),e(eT,mO),e(mO,Xir),e(eT,Vir),e(J,zir),e(J,oT),e(oT,Ype),e(Ype,Wir),e(oT,Qir),e(oT,gO),e(gO,Hir),e(oT,Uir),e(J,Jir),e(J,rT),e(rT,Kpe),e(Kpe,Yir),e(rT,Kir),e(rT,hO),e(hO,Zir),e(rT,edr),e(J,odr),e(J,tT),e(tT,Zpe),e(Zpe,rdr),e(tT,tdr),e(tT,pO),e(pO,adr),e(tT,ndr),e(J,sdr),e(J,aT),e(aT,e_e),e(e_e,ldr),e(aT,idr),e(aT,_O),e(_O,ddr),e(aT,cdr),e(J,fdr),e(J,nT),e(nT,o_e),e(o_e,mdr),e(nT,gdr),e(nT,uO),e(uO,hdr),e(nT,pdr),e(J,_dr),e(J,sT),e(sT,r_e),e(r_e,udr),e(sT,bdr),e(sT,bO),e(bO,vdr),e(sT,Tdr),e(J,Fdr),e(J,lT),e(lT,t_e),e(t_e,Cdr),e(lT,Mdr),e(lT,vO),e(vO,Edr),e(lT,ydr),e(J,wdr),e(J,iT),e(iT,a_e),e(a_e,Adr),e(iT,Ldr),e(iT,TO),e(TO,Bdr),e(iT,xdr),e(J,kdr),e(J,dT),e(dT,n_e),e(n_e,Rdr),e(dT,Sdr),e(dT,FO),e(FO,Pdr),e(dT,$dr),e(J,Idr),e(J,cT),e(cT,s_e),e(s_e,Ddr),e(cT,Ndr),e(cT,CO),e(CO,jdr),e(cT,qdr),e(J,Gdr),e(J,fT),e(fT,l_e),e(l_e,Odr),e(fT,Xdr),e(fT,MO),e(MO,Vdr),e(fT,zdr),e(J,Wdr),e(J,mT),e(mT,i_e),e(i_e,Qdr),e(mT,Hdr),e(mT,EO),e(EO,Udr),e(mT,Jdr),e(bo,Ydr),e(bo,d_e),e(d_e,Kdr),e(bo,Zdr),g(Lw,bo,null),b(c,VRe,u),b(c,Lc,u),e(Lc,gT),e(gT,c_e),g(Bw,c_e,null),e(Lc,ecr),e(Lc,f_e),e(f_e,ocr),b(c,zRe,u),b(c,Er,u),g(xw,Er,null),e(Er,rcr),e(Er,Bc),e(Bc,tcr),e(Bc,m_e),e(m_e,acr),e(Bc,ncr),e(Bc,g_e),e(g_e,scr),e(Bc,lcr),e(Er,icr),e(Er,kw),e(kw,dcr),e(kw,h_e),e(h_e,ccr),e(kw,fcr),e(Er,mcr),e(Er,bt),g(Rw,bt,null),e(bt,gcr),e(bt,p_e),e(p_e,hcr),e(bt,pcr),e(bt,xc),e(xc,_cr),e(xc,__e),e(__e,ucr),e(xc,bcr),e(xc,u_e),e(u_e,vcr),e(xc,Tcr),e(bt,Fcr),e(bt,b_e),e(b_e,Ccr),e(bt,Mcr),g(Sw,bt,null),e(Er,Ecr),e(Er,vo),g(Pw,vo,null),e(vo,ycr),e(vo,v_e),e(v_e,wcr),e(vo,Acr),e(vo,Fn),e(Fn,Lcr),e(Fn,T_e),e(T_e,Bcr),e(Fn,xcr),e(Fn,F_e),e(F_e,kcr),e(Fn,Rcr),e(Fn,C_e),e(C_e,Scr),e(Fn,Pcr),e(vo,$cr),e(vo,ue),e(ue,hT),e(hT,M_e),e(M_e,Icr),e(hT,Dcr),e(hT,yO),e(yO,Ncr),e(hT,jcr),e(ue,qcr),e(ue,pT),e(pT,E_e),e(E_e,Gcr),e(pT,Ocr),e(pT,wO),e(wO,Xcr),e(pT,Vcr),e(ue,zcr),e(ue,_T),e(_T,y_e),e(y_e,Wcr),e(_T,Qcr),e(_T,AO),e(AO,Hcr),e(_T,Ucr),e(ue,Jcr),e(ue,uT),e(uT,w_e),e(w_e,Ycr),e(uT,Kcr),e(uT,LO),e(LO,Zcr),e(uT,efr),e(ue,ofr),e(ue,bT),e(bT,A_e),e(A_e,rfr),e(bT,tfr),e(bT,BO),e(BO,afr),e(bT,nfr),e(ue,sfr),e(ue,vT),e(vT,L_e),e(L_e,lfr),e(vT,ifr),e(vT,xO),e(xO,dfr),e(vT,cfr),e(ue,ffr),e(ue,TT),e(TT,B_e),e(B_e,mfr),e(TT,gfr),e(TT,kO),e(kO,hfr),e(TT,pfr),e(ue,_fr),e(ue,FT),e(FT,x_e),e(x_e,ufr),e(FT,bfr),e(FT,RO),e(RO,vfr),e(FT,Tfr),e(ue,Ffr),e(ue,CT),e(CT,k_e),e(k_e,Cfr),e(CT,Mfr),e(CT,SO),e(SO,Efr),e(CT,yfr),e(ue,wfr),e(ue,MT),e(MT,R_e),e(R_e,Afr),e(MT,Lfr),e(MT,PO),e(PO,Bfr),e(MT,xfr),e(vo,kfr),e(vo,S_e),e(S_e,Rfr),e(vo,Sfr),g($w,vo,null),b(c,WRe,u),b(c,kc,u),e(kc,ET),e(ET,P_e),g(Iw,P_e,null),e(kc,Pfr),e(kc,$_e),e($_e,$fr),b(c,QRe,u),b(c,yr,u),g(Dw,yr,null),e(yr,Ifr),e(yr,Rc),e(Rc,Dfr),e(Rc,I_e),e(I_e,Nfr),e(Rc,jfr),e(Rc,D_e),e(D_e,qfr),e(Rc,Gfr),e(yr,Ofr),e(yr,Nw),e(Nw,Xfr),e(Nw,N_e),e(N_e,Vfr),e(Nw,zfr),e(yr,Wfr),e(yr,vt),g(jw,vt,null),e(vt,Qfr),e(vt,j_e),e(j_e,Hfr),e(vt,Ufr),e(vt,Sc),e(Sc,Jfr),e(Sc,q_e),e(q_e,Yfr),e(Sc,Kfr),e(Sc,G_e),e(G_e,Zfr),e(Sc,emr),e(vt,omr),e(vt,O_e),e(O_e,rmr),e(vt,tmr),g(qw,vt,null),e(yr,amr),e(yr,To),g(Gw,To,null),e(To,nmr),e(To,X_e),e(X_e,smr),e(To,lmr),e(To,Cn),e(Cn,imr),e(Cn,V_e),e(V_e,dmr),e(Cn,cmr),e(Cn,z_e),e(z_e,fmr),e(Cn,mmr),e(Cn,W_e),e(W_e,gmr),e(Cn,hmr),e(To,pmr),e(To,X),e(X,yT),e(yT,Q_e),e(Q_e,_mr),e(yT,umr),e(yT,$O),e($O,bmr),e(yT,vmr),e(X,Tmr),e(X,wT),e(wT,H_e),e(H_e,Fmr),e(wT,Cmr),e(wT,IO),e(IO,Mmr),e(wT,Emr),e(X,ymr),e(X,AT),e(AT,U_e),e(U_e,wmr),e(AT,Amr),e(AT,DO),e(DO,Lmr),e(AT,Bmr),e(X,xmr),e(X,LT),e(LT,J_e),e(J_e,kmr),e(LT,Rmr),e(LT,NO),e(NO,Smr),e(LT,Pmr),e(X,$mr),e(X,BT),e(BT,Y_e),e(Y_e,Imr),e(BT,Dmr),e(BT,jO),e(jO,Nmr),e(BT,jmr),e(X,qmr),e(X,xT),e(xT,K_e),e(K_e,Gmr),e(xT,Omr),e(xT,qO),e(qO,Xmr),e(xT,Vmr),e(X,zmr),e(X,kT),e(kT,Z_e),e(Z_e,Wmr),e(kT,Qmr),e(kT,GO),e(GO,Hmr),e(kT,Umr),e(X,Jmr),e(X,RT),e(RT,eue),e(eue,Ymr),e(RT,Kmr),e(RT,OO),e(OO,Zmr),e(RT,egr),e(X,ogr),e(X,ST),e(ST,oue),e(oue,rgr),e(ST,tgr),e(ST,XO),e(XO,agr),e(ST,ngr),e(X,sgr),e(X,PT),e(PT,rue),e(rue,lgr),e(PT,igr),e(PT,VO),e(VO,dgr),e(PT,cgr),e(X,fgr),e(X,$T),e($T,tue),e(tue,mgr),e($T,ggr),e($T,zO),e(zO,hgr),e($T,pgr),e(X,_gr),e(X,IT),e(IT,aue),e(aue,ugr),e(IT,bgr),e(IT,WO),e(WO,vgr),e(IT,Tgr),e(X,Fgr),e(X,DT),e(DT,nue),e(nue,Cgr),e(DT,Mgr),e(DT,QO),e(QO,Egr),e(DT,ygr),e(X,wgr),e(X,NT),e(NT,sue),e(sue,Agr),e(NT,Lgr),e(NT,HO),e(HO,Bgr),e(NT,xgr),e(X,kgr),e(X,jT),e(jT,lue),e(lue,Rgr),e(jT,Sgr),e(jT,UO),e(UO,Pgr),e(jT,$gr),e(X,Igr),e(X,qT),e(qT,iue),e(iue,Dgr),e(qT,Ngr),e(qT,JO),e(JO,jgr),e(qT,qgr),e(X,Ggr),e(X,GT),e(GT,due),e(due,Ogr),e(GT,Xgr),e(GT,YO),e(YO,Vgr),e(GT,zgr),e(X,Wgr),e(X,OT),e(OT,cue),e(cue,Qgr),e(OT,Hgr),e(OT,KO),e(KO,Ugr),e(OT,Jgr),e(X,Ygr),e(X,XT),e(XT,fue),e(fue,Kgr),e(XT,Zgr),e(XT,ZO),e(ZO,ehr),e(XT,ohr),e(X,rhr),e(X,VT),e(VT,mue),e(mue,thr),e(VT,ahr),e(VT,eX),e(eX,nhr),e(VT,shr),e(X,lhr),e(X,zT),e(zT,gue),e(gue,ihr),e(zT,dhr),e(zT,oX),e(oX,chr),e(zT,fhr),e(X,mhr),e(X,WT),e(WT,hue),e(hue,ghr),e(WT,hhr),e(WT,rX),e(rX,phr),e(WT,_hr),e(X,uhr),e(X,QT),e(QT,pue),e(pue,bhr),e(QT,vhr),e(QT,tX),e(tX,Thr),e(QT,Fhr),e(X,Chr),e(X,HT),e(HT,_ue),e(_ue,Mhr),e(HT,Ehr),e(HT,aX),e(aX,yhr),e(HT,whr),e(X,Ahr),e(X,UT),e(UT,uue),e(uue,Lhr),e(UT,Bhr),e(UT,nX),e(nX,xhr),e(UT,khr),e(X,Rhr),e(X,JT),e(JT,bue),e(bue,Shr),e(JT,Phr),e(JT,sX),e(sX,$hr),e(JT,Ihr),e(To,Dhr),e(To,vue),e(vue,Nhr),e(To,jhr),g(Ow,To,null),b(c,HRe,u),b(c,Pc,u),e(Pc,YT),e(YT,Tue),g(Xw,Tue,null),e(Pc,qhr),e(Pc,Fue),e(Fue,Ghr),b(c,URe,u),b(c,wr,u),g(Vw,wr,null),e(wr,Ohr),e(wr,$c),e($c,Xhr),e($c,Cue),e(Cue,Vhr),e($c,zhr),e($c,Mue),e(Mue,Whr),e($c,Qhr),e(wr,Hhr),e(wr,zw),e(zw,Uhr),e(zw,Eue),e(Eue,Jhr),e(zw,Yhr),e(wr,Khr),e(wr,Tt),g(Ww,Tt,null),e(Tt,Zhr),e(Tt,yue),e(yue,epr),e(Tt,opr),e(Tt,Ic),e(Ic,rpr),e(Ic,wue),e(wue,tpr),e(Ic,apr),e(Ic,Aue),e(Aue,npr),e(Ic,spr),e(Tt,lpr),e(Tt,Lue),e(Lue,ipr),e(Tt,dpr),g(Qw,Tt,null),e(wr,cpr),e(wr,Fo),g(Hw,Fo,null),e(Fo,fpr),e(Fo,Bue),e(Bue,mpr),e(Fo,gpr),e(Fo,Mn),e(Mn,hpr),e(Mn,xue),e(xue,ppr),e(Mn,_pr),e(Mn,kue),e(kue,upr),e(Mn,bpr),e(Mn,Rue),e(Rue,vpr),e(Mn,Tpr),e(Fo,Fpr),e(Fo,ae),e(ae,KT),e(KT,Sue),e(Sue,Cpr),e(KT,Mpr),e(KT,lX),e(lX,Epr),e(KT,ypr),e(ae,wpr),e(ae,ZT),e(ZT,Pue),e(Pue,Apr),e(ZT,Lpr),e(ZT,iX),e(iX,Bpr),e(ZT,xpr),e(ae,kpr),e(ae,e8),e(e8,$ue),e($ue,Rpr),e(e8,Spr),e(e8,dX),e(dX,Ppr),e(e8,$pr),e(ae,Ipr),e(ae,o8),e(o8,Iue),e(Iue,Dpr),e(o8,Npr),e(o8,cX),e(cX,jpr),e(o8,qpr),e(ae,Gpr),e(ae,r8),e(r8,Due),e(Due,Opr),e(r8,Xpr),e(r8,fX),e(fX,Vpr),e(r8,zpr),e(ae,Wpr),e(ae,t8),e(t8,Nue),e(Nue,Qpr),e(t8,Hpr),e(t8,mX),e(mX,Upr),e(t8,Jpr),e(ae,Ypr),e(ae,a8),e(a8,jue),e(jue,Kpr),e(a8,Zpr),e(a8,gX),e(gX,e_r),e(a8,o_r),e(ae,r_r),e(ae,n8),e(n8,que),e(que,t_r),e(n8,a_r),e(n8,hX),e(hX,n_r),e(n8,s_r),e(ae,l_r),e(ae,s8),e(s8,Gue),e(Gue,i_r),e(s8,d_r),e(s8,pX),e(pX,c_r),e(s8,f_r),e(ae,m_r),e(ae,l8),e(l8,Oue),e(Oue,g_r),e(l8,h_r),e(l8,_X),e(_X,p_r),e(l8,__r),e(ae,u_r),e(ae,i8),e(i8,Xue),e(Xue,b_r),e(i8,v_r),e(i8,uX),e(uX,T_r),e(i8,F_r),e(ae,C_r),e(ae,d8),e(d8,Vue),e(Vue,M_r),e(d8,E_r),e(d8,bX),e(bX,y_r),e(d8,w_r),e(ae,A_r),e(ae,c8),e(c8,zue),e(zue,L_r),e(c8,B_r),e(c8,vX),e(vX,x_r),e(c8,k_r),e(ae,R_r),e(ae,f8),e(f8,Wue),e(Wue,S_r),e(f8,P_r),e(f8,TX),e(TX,$_r),e(f8,I_r),e(ae,D_r),e(ae,m8),e(m8,Que),e(Que,N_r),e(m8,j_r),e(m8,FX),e(FX,q_r),e(m8,G_r),e(ae,O_r),e(ae,g8),e(g8,Hue),e(Hue,X_r),e(g8,V_r),e(g8,CX),e(CX,z_r),e(g8,W_r),e(ae,Q_r),e(ae,h8),e(h8,Uue),e(Uue,H_r),e(h8,U_r),e(h8,MX),e(MX,J_r),e(h8,Y_r),e(Fo,K_r),e(Fo,Jue),e(Jue,Z_r),e(Fo,eur),g(Uw,Fo,null),b(c,JRe,u),b(c,Dc,u),e(Dc,p8),e(p8,Yue),g(Jw,Yue,null),e(Dc,our),e(Dc,Kue),e(Kue,rur),b(c,YRe,u),b(c,Ar,u),g(Yw,Ar,null),e(Ar,tur),e(Ar,Nc),e(Nc,aur),e(Nc,Zue),e(Zue,nur),e(Nc,sur),e(Nc,e1e),e(e1e,lur),e(Nc,iur),e(Ar,dur),e(Ar,Kw),e(Kw,cur),e(Kw,o1e),e(o1e,fur),e(Kw,mur),e(Ar,gur),e(Ar,Ft),g(Zw,Ft,null),e(Ft,hur),e(Ft,r1e),e(r1e,pur),e(Ft,_ur),e(Ft,jc),e(jc,uur),e(jc,t1e),e(t1e,bur),e(jc,vur),e(jc,a1e),e(a1e,Tur),e(jc,Fur),e(Ft,Cur),e(Ft,n1e),e(n1e,Mur),e(Ft,Eur),g(eA,Ft,null),e(Ar,yur),e(Ar,Co),g(oA,Co,null),e(Co,wur),e(Co,s1e),e(s1e,Aur),e(Co,Lur),e(Co,En),e(En,Bur),e(En,l1e),e(l1e,xur),e(En,kur),e(En,i1e),e(i1e,Rur),e(En,Sur),e(En,d1e),e(d1e,Pur),e(En,$ur),e(Co,Iur),e(Co,c1e),e(c1e,_8),e(_8,f1e),e(f1e,Dur),e(_8,Nur),e(_8,EX),e(EX,jur),e(_8,qur),e(Co,Gur),e(Co,m1e),e(m1e,Our),e(Co,Xur),g(rA,Co,null),b(c,KRe,u),b(c,qc,u),e(qc,u8),e(u8,g1e),g(tA,g1e,null),e(qc,Vur),e(qc,h1e),e(h1e,zur),b(c,ZRe,u),b(c,Lr,u),g(aA,Lr,null),e(Lr,Wur),e(Lr,Gc),e(Gc,Qur),e(Gc,p1e),e(p1e,Hur),e(Gc,Uur),e(Gc,_1e),e(_1e,Jur),e(Gc,Yur),e(Lr,Kur),e(Lr,nA),e(nA,Zur),e(nA,u1e),e(u1e,e1r),e(nA,o1r),e(Lr,r1r),e(Lr,Ct),g(sA,Ct,null),e(Ct,t1r),e(Ct,b1e),e(b1e,a1r),e(Ct,n1r),e(Ct,Oc),e(Oc,s1r),e(Oc,v1e),e(v1e,l1r),e(Oc,i1r),e(Oc,T1e),e(T1e,d1r),e(Oc,c1r),e(Ct,f1r),e(Ct,F1e),e(F1e,m1r),e(Ct,g1r),g(lA,Ct,null),e(Lr,h1r),e(Lr,Mo),g(iA,Mo,null),e(Mo,p1r),e(Mo,C1e),e(C1e,_1r),e(Mo,u1r),e(Mo,yn),e(yn,b1r),e(yn,M1e),e(M1e,v1r),e(yn,T1r),e(yn,E1e),e(E1e,F1r),e(yn,C1r),e(yn,y1e),e(y1e,M1r),e(yn,E1r),e(Mo,y1r),e(Mo,Y),e(Y,b8),e(b8,w1e),e(w1e,w1r),e(b8,A1r),e(b8,yX),e(yX,L1r),e(b8,B1r),e(Y,x1r),e(Y,v8),e(v8,A1e),e(A1e,k1r),e(v8,R1r),e(v8,wX),e(wX,S1r),e(v8,P1r),e(Y,$1r),e(Y,T8),e(T8,L1e),e(L1e,I1r),e(T8,D1r),e(T8,AX),e(AX,N1r),e(T8,j1r),e(Y,q1r),e(Y,F8),e(F8,B1e),e(B1e,G1r),e(F8,O1r),e(F8,LX),e(LX,X1r),e(F8,V1r),e(Y,z1r),e(Y,C8),e(C8,x1e),e(x1e,W1r),e(C8,Q1r),e(C8,BX),e(BX,H1r),e(C8,U1r),e(Y,J1r),e(Y,M8),e(M8,k1e),e(k1e,Y1r),e(M8,K1r),e(M8,xX),e(xX,Z1r),e(M8,ebr),e(Y,obr),e(Y,E8),e(E8,R1e),e(R1e,rbr),e(E8,tbr),e(E8,kX),e(kX,abr),e(E8,nbr),e(Y,sbr),e(Y,y8),e(y8,S1e),e(S1e,lbr),e(y8,ibr),e(y8,RX),e(RX,dbr),e(y8,cbr),e(Y,fbr),e(Y,w8),e(w8,P1e),e(P1e,mbr),e(w8,gbr),e(w8,SX),e(SX,hbr),e(w8,pbr),e(Y,_br),e(Y,A8),e(A8,$1e),e($1e,ubr),e(A8,bbr),e(A8,PX),e(PX,vbr),e(A8,Tbr),e(Y,Fbr),e(Y,L8),e(L8,I1e),e(I1e,Cbr),e(L8,Mbr),e(L8,$X),e($X,Ebr),e(L8,ybr),e(Y,wbr),e(Y,B8),e(B8,D1e),e(D1e,Abr),e(B8,Lbr),e(B8,IX),e(IX,Bbr),e(B8,xbr),e(Y,kbr),e(Y,x8),e(x8,N1e),e(N1e,Rbr),e(x8,Sbr),e(x8,DX),e(DX,Pbr),e(x8,$br),e(Y,Ibr),e(Y,k8),e(k8,j1e),e(j1e,Dbr),e(k8,Nbr),e(k8,NX),e(NX,jbr),e(k8,qbr),e(Y,Gbr),e(Y,R8),e(R8,q1e),e(q1e,Obr),e(R8,Xbr),e(R8,jX),e(jX,Vbr),e(R8,zbr),e(Y,Wbr),e(Y,S8),e(S8,G1e),e(G1e,Qbr),e(S8,Hbr),e(S8,qX),e(qX,Ubr),e(S8,Jbr),e(Y,Ybr),e(Y,P8),e(P8,O1e),e(O1e,Kbr),e(P8,Zbr),e(P8,GX),e(GX,e3r),e(P8,o3r),e(Y,r3r),e(Y,$8),e($8,X1e),e(X1e,t3r),e($8,a3r),e($8,OX),e(OX,n3r),e($8,s3r),e(Y,l3r),e(Y,I8),e(I8,V1e),e(V1e,i3r),e(I8,d3r),e(I8,XX),e(XX,c3r),e(I8,f3r),e(Y,m3r),e(Y,D8),e(D8,z1e),e(z1e,g3r),e(D8,h3r),e(D8,VX),e(VX,p3r),e(D8,_3r),e(Mo,u3r),e(Mo,W1e),e(W1e,b3r),e(Mo,v3r),g(dA,Mo,null),b(c,eSe,u),b(c,Xc,u),e(Xc,N8),e(N8,Q1e),g(cA,Q1e,null),e(Xc,T3r),e(Xc,H1e),e(H1e,F3r),b(c,oSe,u),b(c,Br,u),g(fA,Br,null),e(Br,C3r),e(Br,Vc),e(Vc,M3r),e(Vc,U1e),e(U1e,E3r),e(Vc,y3r),e(Vc,J1e),e(J1e,w3r),e(Vc,A3r),e(Br,L3r),e(Br,mA),e(mA,B3r),e(mA,Y1e),e(Y1e,x3r),e(mA,k3r),e(Br,R3r),e(Br,Mt),g(gA,Mt,null),e(Mt,S3r),e(Mt,K1e),e(K1e,P3r),e(Mt,$3r),e(Mt,zc),e(zc,I3r),e(zc,Z1e),e(Z1e,D3r),e(zc,N3r),e(zc,ebe),e(ebe,j3r),e(zc,q3r),e(Mt,G3r),e(Mt,obe),e(obe,O3r),e(Mt,X3r),g(hA,Mt,null),e(Br,V3r),e(Br,Eo),g(pA,Eo,null),e(Eo,z3r),e(Eo,rbe),e(rbe,W3r),e(Eo,Q3r),e(Eo,wn),e(wn,H3r),e(wn,tbe),e(tbe,U3r),e(wn,J3r),e(wn,abe),e(abe,Y3r),e(wn,K3r),e(wn,nbe),e(nbe,Z3r),e(wn,e2r),e(Eo,o2r),e(Eo,K),e(K,j8),e(j8,sbe),e(sbe,r2r),e(j8,t2r),e(j8,zX),e(zX,a2r),e(j8,n2r),e(K,s2r),e(K,q8),e(q8,lbe),e(lbe,l2r),e(q8,i2r),e(q8,WX),e(WX,d2r),e(q8,c2r),e(K,f2r),e(K,G8),e(G8,ibe),e(ibe,m2r),e(G8,g2r),e(G8,QX),e(QX,h2r),e(G8,p2r),e(K,_2r),e(K,O8),e(O8,dbe),e(dbe,u2r),e(O8,b2r),e(O8,HX),e(HX,v2r),e(O8,T2r),e(K,F2r),e(K,X8),e(X8,cbe),e(cbe,C2r),e(X8,M2r),e(X8,UX),e(UX,E2r),e(X8,y2r),e(K,w2r),e(K,V8),e(V8,fbe),e(fbe,A2r),e(V8,L2r),e(V8,JX),e(JX,B2r),e(V8,x2r),e(K,k2r),e(K,z8),e(z8,mbe),e(mbe,R2r),e(z8,S2r),e(z8,YX),e(YX,P2r),e(z8,$2r),e(K,I2r),e(K,W8),e(W8,gbe),e(gbe,D2r),e(W8,N2r),e(W8,KX),e(KX,j2r),e(W8,q2r),e(K,G2r),e(K,Q8),e(Q8,hbe),e(hbe,O2r),e(Q8,X2r),e(Q8,ZX),e(ZX,V2r),e(Q8,z2r),e(K,W2r),e(K,H8),e(H8,pbe),e(pbe,Q2r),e(H8,H2r),e(H8,eV),e(eV,U2r),e(H8,J2r),e(K,Y2r),e(K,U8),e(U8,_be),e(_be,K2r),e(U8,Z2r),e(U8,oV),e(oV,evr),e(U8,ovr),e(K,rvr),e(K,J8),e(J8,ube),e(ube,tvr),e(J8,avr),e(J8,rV),e(rV,nvr),e(J8,svr),e(K,lvr),e(K,Y8),e(Y8,bbe),e(bbe,ivr),e(Y8,dvr),e(Y8,tV),e(tV,cvr),e(Y8,fvr),e(K,mvr),e(K,K8),e(K8,vbe),e(vbe,gvr),e(K8,hvr),e(K8,aV),e(aV,pvr),e(K8,_vr),e(K,uvr),e(K,Z8),e(Z8,Tbe),e(Tbe,bvr),e(Z8,vvr),e(Z8,nV),e(nV,Tvr),e(Z8,Fvr),e(K,Cvr),e(K,eF),e(eF,Fbe),e(Fbe,Mvr),e(eF,Evr),e(eF,sV),e(sV,yvr),e(eF,wvr),e(K,Avr),e(K,oF),e(oF,Cbe),e(Cbe,Lvr),e(oF,Bvr),e(oF,lV),e(lV,xvr),e(oF,kvr),e(K,Rvr),e(K,rF),e(rF,Mbe),e(Mbe,Svr),e(rF,Pvr),e(rF,iV),e(iV,$vr),e(rF,Ivr),e(K,Dvr),e(K,tF),e(tF,Ebe),e(Ebe,Nvr),e(tF,jvr),e(tF,dV),e(dV,qvr),e(tF,Gvr),e(K,Ovr),e(K,aF),e(aF,ybe),e(ybe,Xvr),e(aF,Vvr),e(aF,cV),e(cV,zvr),e(aF,Wvr),e(Eo,Qvr),e(Eo,wbe),e(wbe,Hvr),e(Eo,Uvr),g(_A,Eo,null),b(c,rSe,u),b(c,Wc,u),e(Wc,nF),e(nF,Abe),g(uA,Abe,null),e(Wc,Jvr),e(Wc,Lbe),e(Lbe,Yvr),b(c,tSe,u),b(c,xr,u),g(bA,xr,null),e(xr,Kvr),e(xr,Qc),e(Qc,Zvr),e(Qc,Bbe),e(Bbe,e6r),e(Qc,o6r),e(Qc,xbe),e(xbe,r6r),e(Qc,t6r),e(xr,a6r),e(xr,vA),e(vA,n6r),e(vA,kbe),e(kbe,s6r),e(vA,l6r),e(xr,i6r),e(xr,Et),g(TA,Et,null),e(Et,d6r),e(Et,Rbe),e(Rbe,c6r),e(Et,f6r),e(Et,Hc),e(Hc,m6r),e(Hc,Sbe),e(Sbe,g6r),e(Hc,h6r),e(Hc,Pbe),e(Pbe,p6r),e(Hc,_6r),e(Et,u6r),e(Et,$be),e($be,b6r),e(Et,v6r),g(FA,Et,null),e(xr,T6r),e(xr,yo),g(CA,yo,null),e(yo,F6r),e(yo,Ibe),e(Ibe,C6r),e(yo,M6r),e(yo,An),e(An,E6r),e(An,Dbe),e(Dbe,y6r),e(An,w6r),e(An,Nbe),e(Nbe,A6r),e(An,L6r),e(An,jbe),e(jbe,B6r),e(An,x6r),e(yo,k6r),e(yo,qbe),e(qbe,sF),e(sF,Gbe),e(Gbe,R6r),e(sF,S6r),e(sF,fV),e(fV,P6r),e(sF,$6r),e(yo,I6r),e(yo,Obe),e(Obe,D6r),e(yo,N6r),g(MA,yo,null),b(c,aSe,u),b(c,Uc,u),e(Uc,lF),e(lF,Xbe),g(EA,Xbe,null),e(Uc,j6r),e(Uc,Vbe),e(Vbe,q6r),b(c,nSe,u),b(c,kr,u),g(yA,kr,null),e(kr,G6r),e(kr,Jc),e(Jc,O6r),e(Jc,zbe),e(zbe,X6r),e(Jc,V6r),e(Jc,Wbe),e(Wbe,z6r),e(Jc,W6r),e(kr,Q6r),e(kr,wA),e(wA,H6r),e(wA,Qbe),e(Qbe,U6r),e(wA,J6r),e(kr,Y6r),e(kr,yt),g(AA,yt,null),e(yt,K6r),e(yt,Hbe),e(Hbe,Z6r),e(yt,e0r),e(yt,Yc),e(Yc,o0r),e(Yc,Ube),e(Ube,r0r),e(Yc,t0r),e(Yc,Jbe),e(Jbe,a0r),e(Yc,n0r),e(yt,s0r),e(yt,Ybe),e(Ybe,l0r),e(yt,i0r),g(LA,yt,null),e(kr,d0r),e(kr,wo),g(BA,wo,null),e(wo,c0r),e(wo,Kbe),e(Kbe,f0r),e(wo,m0r),e(wo,Ln),e(Ln,g0r),e(Ln,Zbe),e(Zbe,h0r),e(Ln,p0r),e(Ln,e3e),e(e3e,_0r),e(Ln,u0r),e(Ln,o3e),e(o3e,b0r),e(Ln,v0r),e(wo,T0r),e(wo,r3e),e(r3e,iF),e(iF,t3e),e(t3e,F0r),e(iF,C0r),e(iF,mV),e(mV,M0r),e(iF,E0r),e(wo,y0r),e(wo,a3e),e(a3e,w0r),e(wo,A0r),g(xA,wo,null),b(c,sSe,u),b(c,Kc,u),e(Kc,dF),e(dF,n3e),g(kA,n3e,null),e(Kc,L0r),e(Kc,s3e),e(s3e,B0r),b(c,lSe,u),b(c,Rr,u),g(RA,Rr,null),e(Rr,x0r),e(Rr,Zc),e(Zc,k0r),e(Zc,l3e),e(l3e,R0r),e(Zc,S0r),e(Zc,i3e),e(i3e,P0r),e(Zc,$0r),e(Rr,I0r),e(Rr,SA),e(SA,D0r),e(SA,d3e),e(d3e,N0r),e(SA,j0r),e(Rr,q0r),e(Rr,wt),g(PA,wt,null),e(wt,G0r),e(wt,c3e),e(c3e,O0r),e(wt,X0r),e(wt,ef),e(ef,V0r),e(ef,f3e),e(f3e,z0r),e(ef,W0r),e(ef,m3e),e(m3e,Q0r),e(ef,H0r),e(wt,U0r),e(wt,g3e),e(g3e,J0r),e(wt,Y0r),g($A,wt,null),e(Rr,K0r),e(Rr,Ao),g(IA,Ao,null),e(Ao,Z0r),e(Ao,h3e),e(h3e,eTr),e(Ao,oTr),e(Ao,Bn),e(Bn,rTr),e(Bn,p3e),e(p3e,tTr),e(Bn,aTr),e(Bn,_3e),e(_3e,nTr),e(Bn,sTr),e(Bn,u3e),e(u3e,lTr),e(Bn,iTr),e(Ao,dTr),e(Ao,z),e(z,cF),e(cF,b3e),e(b3e,cTr),e(cF,fTr),e(cF,gV),e(gV,mTr),e(cF,gTr),e(z,hTr),e(z,fF),e(fF,v3e),e(v3e,pTr),e(fF,_Tr),e(fF,hV),e(hV,uTr),e(fF,bTr),e(z,vTr),e(z,mF),e(mF,T3e),e(T3e,TTr),e(mF,FTr),e(mF,pV),e(pV,CTr),e(mF,MTr),e(z,ETr),e(z,gF),e(gF,F3e),e(F3e,yTr),e(gF,wTr),e(gF,_V),e(_V,ATr),e(gF,LTr),e(z,BTr),e(z,hF),e(hF,C3e),e(C3e,xTr),e(hF,kTr),e(hF,uV),e(uV,RTr),e(hF,STr),e(z,PTr),e(z,pF),e(pF,M3e),e(M3e,$Tr),e(pF,ITr),e(pF,bV),e(bV,DTr),e(pF,NTr),e(z,jTr),e(z,_F),e(_F,E3e),e(E3e,qTr),e(_F,GTr),e(_F,vV),e(vV,OTr),e(_F,XTr),e(z,VTr),e(z,uF),e(uF,y3e),e(y3e,zTr),e(uF,WTr),e(uF,TV),e(TV,QTr),e(uF,HTr),e(z,UTr),e(z,bF),e(bF,w3e),e(w3e,JTr),e(bF,YTr),e(bF,FV),e(FV,KTr),e(bF,ZTr),e(z,e8r),e(z,vF),e(vF,A3e),e(A3e,o8r),e(vF,r8r),e(vF,CV),e(CV,t8r),e(vF,a8r),e(z,n8r),e(z,TF),e(TF,L3e),e(L3e,s8r),e(TF,l8r),e(TF,MV),e(MV,i8r),e(TF,d8r),e(z,c8r),e(z,FF),e(FF,B3e),e(B3e,f8r),e(FF,m8r),e(FF,EV),e(EV,g8r),e(FF,h8r),e(z,p8r),e(z,CF),e(CF,x3e),e(x3e,_8r),e(CF,u8r),e(CF,yV),e(yV,b8r),e(CF,v8r),e(z,T8r),e(z,MF),e(MF,k3e),e(k3e,F8r),e(MF,C8r),e(MF,wV),e(wV,M8r),e(MF,E8r),e(z,y8r),e(z,EF),e(EF,R3e),e(R3e,w8r),e(EF,A8r),e(EF,AV),e(AV,L8r),e(EF,B8r),e(z,x8r),e(z,yF),e(yF,S3e),e(S3e,k8r),e(yF,R8r),e(yF,LV),e(LV,S8r),e(yF,P8r),e(z,$8r),e(z,wF),e(wF,P3e),e(P3e,I8r),e(wF,D8r),e(wF,BV),e(BV,N8r),e(wF,j8r),e(z,q8r),e(z,AF),e(AF,$3e),e($3e,G8r),e(AF,O8r),e(AF,xV),e(xV,X8r),e(AF,V8r),e(z,z8r),e(z,LF),e(LF,I3e),e(I3e,W8r),e(LF,Q8r),e(LF,kV),e(kV,H8r),e(LF,U8r),e(z,J8r),e(z,BF),e(BF,D3e),e(D3e,Y8r),e(BF,K8r),e(BF,RV),e(RV,Z8r),e(BF,eFr),e(z,oFr),e(z,xF),e(xF,N3e),e(N3e,rFr),e(xF,tFr),e(xF,SV),e(SV,aFr),e(xF,nFr),e(z,sFr),e(z,kF),e(kF,j3e),e(j3e,lFr),e(kF,iFr),e(kF,PV),e(PV,dFr),e(kF,cFr),e(z,fFr),e(z,RF),e(RF,q3e),e(q3e,mFr),e(RF,gFr),e(RF,$V),e($V,hFr),e(RF,pFr),e(z,_Fr),e(z,SF),e(SF,G3e),e(G3e,uFr),e(SF,bFr),e(SF,IV),e(IV,vFr),e(SF,TFr),e(z,FFr),e(z,PF),e(PF,O3e),e(O3e,CFr),e(PF,MFr),e(PF,DV),e(DV,EFr),e(PF,yFr),e(Ao,wFr),e(Ao,X3e),e(X3e,AFr),e(Ao,LFr),g(DA,Ao,null),b(c,iSe,u),b(c,of,u),e(of,$F),e($F,V3e),g(NA,V3e,null),e(of,BFr),e(of,z3e),e(z3e,xFr),b(c,dSe,u),b(c,Sr,u),g(jA,Sr,null),e(Sr,kFr),e(Sr,rf),e(rf,RFr),e(rf,W3e),e(W3e,SFr),e(rf,PFr),e(rf,Q3e),e(Q3e,$Fr),e(rf,IFr),e(Sr,DFr),e(Sr,qA),e(qA,NFr),e(qA,H3e),e(H3e,jFr),e(qA,qFr),e(Sr,GFr),e(Sr,At),g(GA,At,null),e(At,OFr),e(At,U3e),e(U3e,XFr),e(At,VFr),e(At,tf),e(tf,zFr),e(tf,J3e),e(J3e,WFr),e(tf,QFr),e(tf,Y3e),e(Y3e,HFr),e(tf,UFr),e(At,JFr),e(At,K3e),e(K3e,YFr),e(At,KFr),g(OA,At,null),e(Sr,ZFr),e(Sr,Lo),g(XA,Lo,null),e(Lo,eCr),e(Lo,Z3e),e(Z3e,oCr),e(Lo,rCr),e(Lo,xn),e(xn,tCr),e(xn,e2e),e(e2e,aCr),e(xn,nCr),e(xn,o2e),e(o2e,sCr),e(xn,lCr),e(xn,r2e),e(r2e,iCr),e(xn,dCr),e(Lo,cCr),e(Lo,ca),e(ca,IF),e(IF,t2e),e(t2e,fCr),e(IF,mCr),e(IF,NV),e(NV,gCr),e(IF,hCr),e(ca,pCr),e(ca,DF),e(DF,a2e),e(a2e,_Cr),e(DF,uCr),e(DF,jV),e(jV,bCr),e(DF,vCr),e(ca,TCr),e(ca,NF),e(NF,n2e),e(n2e,FCr),e(NF,CCr),e(NF,qV),e(qV,MCr),e(NF,ECr),e(ca,yCr),e(ca,jF),e(jF,s2e),e(s2e,wCr),e(jF,ACr),e(jF,GV),e(GV,LCr),e(jF,BCr),e(ca,xCr),e(ca,qF),e(qF,l2e),e(l2e,kCr),e(qF,RCr),e(qF,OV),e(OV,SCr),e(qF,PCr),e(Lo,$Cr),e(Lo,i2e),e(i2e,ICr),e(Lo,DCr),g(VA,Lo,null),b(c,cSe,u),b(c,af,u),e(af,GF),e(GF,d2e),g(zA,d2e,null),e(af,NCr),e(af,c2e),e(c2e,jCr),b(c,fSe,u),b(c,Pr,u),g(WA,Pr,null),e(Pr,qCr),e(Pr,nf),e(nf,GCr),e(nf,f2e),e(f2e,OCr),e(nf,XCr),e(nf,m2e),e(m2e,VCr),e(nf,zCr),e(Pr,WCr),e(Pr,QA),e(QA,QCr),e(QA,g2e),e(g2e,HCr),e(QA,UCr),e(Pr,JCr),e(Pr,Lt),g(HA,Lt,null),e(Lt,YCr),e(Lt,h2e),e(h2e,KCr),e(Lt,ZCr),e(Lt,sf),e(sf,eMr),e(sf,p2e),e(p2e,oMr),e(sf,rMr),e(sf,_2e),e(_2e,tMr),e(sf,aMr),e(Lt,nMr),e(Lt,u2e),e(u2e,sMr),e(Lt,lMr),g(UA,Lt,null),e(Pr,iMr),e(Pr,Bo),g(JA,Bo,null),e(Bo,dMr),e(Bo,b2e),e(b2e,cMr),e(Bo,fMr),e(Bo,kn),e(kn,mMr),e(kn,v2e),e(v2e,gMr),e(kn,hMr),e(kn,T2e),e(T2e,pMr),e(kn,_Mr),e(kn,F2e),e(F2e,uMr),e(kn,bMr),e(Bo,vMr),e(Bo,fe),e(fe,OF),e(OF,C2e),e(C2e,TMr),e(OF,FMr),e(OF,XV),e(XV,CMr),e(OF,MMr),e(fe,EMr),e(fe,XF),e(XF,M2e),e(M2e,yMr),e(XF,wMr),e(XF,VV),e(VV,AMr),e(XF,LMr),e(fe,BMr),e(fe,VF),e(VF,E2e),e(E2e,xMr),e(VF,kMr),e(VF,zV),e(zV,RMr),e(VF,SMr),e(fe,PMr),e(fe,zF),e(zF,y2e),e(y2e,$Mr),e(zF,IMr),e(zF,WV),e(WV,DMr),e(zF,NMr),e(fe,jMr),e(fe,WF),e(WF,w2e),e(w2e,qMr),e(WF,GMr),e(WF,QV),e(QV,OMr),e(WF,XMr),e(fe,VMr),e(fe,QF),e(QF,A2e),e(A2e,zMr),e(QF,WMr),e(QF,HV),e(HV,QMr),e(QF,HMr),e(fe,UMr),e(fe,HF),e(HF,L2e),e(L2e,JMr),e(HF,YMr),e(HF,UV),e(UV,KMr),e(HF,ZMr),e(fe,e4r),e(fe,UF),e(UF,B2e),e(B2e,o4r),e(UF,r4r),e(UF,JV),e(JV,t4r),e(UF,a4r),e(fe,n4r),e(fe,JF),e(JF,x2e),e(x2e,s4r),e(JF,l4r),e(JF,YV),e(YV,i4r),e(JF,d4r),e(fe,c4r),e(fe,YF),e(YF,k2e),e(k2e,f4r),e(YF,m4r),e(YF,KV),e(KV,g4r),e(YF,h4r),e(fe,p4r),e(fe,KF),e(KF,R2e),e(R2e,_4r),e(KF,u4r),e(KF,ZV),e(ZV,b4r),e(KF,v4r),e(fe,T4r),e(fe,ZF),e(ZF,S2e),e(S2e,F4r),e(ZF,C4r),e(ZF,ez),e(ez,M4r),e(ZF,E4r),e(Bo,y4r),e(Bo,P2e),e(P2e,w4r),e(Bo,A4r),g(YA,Bo,null),b(c,mSe,u),b(c,lf,u),e(lf,eC),e(eC,$2e),g(KA,$2e,null),e(lf,L4r),e(lf,I2e),e(I2e,B4r),b(c,gSe,u),b(c,$r,u),g(ZA,$r,null),e($r,x4r),e($r,df),e(df,k4r),e(df,D2e),e(D2e,R4r),e(df,S4r),e(df,N2e),e(N2e,P4r),e(df,$4r),e($r,I4r),e($r,eL),e(eL,D4r),e(eL,j2e),e(j2e,N4r),e(eL,j4r),e($r,q4r),e($r,Bt),g(oL,Bt,null),e(Bt,G4r),e(Bt,q2e),e(q2e,O4r),e(Bt,X4r),e(Bt,cf),e(cf,V4r),e(cf,G2e),e(G2e,z4r),e(cf,W4r),e(cf,O2e),e(O2e,Q4r),e(cf,H4r),e(Bt,U4r),e(Bt,X2e),e(X2e,J4r),e(Bt,Y4r),g(rL,Bt,null),e($r,K4r),e($r,xo),g(tL,xo,null),e(xo,Z4r),e(xo,V2e),e(V2e,eEr),e(xo,oEr),e(xo,Rn),e(Rn,rEr),e(Rn,z2e),e(z2e,tEr),e(Rn,aEr),e(Rn,W2e),e(W2e,nEr),e(Rn,sEr),e(Rn,Q2e),e(Q2e,lEr),e(Rn,iEr),e(xo,dEr),e(xo,be),e(be,oC),e(oC,H2e),e(H2e,cEr),e(oC,fEr),e(oC,oz),e(oz,mEr),e(oC,gEr),e(be,hEr),e(be,rC),e(rC,U2e),e(U2e,pEr),e(rC,_Er),e(rC,rz),e(rz,uEr),e(rC,bEr),e(be,vEr),e(be,tC),e(tC,J2e),e(J2e,TEr),e(tC,FEr),e(tC,tz),e(tz,CEr),e(tC,MEr),e(be,EEr),e(be,aC),e(aC,Y2e),e(Y2e,yEr),e(aC,wEr),e(aC,az),e(az,AEr),e(aC,LEr),e(be,BEr),e(be,nC),e(nC,K2e),e(K2e,xEr),e(nC,kEr),e(nC,nz),e(nz,REr),e(nC,SEr),e(be,PEr),e(be,sC),e(sC,Z2e),e(Z2e,$Er),e(sC,IEr),e(sC,sz),e(sz,DEr),e(sC,NEr),e(be,jEr),e(be,lC),e(lC,eve),e(eve,qEr),e(lC,GEr),e(lC,lz),e(lz,OEr),e(lC,XEr),e(be,VEr),e(be,iC),e(iC,ove),e(ove,zEr),e(iC,WEr),e(iC,iz),e(iz,QEr),e(iC,HEr),e(be,UEr),e(be,dC),e(dC,rve),e(rve,JEr),e(dC,YEr),e(dC,dz),e(dz,KEr),e(dC,ZEr),e(be,e5r),e(be,cC),e(cC,tve),e(tve,o5r),e(cC,r5r),e(cC,cz),e(cz,t5r),e(cC,a5r),e(xo,n5r),e(xo,ave),e(ave,s5r),e(xo,l5r),g(aL,xo,null),b(c,hSe,u),b(c,ff,u),e(ff,fC),e(fC,nve),g(nL,nve,null),e(ff,i5r),e(ff,sve),e(sve,d5r),b(c,pSe,u),b(c,Ir,u),g(sL,Ir,null),e(Ir,c5r),e(Ir,mf),e(mf,f5r),e(mf,lve),e(lve,m5r),e(mf,g5r),e(mf,ive),e(ive,h5r),e(mf,p5r),e(Ir,_5r),e(Ir,lL),e(lL,u5r),e(lL,dve),e(dve,b5r),e(lL,v5r),e(Ir,T5r),e(Ir,xt),g(iL,xt,null),e(xt,F5r),e(xt,cve),e(cve,C5r),e(xt,M5r),e(xt,gf),e(gf,E5r),e(gf,fve),e(fve,y5r),e(gf,w5r),e(gf,mve),e(mve,A5r),e(gf,L5r),e(xt,B5r),e(xt,gve),e(gve,x5r),e(xt,k5r),g(dL,xt,null),e(Ir,R5r),e(Ir,ko),g(cL,ko,null),e(ko,S5r),e(ko,hve),e(hve,P5r),e(ko,$5r),e(ko,Sn),e(Sn,I5r),e(Sn,pve),e(pve,D5r),e(Sn,N5r),e(Sn,_ve),e(_ve,j5r),e(Sn,q5r),e(Sn,uve),e(uve,G5r),e(Sn,O5r),e(ko,X5r),e(ko,Me),e(Me,mC),e(mC,bve),e(bve,V5r),e(mC,z5r),e(mC,fz),e(fz,W5r),e(mC,Q5r),e(Me,H5r),e(Me,gC),e(gC,vve),e(vve,U5r),e(gC,J5r),e(gC,mz),e(mz,Y5r),e(gC,K5r),e(Me,Z5r),e(Me,hC),e(hC,Tve),e(Tve,eyr),e(hC,oyr),e(hC,gz),e(gz,ryr),e(hC,tyr),e(Me,ayr),e(Me,pC),e(pC,Fve),e(Fve,nyr),e(pC,syr),e(pC,hz),e(hz,lyr),e(pC,iyr),e(Me,dyr),e(Me,_C),e(_C,Cve),e(Cve,cyr),e(_C,fyr),e(_C,pz),e(pz,myr),e(_C,gyr),e(Me,hyr),e(Me,uC),e(uC,Mve),e(Mve,pyr),e(uC,_yr),e(uC,_z),e(_z,uyr),e(uC,byr),e(Me,vyr),e(Me,bC),e(bC,Eve),e(Eve,Tyr),e(bC,Fyr),e(bC,uz),e(uz,Cyr),e(bC,Myr),e(Me,Eyr),e(Me,vC),e(vC,yve),e(yve,yyr),e(vC,wyr),e(vC,bz),e(bz,Ayr),e(vC,Lyr),e(Me,Byr),e(Me,TC),e(TC,wve),e(wve,xyr),e(TC,kyr),e(TC,vz),e(vz,Ryr),e(TC,Syr),e(ko,Pyr),e(ko,Ave),e(Ave,$yr),e(ko,Iyr),g(fL,ko,null),b(c,_Se,u),b(c,hf,u),e(hf,FC),e(FC,Lve),g(mL,Lve,null),e(hf,Dyr),e(hf,Bve),e(Bve,Nyr),b(c,uSe,u),b(c,Dr,u),g(gL,Dr,null),e(Dr,jyr),e(Dr,pf),e(pf,qyr),e(pf,xve),e(xve,Gyr),e(pf,Oyr),e(pf,kve),e(kve,Xyr),e(pf,Vyr),e(Dr,zyr),e(Dr,hL),e(hL,Wyr),e(hL,Rve),e(Rve,Qyr),e(hL,Hyr),e(Dr,Uyr),e(Dr,kt),g(pL,kt,null),e(kt,Jyr),e(kt,Sve),e(Sve,Yyr),e(kt,Kyr),e(kt,_f),e(_f,Zyr),e(_f,Pve),e(Pve,ewr),e(_f,owr),e(_f,$ve),e($ve,rwr),e(_f,twr),e(kt,awr),e(kt,Ive),e(Ive,nwr),e(kt,swr),g(_L,kt,null),e(Dr,lwr),e(Dr,Ro),g(uL,Ro,null),e(Ro,iwr),e(Ro,Dve),e(Dve,dwr),e(Ro,cwr),e(Ro,Pn),e(Pn,fwr),e(Pn,Nve),e(Nve,mwr),e(Pn,gwr),e(Pn,jve),e(jve,hwr),e(Pn,pwr),e(Pn,qve),e(qve,_wr),e(Pn,uwr),e(Ro,bwr),e(Ro,ve),e(ve,CC),e(CC,Gve),e(Gve,vwr),e(CC,Twr),e(CC,Tz),e(Tz,Fwr),e(CC,Cwr),e(ve,Mwr),e(ve,MC),e(MC,Ove),e(Ove,Ewr),e(MC,ywr),e(MC,Fz),e(Fz,wwr),e(MC,Awr),e(ve,Lwr),e(ve,EC),e(EC,Xve),e(Xve,Bwr),e(EC,xwr),e(EC,Cz),e(Cz,kwr),e(EC,Rwr),e(ve,Swr),e(ve,yC),e(yC,Vve),e(Vve,Pwr),e(yC,$wr),e(yC,Mz),e(Mz,Iwr),e(yC,Dwr),e(ve,Nwr),e(ve,wC),e(wC,zve),e(zve,jwr),e(wC,qwr),e(wC,Ez),e(Ez,Gwr),e(wC,Owr),e(ve,Xwr),e(ve,AC),e(AC,Wve),e(Wve,Vwr),e(AC,zwr),e(AC,yz),e(yz,Wwr),e(AC,Qwr),e(ve,Hwr),e(ve,LC),e(LC,Qve),e(Qve,Uwr),e(LC,Jwr),e(LC,wz),e(wz,Ywr),e(LC,Kwr),e(ve,Zwr),e(ve,BC),e(BC,Hve),e(Hve,eAr),e(BC,oAr),e(BC,Az),e(Az,rAr),e(BC,tAr),e(ve,aAr),e(ve,xC),e(xC,Uve),e(Uve,nAr),e(xC,sAr),e(xC,Lz),e(Lz,lAr),e(xC,iAr),e(ve,dAr),e(ve,kC),e(kC,Jve),e(Jve,cAr),e(kC,fAr),e(kC,Bz),e(Bz,mAr),e(kC,gAr),e(Ro,hAr),e(Ro,Yve),e(Yve,pAr),e(Ro,_Ar),g(bL,Ro,null),b(c,bSe,u),b(c,uf,u),e(uf,RC),e(RC,Kve),g(vL,Kve,null),e(uf,uAr),e(uf,Zve),e(Zve,bAr),b(c,vSe,u),b(c,Nr,u),g(TL,Nr,null),e(Nr,vAr),e(Nr,bf),e(bf,TAr),e(bf,e6e),e(e6e,FAr),e(bf,CAr),e(bf,o6e),e(o6e,MAr),e(bf,EAr),e(Nr,yAr),e(Nr,FL),e(FL,wAr),e(FL,r6e),e(r6e,AAr),e(FL,LAr),e(Nr,BAr),e(Nr,Rt),g(CL,Rt,null),e(Rt,xAr),e(Rt,t6e),e(t6e,kAr),e(Rt,RAr),e(Rt,vf),e(vf,SAr),e(vf,a6e),e(a6e,PAr),e(vf,$Ar),e(vf,n6e),e(n6e,IAr),e(vf,DAr),e(Rt,NAr),e(Rt,s6e),e(s6e,jAr),e(Rt,qAr),g(ML,Rt,null),e(Nr,GAr),e(Nr,So),g(EL,So,null),e(So,OAr),e(So,l6e),e(l6e,XAr),e(So,VAr),e(So,$n),e($n,zAr),e($n,i6e),e(i6e,WAr),e($n,QAr),e($n,d6e),e(d6e,HAr),e($n,UAr),e($n,c6e),e(c6e,JAr),e($n,YAr),e(So,KAr),e(So,Te),e(Te,SC),e(SC,f6e),e(f6e,ZAr),e(SC,eLr),e(SC,xz),e(xz,oLr),e(SC,rLr),e(Te,tLr),e(Te,PC),e(PC,m6e),e(m6e,aLr),e(PC,nLr),e(PC,kz),e(kz,sLr),e(PC,lLr),e(Te,iLr),e(Te,$C),e($C,g6e),e(g6e,dLr),e($C,cLr),e($C,Rz),e(Rz,fLr),e($C,mLr),e(Te,gLr),e(Te,IC),e(IC,h6e),e(h6e,hLr),e(IC,pLr),e(IC,Sz),e(Sz,_Lr),e(IC,uLr),e(Te,bLr),e(Te,DC),e(DC,p6e),e(p6e,vLr),e(DC,TLr),e(DC,Pz),e(Pz,FLr),e(DC,CLr),e(Te,MLr),e(Te,NC),e(NC,_6e),e(_6e,ELr),e(NC,yLr),e(NC,$z),e($z,wLr),e(NC,ALr),e(Te,LLr),e(Te,jC),e(jC,u6e),e(u6e,BLr),e(jC,xLr),e(jC,Iz),e(Iz,kLr),e(jC,RLr),e(Te,SLr),e(Te,qC),e(qC,b6e),e(b6e,PLr),e(qC,$Lr),e(qC,Dz),e(Dz,ILr),e(qC,DLr),e(Te,NLr),e(Te,GC),e(GC,v6e),e(v6e,jLr),e(GC,qLr),e(GC,Nz),e(Nz,GLr),e(GC,OLr),e(Te,XLr),e(Te,OC),e(OC,T6e),e(T6e,VLr),e(OC,zLr),e(OC,jz),e(jz,WLr),e(OC,QLr),e(So,HLr),e(So,F6e),e(F6e,ULr),e(So,JLr),g(yL,So,null),b(c,TSe,u),b(c,Tf,u),e(Tf,XC),e(XC,C6e),g(wL,C6e,null),e(Tf,YLr),e(Tf,M6e),e(M6e,KLr),b(c,FSe,u),b(c,jr,u),g(AL,jr,null),e(jr,ZLr),e(jr,Ff),e(Ff,e7r),e(Ff,E6e),e(E6e,o7r),e(Ff,r7r),e(Ff,y6e),e(y6e,t7r),e(Ff,a7r),e(jr,n7r),e(jr,LL),e(LL,s7r),e(LL,w6e),e(w6e,l7r),e(LL,i7r),e(jr,d7r),e(jr,St),g(BL,St,null),e(St,c7r),e(St,A6e),e(A6e,f7r),e(St,m7r),e(St,Cf),e(Cf,g7r),e(Cf,L6e),e(L6e,h7r),e(Cf,p7r),e(Cf,B6e),e(B6e,_7r),e(Cf,u7r),e(St,b7r),e(St,x6e),e(x6e,v7r),e(St,T7r),g(xL,St,null),e(jr,F7r),e(jr,Po),g(kL,Po,null),e(Po,C7r),e(Po,k6e),e(k6e,M7r),e(Po,E7r),e(Po,In),e(In,y7r),e(In,R6e),e(R6e,w7r),e(In,A7r),e(In,S6e),e(S6e,L7r),e(In,B7r),e(In,P6e),e(P6e,x7r),e(In,k7r),e(Po,R7r),e(Po,Se),e(Se,VC),e(VC,$6e),e($6e,S7r),e(VC,P7r),e(VC,qz),e(qz,$7r),e(VC,I7r),e(Se,D7r),e(Se,zC),e(zC,I6e),e(I6e,N7r),e(zC,j7r),e(zC,Gz),e(Gz,q7r),e(zC,G7r),e(Se,O7r),e(Se,WC),e(WC,D6e),e(D6e,X7r),e(WC,V7r),e(WC,Oz),e(Oz,z7r),e(WC,W7r),e(Se,Q7r),e(Se,QC),e(QC,N6e),e(N6e,H7r),e(QC,U7r),e(QC,Xz),e(Xz,J7r),e(QC,Y7r),e(Se,K7r),e(Se,HC),e(HC,j6e),e(j6e,Z7r),e(HC,e9r),e(HC,Vz),e(Vz,o9r),e(HC,r9r),e(Se,t9r),e(Se,UC),e(UC,q6e),e(q6e,a9r),e(UC,n9r),e(UC,zz),e(zz,s9r),e(UC,l9r),e(Se,i9r),e(Se,JC),e(JC,G6e),e(G6e,d9r),e(JC,c9r),e(JC,Wz),e(Wz,f9r),e(JC,m9r),e(Se,g9r),e(Se,YC),e(YC,O6e),e(O6e,h9r),e(YC,p9r),e(YC,Qz),e(Qz,_9r),e(YC,u9r),e(Po,b9r),e(Po,X6e),e(X6e,v9r),e(Po,T9r),g(RL,Po,null),b(c,CSe,u),b(c,Mf,u),e(Mf,KC),e(KC,V6e),g(SL,V6e,null),e(Mf,F9r),e(Mf,z6e),e(z6e,C9r),b(c,MSe,u),b(c,qr,u),g(PL,qr,null),e(qr,M9r),e(qr,Ef),e(Ef,E9r),e(Ef,W6e),e(W6e,y9r),e(Ef,w9r),e(Ef,Q6e),e(Q6e,A9r),e(Ef,L9r),e(qr,B9r),e(qr,$L),e($L,x9r),e($L,H6e),e(H6e,k9r),e($L,R9r),e(qr,S9r),e(qr,Pt),g(IL,Pt,null),e(Pt,P9r),e(Pt,U6e),e(U6e,$9r),e(Pt,I9r),e(Pt,yf),e(yf,D9r),e(yf,J6e),e(J6e,N9r),e(yf,j9r),e(yf,Y6e),e(Y6e,q9r),e(yf,G9r),e(Pt,O9r),e(Pt,K6e),e(K6e,X9r),e(Pt,V9r),g(DL,Pt,null),e(qr,z9r),e(qr,$o),g(NL,$o,null),e($o,W9r),e($o,Z6e),e(Z6e,Q9r),e($o,H9r),e($o,Dn),e(Dn,U9r),e(Dn,e0e),e(e0e,J9r),e(Dn,Y9r),e(Dn,o0e),e(o0e,K9r),e(Dn,Z9r),e(Dn,r0e),e(r0e,eBr),e(Dn,oBr),e($o,rBr),e($o,Pe),e(Pe,ZC),e(ZC,t0e),e(t0e,tBr),e(ZC,aBr),e(ZC,Hz),e(Hz,nBr),e(ZC,sBr),e(Pe,lBr),e(Pe,eM),e(eM,a0e),e(a0e,iBr),e(eM,dBr),e(eM,Uz),e(Uz,cBr),e(eM,fBr),e(Pe,mBr),e(Pe,oM),e(oM,n0e),e(n0e,gBr),e(oM,hBr),e(oM,Jz),e(Jz,pBr),e(oM,_Br),e(Pe,uBr),e(Pe,rM),e(rM,s0e),e(s0e,bBr),e(rM,vBr),e(rM,Yz),e(Yz,TBr),e(rM,FBr),e(Pe,CBr),e(Pe,tM),e(tM,l0e),e(l0e,MBr),e(tM,EBr),e(tM,Kz),e(Kz,yBr),e(tM,wBr),e(Pe,ABr),e(Pe,aM),e(aM,i0e),e(i0e,LBr),e(aM,BBr),e(aM,Zz),e(Zz,xBr),e(aM,kBr),e(Pe,RBr),e(Pe,nM),e(nM,d0e),e(d0e,SBr),e(nM,PBr),e(nM,eW),e(eW,$Br),e(nM,IBr),e(Pe,DBr),e(Pe,sM),e(sM,c0e),e(c0e,NBr),e(sM,jBr),e(sM,oW),e(oW,qBr),e(sM,GBr),e($o,OBr),e($o,f0e),e(f0e,XBr),e($o,VBr),g(jL,$o,null),b(c,ESe,u),b(c,wf,u),e(wf,lM),e(lM,m0e),g(qL,m0e,null),e(wf,zBr),e(wf,g0e),e(g0e,WBr),b(c,ySe,u),b(c,Gr,u),g(GL,Gr,null),e(Gr,QBr),e(Gr,Af),e(Af,HBr),e(Af,h0e),e(h0e,UBr),e(Af,JBr),e(Af,p0e),e(p0e,YBr),e(Af,KBr),e(Gr,ZBr),e(Gr,OL),e(OL,exr),e(OL,_0e),e(_0e,oxr),e(OL,rxr),e(Gr,txr),e(Gr,$t),g(XL,$t,null),e($t,axr),e($t,u0e),e(u0e,nxr),e($t,sxr),e($t,Lf),e(Lf,lxr),e(Lf,b0e),e(b0e,ixr),e(Lf,dxr),e(Lf,v0e),e(v0e,cxr),e(Lf,fxr),e($t,mxr),e($t,T0e),e(T0e,gxr),e($t,hxr),g(VL,$t,null),e(Gr,pxr),e(Gr,Io),g(zL,Io,null),e(Io,_xr),e(Io,F0e),e(F0e,uxr),e(Io,bxr),e(Io,Nn),e(Nn,vxr),e(Nn,C0e),e(C0e,Txr),e(Nn,Fxr),e(Nn,M0e),e(M0e,Cxr),e(Nn,Mxr),e(Nn,E0e),e(E0e,Exr),e(Nn,yxr),e(Io,wxr),e(Io,y0e),e(y0e,iM),e(iM,w0e),e(w0e,Axr),e(iM,Lxr),e(iM,rW),e(rW,Bxr),e(iM,xxr),e(Io,kxr),e(Io,A0e),e(A0e,Rxr),e(Io,Sxr),g(WL,Io,null),b(c,wSe,u),b(c,Bf,u),e(Bf,dM),e(dM,L0e),g(QL,L0e,null),e(Bf,Pxr),e(Bf,B0e),e(B0e,$xr),b(c,ASe,u),b(c,Or,u),g(HL,Or,null),e(Or,Ixr),e(Or,xf),e(xf,Dxr),e(xf,x0e),e(x0e,Nxr),e(xf,jxr),e(xf,k0e),e(k0e,qxr),e(xf,Gxr),e(Or,Oxr),e(Or,UL),e(UL,Xxr),e(UL,R0e),e(R0e,Vxr),e(UL,zxr),e(Or,Wxr),e(Or,It),g(JL,It,null),e(It,Qxr),e(It,S0e),e(S0e,Hxr),e(It,Uxr),e(It,kf),e(kf,Jxr),e(kf,P0e),e(P0e,Yxr),e(kf,Kxr),e(kf,$0e),e($0e,Zxr),e(kf,ekr),e(It,okr),e(It,I0e),e(I0e,rkr),e(It,tkr),g(YL,It,null),e(Or,akr),e(Or,Do),g(KL,Do,null),e(Do,nkr),e(Do,D0e),e(D0e,skr),e(Do,lkr),e(Do,jn),e(jn,ikr),e(jn,N0e),e(N0e,dkr),e(jn,ckr),e(jn,j0e),e(j0e,fkr),e(jn,mkr),e(jn,q0e),e(q0e,gkr),e(jn,hkr),e(Do,pkr),e(Do,ZL),e(ZL,cM),e(cM,G0e),e(G0e,_kr),e(cM,ukr),e(cM,tW),e(tW,bkr),e(cM,vkr),e(ZL,Tkr),e(ZL,fM),e(fM,O0e),e(O0e,Fkr),e(fM,Ckr),e(fM,aW),e(aW,Mkr),e(fM,Ekr),e(Do,ykr),e(Do,X0e),e(X0e,wkr),e(Do,Akr),g(e7,Do,null),b(c,LSe,u),b(c,Rf,u),e(Rf,mM),e(mM,V0e),g(o7,V0e,null),e(Rf,Lkr),e(Rf,z0e),e(z0e,Bkr),b(c,BSe,u),b(c,Xr,u),g(r7,Xr,null),e(Xr,xkr),e(Xr,Sf),e(Sf,kkr),e(Sf,W0e),e(W0e,Rkr),e(Sf,Skr),e(Sf,Q0e),e(Q0e,Pkr),e(Sf,$kr),e(Xr,Ikr),e(Xr,t7),e(t7,Dkr),e(t7,H0e),e(H0e,Nkr),e(t7,jkr),e(Xr,qkr),e(Xr,Dt),g(a7,Dt,null),e(Dt,Gkr),e(Dt,U0e),e(U0e,Okr),e(Dt,Xkr),e(Dt,Pf),e(Pf,Vkr),e(Pf,J0e),e(J0e,zkr),e(Pf,Wkr),e(Pf,Y0e),e(Y0e,Qkr),e(Pf,Hkr),e(Dt,Ukr),e(Dt,K0e),e(K0e,Jkr),e(Dt,Ykr),g(n7,Dt,null),e(Xr,Kkr),e(Xr,No),g(s7,No,null),e(No,Zkr),e(No,Z0e),e(Z0e,eRr),e(No,oRr),e(No,qn),e(qn,rRr),e(qn,eTe),e(eTe,tRr),e(qn,aRr),e(qn,oTe),e(oTe,nRr),e(qn,sRr),e(qn,rTe),e(rTe,lRr),e(qn,iRr),e(No,dRr),e(No,tTe),e(tTe,gM),e(gM,aTe),e(aTe,cRr),e(gM,fRr),e(gM,nW),e(nW,mRr),e(gM,gRr),e(No,hRr),e(No,nTe),e(nTe,pRr),e(No,_Rr),g(l7,No,null),xSe=!0},p(c,[u]){const i7={};u&2&&(i7.$$scope={dirty:u,ctx:c}),Of.$set(i7);const sTe={};u&2&&(sTe.$$scope={dirty:u,ctx:c}),Rh.$set(sTe);const lTe={};u&2&&(lTe.$$scope={dirty:u,ctx:c}),Xh.$set(lTe)},i(c){xSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(u4.$$.fragment,c),h(b4.$$.fragment,c),h(Of.$$.fragment,c),h(v4.$$.fragment,c),h(T4.$$.fragment,c),h(M4.$$.fragment,c),h(E4.$$.fragment,c),h(y4.$$.fragment,c),h(w4.$$.fragment,c),h(A4.$$.fragment,c),h(x4.$$.fragment,c),h(k4.$$.fragment,c),h(R4.$$.fragment,c),h(S4.$$.fragment,c),h(P4.$$.fragment,c),h(D4.$$.fragment,c),h(Rh.$$.fragment,c),h(N4.$$.fragment,c),h(j4.$$.fragment,c),h(q4.$$.fragment,c),h(G4.$$.fragment,c),h(V4.$$.fragment,c),h(Xh.$$.fragment,c),h(z4.$$.fragment,c),h(W4.$$.fragment,c),h(Q4.$$.fragment,c),h(H4.$$.fragment,c),h(J4.$$.fragment,c),h(Y4.$$.fragment,c),h(K4.$$.fragment,c),h(Z4.$$.fragment,c),h(eE.$$.fragment,c),h(oE.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(nE.$$.fragment,c),h(sE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(NE.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(D5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),xSe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(u4.$$.fragment,c),p(b4.$$.fragment,c),p(Of.$$.fragment,c),p(v4.$$.fragment,c),p(T4.$$.fragment,c),p(M4.$$.fragment,c),p(E4.$$.fragment,c),p(y4.$$.fragment,c),p(w4.$$.fragment,c),p(A4.$$.fragment,c),p(x4.$$.fragment,c),p(k4.$$.fragment,c),p(R4.$$.fragment,c),p(S4.$$.fragment,c),p(P4.$$.fragment,c),p(D4.$$.fragment,c),p(Rh.$$.fragment,c),p(N4.$$.fragment,c),p(j4.$$.fragment,c),p(q4.$$.fragment,c),p(G4.$$.fragment,c),p(V4.$$.fragment,c),p(Xh.$$.fragment,c),p(z4.$$.fragment,c),p(W4.$$.fragment,c),p(Q4.$$.fragment,c),p(H4.$$.fragment,c),p(J4.$$.fragment,c),p(Y4.$$.fragment,c),p(K4.$$.fragment,c),p(Z4.$$.fragment,c),p(eE.$$.fragment,c),p(oE.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(nE.$$.fragment,c),p(sE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(NE.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(D5.$$.fragment,c),p(N5.$$.fragment,c),p(q5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(V5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(DL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),xSe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(Df),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(Bke),c&&t(Xi),_(u4),c&&t(xke),c&&t(zn),c&&t(kke),_(b4,c),c&&t(Rke),c&&t(c9),c&&t(Ske),_(Of,c),c&&t(Pke),c&&t(Vi),_(v4),c&&t($ke),c&&t(Wo),_(T4),_(M4),_(E4),_(y4),c&&t(Ike),c&&t(Wi),_(w4),c&&t(Dke),c&&t(Qo),_(A4),_(x4),_(k4),_(R4),c&&t(Nke),c&&t(Qi),_(S4),c&&t(jke),c&&t(Ho),_(P4),_(D4),_(Rh),_(N4),_(j4),c&&t(qke),c&&t(Hi),_(q4),c&&t(Gke),c&&t(Uo),_(G4),_(V4),_(Xh),_(z4),_(W4),c&&t(Oke),c&&t(Ji),_(Q4),c&&t(Xke),c&&t(Jo),_(H4),_(J4),_(Y4),_(K4),_(Z4),c&&t(Vke),c&&t(Zi),_(eE),c&&t(zke),c&&t(Yo),_(oE),_(tE),_(aE),_(nE),_(sE),c&&t(Wke),c&&t(rd),_(lE),c&&t(Qke),c&&t(Ko),_(iE),_(cE),_(fE),_(mE),_(gE),c&&t(Hke),c&&t(nd),_(hE),c&&t(Uke),c&&t(Zo),_(pE),_(uE),_(bE),_(vE),_(TE),c&&t(Jke),c&&t(id),_(FE),c&&t(Yke),c&&t(er),_(CE),_(EE),_(yE),_(wE),_(AE),c&&t(Kke),c&&t(fd),_(LE),c&&t(Zke),c&&t(or),_(BE),_(kE),_(RE),_(SE),_(PE),c&&t(eRe),c&&t(hd),_($E),c&&t(oRe),c&&t(rr),_(IE),_(NE),_(jE),_(qE),_(GE),c&&t(rRe),c&&t(ud),_(OE),c&&t(tRe),c&&t(tr),_(XE),_(zE),_(WE),_(QE),_(HE),c&&t(aRe),c&&t(Td),_(UE),c&&t(nRe),c&&t(ar),_(JE),_(KE),_(ZE),_(e5),_(o5),c&&t(sRe),c&&t(Md),_(r5),c&&t(lRe),c&&t(nr),_(t5),_(n5),_(s5),_(l5),_(i5),c&&t(iRe),c&&t(wd),_(d5),c&&t(dRe),c&&t(sr),_(c5),_(m5),_(g5),_(h5),_(p5),c&&t(cRe),c&&t(Bd),_(_5),c&&t(fRe),c&&t(lr),_(u5),_(v5),_(T5),_(F5),_(C5),c&&t(mRe),c&&t(Rd),_(M5),c&&t(gRe),c&&t(ir),_(E5),_(w5),_(A5),_(L5),_(B5),c&&t(hRe),c&&t($d),_(x5),c&&t(pRe),c&&t(dr),_(k5),_(S5),_(P5),_($5),_(I5),c&&t(_Re),c&&t(Nd),_(D5),c&&t(uRe),c&&t(cr),_(N5),_(q5),_(G5),_(O5),_(X5),c&&t(bRe),c&&t(Gd),_(V5),c&&t(vRe),c&&t(fr),_(z5),_(Q5),_(H5),_(U5),_(J5),c&&t(TRe),c&&t(Vd),_(Y5),c&&t(FRe),c&&t(mr),_(K5),_(ey),_(oy),_(ry),_(ay),c&&t(CRe),c&&t(Qd),_(ny),c&&t(MRe),c&&t(gr),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(ERe),c&&t(Jd),_(my),c&&t(yRe),c&&t(hr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(wRe),c&&t(ec),_(vy),c&&t(ARe),c&&t(pr),_(Ty),_(Cy),_(My),_(Ey),_(yy),c&&t(LRe),c&&t(tc),_(wy),c&&t(BRe),c&&t(_r),_(Ay),_(By),_(xy),_(ky),_(Ry),c&&t(xRe),c&&t(sc),_(Sy),c&&t(kRe),c&&t(ur),_(Py),_(Iy),_(Dy),_(Ny),_(jy),c&&t(RRe),c&&t(cc),_(qy),c&&t(SRe),c&&t(br),_(Gy),_(Xy),_(Vy),_(zy),_(Wy),c&&t(PRe),c&&t(gc),_(Qy),c&&t($Re),c&&t(vr),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(IRe),c&&t(_c),_(ew),c&&t(DRe),c&&t(Tr),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(NRe),c&&t(vc),_(lw),c&&t(jRe),c&&t(Fr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(qRe),c&&t(Cc),_(hw),c&&t(GRe),c&&t(Cr),_(pw),_(uw),_(bw),_(vw),_(Fw),c&&t(ORe),c&&t(yc),_(Cw),c&&t(XRe),c&&t(Mr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),c&&t(VRe),c&&t(Lc),_(Bw),c&&t(zRe),c&&t(Er),_(xw),_(Rw),_(Sw),_(Pw),_($w),c&&t(WRe),c&&t(kc),_(Iw),c&&t(QRe),c&&t(yr),_(Dw),_(jw),_(qw),_(Gw),_(Ow),c&&t(HRe),c&&t(Pc),_(Xw),c&&t(URe),c&&t(wr),_(Vw),_(Ww),_(Qw),_(Hw),_(Uw),c&&t(JRe),c&&t(Dc),_(Jw),c&&t(YRe),c&&t(Ar),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(KRe),c&&t(qc),_(tA),c&&t(ZRe),c&&t(Lr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(eSe),c&&t(Xc),_(cA),c&&t(oSe),c&&t(Br),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(rSe),c&&t(Wc),_(uA),c&&t(tSe),c&&t(xr),_(bA),_(TA),_(FA),_(CA),_(MA),c&&t(aSe),c&&t(Uc),_(EA),c&&t(nSe),c&&t(kr),_(yA),_(AA),_(LA),_(BA),_(xA),c&&t(sSe),c&&t(Kc),_(kA),c&&t(lSe),c&&t(Rr),_(RA),_(PA),_($A),_(IA),_(DA),c&&t(iSe),c&&t(of),_(NA),c&&t(dSe),c&&t(Sr),_(jA),_(GA),_(OA),_(XA),_(VA),c&&t(cSe),c&&t(af),_(zA),c&&t(fSe),c&&t(Pr),_(WA),_(HA),_(UA),_(JA),_(YA),c&&t(mSe),c&&t(lf),_(KA),c&&t(gSe),c&&t($r),_(ZA),_(oL),_(rL),_(tL),_(aL),c&&t(hSe),c&&t(ff),_(nL),c&&t(pSe),c&&t(Ir),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(_Se),c&&t(hf),_(mL),c&&t(uSe),c&&t(Dr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(bSe),c&&t(uf),_(vL),c&&t(vSe),c&&t(Nr),_(TL),_(CL),_(ML),_(EL),_(yL),c&&t(TSe),c&&t(Tf),_(wL),c&&t(FSe),c&&t(jr),_(AL),_(BL),_(xL),_(kL),_(RL),c&&t(CSe),c&&t(Mf),_(SL),c&&t(MSe),c&&t(qr),_(PL),_(IL),_(DL),_(NL),_(jL),c&&t(ESe),c&&t(wf),_(qL),c&&t(ySe),c&&t(Gr),_(GL),_(XL),_(VL),_(zL),_(WL),c&&t(wSe),c&&t(Bf),_(QL),c&&t(ASe),c&&t(Or),_(HL),_(JL),_(YL),_(KL),_(e7),c&&t(LSe),c&&t(Rf),_(o7),c&&t(BSe),c&&t(Xr),_(r7),_(a7),_(n7),_(s7),_(l7)}}}const DCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function NCt(If){return RCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class VCt extends LCt{constructor(Z){super();BCt(this,Z,NCt,ICt,xCt,{})}}export{VCt as default,DCt as metadata};
