import{S as dwt,i as cwt,s as fwt,e as a,k as l,w as f,t as o,M as mwt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as gwt}from"../../chunks/vendor-6b77c823.js";import{T as APr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-af1d0ae0.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function hwt(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,AC,Nf,xe,co,ji,Gn,yC,On,Vn,LC,Di,Xn,xC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),AC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),yC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),LC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),xC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var b9=s(de);Ce=r(b9,"NewModelConfig"),b9.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var F9=s(Ii);qf=r(F9,"model_type"),F9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var v9=s(qi);Ni=r(v9,'"new-model"'),v9.forEach(t),AC=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),yC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var T9=s(On);Vn=r(T9,"PreTrainedModel"),T9.forEach(t),LC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),xC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var M9=s(Gi);jf=r(M9,"NewModelConfig"),M9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,AC),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,yC),e(xe,On),e(On,Vn),e(xe,LC),e(xe,Di),e(Di,Xn),e(xe,xC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function pwt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function _wt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function uwt(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,AC,Nf,xe,co,ji,Gn,yC,On,Vn,LC,Di,Xn,xC,Gi,jf,Da,fo,ue,b9,Oi,F9,v9,zo,Ga,T9,Df,M9,DIe,yRe,Vi,Gf,lY,kC,GIe,iY,OIe,LRe,zn,VIe,dY,XIe,zIe,cY,QIe,WIe,xRe,SC,kRe,E9,HIe,SRe,Of,RRe,Xi,Vf,fY,RC,UIe,mY,JIe,BRe,Qo,BC,YIe,PC,KIe,C9,ZIe,eqe,oqe,$C,rqe,gY,tqe,aqe,nqe,mo,IC,sqe,hY,lqe,iqe,zi,dqe,pY,cqe,fqe,_Y,mqe,gqe,hqe,F,Xf,uY,pqe,_qe,w9,uqe,bqe,Fqe,zf,bY,vqe,Tqe,A9,Mqe,Eqe,Cqe,Qf,FY,wqe,Aqe,y9,yqe,Lqe,xqe,Wf,vY,kqe,Sqe,L9,Rqe,Bqe,Pqe,Hf,TY,$qe,Iqe,x9,qqe,Nqe,jqe,Uf,MY,Dqe,Gqe,k9,Oqe,Vqe,Xqe,Jf,EY,zqe,Qqe,S9,Wqe,Hqe,Uqe,Yf,CY,Jqe,Yqe,R9,Kqe,Zqe,eNe,Kf,wY,oNe,rNe,B9,tNe,aNe,nNe,Zf,AY,sNe,lNe,P9,iNe,dNe,cNe,em,yY,fNe,mNe,$9,gNe,hNe,pNe,om,LY,_Ne,uNe,I9,bNe,FNe,vNe,rm,xY,TNe,MNe,q9,ENe,CNe,wNe,tm,kY,ANe,yNe,N9,LNe,xNe,kNe,am,SY,SNe,RNe,j9,BNe,PNe,$Ne,nm,RY,INe,qNe,D9,NNe,jNe,DNe,sm,BY,GNe,ONe,G9,VNe,XNe,zNe,lm,PY,QNe,WNe,O9,HNe,UNe,JNe,im,$Y,YNe,KNe,V9,ZNe,eje,oje,dm,IY,rje,tje,X9,aje,nje,sje,cm,qY,lje,ije,z9,dje,cje,fje,fm,NY,mje,gje,Q9,hje,pje,_je,mm,jY,uje,bje,W9,Fje,vje,Tje,gm,DY,Mje,Eje,H9,Cje,wje,Aje,hm,GY,yje,Lje,U9,xje,kje,Sje,pm,OY,Rje,Bje,J9,Pje,$je,Ije,_m,VY,qje,Nje,Y9,jje,Dje,Gje,um,XY,Oje,Vje,K9,Xje,zje,Qje,bm,zY,Wje,Hje,Z9,Uje,Jje,Yje,Fm,QY,Kje,Zje,ex,eDe,oDe,rDe,vm,WY,tDe,aDe,ox,nDe,sDe,lDe,Tm,HY,iDe,dDe,rx,cDe,fDe,mDe,Mm,UY,gDe,hDe,tx,pDe,_De,uDe,Em,JY,bDe,FDe,ax,vDe,TDe,MDe,Cm,YY,EDe,CDe,nx,wDe,ADe,yDe,wm,KY,LDe,xDe,sx,kDe,SDe,RDe,Am,ZY,BDe,PDe,lx,$De,IDe,qDe,ym,eK,NDe,jDe,ix,DDe,GDe,ODe,Lm,oK,VDe,XDe,dx,zDe,QDe,WDe,xm,rK,HDe,UDe,cx,JDe,YDe,KDe,km,tK,ZDe,eGe,fx,oGe,rGe,tGe,Sm,aK,aGe,nGe,mx,sGe,lGe,iGe,Rm,nK,dGe,cGe,gx,fGe,mGe,gGe,Bm,sK,hGe,pGe,hx,_Ge,uGe,bGe,Pm,lK,FGe,vGe,px,TGe,MGe,EGe,$m,iK,CGe,wGe,_x,AGe,yGe,LGe,Im,dK,xGe,kGe,ux,SGe,RGe,BGe,qm,cK,PGe,$Ge,bx,IGe,qGe,NGe,Nm,fK,jGe,DGe,Fx,GGe,OGe,VGe,jm,mK,XGe,zGe,vx,QGe,WGe,HGe,Dm,gK,UGe,JGe,Tx,YGe,KGe,ZGe,Gm,hK,eOe,oOe,Mx,rOe,tOe,aOe,Om,pK,nOe,sOe,Ex,lOe,iOe,dOe,Vm,_K,cOe,fOe,Cx,mOe,gOe,hOe,Xm,uK,pOe,_Oe,wx,uOe,bOe,FOe,zm,bK,vOe,TOe,Ax,MOe,EOe,COe,Qm,FK,wOe,AOe,yx,yOe,LOe,xOe,Wm,vK,kOe,SOe,Lx,ROe,BOe,POe,Hm,TK,$Oe,IOe,xx,qOe,NOe,jOe,Um,MK,DOe,GOe,kx,OOe,VOe,XOe,Jm,EK,zOe,QOe,Sx,WOe,HOe,UOe,Ym,CK,JOe,YOe,Rx,KOe,ZOe,eVe,Km,wK,oVe,rVe,Bx,tVe,aVe,nVe,Zm,AK,sVe,lVe,Px,iVe,dVe,cVe,eg,yK,fVe,mVe,$x,gVe,hVe,pVe,og,LK,_Ve,uVe,Ix,bVe,FVe,vVe,rg,xK,TVe,MVe,qx,EVe,CVe,wVe,tg,kK,AVe,yVe,Nx,LVe,xVe,kVe,ag,SK,SVe,RVe,jx,BVe,PVe,$Ve,ng,RK,IVe,qVe,Dx,NVe,jVe,DVe,sg,BK,GVe,OVe,Gx,VVe,XVe,zVe,lg,PK,QVe,WVe,Ox,HVe,UVe,JVe,ig,$K,YVe,KVe,Vx,ZVe,eXe,oXe,dg,IK,rXe,tXe,Xx,aXe,nXe,sXe,cg,qK,lXe,iXe,zx,dXe,cXe,fXe,fg,NK,mXe,gXe,Qx,hXe,pXe,_Xe,mg,jK,uXe,bXe,Wx,FXe,vXe,TXe,gg,DK,MXe,EXe,Hx,CXe,wXe,AXe,hg,GK,yXe,LXe,Ux,xXe,kXe,SXe,pg,OK,RXe,BXe,Jx,PXe,$Xe,IXe,_g,VK,qXe,NXe,Yx,jXe,DXe,GXe,ug,XK,OXe,VXe,Kx,XXe,zXe,QXe,bg,zK,WXe,HXe,Zx,UXe,JXe,YXe,Fg,QK,KXe,ZXe,ek,eze,oze,rze,vg,WK,tze,aze,ok,nze,sze,lze,Tg,HK,ize,dze,rk,cze,fze,mze,Mg,UK,gze,hze,tk,pze,_ze,uze,Eg,JK,bze,Fze,ak,vze,Tze,Mze,Cg,YK,Eze,Cze,nk,wze,Aze,yze,wg,KK,Lze,xze,sk,kze,Sze,Rze,Ag,ZK,Bze,Pze,lk,$ze,Ize,qze,yg,eZ,Nze,jze,ik,Dze,Gze,Oze,Lg,oZ,Vze,Xze,dk,zze,Qze,Wze,xg,rZ,Hze,Uze,ck,Jze,Yze,Kze,kg,tZ,Zze,eQe,fk,oQe,rQe,tQe,Sg,aZ,aQe,nQe,mk,sQe,lQe,iQe,Rg,nZ,dQe,cQe,gk,fQe,mQe,gQe,Bg,sZ,hQe,pQe,hk,_Qe,uQe,bQe,Pg,lZ,FQe,vQe,pk,TQe,MQe,EQe,$g,iZ,CQe,wQe,_k,AQe,yQe,LQe,Ig,dZ,xQe,kQe,uk,SQe,RQe,BQe,qg,cZ,PQe,$Qe,bk,IQe,qQe,NQe,fZ,jQe,DQe,qC,GQe,Ng,NC,OQe,mZ,VQe,PRe,Qi,jg,gZ,jC,XQe,hZ,zQe,$Re,Wo,DC,QQe,GC,WQe,Fk,HQe,UQe,JQe,OC,YQe,pZ,KQe,ZQe,eWe,go,VC,oWe,_Z,rWe,tWe,Oa,aWe,uZ,nWe,sWe,bZ,lWe,iWe,FZ,dWe,cWe,fWe,E,Qn,vZ,mWe,gWe,vk,hWe,pWe,Tk,_We,uWe,bWe,Wn,TZ,FWe,vWe,Mk,TWe,MWe,Ek,EWe,CWe,wWe,Hn,MZ,AWe,yWe,Ck,LWe,xWe,wk,kWe,SWe,RWe,Dg,EZ,BWe,PWe,Ak,$We,IWe,qWe,Un,CZ,NWe,jWe,yk,DWe,GWe,Lk,OWe,VWe,XWe,Gg,wZ,zWe,QWe,xk,WWe,HWe,UWe,Og,AZ,JWe,YWe,kk,KWe,ZWe,eHe,Vg,yZ,oHe,rHe,Sk,tHe,aHe,nHe,Jn,LZ,sHe,lHe,Rk,iHe,dHe,Bk,cHe,fHe,mHe,Yn,xZ,gHe,hHe,Pk,pHe,_He,$k,uHe,bHe,FHe,Kn,kZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,Xg,SZ,yHe,LHe,Nk,xHe,kHe,SHe,zg,RZ,RHe,BHe,jk,PHe,$He,IHe,Zn,BZ,qHe,NHe,Dk,jHe,DHe,Gk,GHe,OHe,VHe,Qg,PZ,XHe,zHe,Ok,QHe,WHe,HHe,es,$Z,UHe,JHe,Vk,YHe,KHe,Xk,ZHe,eUe,oUe,os,IZ,rUe,tUe,zk,aUe,nUe,Qk,sUe,lUe,iUe,rs,qZ,dUe,cUe,Wk,fUe,mUe,NZ,gUe,hUe,pUe,Wg,jZ,_Ue,uUe,Hk,bUe,FUe,vUe,ts,DZ,TUe,MUe,Uk,EUe,CUe,Jk,wUe,AUe,yUe,Hg,GZ,LUe,xUe,Yk,kUe,SUe,RUe,as,OZ,BUe,PUe,Kk,$Ue,IUe,Zk,qUe,NUe,jUe,ns,VZ,DUe,GUe,eS,OUe,VUe,oS,XUe,zUe,QUe,ss,XZ,WUe,HUe,rS,UUe,JUe,tS,YUe,KUe,ZUe,Ug,zZ,eJe,oJe,aS,rJe,tJe,aJe,Jg,QZ,nJe,sJe,nS,lJe,iJe,dJe,ls,WZ,cJe,fJe,sS,mJe,gJe,lS,hJe,pJe,_Je,Yg,HZ,uJe,bJe,iS,FJe,vJe,TJe,is,UZ,MJe,EJe,dS,CJe,wJe,cS,AJe,yJe,LJe,ds,JZ,xJe,kJe,fS,SJe,RJe,mS,BJe,PJe,$Je,cs,YZ,IJe,qJe,gS,NJe,jJe,hS,DJe,GJe,OJe,fs,KZ,VJe,XJe,pS,zJe,QJe,_S,WJe,HJe,UJe,Kg,ZZ,JJe,YJe,uS,KJe,ZJe,eYe,ms,eee,oYe,rYe,bS,tYe,aYe,FS,nYe,sYe,lYe,gs,oee,iYe,dYe,vS,cYe,fYe,TS,mYe,gYe,hYe,hs,ree,pYe,_Ye,MS,uYe,bYe,ES,FYe,vYe,TYe,ps,tee,MYe,EYe,CS,CYe,wYe,wS,AYe,yYe,LYe,_s,aee,xYe,kYe,AS,SYe,RYe,yS,BYe,PYe,$Ye,us,nee,IYe,qYe,LS,NYe,jYe,xS,DYe,GYe,OYe,Zg,see,VYe,XYe,kS,zYe,QYe,WYe,bs,lee,HYe,UYe,SS,JYe,YYe,RS,KYe,ZYe,eKe,eh,iee,oKe,rKe,BS,tKe,aKe,nKe,oh,dee,sKe,lKe,PS,iKe,dKe,cKe,Fs,cee,fKe,mKe,$S,gKe,hKe,IS,pKe,_Ke,uKe,vs,fee,bKe,FKe,qS,vKe,TKe,NS,MKe,EKe,CKe,rh,mee,wKe,AKe,jS,yKe,LKe,xKe,Ts,gee,kKe,SKe,DS,RKe,BKe,GS,PKe,$Ke,IKe,Ms,hee,qKe,NKe,OS,jKe,DKe,VS,GKe,OKe,VKe,Es,pee,XKe,zKe,XS,QKe,WKe,zS,HKe,UKe,JKe,Cs,_ee,YKe,KKe,QS,ZKe,eZe,WS,oZe,rZe,tZe,ws,uee,aZe,nZe,HS,sZe,lZe,US,iZe,dZe,cZe,th,bee,fZe,mZe,JS,gZe,hZe,pZe,ah,Fee,_Ze,uZe,YS,bZe,FZe,vZe,nh,vee,TZe,MZe,KS,EZe,CZe,wZe,sh,Tee,AZe,yZe,ZS,LZe,xZe,kZe,As,Mee,SZe,RZe,eR,BZe,PZe,oR,$Ze,IZe,qZe,lh,Eee,NZe,jZe,rR,DZe,GZe,OZe,ys,Cee,VZe,XZe,tR,zZe,QZe,aR,WZe,HZe,UZe,Ls,wee,JZe,YZe,nR,KZe,ZZe,sR,eeo,oeo,reo,xs,Aee,teo,aeo,lR,neo,seo,iR,leo,ieo,deo,ks,yee,ceo,feo,dR,meo,geo,cR,heo,peo,_eo,Ss,Lee,ueo,beo,fR,Feo,veo,mR,Teo,Meo,Eeo,Rs,xee,Ceo,weo,gR,Aeo,yeo,hR,Leo,xeo,keo,ih,kee,Seo,Reo,pR,Beo,Peo,$eo,dh,See,Ieo,qeo,_R,Neo,jeo,Deo,Bs,Ree,Geo,Oeo,uR,Veo,Xeo,bR,zeo,Qeo,Weo,Ps,Bee,Heo,Ueo,FR,Jeo,Yeo,vR,Keo,Zeo,eoo,$s,Pee,ooo,roo,TR,too,aoo,MR,noo,soo,loo,ch,$ee,ioo,doo,ER,coo,foo,moo,fh,Iee,goo,hoo,CR,poo,_oo,uoo,mh,qee,boo,Foo,wR,voo,Too,Moo,gh,Nee,Eoo,Coo,AR,woo,Aoo,yoo,hh,jee,Loo,xoo,yR,koo,Soo,Roo,Is,Dee,Boo,Poo,LR,$oo,Ioo,xR,qoo,Noo,joo,ph,Gee,Doo,Goo,kR,Ooo,Voo,Xoo,_h,Oee,zoo,Qoo,SR,Woo,Hoo,Uoo,qs,Vee,Joo,Yoo,RR,Koo,Zoo,BR,ero,oro,rro,Ns,Xee,tro,aro,PR,nro,sro,$R,lro,iro,dro,zee,cro,fro,XC,mro,uh,zC,gro,Qee,hro,IRe,Wi,bh,Wee,QC,pro,Hee,_ro,qRe,Ho,WC,uro,HC,bro,IR,Fro,vro,Tro,UC,Mro,Uee,Ero,Cro,wro,$e,JC,Aro,Jee,yro,Lro,Va,xro,Yee,kro,Sro,Kee,Rro,Bro,Zee,Pro,$ro,Iro,ee,Fh,eoe,qro,Nro,qR,jro,Dro,Gro,vh,ooe,Oro,Vro,NR,Xro,zro,Qro,Th,roe,Wro,Hro,jR,Uro,Jro,Yro,Mh,toe,Kro,Zro,DR,eto,oto,rto,Eh,aoe,tto,ato,GR,nto,sto,lto,Ch,noe,ito,dto,OR,cto,fto,mto,wh,soe,gto,hto,VR,pto,_to,uto,Ah,loe,bto,Fto,XR,vto,Tto,Mto,yh,ioe,Eto,Cto,zR,wto,Ato,yto,Lh,doe,Lto,xto,QR,kto,Sto,Rto,xh,coe,Bto,Pto,WR,$to,Ito,qto,kh,foe,Nto,jto,HR,Dto,Gto,Oto,Sh,moe,Vto,Xto,UR,zto,Qto,Wto,Rh,goe,Hto,Uto,JR,Jto,Yto,Kto,Bh,hoe,Zto,eao,YR,oao,rao,tao,Ph,poe,aao,nao,KR,sao,lao,iao,$h,_oe,dao,cao,ZR,fao,mao,gao,Ih,uoe,hao,pao,eB,_ao,uao,bao,qh,boe,Fao,vao,oB,Tao,Mao,Eao,Nh,Cao,Foe,wao,Aao,YC,yao,jh,KC,Lao,voe,xao,NRe,Hi,Dh,Toe,ZC,kao,Moe,Sao,jRe,Uo,ew,Rao,ow,Bao,rB,Pao,$ao,Iao,rw,qao,Eoe,Nao,jao,Dao,Ie,tw,Gao,Coe,Oao,Vao,Ui,Xao,woe,zao,Qao,Aoe,Wao,Hao,Uao,ke,Gh,yoe,Jao,Yao,tB,Kao,Zao,eno,Oh,Loe,ono,rno,aB,tno,ano,nno,Vh,xoe,sno,lno,nB,ino,dno,cno,Xh,koe,fno,mno,sB,gno,hno,pno,zh,Soe,_no,uno,lB,bno,Fno,vno,Qh,Roe,Tno,Mno,iB,Eno,Cno,wno,Wh,Boe,Ano,yno,dB,Lno,xno,kno,Hh,Poe,Sno,Rno,cB,Bno,Pno,$no,Uh,Ino,$oe,qno,Nno,aw,jno,Jh,nw,Dno,Ioe,Gno,DRe,Ji,Yh,qoe,sw,Ono,Noe,Vno,GRe,Jo,lw,Xno,Yi,zno,fB,Qno,Wno,mB,Hno,Uno,Jno,iw,Yno,joe,Kno,Zno,eso,Xr,dw,oso,Doe,rso,tso,Ki,aso,Goe,nso,sso,gB,lso,iso,dso,Ooe,cso,fso,cw,mso,qe,fw,gso,Voe,hso,pso,Xa,_so,Xoe,uso,bso,zoe,Fso,vso,Qoe,Tso,Mso,Eso,T,Kh,Woe,Cso,wso,hB,Aso,yso,Lso,Zh,Hoe,xso,kso,pB,Sso,Rso,Bso,ep,Uoe,Pso,$so,_B,Iso,qso,Nso,op,Joe,jso,Dso,uB,Gso,Oso,Vso,rp,Yoe,Xso,zso,bB,Qso,Wso,Hso,tp,Koe,Uso,Jso,FB,Yso,Kso,Zso,ap,Zoe,elo,olo,vB,rlo,tlo,alo,np,ere,nlo,slo,TB,llo,ilo,dlo,sp,ore,clo,flo,MB,mlo,glo,hlo,lp,rre,plo,_lo,EB,ulo,blo,Flo,ip,tre,vlo,Tlo,CB,Mlo,Elo,Clo,dp,are,wlo,Alo,wB,ylo,Llo,xlo,cp,nre,klo,Slo,AB,Rlo,Blo,Plo,fp,sre,$lo,Ilo,yB,qlo,Nlo,jlo,mp,lre,Dlo,Glo,LB,Olo,Vlo,Xlo,gp,ire,zlo,Qlo,xB,Wlo,Hlo,Ulo,hp,dre,Jlo,Ylo,kB,Klo,Zlo,eio,pp,cre,oio,rio,SB,tio,aio,nio,_p,fre,sio,lio,RB,iio,dio,cio,up,mre,fio,mio,BB,gio,hio,pio,bp,gre,_io,uio,PB,bio,Fio,vio,Fp,hre,Tio,Mio,$B,Eio,Cio,wio,vp,pre,Aio,yio,IB,Lio,xio,kio,Tp,_re,Sio,Rio,qB,Bio,Pio,$io,Mp,ure,Iio,qio,NB,Nio,jio,Dio,Ep,bre,Gio,Oio,jB,Vio,Xio,zio,Cp,Fre,Qio,Wio,DB,Hio,Uio,Jio,wp,vre,Yio,Kio,GB,Zio,edo,odo,Ap,Tre,rdo,tdo,OB,ado,ndo,sdo,yp,Mre,ldo,ido,VB,ddo,cdo,fdo,js,Ere,mdo,gdo,XB,hdo,pdo,zB,_do,udo,bdo,Lp,Cre,Fdo,vdo,QB,Tdo,Mdo,Edo,xp,wre,Cdo,wdo,WB,Ado,ydo,Ldo,kp,Are,xdo,kdo,HB,Sdo,Rdo,Bdo,Sp,yre,Pdo,$do,UB,Ido,qdo,Ndo,Rp,Lre,jdo,Ddo,JB,Gdo,Odo,Vdo,Bp,xre,Xdo,zdo,YB,Qdo,Wdo,Hdo,Pp,kre,Udo,Jdo,KB,Ydo,Kdo,Zdo,$p,Sre,eco,oco,ZB,rco,tco,aco,Ip,Rre,nco,sco,eP,lco,ico,dco,qp,Bre,cco,fco,oP,mco,gco,hco,Np,Pre,pco,_co,rP,uco,bco,Fco,jp,$re,vco,Tco,tP,Mco,Eco,Cco,Dp,Ire,wco,Aco,aP,yco,Lco,xco,Gp,qre,kco,Sco,nP,Rco,Bco,Pco,Op,Nre,$co,Ico,sP,qco,Nco,jco,Vp,jre,Dco,Gco,lP,Oco,Vco,Xco,Xp,Dre,zco,Qco,iP,Wco,Hco,Uco,zp,Gre,Jco,Yco,dP,Kco,Zco,efo,Qp,Ore,ofo,rfo,cP,tfo,afo,nfo,Wp,Vre,sfo,lfo,fP,ifo,dfo,cfo,Hp,Xre,ffo,mfo,mP,gfo,hfo,pfo,Up,zre,_fo,ufo,gP,bfo,Ffo,vfo,Jp,Qre,Tfo,Mfo,hP,Efo,Cfo,wfo,Yp,Wre,Afo,yfo,pP,Lfo,xfo,kfo,Kp,Hre,Sfo,Rfo,_P,Bfo,Pfo,$fo,Zp,Ure,Ifo,qfo,uP,Nfo,jfo,Dfo,e_,Jre,Gfo,Ofo,bP,Vfo,Xfo,zfo,o_,Yre,Qfo,Wfo,FP,Hfo,Ufo,Jfo,r_,Kre,Yfo,Kfo,vP,Zfo,emo,omo,t_,Zre,rmo,tmo,TP,amo,nmo,smo,a_,ete,lmo,imo,MP,dmo,cmo,fmo,n_,ote,mmo,gmo,EP,hmo,pmo,_mo,s_,rte,umo,bmo,CP,Fmo,vmo,Tmo,l_,tte,Mmo,Emo,wP,Cmo,wmo,Amo,i_,ate,ymo,Lmo,AP,xmo,kmo,Smo,d_,nte,Rmo,Bmo,yP,Pmo,$mo,Imo,c_,ste,qmo,Nmo,LP,jmo,Dmo,Gmo,f_,lte,Omo,Vmo,xP,Xmo,zmo,Qmo,m_,ite,Wmo,Hmo,kP,Umo,Jmo,Ymo,g_,dte,Kmo,Zmo,SP,ego,ogo,rgo,h_,cte,tgo,ago,RP,ngo,sgo,lgo,p_,fte,igo,dgo,BP,cgo,fgo,mgo,__,mte,ggo,hgo,PP,pgo,_go,ugo,u_,gte,bgo,Fgo,$P,vgo,Tgo,Mgo,b_,hte,Ego,Cgo,IP,wgo,Ago,ygo,F_,pte,Lgo,xgo,qP,kgo,Sgo,Rgo,v_,_te,Bgo,Pgo,NP,$go,Igo,qgo,T_,ute,Ngo,jgo,jP,Dgo,Ggo,Ogo,M_,bte,Vgo,Xgo,DP,zgo,Qgo,Wgo,E_,Fte,Hgo,Ugo,GP,Jgo,Ygo,Kgo,C_,vte,Zgo,eho,OP,oho,rho,tho,w_,Tte,aho,nho,VP,sho,lho,iho,A_,Mte,dho,cho,XP,fho,mho,gho,y_,Ete,hho,pho,zP,_ho,uho,bho,L_,Cte,Fho,vho,QP,Tho,Mho,Eho,x_,wte,Cho,who,WP,Aho,yho,Lho,k_,Ate,xho,kho,HP,Sho,Rho,Bho,S_,yte,Pho,$ho,UP,Iho,qho,Nho,R_,Lte,jho,Dho,JP,Gho,Oho,Vho,B_,xte,Xho,zho,YP,Qho,Who,Hho,P_,kte,Uho,Jho,KP,Yho,Kho,Zho,$_,Ste,epo,opo,ZP,rpo,tpo,apo,I_,Rte,npo,spo,e$,lpo,ipo,dpo,q_,cpo,Bte,fpo,mpo,Pte,gpo,hpo,$te,ppo,_po,mw,ORe,Zi,N_,Ite,gw,upo,qte,bpo,VRe,Yo,hw,Fpo,ed,vpo,o$,Tpo,Mpo,r$,Epo,Cpo,wpo,pw,Apo,Nte,ypo,Lpo,xpo,zr,_w,kpo,jte,Spo,Rpo,od,Bpo,Dte,Ppo,$po,t$,Ipo,qpo,Npo,Gte,jpo,Dpo,uw,Gpo,Ne,bw,Opo,Ote,Vpo,Xpo,za,zpo,Vte,Qpo,Wpo,Xte,Hpo,Upo,zte,Jpo,Ypo,Kpo,S,j_,Qte,Zpo,e_o,a$,o_o,r_o,t_o,D_,Wte,a_o,n_o,n$,s_o,l_o,i_o,G_,Hte,d_o,c_o,s$,f_o,m_o,g_o,O_,Ute,h_o,p_o,l$,__o,u_o,b_o,V_,Jte,F_o,v_o,i$,T_o,M_o,E_o,X_,Yte,C_o,w_o,d$,A_o,y_o,L_o,z_,Kte,x_o,k_o,c$,S_o,R_o,B_o,Q_,Zte,P_o,$_o,f$,I_o,q_o,N_o,W_,eae,j_o,D_o,m$,G_o,O_o,V_o,H_,oae,X_o,z_o,g$,Q_o,W_o,H_o,U_,rae,U_o,J_o,h$,Y_o,K_o,Z_o,J_,tae,euo,ouo,p$,ruo,tuo,auo,Y_,aae,nuo,suo,_$,luo,iuo,duo,K_,nae,cuo,fuo,u$,muo,guo,huo,Z_,sae,puo,_uo,b$,uuo,buo,Fuo,eu,lae,vuo,Tuo,F$,Muo,Euo,Cuo,ou,iae,wuo,Auo,v$,yuo,Luo,xuo,ru,dae,kuo,Suo,T$,Ruo,Buo,Puo,tu,cae,$uo,Iuo,M$,quo,Nuo,juo,au,fae,Duo,Guo,E$,Ouo,Vuo,Xuo,nu,mae,zuo,Quo,C$,Wuo,Huo,Uuo,su,gae,Juo,Yuo,w$,Kuo,Zuo,e1o,lu,hae,o1o,r1o,A$,t1o,a1o,n1o,iu,pae,s1o,l1o,y$,i1o,d1o,c1o,du,_ae,f1o,m1o,L$,g1o,h1o,p1o,cu,uae,_1o,u1o,x$,b1o,F1o,v1o,fu,bae,T1o,M1o,k$,E1o,C1o,w1o,mu,Fae,A1o,y1o,S$,L1o,x1o,k1o,gu,vae,S1o,R1o,R$,B1o,P1o,$1o,hu,Tae,I1o,q1o,B$,N1o,j1o,D1o,pu,Mae,G1o,O1o,P$,V1o,X1o,z1o,_u,Eae,Q1o,W1o,$$,H1o,U1o,J1o,uu,Cae,Y1o,K1o,I$,Z1o,e7o,o7o,bu,wae,r7o,t7o,q$,a7o,n7o,s7o,Fu,Aae,l7o,i7o,N$,d7o,c7o,f7o,vu,yae,m7o,g7o,j$,h7o,p7o,_7o,Tu,Lae,u7o,b7o,D$,F7o,v7o,T7o,Mu,xae,M7o,E7o,G$,C7o,w7o,A7o,Eu,kae,y7o,L7o,O$,x7o,k7o,S7o,Cu,R7o,Sae,B7o,P7o,Rae,$7o,I7o,Bae,q7o,N7o,Fw,XRe,rd,wu,Pae,vw,j7o,$ae,D7o,zRe,Ko,Tw,G7o,td,O7o,V$,V7o,X7o,X$,z7o,Q7o,W7o,Mw,H7o,Iae,U7o,J7o,Y7o,Qr,Ew,K7o,qae,Z7o,ebo,ad,obo,Nae,rbo,tbo,z$,abo,nbo,sbo,jae,lbo,ibo,Cw,dbo,je,ww,cbo,Dae,fbo,mbo,Qa,gbo,Gae,hbo,pbo,Oae,_bo,ubo,Vae,bbo,Fbo,vbo,$,Au,Xae,Tbo,Mbo,Q$,Ebo,Cbo,wbo,yu,zae,Abo,ybo,W$,Lbo,xbo,kbo,Lu,Qae,Sbo,Rbo,H$,Bbo,Pbo,$bo,xu,Wae,Ibo,qbo,U$,Nbo,jbo,Dbo,ku,Hae,Gbo,Obo,J$,Vbo,Xbo,zbo,Su,Uae,Qbo,Wbo,Y$,Hbo,Ubo,Jbo,Ru,Jae,Ybo,Kbo,K$,Zbo,e5o,o5o,Bu,Yae,r5o,t5o,Z$,a5o,n5o,s5o,Pu,Kae,l5o,i5o,eI,d5o,c5o,f5o,$u,Zae,m5o,g5o,oI,h5o,p5o,_5o,Iu,ene,u5o,b5o,rI,F5o,v5o,T5o,qu,one,M5o,E5o,tI,C5o,w5o,A5o,Nu,rne,y5o,L5o,aI,x5o,k5o,S5o,ju,tne,R5o,B5o,nI,P5o,$5o,I5o,Du,ane,q5o,N5o,sI,j5o,D5o,G5o,Gu,nne,O5o,V5o,lI,X5o,z5o,Q5o,Ou,sne,W5o,H5o,iI,U5o,J5o,Y5o,Vu,lne,K5o,Z5o,dI,e3o,o3o,r3o,Xu,ine,t3o,a3o,cI,n3o,s3o,l3o,zu,dne,i3o,d3o,fI,c3o,f3o,m3o,Qu,cne,g3o,h3o,mI,p3o,_3o,u3o,Wu,fne,b3o,F3o,gI,v3o,T3o,M3o,Hu,mne,E3o,C3o,hI,w3o,A3o,y3o,Uu,gne,L3o,x3o,pI,k3o,S3o,R3o,Ju,hne,B3o,P3o,_I,$3o,I3o,q3o,Yu,pne,N3o,j3o,uI,D3o,G3o,O3o,Ku,_ne,V3o,X3o,bI,z3o,Q3o,W3o,Zu,une,H3o,U3o,FI,J3o,Y3o,K3o,e1,bne,Z3o,e2o,vI,o2o,r2o,t2o,o1,Fne,a2o,n2o,TI,s2o,l2o,i2o,r1,vne,d2o,c2o,MI,f2o,m2o,g2o,t1,Tne,h2o,p2o,EI,_2o,u2o,b2o,a1,Mne,F2o,v2o,CI,T2o,M2o,E2o,n1,Ene,C2o,w2o,wI,A2o,y2o,L2o,s1,Cne,x2o,k2o,AI,S2o,R2o,B2o,l1,P2o,wne,$2o,I2o,Ane,q2o,N2o,yne,j2o,D2o,Aw,QRe,nd,i1,Lne,yw,G2o,xne,O2o,WRe,Zo,Lw,V2o,sd,X2o,yI,z2o,Q2o,LI,W2o,H2o,U2o,xw,J2o,kne,Y2o,K2o,Z2o,Wr,kw,eFo,Sne,oFo,rFo,ld,tFo,Rne,aFo,nFo,xI,sFo,lFo,iFo,Bne,dFo,cFo,Sw,fFo,De,Rw,mFo,Pne,gFo,hFo,Wa,pFo,$ne,_Fo,uFo,Ine,bFo,FFo,qne,vFo,TFo,MFo,I,d1,Nne,EFo,CFo,kI,wFo,AFo,yFo,c1,jne,LFo,xFo,SI,kFo,SFo,RFo,f1,Dne,BFo,PFo,RI,$Fo,IFo,qFo,m1,Gne,NFo,jFo,BI,DFo,GFo,OFo,g1,One,VFo,XFo,PI,zFo,QFo,WFo,h1,Vne,HFo,UFo,$I,JFo,YFo,KFo,p1,Xne,ZFo,evo,II,ovo,rvo,tvo,_1,zne,avo,nvo,qI,svo,lvo,ivo,u1,Qne,dvo,cvo,NI,fvo,mvo,gvo,b1,Wne,hvo,pvo,jI,_vo,uvo,bvo,F1,Hne,Fvo,vvo,DI,Tvo,Mvo,Evo,v1,Une,Cvo,wvo,GI,Avo,yvo,Lvo,T1,Jne,xvo,kvo,OI,Svo,Rvo,Bvo,M1,Yne,Pvo,$vo,VI,Ivo,qvo,Nvo,E1,Kne,jvo,Dvo,XI,Gvo,Ovo,Vvo,C1,Zne,Xvo,zvo,zI,Qvo,Wvo,Hvo,w1,ese,Uvo,Jvo,QI,Yvo,Kvo,Zvo,A1,ose,eTo,oTo,WI,rTo,tTo,aTo,y1,rse,nTo,sTo,HI,lTo,iTo,dTo,L1,tse,cTo,fTo,UI,mTo,gTo,hTo,x1,ase,pTo,_To,JI,uTo,bTo,FTo,k1,nse,vTo,TTo,YI,MTo,ETo,CTo,S1,sse,wTo,ATo,KI,yTo,LTo,xTo,R1,lse,kTo,STo,ZI,RTo,BTo,PTo,B1,ise,$To,ITo,eq,qTo,NTo,jTo,P1,dse,DTo,GTo,oq,OTo,VTo,XTo,$1,cse,zTo,QTo,rq,WTo,HTo,UTo,I1,fse,JTo,YTo,tq,KTo,ZTo,eMo,q1,mse,oMo,rMo,aq,tMo,aMo,nMo,N1,gse,sMo,lMo,nq,iMo,dMo,cMo,j1,hse,fMo,mMo,pse,gMo,hMo,pMo,D1,_se,_Mo,uMo,sq,bMo,FMo,vMo,G1,use,TMo,MMo,lq,EMo,CMo,wMo,O1,bse,AMo,yMo,iq,LMo,xMo,kMo,V1,Fse,SMo,RMo,dq,BMo,PMo,$Mo,X1,IMo,vse,qMo,NMo,Tse,jMo,DMo,Mse,GMo,OMo,Bw,HRe,id,z1,Ese,Pw,VMo,Cse,XMo,URe,er,$w,zMo,dd,QMo,cq,WMo,HMo,fq,UMo,JMo,YMo,Iw,KMo,wse,ZMo,e4o,o4o,Hr,qw,r4o,Ase,t4o,a4o,cd,n4o,yse,s4o,l4o,mq,i4o,d4o,c4o,Lse,f4o,m4o,Nw,g4o,Ge,jw,h4o,xse,p4o,_4o,Ha,u4o,kse,b4o,F4o,Sse,v4o,T4o,Rse,M4o,E4o,C4o,ne,Q1,Bse,w4o,A4o,gq,y4o,L4o,x4o,W1,Pse,k4o,S4o,hq,R4o,B4o,P4o,H1,$se,$4o,I4o,pq,q4o,N4o,j4o,U1,Ise,D4o,G4o,_q,O4o,V4o,X4o,J1,qse,z4o,Q4o,uq,W4o,H4o,U4o,Y1,Nse,J4o,Y4o,bq,K4o,Z4o,eEo,K1,jse,oEo,rEo,Fq,tEo,aEo,nEo,Z1,Dse,sEo,lEo,vq,iEo,dEo,cEo,e7,Gse,fEo,mEo,Tq,gEo,hEo,pEo,o7,Ose,_Eo,uEo,Mq,bEo,FEo,vEo,r7,Vse,TEo,MEo,Eq,EEo,CEo,wEo,t7,Xse,AEo,yEo,Cq,LEo,xEo,kEo,a7,zse,SEo,REo,wq,BEo,PEo,$Eo,n7,Qse,IEo,qEo,Aq,NEo,jEo,DEo,s7,Wse,GEo,OEo,yq,VEo,XEo,zEo,l7,Hse,QEo,WEo,Lq,HEo,UEo,JEo,i7,Use,YEo,KEo,xq,ZEo,eCo,oCo,d7,rCo,Jse,tCo,aCo,Yse,nCo,sCo,Kse,lCo,iCo,Dw,JRe,fd,c7,Zse,Gw,dCo,ele,cCo,YRe,or,Ow,fCo,md,mCo,kq,gCo,hCo,Sq,pCo,_Co,uCo,Vw,bCo,ole,FCo,vCo,TCo,Ur,Xw,MCo,rle,ECo,CCo,gd,wCo,tle,ACo,yCo,Rq,LCo,xCo,kCo,ale,SCo,RCo,zw,BCo,Oe,Qw,PCo,nle,$Co,ICo,Ua,qCo,sle,NCo,jCo,lle,DCo,GCo,ile,OCo,VCo,XCo,y,f7,dle,zCo,QCo,Bq,WCo,HCo,UCo,m7,cle,JCo,YCo,Pq,KCo,ZCo,ewo,g7,fle,owo,rwo,$q,two,awo,nwo,h7,mle,swo,lwo,Iq,iwo,dwo,cwo,p7,gle,fwo,mwo,qq,gwo,hwo,pwo,_7,hle,_wo,uwo,Nq,bwo,Fwo,vwo,u7,ple,Two,Mwo,jq,Ewo,Cwo,wwo,b7,_le,Awo,ywo,Dq,Lwo,xwo,kwo,F7,ule,Swo,Rwo,Gq,Bwo,Pwo,$wo,v7,ble,Iwo,qwo,Oq,Nwo,jwo,Dwo,T7,Fle,Gwo,Owo,Vq,Vwo,Xwo,zwo,M7,vle,Qwo,Wwo,Xq,Hwo,Uwo,Jwo,E7,Tle,Ywo,Kwo,zq,Zwo,eAo,oAo,C7,Mle,rAo,tAo,Qq,aAo,nAo,sAo,w7,Ele,lAo,iAo,Wq,dAo,cAo,fAo,A7,Cle,mAo,gAo,Hq,hAo,pAo,_Ao,y7,wle,uAo,bAo,Uq,FAo,vAo,TAo,L7,Ale,MAo,EAo,Jq,CAo,wAo,AAo,x7,yle,yAo,LAo,Yq,xAo,kAo,SAo,k7,Lle,RAo,BAo,Kq,PAo,$Ao,IAo,S7,xle,qAo,NAo,Zq,jAo,DAo,GAo,R7,kle,OAo,VAo,eN,XAo,zAo,QAo,B7,Sle,WAo,HAo,oN,UAo,JAo,YAo,P7,Rle,KAo,ZAo,rN,e6o,o6o,r6o,$7,Ble,t6o,a6o,tN,n6o,s6o,l6o,I7,Ple,i6o,d6o,aN,c6o,f6o,m6o,q7,$le,g6o,h6o,nN,p6o,_6o,u6o,N7,Ile,b6o,F6o,sN,v6o,T6o,M6o,j7,qle,E6o,C6o,lN,w6o,A6o,y6o,D7,Nle,L6o,x6o,iN,k6o,S6o,R6o,G7,jle,B6o,P6o,dN,$6o,I6o,q6o,O7,Dle,N6o,j6o,cN,D6o,G6o,O6o,V7,Gle,V6o,X6o,fN,z6o,Q6o,W6o,X7,Ole,H6o,U6o,mN,J6o,Y6o,K6o,z7,Vle,Z6o,e0o,gN,o0o,r0o,t0o,Q7,Xle,a0o,n0o,hN,s0o,l0o,i0o,W7,zle,d0o,c0o,pN,f0o,m0o,g0o,H7,Qle,h0o,p0o,_N,_0o,u0o,b0o,U7,Wle,F0o,v0o,uN,T0o,M0o,E0o,J7,Hle,C0o,w0o,bN,A0o,y0o,L0o,Y7,Ule,x0o,k0o,FN,S0o,R0o,B0o,K7,Jle,P0o,$0o,vN,I0o,q0o,N0o,Z7,Yle,j0o,D0o,TN,G0o,O0o,V0o,eb,Kle,X0o,z0o,MN,Q0o,W0o,H0o,ob,Zle,U0o,J0o,EN,Y0o,K0o,Z0o,rb,eie,eyo,oyo,CN,ryo,tyo,ayo,tb,oie,nyo,syo,wN,lyo,iyo,dyo,ab,cyo,rie,fyo,myo,tie,gyo,hyo,aie,pyo,_yo,Ww,KRe,hd,nb,nie,Hw,uyo,sie,byo,ZRe,rr,Uw,Fyo,pd,vyo,AN,Tyo,Myo,yN,Eyo,Cyo,wyo,Jw,Ayo,lie,yyo,Lyo,xyo,Jr,Yw,kyo,iie,Syo,Ryo,_d,Byo,die,Pyo,$yo,LN,Iyo,qyo,Nyo,cie,jyo,Dyo,Kw,Gyo,Ve,Zw,Oyo,fie,Vyo,Xyo,Ja,zyo,mie,Qyo,Wyo,gie,Hyo,Uyo,hie,Jyo,Yyo,Kyo,G,sb,pie,Zyo,eLo,xN,oLo,rLo,tLo,lb,_ie,aLo,nLo,kN,sLo,lLo,iLo,ib,uie,dLo,cLo,SN,fLo,mLo,gLo,db,bie,hLo,pLo,RN,_Lo,uLo,bLo,cb,Fie,FLo,vLo,BN,TLo,MLo,ELo,fb,vie,CLo,wLo,PN,ALo,yLo,LLo,mb,Tie,xLo,kLo,$N,SLo,RLo,BLo,gb,Mie,PLo,$Lo,IN,ILo,qLo,NLo,hb,Eie,jLo,DLo,qN,GLo,OLo,VLo,pb,Cie,XLo,zLo,NN,QLo,WLo,HLo,_b,wie,ULo,JLo,jN,YLo,KLo,ZLo,ub,Aie,e8o,o8o,DN,r8o,t8o,a8o,bb,yie,n8o,s8o,GN,l8o,i8o,d8o,Fb,Lie,c8o,f8o,ON,m8o,g8o,h8o,vb,xie,p8o,_8o,VN,u8o,b8o,F8o,Tb,kie,v8o,T8o,XN,M8o,E8o,C8o,Mb,Sie,w8o,A8o,zN,y8o,L8o,x8o,Eb,Rie,k8o,S8o,QN,R8o,B8o,P8o,Cb,Bie,$8o,I8o,WN,q8o,N8o,j8o,wb,Pie,D8o,G8o,HN,O8o,V8o,X8o,Ab,$ie,z8o,Q8o,UN,W8o,H8o,U8o,yb,Iie,J8o,Y8o,JN,K8o,Z8o,e9o,Lb,qie,o9o,r9o,YN,t9o,a9o,n9o,xb,Nie,s9o,l9o,KN,i9o,d9o,c9o,kb,jie,f9o,m9o,ZN,g9o,h9o,p9o,Sb,Die,_9o,u9o,ej,b9o,F9o,v9o,Rb,Gie,T9o,M9o,oj,E9o,C9o,w9o,Bb,Oie,A9o,y9o,rj,L9o,x9o,k9o,Pb,S9o,Vie,R9o,B9o,Xie,P9o,$9o,zie,I9o,q9o,eA,eBe,ud,$b,Qie,oA,N9o,Wie,j9o,oBe,tr,rA,D9o,bd,G9o,tj,O9o,V9o,aj,X9o,z9o,Q9o,tA,W9o,Hie,H9o,U9o,J9o,Yr,aA,Y9o,Uie,K9o,Z9o,Fd,exo,Jie,oxo,rxo,nj,txo,axo,nxo,Yie,sxo,lxo,nA,ixo,Xe,sA,dxo,Kie,cxo,fxo,Ya,mxo,Zie,gxo,hxo,ede,pxo,_xo,ode,uxo,bxo,Fxo,da,Ib,rde,vxo,Txo,sj,Mxo,Exo,Cxo,qb,tde,wxo,Axo,lj,yxo,Lxo,xxo,Nb,ade,kxo,Sxo,ij,Rxo,Bxo,Pxo,jb,nde,$xo,Ixo,dj,qxo,Nxo,jxo,Db,sde,Dxo,Gxo,cj,Oxo,Vxo,Xxo,Gb,zxo,lde,Qxo,Wxo,ide,Hxo,Uxo,dde,Jxo,Yxo,lA,rBe,vd,Ob,cde,iA,Kxo,fde,Zxo,tBe,ar,dA,eko,Td,oko,fj,rko,tko,mj,ako,nko,sko,cA,lko,mde,iko,dko,cko,Kr,fA,fko,gde,mko,gko,Md,hko,hde,pko,_ko,gj,uko,bko,Fko,pde,vko,Tko,mA,Mko,ze,gA,Eko,_de,Cko,wko,Ka,Ako,ude,yko,Lko,bde,xko,kko,Fde,Sko,Rko,Bko,j,Vb,vde,Pko,$ko,hj,Iko,qko,Nko,Xb,Tde,jko,Dko,pj,Gko,Oko,Vko,zb,Mde,Xko,zko,_j,Qko,Wko,Hko,Qb,Ede,Uko,Jko,uj,Yko,Kko,Zko,Wb,Cde,eSo,oSo,bj,rSo,tSo,aSo,Hb,wde,nSo,sSo,Fj,lSo,iSo,dSo,Ub,Ade,cSo,fSo,vj,mSo,gSo,hSo,Jb,yde,pSo,_So,Tj,uSo,bSo,FSo,Yb,Lde,vSo,TSo,Mj,MSo,ESo,CSo,Kb,xde,wSo,ASo,Ej,ySo,LSo,xSo,Zb,kde,kSo,SSo,Cj,RSo,BSo,PSo,e5,Sde,$So,ISo,wj,qSo,NSo,jSo,o5,Rde,DSo,GSo,Aj,OSo,VSo,XSo,r5,Bde,zSo,QSo,yj,WSo,HSo,USo,t5,Pde,JSo,YSo,Lj,KSo,ZSo,eRo,a5,$de,oRo,rRo,xj,tRo,aRo,nRo,n5,Ide,sRo,lRo,kj,iRo,dRo,cRo,s5,qde,fRo,mRo,Sj,gRo,hRo,pRo,l5,Nde,_Ro,uRo,Rj,bRo,FRo,vRo,i5,jde,TRo,MRo,Bj,ERo,CRo,wRo,d5,Dde,ARo,yRo,Pj,LRo,xRo,kRo,c5,Gde,SRo,RRo,$j,BRo,PRo,$Ro,f5,Ode,IRo,qRo,Ij,NRo,jRo,DRo,m5,Vde,GRo,ORo,qj,VRo,XRo,zRo,g5,Xde,QRo,WRo,Nj,HRo,URo,JRo,h5,zde,YRo,KRo,jj,ZRo,eBo,oBo,p5,Qde,rBo,tBo,Dj,aBo,nBo,sBo,_5,Wde,lBo,iBo,Gj,dBo,cBo,fBo,u5,Hde,mBo,gBo,Oj,hBo,pBo,_Bo,b5,Ude,uBo,bBo,Vj,FBo,vBo,TBo,F5,Jde,MBo,EBo,Xj,CBo,wBo,ABo,v5,Yde,yBo,LBo,zj,xBo,kBo,SBo,T5,Kde,RBo,BBo,Qj,PBo,$Bo,IBo,M5,qBo,Zde,NBo,jBo,ece,DBo,GBo,oce,OBo,VBo,hA,aBe,Ed,E5,rce,pA,XBo,tce,zBo,nBe,nr,_A,QBo,Cd,WBo,Wj,HBo,UBo,Hj,JBo,YBo,KBo,uA,ZBo,ace,ePo,oPo,rPo,Zr,bA,tPo,nce,aPo,nPo,wd,sPo,sce,lPo,iPo,Uj,dPo,cPo,fPo,lce,mPo,gPo,FA,hPo,Qe,vA,pPo,ice,_Po,uPo,Za,bPo,dce,FPo,vPo,cce,TPo,MPo,fce,EPo,CPo,wPo,R,C5,mce,APo,yPo,Jj,LPo,xPo,kPo,w5,gce,SPo,RPo,Yj,BPo,PPo,$Po,A5,hce,IPo,qPo,Kj,NPo,jPo,DPo,y5,pce,GPo,OPo,Zj,VPo,XPo,zPo,L5,_ce,QPo,WPo,eD,HPo,UPo,JPo,x5,uce,YPo,KPo,oD,ZPo,e$o,o$o,k5,bce,r$o,t$o,rD,a$o,n$o,s$o,S5,Fce,l$o,i$o,tD,d$o,c$o,f$o,R5,vce,m$o,g$o,aD,h$o,p$o,_$o,B5,Tce,u$o,b$o,nD,F$o,v$o,T$o,P5,Mce,M$o,E$o,sD,C$o,w$o,A$o,$5,Ece,y$o,L$o,lD,x$o,k$o,S$o,I5,Cce,R$o,B$o,iD,P$o,$$o,I$o,q5,wce,q$o,N$o,dD,j$o,D$o,G$o,N5,Ace,O$o,V$o,cD,X$o,z$o,Q$o,j5,yce,W$o,H$o,fD,U$o,J$o,Y$o,D5,Lce,K$o,Z$o,mD,eIo,oIo,rIo,G5,xce,tIo,aIo,gD,nIo,sIo,lIo,O5,kce,iIo,dIo,hD,cIo,fIo,mIo,V5,Sce,gIo,hIo,pD,pIo,_Io,uIo,X5,Rce,bIo,FIo,_D,vIo,TIo,MIo,z5,Bce,EIo,CIo,uD,wIo,AIo,yIo,Q5,Pce,LIo,xIo,bD,kIo,SIo,RIo,W5,$ce,BIo,PIo,FD,$Io,IIo,qIo,H5,Ice,NIo,jIo,vD,DIo,GIo,OIo,U5,qce,VIo,XIo,TD,zIo,QIo,WIo,J5,Nce,HIo,UIo,MD,JIo,YIo,KIo,Y5,jce,ZIo,eqo,ED,oqo,rqo,tqo,K5,Dce,aqo,nqo,CD,sqo,lqo,iqo,Z5,Gce,dqo,cqo,wD,fqo,mqo,gqo,e3,Oce,hqo,pqo,AD,_qo,uqo,bqo,o3,Vce,Fqo,vqo,yD,Tqo,Mqo,Eqo,r3,Xce,Cqo,wqo,LD,Aqo,yqo,Lqo,t3,zce,xqo,kqo,xD,Sqo,Rqo,Bqo,a3,Qce,Pqo,$qo,kD,Iqo,qqo,Nqo,n3,Wce,jqo,Dqo,SD,Gqo,Oqo,Vqo,s3,Hce,Xqo,zqo,RD,Qqo,Wqo,Hqo,l3,Uce,Uqo,Jqo,BD,Yqo,Kqo,Zqo,i3,Jce,eNo,oNo,PD,rNo,tNo,aNo,d3,nNo,Yce,sNo,lNo,Kce,iNo,dNo,Zce,cNo,fNo,TA,sBe,Ad,c3,efe,MA,mNo,ofe,gNo,lBe,sr,EA,hNo,yd,pNo,$D,_No,uNo,ID,bNo,FNo,vNo,CA,TNo,rfe,MNo,ENo,CNo,et,wA,wNo,tfe,ANo,yNo,Ld,LNo,afe,xNo,kNo,qD,SNo,RNo,BNo,nfe,PNo,$No,AA,INo,We,yA,qNo,sfe,NNo,jNo,en,DNo,lfe,GNo,ONo,ife,VNo,XNo,dfe,zNo,QNo,WNo,cfe,f3,ffe,HNo,UNo,ND,JNo,YNo,KNo,m3,ZNo,mfe,ejo,ojo,gfe,rjo,tjo,hfe,ajo,njo,LA,iBe,xd,g3,pfe,xA,sjo,_fe,ljo,dBe,lr,kA,ijo,kd,djo,jD,cjo,fjo,DD,mjo,gjo,hjo,SA,pjo,ufe,_jo,ujo,bjo,ot,RA,Fjo,bfe,vjo,Tjo,Sd,Mjo,Ffe,Ejo,Cjo,GD,wjo,Ajo,yjo,vfe,Ljo,xjo,BA,kjo,He,PA,Sjo,Tfe,Rjo,Bjo,on,Pjo,Mfe,$jo,Ijo,Efe,qjo,Njo,Cfe,jjo,Djo,Gjo,ce,h3,wfe,Ojo,Vjo,OD,Xjo,zjo,Qjo,p3,Afe,Wjo,Hjo,VD,Ujo,Jjo,Yjo,Ds,yfe,Kjo,Zjo,XD,eDo,oDo,zD,rDo,tDo,aDo,_3,Lfe,nDo,sDo,QD,lDo,iDo,dDo,ma,xfe,cDo,fDo,WD,mDo,gDo,HD,hDo,pDo,UD,_Do,uDo,bDo,u3,kfe,FDo,vDo,JD,TDo,MDo,EDo,b3,Sfe,CDo,wDo,YD,ADo,yDo,LDo,F3,Rfe,xDo,kDo,KD,SDo,RDo,BDo,v3,Bfe,PDo,$Do,ZD,IDo,qDo,NDo,T3,Pfe,jDo,DDo,eG,GDo,ODo,VDo,M3,$fe,XDo,zDo,oG,QDo,WDo,HDo,E3,Ife,UDo,JDo,rG,YDo,KDo,ZDo,C3,eGo,qfe,oGo,rGo,Nfe,tGo,aGo,jfe,nGo,sGo,$A,cBe,Rd,w3,Dfe,IA,lGo,Gfe,iGo,fBe,ir,qA,dGo,Bd,cGo,tG,fGo,mGo,aG,gGo,hGo,pGo,NA,_Go,Ofe,uGo,bGo,FGo,rt,jA,vGo,Vfe,TGo,MGo,Pd,EGo,Xfe,CGo,wGo,nG,AGo,yGo,LGo,zfe,xGo,kGo,DA,SGo,Ue,GA,RGo,Qfe,BGo,PGo,rn,$Go,Wfe,IGo,qGo,Hfe,NGo,jGo,Ufe,DGo,GGo,OGo,Jfe,A3,Yfe,VGo,XGo,sG,zGo,QGo,WGo,y3,HGo,Kfe,UGo,JGo,Zfe,YGo,KGo,eme,ZGo,eOo,OA,mBe,$d,L3,ome,VA,oOo,rme,rOo,gBe,dr,XA,tOo,Id,aOo,lG,nOo,sOo,iG,lOo,iOo,dOo,zA,cOo,tme,fOo,mOo,gOo,tt,QA,hOo,ame,pOo,_Oo,qd,uOo,nme,bOo,FOo,dG,vOo,TOo,MOo,sme,EOo,COo,WA,wOo,Je,HA,AOo,lme,yOo,LOo,tn,xOo,ime,kOo,SOo,dme,ROo,BOo,cme,POo,$Oo,IOo,Se,x3,fme,qOo,NOo,cG,jOo,DOo,GOo,k3,mme,OOo,VOo,fG,XOo,zOo,QOo,S3,gme,WOo,HOo,mG,UOo,JOo,YOo,R3,hme,KOo,ZOo,gG,eVo,oVo,rVo,B3,pme,tVo,aVo,hG,nVo,sVo,lVo,P3,_me,iVo,dVo,pG,cVo,fVo,mVo,$3,ume,gVo,hVo,_G,pVo,_Vo,uVo,I3,bme,bVo,FVo,uG,vVo,TVo,MVo,q3,EVo,Fme,CVo,wVo,vme,AVo,yVo,Tme,LVo,xVo,UA,hBe,Nd,N3,Mme,JA,kVo,Eme,SVo,pBe,cr,YA,RVo,jd,BVo,bG,PVo,$Vo,FG,IVo,qVo,NVo,KA,jVo,Cme,DVo,GVo,OVo,at,ZA,VVo,wme,XVo,zVo,Dd,QVo,Ame,WVo,HVo,vG,UVo,JVo,YVo,yme,KVo,ZVo,e6,eXo,Ye,o6,oXo,Lme,rXo,tXo,an,aXo,xme,nXo,sXo,kme,lXo,iXo,Sme,dXo,cXo,fXo,nn,j3,Rme,mXo,gXo,TG,hXo,pXo,_Xo,D3,Bme,uXo,bXo,MG,FXo,vXo,TXo,G3,Pme,MXo,EXo,EG,CXo,wXo,AXo,O3,$me,yXo,LXo,CG,xXo,kXo,SXo,V3,RXo,Ime,BXo,PXo,qme,$Xo,IXo,Nme,qXo,NXo,r6,_Be,Gd,X3,jme,t6,jXo,Dme,DXo,uBe,fr,a6,GXo,Od,OXo,wG,VXo,XXo,AG,zXo,QXo,WXo,n6,HXo,Gme,UXo,JXo,YXo,nt,s6,KXo,Ome,ZXo,ezo,Vd,ozo,Vme,rzo,tzo,yG,azo,nzo,szo,Xme,lzo,izo,l6,dzo,Ke,i6,czo,zme,fzo,mzo,sn,gzo,Qme,hzo,pzo,Wme,_zo,uzo,Hme,bzo,Fzo,vzo,Re,z3,Ume,Tzo,Mzo,LG,Ezo,Czo,wzo,Q3,Jme,Azo,yzo,xG,Lzo,xzo,kzo,W3,Yme,Szo,Rzo,kG,Bzo,Pzo,$zo,H3,Kme,Izo,qzo,SG,Nzo,jzo,Dzo,U3,Zme,Gzo,Ozo,RG,Vzo,Xzo,zzo,J3,ege,Qzo,Wzo,BG,Hzo,Uzo,Jzo,Y3,oge,Yzo,Kzo,PG,Zzo,eQo,oQo,K3,rge,rQo,tQo,$G,aQo,nQo,sQo,Z3,lQo,tge,iQo,dQo,age,cQo,fQo,nge,mQo,gQo,d6,bBe,Xd,e2,sge,c6,hQo,lge,pQo,FBe,mr,f6,_Qo,zd,uQo,IG,bQo,FQo,qG,vQo,TQo,MQo,m6,EQo,ige,CQo,wQo,AQo,st,g6,yQo,dge,LQo,xQo,Qd,kQo,cge,SQo,RQo,NG,BQo,PQo,$Qo,fge,IQo,qQo,h6,NQo,Ze,p6,jQo,mge,DQo,GQo,ln,OQo,gge,VQo,XQo,hge,zQo,QQo,pge,WQo,HQo,UQo,_6,o2,_ge,JQo,YQo,jG,KQo,ZQo,eWo,r2,uge,oWo,rWo,DG,tWo,aWo,nWo,t2,sWo,bge,lWo,iWo,Fge,dWo,cWo,vge,fWo,mWo,u6,vBe,Wd,a2,Tge,b6,gWo,Mge,hWo,TBe,gr,F6,pWo,Hd,_Wo,GG,uWo,bWo,OG,FWo,vWo,TWo,v6,MWo,Ege,EWo,CWo,wWo,lt,T6,AWo,Cge,yWo,LWo,Ud,xWo,wge,kWo,SWo,VG,RWo,BWo,PWo,Age,$Wo,IWo,M6,qWo,eo,E6,NWo,yge,jWo,DWo,dn,GWo,Lge,OWo,VWo,xge,XWo,zWo,kge,QWo,WWo,HWo,cn,n2,Sge,UWo,JWo,XG,YWo,KWo,ZWo,s2,Rge,eHo,oHo,zG,rHo,tHo,aHo,l2,Bge,nHo,sHo,QG,lHo,iHo,dHo,i2,Pge,cHo,fHo,WG,mHo,gHo,hHo,d2,pHo,$ge,_Ho,uHo,Ige,bHo,FHo,qge,vHo,THo,C6,MBe,Jd,c2,Nge,w6,MHo,jge,EHo,EBe,hr,A6,CHo,Yd,wHo,HG,AHo,yHo,UG,LHo,xHo,kHo,y6,SHo,Dge,RHo,BHo,PHo,it,L6,$Ho,Gge,IHo,qHo,Kd,NHo,Oge,jHo,DHo,JG,GHo,OHo,VHo,Vge,XHo,zHo,x6,QHo,oo,k6,WHo,Xge,HHo,UHo,fn,JHo,zge,YHo,KHo,Qge,ZHo,eUo,Wge,oUo,rUo,tUo,Zd,f2,Hge,aUo,nUo,YG,sUo,lUo,iUo,m2,Uge,dUo,cUo,KG,fUo,mUo,gUo,g2,Jge,hUo,pUo,ZG,_Uo,uUo,bUo,h2,FUo,Yge,vUo,TUo,Kge,MUo,EUo,Zge,CUo,wUo,S6,CBe,ec,p2,ehe,R6,AUo,ohe,yUo,wBe,pr,B6,LUo,oc,xUo,eO,kUo,SUo,oO,RUo,BUo,PUo,P6,$Uo,rhe,IUo,qUo,NUo,dt,$6,jUo,the,DUo,GUo,rc,OUo,ahe,VUo,XUo,rO,zUo,QUo,WUo,nhe,HUo,UUo,I6,JUo,ro,q6,YUo,she,KUo,ZUo,mn,eJo,lhe,oJo,rJo,ihe,tJo,aJo,dhe,nJo,sJo,lJo,che,_2,fhe,iJo,dJo,tO,cJo,fJo,mJo,u2,gJo,mhe,hJo,pJo,ghe,_Jo,uJo,hhe,bJo,FJo,N6,ABe,tc,b2,phe,j6,vJo,_he,TJo,yBe,_r,D6,MJo,ac,EJo,aO,CJo,wJo,nO,AJo,yJo,LJo,G6,xJo,uhe,kJo,SJo,RJo,ct,O6,BJo,bhe,PJo,$Jo,nc,IJo,Fhe,qJo,NJo,sO,jJo,DJo,GJo,vhe,OJo,VJo,V6,XJo,to,X6,zJo,The,QJo,WJo,gn,HJo,Mhe,UJo,JJo,Ehe,YJo,KJo,Che,ZJo,eYo,oYo,whe,F2,Ahe,rYo,tYo,lO,aYo,nYo,sYo,v2,lYo,yhe,iYo,dYo,Lhe,cYo,fYo,xhe,mYo,gYo,z6,LBe,sc,T2,khe,Q6,hYo,She,pYo,xBe,ur,W6,_Yo,lc,uYo,iO,bYo,FYo,dO,vYo,TYo,MYo,H6,EYo,Rhe,CYo,wYo,AYo,ft,U6,yYo,Bhe,LYo,xYo,ic,kYo,Phe,SYo,RYo,cO,BYo,PYo,$Yo,$he,IYo,qYo,J6,NYo,ao,Y6,jYo,Ihe,DYo,GYo,hn,OYo,qhe,VYo,XYo,Nhe,zYo,QYo,jhe,WYo,HYo,UYo,dc,M2,Dhe,JYo,YYo,fO,KYo,ZYo,eKo,E2,Ghe,oKo,rKo,mO,tKo,aKo,nKo,C2,Ohe,sKo,lKo,gO,iKo,dKo,cKo,w2,fKo,Vhe,mKo,gKo,Xhe,hKo,pKo,zhe,_Ko,uKo,K6,kBe,cc,A2,Qhe,Z6,bKo,Whe,FKo,SBe,br,e0,vKo,fc,TKo,hO,MKo,EKo,pO,CKo,wKo,AKo,o0,yKo,Hhe,LKo,xKo,kKo,mt,r0,SKo,Uhe,RKo,BKo,mc,PKo,Jhe,$Ko,IKo,_O,qKo,NKo,jKo,Yhe,DKo,GKo,t0,OKo,no,a0,VKo,Khe,XKo,zKo,pn,QKo,Zhe,WKo,HKo,epe,UKo,JKo,ope,YKo,KKo,ZKo,rpe,y2,tpe,eZo,oZo,uO,rZo,tZo,aZo,L2,nZo,ape,sZo,lZo,npe,iZo,dZo,spe,cZo,fZo,n0,RBe,gc,x2,lpe,s0,mZo,ipe,gZo,BBe,Fr,l0,hZo,hc,pZo,bO,_Zo,uZo,FO,bZo,FZo,vZo,i0,TZo,dpe,MZo,EZo,CZo,gt,d0,wZo,cpe,AZo,yZo,pc,LZo,fpe,xZo,kZo,vO,SZo,RZo,BZo,mpe,PZo,$Zo,c0,IZo,ho,f0,qZo,gpe,NZo,jZo,_n,DZo,hpe,GZo,OZo,ppe,VZo,XZo,_pe,zZo,QZo,WZo,x,k2,upe,HZo,UZo,TO,JZo,YZo,KZo,S2,bpe,ZZo,eer,MO,oer,rer,ter,R2,Fpe,aer,ner,EO,ser,ler,ier,B2,vpe,der,cer,CO,fer,mer,ger,P2,Tpe,her,per,wO,_er,uer,ber,$2,Mpe,Fer,ver,AO,Ter,Mer,Eer,I2,Epe,Cer,wer,yO,Aer,yer,Ler,q2,Cpe,xer,ker,LO,Ser,Rer,Ber,N2,wpe,Per,$er,xO,Ier,qer,Ner,j2,Ape,jer,Der,kO,Ger,Oer,Ver,D2,ype,Xer,zer,SO,Qer,Wer,Her,G2,Lpe,Uer,Jer,RO,Yer,Ker,Zer,O2,xpe,eor,oor,BO,ror,tor,aor,V2,kpe,nor,sor,PO,lor,ior,dor,X2,Spe,cor,mor,$O,gor,hor,por,z2,Rpe,_or,uor,IO,bor,For,vor,Gs,Bpe,Tor,Mor,qO,Eor,Cor,NO,wor,Aor,yor,Q2,Ppe,Lor,xor,jO,kor,Sor,Ror,W2,$pe,Bor,Por,DO,$or,Ior,qor,H2,Ipe,Nor,jor,GO,Dor,Gor,Oor,U2,qpe,Vor,Xor,OO,zor,Qor,Wor,J2,Npe,Hor,Uor,VO,Jor,Yor,Kor,Y2,jpe,Zor,err,XO,orr,rrr,trr,K2,Dpe,arr,nrr,zO,srr,lrr,irr,Z2,Gpe,drr,crr,QO,frr,mrr,grr,eF,Ope,hrr,prr,WO,_rr,urr,brr,oF,Vpe,Frr,vrr,HO,Trr,Mrr,Err,rF,Xpe,Crr,wrr,UO,Arr,yrr,Lrr,tF,zpe,xrr,krr,JO,Srr,Rrr,Brr,aF,Qpe,Prr,$rr,YO,Irr,qrr,Nrr,nF,Wpe,jrr,Drr,KO,Grr,Orr,Vrr,sF,Hpe,Xrr,zrr,ZO,Qrr,Wrr,Hrr,lF,Upe,Urr,Jrr,eV,Yrr,Krr,Zrr,iF,Jpe,etr,otr,oV,rtr,ttr,atr,dF,Ype,ntr,str,rV,ltr,itr,dtr,cF,Kpe,ctr,ftr,tV,mtr,gtr,htr,fF,Zpe,ptr,_tr,aV,utr,btr,Ftr,mF,e_e,vtr,Ttr,nV,Mtr,Etr,Ctr,gF,o_e,wtr,Atr,sV,ytr,Ltr,xtr,hF,r_e,ktr,Str,lV,Rtr,Btr,Ptr,pF,t_e,$tr,Itr,iV,qtr,Ntr,jtr,_F,a_e,Dtr,Gtr,dV,Otr,Vtr,Xtr,uF,n_e,ztr,Qtr,cV,Wtr,Htr,Utr,bF,s_e,Jtr,Ytr,fV,Ktr,Ztr,ear,l_e,oar,rar,m0,PBe,_c,FF,i_e,g0,tar,d_e,aar,$Be,vr,h0,nar,uc,sar,mV,lar,iar,gV,dar,car,far,p0,mar,c_e,gar,har,par,ht,_0,_ar,f_e,uar,bar,bc,Far,m_e,Tar,Mar,hV,Ear,Car,war,g_e,Aar,yar,u0,Lar,po,b0,xar,h_e,kar,Sar,un,Rar,p_e,Bar,Par,__e,$ar,Iar,u_e,qar,Nar,jar,H,vF,b_e,Dar,Gar,pV,Oar,Var,Xar,TF,F_e,zar,Qar,_V,War,Har,Uar,MF,v_e,Jar,Yar,uV,Kar,Zar,enr,EF,T_e,onr,rnr,bV,tnr,anr,nnr,CF,M_e,snr,lnr,FV,inr,dnr,cnr,wF,E_e,fnr,mnr,vV,gnr,hnr,pnr,AF,C_e,_nr,unr,TV,bnr,Fnr,vnr,yF,w_e,Tnr,Mnr,MV,Enr,Cnr,wnr,LF,A_e,Anr,ynr,EV,Lnr,xnr,knr,xF,y_e,Snr,Rnr,CV,Bnr,Pnr,$nr,kF,L_e,Inr,qnr,wV,Nnr,jnr,Dnr,SF,x_e,Gnr,Onr,AV,Vnr,Xnr,znr,RF,k_e,Qnr,Wnr,yV,Hnr,Unr,Jnr,BF,S_e,Ynr,Knr,LV,Znr,esr,osr,PF,R_e,rsr,tsr,xV,asr,nsr,ssr,$F,B_e,lsr,isr,kV,dsr,csr,fsr,IF,P_e,msr,gsr,SV,hsr,psr,_sr,qF,$_e,usr,bsr,RV,Fsr,vsr,Tsr,NF,I_e,Msr,Esr,BV,Csr,wsr,Asr,jF,q_e,ysr,Lsr,PV,xsr,ksr,Ssr,DF,N_e,Rsr,Bsr,$V,Psr,$sr,Isr,GF,j_e,qsr,Nsr,IV,jsr,Dsr,Gsr,OF,D_e,Osr,Vsr,qV,Xsr,zsr,Qsr,G_e,Wsr,Hsr,F0,IBe,Fc,VF,O_e,v0,Usr,V_e,Jsr,qBe,Tr,T0,Ysr,vc,Ksr,NV,Zsr,elr,jV,olr,rlr,tlr,M0,alr,X_e,nlr,slr,llr,pt,E0,ilr,z_e,dlr,clr,Tc,flr,Q_e,mlr,glr,DV,hlr,plr,_lr,W_e,ulr,blr,C0,Flr,_o,w0,vlr,H_e,Tlr,Mlr,bn,Elr,U_e,Clr,wlr,J_e,Alr,ylr,Y_e,Llr,xlr,klr,fe,XF,K_e,Slr,Rlr,GV,Blr,Plr,$lr,zF,Z_e,Ilr,qlr,OV,Nlr,jlr,Dlr,QF,eue,Glr,Olr,VV,Vlr,Xlr,zlr,WF,oue,Qlr,Wlr,XV,Hlr,Ulr,Jlr,HF,rue,Ylr,Klr,zV,Zlr,eir,oir,UF,tue,rir,tir,QV,air,nir,sir,JF,aue,lir,iir,WV,dir,cir,fir,YF,nue,mir,gir,HV,hir,pir,_ir,KF,sue,uir,bir,UV,Fir,vir,Tir,ZF,lue,Mir,Eir,JV,Cir,wir,Air,ev,iue,yir,Lir,YV,xir,kir,Sir,ov,due,Rir,Bir,KV,Pir,$ir,Iir,cue,qir,Nir,A0,NBe,Mc,rv,fue,y0,jir,mue,Dir,jBe,Mr,L0,Gir,Ec,Oir,ZV,Vir,Xir,eX,zir,Qir,Wir,x0,Hir,gue,Uir,Jir,Yir,_t,k0,Kir,hue,Zir,edr,Cc,odr,pue,rdr,tdr,oX,adr,ndr,sdr,_ue,ldr,idr,S0,ddr,uo,R0,cdr,uue,fdr,mdr,Fn,gdr,bue,hdr,pdr,Fue,_dr,udr,vue,bdr,Fdr,vdr,B0,tv,Tue,Tdr,Mdr,rX,Edr,Cdr,wdr,av,Mue,Adr,ydr,tX,Ldr,xdr,kdr,Eue,Sdr,Rdr,P0,DBe,wc,nv,Cue,$0,Bdr,wue,Pdr,GBe,Er,I0,$dr,Ac,Idr,aX,qdr,Ndr,nX,jdr,Ddr,Gdr,q0,Odr,Aue,Vdr,Xdr,zdr,ut,N0,Qdr,yue,Wdr,Hdr,yc,Udr,Lue,Jdr,Ydr,sX,Kdr,Zdr,ecr,xue,ocr,rcr,j0,tcr,bo,D0,acr,kue,ncr,scr,vn,lcr,Sue,icr,dcr,Rue,ccr,fcr,Bue,mcr,gcr,hcr,J,sv,Pue,pcr,_cr,lX,ucr,bcr,Fcr,lv,$ue,vcr,Tcr,iX,Mcr,Ecr,Ccr,iv,Iue,wcr,Acr,dX,ycr,Lcr,xcr,dv,que,kcr,Scr,cX,Rcr,Bcr,Pcr,cv,Nue,$cr,Icr,fX,qcr,Ncr,jcr,fv,jue,Dcr,Gcr,mX,Ocr,Vcr,Xcr,mv,Due,zcr,Qcr,gX,Wcr,Hcr,Ucr,gv,Gue,Jcr,Ycr,hX,Kcr,Zcr,efr,hv,Oue,ofr,rfr,pX,tfr,afr,nfr,pv,Vue,sfr,lfr,_X,ifr,dfr,cfr,_v,Xue,ffr,mfr,uX,gfr,hfr,pfr,uv,zue,_fr,ufr,bX,bfr,Ffr,vfr,bv,Que,Tfr,Mfr,FX,Efr,Cfr,wfr,Fv,Wue,Afr,yfr,vX,Lfr,xfr,kfr,vv,Hue,Sfr,Rfr,TX,Bfr,Pfr,$fr,Tv,Uue,Ifr,qfr,MX,Nfr,jfr,Dfr,Mv,Jue,Gfr,Ofr,EX,Vfr,Xfr,zfr,Ev,Yue,Qfr,Wfr,CX,Hfr,Ufr,Jfr,Cv,Kue,Yfr,Kfr,wX,Zfr,emr,omr,wv,Zue,rmr,tmr,AX,amr,nmr,smr,e1e,lmr,imr,G0,OBe,Lc,Av,o1e,O0,dmr,r1e,cmr,VBe,Cr,V0,fmr,xc,mmr,yX,gmr,hmr,LX,pmr,_mr,umr,X0,bmr,t1e,Fmr,vmr,Tmr,bt,z0,Mmr,a1e,Emr,Cmr,kc,wmr,n1e,Amr,ymr,xX,Lmr,xmr,kmr,s1e,Smr,Rmr,Q0,Bmr,Fo,W0,Pmr,l1e,$mr,Imr,Tn,qmr,i1e,Nmr,jmr,d1e,Dmr,Gmr,c1e,Omr,Vmr,Xmr,be,yv,f1e,zmr,Qmr,kX,Wmr,Hmr,Umr,Lv,m1e,Jmr,Ymr,SX,Kmr,Zmr,egr,xv,g1e,ogr,rgr,RX,tgr,agr,ngr,kv,h1e,sgr,lgr,BX,igr,dgr,cgr,Sv,p1e,fgr,mgr,PX,ggr,hgr,pgr,Rv,_1e,_gr,ugr,$X,bgr,Fgr,vgr,Bv,u1e,Tgr,Mgr,IX,Egr,Cgr,wgr,Pv,b1e,Agr,ygr,qX,Lgr,xgr,kgr,$v,F1e,Sgr,Rgr,NX,Bgr,Pgr,$gr,Iv,v1e,Igr,qgr,jX,Ngr,jgr,Dgr,T1e,Ggr,Ogr,H0,XBe,Sc,qv,M1e,U0,Vgr,E1e,Xgr,zBe,wr,J0,zgr,Rc,Qgr,DX,Wgr,Hgr,GX,Ugr,Jgr,Ygr,Y0,Kgr,C1e,Zgr,ehr,ohr,Ft,K0,rhr,w1e,thr,ahr,Bc,nhr,A1e,shr,lhr,OX,ihr,dhr,chr,y1e,fhr,mhr,Z0,ghr,vo,ey,hhr,L1e,phr,_hr,Mn,uhr,x1e,bhr,Fhr,k1e,vhr,Thr,S1e,Mhr,Ehr,Chr,V,Nv,R1e,whr,Ahr,VX,yhr,Lhr,xhr,jv,B1e,khr,Shr,XX,Rhr,Bhr,Phr,Dv,P1e,$hr,Ihr,zX,qhr,Nhr,jhr,Gv,$1e,Dhr,Ghr,QX,Ohr,Vhr,Xhr,Ov,I1e,zhr,Qhr,WX,Whr,Hhr,Uhr,Vv,q1e,Jhr,Yhr,HX,Khr,Zhr,epr,Xv,N1e,opr,rpr,UX,tpr,apr,npr,zv,j1e,spr,lpr,JX,ipr,dpr,cpr,Qv,D1e,fpr,mpr,YX,gpr,hpr,ppr,Wv,G1e,_pr,upr,KX,bpr,Fpr,vpr,Hv,O1e,Tpr,Mpr,ZX,Epr,Cpr,wpr,Uv,V1e,Apr,ypr,ez,Lpr,xpr,kpr,Jv,X1e,Spr,Rpr,oz,Bpr,Ppr,$pr,Yv,z1e,Ipr,qpr,rz,Npr,jpr,Dpr,Kv,Q1e,Gpr,Opr,tz,Vpr,Xpr,zpr,Zv,W1e,Qpr,Wpr,az,Hpr,Upr,Jpr,eT,H1e,Ypr,Kpr,nz,Zpr,e_r,o_r,oT,U1e,r_r,t_r,sz,a_r,n_r,s_r,rT,J1e,l_r,i_r,lz,d_r,c_r,f_r,tT,Y1e,m_r,g_r,iz,h_r,p_r,__r,aT,K1e,u_r,b_r,dz,F_r,v_r,T_r,nT,Z1e,M_r,E_r,cz,C_r,w_r,A_r,sT,e7e,y_r,L_r,fz,x_r,k_r,S_r,lT,o7e,R_r,B_r,mz,P_r,$_r,I_r,iT,r7e,q_r,N_r,gz,j_r,D_r,G_r,dT,t7e,O_r,V_r,hz,X_r,z_r,Q_r,a7e,W_r,H_r,oy,QBe,Pc,cT,n7e,ry,U_r,s7e,J_r,WBe,Ar,ty,Y_r,$c,K_r,pz,Z_r,eur,_z,our,rur,tur,ay,aur,l7e,nur,sur,lur,vt,ny,iur,i7e,dur,cur,Ic,fur,d7e,mur,gur,uz,hur,pur,_ur,c7e,uur,bur,sy,Fur,To,ly,vur,f7e,Tur,Mur,En,Eur,m7e,Cur,wur,g7e,Aur,yur,h7e,Lur,xur,kur,se,fT,p7e,Sur,Rur,bz,Bur,Pur,$ur,mT,_7e,Iur,qur,Fz,Nur,jur,Dur,gT,u7e,Gur,Our,vz,Vur,Xur,zur,hT,b7e,Qur,Wur,Tz,Hur,Uur,Jur,pT,F7e,Yur,Kur,Mz,Zur,e1r,o1r,_T,v7e,r1r,t1r,Ez,a1r,n1r,s1r,uT,T7e,l1r,i1r,Cz,d1r,c1r,f1r,bT,M7e,m1r,g1r,wz,h1r,p1r,_1r,FT,E7e,u1r,b1r,Az,F1r,v1r,T1r,vT,C7e,M1r,E1r,yz,C1r,w1r,A1r,TT,w7e,y1r,L1r,Lz,x1r,k1r,S1r,MT,A7e,R1r,B1r,xz,P1r,$1r,I1r,ET,y7e,q1r,N1r,kz,j1r,D1r,G1r,CT,L7e,O1r,V1r,Sz,X1r,z1r,Q1r,wT,x7e,W1r,H1r,Rz,U1r,J1r,Y1r,AT,k7e,K1r,Z1r,Bz,e7r,o7r,r7r,yT,S7e,t7r,a7r,Pz,n7r,s7r,l7r,R7e,i7r,d7r,iy,HBe,qc,LT,B7e,dy,c7r,P7e,f7r,UBe,yr,cy,m7r,Nc,g7r,$z,h7r,p7r,Iz,_7r,u7r,b7r,fy,F7r,$7e,v7r,T7r,M7r,Tt,my,E7r,I7e,C7r,w7r,jc,A7r,q7e,y7r,L7r,qz,x7r,k7r,S7r,N7e,R7r,B7r,gy,P7r,Mo,hy,$7r,j7e,I7r,q7r,Cn,N7r,D7e,j7r,D7r,G7e,G7r,O7r,O7e,V7r,X7r,z7r,V7e,xT,X7e,Q7r,W7r,Nz,H7r,U7r,J7r,z7e,Y7r,K7r,py,JBe,Dc,kT,Q7e,_y,Z7r,W7e,ebr,YBe,Lr,uy,obr,Gc,rbr,jz,tbr,abr,Dz,nbr,sbr,lbr,by,ibr,H7e,dbr,cbr,fbr,Mt,Fy,mbr,U7e,gbr,hbr,Oc,pbr,J7e,_br,ubr,Gz,bbr,Fbr,vbr,Y7e,Tbr,Mbr,vy,Ebr,Eo,Ty,Cbr,K7e,wbr,Abr,wn,ybr,Z7e,Lbr,xbr,ebe,kbr,Sbr,obe,Rbr,Bbr,Pbr,Y,ST,rbe,$br,Ibr,Oz,qbr,Nbr,jbr,RT,tbe,Dbr,Gbr,Vz,Obr,Vbr,Xbr,BT,abe,zbr,Qbr,Xz,Wbr,Hbr,Ubr,PT,nbe,Jbr,Ybr,zz,Kbr,Zbr,e5r,$T,sbe,o5r,r5r,Qz,t5r,a5r,n5r,IT,lbe,s5r,l5r,Wz,i5r,d5r,c5r,qT,ibe,f5r,m5r,Hz,g5r,h5r,p5r,NT,dbe,_5r,u5r,Uz,b5r,F5r,v5r,jT,cbe,T5r,M5r,Jz,E5r,C5r,w5r,DT,fbe,A5r,y5r,Yz,L5r,x5r,k5r,GT,mbe,S5r,R5r,Kz,B5r,P5r,$5r,OT,gbe,I5r,q5r,Zz,N5r,j5r,D5r,VT,hbe,G5r,O5r,eQ,V5r,X5r,z5r,XT,pbe,Q5r,W5r,oQ,H5r,U5r,J5r,zT,_be,Y5r,K5r,rQ,Z5r,e3r,o3r,QT,ube,r3r,t3r,tQ,a3r,n3r,s3r,WT,bbe,l3r,i3r,aQ,d3r,c3r,f3r,HT,Fbe,m3r,g3r,nQ,h3r,p3r,_3r,UT,vbe,u3r,b3r,sQ,F3r,v3r,T3r,JT,Tbe,M3r,E3r,lQ,C3r,w3r,A3r,Mbe,y3r,L3r,My,KBe,Vc,YT,Ebe,Ey,x3r,Cbe,k3r,ZBe,xr,Cy,S3r,Xc,R3r,iQ,B3r,P3r,dQ,$3r,I3r,q3r,wy,N3r,wbe,j3r,D3r,G3r,Et,Ay,O3r,Abe,V3r,X3r,zc,z3r,ybe,Q3r,W3r,cQ,H3r,U3r,J3r,Lbe,Y3r,K3r,yy,Z3r,Co,Ly,e2r,xbe,o2r,r2r,An,t2r,kbe,a2r,n2r,Sbe,s2r,l2r,Rbe,i2r,d2r,c2r,K,KT,Bbe,f2r,m2r,fQ,g2r,h2r,p2r,ZT,Pbe,_2r,u2r,mQ,b2r,F2r,v2r,eM,$be,T2r,M2r,gQ,E2r,C2r,w2r,oM,Ibe,A2r,y2r,hQ,L2r,x2r,k2r,rM,qbe,S2r,R2r,pQ,B2r,P2r,$2r,tM,Nbe,I2r,q2r,_Q,N2r,j2r,D2r,aM,jbe,G2r,O2r,uQ,V2r,X2r,z2r,nM,Dbe,Q2r,W2r,bQ,H2r,U2r,J2r,sM,Gbe,Y2r,K2r,FQ,Z2r,eFr,oFr,lM,Obe,rFr,tFr,vQ,aFr,nFr,sFr,iM,Vbe,lFr,iFr,TQ,dFr,cFr,fFr,dM,Xbe,mFr,gFr,MQ,hFr,pFr,_Fr,cM,zbe,uFr,bFr,EQ,FFr,vFr,TFr,fM,Qbe,MFr,EFr,CQ,CFr,wFr,AFr,mM,Wbe,yFr,LFr,wQ,xFr,kFr,SFr,gM,Hbe,RFr,BFr,AQ,PFr,$Fr,IFr,hM,Ube,qFr,NFr,yQ,jFr,DFr,GFr,pM,Jbe,OFr,VFr,LQ,XFr,zFr,QFr,_M,Ybe,WFr,HFr,xQ,UFr,JFr,YFr,uM,Kbe,KFr,ZFr,kQ,evr,ovr,rvr,Zbe,tvr,avr,xy,ePe,Qc,bM,e5e,ky,nvr,o5e,svr,oPe,kr,Sy,lvr,Wc,ivr,SQ,dvr,cvr,RQ,fvr,mvr,gvr,Ry,hvr,r5e,pvr,_vr,uvr,Ct,By,bvr,t5e,Fvr,vvr,Hc,Tvr,a5e,Mvr,Evr,BQ,Cvr,wvr,Avr,n5e,yvr,Lvr,Py,xvr,wo,$y,kvr,s5e,Svr,Rvr,yn,Bvr,l5e,Pvr,$vr,i5e,Ivr,qvr,d5e,Nvr,jvr,Dvr,c5e,FM,f5e,Gvr,Ovr,PQ,Vvr,Xvr,zvr,m5e,Qvr,Wvr,Iy,rPe,Uc,vM,g5e,qy,Hvr,h5e,Uvr,tPe,Sr,Ny,Jvr,Jc,Yvr,$Q,Kvr,Zvr,IQ,eTr,oTr,rTr,jy,tTr,p5e,aTr,nTr,sTr,wt,Dy,lTr,_5e,iTr,dTr,Yc,cTr,u5e,fTr,mTr,qQ,gTr,hTr,pTr,b5e,_Tr,uTr,Gy,bTr,Ao,Oy,FTr,F5e,vTr,TTr,Ln,MTr,v5e,ETr,CTr,T5e,wTr,ATr,M5e,yTr,LTr,xTr,E5e,TM,C5e,kTr,STr,NQ,RTr,BTr,PTr,w5e,$Tr,ITr,Vy,aPe,Kc,MM,A5e,Xy,qTr,y5e,NTr,nPe,Rr,zy,jTr,Zc,DTr,jQ,GTr,OTr,DQ,VTr,XTr,zTr,Qy,QTr,L5e,WTr,HTr,UTr,At,Wy,JTr,x5e,YTr,KTr,ef,ZTr,k5e,eMr,oMr,GQ,rMr,tMr,aMr,S5e,nMr,sMr,Hy,lMr,yo,Uy,iMr,R5e,dMr,cMr,xn,fMr,B5e,mMr,gMr,P5e,hMr,pMr,$5e,_Mr,uMr,bMr,z,EM,I5e,FMr,vMr,OQ,TMr,MMr,EMr,CM,q5e,CMr,wMr,VQ,AMr,yMr,LMr,wM,N5e,xMr,kMr,XQ,SMr,RMr,BMr,AM,j5e,PMr,$Mr,zQ,IMr,qMr,NMr,yM,D5e,jMr,DMr,QQ,GMr,OMr,VMr,LM,G5e,XMr,zMr,WQ,QMr,WMr,HMr,xM,O5e,UMr,JMr,HQ,YMr,KMr,ZMr,kM,V5e,e4r,o4r,UQ,r4r,t4r,a4r,SM,X5e,n4r,s4r,JQ,l4r,i4r,d4r,RM,z5e,c4r,f4r,YQ,m4r,g4r,h4r,BM,Q5e,p4r,_4r,KQ,u4r,b4r,F4r,PM,W5e,v4r,T4r,ZQ,M4r,E4r,C4r,$M,H5e,w4r,A4r,eW,y4r,L4r,x4r,IM,U5e,k4r,S4r,oW,R4r,B4r,P4r,qM,J5e,$4r,I4r,rW,q4r,N4r,j4r,NM,Y5e,D4r,G4r,tW,O4r,V4r,X4r,jM,K5e,z4r,Q4r,aW,W4r,H4r,U4r,DM,Z5e,J4r,Y4r,nW,K4r,Z4r,eEr,GM,e3e,oEr,rEr,sW,tEr,aEr,nEr,OM,o3e,sEr,lEr,lW,iEr,dEr,cEr,VM,r3e,fEr,mEr,iW,gEr,hEr,pEr,XM,t3e,_Er,uEr,dW,bEr,FEr,vEr,zM,a3e,TEr,MEr,cW,EEr,CEr,wEr,QM,n3e,AEr,yEr,fW,LEr,xEr,kEr,WM,s3e,SEr,REr,mW,BEr,PEr,$Er,l3e,IEr,qEr,Jy,sPe,of,HM,i3e,Yy,NEr,d3e,jEr,lPe,Br,Ky,DEr,rf,GEr,gW,OEr,VEr,hW,XEr,zEr,QEr,Zy,WEr,c3e,HEr,UEr,JEr,yt,eL,YEr,f3e,KEr,ZEr,tf,eCr,m3e,oCr,rCr,pW,tCr,aCr,nCr,g3e,sCr,lCr,oL,iCr,Lo,rL,dCr,h3e,cCr,fCr,kn,mCr,p3e,gCr,hCr,_3e,pCr,_Cr,u3e,uCr,bCr,FCr,ca,UM,b3e,vCr,TCr,_W,MCr,ECr,CCr,JM,F3e,wCr,ACr,uW,yCr,LCr,xCr,YM,v3e,kCr,SCr,bW,RCr,BCr,PCr,KM,T3e,$Cr,ICr,FW,qCr,NCr,jCr,ZM,M3e,DCr,GCr,vW,OCr,VCr,XCr,E3e,zCr,QCr,tL,iPe,af,e4,C3e,aL,WCr,w3e,HCr,dPe,Pr,nL,UCr,nf,JCr,TW,YCr,KCr,MW,ZCr,ewr,owr,sL,rwr,A3e,twr,awr,nwr,Lt,lL,swr,y3e,lwr,iwr,sf,dwr,L3e,cwr,fwr,EW,mwr,gwr,hwr,x3e,pwr,_wr,iL,uwr,xo,dL,bwr,k3e,Fwr,vwr,Sn,Twr,S3e,Mwr,Ewr,R3e,Cwr,wwr,B3e,Awr,ywr,Lwr,me,o4,P3e,xwr,kwr,CW,Swr,Rwr,Bwr,r4,$3e,Pwr,$wr,wW,Iwr,qwr,Nwr,t4,I3e,jwr,Dwr,AW,Gwr,Owr,Vwr,a4,q3e,Xwr,zwr,yW,Qwr,Wwr,Hwr,n4,N3e,Uwr,Jwr,LW,Ywr,Kwr,Zwr,s4,j3e,eAr,oAr,xW,rAr,tAr,aAr,l4,D3e,nAr,sAr,kW,lAr,iAr,dAr,i4,G3e,cAr,fAr,SW,mAr,gAr,hAr,d4,O3e,pAr,_Ar,RW,uAr,bAr,FAr,c4,V3e,vAr,TAr,BW,MAr,EAr,CAr,f4,X3e,wAr,AAr,PW,yAr,LAr,xAr,m4,z3e,kAr,SAr,$W,RAr,BAr,PAr,Q3e,$Ar,IAr,cL,cPe,lf,g4,W3e,fL,qAr,H3e,NAr,fPe,$r,mL,jAr,df,DAr,IW,GAr,OAr,qW,VAr,XAr,zAr,gL,QAr,U3e,WAr,HAr,UAr,xt,hL,JAr,J3e,YAr,KAr,cf,ZAr,Y3e,e6r,o6r,NW,r6r,t6r,a6r,K3e,n6r,s6r,pL,l6r,ko,_L,i6r,Z3e,d6r,c6r,Rn,f6r,e2e,m6r,g6r,o2e,h6r,p6r,r2e,_6r,u6r,b6r,Fe,h4,t2e,F6r,v6r,jW,T6r,M6r,E6r,p4,a2e,C6r,w6r,DW,A6r,y6r,L6r,_4,n2e,x6r,k6r,GW,S6r,R6r,B6r,u4,s2e,P6r,$6r,OW,I6r,q6r,N6r,b4,l2e,j6r,D6r,VW,G6r,O6r,V6r,F4,i2e,X6r,z6r,XW,Q6r,W6r,H6r,v4,d2e,U6r,J6r,zW,Y6r,K6r,Z6r,T4,c2e,e0r,o0r,QW,r0r,t0r,a0r,M4,f2e,n0r,s0r,WW,l0r,i0r,d0r,E4,m2e,c0r,f0r,HW,m0r,g0r,h0r,g2e,p0r,_0r,uL,mPe,ff,C4,h2e,bL,u0r,p2e,b0r,gPe,Ir,FL,F0r,mf,v0r,UW,T0r,M0r,JW,E0r,C0r,w0r,vL,A0r,_2e,y0r,L0r,x0r,kt,TL,k0r,u2e,S0r,R0r,gf,B0r,b2e,P0r,$0r,YW,I0r,q0r,N0r,F2e,j0r,D0r,ML,G0r,So,EL,O0r,v2e,V0r,X0r,Bn,z0r,T2e,Q0r,W0r,M2e,H0r,U0r,E2e,J0r,Y0r,K0r,Ee,w4,C2e,Z0r,eyr,KW,oyr,ryr,tyr,A4,w2e,ayr,nyr,ZW,syr,lyr,iyr,y4,A2e,dyr,cyr,eH,fyr,myr,gyr,L4,y2e,hyr,pyr,oH,_yr,uyr,byr,x4,L2e,Fyr,vyr,rH,Tyr,Myr,Eyr,k4,x2e,Cyr,wyr,tH,Ayr,yyr,Lyr,S4,k2e,xyr,kyr,aH,Syr,Ryr,Byr,R4,S2e,Pyr,$yr,nH,Iyr,qyr,Nyr,B4,R2e,jyr,Dyr,sH,Gyr,Oyr,Vyr,B2e,Xyr,zyr,CL,hPe,hf,P4,P2e,wL,Qyr,$2e,Wyr,pPe,qr,AL,Hyr,pf,Uyr,lH,Jyr,Yyr,iH,Kyr,Zyr,eLr,yL,oLr,I2e,rLr,tLr,aLr,St,LL,nLr,q2e,sLr,lLr,_f,iLr,N2e,dLr,cLr,dH,fLr,mLr,gLr,j2e,hLr,pLr,xL,_Lr,Ro,kL,uLr,D2e,bLr,FLr,Pn,vLr,G2e,TLr,MLr,O2e,ELr,CLr,V2e,wLr,ALr,yLr,ve,$4,X2e,LLr,xLr,cH,kLr,SLr,RLr,I4,z2e,BLr,PLr,fH,$Lr,ILr,qLr,q4,Q2e,NLr,jLr,mH,DLr,GLr,OLr,N4,W2e,VLr,XLr,gH,zLr,QLr,WLr,j4,H2e,HLr,ULr,hH,JLr,YLr,KLr,D4,U2e,ZLr,e8r,pH,o8r,r8r,t8r,G4,J2e,a8r,n8r,_H,s8r,l8r,i8r,O4,Y2e,d8r,c8r,uH,f8r,m8r,g8r,V4,K2e,h8r,p8r,bH,_8r,u8r,b8r,X4,Z2e,F8r,v8r,FH,T8r,M8r,E8r,eFe,C8r,w8r,SL,_Pe,uf,z4,oFe,RL,A8r,rFe,y8r,uPe,Nr,BL,L8r,bf,x8r,vH,k8r,S8r,TH,R8r,B8r,P8r,PL,$8r,tFe,I8r,q8r,N8r,Rt,$L,j8r,aFe,D8r,G8r,Ff,O8r,nFe,V8r,X8r,MH,z8r,Q8r,W8r,sFe,H8r,U8r,IL,J8r,Bo,qL,Y8r,lFe,K8r,Z8r,$n,e9r,iFe,o9r,r9r,dFe,t9r,a9r,cFe,n9r,s9r,l9r,Te,Q4,fFe,i9r,d9r,EH,c9r,f9r,m9r,W4,mFe,g9r,h9r,CH,p9r,_9r,u9r,H4,gFe,b9r,F9r,wH,v9r,T9r,M9r,U4,hFe,E9r,C9r,AH,w9r,A9r,y9r,J4,pFe,L9r,x9r,yH,k9r,S9r,R9r,Y4,_Fe,B9r,P9r,LH,$9r,I9r,q9r,K4,uFe,N9r,j9r,xH,D9r,G9r,O9r,Z4,bFe,V9r,X9r,kH,z9r,Q9r,W9r,eE,FFe,H9r,U9r,SH,J9r,Y9r,K9r,oE,vFe,Z9r,exr,RH,oxr,rxr,txr,TFe,axr,nxr,NL,bPe,vf,rE,MFe,jL,sxr,EFe,lxr,FPe,jr,DL,ixr,Tf,dxr,BH,cxr,fxr,PH,mxr,gxr,hxr,GL,pxr,CFe,_xr,uxr,bxr,Bt,OL,Fxr,wFe,vxr,Txr,Mf,Mxr,AFe,Exr,Cxr,$H,wxr,Axr,yxr,yFe,Lxr,xxr,VL,kxr,Po,XL,Sxr,LFe,Rxr,Bxr,In,Pxr,xFe,$xr,Ixr,kFe,qxr,Nxr,SFe,jxr,Dxr,Gxr,Be,tE,RFe,Oxr,Vxr,IH,Xxr,zxr,Qxr,aE,BFe,Wxr,Hxr,qH,Uxr,Jxr,Yxr,nE,PFe,Kxr,Zxr,NH,ekr,okr,rkr,sE,$Fe,tkr,akr,jH,nkr,skr,lkr,lE,IFe,ikr,dkr,DH,ckr,fkr,mkr,iE,qFe,gkr,hkr,GH,pkr,_kr,ukr,dE,NFe,bkr,Fkr,OH,vkr,Tkr,Mkr,cE,jFe,Ekr,Ckr,VH,wkr,Akr,ykr,DFe,Lkr,xkr,zL,vPe,Ef,fE,GFe,QL,kkr,OFe,Skr,TPe,Dr,WL,Rkr,Cf,Bkr,XH,Pkr,$kr,zH,Ikr,qkr,Nkr,HL,jkr,VFe,Dkr,Gkr,Okr,Pt,UL,Vkr,XFe,Xkr,zkr,wf,Qkr,zFe,Wkr,Hkr,QH,Ukr,Jkr,Ykr,QFe,Kkr,Zkr,JL,eSr,$o,YL,oSr,WFe,rSr,tSr,qn,aSr,HFe,nSr,sSr,UFe,lSr,iSr,JFe,dSr,cSr,fSr,Pe,mE,YFe,mSr,gSr,WH,hSr,pSr,_Sr,gE,KFe,uSr,bSr,HH,FSr,vSr,TSr,hE,ZFe,MSr,ESr,UH,CSr,wSr,ASr,pE,eve,ySr,LSr,JH,xSr,kSr,SSr,_E,ove,RSr,BSr,YH,PSr,$Sr,ISr,uE,rve,qSr,NSr,KH,jSr,DSr,GSr,bE,tve,OSr,VSr,ZH,XSr,zSr,QSr,FE,ave,WSr,HSr,eU,USr,JSr,YSr,nve,KSr,ZSr,KL,MPe,Af,vE,sve,ZL,eRr,lve,oRr,EPe,Gr,e8,rRr,yf,tRr,oU,aRr,nRr,rU,sRr,lRr,iRr,o8,dRr,ive,cRr,fRr,mRr,$t,r8,gRr,dve,hRr,pRr,Lf,_Rr,cve,uRr,bRr,tU,FRr,vRr,TRr,fve,MRr,ERr,t8,CRr,Io,a8,wRr,mve,ARr,yRr,Nn,LRr,gve,xRr,kRr,hve,SRr,RRr,pve,BRr,PRr,$Rr,_ve,TE,uve,IRr,qRr,aU,NRr,jRr,DRr,bve,GRr,ORr,n8,CPe,xf,ME,Fve,s8,VRr,vve,XRr,wPe,Or,l8,zRr,kf,QRr,nU,WRr,HRr,sU,URr,JRr,YRr,i8,KRr,Tve,ZRr,eBr,oBr,It,d8,rBr,Mve,tBr,aBr,Sf,nBr,Eve,sBr,lBr,lU,iBr,dBr,cBr,Cve,fBr,mBr,c8,gBr,qo,f8,hBr,wve,pBr,_Br,jn,uBr,Ave,bBr,FBr,yve,vBr,TBr,Lve,MBr,EBr,CBr,m8,EE,xve,wBr,ABr,iU,yBr,LBr,xBr,CE,kve,kBr,SBr,dU,RBr,BBr,PBr,Sve,$Br,IBr,g8,APe,Rf,wE,Rve,h8,qBr,Bve,NBr,yPe,Vr,p8,jBr,Bf,DBr,cU,GBr,OBr,fU,VBr,XBr,zBr,_8,QBr,Pve,WBr,HBr,UBr,qt,u8,JBr,$ve,YBr,KBr,Pf,ZBr,Ive,ePr,oPr,mU,rPr,tPr,aPr,qve,nPr,sPr,b8,lPr,No,F8,iPr,Nve,dPr,cPr,Dn,fPr,jve,mPr,gPr,Dve,hPr,pPr,Gve,_Pr,uPr,bPr,Ove,AE,Vve,FPr,vPr,gU,TPr,MPr,EPr,Xve,CPr,wPr,v8,LPe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kC=new X({}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new APr({props:{warning:!0,$$slots:{default:[hwt]},$$scope:{ctx:If}}}),RC=new X({}),BC=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L555"}}),IC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L578",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),qC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),NC=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L700",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),jC=new X({}),DC=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L353"}}),VC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L367",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15773/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),XC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),zC=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L563",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),QC=new X({}),WC=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),JC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Nh=new APr({props:{$$slots:{default:[pwt]},$$scope:{ctx:If}}}),YC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),KC=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),ZC=new X({}),ew=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L70"}}),tw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Uh=new APr({props:{$$slots:{default:[_wt]},$$scope:{ctx:If}}}),aw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),nw=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),sw=new X({}),lw=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L712"}}),dw=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Config">FastSpeech2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Model">FastSpeech2Model</a> (FastSpeech2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),fw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L719"}}),_w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),Tw=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L734"}}),Ew=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),Lw=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L741"}}),kw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Rw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L748"}}),qw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),jw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L757"}}),Xw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L791"}}),Yw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Zw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L798"}}),aA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),sA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L784"}}),fA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),gA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L766"}}),bA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),vA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L773"}}),wA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),yA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L807"}}),RA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),PA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),qA=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L846"}}),jA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),GA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),XA=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L853"}}),QA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),HA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L876"}}),ZA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),e6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),o6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t6=new X({}),a6=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L860"}}),s6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),l6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),i6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c6=new X({}),f6=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L867"}}),g6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),h6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),p6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new X({}),F6=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L885"}}),T6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),M6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),E6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new X({}),A6=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L892"}}),L6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),x6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),k6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new X({}),B6=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L839"}}),$6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),I6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),q6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j6=new X({}),D6=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L814"}}),O6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),V6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),X6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new X({}),W6=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L821"}}),U6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),J6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Y6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new X({}),e0=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L830"}}),r0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),a0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),d0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),f0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),_0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),u0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),b0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new X({}),T0=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),E0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),w0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),k0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),R0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),N0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),D0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),z0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),W0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),K0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ny=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),my=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Fy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ty=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),Cy=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ay=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Ly=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Sy=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),By=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),$y=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Dy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Oy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Wy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Uy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),eL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),lL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),hL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),_L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),FL=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),TL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),EL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),LL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),kL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),BL=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),$L=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),IL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),qL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),DL=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),OL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),VL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),XL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new X({}),WL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),UL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),JL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),YL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZL=new X({}),e8=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),r8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),a8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s8=new X({}),l8=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),d8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),f8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h8=new X({}),p8=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),u8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),b8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),F8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),AC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),yC=o("AutoConfig"),On=o(", "),Vn=a("a"),LC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),xC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),b9=o("will create a model that is an instance of "),Oi=a("a"),F9=o("BertModel"),v9=o("."),zo=l(),Ga=a("p"),T9=o("There is one class of "),Df=a("code"),M9=o("AutoModel"),DIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yRe=l(),Vi=a("h2"),Gf=a("a"),lY=a("span"),f(kC.$$.fragment),GIe=l(),iY=a("span"),OIe=o("Extending the Auto Classes"),LRe=l(),zn=a("p"),VIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dY=a("code"),XIe=o("NewModel"),zIe=o(", make sure you have a "),cY=a("code"),QIe=o("NewModelConfig"),WIe=o(` then you can add those to the auto
classes like this:`),xRe=l(),f(SC.$$.fragment),kRe=l(),E9=a("p"),HIe=o("You will then be able to use the auto classes like you would usually do!"),SRe=l(),f(Of.$$.fragment),RRe=l(),Xi=a("h2"),Vf=a("a"),fY=a("span"),f(RC.$$.fragment),UIe=l(),mY=a("span"),JIe=o("AutoConfig"),BRe=l(),Qo=a("div"),f(BC.$$.fragment),YIe=l(),PC=a("p"),KIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C9=a("a"),ZIe=o("from_pretrained()"),eqe=o(" class method."),oqe=l(),$C=a("p"),rqe=o("This class cannot be instantiated directly using "),gY=a("code"),tqe=o("__init__()"),aqe=o(" (throws an error)."),nqe=l(),mo=a("div"),f(IC.$$.fragment),sqe=l(),hY=a("p"),lqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),iqe=l(),zi=a("p"),dqe=o("The configuration class to instantiate is selected based on the "),pY=a("code"),cqe=o("model_type"),fqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_Y=a("code"),mqe=o("pretrained_model_name_or_path"),gqe=o(":"),hqe=l(),F=a("ul"),Xf=a("li"),uY=a("strong"),pqe=o("albert"),_qe=o(" \u2014 "),w9=a("a"),uqe=o("AlbertConfig"),bqe=o(" (ALBERT model)"),Fqe=l(),zf=a("li"),bY=a("strong"),vqe=o("bart"),Tqe=o(" \u2014 "),A9=a("a"),Mqe=o("BartConfig"),Eqe=o(" (BART model)"),Cqe=l(),Qf=a("li"),FY=a("strong"),wqe=o("beit"),Aqe=o(" \u2014 "),y9=a("a"),yqe=o("BeitConfig"),Lqe=o(" (BEiT model)"),xqe=l(),Wf=a("li"),vY=a("strong"),kqe=o("bert"),Sqe=o(" \u2014 "),L9=a("a"),Rqe=o("BertConfig"),Bqe=o(" (BERT model)"),Pqe=l(),Hf=a("li"),TY=a("strong"),$qe=o("bert-generation"),Iqe=o(" \u2014 "),x9=a("a"),qqe=o("BertGenerationConfig"),Nqe=o(" (Bert Generation model)"),jqe=l(),Uf=a("li"),MY=a("strong"),Dqe=o("big_bird"),Gqe=o(" \u2014 "),k9=a("a"),Oqe=o("BigBirdConfig"),Vqe=o(" (BigBird model)"),Xqe=l(),Jf=a("li"),EY=a("strong"),zqe=o("bigbird_pegasus"),Qqe=o(" \u2014 "),S9=a("a"),Wqe=o("BigBirdPegasusConfig"),Hqe=o(" (BigBirdPegasus model)"),Uqe=l(),Yf=a("li"),CY=a("strong"),Jqe=o("blenderbot"),Yqe=o(" \u2014 "),R9=a("a"),Kqe=o("BlenderbotConfig"),Zqe=o(" (Blenderbot model)"),eNe=l(),Kf=a("li"),wY=a("strong"),oNe=o("blenderbot-small"),rNe=o(" \u2014 "),B9=a("a"),tNe=o("BlenderbotSmallConfig"),aNe=o(" (BlenderbotSmall model)"),nNe=l(),Zf=a("li"),AY=a("strong"),sNe=o("camembert"),lNe=o(" \u2014 "),P9=a("a"),iNe=o("CamembertConfig"),dNe=o(" (CamemBERT model)"),cNe=l(),em=a("li"),yY=a("strong"),fNe=o("canine"),mNe=o(" \u2014 "),$9=a("a"),gNe=o("CanineConfig"),hNe=o(" (Canine model)"),pNe=l(),om=a("li"),LY=a("strong"),_Ne=o("clip"),uNe=o(" \u2014 "),I9=a("a"),bNe=o("CLIPConfig"),FNe=o(" (CLIP model)"),vNe=l(),rm=a("li"),xY=a("strong"),TNe=o("convbert"),MNe=o(" \u2014 "),q9=a("a"),ENe=o("ConvBertConfig"),CNe=o(" (ConvBERT model)"),wNe=l(),tm=a("li"),kY=a("strong"),ANe=o("convnext"),yNe=o(" \u2014 "),N9=a("a"),LNe=o("ConvNextConfig"),xNe=o(" (ConvNext model)"),kNe=l(),am=a("li"),SY=a("strong"),SNe=o("ctrl"),RNe=o(" \u2014 "),j9=a("a"),BNe=o("CTRLConfig"),PNe=o(" (CTRL model)"),$Ne=l(),nm=a("li"),RY=a("strong"),INe=o("data2vec-audio"),qNe=o(" \u2014 "),D9=a("a"),NNe=o("Data2VecAudioConfig"),jNe=o(" (Data2VecAudio model)"),DNe=l(),sm=a("li"),BY=a("strong"),GNe=o("data2vec-text"),ONe=o(" \u2014 "),G9=a("a"),VNe=o("Data2VecTextConfig"),XNe=o(" (Data2VecText model)"),zNe=l(),lm=a("li"),PY=a("strong"),QNe=o("deberta"),WNe=o(" \u2014 "),O9=a("a"),HNe=o("DebertaConfig"),UNe=o(" (DeBERTa model)"),JNe=l(),im=a("li"),$Y=a("strong"),YNe=o("deberta-v2"),KNe=o(" \u2014 "),V9=a("a"),ZNe=o("DebertaV2Config"),eje=o(" (DeBERTa-v2 model)"),oje=l(),dm=a("li"),IY=a("strong"),rje=o("decision_transformer"),tje=o(" \u2014 "),X9=a("a"),aje=o("DecisionTransformerConfig"),nje=o(" (Decision Transformer model)"),sje=l(),cm=a("li"),qY=a("strong"),lje=o("deit"),ije=o(" \u2014 "),z9=a("a"),dje=o("DeiTConfig"),cje=o(" (DeiT model)"),fje=l(),fm=a("li"),NY=a("strong"),mje=o("detr"),gje=o(" \u2014 "),Q9=a("a"),hje=o("DetrConfig"),pje=o(" (DETR model)"),_je=l(),mm=a("li"),jY=a("strong"),uje=o("distilbert"),bje=o(" \u2014 "),W9=a("a"),Fje=o("DistilBertConfig"),vje=o(" (DistilBERT model)"),Tje=l(),gm=a("li"),DY=a("strong"),Mje=o("dpr"),Eje=o(" \u2014 "),H9=a("a"),Cje=o("DPRConfig"),wje=o(" (DPR model)"),Aje=l(),hm=a("li"),GY=a("strong"),yje=o("dpt"),Lje=o(" \u2014 "),U9=a("a"),xje=o("DPTConfig"),kje=o(" (DPT model)"),Sje=l(),pm=a("li"),OY=a("strong"),Rje=o("electra"),Bje=o(" \u2014 "),J9=a("a"),Pje=o("ElectraConfig"),$je=o(" (ELECTRA model)"),Ije=l(),_m=a("li"),VY=a("strong"),qje=o("encoder-decoder"),Nje=o(" \u2014 "),Y9=a("a"),jje=o("EncoderDecoderConfig"),Dje=o(" (Encoder decoder model)"),Gje=l(),um=a("li"),XY=a("strong"),Oje=o("fastspeech2"),Vje=o(" \u2014 "),K9=a("a"),Xje=o("FastSpeech2Config"),zje=o(" (FastSpeech2 model)"),Qje=l(),bm=a("li"),zY=a("strong"),Wje=o("flaubert"),Hje=o(" \u2014 "),Z9=a("a"),Uje=o("FlaubertConfig"),Jje=o(" (FlauBERT model)"),Yje=l(),Fm=a("li"),QY=a("strong"),Kje=o("fnet"),Zje=o(" \u2014 "),ex=a("a"),eDe=o("FNetConfig"),oDe=o(" (FNet model)"),rDe=l(),vm=a("li"),WY=a("strong"),tDe=o("fsmt"),aDe=o(" \u2014 "),ox=a("a"),nDe=o("FSMTConfig"),sDe=o(" (FairSeq Machine-Translation model)"),lDe=l(),Tm=a("li"),HY=a("strong"),iDe=o("funnel"),dDe=o(" \u2014 "),rx=a("a"),cDe=o("FunnelConfig"),fDe=o(" (Funnel Transformer model)"),mDe=l(),Mm=a("li"),UY=a("strong"),gDe=o("glpn"),hDe=o(" \u2014 "),tx=a("a"),pDe=o("GLPNConfig"),_De=o(" (GLPN model)"),uDe=l(),Em=a("li"),JY=a("strong"),bDe=o("gpt2"),FDe=o(" \u2014 "),ax=a("a"),vDe=o("GPT2Config"),TDe=o(" (OpenAI GPT-2 model)"),MDe=l(),Cm=a("li"),YY=a("strong"),EDe=o("gpt_neo"),CDe=o(" \u2014 "),nx=a("a"),wDe=o("GPTNeoConfig"),ADe=o(" (GPT Neo model)"),yDe=l(),wm=a("li"),KY=a("strong"),LDe=o("gptj"),xDe=o(" \u2014 "),sx=a("a"),kDe=o("GPTJConfig"),SDe=o(" (GPT-J model)"),RDe=l(),Am=a("li"),ZY=a("strong"),BDe=o("hubert"),PDe=o(" \u2014 "),lx=a("a"),$De=o("HubertConfig"),IDe=o(" (Hubert model)"),qDe=l(),ym=a("li"),eK=a("strong"),NDe=o("ibert"),jDe=o(" \u2014 "),ix=a("a"),DDe=o("IBertConfig"),GDe=o(" (I-BERT model)"),ODe=l(),Lm=a("li"),oK=a("strong"),VDe=o("imagegpt"),XDe=o(" \u2014 "),dx=a("a"),zDe=o("ImageGPTConfig"),QDe=o(" (ImageGPT model)"),WDe=l(),xm=a("li"),rK=a("strong"),HDe=o("layoutlm"),UDe=o(" \u2014 "),cx=a("a"),JDe=o("LayoutLMConfig"),YDe=o(" (LayoutLM model)"),KDe=l(),km=a("li"),tK=a("strong"),ZDe=o("layoutlmv2"),eGe=o(" \u2014 "),fx=a("a"),oGe=o("LayoutLMv2Config"),rGe=o(" (LayoutLMv2 model)"),tGe=l(),Sm=a("li"),aK=a("strong"),aGe=o("led"),nGe=o(" \u2014 "),mx=a("a"),sGe=o("LEDConfig"),lGe=o(" (LED model)"),iGe=l(),Rm=a("li"),nK=a("strong"),dGe=o("longformer"),cGe=o(" \u2014 "),gx=a("a"),fGe=o("LongformerConfig"),mGe=o(" (Longformer model)"),gGe=l(),Bm=a("li"),sK=a("strong"),hGe=o("luke"),pGe=o(" \u2014 "),hx=a("a"),_Ge=o("LukeConfig"),uGe=o(" (LUKE model)"),bGe=l(),Pm=a("li"),lK=a("strong"),FGe=o("lxmert"),vGe=o(" \u2014 "),px=a("a"),TGe=o("LxmertConfig"),MGe=o(" (LXMERT model)"),EGe=l(),$m=a("li"),iK=a("strong"),CGe=o("m2m_100"),wGe=o(" \u2014 "),_x=a("a"),AGe=o("M2M100Config"),yGe=o(" (M2M100 model)"),LGe=l(),Im=a("li"),dK=a("strong"),xGe=o("marian"),kGe=o(" \u2014 "),ux=a("a"),SGe=o("MarianConfig"),RGe=o(" (Marian model)"),BGe=l(),qm=a("li"),cK=a("strong"),PGe=o("maskformer"),$Ge=o(" \u2014 "),bx=a("a"),IGe=o("MaskFormerConfig"),qGe=o(" (MaskFormer model)"),NGe=l(),Nm=a("li"),fK=a("strong"),jGe=o("mbart"),DGe=o(" \u2014 "),Fx=a("a"),GGe=o("MBartConfig"),OGe=o(" (mBART model)"),VGe=l(),jm=a("li"),mK=a("strong"),XGe=o("megatron-bert"),zGe=o(" \u2014 "),vx=a("a"),QGe=o("MegatronBertConfig"),WGe=o(" (MegatronBert model)"),HGe=l(),Dm=a("li"),gK=a("strong"),UGe=o("mobilebert"),JGe=o(" \u2014 "),Tx=a("a"),YGe=o("MobileBertConfig"),KGe=o(" (MobileBERT model)"),ZGe=l(),Gm=a("li"),hK=a("strong"),eOe=o("mpnet"),oOe=o(" \u2014 "),Mx=a("a"),rOe=o("MPNetConfig"),tOe=o(" (MPNet model)"),aOe=l(),Om=a("li"),pK=a("strong"),nOe=o("mt5"),sOe=o(" \u2014 "),Ex=a("a"),lOe=o("MT5Config"),iOe=o(" (mT5 model)"),dOe=l(),Vm=a("li"),_K=a("strong"),cOe=o("nystromformer"),fOe=o(" \u2014 "),Cx=a("a"),mOe=o("NystromformerConfig"),gOe=o(" (Nystromformer model)"),hOe=l(),Xm=a("li"),uK=a("strong"),pOe=o("openai-gpt"),_Oe=o(" \u2014 "),wx=a("a"),uOe=o("OpenAIGPTConfig"),bOe=o(" (OpenAI GPT model)"),FOe=l(),zm=a("li"),bK=a("strong"),vOe=o("pegasus"),TOe=o(" \u2014 "),Ax=a("a"),MOe=o("PegasusConfig"),EOe=o(" (Pegasus model)"),COe=l(),Qm=a("li"),FK=a("strong"),wOe=o("perceiver"),AOe=o(" \u2014 "),yx=a("a"),yOe=o("PerceiverConfig"),LOe=o(" (Perceiver model)"),xOe=l(),Wm=a("li"),vK=a("strong"),kOe=o("plbart"),SOe=o(" \u2014 "),Lx=a("a"),ROe=o("PLBartConfig"),BOe=o(" (PLBart model)"),POe=l(),Hm=a("li"),TK=a("strong"),$Oe=o("poolformer"),IOe=o(" \u2014 "),xx=a("a"),qOe=o("PoolFormerConfig"),NOe=o(" (PoolFormer model)"),jOe=l(),Um=a("li"),MK=a("strong"),DOe=o("prophetnet"),GOe=o(" \u2014 "),kx=a("a"),OOe=o("ProphetNetConfig"),VOe=o(" (ProphetNet model)"),XOe=l(),Jm=a("li"),EK=a("strong"),zOe=o("qdqbert"),QOe=o(" \u2014 "),Sx=a("a"),WOe=o("QDQBertConfig"),HOe=o(" (QDQBert model)"),UOe=l(),Ym=a("li"),CK=a("strong"),JOe=o("rag"),YOe=o(" \u2014 "),Rx=a("a"),KOe=o("RagConfig"),ZOe=o(" (RAG model)"),eVe=l(),Km=a("li"),wK=a("strong"),oVe=o("realm"),rVe=o(" \u2014 "),Bx=a("a"),tVe=o("RealmConfig"),aVe=o(" (Realm model)"),nVe=l(),Zm=a("li"),AK=a("strong"),sVe=o("reformer"),lVe=o(" \u2014 "),Px=a("a"),iVe=o("ReformerConfig"),dVe=o(" (Reformer model)"),cVe=l(),eg=a("li"),yK=a("strong"),fVe=o("regnet"),mVe=o(" \u2014 "),$x=a("a"),gVe=o("RegNetConfig"),hVe=o(" (RegNet model)"),pVe=l(),og=a("li"),LK=a("strong"),_Ve=o("rembert"),uVe=o(" \u2014 "),Ix=a("a"),bVe=o("RemBertConfig"),FVe=o(" (RemBERT model)"),vVe=l(),rg=a("li"),xK=a("strong"),TVe=o("resnet"),MVe=o(" \u2014 "),qx=a("a"),EVe=o("ResNetConfig"),CVe=o(" (ResNet model)"),wVe=l(),tg=a("li"),kK=a("strong"),AVe=o("retribert"),yVe=o(" \u2014 "),Nx=a("a"),LVe=o("RetriBertConfig"),xVe=o(" (RetriBERT model)"),kVe=l(),ag=a("li"),SK=a("strong"),SVe=o("roberta"),RVe=o(" \u2014 "),jx=a("a"),BVe=o("RobertaConfig"),PVe=o(" (RoBERTa model)"),$Ve=l(),ng=a("li"),RK=a("strong"),IVe=o("roformer"),qVe=o(" \u2014 "),Dx=a("a"),NVe=o("RoFormerConfig"),jVe=o(" (RoFormer model)"),DVe=l(),sg=a("li"),BK=a("strong"),GVe=o("segformer"),OVe=o(" \u2014 "),Gx=a("a"),VVe=o("SegformerConfig"),XVe=o(" (SegFormer model)"),zVe=l(),lg=a("li"),PK=a("strong"),QVe=o("sew"),WVe=o(" \u2014 "),Ox=a("a"),HVe=o("SEWConfig"),UVe=o(" (SEW model)"),JVe=l(),ig=a("li"),$K=a("strong"),YVe=o("sew-d"),KVe=o(" \u2014 "),Vx=a("a"),ZVe=o("SEWDConfig"),eXe=o(" (SEW-D model)"),oXe=l(),dg=a("li"),IK=a("strong"),rXe=o("speech-encoder-decoder"),tXe=o(" \u2014 "),Xx=a("a"),aXe=o("SpeechEncoderDecoderConfig"),nXe=o(" (Speech Encoder decoder model)"),sXe=l(),cg=a("li"),qK=a("strong"),lXe=o("speech_to_text"),iXe=o(" \u2014 "),zx=a("a"),dXe=o("Speech2TextConfig"),cXe=o(" (Speech2Text model)"),fXe=l(),fg=a("li"),NK=a("strong"),mXe=o("speech_to_text_2"),gXe=o(" \u2014 "),Qx=a("a"),hXe=o("Speech2Text2Config"),pXe=o(" (Speech2Text2 model)"),_Xe=l(),mg=a("li"),jK=a("strong"),uXe=o("splinter"),bXe=o(" \u2014 "),Wx=a("a"),FXe=o("SplinterConfig"),vXe=o(" (Splinter model)"),TXe=l(),gg=a("li"),DK=a("strong"),MXe=o("squeezebert"),EXe=o(" \u2014 "),Hx=a("a"),CXe=o("SqueezeBertConfig"),wXe=o(" (SqueezeBERT model)"),AXe=l(),hg=a("li"),GK=a("strong"),yXe=o("swin"),LXe=o(" \u2014 "),Ux=a("a"),xXe=o("SwinConfig"),kXe=o(" (Swin model)"),SXe=l(),pg=a("li"),OK=a("strong"),RXe=o("t5"),BXe=o(" \u2014 "),Jx=a("a"),PXe=o("T5Config"),$Xe=o(" (T5 model)"),IXe=l(),_g=a("li"),VK=a("strong"),qXe=o("tapas"),NXe=o(" \u2014 "),Yx=a("a"),jXe=o("TapasConfig"),DXe=o(" (TAPAS model)"),GXe=l(),ug=a("li"),XK=a("strong"),OXe=o("tapex"),VXe=o(" \u2014 "),Kx=a("a"),XXe=o("BartConfig"),zXe=o(" (TAPEX model)"),QXe=l(),bg=a("li"),zK=a("strong"),WXe=o("transfo-xl"),HXe=o(" \u2014 "),Zx=a("a"),UXe=o("TransfoXLConfig"),JXe=o(" (Transformer-XL model)"),YXe=l(),Fg=a("li"),QK=a("strong"),KXe=o("trocr"),ZXe=o(" \u2014 "),ek=a("a"),eze=o("TrOCRConfig"),oze=o(" (TrOCR model)"),rze=l(),vg=a("li"),WK=a("strong"),tze=o("unispeech"),aze=o(" \u2014 "),ok=a("a"),nze=o("UniSpeechConfig"),sze=o(" (UniSpeech model)"),lze=l(),Tg=a("li"),HK=a("strong"),ize=o("unispeech-sat"),dze=o(" \u2014 "),rk=a("a"),cze=o("UniSpeechSatConfig"),fze=o(" (UniSpeechSat model)"),mze=l(),Mg=a("li"),UK=a("strong"),gze=o("van"),hze=o(" \u2014 "),tk=a("a"),pze=o("VanConfig"),_ze=o(" (VAN model)"),uze=l(),Eg=a("li"),JK=a("strong"),bze=o("vilt"),Fze=o(" \u2014 "),ak=a("a"),vze=o("ViltConfig"),Tze=o(" (ViLT model)"),Mze=l(),Cg=a("li"),YK=a("strong"),Eze=o("vision-encoder-decoder"),Cze=o(" \u2014 "),nk=a("a"),wze=o("VisionEncoderDecoderConfig"),Aze=o(" (Vision Encoder decoder model)"),yze=l(),wg=a("li"),KK=a("strong"),Lze=o("vision-text-dual-encoder"),xze=o(" \u2014 "),sk=a("a"),kze=o("VisionTextDualEncoderConfig"),Sze=o(" (VisionTextDualEncoder model)"),Rze=l(),Ag=a("li"),ZK=a("strong"),Bze=o("visual_bert"),Pze=o(" \u2014 "),lk=a("a"),$ze=o("VisualBertConfig"),Ize=o(" (VisualBert model)"),qze=l(),yg=a("li"),eZ=a("strong"),Nze=o("vit"),jze=o(" \u2014 "),ik=a("a"),Dze=o("ViTConfig"),Gze=o(" (ViT model)"),Oze=l(),Lg=a("li"),oZ=a("strong"),Vze=o("vit_mae"),Xze=o(" \u2014 "),dk=a("a"),zze=o("ViTMAEConfig"),Qze=o(" (ViTMAE model)"),Wze=l(),xg=a("li"),rZ=a("strong"),Hze=o("wav2vec2"),Uze=o(" \u2014 "),ck=a("a"),Jze=o("Wav2Vec2Config"),Yze=o(" (Wav2Vec2 model)"),Kze=l(),kg=a("li"),tZ=a("strong"),Zze=o("wavlm"),eQe=o(" \u2014 "),fk=a("a"),oQe=o("WavLMConfig"),rQe=o(" (WavLM model)"),tQe=l(),Sg=a("li"),aZ=a("strong"),aQe=o("xglm"),nQe=o(" \u2014 "),mk=a("a"),sQe=o("XGLMConfig"),lQe=o(" (XGLM model)"),iQe=l(),Rg=a("li"),nZ=a("strong"),dQe=o("xlm"),cQe=o(" \u2014 "),gk=a("a"),fQe=o("XLMConfig"),mQe=o(" (XLM model)"),gQe=l(),Bg=a("li"),sZ=a("strong"),hQe=o("xlm-prophetnet"),pQe=o(" \u2014 "),hk=a("a"),_Qe=o("XLMProphetNetConfig"),uQe=o(" (XLMProphetNet model)"),bQe=l(),Pg=a("li"),lZ=a("strong"),FQe=o("xlm-roberta"),vQe=o(" \u2014 "),pk=a("a"),TQe=o("XLMRobertaConfig"),MQe=o(" (XLM-RoBERTa model)"),EQe=l(),$g=a("li"),iZ=a("strong"),CQe=o("xlm-roberta-xl"),wQe=o(" \u2014 "),_k=a("a"),AQe=o("XLMRobertaXLConfig"),yQe=o(" (XLM-RoBERTa-XL model)"),LQe=l(),Ig=a("li"),dZ=a("strong"),xQe=o("xlnet"),kQe=o(" \u2014 "),uk=a("a"),SQe=o("XLNetConfig"),RQe=o(" (XLNet model)"),BQe=l(),qg=a("li"),cZ=a("strong"),PQe=o("yoso"),$Qe=o(" \u2014 "),bk=a("a"),IQe=o("YosoConfig"),qQe=o(" (YOSO model)"),NQe=l(),fZ=a("p"),jQe=o("Examples:"),DQe=l(),f(qC.$$.fragment),GQe=l(),Ng=a("div"),f(NC.$$.fragment),OQe=l(),mZ=a("p"),VQe=o("Register a new configuration for this class."),PRe=l(),Qi=a("h2"),jg=a("a"),gZ=a("span"),f(jC.$$.fragment),XQe=l(),hZ=a("span"),zQe=o("AutoTokenizer"),$Re=l(),Wo=a("div"),f(DC.$$.fragment),QQe=l(),GC=a("p"),WQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Fk=a("a"),HQe=o("AutoTokenizer.from_pretrained()"),UQe=o(" class method."),JQe=l(),OC=a("p"),YQe=o("This class cannot be instantiated directly using "),pZ=a("code"),KQe=o("__init__()"),ZQe=o(" (throws an error)."),eWe=l(),go=a("div"),f(VC.$$.fragment),oWe=l(),_Z=a("p"),rWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tWe=l(),Oa=a("p"),aWe=o("The tokenizer class to instantiate is selected based on the "),uZ=a("code"),nWe=o("model_type"),sWe=o(` property of the config object (either
passed as an argument or loaded from `),bZ=a("code"),lWe=o("pretrained_model_name_or_path"),iWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FZ=a("code"),dWe=o("pretrained_model_name_or_path"),cWe=o(":"),fWe=l(),E=a("ul"),Qn=a("li"),vZ=a("strong"),mWe=o("albert"),gWe=o(" \u2014 "),vk=a("a"),hWe=o("AlbertTokenizer"),pWe=o(" or "),Tk=a("a"),_We=o("AlbertTokenizerFast"),uWe=o(" (ALBERT model)"),bWe=l(),Wn=a("li"),TZ=a("strong"),FWe=o("bart"),vWe=o(" \u2014 "),Mk=a("a"),TWe=o("BartTokenizer"),MWe=o(" or "),Ek=a("a"),EWe=o("BartTokenizerFast"),CWe=o(" (BART model)"),wWe=l(),Hn=a("li"),MZ=a("strong"),AWe=o("barthez"),yWe=o(" \u2014 "),Ck=a("a"),LWe=o("BarthezTokenizer"),xWe=o(" or "),wk=a("a"),kWe=o("BarthezTokenizerFast"),SWe=o(" (BARThez model)"),RWe=l(),Dg=a("li"),EZ=a("strong"),BWe=o("bartpho"),PWe=o(" \u2014 "),Ak=a("a"),$We=o("BartphoTokenizer"),IWe=o(" (BARTpho model)"),qWe=l(),Un=a("li"),CZ=a("strong"),NWe=o("bert"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("BertTokenizer"),GWe=o(" or "),Lk=a("a"),OWe=o("BertTokenizerFast"),VWe=o(" (BERT model)"),XWe=l(),Gg=a("li"),wZ=a("strong"),zWe=o("bert-generation"),QWe=o(" \u2014 "),xk=a("a"),WWe=o("BertGenerationTokenizer"),HWe=o(" (Bert Generation model)"),UWe=l(),Og=a("li"),AZ=a("strong"),JWe=o("bert-japanese"),YWe=o(" \u2014 "),kk=a("a"),KWe=o("BertJapaneseTokenizer"),ZWe=o(" (BertJapanese model)"),eHe=l(),Vg=a("li"),yZ=a("strong"),oHe=o("bertweet"),rHe=o(" \u2014 "),Sk=a("a"),tHe=o("BertweetTokenizer"),aHe=o(" (Bertweet model)"),nHe=l(),Jn=a("li"),LZ=a("strong"),sHe=o("big_bird"),lHe=o(" \u2014 "),Rk=a("a"),iHe=o("BigBirdTokenizer"),dHe=o(" or "),Bk=a("a"),cHe=o("BigBirdTokenizerFast"),fHe=o(" (BigBird model)"),mHe=l(),Yn=a("li"),xZ=a("strong"),gHe=o("bigbird_pegasus"),hHe=o(" \u2014 "),Pk=a("a"),pHe=o("PegasusTokenizer"),_He=o(" or "),$k=a("a"),uHe=o("PegasusTokenizerFast"),bHe=o(" (BigBirdPegasus model)"),FHe=l(),Kn=a("li"),kZ=a("strong"),vHe=o("blenderbot"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("BlenderbotTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("BlenderbotTokenizerFast"),wHe=o(" (Blenderbot model)"),AHe=l(),Xg=a("li"),SZ=a("strong"),yHe=o("blenderbot-small"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("BlenderbotSmallTokenizer"),kHe=o(" (BlenderbotSmall model)"),SHe=l(),zg=a("li"),RZ=a("strong"),RHe=o("byt5"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("ByT5Tokenizer"),$He=o(" (ByT5 model)"),IHe=l(),Zn=a("li"),BZ=a("strong"),qHe=o("camembert"),NHe=o(" \u2014 "),Dk=a("a"),jHe=o("CamembertTokenizer"),DHe=o(" or "),Gk=a("a"),GHe=o("CamembertTokenizerFast"),OHe=o(" (CamemBERT model)"),VHe=l(),Qg=a("li"),PZ=a("strong"),XHe=o("canine"),zHe=o(" \u2014 "),Ok=a("a"),QHe=o("CanineTokenizer"),WHe=o(" (Canine model)"),HHe=l(),es=a("li"),$Z=a("strong"),UHe=o("clip"),JHe=o(" \u2014 "),Vk=a("a"),YHe=o("CLIPTokenizer"),KHe=o(" or "),Xk=a("a"),ZHe=o("CLIPTokenizerFast"),eUe=o(" (CLIP model)"),oUe=l(),os=a("li"),IZ=a("strong"),rUe=o("convbert"),tUe=o(" \u2014 "),zk=a("a"),aUe=o("ConvBertTokenizer"),nUe=o(" or "),Qk=a("a"),sUe=o("ConvBertTokenizerFast"),lUe=o(" (ConvBERT model)"),iUe=l(),rs=a("li"),qZ=a("strong"),dUe=o("cpm"),cUe=o(" \u2014 "),Wk=a("a"),fUe=o("CpmTokenizer"),mUe=o(" or "),NZ=a("code"),gUe=o("CpmTokenizerFast"),hUe=o(" (CPM model)"),pUe=l(),Wg=a("li"),jZ=a("strong"),_Ue=o("ctrl"),uUe=o(" \u2014 "),Hk=a("a"),bUe=o("CTRLTokenizer"),FUe=o(" (CTRL model)"),vUe=l(),ts=a("li"),DZ=a("strong"),TUe=o("deberta"),MUe=o(" \u2014 "),Uk=a("a"),EUe=o("DebertaTokenizer"),CUe=o(" or "),Jk=a("a"),wUe=o("DebertaTokenizerFast"),AUe=o(" (DeBERTa model)"),yUe=l(),Hg=a("li"),GZ=a("strong"),LUe=o("deberta-v2"),xUe=o(" \u2014 "),Yk=a("a"),kUe=o("DebertaV2Tokenizer"),SUe=o(" (DeBERTa-v2 model)"),RUe=l(),as=a("li"),OZ=a("strong"),BUe=o("distilbert"),PUe=o(" \u2014 "),Kk=a("a"),$Ue=o("DistilBertTokenizer"),IUe=o(" or "),Zk=a("a"),qUe=o("DistilBertTokenizerFast"),NUe=o(" (DistilBERT model)"),jUe=l(),ns=a("li"),VZ=a("strong"),DUe=o("dpr"),GUe=o(" \u2014 "),eS=a("a"),OUe=o("DPRQuestionEncoderTokenizer"),VUe=o(" or "),oS=a("a"),XUe=o("DPRQuestionEncoderTokenizerFast"),zUe=o(" (DPR model)"),QUe=l(),ss=a("li"),XZ=a("strong"),WUe=o("electra"),HUe=o(" \u2014 "),rS=a("a"),UUe=o("ElectraTokenizer"),JUe=o(" or "),tS=a("a"),YUe=o("ElectraTokenizerFast"),KUe=o(" (ELECTRA model)"),ZUe=l(),Ug=a("li"),zZ=a("strong"),eJe=o("fastspeech2"),oJe=o(" \u2014 "),aS=a("a"),rJe=o("FastSpeech2Tokenizer"),tJe=o(" (FastSpeech2 model)"),aJe=l(),Jg=a("li"),QZ=a("strong"),nJe=o("flaubert"),sJe=o(" \u2014 "),nS=a("a"),lJe=o("FlaubertTokenizer"),iJe=o(" (FlauBERT model)"),dJe=l(),ls=a("li"),WZ=a("strong"),cJe=o("fnet"),fJe=o(" \u2014 "),sS=a("a"),mJe=o("FNetTokenizer"),gJe=o(" or "),lS=a("a"),hJe=o("FNetTokenizerFast"),pJe=o(" (FNet model)"),_Je=l(),Yg=a("li"),HZ=a("strong"),uJe=o("fsmt"),bJe=o(" \u2014 "),iS=a("a"),FJe=o("FSMTTokenizer"),vJe=o(" (FairSeq Machine-Translation model)"),TJe=l(),is=a("li"),UZ=a("strong"),MJe=o("funnel"),EJe=o(" \u2014 "),dS=a("a"),CJe=o("FunnelTokenizer"),wJe=o(" or "),cS=a("a"),AJe=o("FunnelTokenizerFast"),yJe=o(" (Funnel Transformer model)"),LJe=l(),ds=a("li"),JZ=a("strong"),xJe=o("gpt2"),kJe=o(" \u2014 "),fS=a("a"),SJe=o("GPT2Tokenizer"),RJe=o(" or "),mS=a("a"),BJe=o("GPT2TokenizerFast"),PJe=o(" (OpenAI GPT-2 model)"),$Je=l(),cs=a("li"),YZ=a("strong"),IJe=o("gpt_neo"),qJe=o(" \u2014 "),gS=a("a"),NJe=o("GPT2Tokenizer"),jJe=o(" or "),hS=a("a"),DJe=o("GPT2TokenizerFast"),GJe=o(" (GPT Neo model)"),OJe=l(),fs=a("li"),KZ=a("strong"),VJe=o("herbert"),XJe=o(" \u2014 "),pS=a("a"),zJe=o("HerbertTokenizer"),QJe=o(" or "),_S=a("a"),WJe=o("HerbertTokenizerFast"),HJe=o(" (HerBERT model)"),UJe=l(),Kg=a("li"),ZZ=a("strong"),JJe=o("hubert"),YJe=o(" \u2014 "),uS=a("a"),KJe=o("Wav2Vec2CTCTokenizer"),ZJe=o(" (Hubert model)"),eYe=l(),ms=a("li"),eee=a("strong"),oYe=o("ibert"),rYe=o(" \u2014 "),bS=a("a"),tYe=o("RobertaTokenizer"),aYe=o(" or "),FS=a("a"),nYe=o("RobertaTokenizerFast"),sYe=o(" (I-BERT model)"),lYe=l(),gs=a("li"),oee=a("strong"),iYe=o("layoutlm"),dYe=o(" \u2014 "),vS=a("a"),cYe=o("LayoutLMTokenizer"),fYe=o(" or "),TS=a("a"),mYe=o("LayoutLMTokenizerFast"),gYe=o(" (LayoutLM model)"),hYe=l(),hs=a("li"),ree=a("strong"),pYe=o("layoutlmv2"),_Ye=o(" \u2014 "),MS=a("a"),uYe=o("LayoutLMv2Tokenizer"),bYe=o(" or "),ES=a("a"),FYe=o("LayoutLMv2TokenizerFast"),vYe=o(" (LayoutLMv2 model)"),TYe=l(),ps=a("li"),tee=a("strong"),MYe=o("layoutxlm"),EYe=o(" \u2014 "),CS=a("a"),CYe=o("LayoutXLMTokenizer"),wYe=o(" or "),wS=a("a"),AYe=o("LayoutXLMTokenizerFast"),yYe=o(" (LayoutXLM model)"),LYe=l(),_s=a("li"),aee=a("strong"),xYe=o("led"),kYe=o(" \u2014 "),AS=a("a"),SYe=o("LEDTokenizer"),RYe=o(" or "),yS=a("a"),BYe=o("LEDTokenizerFast"),PYe=o(" (LED model)"),$Ye=l(),us=a("li"),nee=a("strong"),IYe=o("longformer"),qYe=o(" \u2014 "),LS=a("a"),NYe=o("LongformerTokenizer"),jYe=o(" or "),xS=a("a"),DYe=o("LongformerTokenizerFast"),GYe=o(" (Longformer model)"),OYe=l(),Zg=a("li"),see=a("strong"),VYe=o("luke"),XYe=o(" \u2014 "),kS=a("a"),zYe=o("LukeTokenizer"),QYe=o(" (LUKE model)"),WYe=l(),bs=a("li"),lee=a("strong"),HYe=o("lxmert"),UYe=o(" \u2014 "),SS=a("a"),JYe=o("LxmertTokenizer"),YYe=o(" or "),RS=a("a"),KYe=o("LxmertTokenizerFast"),ZYe=o(" (LXMERT model)"),eKe=l(),eh=a("li"),iee=a("strong"),oKe=o("m2m_100"),rKe=o(" \u2014 "),BS=a("a"),tKe=o("M2M100Tokenizer"),aKe=o(" (M2M100 model)"),nKe=l(),oh=a("li"),dee=a("strong"),sKe=o("marian"),lKe=o(" \u2014 "),PS=a("a"),iKe=o("MarianTokenizer"),dKe=o(" (Marian model)"),cKe=l(),Fs=a("li"),cee=a("strong"),fKe=o("mbart"),mKe=o(" \u2014 "),$S=a("a"),gKe=o("MBartTokenizer"),hKe=o(" or "),IS=a("a"),pKe=o("MBartTokenizerFast"),_Ke=o(" (mBART model)"),uKe=l(),vs=a("li"),fee=a("strong"),bKe=o("mbart50"),FKe=o(" \u2014 "),qS=a("a"),vKe=o("MBart50Tokenizer"),TKe=o(" or "),NS=a("a"),MKe=o("MBart50TokenizerFast"),EKe=o(" (mBART-50 model)"),CKe=l(),rh=a("li"),mee=a("strong"),wKe=o("mluke"),AKe=o(" \u2014 "),jS=a("a"),yKe=o("MLukeTokenizer"),LKe=o(" (mLUKE model)"),xKe=l(),Ts=a("li"),gee=a("strong"),kKe=o("mobilebert"),SKe=o(" \u2014 "),DS=a("a"),RKe=o("MobileBertTokenizer"),BKe=o(" or "),GS=a("a"),PKe=o("MobileBertTokenizerFast"),$Ke=o(" (MobileBERT model)"),IKe=l(),Ms=a("li"),hee=a("strong"),qKe=o("mpnet"),NKe=o(" \u2014 "),OS=a("a"),jKe=o("MPNetTokenizer"),DKe=o(" or "),VS=a("a"),GKe=o("MPNetTokenizerFast"),OKe=o(" (MPNet model)"),VKe=l(),Es=a("li"),pee=a("strong"),XKe=o("mt5"),zKe=o(" \u2014 "),XS=a("a"),QKe=o("MT5Tokenizer"),WKe=o(" or "),zS=a("a"),HKe=o("MT5TokenizerFast"),UKe=o(" (mT5 model)"),JKe=l(),Cs=a("li"),_ee=a("strong"),YKe=o("openai-gpt"),KKe=o(" \u2014 "),QS=a("a"),ZKe=o("OpenAIGPTTokenizer"),eZe=o(" or "),WS=a("a"),oZe=o("OpenAIGPTTokenizerFast"),rZe=o(" (OpenAI GPT model)"),tZe=l(),ws=a("li"),uee=a("strong"),aZe=o("pegasus"),nZe=o(" \u2014 "),HS=a("a"),sZe=o("PegasusTokenizer"),lZe=o(" or "),US=a("a"),iZe=o("PegasusTokenizerFast"),dZe=o(" (Pegasus model)"),cZe=l(),th=a("li"),bee=a("strong"),fZe=o("perceiver"),mZe=o(" \u2014 "),JS=a("a"),gZe=o("PerceiverTokenizer"),hZe=o(" (Perceiver model)"),pZe=l(),ah=a("li"),Fee=a("strong"),_Ze=o("phobert"),uZe=o(" \u2014 "),YS=a("a"),bZe=o("PhobertTokenizer"),FZe=o(" (PhoBERT model)"),vZe=l(),nh=a("li"),vee=a("strong"),TZe=o("plbart"),MZe=o(" \u2014 "),KS=a("a"),EZe=o("PLBartTokenizer"),CZe=o(" (PLBart model)"),wZe=l(),sh=a("li"),Tee=a("strong"),AZe=o("prophetnet"),yZe=o(" \u2014 "),ZS=a("a"),LZe=o("ProphetNetTokenizer"),xZe=o(" (ProphetNet model)"),kZe=l(),As=a("li"),Mee=a("strong"),SZe=o("qdqbert"),RZe=o(" \u2014 "),eR=a("a"),BZe=o("BertTokenizer"),PZe=o(" or "),oR=a("a"),$Ze=o("BertTokenizerFast"),IZe=o(" (QDQBert model)"),qZe=l(),lh=a("li"),Eee=a("strong"),NZe=o("rag"),jZe=o(" \u2014 "),rR=a("a"),DZe=o("RagTokenizer"),GZe=o(" (RAG model)"),OZe=l(),ys=a("li"),Cee=a("strong"),VZe=o("realm"),XZe=o(" \u2014 "),tR=a("a"),zZe=o("RealmTokenizer"),QZe=o(" or "),aR=a("a"),WZe=o("RealmTokenizerFast"),HZe=o(" (Realm model)"),UZe=l(),Ls=a("li"),wee=a("strong"),JZe=o("reformer"),YZe=o(" \u2014 "),nR=a("a"),KZe=o("ReformerTokenizer"),ZZe=o(" or "),sR=a("a"),eeo=o("ReformerTokenizerFast"),oeo=o(" (Reformer model)"),reo=l(),xs=a("li"),Aee=a("strong"),teo=o("rembert"),aeo=o(" \u2014 "),lR=a("a"),neo=o("RemBertTokenizer"),seo=o(" or "),iR=a("a"),leo=o("RemBertTokenizerFast"),ieo=o(" (RemBERT model)"),deo=l(),ks=a("li"),yee=a("strong"),ceo=o("retribert"),feo=o(" \u2014 "),dR=a("a"),meo=o("RetriBertTokenizer"),geo=o(" or "),cR=a("a"),heo=o("RetriBertTokenizerFast"),peo=o(" (RetriBERT model)"),_eo=l(),Ss=a("li"),Lee=a("strong"),ueo=o("roberta"),beo=o(" \u2014 "),fR=a("a"),Feo=o("RobertaTokenizer"),veo=o(" or "),mR=a("a"),Teo=o("RobertaTokenizerFast"),Meo=o(" (RoBERTa model)"),Eeo=l(),Rs=a("li"),xee=a("strong"),Ceo=o("roformer"),weo=o(" \u2014 "),gR=a("a"),Aeo=o("RoFormerTokenizer"),yeo=o(" or "),hR=a("a"),Leo=o("RoFormerTokenizerFast"),xeo=o(" (RoFormer model)"),keo=l(),ih=a("li"),kee=a("strong"),Seo=o("speech_to_text"),Reo=o(" \u2014 "),pR=a("a"),Beo=o("Speech2TextTokenizer"),Peo=o(" (Speech2Text model)"),$eo=l(),dh=a("li"),See=a("strong"),Ieo=o("speech_to_text_2"),qeo=o(" \u2014 "),_R=a("a"),Neo=o("Speech2Text2Tokenizer"),jeo=o(" (Speech2Text2 model)"),Deo=l(),Bs=a("li"),Ree=a("strong"),Geo=o("splinter"),Oeo=o(" \u2014 "),uR=a("a"),Veo=o("SplinterTokenizer"),Xeo=o(" or "),bR=a("a"),zeo=o("SplinterTokenizerFast"),Qeo=o(" (Splinter model)"),Weo=l(),Ps=a("li"),Bee=a("strong"),Heo=o("squeezebert"),Ueo=o(" \u2014 "),FR=a("a"),Jeo=o("SqueezeBertTokenizer"),Yeo=o(" or "),vR=a("a"),Keo=o("SqueezeBertTokenizerFast"),Zeo=o(" (SqueezeBERT model)"),eoo=l(),$s=a("li"),Pee=a("strong"),ooo=o("t5"),roo=o(" \u2014 "),TR=a("a"),too=o("T5Tokenizer"),aoo=o(" or "),MR=a("a"),noo=o("T5TokenizerFast"),soo=o(" (T5 model)"),loo=l(),ch=a("li"),$ee=a("strong"),ioo=o("tapas"),doo=o(" \u2014 "),ER=a("a"),coo=o("TapasTokenizer"),foo=o(" (TAPAS model)"),moo=l(),fh=a("li"),Iee=a("strong"),goo=o("tapex"),hoo=o(" \u2014 "),CR=a("a"),poo=o("TapexTokenizer"),_oo=o(" (TAPEX model)"),uoo=l(),mh=a("li"),qee=a("strong"),boo=o("transfo-xl"),Foo=o(" \u2014 "),wR=a("a"),voo=o("TransfoXLTokenizer"),Too=o(" (Transformer-XL model)"),Moo=l(),gh=a("li"),Nee=a("strong"),Eoo=o("wav2vec2"),Coo=o(" \u2014 "),AR=a("a"),woo=o("Wav2Vec2CTCTokenizer"),Aoo=o(" (Wav2Vec2 model)"),yoo=l(),hh=a("li"),jee=a("strong"),Loo=o("wav2vec2_phoneme"),xoo=o(" \u2014 "),yR=a("a"),koo=o("Wav2Vec2PhonemeCTCTokenizer"),Soo=o(" (Wav2Vec2Phoneme model)"),Roo=l(),Is=a("li"),Dee=a("strong"),Boo=o("xglm"),Poo=o(" \u2014 "),LR=a("a"),$oo=o("XGLMTokenizer"),Ioo=o(" or "),xR=a("a"),qoo=o("XGLMTokenizerFast"),Noo=o(" (XGLM model)"),joo=l(),ph=a("li"),Gee=a("strong"),Doo=o("xlm"),Goo=o(" \u2014 "),kR=a("a"),Ooo=o("XLMTokenizer"),Voo=o(" (XLM model)"),Xoo=l(),_h=a("li"),Oee=a("strong"),zoo=o("xlm-prophetnet"),Qoo=o(" \u2014 "),SR=a("a"),Woo=o("XLMProphetNetTokenizer"),Hoo=o(" (XLMProphetNet model)"),Uoo=l(),qs=a("li"),Vee=a("strong"),Joo=o("xlm-roberta"),Yoo=o(" \u2014 "),RR=a("a"),Koo=o("XLMRobertaTokenizer"),Zoo=o(" or "),BR=a("a"),ero=o("XLMRobertaTokenizerFast"),oro=o(" (XLM-RoBERTa model)"),rro=l(),Ns=a("li"),Xee=a("strong"),tro=o("xlnet"),aro=o(" \u2014 "),PR=a("a"),nro=o("XLNetTokenizer"),sro=o(" or "),$R=a("a"),lro=o("XLNetTokenizerFast"),iro=o(" (XLNet model)"),dro=l(),zee=a("p"),cro=o("Examples:"),fro=l(),f(XC.$$.fragment),mro=l(),uh=a("div"),f(zC.$$.fragment),gro=l(),Qee=a("p"),hro=o("Register a new tokenizer in this mapping."),IRe=l(),Wi=a("h2"),bh=a("a"),Wee=a("span"),f(QC.$$.fragment),pro=l(),Hee=a("span"),_ro=o("AutoFeatureExtractor"),qRe=l(),Ho=a("div"),f(WC.$$.fragment),uro=l(),HC=a("p"),bro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IR=a("a"),Fro=o("AutoFeatureExtractor.from_pretrained()"),vro=o(" class method."),Tro=l(),UC=a("p"),Mro=o("This class cannot be instantiated directly using "),Uee=a("code"),Ero=o("__init__()"),Cro=o(" (throws an error)."),wro=l(),$e=a("div"),f(JC.$$.fragment),Aro=l(),Jee=a("p"),yro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lro=l(),Va=a("p"),xro=o("The feature extractor class to instantiate is selected based on the "),Yee=a("code"),kro=o("model_type"),Sro=o(` property of the config object
(either passed as an argument or loaded from `),Kee=a("code"),Rro=o("pretrained_model_name_or_path"),Bro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zee=a("code"),Pro=o("pretrained_model_name_or_path"),$ro=o(":"),Iro=l(),ee=a("ul"),Fh=a("li"),eoe=a("strong"),qro=o("beit"),Nro=o(" \u2014 "),qR=a("a"),jro=o("BeitFeatureExtractor"),Dro=o(" (BEiT model)"),Gro=l(),vh=a("li"),ooe=a("strong"),Oro=o("clip"),Vro=o(" \u2014 "),NR=a("a"),Xro=o("CLIPFeatureExtractor"),zro=o(" (CLIP model)"),Qro=l(),Th=a("li"),roe=a("strong"),Wro=o("convnext"),Hro=o(" \u2014 "),jR=a("a"),Uro=o("ConvNextFeatureExtractor"),Jro=o(" (ConvNext model)"),Yro=l(),Mh=a("li"),toe=a("strong"),Kro=o("deit"),Zro=o(" \u2014 "),DR=a("a"),eto=o("DeiTFeatureExtractor"),oto=o(" (DeiT model)"),rto=l(),Eh=a("li"),aoe=a("strong"),tto=o("detr"),ato=o(" \u2014 "),GR=a("a"),nto=o("DetrFeatureExtractor"),sto=o(" (DETR model)"),lto=l(),Ch=a("li"),noe=a("strong"),ito=o("hubert"),dto=o(" \u2014 "),OR=a("a"),cto=o("Wav2Vec2FeatureExtractor"),fto=o(" (Hubert model)"),mto=l(),wh=a("li"),soe=a("strong"),gto=o("layoutlmv2"),hto=o(" \u2014 "),VR=a("a"),pto=o("LayoutLMv2FeatureExtractor"),_to=o(" (LayoutLMv2 model)"),uto=l(),Ah=a("li"),loe=a("strong"),bto=o("maskformer"),Fto=o(" \u2014 "),XR=a("a"),vto=o("MaskFormerFeatureExtractor"),Tto=o(" (MaskFormer model)"),Mto=l(),yh=a("li"),ioe=a("strong"),Eto=o("perceiver"),Cto=o(" \u2014 "),zR=a("a"),wto=o("PerceiverFeatureExtractor"),Ato=o(" (Perceiver model)"),yto=l(),Lh=a("li"),doe=a("strong"),Lto=o("poolformer"),xto=o(" \u2014 "),QR=a("a"),kto=o("PoolFormerFeatureExtractor"),Sto=o(" (PoolFormer model)"),Rto=l(),xh=a("li"),coe=a("strong"),Bto=o("regnet"),Pto=o(" \u2014 "),WR=a("a"),$to=o("ConvNextFeatureExtractor"),Ito=o(" (RegNet model)"),qto=l(),kh=a("li"),foe=a("strong"),Nto=o("resnet"),jto=o(" \u2014 "),HR=a("a"),Dto=o("ConvNextFeatureExtractor"),Gto=o(" (ResNet model)"),Oto=l(),Sh=a("li"),moe=a("strong"),Vto=o("segformer"),Xto=o(" \u2014 "),UR=a("a"),zto=o("SegformerFeatureExtractor"),Qto=o(" (SegFormer model)"),Wto=l(),Rh=a("li"),goe=a("strong"),Hto=o("speech_to_text"),Uto=o(" \u2014 "),JR=a("a"),Jto=o("Speech2TextFeatureExtractor"),Yto=o(" (Speech2Text model)"),Kto=l(),Bh=a("li"),hoe=a("strong"),Zto=o("swin"),eao=o(" \u2014 "),YR=a("a"),oao=o("ViTFeatureExtractor"),rao=o(" (Swin model)"),tao=l(),Ph=a("li"),poe=a("strong"),aao=o("van"),nao=o(" \u2014 "),KR=a("a"),sao=o("ConvNextFeatureExtractor"),lao=o(" (VAN model)"),iao=l(),$h=a("li"),_oe=a("strong"),dao=o("vit"),cao=o(" \u2014 "),ZR=a("a"),fao=o("ViTFeatureExtractor"),mao=o(" (ViT model)"),gao=l(),Ih=a("li"),uoe=a("strong"),hao=o("vit_mae"),pao=o(" \u2014 "),eB=a("a"),_ao=o("ViTFeatureExtractor"),uao=o(" (ViTMAE model)"),bao=l(),qh=a("li"),boe=a("strong"),Fao=o("wav2vec2"),vao=o(" \u2014 "),oB=a("a"),Tao=o("Wav2Vec2FeatureExtractor"),Mao=o(" (Wav2Vec2 model)"),Eao=l(),f(Nh.$$.fragment),Cao=l(),Foe=a("p"),wao=o("Examples:"),Aao=l(),f(YC.$$.fragment),yao=l(),jh=a("div"),f(KC.$$.fragment),Lao=l(),voe=a("p"),xao=o("Register a new feature extractor for this class."),NRe=l(),Hi=a("h2"),Dh=a("a"),Toe=a("span"),f(ZC.$$.fragment),kao=l(),Moe=a("span"),Sao=o("AutoProcessor"),jRe=l(),Uo=a("div"),f(ew.$$.fragment),Rao=l(),ow=a("p"),Bao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rB=a("a"),Pao=o("AutoProcessor.from_pretrained()"),$ao=o(" class method."),Iao=l(),rw=a("p"),qao=o("This class cannot be instantiated directly using "),Eoe=a("code"),Nao=o("__init__()"),jao=o(" (throws an error)."),Dao=l(),Ie=a("div"),f(tw.$$.fragment),Gao=l(),Coe=a("p"),Oao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vao=l(),Ui=a("p"),Xao=o("The processor class to instantiate is selected based on the "),woe=a("code"),zao=o("model_type"),Qao=o(` property of the config object (either
passed as an argument or loaded from `),Aoe=a("code"),Wao=o("pretrained_model_name_or_path"),Hao=o(" if possible):"),Uao=l(),ke=a("ul"),Gh=a("li"),yoe=a("strong"),Jao=o("clip"),Yao=o(" \u2014 "),tB=a("a"),Kao=o("CLIPProcessor"),Zao=o(" (CLIP model)"),eno=l(),Oh=a("li"),Loe=a("strong"),ono=o("layoutlmv2"),rno=o(" \u2014 "),aB=a("a"),tno=o("LayoutLMv2Processor"),ano=o(" (LayoutLMv2 model)"),nno=l(),Vh=a("li"),xoe=a("strong"),sno=o("layoutxlm"),lno=o(" \u2014 "),nB=a("a"),ino=o("LayoutXLMProcessor"),dno=o(" (LayoutXLM model)"),cno=l(),Xh=a("li"),koe=a("strong"),fno=o("speech_to_text"),mno=o(" \u2014 "),sB=a("a"),gno=o("Speech2TextProcessor"),hno=o(" (Speech2Text model)"),pno=l(),zh=a("li"),Soe=a("strong"),_no=o("speech_to_text_2"),uno=o(" \u2014 "),lB=a("a"),bno=o("Speech2Text2Processor"),Fno=o(" (Speech2Text2 model)"),vno=l(),Qh=a("li"),Roe=a("strong"),Tno=o("trocr"),Mno=o(" \u2014 "),iB=a("a"),Eno=o("TrOCRProcessor"),Cno=o(" (TrOCR model)"),wno=l(),Wh=a("li"),Boe=a("strong"),Ano=o("vision-text-dual-encoder"),yno=o(" \u2014 "),dB=a("a"),Lno=o("VisionTextDualEncoderProcessor"),xno=o(" (VisionTextDualEncoder model)"),kno=l(),Hh=a("li"),Poe=a("strong"),Sno=o("wav2vec2"),Rno=o(" \u2014 "),cB=a("a"),Bno=o("Wav2Vec2Processor"),Pno=o(" (Wav2Vec2 model)"),$no=l(),f(Uh.$$.fragment),Ino=l(),$oe=a("p"),qno=o("Examples:"),Nno=l(),f(aw.$$.fragment),jno=l(),Jh=a("div"),f(nw.$$.fragment),Dno=l(),Ioe=a("p"),Gno=o("Register a new processor for this class."),DRe=l(),Ji=a("h2"),Yh=a("a"),qoe=a("span"),f(sw.$$.fragment),Ono=l(),Noe=a("span"),Vno=o("AutoModel"),GRe=l(),Jo=a("div"),f(lw.$$.fragment),Xno=l(),Yi=a("p"),zno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fB=a("a"),Qno=o("from_pretrained()"),Wno=o(" class method or the "),mB=a("a"),Hno=o("from_config()"),Uno=o(` class
method.`),Jno=l(),iw=a("p"),Yno=o("This class cannot be instantiated directly using "),joe=a("code"),Kno=o("__init__()"),Zno=o(" (throws an error)."),eso=l(),Xr=a("div"),f(dw.$$.fragment),oso=l(),Doe=a("p"),rso=o("Instantiates one of the base model classes of the library from a configuration."),tso=l(),Ki=a("p"),aso=o(`Note:
Loading a model from its configuration file does `),Goe=a("strong"),nso=o("not"),sso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gB=a("a"),lso=o("from_pretrained()"),iso=o(" to load the model weights."),dso=l(),Ooe=a("p"),cso=o("Examples:"),fso=l(),f(cw.$$.fragment),mso=l(),qe=a("div"),f(fw.$$.fragment),gso=l(),Voe=a("p"),hso=o("Instantiate one of the base model classes of the library from a pretrained model."),pso=l(),Xa=a("p"),_so=o("The model class to instantiate is selected based on the "),Xoe=a("code"),uso=o("model_type"),bso=o(` property of the config object (either
passed as an argument or loaded from `),zoe=a("code"),Fso=o("pretrained_model_name_or_path"),vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=a("code"),Tso=o("pretrained_model_name_or_path"),Mso=o(":"),Eso=l(),T=a("ul"),Kh=a("li"),Woe=a("strong"),Cso=o("albert"),wso=o(" \u2014 "),hB=a("a"),Aso=o("AlbertModel"),yso=o(" (ALBERT model)"),Lso=l(),Zh=a("li"),Hoe=a("strong"),xso=o("bart"),kso=o(" \u2014 "),pB=a("a"),Sso=o("BartModel"),Rso=o(" (BART model)"),Bso=l(),ep=a("li"),Uoe=a("strong"),Pso=o("beit"),$so=o(" \u2014 "),_B=a("a"),Iso=o("BeitModel"),qso=o(" (BEiT model)"),Nso=l(),op=a("li"),Joe=a("strong"),jso=o("bert"),Dso=o(" \u2014 "),uB=a("a"),Gso=o("BertModel"),Oso=o(" (BERT model)"),Vso=l(),rp=a("li"),Yoe=a("strong"),Xso=o("bert-generation"),zso=o(" \u2014 "),bB=a("a"),Qso=o("BertGenerationEncoder"),Wso=o(" (Bert Generation model)"),Hso=l(),tp=a("li"),Koe=a("strong"),Uso=o("big_bird"),Jso=o(" \u2014 "),FB=a("a"),Yso=o("BigBirdModel"),Kso=o(" (BigBird model)"),Zso=l(),ap=a("li"),Zoe=a("strong"),elo=o("bigbird_pegasus"),olo=o(" \u2014 "),vB=a("a"),rlo=o("BigBirdPegasusModel"),tlo=o(" (BigBirdPegasus model)"),alo=l(),np=a("li"),ere=a("strong"),nlo=o("blenderbot"),slo=o(" \u2014 "),TB=a("a"),llo=o("BlenderbotModel"),ilo=o(" (Blenderbot model)"),dlo=l(),sp=a("li"),ore=a("strong"),clo=o("blenderbot-small"),flo=o(" \u2014 "),MB=a("a"),mlo=o("BlenderbotSmallModel"),glo=o(" (BlenderbotSmall model)"),hlo=l(),lp=a("li"),rre=a("strong"),plo=o("camembert"),_lo=o(" \u2014 "),EB=a("a"),ulo=o("CamembertModel"),blo=o(" (CamemBERT model)"),Flo=l(),ip=a("li"),tre=a("strong"),vlo=o("canine"),Tlo=o(" \u2014 "),CB=a("a"),Mlo=o("CanineModel"),Elo=o(" (Canine model)"),Clo=l(),dp=a("li"),are=a("strong"),wlo=o("clip"),Alo=o(" \u2014 "),wB=a("a"),ylo=o("CLIPModel"),Llo=o(" (CLIP model)"),xlo=l(),cp=a("li"),nre=a("strong"),klo=o("convbert"),Slo=o(" \u2014 "),AB=a("a"),Rlo=o("ConvBertModel"),Blo=o(" (ConvBERT model)"),Plo=l(),fp=a("li"),sre=a("strong"),$lo=o("convnext"),Ilo=o(" \u2014 "),yB=a("a"),qlo=o("ConvNextModel"),Nlo=o(" (ConvNext model)"),jlo=l(),mp=a("li"),lre=a("strong"),Dlo=o("ctrl"),Glo=o(" \u2014 "),LB=a("a"),Olo=o("CTRLModel"),Vlo=o(" (CTRL model)"),Xlo=l(),gp=a("li"),ire=a("strong"),zlo=o("data2vec-audio"),Qlo=o(" \u2014 "),xB=a("a"),Wlo=o("Data2VecAudioModel"),Hlo=o(" (Data2VecAudio model)"),Ulo=l(),hp=a("li"),dre=a("strong"),Jlo=o("data2vec-text"),Ylo=o(" \u2014 "),kB=a("a"),Klo=o("Data2VecTextModel"),Zlo=o(" (Data2VecText model)"),eio=l(),pp=a("li"),cre=a("strong"),oio=o("deberta"),rio=o(" \u2014 "),SB=a("a"),tio=o("DebertaModel"),aio=o(" (DeBERTa model)"),nio=l(),_p=a("li"),fre=a("strong"),sio=o("deberta-v2"),lio=o(" \u2014 "),RB=a("a"),iio=o("DebertaV2Model"),dio=o(" (DeBERTa-v2 model)"),cio=l(),up=a("li"),mre=a("strong"),fio=o("decision_transformer"),mio=o(" \u2014 "),BB=a("a"),gio=o("DecisionTransformerModel"),hio=o(" (Decision Transformer model)"),pio=l(),bp=a("li"),gre=a("strong"),_io=o("deit"),uio=o(" \u2014 "),PB=a("a"),bio=o("DeiTModel"),Fio=o(" (DeiT model)"),vio=l(),Fp=a("li"),hre=a("strong"),Tio=o("detr"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("DetrModel"),Cio=o(" (DETR model)"),wio=l(),vp=a("li"),pre=a("strong"),Aio=o("distilbert"),yio=o(" \u2014 "),IB=a("a"),Lio=o("DistilBertModel"),xio=o(" (DistilBERT model)"),kio=l(),Tp=a("li"),_re=a("strong"),Sio=o("dpr"),Rio=o(" \u2014 "),qB=a("a"),Bio=o("DPRQuestionEncoder"),Pio=o(" (DPR model)"),$io=l(),Mp=a("li"),ure=a("strong"),Iio=o("dpt"),qio=o(" \u2014 "),NB=a("a"),Nio=o("DPTModel"),jio=o(" (DPT model)"),Dio=l(),Ep=a("li"),bre=a("strong"),Gio=o("electra"),Oio=o(" \u2014 "),jB=a("a"),Vio=o("ElectraModel"),Xio=o(" (ELECTRA model)"),zio=l(),Cp=a("li"),Fre=a("strong"),Qio=o("fastspeech2"),Wio=o(" \u2014 "),DB=a("a"),Hio=o("FastSpeech2Model"),Uio=o(" (FastSpeech2 model)"),Jio=l(),wp=a("li"),vre=a("strong"),Yio=o("flaubert"),Kio=o(" \u2014 "),GB=a("a"),Zio=o("FlaubertModel"),edo=o(" (FlauBERT model)"),odo=l(),Ap=a("li"),Tre=a("strong"),rdo=o("fnet"),tdo=o(" \u2014 "),OB=a("a"),ado=o("FNetModel"),ndo=o(" (FNet model)"),sdo=l(),yp=a("li"),Mre=a("strong"),ldo=o("fsmt"),ido=o(" \u2014 "),VB=a("a"),ddo=o("FSMTModel"),cdo=o(" (FairSeq Machine-Translation model)"),fdo=l(),js=a("li"),Ere=a("strong"),mdo=o("funnel"),gdo=o(" \u2014 "),XB=a("a"),hdo=o("FunnelModel"),pdo=o(" or "),zB=a("a"),_do=o("FunnelBaseModel"),udo=o(" (Funnel Transformer model)"),bdo=l(),Lp=a("li"),Cre=a("strong"),Fdo=o("glpn"),vdo=o(" \u2014 "),QB=a("a"),Tdo=o("GLPNModel"),Mdo=o(" (GLPN model)"),Edo=l(),xp=a("li"),wre=a("strong"),Cdo=o("gpt2"),wdo=o(" \u2014 "),WB=a("a"),Ado=o("GPT2Model"),ydo=o(" (OpenAI GPT-2 model)"),Ldo=l(),kp=a("li"),Are=a("strong"),xdo=o("gpt_neo"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("GPTNeoModel"),Rdo=o(" (GPT Neo model)"),Bdo=l(),Sp=a("li"),yre=a("strong"),Pdo=o("gptj"),$do=o(" \u2014 "),UB=a("a"),Ido=o("GPTJModel"),qdo=o(" (GPT-J model)"),Ndo=l(),Rp=a("li"),Lre=a("strong"),jdo=o("hubert"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("HubertModel"),Odo=o(" (Hubert model)"),Vdo=l(),Bp=a("li"),xre=a("strong"),Xdo=o("ibert"),zdo=o(" \u2014 "),YB=a("a"),Qdo=o("IBertModel"),Wdo=o(" (I-BERT model)"),Hdo=l(),Pp=a("li"),kre=a("strong"),Udo=o("imagegpt"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("ImageGPTModel"),Kdo=o(" (ImageGPT model)"),Zdo=l(),$p=a("li"),Sre=a("strong"),eco=o("layoutlm"),oco=o(" \u2014 "),ZB=a("a"),rco=o("LayoutLMModel"),tco=o(" (LayoutLM model)"),aco=l(),Ip=a("li"),Rre=a("strong"),nco=o("layoutlmv2"),sco=o(" \u2014 "),eP=a("a"),lco=o("LayoutLMv2Model"),ico=o(" (LayoutLMv2 model)"),dco=l(),qp=a("li"),Bre=a("strong"),cco=o("led"),fco=o(" \u2014 "),oP=a("a"),mco=o("LEDModel"),gco=o(" (LED model)"),hco=l(),Np=a("li"),Pre=a("strong"),pco=o("longformer"),_co=o(" \u2014 "),rP=a("a"),uco=o("LongformerModel"),bco=o(" (Longformer model)"),Fco=l(),jp=a("li"),$re=a("strong"),vco=o("luke"),Tco=o(" \u2014 "),tP=a("a"),Mco=o("LukeModel"),Eco=o(" (LUKE model)"),Cco=l(),Dp=a("li"),Ire=a("strong"),wco=o("lxmert"),Aco=o(" \u2014 "),aP=a("a"),yco=o("LxmertModel"),Lco=o(" (LXMERT model)"),xco=l(),Gp=a("li"),qre=a("strong"),kco=o("m2m_100"),Sco=o(" \u2014 "),nP=a("a"),Rco=o("M2M100Model"),Bco=o(" (M2M100 model)"),Pco=l(),Op=a("li"),Nre=a("strong"),$co=o("marian"),Ico=o(" \u2014 "),sP=a("a"),qco=o("MarianModel"),Nco=o(" (Marian model)"),jco=l(),Vp=a("li"),jre=a("strong"),Dco=o("maskformer"),Gco=o(" \u2014 "),lP=a("a"),Oco=o("MaskFormerModel"),Vco=o(" (MaskFormer model)"),Xco=l(),Xp=a("li"),Dre=a("strong"),zco=o("mbart"),Qco=o(" \u2014 "),iP=a("a"),Wco=o("MBartModel"),Hco=o(" (mBART model)"),Uco=l(),zp=a("li"),Gre=a("strong"),Jco=o("megatron-bert"),Yco=o(" \u2014 "),dP=a("a"),Kco=o("MegatronBertModel"),Zco=o(" (MegatronBert model)"),efo=l(),Qp=a("li"),Ore=a("strong"),ofo=o("mobilebert"),rfo=o(" \u2014 "),cP=a("a"),tfo=o("MobileBertModel"),afo=o(" (MobileBERT model)"),nfo=l(),Wp=a("li"),Vre=a("strong"),sfo=o("mpnet"),lfo=o(" \u2014 "),fP=a("a"),ifo=o("MPNetModel"),dfo=o(" (MPNet model)"),cfo=l(),Hp=a("li"),Xre=a("strong"),ffo=o("mt5"),mfo=o(" \u2014 "),mP=a("a"),gfo=o("MT5Model"),hfo=o(" (mT5 model)"),pfo=l(),Up=a("li"),zre=a("strong"),_fo=o("nystromformer"),ufo=o(" \u2014 "),gP=a("a"),bfo=o("NystromformerModel"),Ffo=o(" (Nystromformer model)"),vfo=l(),Jp=a("li"),Qre=a("strong"),Tfo=o("openai-gpt"),Mfo=o(" \u2014 "),hP=a("a"),Efo=o("OpenAIGPTModel"),Cfo=o(" (OpenAI GPT model)"),wfo=l(),Yp=a("li"),Wre=a("strong"),Afo=o("pegasus"),yfo=o(" \u2014 "),pP=a("a"),Lfo=o("PegasusModel"),xfo=o(" (Pegasus model)"),kfo=l(),Kp=a("li"),Hre=a("strong"),Sfo=o("perceiver"),Rfo=o(" \u2014 "),_P=a("a"),Bfo=o("PerceiverModel"),Pfo=o(" (Perceiver model)"),$fo=l(),Zp=a("li"),Ure=a("strong"),Ifo=o("plbart"),qfo=o(" \u2014 "),uP=a("a"),Nfo=o("PLBartModel"),jfo=o(" (PLBart model)"),Dfo=l(),e_=a("li"),Jre=a("strong"),Gfo=o("poolformer"),Ofo=o(" \u2014 "),bP=a("a"),Vfo=o("PoolFormerModel"),Xfo=o(" (PoolFormer model)"),zfo=l(),o_=a("li"),Yre=a("strong"),Qfo=o("prophetnet"),Wfo=o(" \u2014 "),FP=a("a"),Hfo=o("ProphetNetModel"),Ufo=o(" (ProphetNet model)"),Jfo=l(),r_=a("li"),Kre=a("strong"),Yfo=o("qdqbert"),Kfo=o(" \u2014 "),vP=a("a"),Zfo=o("QDQBertModel"),emo=o(" (QDQBert model)"),omo=l(),t_=a("li"),Zre=a("strong"),rmo=o("reformer"),tmo=o(" \u2014 "),TP=a("a"),amo=o("ReformerModel"),nmo=o(" (Reformer model)"),smo=l(),a_=a("li"),ete=a("strong"),lmo=o("regnet"),imo=o(" \u2014 "),MP=a("a"),dmo=o("RegNetModel"),cmo=o(" (RegNet model)"),fmo=l(),n_=a("li"),ote=a("strong"),mmo=o("rembert"),gmo=o(" \u2014 "),EP=a("a"),hmo=o("RemBertModel"),pmo=o(" (RemBERT model)"),_mo=l(),s_=a("li"),rte=a("strong"),umo=o("resnet"),bmo=o(" \u2014 "),CP=a("a"),Fmo=o("ResNetModel"),vmo=o(" (ResNet model)"),Tmo=l(),l_=a("li"),tte=a("strong"),Mmo=o("retribert"),Emo=o(" \u2014 "),wP=a("a"),Cmo=o("RetriBertModel"),wmo=o(" (RetriBERT model)"),Amo=l(),i_=a("li"),ate=a("strong"),ymo=o("roberta"),Lmo=o(" \u2014 "),AP=a("a"),xmo=o("RobertaModel"),kmo=o(" (RoBERTa model)"),Smo=l(),d_=a("li"),nte=a("strong"),Rmo=o("roformer"),Bmo=o(" \u2014 "),yP=a("a"),Pmo=o("RoFormerModel"),$mo=o(" (RoFormer model)"),Imo=l(),c_=a("li"),ste=a("strong"),qmo=o("segformer"),Nmo=o(" \u2014 "),LP=a("a"),jmo=o("SegformerModel"),Dmo=o(" (SegFormer model)"),Gmo=l(),f_=a("li"),lte=a("strong"),Omo=o("sew"),Vmo=o(" \u2014 "),xP=a("a"),Xmo=o("SEWModel"),zmo=o(" (SEW model)"),Qmo=l(),m_=a("li"),ite=a("strong"),Wmo=o("sew-d"),Hmo=o(" \u2014 "),kP=a("a"),Umo=o("SEWDModel"),Jmo=o(" (SEW-D model)"),Ymo=l(),g_=a("li"),dte=a("strong"),Kmo=o("speech_to_text"),Zmo=o(" \u2014 "),SP=a("a"),ego=o("Speech2TextModel"),ogo=o(" (Speech2Text model)"),rgo=l(),h_=a("li"),cte=a("strong"),tgo=o("splinter"),ago=o(" \u2014 "),RP=a("a"),ngo=o("SplinterModel"),sgo=o(" (Splinter model)"),lgo=l(),p_=a("li"),fte=a("strong"),igo=o("squeezebert"),dgo=o(" \u2014 "),BP=a("a"),cgo=o("SqueezeBertModel"),fgo=o(" (SqueezeBERT model)"),mgo=l(),__=a("li"),mte=a("strong"),ggo=o("swin"),hgo=o(" \u2014 "),PP=a("a"),pgo=o("SwinModel"),_go=o(" (Swin model)"),ugo=l(),u_=a("li"),gte=a("strong"),bgo=o("t5"),Fgo=o(" \u2014 "),$P=a("a"),vgo=o("T5Model"),Tgo=o(" (T5 model)"),Mgo=l(),b_=a("li"),hte=a("strong"),Ego=o("tapas"),Cgo=o(" \u2014 "),IP=a("a"),wgo=o("TapasModel"),Ago=o(" (TAPAS model)"),ygo=l(),F_=a("li"),pte=a("strong"),Lgo=o("transfo-xl"),xgo=o(" \u2014 "),qP=a("a"),kgo=o("TransfoXLModel"),Sgo=o(" (Transformer-XL model)"),Rgo=l(),v_=a("li"),_te=a("strong"),Bgo=o("unispeech"),Pgo=o(" \u2014 "),NP=a("a"),$go=o("UniSpeechModel"),Igo=o(" (UniSpeech model)"),qgo=l(),T_=a("li"),ute=a("strong"),Ngo=o("unispeech-sat"),jgo=o(" \u2014 "),jP=a("a"),Dgo=o("UniSpeechSatModel"),Ggo=o(" (UniSpeechSat model)"),Ogo=l(),M_=a("li"),bte=a("strong"),Vgo=o("van"),Xgo=o(" \u2014 "),DP=a("a"),zgo=o("VanModel"),Qgo=o(" (VAN model)"),Wgo=l(),E_=a("li"),Fte=a("strong"),Hgo=o("vilt"),Ugo=o(" \u2014 "),GP=a("a"),Jgo=o("ViltModel"),Ygo=o(" (ViLT model)"),Kgo=l(),C_=a("li"),vte=a("strong"),Zgo=o("vision-text-dual-encoder"),eho=o(" \u2014 "),OP=a("a"),oho=o("VisionTextDualEncoderModel"),rho=o(" (VisionTextDualEncoder model)"),tho=l(),w_=a("li"),Tte=a("strong"),aho=o("visual_bert"),nho=o(" \u2014 "),VP=a("a"),sho=o("VisualBertModel"),lho=o(" (VisualBert model)"),iho=l(),A_=a("li"),Mte=a("strong"),dho=o("vit"),cho=o(" \u2014 "),XP=a("a"),fho=o("ViTModel"),mho=o(" (ViT model)"),gho=l(),y_=a("li"),Ete=a("strong"),hho=o("vit_mae"),pho=o(" \u2014 "),zP=a("a"),_ho=o("ViTMAEModel"),uho=o(" (ViTMAE model)"),bho=l(),L_=a("li"),Cte=a("strong"),Fho=o("wav2vec2"),vho=o(" \u2014 "),QP=a("a"),Tho=o("Wav2Vec2Model"),Mho=o(" (Wav2Vec2 model)"),Eho=l(),x_=a("li"),wte=a("strong"),Cho=o("wavlm"),who=o(" \u2014 "),WP=a("a"),Aho=o("WavLMModel"),yho=o(" (WavLM model)"),Lho=l(),k_=a("li"),Ate=a("strong"),xho=o("xglm"),kho=o(" \u2014 "),HP=a("a"),Sho=o("XGLMModel"),Rho=o(" (XGLM model)"),Bho=l(),S_=a("li"),yte=a("strong"),Pho=o("xlm"),$ho=o(" \u2014 "),UP=a("a"),Iho=o("XLMModel"),qho=o(" (XLM model)"),Nho=l(),R_=a("li"),Lte=a("strong"),jho=o("xlm-prophetnet"),Dho=o(" \u2014 "),JP=a("a"),Gho=o("XLMProphetNetModel"),Oho=o(" (XLMProphetNet model)"),Vho=l(),B_=a("li"),xte=a("strong"),Xho=o("xlm-roberta"),zho=o(" \u2014 "),YP=a("a"),Qho=o("XLMRobertaModel"),Who=o(" (XLM-RoBERTa model)"),Hho=l(),P_=a("li"),kte=a("strong"),Uho=o("xlm-roberta-xl"),Jho=o(" \u2014 "),KP=a("a"),Yho=o("XLMRobertaXLModel"),Kho=o(" (XLM-RoBERTa-XL model)"),Zho=l(),$_=a("li"),Ste=a("strong"),epo=o("xlnet"),opo=o(" \u2014 "),ZP=a("a"),rpo=o("XLNetModel"),tpo=o(" (XLNet model)"),apo=l(),I_=a("li"),Rte=a("strong"),npo=o("yoso"),spo=o(" \u2014 "),e$=a("a"),lpo=o("YosoModel"),ipo=o(" (YOSO model)"),dpo=l(),q_=a("p"),cpo=o("The model is set in evaluation mode by default using "),Bte=a("code"),fpo=o("model.eval()"),mpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pte=a("code"),gpo=o("model.train()"),hpo=l(),$te=a("p"),ppo=o("Examples:"),_po=l(),f(mw.$$.fragment),ORe=l(),Zi=a("h2"),N_=a("a"),Ite=a("span"),f(gw.$$.fragment),upo=l(),qte=a("span"),bpo=o("AutoModelForPreTraining"),VRe=l(),Yo=a("div"),f(hw.$$.fragment),Fpo=l(),ed=a("p"),vpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o$=a("a"),Tpo=o("from_pretrained()"),Mpo=o(" class method or the "),r$=a("a"),Epo=o("from_config()"),Cpo=o(` class
method.`),wpo=l(),pw=a("p"),Apo=o("This class cannot be instantiated directly using "),Nte=a("code"),ypo=o("__init__()"),Lpo=o(" (throws an error)."),xpo=l(),zr=a("div"),f(_w.$$.fragment),kpo=l(),jte=a("p"),Spo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rpo=l(),od=a("p"),Bpo=o(`Note:
Loading a model from its configuration file does `),Dte=a("strong"),Ppo=o("not"),$po=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t$=a("a"),Ipo=o("from_pretrained()"),qpo=o(" to load the model weights."),Npo=l(),Gte=a("p"),jpo=o("Examples:"),Dpo=l(),f(uw.$$.fragment),Gpo=l(),Ne=a("div"),f(bw.$$.fragment),Opo=l(),Ote=a("p"),Vpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xpo=l(),za=a("p"),zpo=o("The model class to instantiate is selected based on the "),Vte=a("code"),Qpo=o("model_type"),Wpo=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),Hpo=o("pretrained_model_name_or_path"),Upo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),Jpo=o("pretrained_model_name_or_path"),Ypo=o(":"),Kpo=l(),S=a("ul"),j_=a("li"),Qte=a("strong"),Zpo=o("albert"),e_o=o(" \u2014 "),a$=a("a"),o_o=o("AlbertForPreTraining"),r_o=o(" (ALBERT model)"),t_o=l(),D_=a("li"),Wte=a("strong"),a_o=o("bart"),n_o=o(" \u2014 "),n$=a("a"),s_o=o("BartForConditionalGeneration"),l_o=o(" (BART model)"),i_o=l(),G_=a("li"),Hte=a("strong"),d_o=o("bert"),c_o=o(" \u2014 "),s$=a("a"),f_o=o("BertForPreTraining"),m_o=o(" (BERT model)"),g_o=l(),O_=a("li"),Ute=a("strong"),h_o=o("big_bird"),p_o=o(" \u2014 "),l$=a("a"),__o=o("BigBirdForPreTraining"),u_o=o(" (BigBird model)"),b_o=l(),V_=a("li"),Jte=a("strong"),F_o=o("camembert"),v_o=o(" \u2014 "),i$=a("a"),T_o=o("CamembertForMaskedLM"),M_o=o(" (CamemBERT model)"),E_o=l(),X_=a("li"),Yte=a("strong"),C_o=o("ctrl"),w_o=o(" \u2014 "),d$=a("a"),A_o=o("CTRLLMHeadModel"),y_o=o(" (CTRL model)"),L_o=l(),z_=a("li"),Kte=a("strong"),x_o=o("data2vec-text"),k_o=o(" \u2014 "),c$=a("a"),S_o=o("Data2VecTextForMaskedLM"),R_o=o(" (Data2VecText model)"),B_o=l(),Q_=a("li"),Zte=a("strong"),P_o=o("deberta"),$_o=o(" \u2014 "),f$=a("a"),I_o=o("DebertaForMaskedLM"),q_o=o(" (DeBERTa model)"),N_o=l(),W_=a("li"),eae=a("strong"),j_o=o("deberta-v2"),D_o=o(" \u2014 "),m$=a("a"),G_o=o("DebertaV2ForMaskedLM"),O_o=o(" (DeBERTa-v2 model)"),V_o=l(),H_=a("li"),oae=a("strong"),X_o=o("distilbert"),z_o=o(" \u2014 "),g$=a("a"),Q_o=o("DistilBertForMaskedLM"),W_o=o(" (DistilBERT model)"),H_o=l(),U_=a("li"),rae=a("strong"),U_o=o("electra"),J_o=o(" \u2014 "),h$=a("a"),Y_o=o("ElectraForPreTraining"),K_o=o(" (ELECTRA model)"),Z_o=l(),J_=a("li"),tae=a("strong"),euo=o("flaubert"),ouo=o(" \u2014 "),p$=a("a"),ruo=o("FlaubertWithLMHeadModel"),tuo=o(" (FlauBERT model)"),auo=l(),Y_=a("li"),aae=a("strong"),nuo=o("fnet"),suo=o(" \u2014 "),_$=a("a"),luo=o("FNetForPreTraining"),iuo=o(" (FNet model)"),duo=l(),K_=a("li"),nae=a("strong"),cuo=o("fsmt"),fuo=o(" \u2014 "),u$=a("a"),muo=o("FSMTForConditionalGeneration"),guo=o(" (FairSeq Machine-Translation model)"),huo=l(),Z_=a("li"),sae=a("strong"),puo=o("funnel"),_uo=o(" \u2014 "),b$=a("a"),uuo=o("FunnelForPreTraining"),buo=o(" (Funnel Transformer model)"),Fuo=l(),eu=a("li"),lae=a("strong"),vuo=o("gpt2"),Tuo=o(" \u2014 "),F$=a("a"),Muo=o("GPT2LMHeadModel"),Euo=o(" (OpenAI GPT-2 model)"),Cuo=l(),ou=a("li"),iae=a("strong"),wuo=o("ibert"),Auo=o(" \u2014 "),v$=a("a"),yuo=o("IBertForMaskedLM"),Luo=o(" (I-BERT model)"),xuo=l(),ru=a("li"),dae=a("strong"),kuo=o("layoutlm"),Suo=o(" \u2014 "),T$=a("a"),Ruo=o("LayoutLMForMaskedLM"),Buo=o(" (LayoutLM model)"),Puo=l(),tu=a("li"),cae=a("strong"),$uo=o("longformer"),Iuo=o(" \u2014 "),M$=a("a"),quo=o("LongformerForMaskedLM"),Nuo=o(" (Longformer model)"),juo=l(),au=a("li"),fae=a("strong"),Duo=o("lxmert"),Guo=o(" \u2014 "),E$=a("a"),Ouo=o("LxmertForPreTraining"),Vuo=o(" (LXMERT model)"),Xuo=l(),nu=a("li"),mae=a("strong"),zuo=o("megatron-bert"),Quo=o(" \u2014 "),C$=a("a"),Wuo=o("MegatronBertForPreTraining"),Huo=o(" (MegatronBert model)"),Uuo=l(),su=a("li"),gae=a("strong"),Juo=o("mobilebert"),Yuo=o(" \u2014 "),w$=a("a"),Kuo=o("MobileBertForPreTraining"),Zuo=o(" (MobileBERT model)"),e1o=l(),lu=a("li"),hae=a("strong"),o1o=o("mpnet"),r1o=o(" \u2014 "),A$=a("a"),t1o=o("MPNetForMaskedLM"),a1o=o(" (MPNet model)"),n1o=l(),iu=a("li"),pae=a("strong"),s1o=o("openai-gpt"),l1o=o(" \u2014 "),y$=a("a"),i1o=o("OpenAIGPTLMHeadModel"),d1o=o(" (OpenAI GPT model)"),c1o=l(),du=a("li"),_ae=a("strong"),f1o=o("retribert"),m1o=o(" \u2014 "),L$=a("a"),g1o=o("RetriBertModel"),h1o=o(" (RetriBERT model)"),p1o=l(),cu=a("li"),uae=a("strong"),_1o=o("roberta"),u1o=o(" \u2014 "),x$=a("a"),b1o=o("RobertaForMaskedLM"),F1o=o(" (RoBERTa model)"),v1o=l(),fu=a("li"),bae=a("strong"),T1o=o("squeezebert"),M1o=o(" \u2014 "),k$=a("a"),E1o=o("SqueezeBertForMaskedLM"),C1o=o(" (SqueezeBERT model)"),w1o=l(),mu=a("li"),Fae=a("strong"),A1o=o("t5"),y1o=o(" \u2014 "),S$=a("a"),L1o=o("T5ForConditionalGeneration"),x1o=o(" (T5 model)"),k1o=l(),gu=a("li"),vae=a("strong"),S1o=o("tapas"),R1o=o(" \u2014 "),R$=a("a"),B1o=o("TapasForMaskedLM"),P1o=o(" (TAPAS model)"),$1o=l(),hu=a("li"),Tae=a("strong"),I1o=o("transfo-xl"),q1o=o(" \u2014 "),B$=a("a"),N1o=o("TransfoXLLMHeadModel"),j1o=o(" (Transformer-XL model)"),D1o=l(),pu=a("li"),Mae=a("strong"),G1o=o("unispeech"),O1o=o(" \u2014 "),P$=a("a"),V1o=o("UniSpeechForPreTraining"),X1o=o(" (UniSpeech model)"),z1o=l(),_u=a("li"),Eae=a("strong"),Q1o=o("unispeech-sat"),W1o=o(" \u2014 "),$$=a("a"),H1o=o("UniSpeechSatForPreTraining"),U1o=o(" (UniSpeechSat model)"),J1o=l(),uu=a("li"),Cae=a("strong"),Y1o=o("visual_bert"),K1o=o(" \u2014 "),I$=a("a"),Z1o=o("VisualBertForPreTraining"),e7o=o(" (VisualBert model)"),o7o=l(),bu=a("li"),wae=a("strong"),r7o=o("vit_mae"),t7o=o(" \u2014 "),q$=a("a"),a7o=o("ViTMAEForPreTraining"),n7o=o(" (ViTMAE model)"),s7o=l(),Fu=a("li"),Aae=a("strong"),l7o=o("wav2vec2"),i7o=o(" \u2014 "),N$=a("a"),d7o=o("Wav2Vec2ForPreTraining"),c7o=o(" (Wav2Vec2 model)"),f7o=l(),vu=a("li"),yae=a("strong"),m7o=o("xlm"),g7o=o(" \u2014 "),j$=a("a"),h7o=o("XLMWithLMHeadModel"),p7o=o(" (XLM model)"),_7o=l(),Tu=a("li"),Lae=a("strong"),u7o=o("xlm-roberta"),b7o=o(" \u2014 "),D$=a("a"),F7o=o("XLMRobertaForMaskedLM"),v7o=o(" (XLM-RoBERTa model)"),T7o=l(),Mu=a("li"),xae=a("strong"),M7o=o("xlm-roberta-xl"),E7o=o(" \u2014 "),G$=a("a"),C7o=o("XLMRobertaXLForMaskedLM"),w7o=o(" (XLM-RoBERTa-XL model)"),A7o=l(),Eu=a("li"),kae=a("strong"),y7o=o("xlnet"),L7o=o(" \u2014 "),O$=a("a"),x7o=o("XLNetLMHeadModel"),k7o=o(" (XLNet model)"),S7o=l(),Cu=a("p"),R7o=o("The model is set in evaluation mode by default using "),Sae=a("code"),B7o=o("model.eval()"),P7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=a("code"),$7o=o("model.train()"),I7o=l(),Bae=a("p"),q7o=o("Examples:"),N7o=l(),f(Fw.$$.fragment),XRe=l(),rd=a("h2"),wu=a("a"),Pae=a("span"),f(vw.$$.fragment),j7o=l(),$ae=a("span"),D7o=o("AutoModelForCausalLM"),zRe=l(),Ko=a("div"),f(Tw.$$.fragment),G7o=l(),td=a("p"),O7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),V$=a("a"),V7o=o("from_pretrained()"),X7o=o(" class method or the "),X$=a("a"),z7o=o("from_config()"),Q7o=o(` class
method.`),W7o=l(),Mw=a("p"),H7o=o("This class cannot be instantiated directly using "),Iae=a("code"),U7o=o("__init__()"),J7o=o(" (throws an error)."),Y7o=l(),Qr=a("div"),f(Ew.$$.fragment),K7o=l(),qae=a("p"),Z7o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ebo=l(),ad=a("p"),obo=o(`Note:
Loading a model from its configuration file does `),Nae=a("strong"),rbo=o("not"),tbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z$=a("a"),abo=o("from_pretrained()"),nbo=o(" to load the model weights."),sbo=l(),jae=a("p"),lbo=o("Examples:"),ibo=l(),f(Cw.$$.fragment),dbo=l(),je=a("div"),f(ww.$$.fragment),cbo=l(),Dae=a("p"),fbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mbo=l(),Qa=a("p"),gbo=o("The model class to instantiate is selected based on the "),Gae=a("code"),hbo=o("model_type"),pbo=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),_bo=o("pretrained_model_name_or_path"),ubo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vae=a("code"),bbo=o("pretrained_model_name_or_path"),Fbo=o(":"),vbo=l(),$=a("ul"),Au=a("li"),Xae=a("strong"),Tbo=o("bart"),Mbo=o(" \u2014 "),Q$=a("a"),Ebo=o("BartForCausalLM"),Cbo=o(" (BART model)"),wbo=l(),yu=a("li"),zae=a("strong"),Abo=o("bert"),ybo=o(" \u2014 "),W$=a("a"),Lbo=o("BertLMHeadModel"),xbo=o(" (BERT model)"),kbo=l(),Lu=a("li"),Qae=a("strong"),Sbo=o("bert-generation"),Rbo=o(" \u2014 "),H$=a("a"),Bbo=o("BertGenerationDecoder"),Pbo=o(" (Bert Generation model)"),$bo=l(),xu=a("li"),Wae=a("strong"),Ibo=o("big_bird"),qbo=o(" \u2014 "),U$=a("a"),Nbo=o("BigBirdForCausalLM"),jbo=o(" (BigBird model)"),Dbo=l(),ku=a("li"),Hae=a("strong"),Gbo=o("bigbird_pegasus"),Obo=o(" \u2014 "),J$=a("a"),Vbo=o("BigBirdPegasusForCausalLM"),Xbo=o(" (BigBirdPegasus model)"),zbo=l(),Su=a("li"),Uae=a("strong"),Qbo=o("blenderbot"),Wbo=o(" \u2014 "),Y$=a("a"),Hbo=o("BlenderbotForCausalLM"),Ubo=o(" (Blenderbot model)"),Jbo=l(),Ru=a("li"),Jae=a("strong"),Ybo=o("blenderbot-small"),Kbo=o(" \u2014 "),K$=a("a"),Zbo=o("BlenderbotSmallForCausalLM"),e5o=o(" (BlenderbotSmall model)"),o5o=l(),Bu=a("li"),Yae=a("strong"),r5o=o("camembert"),t5o=o(" \u2014 "),Z$=a("a"),a5o=o("CamembertForCausalLM"),n5o=o(" (CamemBERT model)"),s5o=l(),Pu=a("li"),Kae=a("strong"),l5o=o("ctrl"),i5o=o(" \u2014 "),eI=a("a"),d5o=o("CTRLLMHeadModel"),c5o=o(" (CTRL model)"),f5o=l(),$u=a("li"),Zae=a("strong"),m5o=o("data2vec-text"),g5o=o(" \u2014 "),oI=a("a"),h5o=o("Data2VecTextForCausalLM"),p5o=o(" (Data2VecText model)"),_5o=l(),Iu=a("li"),ene=a("strong"),u5o=o("electra"),b5o=o(" \u2014 "),rI=a("a"),F5o=o("ElectraForCausalLM"),v5o=o(" (ELECTRA model)"),T5o=l(),qu=a("li"),one=a("strong"),M5o=o("gpt2"),E5o=o(" \u2014 "),tI=a("a"),C5o=o("GPT2LMHeadModel"),w5o=o(" (OpenAI GPT-2 model)"),A5o=l(),Nu=a("li"),rne=a("strong"),y5o=o("gpt_neo"),L5o=o(" \u2014 "),aI=a("a"),x5o=o("GPTNeoForCausalLM"),k5o=o(" (GPT Neo model)"),S5o=l(),ju=a("li"),tne=a("strong"),R5o=o("gptj"),B5o=o(" \u2014 "),nI=a("a"),P5o=o("GPTJForCausalLM"),$5o=o(" (GPT-J model)"),I5o=l(),Du=a("li"),ane=a("strong"),q5o=o("marian"),N5o=o(" \u2014 "),sI=a("a"),j5o=o("MarianForCausalLM"),D5o=o(" (Marian model)"),G5o=l(),Gu=a("li"),nne=a("strong"),O5o=o("mbart"),V5o=o(" \u2014 "),lI=a("a"),X5o=o("MBartForCausalLM"),z5o=o(" (mBART model)"),Q5o=l(),Ou=a("li"),sne=a("strong"),W5o=o("megatron-bert"),H5o=o(" \u2014 "),iI=a("a"),U5o=o("MegatronBertForCausalLM"),J5o=o(" (MegatronBert model)"),Y5o=l(),Vu=a("li"),lne=a("strong"),K5o=o("openai-gpt"),Z5o=o(" \u2014 "),dI=a("a"),e3o=o("OpenAIGPTLMHeadModel"),o3o=o(" (OpenAI GPT model)"),r3o=l(),Xu=a("li"),ine=a("strong"),t3o=o("pegasus"),a3o=o(" \u2014 "),cI=a("a"),n3o=o("PegasusForCausalLM"),s3o=o(" (Pegasus model)"),l3o=l(),zu=a("li"),dne=a("strong"),i3o=o("plbart"),d3o=o(" \u2014 "),fI=a("a"),c3o=o("PLBartForCausalLM"),f3o=o(" (PLBart model)"),m3o=l(),Qu=a("li"),cne=a("strong"),g3o=o("prophetnet"),h3o=o(" \u2014 "),mI=a("a"),p3o=o("ProphetNetForCausalLM"),_3o=o(" (ProphetNet model)"),u3o=l(),Wu=a("li"),fne=a("strong"),b3o=o("qdqbert"),F3o=o(" \u2014 "),gI=a("a"),v3o=o("QDQBertLMHeadModel"),T3o=o(" (QDQBert model)"),M3o=l(),Hu=a("li"),mne=a("strong"),E3o=o("reformer"),C3o=o(" \u2014 "),hI=a("a"),w3o=o("ReformerModelWithLMHead"),A3o=o(" (Reformer model)"),y3o=l(),Uu=a("li"),gne=a("strong"),L3o=o("rembert"),x3o=o(" \u2014 "),pI=a("a"),k3o=o("RemBertForCausalLM"),S3o=o(" (RemBERT model)"),R3o=l(),Ju=a("li"),hne=a("strong"),B3o=o("roberta"),P3o=o(" \u2014 "),_I=a("a"),$3o=o("RobertaForCausalLM"),I3o=o(" (RoBERTa model)"),q3o=l(),Yu=a("li"),pne=a("strong"),N3o=o("roformer"),j3o=o(" \u2014 "),uI=a("a"),D3o=o("RoFormerForCausalLM"),G3o=o(" (RoFormer model)"),O3o=l(),Ku=a("li"),_ne=a("strong"),V3o=o("speech_to_text_2"),X3o=o(" \u2014 "),bI=a("a"),z3o=o("Speech2Text2ForCausalLM"),Q3o=o(" (Speech2Text2 model)"),W3o=l(),Zu=a("li"),une=a("strong"),H3o=o("transfo-xl"),U3o=o(" \u2014 "),FI=a("a"),J3o=o("TransfoXLLMHeadModel"),Y3o=o(" (Transformer-XL model)"),K3o=l(),e1=a("li"),bne=a("strong"),Z3o=o("trocr"),e2o=o(" \u2014 "),vI=a("a"),o2o=o("TrOCRForCausalLM"),r2o=o(" (TrOCR model)"),t2o=l(),o1=a("li"),Fne=a("strong"),a2o=o("xglm"),n2o=o(" \u2014 "),TI=a("a"),s2o=o("XGLMForCausalLM"),l2o=o(" (XGLM model)"),i2o=l(),r1=a("li"),vne=a("strong"),d2o=o("xlm"),c2o=o(" \u2014 "),MI=a("a"),f2o=o("XLMWithLMHeadModel"),m2o=o(" (XLM model)"),g2o=l(),t1=a("li"),Tne=a("strong"),h2o=o("xlm-prophetnet"),p2o=o(" \u2014 "),EI=a("a"),_2o=o("XLMProphetNetForCausalLM"),u2o=o(" (XLMProphetNet model)"),b2o=l(),a1=a("li"),Mne=a("strong"),F2o=o("xlm-roberta"),v2o=o(" \u2014 "),CI=a("a"),T2o=o("XLMRobertaForCausalLM"),M2o=o(" (XLM-RoBERTa model)"),E2o=l(),n1=a("li"),Ene=a("strong"),C2o=o("xlm-roberta-xl"),w2o=o(" \u2014 "),wI=a("a"),A2o=o("XLMRobertaXLForCausalLM"),y2o=o(" (XLM-RoBERTa-XL model)"),L2o=l(),s1=a("li"),Cne=a("strong"),x2o=o("xlnet"),k2o=o(" \u2014 "),AI=a("a"),S2o=o("XLNetLMHeadModel"),R2o=o(" (XLNet model)"),B2o=l(),l1=a("p"),P2o=o("The model is set in evaluation mode by default using "),wne=a("code"),$2o=o("model.eval()"),I2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=a("code"),q2o=o("model.train()"),N2o=l(),yne=a("p"),j2o=o("Examples:"),D2o=l(),f(Aw.$$.fragment),QRe=l(),nd=a("h2"),i1=a("a"),Lne=a("span"),f(yw.$$.fragment),G2o=l(),xne=a("span"),O2o=o("AutoModelForMaskedLM"),WRe=l(),Zo=a("div"),f(Lw.$$.fragment),V2o=l(),sd=a("p"),X2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yI=a("a"),z2o=o("from_pretrained()"),Q2o=o(" class method or the "),LI=a("a"),W2o=o("from_config()"),H2o=o(` class
method.`),U2o=l(),xw=a("p"),J2o=o("This class cannot be instantiated directly using "),kne=a("code"),Y2o=o("__init__()"),K2o=o(" (throws an error)."),Z2o=l(),Wr=a("div"),f(kw.$$.fragment),eFo=l(),Sne=a("p"),oFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rFo=l(),ld=a("p"),tFo=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),aFo=o("not"),nFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xI=a("a"),sFo=o("from_pretrained()"),lFo=o(" to load the model weights."),iFo=l(),Bne=a("p"),dFo=o("Examples:"),cFo=l(),f(Sw.$$.fragment),fFo=l(),De=a("div"),f(Rw.$$.fragment),mFo=l(),Pne=a("p"),gFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hFo=l(),Wa=a("p"),pFo=o("The model class to instantiate is selected based on the "),$ne=a("code"),_Fo=o("model_type"),uFo=o(` property of the config object (either
passed as an argument or loaded from `),Ine=a("code"),bFo=o("pretrained_model_name_or_path"),FFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=a("code"),vFo=o("pretrained_model_name_or_path"),TFo=o(":"),MFo=l(),I=a("ul"),d1=a("li"),Nne=a("strong"),EFo=o("albert"),CFo=o(" \u2014 "),kI=a("a"),wFo=o("AlbertForMaskedLM"),AFo=o(" (ALBERT model)"),yFo=l(),c1=a("li"),jne=a("strong"),LFo=o("bart"),xFo=o(" \u2014 "),SI=a("a"),kFo=o("BartForConditionalGeneration"),SFo=o(" (BART model)"),RFo=l(),f1=a("li"),Dne=a("strong"),BFo=o("bert"),PFo=o(" \u2014 "),RI=a("a"),$Fo=o("BertForMaskedLM"),IFo=o(" (BERT model)"),qFo=l(),m1=a("li"),Gne=a("strong"),NFo=o("big_bird"),jFo=o(" \u2014 "),BI=a("a"),DFo=o("BigBirdForMaskedLM"),GFo=o(" (BigBird model)"),OFo=l(),g1=a("li"),One=a("strong"),VFo=o("camembert"),XFo=o(" \u2014 "),PI=a("a"),zFo=o("CamembertForMaskedLM"),QFo=o(" (CamemBERT model)"),WFo=l(),h1=a("li"),Vne=a("strong"),HFo=o("convbert"),UFo=o(" \u2014 "),$I=a("a"),JFo=o("ConvBertForMaskedLM"),YFo=o(" (ConvBERT model)"),KFo=l(),p1=a("li"),Xne=a("strong"),ZFo=o("data2vec-text"),evo=o(" \u2014 "),II=a("a"),ovo=o("Data2VecTextForMaskedLM"),rvo=o(" (Data2VecText model)"),tvo=l(),_1=a("li"),zne=a("strong"),avo=o("deberta"),nvo=o(" \u2014 "),qI=a("a"),svo=o("DebertaForMaskedLM"),lvo=o(" (DeBERTa model)"),ivo=l(),u1=a("li"),Qne=a("strong"),dvo=o("deberta-v2"),cvo=o(" \u2014 "),NI=a("a"),fvo=o("DebertaV2ForMaskedLM"),mvo=o(" (DeBERTa-v2 model)"),gvo=l(),b1=a("li"),Wne=a("strong"),hvo=o("distilbert"),pvo=o(" \u2014 "),jI=a("a"),_vo=o("DistilBertForMaskedLM"),uvo=o(" (DistilBERT model)"),bvo=l(),F1=a("li"),Hne=a("strong"),Fvo=o("electra"),vvo=o(" \u2014 "),DI=a("a"),Tvo=o("ElectraForMaskedLM"),Mvo=o(" (ELECTRA model)"),Evo=l(),v1=a("li"),Une=a("strong"),Cvo=o("flaubert"),wvo=o(" \u2014 "),GI=a("a"),Avo=o("FlaubertWithLMHeadModel"),yvo=o(" (FlauBERT model)"),Lvo=l(),T1=a("li"),Jne=a("strong"),xvo=o("fnet"),kvo=o(" \u2014 "),OI=a("a"),Svo=o("FNetForMaskedLM"),Rvo=o(" (FNet model)"),Bvo=l(),M1=a("li"),Yne=a("strong"),Pvo=o("funnel"),$vo=o(" \u2014 "),VI=a("a"),Ivo=o("FunnelForMaskedLM"),qvo=o(" (Funnel Transformer model)"),Nvo=l(),E1=a("li"),Kne=a("strong"),jvo=o("ibert"),Dvo=o(" \u2014 "),XI=a("a"),Gvo=o("IBertForMaskedLM"),Ovo=o(" (I-BERT model)"),Vvo=l(),C1=a("li"),Zne=a("strong"),Xvo=o("layoutlm"),zvo=o(" \u2014 "),zI=a("a"),Qvo=o("LayoutLMForMaskedLM"),Wvo=o(" (LayoutLM model)"),Hvo=l(),w1=a("li"),ese=a("strong"),Uvo=o("longformer"),Jvo=o(" \u2014 "),QI=a("a"),Yvo=o("LongformerForMaskedLM"),Kvo=o(" (Longformer model)"),Zvo=l(),A1=a("li"),ose=a("strong"),eTo=o("mbart"),oTo=o(" \u2014 "),WI=a("a"),rTo=o("MBartForConditionalGeneration"),tTo=o(" (mBART model)"),aTo=l(),y1=a("li"),rse=a("strong"),nTo=o("megatron-bert"),sTo=o(" \u2014 "),HI=a("a"),lTo=o("MegatronBertForMaskedLM"),iTo=o(" (MegatronBert model)"),dTo=l(),L1=a("li"),tse=a("strong"),cTo=o("mobilebert"),fTo=o(" \u2014 "),UI=a("a"),mTo=o("MobileBertForMaskedLM"),gTo=o(" (MobileBERT model)"),hTo=l(),x1=a("li"),ase=a("strong"),pTo=o("mpnet"),_To=o(" \u2014 "),JI=a("a"),uTo=o("MPNetForMaskedLM"),bTo=o(" (MPNet model)"),FTo=l(),k1=a("li"),nse=a("strong"),vTo=o("nystromformer"),TTo=o(" \u2014 "),YI=a("a"),MTo=o("NystromformerForMaskedLM"),ETo=o(" (Nystromformer model)"),CTo=l(),S1=a("li"),sse=a("strong"),wTo=o("perceiver"),ATo=o(" \u2014 "),KI=a("a"),yTo=o("PerceiverForMaskedLM"),LTo=o(" (Perceiver model)"),xTo=l(),R1=a("li"),lse=a("strong"),kTo=o("qdqbert"),STo=o(" \u2014 "),ZI=a("a"),RTo=o("QDQBertForMaskedLM"),BTo=o(" (QDQBert model)"),PTo=l(),B1=a("li"),ise=a("strong"),$To=o("reformer"),ITo=o(" \u2014 "),eq=a("a"),qTo=o("ReformerForMaskedLM"),NTo=o(" (Reformer model)"),jTo=l(),P1=a("li"),dse=a("strong"),DTo=o("rembert"),GTo=o(" \u2014 "),oq=a("a"),OTo=o("RemBertForMaskedLM"),VTo=o(" (RemBERT model)"),XTo=l(),$1=a("li"),cse=a("strong"),zTo=o("roberta"),QTo=o(" \u2014 "),rq=a("a"),WTo=o("RobertaForMaskedLM"),HTo=o(" (RoBERTa model)"),UTo=l(),I1=a("li"),fse=a("strong"),JTo=o("roformer"),YTo=o(" \u2014 "),tq=a("a"),KTo=o("RoFormerForMaskedLM"),ZTo=o(" (RoFormer model)"),eMo=l(),q1=a("li"),mse=a("strong"),oMo=o("squeezebert"),rMo=o(" \u2014 "),aq=a("a"),tMo=o("SqueezeBertForMaskedLM"),aMo=o(" (SqueezeBERT model)"),nMo=l(),N1=a("li"),gse=a("strong"),sMo=o("tapas"),lMo=o(" \u2014 "),nq=a("a"),iMo=o("TapasForMaskedLM"),dMo=o(" (TAPAS model)"),cMo=l(),j1=a("li"),hse=a("strong"),fMo=o("wav2vec2"),mMo=o(" \u2014 "),pse=a("code"),gMo=o("Wav2Vec2ForMaskedLM"),hMo=o(" (Wav2Vec2 model)"),pMo=l(),D1=a("li"),_se=a("strong"),_Mo=o("xlm"),uMo=o(" \u2014 "),sq=a("a"),bMo=o("XLMWithLMHeadModel"),FMo=o(" (XLM model)"),vMo=l(),G1=a("li"),use=a("strong"),TMo=o("xlm-roberta"),MMo=o(" \u2014 "),lq=a("a"),EMo=o("XLMRobertaForMaskedLM"),CMo=o(" (XLM-RoBERTa model)"),wMo=l(),O1=a("li"),bse=a("strong"),AMo=o("xlm-roberta-xl"),yMo=o(" \u2014 "),iq=a("a"),LMo=o("XLMRobertaXLForMaskedLM"),xMo=o(" (XLM-RoBERTa-XL model)"),kMo=l(),V1=a("li"),Fse=a("strong"),SMo=o("yoso"),RMo=o(" \u2014 "),dq=a("a"),BMo=o("YosoForMaskedLM"),PMo=o(" (YOSO model)"),$Mo=l(),X1=a("p"),IMo=o("The model is set in evaluation mode by default using "),vse=a("code"),qMo=o("model.eval()"),NMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=a("code"),jMo=o("model.train()"),DMo=l(),Mse=a("p"),GMo=o("Examples:"),OMo=l(),f(Bw.$$.fragment),HRe=l(),id=a("h2"),z1=a("a"),Ese=a("span"),f(Pw.$$.fragment),VMo=l(),Cse=a("span"),XMo=o("AutoModelForSeq2SeqLM"),URe=l(),er=a("div"),f($w.$$.fragment),zMo=l(),dd=a("p"),QMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cq=a("a"),WMo=o("from_pretrained()"),HMo=o(" class method or the "),fq=a("a"),UMo=o("from_config()"),JMo=o(` class
method.`),YMo=l(),Iw=a("p"),KMo=o("This class cannot be instantiated directly using "),wse=a("code"),ZMo=o("__init__()"),e4o=o(" (throws an error)."),o4o=l(),Hr=a("div"),f(qw.$$.fragment),r4o=l(),Ase=a("p"),t4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a4o=l(),cd=a("p"),n4o=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),s4o=o("not"),l4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),i4o=o("from_pretrained()"),d4o=o(" to load the model weights."),c4o=l(),Lse=a("p"),f4o=o("Examples:"),m4o=l(),f(Nw.$$.fragment),g4o=l(),Ge=a("div"),f(jw.$$.fragment),h4o=l(),xse=a("p"),p4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_4o=l(),Ha=a("p"),u4o=o("The model class to instantiate is selected based on the "),kse=a("code"),b4o=o("model_type"),F4o=o(` property of the config object (either
passed as an argument or loaded from `),Sse=a("code"),v4o=o("pretrained_model_name_or_path"),T4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=a("code"),M4o=o("pretrained_model_name_or_path"),E4o=o(":"),C4o=l(),ne=a("ul"),Q1=a("li"),Bse=a("strong"),w4o=o("bart"),A4o=o(" \u2014 "),gq=a("a"),y4o=o("BartForConditionalGeneration"),L4o=o(" (BART model)"),x4o=l(),W1=a("li"),Pse=a("strong"),k4o=o("bigbird_pegasus"),S4o=o(" \u2014 "),hq=a("a"),R4o=o("BigBirdPegasusForConditionalGeneration"),B4o=o(" (BigBirdPegasus model)"),P4o=l(),H1=a("li"),$se=a("strong"),$4o=o("blenderbot"),I4o=o(" \u2014 "),pq=a("a"),q4o=o("BlenderbotForConditionalGeneration"),N4o=o(" (Blenderbot model)"),j4o=l(),U1=a("li"),Ise=a("strong"),D4o=o("blenderbot-small"),G4o=o(" \u2014 "),_q=a("a"),O4o=o("BlenderbotSmallForConditionalGeneration"),V4o=o(" (BlenderbotSmall model)"),X4o=l(),J1=a("li"),qse=a("strong"),z4o=o("encoder-decoder"),Q4o=o(" \u2014 "),uq=a("a"),W4o=o("EncoderDecoderModel"),H4o=o(" (Encoder decoder model)"),U4o=l(),Y1=a("li"),Nse=a("strong"),J4o=o("fsmt"),Y4o=o(" \u2014 "),bq=a("a"),K4o=o("FSMTForConditionalGeneration"),Z4o=o(" (FairSeq Machine-Translation model)"),eEo=l(),K1=a("li"),jse=a("strong"),oEo=o("led"),rEo=o(" \u2014 "),Fq=a("a"),tEo=o("LEDForConditionalGeneration"),aEo=o(" (LED model)"),nEo=l(),Z1=a("li"),Dse=a("strong"),sEo=o("m2m_100"),lEo=o(" \u2014 "),vq=a("a"),iEo=o("M2M100ForConditionalGeneration"),dEo=o(" (M2M100 model)"),cEo=l(),e7=a("li"),Gse=a("strong"),fEo=o("marian"),mEo=o(" \u2014 "),Tq=a("a"),gEo=o("MarianMTModel"),hEo=o(" (Marian model)"),pEo=l(),o7=a("li"),Ose=a("strong"),_Eo=o("mbart"),uEo=o(" \u2014 "),Mq=a("a"),bEo=o("MBartForConditionalGeneration"),FEo=o(" (mBART model)"),vEo=l(),r7=a("li"),Vse=a("strong"),TEo=o("mt5"),MEo=o(" \u2014 "),Eq=a("a"),EEo=o("MT5ForConditionalGeneration"),CEo=o(" (mT5 model)"),wEo=l(),t7=a("li"),Xse=a("strong"),AEo=o("pegasus"),yEo=o(" \u2014 "),Cq=a("a"),LEo=o("PegasusForConditionalGeneration"),xEo=o(" (Pegasus model)"),kEo=l(),a7=a("li"),zse=a("strong"),SEo=o("plbart"),REo=o(" \u2014 "),wq=a("a"),BEo=o("PLBartForConditionalGeneration"),PEo=o(" (PLBart model)"),$Eo=l(),n7=a("li"),Qse=a("strong"),IEo=o("prophetnet"),qEo=o(" \u2014 "),Aq=a("a"),NEo=o("ProphetNetForConditionalGeneration"),jEo=o(" (ProphetNet model)"),DEo=l(),s7=a("li"),Wse=a("strong"),GEo=o("t5"),OEo=o(" \u2014 "),yq=a("a"),VEo=o("T5ForConditionalGeneration"),XEo=o(" (T5 model)"),zEo=l(),l7=a("li"),Hse=a("strong"),QEo=o("tapex"),WEo=o(" \u2014 "),Lq=a("a"),HEo=o("BartForConditionalGeneration"),UEo=o(" (TAPEX model)"),JEo=l(),i7=a("li"),Use=a("strong"),YEo=o("xlm-prophetnet"),KEo=o(" \u2014 "),xq=a("a"),ZEo=o("XLMProphetNetForConditionalGeneration"),eCo=o(" (XLMProphetNet model)"),oCo=l(),d7=a("p"),rCo=o("The model is set in evaluation mode by default using "),Jse=a("code"),tCo=o("model.eval()"),aCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yse=a("code"),nCo=o("model.train()"),sCo=l(),Kse=a("p"),lCo=o("Examples:"),iCo=l(),f(Dw.$$.fragment),JRe=l(),fd=a("h2"),c7=a("a"),Zse=a("span"),f(Gw.$$.fragment),dCo=l(),ele=a("span"),cCo=o("AutoModelForSequenceClassification"),YRe=l(),or=a("div"),f(Ow.$$.fragment),fCo=l(),md=a("p"),mCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kq=a("a"),gCo=o("from_pretrained()"),hCo=o(" class method or the "),Sq=a("a"),pCo=o("from_config()"),_Co=o(` class
method.`),uCo=l(),Vw=a("p"),bCo=o("This class cannot be instantiated directly using "),ole=a("code"),FCo=o("__init__()"),vCo=o(" (throws an error)."),TCo=l(),Ur=a("div"),f(Xw.$$.fragment),MCo=l(),rle=a("p"),ECo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CCo=l(),gd=a("p"),wCo=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),ACo=o("not"),yCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),LCo=o("from_pretrained()"),xCo=o(" to load the model weights."),kCo=l(),ale=a("p"),SCo=o("Examples:"),RCo=l(),f(zw.$$.fragment),BCo=l(),Oe=a("div"),f(Qw.$$.fragment),PCo=l(),nle=a("p"),$Co=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ICo=l(),Ua=a("p"),qCo=o("The model class to instantiate is selected based on the "),sle=a("code"),NCo=o("model_type"),jCo=o(` property of the config object (either
passed as an argument or loaded from `),lle=a("code"),DCo=o("pretrained_model_name_or_path"),GCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ile=a("code"),OCo=o("pretrained_model_name_or_path"),VCo=o(":"),XCo=l(),y=a("ul"),f7=a("li"),dle=a("strong"),zCo=o("albert"),QCo=o(" \u2014 "),Bq=a("a"),WCo=o("AlbertForSequenceClassification"),HCo=o(" (ALBERT model)"),UCo=l(),m7=a("li"),cle=a("strong"),JCo=o("bart"),YCo=o(" \u2014 "),Pq=a("a"),KCo=o("BartForSequenceClassification"),ZCo=o(" (BART model)"),ewo=l(),g7=a("li"),fle=a("strong"),owo=o("bert"),rwo=o(" \u2014 "),$q=a("a"),two=o("BertForSequenceClassification"),awo=o(" (BERT model)"),nwo=l(),h7=a("li"),mle=a("strong"),swo=o("big_bird"),lwo=o(" \u2014 "),Iq=a("a"),iwo=o("BigBirdForSequenceClassification"),dwo=o(" (BigBird model)"),cwo=l(),p7=a("li"),gle=a("strong"),fwo=o("bigbird_pegasus"),mwo=o(" \u2014 "),qq=a("a"),gwo=o("BigBirdPegasusForSequenceClassification"),hwo=o(" (BigBirdPegasus model)"),pwo=l(),_7=a("li"),hle=a("strong"),_wo=o("camembert"),uwo=o(" \u2014 "),Nq=a("a"),bwo=o("CamembertForSequenceClassification"),Fwo=o(" (CamemBERT model)"),vwo=l(),u7=a("li"),ple=a("strong"),Two=o("canine"),Mwo=o(" \u2014 "),jq=a("a"),Ewo=o("CanineForSequenceClassification"),Cwo=o(" (Canine model)"),wwo=l(),b7=a("li"),_le=a("strong"),Awo=o("convbert"),ywo=o(" \u2014 "),Dq=a("a"),Lwo=o("ConvBertForSequenceClassification"),xwo=o(" (ConvBERT model)"),kwo=l(),F7=a("li"),ule=a("strong"),Swo=o("ctrl"),Rwo=o(" \u2014 "),Gq=a("a"),Bwo=o("CTRLForSequenceClassification"),Pwo=o(" (CTRL model)"),$wo=l(),v7=a("li"),ble=a("strong"),Iwo=o("data2vec-text"),qwo=o(" \u2014 "),Oq=a("a"),Nwo=o("Data2VecTextForSequenceClassification"),jwo=o(" (Data2VecText model)"),Dwo=l(),T7=a("li"),Fle=a("strong"),Gwo=o("deberta"),Owo=o(" \u2014 "),Vq=a("a"),Vwo=o("DebertaForSequenceClassification"),Xwo=o(" (DeBERTa model)"),zwo=l(),M7=a("li"),vle=a("strong"),Qwo=o("deberta-v2"),Wwo=o(" \u2014 "),Xq=a("a"),Hwo=o("DebertaV2ForSequenceClassification"),Uwo=o(" (DeBERTa-v2 model)"),Jwo=l(),E7=a("li"),Tle=a("strong"),Ywo=o("distilbert"),Kwo=o(" \u2014 "),zq=a("a"),Zwo=o("DistilBertForSequenceClassification"),eAo=o(" (DistilBERT model)"),oAo=l(),C7=a("li"),Mle=a("strong"),rAo=o("electra"),tAo=o(" \u2014 "),Qq=a("a"),aAo=o("ElectraForSequenceClassification"),nAo=o(" (ELECTRA model)"),sAo=l(),w7=a("li"),Ele=a("strong"),lAo=o("flaubert"),iAo=o(" \u2014 "),Wq=a("a"),dAo=o("FlaubertForSequenceClassification"),cAo=o(" (FlauBERT model)"),fAo=l(),A7=a("li"),Cle=a("strong"),mAo=o("fnet"),gAo=o(" \u2014 "),Hq=a("a"),hAo=o("FNetForSequenceClassification"),pAo=o(" (FNet model)"),_Ao=l(),y7=a("li"),wle=a("strong"),uAo=o("funnel"),bAo=o(" \u2014 "),Uq=a("a"),FAo=o("FunnelForSequenceClassification"),vAo=o(" (Funnel Transformer model)"),TAo=l(),L7=a("li"),Ale=a("strong"),MAo=o("gpt2"),EAo=o(" \u2014 "),Jq=a("a"),CAo=o("GPT2ForSequenceClassification"),wAo=o(" (OpenAI GPT-2 model)"),AAo=l(),x7=a("li"),yle=a("strong"),yAo=o("gpt_neo"),LAo=o(" \u2014 "),Yq=a("a"),xAo=o("GPTNeoForSequenceClassification"),kAo=o(" (GPT Neo model)"),SAo=l(),k7=a("li"),Lle=a("strong"),RAo=o("gptj"),BAo=o(" \u2014 "),Kq=a("a"),PAo=o("GPTJForSequenceClassification"),$Ao=o(" (GPT-J model)"),IAo=l(),S7=a("li"),xle=a("strong"),qAo=o("ibert"),NAo=o(" \u2014 "),Zq=a("a"),jAo=o("IBertForSequenceClassification"),DAo=o(" (I-BERT model)"),GAo=l(),R7=a("li"),kle=a("strong"),OAo=o("layoutlm"),VAo=o(" \u2014 "),eN=a("a"),XAo=o("LayoutLMForSequenceClassification"),zAo=o(" (LayoutLM model)"),QAo=l(),B7=a("li"),Sle=a("strong"),WAo=o("layoutlmv2"),HAo=o(" \u2014 "),oN=a("a"),UAo=o("LayoutLMv2ForSequenceClassification"),JAo=o(" (LayoutLMv2 model)"),YAo=l(),P7=a("li"),Rle=a("strong"),KAo=o("led"),ZAo=o(" \u2014 "),rN=a("a"),e6o=o("LEDForSequenceClassification"),o6o=o(" (LED model)"),r6o=l(),$7=a("li"),Ble=a("strong"),t6o=o("longformer"),a6o=o(" \u2014 "),tN=a("a"),n6o=o("LongformerForSequenceClassification"),s6o=o(" (Longformer model)"),l6o=l(),I7=a("li"),Ple=a("strong"),i6o=o("mbart"),d6o=o(" \u2014 "),aN=a("a"),c6o=o("MBartForSequenceClassification"),f6o=o(" (mBART model)"),m6o=l(),q7=a("li"),$le=a("strong"),g6o=o("megatron-bert"),h6o=o(" \u2014 "),nN=a("a"),p6o=o("MegatronBertForSequenceClassification"),_6o=o(" (MegatronBert model)"),u6o=l(),N7=a("li"),Ile=a("strong"),b6o=o("mobilebert"),F6o=o(" \u2014 "),sN=a("a"),v6o=o("MobileBertForSequenceClassification"),T6o=o(" (MobileBERT model)"),M6o=l(),j7=a("li"),qle=a("strong"),E6o=o("mpnet"),C6o=o(" \u2014 "),lN=a("a"),w6o=o("MPNetForSequenceClassification"),A6o=o(" (MPNet model)"),y6o=l(),D7=a("li"),Nle=a("strong"),L6o=o("nystromformer"),x6o=o(" \u2014 "),iN=a("a"),k6o=o("NystromformerForSequenceClassification"),S6o=o(" (Nystromformer model)"),R6o=l(),G7=a("li"),jle=a("strong"),B6o=o("openai-gpt"),P6o=o(" \u2014 "),dN=a("a"),$6o=o("OpenAIGPTForSequenceClassification"),I6o=o(" (OpenAI GPT model)"),q6o=l(),O7=a("li"),Dle=a("strong"),N6o=o("perceiver"),j6o=o(" \u2014 "),cN=a("a"),D6o=o("PerceiverForSequenceClassification"),G6o=o(" (Perceiver model)"),O6o=l(),V7=a("li"),Gle=a("strong"),V6o=o("plbart"),X6o=o(" \u2014 "),fN=a("a"),z6o=o("PLBartForSequenceClassification"),Q6o=o(" (PLBart model)"),W6o=l(),X7=a("li"),Ole=a("strong"),H6o=o("qdqbert"),U6o=o(" \u2014 "),mN=a("a"),J6o=o("QDQBertForSequenceClassification"),Y6o=o(" (QDQBert model)"),K6o=l(),z7=a("li"),Vle=a("strong"),Z6o=o("reformer"),e0o=o(" \u2014 "),gN=a("a"),o0o=o("ReformerForSequenceClassification"),r0o=o(" (Reformer model)"),t0o=l(),Q7=a("li"),Xle=a("strong"),a0o=o("rembert"),n0o=o(" \u2014 "),hN=a("a"),s0o=o("RemBertForSequenceClassification"),l0o=o(" (RemBERT model)"),i0o=l(),W7=a("li"),zle=a("strong"),d0o=o("roberta"),c0o=o(" \u2014 "),pN=a("a"),f0o=o("RobertaForSequenceClassification"),m0o=o(" (RoBERTa model)"),g0o=l(),H7=a("li"),Qle=a("strong"),h0o=o("roformer"),p0o=o(" \u2014 "),_N=a("a"),_0o=o("RoFormerForSequenceClassification"),u0o=o(" (RoFormer model)"),b0o=l(),U7=a("li"),Wle=a("strong"),F0o=o("squeezebert"),v0o=o(" \u2014 "),uN=a("a"),T0o=o("SqueezeBertForSequenceClassification"),M0o=o(" (SqueezeBERT model)"),E0o=l(),J7=a("li"),Hle=a("strong"),C0o=o("tapas"),w0o=o(" \u2014 "),bN=a("a"),A0o=o("TapasForSequenceClassification"),y0o=o(" (TAPAS model)"),L0o=l(),Y7=a("li"),Ule=a("strong"),x0o=o("tapex"),k0o=o(" \u2014 "),FN=a("a"),S0o=o("BartForSequenceClassification"),R0o=o(" (TAPEX model)"),B0o=l(),K7=a("li"),Jle=a("strong"),P0o=o("transfo-xl"),$0o=o(" \u2014 "),vN=a("a"),I0o=o("TransfoXLForSequenceClassification"),q0o=o(" (Transformer-XL model)"),N0o=l(),Z7=a("li"),Yle=a("strong"),j0o=o("xlm"),D0o=o(" \u2014 "),TN=a("a"),G0o=o("XLMForSequenceClassification"),O0o=o(" (XLM model)"),V0o=l(),eb=a("li"),Kle=a("strong"),X0o=o("xlm-roberta"),z0o=o(" \u2014 "),MN=a("a"),Q0o=o("XLMRobertaForSequenceClassification"),W0o=o(" (XLM-RoBERTa model)"),H0o=l(),ob=a("li"),Zle=a("strong"),U0o=o("xlm-roberta-xl"),J0o=o(" \u2014 "),EN=a("a"),Y0o=o("XLMRobertaXLForSequenceClassification"),K0o=o(" (XLM-RoBERTa-XL model)"),Z0o=l(),rb=a("li"),eie=a("strong"),eyo=o("xlnet"),oyo=o(" \u2014 "),CN=a("a"),ryo=o("XLNetForSequenceClassification"),tyo=o(" (XLNet model)"),ayo=l(),tb=a("li"),oie=a("strong"),nyo=o("yoso"),syo=o(" \u2014 "),wN=a("a"),lyo=o("YosoForSequenceClassification"),iyo=o(" (YOSO model)"),dyo=l(),ab=a("p"),cyo=o("The model is set in evaluation mode by default using "),rie=a("code"),fyo=o("model.eval()"),myo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=a("code"),gyo=o("model.train()"),hyo=l(),aie=a("p"),pyo=o("Examples:"),_yo=l(),f(Ww.$$.fragment),KRe=l(),hd=a("h2"),nb=a("a"),nie=a("span"),f(Hw.$$.fragment),uyo=l(),sie=a("span"),byo=o("AutoModelForMultipleChoice"),ZRe=l(),rr=a("div"),f(Uw.$$.fragment),Fyo=l(),pd=a("p"),vyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AN=a("a"),Tyo=o("from_pretrained()"),Myo=o(" class method or the "),yN=a("a"),Eyo=o("from_config()"),Cyo=o(` class
method.`),wyo=l(),Jw=a("p"),Ayo=o("This class cannot be instantiated directly using "),lie=a("code"),yyo=o("__init__()"),Lyo=o(" (throws an error)."),xyo=l(),Jr=a("div"),f(Yw.$$.fragment),kyo=l(),iie=a("p"),Syo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ryo=l(),_d=a("p"),Byo=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),Pyo=o("not"),$yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=a("a"),Iyo=o("from_pretrained()"),qyo=o(" to load the model weights."),Nyo=l(),cie=a("p"),jyo=o("Examples:"),Dyo=l(),f(Kw.$$.fragment),Gyo=l(),Ve=a("div"),f(Zw.$$.fragment),Oyo=l(),fie=a("p"),Vyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xyo=l(),Ja=a("p"),zyo=o("The model class to instantiate is selected based on the "),mie=a("code"),Qyo=o("model_type"),Wyo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),Hyo=o("pretrained_model_name_or_path"),Uyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),Jyo=o("pretrained_model_name_or_path"),Yyo=o(":"),Kyo=l(),G=a("ul"),sb=a("li"),pie=a("strong"),Zyo=o("albert"),eLo=o(" \u2014 "),xN=a("a"),oLo=o("AlbertForMultipleChoice"),rLo=o(" (ALBERT model)"),tLo=l(),lb=a("li"),_ie=a("strong"),aLo=o("bert"),nLo=o(" \u2014 "),kN=a("a"),sLo=o("BertForMultipleChoice"),lLo=o(" (BERT model)"),iLo=l(),ib=a("li"),uie=a("strong"),dLo=o("big_bird"),cLo=o(" \u2014 "),SN=a("a"),fLo=o("BigBirdForMultipleChoice"),mLo=o(" (BigBird model)"),gLo=l(),db=a("li"),bie=a("strong"),hLo=o("camembert"),pLo=o(" \u2014 "),RN=a("a"),_Lo=o("CamembertForMultipleChoice"),uLo=o(" (CamemBERT model)"),bLo=l(),cb=a("li"),Fie=a("strong"),FLo=o("canine"),vLo=o(" \u2014 "),BN=a("a"),TLo=o("CanineForMultipleChoice"),MLo=o(" (Canine model)"),ELo=l(),fb=a("li"),vie=a("strong"),CLo=o("convbert"),wLo=o(" \u2014 "),PN=a("a"),ALo=o("ConvBertForMultipleChoice"),yLo=o(" (ConvBERT model)"),LLo=l(),mb=a("li"),Tie=a("strong"),xLo=o("data2vec-text"),kLo=o(" \u2014 "),$N=a("a"),SLo=o("Data2VecTextForMultipleChoice"),RLo=o(" (Data2VecText model)"),BLo=l(),gb=a("li"),Mie=a("strong"),PLo=o("distilbert"),$Lo=o(" \u2014 "),IN=a("a"),ILo=o("DistilBertForMultipleChoice"),qLo=o(" (DistilBERT model)"),NLo=l(),hb=a("li"),Eie=a("strong"),jLo=o("electra"),DLo=o(" \u2014 "),qN=a("a"),GLo=o("ElectraForMultipleChoice"),OLo=o(" (ELECTRA model)"),VLo=l(),pb=a("li"),Cie=a("strong"),XLo=o("flaubert"),zLo=o(" \u2014 "),NN=a("a"),QLo=o("FlaubertForMultipleChoice"),WLo=o(" (FlauBERT model)"),HLo=l(),_b=a("li"),wie=a("strong"),ULo=o("fnet"),JLo=o(" \u2014 "),jN=a("a"),YLo=o("FNetForMultipleChoice"),KLo=o(" (FNet model)"),ZLo=l(),ub=a("li"),Aie=a("strong"),e8o=o("funnel"),o8o=o(" \u2014 "),DN=a("a"),r8o=o("FunnelForMultipleChoice"),t8o=o(" (Funnel Transformer model)"),a8o=l(),bb=a("li"),yie=a("strong"),n8o=o("ibert"),s8o=o(" \u2014 "),GN=a("a"),l8o=o("IBertForMultipleChoice"),i8o=o(" (I-BERT model)"),d8o=l(),Fb=a("li"),Lie=a("strong"),c8o=o("longformer"),f8o=o(" \u2014 "),ON=a("a"),m8o=o("LongformerForMultipleChoice"),g8o=o(" (Longformer model)"),h8o=l(),vb=a("li"),xie=a("strong"),p8o=o("megatron-bert"),_8o=o(" \u2014 "),VN=a("a"),u8o=o("MegatronBertForMultipleChoice"),b8o=o(" (MegatronBert model)"),F8o=l(),Tb=a("li"),kie=a("strong"),v8o=o("mobilebert"),T8o=o(" \u2014 "),XN=a("a"),M8o=o("MobileBertForMultipleChoice"),E8o=o(" (MobileBERT model)"),C8o=l(),Mb=a("li"),Sie=a("strong"),w8o=o("mpnet"),A8o=o(" \u2014 "),zN=a("a"),y8o=o("MPNetForMultipleChoice"),L8o=o(" (MPNet model)"),x8o=l(),Eb=a("li"),Rie=a("strong"),k8o=o("nystromformer"),S8o=o(" \u2014 "),QN=a("a"),R8o=o("NystromformerForMultipleChoice"),B8o=o(" (Nystromformer model)"),P8o=l(),Cb=a("li"),Bie=a("strong"),$8o=o("qdqbert"),I8o=o(" \u2014 "),WN=a("a"),q8o=o("QDQBertForMultipleChoice"),N8o=o(" (QDQBert model)"),j8o=l(),wb=a("li"),Pie=a("strong"),D8o=o("rembert"),G8o=o(" \u2014 "),HN=a("a"),O8o=o("RemBertForMultipleChoice"),V8o=o(" (RemBERT model)"),X8o=l(),Ab=a("li"),$ie=a("strong"),z8o=o("roberta"),Q8o=o(" \u2014 "),UN=a("a"),W8o=o("RobertaForMultipleChoice"),H8o=o(" (RoBERTa model)"),U8o=l(),yb=a("li"),Iie=a("strong"),J8o=o("roformer"),Y8o=o(" \u2014 "),JN=a("a"),K8o=o("RoFormerForMultipleChoice"),Z8o=o(" (RoFormer model)"),e9o=l(),Lb=a("li"),qie=a("strong"),o9o=o("squeezebert"),r9o=o(" \u2014 "),YN=a("a"),t9o=o("SqueezeBertForMultipleChoice"),a9o=o(" (SqueezeBERT model)"),n9o=l(),xb=a("li"),Nie=a("strong"),s9o=o("xlm"),l9o=o(" \u2014 "),KN=a("a"),i9o=o("XLMForMultipleChoice"),d9o=o(" (XLM model)"),c9o=l(),kb=a("li"),jie=a("strong"),f9o=o("xlm-roberta"),m9o=o(" \u2014 "),ZN=a("a"),g9o=o("XLMRobertaForMultipleChoice"),h9o=o(" (XLM-RoBERTa model)"),p9o=l(),Sb=a("li"),Die=a("strong"),_9o=o("xlm-roberta-xl"),u9o=o(" \u2014 "),ej=a("a"),b9o=o("XLMRobertaXLForMultipleChoice"),F9o=o(" (XLM-RoBERTa-XL model)"),v9o=l(),Rb=a("li"),Gie=a("strong"),T9o=o("xlnet"),M9o=o(" \u2014 "),oj=a("a"),E9o=o("XLNetForMultipleChoice"),C9o=o(" (XLNet model)"),w9o=l(),Bb=a("li"),Oie=a("strong"),A9o=o("yoso"),y9o=o(" \u2014 "),rj=a("a"),L9o=o("YosoForMultipleChoice"),x9o=o(" (YOSO model)"),k9o=l(),Pb=a("p"),S9o=o("The model is set in evaluation mode by default using "),Vie=a("code"),R9o=o("model.eval()"),B9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=a("code"),P9o=o("model.train()"),$9o=l(),zie=a("p"),I9o=o("Examples:"),q9o=l(),f(eA.$$.fragment),eBe=l(),ud=a("h2"),$b=a("a"),Qie=a("span"),f(oA.$$.fragment),N9o=l(),Wie=a("span"),j9o=o("AutoModelForNextSentencePrediction"),oBe=l(),tr=a("div"),f(rA.$$.fragment),D9o=l(),bd=a("p"),G9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tj=a("a"),O9o=o("from_pretrained()"),V9o=o(" class method or the "),aj=a("a"),X9o=o("from_config()"),z9o=o(` class
method.`),Q9o=l(),tA=a("p"),W9o=o("This class cannot be instantiated directly using "),Hie=a("code"),H9o=o("__init__()"),U9o=o(" (throws an error)."),J9o=l(),Yr=a("div"),f(aA.$$.fragment),Y9o=l(),Uie=a("p"),K9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z9o=l(),Fd=a("p"),exo=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),oxo=o("not"),rxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),txo=o("from_pretrained()"),axo=o(" to load the model weights."),nxo=l(),Yie=a("p"),sxo=o("Examples:"),lxo=l(),f(nA.$$.fragment),ixo=l(),Xe=a("div"),f(sA.$$.fragment),dxo=l(),Kie=a("p"),cxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fxo=l(),Ya=a("p"),mxo=o("The model class to instantiate is selected based on the "),Zie=a("code"),gxo=o("model_type"),hxo=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),pxo=o("pretrained_model_name_or_path"),_xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),uxo=o("pretrained_model_name_or_path"),bxo=o(":"),Fxo=l(),da=a("ul"),Ib=a("li"),rde=a("strong"),vxo=o("bert"),Txo=o(" \u2014 "),sj=a("a"),Mxo=o("BertForNextSentencePrediction"),Exo=o(" (BERT model)"),Cxo=l(),qb=a("li"),tde=a("strong"),wxo=o("fnet"),Axo=o(" \u2014 "),lj=a("a"),yxo=o("FNetForNextSentencePrediction"),Lxo=o(" (FNet model)"),xxo=l(),Nb=a("li"),ade=a("strong"),kxo=o("megatron-bert"),Sxo=o(" \u2014 "),ij=a("a"),Rxo=o("MegatronBertForNextSentencePrediction"),Bxo=o(" (MegatronBert model)"),Pxo=l(),jb=a("li"),nde=a("strong"),$xo=o("mobilebert"),Ixo=o(" \u2014 "),dj=a("a"),qxo=o("MobileBertForNextSentencePrediction"),Nxo=o(" (MobileBERT model)"),jxo=l(),Db=a("li"),sde=a("strong"),Dxo=o("qdqbert"),Gxo=o(" \u2014 "),cj=a("a"),Oxo=o("QDQBertForNextSentencePrediction"),Vxo=o(" (QDQBert model)"),Xxo=l(),Gb=a("p"),zxo=o("The model is set in evaluation mode by default using "),lde=a("code"),Qxo=o("model.eval()"),Wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),Hxo=o("model.train()"),Uxo=l(),dde=a("p"),Jxo=o("Examples:"),Yxo=l(),f(lA.$$.fragment),rBe=l(),vd=a("h2"),Ob=a("a"),cde=a("span"),f(iA.$$.fragment),Kxo=l(),fde=a("span"),Zxo=o("AutoModelForTokenClassification"),tBe=l(),ar=a("div"),f(dA.$$.fragment),eko=l(),Td=a("p"),oko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fj=a("a"),rko=o("from_pretrained()"),tko=o(" class method or the "),mj=a("a"),ako=o("from_config()"),nko=o(` class
method.`),sko=l(),cA=a("p"),lko=o("This class cannot be instantiated directly using "),mde=a("code"),iko=o("__init__()"),dko=o(" (throws an error)."),cko=l(),Kr=a("div"),f(fA.$$.fragment),fko=l(),gde=a("p"),mko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gko=l(),Md=a("p"),hko=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),pko=o("not"),_ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=a("a"),uko=o("from_pretrained()"),bko=o(" to load the model weights."),Fko=l(),pde=a("p"),vko=o("Examples:"),Tko=l(),f(mA.$$.fragment),Mko=l(),ze=a("div"),f(gA.$$.fragment),Eko=l(),_de=a("p"),Cko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wko=l(),Ka=a("p"),Ako=o("The model class to instantiate is selected based on the "),ude=a("code"),yko=o("model_type"),Lko=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),xko=o("pretrained_model_name_or_path"),kko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),Sko=o("pretrained_model_name_or_path"),Rko=o(":"),Bko=l(),j=a("ul"),Vb=a("li"),vde=a("strong"),Pko=o("albert"),$ko=o(" \u2014 "),hj=a("a"),Iko=o("AlbertForTokenClassification"),qko=o(" (ALBERT model)"),Nko=l(),Xb=a("li"),Tde=a("strong"),jko=o("bert"),Dko=o(" \u2014 "),pj=a("a"),Gko=o("BertForTokenClassification"),Oko=o(" (BERT model)"),Vko=l(),zb=a("li"),Mde=a("strong"),Xko=o("big_bird"),zko=o(" \u2014 "),_j=a("a"),Qko=o("BigBirdForTokenClassification"),Wko=o(" (BigBird model)"),Hko=l(),Qb=a("li"),Ede=a("strong"),Uko=o("camembert"),Jko=o(" \u2014 "),uj=a("a"),Yko=o("CamembertForTokenClassification"),Kko=o(" (CamemBERT model)"),Zko=l(),Wb=a("li"),Cde=a("strong"),eSo=o("canine"),oSo=o(" \u2014 "),bj=a("a"),rSo=o("CanineForTokenClassification"),tSo=o(" (Canine model)"),aSo=l(),Hb=a("li"),wde=a("strong"),nSo=o("convbert"),sSo=o(" \u2014 "),Fj=a("a"),lSo=o("ConvBertForTokenClassification"),iSo=o(" (ConvBERT model)"),dSo=l(),Ub=a("li"),Ade=a("strong"),cSo=o("data2vec-text"),fSo=o(" \u2014 "),vj=a("a"),mSo=o("Data2VecTextForTokenClassification"),gSo=o(" (Data2VecText model)"),hSo=l(),Jb=a("li"),yde=a("strong"),pSo=o("deberta"),_So=o(" \u2014 "),Tj=a("a"),uSo=o("DebertaForTokenClassification"),bSo=o(" (DeBERTa model)"),FSo=l(),Yb=a("li"),Lde=a("strong"),vSo=o("deberta-v2"),TSo=o(" \u2014 "),Mj=a("a"),MSo=o("DebertaV2ForTokenClassification"),ESo=o(" (DeBERTa-v2 model)"),CSo=l(),Kb=a("li"),xde=a("strong"),wSo=o("distilbert"),ASo=o(" \u2014 "),Ej=a("a"),ySo=o("DistilBertForTokenClassification"),LSo=o(" (DistilBERT model)"),xSo=l(),Zb=a("li"),kde=a("strong"),kSo=o("electra"),SSo=o(" \u2014 "),Cj=a("a"),RSo=o("ElectraForTokenClassification"),BSo=o(" (ELECTRA model)"),PSo=l(),e5=a("li"),Sde=a("strong"),$So=o("flaubert"),ISo=o(" \u2014 "),wj=a("a"),qSo=o("FlaubertForTokenClassification"),NSo=o(" (FlauBERT model)"),jSo=l(),o5=a("li"),Rde=a("strong"),DSo=o("fnet"),GSo=o(" \u2014 "),Aj=a("a"),OSo=o("FNetForTokenClassification"),VSo=o(" (FNet model)"),XSo=l(),r5=a("li"),Bde=a("strong"),zSo=o("funnel"),QSo=o(" \u2014 "),yj=a("a"),WSo=o("FunnelForTokenClassification"),HSo=o(" (Funnel Transformer model)"),USo=l(),t5=a("li"),Pde=a("strong"),JSo=o("gpt2"),YSo=o(" \u2014 "),Lj=a("a"),KSo=o("GPT2ForTokenClassification"),ZSo=o(" (OpenAI GPT-2 model)"),eRo=l(),a5=a("li"),$de=a("strong"),oRo=o("ibert"),rRo=o(" \u2014 "),xj=a("a"),tRo=o("IBertForTokenClassification"),aRo=o(" (I-BERT model)"),nRo=l(),n5=a("li"),Ide=a("strong"),sRo=o("layoutlm"),lRo=o(" \u2014 "),kj=a("a"),iRo=o("LayoutLMForTokenClassification"),dRo=o(" (LayoutLM model)"),cRo=l(),s5=a("li"),qde=a("strong"),fRo=o("layoutlmv2"),mRo=o(" \u2014 "),Sj=a("a"),gRo=o("LayoutLMv2ForTokenClassification"),hRo=o(" (LayoutLMv2 model)"),pRo=l(),l5=a("li"),Nde=a("strong"),_Ro=o("longformer"),uRo=o(" \u2014 "),Rj=a("a"),bRo=o("LongformerForTokenClassification"),FRo=o(" (Longformer model)"),vRo=l(),i5=a("li"),jde=a("strong"),TRo=o("megatron-bert"),MRo=o(" \u2014 "),Bj=a("a"),ERo=o("MegatronBertForTokenClassification"),CRo=o(" (MegatronBert model)"),wRo=l(),d5=a("li"),Dde=a("strong"),ARo=o("mobilebert"),yRo=o(" \u2014 "),Pj=a("a"),LRo=o("MobileBertForTokenClassification"),xRo=o(" (MobileBERT model)"),kRo=l(),c5=a("li"),Gde=a("strong"),SRo=o("mpnet"),RRo=o(" \u2014 "),$j=a("a"),BRo=o("MPNetForTokenClassification"),PRo=o(" (MPNet model)"),$Ro=l(),f5=a("li"),Ode=a("strong"),IRo=o("nystromformer"),qRo=o(" \u2014 "),Ij=a("a"),NRo=o("NystromformerForTokenClassification"),jRo=o(" (Nystromformer model)"),DRo=l(),m5=a("li"),Vde=a("strong"),GRo=o("qdqbert"),ORo=o(" \u2014 "),qj=a("a"),VRo=o("QDQBertForTokenClassification"),XRo=o(" (QDQBert model)"),zRo=l(),g5=a("li"),Xde=a("strong"),QRo=o("rembert"),WRo=o(" \u2014 "),Nj=a("a"),HRo=o("RemBertForTokenClassification"),URo=o(" (RemBERT model)"),JRo=l(),h5=a("li"),zde=a("strong"),YRo=o("roberta"),KRo=o(" \u2014 "),jj=a("a"),ZRo=o("RobertaForTokenClassification"),eBo=o(" (RoBERTa model)"),oBo=l(),p5=a("li"),Qde=a("strong"),rBo=o("roformer"),tBo=o(" \u2014 "),Dj=a("a"),aBo=o("RoFormerForTokenClassification"),nBo=o(" (RoFormer model)"),sBo=l(),_5=a("li"),Wde=a("strong"),lBo=o("squeezebert"),iBo=o(" \u2014 "),Gj=a("a"),dBo=o("SqueezeBertForTokenClassification"),cBo=o(" (SqueezeBERT model)"),fBo=l(),u5=a("li"),Hde=a("strong"),mBo=o("xlm"),gBo=o(" \u2014 "),Oj=a("a"),hBo=o("XLMForTokenClassification"),pBo=o(" (XLM model)"),_Bo=l(),b5=a("li"),Ude=a("strong"),uBo=o("xlm-roberta"),bBo=o(" \u2014 "),Vj=a("a"),FBo=o("XLMRobertaForTokenClassification"),vBo=o(" (XLM-RoBERTa model)"),TBo=l(),F5=a("li"),Jde=a("strong"),MBo=o("xlm-roberta-xl"),EBo=o(" \u2014 "),Xj=a("a"),CBo=o("XLMRobertaXLForTokenClassification"),wBo=o(" (XLM-RoBERTa-XL model)"),ABo=l(),v5=a("li"),Yde=a("strong"),yBo=o("xlnet"),LBo=o(" \u2014 "),zj=a("a"),xBo=o("XLNetForTokenClassification"),kBo=o(" (XLNet model)"),SBo=l(),T5=a("li"),Kde=a("strong"),RBo=o("yoso"),BBo=o(" \u2014 "),Qj=a("a"),PBo=o("YosoForTokenClassification"),$Bo=o(" (YOSO model)"),IBo=l(),M5=a("p"),qBo=o("The model is set in evaluation mode by default using "),Zde=a("code"),NBo=o("model.eval()"),jBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),DBo=o("model.train()"),GBo=l(),oce=a("p"),OBo=o("Examples:"),VBo=l(),f(hA.$$.fragment),aBe=l(),Ed=a("h2"),E5=a("a"),rce=a("span"),f(pA.$$.fragment),XBo=l(),tce=a("span"),zBo=o("AutoModelForQuestionAnswering"),nBe=l(),nr=a("div"),f(_A.$$.fragment),QBo=l(),Cd=a("p"),WBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wj=a("a"),HBo=o("from_pretrained()"),UBo=o(" class method or the "),Hj=a("a"),JBo=o("from_config()"),YBo=o(` class
method.`),KBo=l(),uA=a("p"),ZBo=o("This class cannot be instantiated directly using "),ace=a("code"),ePo=o("__init__()"),oPo=o(" (throws an error)."),rPo=l(),Zr=a("div"),f(bA.$$.fragment),tPo=l(),nce=a("p"),aPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nPo=l(),wd=a("p"),sPo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),lPo=o("not"),iPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),dPo=o("from_pretrained()"),cPo=o(" to load the model weights."),fPo=l(),lce=a("p"),mPo=o("Examples:"),gPo=l(),f(FA.$$.fragment),hPo=l(),Qe=a("div"),f(vA.$$.fragment),pPo=l(),ice=a("p"),_Po=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uPo=l(),Za=a("p"),bPo=o("The model class to instantiate is selected based on the "),dce=a("code"),FPo=o("model_type"),vPo=o(` property of the config object (either
passed as an argument or loaded from `),cce=a("code"),TPo=o("pretrained_model_name_or_path"),MPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),EPo=o("pretrained_model_name_or_path"),CPo=o(":"),wPo=l(),R=a("ul"),C5=a("li"),mce=a("strong"),APo=o("albert"),yPo=o(" \u2014 "),Jj=a("a"),LPo=o("AlbertForQuestionAnswering"),xPo=o(" (ALBERT model)"),kPo=l(),w5=a("li"),gce=a("strong"),SPo=o("bart"),RPo=o(" \u2014 "),Yj=a("a"),BPo=o("BartForQuestionAnswering"),PPo=o(" (BART model)"),$Po=l(),A5=a("li"),hce=a("strong"),IPo=o("bert"),qPo=o(" \u2014 "),Kj=a("a"),NPo=o("BertForQuestionAnswering"),jPo=o(" (BERT model)"),DPo=l(),y5=a("li"),pce=a("strong"),GPo=o("big_bird"),OPo=o(" \u2014 "),Zj=a("a"),VPo=o("BigBirdForQuestionAnswering"),XPo=o(" (BigBird model)"),zPo=l(),L5=a("li"),_ce=a("strong"),QPo=o("bigbird_pegasus"),WPo=o(" \u2014 "),eD=a("a"),HPo=o("BigBirdPegasusForQuestionAnswering"),UPo=o(" (BigBirdPegasus model)"),JPo=l(),x5=a("li"),uce=a("strong"),YPo=o("camembert"),KPo=o(" \u2014 "),oD=a("a"),ZPo=o("CamembertForQuestionAnswering"),e$o=o(" (CamemBERT model)"),o$o=l(),k5=a("li"),bce=a("strong"),r$o=o("canine"),t$o=o(" \u2014 "),rD=a("a"),a$o=o("CanineForQuestionAnswering"),n$o=o(" (Canine model)"),s$o=l(),S5=a("li"),Fce=a("strong"),l$o=o("convbert"),i$o=o(" \u2014 "),tD=a("a"),d$o=o("ConvBertForQuestionAnswering"),c$o=o(" (ConvBERT model)"),f$o=l(),R5=a("li"),vce=a("strong"),m$o=o("data2vec-text"),g$o=o(" \u2014 "),aD=a("a"),h$o=o("Data2VecTextForQuestionAnswering"),p$o=o(" (Data2VecText model)"),_$o=l(),B5=a("li"),Tce=a("strong"),u$o=o("deberta"),b$o=o(" \u2014 "),nD=a("a"),F$o=o("DebertaForQuestionAnswering"),v$o=o(" (DeBERTa model)"),T$o=l(),P5=a("li"),Mce=a("strong"),M$o=o("deberta-v2"),E$o=o(" \u2014 "),sD=a("a"),C$o=o("DebertaV2ForQuestionAnswering"),w$o=o(" (DeBERTa-v2 model)"),A$o=l(),$5=a("li"),Ece=a("strong"),y$o=o("distilbert"),L$o=o(" \u2014 "),lD=a("a"),x$o=o("DistilBertForQuestionAnswering"),k$o=o(" (DistilBERT model)"),S$o=l(),I5=a("li"),Cce=a("strong"),R$o=o("electra"),B$o=o(" \u2014 "),iD=a("a"),P$o=o("ElectraForQuestionAnswering"),$$o=o(" (ELECTRA model)"),I$o=l(),q5=a("li"),wce=a("strong"),q$o=o("flaubert"),N$o=o(" \u2014 "),dD=a("a"),j$o=o("FlaubertForQuestionAnsweringSimple"),D$o=o(" (FlauBERT model)"),G$o=l(),N5=a("li"),Ace=a("strong"),O$o=o("fnet"),V$o=o(" \u2014 "),cD=a("a"),X$o=o("FNetForQuestionAnswering"),z$o=o(" (FNet model)"),Q$o=l(),j5=a("li"),yce=a("strong"),W$o=o("funnel"),H$o=o(" \u2014 "),fD=a("a"),U$o=o("FunnelForQuestionAnswering"),J$o=o(" (Funnel Transformer model)"),Y$o=l(),D5=a("li"),Lce=a("strong"),K$o=o("gptj"),Z$o=o(" \u2014 "),mD=a("a"),eIo=o("GPTJForQuestionAnswering"),oIo=o(" (GPT-J model)"),rIo=l(),G5=a("li"),xce=a("strong"),tIo=o("ibert"),aIo=o(" \u2014 "),gD=a("a"),nIo=o("IBertForQuestionAnswering"),sIo=o(" (I-BERT model)"),lIo=l(),O5=a("li"),kce=a("strong"),iIo=o("layoutlmv2"),dIo=o(" \u2014 "),hD=a("a"),cIo=o("LayoutLMv2ForQuestionAnswering"),fIo=o(" (LayoutLMv2 model)"),mIo=l(),V5=a("li"),Sce=a("strong"),gIo=o("led"),hIo=o(" \u2014 "),pD=a("a"),pIo=o("LEDForQuestionAnswering"),_Io=o(" (LED model)"),uIo=l(),X5=a("li"),Rce=a("strong"),bIo=o("longformer"),FIo=o(" \u2014 "),_D=a("a"),vIo=o("LongformerForQuestionAnswering"),TIo=o(" (Longformer model)"),MIo=l(),z5=a("li"),Bce=a("strong"),EIo=o("lxmert"),CIo=o(" \u2014 "),uD=a("a"),wIo=o("LxmertForQuestionAnswering"),AIo=o(" (LXMERT model)"),yIo=l(),Q5=a("li"),Pce=a("strong"),LIo=o("mbart"),xIo=o(" \u2014 "),bD=a("a"),kIo=o("MBartForQuestionAnswering"),SIo=o(" (mBART model)"),RIo=l(),W5=a("li"),$ce=a("strong"),BIo=o("megatron-bert"),PIo=o(" \u2014 "),FD=a("a"),$Io=o("MegatronBertForQuestionAnswering"),IIo=o(" (MegatronBert model)"),qIo=l(),H5=a("li"),Ice=a("strong"),NIo=o("mobilebert"),jIo=o(" \u2014 "),vD=a("a"),DIo=o("MobileBertForQuestionAnswering"),GIo=o(" (MobileBERT model)"),OIo=l(),U5=a("li"),qce=a("strong"),VIo=o("mpnet"),XIo=o(" \u2014 "),TD=a("a"),zIo=o("MPNetForQuestionAnswering"),QIo=o(" (MPNet model)"),WIo=l(),J5=a("li"),Nce=a("strong"),HIo=o("nystromformer"),UIo=o(" \u2014 "),MD=a("a"),JIo=o("NystromformerForQuestionAnswering"),YIo=o(" (Nystromformer model)"),KIo=l(),Y5=a("li"),jce=a("strong"),ZIo=o("qdqbert"),eqo=o(" \u2014 "),ED=a("a"),oqo=o("QDQBertForQuestionAnswering"),rqo=o(" (QDQBert model)"),tqo=l(),K5=a("li"),Dce=a("strong"),aqo=o("reformer"),nqo=o(" \u2014 "),CD=a("a"),sqo=o("ReformerForQuestionAnswering"),lqo=o(" (Reformer model)"),iqo=l(),Z5=a("li"),Gce=a("strong"),dqo=o("rembert"),cqo=o(" \u2014 "),wD=a("a"),fqo=o("RemBertForQuestionAnswering"),mqo=o(" (RemBERT model)"),gqo=l(),e3=a("li"),Oce=a("strong"),hqo=o("roberta"),pqo=o(" \u2014 "),AD=a("a"),_qo=o("RobertaForQuestionAnswering"),uqo=o(" (RoBERTa model)"),bqo=l(),o3=a("li"),Vce=a("strong"),Fqo=o("roformer"),vqo=o(" \u2014 "),yD=a("a"),Tqo=o("RoFormerForQuestionAnswering"),Mqo=o(" (RoFormer model)"),Eqo=l(),r3=a("li"),Xce=a("strong"),Cqo=o("splinter"),wqo=o(" \u2014 "),LD=a("a"),Aqo=o("SplinterForQuestionAnswering"),yqo=o(" (Splinter model)"),Lqo=l(),t3=a("li"),zce=a("strong"),xqo=o("squeezebert"),kqo=o(" \u2014 "),xD=a("a"),Sqo=o("SqueezeBertForQuestionAnswering"),Rqo=o(" (SqueezeBERT model)"),Bqo=l(),a3=a("li"),Qce=a("strong"),Pqo=o("xlm"),$qo=o(" \u2014 "),kD=a("a"),Iqo=o("XLMForQuestionAnsweringSimple"),qqo=o(" (XLM model)"),Nqo=l(),n3=a("li"),Wce=a("strong"),jqo=o("xlm-roberta"),Dqo=o(" \u2014 "),SD=a("a"),Gqo=o("XLMRobertaForQuestionAnswering"),Oqo=o(" (XLM-RoBERTa model)"),Vqo=l(),s3=a("li"),Hce=a("strong"),Xqo=o("xlm-roberta-xl"),zqo=o(" \u2014 "),RD=a("a"),Qqo=o("XLMRobertaXLForQuestionAnswering"),Wqo=o(" (XLM-RoBERTa-XL model)"),Hqo=l(),l3=a("li"),Uce=a("strong"),Uqo=o("xlnet"),Jqo=o(" \u2014 "),BD=a("a"),Yqo=o("XLNetForQuestionAnsweringSimple"),Kqo=o(" (XLNet model)"),Zqo=l(),i3=a("li"),Jce=a("strong"),eNo=o("yoso"),oNo=o(" \u2014 "),PD=a("a"),rNo=o("YosoForQuestionAnswering"),tNo=o(" (YOSO model)"),aNo=l(),d3=a("p"),nNo=o("The model is set in evaluation mode by default using "),Yce=a("code"),sNo=o("model.eval()"),lNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kce=a("code"),iNo=o("model.train()"),dNo=l(),Zce=a("p"),cNo=o("Examples:"),fNo=l(),f(TA.$$.fragment),sBe=l(),Ad=a("h2"),c3=a("a"),efe=a("span"),f(MA.$$.fragment),mNo=l(),ofe=a("span"),gNo=o("AutoModelForTableQuestionAnswering"),lBe=l(),sr=a("div"),f(EA.$$.fragment),hNo=l(),yd=a("p"),pNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$D=a("a"),_No=o("from_pretrained()"),uNo=o(" class method or the "),ID=a("a"),bNo=o("from_config()"),FNo=o(` class
method.`),vNo=l(),CA=a("p"),TNo=o("This class cannot be instantiated directly using "),rfe=a("code"),MNo=o("__init__()"),ENo=o(" (throws an error)."),CNo=l(),et=a("div"),f(wA.$$.fragment),wNo=l(),tfe=a("p"),ANo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yNo=l(),Ld=a("p"),LNo=o(`Note:
Loading a model from its configuration file does `),afe=a("strong"),xNo=o("not"),kNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),SNo=o("from_pretrained()"),RNo=o(" to load the model weights."),BNo=l(),nfe=a("p"),PNo=o("Examples:"),$No=l(),f(AA.$$.fragment),INo=l(),We=a("div"),f(yA.$$.fragment),qNo=l(),sfe=a("p"),NNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jNo=l(),en=a("p"),DNo=o("The model class to instantiate is selected based on the "),lfe=a("code"),GNo=o("model_type"),ONo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),VNo=o("pretrained_model_name_or_path"),XNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),zNo=o("pretrained_model_name_or_path"),QNo=o(":"),WNo=l(),cfe=a("ul"),f3=a("li"),ffe=a("strong"),HNo=o("tapas"),UNo=o(" \u2014 "),ND=a("a"),JNo=o("TapasForQuestionAnswering"),YNo=o(" (TAPAS model)"),KNo=l(),m3=a("p"),ZNo=o("The model is set in evaluation mode by default using "),mfe=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),rjo=o("model.train()"),tjo=l(),hfe=a("p"),ajo=o("Examples:"),njo=l(),f(LA.$$.fragment),iBe=l(),xd=a("h2"),g3=a("a"),pfe=a("span"),f(xA.$$.fragment),sjo=l(),_fe=a("span"),ljo=o("AutoModelForImageClassification"),dBe=l(),lr=a("div"),f(kA.$$.fragment),ijo=l(),kd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jD=a("a"),cjo=o("from_pretrained()"),fjo=o(" class method or the "),DD=a("a"),mjo=o("from_config()"),gjo=o(` class
method.`),hjo=l(),SA=a("p"),pjo=o("This class cannot be instantiated directly using "),ufe=a("code"),_jo=o("__init__()"),ujo=o(" (throws an error)."),bjo=l(),ot=a("div"),f(RA.$$.fragment),Fjo=l(),bfe=a("p"),vjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tjo=l(),Sd=a("p"),Mjo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),Ejo=o("not"),Cjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),wjo=o("from_pretrained()"),Ajo=o(" to load the model weights."),yjo=l(),vfe=a("p"),Ljo=o("Examples:"),xjo=l(),f(BA.$$.fragment),kjo=l(),He=a("div"),f(PA.$$.fragment),Sjo=l(),Tfe=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bjo=l(),on=a("p"),Pjo=o("The model class to instantiate is selected based on the "),Mfe=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),qjo=o("pretrained_model_name_or_path"),Njo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(":"),Gjo=l(),ce=a("ul"),h3=a("li"),wfe=a("strong"),Ojo=o("beit"),Vjo=o(" \u2014 "),OD=a("a"),Xjo=o("BeitForImageClassification"),zjo=o(" (BEiT model)"),Qjo=l(),p3=a("li"),Afe=a("strong"),Wjo=o("convnext"),Hjo=o(" \u2014 "),VD=a("a"),Ujo=o("ConvNextForImageClassification"),Jjo=o(" (ConvNext model)"),Yjo=l(),Ds=a("li"),yfe=a("strong"),Kjo=o("deit"),Zjo=o(" \u2014 "),XD=a("a"),eDo=o("DeiTForImageClassification"),oDo=o(" or "),zD=a("a"),rDo=o("DeiTForImageClassificationWithTeacher"),tDo=o(" (DeiT model)"),aDo=l(),_3=a("li"),Lfe=a("strong"),nDo=o("imagegpt"),sDo=o(" \u2014 "),QD=a("a"),lDo=o("ImageGPTForImageClassification"),iDo=o(" (ImageGPT model)"),dDo=l(),ma=a("li"),xfe=a("strong"),cDo=o("perceiver"),fDo=o(" \u2014 "),WD=a("a"),mDo=o("PerceiverForImageClassificationLearned"),gDo=o(" or "),HD=a("a"),hDo=o("PerceiverForImageClassificationFourier"),pDo=o(" or "),UD=a("a"),_Do=o("PerceiverForImageClassificationConvProcessing"),uDo=o(" (Perceiver model)"),bDo=l(),u3=a("li"),kfe=a("strong"),FDo=o("poolformer"),vDo=o(" \u2014 "),JD=a("a"),TDo=o("PoolFormerForImageClassification"),MDo=o(" (PoolFormer model)"),EDo=l(),b3=a("li"),Sfe=a("strong"),CDo=o("regnet"),wDo=o(" \u2014 "),YD=a("a"),ADo=o("RegNetForImageClassification"),yDo=o(" (RegNet model)"),LDo=l(),F3=a("li"),Rfe=a("strong"),xDo=o("resnet"),kDo=o(" \u2014 "),KD=a("a"),SDo=o("ResNetForImageClassification"),RDo=o(" (ResNet model)"),BDo=l(),v3=a("li"),Bfe=a("strong"),PDo=o("segformer"),$Do=o(" \u2014 "),ZD=a("a"),IDo=o("SegformerForImageClassification"),qDo=o(" (SegFormer model)"),NDo=l(),T3=a("li"),Pfe=a("strong"),jDo=o("swin"),DDo=o(" \u2014 "),eG=a("a"),GDo=o("SwinForImageClassification"),ODo=o(" (Swin model)"),VDo=l(),M3=a("li"),$fe=a("strong"),XDo=o("van"),zDo=o(" \u2014 "),oG=a("a"),QDo=o("VanForImageClassification"),WDo=o(" (VAN model)"),HDo=l(),E3=a("li"),Ife=a("strong"),UDo=o("vit"),JDo=o(" \u2014 "),rG=a("a"),YDo=o("ViTForImageClassification"),KDo=o(" (ViT model)"),ZDo=l(),C3=a("p"),eGo=o("The model is set in evaluation mode by default using "),qfe=a("code"),oGo=o("model.eval()"),rGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),tGo=o("model.train()"),aGo=l(),jfe=a("p"),nGo=o("Examples:"),sGo=l(),f($A.$$.fragment),cBe=l(),Rd=a("h2"),w3=a("a"),Dfe=a("span"),f(IA.$$.fragment),lGo=l(),Gfe=a("span"),iGo=o("AutoModelForVision2Seq"),fBe=l(),ir=a("div"),f(qA.$$.fragment),dGo=l(),Bd=a("p"),cGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tG=a("a"),fGo=o("from_pretrained()"),mGo=o(" class method or the "),aG=a("a"),gGo=o("from_config()"),hGo=o(` class
method.`),pGo=l(),NA=a("p"),_Go=o("This class cannot be instantiated directly using "),Ofe=a("code"),uGo=o("__init__()"),bGo=o(" (throws an error)."),FGo=l(),rt=a("div"),f(jA.$$.fragment),vGo=l(),Vfe=a("p"),TGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MGo=l(),Pd=a("p"),EGo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),CGo=o("not"),wGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),AGo=o("from_pretrained()"),yGo=o(" to load the model weights."),LGo=l(),zfe=a("p"),xGo=o("Examples:"),kGo=l(),f(DA.$$.fragment),SGo=l(),Ue=a("div"),f(GA.$$.fragment),RGo=l(),Qfe=a("p"),BGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PGo=l(),rn=a("p"),$Go=o("The model class to instantiate is selected based on the "),Wfe=a("code"),IGo=o("model_type"),qGo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),NGo=o("pretrained_model_name_or_path"),jGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),DGo=o("pretrained_model_name_or_path"),GGo=o(":"),OGo=l(),Jfe=a("ul"),A3=a("li"),Yfe=a("strong"),VGo=o("vision-encoder-decoder"),XGo=o(" \u2014 "),sG=a("a"),zGo=o("VisionEncoderDecoderModel"),QGo=o(" (Vision Encoder decoder model)"),WGo=l(),y3=a("p"),HGo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),YGo=o("model.train()"),KGo=l(),eme=a("p"),ZGo=o("Examples:"),eOo=l(),f(OA.$$.fragment),mBe=l(),$d=a("h2"),L3=a("a"),ome=a("span"),f(VA.$$.fragment),oOo=l(),rme=a("span"),rOo=o("AutoModelForAudioClassification"),gBe=l(),dr=a("div"),f(XA.$$.fragment),tOo=l(),Id=a("p"),aOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lG=a("a"),nOo=o("from_pretrained()"),sOo=o(" class method or the "),iG=a("a"),lOo=o("from_config()"),iOo=o(` class
method.`),dOo=l(),zA=a("p"),cOo=o("This class cannot be instantiated directly using "),tme=a("code"),fOo=o("__init__()"),mOo=o(" (throws an error)."),gOo=l(),tt=a("div"),f(QA.$$.fragment),hOo=l(),ame=a("p"),pOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Oo=l(),qd=a("p"),uOo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),bOo=o("not"),FOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),vOo=o("from_pretrained()"),TOo=o(" to load the model weights."),MOo=l(),sme=a("p"),EOo=o("Examples:"),COo=l(),f(WA.$$.fragment),wOo=l(),Je=a("div"),f(HA.$$.fragment),AOo=l(),lme=a("p"),yOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),LOo=l(),tn=a("p"),xOo=o("The model class to instantiate is selected based on the "),ime=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),ROo=o("pretrained_model_name_or_path"),BOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),POo=o("pretrained_model_name_or_path"),$Oo=o(":"),IOo=l(),Se=a("ul"),x3=a("li"),fme=a("strong"),qOo=o("data2vec-audio"),NOo=o(" \u2014 "),cG=a("a"),jOo=o("Data2VecAudioForSequenceClassification"),DOo=o(" (Data2VecAudio model)"),GOo=l(),k3=a("li"),mme=a("strong"),OOo=o("hubert"),VOo=o(" \u2014 "),fG=a("a"),XOo=o("HubertForSequenceClassification"),zOo=o(" (Hubert model)"),QOo=l(),S3=a("li"),gme=a("strong"),WOo=o("sew"),HOo=o(" \u2014 "),mG=a("a"),UOo=o("SEWForSequenceClassification"),JOo=o(" (SEW model)"),YOo=l(),R3=a("li"),hme=a("strong"),KOo=o("sew-d"),ZOo=o(" \u2014 "),gG=a("a"),eVo=o("SEWDForSequenceClassification"),oVo=o(" (SEW-D model)"),rVo=l(),B3=a("li"),pme=a("strong"),tVo=o("unispeech"),aVo=o(" \u2014 "),hG=a("a"),nVo=o("UniSpeechForSequenceClassification"),sVo=o(" (UniSpeech model)"),lVo=l(),P3=a("li"),_me=a("strong"),iVo=o("unispeech-sat"),dVo=o(" \u2014 "),pG=a("a"),cVo=o("UniSpeechSatForSequenceClassification"),fVo=o(" (UniSpeechSat model)"),mVo=l(),$3=a("li"),ume=a("strong"),gVo=o("wav2vec2"),hVo=o(" \u2014 "),_G=a("a"),pVo=o("Wav2Vec2ForSequenceClassification"),_Vo=o(" (Wav2Vec2 model)"),uVo=l(),I3=a("li"),bme=a("strong"),bVo=o("wavlm"),FVo=o(" \u2014 "),uG=a("a"),vVo=o("WavLMForSequenceClassification"),TVo=o(" (WavLM model)"),MVo=l(),q3=a("p"),EVo=o("The model is set in evaluation mode by default using "),Fme=a("code"),CVo=o("model.eval()"),wVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),AVo=o("model.train()"),yVo=l(),Tme=a("p"),LVo=o("Examples:"),xVo=l(),f(UA.$$.fragment),hBe=l(),Nd=a("h2"),N3=a("a"),Mme=a("span"),f(JA.$$.fragment),kVo=l(),Eme=a("span"),SVo=o("AutoModelForAudioFrameClassification"),pBe=l(),cr=a("div"),f(YA.$$.fragment),RVo=l(),jd=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bG=a("a"),PVo=o("from_pretrained()"),$Vo=o(" class method or the "),FG=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),KA=a("p"),jVo=o("This class cannot be instantiated directly using "),Cme=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),at=a("div"),f(ZA.$$.fragment),VVo=l(),wme=a("p"),XVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),zVo=l(),Dd=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),WVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),yme=a("p"),KVo=o("Examples:"),ZVo=l(),f(e6.$$.fragment),eXo=l(),Ye=a("div"),f(o6.$$.fragment),oXo=l(),Lme=a("p"),rXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tXo=l(),an=a("p"),aXo=o("The model class to instantiate is selected based on the "),xme=a("code"),nXo=o("model_type"),sXo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),fXo=l(),nn=a("ul"),j3=a("li"),Rme=a("strong"),mXo=o("data2vec-audio"),gXo=o(" \u2014 "),TG=a("a"),hXo=o("Data2VecAudioForAudioFrameClassification"),pXo=o(" (Data2VecAudio model)"),_Xo=l(),D3=a("li"),Bme=a("strong"),uXo=o("unispeech-sat"),bXo=o(" \u2014 "),MG=a("a"),FXo=o("UniSpeechSatForAudioFrameClassification"),vXo=o(" (UniSpeechSat model)"),TXo=l(),G3=a("li"),Pme=a("strong"),MXo=o("wav2vec2"),EXo=o(" \u2014 "),EG=a("a"),CXo=o("Wav2Vec2ForAudioFrameClassification"),wXo=o(" (Wav2Vec2 model)"),AXo=l(),O3=a("li"),$me=a("strong"),yXo=o("wavlm"),LXo=o(" \u2014 "),CG=a("a"),xXo=o("WavLMForAudioFrameClassification"),kXo=o(" (WavLM model)"),SXo=l(),V3=a("p"),RXo=o("The model is set in evaluation mode by default using "),Ime=a("code"),BXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),$Xo=o("model.train()"),IXo=l(),Nme=a("p"),qXo=o("Examples:"),NXo=l(),f(r6.$$.fragment),_Be=l(),Gd=a("h2"),X3=a("a"),jme=a("span"),f(t6.$$.fragment),jXo=l(),Dme=a("span"),DXo=o("AutoModelForCTC"),uBe=l(),fr=a("div"),f(a6.$$.fragment),GXo=l(),Od=a("p"),OXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wG=a("a"),VXo=o("from_pretrained()"),XXo=o(" class method or the "),AG=a("a"),zXo=o("from_config()"),QXo=o(` class
method.`),WXo=l(),n6=a("p"),HXo=o("This class cannot be instantiated directly using "),Gme=a("code"),UXo=o("__init__()"),JXo=o(" (throws an error)."),YXo=l(),nt=a("div"),f(s6.$$.fragment),KXo=l(),Ome=a("p"),ZXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ezo=l(),Vd=a("p"),ozo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),rzo=o("not"),tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),azo=o("from_pretrained()"),nzo=o(" to load the model weights."),szo=l(),Xme=a("p"),lzo=o("Examples:"),izo=l(),f(l6.$$.fragment),dzo=l(),Ke=a("div"),f(i6.$$.fragment),czo=l(),zme=a("p"),fzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mzo=l(),sn=a("p"),gzo=o("The model class to instantiate is selected based on the "),Qme=a("code"),hzo=o("model_type"),pzo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),_zo=o("pretrained_model_name_or_path"),uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),bzo=o("pretrained_model_name_or_path"),Fzo=o(":"),vzo=l(),Re=a("ul"),z3=a("li"),Ume=a("strong"),Tzo=o("data2vec-audio"),Mzo=o(" \u2014 "),LG=a("a"),Ezo=o("Data2VecAudioForCTC"),Czo=o(" (Data2VecAudio model)"),wzo=l(),Q3=a("li"),Jme=a("strong"),Azo=o("hubert"),yzo=o(" \u2014 "),xG=a("a"),Lzo=o("HubertForCTC"),xzo=o(" (Hubert model)"),kzo=l(),W3=a("li"),Yme=a("strong"),Szo=o("sew"),Rzo=o(" \u2014 "),kG=a("a"),Bzo=o("SEWForCTC"),Pzo=o(" (SEW model)"),$zo=l(),H3=a("li"),Kme=a("strong"),Izo=o("sew-d"),qzo=o(" \u2014 "),SG=a("a"),Nzo=o("SEWDForCTC"),jzo=o(" (SEW-D model)"),Dzo=l(),U3=a("li"),Zme=a("strong"),Gzo=o("unispeech"),Ozo=o(" \u2014 "),RG=a("a"),Vzo=o("UniSpeechForCTC"),Xzo=o(" (UniSpeech model)"),zzo=l(),J3=a("li"),ege=a("strong"),Qzo=o("unispeech-sat"),Wzo=o(" \u2014 "),BG=a("a"),Hzo=o("UniSpeechSatForCTC"),Uzo=o(" (UniSpeechSat model)"),Jzo=l(),Y3=a("li"),oge=a("strong"),Yzo=o("wav2vec2"),Kzo=o(" \u2014 "),PG=a("a"),Zzo=o("Wav2Vec2ForCTC"),eQo=o(" (Wav2Vec2 model)"),oQo=l(),K3=a("li"),rge=a("strong"),rQo=o("wavlm"),tQo=o(" \u2014 "),$G=a("a"),aQo=o("WavLMForCTC"),nQo=o(" (WavLM model)"),sQo=l(),Z3=a("p"),lQo=o("The model is set in evaluation mode by default using "),tge=a("code"),iQo=o("model.eval()"),dQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),cQo=o("model.train()"),fQo=l(),nge=a("p"),mQo=o("Examples:"),gQo=l(),f(d6.$$.fragment),bBe=l(),Xd=a("h2"),e2=a("a"),sge=a("span"),f(c6.$$.fragment),hQo=l(),lge=a("span"),pQo=o("AutoModelForSpeechSeq2Seq"),FBe=l(),mr=a("div"),f(f6.$$.fragment),_Qo=l(),zd=a("p"),uQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IG=a("a"),bQo=o("from_pretrained()"),FQo=o(" class method or the "),qG=a("a"),vQo=o("from_config()"),TQo=o(` class
method.`),MQo=l(),m6=a("p"),EQo=o("This class cannot be instantiated directly using "),ige=a("code"),CQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),st=a("div"),f(g6.$$.fragment),yQo=l(),dge=a("p"),LQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xQo=l(),Qd=a("p"),kQo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),SQo=o("not"),RQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),BQo=o("from_pretrained()"),PQo=o(" to load the model weights."),$Qo=l(),fge=a("p"),IQo=o("Examples:"),qQo=l(),f(h6.$$.fragment),NQo=l(),Ze=a("div"),f(p6.$$.fragment),jQo=l(),mge=a("p"),DQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),GQo=l(),ln=a("p"),OQo=o("The model class to instantiate is selected based on the "),gge=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),WQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),_6=a("ul"),o2=a("li"),_ge=a("strong"),JQo=o("speech-encoder-decoder"),YQo=o(" \u2014 "),jG=a("a"),KQo=o("SpeechEncoderDecoderModel"),ZQo=o(" (Speech Encoder decoder model)"),eWo=l(),r2=a("li"),uge=a("strong"),oWo=o("speech_to_text"),rWo=o(" \u2014 "),DG=a("a"),tWo=o("Speech2TextForConditionalGeneration"),aWo=o(" (Speech2Text model)"),nWo=l(),t2=a("p"),sWo=o("The model is set in evaluation mode by default using "),bge=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=a("code"),dWo=o("model.train()"),cWo=l(),vge=a("p"),fWo=o("Examples:"),mWo=l(),f(u6.$$.fragment),vBe=l(),Wd=a("h2"),a2=a("a"),Tge=a("span"),f(b6.$$.fragment),gWo=l(),Mge=a("span"),hWo=o("AutoModelForAudioXVector"),TBe=l(),gr=a("div"),f(F6.$$.fragment),pWo=l(),Hd=a("p"),_Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GG=a("a"),uWo=o("from_pretrained()"),bWo=o(" class method or the "),OG=a("a"),FWo=o("from_config()"),vWo=o(` class
method.`),TWo=l(),v6=a("p"),MWo=o("This class cannot be instantiated directly using "),Ege=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),lt=a("div"),f(T6.$$.fragment),AWo=l(),Cge=a("p"),yWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),LWo=l(),Ud=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),RWo=o("from_pretrained()"),BWo=o(" to load the model weights."),PWo=l(),Age=a("p"),$Wo=o("Examples:"),IWo=l(),f(M6.$$.fragment),qWo=l(),eo=a("div"),f(E6.$$.fragment),NWo=l(),yge=a("p"),jWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DWo=l(),dn=a("p"),GWo=o("The model class to instantiate is selected based on the "),Lge=a("code"),OWo=o("model_type"),VWo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),QWo=o("pretrained_model_name_or_path"),WWo=o(":"),HWo=l(),cn=a("ul"),n2=a("li"),Sge=a("strong"),UWo=o("data2vec-audio"),JWo=o(" \u2014 "),XG=a("a"),YWo=o("Data2VecAudioForXVector"),KWo=o(" (Data2VecAudio model)"),ZWo=l(),s2=a("li"),Rge=a("strong"),eHo=o("unispeech-sat"),oHo=o(" \u2014 "),zG=a("a"),rHo=o("UniSpeechSatForXVector"),tHo=o(" (UniSpeechSat model)"),aHo=l(),l2=a("li"),Bge=a("strong"),nHo=o("wav2vec2"),sHo=o(" \u2014 "),QG=a("a"),lHo=o("Wav2Vec2ForXVector"),iHo=o(" (Wav2Vec2 model)"),dHo=l(),i2=a("li"),Pge=a("strong"),cHo=o("wavlm"),fHo=o(" \u2014 "),WG=a("a"),mHo=o("WavLMForXVector"),gHo=o(" (WavLM model)"),hHo=l(),d2=a("p"),pHo=o("The model is set in evaluation mode by default using "),$ge=a("code"),_Ho=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),bHo=o("model.train()"),FHo=l(),qge=a("p"),vHo=o("Examples:"),THo=l(),f(C6.$$.fragment),MBe=l(),Jd=a("h2"),c2=a("a"),Nge=a("span"),f(w6.$$.fragment),MHo=l(),jge=a("span"),EHo=o("AutoModelForMaskedImageModeling"),EBe=l(),hr=a("div"),f(A6.$$.fragment),CHo=l(),Yd=a("p"),wHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HG=a("a"),AHo=o("from_pretrained()"),yHo=o(" class method or the "),UG=a("a"),LHo=o("from_config()"),xHo=o(` class
method.`),kHo=l(),y6=a("p"),SHo=o("This class cannot be instantiated directly using "),Dge=a("code"),RHo=o("__init__()"),BHo=o(" (throws an error)."),PHo=l(),it=a("div"),f(L6.$$.fragment),$Ho=l(),Gge=a("p"),IHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qHo=l(),Kd=a("p"),NHo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),jHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),GHo=o("from_pretrained()"),OHo=o(" to load the model weights."),VHo=l(),Vge=a("p"),XHo=o("Examples:"),zHo=l(),f(x6.$$.fragment),QHo=l(),oo=a("div"),f(k6.$$.fragment),WHo=l(),Xge=a("p"),HHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),UHo=l(),fn=a("p"),JHo=o("The model class to instantiate is selected based on the "),zge=a("code"),YHo=o("model_type"),KHo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),ZHo=o("pretrained_model_name_or_path"),eUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),oUo=o("pretrained_model_name_or_path"),rUo=o(":"),tUo=l(),Zd=a("ul"),f2=a("li"),Hge=a("strong"),aUo=o("deit"),nUo=o(" \u2014 "),YG=a("a"),sUo=o("DeiTForMaskedImageModeling"),lUo=o(" (DeiT model)"),iUo=l(),m2=a("li"),Uge=a("strong"),dUo=o("swin"),cUo=o(" \u2014 "),KG=a("a"),fUo=o("SwinForMaskedImageModeling"),mUo=o(" (Swin model)"),gUo=l(),g2=a("li"),Jge=a("strong"),hUo=o("vit"),pUo=o(" \u2014 "),ZG=a("a"),_Uo=o("ViTForMaskedImageModeling"),uUo=o(" (ViT model)"),bUo=l(),h2=a("p"),FUo=o("The model is set in evaluation mode by default using "),Yge=a("code"),vUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),MUo=o("model.train()"),EUo=l(),Zge=a("p"),CUo=o("Examples:"),wUo=l(),f(S6.$$.fragment),CBe=l(),ec=a("h2"),p2=a("a"),ehe=a("span"),f(R6.$$.fragment),AUo=l(),ohe=a("span"),yUo=o("AutoModelForObjectDetection"),wBe=l(),pr=a("div"),f(B6.$$.fragment),LUo=l(),oc=a("p"),xUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eO=a("a"),kUo=o("from_pretrained()"),SUo=o(" class method or the "),oO=a("a"),RUo=o("from_config()"),BUo=o(` class
method.`),PUo=l(),P6=a("p"),$Uo=o("This class cannot be instantiated directly using "),rhe=a("code"),IUo=o("__init__()"),qUo=o(" (throws an error)."),NUo=l(),dt=a("div"),f($6.$$.fragment),jUo=l(),the=a("p"),DUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),GUo=l(),rc=a("p"),OUo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),VUo=o("not"),XUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),zUo=o("from_pretrained()"),QUo=o(" to load the model weights."),WUo=l(),nhe=a("p"),HUo=o("Examples:"),UUo=l(),f(I6.$$.fragment),JUo=l(),ro=a("div"),f(q6.$$.fragment),YUo=l(),she=a("p"),KUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ZUo=l(),mn=a("p"),eJo=o("The model class to instantiate is selected based on the "),lhe=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),che=a("ul"),_2=a("li"),fhe=a("strong"),iJo=o("detr"),dJo=o(" \u2014 "),tO=a("a"),cJo=o("DetrForObjectDetection"),fJo=o(" (DETR model)"),mJo=l(),u2=a("p"),gJo=o("The model is set in evaluation mode by default using "),mhe=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),_Jo=o("model.train()"),uJo=l(),hhe=a("p"),bJo=o("Examples:"),FJo=l(),f(N6.$$.fragment),ABe=l(),tc=a("h2"),b2=a("a"),phe=a("span"),f(j6.$$.fragment),vJo=l(),_he=a("span"),TJo=o("AutoModelForImageSegmentation"),yBe=l(),_r=a("div"),f(D6.$$.fragment),MJo=l(),ac=a("p"),EJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aO=a("a"),CJo=o("from_pretrained()"),wJo=o(" class method or the "),nO=a("a"),AJo=o("from_config()"),yJo=o(` class
method.`),LJo=l(),G6=a("p"),xJo=o("This class cannot be instantiated directly using "),uhe=a("code"),kJo=o("__init__()"),SJo=o(" (throws an error)."),RJo=l(),ct=a("div"),f(O6.$$.fragment),BJo=l(),bhe=a("p"),PJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$Jo=l(),nc=a("p"),IJo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),qJo=o("not"),NJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),jJo=o("from_pretrained()"),DJo=o(" to load the model weights."),GJo=l(),vhe=a("p"),OJo=o("Examples:"),VJo=l(),f(V6.$$.fragment),XJo=l(),to=a("div"),f(X6.$$.fragment),zJo=l(),The=a("p"),QJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WJo=l(),gn=a("p"),HJo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),whe=a("ul"),F2=a("li"),Ahe=a("strong"),rYo=o("detr"),tYo=o(" \u2014 "),lO=a("a"),aYo=o("DetrForSegmentation"),nYo=o(" (DETR model)"),sYo=l(),v2=a("p"),lYo=o("The model is set in evaluation mode by default using "),yhe=a("code"),iYo=o("model.eval()"),dYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),cYo=o("model.train()"),fYo=l(),xhe=a("p"),mYo=o("Examples:"),gYo=l(),f(z6.$$.fragment),LBe=l(),sc=a("h2"),T2=a("a"),khe=a("span"),f(Q6.$$.fragment),hYo=l(),She=a("span"),pYo=o("AutoModelForSemanticSegmentation"),xBe=l(),ur=a("div"),f(W6.$$.fragment),_Yo=l(),lc=a("p"),uYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iO=a("a"),bYo=o("from_pretrained()"),FYo=o(" class method or the "),dO=a("a"),vYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),H6=a("p"),EYo=o("This class cannot be instantiated directly using "),Rhe=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),ft=a("div"),f(U6.$$.fragment),yYo=l(),Bhe=a("p"),LYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xYo=l(),ic=a("p"),kYo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),SYo=o("not"),RYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),BYo=o("from_pretrained()"),PYo=o(" to load the model weights."),$Yo=l(),$he=a("p"),IYo=o("Examples:"),qYo=l(),f(J6.$$.fragment),NYo=l(),ao=a("div"),f(Y6.$$.fragment),jYo=l(),Ihe=a("p"),DYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),GYo=l(),hn=a("p"),OYo=o("The model class to instantiate is selected based on the "),qhe=a("code"),VYo=o("model_type"),XYo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),WYo=o("pretrained_model_name_or_path"),HYo=o(":"),UYo=l(),dc=a("ul"),M2=a("li"),Dhe=a("strong"),JYo=o("beit"),YYo=o(" \u2014 "),fO=a("a"),KYo=o("BeitForSemanticSegmentation"),ZYo=o(" (BEiT model)"),eKo=l(),E2=a("li"),Ghe=a("strong"),oKo=o("dpt"),rKo=o(" \u2014 "),mO=a("a"),tKo=o("DPTForSemanticSegmentation"),aKo=o(" (DPT model)"),nKo=l(),C2=a("li"),Ohe=a("strong"),sKo=o("segformer"),lKo=o(" \u2014 "),gO=a("a"),iKo=o("SegformerForSemanticSegmentation"),dKo=o(" (SegFormer model)"),cKo=l(),w2=a("p"),fKo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),mKo=o("model.eval()"),gKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),hKo=o("model.train()"),pKo=l(),zhe=a("p"),_Ko=o("Examples:"),uKo=l(),f(K6.$$.fragment),kBe=l(),cc=a("h2"),A2=a("a"),Qhe=a("span"),f(Z6.$$.fragment),bKo=l(),Whe=a("span"),FKo=o("AutoModelForInstanceSegmentation"),SBe=l(),br=a("div"),f(e0.$$.fragment),vKo=l(),fc=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hO=a("a"),MKo=o("from_pretrained()"),EKo=o(" class method or the "),pO=a("a"),CKo=o("from_config()"),wKo=o(` class
method.`),AKo=l(),o0=a("p"),yKo=o("This class cannot be instantiated directly using "),Hhe=a("code"),LKo=o("__init__()"),xKo=o(" (throws an error)."),kKo=l(),mt=a("div"),f(r0.$$.fragment),SKo=l(),Uhe=a("p"),RKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),BKo=l(),mc=a("p"),PKo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),$Ko=o("not"),IKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),qKo=o("from_pretrained()"),NKo=o(" to load the model weights."),jKo=l(),Yhe=a("p"),DKo=o("Examples:"),GKo=l(),f(t0.$$.fragment),OKo=l(),no=a("div"),f(a0.$$.fragment),VKo=l(),Khe=a("p"),XKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zKo=l(),pn=a("p"),QKo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),WKo=o("model_type"),HKo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(":"),ZKo=l(),rpe=a("ul"),y2=a("li"),tpe=a("strong"),eZo=o("maskformer"),oZo=o(" \u2014 "),uO=a("a"),rZo=o("MaskFormerForInstanceSegmentation"),tZo=o(" (MaskFormer model)"),aZo=l(),L2=a("p"),nZo=o("The model is set in evaluation mode by default using "),ape=a("code"),sZo=o("model.eval()"),lZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),iZo=o("model.train()"),dZo=l(),spe=a("p"),cZo=o("Examples:"),fZo=l(),f(n0.$$.fragment),RBe=l(),gc=a("h2"),x2=a("a"),lpe=a("span"),f(s0.$$.fragment),mZo=l(),ipe=a("span"),gZo=o("TFAutoModel"),BBe=l(),Fr=a("div"),f(l0.$$.fragment),hZo=l(),hc=a("p"),pZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bO=a("a"),_Zo=o("from_pretrained()"),uZo=o(" class method or the "),FO=a("a"),bZo=o("from_config()"),FZo=o(` class
method.`),vZo=l(),i0=a("p"),TZo=o("This class cannot be instantiated directly using "),dpe=a("code"),MZo=o("__init__()"),EZo=o(" (throws an error)."),CZo=l(),gt=a("div"),f(d0.$$.fragment),wZo=l(),cpe=a("p"),AZo=o("Instantiates one of the base model classes of the library from a configuration."),yZo=l(),pc=a("p"),LZo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),xZo=o("not"),kZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),SZo=o("from_pretrained()"),RZo=o(" to load the model weights."),BZo=l(),mpe=a("p"),PZo=o("Examples:"),$Zo=l(),f(c0.$$.fragment),IZo=l(),ho=a("div"),f(f0.$$.fragment),qZo=l(),gpe=a("p"),NZo=o("Instantiate one of the base model classes of the library from a pretrained model."),jZo=l(),_n=a("p"),DZo=o("The model class to instantiate is selected based on the "),hpe=a("code"),GZo=o("model_type"),OZo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),VZo=o("pretrained_model_name_or_path"),XZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),zZo=o("pretrained_model_name_or_path"),QZo=o(":"),WZo=l(),x=a("ul"),k2=a("li"),upe=a("strong"),HZo=o("albert"),UZo=o(" \u2014 "),TO=a("a"),JZo=o("TFAlbertModel"),YZo=o(" (ALBERT model)"),KZo=l(),S2=a("li"),bpe=a("strong"),ZZo=o("bart"),eer=o(" \u2014 "),MO=a("a"),oer=o("TFBartModel"),rer=o(" (BART model)"),ter=l(),R2=a("li"),Fpe=a("strong"),aer=o("bert"),ner=o(" \u2014 "),EO=a("a"),ser=o("TFBertModel"),ler=o(" (BERT model)"),ier=l(),B2=a("li"),vpe=a("strong"),der=o("blenderbot"),cer=o(" \u2014 "),CO=a("a"),fer=o("TFBlenderbotModel"),mer=o(" (Blenderbot model)"),ger=l(),P2=a("li"),Tpe=a("strong"),her=o("blenderbot-small"),per=o(" \u2014 "),wO=a("a"),_er=o("TFBlenderbotSmallModel"),uer=o(" (BlenderbotSmall model)"),ber=l(),$2=a("li"),Mpe=a("strong"),Fer=o("camembert"),ver=o(" \u2014 "),AO=a("a"),Ter=o("TFCamembertModel"),Mer=o(" (CamemBERT model)"),Eer=l(),I2=a("li"),Epe=a("strong"),Cer=o("clip"),wer=o(" \u2014 "),yO=a("a"),Aer=o("TFCLIPModel"),yer=o(" (CLIP model)"),Ler=l(),q2=a("li"),Cpe=a("strong"),xer=o("convbert"),ker=o(" \u2014 "),LO=a("a"),Ser=o("TFConvBertModel"),Rer=o(" (ConvBERT model)"),Ber=l(),N2=a("li"),wpe=a("strong"),Per=o("convnext"),$er=o(" \u2014 "),xO=a("a"),Ier=o("TFConvNextModel"),qer=o(" (ConvNext model)"),Ner=l(),j2=a("li"),Ape=a("strong"),jer=o("ctrl"),Der=o(" \u2014 "),kO=a("a"),Ger=o("TFCTRLModel"),Oer=o(" (CTRL model)"),Ver=l(),D2=a("li"),ype=a("strong"),Xer=o("deberta"),zer=o(" \u2014 "),SO=a("a"),Qer=o("TFDebertaModel"),Wer=o(" (DeBERTa model)"),Her=l(),G2=a("li"),Lpe=a("strong"),Uer=o("deberta-v2"),Jer=o(" \u2014 "),RO=a("a"),Yer=o("TFDebertaV2Model"),Ker=o(" (DeBERTa-v2 model)"),Zer=l(),O2=a("li"),xpe=a("strong"),eor=o("distilbert"),oor=o(" \u2014 "),BO=a("a"),ror=o("TFDistilBertModel"),tor=o(" (DistilBERT model)"),aor=l(),V2=a("li"),kpe=a("strong"),nor=o("dpr"),sor=o(" \u2014 "),PO=a("a"),lor=o("TFDPRQuestionEncoder"),ior=o(" (DPR model)"),dor=l(),X2=a("li"),Spe=a("strong"),cor=o("electra"),mor=o(" \u2014 "),$O=a("a"),gor=o("TFElectraModel"),hor=o(" (ELECTRA model)"),por=l(),z2=a("li"),Rpe=a("strong"),_or=o("flaubert"),uor=o(" \u2014 "),IO=a("a"),bor=o("TFFlaubertModel"),For=o(" (FlauBERT model)"),vor=l(),Gs=a("li"),Bpe=a("strong"),Tor=o("funnel"),Mor=o(" \u2014 "),qO=a("a"),Eor=o("TFFunnelModel"),Cor=o(" or "),NO=a("a"),wor=o("TFFunnelBaseModel"),Aor=o(" (Funnel Transformer model)"),yor=l(),Q2=a("li"),Ppe=a("strong"),Lor=o("gpt2"),xor=o(" \u2014 "),jO=a("a"),kor=o("TFGPT2Model"),Sor=o(" (OpenAI GPT-2 model)"),Ror=l(),W2=a("li"),$pe=a("strong"),Bor=o("gptj"),Por=o(" \u2014 "),DO=a("a"),$or=o("TFGPTJModel"),Ior=o(" (GPT-J model)"),qor=l(),H2=a("li"),Ipe=a("strong"),Nor=o("hubert"),jor=o(" \u2014 "),GO=a("a"),Dor=o("TFHubertModel"),Gor=o(" (Hubert model)"),Oor=l(),U2=a("li"),qpe=a("strong"),Vor=o("layoutlm"),Xor=o(" \u2014 "),OO=a("a"),zor=o("TFLayoutLMModel"),Qor=o(" (LayoutLM model)"),Wor=l(),J2=a("li"),Npe=a("strong"),Hor=o("led"),Uor=o(" \u2014 "),VO=a("a"),Jor=o("TFLEDModel"),Yor=o(" (LED model)"),Kor=l(),Y2=a("li"),jpe=a("strong"),Zor=o("longformer"),err=o(" \u2014 "),XO=a("a"),orr=o("TFLongformerModel"),rrr=o(" (Longformer model)"),trr=l(),K2=a("li"),Dpe=a("strong"),arr=o("lxmert"),nrr=o(" \u2014 "),zO=a("a"),srr=o("TFLxmertModel"),lrr=o(" (LXMERT model)"),irr=l(),Z2=a("li"),Gpe=a("strong"),drr=o("marian"),crr=o(" \u2014 "),QO=a("a"),frr=o("TFMarianModel"),mrr=o(" (Marian model)"),grr=l(),eF=a("li"),Ope=a("strong"),hrr=o("mbart"),prr=o(" \u2014 "),WO=a("a"),_rr=o("TFMBartModel"),urr=o(" (mBART model)"),brr=l(),oF=a("li"),Vpe=a("strong"),Frr=o("mobilebert"),vrr=o(" \u2014 "),HO=a("a"),Trr=o("TFMobileBertModel"),Mrr=o(" (MobileBERT model)"),Err=l(),rF=a("li"),Xpe=a("strong"),Crr=o("mpnet"),wrr=o(" \u2014 "),UO=a("a"),Arr=o("TFMPNetModel"),yrr=o(" (MPNet model)"),Lrr=l(),tF=a("li"),zpe=a("strong"),xrr=o("mt5"),krr=o(" \u2014 "),JO=a("a"),Srr=o("TFMT5Model"),Rrr=o(" (mT5 model)"),Brr=l(),aF=a("li"),Qpe=a("strong"),Prr=o("openai-gpt"),$rr=o(" \u2014 "),YO=a("a"),Irr=o("TFOpenAIGPTModel"),qrr=o(" (OpenAI GPT model)"),Nrr=l(),nF=a("li"),Wpe=a("strong"),jrr=o("pegasus"),Drr=o(" \u2014 "),KO=a("a"),Grr=o("TFPegasusModel"),Orr=o(" (Pegasus model)"),Vrr=l(),sF=a("li"),Hpe=a("strong"),Xrr=o("rembert"),zrr=o(" \u2014 "),ZO=a("a"),Qrr=o("TFRemBertModel"),Wrr=o(" (RemBERT model)"),Hrr=l(),lF=a("li"),Upe=a("strong"),Urr=o("roberta"),Jrr=o(" \u2014 "),eV=a("a"),Yrr=o("TFRobertaModel"),Krr=o(" (RoBERTa model)"),Zrr=l(),iF=a("li"),Jpe=a("strong"),etr=o("roformer"),otr=o(" \u2014 "),oV=a("a"),rtr=o("TFRoFormerModel"),ttr=o(" (RoFormer model)"),atr=l(),dF=a("li"),Ype=a("strong"),ntr=o("speech_to_text"),str=o(" \u2014 "),rV=a("a"),ltr=o("TFSpeech2TextModel"),itr=o(" (Speech2Text model)"),dtr=l(),cF=a("li"),Kpe=a("strong"),ctr=o("t5"),ftr=o(" \u2014 "),tV=a("a"),mtr=o("TFT5Model"),gtr=o(" (T5 model)"),htr=l(),fF=a("li"),Zpe=a("strong"),ptr=o("tapas"),_tr=o(" \u2014 "),aV=a("a"),utr=o("TFTapasModel"),btr=o(" (TAPAS model)"),Ftr=l(),mF=a("li"),e_e=a("strong"),vtr=o("transfo-xl"),Ttr=o(" \u2014 "),nV=a("a"),Mtr=o("TFTransfoXLModel"),Etr=o(" (Transformer-XL model)"),Ctr=l(),gF=a("li"),o_e=a("strong"),wtr=o("vit"),Atr=o(" \u2014 "),sV=a("a"),ytr=o("TFViTModel"),Ltr=o(" (ViT model)"),xtr=l(),hF=a("li"),r_e=a("strong"),ktr=o("vit_mae"),Str=o(" \u2014 "),lV=a("a"),Rtr=o("TFViTMAEModel"),Btr=o(" (ViTMAE model)"),Ptr=l(),pF=a("li"),t_e=a("strong"),$tr=o("wav2vec2"),Itr=o(" \u2014 "),iV=a("a"),qtr=o("TFWav2Vec2Model"),Ntr=o(" (Wav2Vec2 model)"),jtr=l(),_F=a("li"),a_e=a("strong"),Dtr=o("xlm"),Gtr=o(" \u2014 "),dV=a("a"),Otr=o("TFXLMModel"),Vtr=o(" (XLM model)"),Xtr=l(),uF=a("li"),n_e=a("strong"),ztr=o("xlm-roberta"),Qtr=o(" \u2014 "),cV=a("a"),Wtr=o("TFXLMRobertaModel"),Htr=o(" (XLM-RoBERTa model)"),Utr=l(),bF=a("li"),s_e=a("strong"),Jtr=o("xlnet"),Ytr=o(" \u2014 "),fV=a("a"),Ktr=o("TFXLNetModel"),Ztr=o(" (XLNet model)"),ear=l(),l_e=a("p"),oar=o("Examples:"),rar=l(),f(m0.$$.fragment),PBe=l(),_c=a("h2"),FF=a("a"),i_e=a("span"),f(g0.$$.fragment),tar=l(),d_e=a("span"),aar=o("TFAutoModelForPreTraining"),$Be=l(),vr=a("div"),f(h0.$$.fragment),nar=l(),uc=a("p"),sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=a("a"),lar=o("from_pretrained()"),iar=o(" class method or the "),gV=a("a"),dar=o("from_config()"),car=o(` class
method.`),far=l(),p0=a("p"),mar=o("This class cannot be instantiated directly using "),c_e=a("code"),gar=o("__init__()"),har=o(" (throws an error)."),par=l(),ht=a("div"),f(_0.$$.fragment),_ar=l(),f_e=a("p"),uar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bar=l(),bc=a("p"),Far=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),Tar=o("not"),Mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),Ear=o("from_pretrained()"),Car=o(" to load the model weights."),war=l(),g_e=a("p"),Aar=o("Examples:"),yar=l(),f(u0.$$.fragment),Lar=l(),po=a("div"),f(b0.$$.fragment),xar=l(),h_e=a("p"),kar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sar=l(),un=a("p"),Rar=o("The model class to instantiate is selected based on the "),p_e=a("code"),Bar=o("model_type"),Par=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),$ar=o("pretrained_model_name_or_path"),Iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),qar=o("pretrained_model_name_or_path"),Nar=o(":"),jar=l(),H=a("ul"),vF=a("li"),b_e=a("strong"),Dar=o("albert"),Gar=o(" \u2014 "),pV=a("a"),Oar=o("TFAlbertForPreTraining"),Var=o(" (ALBERT model)"),Xar=l(),TF=a("li"),F_e=a("strong"),zar=o("bart"),Qar=o(" \u2014 "),_V=a("a"),War=o("TFBartForConditionalGeneration"),Har=o(" (BART model)"),Uar=l(),MF=a("li"),v_e=a("strong"),Jar=o("bert"),Yar=o(" \u2014 "),uV=a("a"),Kar=o("TFBertForPreTraining"),Zar=o(" (BERT model)"),enr=l(),EF=a("li"),T_e=a("strong"),onr=o("camembert"),rnr=o(" \u2014 "),bV=a("a"),tnr=o("TFCamembertForMaskedLM"),anr=o(" (CamemBERT model)"),nnr=l(),CF=a("li"),M_e=a("strong"),snr=o("ctrl"),lnr=o(" \u2014 "),FV=a("a"),inr=o("TFCTRLLMHeadModel"),dnr=o(" (CTRL model)"),cnr=l(),wF=a("li"),E_e=a("strong"),fnr=o("distilbert"),mnr=o(" \u2014 "),vV=a("a"),gnr=o("TFDistilBertForMaskedLM"),hnr=o(" (DistilBERT model)"),pnr=l(),AF=a("li"),C_e=a("strong"),_nr=o("electra"),unr=o(" \u2014 "),TV=a("a"),bnr=o("TFElectraForPreTraining"),Fnr=o(" (ELECTRA model)"),vnr=l(),yF=a("li"),w_e=a("strong"),Tnr=o("flaubert"),Mnr=o(" \u2014 "),MV=a("a"),Enr=o("TFFlaubertWithLMHeadModel"),Cnr=o(" (FlauBERT model)"),wnr=l(),LF=a("li"),A_e=a("strong"),Anr=o("funnel"),ynr=o(" \u2014 "),EV=a("a"),Lnr=o("TFFunnelForPreTraining"),xnr=o(" (Funnel Transformer model)"),knr=l(),xF=a("li"),y_e=a("strong"),Snr=o("gpt2"),Rnr=o(" \u2014 "),CV=a("a"),Bnr=o("TFGPT2LMHeadModel"),Pnr=o(" (OpenAI GPT-2 model)"),$nr=l(),kF=a("li"),L_e=a("strong"),Inr=o("layoutlm"),qnr=o(" \u2014 "),wV=a("a"),Nnr=o("TFLayoutLMForMaskedLM"),jnr=o(" (LayoutLM model)"),Dnr=l(),SF=a("li"),x_e=a("strong"),Gnr=o("lxmert"),Onr=o(" \u2014 "),AV=a("a"),Vnr=o("TFLxmertForPreTraining"),Xnr=o(" (LXMERT model)"),znr=l(),RF=a("li"),k_e=a("strong"),Qnr=o("mobilebert"),Wnr=o(" \u2014 "),yV=a("a"),Hnr=o("TFMobileBertForPreTraining"),Unr=o(" (MobileBERT model)"),Jnr=l(),BF=a("li"),S_e=a("strong"),Ynr=o("mpnet"),Knr=o(" \u2014 "),LV=a("a"),Znr=o("TFMPNetForMaskedLM"),esr=o(" (MPNet model)"),osr=l(),PF=a("li"),R_e=a("strong"),rsr=o("openai-gpt"),tsr=o(" \u2014 "),xV=a("a"),asr=o("TFOpenAIGPTLMHeadModel"),nsr=o(" (OpenAI GPT model)"),ssr=l(),$F=a("li"),B_e=a("strong"),lsr=o("roberta"),isr=o(" \u2014 "),kV=a("a"),dsr=o("TFRobertaForMaskedLM"),csr=o(" (RoBERTa model)"),fsr=l(),IF=a("li"),P_e=a("strong"),msr=o("t5"),gsr=o(" \u2014 "),SV=a("a"),hsr=o("TFT5ForConditionalGeneration"),psr=o(" (T5 model)"),_sr=l(),qF=a("li"),$_e=a("strong"),usr=o("tapas"),bsr=o(" \u2014 "),RV=a("a"),Fsr=o("TFTapasForMaskedLM"),vsr=o(" (TAPAS model)"),Tsr=l(),NF=a("li"),I_e=a("strong"),Msr=o("transfo-xl"),Esr=o(" \u2014 "),BV=a("a"),Csr=o("TFTransfoXLLMHeadModel"),wsr=o(" (Transformer-XL model)"),Asr=l(),jF=a("li"),q_e=a("strong"),ysr=o("vit_mae"),Lsr=o(" \u2014 "),PV=a("a"),xsr=o("TFViTMAEForPreTraining"),ksr=o(" (ViTMAE model)"),Ssr=l(),DF=a("li"),N_e=a("strong"),Rsr=o("xlm"),Bsr=o(" \u2014 "),$V=a("a"),Psr=o("TFXLMWithLMHeadModel"),$sr=o(" (XLM model)"),Isr=l(),GF=a("li"),j_e=a("strong"),qsr=o("xlm-roberta"),Nsr=o(" \u2014 "),IV=a("a"),jsr=o("TFXLMRobertaForMaskedLM"),Dsr=o(" (XLM-RoBERTa model)"),Gsr=l(),OF=a("li"),D_e=a("strong"),Osr=o("xlnet"),Vsr=o(" \u2014 "),qV=a("a"),Xsr=o("TFXLNetLMHeadModel"),zsr=o(" (XLNet model)"),Qsr=l(),G_e=a("p"),Wsr=o("Examples:"),Hsr=l(),f(F0.$$.fragment),IBe=l(),Fc=a("h2"),VF=a("a"),O_e=a("span"),f(v0.$$.fragment),Usr=l(),V_e=a("span"),Jsr=o("TFAutoModelForCausalLM"),qBe=l(),Tr=a("div"),f(T0.$$.fragment),Ysr=l(),vc=a("p"),Ksr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NV=a("a"),Zsr=o("from_pretrained()"),elr=o(" class method or the "),jV=a("a"),olr=o("from_config()"),rlr=o(` class
method.`),tlr=l(),M0=a("p"),alr=o("This class cannot be instantiated directly using "),X_e=a("code"),nlr=o("__init__()"),slr=o(" (throws an error)."),llr=l(),pt=a("div"),f(E0.$$.fragment),ilr=l(),z_e=a("p"),dlr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),clr=l(),Tc=a("p"),flr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),mlr=o("not"),glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),hlr=o("from_pretrained()"),plr=o(" to load the model weights."),_lr=l(),W_e=a("p"),ulr=o("Examples:"),blr=l(),f(C0.$$.fragment),Flr=l(),_o=a("div"),f(w0.$$.fragment),vlr=l(),H_e=a("p"),Tlr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mlr=l(),bn=a("p"),Elr=o("The model class to instantiate is selected based on the "),U_e=a("code"),Clr=o("model_type"),wlr=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),Alr=o("pretrained_model_name_or_path"),ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Llr=o("pretrained_model_name_or_path"),xlr=o(":"),klr=l(),fe=a("ul"),XF=a("li"),K_e=a("strong"),Slr=o("bert"),Rlr=o(" \u2014 "),GV=a("a"),Blr=o("TFBertLMHeadModel"),Plr=o(" (BERT model)"),$lr=l(),zF=a("li"),Z_e=a("strong"),Ilr=o("camembert"),qlr=o(" \u2014 "),OV=a("a"),Nlr=o("TFCamembertForCausalLM"),jlr=o(" (CamemBERT model)"),Dlr=l(),QF=a("li"),eue=a("strong"),Glr=o("ctrl"),Olr=o(" \u2014 "),VV=a("a"),Vlr=o("TFCTRLLMHeadModel"),Xlr=o(" (CTRL model)"),zlr=l(),WF=a("li"),oue=a("strong"),Qlr=o("gpt2"),Wlr=o(" \u2014 "),XV=a("a"),Hlr=o("TFGPT2LMHeadModel"),Ulr=o(" (OpenAI GPT-2 model)"),Jlr=l(),HF=a("li"),rue=a("strong"),Ylr=o("gptj"),Klr=o(" \u2014 "),zV=a("a"),Zlr=o("TFGPTJForCausalLM"),eir=o(" (GPT-J model)"),oir=l(),UF=a("li"),tue=a("strong"),rir=o("openai-gpt"),tir=o(" \u2014 "),QV=a("a"),air=o("TFOpenAIGPTLMHeadModel"),nir=o(" (OpenAI GPT model)"),sir=l(),JF=a("li"),aue=a("strong"),lir=o("rembert"),iir=o(" \u2014 "),WV=a("a"),dir=o("TFRemBertForCausalLM"),cir=o(" (RemBERT model)"),fir=l(),YF=a("li"),nue=a("strong"),mir=o("roberta"),gir=o(" \u2014 "),HV=a("a"),hir=o("TFRobertaForCausalLM"),pir=o(" (RoBERTa model)"),_ir=l(),KF=a("li"),sue=a("strong"),uir=o("roformer"),bir=o(" \u2014 "),UV=a("a"),Fir=o("TFRoFormerForCausalLM"),vir=o(" (RoFormer model)"),Tir=l(),ZF=a("li"),lue=a("strong"),Mir=o("transfo-xl"),Eir=o(" \u2014 "),JV=a("a"),Cir=o("TFTransfoXLLMHeadModel"),wir=o(" (Transformer-XL model)"),Air=l(),ev=a("li"),iue=a("strong"),yir=o("xlm"),Lir=o(" \u2014 "),YV=a("a"),xir=o("TFXLMWithLMHeadModel"),kir=o(" (XLM model)"),Sir=l(),ov=a("li"),due=a("strong"),Rir=o("xlnet"),Bir=o(" \u2014 "),KV=a("a"),Pir=o("TFXLNetLMHeadModel"),$ir=o(" (XLNet model)"),Iir=l(),cue=a("p"),qir=o("Examples:"),Nir=l(),f(A0.$$.fragment),NBe=l(),Mc=a("h2"),rv=a("a"),fue=a("span"),f(y0.$$.fragment),jir=l(),mue=a("span"),Dir=o("TFAutoModelForImageClassification"),jBe=l(),Mr=a("div"),f(L0.$$.fragment),Gir=l(),Ec=a("p"),Oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZV=a("a"),Vir=o("from_pretrained()"),Xir=o(" class method or the "),eX=a("a"),zir=o("from_config()"),Qir=o(` class
method.`),Wir=l(),x0=a("p"),Hir=o("This class cannot be instantiated directly using "),gue=a("code"),Uir=o("__init__()"),Jir=o(" (throws an error)."),Yir=l(),_t=a("div"),f(k0.$$.fragment),Kir=l(),hue=a("p"),Zir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),edr=l(),Cc=a("p"),odr=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),rdr=o("not"),tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),adr=o("from_pretrained()"),ndr=o(" to load the model weights."),sdr=l(),_ue=a("p"),ldr=o("Examples:"),idr=l(),f(S0.$$.fragment),ddr=l(),uo=a("div"),f(R0.$$.fragment),cdr=l(),uue=a("p"),fdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mdr=l(),Fn=a("p"),gdr=o("The model class to instantiate is selected based on the "),bue=a("code"),hdr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),_dr=o("pretrained_model_name_or_path"),udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),bdr=o("pretrained_model_name_or_path"),Fdr=o(":"),vdr=l(),B0=a("ul"),tv=a("li"),Tue=a("strong"),Tdr=o("convnext"),Mdr=o(" \u2014 "),rX=a("a"),Edr=o("TFConvNextForImageClassification"),Cdr=o(" (ConvNext model)"),wdr=l(),av=a("li"),Mue=a("strong"),Adr=o("vit"),ydr=o(" \u2014 "),tX=a("a"),Ldr=o("TFViTForImageClassification"),xdr=o(" (ViT model)"),kdr=l(),Eue=a("p"),Sdr=o("Examples:"),Rdr=l(),f(P0.$$.fragment),DBe=l(),wc=a("h2"),nv=a("a"),Cue=a("span"),f($0.$$.fragment),Bdr=l(),wue=a("span"),Pdr=o("TFAutoModelForMaskedLM"),GBe=l(),Er=a("div"),f(I0.$$.fragment),$dr=l(),Ac=a("p"),Idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aX=a("a"),qdr=o("from_pretrained()"),Ndr=o(" class method or the "),nX=a("a"),jdr=o("from_config()"),Ddr=o(` class
method.`),Gdr=l(),q0=a("p"),Odr=o("This class cannot be instantiated directly using "),Aue=a("code"),Vdr=o("__init__()"),Xdr=o(" (throws an error)."),zdr=l(),ut=a("div"),f(N0.$$.fragment),Qdr=l(),yue=a("p"),Wdr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hdr=l(),yc=a("p"),Udr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Jdr=o("not"),Ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" to load the model weights."),ecr=l(),xue=a("p"),ocr=o("Examples:"),rcr=l(),f(j0.$$.fragment),tcr=l(),bo=a("div"),f(D0.$$.fragment),acr=l(),kue=a("p"),ncr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),scr=l(),vn=a("p"),lcr=o("The model class to instantiate is selected based on the "),Sue=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),J=a("ul"),sv=a("li"),Pue=a("strong"),pcr=o("albert"),_cr=o(" \u2014 "),lX=a("a"),ucr=o("TFAlbertForMaskedLM"),bcr=o(" (ALBERT model)"),Fcr=l(),lv=a("li"),$ue=a("strong"),vcr=o("bert"),Tcr=o(" \u2014 "),iX=a("a"),Mcr=o("TFBertForMaskedLM"),Ecr=o(" (BERT model)"),Ccr=l(),iv=a("li"),Iue=a("strong"),wcr=o("camembert"),Acr=o(" \u2014 "),dX=a("a"),ycr=o("TFCamembertForMaskedLM"),Lcr=o(" (CamemBERT model)"),xcr=l(),dv=a("li"),que=a("strong"),kcr=o("convbert"),Scr=o(" \u2014 "),cX=a("a"),Rcr=o("TFConvBertForMaskedLM"),Bcr=o(" (ConvBERT model)"),Pcr=l(),cv=a("li"),Nue=a("strong"),$cr=o("deberta"),Icr=o(" \u2014 "),fX=a("a"),qcr=o("TFDebertaForMaskedLM"),Ncr=o(" (DeBERTa model)"),jcr=l(),fv=a("li"),jue=a("strong"),Dcr=o("deberta-v2"),Gcr=o(" \u2014 "),mX=a("a"),Ocr=o("TFDebertaV2ForMaskedLM"),Vcr=o(" (DeBERTa-v2 model)"),Xcr=l(),mv=a("li"),Due=a("strong"),zcr=o("distilbert"),Qcr=o(" \u2014 "),gX=a("a"),Wcr=o("TFDistilBertForMaskedLM"),Hcr=o(" (DistilBERT model)"),Ucr=l(),gv=a("li"),Gue=a("strong"),Jcr=o("electra"),Ycr=o(" \u2014 "),hX=a("a"),Kcr=o("TFElectraForMaskedLM"),Zcr=o(" (ELECTRA model)"),efr=l(),hv=a("li"),Oue=a("strong"),ofr=o("flaubert"),rfr=o(" \u2014 "),pX=a("a"),tfr=o("TFFlaubertWithLMHeadModel"),afr=o(" (FlauBERT model)"),nfr=l(),pv=a("li"),Vue=a("strong"),sfr=o("funnel"),lfr=o(" \u2014 "),_X=a("a"),ifr=o("TFFunnelForMaskedLM"),dfr=o(" (Funnel Transformer model)"),cfr=l(),_v=a("li"),Xue=a("strong"),ffr=o("layoutlm"),mfr=o(" \u2014 "),uX=a("a"),gfr=o("TFLayoutLMForMaskedLM"),hfr=o(" (LayoutLM model)"),pfr=l(),uv=a("li"),zue=a("strong"),_fr=o("longformer"),ufr=o(" \u2014 "),bX=a("a"),bfr=o("TFLongformerForMaskedLM"),Ffr=o(" (Longformer model)"),vfr=l(),bv=a("li"),Que=a("strong"),Tfr=o("mobilebert"),Mfr=o(" \u2014 "),FX=a("a"),Efr=o("TFMobileBertForMaskedLM"),Cfr=o(" (MobileBERT model)"),wfr=l(),Fv=a("li"),Wue=a("strong"),Afr=o("mpnet"),yfr=o(" \u2014 "),vX=a("a"),Lfr=o("TFMPNetForMaskedLM"),xfr=o(" (MPNet model)"),kfr=l(),vv=a("li"),Hue=a("strong"),Sfr=o("rembert"),Rfr=o(" \u2014 "),TX=a("a"),Bfr=o("TFRemBertForMaskedLM"),Pfr=o(" (RemBERT model)"),$fr=l(),Tv=a("li"),Uue=a("strong"),Ifr=o("roberta"),qfr=o(" \u2014 "),MX=a("a"),Nfr=o("TFRobertaForMaskedLM"),jfr=o(" (RoBERTa model)"),Dfr=l(),Mv=a("li"),Jue=a("strong"),Gfr=o("roformer"),Ofr=o(" \u2014 "),EX=a("a"),Vfr=o("TFRoFormerForMaskedLM"),Xfr=o(" (RoFormer model)"),zfr=l(),Ev=a("li"),Yue=a("strong"),Qfr=o("tapas"),Wfr=o(" \u2014 "),CX=a("a"),Hfr=o("TFTapasForMaskedLM"),Ufr=o(" (TAPAS model)"),Jfr=l(),Cv=a("li"),Kue=a("strong"),Yfr=o("xlm"),Kfr=o(" \u2014 "),wX=a("a"),Zfr=o("TFXLMWithLMHeadModel"),emr=o(" (XLM model)"),omr=l(),wv=a("li"),Zue=a("strong"),rmr=o("xlm-roberta"),tmr=o(" \u2014 "),AX=a("a"),amr=o("TFXLMRobertaForMaskedLM"),nmr=o(" (XLM-RoBERTa model)"),smr=l(),e1e=a("p"),lmr=o("Examples:"),imr=l(),f(G0.$$.fragment),OBe=l(),Lc=a("h2"),Av=a("a"),o1e=a("span"),f(O0.$$.fragment),dmr=l(),r1e=a("span"),cmr=o("TFAutoModelForSeq2SeqLM"),VBe=l(),Cr=a("div"),f(V0.$$.fragment),fmr=l(),xc=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yX=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),LX=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),X0=a("p"),bmr=o("This class cannot be instantiated directly using "),t1e=a("code"),Fmr=o("__init__()"),vmr=o(" (throws an error)."),Tmr=l(),bt=a("div"),f(z0.$$.fragment),Mmr=l(),a1e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cmr=l(),kc=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),kmr=l(),s1e=a("p"),Smr=o("Examples:"),Rmr=l(),f(Q0.$$.fragment),Bmr=l(),Fo=a("div"),f(W0.$$.fragment),Pmr=l(),l1e=a("p"),$mr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Imr=l(),Tn=a("p"),qmr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Nmr=o("model_type"),jmr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(":"),Xmr=l(),be=a("ul"),yv=a("li"),f1e=a("strong"),zmr=o("bart"),Qmr=o(" \u2014 "),kX=a("a"),Wmr=o("TFBartForConditionalGeneration"),Hmr=o(" (BART model)"),Umr=l(),Lv=a("li"),m1e=a("strong"),Jmr=o("blenderbot"),Ymr=o(" \u2014 "),SX=a("a"),Kmr=o("TFBlenderbotForConditionalGeneration"),Zmr=o(" (Blenderbot model)"),egr=l(),xv=a("li"),g1e=a("strong"),ogr=o("blenderbot-small"),rgr=o(" \u2014 "),RX=a("a"),tgr=o("TFBlenderbotSmallForConditionalGeneration"),agr=o(" (BlenderbotSmall model)"),ngr=l(),kv=a("li"),h1e=a("strong"),sgr=o("encoder-decoder"),lgr=o(" \u2014 "),BX=a("a"),igr=o("TFEncoderDecoderModel"),dgr=o(" (Encoder decoder model)"),cgr=l(),Sv=a("li"),p1e=a("strong"),fgr=o("led"),mgr=o(" \u2014 "),PX=a("a"),ggr=o("TFLEDForConditionalGeneration"),hgr=o(" (LED model)"),pgr=l(),Rv=a("li"),_1e=a("strong"),_gr=o("marian"),ugr=o(" \u2014 "),$X=a("a"),bgr=o("TFMarianMTModel"),Fgr=o(" (Marian model)"),vgr=l(),Bv=a("li"),u1e=a("strong"),Tgr=o("mbart"),Mgr=o(" \u2014 "),IX=a("a"),Egr=o("TFMBartForConditionalGeneration"),Cgr=o(" (mBART model)"),wgr=l(),Pv=a("li"),b1e=a("strong"),Agr=o("mt5"),ygr=o(" \u2014 "),qX=a("a"),Lgr=o("TFMT5ForConditionalGeneration"),xgr=o(" (mT5 model)"),kgr=l(),$v=a("li"),F1e=a("strong"),Sgr=o("pegasus"),Rgr=o(" \u2014 "),NX=a("a"),Bgr=o("TFPegasusForConditionalGeneration"),Pgr=o(" (Pegasus model)"),$gr=l(),Iv=a("li"),v1e=a("strong"),Igr=o("t5"),qgr=o(" \u2014 "),jX=a("a"),Ngr=o("TFT5ForConditionalGeneration"),jgr=o(" (T5 model)"),Dgr=l(),T1e=a("p"),Ggr=o("Examples:"),Ogr=l(),f(H0.$$.fragment),XBe=l(),Sc=a("h2"),qv=a("a"),M1e=a("span"),f(U0.$$.fragment),Vgr=l(),E1e=a("span"),Xgr=o("TFAutoModelForSequenceClassification"),zBe=l(),wr=a("div"),f(J0.$$.fragment),zgr=l(),Rc=a("p"),Qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DX=a("a"),Wgr=o("from_pretrained()"),Hgr=o(" class method or the "),GX=a("a"),Ugr=o("from_config()"),Jgr=o(` class
method.`),Ygr=l(),Y0=a("p"),Kgr=o("This class cannot be instantiated directly using "),C1e=a("code"),Zgr=o("__init__()"),ehr=o(" (throws an error)."),ohr=l(),Ft=a("div"),f(K0.$$.fragment),rhr=l(),w1e=a("p"),thr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ahr=l(),Bc=a("p"),nhr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),shr=o("not"),lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),ihr=o("from_pretrained()"),dhr=o(" to load the model weights."),chr=l(),y1e=a("p"),fhr=o("Examples:"),mhr=l(),f(Z0.$$.fragment),ghr=l(),vo=a("div"),f(ey.$$.fragment),hhr=l(),L1e=a("p"),phr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_hr=l(),Mn=a("p"),uhr=o("The model class to instantiate is selected based on the "),x1e=a("code"),bhr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),vhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(":"),Chr=l(),V=a("ul"),Nv=a("li"),R1e=a("strong"),whr=o("albert"),Ahr=o(" \u2014 "),VX=a("a"),yhr=o("TFAlbertForSequenceClassification"),Lhr=o(" (ALBERT model)"),xhr=l(),jv=a("li"),B1e=a("strong"),khr=o("bert"),Shr=o(" \u2014 "),XX=a("a"),Rhr=o("TFBertForSequenceClassification"),Bhr=o(" (BERT model)"),Phr=l(),Dv=a("li"),P1e=a("strong"),$hr=o("camembert"),Ihr=o(" \u2014 "),zX=a("a"),qhr=o("TFCamembertForSequenceClassification"),Nhr=o(" (CamemBERT model)"),jhr=l(),Gv=a("li"),$1e=a("strong"),Dhr=o("convbert"),Ghr=o(" \u2014 "),QX=a("a"),Ohr=o("TFConvBertForSequenceClassification"),Vhr=o(" (ConvBERT model)"),Xhr=l(),Ov=a("li"),I1e=a("strong"),zhr=o("ctrl"),Qhr=o(" \u2014 "),WX=a("a"),Whr=o("TFCTRLForSequenceClassification"),Hhr=o(" (CTRL model)"),Uhr=l(),Vv=a("li"),q1e=a("strong"),Jhr=o("deberta"),Yhr=o(" \u2014 "),HX=a("a"),Khr=o("TFDebertaForSequenceClassification"),Zhr=o(" (DeBERTa model)"),epr=l(),Xv=a("li"),N1e=a("strong"),opr=o("deberta-v2"),rpr=o(" \u2014 "),UX=a("a"),tpr=o("TFDebertaV2ForSequenceClassification"),apr=o(" (DeBERTa-v2 model)"),npr=l(),zv=a("li"),j1e=a("strong"),spr=o("distilbert"),lpr=o(" \u2014 "),JX=a("a"),ipr=o("TFDistilBertForSequenceClassification"),dpr=o(" (DistilBERT model)"),cpr=l(),Qv=a("li"),D1e=a("strong"),fpr=o("electra"),mpr=o(" \u2014 "),YX=a("a"),gpr=o("TFElectraForSequenceClassification"),hpr=o(" (ELECTRA model)"),ppr=l(),Wv=a("li"),G1e=a("strong"),_pr=o("flaubert"),upr=o(" \u2014 "),KX=a("a"),bpr=o("TFFlaubertForSequenceClassification"),Fpr=o(" (FlauBERT model)"),vpr=l(),Hv=a("li"),O1e=a("strong"),Tpr=o("funnel"),Mpr=o(" \u2014 "),ZX=a("a"),Epr=o("TFFunnelForSequenceClassification"),Cpr=o(" (Funnel Transformer model)"),wpr=l(),Uv=a("li"),V1e=a("strong"),Apr=o("gpt2"),ypr=o(" \u2014 "),ez=a("a"),Lpr=o("TFGPT2ForSequenceClassification"),xpr=o(" (OpenAI GPT-2 model)"),kpr=l(),Jv=a("li"),X1e=a("strong"),Spr=o("gptj"),Rpr=o(" \u2014 "),oz=a("a"),Bpr=o("TFGPTJForSequenceClassification"),Ppr=o(" (GPT-J model)"),$pr=l(),Yv=a("li"),z1e=a("strong"),Ipr=o("layoutlm"),qpr=o(" \u2014 "),rz=a("a"),Npr=o("TFLayoutLMForSequenceClassification"),jpr=o(" (LayoutLM model)"),Dpr=l(),Kv=a("li"),Q1e=a("strong"),Gpr=o("longformer"),Opr=o(" \u2014 "),tz=a("a"),Vpr=o("TFLongformerForSequenceClassification"),Xpr=o(" (Longformer model)"),zpr=l(),Zv=a("li"),W1e=a("strong"),Qpr=o("mobilebert"),Wpr=o(" \u2014 "),az=a("a"),Hpr=o("TFMobileBertForSequenceClassification"),Upr=o(" (MobileBERT model)"),Jpr=l(),eT=a("li"),H1e=a("strong"),Ypr=o("mpnet"),Kpr=o(" \u2014 "),nz=a("a"),Zpr=o("TFMPNetForSequenceClassification"),e_r=o(" (MPNet model)"),o_r=l(),oT=a("li"),U1e=a("strong"),r_r=o("openai-gpt"),t_r=o(" \u2014 "),sz=a("a"),a_r=o("TFOpenAIGPTForSequenceClassification"),n_r=o(" (OpenAI GPT model)"),s_r=l(),rT=a("li"),J1e=a("strong"),l_r=o("rembert"),i_r=o(" \u2014 "),lz=a("a"),d_r=o("TFRemBertForSequenceClassification"),c_r=o(" (RemBERT model)"),f_r=l(),tT=a("li"),Y1e=a("strong"),m_r=o("roberta"),g_r=o(" \u2014 "),iz=a("a"),h_r=o("TFRobertaForSequenceClassification"),p_r=o(" (RoBERTa model)"),__r=l(),aT=a("li"),K1e=a("strong"),u_r=o("roformer"),b_r=o(" \u2014 "),dz=a("a"),F_r=o("TFRoFormerForSequenceClassification"),v_r=o(" (RoFormer model)"),T_r=l(),nT=a("li"),Z1e=a("strong"),M_r=o("tapas"),E_r=o(" \u2014 "),cz=a("a"),C_r=o("TFTapasForSequenceClassification"),w_r=o(" (TAPAS model)"),A_r=l(),sT=a("li"),e7e=a("strong"),y_r=o("transfo-xl"),L_r=o(" \u2014 "),fz=a("a"),x_r=o("TFTransfoXLForSequenceClassification"),k_r=o(" (Transformer-XL model)"),S_r=l(),lT=a("li"),o7e=a("strong"),R_r=o("xlm"),B_r=o(" \u2014 "),mz=a("a"),P_r=o("TFXLMForSequenceClassification"),$_r=o(" (XLM model)"),I_r=l(),iT=a("li"),r7e=a("strong"),q_r=o("xlm-roberta"),N_r=o(" \u2014 "),gz=a("a"),j_r=o("TFXLMRobertaForSequenceClassification"),D_r=o(" (XLM-RoBERTa model)"),G_r=l(),dT=a("li"),t7e=a("strong"),O_r=o("xlnet"),V_r=o(" \u2014 "),hz=a("a"),X_r=o("TFXLNetForSequenceClassification"),z_r=o(" (XLNet model)"),Q_r=l(),a7e=a("p"),W_r=o("Examples:"),H_r=l(),f(oy.$$.fragment),QBe=l(),Pc=a("h2"),cT=a("a"),n7e=a("span"),f(ry.$$.fragment),U_r=l(),s7e=a("span"),J_r=o("TFAutoModelForMultipleChoice"),WBe=l(),Ar=a("div"),f(ty.$$.fragment),Y_r=l(),$c=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pz=a("a"),Z_r=o("from_pretrained()"),eur=o(" class method or the "),_z=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),ay=a("p"),aur=o("This class cannot be instantiated directly using "),l7e=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),vt=a("div"),f(ny.$$.fragment),iur=l(),i7e=a("p"),dur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cur=l(),Ic=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),hur=o("from_pretrained()"),pur=o(" to load the model weights."),_ur=l(),c7e=a("p"),uur=o("Examples:"),bur=l(),f(sy.$$.fragment),Fur=l(),To=a("div"),f(ly.$$.fragment),vur=l(),f7e=a("p"),Tur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mur=l(),En=a("p"),Eur=o("The model class to instantiate is selected based on the "),m7e=a("code"),Cur=o("model_type"),wur=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),Aur=o("pretrained_model_name_or_path"),yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(":"),kur=l(),se=a("ul"),fT=a("li"),p7e=a("strong"),Sur=o("albert"),Rur=o(" \u2014 "),bz=a("a"),Bur=o("TFAlbertForMultipleChoice"),Pur=o(" (ALBERT model)"),$ur=l(),mT=a("li"),_7e=a("strong"),Iur=o("bert"),qur=o(" \u2014 "),Fz=a("a"),Nur=o("TFBertForMultipleChoice"),jur=o(" (BERT model)"),Dur=l(),gT=a("li"),u7e=a("strong"),Gur=o("camembert"),Our=o(" \u2014 "),vz=a("a"),Vur=o("TFCamembertForMultipleChoice"),Xur=o(" (CamemBERT model)"),zur=l(),hT=a("li"),b7e=a("strong"),Qur=o("convbert"),Wur=o(" \u2014 "),Tz=a("a"),Hur=o("TFConvBertForMultipleChoice"),Uur=o(" (ConvBERT model)"),Jur=l(),pT=a("li"),F7e=a("strong"),Yur=o("distilbert"),Kur=o(" \u2014 "),Mz=a("a"),Zur=o("TFDistilBertForMultipleChoice"),e1r=o(" (DistilBERT model)"),o1r=l(),_T=a("li"),v7e=a("strong"),r1r=o("electra"),t1r=o(" \u2014 "),Ez=a("a"),a1r=o("TFElectraForMultipleChoice"),n1r=o(" (ELECTRA model)"),s1r=l(),uT=a("li"),T7e=a("strong"),l1r=o("flaubert"),i1r=o(" \u2014 "),Cz=a("a"),d1r=o("TFFlaubertForMultipleChoice"),c1r=o(" (FlauBERT model)"),f1r=l(),bT=a("li"),M7e=a("strong"),m1r=o("funnel"),g1r=o(" \u2014 "),wz=a("a"),h1r=o("TFFunnelForMultipleChoice"),p1r=o(" (Funnel Transformer model)"),_1r=l(),FT=a("li"),E7e=a("strong"),u1r=o("longformer"),b1r=o(" \u2014 "),Az=a("a"),F1r=o("TFLongformerForMultipleChoice"),v1r=o(" (Longformer model)"),T1r=l(),vT=a("li"),C7e=a("strong"),M1r=o("mobilebert"),E1r=o(" \u2014 "),yz=a("a"),C1r=o("TFMobileBertForMultipleChoice"),w1r=o(" (MobileBERT model)"),A1r=l(),TT=a("li"),w7e=a("strong"),y1r=o("mpnet"),L1r=o(" \u2014 "),Lz=a("a"),x1r=o("TFMPNetForMultipleChoice"),k1r=o(" (MPNet model)"),S1r=l(),MT=a("li"),A7e=a("strong"),R1r=o("rembert"),B1r=o(" \u2014 "),xz=a("a"),P1r=o("TFRemBertForMultipleChoice"),$1r=o(" (RemBERT model)"),I1r=l(),ET=a("li"),y7e=a("strong"),q1r=o("roberta"),N1r=o(" \u2014 "),kz=a("a"),j1r=o("TFRobertaForMultipleChoice"),D1r=o(" (RoBERTa model)"),G1r=l(),CT=a("li"),L7e=a("strong"),O1r=o("roformer"),V1r=o(" \u2014 "),Sz=a("a"),X1r=o("TFRoFormerForMultipleChoice"),z1r=o(" (RoFormer model)"),Q1r=l(),wT=a("li"),x7e=a("strong"),W1r=o("xlm"),H1r=o(" \u2014 "),Rz=a("a"),U1r=o("TFXLMForMultipleChoice"),J1r=o(" (XLM model)"),Y1r=l(),AT=a("li"),k7e=a("strong"),K1r=o("xlm-roberta"),Z1r=o(" \u2014 "),Bz=a("a"),e7r=o("TFXLMRobertaForMultipleChoice"),o7r=o(" (XLM-RoBERTa model)"),r7r=l(),yT=a("li"),S7e=a("strong"),t7r=o("xlnet"),a7r=o(" \u2014 "),Pz=a("a"),n7r=o("TFXLNetForMultipleChoice"),s7r=o(" (XLNet model)"),l7r=l(),R7e=a("p"),i7r=o("Examples:"),d7r=l(),f(iy.$$.fragment),HBe=l(),qc=a("h2"),LT=a("a"),B7e=a("span"),f(dy.$$.fragment),c7r=l(),P7e=a("span"),f7r=o("TFAutoModelForTableQuestionAnswering"),UBe=l(),yr=a("div"),f(cy.$$.fragment),m7r=l(),Nc=a("p"),g7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$z=a("a"),h7r=o("from_pretrained()"),p7r=o(" class method or the "),Iz=a("a"),_7r=o("from_config()"),u7r=o(` class
method.`),b7r=l(),fy=a("p"),F7r=o("This class cannot be instantiated directly using "),$7e=a("code"),v7r=o("__init__()"),T7r=o(" (throws an error)."),M7r=l(),Tt=a("div"),f(my.$$.fragment),E7r=l(),I7e=a("p"),C7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w7r=l(),jc=a("p"),A7r=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),y7r=o("not"),L7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),x7r=o("from_pretrained()"),k7r=o(" to load the model weights."),S7r=l(),N7e=a("p"),R7r=o("Examples:"),B7r=l(),f(gy.$$.fragment),P7r=l(),Mo=a("div"),f(hy.$$.fragment),$7r=l(),j7e=a("p"),I7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q7r=l(),Cn=a("p"),N7r=o("The model class to instantiate is selected based on the "),D7e=a("code"),j7r=o("model_type"),D7r=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(":"),z7r=l(),V7e=a("ul"),xT=a("li"),X7e=a("strong"),Q7r=o("tapas"),W7r=o(" \u2014 "),Nz=a("a"),H7r=o("TFTapasForQuestionAnswering"),U7r=o(" (TAPAS model)"),J7r=l(),z7e=a("p"),Y7r=o("Examples:"),K7r=l(),f(py.$$.fragment),JBe=l(),Dc=a("h2"),kT=a("a"),Q7e=a("span"),f(_y.$$.fragment),Z7r=l(),W7e=a("span"),ebr=o("TFAutoModelForTokenClassification"),YBe=l(),Lr=a("div"),f(uy.$$.fragment),obr=l(),Gc=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),Dz=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),by=a("p"),ibr=o("This class cannot be instantiated directly using "),H7e=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),fbr=l(),Mt=a("div"),f(Fy.$$.fragment),mbr=l(),U7e=a("p"),gbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hbr=l(),Oc=a("p"),pbr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),_br=o("not"),ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),bbr=o("from_pretrained()"),Fbr=o(" to load the model weights."),vbr=l(),Y7e=a("p"),Tbr=o("Examples:"),Mbr=l(),f(vy.$$.fragment),Ebr=l(),Eo=a("div"),f(Ty.$$.fragment),Cbr=l(),K7e=a("p"),wbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Abr=l(),wn=a("p"),ybr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),Lbr=o("model_type"),xbr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(":"),Pbr=l(),Y=a("ul"),ST=a("li"),rbe=a("strong"),$br=o("albert"),Ibr=o(" \u2014 "),Oz=a("a"),qbr=o("TFAlbertForTokenClassification"),Nbr=o(" (ALBERT model)"),jbr=l(),RT=a("li"),tbe=a("strong"),Dbr=o("bert"),Gbr=o(" \u2014 "),Vz=a("a"),Obr=o("TFBertForTokenClassification"),Vbr=o(" (BERT model)"),Xbr=l(),BT=a("li"),abe=a("strong"),zbr=o("camembert"),Qbr=o(" \u2014 "),Xz=a("a"),Wbr=o("TFCamembertForTokenClassification"),Hbr=o(" (CamemBERT model)"),Ubr=l(),PT=a("li"),nbe=a("strong"),Jbr=o("convbert"),Ybr=o(" \u2014 "),zz=a("a"),Kbr=o("TFConvBertForTokenClassification"),Zbr=o(" (ConvBERT model)"),e5r=l(),$T=a("li"),sbe=a("strong"),o5r=o("deberta"),r5r=o(" \u2014 "),Qz=a("a"),t5r=o("TFDebertaForTokenClassification"),a5r=o(" (DeBERTa model)"),n5r=l(),IT=a("li"),lbe=a("strong"),s5r=o("deberta-v2"),l5r=o(" \u2014 "),Wz=a("a"),i5r=o("TFDebertaV2ForTokenClassification"),d5r=o(" (DeBERTa-v2 model)"),c5r=l(),qT=a("li"),ibe=a("strong"),f5r=o("distilbert"),m5r=o(" \u2014 "),Hz=a("a"),g5r=o("TFDistilBertForTokenClassification"),h5r=o(" (DistilBERT model)"),p5r=l(),NT=a("li"),dbe=a("strong"),_5r=o("electra"),u5r=o(" \u2014 "),Uz=a("a"),b5r=o("TFElectraForTokenClassification"),F5r=o(" (ELECTRA model)"),v5r=l(),jT=a("li"),cbe=a("strong"),T5r=o("flaubert"),M5r=o(" \u2014 "),Jz=a("a"),E5r=o("TFFlaubertForTokenClassification"),C5r=o(" (FlauBERT model)"),w5r=l(),DT=a("li"),fbe=a("strong"),A5r=o("funnel"),y5r=o(" \u2014 "),Yz=a("a"),L5r=o("TFFunnelForTokenClassification"),x5r=o(" (Funnel Transformer model)"),k5r=l(),GT=a("li"),mbe=a("strong"),S5r=o("layoutlm"),R5r=o(" \u2014 "),Kz=a("a"),B5r=o("TFLayoutLMForTokenClassification"),P5r=o(" (LayoutLM model)"),$5r=l(),OT=a("li"),gbe=a("strong"),I5r=o("longformer"),q5r=o(" \u2014 "),Zz=a("a"),N5r=o("TFLongformerForTokenClassification"),j5r=o(" (Longformer model)"),D5r=l(),VT=a("li"),hbe=a("strong"),G5r=o("mobilebert"),O5r=o(" \u2014 "),eQ=a("a"),V5r=o("TFMobileBertForTokenClassification"),X5r=o(" (MobileBERT model)"),z5r=l(),XT=a("li"),pbe=a("strong"),Q5r=o("mpnet"),W5r=o(" \u2014 "),oQ=a("a"),H5r=o("TFMPNetForTokenClassification"),U5r=o(" (MPNet model)"),J5r=l(),zT=a("li"),_be=a("strong"),Y5r=o("rembert"),K5r=o(" \u2014 "),rQ=a("a"),Z5r=o("TFRemBertForTokenClassification"),e3r=o(" (RemBERT model)"),o3r=l(),QT=a("li"),ube=a("strong"),r3r=o("roberta"),t3r=o(" \u2014 "),tQ=a("a"),a3r=o("TFRobertaForTokenClassification"),n3r=o(" (RoBERTa model)"),s3r=l(),WT=a("li"),bbe=a("strong"),l3r=o("roformer"),i3r=o(" \u2014 "),aQ=a("a"),d3r=o("TFRoFormerForTokenClassification"),c3r=o(" (RoFormer model)"),f3r=l(),HT=a("li"),Fbe=a("strong"),m3r=o("xlm"),g3r=o(" \u2014 "),nQ=a("a"),h3r=o("TFXLMForTokenClassification"),p3r=o(" (XLM model)"),_3r=l(),UT=a("li"),vbe=a("strong"),u3r=o("xlm-roberta"),b3r=o(" \u2014 "),sQ=a("a"),F3r=o("TFXLMRobertaForTokenClassification"),v3r=o(" (XLM-RoBERTa model)"),T3r=l(),JT=a("li"),Tbe=a("strong"),M3r=o("xlnet"),E3r=o(" \u2014 "),lQ=a("a"),C3r=o("TFXLNetForTokenClassification"),w3r=o(" (XLNet model)"),A3r=l(),Mbe=a("p"),y3r=o("Examples:"),L3r=l(),f(My.$$.fragment),KBe=l(),Vc=a("h2"),YT=a("a"),Ebe=a("span"),f(Ey.$$.fragment),x3r=l(),Cbe=a("span"),k3r=o("TFAutoModelForQuestionAnswering"),ZBe=l(),xr=a("div"),f(Cy.$$.fragment),S3r=l(),Xc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iQ=a("a"),B3r=o("from_pretrained()"),P3r=o(" class method or the "),dQ=a("a"),$3r=o("from_config()"),I3r=o(` class
method.`),q3r=l(),wy=a("p"),N3r=o("This class cannot be instantiated directly using "),wbe=a("code"),j3r=o("__init__()"),D3r=o(" (throws an error)."),G3r=l(),Et=a("div"),f(Ay.$$.fragment),O3r=l(),Abe=a("p"),V3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X3r=l(),zc=a("p"),z3r=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),Q3r=o("not"),W3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),H3r=o("from_pretrained()"),U3r=o(" to load the model weights."),J3r=l(),Lbe=a("p"),Y3r=o("Examples:"),K3r=l(),f(yy.$$.fragment),Z3r=l(),Co=a("div"),f(Ly.$$.fragment),e2r=l(),xbe=a("p"),o2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r2r=l(),An=a("p"),t2r=o("The model class to instantiate is selected based on the "),kbe=a("code"),a2r=o("model_type"),n2r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(":"),c2r=l(),K=a("ul"),KT=a("li"),Bbe=a("strong"),f2r=o("albert"),m2r=o(" \u2014 "),fQ=a("a"),g2r=o("TFAlbertForQuestionAnswering"),h2r=o(" (ALBERT model)"),p2r=l(),ZT=a("li"),Pbe=a("strong"),_2r=o("bert"),u2r=o(" \u2014 "),mQ=a("a"),b2r=o("TFBertForQuestionAnswering"),F2r=o(" (BERT model)"),v2r=l(),eM=a("li"),$be=a("strong"),T2r=o("camembert"),M2r=o(" \u2014 "),gQ=a("a"),E2r=o("TFCamembertForQuestionAnswering"),C2r=o(" (CamemBERT model)"),w2r=l(),oM=a("li"),Ibe=a("strong"),A2r=o("convbert"),y2r=o(" \u2014 "),hQ=a("a"),L2r=o("TFConvBertForQuestionAnswering"),x2r=o(" (ConvBERT model)"),k2r=l(),rM=a("li"),qbe=a("strong"),S2r=o("deberta"),R2r=o(" \u2014 "),pQ=a("a"),B2r=o("TFDebertaForQuestionAnswering"),P2r=o(" (DeBERTa model)"),$2r=l(),tM=a("li"),Nbe=a("strong"),I2r=o("deberta-v2"),q2r=o(" \u2014 "),_Q=a("a"),N2r=o("TFDebertaV2ForQuestionAnswering"),j2r=o(" (DeBERTa-v2 model)"),D2r=l(),aM=a("li"),jbe=a("strong"),G2r=o("distilbert"),O2r=o(" \u2014 "),uQ=a("a"),V2r=o("TFDistilBertForQuestionAnswering"),X2r=o(" (DistilBERT model)"),z2r=l(),nM=a("li"),Dbe=a("strong"),Q2r=o("electra"),W2r=o(" \u2014 "),bQ=a("a"),H2r=o("TFElectraForQuestionAnswering"),U2r=o(" (ELECTRA model)"),J2r=l(),sM=a("li"),Gbe=a("strong"),Y2r=o("flaubert"),K2r=o(" \u2014 "),FQ=a("a"),Z2r=o("TFFlaubertForQuestionAnsweringSimple"),eFr=o(" (FlauBERT model)"),oFr=l(),lM=a("li"),Obe=a("strong"),rFr=o("funnel"),tFr=o(" \u2014 "),vQ=a("a"),aFr=o("TFFunnelForQuestionAnswering"),nFr=o(" (Funnel Transformer model)"),sFr=l(),iM=a("li"),Vbe=a("strong"),lFr=o("gptj"),iFr=o(" \u2014 "),TQ=a("a"),dFr=o("TFGPTJForQuestionAnswering"),cFr=o(" (GPT-J model)"),fFr=l(),dM=a("li"),Xbe=a("strong"),mFr=o("longformer"),gFr=o(" \u2014 "),MQ=a("a"),hFr=o("TFLongformerForQuestionAnswering"),pFr=o(" (Longformer model)"),_Fr=l(),cM=a("li"),zbe=a("strong"),uFr=o("mobilebert"),bFr=o(" \u2014 "),EQ=a("a"),FFr=o("TFMobileBertForQuestionAnswering"),vFr=o(" (MobileBERT model)"),TFr=l(),fM=a("li"),Qbe=a("strong"),MFr=o("mpnet"),EFr=o(" \u2014 "),CQ=a("a"),CFr=o("TFMPNetForQuestionAnswering"),wFr=o(" (MPNet model)"),AFr=l(),mM=a("li"),Wbe=a("strong"),yFr=o("rembert"),LFr=o(" \u2014 "),wQ=a("a"),xFr=o("TFRemBertForQuestionAnswering"),kFr=o(" (RemBERT model)"),SFr=l(),gM=a("li"),Hbe=a("strong"),RFr=o("roberta"),BFr=o(" \u2014 "),AQ=a("a"),PFr=o("TFRobertaForQuestionAnswering"),$Fr=o(" (RoBERTa model)"),IFr=l(),hM=a("li"),Ube=a("strong"),qFr=o("roformer"),NFr=o(" \u2014 "),yQ=a("a"),jFr=o("TFRoFormerForQuestionAnswering"),DFr=o(" (RoFormer model)"),GFr=l(),pM=a("li"),Jbe=a("strong"),OFr=o("xlm"),VFr=o(" \u2014 "),LQ=a("a"),XFr=o("TFXLMForQuestionAnsweringSimple"),zFr=o(" (XLM model)"),QFr=l(),_M=a("li"),Ybe=a("strong"),WFr=o("xlm-roberta"),HFr=o(" \u2014 "),xQ=a("a"),UFr=o("TFXLMRobertaForQuestionAnswering"),JFr=o(" (XLM-RoBERTa model)"),YFr=l(),uM=a("li"),Kbe=a("strong"),KFr=o("xlnet"),ZFr=o(" \u2014 "),kQ=a("a"),evr=o("TFXLNetForQuestionAnsweringSimple"),ovr=o(" (XLNet model)"),rvr=l(),Zbe=a("p"),tvr=o("Examples:"),avr=l(),f(xy.$$.fragment),ePe=l(),Qc=a("h2"),bM=a("a"),e5e=a("span"),f(ky.$$.fragment),nvr=l(),o5e=a("span"),svr=o("TFAutoModelForVision2Seq"),oPe=l(),kr=a("div"),f(Sy.$$.fragment),lvr=l(),Wc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SQ=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),RQ=a("a"),fvr=o("from_config()"),mvr=o(` class
method.`),gvr=l(),Ry=a("p"),hvr=o("This class cannot be instantiated directly using "),r5e=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),Ct=a("div"),f(By.$$.fragment),bvr=l(),t5e=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vvr=l(),Hc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),n5e=a("p"),yvr=o("Examples:"),Lvr=l(),f(Py.$$.fragment),xvr=l(),wo=a("div"),f($y.$$.fragment),kvr=l(),s5e=a("p"),Svr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rvr=l(),yn=a("p"),Bvr=o("The model class to instantiate is selected based on the "),l5e=a("code"),Pvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),Ivr=o("pretrained_model_name_or_path"),qvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),Nvr=o("pretrained_model_name_or_path"),jvr=o(":"),Dvr=l(),c5e=a("ul"),FM=a("li"),f5e=a("strong"),Gvr=o("vision-encoder-decoder"),Ovr=o(" \u2014 "),PQ=a("a"),Vvr=o("TFVisionEncoderDecoderModel"),Xvr=o(" (Vision Encoder decoder model)"),zvr=l(),m5e=a("p"),Qvr=o("Examples:"),Wvr=l(),f(Iy.$$.fragment),rPe=l(),Uc=a("h2"),vM=a("a"),g5e=a("span"),f(qy.$$.fragment),Hvr=l(),h5e=a("span"),Uvr=o("TFAutoModelForSpeechSeq2Seq"),tPe=l(),Sr=a("div"),f(Ny.$$.fragment),Jvr=l(),Jc=a("p"),Yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$Q=a("a"),Kvr=o("from_pretrained()"),Zvr=o(" class method or the "),IQ=a("a"),eTr=o("from_config()"),oTr=o(` class
method.`),rTr=l(),jy=a("p"),tTr=o("This class cannot be instantiated directly using "),p5e=a("code"),aTr=o("__init__()"),nTr=o(" (throws an error)."),sTr=l(),wt=a("div"),f(Dy.$$.fragment),lTr=l(),_5e=a("p"),iTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dTr=l(),Yc=a("p"),cTr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),fTr=o("not"),mTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),gTr=o("from_pretrained()"),hTr=o(" to load the model weights."),pTr=l(),b5e=a("p"),_Tr=o("Examples:"),uTr=l(),f(Gy.$$.fragment),bTr=l(),Ao=a("div"),f(Oy.$$.fragment),FTr=l(),F5e=a("p"),vTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TTr=l(),Ln=a("p"),MTr=o("The model class to instantiate is selected based on the "),v5e=a("code"),ETr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(":"),xTr=l(),E5e=a("ul"),TM=a("li"),C5e=a("strong"),kTr=o("speech_to_text"),STr=o(" \u2014 "),NQ=a("a"),RTr=o("TFSpeech2TextForConditionalGeneration"),BTr=o(" (Speech2Text model)"),PTr=l(),w5e=a("p"),$Tr=o("Examples:"),ITr=l(),f(Vy.$$.fragment),aPe=l(),Kc=a("h2"),MM=a("a"),A5e=a("span"),f(Xy.$$.fragment),qTr=l(),y5e=a("span"),NTr=o("FlaxAutoModel"),nPe=l(),Rr=a("div"),f(zy.$$.fragment),jTr=l(),Zc=a("p"),DTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jQ=a("a"),GTr=o("from_pretrained()"),OTr=o(" class method or the "),DQ=a("a"),VTr=o("from_config()"),XTr=o(` class
method.`),zTr=l(),Qy=a("p"),QTr=o("This class cannot be instantiated directly using "),L5e=a("code"),WTr=o("__init__()"),HTr=o(" (throws an error)."),UTr=l(),At=a("div"),f(Wy.$$.fragment),JTr=l(),x5e=a("p"),YTr=o("Instantiates one of the base model classes of the library from a configuration."),KTr=l(),ef=a("p"),ZTr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),eMr=o("not"),oMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),rMr=o("from_pretrained()"),tMr=o(" to load the model weights."),aMr=l(),S5e=a("p"),nMr=o("Examples:"),sMr=l(),f(Hy.$$.fragment),lMr=l(),yo=a("div"),f(Uy.$$.fragment),iMr=l(),R5e=a("p"),dMr=o("Instantiate one of the base model classes of the library from a pretrained model."),cMr=l(),xn=a("p"),fMr=o("The model class to instantiate is selected based on the "),B5e=a("code"),mMr=o("model_type"),gMr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),hMr=o("pretrained_model_name_or_path"),pMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),_Mr=o("pretrained_model_name_or_path"),uMr=o(":"),bMr=l(),z=a("ul"),EM=a("li"),I5e=a("strong"),FMr=o("albert"),vMr=o(" \u2014 "),OQ=a("a"),TMr=o("FlaxAlbertModel"),MMr=o(" (ALBERT model)"),EMr=l(),CM=a("li"),q5e=a("strong"),CMr=o("bart"),wMr=o(" \u2014 "),VQ=a("a"),AMr=o("FlaxBartModel"),yMr=o(" (BART model)"),LMr=l(),wM=a("li"),N5e=a("strong"),xMr=o("beit"),kMr=o(" \u2014 "),XQ=a("a"),SMr=o("FlaxBeitModel"),RMr=o(" (BEiT model)"),BMr=l(),AM=a("li"),j5e=a("strong"),PMr=o("bert"),$Mr=o(" \u2014 "),zQ=a("a"),IMr=o("FlaxBertModel"),qMr=o(" (BERT model)"),NMr=l(),yM=a("li"),D5e=a("strong"),jMr=o("big_bird"),DMr=o(" \u2014 "),QQ=a("a"),GMr=o("FlaxBigBirdModel"),OMr=o(" (BigBird model)"),VMr=l(),LM=a("li"),G5e=a("strong"),XMr=o("blenderbot"),zMr=o(" \u2014 "),WQ=a("a"),QMr=o("FlaxBlenderbotModel"),WMr=o(" (Blenderbot model)"),HMr=l(),xM=a("li"),O5e=a("strong"),UMr=o("blenderbot-small"),JMr=o(" \u2014 "),HQ=a("a"),YMr=o("FlaxBlenderbotSmallModel"),KMr=o(" (BlenderbotSmall model)"),ZMr=l(),kM=a("li"),V5e=a("strong"),e4r=o("clip"),o4r=o(" \u2014 "),UQ=a("a"),r4r=o("FlaxCLIPModel"),t4r=o(" (CLIP model)"),a4r=l(),SM=a("li"),X5e=a("strong"),n4r=o("distilbert"),s4r=o(" \u2014 "),JQ=a("a"),l4r=o("FlaxDistilBertModel"),i4r=o(" (DistilBERT model)"),d4r=l(),RM=a("li"),z5e=a("strong"),c4r=o("electra"),f4r=o(" \u2014 "),YQ=a("a"),m4r=o("FlaxElectraModel"),g4r=o(" (ELECTRA model)"),h4r=l(),BM=a("li"),Q5e=a("strong"),p4r=o("gpt2"),_4r=o(" \u2014 "),KQ=a("a"),u4r=o("FlaxGPT2Model"),b4r=o(" (OpenAI GPT-2 model)"),F4r=l(),PM=a("li"),W5e=a("strong"),v4r=o("gpt_neo"),T4r=o(" \u2014 "),ZQ=a("a"),M4r=o("FlaxGPTNeoModel"),E4r=o(" (GPT Neo model)"),C4r=l(),$M=a("li"),H5e=a("strong"),w4r=o("gptj"),A4r=o(" \u2014 "),eW=a("a"),y4r=o("FlaxGPTJModel"),L4r=o(" (GPT-J model)"),x4r=l(),IM=a("li"),U5e=a("strong"),k4r=o("marian"),S4r=o(" \u2014 "),oW=a("a"),R4r=o("FlaxMarianModel"),B4r=o(" (Marian model)"),P4r=l(),qM=a("li"),J5e=a("strong"),$4r=o("mbart"),I4r=o(" \u2014 "),rW=a("a"),q4r=o("FlaxMBartModel"),N4r=o(" (mBART model)"),j4r=l(),NM=a("li"),Y5e=a("strong"),D4r=o("mt5"),G4r=o(" \u2014 "),tW=a("a"),O4r=o("FlaxMT5Model"),V4r=o(" (mT5 model)"),X4r=l(),jM=a("li"),K5e=a("strong"),z4r=o("pegasus"),Q4r=o(" \u2014 "),aW=a("a"),W4r=o("FlaxPegasusModel"),H4r=o(" (Pegasus model)"),U4r=l(),DM=a("li"),Z5e=a("strong"),J4r=o("roberta"),Y4r=o(" \u2014 "),nW=a("a"),K4r=o("FlaxRobertaModel"),Z4r=o(" (RoBERTa model)"),eEr=l(),GM=a("li"),e3e=a("strong"),oEr=o("roformer"),rEr=o(" \u2014 "),sW=a("a"),tEr=o("FlaxRoFormerModel"),aEr=o(" (RoFormer model)"),nEr=l(),OM=a("li"),o3e=a("strong"),sEr=o("t5"),lEr=o(" \u2014 "),lW=a("a"),iEr=o("FlaxT5Model"),dEr=o(" (T5 model)"),cEr=l(),VM=a("li"),r3e=a("strong"),fEr=o("vision-text-dual-encoder"),mEr=o(" \u2014 "),iW=a("a"),gEr=o("FlaxVisionTextDualEncoderModel"),hEr=o(" (VisionTextDualEncoder model)"),pEr=l(),XM=a("li"),t3e=a("strong"),_Er=o("vit"),uEr=o(" \u2014 "),dW=a("a"),bEr=o("FlaxViTModel"),FEr=o(" (ViT model)"),vEr=l(),zM=a("li"),a3e=a("strong"),TEr=o("wav2vec2"),MEr=o(" \u2014 "),cW=a("a"),EEr=o("FlaxWav2Vec2Model"),CEr=o(" (Wav2Vec2 model)"),wEr=l(),QM=a("li"),n3e=a("strong"),AEr=o("xglm"),yEr=o(" \u2014 "),fW=a("a"),LEr=o("FlaxXGLMModel"),xEr=o(" (XGLM model)"),kEr=l(),WM=a("li"),s3e=a("strong"),SEr=o("xlm-roberta"),REr=o(" \u2014 "),mW=a("a"),BEr=o("FlaxXLMRobertaModel"),PEr=o(" (XLM-RoBERTa model)"),$Er=l(),l3e=a("p"),IEr=o("Examples:"),qEr=l(),f(Jy.$$.fragment),sPe=l(),of=a("h2"),HM=a("a"),i3e=a("span"),f(Yy.$$.fragment),NEr=l(),d3e=a("span"),jEr=o("FlaxAutoModelForCausalLM"),lPe=l(),Br=a("div"),f(Ky.$$.fragment),DEr=l(),rf=a("p"),GEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gW=a("a"),OEr=o("from_pretrained()"),VEr=o(" class method or the "),hW=a("a"),XEr=o("from_config()"),zEr=o(` class
method.`),QEr=l(),Zy=a("p"),WEr=o("This class cannot be instantiated directly using "),c3e=a("code"),HEr=o("__init__()"),UEr=o(" (throws an error)."),JEr=l(),yt=a("div"),f(eL.$$.fragment),YEr=l(),f3e=a("p"),KEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZEr=l(),tf=a("p"),eCr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),oCr=o("not"),rCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),tCr=o("from_pretrained()"),aCr=o(" to load the model weights."),nCr=l(),g3e=a("p"),sCr=o("Examples:"),lCr=l(),f(oL.$$.fragment),iCr=l(),Lo=a("div"),f(rL.$$.fragment),dCr=l(),h3e=a("p"),cCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fCr=l(),kn=a("p"),mCr=o("The model class to instantiate is selected based on the "),p3e=a("code"),gCr=o("model_type"),hCr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),uCr=o("pretrained_model_name_or_path"),bCr=o(":"),FCr=l(),ca=a("ul"),UM=a("li"),b3e=a("strong"),vCr=o("bart"),TCr=o(" \u2014 "),_W=a("a"),MCr=o("FlaxBartForCausalLM"),ECr=o(" (BART model)"),CCr=l(),JM=a("li"),F3e=a("strong"),wCr=o("gpt2"),ACr=o(" \u2014 "),uW=a("a"),yCr=o("FlaxGPT2LMHeadModel"),LCr=o(" (OpenAI GPT-2 model)"),xCr=l(),YM=a("li"),v3e=a("strong"),kCr=o("gpt_neo"),SCr=o(" \u2014 "),bW=a("a"),RCr=o("FlaxGPTNeoForCausalLM"),BCr=o(" (GPT Neo model)"),PCr=l(),KM=a("li"),T3e=a("strong"),$Cr=o("gptj"),ICr=o(" \u2014 "),FW=a("a"),qCr=o("FlaxGPTJForCausalLM"),NCr=o(" (GPT-J model)"),jCr=l(),ZM=a("li"),M3e=a("strong"),DCr=o("xglm"),GCr=o(" \u2014 "),vW=a("a"),OCr=o("FlaxXGLMForCausalLM"),VCr=o(" (XGLM model)"),XCr=l(),E3e=a("p"),zCr=o("Examples:"),QCr=l(),f(tL.$$.fragment),iPe=l(),af=a("h2"),e4=a("a"),C3e=a("span"),f(aL.$$.fragment),WCr=l(),w3e=a("span"),HCr=o("FlaxAutoModelForPreTraining"),dPe=l(),Pr=a("div"),f(nL.$$.fragment),UCr=l(),nf=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=a("a"),YCr=o("from_pretrained()"),KCr=o(" class method or the "),MW=a("a"),ZCr=o("from_config()"),ewr=o(` class
method.`),owr=l(),sL=a("p"),rwr=o("This class cannot be instantiated directly using "),A3e=a("code"),twr=o("__init__()"),awr=o(" (throws an error)."),nwr=l(),Lt=a("div"),f(lL.$$.fragment),swr=l(),y3e=a("p"),lwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iwr=l(),sf=a("p"),dwr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),cwr=o("not"),fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),mwr=o("from_pretrained()"),gwr=o(" to load the model weights."),hwr=l(),x3e=a("p"),pwr=o("Examples:"),_wr=l(),f(iL.$$.fragment),uwr=l(),xo=a("div"),f(dL.$$.fragment),bwr=l(),k3e=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vwr=l(),Sn=a("p"),Twr=o("The model class to instantiate is selected based on the "),S3e=a("code"),Mwr=o("model_type"),Ewr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),Cwr=o("pretrained_model_name_or_path"),wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),Awr=o("pretrained_model_name_or_path"),ywr=o(":"),Lwr=l(),me=a("ul"),o4=a("li"),P3e=a("strong"),xwr=o("albert"),kwr=o(" \u2014 "),CW=a("a"),Swr=o("FlaxAlbertForPreTraining"),Rwr=o(" (ALBERT model)"),Bwr=l(),r4=a("li"),$3e=a("strong"),Pwr=o("bart"),$wr=o(" \u2014 "),wW=a("a"),Iwr=o("FlaxBartForConditionalGeneration"),qwr=o(" (BART model)"),Nwr=l(),t4=a("li"),I3e=a("strong"),jwr=o("bert"),Dwr=o(" \u2014 "),AW=a("a"),Gwr=o("FlaxBertForPreTraining"),Owr=o(" (BERT model)"),Vwr=l(),a4=a("li"),q3e=a("strong"),Xwr=o("big_bird"),zwr=o(" \u2014 "),yW=a("a"),Qwr=o("FlaxBigBirdForPreTraining"),Wwr=o(" (BigBird model)"),Hwr=l(),n4=a("li"),N3e=a("strong"),Uwr=o("electra"),Jwr=o(" \u2014 "),LW=a("a"),Ywr=o("FlaxElectraForPreTraining"),Kwr=o(" (ELECTRA model)"),Zwr=l(),s4=a("li"),j3e=a("strong"),eAr=o("mbart"),oAr=o(" \u2014 "),xW=a("a"),rAr=o("FlaxMBartForConditionalGeneration"),tAr=o(" (mBART model)"),aAr=l(),l4=a("li"),D3e=a("strong"),nAr=o("mt5"),sAr=o(" \u2014 "),kW=a("a"),lAr=o("FlaxMT5ForConditionalGeneration"),iAr=o(" (mT5 model)"),dAr=l(),i4=a("li"),G3e=a("strong"),cAr=o("roberta"),fAr=o(" \u2014 "),SW=a("a"),mAr=o("FlaxRobertaForMaskedLM"),gAr=o(" (RoBERTa model)"),hAr=l(),d4=a("li"),O3e=a("strong"),pAr=o("roformer"),_Ar=o(" \u2014 "),RW=a("a"),uAr=o("FlaxRoFormerForMaskedLM"),bAr=o(" (RoFormer model)"),FAr=l(),c4=a("li"),V3e=a("strong"),vAr=o("t5"),TAr=o(" \u2014 "),BW=a("a"),MAr=o("FlaxT5ForConditionalGeneration"),EAr=o(" (T5 model)"),CAr=l(),f4=a("li"),X3e=a("strong"),wAr=o("wav2vec2"),AAr=o(" \u2014 "),PW=a("a"),yAr=o("FlaxWav2Vec2ForPreTraining"),LAr=o(" (Wav2Vec2 model)"),xAr=l(),m4=a("li"),z3e=a("strong"),kAr=o("xlm-roberta"),SAr=o(" \u2014 "),$W=a("a"),RAr=o("FlaxXLMRobertaForMaskedLM"),BAr=o(" (XLM-RoBERTa model)"),PAr=l(),Q3e=a("p"),$Ar=o("Examples:"),IAr=l(),f(cL.$$.fragment),cPe=l(),lf=a("h2"),g4=a("a"),W3e=a("span"),f(fL.$$.fragment),qAr=l(),H3e=a("span"),NAr=o("FlaxAutoModelForMaskedLM"),fPe=l(),$r=a("div"),f(mL.$$.fragment),jAr=l(),df=a("p"),DAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IW=a("a"),GAr=o("from_pretrained()"),OAr=o(" class method or the "),qW=a("a"),VAr=o("from_config()"),XAr=o(` class
method.`),zAr=l(),gL=a("p"),QAr=o("This class cannot be instantiated directly using "),U3e=a("code"),WAr=o("__init__()"),HAr=o(" (throws an error)."),UAr=l(),xt=a("div"),f(hL.$$.fragment),JAr=l(),J3e=a("p"),YAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KAr=l(),cf=a("p"),ZAr=o(`Note:
Loading a model from its configuration file does `),Y3e=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),K3e=a("p"),n6r=o("Examples:"),s6r=l(),f(pL.$$.fragment),l6r=l(),ko=a("div"),f(_L.$$.fragment),i6r=l(),Z3e=a("p"),d6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c6r=l(),Rn=a("p"),f6r=o("The model class to instantiate is selected based on the "),e2e=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),Fe=a("ul"),h4=a("li"),t2e=a("strong"),F6r=o("albert"),v6r=o(" \u2014 "),jW=a("a"),T6r=o("FlaxAlbertForMaskedLM"),M6r=o(" (ALBERT model)"),E6r=l(),p4=a("li"),a2e=a("strong"),C6r=o("bart"),w6r=o(" \u2014 "),DW=a("a"),A6r=o("FlaxBartForConditionalGeneration"),y6r=o(" (BART model)"),L6r=l(),_4=a("li"),n2e=a("strong"),x6r=o("bert"),k6r=o(" \u2014 "),GW=a("a"),S6r=o("FlaxBertForMaskedLM"),R6r=o(" (BERT model)"),B6r=l(),u4=a("li"),s2e=a("strong"),P6r=o("big_bird"),$6r=o(" \u2014 "),OW=a("a"),I6r=o("FlaxBigBirdForMaskedLM"),q6r=o(" (BigBird model)"),N6r=l(),b4=a("li"),l2e=a("strong"),j6r=o("distilbert"),D6r=o(" \u2014 "),VW=a("a"),G6r=o("FlaxDistilBertForMaskedLM"),O6r=o(" (DistilBERT model)"),V6r=l(),F4=a("li"),i2e=a("strong"),X6r=o("electra"),z6r=o(" \u2014 "),XW=a("a"),Q6r=o("FlaxElectraForMaskedLM"),W6r=o(" (ELECTRA model)"),H6r=l(),v4=a("li"),d2e=a("strong"),U6r=o("mbart"),J6r=o(" \u2014 "),zW=a("a"),Y6r=o("FlaxMBartForConditionalGeneration"),K6r=o(" (mBART model)"),Z6r=l(),T4=a("li"),c2e=a("strong"),e0r=o("roberta"),o0r=o(" \u2014 "),QW=a("a"),r0r=o("FlaxRobertaForMaskedLM"),t0r=o(" (RoBERTa model)"),a0r=l(),M4=a("li"),f2e=a("strong"),n0r=o("roformer"),s0r=o(" \u2014 "),WW=a("a"),l0r=o("FlaxRoFormerForMaskedLM"),i0r=o(" (RoFormer model)"),d0r=l(),E4=a("li"),m2e=a("strong"),c0r=o("xlm-roberta"),f0r=o(" \u2014 "),HW=a("a"),m0r=o("FlaxXLMRobertaForMaskedLM"),g0r=o(" (XLM-RoBERTa model)"),h0r=l(),g2e=a("p"),p0r=o("Examples:"),_0r=l(),f(uL.$$.fragment),mPe=l(),ff=a("h2"),C4=a("a"),h2e=a("span"),f(bL.$$.fragment),u0r=l(),p2e=a("span"),b0r=o("FlaxAutoModelForSeq2SeqLM"),gPe=l(),Ir=a("div"),f(FL.$$.fragment),F0r=l(),mf=a("p"),v0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UW=a("a"),T0r=o("from_pretrained()"),M0r=o(" class method or the "),JW=a("a"),E0r=o("from_config()"),C0r=o(` class
method.`),w0r=l(),vL=a("p"),A0r=o("This class cannot be instantiated directly using "),_2e=a("code"),y0r=o("__init__()"),L0r=o(" (throws an error)."),x0r=l(),kt=a("div"),f(TL.$$.fragment),k0r=l(),u2e=a("p"),S0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R0r=l(),gf=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),P0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),I0r=o("from_pretrained()"),q0r=o(" to load the model weights."),N0r=l(),F2e=a("p"),j0r=o("Examples:"),D0r=l(),f(ML.$$.fragment),G0r=l(),So=a("div"),f(EL.$$.fragment),O0r=l(),v2e=a("p"),V0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X0r=l(),Bn=a("p"),z0r=o("The model class to instantiate is selected based on the "),T2e=a("code"),Q0r=o("model_type"),W0r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),Ee=a("ul"),w4=a("li"),C2e=a("strong"),Z0r=o("bart"),eyr=o(" \u2014 "),KW=a("a"),oyr=o("FlaxBartForConditionalGeneration"),ryr=o(" (BART model)"),tyr=l(),A4=a("li"),w2e=a("strong"),ayr=o("blenderbot"),nyr=o(" \u2014 "),ZW=a("a"),syr=o("FlaxBlenderbotForConditionalGeneration"),lyr=o(" (Blenderbot model)"),iyr=l(),y4=a("li"),A2e=a("strong"),dyr=o("blenderbot-small"),cyr=o(" \u2014 "),eH=a("a"),fyr=o("FlaxBlenderbotSmallForConditionalGeneration"),myr=o(" (BlenderbotSmall model)"),gyr=l(),L4=a("li"),y2e=a("strong"),hyr=o("encoder-decoder"),pyr=o(" \u2014 "),oH=a("a"),_yr=o("FlaxEncoderDecoderModel"),uyr=o(" (Encoder decoder model)"),byr=l(),x4=a("li"),L2e=a("strong"),Fyr=o("marian"),vyr=o(" \u2014 "),rH=a("a"),Tyr=o("FlaxMarianMTModel"),Myr=o(" (Marian model)"),Eyr=l(),k4=a("li"),x2e=a("strong"),Cyr=o("mbart"),wyr=o(" \u2014 "),tH=a("a"),Ayr=o("FlaxMBartForConditionalGeneration"),yyr=o(" (mBART model)"),Lyr=l(),S4=a("li"),k2e=a("strong"),xyr=o("mt5"),kyr=o(" \u2014 "),aH=a("a"),Syr=o("FlaxMT5ForConditionalGeneration"),Ryr=o(" (mT5 model)"),Byr=l(),R4=a("li"),S2e=a("strong"),Pyr=o("pegasus"),$yr=o(" \u2014 "),nH=a("a"),Iyr=o("FlaxPegasusForConditionalGeneration"),qyr=o(" (Pegasus model)"),Nyr=l(),B4=a("li"),R2e=a("strong"),jyr=o("t5"),Dyr=o(" \u2014 "),sH=a("a"),Gyr=o("FlaxT5ForConditionalGeneration"),Oyr=o(" (T5 model)"),Vyr=l(),B2e=a("p"),Xyr=o("Examples:"),zyr=l(),f(CL.$$.fragment),hPe=l(),hf=a("h2"),P4=a("a"),P2e=a("span"),f(wL.$$.fragment),Qyr=l(),$2e=a("span"),Wyr=o("FlaxAutoModelForSequenceClassification"),pPe=l(),qr=a("div"),f(AL.$$.fragment),Hyr=l(),pf=a("p"),Uyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lH=a("a"),Jyr=o("from_pretrained()"),Yyr=o(" class method or the "),iH=a("a"),Kyr=o("from_config()"),Zyr=o(` class
method.`),eLr=l(),yL=a("p"),oLr=o("This class cannot be instantiated directly using "),I2e=a("code"),rLr=o("__init__()"),tLr=o(" (throws an error)."),aLr=l(),St=a("div"),f(LL.$$.fragment),nLr=l(),q2e=a("p"),sLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lLr=l(),_f=a("p"),iLr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),dLr=o("not"),cLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),fLr=o("from_pretrained()"),mLr=o(" to load the model weights."),gLr=l(),j2e=a("p"),hLr=o("Examples:"),pLr=l(),f(xL.$$.fragment),_Lr=l(),Ro=a("div"),f(kL.$$.fragment),uLr=l(),D2e=a("p"),bLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FLr=l(),Pn=a("p"),vLr=o("The model class to instantiate is selected based on the "),G2e=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),ve=a("ul"),$4=a("li"),X2e=a("strong"),LLr=o("albert"),xLr=o(" \u2014 "),cH=a("a"),kLr=o("FlaxAlbertForSequenceClassification"),SLr=o(" (ALBERT model)"),RLr=l(),I4=a("li"),z2e=a("strong"),BLr=o("bart"),PLr=o(" \u2014 "),fH=a("a"),$Lr=o("FlaxBartForSequenceClassification"),ILr=o(" (BART model)"),qLr=l(),q4=a("li"),Q2e=a("strong"),NLr=o("bert"),jLr=o(" \u2014 "),mH=a("a"),DLr=o("FlaxBertForSequenceClassification"),GLr=o(" (BERT model)"),OLr=l(),N4=a("li"),W2e=a("strong"),VLr=o("big_bird"),XLr=o(" \u2014 "),gH=a("a"),zLr=o("FlaxBigBirdForSequenceClassification"),QLr=o(" (BigBird model)"),WLr=l(),j4=a("li"),H2e=a("strong"),HLr=o("distilbert"),ULr=o(" \u2014 "),hH=a("a"),JLr=o("FlaxDistilBertForSequenceClassification"),YLr=o(" (DistilBERT model)"),KLr=l(),D4=a("li"),U2e=a("strong"),ZLr=o("electra"),e8r=o(" \u2014 "),pH=a("a"),o8r=o("FlaxElectraForSequenceClassification"),r8r=o(" (ELECTRA model)"),t8r=l(),G4=a("li"),J2e=a("strong"),a8r=o("mbart"),n8r=o(" \u2014 "),_H=a("a"),s8r=o("FlaxMBartForSequenceClassification"),l8r=o(" (mBART model)"),i8r=l(),O4=a("li"),Y2e=a("strong"),d8r=o("roberta"),c8r=o(" \u2014 "),uH=a("a"),f8r=o("FlaxRobertaForSequenceClassification"),m8r=o(" (RoBERTa model)"),g8r=l(),V4=a("li"),K2e=a("strong"),h8r=o("roformer"),p8r=o(" \u2014 "),bH=a("a"),_8r=o("FlaxRoFormerForSequenceClassification"),u8r=o(" (RoFormer model)"),b8r=l(),X4=a("li"),Z2e=a("strong"),F8r=o("xlm-roberta"),v8r=o(" \u2014 "),FH=a("a"),T8r=o("FlaxXLMRobertaForSequenceClassification"),M8r=o(" (XLM-RoBERTa model)"),E8r=l(),eFe=a("p"),C8r=o("Examples:"),w8r=l(),f(SL.$$.fragment),_Pe=l(),uf=a("h2"),z4=a("a"),oFe=a("span"),f(RL.$$.fragment),A8r=l(),rFe=a("span"),y8r=o("FlaxAutoModelForQuestionAnswering"),uPe=l(),Nr=a("div"),f(BL.$$.fragment),L8r=l(),bf=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=a("a"),k8r=o("from_pretrained()"),S8r=o(" class method or the "),TH=a("a"),R8r=o("from_config()"),B8r=o(` class
method.`),P8r=l(),PL=a("p"),$8r=o("This class cannot be instantiated directly using "),tFe=a("code"),I8r=o("__init__()"),q8r=o(" (throws an error)."),N8r=l(),Rt=a("div"),f($L.$$.fragment),j8r=l(),aFe=a("p"),D8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),G8r=l(),Ff=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),z8r=o("from_pretrained()"),Q8r=o(" to load the model weights."),W8r=l(),sFe=a("p"),H8r=o("Examples:"),U8r=l(),f(IL.$$.fragment),J8r=l(),Bo=a("div"),f(qL.$$.fragment),Y8r=l(),lFe=a("p"),K8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z8r=l(),$n=a("p"),e9r=o("The model class to instantiate is selected based on the "),iFe=a("code"),o9r=o("model_type"),r9r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),n9r=o("pretrained_model_name_or_path"),s9r=o(":"),l9r=l(),Te=a("ul"),Q4=a("li"),fFe=a("strong"),i9r=o("albert"),d9r=o(" \u2014 "),EH=a("a"),c9r=o("FlaxAlbertForQuestionAnswering"),f9r=o(" (ALBERT model)"),m9r=l(),W4=a("li"),mFe=a("strong"),g9r=o("bart"),h9r=o(" \u2014 "),CH=a("a"),p9r=o("FlaxBartForQuestionAnswering"),_9r=o(" (BART model)"),u9r=l(),H4=a("li"),gFe=a("strong"),b9r=o("bert"),F9r=o(" \u2014 "),wH=a("a"),v9r=o("FlaxBertForQuestionAnswering"),T9r=o(" (BERT model)"),M9r=l(),U4=a("li"),hFe=a("strong"),E9r=o("big_bird"),C9r=o(" \u2014 "),AH=a("a"),w9r=o("FlaxBigBirdForQuestionAnswering"),A9r=o(" (BigBird model)"),y9r=l(),J4=a("li"),pFe=a("strong"),L9r=o("distilbert"),x9r=o(" \u2014 "),yH=a("a"),k9r=o("FlaxDistilBertForQuestionAnswering"),S9r=o(" (DistilBERT model)"),R9r=l(),Y4=a("li"),_Fe=a("strong"),B9r=o("electra"),P9r=o(" \u2014 "),LH=a("a"),$9r=o("FlaxElectraForQuestionAnswering"),I9r=o(" (ELECTRA model)"),q9r=l(),K4=a("li"),uFe=a("strong"),N9r=o("mbart"),j9r=o(" \u2014 "),xH=a("a"),D9r=o("FlaxMBartForQuestionAnswering"),G9r=o(" (mBART model)"),O9r=l(),Z4=a("li"),bFe=a("strong"),V9r=o("roberta"),X9r=o(" \u2014 "),kH=a("a"),z9r=o("FlaxRobertaForQuestionAnswering"),Q9r=o(" (RoBERTa model)"),W9r=l(),eE=a("li"),FFe=a("strong"),H9r=o("roformer"),U9r=o(" \u2014 "),SH=a("a"),J9r=o("FlaxRoFormerForQuestionAnswering"),Y9r=o(" (RoFormer model)"),K9r=l(),oE=a("li"),vFe=a("strong"),Z9r=o("xlm-roberta"),exr=o(" \u2014 "),RH=a("a"),oxr=o("FlaxXLMRobertaForQuestionAnswering"),rxr=o(" (XLM-RoBERTa model)"),txr=l(),TFe=a("p"),axr=o("Examples:"),nxr=l(),f(NL.$$.fragment),bPe=l(),vf=a("h2"),rE=a("a"),MFe=a("span"),f(jL.$$.fragment),sxr=l(),EFe=a("span"),lxr=o("FlaxAutoModelForTokenClassification"),FPe=l(),jr=a("div"),f(DL.$$.fragment),ixr=l(),Tf=a("p"),dxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BH=a("a"),cxr=o("from_pretrained()"),fxr=o(" class method or the "),PH=a("a"),mxr=o("from_config()"),gxr=o(` class
method.`),hxr=l(),GL=a("p"),pxr=o("This class cannot be instantiated directly using "),CFe=a("code"),_xr=o("__init__()"),uxr=o(" (throws an error)."),bxr=l(),Bt=a("div"),f(OL.$$.fragment),Fxr=l(),wFe=a("p"),vxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Txr=l(),Mf=a("p"),Mxr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Exr=o("not"),Cxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),wxr=o("from_pretrained()"),Axr=o(" to load the model weights."),yxr=l(),yFe=a("p"),Lxr=o("Examples:"),xxr=l(),f(VL.$$.fragment),kxr=l(),Po=a("div"),f(XL.$$.fragment),Sxr=l(),LFe=a("p"),Rxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bxr=l(),In=a("p"),Pxr=o("The model class to instantiate is selected based on the "),xFe=a("code"),$xr=o("model_type"),Ixr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),qxr=o("pretrained_model_name_or_path"),Nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),jxr=o("pretrained_model_name_or_path"),Dxr=o(":"),Gxr=l(),Be=a("ul"),tE=a("li"),RFe=a("strong"),Oxr=o("albert"),Vxr=o(" \u2014 "),IH=a("a"),Xxr=o("FlaxAlbertForTokenClassification"),zxr=o(" (ALBERT model)"),Qxr=l(),aE=a("li"),BFe=a("strong"),Wxr=o("bert"),Hxr=o(" \u2014 "),qH=a("a"),Uxr=o("FlaxBertForTokenClassification"),Jxr=o(" (BERT model)"),Yxr=l(),nE=a("li"),PFe=a("strong"),Kxr=o("big_bird"),Zxr=o(" \u2014 "),NH=a("a"),ekr=o("FlaxBigBirdForTokenClassification"),okr=o(" (BigBird model)"),rkr=l(),sE=a("li"),$Fe=a("strong"),tkr=o("distilbert"),akr=o(" \u2014 "),jH=a("a"),nkr=o("FlaxDistilBertForTokenClassification"),skr=o(" (DistilBERT model)"),lkr=l(),lE=a("li"),IFe=a("strong"),ikr=o("electra"),dkr=o(" \u2014 "),DH=a("a"),ckr=o("FlaxElectraForTokenClassification"),fkr=o(" (ELECTRA model)"),mkr=l(),iE=a("li"),qFe=a("strong"),gkr=o("roberta"),hkr=o(" \u2014 "),GH=a("a"),pkr=o("FlaxRobertaForTokenClassification"),_kr=o(" (RoBERTa model)"),ukr=l(),dE=a("li"),NFe=a("strong"),bkr=o("roformer"),Fkr=o(" \u2014 "),OH=a("a"),vkr=o("FlaxRoFormerForTokenClassification"),Tkr=o(" (RoFormer model)"),Mkr=l(),cE=a("li"),jFe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),VH=a("a"),wkr=o("FlaxXLMRobertaForTokenClassification"),Akr=o(" (XLM-RoBERTa model)"),ykr=l(),DFe=a("p"),Lkr=o("Examples:"),xkr=l(),f(zL.$$.fragment),vPe=l(),Ef=a("h2"),fE=a("a"),GFe=a("span"),f(QL.$$.fragment),kkr=l(),OFe=a("span"),Skr=o("FlaxAutoModelForMultipleChoice"),TPe=l(),Dr=a("div"),f(WL.$$.fragment),Rkr=l(),Cf=a("p"),Bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XH=a("a"),Pkr=o("from_pretrained()"),$kr=o(" class method or the "),zH=a("a"),Ikr=o("from_config()"),qkr=o(` class
method.`),Nkr=l(),HL=a("p"),jkr=o("This class cannot be instantiated directly using "),VFe=a("code"),Dkr=o("__init__()"),Gkr=o(" (throws an error)."),Okr=l(),Pt=a("div"),f(UL.$$.fragment),Vkr=l(),XFe=a("p"),Xkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zkr=l(),wf=a("p"),Qkr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),Wkr=o("not"),Hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" to load the model weights."),Ykr=l(),QFe=a("p"),Kkr=o("Examples:"),Zkr=l(),f(JL.$$.fragment),eSr=l(),$o=a("div"),f(YL.$$.fragment),oSr=l(),WFe=a("p"),rSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tSr=l(),qn=a("p"),aSr=o("The model class to instantiate is selected based on the "),HFe=a("code"),nSr=o("model_type"),sSr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),dSr=o("pretrained_model_name_or_path"),cSr=o(":"),fSr=l(),Pe=a("ul"),mE=a("li"),YFe=a("strong"),mSr=o("albert"),gSr=o(" \u2014 "),WH=a("a"),hSr=o("FlaxAlbertForMultipleChoice"),pSr=o(" (ALBERT model)"),_Sr=l(),gE=a("li"),KFe=a("strong"),uSr=o("bert"),bSr=o(" \u2014 "),HH=a("a"),FSr=o("FlaxBertForMultipleChoice"),vSr=o(" (BERT model)"),TSr=l(),hE=a("li"),ZFe=a("strong"),MSr=o("big_bird"),ESr=o(" \u2014 "),UH=a("a"),CSr=o("FlaxBigBirdForMultipleChoice"),wSr=o(" (BigBird model)"),ASr=l(),pE=a("li"),eve=a("strong"),ySr=o("distilbert"),LSr=o(" \u2014 "),JH=a("a"),xSr=o("FlaxDistilBertForMultipleChoice"),kSr=o(" (DistilBERT model)"),SSr=l(),_E=a("li"),ove=a("strong"),RSr=o("electra"),BSr=o(" \u2014 "),YH=a("a"),PSr=o("FlaxElectraForMultipleChoice"),$Sr=o(" (ELECTRA model)"),ISr=l(),uE=a("li"),rve=a("strong"),qSr=o("roberta"),NSr=o(" \u2014 "),KH=a("a"),jSr=o("FlaxRobertaForMultipleChoice"),DSr=o(" (RoBERTa model)"),GSr=l(),bE=a("li"),tve=a("strong"),OSr=o("roformer"),VSr=o(" \u2014 "),ZH=a("a"),XSr=o("FlaxRoFormerForMultipleChoice"),zSr=o(" (RoFormer model)"),QSr=l(),FE=a("li"),ave=a("strong"),WSr=o("xlm-roberta"),HSr=o(" \u2014 "),eU=a("a"),USr=o("FlaxXLMRobertaForMultipleChoice"),JSr=o(" (XLM-RoBERTa model)"),YSr=l(),nve=a("p"),KSr=o("Examples:"),ZSr=l(),f(KL.$$.fragment),MPe=l(),Af=a("h2"),vE=a("a"),sve=a("span"),f(ZL.$$.fragment),eRr=l(),lve=a("span"),oRr=o("FlaxAutoModelForNextSentencePrediction"),EPe=l(),Gr=a("div"),f(e8.$$.fragment),rRr=l(),yf=a("p"),tRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oU=a("a"),aRr=o("from_pretrained()"),nRr=o(" class method or the "),rU=a("a"),sRr=o("from_config()"),lRr=o(` class
method.`),iRr=l(),o8=a("p"),dRr=o("This class cannot be instantiated directly using "),ive=a("code"),cRr=o("__init__()"),fRr=o(" (throws an error)."),mRr=l(),$t=a("div"),f(r8.$$.fragment),gRr=l(),dve=a("p"),hRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pRr=l(),Lf=a("p"),_Rr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),uRr=o("not"),bRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),FRr=o("from_pretrained()"),vRr=o(" to load the model weights."),TRr=l(),fve=a("p"),MRr=o("Examples:"),ERr=l(),f(t8.$$.fragment),CRr=l(),Io=a("div"),f(a8.$$.fragment),wRr=l(),mve=a("p"),ARr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yRr=l(),Nn=a("p"),LRr=o("The model class to instantiate is selected based on the "),gve=a("code"),xRr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),BRr=o("pretrained_model_name_or_path"),PRr=o(":"),$Rr=l(),_ve=a("ul"),TE=a("li"),uve=a("strong"),IRr=o("bert"),qRr=o(" \u2014 "),aU=a("a"),NRr=o("FlaxBertForNextSentencePrediction"),jRr=o(" (BERT model)"),DRr=l(),bve=a("p"),GRr=o("Examples:"),ORr=l(),f(n8.$$.fragment),CPe=l(),xf=a("h2"),ME=a("a"),Fve=a("span"),f(s8.$$.fragment),VRr=l(),vve=a("span"),XRr=o("FlaxAutoModelForImageClassification"),wPe=l(),Or=a("div"),f(l8.$$.fragment),zRr=l(),kf=a("p"),QRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nU=a("a"),WRr=o("from_pretrained()"),HRr=o(" class method or the "),sU=a("a"),URr=o("from_config()"),JRr=o(` class
method.`),YRr=l(),i8=a("p"),KRr=o("This class cannot be instantiated directly using "),Tve=a("code"),ZRr=o("__init__()"),eBr=o(" (throws an error)."),oBr=l(),It=a("div"),f(d8.$$.fragment),rBr=l(),Mve=a("p"),tBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aBr=l(),Sf=a("p"),nBr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),sBr=o("not"),lBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),iBr=o("from_pretrained()"),dBr=o(" to load the model weights."),cBr=l(),Cve=a("p"),fBr=o("Examples:"),mBr=l(),f(c8.$$.fragment),gBr=l(),qo=a("div"),f(f8.$$.fragment),hBr=l(),wve=a("p"),pBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Br=l(),jn=a("p"),uBr=o("The model class to instantiate is selected based on the "),Ave=a("code"),bBr=o("model_type"),FBr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),vBr=o("pretrained_model_name_or_path"),TBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(":"),CBr=l(),m8=a("ul"),EE=a("li"),xve=a("strong"),wBr=o("beit"),ABr=o(" \u2014 "),iU=a("a"),yBr=o("FlaxBeitForImageClassification"),LBr=o(" (BEiT model)"),xBr=l(),CE=a("li"),kve=a("strong"),kBr=o("vit"),SBr=o(" \u2014 "),dU=a("a"),RBr=o("FlaxViTForImageClassification"),BBr=o(" (ViT model)"),PBr=l(),Sve=a("p"),$Br=o("Examples:"),IBr=l(),f(g8.$$.fragment),APe=l(),Rf=a("h2"),wE=a("a"),Rve=a("span"),f(h8.$$.fragment),qBr=l(),Bve=a("span"),NBr=o("FlaxAutoModelForVision2Seq"),yPe=l(),Vr=a("div"),f(p8.$$.fragment),jBr=l(),Bf=a("p"),DBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cU=a("a"),GBr=o("from_pretrained()"),OBr=o(" class method or the "),fU=a("a"),VBr=o("from_config()"),XBr=o(` class
method.`),zBr=l(),_8=a("p"),QBr=o("This class cannot be instantiated directly using "),Pve=a("code"),WBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),qt=a("div"),f(u8.$$.fragment),JBr=l(),$ve=a("p"),YBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KBr=l(),Pf=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),ePr=o("not"),oPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),rPr=o("from_pretrained()"),tPr=o(" to load the model weights."),aPr=l(),qve=a("p"),nPr=o("Examples:"),sPr=l(),f(b8.$$.fragment),lPr=l(),No=a("div"),f(F8.$$.fragment),iPr=l(),Nve=a("p"),dPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cPr=l(),Dn=a("p"),fPr=o("The model class to instantiate is selected based on the "),jve=a("code"),mPr=o("model_type"),gPr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),hPr=o("pretrained_model_name_or_path"),pPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),_Pr=o("pretrained_model_name_or_path"),uPr=o(":"),bPr=l(),Ove=a("ul"),AE=a("li"),Vve=a("strong"),FPr=o("vision-encoder-decoder"),vPr=o(" \u2014 "),gU=a("a"),TPr=o("FlaxVisionEncoderDecoderModel"),MPr=o(" (Vision Encoder decoder model)"),EPr=l(),Xve=a("p"),CPr=o("Examples:"),wPr=l(),f(v8.$$.fragment),this.h()},l(c){const u=mwt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var T8=s(de);Ce=n(T8,"A",{id:!0,class:!0,href:!0});var zve=s(Ce);lo=n(zve,"SPAN",{});var Qve=s(lo);m(ge.$$.fragment,Qve),Qve.forEach(t),zve.forEach(t),Me=i(T8),Xo=n(T8,"SPAN",{});var yPr=s(Xo);Ii=r(yPr,"Auto Classes"),yPr.forEach(t),T8.forEach(t),qf=i(c),fa=n(c,"P",{});var xPe=s(fa);qi=r(xPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(xPe,"CODE",{});var LPr=s(Ni);AC=r(LPr,"from_pretrained()"),LPr.forEach(t),Nf=r(xPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xPe.forEach(t),xe=i(c),co=n(c,"P",{});var yE=s(co);ji=r(yE,"Instantiating one of "),Gn=n(yE,"A",{href:!0});var xPr=s(Gn);yC=r(xPr,"AutoConfig"),xPr.forEach(t),On=r(yE,", "),Vn=n(yE,"A",{href:!0});var kPr=s(Vn);LC=r(kPr,"AutoModel"),kPr.forEach(t),Di=r(yE,`, and
`),Xn=n(yE,"A",{href:!0});var SPr=s(Xn);xC=r(SPr,"AutoTokenizer"),SPr.forEach(t),Gi=r(yE," will directly create a class of the relevant architecture. For instance"),yE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var kPe=s(ue);b9=r(kPe,"will create a model that is an instance of "),Oi=n(kPe,"A",{href:!0});var RPr=s(Oi);F9=r(RPr,"BertModel"),RPr.forEach(t),v9=r(kPe,"."),kPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var SPe=s(Ga);T9=r(SPe,"There is one class of "),Df=n(SPe,"CODE",{});var BPr=s(Df);M9=r(BPr,"AutoModel"),BPr.forEach(t),DIe=r(SPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SPe.forEach(t),yRe=i(c),Vi=n(c,"H2",{class:!0});var RPe=s(Vi);Gf=n(RPe,"A",{id:!0,class:!0,href:!0});var PPr=s(Gf);lY=n(PPr,"SPAN",{});var $Pr=s(lY);m(kC.$$.fragment,$Pr),$Pr.forEach(t),PPr.forEach(t),GIe=i(RPe),iY=n(RPe,"SPAN",{});var IPr=s(iY);OIe=r(IPr,"Extending the Auto Classes"),IPr.forEach(t),RPe.forEach(t),LRe=i(c),zn=n(c,"P",{});var hU=s(zn);VIe=r(hU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dY=n(hU,"CODE",{});var qPr=s(dY);XIe=r(qPr,"NewModel"),qPr.forEach(t),zIe=r(hU,", make sure you have a "),cY=n(hU,"CODE",{});var NPr=s(cY);QIe=r(NPr,"NewModelConfig"),NPr.forEach(t),WIe=r(hU,` then you can add those to the auto
classes like this:`),hU.forEach(t),xRe=i(c),m(SC.$$.fragment,c),kRe=i(c),E9=n(c,"P",{});var jPr=s(E9);HIe=r(jPr,"You will then be able to use the auto classes like you would usually do!"),jPr.forEach(t),SRe=i(c),m(Of.$$.fragment,c),RRe=i(c),Xi=n(c,"H2",{class:!0});var BPe=s(Xi);Vf=n(BPe,"A",{id:!0,class:!0,href:!0});var DPr=s(Vf);fY=n(DPr,"SPAN",{});var GPr=s(fY);m(RC.$$.fragment,GPr),GPr.forEach(t),DPr.forEach(t),UIe=i(BPe),mY=n(BPe,"SPAN",{});var OPr=s(mY);JIe=r(OPr,"AutoConfig"),OPr.forEach(t),BPe.forEach(t),BRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(BC.$$.fragment,Os),YIe=i(Os),PC=n(Os,"P",{});var PPe=s(PC);KIe=r(PPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C9=n(PPe,"A",{href:!0});var VPr=s(C9);ZIe=r(VPr,"from_pretrained()"),VPr.forEach(t),eqe=r(PPe," class method."),PPe.forEach(t),oqe=i(Os),$C=n(Os,"P",{});var $Pe=s($C);rqe=r($Pe,"This class cannot be instantiated directly using "),gY=n($Pe,"CODE",{});var XPr=s(gY);tqe=r(XPr,"__init__()"),XPr.forEach(t),aqe=r($Pe," (throws an error)."),$Pe.forEach(t),nqe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(IC.$$.fragment,ga),sqe=i(ga),hY=n(ga,"P",{});var zPr=s(hY);lqe=r(zPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zPr.forEach(t),iqe=i(ga),zi=n(ga,"P",{});var pU=s(zi);dqe=r(pU,"The configuration class to instantiate is selected based on the "),pY=n(pU,"CODE",{});var QPr=s(pY);cqe=r(QPr,"model_type"),QPr.forEach(t),fqe=r(pU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_Y=n(pU,"CODE",{});var WPr=s(_Y);mqe=r(WPr,"pretrained_model_name_or_path"),WPr.forEach(t),gqe=r(pU,":"),pU.forEach(t),hqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var Wve=s(Xf);uY=n(Wve,"STRONG",{});var HPr=s(uY);pqe=r(HPr,"albert"),HPr.forEach(t),_qe=r(Wve," \u2014 "),w9=n(Wve,"A",{href:!0});var UPr=s(w9);uqe=r(UPr,"AlbertConfig"),UPr.forEach(t),bqe=r(Wve," (ALBERT model)"),Wve.forEach(t),Fqe=i(v),zf=n(v,"LI",{});var Hve=s(zf);bY=n(Hve,"STRONG",{});var JPr=s(bY);vqe=r(JPr,"bart"),JPr.forEach(t),Tqe=r(Hve," \u2014 "),A9=n(Hve,"A",{href:!0});var YPr=s(A9);Mqe=r(YPr,"BartConfig"),YPr.forEach(t),Eqe=r(Hve," (BART model)"),Hve.forEach(t),Cqe=i(v),Qf=n(v,"LI",{});var Uve=s(Qf);FY=n(Uve,"STRONG",{});var KPr=s(FY);wqe=r(KPr,"beit"),KPr.forEach(t),Aqe=r(Uve," \u2014 "),y9=n(Uve,"A",{href:!0});var ZPr=s(y9);yqe=r(ZPr,"BeitConfig"),ZPr.forEach(t),Lqe=r(Uve," (BEiT model)"),Uve.forEach(t),xqe=i(v),Wf=n(v,"LI",{});var Jve=s(Wf);vY=n(Jve,"STRONG",{});var e$r=s(vY);kqe=r(e$r,"bert"),e$r.forEach(t),Sqe=r(Jve," \u2014 "),L9=n(Jve,"A",{href:!0});var o$r=s(L9);Rqe=r(o$r,"BertConfig"),o$r.forEach(t),Bqe=r(Jve," (BERT model)"),Jve.forEach(t),Pqe=i(v),Hf=n(v,"LI",{});var Yve=s(Hf);TY=n(Yve,"STRONG",{});var r$r=s(TY);$qe=r(r$r,"bert-generation"),r$r.forEach(t),Iqe=r(Yve," \u2014 "),x9=n(Yve,"A",{href:!0});var t$r=s(x9);qqe=r(t$r,"BertGenerationConfig"),t$r.forEach(t),Nqe=r(Yve," (Bert Generation model)"),Yve.forEach(t),jqe=i(v),Uf=n(v,"LI",{});var Kve=s(Uf);MY=n(Kve,"STRONG",{});var a$r=s(MY);Dqe=r(a$r,"big_bird"),a$r.forEach(t),Gqe=r(Kve," \u2014 "),k9=n(Kve,"A",{href:!0});var n$r=s(k9);Oqe=r(n$r,"BigBirdConfig"),n$r.forEach(t),Vqe=r(Kve," (BigBird model)"),Kve.forEach(t),Xqe=i(v),Jf=n(v,"LI",{});var Zve=s(Jf);EY=n(Zve,"STRONG",{});var s$r=s(EY);zqe=r(s$r,"bigbird_pegasus"),s$r.forEach(t),Qqe=r(Zve," \u2014 "),S9=n(Zve,"A",{href:!0});var l$r=s(S9);Wqe=r(l$r,"BigBirdPegasusConfig"),l$r.forEach(t),Hqe=r(Zve," (BigBirdPegasus model)"),Zve.forEach(t),Uqe=i(v),Yf=n(v,"LI",{});var eTe=s(Yf);CY=n(eTe,"STRONG",{});var i$r=s(CY);Jqe=r(i$r,"blenderbot"),i$r.forEach(t),Yqe=r(eTe," \u2014 "),R9=n(eTe,"A",{href:!0});var d$r=s(R9);Kqe=r(d$r,"BlenderbotConfig"),d$r.forEach(t),Zqe=r(eTe," (Blenderbot model)"),eTe.forEach(t),eNe=i(v),Kf=n(v,"LI",{});var oTe=s(Kf);wY=n(oTe,"STRONG",{});var c$r=s(wY);oNe=r(c$r,"blenderbot-small"),c$r.forEach(t),rNe=r(oTe," \u2014 "),B9=n(oTe,"A",{href:!0});var f$r=s(B9);tNe=r(f$r,"BlenderbotSmallConfig"),f$r.forEach(t),aNe=r(oTe," (BlenderbotSmall model)"),oTe.forEach(t),nNe=i(v),Zf=n(v,"LI",{});var rTe=s(Zf);AY=n(rTe,"STRONG",{});var m$r=s(AY);sNe=r(m$r,"camembert"),m$r.forEach(t),lNe=r(rTe," \u2014 "),P9=n(rTe,"A",{href:!0});var g$r=s(P9);iNe=r(g$r,"CamembertConfig"),g$r.forEach(t),dNe=r(rTe," (CamemBERT model)"),rTe.forEach(t),cNe=i(v),em=n(v,"LI",{});var tTe=s(em);yY=n(tTe,"STRONG",{});var h$r=s(yY);fNe=r(h$r,"canine"),h$r.forEach(t),mNe=r(tTe," \u2014 "),$9=n(tTe,"A",{href:!0});var p$r=s($9);gNe=r(p$r,"CanineConfig"),p$r.forEach(t),hNe=r(tTe," (Canine model)"),tTe.forEach(t),pNe=i(v),om=n(v,"LI",{});var aTe=s(om);LY=n(aTe,"STRONG",{});var _$r=s(LY);_Ne=r(_$r,"clip"),_$r.forEach(t),uNe=r(aTe," \u2014 "),I9=n(aTe,"A",{href:!0});var u$r=s(I9);bNe=r(u$r,"CLIPConfig"),u$r.forEach(t),FNe=r(aTe," (CLIP model)"),aTe.forEach(t),vNe=i(v),rm=n(v,"LI",{});var nTe=s(rm);xY=n(nTe,"STRONG",{});var b$r=s(xY);TNe=r(b$r,"convbert"),b$r.forEach(t),MNe=r(nTe," \u2014 "),q9=n(nTe,"A",{href:!0});var F$r=s(q9);ENe=r(F$r,"ConvBertConfig"),F$r.forEach(t),CNe=r(nTe," (ConvBERT model)"),nTe.forEach(t),wNe=i(v),tm=n(v,"LI",{});var sTe=s(tm);kY=n(sTe,"STRONG",{});var v$r=s(kY);ANe=r(v$r,"convnext"),v$r.forEach(t),yNe=r(sTe," \u2014 "),N9=n(sTe,"A",{href:!0});var T$r=s(N9);LNe=r(T$r,"ConvNextConfig"),T$r.forEach(t),xNe=r(sTe," (ConvNext model)"),sTe.forEach(t),kNe=i(v),am=n(v,"LI",{});var lTe=s(am);SY=n(lTe,"STRONG",{});var M$r=s(SY);SNe=r(M$r,"ctrl"),M$r.forEach(t),RNe=r(lTe," \u2014 "),j9=n(lTe,"A",{href:!0});var E$r=s(j9);BNe=r(E$r,"CTRLConfig"),E$r.forEach(t),PNe=r(lTe," (CTRL model)"),lTe.forEach(t),$Ne=i(v),nm=n(v,"LI",{});var iTe=s(nm);RY=n(iTe,"STRONG",{});var C$r=s(RY);INe=r(C$r,"data2vec-audio"),C$r.forEach(t),qNe=r(iTe," \u2014 "),D9=n(iTe,"A",{href:!0});var w$r=s(D9);NNe=r(w$r,"Data2VecAudioConfig"),w$r.forEach(t),jNe=r(iTe," (Data2VecAudio model)"),iTe.forEach(t),DNe=i(v),sm=n(v,"LI",{});var dTe=s(sm);BY=n(dTe,"STRONG",{});var A$r=s(BY);GNe=r(A$r,"data2vec-text"),A$r.forEach(t),ONe=r(dTe," \u2014 "),G9=n(dTe,"A",{href:!0});var y$r=s(G9);VNe=r(y$r,"Data2VecTextConfig"),y$r.forEach(t),XNe=r(dTe," (Data2VecText model)"),dTe.forEach(t),zNe=i(v),lm=n(v,"LI",{});var cTe=s(lm);PY=n(cTe,"STRONG",{});var L$r=s(PY);QNe=r(L$r,"deberta"),L$r.forEach(t),WNe=r(cTe," \u2014 "),O9=n(cTe,"A",{href:!0});var x$r=s(O9);HNe=r(x$r,"DebertaConfig"),x$r.forEach(t),UNe=r(cTe," (DeBERTa model)"),cTe.forEach(t),JNe=i(v),im=n(v,"LI",{});var fTe=s(im);$Y=n(fTe,"STRONG",{});var k$r=s($Y);YNe=r(k$r,"deberta-v2"),k$r.forEach(t),KNe=r(fTe," \u2014 "),V9=n(fTe,"A",{href:!0});var S$r=s(V9);ZNe=r(S$r,"DebertaV2Config"),S$r.forEach(t),eje=r(fTe," (DeBERTa-v2 model)"),fTe.forEach(t),oje=i(v),dm=n(v,"LI",{});var mTe=s(dm);IY=n(mTe,"STRONG",{});var R$r=s(IY);rje=r(R$r,"decision_transformer"),R$r.forEach(t),tje=r(mTe," \u2014 "),X9=n(mTe,"A",{href:!0});var B$r=s(X9);aje=r(B$r,"DecisionTransformerConfig"),B$r.forEach(t),nje=r(mTe," (Decision Transformer model)"),mTe.forEach(t),sje=i(v),cm=n(v,"LI",{});var gTe=s(cm);qY=n(gTe,"STRONG",{});var P$r=s(qY);lje=r(P$r,"deit"),P$r.forEach(t),ije=r(gTe," \u2014 "),z9=n(gTe,"A",{href:!0});var $$r=s(z9);dje=r($$r,"DeiTConfig"),$$r.forEach(t),cje=r(gTe," (DeiT model)"),gTe.forEach(t),fje=i(v),fm=n(v,"LI",{});var hTe=s(fm);NY=n(hTe,"STRONG",{});var I$r=s(NY);mje=r(I$r,"detr"),I$r.forEach(t),gje=r(hTe," \u2014 "),Q9=n(hTe,"A",{href:!0});var q$r=s(Q9);hje=r(q$r,"DetrConfig"),q$r.forEach(t),pje=r(hTe," (DETR model)"),hTe.forEach(t),_je=i(v),mm=n(v,"LI",{});var pTe=s(mm);jY=n(pTe,"STRONG",{});var N$r=s(jY);uje=r(N$r,"distilbert"),N$r.forEach(t),bje=r(pTe," \u2014 "),W9=n(pTe,"A",{href:!0});var j$r=s(W9);Fje=r(j$r,"DistilBertConfig"),j$r.forEach(t),vje=r(pTe," (DistilBERT model)"),pTe.forEach(t),Tje=i(v),gm=n(v,"LI",{});var _Te=s(gm);DY=n(_Te,"STRONG",{});var D$r=s(DY);Mje=r(D$r,"dpr"),D$r.forEach(t),Eje=r(_Te," \u2014 "),H9=n(_Te,"A",{href:!0});var G$r=s(H9);Cje=r(G$r,"DPRConfig"),G$r.forEach(t),wje=r(_Te," (DPR model)"),_Te.forEach(t),Aje=i(v),hm=n(v,"LI",{});var uTe=s(hm);GY=n(uTe,"STRONG",{});var O$r=s(GY);yje=r(O$r,"dpt"),O$r.forEach(t),Lje=r(uTe," \u2014 "),U9=n(uTe,"A",{href:!0});var V$r=s(U9);xje=r(V$r,"DPTConfig"),V$r.forEach(t),kje=r(uTe," (DPT model)"),uTe.forEach(t),Sje=i(v),pm=n(v,"LI",{});var bTe=s(pm);OY=n(bTe,"STRONG",{});var X$r=s(OY);Rje=r(X$r,"electra"),X$r.forEach(t),Bje=r(bTe," \u2014 "),J9=n(bTe,"A",{href:!0});var z$r=s(J9);Pje=r(z$r,"ElectraConfig"),z$r.forEach(t),$je=r(bTe," (ELECTRA model)"),bTe.forEach(t),Ije=i(v),_m=n(v,"LI",{});var FTe=s(_m);VY=n(FTe,"STRONG",{});var Q$r=s(VY);qje=r(Q$r,"encoder-decoder"),Q$r.forEach(t),Nje=r(FTe," \u2014 "),Y9=n(FTe,"A",{href:!0});var W$r=s(Y9);jje=r(W$r,"EncoderDecoderConfig"),W$r.forEach(t),Dje=r(FTe," (Encoder decoder model)"),FTe.forEach(t),Gje=i(v),um=n(v,"LI",{});var vTe=s(um);XY=n(vTe,"STRONG",{});var H$r=s(XY);Oje=r(H$r,"fastspeech2"),H$r.forEach(t),Vje=r(vTe," \u2014 "),K9=n(vTe,"A",{href:!0});var U$r=s(K9);Xje=r(U$r,"FastSpeech2Config"),U$r.forEach(t),zje=r(vTe," (FastSpeech2 model)"),vTe.forEach(t),Qje=i(v),bm=n(v,"LI",{});var TTe=s(bm);zY=n(TTe,"STRONG",{});var J$r=s(zY);Wje=r(J$r,"flaubert"),J$r.forEach(t),Hje=r(TTe," \u2014 "),Z9=n(TTe,"A",{href:!0});var Y$r=s(Z9);Uje=r(Y$r,"FlaubertConfig"),Y$r.forEach(t),Jje=r(TTe," (FlauBERT model)"),TTe.forEach(t),Yje=i(v),Fm=n(v,"LI",{});var MTe=s(Fm);QY=n(MTe,"STRONG",{});var K$r=s(QY);Kje=r(K$r,"fnet"),K$r.forEach(t),Zje=r(MTe," \u2014 "),ex=n(MTe,"A",{href:!0});var Z$r=s(ex);eDe=r(Z$r,"FNetConfig"),Z$r.forEach(t),oDe=r(MTe," (FNet model)"),MTe.forEach(t),rDe=i(v),vm=n(v,"LI",{});var ETe=s(vm);WY=n(ETe,"STRONG",{});var eIr=s(WY);tDe=r(eIr,"fsmt"),eIr.forEach(t),aDe=r(ETe," \u2014 "),ox=n(ETe,"A",{href:!0});var oIr=s(ox);nDe=r(oIr,"FSMTConfig"),oIr.forEach(t),sDe=r(ETe," (FairSeq Machine-Translation model)"),ETe.forEach(t),lDe=i(v),Tm=n(v,"LI",{});var CTe=s(Tm);HY=n(CTe,"STRONG",{});var rIr=s(HY);iDe=r(rIr,"funnel"),rIr.forEach(t),dDe=r(CTe," \u2014 "),rx=n(CTe,"A",{href:!0});var tIr=s(rx);cDe=r(tIr,"FunnelConfig"),tIr.forEach(t),fDe=r(CTe," (Funnel Transformer model)"),CTe.forEach(t),mDe=i(v),Mm=n(v,"LI",{});var wTe=s(Mm);UY=n(wTe,"STRONG",{});var aIr=s(UY);gDe=r(aIr,"glpn"),aIr.forEach(t),hDe=r(wTe," \u2014 "),tx=n(wTe,"A",{href:!0});var nIr=s(tx);pDe=r(nIr,"GLPNConfig"),nIr.forEach(t),_De=r(wTe," (GLPN model)"),wTe.forEach(t),uDe=i(v),Em=n(v,"LI",{});var ATe=s(Em);JY=n(ATe,"STRONG",{});var sIr=s(JY);bDe=r(sIr,"gpt2"),sIr.forEach(t),FDe=r(ATe," \u2014 "),ax=n(ATe,"A",{href:!0});var lIr=s(ax);vDe=r(lIr,"GPT2Config"),lIr.forEach(t),TDe=r(ATe," (OpenAI GPT-2 model)"),ATe.forEach(t),MDe=i(v),Cm=n(v,"LI",{});var yTe=s(Cm);YY=n(yTe,"STRONG",{});var iIr=s(YY);EDe=r(iIr,"gpt_neo"),iIr.forEach(t),CDe=r(yTe," \u2014 "),nx=n(yTe,"A",{href:!0});var dIr=s(nx);wDe=r(dIr,"GPTNeoConfig"),dIr.forEach(t),ADe=r(yTe," (GPT Neo model)"),yTe.forEach(t),yDe=i(v),wm=n(v,"LI",{});var LTe=s(wm);KY=n(LTe,"STRONG",{});var cIr=s(KY);LDe=r(cIr,"gptj"),cIr.forEach(t),xDe=r(LTe," \u2014 "),sx=n(LTe,"A",{href:!0});var fIr=s(sx);kDe=r(fIr,"GPTJConfig"),fIr.forEach(t),SDe=r(LTe," (GPT-J model)"),LTe.forEach(t),RDe=i(v),Am=n(v,"LI",{});var xTe=s(Am);ZY=n(xTe,"STRONG",{});var mIr=s(ZY);BDe=r(mIr,"hubert"),mIr.forEach(t),PDe=r(xTe," \u2014 "),lx=n(xTe,"A",{href:!0});var gIr=s(lx);$De=r(gIr,"HubertConfig"),gIr.forEach(t),IDe=r(xTe," (Hubert model)"),xTe.forEach(t),qDe=i(v),ym=n(v,"LI",{});var kTe=s(ym);eK=n(kTe,"STRONG",{});var hIr=s(eK);NDe=r(hIr,"ibert"),hIr.forEach(t),jDe=r(kTe," \u2014 "),ix=n(kTe,"A",{href:!0});var pIr=s(ix);DDe=r(pIr,"IBertConfig"),pIr.forEach(t),GDe=r(kTe," (I-BERT model)"),kTe.forEach(t),ODe=i(v),Lm=n(v,"LI",{});var STe=s(Lm);oK=n(STe,"STRONG",{});var _Ir=s(oK);VDe=r(_Ir,"imagegpt"),_Ir.forEach(t),XDe=r(STe," \u2014 "),dx=n(STe,"A",{href:!0});var uIr=s(dx);zDe=r(uIr,"ImageGPTConfig"),uIr.forEach(t),QDe=r(STe," (ImageGPT model)"),STe.forEach(t),WDe=i(v),xm=n(v,"LI",{});var RTe=s(xm);rK=n(RTe,"STRONG",{});var bIr=s(rK);HDe=r(bIr,"layoutlm"),bIr.forEach(t),UDe=r(RTe," \u2014 "),cx=n(RTe,"A",{href:!0});var FIr=s(cx);JDe=r(FIr,"LayoutLMConfig"),FIr.forEach(t),YDe=r(RTe," (LayoutLM model)"),RTe.forEach(t),KDe=i(v),km=n(v,"LI",{});var BTe=s(km);tK=n(BTe,"STRONG",{});var vIr=s(tK);ZDe=r(vIr,"layoutlmv2"),vIr.forEach(t),eGe=r(BTe," \u2014 "),fx=n(BTe,"A",{href:!0});var TIr=s(fx);oGe=r(TIr,"LayoutLMv2Config"),TIr.forEach(t),rGe=r(BTe," (LayoutLMv2 model)"),BTe.forEach(t),tGe=i(v),Sm=n(v,"LI",{});var PTe=s(Sm);aK=n(PTe,"STRONG",{});var MIr=s(aK);aGe=r(MIr,"led"),MIr.forEach(t),nGe=r(PTe," \u2014 "),mx=n(PTe,"A",{href:!0});var EIr=s(mx);sGe=r(EIr,"LEDConfig"),EIr.forEach(t),lGe=r(PTe," (LED model)"),PTe.forEach(t),iGe=i(v),Rm=n(v,"LI",{});var $Te=s(Rm);nK=n($Te,"STRONG",{});var CIr=s(nK);dGe=r(CIr,"longformer"),CIr.forEach(t),cGe=r($Te," \u2014 "),gx=n($Te,"A",{href:!0});var wIr=s(gx);fGe=r(wIr,"LongformerConfig"),wIr.forEach(t),mGe=r($Te," (Longformer model)"),$Te.forEach(t),gGe=i(v),Bm=n(v,"LI",{});var ITe=s(Bm);sK=n(ITe,"STRONG",{});var AIr=s(sK);hGe=r(AIr,"luke"),AIr.forEach(t),pGe=r(ITe," \u2014 "),hx=n(ITe,"A",{href:!0});var yIr=s(hx);_Ge=r(yIr,"LukeConfig"),yIr.forEach(t),uGe=r(ITe," (LUKE model)"),ITe.forEach(t),bGe=i(v),Pm=n(v,"LI",{});var qTe=s(Pm);lK=n(qTe,"STRONG",{});var LIr=s(lK);FGe=r(LIr,"lxmert"),LIr.forEach(t),vGe=r(qTe," \u2014 "),px=n(qTe,"A",{href:!0});var xIr=s(px);TGe=r(xIr,"LxmertConfig"),xIr.forEach(t),MGe=r(qTe," (LXMERT model)"),qTe.forEach(t),EGe=i(v),$m=n(v,"LI",{});var NTe=s($m);iK=n(NTe,"STRONG",{});var kIr=s(iK);CGe=r(kIr,"m2m_100"),kIr.forEach(t),wGe=r(NTe," \u2014 "),_x=n(NTe,"A",{href:!0});var SIr=s(_x);AGe=r(SIr,"M2M100Config"),SIr.forEach(t),yGe=r(NTe," (M2M100 model)"),NTe.forEach(t),LGe=i(v),Im=n(v,"LI",{});var jTe=s(Im);dK=n(jTe,"STRONG",{});var RIr=s(dK);xGe=r(RIr,"marian"),RIr.forEach(t),kGe=r(jTe," \u2014 "),ux=n(jTe,"A",{href:!0});var BIr=s(ux);SGe=r(BIr,"MarianConfig"),BIr.forEach(t),RGe=r(jTe," (Marian model)"),jTe.forEach(t),BGe=i(v),qm=n(v,"LI",{});var DTe=s(qm);cK=n(DTe,"STRONG",{});var PIr=s(cK);PGe=r(PIr,"maskformer"),PIr.forEach(t),$Ge=r(DTe," \u2014 "),bx=n(DTe,"A",{href:!0});var $Ir=s(bx);IGe=r($Ir,"MaskFormerConfig"),$Ir.forEach(t),qGe=r(DTe," (MaskFormer model)"),DTe.forEach(t),NGe=i(v),Nm=n(v,"LI",{});var GTe=s(Nm);fK=n(GTe,"STRONG",{});var IIr=s(fK);jGe=r(IIr,"mbart"),IIr.forEach(t),DGe=r(GTe," \u2014 "),Fx=n(GTe,"A",{href:!0});var qIr=s(Fx);GGe=r(qIr,"MBartConfig"),qIr.forEach(t),OGe=r(GTe," (mBART model)"),GTe.forEach(t),VGe=i(v),jm=n(v,"LI",{});var OTe=s(jm);mK=n(OTe,"STRONG",{});var NIr=s(mK);XGe=r(NIr,"megatron-bert"),NIr.forEach(t),zGe=r(OTe," \u2014 "),vx=n(OTe,"A",{href:!0});var jIr=s(vx);QGe=r(jIr,"MegatronBertConfig"),jIr.forEach(t),WGe=r(OTe," (MegatronBert model)"),OTe.forEach(t),HGe=i(v),Dm=n(v,"LI",{});var VTe=s(Dm);gK=n(VTe,"STRONG",{});var DIr=s(gK);UGe=r(DIr,"mobilebert"),DIr.forEach(t),JGe=r(VTe," \u2014 "),Tx=n(VTe,"A",{href:!0});var GIr=s(Tx);YGe=r(GIr,"MobileBertConfig"),GIr.forEach(t),KGe=r(VTe," (MobileBERT model)"),VTe.forEach(t),ZGe=i(v),Gm=n(v,"LI",{});var XTe=s(Gm);hK=n(XTe,"STRONG",{});var OIr=s(hK);eOe=r(OIr,"mpnet"),OIr.forEach(t),oOe=r(XTe," \u2014 "),Mx=n(XTe,"A",{href:!0});var VIr=s(Mx);rOe=r(VIr,"MPNetConfig"),VIr.forEach(t),tOe=r(XTe," (MPNet model)"),XTe.forEach(t),aOe=i(v),Om=n(v,"LI",{});var zTe=s(Om);pK=n(zTe,"STRONG",{});var XIr=s(pK);nOe=r(XIr,"mt5"),XIr.forEach(t),sOe=r(zTe," \u2014 "),Ex=n(zTe,"A",{href:!0});var zIr=s(Ex);lOe=r(zIr,"MT5Config"),zIr.forEach(t),iOe=r(zTe," (mT5 model)"),zTe.forEach(t),dOe=i(v),Vm=n(v,"LI",{});var QTe=s(Vm);_K=n(QTe,"STRONG",{});var QIr=s(_K);cOe=r(QIr,"nystromformer"),QIr.forEach(t),fOe=r(QTe," \u2014 "),Cx=n(QTe,"A",{href:!0});var WIr=s(Cx);mOe=r(WIr,"NystromformerConfig"),WIr.forEach(t),gOe=r(QTe," (Nystromformer model)"),QTe.forEach(t),hOe=i(v),Xm=n(v,"LI",{});var WTe=s(Xm);uK=n(WTe,"STRONG",{});var HIr=s(uK);pOe=r(HIr,"openai-gpt"),HIr.forEach(t),_Oe=r(WTe," \u2014 "),wx=n(WTe,"A",{href:!0});var UIr=s(wx);uOe=r(UIr,"OpenAIGPTConfig"),UIr.forEach(t),bOe=r(WTe," (OpenAI GPT model)"),WTe.forEach(t),FOe=i(v),zm=n(v,"LI",{});var HTe=s(zm);bK=n(HTe,"STRONG",{});var JIr=s(bK);vOe=r(JIr,"pegasus"),JIr.forEach(t),TOe=r(HTe," \u2014 "),Ax=n(HTe,"A",{href:!0});var YIr=s(Ax);MOe=r(YIr,"PegasusConfig"),YIr.forEach(t),EOe=r(HTe," (Pegasus model)"),HTe.forEach(t),COe=i(v),Qm=n(v,"LI",{});var UTe=s(Qm);FK=n(UTe,"STRONG",{});var KIr=s(FK);wOe=r(KIr,"perceiver"),KIr.forEach(t),AOe=r(UTe," \u2014 "),yx=n(UTe,"A",{href:!0});var ZIr=s(yx);yOe=r(ZIr,"PerceiverConfig"),ZIr.forEach(t),LOe=r(UTe," (Perceiver model)"),UTe.forEach(t),xOe=i(v),Wm=n(v,"LI",{});var JTe=s(Wm);vK=n(JTe,"STRONG",{});var eqr=s(vK);kOe=r(eqr,"plbart"),eqr.forEach(t),SOe=r(JTe," \u2014 "),Lx=n(JTe,"A",{href:!0});var oqr=s(Lx);ROe=r(oqr,"PLBartConfig"),oqr.forEach(t),BOe=r(JTe," (PLBart model)"),JTe.forEach(t),POe=i(v),Hm=n(v,"LI",{});var YTe=s(Hm);TK=n(YTe,"STRONG",{});var rqr=s(TK);$Oe=r(rqr,"poolformer"),rqr.forEach(t),IOe=r(YTe," \u2014 "),xx=n(YTe,"A",{href:!0});var tqr=s(xx);qOe=r(tqr,"PoolFormerConfig"),tqr.forEach(t),NOe=r(YTe," (PoolFormer model)"),YTe.forEach(t),jOe=i(v),Um=n(v,"LI",{});var KTe=s(Um);MK=n(KTe,"STRONG",{});var aqr=s(MK);DOe=r(aqr,"prophetnet"),aqr.forEach(t),GOe=r(KTe," \u2014 "),kx=n(KTe,"A",{href:!0});var nqr=s(kx);OOe=r(nqr,"ProphetNetConfig"),nqr.forEach(t),VOe=r(KTe," (ProphetNet model)"),KTe.forEach(t),XOe=i(v),Jm=n(v,"LI",{});var ZTe=s(Jm);EK=n(ZTe,"STRONG",{});var sqr=s(EK);zOe=r(sqr,"qdqbert"),sqr.forEach(t),QOe=r(ZTe," \u2014 "),Sx=n(ZTe,"A",{href:!0});var lqr=s(Sx);WOe=r(lqr,"QDQBertConfig"),lqr.forEach(t),HOe=r(ZTe," (QDQBert model)"),ZTe.forEach(t),UOe=i(v),Ym=n(v,"LI",{});var eMe=s(Ym);CK=n(eMe,"STRONG",{});var iqr=s(CK);JOe=r(iqr,"rag"),iqr.forEach(t),YOe=r(eMe," \u2014 "),Rx=n(eMe,"A",{href:!0});var dqr=s(Rx);KOe=r(dqr,"RagConfig"),dqr.forEach(t),ZOe=r(eMe," (RAG model)"),eMe.forEach(t),eVe=i(v),Km=n(v,"LI",{});var oMe=s(Km);wK=n(oMe,"STRONG",{});var cqr=s(wK);oVe=r(cqr,"realm"),cqr.forEach(t),rVe=r(oMe," \u2014 "),Bx=n(oMe,"A",{href:!0});var fqr=s(Bx);tVe=r(fqr,"RealmConfig"),fqr.forEach(t),aVe=r(oMe," (Realm model)"),oMe.forEach(t),nVe=i(v),Zm=n(v,"LI",{});var rMe=s(Zm);AK=n(rMe,"STRONG",{});var mqr=s(AK);sVe=r(mqr,"reformer"),mqr.forEach(t),lVe=r(rMe," \u2014 "),Px=n(rMe,"A",{href:!0});var gqr=s(Px);iVe=r(gqr,"ReformerConfig"),gqr.forEach(t),dVe=r(rMe," (Reformer model)"),rMe.forEach(t),cVe=i(v),eg=n(v,"LI",{});var tMe=s(eg);yK=n(tMe,"STRONG",{});var hqr=s(yK);fVe=r(hqr,"regnet"),hqr.forEach(t),mVe=r(tMe," \u2014 "),$x=n(tMe,"A",{href:!0});var pqr=s($x);gVe=r(pqr,"RegNetConfig"),pqr.forEach(t),hVe=r(tMe," (RegNet model)"),tMe.forEach(t),pVe=i(v),og=n(v,"LI",{});var aMe=s(og);LK=n(aMe,"STRONG",{});var _qr=s(LK);_Ve=r(_qr,"rembert"),_qr.forEach(t),uVe=r(aMe," \u2014 "),Ix=n(aMe,"A",{href:!0});var uqr=s(Ix);bVe=r(uqr,"RemBertConfig"),uqr.forEach(t),FVe=r(aMe," (RemBERT model)"),aMe.forEach(t),vVe=i(v),rg=n(v,"LI",{});var nMe=s(rg);xK=n(nMe,"STRONG",{});var bqr=s(xK);TVe=r(bqr,"resnet"),bqr.forEach(t),MVe=r(nMe," \u2014 "),qx=n(nMe,"A",{href:!0});var Fqr=s(qx);EVe=r(Fqr,"ResNetConfig"),Fqr.forEach(t),CVe=r(nMe," (ResNet model)"),nMe.forEach(t),wVe=i(v),tg=n(v,"LI",{});var sMe=s(tg);kK=n(sMe,"STRONG",{});var vqr=s(kK);AVe=r(vqr,"retribert"),vqr.forEach(t),yVe=r(sMe," \u2014 "),Nx=n(sMe,"A",{href:!0});var Tqr=s(Nx);LVe=r(Tqr,"RetriBertConfig"),Tqr.forEach(t),xVe=r(sMe," (RetriBERT model)"),sMe.forEach(t),kVe=i(v),ag=n(v,"LI",{});var lMe=s(ag);SK=n(lMe,"STRONG",{});var Mqr=s(SK);SVe=r(Mqr,"roberta"),Mqr.forEach(t),RVe=r(lMe," \u2014 "),jx=n(lMe,"A",{href:!0});var Eqr=s(jx);BVe=r(Eqr,"RobertaConfig"),Eqr.forEach(t),PVe=r(lMe," (RoBERTa model)"),lMe.forEach(t),$Ve=i(v),ng=n(v,"LI",{});var iMe=s(ng);RK=n(iMe,"STRONG",{});var Cqr=s(RK);IVe=r(Cqr,"roformer"),Cqr.forEach(t),qVe=r(iMe," \u2014 "),Dx=n(iMe,"A",{href:!0});var wqr=s(Dx);NVe=r(wqr,"RoFormerConfig"),wqr.forEach(t),jVe=r(iMe," (RoFormer model)"),iMe.forEach(t),DVe=i(v),sg=n(v,"LI",{});var dMe=s(sg);BK=n(dMe,"STRONG",{});var Aqr=s(BK);GVe=r(Aqr,"segformer"),Aqr.forEach(t),OVe=r(dMe," \u2014 "),Gx=n(dMe,"A",{href:!0});var yqr=s(Gx);VVe=r(yqr,"SegformerConfig"),yqr.forEach(t),XVe=r(dMe," (SegFormer model)"),dMe.forEach(t),zVe=i(v),lg=n(v,"LI",{});var cMe=s(lg);PK=n(cMe,"STRONG",{});var Lqr=s(PK);QVe=r(Lqr,"sew"),Lqr.forEach(t),WVe=r(cMe," \u2014 "),Ox=n(cMe,"A",{href:!0});var xqr=s(Ox);HVe=r(xqr,"SEWConfig"),xqr.forEach(t),UVe=r(cMe," (SEW model)"),cMe.forEach(t),JVe=i(v),ig=n(v,"LI",{});var fMe=s(ig);$K=n(fMe,"STRONG",{});var kqr=s($K);YVe=r(kqr,"sew-d"),kqr.forEach(t),KVe=r(fMe," \u2014 "),Vx=n(fMe,"A",{href:!0});var Sqr=s(Vx);ZVe=r(Sqr,"SEWDConfig"),Sqr.forEach(t),eXe=r(fMe," (SEW-D model)"),fMe.forEach(t),oXe=i(v),dg=n(v,"LI",{});var mMe=s(dg);IK=n(mMe,"STRONG",{});var Rqr=s(IK);rXe=r(Rqr,"speech-encoder-decoder"),Rqr.forEach(t),tXe=r(mMe," \u2014 "),Xx=n(mMe,"A",{href:!0});var Bqr=s(Xx);aXe=r(Bqr,"SpeechEncoderDecoderConfig"),Bqr.forEach(t),nXe=r(mMe," (Speech Encoder decoder model)"),mMe.forEach(t),sXe=i(v),cg=n(v,"LI",{});var gMe=s(cg);qK=n(gMe,"STRONG",{});var Pqr=s(qK);lXe=r(Pqr,"speech_to_text"),Pqr.forEach(t),iXe=r(gMe," \u2014 "),zx=n(gMe,"A",{href:!0});var $qr=s(zx);dXe=r($qr,"Speech2TextConfig"),$qr.forEach(t),cXe=r(gMe," (Speech2Text model)"),gMe.forEach(t),fXe=i(v),fg=n(v,"LI",{});var hMe=s(fg);NK=n(hMe,"STRONG",{});var Iqr=s(NK);mXe=r(Iqr,"speech_to_text_2"),Iqr.forEach(t),gXe=r(hMe," \u2014 "),Qx=n(hMe,"A",{href:!0});var qqr=s(Qx);hXe=r(qqr,"Speech2Text2Config"),qqr.forEach(t),pXe=r(hMe," (Speech2Text2 model)"),hMe.forEach(t),_Xe=i(v),mg=n(v,"LI",{});var pMe=s(mg);jK=n(pMe,"STRONG",{});var Nqr=s(jK);uXe=r(Nqr,"splinter"),Nqr.forEach(t),bXe=r(pMe," \u2014 "),Wx=n(pMe,"A",{href:!0});var jqr=s(Wx);FXe=r(jqr,"SplinterConfig"),jqr.forEach(t),vXe=r(pMe," (Splinter model)"),pMe.forEach(t),TXe=i(v),gg=n(v,"LI",{});var _Me=s(gg);DK=n(_Me,"STRONG",{});var Dqr=s(DK);MXe=r(Dqr,"squeezebert"),Dqr.forEach(t),EXe=r(_Me," \u2014 "),Hx=n(_Me,"A",{href:!0});var Gqr=s(Hx);CXe=r(Gqr,"SqueezeBertConfig"),Gqr.forEach(t),wXe=r(_Me," (SqueezeBERT model)"),_Me.forEach(t),AXe=i(v),hg=n(v,"LI",{});var uMe=s(hg);GK=n(uMe,"STRONG",{});var Oqr=s(GK);yXe=r(Oqr,"swin"),Oqr.forEach(t),LXe=r(uMe," \u2014 "),Ux=n(uMe,"A",{href:!0});var Vqr=s(Ux);xXe=r(Vqr,"SwinConfig"),Vqr.forEach(t),kXe=r(uMe," (Swin model)"),uMe.forEach(t),SXe=i(v),pg=n(v,"LI",{});var bMe=s(pg);OK=n(bMe,"STRONG",{});var Xqr=s(OK);RXe=r(Xqr,"t5"),Xqr.forEach(t),BXe=r(bMe," \u2014 "),Jx=n(bMe,"A",{href:!0});var zqr=s(Jx);PXe=r(zqr,"T5Config"),zqr.forEach(t),$Xe=r(bMe," (T5 model)"),bMe.forEach(t),IXe=i(v),_g=n(v,"LI",{});var FMe=s(_g);VK=n(FMe,"STRONG",{});var Qqr=s(VK);qXe=r(Qqr,"tapas"),Qqr.forEach(t),NXe=r(FMe," \u2014 "),Yx=n(FMe,"A",{href:!0});var Wqr=s(Yx);jXe=r(Wqr,"TapasConfig"),Wqr.forEach(t),DXe=r(FMe," (TAPAS model)"),FMe.forEach(t),GXe=i(v),ug=n(v,"LI",{});var vMe=s(ug);XK=n(vMe,"STRONG",{});var Hqr=s(XK);OXe=r(Hqr,"tapex"),Hqr.forEach(t),VXe=r(vMe," \u2014 "),Kx=n(vMe,"A",{href:!0});var Uqr=s(Kx);XXe=r(Uqr,"BartConfig"),Uqr.forEach(t),zXe=r(vMe," (TAPEX model)"),vMe.forEach(t),QXe=i(v),bg=n(v,"LI",{});var TMe=s(bg);zK=n(TMe,"STRONG",{});var Jqr=s(zK);WXe=r(Jqr,"transfo-xl"),Jqr.forEach(t),HXe=r(TMe," \u2014 "),Zx=n(TMe,"A",{href:!0});var Yqr=s(Zx);UXe=r(Yqr,"TransfoXLConfig"),Yqr.forEach(t),JXe=r(TMe," (Transformer-XL model)"),TMe.forEach(t),YXe=i(v),Fg=n(v,"LI",{});var MMe=s(Fg);QK=n(MMe,"STRONG",{});var Kqr=s(QK);KXe=r(Kqr,"trocr"),Kqr.forEach(t),ZXe=r(MMe," \u2014 "),ek=n(MMe,"A",{href:!0});var Zqr=s(ek);eze=r(Zqr,"TrOCRConfig"),Zqr.forEach(t),oze=r(MMe," (TrOCR model)"),MMe.forEach(t),rze=i(v),vg=n(v,"LI",{});var EMe=s(vg);WK=n(EMe,"STRONG",{});var eNr=s(WK);tze=r(eNr,"unispeech"),eNr.forEach(t),aze=r(EMe," \u2014 "),ok=n(EMe,"A",{href:!0});var oNr=s(ok);nze=r(oNr,"UniSpeechConfig"),oNr.forEach(t),sze=r(EMe," (UniSpeech model)"),EMe.forEach(t),lze=i(v),Tg=n(v,"LI",{});var CMe=s(Tg);HK=n(CMe,"STRONG",{});var rNr=s(HK);ize=r(rNr,"unispeech-sat"),rNr.forEach(t),dze=r(CMe," \u2014 "),rk=n(CMe,"A",{href:!0});var tNr=s(rk);cze=r(tNr,"UniSpeechSatConfig"),tNr.forEach(t),fze=r(CMe," (UniSpeechSat model)"),CMe.forEach(t),mze=i(v),Mg=n(v,"LI",{});var wMe=s(Mg);UK=n(wMe,"STRONG",{});var aNr=s(UK);gze=r(aNr,"van"),aNr.forEach(t),hze=r(wMe," \u2014 "),tk=n(wMe,"A",{href:!0});var nNr=s(tk);pze=r(nNr,"VanConfig"),nNr.forEach(t),_ze=r(wMe," (VAN model)"),wMe.forEach(t),uze=i(v),Eg=n(v,"LI",{});var AMe=s(Eg);JK=n(AMe,"STRONG",{});var sNr=s(JK);bze=r(sNr,"vilt"),sNr.forEach(t),Fze=r(AMe," \u2014 "),ak=n(AMe,"A",{href:!0});var lNr=s(ak);vze=r(lNr,"ViltConfig"),lNr.forEach(t),Tze=r(AMe," (ViLT model)"),AMe.forEach(t),Mze=i(v),Cg=n(v,"LI",{});var yMe=s(Cg);YK=n(yMe,"STRONG",{});var iNr=s(YK);Eze=r(iNr,"vision-encoder-decoder"),iNr.forEach(t),Cze=r(yMe," \u2014 "),nk=n(yMe,"A",{href:!0});var dNr=s(nk);wze=r(dNr,"VisionEncoderDecoderConfig"),dNr.forEach(t),Aze=r(yMe," (Vision Encoder decoder model)"),yMe.forEach(t),yze=i(v),wg=n(v,"LI",{});var LMe=s(wg);KK=n(LMe,"STRONG",{});var cNr=s(KK);Lze=r(cNr,"vision-text-dual-encoder"),cNr.forEach(t),xze=r(LMe," \u2014 "),sk=n(LMe,"A",{href:!0});var fNr=s(sk);kze=r(fNr,"VisionTextDualEncoderConfig"),fNr.forEach(t),Sze=r(LMe," (VisionTextDualEncoder model)"),LMe.forEach(t),Rze=i(v),Ag=n(v,"LI",{});var xMe=s(Ag);ZK=n(xMe,"STRONG",{});var mNr=s(ZK);Bze=r(mNr,"visual_bert"),mNr.forEach(t),Pze=r(xMe," \u2014 "),lk=n(xMe,"A",{href:!0});var gNr=s(lk);$ze=r(gNr,"VisualBertConfig"),gNr.forEach(t),Ize=r(xMe," (VisualBert model)"),xMe.forEach(t),qze=i(v),yg=n(v,"LI",{});var kMe=s(yg);eZ=n(kMe,"STRONG",{});var hNr=s(eZ);Nze=r(hNr,"vit"),hNr.forEach(t),jze=r(kMe," \u2014 "),ik=n(kMe,"A",{href:!0});var pNr=s(ik);Dze=r(pNr,"ViTConfig"),pNr.forEach(t),Gze=r(kMe," (ViT model)"),kMe.forEach(t),Oze=i(v),Lg=n(v,"LI",{});var SMe=s(Lg);oZ=n(SMe,"STRONG",{});var _Nr=s(oZ);Vze=r(_Nr,"vit_mae"),_Nr.forEach(t),Xze=r(SMe," \u2014 "),dk=n(SMe,"A",{href:!0});var uNr=s(dk);zze=r(uNr,"ViTMAEConfig"),uNr.forEach(t),Qze=r(SMe," (ViTMAE model)"),SMe.forEach(t),Wze=i(v),xg=n(v,"LI",{});var RMe=s(xg);rZ=n(RMe,"STRONG",{});var bNr=s(rZ);Hze=r(bNr,"wav2vec2"),bNr.forEach(t),Uze=r(RMe," \u2014 "),ck=n(RMe,"A",{href:!0});var FNr=s(ck);Jze=r(FNr,"Wav2Vec2Config"),FNr.forEach(t),Yze=r(RMe," (Wav2Vec2 model)"),RMe.forEach(t),Kze=i(v),kg=n(v,"LI",{});var BMe=s(kg);tZ=n(BMe,"STRONG",{});var vNr=s(tZ);Zze=r(vNr,"wavlm"),vNr.forEach(t),eQe=r(BMe," \u2014 "),fk=n(BMe,"A",{href:!0});var TNr=s(fk);oQe=r(TNr,"WavLMConfig"),TNr.forEach(t),rQe=r(BMe," (WavLM model)"),BMe.forEach(t),tQe=i(v),Sg=n(v,"LI",{});var PMe=s(Sg);aZ=n(PMe,"STRONG",{});var MNr=s(aZ);aQe=r(MNr,"xglm"),MNr.forEach(t),nQe=r(PMe," \u2014 "),mk=n(PMe,"A",{href:!0});var ENr=s(mk);sQe=r(ENr,"XGLMConfig"),ENr.forEach(t),lQe=r(PMe," (XGLM model)"),PMe.forEach(t),iQe=i(v),Rg=n(v,"LI",{});var $Me=s(Rg);nZ=n($Me,"STRONG",{});var CNr=s(nZ);dQe=r(CNr,"xlm"),CNr.forEach(t),cQe=r($Me," \u2014 "),gk=n($Me,"A",{href:!0});var wNr=s(gk);fQe=r(wNr,"XLMConfig"),wNr.forEach(t),mQe=r($Me," (XLM model)"),$Me.forEach(t),gQe=i(v),Bg=n(v,"LI",{});var IMe=s(Bg);sZ=n(IMe,"STRONG",{});var ANr=s(sZ);hQe=r(ANr,"xlm-prophetnet"),ANr.forEach(t),pQe=r(IMe," \u2014 "),hk=n(IMe,"A",{href:!0});var yNr=s(hk);_Qe=r(yNr,"XLMProphetNetConfig"),yNr.forEach(t),uQe=r(IMe," (XLMProphetNet model)"),IMe.forEach(t),bQe=i(v),Pg=n(v,"LI",{});var qMe=s(Pg);lZ=n(qMe,"STRONG",{});var LNr=s(lZ);FQe=r(LNr,"xlm-roberta"),LNr.forEach(t),vQe=r(qMe," \u2014 "),pk=n(qMe,"A",{href:!0});var xNr=s(pk);TQe=r(xNr,"XLMRobertaConfig"),xNr.forEach(t),MQe=r(qMe," (XLM-RoBERTa model)"),qMe.forEach(t),EQe=i(v),$g=n(v,"LI",{});var NMe=s($g);iZ=n(NMe,"STRONG",{});var kNr=s(iZ);CQe=r(kNr,"xlm-roberta-xl"),kNr.forEach(t),wQe=r(NMe," \u2014 "),_k=n(NMe,"A",{href:!0});var SNr=s(_k);AQe=r(SNr,"XLMRobertaXLConfig"),SNr.forEach(t),yQe=r(NMe," (XLM-RoBERTa-XL model)"),NMe.forEach(t),LQe=i(v),Ig=n(v,"LI",{});var jMe=s(Ig);dZ=n(jMe,"STRONG",{});var RNr=s(dZ);xQe=r(RNr,"xlnet"),RNr.forEach(t),kQe=r(jMe," \u2014 "),uk=n(jMe,"A",{href:!0});var BNr=s(uk);SQe=r(BNr,"XLNetConfig"),BNr.forEach(t),RQe=r(jMe," (XLNet model)"),jMe.forEach(t),BQe=i(v),qg=n(v,"LI",{});var DMe=s(qg);cZ=n(DMe,"STRONG",{});var PNr=s(cZ);PQe=r(PNr,"yoso"),PNr.forEach(t),$Qe=r(DMe," \u2014 "),bk=n(DMe,"A",{href:!0});var $Nr=s(bk);IQe=r($Nr,"YosoConfig"),$Nr.forEach(t),qQe=r(DMe," (YOSO model)"),DMe.forEach(t),v.forEach(t),NQe=i(ga),fZ=n(ga,"P",{});var INr=s(fZ);jQe=r(INr,"Examples:"),INr.forEach(t),DQe=i(ga),m(qC.$$.fragment,ga),ga.forEach(t),GQe=i(Os),Ng=n(Os,"DIV",{class:!0});var IPe=s(Ng);m(NC.$$.fragment,IPe),OQe=i(IPe),mZ=n(IPe,"P",{});var qNr=s(mZ);VQe=r(qNr,"Register a new configuration for this class."),qNr.forEach(t),IPe.forEach(t),Os.forEach(t),PRe=i(c),Qi=n(c,"H2",{class:!0});var qPe=s(Qi);jg=n(qPe,"A",{id:!0,class:!0,href:!0});var NNr=s(jg);gZ=n(NNr,"SPAN",{});var jNr=s(gZ);m(jC.$$.fragment,jNr),jNr.forEach(t),NNr.forEach(t),XQe=i(qPe),hZ=n(qPe,"SPAN",{});var DNr=s(hZ);zQe=r(DNr,"AutoTokenizer"),DNr.forEach(t),qPe.forEach(t),$Re=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(DC.$$.fragment,Vs),QQe=i(Vs),GC=n(Vs,"P",{});var NPe=s(GC);WQe=r(NPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Fk=n(NPe,"A",{href:!0});var GNr=s(Fk);HQe=r(GNr,"AutoTokenizer.from_pretrained()"),GNr.forEach(t),UQe=r(NPe," class method."),NPe.forEach(t),JQe=i(Vs),OC=n(Vs,"P",{});var jPe=s(OC);YQe=r(jPe,"This class cannot be instantiated directly using "),pZ=n(jPe,"CODE",{});var ONr=s(pZ);KQe=r(ONr,"__init__()"),ONr.forEach(t),ZQe=r(jPe," (throws an error)."),jPe.forEach(t),eWe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(VC.$$.fragment,ha),oWe=i(ha),_Z=n(ha,"P",{});var VNr=s(_Z);rWe=r(VNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VNr.forEach(t),tWe=i(ha),Oa=n(ha,"P",{});var LE=s(Oa);aWe=r(LE,"The tokenizer class to instantiate is selected based on the "),uZ=n(LE,"CODE",{});var XNr=s(uZ);nWe=r(XNr,"model_type"),XNr.forEach(t),sWe=r(LE,` property of the config object (either
passed as an argument or loaded from `),bZ=n(LE,"CODE",{});var zNr=s(bZ);lWe=r(zNr,"pretrained_model_name_or_path"),zNr.forEach(t),iWe=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FZ=n(LE,"CODE",{});var QNr=s(FZ);dWe=r(QNr,"pretrained_model_name_or_path"),QNr.forEach(t),cWe=r(LE,":"),LE.forEach(t),fWe=i(ha),E=n(ha,"UL",{});var C=s(E);Qn=n(C,"LI",{});var M8=s(Qn);vZ=n(M8,"STRONG",{});var WNr=s(vZ);mWe=r(WNr,"albert"),WNr.forEach(t),gWe=r(M8," \u2014 "),vk=n(M8,"A",{href:!0});var HNr=s(vk);hWe=r(HNr,"AlbertTokenizer"),HNr.forEach(t),pWe=r(M8," or "),Tk=n(M8,"A",{href:!0});var UNr=s(Tk);_We=r(UNr,"AlbertTokenizerFast"),UNr.forEach(t),uWe=r(M8," (ALBERT model)"),M8.forEach(t),bWe=i(C),Wn=n(C,"LI",{});var E8=s(Wn);TZ=n(E8,"STRONG",{});var JNr=s(TZ);FWe=r(JNr,"bart"),JNr.forEach(t),vWe=r(E8," \u2014 "),Mk=n(E8,"A",{href:!0});var YNr=s(Mk);TWe=r(YNr,"BartTokenizer"),YNr.forEach(t),MWe=r(E8," or "),Ek=n(E8,"A",{href:!0});var KNr=s(Ek);EWe=r(KNr,"BartTokenizerFast"),KNr.forEach(t),CWe=r(E8," (BART model)"),E8.forEach(t),wWe=i(C),Hn=n(C,"LI",{});var C8=s(Hn);MZ=n(C8,"STRONG",{});var ZNr=s(MZ);AWe=r(ZNr,"barthez"),ZNr.forEach(t),yWe=r(C8," \u2014 "),Ck=n(C8,"A",{href:!0});var ejr=s(Ck);LWe=r(ejr,"BarthezTokenizer"),ejr.forEach(t),xWe=r(C8," or "),wk=n(C8,"A",{href:!0});var ojr=s(wk);kWe=r(ojr,"BarthezTokenizerFast"),ojr.forEach(t),SWe=r(C8," (BARThez model)"),C8.forEach(t),RWe=i(C),Dg=n(C,"LI",{});var GMe=s(Dg);EZ=n(GMe,"STRONG",{});var rjr=s(EZ);BWe=r(rjr,"bartpho"),rjr.forEach(t),PWe=r(GMe," \u2014 "),Ak=n(GMe,"A",{href:!0});var tjr=s(Ak);$We=r(tjr,"BartphoTokenizer"),tjr.forEach(t),IWe=r(GMe," (BARTpho model)"),GMe.forEach(t),qWe=i(C),Un=n(C,"LI",{});var w8=s(Un);CZ=n(w8,"STRONG",{});var ajr=s(CZ);NWe=r(ajr,"bert"),ajr.forEach(t),jWe=r(w8," \u2014 "),yk=n(w8,"A",{href:!0});var njr=s(yk);DWe=r(njr,"BertTokenizer"),njr.forEach(t),GWe=r(w8," or "),Lk=n(w8,"A",{href:!0});var sjr=s(Lk);OWe=r(sjr,"BertTokenizerFast"),sjr.forEach(t),VWe=r(w8," (BERT model)"),w8.forEach(t),XWe=i(C),Gg=n(C,"LI",{});var OMe=s(Gg);wZ=n(OMe,"STRONG",{});var ljr=s(wZ);zWe=r(ljr,"bert-generation"),ljr.forEach(t),QWe=r(OMe," \u2014 "),xk=n(OMe,"A",{href:!0});var ijr=s(xk);WWe=r(ijr,"BertGenerationTokenizer"),ijr.forEach(t),HWe=r(OMe," (Bert Generation model)"),OMe.forEach(t),UWe=i(C),Og=n(C,"LI",{});var VMe=s(Og);AZ=n(VMe,"STRONG",{});var djr=s(AZ);JWe=r(djr,"bert-japanese"),djr.forEach(t),YWe=r(VMe," \u2014 "),kk=n(VMe,"A",{href:!0});var cjr=s(kk);KWe=r(cjr,"BertJapaneseTokenizer"),cjr.forEach(t),ZWe=r(VMe," (BertJapanese model)"),VMe.forEach(t),eHe=i(C),Vg=n(C,"LI",{});var XMe=s(Vg);yZ=n(XMe,"STRONG",{});var fjr=s(yZ);oHe=r(fjr,"bertweet"),fjr.forEach(t),rHe=r(XMe," \u2014 "),Sk=n(XMe,"A",{href:!0});var mjr=s(Sk);tHe=r(mjr,"BertweetTokenizer"),mjr.forEach(t),aHe=r(XMe," (Bertweet model)"),XMe.forEach(t),nHe=i(C),Jn=n(C,"LI",{});var A8=s(Jn);LZ=n(A8,"STRONG",{});var gjr=s(LZ);sHe=r(gjr,"big_bird"),gjr.forEach(t),lHe=r(A8," \u2014 "),Rk=n(A8,"A",{href:!0});var hjr=s(Rk);iHe=r(hjr,"BigBirdTokenizer"),hjr.forEach(t),dHe=r(A8," or "),Bk=n(A8,"A",{href:!0});var pjr=s(Bk);cHe=r(pjr,"BigBirdTokenizerFast"),pjr.forEach(t),fHe=r(A8," (BigBird model)"),A8.forEach(t),mHe=i(C),Yn=n(C,"LI",{});var y8=s(Yn);xZ=n(y8,"STRONG",{});var _jr=s(xZ);gHe=r(_jr,"bigbird_pegasus"),_jr.forEach(t),hHe=r(y8," \u2014 "),Pk=n(y8,"A",{href:!0});var ujr=s(Pk);pHe=r(ujr,"PegasusTokenizer"),ujr.forEach(t),_He=r(y8," or "),$k=n(y8,"A",{href:!0});var bjr=s($k);uHe=r(bjr,"PegasusTokenizerFast"),bjr.forEach(t),bHe=r(y8," (BigBirdPegasus model)"),y8.forEach(t),FHe=i(C),Kn=n(C,"LI",{});var L8=s(Kn);kZ=n(L8,"STRONG",{});var Fjr=s(kZ);vHe=r(Fjr,"blenderbot"),Fjr.forEach(t),THe=r(L8," \u2014 "),Ik=n(L8,"A",{href:!0});var vjr=s(Ik);MHe=r(vjr,"BlenderbotTokenizer"),vjr.forEach(t),EHe=r(L8," or "),qk=n(L8,"A",{href:!0});var Tjr=s(qk);CHe=r(Tjr,"BlenderbotTokenizerFast"),Tjr.forEach(t),wHe=r(L8," (Blenderbot model)"),L8.forEach(t),AHe=i(C),Xg=n(C,"LI",{});var zMe=s(Xg);SZ=n(zMe,"STRONG",{});var Mjr=s(SZ);yHe=r(Mjr,"blenderbot-small"),Mjr.forEach(t),LHe=r(zMe," \u2014 "),Nk=n(zMe,"A",{href:!0});var Ejr=s(Nk);xHe=r(Ejr,"BlenderbotSmallTokenizer"),Ejr.forEach(t),kHe=r(zMe," (BlenderbotSmall model)"),zMe.forEach(t),SHe=i(C),zg=n(C,"LI",{});var QMe=s(zg);RZ=n(QMe,"STRONG",{});var Cjr=s(RZ);RHe=r(Cjr,"byt5"),Cjr.forEach(t),BHe=r(QMe," \u2014 "),jk=n(QMe,"A",{href:!0});var wjr=s(jk);PHe=r(wjr,"ByT5Tokenizer"),wjr.forEach(t),$He=r(QMe," (ByT5 model)"),QMe.forEach(t),IHe=i(C),Zn=n(C,"LI",{});var x8=s(Zn);BZ=n(x8,"STRONG",{});var Ajr=s(BZ);qHe=r(Ajr,"camembert"),Ajr.forEach(t),NHe=r(x8," \u2014 "),Dk=n(x8,"A",{href:!0});var yjr=s(Dk);jHe=r(yjr,"CamembertTokenizer"),yjr.forEach(t),DHe=r(x8," or "),Gk=n(x8,"A",{href:!0});var Ljr=s(Gk);GHe=r(Ljr,"CamembertTokenizerFast"),Ljr.forEach(t),OHe=r(x8," (CamemBERT model)"),x8.forEach(t),VHe=i(C),Qg=n(C,"LI",{});var WMe=s(Qg);PZ=n(WMe,"STRONG",{});var xjr=s(PZ);XHe=r(xjr,"canine"),xjr.forEach(t),zHe=r(WMe," \u2014 "),Ok=n(WMe,"A",{href:!0});var kjr=s(Ok);QHe=r(kjr,"CanineTokenizer"),kjr.forEach(t),WHe=r(WMe," (Canine model)"),WMe.forEach(t),HHe=i(C),es=n(C,"LI",{});var k8=s(es);$Z=n(k8,"STRONG",{});var Sjr=s($Z);UHe=r(Sjr,"clip"),Sjr.forEach(t),JHe=r(k8," \u2014 "),Vk=n(k8,"A",{href:!0});var Rjr=s(Vk);YHe=r(Rjr,"CLIPTokenizer"),Rjr.forEach(t),KHe=r(k8," or "),Xk=n(k8,"A",{href:!0});var Bjr=s(Xk);ZHe=r(Bjr,"CLIPTokenizerFast"),Bjr.forEach(t),eUe=r(k8," (CLIP model)"),k8.forEach(t),oUe=i(C),os=n(C,"LI",{});var S8=s(os);IZ=n(S8,"STRONG",{});var Pjr=s(IZ);rUe=r(Pjr,"convbert"),Pjr.forEach(t),tUe=r(S8," \u2014 "),zk=n(S8,"A",{href:!0});var $jr=s(zk);aUe=r($jr,"ConvBertTokenizer"),$jr.forEach(t),nUe=r(S8," or "),Qk=n(S8,"A",{href:!0});var Ijr=s(Qk);sUe=r(Ijr,"ConvBertTokenizerFast"),Ijr.forEach(t),lUe=r(S8," (ConvBERT model)"),S8.forEach(t),iUe=i(C),rs=n(C,"LI",{});var R8=s(rs);qZ=n(R8,"STRONG",{});var qjr=s(qZ);dUe=r(qjr,"cpm"),qjr.forEach(t),cUe=r(R8," \u2014 "),Wk=n(R8,"A",{href:!0});var Njr=s(Wk);fUe=r(Njr,"CpmTokenizer"),Njr.forEach(t),mUe=r(R8," or "),NZ=n(R8,"CODE",{});var jjr=s(NZ);gUe=r(jjr,"CpmTokenizerFast"),jjr.forEach(t),hUe=r(R8," (CPM model)"),R8.forEach(t),pUe=i(C),Wg=n(C,"LI",{});var HMe=s(Wg);jZ=n(HMe,"STRONG",{});var Djr=s(jZ);_Ue=r(Djr,"ctrl"),Djr.forEach(t),uUe=r(HMe," \u2014 "),Hk=n(HMe,"A",{href:!0});var Gjr=s(Hk);bUe=r(Gjr,"CTRLTokenizer"),Gjr.forEach(t),FUe=r(HMe," (CTRL model)"),HMe.forEach(t),vUe=i(C),ts=n(C,"LI",{});var B8=s(ts);DZ=n(B8,"STRONG",{});var Ojr=s(DZ);TUe=r(Ojr,"deberta"),Ojr.forEach(t),MUe=r(B8," \u2014 "),Uk=n(B8,"A",{href:!0});var Vjr=s(Uk);EUe=r(Vjr,"DebertaTokenizer"),Vjr.forEach(t),CUe=r(B8," or "),Jk=n(B8,"A",{href:!0});var Xjr=s(Jk);wUe=r(Xjr,"DebertaTokenizerFast"),Xjr.forEach(t),AUe=r(B8," (DeBERTa model)"),B8.forEach(t),yUe=i(C),Hg=n(C,"LI",{});var UMe=s(Hg);GZ=n(UMe,"STRONG",{});var zjr=s(GZ);LUe=r(zjr,"deberta-v2"),zjr.forEach(t),xUe=r(UMe," \u2014 "),Yk=n(UMe,"A",{href:!0});var Qjr=s(Yk);kUe=r(Qjr,"DebertaV2Tokenizer"),Qjr.forEach(t),SUe=r(UMe," (DeBERTa-v2 model)"),UMe.forEach(t),RUe=i(C),as=n(C,"LI",{});var P8=s(as);OZ=n(P8,"STRONG",{});var Wjr=s(OZ);BUe=r(Wjr,"distilbert"),Wjr.forEach(t),PUe=r(P8," \u2014 "),Kk=n(P8,"A",{href:!0});var Hjr=s(Kk);$Ue=r(Hjr,"DistilBertTokenizer"),Hjr.forEach(t),IUe=r(P8," or "),Zk=n(P8,"A",{href:!0});var Ujr=s(Zk);qUe=r(Ujr,"DistilBertTokenizerFast"),Ujr.forEach(t),NUe=r(P8," (DistilBERT model)"),P8.forEach(t),jUe=i(C),ns=n(C,"LI",{});var $8=s(ns);VZ=n($8,"STRONG",{});var Jjr=s(VZ);DUe=r(Jjr,"dpr"),Jjr.forEach(t),GUe=r($8," \u2014 "),eS=n($8,"A",{href:!0});var Yjr=s(eS);OUe=r(Yjr,"DPRQuestionEncoderTokenizer"),Yjr.forEach(t),VUe=r($8," or "),oS=n($8,"A",{href:!0});var Kjr=s(oS);XUe=r(Kjr,"DPRQuestionEncoderTokenizerFast"),Kjr.forEach(t),zUe=r($8," (DPR model)"),$8.forEach(t),QUe=i(C),ss=n(C,"LI",{});var I8=s(ss);XZ=n(I8,"STRONG",{});var Zjr=s(XZ);WUe=r(Zjr,"electra"),Zjr.forEach(t),HUe=r(I8," \u2014 "),rS=n(I8,"A",{href:!0});var eDr=s(rS);UUe=r(eDr,"ElectraTokenizer"),eDr.forEach(t),JUe=r(I8," or "),tS=n(I8,"A",{href:!0});var oDr=s(tS);YUe=r(oDr,"ElectraTokenizerFast"),oDr.forEach(t),KUe=r(I8," (ELECTRA model)"),I8.forEach(t),ZUe=i(C),Ug=n(C,"LI",{});var JMe=s(Ug);zZ=n(JMe,"STRONG",{});var rDr=s(zZ);eJe=r(rDr,"fastspeech2"),rDr.forEach(t),oJe=r(JMe," \u2014 "),aS=n(JMe,"A",{href:!0});var tDr=s(aS);rJe=r(tDr,"FastSpeech2Tokenizer"),tDr.forEach(t),tJe=r(JMe," (FastSpeech2 model)"),JMe.forEach(t),aJe=i(C),Jg=n(C,"LI",{});var YMe=s(Jg);QZ=n(YMe,"STRONG",{});var aDr=s(QZ);nJe=r(aDr,"flaubert"),aDr.forEach(t),sJe=r(YMe," \u2014 "),nS=n(YMe,"A",{href:!0});var nDr=s(nS);lJe=r(nDr,"FlaubertTokenizer"),nDr.forEach(t),iJe=r(YMe," (FlauBERT model)"),YMe.forEach(t),dJe=i(C),ls=n(C,"LI",{});var q8=s(ls);WZ=n(q8,"STRONG",{});var sDr=s(WZ);cJe=r(sDr,"fnet"),sDr.forEach(t),fJe=r(q8," \u2014 "),sS=n(q8,"A",{href:!0});var lDr=s(sS);mJe=r(lDr,"FNetTokenizer"),lDr.forEach(t),gJe=r(q8," or "),lS=n(q8,"A",{href:!0});var iDr=s(lS);hJe=r(iDr,"FNetTokenizerFast"),iDr.forEach(t),pJe=r(q8," (FNet model)"),q8.forEach(t),_Je=i(C),Yg=n(C,"LI",{});var KMe=s(Yg);HZ=n(KMe,"STRONG",{});var dDr=s(HZ);uJe=r(dDr,"fsmt"),dDr.forEach(t),bJe=r(KMe," \u2014 "),iS=n(KMe,"A",{href:!0});var cDr=s(iS);FJe=r(cDr,"FSMTTokenizer"),cDr.forEach(t),vJe=r(KMe," (FairSeq Machine-Translation model)"),KMe.forEach(t),TJe=i(C),is=n(C,"LI",{});var N8=s(is);UZ=n(N8,"STRONG",{});var fDr=s(UZ);MJe=r(fDr,"funnel"),fDr.forEach(t),EJe=r(N8," \u2014 "),dS=n(N8,"A",{href:!0});var mDr=s(dS);CJe=r(mDr,"FunnelTokenizer"),mDr.forEach(t),wJe=r(N8," or "),cS=n(N8,"A",{href:!0});var gDr=s(cS);AJe=r(gDr,"FunnelTokenizerFast"),gDr.forEach(t),yJe=r(N8," (Funnel Transformer model)"),N8.forEach(t),LJe=i(C),ds=n(C,"LI",{});var j8=s(ds);JZ=n(j8,"STRONG",{});var hDr=s(JZ);xJe=r(hDr,"gpt2"),hDr.forEach(t),kJe=r(j8," \u2014 "),fS=n(j8,"A",{href:!0});var pDr=s(fS);SJe=r(pDr,"GPT2Tokenizer"),pDr.forEach(t),RJe=r(j8," or "),mS=n(j8,"A",{href:!0});var _Dr=s(mS);BJe=r(_Dr,"GPT2TokenizerFast"),_Dr.forEach(t),PJe=r(j8," (OpenAI GPT-2 model)"),j8.forEach(t),$Je=i(C),cs=n(C,"LI",{});var D8=s(cs);YZ=n(D8,"STRONG",{});var uDr=s(YZ);IJe=r(uDr,"gpt_neo"),uDr.forEach(t),qJe=r(D8," \u2014 "),gS=n(D8,"A",{href:!0});var bDr=s(gS);NJe=r(bDr,"GPT2Tokenizer"),bDr.forEach(t),jJe=r(D8," or "),hS=n(D8,"A",{href:!0});var FDr=s(hS);DJe=r(FDr,"GPT2TokenizerFast"),FDr.forEach(t),GJe=r(D8," (GPT Neo model)"),D8.forEach(t),OJe=i(C),fs=n(C,"LI",{});var G8=s(fs);KZ=n(G8,"STRONG",{});var vDr=s(KZ);VJe=r(vDr,"herbert"),vDr.forEach(t),XJe=r(G8," \u2014 "),pS=n(G8,"A",{href:!0});var TDr=s(pS);zJe=r(TDr,"HerbertTokenizer"),TDr.forEach(t),QJe=r(G8," or "),_S=n(G8,"A",{href:!0});var MDr=s(_S);WJe=r(MDr,"HerbertTokenizerFast"),MDr.forEach(t),HJe=r(G8," (HerBERT model)"),G8.forEach(t),UJe=i(C),Kg=n(C,"LI",{});var ZMe=s(Kg);ZZ=n(ZMe,"STRONG",{});var EDr=s(ZZ);JJe=r(EDr,"hubert"),EDr.forEach(t),YJe=r(ZMe," \u2014 "),uS=n(ZMe,"A",{href:!0});var CDr=s(uS);KJe=r(CDr,"Wav2Vec2CTCTokenizer"),CDr.forEach(t),ZJe=r(ZMe," (Hubert model)"),ZMe.forEach(t),eYe=i(C),ms=n(C,"LI",{});var O8=s(ms);eee=n(O8,"STRONG",{});var wDr=s(eee);oYe=r(wDr,"ibert"),wDr.forEach(t),rYe=r(O8," \u2014 "),bS=n(O8,"A",{href:!0});var ADr=s(bS);tYe=r(ADr,"RobertaTokenizer"),ADr.forEach(t),aYe=r(O8," or "),FS=n(O8,"A",{href:!0});var yDr=s(FS);nYe=r(yDr,"RobertaTokenizerFast"),yDr.forEach(t),sYe=r(O8," (I-BERT model)"),O8.forEach(t),lYe=i(C),gs=n(C,"LI",{});var V8=s(gs);oee=n(V8,"STRONG",{});var LDr=s(oee);iYe=r(LDr,"layoutlm"),LDr.forEach(t),dYe=r(V8," \u2014 "),vS=n(V8,"A",{href:!0});var xDr=s(vS);cYe=r(xDr,"LayoutLMTokenizer"),xDr.forEach(t),fYe=r(V8," or "),TS=n(V8,"A",{href:!0});var kDr=s(TS);mYe=r(kDr,"LayoutLMTokenizerFast"),kDr.forEach(t),gYe=r(V8," (LayoutLM model)"),V8.forEach(t),hYe=i(C),hs=n(C,"LI",{});var X8=s(hs);ree=n(X8,"STRONG",{});var SDr=s(ree);pYe=r(SDr,"layoutlmv2"),SDr.forEach(t),_Ye=r(X8," \u2014 "),MS=n(X8,"A",{href:!0});var RDr=s(MS);uYe=r(RDr,"LayoutLMv2Tokenizer"),RDr.forEach(t),bYe=r(X8," or "),ES=n(X8,"A",{href:!0});var BDr=s(ES);FYe=r(BDr,"LayoutLMv2TokenizerFast"),BDr.forEach(t),vYe=r(X8," (LayoutLMv2 model)"),X8.forEach(t),TYe=i(C),ps=n(C,"LI",{});var z8=s(ps);tee=n(z8,"STRONG",{});var PDr=s(tee);MYe=r(PDr,"layoutxlm"),PDr.forEach(t),EYe=r(z8," \u2014 "),CS=n(z8,"A",{href:!0});var $Dr=s(CS);CYe=r($Dr,"LayoutXLMTokenizer"),$Dr.forEach(t),wYe=r(z8," or "),wS=n(z8,"A",{href:!0});var IDr=s(wS);AYe=r(IDr,"LayoutXLMTokenizerFast"),IDr.forEach(t),yYe=r(z8," (LayoutXLM model)"),z8.forEach(t),LYe=i(C),_s=n(C,"LI",{});var Q8=s(_s);aee=n(Q8,"STRONG",{});var qDr=s(aee);xYe=r(qDr,"led"),qDr.forEach(t),kYe=r(Q8," \u2014 "),AS=n(Q8,"A",{href:!0});var NDr=s(AS);SYe=r(NDr,"LEDTokenizer"),NDr.forEach(t),RYe=r(Q8," or "),yS=n(Q8,"A",{href:!0});var jDr=s(yS);BYe=r(jDr,"LEDTokenizerFast"),jDr.forEach(t),PYe=r(Q8," (LED model)"),Q8.forEach(t),$Ye=i(C),us=n(C,"LI",{});var W8=s(us);nee=n(W8,"STRONG",{});var DDr=s(nee);IYe=r(DDr,"longformer"),DDr.forEach(t),qYe=r(W8," \u2014 "),LS=n(W8,"A",{href:!0});var GDr=s(LS);NYe=r(GDr,"LongformerTokenizer"),GDr.forEach(t),jYe=r(W8," or "),xS=n(W8,"A",{href:!0});var ODr=s(xS);DYe=r(ODr,"LongformerTokenizerFast"),ODr.forEach(t),GYe=r(W8," (Longformer model)"),W8.forEach(t),OYe=i(C),Zg=n(C,"LI",{});var e4e=s(Zg);see=n(e4e,"STRONG",{});var VDr=s(see);VYe=r(VDr,"luke"),VDr.forEach(t),XYe=r(e4e," \u2014 "),kS=n(e4e,"A",{href:!0});var XDr=s(kS);zYe=r(XDr,"LukeTokenizer"),XDr.forEach(t),QYe=r(e4e," (LUKE model)"),e4e.forEach(t),WYe=i(C),bs=n(C,"LI",{});var H8=s(bs);lee=n(H8,"STRONG",{});var zDr=s(lee);HYe=r(zDr,"lxmert"),zDr.forEach(t),UYe=r(H8," \u2014 "),SS=n(H8,"A",{href:!0});var QDr=s(SS);JYe=r(QDr,"LxmertTokenizer"),QDr.forEach(t),YYe=r(H8," or "),RS=n(H8,"A",{href:!0});var WDr=s(RS);KYe=r(WDr,"LxmertTokenizerFast"),WDr.forEach(t),ZYe=r(H8," (LXMERT model)"),H8.forEach(t),eKe=i(C),eh=n(C,"LI",{});var o4e=s(eh);iee=n(o4e,"STRONG",{});var HDr=s(iee);oKe=r(HDr,"m2m_100"),HDr.forEach(t),rKe=r(o4e," \u2014 "),BS=n(o4e,"A",{href:!0});var UDr=s(BS);tKe=r(UDr,"M2M100Tokenizer"),UDr.forEach(t),aKe=r(o4e," (M2M100 model)"),o4e.forEach(t),nKe=i(C),oh=n(C,"LI",{});var r4e=s(oh);dee=n(r4e,"STRONG",{});var JDr=s(dee);sKe=r(JDr,"marian"),JDr.forEach(t),lKe=r(r4e," \u2014 "),PS=n(r4e,"A",{href:!0});var YDr=s(PS);iKe=r(YDr,"MarianTokenizer"),YDr.forEach(t),dKe=r(r4e," (Marian model)"),r4e.forEach(t),cKe=i(C),Fs=n(C,"LI",{});var U8=s(Fs);cee=n(U8,"STRONG",{});var KDr=s(cee);fKe=r(KDr,"mbart"),KDr.forEach(t),mKe=r(U8," \u2014 "),$S=n(U8,"A",{href:!0});var ZDr=s($S);gKe=r(ZDr,"MBartTokenizer"),ZDr.forEach(t),hKe=r(U8," or "),IS=n(U8,"A",{href:!0});var eGr=s(IS);pKe=r(eGr,"MBartTokenizerFast"),eGr.forEach(t),_Ke=r(U8," (mBART model)"),U8.forEach(t),uKe=i(C),vs=n(C,"LI",{});var J8=s(vs);fee=n(J8,"STRONG",{});var oGr=s(fee);bKe=r(oGr,"mbart50"),oGr.forEach(t),FKe=r(J8," \u2014 "),qS=n(J8,"A",{href:!0});var rGr=s(qS);vKe=r(rGr,"MBart50Tokenizer"),rGr.forEach(t),TKe=r(J8," or "),NS=n(J8,"A",{href:!0});var tGr=s(NS);MKe=r(tGr,"MBart50TokenizerFast"),tGr.forEach(t),EKe=r(J8," (mBART-50 model)"),J8.forEach(t),CKe=i(C),rh=n(C,"LI",{});var t4e=s(rh);mee=n(t4e,"STRONG",{});var aGr=s(mee);wKe=r(aGr,"mluke"),aGr.forEach(t),AKe=r(t4e," \u2014 "),jS=n(t4e,"A",{href:!0});var nGr=s(jS);yKe=r(nGr,"MLukeTokenizer"),nGr.forEach(t),LKe=r(t4e," (mLUKE model)"),t4e.forEach(t),xKe=i(C),Ts=n(C,"LI",{});var Y8=s(Ts);gee=n(Y8,"STRONG",{});var sGr=s(gee);kKe=r(sGr,"mobilebert"),sGr.forEach(t),SKe=r(Y8," \u2014 "),DS=n(Y8,"A",{href:!0});var lGr=s(DS);RKe=r(lGr,"MobileBertTokenizer"),lGr.forEach(t),BKe=r(Y8," or "),GS=n(Y8,"A",{href:!0});var iGr=s(GS);PKe=r(iGr,"MobileBertTokenizerFast"),iGr.forEach(t),$Ke=r(Y8," (MobileBERT model)"),Y8.forEach(t),IKe=i(C),Ms=n(C,"LI",{});var K8=s(Ms);hee=n(K8,"STRONG",{});var dGr=s(hee);qKe=r(dGr,"mpnet"),dGr.forEach(t),NKe=r(K8," \u2014 "),OS=n(K8,"A",{href:!0});var cGr=s(OS);jKe=r(cGr,"MPNetTokenizer"),cGr.forEach(t),DKe=r(K8," or "),VS=n(K8,"A",{href:!0});var fGr=s(VS);GKe=r(fGr,"MPNetTokenizerFast"),fGr.forEach(t),OKe=r(K8," (MPNet model)"),K8.forEach(t),VKe=i(C),Es=n(C,"LI",{});var Z8=s(Es);pee=n(Z8,"STRONG",{});var mGr=s(pee);XKe=r(mGr,"mt5"),mGr.forEach(t),zKe=r(Z8," \u2014 "),XS=n(Z8,"A",{href:!0});var gGr=s(XS);QKe=r(gGr,"MT5Tokenizer"),gGr.forEach(t),WKe=r(Z8," or "),zS=n(Z8,"A",{href:!0});var hGr=s(zS);HKe=r(hGr,"MT5TokenizerFast"),hGr.forEach(t),UKe=r(Z8," (mT5 model)"),Z8.forEach(t),JKe=i(C),Cs=n(C,"LI",{});var e9=s(Cs);_ee=n(e9,"STRONG",{});var pGr=s(_ee);YKe=r(pGr,"openai-gpt"),pGr.forEach(t),KKe=r(e9," \u2014 "),QS=n(e9,"A",{href:!0});var _Gr=s(QS);ZKe=r(_Gr,"OpenAIGPTTokenizer"),_Gr.forEach(t),eZe=r(e9," or "),WS=n(e9,"A",{href:!0});var uGr=s(WS);oZe=r(uGr,"OpenAIGPTTokenizerFast"),uGr.forEach(t),rZe=r(e9," (OpenAI GPT model)"),e9.forEach(t),tZe=i(C),ws=n(C,"LI",{});var o9=s(ws);uee=n(o9,"STRONG",{});var bGr=s(uee);aZe=r(bGr,"pegasus"),bGr.forEach(t),nZe=r(o9," \u2014 "),HS=n(o9,"A",{href:!0});var FGr=s(HS);sZe=r(FGr,"PegasusTokenizer"),FGr.forEach(t),lZe=r(o9," or "),US=n(o9,"A",{href:!0});var vGr=s(US);iZe=r(vGr,"PegasusTokenizerFast"),vGr.forEach(t),dZe=r(o9," (Pegasus model)"),o9.forEach(t),cZe=i(C),th=n(C,"LI",{});var a4e=s(th);bee=n(a4e,"STRONG",{});var TGr=s(bee);fZe=r(TGr,"perceiver"),TGr.forEach(t),mZe=r(a4e," \u2014 "),JS=n(a4e,"A",{href:!0});var MGr=s(JS);gZe=r(MGr,"PerceiverTokenizer"),MGr.forEach(t),hZe=r(a4e," (Perceiver model)"),a4e.forEach(t),pZe=i(C),ah=n(C,"LI",{});var n4e=s(ah);Fee=n(n4e,"STRONG",{});var EGr=s(Fee);_Ze=r(EGr,"phobert"),EGr.forEach(t),uZe=r(n4e," \u2014 "),YS=n(n4e,"A",{href:!0});var CGr=s(YS);bZe=r(CGr,"PhobertTokenizer"),CGr.forEach(t),FZe=r(n4e," (PhoBERT model)"),n4e.forEach(t),vZe=i(C),nh=n(C,"LI",{});var s4e=s(nh);vee=n(s4e,"STRONG",{});var wGr=s(vee);TZe=r(wGr,"plbart"),wGr.forEach(t),MZe=r(s4e," \u2014 "),KS=n(s4e,"A",{href:!0});var AGr=s(KS);EZe=r(AGr,"PLBartTokenizer"),AGr.forEach(t),CZe=r(s4e," (PLBart model)"),s4e.forEach(t),wZe=i(C),sh=n(C,"LI",{});var l4e=s(sh);Tee=n(l4e,"STRONG",{});var yGr=s(Tee);AZe=r(yGr,"prophetnet"),yGr.forEach(t),yZe=r(l4e," \u2014 "),ZS=n(l4e,"A",{href:!0});var LGr=s(ZS);LZe=r(LGr,"ProphetNetTokenizer"),LGr.forEach(t),xZe=r(l4e," (ProphetNet model)"),l4e.forEach(t),kZe=i(C),As=n(C,"LI",{});var r9=s(As);Mee=n(r9,"STRONG",{});var xGr=s(Mee);SZe=r(xGr,"qdqbert"),xGr.forEach(t),RZe=r(r9," \u2014 "),eR=n(r9,"A",{href:!0});var kGr=s(eR);BZe=r(kGr,"BertTokenizer"),kGr.forEach(t),PZe=r(r9," or "),oR=n(r9,"A",{href:!0});var SGr=s(oR);$Ze=r(SGr,"BertTokenizerFast"),SGr.forEach(t),IZe=r(r9," (QDQBert model)"),r9.forEach(t),qZe=i(C),lh=n(C,"LI",{});var i4e=s(lh);Eee=n(i4e,"STRONG",{});var RGr=s(Eee);NZe=r(RGr,"rag"),RGr.forEach(t),jZe=r(i4e," \u2014 "),rR=n(i4e,"A",{href:!0});var BGr=s(rR);DZe=r(BGr,"RagTokenizer"),BGr.forEach(t),GZe=r(i4e," (RAG model)"),i4e.forEach(t),OZe=i(C),ys=n(C,"LI",{});var t9=s(ys);Cee=n(t9,"STRONG",{});var PGr=s(Cee);VZe=r(PGr,"realm"),PGr.forEach(t),XZe=r(t9," \u2014 "),tR=n(t9,"A",{href:!0});var $Gr=s(tR);zZe=r($Gr,"RealmTokenizer"),$Gr.forEach(t),QZe=r(t9," or "),aR=n(t9,"A",{href:!0});var IGr=s(aR);WZe=r(IGr,"RealmTokenizerFast"),IGr.forEach(t),HZe=r(t9," (Realm model)"),t9.forEach(t),UZe=i(C),Ls=n(C,"LI",{});var a9=s(Ls);wee=n(a9,"STRONG",{});var qGr=s(wee);JZe=r(qGr,"reformer"),qGr.forEach(t),YZe=r(a9," \u2014 "),nR=n(a9,"A",{href:!0});var NGr=s(nR);KZe=r(NGr,"ReformerTokenizer"),NGr.forEach(t),ZZe=r(a9," or "),sR=n(a9,"A",{href:!0});var jGr=s(sR);eeo=r(jGr,"ReformerTokenizerFast"),jGr.forEach(t),oeo=r(a9," (Reformer model)"),a9.forEach(t),reo=i(C),xs=n(C,"LI",{});var n9=s(xs);Aee=n(n9,"STRONG",{});var DGr=s(Aee);teo=r(DGr,"rembert"),DGr.forEach(t),aeo=r(n9," \u2014 "),lR=n(n9,"A",{href:!0});var GGr=s(lR);neo=r(GGr,"RemBertTokenizer"),GGr.forEach(t),seo=r(n9," or "),iR=n(n9,"A",{href:!0});var OGr=s(iR);leo=r(OGr,"RemBertTokenizerFast"),OGr.forEach(t),ieo=r(n9," (RemBERT model)"),n9.forEach(t),deo=i(C),ks=n(C,"LI",{});var s9=s(ks);yee=n(s9,"STRONG",{});var VGr=s(yee);ceo=r(VGr,"retribert"),VGr.forEach(t),feo=r(s9," \u2014 "),dR=n(s9,"A",{href:!0});var XGr=s(dR);meo=r(XGr,"RetriBertTokenizer"),XGr.forEach(t),geo=r(s9," or "),cR=n(s9,"A",{href:!0});var zGr=s(cR);heo=r(zGr,"RetriBertTokenizerFast"),zGr.forEach(t),peo=r(s9," (RetriBERT model)"),s9.forEach(t),_eo=i(C),Ss=n(C,"LI",{});var l9=s(Ss);Lee=n(l9,"STRONG",{});var QGr=s(Lee);ueo=r(QGr,"roberta"),QGr.forEach(t),beo=r(l9," \u2014 "),fR=n(l9,"A",{href:!0});var WGr=s(fR);Feo=r(WGr,"RobertaTokenizer"),WGr.forEach(t),veo=r(l9," or "),mR=n(l9,"A",{href:!0});var HGr=s(mR);Teo=r(HGr,"RobertaTokenizerFast"),HGr.forEach(t),Meo=r(l9," (RoBERTa model)"),l9.forEach(t),Eeo=i(C),Rs=n(C,"LI",{});var i9=s(Rs);xee=n(i9,"STRONG",{});var UGr=s(xee);Ceo=r(UGr,"roformer"),UGr.forEach(t),weo=r(i9," \u2014 "),gR=n(i9,"A",{href:!0});var JGr=s(gR);Aeo=r(JGr,"RoFormerTokenizer"),JGr.forEach(t),yeo=r(i9," or "),hR=n(i9,"A",{href:!0});var YGr=s(hR);Leo=r(YGr,"RoFormerTokenizerFast"),YGr.forEach(t),xeo=r(i9," (RoFormer model)"),i9.forEach(t),keo=i(C),ih=n(C,"LI",{});var d4e=s(ih);kee=n(d4e,"STRONG",{});var KGr=s(kee);Seo=r(KGr,"speech_to_text"),KGr.forEach(t),Reo=r(d4e," \u2014 "),pR=n(d4e,"A",{href:!0});var ZGr=s(pR);Beo=r(ZGr,"Speech2TextTokenizer"),ZGr.forEach(t),Peo=r(d4e," (Speech2Text model)"),d4e.forEach(t),$eo=i(C),dh=n(C,"LI",{});var c4e=s(dh);See=n(c4e,"STRONG",{});var eOr=s(See);Ieo=r(eOr,"speech_to_text_2"),eOr.forEach(t),qeo=r(c4e," \u2014 "),_R=n(c4e,"A",{href:!0});var oOr=s(_R);Neo=r(oOr,"Speech2Text2Tokenizer"),oOr.forEach(t),jeo=r(c4e," (Speech2Text2 model)"),c4e.forEach(t),Deo=i(C),Bs=n(C,"LI",{});var d9=s(Bs);Ree=n(d9,"STRONG",{});var rOr=s(Ree);Geo=r(rOr,"splinter"),rOr.forEach(t),Oeo=r(d9," \u2014 "),uR=n(d9,"A",{href:!0});var tOr=s(uR);Veo=r(tOr,"SplinterTokenizer"),tOr.forEach(t),Xeo=r(d9," or "),bR=n(d9,"A",{href:!0});var aOr=s(bR);zeo=r(aOr,"SplinterTokenizerFast"),aOr.forEach(t),Qeo=r(d9," (Splinter model)"),d9.forEach(t),Weo=i(C),Ps=n(C,"LI",{});var c9=s(Ps);Bee=n(c9,"STRONG",{});var nOr=s(Bee);Heo=r(nOr,"squeezebert"),nOr.forEach(t),Ueo=r(c9," \u2014 "),FR=n(c9,"A",{href:!0});var sOr=s(FR);Jeo=r(sOr,"SqueezeBertTokenizer"),sOr.forEach(t),Yeo=r(c9," or "),vR=n(c9,"A",{href:!0});var lOr=s(vR);Keo=r(lOr,"SqueezeBertTokenizerFast"),lOr.forEach(t),Zeo=r(c9," (SqueezeBERT model)"),c9.forEach(t),eoo=i(C),$s=n(C,"LI",{});var f9=s($s);Pee=n(f9,"STRONG",{});var iOr=s(Pee);ooo=r(iOr,"t5"),iOr.forEach(t),roo=r(f9," \u2014 "),TR=n(f9,"A",{href:!0});var dOr=s(TR);too=r(dOr,"T5Tokenizer"),dOr.forEach(t),aoo=r(f9," or "),MR=n(f9,"A",{href:!0});var cOr=s(MR);noo=r(cOr,"T5TokenizerFast"),cOr.forEach(t),soo=r(f9," (T5 model)"),f9.forEach(t),loo=i(C),ch=n(C,"LI",{});var f4e=s(ch);$ee=n(f4e,"STRONG",{});var fOr=s($ee);ioo=r(fOr,"tapas"),fOr.forEach(t),doo=r(f4e," \u2014 "),ER=n(f4e,"A",{href:!0});var mOr=s(ER);coo=r(mOr,"TapasTokenizer"),mOr.forEach(t),foo=r(f4e," (TAPAS model)"),f4e.forEach(t),moo=i(C),fh=n(C,"LI",{});var m4e=s(fh);Iee=n(m4e,"STRONG",{});var gOr=s(Iee);goo=r(gOr,"tapex"),gOr.forEach(t),hoo=r(m4e," \u2014 "),CR=n(m4e,"A",{href:!0});var hOr=s(CR);poo=r(hOr,"TapexTokenizer"),hOr.forEach(t),_oo=r(m4e," (TAPEX model)"),m4e.forEach(t),uoo=i(C),mh=n(C,"LI",{});var g4e=s(mh);qee=n(g4e,"STRONG",{});var pOr=s(qee);boo=r(pOr,"transfo-xl"),pOr.forEach(t),Foo=r(g4e," \u2014 "),wR=n(g4e,"A",{href:!0});var _Or=s(wR);voo=r(_Or,"TransfoXLTokenizer"),_Or.forEach(t),Too=r(g4e," (Transformer-XL model)"),g4e.forEach(t),Moo=i(C),gh=n(C,"LI",{});var h4e=s(gh);Nee=n(h4e,"STRONG",{});var uOr=s(Nee);Eoo=r(uOr,"wav2vec2"),uOr.forEach(t),Coo=r(h4e," \u2014 "),AR=n(h4e,"A",{href:!0});var bOr=s(AR);woo=r(bOr,"Wav2Vec2CTCTokenizer"),bOr.forEach(t),Aoo=r(h4e," (Wav2Vec2 model)"),h4e.forEach(t),yoo=i(C),hh=n(C,"LI",{});var p4e=s(hh);jee=n(p4e,"STRONG",{});var FOr=s(jee);Loo=r(FOr,"wav2vec2_phoneme"),FOr.forEach(t),xoo=r(p4e," \u2014 "),yR=n(p4e,"A",{href:!0});var vOr=s(yR);koo=r(vOr,"Wav2Vec2PhonemeCTCTokenizer"),vOr.forEach(t),Soo=r(p4e," (Wav2Vec2Phoneme model)"),p4e.forEach(t),Roo=i(C),Is=n(C,"LI",{});var m9=s(Is);Dee=n(m9,"STRONG",{});var TOr=s(Dee);Boo=r(TOr,"xglm"),TOr.forEach(t),Poo=r(m9," \u2014 "),LR=n(m9,"A",{href:!0});var MOr=s(LR);$oo=r(MOr,"XGLMTokenizer"),MOr.forEach(t),Ioo=r(m9," or "),xR=n(m9,"A",{href:!0});var EOr=s(xR);qoo=r(EOr,"XGLMTokenizerFast"),EOr.forEach(t),Noo=r(m9," (XGLM model)"),m9.forEach(t),joo=i(C),ph=n(C,"LI",{});var _4e=s(ph);Gee=n(_4e,"STRONG",{});var COr=s(Gee);Doo=r(COr,"xlm"),COr.forEach(t),Goo=r(_4e," \u2014 "),kR=n(_4e,"A",{href:!0});var wOr=s(kR);Ooo=r(wOr,"XLMTokenizer"),wOr.forEach(t),Voo=r(_4e," (XLM model)"),_4e.forEach(t),Xoo=i(C),_h=n(C,"LI",{});var u4e=s(_h);Oee=n(u4e,"STRONG",{});var AOr=s(Oee);zoo=r(AOr,"xlm-prophetnet"),AOr.forEach(t),Qoo=r(u4e," \u2014 "),SR=n(u4e,"A",{href:!0});var yOr=s(SR);Woo=r(yOr,"XLMProphetNetTokenizer"),yOr.forEach(t),Hoo=r(u4e," (XLMProphetNet model)"),u4e.forEach(t),Uoo=i(C),qs=n(C,"LI",{});var g9=s(qs);Vee=n(g9,"STRONG",{});var LOr=s(Vee);Joo=r(LOr,"xlm-roberta"),LOr.forEach(t),Yoo=r(g9," \u2014 "),RR=n(g9,"A",{href:!0});var xOr=s(RR);Koo=r(xOr,"XLMRobertaTokenizer"),xOr.forEach(t),Zoo=r(g9," or "),BR=n(g9,"A",{href:!0});var kOr=s(BR);ero=r(kOr,"XLMRobertaTokenizerFast"),kOr.forEach(t),oro=r(g9," (XLM-RoBERTa model)"),g9.forEach(t),rro=i(C),Ns=n(C,"LI",{});var h9=s(Ns);Xee=n(h9,"STRONG",{});var SOr=s(Xee);tro=r(SOr,"xlnet"),SOr.forEach(t),aro=r(h9," \u2014 "),PR=n(h9,"A",{href:!0});var ROr=s(PR);nro=r(ROr,"XLNetTokenizer"),ROr.forEach(t),sro=r(h9," or "),$R=n(h9,"A",{href:!0});var BOr=s($R);lro=r(BOr,"XLNetTokenizerFast"),BOr.forEach(t),iro=r(h9," (XLNet model)"),h9.forEach(t),C.forEach(t),dro=i(ha),zee=n(ha,"P",{});var POr=s(zee);cro=r(POr,"Examples:"),POr.forEach(t),fro=i(ha),m(XC.$$.fragment,ha),ha.forEach(t),mro=i(Vs),uh=n(Vs,"DIV",{class:!0});var DPe=s(uh);m(zC.$$.fragment,DPe),gro=i(DPe),Qee=n(DPe,"P",{});var $Or=s(Qee);hro=r($Or,"Register a new tokenizer in this mapping."),$Or.forEach(t),DPe.forEach(t),Vs.forEach(t),IRe=i(c),Wi=n(c,"H2",{class:!0});var GPe=s(Wi);bh=n(GPe,"A",{id:!0,class:!0,href:!0});var IOr=s(bh);Wee=n(IOr,"SPAN",{});var qOr=s(Wee);m(QC.$$.fragment,qOr),qOr.forEach(t),IOr.forEach(t),pro=i(GPe),Hee=n(GPe,"SPAN",{});var NOr=s(Hee);_ro=r(NOr,"AutoFeatureExtractor"),NOr.forEach(t),GPe.forEach(t),qRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(WC.$$.fragment,Xs),uro=i(Xs),HC=n(Xs,"P",{});var OPe=s(HC);bro=r(OPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IR=n(OPe,"A",{href:!0});var jOr=s(IR);Fro=r(jOr,"AutoFeatureExtractor.from_pretrained()"),jOr.forEach(t),vro=r(OPe," class method."),OPe.forEach(t),Tro=i(Xs),UC=n(Xs,"P",{});var VPe=s(UC);Mro=r(VPe,"This class cannot be instantiated directly using "),Uee=n(VPe,"CODE",{});var DOr=s(Uee);Ero=r(DOr,"__init__()"),DOr.forEach(t),Cro=r(VPe," (throws an error)."),VPe.forEach(t),wro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(JC.$$.fragment,Nt),Aro=i(Nt),Jee=n(Nt,"P",{});var GOr=s(Jee);yro=r(GOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GOr.forEach(t),Lro=i(Nt),Va=n(Nt,"P",{});var xE=s(Va);xro=r(xE,"The feature extractor class to instantiate is selected based on the "),Yee=n(xE,"CODE",{});var OOr=s(Yee);kro=r(OOr,"model_type"),OOr.forEach(t),Sro=r(xE,` property of the config object
(either passed as an argument or loaded from `),Kee=n(xE,"CODE",{});var VOr=s(Kee);Rro=r(VOr,"pretrained_model_name_or_path"),VOr.forEach(t),Bro=r(xE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zee=n(xE,"CODE",{});var XOr=s(Zee);Pro=r(XOr,"pretrained_model_name_or_path"),XOr.forEach(t),$ro=r(xE,":"),xE.forEach(t),Iro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);Fh=n(ae,"LI",{});var b4e=s(Fh);eoe=n(b4e,"STRONG",{});var zOr=s(eoe);qro=r(zOr,"beit"),zOr.forEach(t),Nro=r(b4e," \u2014 "),qR=n(b4e,"A",{href:!0});var QOr=s(qR);jro=r(QOr,"BeitFeatureExtractor"),QOr.forEach(t),Dro=r(b4e," (BEiT model)"),b4e.forEach(t),Gro=i(ae),vh=n(ae,"LI",{});var F4e=s(vh);ooe=n(F4e,"STRONG",{});var WOr=s(ooe);Oro=r(WOr,"clip"),WOr.forEach(t),Vro=r(F4e," \u2014 "),NR=n(F4e,"A",{href:!0});var HOr=s(NR);Xro=r(HOr,"CLIPFeatureExtractor"),HOr.forEach(t),zro=r(F4e," (CLIP model)"),F4e.forEach(t),Qro=i(ae),Th=n(ae,"LI",{});var v4e=s(Th);roe=n(v4e,"STRONG",{});var UOr=s(roe);Wro=r(UOr,"convnext"),UOr.forEach(t),Hro=r(v4e," \u2014 "),jR=n(v4e,"A",{href:!0});var JOr=s(jR);Uro=r(JOr,"ConvNextFeatureExtractor"),JOr.forEach(t),Jro=r(v4e," (ConvNext model)"),v4e.forEach(t),Yro=i(ae),Mh=n(ae,"LI",{});var T4e=s(Mh);toe=n(T4e,"STRONG",{});var YOr=s(toe);Kro=r(YOr,"deit"),YOr.forEach(t),Zro=r(T4e," \u2014 "),DR=n(T4e,"A",{href:!0});var KOr=s(DR);eto=r(KOr,"DeiTFeatureExtractor"),KOr.forEach(t),oto=r(T4e," (DeiT model)"),T4e.forEach(t),rto=i(ae),Eh=n(ae,"LI",{});var M4e=s(Eh);aoe=n(M4e,"STRONG",{});var ZOr=s(aoe);tto=r(ZOr,"detr"),ZOr.forEach(t),ato=r(M4e," \u2014 "),GR=n(M4e,"A",{href:!0});var eVr=s(GR);nto=r(eVr,"DetrFeatureExtractor"),eVr.forEach(t),sto=r(M4e," (DETR model)"),M4e.forEach(t),lto=i(ae),Ch=n(ae,"LI",{});var E4e=s(Ch);noe=n(E4e,"STRONG",{});var oVr=s(noe);ito=r(oVr,"hubert"),oVr.forEach(t),dto=r(E4e," \u2014 "),OR=n(E4e,"A",{href:!0});var rVr=s(OR);cto=r(rVr,"Wav2Vec2FeatureExtractor"),rVr.forEach(t),fto=r(E4e," (Hubert model)"),E4e.forEach(t),mto=i(ae),wh=n(ae,"LI",{});var C4e=s(wh);soe=n(C4e,"STRONG",{});var tVr=s(soe);gto=r(tVr,"layoutlmv2"),tVr.forEach(t),hto=r(C4e," \u2014 "),VR=n(C4e,"A",{href:!0});var aVr=s(VR);pto=r(aVr,"LayoutLMv2FeatureExtractor"),aVr.forEach(t),_to=r(C4e," (LayoutLMv2 model)"),C4e.forEach(t),uto=i(ae),Ah=n(ae,"LI",{});var w4e=s(Ah);loe=n(w4e,"STRONG",{});var nVr=s(loe);bto=r(nVr,"maskformer"),nVr.forEach(t),Fto=r(w4e," \u2014 "),XR=n(w4e,"A",{href:!0});var sVr=s(XR);vto=r(sVr,"MaskFormerFeatureExtractor"),sVr.forEach(t),Tto=r(w4e," (MaskFormer model)"),w4e.forEach(t),Mto=i(ae),yh=n(ae,"LI",{});var A4e=s(yh);ioe=n(A4e,"STRONG",{});var lVr=s(ioe);Eto=r(lVr,"perceiver"),lVr.forEach(t),Cto=r(A4e," \u2014 "),zR=n(A4e,"A",{href:!0});var iVr=s(zR);wto=r(iVr,"PerceiverFeatureExtractor"),iVr.forEach(t),Ato=r(A4e," (Perceiver model)"),A4e.forEach(t),yto=i(ae),Lh=n(ae,"LI",{});var y4e=s(Lh);doe=n(y4e,"STRONG",{});var dVr=s(doe);Lto=r(dVr,"poolformer"),dVr.forEach(t),xto=r(y4e," \u2014 "),QR=n(y4e,"A",{href:!0});var cVr=s(QR);kto=r(cVr,"PoolFormerFeatureExtractor"),cVr.forEach(t),Sto=r(y4e," (PoolFormer model)"),y4e.forEach(t),Rto=i(ae),xh=n(ae,"LI",{});var L4e=s(xh);coe=n(L4e,"STRONG",{});var fVr=s(coe);Bto=r(fVr,"regnet"),fVr.forEach(t),Pto=r(L4e," \u2014 "),WR=n(L4e,"A",{href:!0});var mVr=s(WR);$to=r(mVr,"ConvNextFeatureExtractor"),mVr.forEach(t),Ito=r(L4e," (RegNet model)"),L4e.forEach(t),qto=i(ae),kh=n(ae,"LI",{});var x4e=s(kh);foe=n(x4e,"STRONG",{});var gVr=s(foe);Nto=r(gVr,"resnet"),gVr.forEach(t),jto=r(x4e," \u2014 "),HR=n(x4e,"A",{href:!0});var hVr=s(HR);Dto=r(hVr,"ConvNextFeatureExtractor"),hVr.forEach(t),Gto=r(x4e," (ResNet model)"),x4e.forEach(t),Oto=i(ae),Sh=n(ae,"LI",{});var k4e=s(Sh);moe=n(k4e,"STRONG",{});var pVr=s(moe);Vto=r(pVr,"segformer"),pVr.forEach(t),Xto=r(k4e," \u2014 "),UR=n(k4e,"A",{href:!0});var _Vr=s(UR);zto=r(_Vr,"SegformerFeatureExtractor"),_Vr.forEach(t),Qto=r(k4e," (SegFormer model)"),k4e.forEach(t),Wto=i(ae),Rh=n(ae,"LI",{});var S4e=s(Rh);goe=n(S4e,"STRONG",{});var uVr=s(goe);Hto=r(uVr,"speech_to_text"),uVr.forEach(t),Uto=r(S4e," \u2014 "),JR=n(S4e,"A",{href:!0});var bVr=s(JR);Jto=r(bVr,"Speech2TextFeatureExtractor"),bVr.forEach(t),Yto=r(S4e," (Speech2Text model)"),S4e.forEach(t),Kto=i(ae),Bh=n(ae,"LI",{});var R4e=s(Bh);hoe=n(R4e,"STRONG",{});var FVr=s(hoe);Zto=r(FVr,"swin"),FVr.forEach(t),eao=r(R4e," \u2014 "),YR=n(R4e,"A",{href:!0});var vVr=s(YR);oao=r(vVr,"ViTFeatureExtractor"),vVr.forEach(t),rao=r(R4e," (Swin model)"),R4e.forEach(t),tao=i(ae),Ph=n(ae,"LI",{});var B4e=s(Ph);poe=n(B4e,"STRONG",{});var TVr=s(poe);aao=r(TVr,"van"),TVr.forEach(t),nao=r(B4e," \u2014 "),KR=n(B4e,"A",{href:!0});var MVr=s(KR);sao=r(MVr,"ConvNextFeatureExtractor"),MVr.forEach(t),lao=r(B4e," (VAN model)"),B4e.forEach(t),iao=i(ae),$h=n(ae,"LI",{});var P4e=s($h);_oe=n(P4e,"STRONG",{});var EVr=s(_oe);dao=r(EVr,"vit"),EVr.forEach(t),cao=r(P4e," \u2014 "),ZR=n(P4e,"A",{href:!0});var CVr=s(ZR);fao=r(CVr,"ViTFeatureExtractor"),CVr.forEach(t),mao=r(P4e," (ViT model)"),P4e.forEach(t),gao=i(ae),Ih=n(ae,"LI",{});var $4e=s(Ih);uoe=n($4e,"STRONG",{});var wVr=s(uoe);hao=r(wVr,"vit_mae"),wVr.forEach(t),pao=r($4e," \u2014 "),eB=n($4e,"A",{href:!0});var AVr=s(eB);_ao=r(AVr,"ViTFeatureExtractor"),AVr.forEach(t),uao=r($4e," (ViTMAE model)"),$4e.forEach(t),bao=i(ae),qh=n(ae,"LI",{});var I4e=s(qh);boe=n(I4e,"STRONG",{});var yVr=s(boe);Fao=r(yVr,"wav2vec2"),yVr.forEach(t),vao=r(I4e," \u2014 "),oB=n(I4e,"A",{href:!0});var LVr=s(oB);Tao=r(LVr,"Wav2Vec2FeatureExtractor"),LVr.forEach(t),Mao=r(I4e," (Wav2Vec2 model)"),I4e.forEach(t),ae.forEach(t),Eao=i(Nt),m(Nh.$$.fragment,Nt),Cao=i(Nt),Foe=n(Nt,"P",{});var xVr=s(Foe);wao=r(xVr,"Examples:"),xVr.forEach(t),Aao=i(Nt),m(YC.$$.fragment,Nt),Nt.forEach(t),yao=i(Xs),jh=n(Xs,"DIV",{class:!0});var XPe=s(jh);m(KC.$$.fragment,XPe),Lao=i(XPe),voe=n(XPe,"P",{});var kVr=s(voe);xao=r(kVr,"Register a new feature extractor for this class."),kVr.forEach(t),XPe.forEach(t),Xs.forEach(t),NRe=i(c),Hi=n(c,"H2",{class:!0});var zPe=s(Hi);Dh=n(zPe,"A",{id:!0,class:!0,href:!0});var SVr=s(Dh);Toe=n(SVr,"SPAN",{});var RVr=s(Toe);m(ZC.$$.fragment,RVr),RVr.forEach(t),SVr.forEach(t),kao=i(zPe),Moe=n(zPe,"SPAN",{});var BVr=s(Moe);Sao=r(BVr,"AutoProcessor"),BVr.forEach(t),zPe.forEach(t),jRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(ew.$$.fragment,zs),Rao=i(zs),ow=n(zs,"P",{});var QPe=s(ow);Bao=r(QPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rB=n(QPe,"A",{href:!0});var PVr=s(rB);Pao=r(PVr,"AutoProcessor.from_pretrained()"),PVr.forEach(t),$ao=r(QPe," class method."),QPe.forEach(t),Iao=i(zs),rw=n(zs,"P",{});var WPe=s(rw);qao=r(WPe,"This class cannot be instantiated directly using "),Eoe=n(WPe,"CODE",{});var $Vr=s(Eoe);Nao=r($Vr,"__init__()"),$Vr.forEach(t),jao=r(WPe," (throws an error)."),WPe.forEach(t),Dao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(tw.$$.fragment,jt),Gao=i(jt),Coe=n(jt,"P",{});var IVr=s(Coe);Oao=r(IVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),IVr.forEach(t),Vao=i(jt),Ui=n(jt,"P",{});var _U=s(Ui);Xao=r(_U,"The processor class to instantiate is selected based on the "),woe=n(_U,"CODE",{});var qVr=s(woe);zao=r(qVr,"model_type"),qVr.forEach(t),Qao=r(_U,` property of the config object (either
passed as an argument or loaded from `),Aoe=n(_U,"CODE",{});var NVr=s(Aoe);Wao=r(NVr,"pretrained_model_name_or_path"),NVr.forEach(t),Hao=r(_U," if possible):"),_U.forEach(t),Uao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Gh=n(jo,"LI",{});var q4e=s(Gh);yoe=n(q4e,"STRONG",{});var jVr=s(yoe);Jao=r(jVr,"clip"),jVr.forEach(t),Yao=r(q4e," \u2014 "),tB=n(q4e,"A",{href:!0});var DVr=s(tB);Kao=r(DVr,"CLIPProcessor"),DVr.forEach(t),Zao=r(q4e," (CLIP model)"),q4e.forEach(t),eno=i(jo),Oh=n(jo,"LI",{});var N4e=s(Oh);Loe=n(N4e,"STRONG",{});var GVr=s(Loe);ono=r(GVr,"layoutlmv2"),GVr.forEach(t),rno=r(N4e," \u2014 "),aB=n(N4e,"A",{href:!0});var OVr=s(aB);tno=r(OVr,"LayoutLMv2Processor"),OVr.forEach(t),ano=r(N4e," (LayoutLMv2 model)"),N4e.forEach(t),nno=i(jo),Vh=n(jo,"LI",{});var j4e=s(Vh);xoe=n(j4e,"STRONG",{});var VVr=s(xoe);sno=r(VVr,"layoutxlm"),VVr.forEach(t),lno=r(j4e," \u2014 "),nB=n(j4e,"A",{href:!0});var XVr=s(nB);ino=r(XVr,"LayoutXLMProcessor"),XVr.forEach(t),dno=r(j4e," (LayoutXLM model)"),j4e.forEach(t),cno=i(jo),Xh=n(jo,"LI",{});var D4e=s(Xh);koe=n(D4e,"STRONG",{});var zVr=s(koe);fno=r(zVr,"speech_to_text"),zVr.forEach(t),mno=r(D4e," \u2014 "),sB=n(D4e,"A",{href:!0});var QVr=s(sB);gno=r(QVr,"Speech2TextProcessor"),QVr.forEach(t),hno=r(D4e," (Speech2Text model)"),D4e.forEach(t),pno=i(jo),zh=n(jo,"LI",{});var G4e=s(zh);Soe=n(G4e,"STRONG",{});var WVr=s(Soe);_no=r(WVr,"speech_to_text_2"),WVr.forEach(t),uno=r(G4e," \u2014 "),lB=n(G4e,"A",{href:!0});var HVr=s(lB);bno=r(HVr,"Speech2Text2Processor"),HVr.forEach(t),Fno=r(G4e," (Speech2Text2 model)"),G4e.forEach(t),vno=i(jo),Qh=n(jo,"LI",{});var O4e=s(Qh);Roe=n(O4e,"STRONG",{});var UVr=s(Roe);Tno=r(UVr,"trocr"),UVr.forEach(t),Mno=r(O4e," \u2014 "),iB=n(O4e,"A",{href:!0});var JVr=s(iB);Eno=r(JVr,"TrOCRProcessor"),JVr.forEach(t),Cno=r(O4e," (TrOCR model)"),O4e.forEach(t),wno=i(jo),Wh=n(jo,"LI",{});var V4e=s(Wh);Boe=n(V4e,"STRONG",{});var YVr=s(Boe);Ano=r(YVr,"vision-text-dual-encoder"),YVr.forEach(t),yno=r(V4e," \u2014 "),dB=n(V4e,"A",{href:!0});var KVr=s(dB);Lno=r(KVr,"VisionTextDualEncoderProcessor"),KVr.forEach(t),xno=r(V4e," (VisionTextDualEncoder model)"),V4e.forEach(t),kno=i(jo),Hh=n(jo,"LI",{});var X4e=s(Hh);Poe=n(X4e,"STRONG",{});var ZVr=s(Poe);Sno=r(ZVr,"wav2vec2"),ZVr.forEach(t),Rno=r(X4e," \u2014 "),cB=n(X4e,"A",{href:!0});var eXr=s(cB);Bno=r(eXr,"Wav2Vec2Processor"),eXr.forEach(t),Pno=r(X4e," (Wav2Vec2 model)"),X4e.forEach(t),jo.forEach(t),$no=i(jt),m(Uh.$$.fragment,jt),Ino=i(jt),$oe=n(jt,"P",{});var oXr=s($oe);qno=r(oXr,"Examples:"),oXr.forEach(t),Nno=i(jt),m(aw.$$.fragment,jt),jt.forEach(t),jno=i(zs),Jh=n(zs,"DIV",{class:!0});var HPe=s(Jh);m(nw.$$.fragment,HPe),Dno=i(HPe),Ioe=n(HPe,"P",{});var rXr=s(Ioe);Gno=r(rXr,"Register a new processor for this class."),rXr.forEach(t),HPe.forEach(t),zs.forEach(t),DRe=i(c),Ji=n(c,"H2",{class:!0});var UPe=s(Ji);Yh=n(UPe,"A",{id:!0,class:!0,href:!0});var tXr=s(Yh);qoe=n(tXr,"SPAN",{});var aXr=s(qoe);m(sw.$$.fragment,aXr),aXr.forEach(t),tXr.forEach(t),Ono=i(UPe),Noe=n(UPe,"SPAN",{});var nXr=s(Noe);Vno=r(nXr,"AutoModel"),nXr.forEach(t),UPe.forEach(t),GRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(lw.$$.fragment,Qs),Xno=i(Qs),Yi=n(Qs,"P",{});var uU=s(Yi);zno=r(uU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fB=n(uU,"A",{href:!0});var sXr=s(fB);Qno=r(sXr,"from_pretrained()"),sXr.forEach(t),Wno=r(uU," class method or the "),mB=n(uU,"A",{href:!0});var lXr=s(mB);Hno=r(lXr,"from_config()"),lXr.forEach(t),Uno=r(uU,` class
method.`),uU.forEach(t),Jno=i(Qs),iw=n(Qs,"P",{});var JPe=s(iw);Yno=r(JPe,"This class cannot be instantiated directly using "),joe=n(JPe,"CODE",{});var iXr=s(joe);Kno=r(iXr,"__init__()"),iXr.forEach(t),Zno=r(JPe," (throws an error)."),JPe.forEach(t),eso=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(dw.$$.fragment,Ws),oso=i(Ws),Doe=n(Ws,"P",{});var dXr=s(Doe);rso=r(dXr,"Instantiates one of the base model classes of the library from a configuration."),dXr.forEach(t),tso=i(Ws),Ki=n(Ws,"P",{});var bU=s(Ki);aso=r(bU,`Note:
Loading a model from its configuration file does `),Goe=n(bU,"STRONG",{});var cXr=s(Goe);nso=r(cXr,"not"),cXr.forEach(t),sso=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gB=n(bU,"A",{href:!0});var fXr=s(gB);lso=r(fXr,"from_pretrained()"),fXr.forEach(t),iso=r(bU," to load the model weights."),bU.forEach(t),dso=i(Ws),Ooe=n(Ws,"P",{});var mXr=s(Ooe);cso=r(mXr,"Examples:"),mXr.forEach(t),fso=i(Ws),m(cw.$$.fragment,Ws),Ws.forEach(t),mso=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(fw.$$.fragment,Dt),gso=i(Dt),Voe=n(Dt,"P",{});var gXr=s(Voe);hso=r(gXr,"Instantiate one of the base model classes of the library from a pretrained model."),gXr.forEach(t),pso=i(Dt),Xa=n(Dt,"P",{});var kE=s(Xa);_so=r(kE,"The model class to instantiate is selected based on the "),Xoe=n(kE,"CODE",{});var hXr=s(Xoe);uso=r(hXr,"model_type"),hXr.forEach(t),bso=r(kE,` property of the config object (either
passed as an argument or loaded from `),zoe=n(kE,"CODE",{});var pXr=s(zoe);Fso=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),vso=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qoe=n(kE,"CODE",{});var _Xr=s(Qoe);Tso=r(_Xr,"pretrained_model_name_or_path"),_Xr.forEach(t),Mso=r(kE,":"),kE.forEach(t),Eso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Kh=n(M,"LI",{});var z4e=s(Kh);Woe=n(z4e,"STRONG",{});var uXr=s(Woe);Cso=r(uXr,"albert"),uXr.forEach(t),wso=r(z4e," \u2014 "),hB=n(z4e,"A",{href:!0});var bXr=s(hB);Aso=r(bXr,"AlbertModel"),bXr.forEach(t),yso=r(z4e," (ALBERT model)"),z4e.forEach(t),Lso=i(M),Zh=n(M,"LI",{});var Q4e=s(Zh);Hoe=n(Q4e,"STRONG",{});var FXr=s(Hoe);xso=r(FXr,"bart"),FXr.forEach(t),kso=r(Q4e," \u2014 "),pB=n(Q4e,"A",{href:!0});var vXr=s(pB);Sso=r(vXr,"BartModel"),vXr.forEach(t),Rso=r(Q4e," (BART model)"),Q4e.forEach(t),Bso=i(M),ep=n(M,"LI",{});var W4e=s(ep);Uoe=n(W4e,"STRONG",{});var TXr=s(Uoe);Pso=r(TXr,"beit"),TXr.forEach(t),$so=r(W4e," \u2014 "),_B=n(W4e,"A",{href:!0});var MXr=s(_B);Iso=r(MXr,"BeitModel"),MXr.forEach(t),qso=r(W4e," (BEiT model)"),W4e.forEach(t),Nso=i(M),op=n(M,"LI",{});var H4e=s(op);Joe=n(H4e,"STRONG",{});var EXr=s(Joe);jso=r(EXr,"bert"),EXr.forEach(t),Dso=r(H4e," \u2014 "),uB=n(H4e,"A",{href:!0});var CXr=s(uB);Gso=r(CXr,"BertModel"),CXr.forEach(t),Oso=r(H4e," (BERT model)"),H4e.forEach(t),Vso=i(M),rp=n(M,"LI",{});var U4e=s(rp);Yoe=n(U4e,"STRONG",{});var wXr=s(Yoe);Xso=r(wXr,"bert-generation"),wXr.forEach(t),zso=r(U4e," \u2014 "),bB=n(U4e,"A",{href:!0});var AXr=s(bB);Qso=r(AXr,"BertGenerationEncoder"),AXr.forEach(t),Wso=r(U4e," (Bert Generation model)"),U4e.forEach(t),Hso=i(M),tp=n(M,"LI",{});var J4e=s(tp);Koe=n(J4e,"STRONG",{});var yXr=s(Koe);Uso=r(yXr,"big_bird"),yXr.forEach(t),Jso=r(J4e," \u2014 "),FB=n(J4e,"A",{href:!0});var LXr=s(FB);Yso=r(LXr,"BigBirdModel"),LXr.forEach(t),Kso=r(J4e," (BigBird model)"),J4e.forEach(t),Zso=i(M),ap=n(M,"LI",{});var Y4e=s(ap);Zoe=n(Y4e,"STRONG",{});var xXr=s(Zoe);elo=r(xXr,"bigbird_pegasus"),xXr.forEach(t),olo=r(Y4e," \u2014 "),vB=n(Y4e,"A",{href:!0});var kXr=s(vB);rlo=r(kXr,"BigBirdPegasusModel"),kXr.forEach(t),tlo=r(Y4e," (BigBirdPegasus model)"),Y4e.forEach(t),alo=i(M),np=n(M,"LI",{});var K4e=s(np);ere=n(K4e,"STRONG",{});var SXr=s(ere);nlo=r(SXr,"blenderbot"),SXr.forEach(t),slo=r(K4e," \u2014 "),TB=n(K4e,"A",{href:!0});var RXr=s(TB);llo=r(RXr,"BlenderbotModel"),RXr.forEach(t),ilo=r(K4e," (Blenderbot model)"),K4e.forEach(t),dlo=i(M),sp=n(M,"LI",{});var Z4e=s(sp);ore=n(Z4e,"STRONG",{});var BXr=s(ore);clo=r(BXr,"blenderbot-small"),BXr.forEach(t),flo=r(Z4e," \u2014 "),MB=n(Z4e,"A",{href:!0});var PXr=s(MB);mlo=r(PXr,"BlenderbotSmallModel"),PXr.forEach(t),glo=r(Z4e," (BlenderbotSmall model)"),Z4e.forEach(t),hlo=i(M),lp=n(M,"LI",{});var eEe=s(lp);rre=n(eEe,"STRONG",{});var $Xr=s(rre);plo=r($Xr,"camembert"),$Xr.forEach(t),_lo=r(eEe," \u2014 "),EB=n(eEe,"A",{href:!0});var IXr=s(EB);ulo=r(IXr,"CamembertModel"),IXr.forEach(t),blo=r(eEe," (CamemBERT model)"),eEe.forEach(t),Flo=i(M),ip=n(M,"LI",{});var oEe=s(ip);tre=n(oEe,"STRONG",{});var qXr=s(tre);vlo=r(qXr,"canine"),qXr.forEach(t),Tlo=r(oEe," \u2014 "),CB=n(oEe,"A",{href:!0});var NXr=s(CB);Mlo=r(NXr,"CanineModel"),NXr.forEach(t),Elo=r(oEe," (Canine model)"),oEe.forEach(t),Clo=i(M),dp=n(M,"LI",{});var rEe=s(dp);are=n(rEe,"STRONG",{});var jXr=s(are);wlo=r(jXr,"clip"),jXr.forEach(t),Alo=r(rEe," \u2014 "),wB=n(rEe,"A",{href:!0});var DXr=s(wB);ylo=r(DXr,"CLIPModel"),DXr.forEach(t),Llo=r(rEe," (CLIP model)"),rEe.forEach(t),xlo=i(M),cp=n(M,"LI",{});var tEe=s(cp);nre=n(tEe,"STRONG",{});var GXr=s(nre);klo=r(GXr,"convbert"),GXr.forEach(t),Slo=r(tEe," \u2014 "),AB=n(tEe,"A",{href:!0});var OXr=s(AB);Rlo=r(OXr,"ConvBertModel"),OXr.forEach(t),Blo=r(tEe," (ConvBERT model)"),tEe.forEach(t),Plo=i(M),fp=n(M,"LI",{});var aEe=s(fp);sre=n(aEe,"STRONG",{});var VXr=s(sre);$lo=r(VXr,"convnext"),VXr.forEach(t),Ilo=r(aEe," \u2014 "),yB=n(aEe,"A",{href:!0});var XXr=s(yB);qlo=r(XXr,"ConvNextModel"),XXr.forEach(t),Nlo=r(aEe," (ConvNext model)"),aEe.forEach(t),jlo=i(M),mp=n(M,"LI",{});var nEe=s(mp);lre=n(nEe,"STRONG",{});var zXr=s(lre);Dlo=r(zXr,"ctrl"),zXr.forEach(t),Glo=r(nEe," \u2014 "),LB=n(nEe,"A",{href:!0});var QXr=s(LB);Olo=r(QXr,"CTRLModel"),QXr.forEach(t),Vlo=r(nEe," (CTRL model)"),nEe.forEach(t),Xlo=i(M),gp=n(M,"LI",{});var sEe=s(gp);ire=n(sEe,"STRONG",{});var WXr=s(ire);zlo=r(WXr,"data2vec-audio"),WXr.forEach(t),Qlo=r(sEe," \u2014 "),xB=n(sEe,"A",{href:!0});var HXr=s(xB);Wlo=r(HXr,"Data2VecAudioModel"),HXr.forEach(t),Hlo=r(sEe," (Data2VecAudio model)"),sEe.forEach(t),Ulo=i(M),hp=n(M,"LI",{});var lEe=s(hp);dre=n(lEe,"STRONG",{});var UXr=s(dre);Jlo=r(UXr,"data2vec-text"),UXr.forEach(t),Ylo=r(lEe," \u2014 "),kB=n(lEe,"A",{href:!0});var JXr=s(kB);Klo=r(JXr,"Data2VecTextModel"),JXr.forEach(t),Zlo=r(lEe," (Data2VecText model)"),lEe.forEach(t),eio=i(M),pp=n(M,"LI",{});var iEe=s(pp);cre=n(iEe,"STRONG",{});var YXr=s(cre);oio=r(YXr,"deberta"),YXr.forEach(t),rio=r(iEe," \u2014 "),SB=n(iEe,"A",{href:!0});var KXr=s(SB);tio=r(KXr,"DebertaModel"),KXr.forEach(t),aio=r(iEe," (DeBERTa model)"),iEe.forEach(t),nio=i(M),_p=n(M,"LI",{});var dEe=s(_p);fre=n(dEe,"STRONG",{});var ZXr=s(fre);sio=r(ZXr,"deberta-v2"),ZXr.forEach(t),lio=r(dEe," \u2014 "),RB=n(dEe,"A",{href:!0});var ezr=s(RB);iio=r(ezr,"DebertaV2Model"),ezr.forEach(t),dio=r(dEe," (DeBERTa-v2 model)"),dEe.forEach(t),cio=i(M),up=n(M,"LI",{});var cEe=s(up);mre=n(cEe,"STRONG",{});var ozr=s(mre);fio=r(ozr,"decision_transformer"),ozr.forEach(t),mio=r(cEe," \u2014 "),BB=n(cEe,"A",{href:!0});var rzr=s(BB);gio=r(rzr,"DecisionTransformerModel"),rzr.forEach(t),hio=r(cEe," (Decision Transformer model)"),cEe.forEach(t),pio=i(M),bp=n(M,"LI",{});var fEe=s(bp);gre=n(fEe,"STRONG",{});var tzr=s(gre);_io=r(tzr,"deit"),tzr.forEach(t),uio=r(fEe," \u2014 "),PB=n(fEe,"A",{href:!0});var azr=s(PB);bio=r(azr,"DeiTModel"),azr.forEach(t),Fio=r(fEe," (DeiT model)"),fEe.forEach(t),vio=i(M),Fp=n(M,"LI",{});var mEe=s(Fp);hre=n(mEe,"STRONG",{});var nzr=s(hre);Tio=r(nzr,"detr"),nzr.forEach(t),Mio=r(mEe," \u2014 "),$B=n(mEe,"A",{href:!0});var szr=s($B);Eio=r(szr,"DetrModel"),szr.forEach(t),Cio=r(mEe," (DETR model)"),mEe.forEach(t),wio=i(M),vp=n(M,"LI",{});var gEe=s(vp);pre=n(gEe,"STRONG",{});var lzr=s(pre);Aio=r(lzr,"distilbert"),lzr.forEach(t),yio=r(gEe," \u2014 "),IB=n(gEe,"A",{href:!0});var izr=s(IB);Lio=r(izr,"DistilBertModel"),izr.forEach(t),xio=r(gEe," (DistilBERT model)"),gEe.forEach(t),kio=i(M),Tp=n(M,"LI",{});var hEe=s(Tp);_re=n(hEe,"STRONG",{});var dzr=s(_re);Sio=r(dzr,"dpr"),dzr.forEach(t),Rio=r(hEe," \u2014 "),qB=n(hEe,"A",{href:!0});var czr=s(qB);Bio=r(czr,"DPRQuestionEncoder"),czr.forEach(t),Pio=r(hEe," (DPR model)"),hEe.forEach(t),$io=i(M),Mp=n(M,"LI",{});var pEe=s(Mp);ure=n(pEe,"STRONG",{});var fzr=s(ure);Iio=r(fzr,"dpt"),fzr.forEach(t),qio=r(pEe," \u2014 "),NB=n(pEe,"A",{href:!0});var mzr=s(NB);Nio=r(mzr,"DPTModel"),mzr.forEach(t),jio=r(pEe," (DPT model)"),pEe.forEach(t),Dio=i(M),Ep=n(M,"LI",{});var _Ee=s(Ep);bre=n(_Ee,"STRONG",{});var gzr=s(bre);Gio=r(gzr,"electra"),gzr.forEach(t),Oio=r(_Ee," \u2014 "),jB=n(_Ee,"A",{href:!0});var hzr=s(jB);Vio=r(hzr,"ElectraModel"),hzr.forEach(t),Xio=r(_Ee," (ELECTRA model)"),_Ee.forEach(t),zio=i(M),Cp=n(M,"LI",{});var uEe=s(Cp);Fre=n(uEe,"STRONG",{});var pzr=s(Fre);Qio=r(pzr,"fastspeech2"),pzr.forEach(t),Wio=r(uEe," \u2014 "),DB=n(uEe,"A",{href:!0});var _zr=s(DB);Hio=r(_zr,"FastSpeech2Model"),_zr.forEach(t),Uio=r(uEe," (FastSpeech2 model)"),uEe.forEach(t),Jio=i(M),wp=n(M,"LI",{});var bEe=s(wp);vre=n(bEe,"STRONG",{});var uzr=s(vre);Yio=r(uzr,"flaubert"),uzr.forEach(t),Kio=r(bEe," \u2014 "),GB=n(bEe,"A",{href:!0});var bzr=s(GB);Zio=r(bzr,"FlaubertModel"),bzr.forEach(t),edo=r(bEe," (FlauBERT model)"),bEe.forEach(t),odo=i(M),Ap=n(M,"LI",{});var FEe=s(Ap);Tre=n(FEe,"STRONG",{});var Fzr=s(Tre);rdo=r(Fzr,"fnet"),Fzr.forEach(t),tdo=r(FEe," \u2014 "),OB=n(FEe,"A",{href:!0});var vzr=s(OB);ado=r(vzr,"FNetModel"),vzr.forEach(t),ndo=r(FEe," (FNet model)"),FEe.forEach(t),sdo=i(M),yp=n(M,"LI",{});var vEe=s(yp);Mre=n(vEe,"STRONG",{});var Tzr=s(Mre);ldo=r(Tzr,"fsmt"),Tzr.forEach(t),ido=r(vEe," \u2014 "),VB=n(vEe,"A",{href:!0});var Mzr=s(VB);ddo=r(Mzr,"FSMTModel"),Mzr.forEach(t),cdo=r(vEe," (FairSeq Machine-Translation model)"),vEe.forEach(t),fdo=i(M),js=n(M,"LI",{});var p9=s(js);Ere=n(p9,"STRONG",{});var Ezr=s(Ere);mdo=r(Ezr,"funnel"),Ezr.forEach(t),gdo=r(p9," \u2014 "),XB=n(p9,"A",{href:!0});var Czr=s(XB);hdo=r(Czr,"FunnelModel"),Czr.forEach(t),pdo=r(p9," or "),zB=n(p9,"A",{href:!0});var wzr=s(zB);_do=r(wzr,"FunnelBaseModel"),wzr.forEach(t),udo=r(p9," (Funnel Transformer model)"),p9.forEach(t),bdo=i(M),Lp=n(M,"LI",{});var TEe=s(Lp);Cre=n(TEe,"STRONG",{});var Azr=s(Cre);Fdo=r(Azr,"glpn"),Azr.forEach(t),vdo=r(TEe," \u2014 "),QB=n(TEe,"A",{href:!0});var yzr=s(QB);Tdo=r(yzr,"GLPNModel"),yzr.forEach(t),Mdo=r(TEe," (GLPN model)"),TEe.forEach(t),Edo=i(M),xp=n(M,"LI",{});var MEe=s(xp);wre=n(MEe,"STRONG",{});var Lzr=s(wre);Cdo=r(Lzr,"gpt2"),Lzr.forEach(t),wdo=r(MEe," \u2014 "),WB=n(MEe,"A",{href:!0});var xzr=s(WB);Ado=r(xzr,"GPT2Model"),xzr.forEach(t),ydo=r(MEe," (OpenAI GPT-2 model)"),MEe.forEach(t),Ldo=i(M),kp=n(M,"LI",{});var EEe=s(kp);Are=n(EEe,"STRONG",{});var kzr=s(Are);xdo=r(kzr,"gpt_neo"),kzr.forEach(t),kdo=r(EEe," \u2014 "),HB=n(EEe,"A",{href:!0});var Szr=s(HB);Sdo=r(Szr,"GPTNeoModel"),Szr.forEach(t),Rdo=r(EEe," (GPT Neo model)"),EEe.forEach(t),Bdo=i(M),Sp=n(M,"LI",{});var CEe=s(Sp);yre=n(CEe,"STRONG",{});var Rzr=s(yre);Pdo=r(Rzr,"gptj"),Rzr.forEach(t),$do=r(CEe," \u2014 "),UB=n(CEe,"A",{href:!0});var Bzr=s(UB);Ido=r(Bzr,"GPTJModel"),Bzr.forEach(t),qdo=r(CEe," (GPT-J model)"),CEe.forEach(t),Ndo=i(M),Rp=n(M,"LI",{});var wEe=s(Rp);Lre=n(wEe,"STRONG",{});var Pzr=s(Lre);jdo=r(Pzr,"hubert"),Pzr.forEach(t),Ddo=r(wEe," \u2014 "),JB=n(wEe,"A",{href:!0});var $zr=s(JB);Gdo=r($zr,"HubertModel"),$zr.forEach(t),Odo=r(wEe," (Hubert model)"),wEe.forEach(t),Vdo=i(M),Bp=n(M,"LI",{});var AEe=s(Bp);xre=n(AEe,"STRONG",{});var Izr=s(xre);Xdo=r(Izr,"ibert"),Izr.forEach(t),zdo=r(AEe," \u2014 "),YB=n(AEe,"A",{href:!0});var qzr=s(YB);Qdo=r(qzr,"IBertModel"),qzr.forEach(t),Wdo=r(AEe," (I-BERT model)"),AEe.forEach(t),Hdo=i(M),Pp=n(M,"LI",{});var yEe=s(Pp);kre=n(yEe,"STRONG",{});var Nzr=s(kre);Udo=r(Nzr,"imagegpt"),Nzr.forEach(t),Jdo=r(yEe," \u2014 "),KB=n(yEe,"A",{href:!0});var jzr=s(KB);Ydo=r(jzr,"ImageGPTModel"),jzr.forEach(t),Kdo=r(yEe," (ImageGPT model)"),yEe.forEach(t),Zdo=i(M),$p=n(M,"LI",{});var LEe=s($p);Sre=n(LEe,"STRONG",{});var Dzr=s(Sre);eco=r(Dzr,"layoutlm"),Dzr.forEach(t),oco=r(LEe," \u2014 "),ZB=n(LEe,"A",{href:!0});var Gzr=s(ZB);rco=r(Gzr,"LayoutLMModel"),Gzr.forEach(t),tco=r(LEe," (LayoutLM model)"),LEe.forEach(t),aco=i(M),Ip=n(M,"LI",{});var xEe=s(Ip);Rre=n(xEe,"STRONG",{});var Ozr=s(Rre);nco=r(Ozr,"layoutlmv2"),Ozr.forEach(t),sco=r(xEe," \u2014 "),eP=n(xEe,"A",{href:!0});var Vzr=s(eP);lco=r(Vzr,"LayoutLMv2Model"),Vzr.forEach(t),ico=r(xEe," (LayoutLMv2 model)"),xEe.forEach(t),dco=i(M),qp=n(M,"LI",{});var kEe=s(qp);Bre=n(kEe,"STRONG",{});var Xzr=s(Bre);cco=r(Xzr,"led"),Xzr.forEach(t),fco=r(kEe," \u2014 "),oP=n(kEe,"A",{href:!0});var zzr=s(oP);mco=r(zzr,"LEDModel"),zzr.forEach(t),gco=r(kEe," (LED model)"),kEe.forEach(t),hco=i(M),Np=n(M,"LI",{});var SEe=s(Np);Pre=n(SEe,"STRONG",{});var Qzr=s(Pre);pco=r(Qzr,"longformer"),Qzr.forEach(t),_co=r(SEe," \u2014 "),rP=n(SEe,"A",{href:!0});var Wzr=s(rP);uco=r(Wzr,"LongformerModel"),Wzr.forEach(t),bco=r(SEe," (Longformer model)"),SEe.forEach(t),Fco=i(M),jp=n(M,"LI",{});var REe=s(jp);$re=n(REe,"STRONG",{});var Hzr=s($re);vco=r(Hzr,"luke"),Hzr.forEach(t),Tco=r(REe," \u2014 "),tP=n(REe,"A",{href:!0});var Uzr=s(tP);Mco=r(Uzr,"LukeModel"),Uzr.forEach(t),Eco=r(REe," (LUKE model)"),REe.forEach(t),Cco=i(M),Dp=n(M,"LI",{});var BEe=s(Dp);Ire=n(BEe,"STRONG",{});var Jzr=s(Ire);wco=r(Jzr,"lxmert"),Jzr.forEach(t),Aco=r(BEe," \u2014 "),aP=n(BEe,"A",{href:!0});var Yzr=s(aP);yco=r(Yzr,"LxmertModel"),Yzr.forEach(t),Lco=r(BEe," (LXMERT model)"),BEe.forEach(t),xco=i(M),Gp=n(M,"LI",{});var PEe=s(Gp);qre=n(PEe,"STRONG",{});var Kzr=s(qre);kco=r(Kzr,"m2m_100"),Kzr.forEach(t),Sco=r(PEe," \u2014 "),nP=n(PEe,"A",{href:!0});var Zzr=s(nP);Rco=r(Zzr,"M2M100Model"),Zzr.forEach(t),Bco=r(PEe," (M2M100 model)"),PEe.forEach(t),Pco=i(M),Op=n(M,"LI",{});var $Ee=s(Op);Nre=n($Ee,"STRONG",{});var eQr=s(Nre);$co=r(eQr,"marian"),eQr.forEach(t),Ico=r($Ee," \u2014 "),sP=n($Ee,"A",{href:!0});var oQr=s(sP);qco=r(oQr,"MarianModel"),oQr.forEach(t),Nco=r($Ee," (Marian model)"),$Ee.forEach(t),jco=i(M),Vp=n(M,"LI",{});var IEe=s(Vp);jre=n(IEe,"STRONG",{});var rQr=s(jre);Dco=r(rQr,"maskformer"),rQr.forEach(t),Gco=r(IEe," \u2014 "),lP=n(IEe,"A",{href:!0});var tQr=s(lP);Oco=r(tQr,"MaskFormerModel"),tQr.forEach(t),Vco=r(IEe," (MaskFormer model)"),IEe.forEach(t),Xco=i(M),Xp=n(M,"LI",{});var qEe=s(Xp);Dre=n(qEe,"STRONG",{});var aQr=s(Dre);zco=r(aQr,"mbart"),aQr.forEach(t),Qco=r(qEe," \u2014 "),iP=n(qEe,"A",{href:!0});var nQr=s(iP);Wco=r(nQr,"MBartModel"),nQr.forEach(t),Hco=r(qEe," (mBART model)"),qEe.forEach(t),Uco=i(M),zp=n(M,"LI",{});var NEe=s(zp);Gre=n(NEe,"STRONG",{});var sQr=s(Gre);Jco=r(sQr,"megatron-bert"),sQr.forEach(t),Yco=r(NEe," \u2014 "),dP=n(NEe,"A",{href:!0});var lQr=s(dP);Kco=r(lQr,"MegatronBertModel"),lQr.forEach(t),Zco=r(NEe," (MegatronBert model)"),NEe.forEach(t),efo=i(M),Qp=n(M,"LI",{});var jEe=s(Qp);Ore=n(jEe,"STRONG",{});var iQr=s(Ore);ofo=r(iQr,"mobilebert"),iQr.forEach(t),rfo=r(jEe," \u2014 "),cP=n(jEe,"A",{href:!0});var dQr=s(cP);tfo=r(dQr,"MobileBertModel"),dQr.forEach(t),afo=r(jEe," (MobileBERT model)"),jEe.forEach(t),nfo=i(M),Wp=n(M,"LI",{});var DEe=s(Wp);Vre=n(DEe,"STRONG",{});var cQr=s(Vre);sfo=r(cQr,"mpnet"),cQr.forEach(t),lfo=r(DEe," \u2014 "),fP=n(DEe,"A",{href:!0});var fQr=s(fP);ifo=r(fQr,"MPNetModel"),fQr.forEach(t),dfo=r(DEe," (MPNet model)"),DEe.forEach(t),cfo=i(M),Hp=n(M,"LI",{});var GEe=s(Hp);Xre=n(GEe,"STRONG",{});var mQr=s(Xre);ffo=r(mQr,"mt5"),mQr.forEach(t),mfo=r(GEe," \u2014 "),mP=n(GEe,"A",{href:!0});var gQr=s(mP);gfo=r(gQr,"MT5Model"),gQr.forEach(t),hfo=r(GEe," (mT5 model)"),GEe.forEach(t),pfo=i(M),Up=n(M,"LI",{});var OEe=s(Up);zre=n(OEe,"STRONG",{});var hQr=s(zre);_fo=r(hQr,"nystromformer"),hQr.forEach(t),ufo=r(OEe," \u2014 "),gP=n(OEe,"A",{href:!0});var pQr=s(gP);bfo=r(pQr,"NystromformerModel"),pQr.forEach(t),Ffo=r(OEe," (Nystromformer model)"),OEe.forEach(t),vfo=i(M),Jp=n(M,"LI",{});var VEe=s(Jp);Qre=n(VEe,"STRONG",{});var _Qr=s(Qre);Tfo=r(_Qr,"openai-gpt"),_Qr.forEach(t),Mfo=r(VEe," \u2014 "),hP=n(VEe,"A",{href:!0});var uQr=s(hP);Efo=r(uQr,"OpenAIGPTModel"),uQr.forEach(t),Cfo=r(VEe," (OpenAI GPT model)"),VEe.forEach(t),wfo=i(M),Yp=n(M,"LI",{});var XEe=s(Yp);Wre=n(XEe,"STRONG",{});var bQr=s(Wre);Afo=r(bQr,"pegasus"),bQr.forEach(t),yfo=r(XEe," \u2014 "),pP=n(XEe,"A",{href:!0});var FQr=s(pP);Lfo=r(FQr,"PegasusModel"),FQr.forEach(t),xfo=r(XEe," (Pegasus model)"),XEe.forEach(t),kfo=i(M),Kp=n(M,"LI",{});var zEe=s(Kp);Hre=n(zEe,"STRONG",{});var vQr=s(Hre);Sfo=r(vQr,"perceiver"),vQr.forEach(t),Rfo=r(zEe," \u2014 "),_P=n(zEe,"A",{href:!0});var TQr=s(_P);Bfo=r(TQr,"PerceiverModel"),TQr.forEach(t),Pfo=r(zEe," (Perceiver model)"),zEe.forEach(t),$fo=i(M),Zp=n(M,"LI",{});var QEe=s(Zp);Ure=n(QEe,"STRONG",{});var MQr=s(Ure);Ifo=r(MQr,"plbart"),MQr.forEach(t),qfo=r(QEe," \u2014 "),uP=n(QEe,"A",{href:!0});var EQr=s(uP);Nfo=r(EQr,"PLBartModel"),EQr.forEach(t),jfo=r(QEe," (PLBart model)"),QEe.forEach(t),Dfo=i(M),e_=n(M,"LI",{});var WEe=s(e_);Jre=n(WEe,"STRONG",{});var CQr=s(Jre);Gfo=r(CQr,"poolformer"),CQr.forEach(t),Ofo=r(WEe," \u2014 "),bP=n(WEe,"A",{href:!0});var wQr=s(bP);Vfo=r(wQr,"PoolFormerModel"),wQr.forEach(t),Xfo=r(WEe," (PoolFormer model)"),WEe.forEach(t),zfo=i(M),o_=n(M,"LI",{});var HEe=s(o_);Yre=n(HEe,"STRONG",{});var AQr=s(Yre);Qfo=r(AQr,"prophetnet"),AQr.forEach(t),Wfo=r(HEe," \u2014 "),FP=n(HEe,"A",{href:!0});var yQr=s(FP);Hfo=r(yQr,"ProphetNetModel"),yQr.forEach(t),Ufo=r(HEe," (ProphetNet model)"),HEe.forEach(t),Jfo=i(M),r_=n(M,"LI",{});var UEe=s(r_);Kre=n(UEe,"STRONG",{});var LQr=s(Kre);Yfo=r(LQr,"qdqbert"),LQr.forEach(t),Kfo=r(UEe," \u2014 "),vP=n(UEe,"A",{href:!0});var xQr=s(vP);Zfo=r(xQr,"QDQBertModel"),xQr.forEach(t),emo=r(UEe," (QDQBert model)"),UEe.forEach(t),omo=i(M),t_=n(M,"LI",{});var JEe=s(t_);Zre=n(JEe,"STRONG",{});var kQr=s(Zre);rmo=r(kQr,"reformer"),kQr.forEach(t),tmo=r(JEe," \u2014 "),TP=n(JEe,"A",{href:!0});var SQr=s(TP);amo=r(SQr,"ReformerModel"),SQr.forEach(t),nmo=r(JEe," (Reformer model)"),JEe.forEach(t),smo=i(M),a_=n(M,"LI",{});var YEe=s(a_);ete=n(YEe,"STRONG",{});var RQr=s(ete);lmo=r(RQr,"regnet"),RQr.forEach(t),imo=r(YEe," \u2014 "),MP=n(YEe,"A",{href:!0});var BQr=s(MP);dmo=r(BQr,"RegNetModel"),BQr.forEach(t),cmo=r(YEe," (RegNet model)"),YEe.forEach(t),fmo=i(M),n_=n(M,"LI",{});var KEe=s(n_);ote=n(KEe,"STRONG",{});var PQr=s(ote);mmo=r(PQr,"rembert"),PQr.forEach(t),gmo=r(KEe," \u2014 "),EP=n(KEe,"A",{href:!0});var $Qr=s(EP);hmo=r($Qr,"RemBertModel"),$Qr.forEach(t),pmo=r(KEe," (RemBERT model)"),KEe.forEach(t),_mo=i(M),s_=n(M,"LI",{});var ZEe=s(s_);rte=n(ZEe,"STRONG",{});var IQr=s(rte);umo=r(IQr,"resnet"),IQr.forEach(t),bmo=r(ZEe," \u2014 "),CP=n(ZEe,"A",{href:!0});var qQr=s(CP);Fmo=r(qQr,"ResNetModel"),qQr.forEach(t),vmo=r(ZEe," (ResNet model)"),ZEe.forEach(t),Tmo=i(M),l_=n(M,"LI",{});var eCe=s(l_);tte=n(eCe,"STRONG",{});var NQr=s(tte);Mmo=r(NQr,"retribert"),NQr.forEach(t),Emo=r(eCe," \u2014 "),wP=n(eCe,"A",{href:!0});var jQr=s(wP);Cmo=r(jQr,"RetriBertModel"),jQr.forEach(t),wmo=r(eCe," (RetriBERT model)"),eCe.forEach(t),Amo=i(M),i_=n(M,"LI",{});var oCe=s(i_);ate=n(oCe,"STRONG",{});var DQr=s(ate);ymo=r(DQr,"roberta"),DQr.forEach(t),Lmo=r(oCe," \u2014 "),AP=n(oCe,"A",{href:!0});var GQr=s(AP);xmo=r(GQr,"RobertaModel"),GQr.forEach(t),kmo=r(oCe," (RoBERTa model)"),oCe.forEach(t),Smo=i(M),d_=n(M,"LI",{});var rCe=s(d_);nte=n(rCe,"STRONG",{});var OQr=s(nte);Rmo=r(OQr,"roformer"),OQr.forEach(t),Bmo=r(rCe," \u2014 "),yP=n(rCe,"A",{href:!0});var VQr=s(yP);Pmo=r(VQr,"RoFormerModel"),VQr.forEach(t),$mo=r(rCe," (RoFormer model)"),rCe.forEach(t),Imo=i(M),c_=n(M,"LI",{});var tCe=s(c_);ste=n(tCe,"STRONG",{});var XQr=s(ste);qmo=r(XQr,"segformer"),XQr.forEach(t),Nmo=r(tCe," \u2014 "),LP=n(tCe,"A",{href:!0});var zQr=s(LP);jmo=r(zQr,"SegformerModel"),zQr.forEach(t),Dmo=r(tCe," (SegFormer model)"),tCe.forEach(t),Gmo=i(M),f_=n(M,"LI",{});var aCe=s(f_);lte=n(aCe,"STRONG",{});var QQr=s(lte);Omo=r(QQr,"sew"),QQr.forEach(t),Vmo=r(aCe," \u2014 "),xP=n(aCe,"A",{href:!0});var WQr=s(xP);Xmo=r(WQr,"SEWModel"),WQr.forEach(t),zmo=r(aCe," (SEW model)"),aCe.forEach(t),Qmo=i(M),m_=n(M,"LI",{});var nCe=s(m_);ite=n(nCe,"STRONG",{});var HQr=s(ite);Wmo=r(HQr,"sew-d"),HQr.forEach(t),Hmo=r(nCe," \u2014 "),kP=n(nCe,"A",{href:!0});var UQr=s(kP);Umo=r(UQr,"SEWDModel"),UQr.forEach(t),Jmo=r(nCe," (SEW-D model)"),nCe.forEach(t),Ymo=i(M),g_=n(M,"LI",{});var sCe=s(g_);dte=n(sCe,"STRONG",{});var JQr=s(dte);Kmo=r(JQr,"speech_to_text"),JQr.forEach(t),Zmo=r(sCe," \u2014 "),SP=n(sCe,"A",{href:!0});var YQr=s(SP);ego=r(YQr,"Speech2TextModel"),YQr.forEach(t),ogo=r(sCe," (Speech2Text model)"),sCe.forEach(t),rgo=i(M),h_=n(M,"LI",{});var lCe=s(h_);cte=n(lCe,"STRONG",{});var KQr=s(cte);tgo=r(KQr,"splinter"),KQr.forEach(t),ago=r(lCe," \u2014 "),RP=n(lCe,"A",{href:!0});var ZQr=s(RP);ngo=r(ZQr,"SplinterModel"),ZQr.forEach(t),sgo=r(lCe," (Splinter model)"),lCe.forEach(t),lgo=i(M),p_=n(M,"LI",{});var iCe=s(p_);fte=n(iCe,"STRONG",{});var eWr=s(fte);igo=r(eWr,"squeezebert"),eWr.forEach(t),dgo=r(iCe," \u2014 "),BP=n(iCe,"A",{href:!0});var oWr=s(BP);cgo=r(oWr,"SqueezeBertModel"),oWr.forEach(t),fgo=r(iCe," (SqueezeBERT model)"),iCe.forEach(t),mgo=i(M),__=n(M,"LI",{});var dCe=s(__);mte=n(dCe,"STRONG",{});var rWr=s(mte);ggo=r(rWr,"swin"),rWr.forEach(t),hgo=r(dCe," \u2014 "),PP=n(dCe,"A",{href:!0});var tWr=s(PP);pgo=r(tWr,"SwinModel"),tWr.forEach(t),_go=r(dCe," (Swin model)"),dCe.forEach(t),ugo=i(M),u_=n(M,"LI",{});var cCe=s(u_);gte=n(cCe,"STRONG",{});var aWr=s(gte);bgo=r(aWr,"t5"),aWr.forEach(t),Fgo=r(cCe," \u2014 "),$P=n(cCe,"A",{href:!0});var nWr=s($P);vgo=r(nWr,"T5Model"),nWr.forEach(t),Tgo=r(cCe," (T5 model)"),cCe.forEach(t),Mgo=i(M),b_=n(M,"LI",{});var fCe=s(b_);hte=n(fCe,"STRONG",{});var sWr=s(hte);Ego=r(sWr,"tapas"),sWr.forEach(t),Cgo=r(fCe," \u2014 "),IP=n(fCe,"A",{href:!0});var lWr=s(IP);wgo=r(lWr,"TapasModel"),lWr.forEach(t),Ago=r(fCe," (TAPAS model)"),fCe.forEach(t),ygo=i(M),F_=n(M,"LI",{});var mCe=s(F_);pte=n(mCe,"STRONG",{});var iWr=s(pte);Lgo=r(iWr,"transfo-xl"),iWr.forEach(t),xgo=r(mCe," \u2014 "),qP=n(mCe,"A",{href:!0});var dWr=s(qP);kgo=r(dWr,"TransfoXLModel"),dWr.forEach(t),Sgo=r(mCe," (Transformer-XL model)"),mCe.forEach(t),Rgo=i(M),v_=n(M,"LI",{});var gCe=s(v_);_te=n(gCe,"STRONG",{});var cWr=s(_te);Bgo=r(cWr,"unispeech"),cWr.forEach(t),Pgo=r(gCe," \u2014 "),NP=n(gCe,"A",{href:!0});var fWr=s(NP);$go=r(fWr,"UniSpeechModel"),fWr.forEach(t),Igo=r(gCe," (UniSpeech model)"),gCe.forEach(t),qgo=i(M),T_=n(M,"LI",{});var hCe=s(T_);ute=n(hCe,"STRONG",{});var mWr=s(ute);Ngo=r(mWr,"unispeech-sat"),mWr.forEach(t),jgo=r(hCe," \u2014 "),jP=n(hCe,"A",{href:!0});var gWr=s(jP);Dgo=r(gWr,"UniSpeechSatModel"),gWr.forEach(t),Ggo=r(hCe," (UniSpeechSat model)"),hCe.forEach(t),Ogo=i(M),M_=n(M,"LI",{});var pCe=s(M_);bte=n(pCe,"STRONG",{});var hWr=s(bte);Vgo=r(hWr,"van"),hWr.forEach(t),Xgo=r(pCe," \u2014 "),DP=n(pCe,"A",{href:!0});var pWr=s(DP);zgo=r(pWr,"VanModel"),pWr.forEach(t),Qgo=r(pCe," (VAN model)"),pCe.forEach(t),Wgo=i(M),E_=n(M,"LI",{});var _Ce=s(E_);Fte=n(_Ce,"STRONG",{});var _Wr=s(Fte);Hgo=r(_Wr,"vilt"),_Wr.forEach(t),Ugo=r(_Ce," \u2014 "),GP=n(_Ce,"A",{href:!0});var uWr=s(GP);Jgo=r(uWr,"ViltModel"),uWr.forEach(t),Ygo=r(_Ce," (ViLT model)"),_Ce.forEach(t),Kgo=i(M),C_=n(M,"LI",{});var uCe=s(C_);vte=n(uCe,"STRONG",{});var bWr=s(vte);Zgo=r(bWr,"vision-text-dual-encoder"),bWr.forEach(t),eho=r(uCe," \u2014 "),OP=n(uCe,"A",{href:!0});var FWr=s(OP);oho=r(FWr,"VisionTextDualEncoderModel"),FWr.forEach(t),rho=r(uCe," (VisionTextDualEncoder model)"),uCe.forEach(t),tho=i(M),w_=n(M,"LI",{});var bCe=s(w_);Tte=n(bCe,"STRONG",{});var vWr=s(Tte);aho=r(vWr,"visual_bert"),vWr.forEach(t),nho=r(bCe," \u2014 "),VP=n(bCe,"A",{href:!0});var TWr=s(VP);sho=r(TWr,"VisualBertModel"),TWr.forEach(t),lho=r(bCe," (VisualBert model)"),bCe.forEach(t),iho=i(M),A_=n(M,"LI",{});var FCe=s(A_);Mte=n(FCe,"STRONG",{});var MWr=s(Mte);dho=r(MWr,"vit"),MWr.forEach(t),cho=r(FCe," \u2014 "),XP=n(FCe,"A",{href:!0});var EWr=s(XP);fho=r(EWr,"ViTModel"),EWr.forEach(t),mho=r(FCe," (ViT model)"),FCe.forEach(t),gho=i(M),y_=n(M,"LI",{});var vCe=s(y_);Ete=n(vCe,"STRONG",{});var CWr=s(Ete);hho=r(CWr,"vit_mae"),CWr.forEach(t),pho=r(vCe," \u2014 "),zP=n(vCe,"A",{href:!0});var wWr=s(zP);_ho=r(wWr,"ViTMAEModel"),wWr.forEach(t),uho=r(vCe," (ViTMAE model)"),vCe.forEach(t),bho=i(M),L_=n(M,"LI",{});var TCe=s(L_);Cte=n(TCe,"STRONG",{});var AWr=s(Cte);Fho=r(AWr,"wav2vec2"),AWr.forEach(t),vho=r(TCe," \u2014 "),QP=n(TCe,"A",{href:!0});var yWr=s(QP);Tho=r(yWr,"Wav2Vec2Model"),yWr.forEach(t),Mho=r(TCe," (Wav2Vec2 model)"),TCe.forEach(t),Eho=i(M),x_=n(M,"LI",{});var MCe=s(x_);wte=n(MCe,"STRONG",{});var LWr=s(wte);Cho=r(LWr,"wavlm"),LWr.forEach(t),who=r(MCe," \u2014 "),WP=n(MCe,"A",{href:!0});var xWr=s(WP);Aho=r(xWr,"WavLMModel"),xWr.forEach(t),yho=r(MCe," (WavLM model)"),MCe.forEach(t),Lho=i(M),k_=n(M,"LI",{});var ECe=s(k_);Ate=n(ECe,"STRONG",{});var kWr=s(Ate);xho=r(kWr,"xglm"),kWr.forEach(t),kho=r(ECe," \u2014 "),HP=n(ECe,"A",{href:!0});var SWr=s(HP);Sho=r(SWr,"XGLMModel"),SWr.forEach(t),Rho=r(ECe," (XGLM model)"),ECe.forEach(t),Bho=i(M),S_=n(M,"LI",{});var CCe=s(S_);yte=n(CCe,"STRONG",{});var RWr=s(yte);Pho=r(RWr,"xlm"),RWr.forEach(t),$ho=r(CCe," \u2014 "),UP=n(CCe,"A",{href:!0});var BWr=s(UP);Iho=r(BWr,"XLMModel"),BWr.forEach(t),qho=r(CCe," (XLM model)"),CCe.forEach(t),Nho=i(M),R_=n(M,"LI",{});var wCe=s(R_);Lte=n(wCe,"STRONG",{});var PWr=s(Lte);jho=r(PWr,"xlm-prophetnet"),PWr.forEach(t),Dho=r(wCe," \u2014 "),JP=n(wCe,"A",{href:!0});var $Wr=s(JP);Gho=r($Wr,"XLMProphetNetModel"),$Wr.forEach(t),Oho=r(wCe," (XLMProphetNet model)"),wCe.forEach(t),Vho=i(M),B_=n(M,"LI",{});var ACe=s(B_);xte=n(ACe,"STRONG",{});var IWr=s(xte);Xho=r(IWr,"xlm-roberta"),IWr.forEach(t),zho=r(ACe," \u2014 "),YP=n(ACe,"A",{href:!0});var qWr=s(YP);Qho=r(qWr,"XLMRobertaModel"),qWr.forEach(t),Who=r(ACe," (XLM-RoBERTa model)"),ACe.forEach(t),Hho=i(M),P_=n(M,"LI",{});var yCe=s(P_);kte=n(yCe,"STRONG",{});var NWr=s(kte);Uho=r(NWr,"xlm-roberta-xl"),NWr.forEach(t),Jho=r(yCe," \u2014 "),KP=n(yCe,"A",{href:!0});var jWr=s(KP);Yho=r(jWr,"XLMRobertaXLModel"),jWr.forEach(t),Kho=r(yCe," (XLM-RoBERTa-XL model)"),yCe.forEach(t),Zho=i(M),$_=n(M,"LI",{});var LCe=s($_);Ste=n(LCe,"STRONG",{});var DWr=s(Ste);epo=r(DWr,"xlnet"),DWr.forEach(t),opo=r(LCe," \u2014 "),ZP=n(LCe,"A",{href:!0});var GWr=s(ZP);rpo=r(GWr,"XLNetModel"),GWr.forEach(t),tpo=r(LCe," (XLNet model)"),LCe.forEach(t),apo=i(M),I_=n(M,"LI",{});var xCe=s(I_);Rte=n(xCe,"STRONG",{});var OWr=s(Rte);npo=r(OWr,"yoso"),OWr.forEach(t),spo=r(xCe," \u2014 "),e$=n(xCe,"A",{href:!0});var VWr=s(e$);lpo=r(VWr,"YosoModel"),VWr.forEach(t),ipo=r(xCe," (YOSO model)"),xCe.forEach(t),M.forEach(t),dpo=i(Dt),q_=n(Dt,"P",{});var kCe=s(q_);cpo=r(kCe,"The model is set in evaluation mode by default using "),Bte=n(kCe,"CODE",{});var XWr=s(Bte);fpo=r(XWr,"model.eval()"),XWr.forEach(t),mpo=r(kCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pte=n(kCe,"CODE",{});var zWr=s(Pte);gpo=r(zWr,"model.train()"),zWr.forEach(t),kCe.forEach(t),hpo=i(Dt),$te=n(Dt,"P",{});var QWr=s($te);ppo=r(QWr,"Examples:"),QWr.forEach(t),_po=i(Dt),m(mw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),ORe=i(c),Zi=n(c,"H2",{class:!0});var YPe=s(Zi);N_=n(YPe,"A",{id:!0,class:!0,href:!0});var WWr=s(N_);Ite=n(WWr,"SPAN",{});var HWr=s(Ite);m(gw.$$.fragment,HWr),HWr.forEach(t),WWr.forEach(t),upo=i(YPe),qte=n(YPe,"SPAN",{});var UWr=s(qte);bpo=r(UWr,"AutoModelForPreTraining"),UWr.forEach(t),YPe.forEach(t),VRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(hw.$$.fragment,Hs),Fpo=i(Hs),ed=n(Hs,"P",{});var FU=s(ed);vpo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),o$=n(FU,"A",{href:!0});var JWr=s(o$);Tpo=r(JWr,"from_pretrained()"),JWr.forEach(t),Mpo=r(FU," class method or the "),r$=n(FU,"A",{href:!0});var YWr=s(r$);Epo=r(YWr,"from_config()"),YWr.forEach(t),Cpo=r(FU,` class
method.`),FU.forEach(t),wpo=i(Hs),pw=n(Hs,"P",{});var KPe=s(pw);Apo=r(KPe,"This class cannot be instantiated directly using "),Nte=n(KPe,"CODE",{});var KWr=s(Nte);ypo=r(KWr,"__init__()"),KWr.forEach(t),Lpo=r(KPe," (throws an error)."),KPe.forEach(t),xpo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(_w.$$.fragment,Us),kpo=i(Us),jte=n(Us,"P",{});var ZWr=s(jte);Spo=r(ZWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZWr.forEach(t),Rpo=i(Us),od=n(Us,"P",{});var vU=s(od);Bpo=r(vU,`Note:
Loading a model from its configuration file does `),Dte=n(vU,"STRONG",{});var eHr=s(Dte);Ppo=r(eHr,"not"),eHr.forEach(t),$po=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),t$=n(vU,"A",{href:!0});var oHr=s(t$);Ipo=r(oHr,"from_pretrained()"),oHr.forEach(t),qpo=r(vU," to load the model weights."),vU.forEach(t),Npo=i(Us),Gte=n(Us,"P",{});var rHr=s(Gte);jpo=r(rHr,"Examples:"),rHr.forEach(t),Dpo=i(Us),m(uw.$$.fragment,Us),Us.forEach(t),Gpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(bw.$$.fragment,Gt),Opo=i(Gt),Ote=n(Gt,"P",{});var tHr=s(Ote);Vpo=r(tHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tHr.forEach(t),Xpo=i(Gt),za=n(Gt,"P",{});var SE=s(za);zpo=r(SE,"The model class to instantiate is selected based on the "),Vte=n(SE,"CODE",{});var aHr=s(Vte);Qpo=r(aHr,"model_type"),aHr.forEach(t),Wpo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Xte=n(SE,"CODE",{});var nHr=s(Xte);Hpo=r(nHr,"pretrained_model_name_or_path"),nHr.forEach(t),Upo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(SE,"CODE",{});var sHr=s(zte);Jpo=r(sHr,"pretrained_model_name_or_path"),sHr.forEach(t),Ypo=r(SE,":"),SE.forEach(t),Kpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);j_=n(B,"LI",{});var SCe=s(j_);Qte=n(SCe,"STRONG",{});var lHr=s(Qte);Zpo=r(lHr,"albert"),lHr.forEach(t),e_o=r(SCe," \u2014 "),a$=n(SCe,"A",{href:!0});var iHr=s(a$);o_o=r(iHr,"AlbertForPreTraining"),iHr.forEach(t),r_o=r(SCe," (ALBERT model)"),SCe.forEach(t),t_o=i(B),D_=n(B,"LI",{});var RCe=s(D_);Wte=n(RCe,"STRONG",{});var dHr=s(Wte);a_o=r(dHr,"bart"),dHr.forEach(t),n_o=r(RCe," \u2014 "),n$=n(RCe,"A",{href:!0});var cHr=s(n$);s_o=r(cHr,"BartForConditionalGeneration"),cHr.forEach(t),l_o=r(RCe," (BART model)"),RCe.forEach(t),i_o=i(B),G_=n(B,"LI",{});var BCe=s(G_);Hte=n(BCe,"STRONG",{});var fHr=s(Hte);d_o=r(fHr,"bert"),fHr.forEach(t),c_o=r(BCe," \u2014 "),s$=n(BCe,"A",{href:!0});var mHr=s(s$);f_o=r(mHr,"BertForPreTraining"),mHr.forEach(t),m_o=r(BCe," (BERT model)"),BCe.forEach(t),g_o=i(B),O_=n(B,"LI",{});var PCe=s(O_);Ute=n(PCe,"STRONG",{});var gHr=s(Ute);h_o=r(gHr,"big_bird"),gHr.forEach(t),p_o=r(PCe," \u2014 "),l$=n(PCe,"A",{href:!0});var hHr=s(l$);__o=r(hHr,"BigBirdForPreTraining"),hHr.forEach(t),u_o=r(PCe," (BigBird model)"),PCe.forEach(t),b_o=i(B),V_=n(B,"LI",{});var $Ce=s(V_);Jte=n($Ce,"STRONG",{});var pHr=s(Jte);F_o=r(pHr,"camembert"),pHr.forEach(t),v_o=r($Ce," \u2014 "),i$=n($Ce,"A",{href:!0});var _Hr=s(i$);T_o=r(_Hr,"CamembertForMaskedLM"),_Hr.forEach(t),M_o=r($Ce," (CamemBERT model)"),$Ce.forEach(t),E_o=i(B),X_=n(B,"LI",{});var ICe=s(X_);Yte=n(ICe,"STRONG",{});var uHr=s(Yte);C_o=r(uHr,"ctrl"),uHr.forEach(t),w_o=r(ICe," \u2014 "),d$=n(ICe,"A",{href:!0});var bHr=s(d$);A_o=r(bHr,"CTRLLMHeadModel"),bHr.forEach(t),y_o=r(ICe," (CTRL model)"),ICe.forEach(t),L_o=i(B),z_=n(B,"LI",{});var qCe=s(z_);Kte=n(qCe,"STRONG",{});var FHr=s(Kte);x_o=r(FHr,"data2vec-text"),FHr.forEach(t),k_o=r(qCe," \u2014 "),c$=n(qCe,"A",{href:!0});var vHr=s(c$);S_o=r(vHr,"Data2VecTextForMaskedLM"),vHr.forEach(t),R_o=r(qCe," (Data2VecText model)"),qCe.forEach(t),B_o=i(B),Q_=n(B,"LI",{});var NCe=s(Q_);Zte=n(NCe,"STRONG",{});var THr=s(Zte);P_o=r(THr,"deberta"),THr.forEach(t),$_o=r(NCe," \u2014 "),f$=n(NCe,"A",{href:!0});var MHr=s(f$);I_o=r(MHr,"DebertaForMaskedLM"),MHr.forEach(t),q_o=r(NCe," (DeBERTa model)"),NCe.forEach(t),N_o=i(B),W_=n(B,"LI",{});var jCe=s(W_);eae=n(jCe,"STRONG",{});var EHr=s(eae);j_o=r(EHr,"deberta-v2"),EHr.forEach(t),D_o=r(jCe," \u2014 "),m$=n(jCe,"A",{href:!0});var CHr=s(m$);G_o=r(CHr,"DebertaV2ForMaskedLM"),CHr.forEach(t),O_o=r(jCe," (DeBERTa-v2 model)"),jCe.forEach(t),V_o=i(B),H_=n(B,"LI",{});var DCe=s(H_);oae=n(DCe,"STRONG",{});var wHr=s(oae);X_o=r(wHr,"distilbert"),wHr.forEach(t),z_o=r(DCe," \u2014 "),g$=n(DCe,"A",{href:!0});var AHr=s(g$);Q_o=r(AHr,"DistilBertForMaskedLM"),AHr.forEach(t),W_o=r(DCe," (DistilBERT model)"),DCe.forEach(t),H_o=i(B),U_=n(B,"LI",{});var GCe=s(U_);rae=n(GCe,"STRONG",{});var yHr=s(rae);U_o=r(yHr,"electra"),yHr.forEach(t),J_o=r(GCe," \u2014 "),h$=n(GCe,"A",{href:!0});var LHr=s(h$);Y_o=r(LHr,"ElectraForPreTraining"),LHr.forEach(t),K_o=r(GCe," (ELECTRA model)"),GCe.forEach(t),Z_o=i(B),J_=n(B,"LI",{});var OCe=s(J_);tae=n(OCe,"STRONG",{});var xHr=s(tae);euo=r(xHr,"flaubert"),xHr.forEach(t),ouo=r(OCe," \u2014 "),p$=n(OCe,"A",{href:!0});var kHr=s(p$);ruo=r(kHr,"FlaubertWithLMHeadModel"),kHr.forEach(t),tuo=r(OCe," (FlauBERT model)"),OCe.forEach(t),auo=i(B),Y_=n(B,"LI",{});var VCe=s(Y_);aae=n(VCe,"STRONG",{});var SHr=s(aae);nuo=r(SHr,"fnet"),SHr.forEach(t),suo=r(VCe," \u2014 "),_$=n(VCe,"A",{href:!0});var RHr=s(_$);luo=r(RHr,"FNetForPreTraining"),RHr.forEach(t),iuo=r(VCe," (FNet model)"),VCe.forEach(t),duo=i(B),K_=n(B,"LI",{});var XCe=s(K_);nae=n(XCe,"STRONG",{});var BHr=s(nae);cuo=r(BHr,"fsmt"),BHr.forEach(t),fuo=r(XCe," \u2014 "),u$=n(XCe,"A",{href:!0});var PHr=s(u$);muo=r(PHr,"FSMTForConditionalGeneration"),PHr.forEach(t),guo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),huo=i(B),Z_=n(B,"LI",{});var zCe=s(Z_);sae=n(zCe,"STRONG",{});var $Hr=s(sae);puo=r($Hr,"funnel"),$Hr.forEach(t),_uo=r(zCe," \u2014 "),b$=n(zCe,"A",{href:!0});var IHr=s(b$);uuo=r(IHr,"FunnelForPreTraining"),IHr.forEach(t),buo=r(zCe," (Funnel Transformer model)"),zCe.forEach(t),Fuo=i(B),eu=n(B,"LI",{});var QCe=s(eu);lae=n(QCe,"STRONG",{});var qHr=s(lae);vuo=r(qHr,"gpt2"),qHr.forEach(t),Tuo=r(QCe," \u2014 "),F$=n(QCe,"A",{href:!0});var NHr=s(F$);Muo=r(NHr,"GPT2LMHeadModel"),NHr.forEach(t),Euo=r(QCe," (OpenAI GPT-2 model)"),QCe.forEach(t),Cuo=i(B),ou=n(B,"LI",{});var WCe=s(ou);iae=n(WCe,"STRONG",{});var jHr=s(iae);wuo=r(jHr,"ibert"),jHr.forEach(t),Auo=r(WCe," \u2014 "),v$=n(WCe,"A",{href:!0});var DHr=s(v$);yuo=r(DHr,"IBertForMaskedLM"),DHr.forEach(t),Luo=r(WCe," (I-BERT model)"),WCe.forEach(t),xuo=i(B),ru=n(B,"LI",{});var HCe=s(ru);dae=n(HCe,"STRONG",{});var GHr=s(dae);kuo=r(GHr,"layoutlm"),GHr.forEach(t),Suo=r(HCe," \u2014 "),T$=n(HCe,"A",{href:!0});var OHr=s(T$);Ruo=r(OHr,"LayoutLMForMaskedLM"),OHr.forEach(t),Buo=r(HCe," (LayoutLM model)"),HCe.forEach(t),Puo=i(B),tu=n(B,"LI",{});var UCe=s(tu);cae=n(UCe,"STRONG",{});var VHr=s(cae);$uo=r(VHr,"longformer"),VHr.forEach(t),Iuo=r(UCe," \u2014 "),M$=n(UCe,"A",{href:!0});var XHr=s(M$);quo=r(XHr,"LongformerForMaskedLM"),XHr.forEach(t),Nuo=r(UCe," (Longformer model)"),UCe.forEach(t),juo=i(B),au=n(B,"LI",{});var JCe=s(au);fae=n(JCe,"STRONG",{});var zHr=s(fae);Duo=r(zHr,"lxmert"),zHr.forEach(t),Guo=r(JCe," \u2014 "),E$=n(JCe,"A",{href:!0});var QHr=s(E$);Ouo=r(QHr,"LxmertForPreTraining"),QHr.forEach(t),Vuo=r(JCe," (LXMERT model)"),JCe.forEach(t),Xuo=i(B),nu=n(B,"LI",{});var YCe=s(nu);mae=n(YCe,"STRONG",{});var WHr=s(mae);zuo=r(WHr,"megatron-bert"),WHr.forEach(t),Quo=r(YCe," \u2014 "),C$=n(YCe,"A",{href:!0});var HHr=s(C$);Wuo=r(HHr,"MegatronBertForPreTraining"),HHr.forEach(t),Huo=r(YCe," (MegatronBert model)"),YCe.forEach(t),Uuo=i(B),su=n(B,"LI",{});var KCe=s(su);gae=n(KCe,"STRONG",{});var UHr=s(gae);Juo=r(UHr,"mobilebert"),UHr.forEach(t),Yuo=r(KCe," \u2014 "),w$=n(KCe,"A",{href:!0});var JHr=s(w$);Kuo=r(JHr,"MobileBertForPreTraining"),JHr.forEach(t),Zuo=r(KCe," (MobileBERT model)"),KCe.forEach(t),e1o=i(B),lu=n(B,"LI",{});var ZCe=s(lu);hae=n(ZCe,"STRONG",{});var YHr=s(hae);o1o=r(YHr,"mpnet"),YHr.forEach(t),r1o=r(ZCe," \u2014 "),A$=n(ZCe,"A",{href:!0});var KHr=s(A$);t1o=r(KHr,"MPNetForMaskedLM"),KHr.forEach(t),a1o=r(ZCe," (MPNet model)"),ZCe.forEach(t),n1o=i(B),iu=n(B,"LI",{});var ewe=s(iu);pae=n(ewe,"STRONG",{});var ZHr=s(pae);s1o=r(ZHr,"openai-gpt"),ZHr.forEach(t),l1o=r(ewe," \u2014 "),y$=n(ewe,"A",{href:!0});var eUr=s(y$);i1o=r(eUr,"OpenAIGPTLMHeadModel"),eUr.forEach(t),d1o=r(ewe," (OpenAI GPT model)"),ewe.forEach(t),c1o=i(B),du=n(B,"LI",{});var owe=s(du);_ae=n(owe,"STRONG",{});var oUr=s(_ae);f1o=r(oUr,"retribert"),oUr.forEach(t),m1o=r(owe," \u2014 "),L$=n(owe,"A",{href:!0});var rUr=s(L$);g1o=r(rUr,"RetriBertModel"),rUr.forEach(t),h1o=r(owe," (RetriBERT model)"),owe.forEach(t),p1o=i(B),cu=n(B,"LI",{});var rwe=s(cu);uae=n(rwe,"STRONG",{});var tUr=s(uae);_1o=r(tUr,"roberta"),tUr.forEach(t),u1o=r(rwe," \u2014 "),x$=n(rwe,"A",{href:!0});var aUr=s(x$);b1o=r(aUr,"RobertaForMaskedLM"),aUr.forEach(t),F1o=r(rwe," (RoBERTa model)"),rwe.forEach(t),v1o=i(B),fu=n(B,"LI",{});var twe=s(fu);bae=n(twe,"STRONG",{});var nUr=s(bae);T1o=r(nUr,"squeezebert"),nUr.forEach(t),M1o=r(twe," \u2014 "),k$=n(twe,"A",{href:!0});var sUr=s(k$);E1o=r(sUr,"SqueezeBertForMaskedLM"),sUr.forEach(t),C1o=r(twe," (SqueezeBERT model)"),twe.forEach(t),w1o=i(B),mu=n(B,"LI",{});var awe=s(mu);Fae=n(awe,"STRONG",{});var lUr=s(Fae);A1o=r(lUr,"t5"),lUr.forEach(t),y1o=r(awe," \u2014 "),S$=n(awe,"A",{href:!0});var iUr=s(S$);L1o=r(iUr,"T5ForConditionalGeneration"),iUr.forEach(t),x1o=r(awe," (T5 model)"),awe.forEach(t),k1o=i(B),gu=n(B,"LI",{});var nwe=s(gu);vae=n(nwe,"STRONG",{});var dUr=s(vae);S1o=r(dUr,"tapas"),dUr.forEach(t),R1o=r(nwe," \u2014 "),R$=n(nwe,"A",{href:!0});var cUr=s(R$);B1o=r(cUr,"TapasForMaskedLM"),cUr.forEach(t),P1o=r(nwe," (TAPAS model)"),nwe.forEach(t),$1o=i(B),hu=n(B,"LI",{});var swe=s(hu);Tae=n(swe,"STRONG",{});var fUr=s(Tae);I1o=r(fUr,"transfo-xl"),fUr.forEach(t),q1o=r(swe," \u2014 "),B$=n(swe,"A",{href:!0});var mUr=s(B$);N1o=r(mUr,"TransfoXLLMHeadModel"),mUr.forEach(t),j1o=r(swe," (Transformer-XL model)"),swe.forEach(t),D1o=i(B),pu=n(B,"LI",{});var lwe=s(pu);Mae=n(lwe,"STRONG",{});var gUr=s(Mae);G1o=r(gUr,"unispeech"),gUr.forEach(t),O1o=r(lwe," \u2014 "),P$=n(lwe,"A",{href:!0});var hUr=s(P$);V1o=r(hUr,"UniSpeechForPreTraining"),hUr.forEach(t),X1o=r(lwe," (UniSpeech model)"),lwe.forEach(t),z1o=i(B),_u=n(B,"LI",{});var iwe=s(_u);Eae=n(iwe,"STRONG",{});var pUr=s(Eae);Q1o=r(pUr,"unispeech-sat"),pUr.forEach(t),W1o=r(iwe," \u2014 "),$$=n(iwe,"A",{href:!0});var _Ur=s($$);H1o=r(_Ur,"UniSpeechSatForPreTraining"),_Ur.forEach(t),U1o=r(iwe," (UniSpeechSat model)"),iwe.forEach(t),J1o=i(B),uu=n(B,"LI",{});var dwe=s(uu);Cae=n(dwe,"STRONG",{});var uUr=s(Cae);Y1o=r(uUr,"visual_bert"),uUr.forEach(t),K1o=r(dwe," \u2014 "),I$=n(dwe,"A",{href:!0});var bUr=s(I$);Z1o=r(bUr,"VisualBertForPreTraining"),bUr.forEach(t),e7o=r(dwe," (VisualBert model)"),dwe.forEach(t),o7o=i(B),bu=n(B,"LI",{});var cwe=s(bu);wae=n(cwe,"STRONG",{});var FUr=s(wae);r7o=r(FUr,"vit_mae"),FUr.forEach(t),t7o=r(cwe," \u2014 "),q$=n(cwe,"A",{href:!0});var vUr=s(q$);a7o=r(vUr,"ViTMAEForPreTraining"),vUr.forEach(t),n7o=r(cwe," (ViTMAE model)"),cwe.forEach(t),s7o=i(B),Fu=n(B,"LI",{});var fwe=s(Fu);Aae=n(fwe,"STRONG",{});var TUr=s(Aae);l7o=r(TUr,"wav2vec2"),TUr.forEach(t),i7o=r(fwe," \u2014 "),N$=n(fwe,"A",{href:!0});var MUr=s(N$);d7o=r(MUr,"Wav2Vec2ForPreTraining"),MUr.forEach(t),c7o=r(fwe," (Wav2Vec2 model)"),fwe.forEach(t),f7o=i(B),vu=n(B,"LI",{});var mwe=s(vu);yae=n(mwe,"STRONG",{});var EUr=s(yae);m7o=r(EUr,"xlm"),EUr.forEach(t),g7o=r(mwe," \u2014 "),j$=n(mwe,"A",{href:!0});var CUr=s(j$);h7o=r(CUr,"XLMWithLMHeadModel"),CUr.forEach(t),p7o=r(mwe," (XLM model)"),mwe.forEach(t),_7o=i(B),Tu=n(B,"LI",{});var gwe=s(Tu);Lae=n(gwe,"STRONG",{});var wUr=s(Lae);u7o=r(wUr,"xlm-roberta"),wUr.forEach(t),b7o=r(gwe," \u2014 "),D$=n(gwe,"A",{href:!0});var AUr=s(D$);F7o=r(AUr,"XLMRobertaForMaskedLM"),AUr.forEach(t),v7o=r(gwe," (XLM-RoBERTa model)"),gwe.forEach(t),T7o=i(B),Mu=n(B,"LI",{});var hwe=s(Mu);xae=n(hwe,"STRONG",{});var yUr=s(xae);M7o=r(yUr,"xlm-roberta-xl"),yUr.forEach(t),E7o=r(hwe," \u2014 "),G$=n(hwe,"A",{href:!0});var LUr=s(G$);C7o=r(LUr,"XLMRobertaXLForMaskedLM"),LUr.forEach(t),w7o=r(hwe," (XLM-RoBERTa-XL model)"),hwe.forEach(t),A7o=i(B),Eu=n(B,"LI",{});var pwe=s(Eu);kae=n(pwe,"STRONG",{});var xUr=s(kae);y7o=r(xUr,"xlnet"),xUr.forEach(t),L7o=r(pwe," \u2014 "),O$=n(pwe,"A",{href:!0});var kUr=s(O$);x7o=r(kUr,"XLNetLMHeadModel"),kUr.forEach(t),k7o=r(pwe," (XLNet model)"),pwe.forEach(t),B.forEach(t),S7o=i(Gt),Cu=n(Gt,"P",{});var _we=s(Cu);R7o=r(_we,"The model is set in evaluation mode by default using "),Sae=n(_we,"CODE",{});var SUr=s(Sae);B7o=r(SUr,"model.eval()"),SUr.forEach(t),P7o=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=n(_we,"CODE",{});var RUr=s(Rae);$7o=r(RUr,"model.train()"),RUr.forEach(t),_we.forEach(t),I7o=i(Gt),Bae=n(Gt,"P",{});var BUr=s(Bae);q7o=r(BUr,"Examples:"),BUr.forEach(t),N7o=i(Gt),m(Fw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),XRe=i(c),rd=n(c,"H2",{class:!0});var ZPe=s(rd);wu=n(ZPe,"A",{id:!0,class:!0,href:!0});var PUr=s(wu);Pae=n(PUr,"SPAN",{});var $Ur=s(Pae);m(vw.$$.fragment,$Ur),$Ur.forEach(t),PUr.forEach(t),j7o=i(ZPe),$ae=n(ZPe,"SPAN",{});var IUr=s($ae);D7o=r(IUr,"AutoModelForCausalLM"),IUr.forEach(t),ZPe.forEach(t),zRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(Tw.$$.fragment,Js),G7o=i(Js),td=n(Js,"P",{});var TU=s(td);O7o=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),V$=n(TU,"A",{href:!0});var qUr=s(V$);V7o=r(qUr,"from_pretrained()"),qUr.forEach(t),X7o=r(TU," class method or the "),X$=n(TU,"A",{href:!0});var NUr=s(X$);z7o=r(NUr,"from_config()"),NUr.forEach(t),Q7o=r(TU,` class
method.`),TU.forEach(t),W7o=i(Js),Mw=n(Js,"P",{});var e$e=s(Mw);H7o=r(e$e,"This class cannot be instantiated directly using "),Iae=n(e$e,"CODE",{});var jUr=s(Iae);U7o=r(jUr,"__init__()"),jUr.forEach(t),J7o=r(e$e," (throws an error)."),e$e.forEach(t),Y7o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(Ew.$$.fragment,Ys),K7o=i(Ys),qae=n(Ys,"P",{});var DUr=s(qae);Z7o=r(DUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DUr.forEach(t),ebo=i(Ys),ad=n(Ys,"P",{});var MU=s(ad);obo=r(MU,`Note:
Loading a model from its configuration file does `),Nae=n(MU,"STRONG",{});var GUr=s(Nae);rbo=r(GUr,"not"),GUr.forEach(t),tbo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),z$=n(MU,"A",{href:!0});var OUr=s(z$);abo=r(OUr,"from_pretrained()"),OUr.forEach(t),nbo=r(MU," to load the model weights."),MU.forEach(t),sbo=i(Ys),jae=n(Ys,"P",{});var VUr=s(jae);lbo=r(VUr,"Examples:"),VUr.forEach(t),ibo=i(Ys),m(Cw.$$.fragment,Ys),Ys.forEach(t),dbo=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(ww.$$.fragment,Ot),cbo=i(Ot),Dae=n(Ot,"P",{});var XUr=s(Dae);fbo=r(XUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XUr.forEach(t),mbo=i(Ot),Qa=n(Ot,"P",{});var RE=s(Qa);gbo=r(RE,"The model class to instantiate is selected based on the "),Gae=n(RE,"CODE",{});var zUr=s(Gae);hbo=r(zUr,"model_type"),zUr.forEach(t),pbo=r(RE,` property of the config object (either
passed as an argument or loaded from `),Oae=n(RE,"CODE",{});var QUr=s(Oae);_bo=r(QUr,"pretrained_model_name_or_path"),QUr.forEach(t),ubo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vae=n(RE,"CODE",{});var WUr=s(Vae);bbo=r(WUr,"pretrained_model_name_or_path"),WUr.forEach(t),Fbo=r(RE,":"),RE.forEach(t),vbo=i(Ot),$=n(Ot,"UL",{});var q=s($);Au=n(q,"LI",{});var uwe=s(Au);Xae=n(uwe,"STRONG",{});var HUr=s(Xae);Tbo=r(HUr,"bart"),HUr.forEach(t),Mbo=r(uwe," \u2014 "),Q$=n(uwe,"A",{href:!0});var UUr=s(Q$);Ebo=r(UUr,"BartForCausalLM"),UUr.forEach(t),Cbo=r(uwe," (BART model)"),uwe.forEach(t),wbo=i(q),yu=n(q,"LI",{});var bwe=s(yu);zae=n(bwe,"STRONG",{});var JUr=s(zae);Abo=r(JUr,"bert"),JUr.forEach(t),ybo=r(bwe," \u2014 "),W$=n(bwe,"A",{href:!0});var YUr=s(W$);Lbo=r(YUr,"BertLMHeadModel"),YUr.forEach(t),xbo=r(bwe," (BERT model)"),bwe.forEach(t),kbo=i(q),Lu=n(q,"LI",{});var Fwe=s(Lu);Qae=n(Fwe,"STRONG",{});var KUr=s(Qae);Sbo=r(KUr,"bert-generation"),KUr.forEach(t),Rbo=r(Fwe," \u2014 "),H$=n(Fwe,"A",{href:!0});var ZUr=s(H$);Bbo=r(ZUr,"BertGenerationDecoder"),ZUr.forEach(t),Pbo=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),$bo=i(q),xu=n(q,"LI",{});var vwe=s(xu);Wae=n(vwe,"STRONG",{});var eJr=s(Wae);Ibo=r(eJr,"big_bird"),eJr.forEach(t),qbo=r(vwe," \u2014 "),U$=n(vwe,"A",{href:!0});var oJr=s(U$);Nbo=r(oJr,"BigBirdForCausalLM"),oJr.forEach(t),jbo=r(vwe," (BigBird model)"),vwe.forEach(t),Dbo=i(q),ku=n(q,"LI",{});var Twe=s(ku);Hae=n(Twe,"STRONG",{});var rJr=s(Hae);Gbo=r(rJr,"bigbird_pegasus"),rJr.forEach(t),Obo=r(Twe," \u2014 "),J$=n(Twe,"A",{href:!0});var tJr=s(J$);Vbo=r(tJr,"BigBirdPegasusForCausalLM"),tJr.forEach(t),Xbo=r(Twe," (BigBirdPegasus model)"),Twe.forEach(t),zbo=i(q),Su=n(q,"LI",{});var Mwe=s(Su);Uae=n(Mwe,"STRONG",{});var aJr=s(Uae);Qbo=r(aJr,"blenderbot"),aJr.forEach(t),Wbo=r(Mwe," \u2014 "),Y$=n(Mwe,"A",{href:!0});var nJr=s(Y$);Hbo=r(nJr,"BlenderbotForCausalLM"),nJr.forEach(t),Ubo=r(Mwe," (Blenderbot model)"),Mwe.forEach(t),Jbo=i(q),Ru=n(q,"LI",{});var Ewe=s(Ru);Jae=n(Ewe,"STRONG",{});var sJr=s(Jae);Ybo=r(sJr,"blenderbot-small"),sJr.forEach(t),Kbo=r(Ewe," \u2014 "),K$=n(Ewe,"A",{href:!0});var lJr=s(K$);Zbo=r(lJr,"BlenderbotSmallForCausalLM"),lJr.forEach(t),e5o=r(Ewe," (BlenderbotSmall model)"),Ewe.forEach(t),o5o=i(q),Bu=n(q,"LI",{});var Cwe=s(Bu);Yae=n(Cwe,"STRONG",{});var iJr=s(Yae);r5o=r(iJr,"camembert"),iJr.forEach(t),t5o=r(Cwe," \u2014 "),Z$=n(Cwe,"A",{href:!0});var dJr=s(Z$);a5o=r(dJr,"CamembertForCausalLM"),dJr.forEach(t),n5o=r(Cwe," (CamemBERT model)"),Cwe.forEach(t),s5o=i(q),Pu=n(q,"LI",{});var wwe=s(Pu);Kae=n(wwe,"STRONG",{});var cJr=s(Kae);l5o=r(cJr,"ctrl"),cJr.forEach(t),i5o=r(wwe," \u2014 "),eI=n(wwe,"A",{href:!0});var fJr=s(eI);d5o=r(fJr,"CTRLLMHeadModel"),fJr.forEach(t),c5o=r(wwe," (CTRL model)"),wwe.forEach(t),f5o=i(q),$u=n(q,"LI",{});var Awe=s($u);Zae=n(Awe,"STRONG",{});var mJr=s(Zae);m5o=r(mJr,"data2vec-text"),mJr.forEach(t),g5o=r(Awe," \u2014 "),oI=n(Awe,"A",{href:!0});var gJr=s(oI);h5o=r(gJr,"Data2VecTextForCausalLM"),gJr.forEach(t),p5o=r(Awe," (Data2VecText model)"),Awe.forEach(t),_5o=i(q),Iu=n(q,"LI",{});var ywe=s(Iu);ene=n(ywe,"STRONG",{});var hJr=s(ene);u5o=r(hJr,"electra"),hJr.forEach(t),b5o=r(ywe," \u2014 "),rI=n(ywe,"A",{href:!0});var pJr=s(rI);F5o=r(pJr,"ElectraForCausalLM"),pJr.forEach(t),v5o=r(ywe," (ELECTRA model)"),ywe.forEach(t),T5o=i(q),qu=n(q,"LI",{});var Lwe=s(qu);one=n(Lwe,"STRONG",{});var _Jr=s(one);M5o=r(_Jr,"gpt2"),_Jr.forEach(t),E5o=r(Lwe," \u2014 "),tI=n(Lwe,"A",{href:!0});var uJr=s(tI);C5o=r(uJr,"GPT2LMHeadModel"),uJr.forEach(t),w5o=r(Lwe," (OpenAI GPT-2 model)"),Lwe.forEach(t),A5o=i(q),Nu=n(q,"LI",{});var xwe=s(Nu);rne=n(xwe,"STRONG",{});var bJr=s(rne);y5o=r(bJr,"gpt_neo"),bJr.forEach(t),L5o=r(xwe," \u2014 "),aI=n(xwe,"A",{href:!0});var FJr=s(aI);x5o=r(FJr,"GPTNeoForCausalLM"),FJr.forEach(t),k5o=r(xwe," (GPT Neo model)"),xwe.forEach(t),S5o=i(q),ju=n(q,"LI",{});var kwe=s(ju);tne=n(kwe,"STRONG",{});var vJr=s(tne);R5o=r(vJr,"gptj"),vJr.forEach(t),B5o=r(kwe," \u2014 "),nI=n(kwe,"A",{href:!0});var TJr=s(nI);P5o=r(TJr,"GPTJForCausalLM"),TJr.forEach(t),$5o=r(kwe," (GPT-J model)"),kwe.forEach(t),I5o=i(q),Du=n(q,"LI",{});var Swe=s(Du);ane=n(Swe,"STRONG",{});var MJr=s(ane);q5o=r(MJr,"marian"),MJr.forEach(t),N5o=r(Swe," \u2014 "),sI=n(Swe,"A",{href:!0});var EJr=s(sI);j5o=r(EJr,"MarianForCausalLM"),EJr.forEach(t),D5o=r(Swe," (Marian model)"),Swe.forEach(t),G5o=i(q),Gu=n(q,"LI",{});var Rwe=s(Gu);nne=n(Rwe,"STRONG",{});var CJr=s(nne);O5o=r(CJr,"mbart"),CJr.forEach(t),V5o=r(Rwe," \u2014 "),lI=n(Rwe,"A",{href:!0});var wJr=s(lI);X5o=r(wJr,"MBartForCausalLM"),wJr.forEach(t),z5o=r(Rwe," (mBART model)"),Rwe.forEach(t),Q5o=i(q),Ou=n(q,"LI",{});var Bwe=s(Ou);sne=n(Bwe,"STRONG",{});var AJr=s(sne);W5o=r(AJr,"megatron-bert"),AJr.forEach(t),H5o=r(Bwe," \u2014 "),iI=n(Bwe,"A",{href:!0});var yJr=s(iI);U5o=r(yJr,"MegatronBertForCausalLM"),yJr.forEach(t),J5o=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),Y5o=i(q),Vu=n(q,"LI",{});var Pwe=s(Vu);lne=n(Pwe,"STRONG",{});var LJr=s(lne);K5o=r(LJr,"openai-gpt"),LJr.forEach(t),Z5o=r(Pwe," \u2014 "),dI=n(Pwe,"A",{href:!0});var xJr=s(dI);e3o=r(xJr,"OpenAIGPTLMHeadModel"),xJr.forEach(t),o3o=r(Pwe," (OpenAI GPT model)"),Pwe.forEach(t),r3o=i(q),Xu=n(q,"LI",{});var $we=s(Xu);ine=n($we,"STRONG",{});var kJr=s(ine);t3o=r(kJr,"pegasus"),kJr.forEach(t),a3o=r($we," \u2014 "),cI=n($we,"A",{href:!0});var SJr=s(cI);n3o=r(SJr,"PegasusForCausalLM"),SJr.forEach(t),s3o=r($we," (Pegasus model)"),$we.forEach(t),l3o=i(q),zu=n(q,"LI",{});var Iwe=s(zu);dne=n(Iwe,"STRONG",{});var RJr=s(dne);i3o=r(RJr,"plbart"),RJr.forEach(t),d3o=r(Iwe," \u2014 "),fI=n(Iwe,"A",{href:!0});var BJr=s(fI);c3o=r(BJr,"PLBartForCausalLM"),BJr.forEach(t),f3o=r(Iwe," (PLBart model)"),Iwe.forEach(t),m3o=i(q),Qu=n(q,"LI",{});var qwe=s(Qu);cne=n(qwe,"STRONG",{});var PJr=s(cne);g3o=r(PJr,"prophetnet"),PJr.forEach(t),h3o=r(qwe," \u2014 "),mI=n(qwe,"A",{href:!0});var $Jr=s(mI);p3o=r($Jr,"ProphetNetForCausalLM"),$Jr.forEach(t),_3o=r(qwe," (ProphetNet model)"),qwe.forEach(t),u3o=i(q),Wu=n(q,"LI",{});var Nwe=s(Wu);fne=n(Nwe,"STRONG",{});var IJr=s(fne);b3o=r(IJr,"qdqbert"),IJr.forEach(t),F3o=r(Nwe," \u2014 "),gI=n(Nwe,"A",{href:!0});var qJr=s(gI);v3o=r(qJr,"QDQBertLMHeadModel"),qJr.forEach(t),T3o=r(Nwe," (QDQBert model)"),Nwe.forEach(t),M3o=i(q),Hu=n(q,"LI",{});var jwe=s(Hu);mne=n(jwe,"STRONG",{});var NJr=s(mne);E3o=r(NJr,"reformer"),NJr.forEach(t),C3o=r(jwe," \u2014 "),hI=n(jwe,"A",{href:!0});var jJr=s(hI);w3o=r(jJr,"ReformerModelWithLMHead"),jJr.forEach(t),A3o=r(jwe," (Reformer model)"),jwe.forEach(t),y3o=i(q),Uu=n(q,"LI",{});var Dwe=s(Uu);gne=n(Dwe,"STRONG",{});var DJr=s(gne);L3o=r(DJr,"rembert"),DJr.forEach(t),x3o=r(Dwe," \u2014 "),pI=n(Dwe,"A",{href:!0});var GJr=s(pI);k3o=r(GJr,"RemBertForCausalLM"),GJr.forEach(t),S3o=r(Dwe," (RemBERT model)"),Dwe.forEach(t),R3o=i(q),Ju=n(q,"LI",{});var Gwe=s(Ju);hne=n(Gwe,"STRONG",{});var OJr=s(hne);B3o=r(OJr,"roberta"),OJr.forEach(t),P3o=r(Gwe," \u2014 "),_I=n(Gwe,"A",{href:!0});var VJr=s(_I);$3o=r(VJr,"RobertaForCausalLM"),VJr.forEach(t),I3o=r(Gwe," (RoBERTa model)"),Gwe.forEach(t),q3o=i(q),Yu=n(q,"LI",{});var Owe=s(Yu);pne=n(Owe,"STRONG",{});var XJr=s(pne);N3o=r(XJr,"roformer"),XJr.forEach(t),j3o=r(Owe," \u2014 "),uI=n(Owe,"A",{href:!0});var zJr=s(uI);D3o=r(zJr,"RoFormerForCausalLM"),zJr.forEach(t),G3o=r(Owe," (RoFormer model)"),Owe.forEach(t),O3o=i(q),Ku=n(q,"LI",{});var Vwe=s(Ku);_ne=n(Vwe,"STRONG",{});var QJr=s(_ne);V3o=r(QJr,"speech_to_text_2"),QJr.forEach(t),X3o=r(Vwe," \u2014 "),bI=n(Vwe,"A",{href:!0});var WJr=s(bI);z3o=r(WJr,"Speech2Text2ForCausalLM"),WJr.forEach(t),Q3o=r(Vwe," (Speech2Text2 model)"),Vwe.forEach(t),W3o=i(q),Zu=n(q,"LI",{});var Xwe=s(Zu);une=n(Xwe,"STRONG",{});var HJr=s(une);H3o=r(HJr,"transfo-xl"),HJr.forEach(t),U3o=r(Xwe," \u2014 "),FI=n(Xwe,"A",{href:!0});var UJr=s(FI);J3o=r(UJr,"TransfoXLLMHeadModel"),UJr.forEach(t),Y3o=r(Xwe," (Transformer-XL model)"),Xwe.forEach(t),K3o=i(q),e1=n(q,"LI",{});var zwe=s(e1);bne=n(zwe,"STRONG",{});var JJr=s(bne);Z3o=r(JJr,"trocr"),JJr.forEach(t),e2o=r(zwe," \u2014 "),vI=n(zwe,"A",{href:!0});var YJr=s(vI);o2o=r(YJr,"TrOCRForCausalLM"),YJr.forEach(t),r2o=r(zwe," (TrOCR model)"),zwe.forEach(t),t2o=i(q),o1=n(q,"LI",{});var Qwe=s(o1);Fne=n(Qwe,"STRONG",{});var KJr=s(Fne);a2o=r(KJr,"xglm"),KJr.forEach(t),n2o=r(Qwe," \u2014 "),TI=n(Qwe,"A",{href:!0});var ZJr=s(TI);s2o=r(ZJr,"XGLMForCausalLM"),ZJr.forEach(t),l2o=r(Qwe," (XGLM model)"),Qwe.forEach(t),i2o=i(q),r1=n(q,"LI",{});var Wwe=s(r1);vne=n(Wwe,"STRONG",{});var eYr=s(vne);d2o=r(eYr,"xlm"),eYr.forEach(t),c2o=r(Wwe," \u2014 "),MI=n(Wwe,"A",{href:!0});var oYr=s(MI);f2o=r(oYr,"XLMWithLMHeadModel"),oYr.forEach(t),m2o=r(Wwe," (XLM model)"),Wwe.forEach(t),g2o=i(q),t1=n(q,"LI",{});var Hwe=s(t1);Tne=n(Hwe,"STRONG",{});var rYr=s(Tne);h2o=r(rYr,"xlm-prophetnet"),rYr.forEach(t),p2o=r(Hwe," \u2014 "),EI=n(Hwe,"A",{href:!0});var tYr=s(EI);_2o=r(tYr,"XLMProphetNetForCausalLM"),tYr.forEach(t),u2o=r(Hwe," (XLMProphetNet model)"),Hwe.forEach(t),b2o=i(q),a1=n(q,"LI",{});var Uwe=s(a1);Mne=n(Uwe,"STRONG",{});var aYr=s(Mne);F2o=r(aYr,"xlm-roberta"),aYr.forEach(t),v2o=r(Uwe," \u2014 "),CI=n(Uwe,"A",{href:!0});var nYr=s(CI);T2o=r(nYr,"XLMRobertaForCausalLM"),nYr.forEach(t),M2o=r(Uwe," (XLM-RoBERTa model)"),Uwe.forEach(t),E2o=i(q),n1=n(q,"LI",{});var Jwe=s(n1);Ene=n(Jwe,"STRONG",{});var sYr=s(Ene);C2o=r(sYr,"xlm-roberta-xl"),sYr.forEach(t),w2o=r(Jwe," \u2014 "),wI=n(Jwe,"A",{href:!0});var lYr=s(wI);A2o=r(lYr,"XLMRobertaXLForCausalLM"),lYr.forEach(t),y2o=r(Jwe," (XLM-RoBERTa-XL model)"),Jwe.forEach(t),L2o=i(q),s1=n(q,"LI",{});var Ywe=s(s1);Cne=n(Ywe,"STRONG",{});var iYr=s(Cne);x2o=r(iYr,"xlnet"),iYr.forEach(t),k2o=r(Ywe," \u2014 "),AI=n(Ywe,"A",{href:!0});var dYr=s(AI);S2o=r(dYr,"XLNetLMHeadModel"),dYr.forEach(t),R2o=r(Ywe," (XLNet model)"),Ywe.forEach(t),q.forEach(t),B2o=i(Ot),l1=n(Ot,"P",{});var Kwe=s(l1);P2o=r(Kwe,"The model is set in evaluation mode by default using "),wne=n(Kwe,"CODE",{});var cYr=s(wne);$2o=r(cYr,"model.eval()"),cYr.forEach(t),I2o=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=n(Kwe,"CODE",{});var fYr=s(Ane);q2o=r(fYr,"model.train()"),fYr.forEach(t),Kwe.forEach(t),N2o=i(Ot),yne=n(Ot,"P",{});var mYr=s(yne);j2o=r(mYr,"Examples:"),mYr.forEach(t),D2o=i(Ot),m(Aw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),QRe=i(c),nd=n(c,"H2",{class:!0});var o$e=s(nd);i1=n(o$e,"A",{id:!0,class:!0,href:!0});var gYr=s(i1);Lne=n(gYr,"SPAN",{});var hYr=s(Lne);m(yw.$$.fragment,hYr),hYr.forEach(t),gYr.forEach(t),G2o=i(o$e),xne=n(o$e,"SPAN",{});var pYr=s(xne);O2o=r(pYr,"AutoModelForMaskedLM"),pYr.forEach(t),o$e.forEach(t),WRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(Lw.$$.fragment,Ks),V2o=i(Ks),sd=n(Ks,"P",{});var EU=s(sd);X2o=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yI=n(EU,"A",{href:!0});var _Yr=s(yI);z2o=r(_Yr,"from_pretrained()"),_Yr.forEach(t),Q2o=r(EU," class method or the "),LI=n(EU,"A",{href:!0});var uYr=s(LI);W2o=r(uYr,"from_config()"),uYr.forEach(t),H2o=r(EU,` class
method.`),EU.forEach(t),U2o=i(Ks),xw=n(Ks,"P",{});var r$e=s(xw);J2o=r(r$e,"This class cannot be instantiated directly using "),kne=n(r$e,"CODE",{});var bYr=s(kne);Y2o=r(bYr,"__init__()"),bYr.forEach(t),K2o=r(r$e," (throws an error)."),r$e.forEach(t),Z2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(kw.$$.fragment,Zs),eFo=i(Zs),Sne=n(Zs,"P",{});var FYr=s(Sne);oFo=r(FYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FYr.forEach(t),rFo=i(Zs),ld=n(Zs,"P",{});var CU=s(ld);tFo=r(CU,`Note:
Loading a model from its configuration file does `),Rne=n(CU,"STRONG",{});var vYr=s(Rne);aFo=r(vYr,"not"),vYr.forEach(t),nFo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xI=n(CU,"A",{href:!0});var TYr=s(xI);sFo=r(TYr,"from_pretrained()"),TYr.forEach(t),lFo=r(CU," to load the model weights."),CU.forEach(t),iFo=i(Zs),Bne=n(Zs,"P",{});var MYr=s(Bne);dFo=r(MYr,"Examples:"),MYr.forEach(t),cFo=i(Zs),m(Sw.$$.fragment,Zs),Zs.forEach(t),fFo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(Rw.$$.fragment,Vt),mFo=i(Vt),Pne=n(Vt,"P",{});var EYr=s(Pne);gFo=r(EYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EYr.forEach(t),hFo=i(Vt),Wa=n(Vt,"P",{});var BE=s(Wa);pFo=r(BE,"The model class to instantiate is selected based on the "),$ne=n(BE,"CODE",{});var CYr=s($ne);_Fo=r(CYr,"model_type"),CYr.forEach(t),uFo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Ine=n(BE,"CODE",{});var wYr=s(Ine);bFo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),FFo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=n(BE,"CODE",{});var AYr=s(qne);vFo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),TFo=r(BE,":"),BE.forEach(t),MFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);d1=n(N,"LI",{});var Zwe=s(d1);Nne=n(Zwe,"STRONG",{});var yYr=s(Nne);EFo=r(yYr,"albert"),yYr.forEach(t),CFo=r(Zwe," \u2014 "),kI=n(Zwe,"A",{href:!0});var LYr=s(kI);wFo=r(LYr,"AlbertForMaskedLM"),LYr.forEach(t),AFo=r(Zwe," (ALBERT model)"),Zwe.forEach(t),yFo=i(N),c1=n(N,"LI",{});var eAe=s(c1);jne=n(eAe,"STRONG",{});var xYr=s(jne);LFo=r(xYr,"bart"),xYr.forEach(t),xFo=r(eAe," \u2014 "),SI=n(eAe,"A",{href:!0});var kYr=s(SI);kFo=r(kYr,"BartForConditionalGeneration"),kYr.forEach(t),SFo=r(eAe," (BART model)"),eAe.forEach(t),RFo=i(N),f1=n(N,"LI",{});var oAe=s(f1);Dne=n(oAe,"STRONG",{});var SYr=s(Dne);BFo=r(SYr,"bert"),SYr.forEach(t),PFo=r(oAe," \u2014 "),RI=n(oAe,"A",{href:!0});var RYr=s(RI);$Fo=r(RYr,"BertForMaskedLM"),RYr.forEach(t),IFo=r(oAe," (BERT model)"),oAe.forEach(t),qFo=i(N),m1=n(N,"LI",{});var rAe=s(m1);Gne=n(rAe,"STRONG",{});var BYr=s(Gne);NFo=r(BYr,"big_bird"),BYr.forEach(t),jFo=r(rAe," \u2014 "),BI=n(rAe,"A",{href:!0});var PYr=s(BI);DFo=r(PYr,"BigBirdForMaskedLM"),PYr.forEach(t),GFo=r(rAe," (BigBird model)"),rAe.forEach(t),OFo=i(N),g1=n(N,"LI",{});var tAe=s(g1);One=n(tAe,"STRONG",{});var $Yr=s(One);VFo=r($Yr,"camembert"),$Yr.forEach(t),XFo=r(tAe," \u2014 "),PI=n(tAe,"A",{href:!0});var IYr=s(PI);zFo=r(IYr,"CamembertForMaskedLM"),IYr.forEach(t),QFo=r(tAe," (CamemBERT model)"),tAe.forEach(t),WFo=i(N),h1=n(N,"LI",{});var aAe=s(h1);Vne=n(aAe,"STRONG",{});var qYr=s(Vne);HFo=r(qYr,"convbert"),qYr.forEach(t),UFo=r(aAe," \u2014 "),$I=n(aAe,"A",{href:!0});var NYr=s($I);JFo=r(NYr,"ConvBertForMaskedLM"),NYr.forEach(t),YFo=r(aAe," (ConvBERT model)"),aAe.forEach(t),KFo=i(N),p1=n(N,"LI",{});var nAe=s(p1);Xne=n(nAe,"STRONG",{});var jYr=s(Xne);ZFo=r(jYr,"data2vec-text"),jYr.forEach(t),evo=r(nAe," \u2014 "),II=n(nAe,"A",{href:!0});var DYr=s(II);ovo=r(DYr,"Data2VecTextForMaskedLM"),DYr.forEach(t),rvo=r(nAe," (Data2VecText model)"),nAe.forEach(t),tvo=i(N),_1=n(N,"LI",{});var sAe=s(_1);zne=n(sAe,"STRONG",{});var GYr=s(zne);avo=r(GYr,"deberta"),GYr.forEach(t),nvo=r(sAe," \u2014 "),qI=n(sAe,"A",{href:!0});var OYr=s(qI);svo=r(OYr,"DebertaForMaskedLM"),OYr.forEach(t),lvo=r(sAe," (DeBERTa model)"),sAe.forEach(t),ivo=i(N),u1=n(N,"LI",{});var lAe=s(u1);Qne=n(lAe,"STRONG",{});var VYr=s(Qne);dvo=r(VYr,"deberta-v2"),VYr.forEach(t),cvo=r(lAe," \u2014 "),NI=n(lAe,"A",{href:!0});var XYr=s(NI);fvo=r(XYr,"DebertaV2ForMaskedLM"),XYr.forEach(t),mvo=r(lAe," (DeBERTa-v2 model)"),lAe.forEach(t),gvo=i(N),b1=n(N,"LI",{});var iAe=s(b1);Wne=n(iAe,"STRONG",{});var zYr=s(Wne);hvo=r(zYr,"distilbert"),zYr.forEach(t),pvo=r(iAe," \u2014 "),jI=n(iAe,"A",{href:!0});var QYr=s(jI);_vo=r(QYr,"DistilBertForMaskedLM"),QYr.forEach(t),uvo=r(iAe," (DistilBERT model)"),iAe.forEach(t),bvo=i(N),F1=n(N,"LI",{});var dAe=s(F1);Hne=n(dAe,"STRONG",{});var WYr=s(Hne);Fvo=r(WYr,"electra"),WYr.forEach(t),vvo=r(dAe," \u2014 "),DI=n(dAe,"A",{href:!0});var HYr=s(DI);Tvo=r(HYr,"ElectraForMaskedLM"),HYr.forEach(t),Mvo=r(dAe," (ELECTRA model)"),dAe.forEach(t),Evo=i(N),v1=n(N,"LI",{});var cAe=s(v1);Une=n(cAe,"STRONG",{});var UYr=s(Une);Cvo=r(UYr,"flaubert"),UYr.forEach(t),wvo=r(cAe," \u2014 "),GI=n(cAe,"A",{href:!0});var JYr=s(GI);Avo=r(JYr,"FlaubertWithLMHeadModel"),JYr.forEach(t),yvo=r(cAe," (FlauBERT model)"),cAe.forEach(t),Lvo=i(N),T1=n(N,"LI",{});var fAe=s(T1);Jne=n(fAe,"STRONG",{});var YYr=s(Jne);xvo=r(YYr,"fnet"),YYr.forEach(t),kvo=r(fAe," \u2014 "),OI=n(fAe,"A",{href:!0});var KYr=s(OI);Svo=r(KYr,"FNetForMaskedLM"),KYr.forEach(t),Rvo=r(fAe," (FNet model)"),fAe.forEach(t),Bvo=i(N),M1=n(N,"LI",{});var mAe=s(M1);Yne=n(mAe,"STRONG",{});var ZYr=s(Yne);Pvo=r(ZYr,"funnel"),ZYr.forEach(t),$vo=r(mAe," \u2014 "),VI=n(mAe,"A",{href:!0});var eKr=s(VI);Ivo=r(eKr,"FunnelForMaskedLM"),eKr.forEach(t),qvo=r(mAe," (Funnel Transformer model)"),mAe.forEach(t),Nvo=i(N),E1=n(N,"LI",{});var gAe=s(E1);Kne=n(gAe,"STRONG",{});var oKr=s(Kne);jvo=r(oKr,"ibert"),oKr.forEach(t),Dvo=r(gAe," \u2014 "),XI=n(gAe,"A",{href:!0});var rKr=s(XI);Gvo=r(rKr,"IBertForMaskedLM"),rKr.forEach(t),Ovo=r(gAe," (I-BERT model)"),gAe.forEach(t),Vvo=i(N),C1=n(N,"LI",{});var hAe=s(C1);Zne=n(hAe,"STRONG",{});var tKr=s(Zne);Xvo=r(tKr,"layoutlm"),tKr.forEach(t),zvo=r(hAe," \u2014 "),zI=n(hAe,"A",{href:!0});var aKr=s(zI);Qvo=r(aKr,"LayoutLMForMaskedLM"),aKr.forEach(t),Wvo=r(hAe," (LayoutLM model)"),hAe.forEach(t),Hvo=i(N),w1=n(N,"LI",{});var pAe=s(w1);ese=n(pAe,"STRONG",{});var nKr=s(ese);Uvo=r(nKr,"longformer"),nKr.forEach(t),Jvo=r(pAe," \u2014 "),QI=n(pAe,"A",{href:!0});var sKr=s(QI);Yvo=r(sKr,"LongformerForMaskedLM"),sKr.forEach(t),Kvo=r(pAe," (Longformer model)"),pAe.forEach(t),Zvo=i(N),A1=n(N,"LI",{});var _Ae=s(A1);ose=n(_Ae,"STRONG",{});var lKr=s(ose);eTo=r(lKr,"mbart"),lKr.forEach(t),oTo=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var iKr=s(WI);rTo=r(iKr,"MBartForConditionalGeneration"),iKr.forEach(t),tTo=r(_Ae," (mBART model)"),_Ae.forEach(t),aTo=i(N),y1=n(N,"LI",{});var uAe=s(y1);rse=n(uAe,"STRONG",{});var dKr=s(rse);nTo=r(dKr,"megatron-bert"),dKr.forEach(t),sTo=r(uAe," \u2014 "),HI=n(uAe,"A",{href:!0});var cKr=s(HI);lTo=r(cKr,"MegatronBertForMaskedLM"),cKr.forEach(t),iTo=r(uAe," (MegatronBert model)"),uAe.forEach(t),dTo=i(N),L1=n(N,"LI",{});var bAe=s(L1);tse=n(bAe,"STRONG",{});var fKr=s(tse);cTo=r(fKr,"mobilebert"),fKr.forEach(t),fTo=r(bAe," \u2014 "),UI=n(bAe,"A",{href:!0});var mKr=s(UI);mTo=r(mKr,"MobileBertForMaskedLM"),mKr.forEach(t),gTo=r(bAe," (MobileBERT model)"),bAe.forEach(t),hTo=i(N),x1=n(N,"LI",{});var FAe=s(x1);ase=n(FAe,"STRONG",{});var gKr=s(ase);pTo=r(gKr,"mpnet"),gKr.forEach(t),_To=r(FAe," \u2014 "),JI=n(FAe,"A",{href:!0});var hKr=s(JI);uTo=r(hKr,"MPNetForMaskedLM"),hKr.forEach(t),bTo=r(FAe," (MPNet model)"),FAe.forEach(t),FTo=i(N),k1=n(N,"LI",{});var vAe=s(k1);nse=n(vAe,"STRONG",{});var pKr=s(nse);vTo=r(pKr,"nystromformer"),pKr.forEach(t),TTo=r(vAe," \u2014 "),YI=n(vAe,"A",{href:!0});var _Kr=s(YI);MTo=r(_Kr,"NystromformerForMaskedLM"),_Kr.forEach(t),ETo=r(vAe," (Nystromformer model)"),vAe.forEach(t),CTo=i(N),S1=n(N,"LI",{});var TAe=s(S1);sse=n(TAe,"STRONG",{});var uKr=s(sse);wTo=r(uKr,"perceiver"),uKr.forEach(t),ATo=r(TAe," \u2014 "),KI=n(TAe,"A",{href:!0});var bKr=s(KI);yTo=r(bKr,"PerceiverForMaskedLM"),bKr.forEach(t),LTo=r(TAe," (Perceiver model)"),TAe.forEach(t),xTo=i(N),R1=n(N,"LI",{});var MAe=s(R1);lse=n(MAe,"STRONG",{});var FKr=s(lse);kTo=r(FKr,"qdqbert"),FKr.forEach(t),STo=r(MAe," \u2014 "),ZI=n(MAe,"A",{href:!0});var vKr=s(ZI);RTo=r(vKr,"QDQBertForMaskedLM"),vKr.forEach(t),BTo=r(MAe," (QDQBert model)"),MAe.forEach(t),PTo=i(N),B1=n(N,"LI",{});var EAe=s(B1);ise=n(EAe,"STRONG",{});var TKr=s(ise);$To=r(TKr,"reformer"),TKr.forEach(t),ITo=r(EAe," \u2014 "),eq=n(EAe,"A",{href:!0});var MKr=s(eq);qTo=r(MKr,"ReformerForMaskedLM"),MKr.forEach(t),NTo=r(EAe," (Reformer model)"),EAe.forEach(t),jTo=i(N),P1=n(N,"LI",{});var CAe=s(P1);dse=n(CAe,"STRONG",{});var EKr=s(dse);DTo=r(EKr,"rembert"),EKr.forEach(t),GTo=r(CAe," \u2014 "),oq=n(CAe,"A",{href:!0});var CKr=s(oq);OTo=r(CKr,"RemBertForMaskedLM"),CKr.forEach(t),VTo=r(CAe," (RemBERT model)"),CAe.forEach(t),XTo=i(N),$1=n(N,"LI",{});var wAe=s($1);cse=n(wAe,"STRONG",{});var wKr=s(cse);zTo=r(wKr,"roberta"),wKr.forEach(t),QTo=r(wAe," \u2014 "),rq=n(wAe,"A",{href:!0});var AKr=s(rq);WTo=r(AKr,"RobertaForMaskedLM"),AKr.forEach(t),HTo=r(wAe," (RoBERTa model)"),wAe.forEach(t),UTo=i(N),I1=n(N,"LI",{});var AAe=s(I1);fse=n(AAe,"STRONG",{});var yKr=s(fse);JTo=r(yKr,"roformer"),yKr.forEach(t),YTo=r(AAe," \u2014 "),tq=n(AAe,"A",{href:!0});var LKr=s(tq);KTo=r(LKr,"RoFormerForMaskedLM"),LKr.forEach(t),ZTo=r(AAe," (RoFormer model)"),AAe.forEach(t),eMo=i(N),q1=n(N,"LI",{});var yAe=s(q1);mse=n(yAe,"STRONG",{});var xKr=s(mse);oMo=r(xKr,"squeezebert"),xKr.forEach(t),rMo=r(yAe," \u2014 "),aq=n(yAe,"A",{href:!0});var kKr=s(aq);tMo=r(kKr,"SqueezeBertForMaskedLM"),kKr.forEach(t),aMo=r(yAe," (SqueezeBERT model)"),yAe.forEach(t),nMo=i(N),N1=n(N,"LI",{});var LAe=s(N1);gse=n(LAe,"STRONG",{});var SKr=s(gse);sMo=r(SKr,"tapas"),SKr.forEach(t),lMo=r(LAe," \u2014 "),nq=n(LAe,"A",{href:!0});var RKr=s(nq);iMo=r(RKr,"TapasForMaskedLM"),RKr.forEach(t),dMo=r(LAe," (TAPAS model)"),LAe.forEach(t),cMo=i(N),j1=n(N,"LI",{});var xAe=s(j1);hse=n(xAe,"STRONG",{});var BKr=s(hse);fMo=r(BKr,"wav2vec2"),BKr.forEach(t),mMo=r(xAe," \u2014 "),pse=n(xAe,"CODE",{});var PKr=s(pse);gMo=r(PKr,"Wav2Vec2ForMaskedLM"),PKr.forEach(t),hMo=r(xAe," (Wav2Vec2 model)"),xAe.forEach(t),pMo=i(N),D1=n(N,"LI",{});var kAe=s(D1);_se=n(kAe,"STRONG",{});var $Kr=s(_se);_Mo=r($Kr,"xlm"),$Kr.forEach(t),uMo=r(kAe," \u2014 "),sq=n(kAe,"A",{href:!0});var IKr=s(sq);bMo=r(IKr,"XLMWithLMHeadModel"),IKr.forEach(t),FMo=r(kAe," (XLM model)"),kAe.forEach(t),vMo=i(N),G1=n(N,"LI",{});var SAe=s(G1);use=n(SAe,"STRONG",{});var qKr=s(use);TMo=r(qKr,"xlm-roberta"),qKr.forEach(t),MMo=r(SAe," \u2014 "),lq=n(SAe,"A",{href:!0});var NKr=s(lq);EMo=r(NKr,"XLMRobertaForMaskedLM"),NKr.forEach(t),CMo=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),wMo=i(N),O1=n(N,"LI",{});var RAe=s(O1);bse=n(RAe,"STRONG",{});var jKr=s(bse);AMo=r(jKr,"xlm-roberta-xl"),jKr.forEach(t),yMo=r(RAe," \u2014 "),iq=n(RAe,"A",{href:!0});var DKr=s(iq);LMo=r(DKr,"XLMRobertaXLForMaskedLM"),DKr.forEach(t),xMo=r(RAe," (XLM-RoBERTa-XL model)"),RAe.forEach(t),kMo=i(N),V1=n(N,"LI",{});var BAe=s(V1);Fse=n(BAe,"STRONG",{});var GKr=s(Fse);SMo=r(GKr,"yoso"),GKr.forEach(t),RMo=r(BAe," \u2014 "),dq=n(BAe,"A",{href:!0});var OKr=s(dq);BMo=r(OKr,"YosoForMaskedLM"),OKr.forEach(t),PMo=r(BAe," (YOSO model)"),BAe.forEach(t),N.forEach(t),$Mo=i(Vt),X1=n(Vt,"P",{});var PAe=s(X1);IMo=r(PAe,"The model is set in evaluation mode by default using "),vse=n(PAe,"CODE",{});var VKr=s(vse);qMo=r(VKr,"model.eval()"),VKr.forEach(t),NMo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=n(PAe,"CODE",{});var XKr=s(Tse);jMo=r(XKr,"model.train()"),XKr.forEach(t),PAe.forEach(t),DMo=i(Vt),Mse=n(Vt,"P",{});var zKr=s(Mse);GMo=r(zKr,"Examples:"),zKr.forEach(t),OMo=i(Vt),m(Bw.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),HRe=i(c),id=n(c,"H2",{class:!0});var t$e=s(id);z1=n(t$e,"A",{id:!0,class:!0,href:!0});var QKr=s(z1);Ese=n(QKr,"SPAN",{});var WKr=s(Ese);m(Pw.$$.fragment,WKr),WKr.forEach(t),QKr.forEach(t),VMo=i(t$e),Cse=n(t$e,"SPAN",{});var HKr=s(Cse);XMo=r(HKr,"AutoModelForSeq2SeqLM"),HKr.forEach(t),t$e.forEach(t),URe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m($w.$$.fragment,el),zMo=i(el),dd=n(el,"P",{});var wU=s(dd);QMo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cq=n(wU,"A",{href:!0});var UKr=s(cq);WMo=r(UKr,"from_pretrained()"),UKr.forEach(t),HMo=r(wU," class method or the "),fq=n(wU,"A",{href:!0});var JKr=s(fq);UMo=r(JKr,"from_config()"),JKr.forEach(t),JMo=r(wU,` class
method.`),wU.forEach(t),YMo=i(el),Iw=n(el,"P",{});var a$e=s(Iw);KMo=r(a$e,"This class cannot be instantiated directly using "),wse=n(a$e,"CODE",{});var YKr=s(wse);ZMo=r(YKr,"__init__()"),YKr.forEach(t),e4o=r(a$e," (throws an error)."),a$e.forEach(t),o4o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(qw.$$.fragment,ol),r4o=i(ol),Ase=n(ol,"P",{});var KKr=s(Ase);t4o=r(KKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KKr.forEach(t),a4o=i(ol),cd=n(ol,"P",{});var AU=s(cd);n4o=r(AU,`Note:
Loading a model from its configuration file does `),yse=n(AU,"STRONG",{});var ZKr=s(yse);s4o=r(ZKr,"not"),ZKr.forEach(t),l4o=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n(AU,"A",{href:!0});var eZr=s(mq);i4o=r(eZr,"from_pretrained()"),eZr.forEach(t),d4o=r(AU," to load the model weights."),AU.forEach(t),c4o=i(ol),Lse=n(ol,"P",{});var oZr=s(Lse);f4o=r(oZr,"Examples:"),oZr.forEach(t),m4o=i(ol),m(Nw.$$.fragment,ol),ol.forEach(t),g4o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(jw.$$.fragment,Xt),h4o=i(Xt),xse=n(Xt,"P",{});var rZr=s(xse);p4o=r(rZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rZr.forEach(t),_4o=i(Xt),Ha=n(Xt,"P",{});var PE=s(Ha);u4o=r(PE,"The model class to instantiate is selected based on the "),kse=n(PE,"CODE",{});var tZr=s(kse);b4o=r(tZr,"model_type"),tZr.forEach(t),F4o=r(PE,` property of the config object (either
passed as an argument or loaded from `),Sse=n(PE,"CODE",{});var aZr=s(Sse);v4o=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),T4o=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=n(PE,"CODE",{});var nZr=s(Rse);M4o=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),E4o=r(PE,":"),PE.forEach(t),C4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);Q1=n(le,"LI",{});var $Ae=s(Q1);Bse=n($Ae,"STRONG",{});var sZr=s(Bse);w4o=r(sZr,"bart"),sZr.forEach(t),A4o=r($Ae," \u2014 "),gq=n($Ae,"A",{href:!0});var lZr=s(gq);y4o=r(lZr,"BartForConditionalGeneration"),lZr.forEach(t),L4o=r($Ae," (BART model)"),$Ae.forEach(t),x4o=i(le),W1=n(le,"LI",{});var IAe=s(W1);Pse=n(IAe,"STRONG",{});var iZr=s(Pse);k4o=r(iZr,"bigbird_pegasus"),iZr.forEach(t),S4o=r(IAe," \u2014 "),hq=n(IAe,"A",{href:!0});var dZr=s(hq);R4o=r(dZr,"BigBirdPegasusForConditionalGeneration"),dZr.forEach(t),B4o=r(IAe," (BigBirdPegasus model)"),IAe.forEach(t),P4o=i(le),H1=n(le,"LI",{});var qAe=s(H1);$se=n(qAe,"STRONG",{});var cZr=s($se);$4o=r(cZr,"blenderbot"),cZr.forEach(t),I4o=r(qAe," \u2014 "),pq=n(qAe,"A",{href:!0});var fZr=s(pq);q4o=r(fZr,"BlenderbotForConditionalGeneration"),fZr.forEach(t),N4o=r(qAe," (Blenderbot model)"),qAe.forEach(t),j4o=i(le),U1=n(le,"LI",{});var NAe=s(U1);Ise=n(NAe,"STRONG",{});var mZr=s(Ise);D4o=r(mZr,"blenderbot-small"),mZr.forEach(t),G4o=r(NAe," \u2014 "),_q=n(NAe,"A",{href:!0});var gZr=s(_q);O4o=r(gZr,"BlenderbotSmallForConditionalGeneration"),gZr.forEach(t),V4o=r(NAe," (BlenderbotSmall model)"),NAe.forEach(t),X4o=i(le),J1=n(le,"LI",{});var jAe=s(J1);qse=n(jAe,"STRONG",{});var hZr=s(qse);z4o=r(hZr,"encoder-decoder"),hZr.forEach(t),Q4o=r(jAe," \u2014 "),uq=n(jAe,"A",{href:!0});var pZr=s(uq);W4o=r(pZr,"EncoderDecoderModel"),pZr.forEach(t),H4o=r(jAe," (Encoder decoder model)"),jAe.forEach(t),U4o=i(le),Y1=n(le,"LI",{});var DAe=s(Y1);Nse=n(DAe,"STRONG",{});var _Zr=s(Nse);J4o=r(_Zr,"fsmt"),_Zr.forEach(t),Y4o=r(DAe," \u2014 "),bq=n(DAe,"A",{href:!0});var uZr=s(bq);K4o=r(uZr,"FSMTForConditionalGeneration"),uZr.forEach(t),Z4o=r(DAe," (FairSeq Machine-Translation model)"),DAe.forEach(t),eEo=i(le),K1=n(le,"LI",{});var GAe=s(K1);jse=n(GAe,"STRONG",{});var bZr=s(jse);oEo=r(bZr,"led"),bZr.forEach(t),rEo=r(GAe," \u2014 "),Fq=n(GAe,"A",{href:!0});var FZr=s(Fq);tEo=r(FZr,"LEDForConditionalGeneration"),FZr.forEach(t),aEo=r(GAe," (LED model)"),GAe.forEach(t),nEo=i(le),Z1=n(le,"LI",{});var OAe=s(Z1);Dse=n(OAe,"STRONG",{});var vZr=s(Dse);sEo=r(vZr,"m2m_100"),vZr.forEach(t),lEo=r(OAe," \u2014 "),vq=n(OAe,"A",{href:!0});var TZr=s(vq);iEo=r(TZr,"M2M100ForConditionalGeneration"),TZr.forEach(t),dEo=r(OAe," (M2M100 model)"),OAe.forEach(t),cEo=i(le),e7=n(le,"LI",{});var VAe=s(e7);Gse=n(VAe,"STRONG",{});var MZr=s(Gse);fEo=r(MZr,"marian"),MZr.forEach(t),mEo=r(VAe," \u2014 "),Tq=n(VAe,"A",{href:!0});var EZr=s(Tq);gEo=r(EZr,"MarianMTModel"),EZr.forEach(t),hEo=r(VAe," (Marian model)"),VAe.forEach(t),pEo=i(le),o7=n(le,"LI",{});var XAe=s(o7);Ose=n(XAe,"STRONG",{});var CZr=s(Ose);_Eo=r(CZr,"mbart"),CZr.forEach(t),uEo=r(XAe," \u2014 "),Mq=n(XAe,"A",{href:!0});var wZr=s(Mq);bEo=r(wZr,"MBartForConditionalGeneration"),wZr.forEach(t),FEo=r(XAe," (mBART model)"),XAe.forEach(t),vEo=i(le),r7=n(le,"LI",{});var zAe=s(r7);Vse=n(zAe,"STRONG",{});var AZr=s(Vse);TEo=r(AZr,"mt5"),AZr.forEach(t),MEo=r(zAe," \u2014 "),Eq=n(zAe,"A",{href:!0});var yZr=s(Eq);EEo=r(yZr,"MT5ForConditionalGeneration"),yZr.forEach(t),CEo=r(zAe," (mT5 model)"),zAe.forEach(t),wEo=i(le),t7=n(le,"LI",{});var QAe=s(t7);Xse=n(QAe,"STRONG",{});var LZr=s(Xse);AEo=r(LZr,"pegasus"),LZr.forEach(t),yEo=r(QAe," \u2014 "),Cq=n(QAe,"A",{href:!0});var xZr=s(Cq);LEo=r(xZr,"PegasusForConditionalGeneration"),xZr.forEach(t),xEo=r(QAe," (Pegasus model)"),QAe.forEach(t),kEo=i(le),a7=n(le,"LI",{});var WAe=s(a7);zse=n(WAe,"STRONG",{});var kZr=s(zse);SEo=r(kZr,"plbart"),kZr.forEach(t),REo=r(WAe," \u2014 "),wq=n(WAe,"A",{href:!0});var SZr=s(wq);BEo=r(SZr,"PLBartForConditionalGeneration"),SZr.forEach(t),PEo=r(WAe," (PLBart model)"),WAe.forEach(t),$Eo=i(le),n7=n(le,"LI",{});var HAe=s(n7);Qse=n(HAe,"STRONG",{});var RZr=s(Qse);IEo=r(RZr,"prophetnet"),RZr.forEach(t),qEo=r(HAe," \u2014 "),Aq=n(HAe,"A",{href:!0});var BZr=s(Aq);NEo=r(BZr,"ProphetNetForConditionalGeneration"),BZr.forEach(t),jEo=r(HAe," (ProphetNet model)"),HAe.forEach(t),DEo=i(le),s7=n(le,"LI",{});var UAe=s(s7);Wse=n(UAe,"STRONG",{});var PZr=s(Wse);GEo=r(PZr,"t5"),PZr.forEach(t),OEo=r(UAe," \u2014 "),yq=n(UAe,"A",{href:!0});var $Zr=s(yq);VEo=r($Zr,"T5ForConditionalGeneration"),$Zr.forEach(t),XEo=r(UAe," (T5 model)"),UAe.forEach(t),zEo=i(le),l7=n(le,"LI",{});var JAe=s(l7);Hse=n(JAe,"STRONG",{});var IZr=s(Hse);QEo=r(IZr,"tapex"),IZr.forEach(t),WEo=r(JAe," \u2014 "),Lq=n(JAe,"A",{href:!0});var qZr=s(Lq);HEo=r(qZr,"BartForConditionalGeneration"),qZr.forEach(t),UEo=r(JAe," (TAPEX model)"),JAe.forEach(t),JEo=i(le),i7=n(le,"LI",{});var YAe=s(i7);Use=n(YAe,"STRONG",{});var NZr=s(Use);YEo=r(NZr,"xlm-prophetnet"),NZr.forEach(t),KEo=r(YAe," \u2014 "),xq=n(YAe,"A",{href:!0});var jZr=s(xq);ZEo=r(jZr,"XLMProphetNetForConditionalGeneration"),jZr.forEach(t),eCo=r(YAe," (XLMProphetNet model)"),YAe.forEach(t),le.forEach(t),oCo=i(Xt),d7=n(Xt,"P",{});var KAe=s(d7);rCo=r(KAe,"The model is set in evaluation mode by default using "),Jse=n(KAe,"CODE",{});var DZr=s(Jse);tCo=r(DZr,"model.eval()"),DZr.forEach(t),aCo=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yse=n(KAe,"CODE",{});var GZr=s(Yse);nCo=r(GZr,"model.train()"),GZr.forEach(t),KAe.forEach(t),sCo=i(Xt),Kse=n(Xt,"P",{});var OZr=s(Kse);lCo=r(OZr,"Examples:"),OZr.forEach(t),iCo=i(Xt),m(Dw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),JRe=i(c),fd=n(c,"H2",{class:!0});var n$e=s(fd);c7=n(n$e,"A",{id:!0,class:!0,href:!0});var VZr=s(c7);Zse=n(VZr,"SPAN",{});var XZr=s(Zse);m(Gw.$$.fragment,XZr),XZr.forEach(t),VZr.forEach(t),dCo=i(n$e),ele=n(n$e,"SPAN",{});var zZr=s(ele);cCo=r(zZr,"AutoModelForSequenceClassification"),zZr.forEach(t),n$e.forEach(t),YRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Ow.$$.fragment,rl),fCo=i(rl),md=n(rl,"P",{});var yU=s(md);mCo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kq=n(yU,"A",{href:!0});var QZr=s(kq);gCo=r(QZr,"from_pretrained()"),QZr.forEach(t),hCo=r(yU," class method or the "),Sq=n(yU,"A",{href:!0});var WZr=s(Sq);pCo=r(WZr,"from_config()"),WZr.forEach(t),_Co=r(yU,` class
method.`),yU.forEach(t),uCo=i(rl),Vw=n(rl,"P",{});var s$e=s(Vw);bCo=r(s$e,"This class cannot be instantiated directly using "),ole=n(s$e,"CODE",{});var HZr=s(ole);FCo=r(HZr,"__init__()"),HZr.forEach(t),vCo=r(s$e," (throws an error)."),s$e.forEach(t),TCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Xw.$$.fragment,tl),MCo=i(tl),rle=n(tl,"P",{});var UZr=s(rle);ECo=r(UZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UZr.forEach(t),CCo=i(tl),gd=n(tl,"P",{});var LU=s(gd);wCo=r(LU,`Note:
Loading a model from its configuration file does `),tle=n(LU,"STRONG",{});var JZr=s(tle);ACo=r(JZr,"not"),JZr.forEach(t),yCo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(LU,"A",{href:!0});var YZr=s(Rq);LCo=r(YZr,"from_pretrained()"),YZr.forEach(t),xCo=r(LU," to load the model weights."),LU.forEach(t),kCo=i(tl),ale=n(tl,"P",{});var KZr=s(ale);SCo=r(KZr,"Examples:"),KZr.forEach(t),RCo=i(tl),m(zw.$$.fragment,tl),tl.forEach(t),BCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(Qw.$$.fragment,zt),PCo=i(zt),nle=n(zt,"P",{});var ZZr=s(nle);$Co=r(ZZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZZr.forEach(t),ICo=i(zt),Ua=n(zt,"P",{});var $E=s(Ua);qCo=r($E,"The model class to instantiate is selected based on the "),sle=n($E,"CODE",{});var eet=s(sle);NCo=r(eet,"model_type"),eet.forEach(t),jCo=r($E,` property of the config object (either
passed as an argument or loaded from `),lle=n($E,"CODE",{});var oet=s(lle);DCo=r(oet,"pretrained_model_name_or_path"),oet.forEach(t),GCo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ile=n($E,"CODE",{});var ret=s(ile);OCo=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),VCo=r($E,":"),$E.forEach(t),XCo=i(zt),y=n(zt,"UL",{});var L=s(y);f7=n(L,"LI",{});var ZAe=s(f7);dle=n(ZAe,"STRONG",{});var tet=s(dle);zCo=r(tet,"albert"),tet.forEach(t),QCo=r(ZAe," \u2014 "),Bq=n(ZAe,"A",{href:!0});var aet=s(Bq);WCo=r(aet,"AlbertForSequenceClassification"),aet.forEach(t),HCo=r(ZAe," (ALBERT model)"),ZAe.forEach(t),UCo=i(L),m7=n(L,"LI",{});var e6e=s(m7);cle=n(e6e,"STRONG",{});var net=s(cle);JCo=r(net,"bart"),net.forEach(t),YCo=r(e6e," \u2014 "),Pq=n(e6e,"A",{href:!0});var set=s(Pq);KCo=r(set,"BartForSequenceClassification"),set.forEach(t),ZCo=r(e6e," (BART model)"),e6e.forEach(t),ewo=i(L),g7=n(L,"LI",{});var o6e=s(g7);fle=n(o6e,"STRONG",{});var iet=s(fle);owo=r(iet,"bert"),iet.forEach(t),rwo=r(o6e," \u2014 "),$q=n(o6e,"A",{href:!0});var det=s($q);two=r(det,"BertForSequenceClassification"),det.forEach(t),awo=r(o6e," (BERT model)"),o6e.forEach(t),nwo=i(L),h7=n(L,"LI",{});var r6e=s(h7);mle=n(r6e,"STRONG",{});var cet=s(mle);swo=r(cet,"big_bird"),cet.forEach(t),lwo=r(r6e," \u2014 "),Iq=n(r6e,"A",{href:!0});var fet=s(Iq);iwo=r(fet,"BigBirdForSequenceClassification"),fet.forEach(t),dwo=r(r6e," (BigBird model)"),r6e.forEach(t),cwo=i(L),p7=n(L,"LI",{});var t6e=s(p7);gle=n(t6e,"STRONG",{});var met=s(gle);fwo=r(met,"bigbird_pegasus"),met.forEach(t),mwo=r(t6e," \u2014 "),qq=n(t6e,"A",{href:!0});var get=s(qq);gwo=r(get,"BigBirdPegasusForSequenceClassification"),get.forEach(t),hwo=r(t6e," (BigBirdPegasus model)"),t6e.forEach(t),pwo=i(L),_7=n(L,"LI",{});var a6e=s(_7);hle=n(a6e,"STRONG",{});var het=s(hle);_wo=r(het,"camembert"),het.forEach(t),uwo=r(a6e," \u2014 "),Nq=n(a6e,"A",{href:!0});var pet=s(Nq);bwo=r(pet,"CamembertForSequenceClassification"),pet.forEach(t),Fwo=r(a6e," (CamemBERT model)"),a6e.forEach(t),vwo=i(L),u7=n(L,"LI",{});var n6e=s(u7);ple=n(n6e,"STRONG",{});var _et=s(ple);Two=r(_et,"canine"),_et.forEach(t),Mwo=r(n6e," \u2014 "),jq=n(n6e,"A",{href:!0});var uet=s(jq);Ewo=r(uet,"CanineForSequenceClassification"),uet.forEach(t),Cwo=r(n6e," (Canine model)"),n6e.forEach(t),wwo=i(L),b7=n(L,"LI",{});var s6e=s(b7);_le=n(s6e,"STRONG",{});var bet=s(_le);Awo=r(bet,"convbert"),bet.forEach(t),ywo=r(s6e," \u2014 "),Dq=n(s6e,"A",{href:!0});var Fet=s(Dq);Lwo=r(Fet,"ConvBertForSequenceClassification"),Fet.forEach(t),xwo=r(s6e," (ConvBERT model)"),s6e.forEach(t),kwo=i(L),F7=n(L,"LI",{});var l6e=s(F7);ule=n(l6e,"STRONG",{});var vet=s(ule);Swo=r(vet,"ctrl"),vet.forEach(t),Rwo=r(l6e," \u2014 "),Gq=n(l6e,"A",{href:!0});var Tet=s(Gq);Bwo=r(Tet,"CTRLForSequenceClassification"),Tet.forEach(t),Pwo=r(l6e," (CTRL model)"),l6e.forEach(t),$wo=i(L),v7=n(L,"LI",{});var i6e=s(v7);ble=n(i6e,"STRONG",{});var Met=s(ble);Iwo=r(Met,"data2vec-text"),Met.forEach(t),qwo=r(i6e," \u2014 "),Oq=n(i6e,"A",{href:!0});var Eet=s(Oq);Nwo=r(Eet,"Data2VecTextForSequenceClassification"),Eet.forEach(t),jwo=r(i6e," (Data2VecText model)"),i6e.forEach(t),Dwo=i(L),T7=n(L,"LI",{});var d6e=s(T7);Fle=n(d6e,"STRONG",{});var Cet=s(Fle);Gwo=r(Cet,"deberta"),Cet.forEach(t),Owo=r(d6e," \u2014 "),Vq=n(d6e,"A",{href:!0});var wet=s(Vq);Vwo=r(wet,"DebertaForSequenceClassification"),wet.forEach(t),Xwo=r(d6e," (DeBERTa model)"),d6e.forEach(t),zwo=i(L),M7=n(L,"LI",{});var c6e=s(M7);vle=n(c6e,"STRONG",{});var Aet=s(vle);Qwo=r(Aet,"deberta-v2"),Aet.forEach(t),Wwo=r(c6e," \u2014 "),Xq=n(c6e,"A",{href:!0});var yet=s(Xq);Hwo=r(yet,"DebertaV2ForSequenceClassification"),yet.forEach(t),Uwo=r(c6e," (DeBERTa-v2 model)"),c6e.forEach(t),Jwo=i(L),E7=n(L,"LI",{});var f6e=s(E7);Tle=n(f6e,"STRONG",{});var Let=s(Tle);Ywo=r(Let,"distilbert"),Let.forEach(t),Kwo=r(f6e," \u2014 "),zq=n(f6e,"A",{href:!0});var xet=s(zq);Zwo=r(xet,"DistilBertForSequenceClassification"),xet.forEach(t),eAo=r(f6e," (DistilBERT model)"),f6e.forEach(t),oAo=i(L),C7=n(L,"LI",{});var m6e=s(C7);Mle=n(m6e,"STRONG",{});var ket=s(Mle);rAo=r(ket,"electra"),ket.forEach(t),tAo=r(m6e," \u2014 "),Qq=n(m6e,"A",{href:!0});var Set=s(Qq);aAo=r(Set,"ElectraForSequenceClassification"),Set.forEach(t),nAo=r(m6e," (ELECTRA model)"),m6e.forEach(t),sAo=i(L),w7=n(L,"LI",{});var g6e=s(w7);Ele=n(g6e,"STRONG",{});var Ret=s(Ele);lAo=r(Ret,"flaubert"),Ret.forEach(t),iAo=r(g6e," \u2014 "),Wq=n(g6e,"A",{href:!0});var Bet=s(Wq);dAo=r(Bet,"FlaubertForSequenceClassification"),Bet.forEach(t),cAo=r(g6e," (FlauBERT model)"),g6e.forEach(t),fAo=i(L),A7=n(L,"LI",{});var h6e=s(A7);Cle=n(h6e,"STRONG",{});var Pet=s(Cle);mAo=r(Pet,"fnet"),Pet.forEach(t),gAo=r(h6e," \u2014 "),Hq=n(h6e,"A",{href:!0});var $et=s(Hq);hAo=r($et,"FNetForSequenceClassification"),$et.forEach(t),pAo=r(h6e," (FNet model)"),h6e.forEach(t),_Ao=i(L),y7=n(L,"LI",{});var p6e=s(y7);wle=n(p6e,"STRONG",{});var Iet=s(wle);uAo=r(Iet,"funnel"),Iet.forEach(t),bAo=r(p6e," \u2014 "),Uq=n(p6e,"A",{href:!0});var qet=s(Uq);FAo=r(qet,"FunnelForSequenceClassification"),qet.forEach(t),vAo=r(p6e," (Funnel Transformer model)"),p6e.forEach(t),TAo=i(L),L7=n(L,"LI",{});var _6e=s(L7);Ale=n(_6e,"STRONG",{});var Net=s(Ale);MAo=r(Net,"gpt2"),Net.forEach(t),EAo=r(_6e," \u2014 "),Jq=n(_6e,"A",{href:!0});var jet=s(Jq);CAo=r(jet,"GPT2ForSequenceClassification"),jet.forEach(t),wAo=r(_6e," (OpenAI GPT-2 model)"),_6e.forEach(t),AAo=i(L),x7=n(L,"LI",{});var u6e=s(x7);yle=n(u6e,"STRONG",{});var Det=s(yle);yAo=r(Det,"gpt_neo"),Det.forEach(t),LAo=r(u6e," \u2014 "),Yq=n(u6e,"A",{href:!0});var Get=s(Yq);xAo=r(Get,"GPTNeoForSequenceClassification"),Get.forEach(t),kAo=r(u6e," (GPT Neo model)"),u6e.forEach(t),SAo=i(L),k7=n(L,"LI",{});var b6e=s(k7);Lle=n(b6e,"STRONG",{});var Oet=s(Lle);RAo=r(Oet,"gptj"),Oet.forEach(t),BAo=r(b6e," \u2014 "),Kq=n(b6e,"A",{href:!0});var Vet=s(Kq);PAo=r(Vet,"GPTJForSequenceClassification"),Vet.forEach(t),$Ao=r(b6e," (GPT-J model)"),b6e.forEach(t),IAo=i(L),S7=n(L,"LI",{});var F6e=s(S7);xle=n(F6e,"STRONG",{});var Xet=s(xle);qAo=r(Xet,"ibert"),Xet.forEach(t),NAo=r(F6e," \u2014 "),Zq=n(F6e,"A",{href:!0});var zet=s(Zq);jAo=r(zet,"IBertForSequenceClassification"),zet.forEach(t),DAo=r(F6e," (I-BERT model)"),F6e.forEach(t),GAo=i(L),R7=n(L,"LI",{});var v6e=s(R7);kle=n(v6e,"STRONG",{});var Qet=s(kle);OAo=r(Qet,"layoutlm"),Qet.forEach(t),VAo=r(v6e," \u2014 "),eN=n(v6e,"A",{href:!0});var Wet=s(eN);XAo=r(Wet,"LayoutLMForSequenceClassification"),Wet.forEach(t),zAo=r(v6e," (LayoutLM model)"),v6e.forEach(t),QAo=i(L),B7=n(L,"LI",{});var T6e=s(B7);Sle=n(T6e,"STRONG",{});var Het=s(Sle);WAo=r(Het,"layoutlmv2"),Het.forEach(t),HAo=r(T6e," \u2014 "),oN=n(T6e,"A",{href:!0});var Uet=s(oN);UAo=r(Uet,"LayoutLMv2ForSequenceClassification"),Uet.forEach(t),JAo=r(T6e," (LayoutLMv2 model)"),T6e.forEach(t),YAo=i(L),P7=n(L,"LI",{});var M6e=s(P7);Rle=n(M6e,"STRONG",{});var Jet=s(Rle);KAo=r(Jet,"led"),Jet.forEach(t),ZAo=r(M6e," \u2014 "),rN=n(M6e,"A",{href:!0});var Yet=s(rN);e6o=r(Yet,"LEDForSequenceClassification"),Yet.forEach(t),o6o=r(M6e," (LED model)"),M6e.forEach(t),r6o=i(L),$7=n(L,"LI",{});var E6e=s($7);Ble=n(E6e,"STRONG",{});var Ket=s(Ble);t6o=r(Ket,"longformer"),Ket.forEach(t),a6o=r(E6e," \u2014 "),tN=n(E6e,"A",{href:!0});var Zet=s(tN);n6o=r(Zet,"LongformerForSequenceClassification"),Zet.forEach(t),s6o=r(E6e," (Longformer model)"),E6e.forEach(t),l6o=i(L),I7=n(L,"LI",{});var C6e=s(I7);Ple=n(C6e,"STRONG",{});var eot=s(Ple);i6o=r(eot,"mbart"),eot.forEach(t),d6o=r(C6e," \u2014 "),aN=n(C6e,"A",{href:!0});var oot=s(aN);c6o=r(oot,"MBartForSequenceClassification"),oot.forEach(t),f6o=r(C6e," (mBART model)"),C6e.forEach(t),m6o=i(L),q7=n(L,"LI",{});var w6e=s(q7);$le=n(w6e,"STRONG",{});var rot=s($le);g6o=r(rot,"megatron-bert"),rot.forEach(t),h6o=r(w6e," \u2014 "),nN=n(w6e,"A",{href:!0});var tot=s(nN);p6o=r(tot,"MegatronBertForSequenceClassification"),tot.forEach(t),_6o=r(w6e," (MegatronBert model)"),w6e.forEach(t),u6o=i(L),N7=n(L,"LI",{});var A6e=s(N7);Ile=n(A6e,"STRONG",{});var aot=s(Ile);b6o=r(aot,"mobilebert"),aot.forEach(t),F6o=r(A6e," \u2014 "),sN=n(A6e,"A",{href:!0});var not=s(sN);v6o=r(not,"MobileBertForSequenceClassification"),not.forEach(t),T6o=r(A6e," (MobileBERT model)"),A6e.forEach(t),M6o=i(L),j7=n(L,"LI",{});var y6e=s(j7);qle=n(y6e,"STRONG",{});var sot=s(qle);E6o=r(sot,"mpnet"),sot.forEach(t),C6o=r(y6e," \u2014 "),lN=n(y6e,"A",{href:!0});var lot=s(lN);w6o=r(lot,"MPNetForSequenceClassification"),lot.forEach(t),A6o=r(y6e," (MPNet model)"),y6e.forEach(t),y6o=i(L),D7=n(L,"LI",{});var L6e=s(D7);Nle=n(L6e,"STRONG",{});var iot=s(Nle);L6o=r(iot,"nystromformer"),iot.forEach(t),x6o=r(L6e," \u2014 "),iN=n(L6e,"A",{href:!0});var dot=s(iN);k6o=r(dot,"NystromformerForSequenceClassification"),dot.forEach(t),S6o=r(L6e," (Nystromformer model)"),L6e.forEach(t),R6o=i(L),G7=n(L,"LI",{});var x6e=s(G7);jle=n(x6e,"STRONG",{});var cot=s(jle);B6o=r(cot,"openai-gpt"),cot.forEach(t),P6o=r(x6e," \u2014 "),dN=n(x6e,"A",{href:!0});var fot=s(dN);$6o=r(fot,"OpenAIGPTForSequenceClassification"),fot.forEach(t),I6o=r(x6e," (OpenAI GPT model)"),x6e.forEach(t),q6o=i(L),O7=n(L,"LI",{});var k6e=s(O7);Dle=n(k6e,"STRONG",{});var mot=s(Dle);N6o=r(mot,"perceiver"),mot.forEach(t),j6o=r(k6e," \u2014 "),cN=n(k6e,"A",{href:!0});var got=s(cN);D6o=r(got,"PerceiverForSequenceClassification"),got.forEach(t),G6o=r(k6e," (Perceiver model)"),k6e.forEach(t),O6o=i(L),V7=n(L,"LI",{});var S6e=s(V7);Gle=n(S6e,"STRONG",{});var hot=s(Gle);V6o=r(hot,"plbart"),hot.forEach(t),X6o=r(S6e," \u2014 "),fN=n(S6e,"A",{href:!0});var pot=s(fN);z6o=r(pot,"PLBartForSequenceClassification"),pot.forEach(t),Q6o=r(S6e," (PLBart model)"),S6e.forEach(t),W6o=i(L),X7=n(L,"LI",{});var R6e=s(X7);Ole=n(R6e,"STRONG",{});var _ot=s(Ole);H6o=r(_ot,"qdqbert"),_ot.forEach(t),U6o=r(R6e," \u2014 "),mN=n(R6e,"A",{href:!0});var uot=s(mN);J6o=r(uot,"QDQBertForSequenceClassification"),uot.forEach(t),Y6o=r(R6e," (QDQBert model)"),R6e.forEach(t),K6o=i(L),z7=n(L,"LI",{});var B6e=s(z7);Vle=n(B6e,"STRONG",{});var bot=s(Vle);Z6o=r(bot,"reformer"),bot.forEach(t),e0o=r(B6e," \u2014 "),gN=n(B6e,"A",{href:!0});var Fot=s(gN);o0o=r(Fot,"ReformerForSequenceClassification"),Fot.forEach(t),r0o=r(B6e," (Reformer model)"),B6e.forEach(t),t0o=i(L),Q7=n(L,"LI",{});var P6e=s(Q7);Xle=n(P6e,"STRONG",{});var vot=s(Xle);a0o=r(vot,"rembert"),vot.forEach(t),n0o=r(P6e," \u2014 "),hN=n(P6e,"A",{href:!0});var Tot=s(hN);s0o=r(Tot,"RemBertForSequenceClassification"),Tot.forEach(t),l0o=r(P6e," (RemBERT model)"),P6e.forEach(t),i0o=i(L),W7=n(L,"LI",{});var $6e=s(W7);zle=n($6e,"STRONG",{});var Mot=s(zle);d0o=r(Mot,"roberta"),Mot.forEach(t),c0o=r($6e," \u2014 "),pN=n($6e,"A",{href:!0});var Eot=s(pN);f0o=r(Eot,"RobertaForSequenceClassification"),Eot.forEach(t),m0o=r($6e," (RoBERTa model)"),$6e.forEach(t),g0o=i(L),H7=n(L,"LI",{});var I6e=s(H7);Qle=n(I6e,"STRONG",{});var Cot=s(Qle);h0o=r(Cot,"roformer"),Cot.forEach(t),p0o=r(I6e," \u2014 "),_N=n(I6e,"A",{href:!0});var wot=s(_N);_0o=r(wot,"RoFormerForSequenceClassification"),wot.forEach(t),u0o=r(I6e," (RoFormer model)"),I6e.forEach(t),b0o=i(L),U7=n(L,"LI",{});var q6e=s(U7);Wle=n(q6e,"STRONG",{});var Aot=s(Wle);F0o=r(Aot,"squeezebert"),Aot.forEach(t),v0o=r(q6e," \u2014 "),uN=n(q6e,"A",{href:!0});var yot=s(uN);T0o=r(yot,"SqueezeBertForSequenceClassification"),yot.forEach(t),M0o=r(q6e," (SqueezeBERT model)"),q6e.forEach(t),E0o=i(L),J7=n(L,"LI",{});var N6e=s(J7);Hle=n(N6e,"STRONG",{});var Lot=s(Hle);C0o=r(Lot,"tapas"),Lot.forEach(t),w0o=r(N6e," \u2014 "),bN=n(N6e,"A",{href:!0});var xot=s(bN);A0o=r(xot,"TapasForSequenceClassification"),xot.forEach(t),y0o=r(N6e," (TAPAS model)"),N6e.forEach(t),L0o=i(L),Y7=n(L,"LI",{});var j6e=s(Y7);Ule=n(j6e,"STRONG",{});var kot=s(Ule);x0o=r(kot,"tapex"),kot.forEach(t),k0o=r(j6e," \u2014 "),FN=n(j6e,"A",{href:!0});var Sot=s(FN);S0o=r(Sot,"BartForSequenceClassification"),Sot.forEach(t),R0o=r(j6e," (TAPEX model)"),j6e.forEach(t),B0o=i(L),K7=n(L,"LI",{});var D6e=s(K7);Jle=n(D6e,"STRONG",{});var Rot=s(Jle);P0o=r(Rot,"transfo-xl"),Rot.forEach(t),$0o=r(D6e," \u2014 "),vN=n(D6e,"A",{href:!0});var Bot=s(vN);I0o=r(Bot,"TransfoXLForSequenceClassification"),Bot.forEach(t),q0o=r(D6e," (Transformer-XL model)"),D6e.forEach(t),N0o=i(L),Z7=n(L,"LI",{});var G6e=s(Z7);Yle=n(G6e,"STRONG",{});var Pot=s(Yle);j0o=r(Pot,"xlm"),Pot.forEach(t),D0o=r(G6e," \u2014 "),TN=n(G6e,"A",{href:!0});var $ot=s(TN);G0o=r($ot,"XLMForSequenceClassification"),$ot.forEach(t),O0o=r(G6e," (XLM model)"),G6e.forEach(t),V0o=i(L),eb=n(L,"LI",{});var O6e=s(eb);Kle=n(O6e,"STRONG",{});var Iot=s(Kle);X0o=r(Iot,"xlm-roberta"),Iot.forEach(t),z0o=r(O6e," \u2014 "),MN=n(O6e,"A",{href:!0});var qot=s(MN);Q0o=r(qot,"XLMRobertaForSequenceClassification"),qot.forEach(t),W0o=r(O6e," (XLM-RoBERTa model)"),O6e.forEach(t),H0o=i(L),ob=n(L,"LI",{});var V6e=s(ob);Zle=n(V6e,"STRONG",{});var Not=s(Zle);U0o=r(Not,"xlm-roberta-xl"),Not.forEach(t),J0o=r(V6e," \u2014 "),EN=n(V6e,"A",{href:!0});var jot=s(EN);Y0o=r(jot,"XLMRobertaXLForSequenceClassification"),jot.forEach(t),K0o=r(V6e," (XLM-RoBERTa-XL model)"),V6e.forEach(t),Z0o=i(L),rb=n(L,"LI",{});var X6e=s(rb);eie=n(X6e,"STRONG",{});var Dot=s(eie);eyo=r(Dot,"xlnet"),Dot.forEach(t),oyo=r(X6e," \u2014 "),CN=n(X6e,"A",{href:!0});var Got=s(CN);ryo=r(Got,"XLNetForSequenceClassification"),Got.forEach(t),tyo=r(X6e," (XLNet model)"),X6e.forEach(t),ayo=i(L),tb=n(L,"LI",{});var z6e=s(tb);oie=n(z6e,"STRONG",{});var Oot=s(oie);nyo=r(Oot,"yoso"),Oot.forEach(t),syo=r(z6e," \u2014 "),wN=n(z6e,"A",{href:!0});var Vot=s(wN);lyo=r(Vot,"YosoForSequenceClassification"),Vot.forEach(t),iyo=r(z6e," (YOSO model)"),z6e.forEach(t),L.forEach(t),dyo=i(zt),ab=n(zt,"P",{});var Q6e=s(ab);cyo=r(Q6e,"The model is set in evaluation mode by default using "),rie=n(Q6e,"CODE",{});var Xot=s(rie);fyo=r(Xot,"model.eval()"),Xot.forEach(t),myo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tie=n(Q6e,"CODE",{});var zot=s(tie);gyo=r(zot,"model.train()"),zot.forEach(t),Q6e.forEach(t),hyo=i(zt),aie=n(zt,"P",{});var Qot=s(aie);pyo=r(Qot,"Examples:"),Qot.forEach(t),_yo=i(zt),m(Ww.$$.fragment,zt),zt.forEach(t),rl.forEach(t),KRe=i(c),hd=n(c,"H2",{class:!0});var l$e=s(hd);nb=n(l$e,"A",{id:!0,class:!0,href:!0});var Wot=s(nb);nie=n(Wot,"SPAN",{});var Hot=s(nie);m(Hw.$$.fragment,Hot),Hot.forEach(t),Wot.forEach(t),uyo=i(l$e),sie=n(l$e,"SPAN",{});var Uot=s(sie);byo=r(Uot,"AutoModelForMultipleChoice"),Uot.forEach(t),l$e.forEach(t),ZRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Uw.$$.fragment,al),Fyo=i(al),pd=n(al,"P",{});var xU=s(pd);vyo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AN=n(xU,"A",{href:!0});var Jot=s(AN);Tyo=r(Jot,"from_pretrained()"),Jot.forEach(t),Myo=r(xU," class method or the "),yN=n(xU,"A",{href:!0});var Yot=s(yN);Eyo=r(Yot,"from_config()"),Yot.forEach(t),Cyo=r(xU,` class
method.`),xU.forEach(t),wyo=i(al),Jw=n(al,"P",{});var i$e=s(Jw);Ayo=r(i$e,"This class cannot be instantiated directly using "),lie=n(i$e,"CODE",{});var Kot=s(lie);yyo=r(Kot,"__init__()"),Kot.forEach(t),Lyo=r(i$e," (throws an error)."),i$e.forEach(t),xyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Yw.$$.fragment,nl),kyo=i(nl),iie=n(nl,"P",{});var Zot=s(iie);Syo=r(Zot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zot.forEach(t),Ryo=i(nl),_d=n(nl,"P",{});var kU=s(_d);Byo=r(kU,`Note:
Loading a model from its configuration file does `),die=n(kU,"STRONG",{});var ert=s(die);Pyo=r(ert,"not"),ert.forEach(t),$yo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=n(kU,"A",{href:!0});var ort=s(LN);Iyo=r(ort,"from_pretrained()"),ort.forEach(t),qyo=r(kU," to load the model weights."),kU.forEach(t),Nyo=i(nl),cie=n(nl,"P",{});var rrt=s(cie);jyo=r(rrt,"Examples:"),rrt.forEach(t),Dyo=i(nl),m(Kw.$$.fragment,nl),nl.forEach(t),Gyo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(Zw.$$.fragment,Qt),Oyo=i(Qt),fie=n(Qt,"P",{});var trt=s(fie);Vyo=r(trt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),trt.forEach(t),Xyo=i(Qt),Ja=n(Qt,"P",{});var IE=s(Ja);zyo=r(IE,"The model class to instantiate is selected based on the "),mie=n(IE,"CODE",{});var art=s(mie);Qyo=r(art,"model_type"),art.forEach(t),Wyo=r(IE,` property of the config object (either
passed as an argument or loaded from `),gie=n(IE,"CODE",{});var nrt=s(gie);Hyo=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),Uyo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=n(IE,"CODE",{});var srt=s(hie);Jyo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),Yyo=r(IE,":"),IE.forEach(t),Kyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);sb=n(O,"LI",{});var W6e=s(sb);pie=n(W6e,"STRONG",{});var lrt=s(pie);Zyo=r(lrt,"albert"),lrt.forEach(t),eLo=r(W6e," \u2014 "),xN=n(W6e,"A",{href:!0});var irt=s(xN);oLo=r(irt,"AlbertForMultipleChoice"),irt.forEach(t),rLo=r(W6e," (ALBERT model)"),W6e.forEach(t),tLo=i(O),lb=n(O,"LI",{});var H6e=s(lb);_ie=n(H6e,"STRONG",{});var drt=s(_ie);aLo=r(drt,"bert"),drt.forEach(t),nLo=r(H6e," \u2014 "),kN=n(H6e,"A",{href:!0});var crt=s(kN);sLo=r(crt,"BertForMultipleChoice"),crt.forEach(t),lLo=r(H6e," (BERT model)"),H6e.forEach(t),iLo=i(O),ib=n(O,"LI",{});var U6e=s(ib);uie=n(U6e,"STRONG",{});var frt=s(uie);dLo=r(frt,"big_bird"),frt.forEach(t),cLo=r(U6e," \u2014 "),SN=n(U6e,"A",{href:!0});var mrt=s(SN);fLo=r(mrt,"BigBirdForMultipleChoice"),mrt.forEach(t),mLo=r(U6e," (BigBird model)"),U6e.forEach(t),gLo=i(O),db=n(O,"LI",{});var J6e=s(db);bie=n(J6e,"STRONG",{});var grt=s(bie);hLo=r(grt,"camembert"),grt.forEach(t),pLo=r(J6e," \u2014 "),RN=n(J6e,"A",{href:!0});var hrt=s(RN);_Lo=r(hrt,"CamembertForMultipleChoice"),hrt.forEach(t),uLo=r(J6e," (CamemBERT model)"),J6e.forEach(t),bLo=i(O),cb=n(O,"LI",{});var Y6e=s(cb);Fie=n(Y6e,"STRONG",{});var prt=s(Fie);FLo=r(prt,"canine"),prt.forEach(t),vLo=r(Y6e," \u2014 "),BN=n(Y6e,"A",{href:!0});var _rt=s(BN);TLo=r(_rt,"CanineForMultipleChoice"),_rt.forEach(t),MLo=r(Y6e," (Canine model)"),Y6e.forEach(t),ELo=i(O),fb=n(O,"LI",{});var K6e=s(fb);vie=n(K6e,"STRONG",{});var urt=s(vie);CLo=r(urt,"convbert"),urt.forEach(t),wLo=r(K6e," \u2014 "),PN=n(K6e,"A",{href:!0});var brt=s(PN);ALo=r(brt,"ConvBertForMultipleChoice"),brt.forEach(t),yLo=r(K6e," (ConvBERT model)"),K6e.forEach(t),LLo=i(O),mb=n(O,"LI",{});var Z6e=s(mb);Tie=n(Z6e,"STRONG",{});var Frt=s(Tie);xLo=r(Frt,"data2vec-text"),Frt.forEach(t),kLo=r(Z6e," \u2014 "),$N=n(Z6e,"A",{href:!0});var vrt=s($N);SLo=r(vrt,"Data2VecTextForMultipleChoice"),vrt.forEach(t),RLo=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),BLo=i(O),gb=n(O,"LI",{});var e0e=s(gb);Mie=n(e0e,"STRONG",{});var Trt=s(Mie);PLo=r(Trt,"distilbert"),Trt.forEach(t),$Lo=r(e0e," \u2014 "),IN=n(e0e,"A",{href:!0});var Mrt=s(IN);ILo=r(Mrt,"DistilBertForMultipleChoice"),Mrt.forEach(t),qLo=r(e0e," (DistilBERT model)"),e0e.forEach(t),NLo=i(O),hb=n(O,"LI",{});var o0e=s(hb);Eie=n(o0e,"STRONG",{});var Ert=s(Eie);jLo=r(Ert,"electra"),Ert.forEach(t),DLo=r(o0e," \u2014 "),qN=n(o0e,"A",{href:!0});var Crt=s(qN);GLo=r(Crt,"ElectraForMultipleChoice"),Crt.forEach(t),OLo=r(o0e," (ELECTRA model)"),o0e.forEach(t),VLo=i(O),pb=n(O,"LI",{});var r0e=s(pb);Cie=n(r0e,"STRONG",{});var wrt=s(Cie);XLo=r(wrt,"flaubert"),wrt.forEach(t),zLo=r(r0e," \u2014 "),NN=n(r0e,"A",{href:!0});var Art=s(NN);QLo=r(Art,"FlaubertForMultipleChoice"),Art.forEach(t),WLo=r(r0e," (FlauBERT model)"),r0e.forEach(t),HLo=i(O),_b=n(O,"LI",{});var t0e=s(_b);wie=n(t0e,"STRONG",{});var yrt=s(wie);ULo=r(yrt,"fnet"),yrt.forEach(t),JLo=r(t0e," \u2014 "),jN=n(t0e,"A",{href:!0});var Lrt=s(jN);YLo=r(Lrt,"FNetForMultipleChoice"),Lrt.forEach(t),KLo=r(t0e," (FNet model)"),t0e.forEach(t),ZLo=i(O),ub=n(O,"LI",{});var a0e=s(ub);Aie=n(a0e,"STRONG",{});var xrt=s(Aie);e8o=r(xrt,"funnel"),xrt.forEach(t),o8o=r(a0e," \u2014 "),DN=n(a0e,"A",{href:!0});var krt=s(DN);r8o=r(krt,"FunnelForMultipleChoice"),krt.forEach(t),t8o=r(a0e," (Funnel Transformer model)"),a0e.forEach(t),a8o=i(O),bb=n(O,"LI",{});var n0e=s(bb);yie=n(n0e,"STRONG",{});var Srt=s(yie);n8o=r(Srt,"ibert"),Srt.forEach(t),s8o=r(n0e," \u2014 "),GN=n(n0e,"A",{href:!0});var Rrt=s(GN);l8o=r(Rrt,"IBertForMultipleChoice"),Rrt.forEach(t),i8o=r(n0e," (I-BERT model)"),n0e.forEach(t),d8o=i(O),Fb=n(O,"LI",{});var s0e=s(Fb);Lie=n(s0e,"STRONG",{});var Brt=s(Lie);c8o=r(Brt,"longformer"),Brt.forEach(t),f8o=r(s0e," \u2014 "),ON=n(s0e,"A",{href:!0});var Prt=s(ON);m8o=r(Prt,"LongformerForMultipleChoice"),Prt.forEach(t),g8o=r(s0e," (Longformer model)"),s0e.forEach(t),h8o=i(O),vb=n(O,"LI",{});var l0e=s(vb);xie=n(l0e,"STRONG",{});var $rt=s(xie);p8o=r($rt,"megatron-bert"),$rt.forEach(t),_8o=r(l0e," \u2014 "),VN=n(l0e,"A",{href:!0});var Irt=s(VN);u8o=r(Irt,"MegatronBertForMultipleChoice"),Irt.forEach(t),b8o=r(l0e," (MegatronBert model)"),l0e.forEach(t),F8o=i(O),Tb=n(O,"LI",{});var i0e=s(Tb);kie=n(i0e,"STRONG",{});var qrt=s(kie);v8o=r(qrt,"mobilebert"),qrt.forEach(t),T8o=r(i0e," \u2014 "),XN=n(i0e,"A",{href:!0});var Nrt=s(XN);M8o=r(Nrt,"MobileBertForMultipleChoice"),Nrt.forEach(t),E8o=r(i0e," (MobileBERT model)"),i0e.forEach(t),C8o=i(O),Mb=n(O,"LI",{});var d0e=s(Mb);Sie=n(d0e,"STRONG",{});var jrt=s(Sie);w8o=r(jrt,"mpnet"),jrt.forEach(t),A8o=r(d0e," \u2014 "),zN=n(d0e,"A",{href:!0});var Drt=s(zN);y8o=r(Drt,"MPNetForMultipleChoice"),Drt.forEach(t),L8o=r(d0e," (MPNet model)"),d0e.forEach(t),x8o=i(O),Eb=n(O,"LI",{});var c0e=s(Eb);Rie=n(c0e,"STRONG",{});var Grt=s(Rie);k8o=r(Grt,"nystromformer"),Grt.forEach(t),S8o=r(c0e," \u2014 "),QN=n(c0e,"A",{href:!0});var Ort=s(QN);R8o=r(Ort,"NystromformerForMultipleChoice"),Ort.forEach(t),B8o=r(c0e," (Nystromformer model)"),c0e.forEach(t),P8o=i(O),Cb=n(O,"LI",{});var f0e=s(Cb);Bie=n(f0e,"STRONG",{});var Vrt=s(Bie);$8o=r(Vrt,"qdqbert"),Vrt.forEach(t),I8o=r(f0e," \u2014 "),WN=n(f0e,"A",{href:!0});var Xrt=s(WN);q8o=r(Xrt,"QDQBertForMultipleChoice"),Xrt.forEach(t),N8o=r(f0e," (QDQBert model)"),f0e.forEach(t),j8o=i(O),wb=n(O,"LI",{});var m0e=s(wb);Pie=n(m0e,"STRONG",{});var zrt=s(Pie);D8o=r(zrt,"rembert"),zrt.forEach(t),G8o=r(m0e," \u2014 "),HN=n(m0e,"A",{href:!0});var Qrt=s(HN);O8o=r(Qrt,"RemBertForMultipleChoice"),Qrt.forEach(t),V8o=r(m0e," (RemBERT model)"),m0e.forEach(t),X8o=i(O),Ab=n(O,"LI",{});var g0e=s(Ab);$ie=n(g0e,"STRONG",{});var Wrt=s($ie);z8o=r(Wrt,"roberta"),Wrt.forEach(t),Q8o=r(g0e," \u2014 "),UN=n(g0e,"A",{href:!0});var Hrt=s(UN);W8o=r(Hrt,"RobertaForMultipleChoice"),Hrt.forEach(t),H8o=r(g0e," (RoBERTa model)"),g0e.forEach(t),U8o=i(O),yb=n(O,"LI",{});var h0e=s(yb);Iie=n(h0e,"STRONG",{});var Urt=s(Iie);J8o=r(Urt,"roformer"),Urt.forEach(t),Y8o=r(h0e," \u2014 "),JN=n(h0e,"A",{href:!0});var Jrt=s(JN);K8o=r(Jrt,"RoFormerForMultipleChoice"),Jrt.forEach(t),Z8o=r(h0e," (RoFormer model)"),h0e.forEach(t),e9o=i(O),Lb=n(O,"LI",{});var p0e=s(Lb);qie=n(p0e,"STRONG",{});var Yrt=s(qie);o9o=r(Yrt,"squeezebert"),Yrt.forEach(t),r9o=r(p0e," \u2014 "),YN=n(p0e,"A",{href:!0});var Krt=s(YN);t9o=r(Krt,"SqueezeBertForMultipleChoice"),Krt.forEach(t),a9o=r(p0e," (SqueezeBERT model)"),p0e.forEach(t),n9o=i(O),xb=n(O,"LI",{});var _0e=s(xb);Nie=n(_0e,"STRONG",{});var Zrt=s(Nie);s9o=r(Zrt,"xlm"),Zrt.forEach(t),l9o=r(_0e," \u2014 "),KN=n(_0e,"A",{href:!0});var ett=s(KN);i9o=r(ett,"XLMForMultipleChoice"),ett.forEach(t),d9o=r(_0e," (XLM model)"),_0e.forEach(t),c9o=i(O),kb=n(O,"LI",{});var u0e=s(kb);jie=n(u0e,"STRONG",{});var ott=s(jie);f9o=r(ott,"xlm-roberta"),ott.forEach(t),m9o=r(u0e," \u2014 "),ZN=n(u0e,"A",{href:!0});var rtt=s(ZN);g9o=r(rtt,"XLMRobertaForMultipleChoice"),rtt.forEach(t),h9o=r(u0e," (XLM-RoBERTa model)"),u0e.forEach(t),p9o=i(O),Sb=n(O,"LI",{});var b0e=s(Sb);Die=n(b0e,"STRONG",{});var ttt=s(Die);_9o=r(ttt,"xlm-roberta-xl"),ttt.forEach(t),u9o=r(b0e," \u2014 "),ej=n(b0e,"A",{href:!0});var att=s(ej);b9o=r(att,"XLMRobertaXLForMultipleChoice"),att.forEach(t),F9o=r(b0e," (XLM-RoBERTa-XL model)"),b0e.forEach(t),v9o=i(O),Rb=n(O,"LI",{});var F0e=s(Rb);Gie=n(F0e,"STRONG",{});var ntt=s(Gie);T9o=r(ntt,"xlnet"),ntt.forEach(t),M9o=r(F0e," \u2014 "),oj=n(F0e,"A",{href:!0});var stt=s(oj);E9o=r(stt,"XLNetForMultipleChoice"),stt.forEach(t),C9o=r(F0e," (XLNet model)"),F0e.forEach(t),w9o=i(O),Bb=n(O,"LI",{});var v0e=s(Bb);Oie=n(v0e,"STRONG",{});var ltt=s(Oie);A9o=r(ltt,"yoso"),ltt.forEach(t),y9o=r(v0e," \u2014 "),rj=n(v0e,"A",{href:!0});var itt=s(rj);L9o=r(itt,"YosoForMultipleChoice"),itt.forEach(t),x9o=r(v0e," (YOSO model)"),v0e.forEach(t),O.forEach(t),k9o=i(Qt),Pb=n(Qt,"P",{});var T0e=s(Pb);S9o=r(T0e,"The model is set in evaluation mode by default using "),Vie=n(T0e,"CODE",{});var dtt=s(Vie);R9o=r(dtt,"model.eval()"),dtt.forEach(t),B9o=r(T0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=n(T0e,"CODE",{});var ctt=s(Xie);P9o=r(ctt,"model.train()"),ctt.forEach(t),T0e.forEach(t),$9o=i(Qt),zie=n(Qt,"P",{});var ftt=s(zie);I9o=r(ftt,"Examples:"),ftt.forEach(t),q9o=i(Qt),m(eA.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),eBe=i(c),ud=n(c,"H2",{class:!0});var d$e=s(ud);$b=n(d$e,"A",{id:!0,class:!0,href:!0});var mtt=s($b);Qie=n(mtt,"SPAN",{});var gtt=s(Qie);m(oA.$$.fragment,gtt),gtt.forEach(t),mtt.forEach(t),N9o=i(d$e),Wie=n(d$e,"SPAN",{});var htt=s(Wie);j9o=r(htt,"AutoModelForNextSentencePrediction"),htt.forEach(t),d$e.forEach(t),oBe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(rA.$$.fragment,sl),D9o=i(sl),bd=n(sl,"P",{});var SU=s(bd);G9o=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tj=n(SU,"A",{href:!0});var ptt=s(tj);O9o=r(ptt,"from_pretrained()"),ptt.forEach(t),V9o=r(SU," class method or the "),aj=n(SU,"A",{href:!0});var _tt=s(aj);X9o=r(_tt,"from_config()"),_tt.forEach(t),z9o=r(SU,` class
method.`),SU.forEach(t),Q9o=i(sl),tA=n(sl,"P",{});var c$e=s(tA);W9o=r(c$e,"This class cannot be instantiated directly using "),Hie=n(c$e,"CODE",{});var utt=s(Hie);H9o=r(utt,"__init__()"),utt.forEach(t),U9o=r(c$e," (throws an error)."),c$e.forEach(t),J9o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(aA.$$.fragment,ll),Y9o=i(ll),Uie=n(ll,"P",{});var btt=s(Uie);K9o=r(btt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),btt.forEach(t),Z9o=i(ll),Fd=n(ll,"P",{});var RU=s(Fd);exo=r(RU,`Note:
Loading a model from its configuration file does `),Jie=n(RU,"STRONG",{});var Ftt=s(Jie);oxo=r(Ftt,"not"),Ftt.forEach(t),rxo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(RU,"A",{href:!0});var vtt=s(nj);txo=r(vtt,"from_pretrained()"),vtt.forEach(t),axo=r(RU," to load the model weights."),RU.forEach(t),nxo=i(ll),Yie=n(ll,"P",{});var Ttt=s(Yie);sxo=r(Ttt,"Examples:"),Ttt.forEach(t),lxo=i(ll),m(nA.$$.fragment,ll),ll.forEach(t),ixo=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(sA.$$.fragment,Wt),dxo=i(Wt),Kie=n(Wt,"P",{});var Mtt=s(Kie);cxo=r(Mtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mtt.forEach(t),fxo=i(Wt),Ya=n(Wt,"P",{});var qE=s(Ya);mxo=r(qE,"The model class to instantiate is selected based on the "),Zie=n(qE,"CODE",{});var Ett=s(Zie);gxo=r(Ett,"model_type"),Ett.forEach(t),hxo=r(qE,` property of the config object (either
passed as an argument or loaded from `),ede=n(qE,"CODE",{});var Ctt=s(ede);pxo=r(Ctt,"pretrained_model_name_or_path"),Ctt.forEach(t),_xo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(qE,"CODE",{});var wtt=s(ode);uxo=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),bxo=r(qE,":"),qE.forEach(t),Fxo=i(Wt),da=n(Wt,"UL",{});var il=s(da);Ib=n(il,"LI",{});var M0e=s(Ib);rde=n(M0e,"STRONG",{});var Att=s(rde);vxo=r(Att,"bert"),Att.forEach(t),Txo=r(M0e," \u2014 "),sj=n(M0e,"A",{href:!0});var ytt=s(sj);Mxo=r(ytt,"BertForNextSentencePrediction"),ytt.forEach(t),Exo=r(M0e," (BERT model)"),M0e.forEach(t),Cxo=i(il),qb=n(il,"LI",{});var E0e=s(qb);tde=n(E0e,"STRONG",{});var Ltt=s(tde);wxo=r(Ltt,"fnet"),Ltt.forEach(t),Axo=r(E0e," \u2014 "),lj=n(E0e,"A",{href:!0});var xtt=s(lj);yxo=r(xtt,"FNetForNextSentencePrediction"),xtt.forEach(t),Lxo=r(E0e," (FNet model)"),E0e.forEach(t),xxo=i(il),Nb=n(il,"LI",{});var C0e=s(Nb);ade=n(C0e,"STRONG",{});var ktt=s(ade);kxo=r(ktt,"megatron-bert"),ktt.forEach(t),Sxo=r(C0e," \u2014 "),ij=n(C0e,"A",{href:!0});var Stt=s(ij);Rxo=r(Stt,"MegatronBertForNextSentencePrediction"),Stt.forEach(t),Bxo=r(C0e," (MegatronBert model)"),C0e.forEach(t),Pxo=i(il),jb=n(il,"LI",{});var w0e=s(jb);nde=n(w0e,"STRONG",{});var Rtt=s(nde);$xo=r(Rtt,"mobilebert"),Rtt.forEach(t),Ixo=r(w0e," \u2014 "),dj=n(w0e,"A",{href:!0});var Btt=s(dj);qxo=r(Btt,"MobileBertForNextSentencePrediction"),Btt.forEach(t),Nxo=r(w0e," (MobileBERT model)"),w0e.forEach(t),jxo=i(il),Db=n(il,"LI",{});var A0e=s(Db);sde=n(A0e,"STRONG",{});var Ptt=s(sde);Dxo=r(Ptt,"qdqbert"),Ptt.forEach(t),Gxo=r(A0e," \u2014 "),cj=n(A0e,"A",{href:!0});var $tt=s(cj);Oxo=r($tt,"QDQBertForNextSentencePrediction"),$tt.forEach(t),Vxo=r(A0e," (QDQBert model)"),A0e.forEach(t),il.forEach(t),Xxo=i(Wt),Gb=n(Wt,"P",{});var y0e=s(Gb);zxo=r(y0e,"The model is set in evaluation mode by default using "),lde=n(y0e,"CODE",{});var Itt=s(lde);Qxo=r(Itt,"model.eval()"),Itt.forEach(t),Wxo=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(y0e,"CODE",{});var qtt=s(ide);Hxo=r(qtt,"model.train()"),qtt.forEach(t),y0e.forEach(t),Uxo=i(Wt),dde=n(Wt,"P",{});var Ntt=s(dde);Jxo=r(Ntt,"Examples:"),Ntt.forEach(t),Yxo=i(Wt),m(lA.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),rBe=i(c),vd=n(c,"H2",{class:!0});var f$e=s(vd);Ob=n(f$e,"A",{id:!0,class:!0,href:!0});var jtt=s(Ob);cde=n(jtt,"SPAN",{});var Dtt=s(cde);m(iA.$$.fragment,Dtt),Dtt.forEach(t),jtt.forEach(t),Kxo=i(f$e),fde=n(f$e,"SPAN",{});var Gtt=s(fde);Zxo=r(Gtt,"AutoModelForTokenClassification"),Gtt.forEach(t),f$e.forEach(t),tBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(dA.$$.fragment,dl),eko=i(dl),Td=n(dl,"P",{});var BU=s(Td);oko=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fj=n(BU,"A",{href:!0});var Ott=s(fj);rko=r(Ott,"from_pretrained()"),Ott.forEach(t),tko=r(BU," class method or the "),mj=n(BU,"A",{href:!0});var Vtt=s(mj);ako=r(Vtt,"from_config()"),Vtt.forEach(t),nko=r(BU,` class
method.`),BU.forEach(t),sko=i(dl),cA=n(dl,"P",{});var m$e=s(cA);lko=r(m$e,"This class cannot be instantiated directly using "),mde=n(m$e,"CODE",{});var Xtt=s(mde);iko=r(Xtt,"__init__()"),Xtt.forEach(t),dko=r(m$e," (throws an error)."),m$e.forEach(t),cko=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(fA.$$.fragment,cl),fko=i(cl),gde=n(cl,"P",{});var ztt=s(gde);mko=r(ztt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ztt.forEach(t),gko=i(cl),Md=n(cl,"P",{});var PU=s(Md);hko=r(PU,`Note:
Loading a model from its configuration file does `),hde=n(PU,"STRONG",{});var Qtt=s(hde);pko=r(Qtt,"not"),Qtt.forEach(t),_ko=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gj=n(PU,"A",{href:!0});var Wtt=s(gj);uko=r(Wtt,"from_pretrained()"),Wtt.forEach(t),bko=r(PU," to load the model weights."),PU.forEach(t),Fko=i(cl),pde=n(cl,"P",{});var Htt=s(pde);vko=r(Htt,"Examples:"),Htt.forEach(t),Tko=i(cl),m(mA.$$.fragment,cl),cl.forEach(t),Mko=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(gA.$$.fragment,Ht),Eko=i(Ht),_de=n(Ht,"P",{});var Utt=s(_de);Cko=r(Utt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Utt.forEach(t),wko=i(Ht),Ka=n(Ht,"P",{});var NE=s(Ka);Ako=r(NE,"The model class to instantiate is selected based on the "),ude=n(NE,"CODE",{});var Jtt=s(ude);yko=r(Jtt,"model_type"),Jtt.forEach(t),Lko=r(NE,` property of the config object (either
passed as an argument or loaded from `),bde=n(NE,"CODE",{});var Ytt=s(bde);xko=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),kko=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(NE,"CODE",{});var Ktt=s(Fde);Sko=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),Rko=r(NE,":"),NE.forEach(t),Bko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Vb=n(D,"LI",{});var L0e=s(Vb);vde=n(L0e,"STRONG",{});var Ztt=s(vde);Pko=r(Ztt,"albert"),Ztt.forEach(t),$ko=r(L0e," \u2014 "),hj=n(L0e,"A",{href:!0});var eat=s(hj);Iko=r(eat,"AlbertForTokenClassification"),eat.forEach(t),qko=r(L0e," (ALBERT model)"),L0e.forEach(t),Nko=i(D),Xb=n(D,"LI",{});var x0e=s(Xb);Tde=n(x0e,"STRONG",{});var oat=s(Tde);jko=r(oat,"bert"),oat.forEach(t),Dko=r(x0e," \u2014 "),pj=n(x0e,"A",{href:!0});var rat=s(pj);Gko=r(rat,"BertForTokenClassification"),rat.forEach(t),Oko=r(x0e," (BERT model)"),x0e.forEach(t),Vko=i(D),zb=n(D,"LI",{});var k0e=s(zb);Mde=n(k0e,"STRONG",{});var tat=s(Mde);Xko=r(tat,"big_bird"),tat.forEach(t),zko=r(k0e," \u2014 "),_j=n(k0e,"A",{href:!0});var aat=s(_j);Qko=r(aat,"BigBirdForTokenClassification"),aat.forEach(t),Wko=r(k0e," (BigBird model)"),k0e.forEach(t),Hko=i(D),Qb=n(D,"LI",{});var S0e=s(Qb);Ede=n(S0e,"STRONG",{});var nat=s(Ede);Uko=r(nat,"camembert"),nat.forEach(t),Jko=r(S0e," \u2014 "),uj=n(S0e,"A",{href:!0});var sat=s(uj);Yko=r(sat,"CamembertForTokenClassification"),sat.forEach(t),Kko=r(S0e," (CamemBERT model)"),S0e.forEach(t),Zko=i(D),Wb=n(D,"LI",{});var R0e=s(Wb);Cde=n(R0e,"STRONG",{});var lat=s(Cde);eSo=r(lat,"canine"),lat.forEach(t),oSo=r(R0e," \u2014 "),bj=n(R0e,"A",{href:!0});var iat=s(bj);rSo=r(iat,"CanineForTokenClassification"),iat.forEach(t),tSo=r(R0e," (Canine model)"),R0e.forEach(t),aSo=i(D),Hb=n(D,"LI",{});var B0e=s(Hb);wde=n(B0e,"STRONG",{});var dat=s(wde);nSo=r(dat,"convbert"),dat.forEach(t),sSo=r(B0e," \u2014 "),Fj=n(B0e,"A",{href:!0});var cat=s(Fj);lSo=r(cat,"ConvBertForTokenClassification"),cat.forEach(t),iSo=r(B0e," (ConvBERT model)"),B0e.forEach(t),dSo=i(D),Ub=n(D,"LI",{});var P0e=s(Ub);Ade=n(P0e,"STRONG",{});var fat=s(Ade);cSo=r(fat,"data2vec-text"),fat.forEach(t),fSo=r(P0e," \u2014 "),vj=n(P0e,"A",{href:!0});var mat=s(vj);mSo=r(mat,"Data2VecTextForTokenClassification"),mat.forEach(t),gSo=r(P0e," (Data2VecText model)"),P0e.forEach(t),hSo=i(D),Jb=n(D,"LI",{});var $0e=s(Jb);yde=n($0e,"STRONG",{});var gat=s(yde);pSo=r(gat,"deberta"),gat.forEach(t),_So=r($0e," \u2014 "),Tj=n($0e,"A",{href:!0});var hat=s(Tj);uSo=r(hat,"DebertaForTokenClassification"),hat.forEach(t),bSo=r($0e," (DeBERTa model)"),$0e.forEach(t),FSo=i(D),Yb=n(D,"LI",{});var I0e=s(Yb);Lde=n(I0e,"STRONG",{});var pat=s(Lde);vSo=r(pat,"deberta-v2"),pat.forEach(t),TSo=r(I0e," \u2014 "),Mj=n(I0e,"A",{href:!0});var _at=s(Mj);MSo=r(_at,"DebertaV2ForTokenClassification"),_at.forEach(t),ESo=r(I0e," (DeBERTa-v2 model)"),I0e.forEach(t),CSo=i(D),Kb=n(D,"LI",{});var q0e=s(Kb);xde=n(q0e,"STRONG",{});var uat=s(xde);wSo=r(uat,"distilbert"),uat.forEach(t),ASo=r(q0e," \u2014 "),Ej=n(q0e,"A",{href:!0});var bat=s(Ej);ySo=r(bat,"DistilBertForTokenClassification"),bat.forEach(t),LSo=r(q0e," (DistilBERT model)"),q0e.forEach(t),xSo=i(D),Zb=n(D,"LI",{});var N0e=s(Zb);kde=n(N0e,"STRONG",{});var Fat=s(kde);kSo=r(Fat,"electra"),Fat.forEach(t),SSo=r(N0e," \u2014 "),Cj=n(N0e,"A",{href:!0});var vat=s(Cj);RSo=r(vat,"ElectraForTokenClassification"),vat.forEach(t),BSo=r(N0e," (ELECTRA model)"),N0e.forEach(t),PSo=i(D),e5=n(D,"LI",{});var j0e=s(e5);Sde=n(j0e,"STRONG",{});var Tat=s(Sde);$So=r(Tat,"flaubert"),Tat.forEach(t),ISo=r(j0e," \u2014 "),wj=n(j0e,"A",{href:!0});var Mat=s(wj);qSo=r(Mat,"FlaubertForTokenClassification"),Mat.forEach(t),NSo=r(j0e," (FlauBERT model)"),j0e.forEach(t),jSo=i(D),o5=n(D,"LI",{});var D0e=s(o5);Rde=n(D0e,"STRONG",{});var Eat=s(Rde);DSo=r(Eat,"fnet"),Eat.forEach(t),GSo=r(D0e," \u2014 "),Aj=n(D0e,"A",{href:!0});var Cat=s(Aj);OSo=r(Cat,"FNetForTokenClassification"),Cat.forEach(t),VSo=r(D0e," (FNet model)"),D0e.forEach(t),XSo=i(D),r5=n(D,"LI",{});var G0e=s(r5);Bde=n(G0e,"STRONG",{});var wat=s(Bde);zSo=r(wat,"funnel"),wat.forEach(t),QSo=r(G0e," \u2014 "),yj=n(G0e,"A",{href:!0});var Aat=s(yj);WSo=r(Aat,"FunnelForTokenClassification"),Aat.forEach(t),HSo=r(G0e," (Funnel Transformer model)"),G0e.forEach(t),USo=i(D),t5=n(D,"LI",{});var O0e=s(t5);Pde=n(O0e,"STRONG",{});var yat=s(Pde);JSo=r(yat,"gpt2"),yat.forEach(t),YSo=r(O0e," \u2014 "),Lj=n(O0e,"A",{href:!0});var Lat=s(Lj);KSo=r(Lat,"GPT2ForTokenClassification"),Lat.forEach(t),ZSo=r(O0e," (OpenAI GPT-2 model)"),O0e.forEach(t),eRo=i(D),a5=n(D,"LI",{});var V0e=s(a5);$de=n(V0e,"STRONG",{});var xat=s($de);oRo=r(xat,"ibert"),xat.forEach(t),rRo=r(V0e," \u2014 "),xj=n(V0e,"A",{href:!0});var kat=s(xj);tRo=r(kat,"IBertForTokenClassification"),kat.forEach(t),aRo=r(V0e," (I-BERT model)"),V0e.forEach(t),nRo=i(D),n5=n(D,"LI",{});var X0e=s(n5);Ide=n(X0e,"STRONG",{});var Sat=s(Ide);sRo=r(Sat,"layoutlm"),Sat.forEach(t),lRo=r(X0e," \u2014 "),kj=n(X0e,"A",{href:!0});var Rat=s(kj);iRo=r(Rat,"LayoutLMForTokenClassification"),Rat.forEach(t),dRo=r(X0e," (LayoutLM model)"),X0e.forEach(t),cRo=i(D),s5=n(D,"LI",{});var z0e=s(s5);qde=n(z0e,"STRONG",{});var Bat=s(qde);fRo=r(Bat,"layoutlmv2"),Bat.forEach(t),mRo=r(z0e," \u2014 "),Sj=n(z0e,"A",{href:!0});var Pat=s(Sj);gRo=r(Pat,"LayoutLMv2ForTokenClassification"),Pat.forEach(t),hRo=r(z0e," (LayoutLMv2 model)"),z0e.forEach(t),pRo=i(D),l5=n(D,"LI",{});var Q0e=s(l5);Nde=n(Q0e,"STRONG",{});var $at=s(Nde);_Ro=r($at,"longformer"),$at.forEach(t),uRo=r(Q0e," \u2014 "),Rj=n(Q0e,"A",{href:!0});var Iat=s(Rj);bRo=r(Iat,"LongformerForTokenClassification"),Iat.forEach(t),FRo=r(Q0e," (Longformer model)"),Q0e.forEach(t),vRo=i(D),i5=n(D,"LI",{});var W0e=s(i5);jde=n(W0e,"STRONG",{});var qat=s(jde);TRo=r(qat,"megatron-bert"),qat.forEach(t),MRo=r(W0e," \u2014 "),Bj=n(W0e,"A",{href:!0});var Nat=s(Bj);ERo=r(Nat,"MegatronBertForTokenClassification"),Nat.forEach(t),CRo=r(W0e," (MegatronBert model)"),W0e.forEach(t),wRo=i(D),d5=n(D,"LI",{});var H0e=s(d5);Dde=n(H0e,"STRONG",{});var jat=s(Dde);ARo=r(jat,"mobilebert"),jat.forEach(t),yRo=r(H0e," \u2014 "),Pj=n(H0e,"A",{href:!0});var Dat=s(Pj);LRo=r(Dat,"MobileBertForTokenClassification"),Dat.forEach(t),xRo=r(H0e," (MobileBERT model)"),H0e.forEach(t),kRo=i(D),c5=n(D,"LI",{});var U0e=s(c5);Gde=n(U0e,"STRONG",{});var Gat=s(Gde);SRo=r(Gat,"mpnet"),Gat.forEach(t),RRo=r(U0e," \u2014 "),$j=n(U0e,"A",{href:!0});var Oat=s($j);BRo=r(Oat,"MPNetForTokenClassification"),Oat.forEach(t),PRo=r(U0e," (MPNet model)"),U0e.forEach(t),$Ro=i(D),f5=n(D,"LI",{});var J0e=s(f5);Ode=n(J0e,"STRONG",{});var Vat=s(Ode);IRo=r(Vat,"nystromformer"),Vat.forEach(t),qRo=r(J0e," \u2014 "),Ij=n(J0e,"A",{href:!0});var Xat=s(Ij);NRo=r(Xat,"NystromformerForTokenClassification"),Xat.forEach(t),jRo=r(J0e," (Nystromformer model)"),J0e.forEach(t),DRo=i(D),m5=n(D,"LI",{});var Y0e=s(m5);Vde=n(Y0e,"STRONG",{});var zat=s(Vde);GRo=r(zat,"qdqbert"),zat.forEach(t),ORo=r(Y0e," \u2014 "),qj=n(Y0e,"A",{href:!0});var Qat=s(qj);VRo=r(Qat,"QDQBertForTokenClassification"),Qat.forEach(t),XRo=r(Y0e," (QDQBert model)"),Y0e.forEach(t),zRo=i(D),g5=n(D,"LI",{});var K0e=s(g5);Xde=n(K0e,"STRONG",{});var Wat=s(Xde);QRo=r(Wat,"rembert"),Wat.forEach(t),WRo=r(K0e," \u2014 "),Nj=n(K0e,"A",{href:!0});var Hat=s(Nj);HRo=r(Hat,"RemBertForTokenClassification"),Hat.forEach(t),URo=r(K0e," (RemBERT model)"),K0e.forEach(t),JRo=i(D),h5=n(D,"LI",{});var Z0e=s(h5);zde=n(Z0e,"STRONG",{});var Uat=s(zde);YRo=r(Uat,"roberta"),Uat.forEach(t),KRo=r(Z0e," \u2014 "),jj=n(Z0e,"A",{href:!0});var Jat=s(jj);ZRo=r(Jat,"RobertaForTokenClassification"),Jat.forEach(t),eBo=r(Z0e," (RoBERTa model)"),Z0e.forEach(t),oBo=i(D),p5=n(D,"LI",{});var eye=s(p5);Qde=n(eye,"STRONG",{});var Yat=s(Qde);rBo=r(Yat,"roformer"),Yat.forEach(t),tBo=r(eye," \u2014 "),Dj=n(eye,"A",{href:!0});var Kat=s(Dj);aBo=r(Kat,"RoFormerForTokenClassification"),Kat.forEach(t),nBo=r(eye," (RoFormer model)"),eye.forEach(t),sBo=i(D),_5=n(D,"LI",{});var oye=s(_5);Wde=n(oye,"STRONG",{});var Zat=s(Wde);lBo=r(Zat,"squeezebert"),Zat.forEach(t),iBo=r(oye," \u2014 "),Gj=n(oye,"A",{href:!0});var ent=s(Gj);dBo=r(ent,"SqueezeBertForTokenClassification"),ent.forEach(t),cBo=r(oye," (SqueezeBERT model)"),oye.forEach(t),fBo=i(D),u5=n(D,"LI",{});var rye=s(u5);Hde=n(rye,"STRONG",{});var ont=s(Hde);mBo=r(ont,"xlm"),ont.forEach(t),gBo=r(rye," \u2014 "),Oj=n(rye,"A",{href:!0});var rnt=s(Oj);hBo=r(rnt,"XLMForTokenClassification"),rnt.forEach(t),pBo=r(rye," (XLM model)"),rye.forEach(t),_Bo=i(D),b5=n(D,"LI",{});var tye=s(b5);Ude=n(tye,"STRONG",{});var tnt=s(Ude);uBo=r(tnt,"xlm-roberta"),tnt.forEach(t),bBo=r(tye," \u2014 "),Vj=n(tye,"A",{href:!0});var ant=s(Vj);FBo=r(ant,"XLMRobertaForTokenClassification"),ant.forEach(t),vBo=r(tye," (XLM-RoBERTa model)"),tye.forEach(t),TBo=i(D),F5=n(D,"LI",{});var aye=s(F5);Jde=n(aye,"STRONG",{});var nnt=s(Jde);MBo=r(nnt,"xlm-roberta-xl"),nnt.forEach(t),EBo=r(aye," \u2014 "),Xj=n(aye,"A",{href:!0});var snt=s(Xj);CBo=r(snt,"XLMRobertaXLForTokenClassification"),snt.forEach(t),wBo=r(aye," (XLM-RoBERTa-XL model)"),aye.forEach(t),ABo=i(D),v5=n(D,"LI",{});var nye=s(v5);Yde=n(nye,"STRONG",{});var lnt=s(Yde);yBo=r(lnt,"xlnet"),lnt.forEach(t),LBo=r(nye," \u2014 "),zj=n(nye,"A",{href:!0});var int=s(zj);xBo=r(int,"XLNetForTokenClassification"),int.forEach(t),kBo=r(nye," (XLNet model)"),nye.forEach(t),SBo=i(D),T5=n(D,"LI",{});var sye=s(T5);Kde=n(sye,"STRONG",{});var dnt=s(Kde);RBo=r(dnt,"yoso"),dnt.forEach(t),BBo=r(sye," \u2014 "),Qj=n(sye,"A",{href:!0});var cnt=s(Qj);PBo=r(cnt,"YosoForTokenClassification"),cnt.forEach(t),$Bo=r(sye," (YOSO model)"),sye.forEach(t),D.forEach(t),IBo=i(Ht),M5=n(Ht,"P",{});var lye=s(M5);qBo=r(lye,"The model is set in evaluation mode by default using "),Zde=n(lye,"CODE",{});var fnt=s(Zde);NBo=r(fnt,"model.eval()"),fnt.forEach(t),jBo=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(lye,"CODE",{});var mnt=s(ece);DBo=r(mnt,"model.train()"),mnt.forEach(t),lye.forEach(t),GBo=i(Ht),oce=n(Ht,"P",{});var gnt=s(oce);OBo=r(gnt,"Examples:"),gnt.forEach(t),VBo=i(Ht),m(hA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),aBe=i(c),Ed=n(c,"H2",{class:!0});var g$e=s(Ed);E5=n(g$e,"A",{id:!0,class:!0,href:!0});var hnt=s(E5);rce=n(hnt,"SPAN",{});var pnt=s(rce);m(pA.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),XBo=i(g$e),tce=n(g$e,"SPAN",{});var _nt=s(tce);zBo=r(_nt,"AutoModelForQuestionAnswering"),_nt.forEach(t),g$e.forEach(t),nBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(_A.$$.fragment,fl),QBo=i(fl),Cd=n(fl,"P",{});var $U=s(Cd);WBo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wj=n($U,"A",{href:!0});var unt=s(Wj);HBo=r(unt,"from_pretrained()"),unt.forEach(t),UBo=r($U," class method or the "),Hj=n($U,"A",{href:!0});var bnt=s(Hj);JBo=r(bnt,"from_config()"),bnt.forEach(t),YBo=r($U,` class
method.`),$U.forEach(t),KBo=i(fl),uA=n(fl,"P",{});var h$e=s(uA);ZBo=r(h$e,"This class cannot be instantiated directly using "),ace=n(h$e,"CODE",{});var Fnt=s(ace);ePo=r(Fnt,"__init__()"),Fnt.forEach(t),oPo=r(h$e," (throws an error)."),h$e.forEach(t),rPo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(bA.$$.fragment,ml),tPo=i(ml),nce=n(ml,"P",{});var vnt=s(nce);aPo=r(vnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vnt.forEach(t),nPo=i(ml),wd=n(ml,"P",{});var IU=s(wd);sPo=r(IU,`Note:
Loading a model from its configuration file does `),sce=n(IU,"STRONG",{});var Tnt=s(sce);lPo=r(Tnt,"not"),Tnt.forEach(t),iPo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(IU,"A",{href:!0});var Mnt=s(Uj);dPo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),cPo=r(IU," to load the model weights."),IU.forEach(t),fPo=i(ml),lce=n(ml,"P",{});var Ent=s(lce);mPo=r(Ent,"Examples:"),Ent.forEach(t),gPo=i(ml),m(FA.$$.fragment,ml),ml.forEach(t),hPo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(vA.$$.fragment,Ut),pPo=i(Ut),ice=n(Ut,"P",{});var Cnt=s(ice);_Po=r(Cnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cnt.forEach(t),uPo=i(Ut),Za=n(Ut,"P",{});var jE=s(Za);bPo=r(jE,"The model class to instantiate is selected based on the "),dce=n(jE,"CODE",{});var wnt=s(dce);FPo=r(wnt,"model_type"),wnt.forEach(t),vPo=r(jE,` property of the config object (either
passed as an argument or loaded from `),cce=n(jE,"CODE",{});var Ant=s(cce);TPo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),MPo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=n(jE,"CODE",{});var ynt=s(fce);EPo=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),CPo=r(jE,":"),jE.forEach(t),wPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);C5=n(P,"LI",{});var iye=s(C5);mce=n(iye,"STRONG",{});var Lnt=s(mce);APo=r(Lnt,"albert"),Lnt.forEach(t),yPo=r(iye," \u2014 "),Jj=n(iye,"A",{href:!0});var xnt=s(Jj);LPo=r(xnt,"AlbertForQuestionAnswering"),xnt.forEach(t),xPo=r(iye," (ALBERT model)"),iye.forEach(t),kPo=i(P),w5=n(P,"LI",{});var dye=s(w5);gce=n(dye,"STRONG",{});var knt=s(gce);SPo=r(knt,"bart"),knt.forEach(t),RPo=r(dye," \u2014 "),Yj=n(dye,"A",{href:!0});var Snt=s(Yj);BPo=r(Snt,"BartForQuestionAnswering"),Snt.forEach(t),PPo=r(dye," (BART model)"),dye.forEach(t),$Po=i(P),A5=n(P,"LI",{});var cye=s(A5);hce=n(cye,"STRONG",{});var Rnt=s(hce);IPo=r(Rnt,"bert"),Rnt.forEach(t),qPo=r(cye," \u2014 "),Kj=n(cye,"A",{href:!0});var Bnt=s(Kj);NPo=r(Bnt,"BertForQuestionAnswering"),Bnt.forEach(t),jPo=r(cye," (BERT model)"),cye.forEach(t),DPo=i(P),y5=n(P,"LI",{});var fye=s(y5);pce=n(fye,"STRONG",{});var Pnt=s(pce);GPo=r(Pnt,"big_bird"),Pnt.forEach(t),OPo=r(fye," \u2014 "),Zj=n(fye,"A",{href:!0});var $nt=s(Zj);VPo=r($nt,"BigBirdForQuestionAnswering"),$nt.forEach(t),XPo=r(fye," (BigBird model)"),fye.forEach(t),zPo=i(P),L5=n(P,"LI",{});var mye=s(L5);_ce=n(mye,"STRONG",{});var Int=s(_ce);QPo=r(Int,"bigbird_pegasus"),Int.forEach(t),WPo=r(mye," \u2014 "),eD=n(mye,"A",{href:!0});var qnt=s(eD);HPo=r(qnt,"BigBirdPegasusForQuestionAnswering"),qnt.forEach(t),UPo=r(mye," (BigBirdPegasus model)"),mye.forEach(t),JPo=i(P),x5=n(P,"LI",{});var gye=s(x5);uce=n(gye,"STRONG",{});var Nnt=s(uce);YPo=r(Nnt,"camembert"),Nnt.forEach(t),KPo=r(gye," \u2014 "),oD=n(gye,"A",{href:!0});var jnt=s(oD);ZPo=r(jnt,"CamembertForQuestionAnswering"),jnt.forEach(t),e$o=r(gye," (CamemBERT model)"),gye.forEach(t),o$o=i(P),k5=n(P,"LI",{});var hye=s(k5);bce=n(hye,"STRONG",{});var Dnt=s(bce);r$o=r(Dnt,"canine"),Dnt.forEach(t),t$o=r(hye," \u2014 "),rD=n(hye,"A",{href:!0});var Gnt=s(rD);a$o=r(Gnt,"CanineForQuestionAnswering"),Gnt.forEach(t),n$o=r(hye," (Canine model)"),hye.forEach(t),s$o=i(P),S5=n(P,"LI",{});var pye=s(S5);Fce=n(pye,"STRONG",{});var Ont=s(Fce);l$o=r(Ont,"convbert"),Ont.forEach(t),i$o=r(pye," \u2014 "),tD=n(pye,"A",{href:!0});var Vnt=s(tD);d$o=r(Vnt,"ConvBertForQuestionAnswering"),Vnt.forEach(t),c$o=r(pye," (ConvBERT model)"),pye.forEach(t),f$o=i(P),R5=n(P,"LI",{});var _ye=s(R5);vce=n(_ye,"STRONG",{});var Xnt=s(vce);m$o=r(Xnt,"data2vec-text"),Xnt.forEach(t),g$o=r(_ye," \u2014 "),aD=n(_ye,"A",{href:!0});var znt=s(aD);h$o=r(znt,"Data2VecTextForQuestionAnswering"),znt.forEach(t),p$o=r(_ye," (Data2VecText model)"),_ye.forEach(t),_$o=i(P),B5=n(P,"LI",{});var uye=s(B5);Tce=n(uye,"STRONG",{});var Qnt=s(Tce);u$o=r(Qnt,"deberta"),Qnt.forEach(t),b$o=r(uye," \u2014 "),nD=n(uye,"A",{href:!0});var Wnt=s(nD);F$o=r(Wnt,"DebertaForQuestionAnswering"),Wnt.forEach(t),v$o=r(uye," (DeBERTa model)"),uye.forEach(t),T$o=i(P),P5=n(P,"LI",{});var bye=s(P5);Mce=n(bye,"STRONG",{});var Hnt=s(Mce);M$o=r(Hnt,"deberta-v2"),Hnt.forEach(t),E$o=r(bye," \u2014 "),sD=n(bye,"A",{href:!0});var Unt=s(sD);C$o=r(Unt,"DebertaV2ForQuestionAnswering"),Unt.forEach(t),w$o=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),A$o=i(P),$5=n(P,"LI",{});var Fye=s($5);Ece=n(Fye,"STRONG",{});var Jnt=s(Ece);y$o=r(Jnt,"distilbert"),Jnt.forEach(t),L$o=r(Fye," \u2014 "),lD=n(Fye,"A",{href:!0});var Ynt=s(lD);x$o=r(Ynt,"DistilBertForQuestionAnswering"),Ynt.forEach(t),k$o=r(Fye," (DistilBERT model)"),Fye.forEach(t),S$o=i(P),I5=n(P,"LI",{});var vye=s(I5);Cce=n(vye,"STRONG",{});var Knt=s(Cce);R$o=r(Knt,"electra"),Knt.forEach(t),B$o=r(vye," \u2014 "),iD=n(vye,"A",{href:!0});var Znt=s(iD);P$o=r(Znt,"ElectraForQuestionAnswering"),Znt.forEach(t),$$o=r(vye," (ELECTRA model)"),vye.forEach(t),I$o=i(P),q5=n(P,"LI",{});var Tye=s(q5);wce=n(Tye,"STRONG",{});var est=s(wce);q$o=r(est,"flaubert"),est.forEach(t),N$o=r(Tye," \u2014 "),dD=n(Tye,"A",{href:!0});var ost=s(dD);j$o=r(ost,"FlaubertForQuestionAnsweringSimple"),ost.forEach(t),D$o=r(Tye," (FlauBERT model)"),Tye.forEach(t),G$o=i(P),N5=n(P,"LI",{});var Mye=s(N5);Ace=n(Mye,"STRONG",{});var rst=s(Ace);O$o=r(rst,"fnet"),rst.forEach(t),V$o=r(Mye," \u2014 "),cD=n(Mye,"A",{href:!0});var tst=s(cD);X$o=r(tst,"FNetForQuestionAnswering"),tst.forEach(t),z$o=r(Mye," (FNet model)"),Mye.forEach(t),Q$o=i(P),j5=n(P,"LI",{});var Eye=s(j5);yce=n(Eye,"STRONG",{});var ast=s(yce);W$o=r(ast,"funnel"),ast.forEach(t),H$o=r(Eye," \u2014 "),fD=n(Eye,"A",{href:!0});var nst=s(fD);U$o=r(nst,"FunnelForQuestionAnswering"),nst.forEach(t),J$o=r(Eye," (Funnel Transformer model)"),Eye.forEach(t),Y$o=i(P),D5=n(P,"LI",{});var Cye=s(D5);Lce=n(Cye,"STRONG",{});var sst=s(Lce);K$o=r(sst,"gptj"),sst.forEach(t),Z$o=r(Cye," \u2014 "),mD=n(Cye,"A",{href:!0});var lst=s(mD);eIo=r(lst,"GPTJForQuestionAnswering"),lst.forEach(t),oIo=r(Cye," (GPT-J model)"),Cye.forEach(t),rIo=i(P),G5=n(P,"LI",{});var wye=s(G5);xce=n(wye,"STRONG",{});var ist=s(xce);tIo=r(ist,"ibert"),ist.forEach(t),aIo=r(wye," \u2014 "),gD=n(wye,"A",{href:!0});var dst=s(gD);nIo=r(dst,"IBertForQuestionAnswering"),dst.forEach(t),sIo=r(wye," (I-BERT model)"),wye.forEach(t),lIo=i(P),O5=n(P,"LI",{});var Aye=s(O5);kce=n(Aye,"STRONG",{});var cst=s(kce);iIo=r(cst,"layoutlmv2"),cst.forEach(t),dIo=r(Aye," \u2014 "),hD=n(Aye,"A",{href:!0});var fst=s(hD);cIo=r(fst,"LayoutLMv2ForQuestionAnswering"),fst.forEach(t),fIo=r(Aye," (LayoutLMv2 model)"),Aye.forEach(t),mIo=i(P),V5=n(P,"LI",{});var yye=s(V5);Sce=n(yye,"STRONG",{});var mst=s(Sce);gIo=r(mst,"led"),mst.forEach(t),hIo=r(yye," \u2014 "),pD=n(yye,"A",{href:!0});var gst=s(pD);pIo=r(gst,"LEDForQuestionAnswering"),gst.forEach(t),_Io=r(yye," (LED model)"),yye.forEach(t),uIo=i(P),X5=n(P,"LI",{});var Lye=s(X5);Rce=n(Lye,"STRONG",{});var hst=s(Rce);bIo=r(hst,"longformer"),hst.forEach(t),FIo=r(Lye," \u2014 "),_D=n(Lye,"A",{href:!0});var pst=s(_D);vIo=r(pst,"LongformerForQuestionAnswering"),pst.forEach(t),TIo=r(Lye," (Longformer model)"),Lye.forEach(t),MIo=i(P),z5=n(P,"LI",{});var xye=s(z5);Bce=n(xye,"STRONG",{});var _st=s(Bce);EIo=r(_st,"lxmert"),_st.forEach(t),CIo=r(xye," \u2014 "),uD=n(xye,"A",{href:!0});var ust=s(uD);wIo=r(ust,"LxmertForQuestionAnswering"),ust.forEach(t),AIo=r(xye," (LXMERT model)"),xye.forEach(t),yIo=i(P),Q5=n(P,"LI",{});var kye=s(Q5);Pce=n(kye,"STRONG",{});var bst=s(Pce);LIo=r(bst,"mbart"),bst.forEach(t),xIo=r(kye," \u2014 "),bD=n(kye,"A",{href:!0});var Fst=s(bD);kIo=r(Fst,"MBartForQuestionAnswering"),Fst.forEach(t),SIo=r(kye," (mBART model)"),kye.forEach(t),RIo=i(P),W5=n(P,"LI",{});var Sye=s(W5);$ce=n(Sye,"STRONG",{});var vst=s($ce);BIo=r(vst,"megatron-bert"),vst.forEach(t),PIo=r(Sye," \u2014 "),FD=n(Sye,"A",{href:!0});var Tst=s(FD);$Io=r(Tst,"MegatronBertForQuestionAnswering"),Tst.forEach(t),IIo=r(Sye," (MegatronBert model)"),Sye.forEach(t),qIo=i(P),H5=n(P,"LI",{});var Rye=s(H5);Ice=n(Rye,"STRONG",{});var Mst=s(Ice);NIo=r(Mst,"mobilebert"),Mst.forEach(t),jIo=r(Rye," \u2014 "),vD=n(Rye,"A",{href:!0});var Est=s(vD);DIo=r(Est,"MobileBertForQuestionAnswering"),Est.forEach(t),GIo=r(Rye," (MobileBERT model)"),Rye.forEach(t),OIo=i(P),U5=n(P,"LI",{});var Bye=s(U5);qce=n(Bye,"STRONG",{});var Cst=s(qce);VIo=r(Cst,"mpnet"),Cst.forEach(t),XIo=r(Bye," \u2014 "),TD=n(Bye,"A",{href:!0});var wst=s(TD);zIo=r(wst,"MPNetForQuestionAnswering"),wst.forEach(t),QIo=r(Bye," (MPNet model)"),Bye.forEach(t),WIo=i(P),J5=n(P,"LI",{});var Pye=s(J5);Nce=n(Pye,"STRONG",{});var Ast=s(Nce);HIo=r(Ast,"nystromformer"),Ast.forEach(t),UIo=r(Pye," \u2014 "),MD=n(Pye,"A",{href:!0});var yst=s(MD);JIo=r(yst,"NystromformerForQuestionAnswering"),yst.forEach(t),YIo=r(Pye," (Nystromformer model)"),Pye.forEach(t),KIo=i(P),Y5=n(P,"LI",{});var $ye=s(Y5);jce=n($ye,"STRONG",{});var Lst=s(jce);ZIo=r(Lst,"qdqbert"),Lst.forEach(t),eqo=r($ye," \u2014 "),ED=n($ye,"A",{href:!0});var xst=s(ED);oqo=r(xst,"QDQBertForQuestionAnswering"),xst.forEach(t),rqo=r($ye," (QDQBert model)"),$ye.forEach(t),tqo=i(P),K5=n(P,"LI",{});var Iye=s(K5);Dce=n(Iye,"STRONG",{});var kst=s(Dce);aqo=r(kst,"reformer"),kst.forEach(t),nqo=r(Iye," \u2014 "),CD=n(Iye,"A",{href:!0});var Sst=s(CD);sqo=r(Sst,"ReformerForQuestionAnswering"),Sst.forEach(t),lqo=r(Iye," (Reformer model)"),Iye.forEach(t),iqo=i(P),Z5=n(P,"LI",{});var qye=s(Z5);Gce=n(qye,"STRONG",{});var Rst=s(Gce);dqo=r(Rst,"rembert"),Rst.forEach(t),cqo=r(qye," \u2014 "),wD=n(qye,"A",{href:!0});var Bst=s(wD);fqo=r(Bst,"RemBertForQuestionAnswering"),Bst.forEach(t),mqo=r(qye," (RemBERT model)"),qye.forEach(t),gqo=i(P),e3=n(P,"LI",{});var Nye=s(e3);Oce=n(Nye,"STRONG",{});var Pst=s(Oce);hqo=r(Pst,"roberta"),Pst.forEach(t),pqo=r(Nye," \u2014 "),AD=n(Nye,"A",{href:!0});var $st=s(AD);_qo=r($st,"RobertaForQuestionAnswering"),$st.forEach(t),uqo=r(Nye," (RoBERTa model)"),Nye.forEach(t),bqo=i(P),o3=n(P,"LI",{});var jye=s(o3);Vce=n(jye,"STRONG",{});var Ist=s(Vce);Fqo=r(Ist,"roformer"),Ist.forEach(t),vqo=r(jye," \u2014 "),yD=n(jye,"A",{href:!0});var qst=s(yD);Tqo=r(qst,"RoFormerForQuestionAnswering"),qst.forEach(t),Mqo=r(jye," (RoFormer model)"),jye.forEach(t),Eqo=i(P),r3=n(P,"LI",{});var Dye=s(r3);Xce=n(Dye,"STRONG",{});var Nst=s(Xce);Cqo=r(Nst,"splinter"),Nst.forEach(t),wqo=r(Dye," \u2014 "),LD=n(Dye,"A",{href:!0});var jst=s(LD);Aqo=r(jst,"SplinterForQuestionAnswering"),jst.forEach(t),yqo=r(Dye," (Splinter model)"),Dye.forEach(t),Lqo=i(P),t3=n(P,"LI",{});var Gye=s(t3);zce=n(Gye,"STRONG",{});var Dst=s(zce);xqo=r(Dst,"squeezebert"),Dst.forEach(t),kqo=r(Gye," \u2014 "),xD=n(Gye,"A",{href:!0});var Gst=s(xD);Sqo=r(Gst,"SqueezeBertForQuestionAnswering"),Gst.forEach(t),Rqo=r(Gye," (SqueezeBERT model)"),Gye.forEach(t),Bqo=i(P),a3=n(P,"LI",{});var Oye=s(a3);Qce=n(Oye,"STRONG",{});var Ost=s(Qce);Pqo=r(Ost,"xlm"),Ost.forEach(t),$qo=r(Oye," \u2014 "),kD=n(Oye,"A",{href:!0});var Vst=s(kD);Iqo=r(Vst,"XLMForQuestionAnsweringSimple"),Vst.forEach(t),qqo=r(Oye," (XLM model)"),Oye.forEach(t),Nqo=i(P),n3=n(P,"LI",{});var Vye=s(n3);Wce=n(Vye,"STRONG",{});var Xst=s(Wce);jqo=r(Xst,"xlm-roberta"),Xst.forEach(t),Dqo=r(Vye," \u2014 "),SD=n(Vye,"A",{href:!0});var zst=s(SD);Gqo=r(zst,"XLMRobertaForQuestionAnswering"),zst.forEach(t),Oqo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),Vqo=i(P),s3=n(P,"LI",{});var Xye=s(s3);Hce=n(Xye,"STRONG",{});var Qst=s(Hce);Xqo=r(Qst,"xlm-roberta-xl"),Qst.forEach(t),zqo=r(Xye," \u2014 "),RD=n(Xye,"A",{href:!0});var Wst=s(RD);Qqo=r(Wst,"XLMRobertaXLForQuestionAnswering"),Wst.forEach(t),Wqo=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),Hqo=i(P),l3=n(P,"LI",{});var zye=s(l3);Uce=n(zye,"STRONG",{});var Hst=s(Uce);Uqo=r(Hst,"xlnet"),Hst.forEach(t),Jqo=r(zye," \u2014 "),BD=n(zye,"A",{href:!0});var Ust=s(BD);Yqo=r(Ust,"XLNetForQuestionAnsweringSimple"),Ust.forEach(t),Kqo=r(zye," (XLNet model)"),zye.forEach(t),Zqo=i(P),i3=n(P,"LI",{});var Qye=s(i3);Jce=n(Qye,"STRONG",{});var Jst=s(Jce);eNo=r(Jst,"yoso"),Jst.forEach(t),oNo=r(Qye," \u2014 "),PD=n(Qye,"A",{href:!0});var Yst=s(PD);rNo=r(Yst,"YosoForQuestionAnswering"),Yst.forEach(t),tNo=r(Qye," (YOSO model)"),Qye.forEach(t),P.forEach(t),aNo=i(Ut),d3=n(Ut,"P",{});var Wye=s(d3);nNo=r(Wye,"The model is set in evaluation mode by default using "),Yce=n(Wye,"CODE",{});var Kst=s(Yce);sNo=r(Kst,"model.eval()"),Kst.forEach(t),lNo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kce=n(Wye,"CODE",{});var Zst=s(Kce);iNo=r(Zst,"model.train()"),Zst.forEach(t),Wye.forEach(t),dNo=i(Ut),Zce=n(Ut,"P",{});var elt=s(Zce);cNo=r(elt,"Examples:"),elt.forEach(t),fNo=i(Ut),m(TA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),sBe=i(c),Ad=n(c,"H2",{class:!0});var p$e=s(Ad);c3=n(p$e,"A",{id:!0,class:!0,href:!0});var olt=s(c3);efe=n(olt,"SPAN",{});var rlt=s(efe);m(MA.$$.fragment,rlt),rlt.forEach(t),olt.forEach(t),mNo=i(p$e),ofe=n(p$e,"SPAN",{});var tlt=s(ofe);gNo=r(tlt,"AutoModelForTableQuestionAnswering"),tlt.forEach(t),p$e.forEach(t),lBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(EA.$$.fragment,gl),hNo=i(gl),yd=n(gl,"P",{});var qU=s(yd);pNo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$D=n(qU,"A",{href:!0});var alt=s($D);_No=r(alt,"from_pretrained()"),alt.forEach(t),uNo=r(qU," class method or the "),ID=n(qU,"A",{href:!0});var nlt=s(ID);bNo=r(nlt,"from_config()"),nlt.forEach(t),FNo=r(qU,` class
method.`),qU.forEach(t),vNo=i(gl),CA=n(gl,"P",{});var _$e=s(CA);TNo=r(_$e,"This class cannot be instantiated directly using "),rfe=n(_$e,"CODE",{});var slt=s(rfe);MNo=r(slt,"__init__()"),slt.forEach(t),ENo=r(_$e," (throws an error)."),_$e.forEach(t),CNo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(wA.$$.fragment,hl),wNo=i(hl),tfe=n(hl,"P",{});var llt=s(tfe);ANo=r(llt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),llt.forEach(t),yNo=i(hl),Ld=n(hl,"P",{});var NU=s(Ld);LNo=r(NU,`Note:
Loading a model from its configuration file does `),afe=n(NU,"STRONG",{});var ilt=s(afe);xNo=r(ilt,"not"),ilt.forEach(t),kNo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(NU,"A",{href:!0});var dlt=s(qD);SNo=r(dlt,"from_pretrained()"),dlt.forEach(t),RNo=r(NU," to load the model weights."),NU.forEach(t),BNo=i(hl),nfe=n(hl,"P",{});var clt=s(nfe);PNo=r(clt,"Examples:"),clt.forEach(t),$No=i(hl),m(AA.$$.fragment,hl),hl.forEach(t),INo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(yA.$$.fragment,Jt),qNo=i(Jt),sfe=n(Jt,"P",{});var flt=s(sfe);NNo=r(flt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),flt.forEach(t),jNo=i(Jt),en=n(Jt,"P",{});var DE=s(en);DNo=r(DE,"The model class to instantiate is selected based on the "),lfe=n(DE,"CODE",{});var mlt=s(lfe);GNo=r(mlt,"model_type"),mlt.forEach(t),ONo=r(DE,` property of the config object (either
passed as an argument or loaded from `),ife=n(DE,"CODE",{});var glt=s(ife);VNo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),XNo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(DE,"CODE",{});var hlt=s(dfe);zNo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),QNo=r(DE,":"),DE.forEach(t),WNo=i(Jt),cfe=n(Jt,"UL",{});var plt=s(cfe);f3=n(plt,"LI",{});var Hye=s(f3);ffe=n(Hye,"STRONG",{});var _lt=s(ffe);HNo=r(_lt,"tapas"),_lt.forEach(t),UNo=r(Hye," \u2014 "),ND=n(Hye,"A",{href:!0});var ult=s(ND);JNo=r(ult,"TapasForQuestionAnswering"),ult.forEach(t),YNo=r(Hye," (TAPAS model)"),Hye.forEach(t),plt.forEach(t),KNo=i(Jt),m3=n(Jt,"P",{});var Uye=s(m3);ZNo=r(Uye,"The model is set in evaluation mode by default using "),mfe=n(Uye,"CODE",{});var blt=s(mfe);ejo=r(blt,"model.eval()"),blt.forEach(t),ojo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(Uye,"CODE",{});var Flt=s(gfe);rjo=r(Flt,"model.train()"),Flt.forEach(t),Uye.forEach(t),tjo=i(Jt),hfe=n(Jt,"P",{});var vlt=s(hfe);ajo=r(vlt,"Examples:"),vlt.forEach(t),njo=i(Jt),m(LA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),iBe=i(c),xd=n(c,"H2",{class:!0});var u$e=s(xd);g3=n(u$e,"A",{id:!0,class:!0,href:!0});var Tlt=s(g3);pfe=n(Tlt,"SPAN",{});var Mlt=s(pfe);m(xA.$$.fragment,Mlt),Mlt.forEach(t),Tlt.forEach(t),sjo=i(u$e),_fe=n(u$e,"SPAN",{});var Elt=s(_fe);ljo=r(Elt,"AutoModelForImageClassification"),Elt.forEach(t),u$e.forEach(t),dBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(kA.$$.fragment,pl),ijo=i(pl),kd=n(pl,"P",{});var jU=s(kd);djo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jD=n(jU,"A",{href:!0});var Clt=s(jD);cjo=r(Clt,"from_pretrained()"),Clt.forEach(t),fjo=r(jU," class method or the "),DD=n(jU,"A",{href:!0});var wlt=s(DD);mjo=r(wlt,"from_config()"),wlt.forEach(t),gjo=r(jU,` class
method.`),jU.forEach(t),hjo=i(pl),SA=n(pl,"P",{});var b$e=s(SA);pjo=r(b$e,"This class cannot be instantiated directly using "),ufe=n(b$e,"CODE",{});var Alt=s(ufe);_jo=r(Alt,"__init__()"),Alt.forEach(t),ujo=r(b$e," (throws an error)."),b$e.forEach(t),bjo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(RA.$$.fragment,_l),Fjo=i(_l),bfe=n(_l,"P",{});var ylt=s(bfe);vjo=r(ylt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ylt.forEach(t),Tjo=i(_l),Sd=n(_l,"P",{});var DU=s(Sd);Mjo=r(DU,`Note:
Loading a model from its configuration file does `),Ffe=n(DU,"STRONG",{});var Llt=s(Ffe);Ejo=r(Llt,"not"),Llt.forEach(t),Cjo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(DU,"A",{href:!0});var xlt=s(GD);wjo=r(xlt,"from_pretrained()"),xlt.forEach(t),Ajo=r(DU," to load the model weights."),DU.forEach(t),yjo=i(_l),vfe=n(_l,"P",{});var klt=s(vfe);Ljo=r(klt,"Examples:"),klt.forEach(t),xjo=i(_l),m(BA.$$.fragment,_l),_l.forEach(t),kjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(PA.$$.fragment,Yt),Sjo=i(Yt),Tfe=n(Yt,"P",{});var Slt=s(Tfe);Rjo=r(Slt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Slt.forEach(t),Bjo=i(Yt),on=n(Yt,"P",{});var GE=s(on);Pjo=r(GE,"The model class to instantiate is selected based on the "),Mfe=n(GE,"CODE",{});var Rlt=s(Mfe);$jo=r(Rlt,"model_type"),Rlt.forEach(t),Ijo=r(GE,` property of the config object (either
passed as an argument or loaded from `),Efe=n(GE,"CODE",{});var Blt=s(Efe);qjo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),Njo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=n(GE,"CODE",{});var Plt=s(Cfe);jjo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),Djo=r(GE,":"),GE.forEach(t),Gjo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);h3=n(he,"LI",{});var Jye=s(h3);wfe=n(Jye,"STRONG",{});var $lt=s(wfe);Ojo=r($lt,"beit"),$lt.forEach(t),Vjo=r(Jye," \u2014 "),OD=n(Jye,"A",{href:!0});var Ilt=s(OD);Xjo=r(Ilt,"BeitForImageClassification"),Ilt.forEach(t),zjo=r(Jye," (BEiT model)"),Jye.forEach(t),Qjo=i(he),p3=n(he,"LI",{});var Yye=s(p3);Afe=n(Yye,"STRONG",{});var qlt=s(Afe);Wjo=r(qlt,"convnext"),qlt.forEach(t),Hjo=r(Yye," \u2014 "),VD=n(Yye,"A",{href:!0});var Nlt=s(VD);Ujo=r(Nlt,"ConvNextForImageClassification"),Nlt.forEach(t),Jjo=r(Yye," (ConvNext model)"),Yye.forEach(t),Yjo=i(he),Ds=n(he,"LI",{});var _9=s(Ds);yfe=n(_9,"STRONG",{});var jlt=s(yfe);Kjo=r(jlt,"deit"),jlt.forEach(t),Zjo=r(_9," \u2014 "),XD=n(_9,"A",{href:!0});var Dlt=s(XD);eDo=r(Dlt,"DeiTForImageClassification"),Dlt.forEach(t),oDo=r(_9," or "),zD=n(_9,"A",{href:!0});var Glt=s(zD);rDo=r(Glt,"DeiTForImageClassificationWithTeacher"),Glt.forEach(t),tDo=r(_9," (DeiT model)"),_9.forEach(t),aDo=i(he),_3=n(he,"LI",{});var Kye=s(_3);Lfe=n(Kye,"STRONG",{});var Olt=s(Lfe);nDo=r(Olt,"imagegpt"),Olt.forEach(t),sDo=r(Kye," \u2014 "),QD=n(Kye,"A",{href:!0});var Vlt=s(QD);lDo=r(Vlt,"ImageGPTForImageClassification"),Vlt.forEach(t),iDo=r(Kye," (ImageGPT model)"),Kye.forEach(t),dDo=i(he),ma=n(he,"LI",{});var $f=s(ma);xfe=n($f,"STRONG",{});var Xlt=s(xfe);cDo=r(Xlt,"perceiver"),Xlt.forEach(t),fDo=r($f," \u2014 "),WD=n($f,"A",{href:!0});var zlt=s(WD);mDo=r(zlt,"PerceiverForImageClassificationLearned"),zlt.forEach(t),gDo=r($f," or "),HD=n($f,"A",{href:!0});var Qlt=s(HD);hDo=r(Qlt,"PerceiverForImageClassificationFourier"),Qlt.forEach(t),pDo=r($f," or "),UD=n($f,"A",{href:!0});var Wlt=s(UD);_Do=r(Wlt,"PerceiverForImageClassificationConvProcessing"),Wlt.forEach(t),uDo=r($f," (Perceiver model)"),$f.forEach(t),bDo=i(he),u3=n(he,"LI",{});var Zye=s(u3);kfe=n(Zye,"STRONG",{});var Hlt=s(kfe);FDo=r(Hlt,"poolformer"),Hlt.forEach(t),vDo=r(Zye," \u2014 "),JD=n(Zye,"A",{href:!0});var Ult=s(JD);TDo=r(Ult,"PoolFormerForImageClassification"),Ult.forEach(t),MDo=r(Zye," (PoolFormer model)"),Zye.forEach(t),EDo=i(he),b3=n(he,"LI",{});var eLe=s(b3);Sfe=n(eLe,"STRONG",{});var Jlt=s(Sfe);CDo=r(Jlt,"regnet"),Jlt.forEach(t),wDo=r(eLe," \u2014 "),YD=n(eLe,"A",{href:!0});var Ylt=s(YD);ADo=r(Ylt,"RegNetForImageClassification"),Ylt.forEach(t),yDo=r(eLe," (RegNet model)"),eLe.forEach(t),LDo=i(he),F3=n(he,"LI",{});var oLe=s(F3);Rfe=n(oLe,"STRONG",{});var Klt=s(Rfe);xDo=r(Klt,"resnet"),Klt.forEach(t),kDo=r(oLe," \u2014 "),KD=n(oLe,"A",{href:!0});var Zlt=s(KD);SDo=r(Zlt,"ResNetForImageClassification"),Zlt.forEach(t),RDo=r(oLe," (ResNet model)"),oLe.forEach(t),BDo=i(he),v3=n(he,"LI",{});var rLe=s(v3);Bfe=n(rLe,"STRONG",{});var eit=s(Bfe);PDo=r(eit,"segformer"),eit.forEach(t),$Do=r(rLe," \u2014 "),ZD=n(rLe,"A",{href:!0});var oit=s(ZD);IDo=r(oit,"SegformerForImageClassification"),oit.forEach(t),qDo=r(rLe," (SegFormer model)"),rLe.forEach(t),NDo=i(he),T3=n(he,"LI",{});var tLe=s(T3);Pfe=n(tLe,"STRONG",{});var rit=s(Pfe);jDo=r(rit,"swin"),rit.forEach(t),DDo=r(tLe," \u2014 "),eG=n(tLe,"A",{href:!0});var tit=s(eG);GDo=r(tit,"SwinForImageClassification"),tit.forEach(t),ODo=r(tLe," (Swin model)"),tLe.forEach(t),VDo=i(he),M3=n(he,"LI",{});var aLe=s(M3);$fe=n(aLe,"STRONG",{});var ait=s($fe);XDo=r(ait,"van"),ait.forEach(t),zDo=r(aLe," \u2014 "),oG=n(aLe,"A",{href:!0});var nit=s(oG);QDo=r(nit,"VanForImageClassification"),nit.forEach(t),WDo=r(aLe," (VAN model)"),aLe.forEach(t),HDo=i(he),E3=n(he,"LI",{});var nLe=s(E3);Ife=n(nLe,"STRONG",{});var sit=s(Ife);UDo=r(sit,"vit"),sit.forEach(t),JDo=r(nLe," \u2014 "),rG=n(nLe,"A",{href:!0});var lit=s(rG);YDo=r(lit,"ViTForImageClassification"),lit.forEach(t),KDo=r(nLe," (ViT model)"),nLe.forEach(t),he.forEach(t),ZDo=i(Yt),C3=n(Yt,"P",{});var sLe=s(C3);eGo=r(sLe,"The model is set in evaluation mode by default using "),qfe=n(sLe,"CODE",{});var iit=s(qfe);oGo=r(iit,"model.eval()"),iit.forEach(t),rGo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(sLe,"CODE",{});var dit=s(Nfe);tGo=r(dit,"model.train()"),dit.forEach(t),sLe.forEach(t),aGo=i(Yt),jfe=n(Yt,"P",{});var cit=s(jfe);nGo=r(cit,"Examples:"),cit.forEach(t),sGo=i(Yt),m($A.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),cBe=i(c),Rd=n(c,"H2",{class:!0});var F$e=s(Rd);w3=n(F$e,"A",{id:!0,class:!0,href:!0});var fit=s(w3);Dfe=n(fit,"SPAN",{});var mit=s(Dfe);m(IA.$$.fragment,mit),mit.forEach(t),fit.forEach(t),lGo=i(F$e),Gfe=n(F$e,"SPAN",{});var git=s(Gfe);iGo=r(git,"AutoModelForVision2Seq"),git.forEach(t),F$e.forEach(t),fBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(qA.$$.fragment,ul),dGo=i(ul),Bd=n(ul,"P",{});var GU=s(Bd);cGo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tG=n(GU,"A",{href:!0});var hit=s(tG);fGo=r(hit,"from_pretrained()"),hit.forEach(t),mGo=r(GU," class method or the "),aG=n(GU,"A",{href:!0});var pit=s(aG);gGo=r(pit,"from_config()"),pit.forEach(t),hGo=r(GU,` class
method.`),GU.forEach(t),pGo=i(ul),NA=n(ul,"P",{});var v$e=s(NA);_Go=r(v$e,"This class cannot be instantiated directly using "),Ofe=n(v$e,"CODE",{});var _it=s(Ofe);uGo=r(_it,"__init__()"),_it.forEach(t),bGo=r(v$e," (throws an error)."),v$e.forEach(t),FGo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(jA.$$.fragment,bl),vGo=i(bl),Vfe=n(bl,"P",{});var uit=s(Vfe);TGo=r(uit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uit.forEach(t),MGo=i(bl),Pd=n(bl,"P",{});var OU=s(Pd);EGo=r(OU,`Note:
Loading a model from its configuration file does `),Xfe=n(OU,"STRONG",{});var bit=s(Xfe);CGo=r(bit,"not"),bit.forEach(t),wGo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(OU,"A",{href:!0});var Fit=s(nG);AGo=r(Fit,"from_pretrained()"),Fit.forEach(t),yGo=r(OU," to load the model weights."),OU.forEach(t),LGo=i(bl),zfe=n(bl,"P",{});var vit=s(zfe);xGo=r(vit,"Examples:"),vit.forEach(t),kGo=i(bl),m(DA.$$.fragment,bl),bl.forEach(t),SGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(GA.$$.fragment,Kt),RGo=i(Kt),Qfe=n(Kt,"P",{});var Tit=s(Qfe);BGo=r(Tit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tit.forEach(t),PGo=i(Kt),rn=n(Kt,"P",{});var OE=s(rn);$Go=r(OE,"The model class to instantiate is selected based on the "),Wfe=n(OE,"CODE",{});var Mit=s(Wfe);IGo=r(Mit,"model_type"),Mit.forEach(t),qGo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(OE,"CODE",{});var Eit=s(Hfe);NGo=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),jGo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(OE,"CODE",{});var Cit=s(Ufe);DGo=r(Cit,"pretrained_model_name_or_path"),Cit.forEach(t),GGo=r(OE,":"),OE.forEach(t),OGo=i(Kt),Jfe=n(Kt,"UL",{});var wit=s(Jfe);A3=n(wit,"LI",{});var lLe=s(A3);Yfe=n(lLe,"STRONG",{});var Ait=s(Yfe);VGo=r(Ait,"vision-encoder-decoder"),Ait.forEach(t),XGo=r(lLe," \u2014 "),sG=n(lLe,"A",{href:!0});var yit=s(sG);zGo=r(yit,"VisionEncoderDecoderModel"),yit.forEach(t),QGo=r(lLe," (Vision Encoder decoder model)"),lLe.forEach(t),wit.forEach(t),WGo=i(Kt),y3=n(Kt,"P",{});var iLe=s(y3);HGo=r(iLe,"The model is set in evaluation mode by default using "),Kfe=n(iLe,"CODE",{});var Lit=s(Kfe);UGo=r(Lit,"model.eval()"),Lit.forEach(t),JGo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(iLe,"CODE",{});var xit=s(Zfe);YGo=r(xit,"model.train()"),xit.forEach(t),iLe.forEach(t),KGo=i(Kt),eme=n(Kt,"P",{});var kit=s(eme);ZGo=r(kit,"Examples:"),kit.forEach(t),eOo=i(Kt),m(OA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),mBe=i(c),$d=n(c,"H2",{class:!0});var T$e=s($d);L3=n(T$e,"A",{id:!0,class:!0,href:!0});var Sit=s(L3);ome=n(Sit,"SPAN",{});var Rit=s(ome);m(VA.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),oOo=i(T$e),rme=n(T$e,"SPAN",{});var Bit=s(rme);rOo=r(Bit,"AutoModelForAudioClassification"),Bit.forEach(t),T$e.forEach(t),gBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(XA.$$.fragment,Fl),tOo=i(Fl),Id=n(Fl,"P",{});var VU=s(Id);aOo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lG=n(VU,"A",{href:!0});var Pit=s(lG);nOo=r(Pit,"from_pretrained()"),Pit.forEach(t),sOo=r(VU," class method or the "),iG=n(VU,"A",{href:!0});var $it=s(iG);lOo=r($it,"from_config()"),$it.forEach(t),iOo=r(VU,` class
method.`),VU.forEach(t),dOo=i(Fl),zA=n(Fl,"P",{});var M$e=s(zA);cOo=r(M$e,"This class cannot be instantiated directly using "),tme=n(M$e,"CODE",{});var Iit=s(tme);fOo=r(Iit,"__init__()"),Iit.forEach(t),mOo=r(M$e," (throws an error)."),M$e.forEach(t),gOo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(QA.$$.fragment,vl),hOo=i(vl),ame=n(vl,"P",{});var qit=s(ame);pOo=r(qit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qit.forEach(t),_Oo=i(vl),qd=n(vl,"P",{});var XU=s(qd);uOo=r(XU,`Note:
Loading a model from its configuration file does `),nme=n(XU,"STRONG",{});var Nit=s(nme);bOo=r(Nit,"not"),Nit.forEach(t),FOo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(XU,"A",{href:!0});var jit=s(dG);vOo=r(jit,"from_pretrained()"),jit.forEach(t),TOo=r(XU," to load the model weights."),XU.forEach(t),MOo=i(vl),sme=n(vl,"P",{});var Dit=s(sme);EOo=r(Dit,"Examples:"),Dit.forEach(t),COo=i(vl),m(WA.$$.fragment,vl),vl.forEach(t),wOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(HA.$$.fragment,Zt),AOo=i(Zt),lme=n(Zt,"P",{});var Git=s(lme);yOo=r(Git,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Git.forEach(t),LOo=i(Zt),tn=n(Zt,"P",{});var VE=s(tn);xOo=r(VE,"The model class to instantiate is selected based on the "),ime=n(VE,"CODE",{});var Oit=s(ime);kOo=r(Oit,"model_type"),Oit.forEach(t),SOo=r(VE,` property of the config object (either
passed as an argument or loaded from `),dme=n(VE,"CODE",{});var Vit=s(dme);ROo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),BOo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(VE,"CODE",{});var Xit=s(cme);POo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),$Oo=r(VE,":"),VE.forEach(t),IOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);x3=n(Do,"LI",{});var dLe=s(x3);fme=n(dLe,"STRONG",{});var zit=s(fme);qOo=r(zit,"data2vec-audio"),zit.forEach(t),NOo=r(dLe," \u2014 "),cG=n(dLe,"A",{href:!0});var Qit=s(cG);jOo=r(Qit,"Data2VecAudioForSequenceClassification"),Qit.forEach(t),DOo=r(dLe," (Data2VecAudio model)"),dLe.forEach(t),GOo=i(Do),k3=n(Do,"LI",{});var cLe=s(k3);mme=n(cLe,"STRONG",{});var Wit=s(mme);OOo=r(Wit,"hubert"),Wit.forEach(t),VOo=r(cLe," \u2014 "),fG=n(cLe,"A",{href:!0});var Hit=s(fG);XOo=r(Hit,"HubertForSequenceClassification"),Hit.forEach(t),zOo=r(cLe," (Hubert model)"),cLe.forEach(t),QOo=i(Do),S3=n(Do,"LI",{});var fLe=s(S3);gme=n(fLe,"STRONG",{});var Uit=s(gme);WOo=r(Uit,"sew"),Uit.forEach(t),HOo=r(fLe," \u2014 "),mG=n(fLe,"A",{href:!0});var Jit=s(mG);UOo=r(Jit,"SEWForSequenceClassification"),Jit.forEach(t),JOo=r(fLe," (SEW model)"),fLe.forEach(t),YOo=i(Do),R3=n(Do,"LI",{});var mLe=s(R3);hme=n(mLe,"STRONG",{});var Yit=s(hme);KOo=r(Yit,"sew-d"),Yit.forEach(t),ZOo=r(mLe," \u2014 "),gG=n(mLe,"A",{href:!0});var Kit=s(gG);eVo=r(Kit,"SEWDForSequenceClassification"),Kit.forEach(t),oVo=r(mLe," (SEW-D model)"),mLe.forEach(t),rVo=i(Do),B3=n(Do,"LI",{});var gLe=s(B3);pme=n(gLe,"STRONG",{});var Zit=s(pme);tVo=r(Zit,"unispeech"),Zit.forEach(t),aVo=r(gLe," \u2014 "),hG=n(gLe,"A",{href:!0});var edt=s(hG);nVo=r(edt,"UniSpeechForSequenceClassification"),edt.forEach(t),sVo=r(gLe," (UniSpeech model)"),gLe.forEach(t),lVo=i(Do),P3=n(Do,"LI",{});var hLe=s(P3);_me=n(hLe,"STRONG",{});var odt=s(_me);iVo=r(odt,"unispeech-sat"),odt.forEach(t),dVo=r(hLe," \u2014 "),pG=n(hLe,"A",{href:!0});var rdt=s(pG);cVo=r(rdt,"UniSpeechSatForSequenceClassification"),rdt.forEach(t),fVo=r(hLe," (UniSpeechSat model)"),hLe.forEach(t),mVo=i(Do),$3=n(Do,"LI",{});var pLe=s($3);ume=n(pLe,"STRONG",{});var tdt=s(ume);gVo=r(tdt,"wav2vec2"),tdt.forEach(t),hVo=r(pLe," \u2014 "),_G=n(pLe,"A",{href:!0});var adt=s(_G);pVo=r(adt,"Wav2Vec2ForSequenceClassification"),adt.forEach(t),_Vo=r(pLe," (Wav2Vec2 model)"),pLe.forEach(t),uVo=i(Do),I3=n(Do,"LI",{});var _Le=s(I3);bme=n(_Le,"STRONG",{});var ndt=s(bme);bVo=r(ndt,"wavlm"),ndt.forEach(t),FVo=r(_Le," \u2014 "),uG=n(_Le,"A",{href:!0});var sdt=s(uG);vVo=r(sdt,"WavLMForSequenceClassification"),sdt.forEach(t),TVo=r(_Le," (WavLM model)"),_Le.forEach(t),Do.forEach(t),MVo=i(Zt),q3=n(Zt,"P",{});var uLe=s(q3);EVo=r(uLe,"The model is set in evaluation mode by default using "),Fme=n(uLe,"CODE",{});var ldt=s(Fme);CVo=r(ldt,"model.eval()"),ldt.forEach(t),wVo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(uLe,"CODE",{});var idt=s(vme);AVo=r(idt,"model.train()"),idt.forEach(t),uLe.forEach(t),yVo=i(Zt),Tme=n(Zt,"P",{});var ddt=s(Tme);LVo=r(ddt,"Examples:"),ddt.forEach(t),xVo=i(Zt),m(UA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),hBe=i(c),Nd=n(c,"H2",{class:!0});var E$e=s(Nd);N3=n(E$e,"A",{id:!0,class:!0,href:!0});var cdt=s(N3);Mme=n(cdt,"SPAN",{});var fdt=s(Mme);m(JA.$$.fragment,fdt),fdt.forEach(t),cdt.forEach(t),kVo=i(E$e),Eme=n(E$e,"SPAN",{});var mdt=s(Eme);SVo=r(mdt,"AutoModelForAudioFrameClassification"),mdt.forEach(t),E$e.forEach(t),pBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(YA.$$.fragment,Tl),RVo=i(Tl),jd=n(Tl,"P",{});var zU=s(jd);BVo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bG=n(zU,"A",{href:!0});var gdt=s(bG);PVo=r(gdt,"from_pretrained()"),gdt.forEach(t),$Vo=r(zU," class method or the "),FG=n(zU,"A",{href:!0});var hdt=s(FG);IVo=r(hdt,"from_config()"),hdt.forEach(t),qVo=r(zU,` class
method.`),zU.forEach(t),NVo=i(Tl),KA=n(Tl,"P",{});var C$e=s(KA);jVo=r(C$e,"This class cannot be instantiated directly using "),Cme=n(C$e,"CODE",{});var pdt=s(Cme);DVo=r(pdt,"__init__()"),pdt.forEach(t),GVo=r(C$e," (throws an error)."),C$e.forEach(t),OVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(ZA.$$.fragment,Ml),VVo=i(Ml),wme=n(Ml,"P",{});var _dt=s(wme);XVo=r(_dt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_dt.forEach(t),zVo=i(Ml),Dd=n(Ml,"P",{});var QU=s(Dd);QVo=r(QU,`Note:
Loading a model from its configuration file does `),Ame=n(QU,"STRONG",{});var udt=s(Ame);WVo=r(udt,"not"),udt.forEach(t),HVo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(QU,"A",{href:!0});var bdt=s(vG);UVo=r(bdt,"from_pretrained()"),bdt.forEach(t),JVo=r(QU," to load the model weights."),QU.forEach(t),YVo=i(Ml),yme=n(Ml,"P",{});var Fdt=s(yme);KVo=r(Fdt,"Examples:"),Fdt.forEach(t),ZVo=i(Ml),m(e6.$$.fragment,Ml),Ml.forEach(t),eXo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(o6.$$.fragment,ea),oXo=i(ea),Lme=n(ea,"P",{});var vdt=s(Lme);rXo=r(vdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vdt.forEach(t),tXo=i(ea),an=n(ea,"P",{});var XE=s(an);aXo=r(XE,"The model class to instantiate is selected based on the "),xme=n(XE,"CODE",{});var Tdt=s(xme);nXo=r(Tdt,"model_type"),Tdt.forEach(t),sXo=r(XE,` property of the config object (either
passed as an argument or loaded from `),kme=n(XE,"CODE",{});var Mdt=s(kme);lXo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),iXo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(XE,"CODE",{});var Edt=s(Sme);dXo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),cXo=r(XE,":"),XE.forEach(t),fXo=i(ea),nn=n(ea,"UL",{});var zE=s(nn);j3=n(zE,"LI",{});var bLe=s(j3);Rme=n(bLe,"STRONG",{});var Cdt=s(Rme);mXo=r(Cdt,"data2vec-audio"),Cdt.forEach(t),gXo=r(bLe," \u2014 "),TG=n(bLe,"A",{href:!0});var wdt=s(TG);hXo=r(wdt,"Data2VecAudioForAudioFrameClassification"),wdt.forEach(t),pXo=r(bLe," (Data2VecAudio model)"),bLe.forEach(t),_Xo=i(zE),D3=n(zE,"LI",{});var FLe=s(D3);Bme=n(FLe,"STRONG",{});var Adt=s(Bme);uXo=r(Adt,"unispeech-sat"),Adt.forEach(t),bXo=r(FLe," \u2014 "),MG=n(FLe,"A",{href:!0});var ydt=s(MG);FXo=r(ydt,"UniSpeechSatForAudioFrameClassification"),ydt.forEach(t),vXo=r(FLe," (UniSpeechSat model)"),FLe.forEach(t),TXo=i(zE),G3=n(zE,"LI",{});var vLe=s(G3);Pme=n(vLe,"STRONG",{});var Ldt=s(Pme);MXo=r(Ldt,"wav2vec2"),Ldt.forEach(t),EXo=r(vLe," \u2014 "),EG=n(vLe,"A",{href:!0});var xdt=s(EG);CXo=r(xdt,"Wav2Vec2ForAudioFrameClassification"),xdt.forEach(t),wXo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),AXo=i(zE),O3=n(zE,"LI",{});var TLe=s(O3);$me=n(TLe,"STRONG",{});var kdt=s($me);yXo=r(kdt,"wavlm"),kdt.forEach(t),LXo=r(TLe," \u2014 "),CG=n(TLe,"A",{href:!0});var Sdt=s(CG);xXo=r(Sdt,"WavLMForAudioFrameClassification"),Sdt.forEach(t),kXo=r(TLe," (WavLM model)"),TLe.forEach(t),zE.forEach(t),SXo=i(ea),V3=n(ea,"P",{});var MLe=s(V3);RXo=r(MLe,"The model is set in evaluation mode by default using "),Ime=n(MLe,"CODE",{});var Rdt=s(Ime);BXo=r(Rdt,"model.eval()"),Rdt.forEach(t),PXo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(MLe,"CODE",{});var Bdt=s(qme);$Xo=r(Bdt,"model.train()"),Bdt.forEach(t),MLe.forEach(t),IXo=i(ea),Nme=n(ea,"P",{});var Pdt=s(Nme);qXo=r(Pdt,"Examples:"),Pdt.forEach(t),NXo=i(ea),m(r6.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),_Be=i(c),Gd=n(c,"H2",{class:!0});var w$e=s(Gd);X3=n(w$e,"A",{id:!0,class:!0,href:!0});var $dt=s(X3);jme=n($dt,"SPAN",{});var Idt=s(jme);m(t6.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),jXo=i(w$e),Dme=n(w$e,"SPAN",{});var qdt=s(Dme);DXo=r(qdt,"AutoModelForCTC"),qdt.forEach(t),w$e.forEach(t),uBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(a6.$$.fragment,El),GXo=i(El),Od=n(El,"P",{});var WU=s(Od);OXo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wG=n(WU,"A",{href:!0});var Ndt=s(wG);VXo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),XXo=r(WU," class method or the "),AG=n(WU,"A",{href:!0});var jdt=s(AG);zXo=r(jdt,"from_config()"),jdt.forEach(t),QXo=r(WU,` class
method.`),WU.forEach(t),WXo=i(El),n6=n(El,"P",{});var A$e=s(n6);HXo=r(A$e,"This class cannot be instantiated directly using "),Gme=n(A$e,"CODE",{});var Ddt=s(Gme);UXo=r(Ddt,"__init__()"),Ddt.forEach(t),JXo=r(A$e," (throws an error)."),A$e.forEach(t),YXo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(s6.$$.fragment,Cl),KXo=i(Cl),Ome=n(Cl,"P",{});var Gdt=s(Ome);ZXo=r(Gdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Gdt.forEach(t),ezo=i(Cl),Vd=n(Cl,"P",{});var HU=s(Vd);ozo=r(HU,`Note:
Loading a model from its configuration file does `),Vme=n(HU,"STRONG",{});var Odt=s(Vme);rzo=r(Odt,"not"),Odt.forEach(t),tzo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(HU,"A",{href:!0});var Vdt=s(yG);azo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),nzo=r(HU," to load the model weights."),HU.forEach(t),szo=i(Cl),Xme=n(Cl,"P",{});var Xdt=s(Xme);lzo=r(Xdt,"Examples:"),Xdt.forEach(t),izo=i(Cl),m(l6.$$.fragment,Cl),Cl.forEach(t),dzo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(i6.$$.fragment,oa),czo=i(oa),zme=n(oa,"P",{});var zdt=s(zme);fzo=r(zdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zdt.forEach(t),mzo=i(oa),sn=n(oa,"P",{});var QE=s(sn);gzo=r(QE,"The model class to instantiate is selected based on the "),Qme=n(QE,"CODE",{});var Qdt=s(Qme);hzo=r(Qdt,"model_type"),Qdt.forEach(t),pzo=r(QE,` property of the config object (either
passed as an argument or loaded from `),Wme=n(QE,"CODE",{});var Wdt=s(Wme);_zo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),uzo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(QE,"CODE",{});var Hdt=s(Hme);bzo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),Fzo=r(QE,":"),QE.forEach(t),vzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);z3=n(Go,"LI",{});var ELe=s(z3);Ume=n(ELe,"STRONG",{});var Udt=s(Ume);Tzo=r(Udt,"data2vec-audio"),Udt.forEach(t),Mzo=r(ELe," \u2014 "),LG=n(ELe,"A",{href:!0});var Jdt=s(LG);Ezo=r(Jdt,"Data2VecAudioForCTC"),Jdt.forEach(t),Czo=r(ELe," (Data2VecAudio model)"),ELe.forEach(t),wzo=i(Go),Q3=n(Go,"LI",{});var CLe=s(Q3);Jme=n(CLe,"STRONG",{});var Ydt=s(Jme);Azo=r(Ydt,"hubert"),Ydt.forEach(t),yzo=r(CLe," \u2014 "),xG=n(CLe,"A",{href:!0});var Kdt=s(xG);Lzo=r(Kdt,"HubertForCTC"),Kdt.forEach(t),xzo=r(CLe," (Hubert model)"),CLe.forEach(t),kzo=i(Go),W3=n(Go,"LI",{});var wLe=s(W3);Yme=n(wLe,"STRONG",{});var Zdt=s(Yme);Szo=r(Zdt,"sew"),Zdt.forEach(t),Rzo=r(wLe," \u2014 "),kG=n(wLe,"A",{href:!0});var ect=s(kG);Bzo=r(ect,"SEWForCTC"),ect.forEach(t),Pzo=r(wLe," (SEW model)"),wLe.forEach(t),$zo=i(Go),H3=n(Go,"LI",{});var ALe=s(H3);Kme=n(ALe,"STRONG",{});var oct=s(Kme);Izo=r(oct,"sew-d"),oct.forEach(t),qzo=r(ALe," \u2014 "),SG=n(ALe,"A",{href:!0});var rct=s(SG);Nzo=r(rct,"SEWDForCTC"),rct.forEach(t),jzo=r(ALe," (SEW-D model)"),ALe.forEach(t),Dzo=i(Go),U3=n(Go,"LI",{});var yLe=s(U3);Zme=n(yLe,"STRONG",{});var tct=s(Zme);Gzo=r(tct,"unispeech"),tct.forEach(t),Ozo=r(yLe," \u2014 "),RG=n(yLe,"A",{href:!0});var act=s(RG);Vzo=r(act,"UniSpeechForCTC"),act.forEach(t),Xzo=r(yLe," (UniSpeech model)"),yLe.forEach(t),zzo=i(Go),J3=n(Go,"LI",{});var LLe=s(J3);ege=n(LLe,"STRONG",{});var nct=s(ege);Qzo=r(nct,"unispeech-sat"),nct.forEach(t),Wzo=r(LLe," \u2014 "),BG=n(LLe,"A",{href:!0});var sct=s(BG);Hzo=r(sct,"UniSpeechSatForCTC"),sct.forEach(t),Uzo=r(LLe," (UniSpeechSat model)"),LLe.forEach(t),Jzo=i(Go),Y3=n(Go,"LI",{});var xLe=s(Y3);oge=n(xLe,"STRONG",{});var lct=s(oge);Yzo=r(lct,"wav2vec2"),lct.forEach(t),Kzo=r(xLe," \u2014 "),PG=n(xLe,"A",{href:!0});var ict=s(PG);Zzo=r(ict,"Wav2Vec2ForCTC"),ict.forEach(t),eQo=r(xLe," (Wav2Vec2 model)"),xLe.forEach(t),oQo=i(Go),K3=n(Go,"LI",{});var kLe=s(K3);rge=n(kLe,"STRONG",{});var dct=s(rge);rQo=r(dct,"wavlm"),dct.forEach(t),tQo=r(kLe," \u2014 "),$G=n(kLe,"A",{href:!0});var cct=s($G);aQo=r(cct,"WavLMForCTC"),cct.forEach(t),nQo=r(kLe," (WavLM model)"),kLe.forEach(t),Go.forEach(t),sQo=i(oa),Z3=n(oa,"P",{});var SLe=s(Z3);lQo=r(SLe,"The model is set in evaluation mode by default using "),tge=n(SLe,"CODE",{});var fct=s(tge);iQo=r(fct,"model.eval()"),fct.forEach(t),dQo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(SLe,"CODE",{});var mct=s(age);cQo=r(mct,"model.train()"),mct.forEach(t),SLe.forEach(t),fQo=i(oa),nge=n(oa,"P",{});var gct=s(nge);mQo=r(gct,"Examples:"),gct.forEach(t),gQo=i(oa),m(d6.$$.fragment,oa),oa.forEach(t),El.forEach(t),bBe=i(c),Xd=n(c,"H2",{class:!0});var y$e=s(Xd);e2=n(y$e,"A",{id:!0,class:!0,href:!0});var hct=s(e2);sge=n(hct,"SPAN",{});var pct=s(sge);m(c6.$$.fragment,pct),pct.forEach(t),hct.forEach(t),hQo=i(y$e),lge=n(y$e,"SPAN",{});var _ct=s(lge);pQo=r(_ct,"AutoModelForSpeechSeq2Seq"),_ct.forEach(t),y$e.forEach(t),FBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(f6.$$.fragment,wl),_Qo=i(wl),zd=n(wl,"P",{});var UU=s(zd);uQo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IG=n(UU,"A",{href:!0});var uct=s(IG);bQo=r(uct,"from_pretrained()"),uct.forEach(t),FQo=r(UU," class method or the "),qG=n(UU,"A",{href:!0});var bct=s(qG);vQo=r(bct,"from_config()"),bct.forEach(t),TQo=r(UU,` class
method.`),UU.forEach(t),MQo=i(wl),m6=n(wl,"P",{});var L$e=s(m6);EQo=r(L$e,"This class cannot be instantiated directly using "),ige=n(L$e,"CODE",{});var Fct=s(ige);CQo=r(Fct,"__init__()"),Fct.forEach(t),wQo=r(L$e," (throws an error)."),L$e.forEach(t),AQo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(g6.$$.fragment,Al),yQo=i(Al),dge=n(Al,"P",{});var vct=s(dge);LQo=r(vct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vct.forEach(t),xQo=i(Al),Qd=n(Al,"P",{});var JU=s(Qd);kQo=r(JU,`Note:
Loading a model from its configuration file does `),cge=n(JU,"STRONG",{});var Tct=s(cge);SQo=r(Tct,"not"),Tct.forEach(t),RQo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(JU,"A",{href:!0});var Mct=s(NG);BQo=r(Mct,"from_pretrained()"),Mct.forEach(t),PQo=r(JU," to load the model weights."),JU.forEach(t),$Qo=i(Al),fge=n(Al,"P",{});var Ect=s(fge);IQo=r(Ect,"Examples:"),Ect.forEach(t),qQo=i(Al),m(h6.$$.fragment,Al),Al.forEach(t),NQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(p6.$$.fragment,ra),jQo=i(ra),mge=n(ra,"P",{});var Cct=s(mge);DQo=r(Cct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cct.forEach(t),GQo=i(ra),ln=n(ra,"P",{});var WE=s(ln);OQo=r(WE,"The model class to instantiate is selected based on the "),gge=n(WE,"CODE",{});var wct=s(gge);VQo=r(wct,"model_type"),wct.forEach(t),XQo=r(WE,` property of the config object (either
passed as an argument or loaded from `),hge=n(WE,"CODE",{});var Act=s(hge);zQo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),QQo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(WE,"CODE",{});var yct=s(pge);WQo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),HQo=r(WE,":"),WE.forEach(t),UQo=i(ra),_6=n(ra,"UL",{});var x$e=s(_6);o2=n(x$e,"LI",{});var RLe=s(o2);_ge=n(RLe,"STRONG",{});var Lct=s(_ge);JQo=r(Lct,"speech-encoder-decoder"),Lct.forEach(t),YQo=r(RLe," \u2014 "),jG=n(RLe,"A",{href:!0});var xct=s(jG);KQo=r(xct,"SpeechEncoderDecoderModel"),xct.forEach(t),ZQo=r(RLe," (Speech Encoder decoder model)"),RLe.forEach(t),eWo=i(x$e),r2=n(x$e,"LI",{});var BLe=s(r2);uge=n(BLe,"STRONG",{});var kct=s(uge);oWo=r(kct,"speech_to_text"),kct.forEach(t),rWo=r(BLe," \u2014 "),DG=n(BLe,"A",{href:!0});var Sct=s(DG);tWo=r(Sct,"Speech2TextForConditionalGeneration"),Sct.forEach(t),aWo=r(BLe," (Speech2Text model)"),BLe.forEach(t),x$e.forEach(t),nWo=i(ra),t2=n(ra,"P",{});var PLe=s(t2);sWo=r(PLe,"The model is set in evaluation mode by default using "),bge=n(PLe,"CODE",{});var Rct=s(bge);lWo=r(Rct,"model.eval()"),Rct.forEach(t),iWo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=n(PLe,"CODE",{});var Bct=s(Fge);dWo=r(Bct,"model.train()"),Bct.forEach(t),PLe.forEach(t),cWo=i(ra),vge=n(ra,"P",{});var Pct=s(vge);fWo=r(Pct,"Examples:"),Pct.forEach(t),mWo=i(ra),m(u6.$$.fragment,ra),ra.forEach(t),wl.forEach(t),vBe=i(c),Wd=n(c,"H2",{class:!0});var k$e=s(Wd);a2=n(k$e,"A",{id:!0,class:!0,href:!0});var $ct=s(a2);Tge=n($ct,"SPAN",{});var Ict=s(Tge);m(b6.$$.fragment,Ict),Ict.forEach(t),$ct.forEach(t),gWo=i(k$e),Mge=n(k$e,"SPAN",{});var qct=s(Mge);hWo=r(qct,"AutoModelForAudioXVector"),qct.forEach(t),k$e.forEach(t),TBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(F6.$$.fragment,yl),pWo=i(yl),Hd=n(yl,"P",{});var YU=s(Hd);_Wo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GG=n(YU,"A",{href:!0});var Nct=s(GG);uWo=r(Nct,"from_pretrained()"),Nct.forEach(t),bWo=r(YU," class method or the "),OG=n(YU,"A",{href:!0});var jct=s(OG);FWo=r(jct,"from_config()"),jct.forEach(t),vWo=r(YU,` class
method.`),YU.forEach(t),TWo=i(yl),v6=n(yl,"P",{});var S$e=s(v6);MWo=r(S$e,"This class cannot be instantiated directly using "),Ege=n(S$e,"CODE",{});var Dct=s(Ege);EWo=r(Dct,"__init__()"),Dct.forEach(t),CWo=r(S$e," (throws an error)."),S$e.forEach(t),wWo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(T6.$$.fragment,Ll),AWo=i(Ll),Cge=n(Ll,"P",{});var Gct=s(Cge);yWo=r(Gct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Gct.forEach(t),LWo=i(Ll),Ud=n(Ll,"P",{});var KU=s(Ud);xWo=r(KU,`Note:
Loading a model from its configuration file does `),wge=n(KU,"STRONG",{});var Oct=s(wge);kWo=r(Oct,"not"),Oct.forEach(t),SWo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(KU,"A",{href:!0});var Vct=s(VG);RWo=r(Vct,"from_pretrained()"),Vct.forEach(t),BWo=r(KU," to load the model weights."),KU.forEach(t),PWo=i(Ll),Age=n(Ll,"P",{});var Xct=s(Age);$Wo=r(Xct,"Examples:"),Xct.forEach(t),IWo=i(Ll),m(M6.$$.fragment,Ll),Ll.forEach(t),qWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(E6.$$.fragment,ta),NWo=i(ta),yge=n(ta,"P",{});var zct=s(yge);jWo=r(zct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zct.forEach(t),DWo=i(ta),dn=n(ta,"P",{});var HE=s(dn);GWo=r(HE,"The model class to instantiate is selected based on the "),Lge=n(HE,"CODE",{});var Qct=s(Lge);OWo=r(Qct,"model_type"),Qct.forEach(t),VWo=r(HE,` property of the config object (either
passed as an argument or loaded from `),xge=n(HE,"CODE",{});var Wct=s(xge);XWo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),zWo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(HE,"CODE",{});var Hct=s(kge);QWo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),WWo=r(HE,":"),HE.forEach(t),HWo=i(ta),cn=n(ta,"UL",{});var UE=s(cn);n2=n(UE,"LI",{});var $Le=s(n2);Sge=n($Le,"STRONG",{});var Uct=s(Sge);UWo=r(Uct,"data2vec-audio"),Uct.forEach(t),JWo=r($Le," \u2014 "),XG=n($Le,"A",{href:!0});var Jct=s(XG);YWo=r(Jct,"Data2VecAudioForXVector"),Jct.forEach(t),KWo=r($Le," (Data2VecAudio model)"),$Le.forEach(t),ZWo=i(UE),s2=n(UE,"LI",{});var ILe=s(s2);Rge=n(ILe,"STRONG",{});var Yct=s(Rge);eHo=r(Yct,"unispeech-sat"),Yct.forEach(t),oHo=r(ILe," \u2014 "),zG=n(ILe,"A",{href:!0});var Kct=s(zG);rHo=r(Kct,"UniSpeechSatForXVector"),Kct.forEach(t),tHo=r(ILe," (UniSpeechSat model)"),ILe.forEach(t),aHo=i(UE),l2=n(UE,"LI",{});var qLe=s(l2);Bge=n(qLe,"STRONG",{});var Zct=s(Bge);nHo=r(Zct,"wav2vec2"),Zct.forEach(t),sHo=r(qLe," \u2014 "),QG=n(qLe,"A",{href:!0});var eft=s(QG);lHo=r(eft,"Wav2Vec2ForXVector"),eft.forEach(t),iHo=r(qLe," (Wav2Vec2 model)"),qLe.forEach(t),dHo=i(UE),i2=n(UE,"LI",{});var NLe=s(i2);Pge=n(NLe,"STRONG",{});var oft=s(Pge);cHo=r(oft,"wavlm"),oft.forEach(t),fHo=r(NLe," \u2014 "),WG=n(NLe,"A",{href:!0});var rft=s(WG);mHo=r(rft,"WavLMForXVector"),rft.forEach(t),gHo=r(NLe," (WavLM model)"),NLe.forEach(t),UE.forEach(t),hHo=i(ta),d2=n(ta,"P",{});var jLe=s(d2);pHo=r(jLe,"The model is set in evaluation mode by default using "),$ge=n(jLe,"CODE",{});var tft=s($ge);_Ho=r(tft,"model.eval()"),tft.forEach(t),uHo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(jLe,"CODE",{});var aft=s(Ige);bHo=r(aft,"model.train()"),aft.forEach(t),jLe.forEach(t),FHo=i(ta),qge=n(ta,"P",{});var nft=s(qge);vHo=r(nft,"Examples:"),nft.forEach(t),THo=i(ta),m(C6.$$.fragment,ta),ta.forEach(t),yl.forEach(t),MBe=i(c),Jd=n(c,"H2",{class:!0});var R$e=s(Jd);c2=n(R$e,"A",{id:!0,class:!0,href:!0});var sft=s(c2);Nge=n(sft,"SPAN",{});var lft=s(Nge);m(w6.$$.fragment,lft),lft.forEach(t),sft.forEach(t),MHo=i(R$e),jge=n(R$e,"SPAN",{});var ift=s(jge);EHo=r(ift,"AutoModelForMaskedImageModeling"),ift.forEach(t),R$e.forEach(t),EBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(A6.$$.fragment,xl),CHo=i(xl),Yd=n(xl,"P",{});var ZU=s(Yd);wHo=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HG=n(ZU,"A",{href:!0});var dft=s(HG);AHo=r(dft,"from_pretrained()"),dft.forEach(t),yHo=r(ZU," class method or the "),UG=n(ZU,"A",{href:!0});var cft=s(UG);LHo=r(cft,"from_config()"),cft.forEach(t),xHo=r(ZU,` class
method.`),ZU.forEach(t),kHo=i(xl),y6=n(xl,"P",{});var B$e=s(y6);SHo=r(B$e,"This class cannot be instantiated directly using "),Dge=n(B$e,"CODE",{});var fft=s(Dge);RHo=r(fft,"__init__()"),fft.forEach(t),BHo=r(B$e," (throws an error)."),B$e.forEach(t),PHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(L6.$$.fragment,kl),$Ho=i(kl),Gge=n(kl,"P",{});var mft=s(Gge);IHo=r(mft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mft.forEach(t),qHo=i(kl),Kd=n(kl,"P",{});var eJ=s(Kd);NHo=r(eJ,`Note:
Loading a model from its configuration file does `),Oge=n(eJ,"STRONG",{});var gft=s(Oge);jHo=r(gft,"not"),gft.forEach(t),DHo=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(eJ,"A",{href:!0});var hft=s(JG);GHo=r(hft,"from_pretrained()"),hft.forEach(t),OHo=r(eJ," to load the model weights."),eJ.forEach(t),VHo=i(kl),Vge=n(kl,"P",{});var pft=s(Vge);XHo=r(pft,"Examples:"),pft.forEach(t),zHo=i(kl),m(x6.$$.fragment,kl),kl.forEach(t),QHo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(k6.$$.fragment,aa),WHo=i(aa),Xge=n(aa,"P",{});var _ft=s(Xge);HHo=r(_ft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_ft.forEach(t),UHo=i(aa),fn=n(aa,"P",{});var JE=s(fn);JHo=r(JE,"The model class to instantiate is selected based on the "),zge=n(JE,"CODE",{});var uft=s(zge);YHo=r(uft,"model_type"),uft.forEach(t),KHo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Qge=n(JE,"CODE",{});var bft=s(Qge);ZHo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),eUo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(JE,"CODE",{});var Fft=s(Wge);oUo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),rUo=r(JE,":"),JE.forEach(t),tUo=i(aa),Zd=n(aa,"UL",{});var oJ=s(Zd);f2=n(oJ,"LI",{});var DLe=s(f2);Hge=n(DLe,"STRONG",{});var vft=s(Hge);aUo=r(vft,"deit"),vft.forEach(t),nUo=r(DLe," \u2014 "),YG=n(DLe,"A",{href:!0});var Tft=s(YG);sUo=r(Tft,"DeiTForMaskedImageModeling"),Tft.forEach(t),lUo=r(DLe," (DeiT model)"),DLe.forEach(t),iUo=i(oJ),m2=n(oJ,"LI",{});var GLe=s(m2);Uge=n(GLe,"STRONG",{});var Mft=s(Uge);dUo=r(Mft,"swin"),Mft.forEach(t),cUo=r(GLe," \u2014 "),KG=n(GLe,"A",{href:!0});var Eft=s(KG);fUo=r(Eft,"SwinForMaskedImageModeling"),Eft.forEach(t),mUo=r(GLe," (Swin model)"),GLe.forEach(t),gUo=i(oJ),g2=n(oJ,"LI",{});var OLe=s(g2);Jge=n(OLe,"STRONG",{});var Cft=s(Jge);hUo=r(Cft,"vit"),Cft.forEach(t),pUo=r(OLe," \u2014 "),ZG=n(OLe,"A",{href:!0});var wft=s(ZG);_Uo=r(wft,"ViTForMaskedImageModeling"),wft.forEach(t),uUo=r(OLe," (ViT model)"),OLe.forEach(t),oJ.forEach(t),bUo=i(aa),h2=n(aa,"P",{});var VLe=s(h2);FUo=r(VLe,"The model is set in evaluation mode by default using "),Yge=n(VLe,"CODE",{});var Aft=s(Yge);vUo=r(Aft,"model.eval()"),Aft.forEach(t),TUo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(VLe,"CODE",{});var yft=s(Kge);MUo=r(yft,"model.train()"),yft.forEach(t),VLe.forEach(t),EUo=i(aa),Zge=n(aa,"P",{});var Lft=s(Zge);CUo=r(Lft,"Examples:"),Lft.forEach(t),wUo=i(aa),m(S6.$$.fragment,aa),aa.forEach(t),xl.forEach(t),CBe=i(c),ec=n(c,"H2",{class:!0});var P$e=s(ec);p2=n(P$e,"A",{id:!0,class:!0,href:!0});var xft=s(p2);ehe=n(xft,"SPAN",{});var kft=s(ehe);m(R6.$$.fragment,kft),kft.forEach(t),xft.forEach(t),AUo=i(P$e),ohe=n(P$e,"SPAN",{});var Sft=s(ohe);yUo=r(Sft,"AutoModelForObjectDetection"),Sft.forEach(t),P$e.forEach(t),wBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(B6.$$.fragment,Sl),LUo=i(Sl),oc=n(Sl,"P",{});var rJ=s(oc);xUo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eO=n(rJ,"A",{href:!0});var Rft=s(eO);kUo=r(Rft,"from_pretrained()"),Rft.forEach(t),SUo=r(rJ," class method or the "),oO=n(rJ,"A",{href:!0});var Bft=s(oO);RUo=r(Bft,"from_config()"),Bft.forEach(t),BUo=r(rJ,` class
method.`),rJ.forEach(t),PUo=i(Sl),P6=n(Sl,"P",{});var $$e=s(P6);$Uo=r($$e,"This class cannot be instantiated directly using "),rhe=n($$e,"CODE",{});var Pft=s(rhe);IUo=r(Pft,"__init__()"),Pft.forEach(t),qUo=r($$e," (throws an error)."),$$e.forEach(t),NUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m($6.$$.fragment,Rl),jUo=i(Rl),the=n(Rl,"P",{});var $ft=s(the);DUo=r($ft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$ft.forEach(t),GUo=i(Rl),rc=n(Rl,"P",{});var tJ=s(rc);OUo=r(tJ,`Note:
Loading a model from its configuration file does `),ahe=n(tJ,"STRONG",{});var Ift=s(ahe);VUo=r(Ift,"not"),Ift.forEach(t),XUo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(tJ,"A",{href:!0});var qft=s(rO);zUo=r(qft,"from_pretrained()"),qft.forEach(t),QUo=r(tJ," to load the model weights."),tJ.forEach(t),WUo=i(Rl),nhe=n(Rl,"P",{});var Nft=s(nhe);HUo=r(Nft,"Examples:"),Nft.forEach(t),UUo=i(Rl),m(I6.$$.fragment,Rl),Rl.forEach(t),JUo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(q6.$$.fragment,na),YUo=i(na),she=n(na,"P",{});var jft=s(she);KUo=r(jft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jft.forEach(t),ZUo=i(na),mn=n(na,"P",{});var YE=s(mn);eJo=r(YE,"The model class to instantiate is selected based on the "),lhe=n(YE,"CODE",{});var Dft=s(lhe);oJo=r(Dft,"model_type"),Dft.forEach(t),rJo=r(YE,` property of the config object (either
passed as an argument or loaded from `),ihe=n(YE,"CODE",{});var Gft=s(ihe);tJo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),aJo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(YE,"CODE",{});var Oft=s(dhe);nJo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),sJo=r(YE,":"),YE.forEach(t),lJo=i(na),che=n(na,"UL",{});var Vft=s(che);_2=n(Vft,"LI",{});var XLe=s(_2);fhe=n(XLe,"STRONG",{});var Xft=s(fhe);iJo=r(Xft,"detr"),Xft.forEach(t),dJo=r(XLe," \u2014 "),tO=n(XLe,"A",{href:!0});var zft=s(tO);cJo=r(zft,"DetrForObjectDetection"),zft.forEach(t),fJo=r(XLe," (DETR model)"),XLe.forEach(t),Vft.forEach(t),mJo=i(na),u2=n(na,"P",{});var zLe=s(u2);gJo=r(zLe,"The model is set in evaluation mode by default using "),mhe=n(zLe,"CODE",{});var Qft=s(mhe);hJo=r(Qft,"model.eval()"),Qft.forEach(t),pJo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(zLe,"CODE",{});var Wft=s(ghe);_Jo=r(Wft,"model.train()"),Wft.forEach(t),zLe.forEach(t),uJo=i(na),hhe=n(na,"P",{});var Hft=s(hhe);bJo=r(Hft,"Examples:"),Hft.forEach(t),FJo=i(na),m(N6.$$.fragment,na),na.forEach(t),Sl.forEach(t),ABe=i(c),tc=n(c,"H2",{class:!0});var I$e=s(tc);b2=n(I$e,"A",{id:!0,class:!0,href:!0});var Uft=s(b2);phe=n(Uft,"SPAN",{});var Jft=s(phe);m(j6.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),vJo=i(I$e),_he=n(I$e,"SPAN",{});var Yft=s(_he);TJo=r(Yft,"AutoModelForImageSegmentation"),Yft.forEach(t),I$e.forEach(t),yBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(D6.$$.fragment,Bl),MJo=i(Bl),ac=n(Bl,"P",{});var aJ=s(ac);EJo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aO=n(aJ,"A",{href:!0});var Kft=s(aO);CJo=r(Kft,"from_pretrained()"),Kft.forEach(t),wJo=r(aJ," class method or the "),nO=n(aJ,"A",{href:!0});var Zft=s(nO);AJo=r(Zft,"from_config()"),Zft.forEach(t),yJo=r(aJ,` class
method.`),aJ.forEach(t),LJo=i(Bl),G6=n(Bl,"P",{});var q$e=s(G6);xJo=r(q$e,"This class cannot be instantiated directly using "),uhe=n(q$e,"CODE",{});var emt=s(uhe);kJo=r(emt,"__init__()"),emt.forEach(t),SJo=r(q$e," (throws an error)."),q$e.forEach(t),RJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(O6.$$.fragment,Pl),BJo=i(Pl),bhe=n(Pl,"P",{});var omt=s(bhe);PJo=r(omt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),omt.forEach(t),$Jo=i(Pl),nc=n(Pl,"P",{});var nJ=s(nc);IJo=r(nJ,`Note:
Loading a model from its configuration file does `),Fhe=n(nJ,"STRONG",{});var rmt=s(Fhe);qJo=r(rmt,"not"),rmt.forEach(t),NJo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(nJ,"A",{href:!0});var tmt=s(sO);jJo=r(tmt,"from_pretrained()"),tmt.forEach(t),DJo=r(nJ," to load the model weights."),nJ.forEach(t),GJo=i(Pl),vhe=n(Pl,"P",{});var amt=s(vhe);OJo=r(amt,"Examples:"),amt.forEach(t),VJo=i(Pl),m(V6.$$.fragment,Pl),Pl.forEach(t),XJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(X6.$$.fragment,sa),zJo=i(sa),The=n(sa,"P",{});var nmt=s(The);QJo=r(nmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nmt.forEach(t),WJo=i(sa),gn=n(sa,"P",{});var KE=s(gn);HJo=r(KE,"The model class to instantiate is selected based on the "),Mhe=n(KE,"CODE",{});var smt=s(Mhe);UJo=r(smt,"model_type"),smt.forEach(t),JJo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(KE,"CODE",{});var lmt=s(Ehe);YJo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),KJo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(KE,"CODE",{});var imt=s(Che);ZJo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),eYo=r(KE,":"),KE.forEach(t),oYo=i(sa),whe=n(sa,"UL",{});var dmt=s(whe);F2=n(dmt,"LI",{});var QLe=s(F2);Ahe=n(QLe,"STRONG",{});var cmt=s(Ahe);rYo=r(cmt,"detr"),cmt.forEach(t),tYo=r(QLe," \u2014 "),lO=n(QLe,"A",{href:!0});var fmt=s(lO);aYo=r(fmt,"DetrForSegmentation"),fmt.forEach(t),nYo=r(QLe," (DETR model)"),QLe.forEach(t),dmt.forEach(t),sYo=i(sa),v2=n(sa,"P",{});var WLe=s(v2);lYo=r(WLe,"The model is set in evaluation mode by default using "),yhe=n(WLe,"CODE",{});var mmt=s(yhe);iYo=r(mmt,"model.eval()"),mmt.forEach(t),dYo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(WLe,"CODE",{});var gmt=s(Lhe);cYo=r(gmt,"model.train()"),gmt.forEach(t),WLe.forEach(t),fYo=i(sa),xhe=n(sa,"P",{});var hmt=s(xhe);mYo=r(hmt,"Examples:"),hmt.forEach(t),gYo=i(sa),m(z6.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),LBe=i(c),sc=n(c,"H2",{class:!0});var N$e=s(sc);T2=n(N$e,"A",{id:!0,class:!0,href:!0});var pmt=s(T2);khe=n(pmt,"SPAN",{});var _mt=s(khe);m(Q6.$$.fragment,_mt),_mt.forEach(t),pmt.forEach(t),hYo=i(N$e),She=n(N$e,"SPAN",{});var umt=s(She);pYo=r(umt,"AutoModelForSemanticSegmentation"),umt.forEach(t),N$e.forEach(t),xBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(W6.$$.fragment,$l),_Yo=i($l),lc=n($l,"P",{});var sJ=s(lc);uYo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iO=n(sJ,"A",{href:!0});var bmt=s(iO);bYo=r(bmt,"from_pretrained()"),bmt.forEach(t),FYo=r(sJ," class method or the "),dO=n(sJ,"A",{href:!0});var Fmt=s(dO);vYo=r(Fmt,"from_config()"),Fmt.forEach(t),TYo=r(sJ,` class
method.`),sJ.forEach(t),MYo=i($l),H6=n($l,"P",{});var j$e=s(H6);EYo=r(j$e,"This class cannot be instantiated directly using "),Rhe=n(j$e,"CODE",{});var vmt=s(Rhe);CYo=r(vmt,"__init__()"),vmt.forEach(t),wYo=r(j$e," (throws an error)."),j$e.forEach(t),AYo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(U6.$$.fragment,Il),yYo=i(Il),Bhe=n(Il,"P",{});var Tmt=s(Bhe);LYo=r(Tmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tmt.forEach(t),xYo=i(Il),ic=n(Il,"P",{});var lJ=s(ic);kYo=r(lJ,`Note:
Loading a model from its configuration file does `),Phe=n(lJ,"STRONG",{});var Mmt=s(Phe);SYo=r(Mmt,"not"),Mmt.forEach(t),RYo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(lJ,"A",{href:!0});var Emt=s(cO);BYo=r(Emt,"from_pretrained()"),Emt.forEach(t),PYo=r(lJ," to load the model weights."),lJ.forEach(t),$Yo=i(Il),$he=n(Il,"P",{});var Cmt=s($he);IYo=r(Cmt,"Examples:"),Cmt.forEach(t),qYo=i(Il),m(J6.$$.fragment,Il),Il.forEach(t),NYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Y6.$$.fragment,la),jYo=i(la),Ihe=n(la,"P",{});var wmt=s(Ihe);DYo=r(wmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wmt.forEach(t),GYo=i(la),hn=n(la,"P",{});var ZE=s(hn);OYo=r(ZE,"The model class to instantiate is selected based on the "),qhe=n(ZE,"CODE",{});var Amt=s(qhe);VYo=r(Amt,"model_type"),Amt.forEach(t),XYo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(ZE,"CODE",{});var ymt=s(Nhe);zYo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),QYo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(ZE,"CODE",{});var Lmt=s(jhe);WYo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),HYo=r(ZE,":"),ZE.forEach(t),UYo=i(la),dc=n(la,"UL",{});var iJ=s(dc);M2=n(iJ,"LI",{});var HLe=s(M2);Dhe=n(HLe,"STRONG",{});var xmt=s(Dhe);JYo=r(xmt,"beit"),xmt.forEach(t),YYo=r(HLe," \u2014 "),fO=n(HLe,"A",{href:!0});var kmt=s(fO);KYo=r(kmt,"BeitForSemanticSegmentation"),kmt.forEach(t),ZYo=r(HLe," (BEiT model)"),HLe.forEach(t),eKo=i(iJ),E2=n(iJ,"LI",{});var ULe=s(E2);Ghe=n(ULe,"STRONG",{});var Smt=s(Ghe);oKo=r(Smt,"dpt"),Smt.forEach(t),rKo=r(ULe," \u2014 "),mO=n(ULe,"A",{href:!0});var Rmt=s(mO);tKo=r(Rmt,"DPTForSemanticSegmentation"),Rmt.forEach(t),aKo=r(ULe," (DPT model)"),ULe.forEach(t),nKo=i(iJ),C2=n(iJ,"LI",{});var JLe=s(C2);Ohe=n(JLe,"STRONG",{});var Bmt=s(Ohe);sKo=r(Bmt,"segformer"),Bmt.forEach(t),lKo=r(JLe," \u2014 "),gO=n(JLe,"A",{href:!0});var Pmt=s(gO);iKo=r(Pmt,"SegformerForSemanticSegmentation"),Pmt.forEach(t),dKo=r(JLe," (SegFormer model)"),JLe.forEach(t),iJ.forEach(t),cKo=i(la),w2=n(la,"P",{});var YLe=s(w2);fKo=r(YLe,"The model is set in evaluation mode by default using "),Vhe=n(YLe,"CODE",{});var $mt=s(Vhe);mKo=r($mt,"model.eval()"),$mt.forEach(t),gKo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(YLe,"CODE",{});var Imt=s(Xhe);hKo=r(Imt,"model.train()"),Imt.forEach(t),YLe.forEach(t),pKo=i(la),zhe=n(la,"P",{});var qmt=s(zhe);_Ko=r(qmt,"Examples:"),qmt.forEach(t),uKo=i(la),m(K6.$$.fragment,la),la.forEach(t),$l.forEach(t),kBe=i(c),cc=n(c,"H2",{class:!0});var D$e=s(cc);A2=n(D$e,"A",{id:!0,class:!0,href:!0});var Nmt=s(A2);Qhe=n(Nmt,"SPAN",{});var jmt=s(Qhe);m(Z6.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),bKo=i(D$e),Whe=n(D$e,"SPAN",{});var Dmt=s(Whe);FKo=r(Dmt,"AutoModelForInstanceSegmentation"),Dmt.forEach(t),D$e.forEach(t),SBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(e0.$$.fragment,ql),vKo=i(ql),fc=n(ql,"P",{});var dJ=s(fc);TKo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),hO=n(dJ,"A",{href:!0});var Gmt=s(hO);MKo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),EKo=r(dJ," class method or the "),pO=n(dJ,"A",{href:!0});var Omt=s(pO);CKo=r(Omt,"from_config()"),Omt.forEach(t),wKo=r(dJ,` class
method.`),dJ.forEach(t),AKo=i(ql),o0=n(ql,"P",{});var G$e=s(o0);yKo=r(G$e,"This class cannot be instantiated directly using "),Hhe=n(G$e,"CODE",{});var Vmt=s(Hhe);LKo=r(Vmt,"__init__()"),Vmt.forEach(t),xKo=r(G$e," (throws an error)."),G$e.forEach(t),kKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(r0.$$.fragment,Nl),SKo=i(Nl),Uhe=n(Nl,"P",{});var Xmt=s(Uhe);RKo=r(Xmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xmt.forEach(t),BKo=i(Nl),mc=n(Nl,"P",{});var cJ=s(mc);PKo=r(cJ,`Note:
Loading a model from its configuration file does `),Jhe=n(cJ,"STRONG",{});var zmt=s(Jhe);$Ko=r(zmt,"not"),zmt.forEach(t),IKo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(cJ,"A",{href:!0});var Qmt=s(_O);qKo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),NKo=r(cJ," to load the model weights."),cJ.forEach(t),jKo=i(Nl),Yhe=n(Nl,"P",{});var Wmt=s(Yhe);DKo=r(Wmt,"Examples:"),Wmt.forEach(t),GKo=i(Nl),m(t0.$$.fragment,Nl),Nl.forEach(t),OKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(a0.$$.fragment,ia),VKo=i(ia),Khe=n(ia,"P",{});var Hmt=s(Khe);XKo=r(Hmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hmt.forEach(t),zKo=i(ia),pn=n(ia,"P",{});var eC=s(pn);QKo=r(eC,"The model class to instantiate is selected based on the "),Zhe=n(eC,"CODE",{});var Umt=s(Zhe);WKo=r(Umt,"model_type"),Umt.forEach(t),HKo=r(eC,` property of the config object (either
passed as an argument or loaded from `),epe=n(eC,"CODE",{});var Jmt=s(epe);UKo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),JKo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(eC,"CODE",{});var Ymt=s(ope);YKo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),KKo=r(eC,":"),eC.forEach(t),ZKo=i(ia),rpe=n(ia,"UL",{});var Kmt=s(rpe);y2=n(Kmt,"LI",{});var KLe=s(y2);tpe=n(KLe,"STRONG",{});var Zmt=s(tpe);eZo=r(Zmt,"maskformer"),Zmt.forEach(t),oZo=r(KLe," \u2014 "),uO=n(KLe,"A",{href:!0});var egt=s(uO);rZo=r(egt,"MaskFormerForInstanceSegmentation"),egt.forEach(t),tZo=r(KLe," (MaskFormer model)"),KLe.forEach(t),Kmt.forEach(t),aZo=i(ia),L2=n(ia,"P",{});var ZLe=s(L2);nZo=r(ZLe,"The model is set in evaluation mode by default using "),ape=n(ZLe,"CODE",{});var ogt=s(ape);sZo=r(ogt,"model.eval()"),ogt.forEach(t),lZo=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(ZLe,"CODE",{});var rgt=s(npe);iZo=r(rgt,"model.train()"),rgt.forEach(t),ZLe.forEach(t),dZo=i(ia),spe=n(ia,"P",{});var tgt=s(spe);cZo=r(tgt,"Examples:"),tgt.forEach(t),fZo=i(ia),m(n0.$$.fragment,ia),ia.forEach(t),ql.forEach(t),RBe=i(c),gc=n(c,"H2",{class:!0});var O$e=s(gc);x2=n(O$e,"A",{id:!0,class:!0,href:!0});var agt=s(x2);lpe=n(agt,"SPAN",{});var ngt=s(lpe);m(s0.$$.fragment,ngt),ngt.forEach(t),agt.forEach(t),mZo=i(O$e),ipe=n(O$e,"SPAN",{});var sgt=s(ipe);gZo=r(sgt,"TFAutoModel"),sgt.forEach(t),O$e.forEach(t),BBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(l0.$$.fragment,jl),hZo=i(jl),hc=n(jl,"P",{});var fJ=s(hc);pZo=r(fJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bO=n(fJ,"A",{href:!0});var lgt=s(bO);_Zo=r(lgt,"from_pretrained()"),lgt.forEach(t),uZo=r(fJ," class method or the "),FO=n(fJ,"A",{href:!0});var igt=s(FO);bZo=r(igt,"from_config()"),igt.forEach(t),FZo=r(fJ,` class
method.`),fJ.forEach(t),vZo=i(jl),i0=n(jl,"P",{});var V$e=s(i0);TZo=r(V$e,"This class cannot be instantiated directly using "),dpe=n(V$e,"CODE",{});var dgt=s(dpe);MZo=r(dgt,"__init__()"),dgt.forEach(t),EZo=r(V$e," (throws an error)."),V$e.forEach(t),CZo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(d0.$$.fragment,Dl),wZo=i(Dl),cpe=n(Dl,"P",{});var cgt=s(cpe);AZo=r(cgt,"Instantiates one of the base model classes of the library from a configuration."),cgt.forEach(t),yZo=i(Dl),pc=n(Dl,"P",{});var mJ=s(pc);LZo=r(mJ,`Note:
Loading a model from its configuration file does `),fpe=n(mJ,"STRONG",{});var fgt=s(fpe);xZo=r(fgt,"not"),fgt.forEach(t),kZo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(mJ,"A",{href:!0});var mgt=s(vO);SZo=r(mgt,"from_pretrained()"),mgt.forEach(t),RZo=r(mJ," to load the model weights."),mJ.forEach(t),BZo=i(Dl),mpe=n(Dl,"P",{});var ggt=s(mpe);PZo=r(ggt,"Examples:"),ggt.forEach(t),$Zo=i(Dl),m(c0.$$.fragment,Dl),Dl.forEach(t),IZo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(f0.$$.fragment,pa),qZo=i(pa),gpe=n(pa,"P",{});var hgt=s(gpe);NZo=r(hgt,"Instantiate one of the base model classes of the library from a pretrained model."),hgt.forEach(t),jZo=i(pa),_n=n(pa,"P",{});var oC=s(_n);DZo=r(oC,"The model class to instantiate is selected based on the "),hpe=n(oC,"CODE",{});var pgt=s(hpe);GZo=r(pgt,"model_type"),pgt.forEach(t),OZo=r(oC,` property of the config object (either
passed as an argument or loaded from `),ppe=n(oC,"CODE",{});var _gt=s(ppe);VZo=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),XZo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(oC,"CODE",{});var ugt=s(_pe);zZo=r(ugt,"pretrained_model_name_or_path"),ugt.forEach(t),QZo=r(oC,":"),oC.forEach(t),WZo=i(pa),x=n(pa,"UL",{});var k=s(x);k2=n(k,"LI",{});var e8e=s(k2);upe=n(e8e,"STRONG",{});var bgt=s(upe);HZo=r(bgt,"albert"),bgt.forEach(t),UZo=r(e8e," \u2014 "),TO=n(e8e,"A",{href:!0});var Fgt=s(TO);JZo=r(Fgt,"TFAlbertModel"),Fgt.forEach(t),YZo=r(e8e," (ALBERT model)"),e8e.forEach(t),KZo=i(k),S2=n(k,"LI",{});var o8e=s(S2);bpe=n(o8e,"STRONG",{});var vgt=s(bpe);ZZo=r(vgt,"bart"),vgt.forEach(t),eer=r(o8e," \u2014 "),MO=n(o8e,"A",{href:!0});var Tgt=s(MO);oer=r(Tgt,"TFBartModel"),Tgt.forEach(t),rer=r(o8e," (BART model)"),o8e.forEach(t),ter=i(k),R2=n(k,"LI",{});var r8e=s(R2);Fpe=n(r8e,"STRONG",{});var Mgt=s(Fpe);aer=r(Mgt,"bert"),Mgt.forEach(t),ner=r(r8e," \u2014 "),EO=n(r8e,"A",{href:!0});var Egt=s(EO);ser=r(Egt,"TFBertModel"),Egt.forEach(t),ler=r(r8e," (BERT model)"),r8e.forEach(t),ier=i(k),B2=n(k,"LI",{});var t8e=s(B2);vpe=n(t8e,"STRONG",{});var Cgt=s(vpe);der=r(Cgt,"blenderbot"),Cgt.forEach(t),cer=r(t8e," \u2014 "),CO=n(t8e,"A",{href:!0});var wgt=s(CO);fer=r(wgt,"TFBlenderbotModel"),wgt.forEach(t),mer=r(t8e," (Blenderbot model)"),t8e.forEach(t),ger=i(k),P2=n(k,"LI",{});var a8e=s(P2);Tpe=n(a8e,"STRONG",{});var Agt=s(Tpe);her=r(Agt,"blenderbot-small"),Agt.forEach(t),per=r(a8e," \u2014 "),wO=n(a8e,"A",{href:!0});var ygt=s(wO);_er=r(ygt,"TFBlenderbotSmallModel"),ygt.forEach(t),uer=r(a8e," (BlenderbotSmall model)"),a8e.forEach(t),ber=i(k),$2=n(k,"LI",{});var n8e=s($2);Mpe=n(n8e,"STRONG",{});var Lgt=s(Mpe);Fer=r(Lgt,"camembert"),Lgt.forEach(t),ver=r(n8e," \u2014 "),AO=n(n8e,"A",{href:!0});var xgt=s(AO);Ter=r(xgt,"TFCamembertModel"),xgt.forEach(t),Mer=r(n8e," (CamemBERT model)"),n8e.forEach(t),Eer=i(k),I2=n(k,"LI",{});var s8e=s(I2);Epe=n(s8e,"STRONG",{});var kgt=s(Epe);Cer=r(kgt,"clip"),kgt.forEach(t),wer=r(s8e," \u2014 "),yO=n(s8e,"A",{href:!0});var Sgt=s(yO);Aer=r(Sgt,"TFCLIPModel"),Sgt.forEach(t),yer=r(s8e," (CLIP model)"),s8e.forEach(t),Ler=i(k),q2=n(k,"LI",{});var l8e=s(q2);Cpe=n(l8e,"STRONG",{});var Rgt=s(Cpe);xer=r(Rgt,"convbert"),Rgt.forEach(t),ker=r(l8e," \u2014 "),LO=n(l8e,"A",{href:!0});var Bgt=s(LO);Ser=r(Bgt,"TFConvBertModel"),Bgt.forEach(t),Rer=r(l8e," (ConvBERT model)"),l8e.forEach(t),Ber=i(k),N2=n(k,"LI",{});var i8e=s(N2);wpe=n(i8e,"STRONG",{});var Pgt=s(wpe);Per=r(Pgt,"convnext"),Pgt.forEach(t),$er=r(i8e," \u2014 "),xO=n(i8e,"A",{href:!0});var $gt=s(xO);Ier=r($gt,"TFConvNextModel"),$gt.forEach(t),qer=r(i8e," (ConvNext model)"),i8e.forEach(t),Ner=i(k),j2=n(k,"LI",{});var d8e=s(j2);Ape=n(d8e,"STRONG",{});var Igt=s(Ape);jer=r(Igt,"ctrl"),Igt.forEach(t),Der=r(d8e," \u2014 "),kO=n(d8e,"A",{href:!0});var qgt=s(kO);Ger=r(qgt,"TFCTRLModel"),qgt.forEach(t),Oer=r(d8e," (CTRL model)"),d8e.forEach(t),Ver=i(k),D2=n(k,"LI",{});var c8e=s(D2);ype=n(c8e,"STRONG",{});var Ngt=s(ype);Xer=r(Ngt,"deberta"),Ngt.forEach(t),zer=r(c8e," \u2014 "),SO=n(c8e,"A",{href:!0});var jgt=s(SO);Qer=r(jgt,"TFDebertaModel"),jgt.forEach(t),Wer=r(c8e," (DeBERTa model)"),c8e.forEach(t),Her=i(k),G2=n(k,"LI",{});var f8e=s(G2);Lpe=n(f8e,"STRONG",{});var Dgt=s(Lpe);Uer=r(Dgt,"deberta-v2"),Dgt.forEach(t),Jer=r(f8e," \u2014 "),RO=n(f8e,"A",{href:!0});var Ggt=s(RO);Yer=r(Ggt,"TFDebertaV2Model"),Ggt.forEach(t),Ker=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),Zer=i(k),O2=n(k,"LI",{});var m8e=s(O2);xpe=n(m8e,"STRONG",{});var Ogt=s(xpe);eor=r(Ogt,"distilbert"),Ogt.forEach(t),oor=r(m8e," \u2014 "),BO=n(m8e,"A",{href:!0});var Vgt=s(BO);ror=r(Vgt,"TFDistilBertModel"),Vgt.forEach(t),tor=r(m8e," (DistilBERT model)"),m8e.forEach(t),aor=i(k),V2=n(k,"LI",{});var g8e=s(V2);kpe=n(g8e,"STRONG",{});var Xgt=s(kpe);nor=r(Xgt,"dpr"),Xgt.forEach(t),sor=r(g8e," \u2014 "),PO=n(g8e,"A",{href:!0});var zgt=s(PO);lor=r(zgt,"TFDPRQuestionEncoder"),zgt.forEach(t),ior=r(g8e," (DPR model)"),g8e.forEach(t),dor=i(k),X2=n(k,"LI",{});var h8e=s(X2);Spe=n(h8e,"STRONG",{});var Qgt=s(Spe);cor=r(Qgt,"electra"),Qgt.forEach(t),mor=r(h8e," \u2014 "),$O=n(h8e,"A",{href:!0});var Wgt=s($O);gor=r(Wgt,"TFElectraModel"),Wgt.forEach(t),hor=r(h8e," (ELECTRA model)"),h8e.forEach(t),por=i(k),z2=n(k,"LI",{});var p8e=s(z2);Rpe=n(p8e,"STRONG",{});var Hgt=s(Rpe);_or=r(Hgt,"flaubert"),Hgt.forEach(t),uor=r(p8e," \u2014 "),IO=n(p8e,"A",{href:!0});var Ugt=s(IO);bor=r(Ugt,"TFFlaubertModel"),Ugt.forEach(t),For=r(p8e," (FlauBERT model)"),p8e.forEach(t),vor=i(k),Gs=n(k,"LI",{});var u9=s(Gs);Bpe=n(u9,"STRONG",{});var Jgt=s(Bpe);Tor=r(Jgt,"funnel"),Jgt.forEach(t),Mor=r(u9," \u2014 "),qO=n(u9,"A",{href:!0});var Ygt=s(qO);Eor=r(Ygt,"TFFunnelModel"),Ygt.forEach(t),Cor=r(u9," or "),NO=n(u9,"A",{href:!0});var Kgt=s(NO);wor=r(Kgt,"TFFunnelBaseModel"),Kgt.forEach(t),Aor=r(u9," (Funnel Transformer model)"),u9.forEach(t),yor=i(k),Q2=n(k,"LI",{});var _8e=s(Q2);Ppe=n(_8e,"STRONG",{});var Zgt=s(Ppe);Lor=r(Zgt,"gpt2"),Zgt.forEach(t),xor=r(_8e," \u2014 "),jO=n(_8e,"A",{href:!0});var eht=s(jO);kor=r(eht,"TFGPT2Model"),eht.forEach(t),Sor=r(_8e," (OpenAI GPT-2 model)"),_8e.forEach(t),Ror=i(k),W2=n(k,"LI",{});var u8e=s(W2);$pe=n(u8e,"STRONG",{});var oht=s($pe);Bor=r(oht,"gptj"),oht.forEach(t),Por=r(u8e," \u2014 "),DO=n(u8e,"A",{href:!0});var rht=s(DO);$or=r(rht,"TFGPTJModel"),rht.forEach(t),Ior=r(u8e," (GPT-J model)"),u8e.forEach(t),qor=i(k),H2=n(k,"LI",{});var b8e=s(H2);Ipe=n(b8e,"STRONG",{});var tht=s(Ipe);Nor=r(tht,"hubert"),tht.forEach(t),jor=r(b8e," \u2014 "),GO=n(b8e,"A",{href:!0});var aht=s(GO);Dor=r(aht,"TFHubertModel"),aht.forEach(t),Gor=r(b8e," (Hubert model)"),b8e.forEach(t),Oor=i(k),U2=n(k,"LI",{});var F8e=s(U2);qpe=n(F8e,"STRONG",{});var nht=s(qpe);Vor=r(nht,"layoutlm"),nht.forEach(t),Xor=r(F8e," \u2014 "),OO=n(F8e,"A",{href:!0});var sht=s(OO);zor=r(sht,"TFLayoutLMModel"),sht.forEach(t),Qor=r(F8e," (LayoutLM model)"),F8e.forEach(t),Wor=i(k),J2=n(k,"LI",{});var v8e=s(J2);Npe=n(v8e,"STRONG",{});var lht=s(Npe);Hor=r(lht,"led"),lht.forEach(t),Uor=r(v8e," \u2014 "),VO=n(v8e,"A",{href:!0});var iht=s(VO);Jor=r(iht,"TFLEDModel"),iht.forEach(t),Yor=r(v8e," (LED model)"),v8e.forEach(t),Kor=i(k),Y2=n(k,"LI",{});var T8e=s(Y2);jpe=n(T8e,"STRONG",{});var dht=s(jpe);Zor=r(dht,"longformer"),dht.forEach(t),err=r(T8e," \u2014 "),XO=n(T8e,"A",{href:!0});var cht=s(XO);orr=r(cht,"TFLongformerModel"),cht.forEach(t),rrr=r(T8e," (Longformer model)"),T8e.forEach(t),trr=i(k),K2=n(k,"LI",{});var M8e=s(K2);Dpe=n(M8e,"STRONG",{});var fht=s(Dpe);arr=r(fht,"lxmert"),fht.forEach(t),nrr=r(M8e," \u2014 "),zO=n(M8e,"A",{href:!0});var mht=s(zO);srr=r(mht,"TFLxmertModel"),mht.forEach(t),lrr=r(M8e," (LXMERT model)"),M8e.forEach(t),irr=i(k),Z2=n(k,"LI",{});var E8e=s(Z2);Gpe=n(E8e,"STRONG",{});var ght=s(Gpe);drr=r(ght,"marian"),ght.forEach(t),crr=r(E8e," \u2014 "),QO=n(E8e,"A",{href:!0});var hht=s(QO);frr=r(hht,"TFMarianModel"),hht.forEach(t),mrr=r(E8e," (Marian model)"),E8e.forEach(t),grr=i(k),eF=n(k,"LI",{});var C8e=s(eF);Ope=n(C8e,"STRONG",{});var pht=s(Ope);hrr=r(pht,"mbart"),pht.forEach(t),prr=r(C8e," \u2014 "),WO=n(C8e,"A",{href:!0});var _ht=s(WO);_rr=r(_ht,"TFMBartModel"),_ht.forEach(t),urr=r(C8e," (mBART model)"),C8e.forEach(t),brr=i(k),oF=n(k,"LI",{});var w8e=s(oF);Vpe=n(w8e,"STRONG",{});var uht=s(Vpe);Frr=r(uht,"mobilebert"),uht.forEach(t),vrr=r(w8e," \u2014 "),HO=n(w8e,"A",{href:!0});var bht=s(HO);Trr=r(bht,"TFMobileBertModel"),bht.forEach(t),Mrr=r(w8e," (MobileBERT model)"),w8e.forEach(t),Err=i(k),rF=n(k,"LI",{});var A8e=s(rF);Xpe=n(A8e,"STRONG",{});var Fht=s(Xpe);Crr=r(Fht,"mpnet"),Fht.forEach(t),wrr=r(A8e," \u2014 "),UO=n(A8e,"A",{href:!0});var vht=s(UO);Arr=r(vht,"TFMPNetModel"),vht.forEach(t),yrr=r(A8e," (MPNet model)"),A8e.forEach(t),Lrr=i(k),tF=n(k,"LI",{});var y8e=s(tF);zpe=n(y8e,"STRONG",{});var Tht=s(zpe);xrr=r(Tht,"mt5"),Tht.forEach(t),krr=r(y8e," \u2014 "),JO=n(y8e,"A",{href:!0});var Mht=s(JO);Srr=r(Mht,"TFMT5Model"),Mht.forEach(t),Rrr=r(y8e," (mT5 model)"),y8e.forEach(t),Brr=i(k),aF=n(k,"LI",{});var L8e=s(aF);Qpe=n(L8e,"STRONG",{});var Eht=s(Qpe);Prr=r(Eht,"openai-gpt"),Eht.forEach(t),$rr=r(L8e," \u2014 "),YO=n(L8e,"A",{href:!0});var Cht=s(YO);Irr=r(Cht,"TFOpenAIGPTModel"),Cht.forEach(t),qrr=r(L8e," (OpenAI GPT model)"),L8e.forEach(t),Nrr=i(k),nF=n(k,"LI",{});var x8e=s(nF);Wpe=n(x8e,"STRONG",{});var wht=s(Wpe);jrr=r(wht,"pegasus"),wht.forEach(t),Drr=r(x8e," \u2014 "),KO=n(x8e,"A",{href:!0});var Aht=s(KO);Grr=r(Aht,"TFPegasusModel"),Aht.forEach(t),Orr=r(x8e," (Pegasus model)"),x8e.forEach(t),Vrr=i(k),sF=n(k,"LI",{});var k8e=s(sF);Hpe=n(k8e,"STRONG",{});var yht=s(Hpe);Xrr=r(yht,"rembert"),yht.forEach(t),zrr=r(k8e," \u2014 "),ZO=n(k8e,"A",{href:!0});var Lht=s(ZO);Qrr=r(Lht,"TFRemBertModel"),Lht.forEach(t),Wrr=r(k8e," (RemBERT model)"),k8e.forEach(t),Hrr=i(k),lF=n(k,"LI",{});var S8e=s(lF);Upe=n(S8e,"STRONG",{});var xht=s(Upe);Urr=r(xht,"roberta"),xht.forEach(t),Jrr=r(S8e," \u2014 "),eV=n(S8e,"A",{href:!0});var kht=s(eV);Yrr=r(kht,"TFRobertaModel"),kht.forEach(t),Krr=r(S8e," (RoBERTa model)"),S8e.forEach(t),Zrr=i(k),iF=n(k,"LI",{});var R8e=s(iF);Jpe=n(R8e,"STRONG",{});var Sht=s(Jpe);etr=r(Sht,"roformer"),Sht.forEach(t),otr=r(R8e," \u2014 "),oV=n(R8e,"A",{href:!0});var Rht=s(oV);rtr=r(Rht,"TFRoFormerModel"),Rht.forEach(t),ttr=r(R8e," (RoFormer model)"),R8e.forEach(t),atr=i(k),dF=n(k,"LI",{});var B8e=s(dF);Ype=n(B8e,"STRONG",{});var Bht=s(Ype);ntr=r(Bht,"speech_to_text"),Bht.forEach(t),str=r(B8e," \u2014 "),rV=n(B8e,"A",{href:!0});var Pht=s(rV);ltr=r(Pht,"TFSpeech2TextModel"),Pht.forEach(t),itr=r(B8e," (Speech2Text model)"),B8e.forEach(t),dtr=i(k),cF=n(k,"LI",{});var P8e=s(cF);Kpe=n(P8e,"STRONG",{});var $ht=s(Kpe);ctr=r($ht,"t5"),$ht.forEach(t),ftr=r(P8e," \u2014 "),tV=n(P8e,"A",{href:!0});var Iht=s(tV);mtr=r(Iht,"TFT5Model"),Iht.forEach(t),gtr=r(P8e," (T5 model)"),P8e.forEach(t),htr=i(k),fF=n(k,"LI",{});var $8e=s(fF);Zpe=n($8e,"STRONG",{});var qht=s(Zpe);ptr=r(qht,"tapas"),qht.forEach(t),_tr=r($8e," \u2014 "),aV=n($8e,"A",{href:!0});var Nht=s(aV);utr=r(Nht,"TFTapasModel"),Nht.forEach(t),btr=r($8e," (TAPAS model)"),$8e.forEach(t),Ftr=i(k),mF=n(k,"LI",{});var I8e=s(mF);e_e=n(I8e,"STRONG",{});var jht=s(e_e);vtr=r(jht,"transfo-xl"),jht.forEach(t),Ttr=r(I8e," \u2014 "),nV=n(I8e,"A",{href:!0});var Dht=s(nV);Mtr=r(Dht,"TFTransfoXLModel"),Dht.forEach(t),Etr=r(I8e," (Transformer-XL model)"),I8e.forEach(t),Ctr=i(k),gF=n(k,"LI",{});var q8e=s(gF);o_e=n(q8e,"STRONG",{});var Ght=s(o_e);wtr=r(Ght,"vit"),Ght.forEach(t),Atr=r(q8e," \u2014 "),sV=n(q8e,"A",{href:!0});var Oht=s(sV);ytr=r(Oht,"TFViTModel"),Oht.forEach(t),Ltr=r(q8e," (ViT model)"),q8e.forEach(t),xtr=i(k),hF=n(k,"LI",{});var N8e=s(hF);r_e=n(N8e,"STRONG",{});var Vht=s(r_e);ktr=r(Vht,"vit_mae"),Vht.forEach(t),Str=r(N8e," \u2014 "),lV=n(N8e,"A",{href:!0});var Xht=s(lV);Rtr=r(Xht,"TFViTMAEModel"),Xht.forEach(t),Btr=r(N8e," (ViTMAE model)"),N8e.forEach(t),Ptr=i(k),pF=n(k,"LI",{});var j8e=s(pF);t_e=n(j8e,"STRONG",{});var zht=s(t_e);$tr=r(zht,"wav2vec2"),zht.forEach(t),Itr=r(j8e," \u2014 "),iV=n(j8e,"A",{href:!0});var Qht=s(iV);qtr=r(Qht,"TFWav2Vec2Model"),Qht.forEach(t),Ntr=r(j8e," (Wav2Vec2 model)"),j8e.forEach(t),jtr=i(k),_F=n(k,"LI",{});var D8e=s(_F);a_e=n(D8e,"STRONG",{});var Wht=s(a_e);Dtr=r(Wht,"xlm"),Wht.forEach(t),Gtr=r(D8e," \u2014 "),dV=n(D8e,"A",{href:!0});var Hht=s(dV);Otr=r(Hht,"TFXLMModel"),Hht.forEach(t),Vtr=r(D8e," (XLM model)"),D8e.forEach(t),Xtr=i(k),uF=n(k,"LI",{});var G8e=s(uF);n_e=n(G8e,"STRONG",{});var Uht=s(n_e);ztr=r(Uht,"xlm-roberta"),Uht.forEach(t),Qtr=r(G8e," \u2014 "),cV=n(G8e,"A",{href:!0});var Jht=s(cV);Wtr=r(Jht,"TFXLMRobertaModel"),Jht.forEach(t),Htr=r(G8e," (XLM-RoBERTa model)"),G8e.forEach(t),Utr=i(k),bF=n(k,"LI",{});var O8e=s(bF);s_e=n(O8e,"STRONG",{});var Yht=s(s_e);Jtr=r(Yht,"xlnet"),Yht.forEach(t),Ytr=r(O8e," \u2014 "),fV=n(O8e,"A",{href:!0});var Kht=s(fV);Ktr=r(Kht,"TFXLNetModel"),Kht.forEach(t),Ztr=r(O8e," (XLNet model)"),O8e.forEach(t),k.forEach(t),ear=i(pa),l_e=n(pa,"P",{});var Zht=s(l_e);oar=r(Zht,"Examples:"),Zht.forEach(t),rar=i(pa),m(m0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),PBe=i(c),_c=n(c,"H2",{class:!0});var X$e=s(_c);FF=n(X$e,"A",{id:!0,class:!0,href:!0});var ept=s(FF);i_e=n(ept,"SPAN",{});var opt=s(i_e);m(g0.$$.fragment,opt),opt.forEach(t),ept.forEach(t),tar=i(X$e),d_e=n(X$e,"SPAN",{});var rpt=s(d_e);aar=r(rpt,"TFAutoModelForPreTraining"),rpt.forEach(t),X$e.forEach(t),$Be=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(h0.$$.fragment,Gl),nar=i(Gl),uc=n(Gl,"P",{});var gJ=s(uc);sar=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mV=n(gJ,"A",{href:!0});var tpt=s(mV);lar=r(tpt,"from_pretrained()"),tpt.forEach(t),iar=r(gJ," class method or the "),gV=n(gJ,"A",{href:!0});var apt=s(gV);dar=r(apt,"from_config()"),apt.forEach(t),car=r(gJ,` class
method.`),gJ.forEach(t),far=i(Gl),p0=n(Gl,"P",{});var z$e=s(p0);mar=r(z$e,"This class cannot be instantiated directly using "),c_e=n(z$e,"CODE",{});var npt=s(c_e);gar=r(npt,"__init__()"),npt.forEach(t),har=r(z$e," (throws an error)."),z$e.forEach(t),par=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(_0.$$.fragment,Ol),_ar=i(Ol),f_e=n(Ol,"P",{});var spt=s(f_e);uar=r(spt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),spt.forEach(t),bar=i(Ol),bc=n(Ol,"P",{});var hJ=s(bc);Far=r(hJ,`Note:
Loading a model from its configuration file does `),m_e=n(hJ,"STRONG",{});var lpt=s(m_e);Tar=r(lpt,"not"),lpt.forEach(t),Mar=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(hJ,"A",{href:!0});var ipt=s(hV);Ear=r(ipt,"from_pretrained()"),ipt.forEach(t),Car=r(hJ," to load the model weights."),hJ.forEach(t),war=i(Ol),g_e=n(Ol,"P",{});var dpt=s(g_e);Aar=r(dpt,"Examples:"),dpt.forEach(t),yar=i(Ol),m(u0.$$.fragment,Ol),Ol.forEach(t),Lar=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(b0.$$.fragment,_a),xar=i(_a),h_e=n(_a,"P",{});var cpt=s(h_e);kar=r(cpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cpt.forEach(t),Sar=i(_a),un=n(_a,"P",{});var rC=s(un);Rar=r(rC,"The model class to instantiate is selected based on the "),p_e=n(rC,"CODE",{});var fpt=s(p_e);Bar=r(fpt,"model_type"),fpt.forEach(t),Par=r(rC,` property of the config object (either
passed as an argument or loaded from `),__e=n(rC,"CODE",{});var mpt=s(__e);$ar=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),Iar=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(rC,"CODE",{});var gpt=s(u_e);qar=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Nar=r(rC,":"),rC.forEach(t),jar=i(_a),H=n(_a,"UL",{});var U=s(H);vF=n(U,"LI",{});var V8e=s(vF);b_e=n(V8e,"STRONG",{});var hpt=s(b_e);Dar=r(hpt,"albert"),hpt.forEach(t),Gar=r(V8e," \u2014 "),pV=n(V8e,"A",{href:!0});var ppt=s(pV);Oar=r(ppt,"TFAlbertForPreTraining"),ppt.forEach(t),Var=r(V8e," (ALBERT model)"),V8e.forEach(t),Xar=i(U),TF=n(U,"LI",{});var X8e=s(TF);F_e=n(X8e,"STRONG",{});var _pt=s(F_e);zar=r(_pt,"bart"),_pt.forEach(t),Qar=r(X8e," \u2014 "),_V=n(X8e,"A",{href:!0});var upt=s(_V);War=r(upt,"TFBartForConditionalGeneration"),upt.forEach(t),Har=r(X8e," (BART model)"),X8e.forEach(t),Uar=i(U),MF=n(U,"LI",{});var z8e=s(MF);v_e=n(z8e,"STRONG",{});var bpt=s(v_e);Jar=r(bpt,"bert"),bpt.forEach(t),Yar=r(z8e," \u2014 "),uV=n(z8e,"A",{href:!0});var Fpt=s(uV);Kar=r(Fpt,"TFBertForPreTraining"),Fpt.forEach(t),Zar=r(z8e," (BERT model)"),z8e.forEach(t),enr=i(U),EF=n(U,"LI",{});var Q8e=s(EF);T_e=n(Q8e,"STRONG",{});var vpt=s(T_e);onr=r(vpt,"camembert"),vpt.forEach(t),rnr=r(Q8e," \u2014 "),bV=n(Q8e,"A",{href:!0});var Tpt=s(bV);tnr=r(Tpt,"TFCamembertForMaskedLM"),Tpt.forEach(t),anr=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),nnr=i(U),CF=n(U,"LI",{});var W8e=s(CF);M_e=n(W8e,"STRONG",{});var Mpt=s(M_e);snr=r(Mpt,"ctrl"),Mpt.forEach(t),lnr=r(W8e," \u2014 "),FV=n(W8e,"A",{href:!0});var Ept=s(FV);inr=r(Ept,"TFCTRLLMHeadModel"),Ept.forEach(t),dnr=r(W8e," (CTRL model)"),W8e.forEach(t),cnr=i(U),wF=n(U,"LI",{});var H8e=s(wF);E_e=n(H8e,"STRONG",{});var Cpt=s(E_e);fnr=r(Cpt,"distilbert"),Cpt.forEach(t),mnr=r(H8e," \u2014 "),vV=n(H8e,"A",{href:!0});var wpt=s(vV);gnr=r(wpt,"TFDistilBertForMaskedLM"),wpt.forEach(t),hnr=r(H8e," (DistilBERT model)"),H8e.forEach(t),pnr=i(U),AF=n(U,"LI",{});var U8e=s(AF);C_e=n(U8e,"STRONG",{});var Apt=s(C_e);_nr=r(Apt,"electra"),Apt.forEach(t),unr=r(U8e," \u2014 "),TV=n(U8e,"A",{href:!0});var ypt=s(TV);bnr=r(ypt,"TFElectraForPreTraining"),ypt.forEach(t),Fnr=r(U8e," (ELECTRA model)"),U8e.forEach(t),vnr=i(U),yF=n(U,"LI",{});var J8e=s(yF);w_e=n(J8e,"STRONG",{});var Lpt=s(w_e);Tnr=r(Lpt,"flaubert"),Lpt.forEach(t),Mnr=r(J8e," \u2014 "),MV=n(J8e,"A",{href:!0});var xpt=s(MV);Enr=r(xpt,"TFFlaubertWithLMHeadModel"),xpt.forEach(t),Cnr=r(J8e," (FlauBERT model)"),J8e.forEach(t),wnr=i(U),LF=n(U,"LI",{});var Y8e=s(LF);A_e=n(Y8e,"STRONG",{});var kpt=s(A_e);Anr=r(kpt,"funnel"),kpt.forEach(t),ynr=r(Y8e," \u2014 "),EV=n(Y8e,"A",{href:!0});var Spt=s(EV);Lnr=r(Spt,"TFFunnelForPreTraining"),Spt.forEach(t),xnr=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),knr=i(U),xF=n(U,"LI",{});var K8e=s(xF);y_e=n(K8e,"STRONG",{});var Rpt=s(y_e);Snr=r(Rpt,"gpt2"),Rpt.forEach(t),Rnr=r(K8e," \u2014 "),CV=n(K8e,"A",{href:!0});var Bpt=s(CV);Bnr=r(Bpt,"TFGPT2LMHeadModel"),Bpt.forEach(t),Pnr=r(K8e," (OpenAI GPT-2 model)"),K8e.forEach(t),$nr=i(U),kF=n(U,"LI",{});var Z8e=s(kF);L_e=n(Z8e,"STRONG",{});var Ppt=s(L_e);Inr=r(Ppt,"layoutlm"),Ppt.forEach(t),qnr=r(Z8e," \u2014 "),wV=n(Z8e,"A",{href:!0});var $pt=s(wV);Nnr=r($pt,"TFLayoutLMForMaskedLM"),$pt.forEach(t),jnr=r(Z8e," (LayoutLM model)"),Z8e.forEach(t),Dnr=i(U),SF=n(U,"LI",{});var e9e=s(SF);x_e=n(e9e,"STRONG",{});var Ipt=s(x_e);Gnr=r(Ipt,"lxmert"),Ipt.forEach(t),Onr=r(e9e," \u2014 "),AV=n(e9e,"A",{href:!0});var qpt=s(AV);Vnr=r(qpt,"TFLxmertForPreTraining"),qpt.forEach(t),Xnr=r(e9e," (LXMERT model)"),e9e.forEach(t),znr=i(U),RF=n(U,"LI",{});var o9e=s(RF);k_e=n(o9e,"STRONG",{});var Npt=s(k_e);Qnr=r(Npt,"mobilebert"),Npt.forEach(t),Wnr=r(o9e," \u2014 "),yV=n(o9e,"A",{href:!0});var jpt=s(yV);Hnr=r(jpt,"TFMobileBertForPreTraining"),jpt.forEach(t),Unr=r(o9e," (MobileBERT model)"),o9e.forEach(t),Jnr=i(U),BF=n(U,"LI",{});var r9e=s(BF);S_e=n(r9e,"STRONG",{});var Dpt=s(S_e);Ynr=r(Dpt,"mpnet"),Dpt.forEach(t),Knr=r(r9e," \u2014 "),LV=n(r9e,"A",{href:!0});var Gpt=s(LV);Znr=r(Gpt,"TFMPNetForMaskedLM"),Gpt.forEach(t),esr=r(r9e," (MPNet model)"),r9e.forEach(t),osr=i(U),PF=n(U,"LI",{});var t9e=s(PF);R_e=n(t9e,"STRONG",{});var Opt=s(R_e);rsr=r(Opt,"openai-gpt"),Opt.forEach(t),tsr=r(t9e," \u2014 "),xV=n(t9e,"A",{href:!0});var Vpt=s(xV);asr=r(Vpt,"TFOpenAIGPTLMHeadModel"),Vpt.forEach(t),nsr=r(t9e," (OpenAI GPT model)"),t9e.forEach(t),ssr=i(U),$F=n(U,"LI",{});var a9e=s($F);B_e=n(a9e,"STRONG",{});var Xpt=s(B_e);lsr=r(Xpt,"roberta"),Xpt.forEach(t),isr=r(a9e," \u2014 "),kV=n(a9e,"A",{href:!0});var zpt=s(kV);dsr=r(zpt,"TFRobertaForMaskedLM"),zpt.forEach(t),csr=r(a9e," (RoBERTa model)"),a9e.forEach(t),fsr=i(U),IF=n(U,"LI",{});var n9e=s(IF);P_e=n(n9e,"STRONG",{});var Qpt=s(P_e);msr=r(Qpt,"t5"),Qpt.forEach(t),gsr=r(n9e," \u2014 "),SV=n(n9e,"A",{href:!0});var Wpt=s(SV);hsr=r(Wpt,"TFT5ForConditionalGeneration"),Wpt.forEach(t),psr=r(n9e," (T5 model)"),n9e.forEach(t),_sr=i(U),qF=n(U,"LI",{});var s9e=s(qF);$_e=n(s9e,"STRONG",{});var Hpt=s($_e);usr=r(Hpt,"tapas"),Hpt.forEach(t),bsr=r(s9e," \u2014 "),RV=n(s9e,"A",{href:!0});var Upt=s(RV);Fsr=r(Upt,"TFTapasForMaskedLM"),Upt.forEach(t),vsr=r(s9e," (TAPAS model)"),s9e.forEach(t),Tsr=i(U),NF=n(U,"LI",{});var l9e=s(NF);I_e=n(l9e,"STRONG",{});var Jpt=s(I_e);Msr=r(Jpt,"transfo-xl"),Jpt.forEach(t),Esr=r(l9e," \u2014 "),BV=n(l9e,"A",{href:!0});var Ypt=s(BV);Csr=r(Ypt,"TFTransfoXLLMHeadModel"),Ypt.forEach(t),wsr=r(l9e," (Transformer-XL model)"),l9e.forEach(t),Asr=i(U),jF=n(U,"LI",{});var i9e=s(jF);q_e=n(i9e,"STRONG",{});var Kpt=s(q_e);ysr=r(Kpt,"vit_mae"),Kpt.forEach(t),Lsr=r(i9e," \u2014 "),PV=n(i9e,"A",{href:!0});var Zpt=s(PV);xsr=r(Zpt,"TFViTMAEForPreTraining"),Zpt.forEach(t),ksr=r(i9e," (ViTMAE model)"),i9e.forEach(t),Ssr=i(U),DF=n(U,"LI",{});var d9e=s(DF);N_e=n(d9e,"STRONG",{});var e_t=s(N_e);Rsr=r(e_t,"xlm"),e_t.forEach(t),Bsr=r(d9e," \u2014 "),$V=n(d9e,"A",{href:!0});var o_t=s($V);Psr=r(o_t,"TFXLMWithLMHeadModel"),o_t.forEach(t),$sr=r(d9e," (XLM model)"),d9e.forEach(t),Isr=i(U),GF=n(U,"LI",{});var c9e=s(GF);j_e=n(c9e,"STRONG",{});var r_t=s(j_e);qsr=r(r_t,"xlm-roberta"),r_t.forEach(t),Nsr=r(c9e," \u2014 "),IV=n(c9e,"A",{href:!0});var t_t=s(IV);jsr=r(t_t,"TFXLMRobertaForMaskedLM"),t_t.forEach(t),Dsr=r(c9e," (XLM-RoBERTa model)"),c9e.forEach(t),Gsr=i(U),OF=n(U,"LI",{});var f9e=s(OF);D_e=n(f9e,"STRONG",{});var a_t=s(D_e);Osr=r(a_t,"xlnet"),a_t.forEach(t),Vsr=r(f9e," \u2014 "),qV=n(f9e,"A",{href:!0});var n_t=s(qV);Xsr=r(n_t,"TFXLNetLMHeadModel"),n_t.forEach(t),zsr=r(f9e," (XLNet model)"),f9e.forEach(t),U.forEach(t),Qsr=i(_a),G_e=n(_a,"P",{});var s_t=s(G_e);Wsr=r(s_t,"Examples:"),s_t.forEach(t),Hsr=i(_a),m(F0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),IBe=i(c),Fc=n(c,"H2",{class:!0});var Q$e=s(Fc);VF=n(Q$e,"A",{id:!0,class:!0,href:!0});var l_t=s(VF);O_e=n(l_t,"SPAN",{});var i_t=s(O_e);m(v0.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),Usr=i(Q$e),V_e=n(Q$e,"SPAN",{});var d_t=s(V_e);Jsr=r(d_t,"TFAutoModelForCausalLM"),d_t.forEach(t),Q$e.forEach(t),qBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(T0.$$.fragment,Vl),Ysr=i(Vl),vc=n(Vl,"P",{});var pJ=s(vc);Ksr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NV=n(pJ,"A",{href:!0});var c_t=s(NV);Zsr=r(c_t,"from_pretrained()"),c_t.forEach(t),elr=r(pJ," class method or the "),jV=n(pJ,"A",{href:!0});var f_t=s(jV);olr=r(f_t,"from_config()"),f_t.forEach(t),rlr=r(pJ,` class
method.`),pJ.forEach(t),tlr=i(Vl),M0=n(Vl,"P",{});var W$e=s(M0);alr=r(W$e,"This class cannot be instantiated directly using "),X_e=n(W$e,"CODE",{});var m_t=s(X_e);nlr=r(m_t,"__init__()"),m_t.forEach(t),slr=r(W$e," (throws an error)."),W$e.forEach(t),llr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(E0.$$.fragment,Xl),ilr=i(Xl),z_e=n(Xl,"P",{});var g_t=s(z_e);dlr=r(g_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g_t.forEach(t),clr=i(Xl),Tc=n(Xl,"P",{});var _J=s(Tc);flr=r(_J,`Note:
Loading a model from its configuration file does `),Q_e=n(_J,"STRONG",{});var h_t=s(Q_e);mlr=r(h_t,"not"),h_t.forEach(t),glr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(_J,"A",{href:!0});var p_t=s(DV);hlr=r(p_t,"from_pretrained()"),p_t.forEach(t),plr=r(_J," to load the model weights."),_J.forEach(t),_lr=i(Xl),W_e=n(Xl,"P",{});var __t=s(W_e);ulr=r(__t,"Examples:"),__t.forEach(t),blr=i(Xl),m(C0.$$.fragment,Xl),Xl.forEach(t),Flr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(w0.$$.fragment,ua),vlr=i(ua),H_e=n(ua,"P",{});var u_t=s(H_e);Tlr=r(u_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u_t.forEach(t),Mlr=i(ua),bn=n(ua,"P",{});var tC=s(bn);Elr=r(tC,"The model class to instantiate is selected based on the "),U_e=n(tC,"CODE",{});var b_t=s(U_e);Clr=r(b_t,"model_type"),b_t.forEach(t),wlr=r(tC,` property of the config object (either
passed as an argument or loaded from `),J_e=n(tC,"CODE",{});var F_t=s(J_e);Alr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),ylr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(tC,"CODE",{});var v_t=s(Y_e);Llr=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),xlr=r(tC,":"),tC.forEach(t),klr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);XF=n(pe,"LI",{});var m9e=s(XF);K_e=n(m9e,"STRONG",{});var T_t=s(K_e);Slr=r(T_t,"bert"),T_t.forEach(t),Rlr=r(m9e," \u2014 "),GV=n(m9e,"A",{href:!0});var M_t=s(GV);Blr=r(M_t,"TFBertLMHeadModel"),M_t.forEach(t),Plr=r(m9e," (BERT model)"),m9e.forEach(t),$lr=i(pe),zF=n(pe,"LI",{});var g9e=s(zF);Z_e=n(g9e,"STRONG",{});var E_t=s(Z_e);Ilr=r(E_t,"camembert"),E_t.forEach(t),qlr=r(g9e," \u2014 "),OV=n(g9e,"A",{href:!0});var C_t=s(OV);Nlr=r(C_t,"TFCamembertForCausalLM"),C_t.forEach(t),jlr=r(g9e," (CamemBERT model)"),g9e.forEach(t),Dlr=i(pe),QF=n(pe,"LI",{});var h9e=s(QF);eue=n(h9e,"STRONG",{});var w_t=s(eue);Glr=r(w_t,"ctrl"),w_t.forEach(t),Olr=r(h9e," \u2014 "),VV=n(h9e,"A",{href:!0});var A_t=s(VV);Vlr=r(A_t,"TFCTRLLMHeadModel"),A_t.forEach(t),Xlr=r(h9e," (CTRL model)"),h9e.forEach(t),zlr=i(pe),WF=n(pe,"LI",{});var p9e=s(WF);oue=n(p9e,"STRONG",{});var y_t=s(oue);Qlr=r(y_t,"gpt2"),y_t.forEach(t),Wlr=r(p9e," \u2014 "),XV=n(p9e,"A",{href:!0});var L_t=s(XV);Hlr=r(L_t,"TFGPT2LMHeadModel"),L_t.forEach(t),Ulr=r(p9e," (OpenAI GPT-2 model)"),p9e.forEach(t),Jlr=i(pe),HF=n(pe,"LI",{});var _9e=s(HF);rue=n(_9e,"STRONG",{});var x_t=s(rue);Ylr=r(x_t,"gptj"),x_t.forEach(t),Klr=r(_9e," \u2014 "),zV=n(_9e,"A",{href:!0});var k_t=s(zV);Zlr=r(k_t,"TFGPTJForCausalLM"),k_t.forEach(t),eir=r(_9e," (GPT-J model)"),_9e.forEach(t),oir=i(pe),UF=n(pe,"LI",{});var u9e=s(UF);tue=n(u9e,"STRONG",{});var S_t=s(tue);rir=r(S_t,"openai-gpt"),S_t.forEach(t),tir=r(u9e," \u2014 "),QV=n(u9e,"A",{href:!0});var R_t=s(QV);air=r(R_t,"TFOpenAIGPTLMHeadModel"),R_t.forEach(t),nir=r(u9e," (OpenAI GPT model)"),u9e.forEach(t),sir=i(pe),JF=n(pe,"LI",{});var b9e=s(JF);aue=n(b9e,"STRONG",{});var B_t=s(aue);lir=r(B_t,"rembert"),B_t.forEach(t),iir=r(b9e," \u2014 "),WV=n(b9e,"A",{href:!0});var P_t=s(WV);dir=r(P_t,"TFRemBertForCausalLM"),P_t.forEach(t),cir=r(b9e," (RemBERT model)"),b9e.forEach(t),fir=i(pe),YF=n(pe,"LI",{});var F9e=s(YF);nue=n(F9e,"STRONG",{});var $_t=s(nue);mir=r($_t,"roberta"),$_t.forEach(t),gir=r(F9e," \u2014 "),HV=n(F9e,"A",{href:!0});var I_t=s(HV);hir=r(I_t,"TFRobertaForCausalLM"),I_t.forEach(t),pir=r(F9e," (RoBERTa model)"),F9e.forEach(t),_ir=i(pe),KF=n(pe,"LI",{});var v9e=s(KF);sue=n(v9e,"STRONG",{});var q_t=s(sue);uir=r(q_t,"roformer"),q_t.forEach(t),bir=r(v9e," \u2014 "),UV=n(v9e,"A",{href:!0});var N_t=s(UV);Fir=r(N_t,"TFRoFormerForCausalLM"),N_t.forEach(t),vir=r(v9e," (RoFormer model)"),v9e.forEach(t),Tir=i(pe),ZF=n(pe,"LI",{});var T9e=s(ZF);lue=n(T9e,"STRONG",{});var j_t=s(lue);Mir=r(j_t,"transfo-xl"),j_t.forEach(t),Eir=r(T9e," \u2014 "),JV=n(T9e,"A",{href:!0});var D_t=s(JV);Cir=r(D_t,"TFTransfoXLLMHeadModel"),D_t.forEach(t),wir=r(T9e," (Transformer-XL model)"),T9e.forEach(t),Air=i(pe),ev=n(pe,"LI",{});var M9e=s(ev);iue=n(M9e,"STRONG",{});var G_t=s(iue);yir=r(G_t,"xlm"),G_t.forEach(t),Lir=r(M9e," \u2014 "),YV=n(M9e,"A",{href:!0});var O_t=s(YV);xir=r(O_t,"TFXLMWithLMHeadModel"),O_t.forEach(t),kir=r(M9e," (XLM model)"),M9e.forEach(t),Sir=i(pe),ov=n(pe,"LI",{});var E9e=s(ov);due=n(E9e,"STRONG",{});var V_t=s(due);Rir=r(V_t,"xlnet"),V_t.forEach(t),Bir=r(E9e," \u2014 "),KV=n(E9e,"A",{href:!0});var X_t=s(KV);Pir=r(X_t,"TFXLNetLMHeadModel"),X_t.forEach(t),$ir=r(E9e," (XLNet model)"),E9e.forEach(t),pe.forEach(t),Iir=i(ua),cue=n(ua,"P",{});var z_t=s(cue);qir=r(z_t,"Examples:"),z_t.forEach(t),Nir=i(ua),m(A0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),NBe=i(c),Mc=n(c,"H2",{class:!0});var H$e=s(Mc);rv=n(H$e,"A",{id:!0,class:!0,href:!0});var Q_t=s(rv);fue=n(Q_t,"SPAN",{});var W_t=s(fue);m(y0.$$.fragment,W_t),W_t.forEach(t),Q_t.forEach(t),jir=i(H$e),mue=n(H$e,"SPAN",{});var H_t=s(mue);Dir=r(H_t,"TFAutoModelForImageClassification"),H_t.forEach(t),H$e.forEach(t),jBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(L0.$$.fragment,zl),Gir=i(zl),Ec=n(zl,"P",{});var uJ=s(Ec);Oir=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZV=n(uJ,"A",{href:!0});var U_t=s(ZV);Vir=r(U_t,"from_pretrained()"),U_t.forEach(t),Xir=r(uJ," class method or the "),eX=n(uJ,"A",{href:!0});var J_t=s(eX);zir=r(J_t,"from_config()"),J_t.forEach(t),Qir=r(uJ,` class
method.`),uJ.forEach(t),Wir=i(zl),x0=n(zl,"P",{});var U$e=s(x0);Hir=r(U$e,"This class cannot be instantiated directly using "),gue=n(U$e,"CODE",{});var Y_t=s(gue);Uir=r(Y_t,"__init__()"),Y_t.forEach(t),Jir=r(U$e," (throws an error)."),U$e.forEach(t),Yir=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(k0.$$.fragment,Ql),Kir=i(Ql),hue=n(Ql,"P",{});var K_t=s(hue);Zir=r(K_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K_t.forEach(t),edr=i(Ql),Cc=n(Ql,"P",{});var bJ=s(Cc);odr=r(bJ,`Note:
Loading a model from its configuration file does `),pue=n(bJ,"STRONG",{});var Z_t=s(pue);rdr=r(Z_t,"not"),Z_t.forEach(t),tdr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(bJ,"A",{href:!0});var eut=s(oX);adr=r(eut,"from_pretrained()"),eut.forEach(t),ndr=r(bJ," to load the model weights."),bJ.forEach(t),sdr=i(Ql),_ue=n(Ql,"P",{});var out=s(_ue);ldr=r(out,"Examples:"),out.forEach(t),idr=i(Ql),m(S0.$$.fragment,Ql),Ql.forEach(t),ddr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(R0.$$.fragment,ba),cdr=i(ba),uue=n(ba,"P",{});var rut=s(uue);fdr=r(rut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rut.forEach(t),mdr=i(ba),Fn=n(ba,"P",{});var aC=s(Fn);gdr=r(aC,"The model class to instantiate is selected based on the "),bue=n(aC,"CODE",{});var tut=s(bue);hdr=r(tut,"model_type"),tut.forEach(t),pdr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Fue=n(aC,"CODE",{});var aut=s(Fue);_dr=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),udr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(aC,"CODE",{});var nut=s(vue);bdr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Fdr=r(aC,":"),aC.forEach(t),vdr=i(ba),B0=n(ba,"UL",{});var J$e=s(B0);tv=n(J$e,"LI",{});var C9e=s(tv);Tue=n(C9e,"STRONG",{});var sut=s(Tue);Tdr=r(sut,"convnext"),sut.forEach(t),Mdr=r(C9e," \u2014 "),rX=n(C9e,"A",{href:!0});var lut=s(rX);Edr=r(lut,"TFConvNextForImageClassification"),lut.forEach(t),Cdr=r(C9e," (ConvNext model)"),C9e.forEach(t),wdr=i(J$e),av=n(J$e,"LI",{});var w9e=s(av);Mue=n(w9e,"STRONG",{});var iut=s(Mue);Adr=r(iut,"vit"),iut.forEach(t),ydr=r(w9e," \u2014 "),tX=n(w9e,"A",{href:!0});var dut=s(tX);Ldr=r(dut,"TFViTForImageClassification"),dut.forEach(t),xdr=r(w9e," (ViT model)"),w9e.forEach(t),J$e.forEach(t),kdr=i(ba),Eue=n(ba,"P",{});var cut=s(Eue);Sdr=r(cut,"Examples:"),cut.forEach(t),Rdr=i(ba),m(P0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),DBe=i(c),wc=n(c,"H2",{class:!0});var Y$e=s(wc);nv=n(Y$e,"A",{id:!0,class:!0,href:!0});var fut=s(nv);Cue=n(fut,"SPAN",{});var mut=s(Cue);m($0.$$.fragment,mut),mut.forEach(t),fut.forEach(t),Bdr=i(Y$e),wue=n(Y$e,"SPAN",{});var gut=s(wue);Pdr=r(gut,"TFAutoModelForMaskedLM"),gut.forEach(t),Y$e.forEach(t),GBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(I0.$$.fragment,Wl),$dr=i(Wl),Ac=n(Wl,"P",{});var FJ=s(Ac);Idr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aX=n(FJ,"A",{href:!0});var hut=s(aX);qdr=r(hut,"from_pretrained()"),hut.forEach(t),Ndr=r(FJ," class method or the "),nX=n(FJ,"A",{href:!0});var put=s(nX);jdr=r(put,"from_config()"),put.forEach(t),Ddr=r(FJ,` class
method.`),FJ.forEach(t),Gdr=i(Wl),q0=n(Wl,"P",{});var K$e=s(q0);Odr=r(K$e,"This class cannot be instantiated directly using "),Aue=n(K$e,"CODE",{});var _ut=s(Aue);Vdr=r(_ut,"__init__()"),_ut.forEach(t),Xdr=r(K$e," (throws an error)."),K$e.forEach(t),zdr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(N0.$$.fragment,Hl),Qdr=i(Hl),yue=n(Hl,"P",{});var uut=s(yue);Wdr=r(uut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uut.forEach(t),Hdr=i(Hl),yc=n(Hl,"P",{});var vJ=s(yc);Udr=r(vJ,`Note:
Loading a model from its configuration file does `),Lue=n(vJ,"STRONG",{});var but=s(Lue);Jdr=r(but,"not"),but.forEach(t),Ydr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(vJ,"A",{href:!0});var Fut=s(sX);Kdr=r(Fut,"from_pretrained()"),Fut.forEach(t),Zdr=r(vJ," to load the model weights."),vJ.forEach(t),ecr=i(Hl),xue=n(Hl,"P",{});var vut=s(xue);ocr=r(vut,"Examples:"),vut.forEach(t),rcr=i(Hl),m(j0.$$.fragment,Hl),Hl.forEach(t),tcr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(D0.$$.fragment,Fa),acr=i(Fa),kue=n(Fa,"P",{});var Tut=s(kue);ncr=r(Tut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tut.forEach(t),scr=i(Fa),vn=n(Fa,"P",{});var nC=s(vn);lcr=r(nC,"The model class to instantiate is selected based on the "),Sue=n(nC,"CODE",{});var Mut=s(Sue);icr=r(Mut,"model_type"),Mut.forEach(t),dcr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Rue=n(nC,"CODE",{});var Eut=s(Rue);ccr=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),fcr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(nC,"CODE",{});var Cut=s(Bue);mcr=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),gcr=r(nC,":"),nC.forEach(t),hcr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);sv=n(oe,"LI",{});var A9e=s(sv);Pue=n(A9e,"STRONG",{});var wut=s(Pue);pcr=r(wut,"albert"),wut.forEach(t),_cr=r(A9e," \u2014 "),lX=n(A9e,"A",{href:!0});var Aut=s(lX);ucr=r(Aut,"TFAlbertForMaskedLM"),Aut.forEach(t),bcr=r(A9e," (ALBERT model)"),A9e.forEach(t),Fcr=i(oe),lv=n(oe,"LI",{});var y9e=s(lv);$ue=n(y9e,"STRONG",{});var yut=s($ue);vcr=r(yut,"bert"),yut.forEach(t),Tcr=r(y9e," \u2014 "),iX=n(y9e,"A",{href:!0});var Lut=s(iX);Mcr=r(Lut,"TFBertForMaskedLM"),Lut.forEach(t),Ecr=r(y9e," (BERT model)"),y9e.forEach(t),Ccr=i(oe),iv=n(oe,"LI",{});var L9e=s(iv);Iue=n(L9e,"STRONG",{});var xut=s(Iue);wcr=r(xut,"camembert"),xut.forEach(t),Acr=r(L9e," \u2014 "),dX=n(L9e,"A",{href:!0});var kut=s(dX);ycr=r(kut,"TFCamembertForMaskedLM"),kut.forEach(t),Lcr=r(L9e," (CamemBERT model)"),L9e.forEach(t),xcr=i(oe),dv=n(oe,"LI",{});var x9e=s(dv);que=n(x9e,"STRONG",{});var Sut=s(que);kcr=r(Sut,"convbert"),Sut.forEach(t),Scr=r(x9e," \u2014 "),cX=n(x9e,"A",{href:!0});var Rut=s(cX);Rcr=r(Rut,"TFConvBertForMaskedLM"),Rut.forEach(t),Bcr=r(x9e," (ConvBERT model)"),x9e.forEach(t),Pcr=i(oe),cv=n(oe,"LI",{});var k9e=s(cv);Nue=n(k9e,"STRONG",{});var But=s(Nue);$cr=r(But,"deberta"),But.forEach(t),Icr=r(k9e," \u2014 "),fX=n(k9e,"A",{href:!0});var Put=s(fX);qcr=r(Put,"TFDebertaForMaskedLM"),Put.forEach(t),Ncr=r(k9e," (DeBERTa model)"),k9e.forEach(t),jcr=i(oe),fv=n(oe,"LI",{});var S9e=s(fv);jue=n(S9e,"STRONG",{});var $ut=s(jue);Dcr=r($ut,"deberta-v2"),$ut.forEach(t),Gcr=r(S9e," \u2014 "),mX=n(S9e,"A",{href:!0});var Iut=s(mX);Ocr=r(Iut,"TFDebertaV2ForMaskedLM"),Iut.forEach(t),Vcr=r(S9e," (DeBERTa-v2 model)"),S9e.forEach(t),Xcr=i(oe),mv=n(oe,"LI",{});var R9e=s(mv);Due=n(R9e,"STRONG",{});var qut=s(Due);zcr=r(qut,"distilbert"),qut.forEach(t),Qcr=r(R9e," \u2014 "),gX=n(R9e,"A",{href:!0});var Nut=s(gX);Wcr=r(Nut,"TFDistilBertForMaskedLM"),Nut.forEach(t),Hcr=r(R9e," (DistilBERT model)"),R9e.forEach(t),Ucr=i(oe),gv=n(oe,"LI",{});var B9e=s(gv);Gue=n(B9e,"STRONG",{});var jut=s(Gue);Jcr=r(jut,"electra"),jut.forEach(t),Ycr=r(B9e," \u2014 "),hX=n(B9e,"A",{href:!0});var Dut=s(hX);Kcr=r(Dut,"TFElectraForMaskedLM"),Dut.forEach(t),Zcr=r(B9e," (ELECTRA model)"),B9e.forEach(t),efr=i(oe),hv=n(oe,"LI",{});var P9e=s(hv);Oue=n(P9e,"STRONG",{});var Gut=s(Oue);ofr=r(Gut,"flaubert"),Gut.forEach(t),rfr=r(P9e," \u2014 "),pX=n(P9e,"A",{href:!0});var Out=s(pX);tfr=r(Out,"TFFlaubertWithLMHeadModel"),Out.forEach(t),afr=r(P9e," (FlauBERT model)"),P9e.forEach(t),nfr=i(oe),pv=n(oe,"LI",{});var $9e=s(pv);Vue=n($9e,"STRONG",{});var Vut=s(Vue);sfr=r(Vut,"funnel"),Vut.forEach(t),lfr=r($9e," \u2014 "),_X=n($9e,"A",{href:!0});var Xut=s(_X);ifr=r(Xut,"TFFunnelForMaskedLM"),Xut.forEach(t),dfr=r($9e," (Funnel Transformer model)"),$9e.forEach(t),cfr=i(oe),_v=n(oe,"LI",{});var I9e=s(_v);Xue=n(I9e,"STRONG",{});var zut=s(Xue);ffr=r(zut,"layoutlm"),zut.forEach(t),mfr=r(I9e," \u2014 "),uX=n(I9e,"A",{href:!0});var Qut=s(uX);gfr=r(Qut,"TFLayoutLMForMaskedLM"),Qut.forEach(t),hfr=r(I9e," (LayoutLM model)"),I9e.forEach(t),pfr=i(oe),uv=n(oe,"LI",{});var q9e=s(uv);zue=n(q9e,"STRONG",{});var Wut=s(zue);_fr=r(Wut,"longformer"),Wut.forEach(t),ufr=r(q9e," \u2014 "),bX=n(q9e,"A",{href:!0});var Hut=s(bX);bfr=r(Hut,"TFLongformerForMaskedLM"),Hut.forEach(t),Ffr=r(q9e," (Longformer model)"),q9e.forEach(t),vfr=i(oe),bv=n(oe,"LI",{});var N9e=s(bv);Que=n(N9e,"STRONG",{});var Uut=s(Que);Tfr=r(Uut,"mobilebert"),Uut.forEach(t),Mfr=r(N9e," \u2014 "),FX=n(N9e,"A",{href:!0});var Jut=s(FX);Efr=r(Jut,"TFMobileBertForMaskedLM"),Jut.forEach(t),Cfr=r(N9e," (MobileBERT model)"),N9e.forEach(t),wfr=i(oe),Fv=n(oe,"LI",{});var j9e=s(Fv);Wue=n(j9e,"STRONG",{});var Yut=s(Wue);Afr=r(Yut,"mpnet"),Yut.forEach(t),yfr=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var Kut=s(vX);Lfr=r(Kut,"TFMPNetForMaskedLM"),Kut.forEach(t),xfr=r(j9e," (MPNet model)"),j9e.forEach(t),kfr=i(oe),vv=n(oe,"LI",{});var D9e=s(vv);Hue=n(D9e,"STRONG",{});var Zut=s(Hue);Sfr=r(Zut,"rembert"),Zut.forEach(t),Rfr=r(D9e," \u2014 "),TX=n(D9e,"A",{href:!0});var e1t=s(TX);Bfr=r(e1t,"TFRemBertForMaskedLM"),e1t.forEach(t),Pfr=r(D9e," (RemBERT model)"),D9e.forEach(t),$fr=i(oe),Tv=n(oe,"LI",{});var G9e=s(Tv);Uue=n(G9e,"STRONG",{});var o1t=s(Uue);Ifr=r(o1t,"roberta"),o1t.forEach(t),qfr=r(G9e," \u2014 "),MX=n(G9e,"A",{href:!0});var r1t=s(MX);Nfr=r(r1t,"TFRobertaForMaskedLM"),r1t.forEach(t),jfr=r(G9e," (RoBERTa model)"),G9e.forEach(t),Dfr=i(oe),Mv=n(oe,"LI",{});var O9e=s(Mv);Jue=n(O9e,"STRONG",{});var t1t=s(Jue);Gfr=r(t1t,"roformer"),t1t.forEach(t),Ofr=r(O9e," \u2014 "),EX=n(O9e,"A",{href:!0});var a1t=s(EX);Vfr=r(a1t,"TFRoFormerForMaskedLM"),a1t.forEach(t),Xfr=r(O9e," (RoFormer model)"),O9e.forEach(t),zfr=i(oe),Ev=n(oe,"LI",{});var V9e=s(Ev);Yue=n(V9e,"STRONG",{});var n1t=s(Yue);Qfr=r(n1t,"tapas"),n1t.forEach(t),Wfr=r(V9e," \u2014 "),CX=n(V9e,"A",{href:!0});var s1t=s(CX);Hfr=r(s1t,"TFTapasForMaskedLM"),s1t.forEach(t),Ufr=r(V9e," (TAPAS model)"),V9e.forEach(t),Jfr=i(oe),Cv=n(oe,"LI",{});var X9e=s(Cv);Kue=n(X9e,"STRONG",{});var l1t=s(Kue);Yfr=r(l1t,"xlm"),l1t.forEach(t),Kfr=r(X9e," \u2014 "),wX=n(X9e,"A",{href:!0});var i1t=s(wX);Zfr=r(i1t,"TFXLMWithLMHeadModel"),i1t.forEach(t),emr=r(X9e," (XLM model)"),X9e.forEach(t),omr=i(oe),wv=n(oe,"LI",{});var z9e=s(wv);Zue=n(z9e,"STRONG",{});var d1t=s(Zue);rmr=r(d1t,"xlm-roberta"),d1t.forEach(t),tmr=r(z9e," \u2014 "),AX=n(z9e,"A",{href:!0});var c1t=s(AX);amr=r(c1t,"TFXLMRobertaForMaskedLM"),c1t.forEach(t),nmr=r(z9e," (XLM-RoBERTa model)"),z9e.forEach(t),oe.forEach(t),smr=i(Fa),e1e=n(Fa,"P",{});var f1t=s(e1e);lmr=r(f1t,"Examples:"),f1t.forEach(t),imr=i(Fa),m(G0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),OBe=i(c),Lc=n(c,"H2",{class:!0});var Z$e=s(Lc);Av=n(Z$e,"A",{id:!0,class:!0,href:!0});var m1t=s(Av);o1e=n(m1t,"SPAN",{});var g1t=s(o1e);m(O0.$$.fragment,g1t),g1t.forEach(t),m1t.forEach(t),dmr=i(Z$e),r1e=n(Z$e,"SPAN",{});var h1t=s(r1e);cmr=r(h1t,"TFAutoModelForSeq2SeqLM"),h1t.forEach(t),Z$e.forEach(t),VBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(V0.$$.fragment,Ul),fmr=i(Ul),xc=n(Ul,"P",{});var TJ=s(xc);mmr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yX=n(TJ,"A",{href:!0});var p1t=s(yX);gmr=r(p1t,"from_pretrained()"),p1t.forEach(t),hmr=r(TJ," class method or the "),LX=n(TJ,"A",{href:!0});var _1t=s(LX);pmr=r(_1t,"from_config()"),_1t.forEach(t),_mr=r(TJ,` class
method.`),TJ.forEach(t),umr=i(Ul),X0=n(Ul,"P",{});var eIe=s(X0);bmr=r(eIe,"This class cannot be instantiated directly using "),t1e=n(eIe,"CODE",{});var u1t=s(t1e);Fmr=r(u1t,"__init__()"),u1t.forEach(t),vmr=r(eIe," (throws an error)."),eIe.forEach(t),Tmr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(z0.$$.fragment,Jl),Mmr=i(Jl),a1e=n(Jl,"P",{});var b1t=s(a1e);Emr=r(b1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b1t.forEach(t),Cmr=i(Jl),kc=n(Jl,"P",{});var MJ=s(kc);wmr=r(MJ,`Note:
Loading a model from its configuration file does `),n1e=n(MJ,"STRONG",{});var F1t=s(n1e);Amr=r(F1t,"not"),F1t.forEach(t),ymr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(MJ,"A",{href:!0});var v1t=s(xX);Lmr=r(v1t,"from_pretrained()"),v1t.forEach(t),xmr=r(MJ," to load the model weights."),MJ.forEach(t),kmr=i(Jl),s1e=n(Jl,"P",{});var T1t=s(s1e);Smr=r(T1t,"Examples:"),T1t.forEach(t),Rmr=i(Jl),m(Q0.$$.fragment,Jl),Jl.forEach(t),Bmr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(W0.$$.fragment,va),Pmr=i(va),l1e=n(va,"P",{});var M1t=s(l1e);$mr=r(M1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M1t.forEach(t),Imr=i(va),Tn=n(va,"P",{});var sC=s(Tn);qmr=r(sC,"The model class to instantiate is selected based on the "),i1e=n(sC,"CODE",{});var E1t=s(i1e);Nmr=r(E1t,"model_type"),E1t.forEach(t),jmr=r(sC,` property of the config object (either
passed as an argument or loaded from `),d1e=n(sC,"CODE",{});var C1t=s(d1e);Dmr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),Gmr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(sC,"CODE",{});var w1t=s(c1e);Omr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),Vmr=r(sC,":"),sC.forEach(t),Xmr=i(va),be=n(va,"UL",{});var we=s(be);yv=n(we,"LI",{});var Q9e=s(yv);f1e=n(Q9e,"STRONG",{});var A1t=s(f1e);zmr=r(A1t,"bart"),A1t.forEach(t),Qmr=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var y1t=s(kX);Wmr=r(y1t,"TFBartForConditionalGeneration"),y1t.forEach(t),Hmr=r(Q9e," (BART model)"),Q9e.forEach(t),Umr=i(we),Lv=n(we,"LI",{});var W9e=s(Lv);m1e=n(W9e,"STRONG",{});var L1t=s(m1e);Jmr=r(L1t,"blenderbot"),L1t.forEach(t),Ymr=r(W9e," \u2014 "),SX=n(W9e,"A",{href:!0});var x1t=s(SX);Kmr=r(x1t,"TFBlenderbotForConditionalGeneration"),x1t.forEach(t),Zmr=r(W9e," (Blenderbot model)"),W9e.forEach(t),egr=i(we),xv=n(we,"LI",{});var H9e=s(xv);g1e=n(H9e,"STRONG",{});var k1t=s(g1e);ogr=r(k1t,"blenderbot-small"),k1t.forEach(t),rgr=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var S1t=s(RX);tgr=r(S1t,"TFBlenderbotSmallForConditionalGeneration"),S1t.forEach(t),agr=r(H9e," (BlenderbotSmall model)"),H9e.forEach(t),ngr=i(we),kv=n(we,"LI",{});var U9e=s(kv);h1e=n(U9e,"STRONG",{});var R1t=s(h1e);sgr=r(R1t,"encoder-decoder"),R1t.forEach(t),lgr=r(U9e," \u2014 "),BX=n(U9e,"A",{href:!0});var B1t=s(BX);igr=r(B1t,"TFEncoderDecoderModel"),B1t.forEach(t),dgr=r(U9e," (Encoder decoder model)"),U9e.forEach(t),cgr=i(we),Sv=n(we,"LI",{});var J9e=s(Sv);p1e=n(J9e,"STRONG",{});var P1t=s(p1e);fgr=r(P1t,"led"),P1t.forEach(t),mgr=r(J9e," \u2014 "),PX=n(J9e,"A",{href:!0});var $1t=s(PX);ggr=r($1t,"TFLEDForConditionalGeneration"),$1t.forEach(t),hgr=r(J9e," (LED model)"),J9e.forEach(t),pgr=i(we),Rv=n(we,"LI",{});var Y9e=s(Rv);_1e=n(Y9e,"STRONG",{});var I1t=s(_1e);_gr=r(I1t,"marian"),I1t.forEach(t),ugr=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var q1t=s($X);bgr=r(q1t,"TFMarianMTModel"),q1t.forEach(t),Fgr=r(Y9e," (Marian model)"),Y9e.forEach(t),vgr=i(we),Bv=n(we,"LI",{});var K9e=s(Bv);u1e=n(K9e,"STRONG",{});var N1t=s(u1e);Tgr=r(N1t,"mbart"),N1t.forEach(t),Mgr=r(K9e," \u2014 "),IX=n(K9e,"A",{href:!0});var j1t=s(IX);Egr=r(j1t,"TFMBartForConditionalGeneration"),j1t.forEach(t),Cgr=r(K9e," (mBART model)"),K9e.forEach(t),wgr=i(we),Pv=n(we,"LI",{});var Z9e=s(Pv);b1e=n(Z9e,"STRONG",{});var D1t=s(b1e);Agr=r(D1t,"mt5"),D1t.forEach(t),ygr=r(Z9e," \u2014 "),qX=n(Z9e,"A",{href:!0});var G1t=s(qX);Lgr=r(G1t,"TFMT5ForConditionalGeneration"),G1t.forEach(t),xgr=r(Z9e," (mT5 model)"),Z9e.forEach(t),kgr=i(we),$v=n(we,"LI",{});var exe=s($v);F1e=n(exe,"STRONG",{});var O1t=s(F1e);Sgr=r(O1t,"pegasus"),O1t.forEach(t),Rgr=r(exe," \u2014 "),NX=n(exe,"A",{href:!0});var V1t=s(NX);Bgr=r(V1t,"TFPegasusForConditionalGeneration"),V1t.forEach(t),Pgr=r(exe," (Pegasus model)"),exe.forEach(t),$gr=i(we),Iv=n(we,"LI",{});var oxe=s(Iv);v1e=n(oxe,"STRONG",{});var X1t=s(v1e);Igr=r(X1t,"t5"),X1t.forEach(t),qgr=r(oxe," \u2014 "),jX=n(oxe,"A",{href:!0});var z1t=s(jX);Ngr=r(z1t,"TFT5ForConditionalGeneration"),z1t.forEach(t),jgr=r(oxe," (T5 model)"),oxe.forEach(t),we.forEach(t),Dgr=i(va),T1e=n(va,"P",{});var Q1t=s(T1e);Ggr=r(Q1t,"Examples:"),Q1t.forEach(t),Ogr=i(va),m(H0.$$.fragment,va),va.forEach(t),Ul.forEach(t),XBe=i(c),Sc=n(c,"H2",{class:!0});var oIe=s(Sc);qv=n(oIe,"A",{id:!0,class:!0,href:!0});var W1t=s(qv);M1e=n(W1t,"SPAN",{});var H1t=s(M1e);m(U0.$$.fragment,H1t),H1t.forEach(t),W1t.forEach(t),Vgr=i(oIe),E1e=n(oIe,"SPAN",{});var U1t=s(E1e);Xgr=r(U1t,"TFAutoModelForSequenceClassification"),U1t.forEach(t),oIe.forEach(t),zBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(J0.$$.fragment,Yl),zgr=i(Yl),Rc=n(Yl,"P",{});var EJ=s(Rc);Qgr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DX=n(EJ,"A",{href:!0});var J1t=s(DX);Wgr=r(J1t,"from_pretrained()"),J1t.forEach(t),Hgr=r(EJ," class method or the "),GX=n(EJ,"A",{href:!0});var Y1t=s(GX);Ugr=r(Y1t,"from_config()"),Y1t.forEach(t),Jgr=r(EJ,` class
method.`),EJ.forEach(t),Ygr=i(Yl),Y0=n(Yl,"P",{});var rIe=s(Y0);Kgr=r(rIe,"This class cannot be instantiated directly using "),C1e=n(rIe,"CODE",{});var K1t=s(C1e);Zgr=r(K1t,"__init__()"),K1t.forEach(t),ehr=r(rIe," (throws an error)."),rIe.forEach(t),ohr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(K0.$$.fragment,Kl),rhr=i(Kl),w1e=n(Kl,"P",{});var Z1t=s(w1e);thr=r(Z1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z1t.forEach(t),ahr=i(Kl),Bc=n(Kl,"P",{});var CJ=s(Bc);nhr=r(CJ,`Note:
Loading a model from its configuration file does `),A1e=n(CJ,"STRONG",{});var e7t=s(A1e);shr=r(e7t,"not"),e7t.forEach(t),lhr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(CJ,"A",{href:!0});var o7t=s(OX);ihr=r(o7t,"from_pretrained()"),o7t.forEach(t),dhr=r(CJ," to load the model weights."),CJ.forEach(t),chr=i(Kl),y1e=n(Kl,"P",{});var r7t=s(y1e);fhr=r(r7t,"Examples:"),r7t.forEach(t),mhr=i(Kl),m(Z0.$$.fragment,Kl),Kl.forEach(t),ghr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(ey.$$.fragment,Ta),hhr=i(Ta),L1e=n(Ta,"P",{});var t7t=s(L1e);phr=r(t7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t7t.forEach(t),_hr=i(Ta),Mn=n(Ta,"P",{});var lC=s(Mn);uhr=r(lC,"The model class to instantiate is selected based on the "),x1e=n(lC,"CODE",{});var a7t=s(x1e);bhr=r(a7t,"model_type"),a7t.forEach(t),Fhr=r(lC,` property of the config object (either
passed as an argument or loaded from `),k1e=n(lC,"CODE",{});var n7t=s(k1e);vhr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),Thr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(lC,"CODE",{});var s7t=s(S1e);Mhr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),Ehr=r(lC,":"),lC.forEach(t),Chr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);Nv=n(Q,"LI",{});var rxe=s(Nv);R1e=n(rxe,"STRONG",{});var l7t=s(R1e);whr=r(l7t,"albert"),l7t.forEach(t),Ahr=r(rxe," \u2014 "),VX=n(rxe,"A",{href:!0});var i7t=s(VX);yhr=r(i7t,"TFAlbertForSequenceClassification"),i7t.forEach(t),Lhr=r(rxe," (ALBERT model)"),rxe.forEach(t),xhr=i(Q),jv=n(Q,"LI",{});var txe=s(jv);B1e=n(txe,"STRONG",{});var d7t=s(B1e);khr=r(d7t,"bert"),d7t.forEach(t),Shr=r(txe," \u2014 "),XX=n(txe,"A",{href:!0});var c7t=s(XX);Rhr=r(c7t,"TFBertForSequenceClassification"),c7t.forEach(t),Bhr=r(txe," (BERT model)"),txe.forEach(t),Phr=i(Q),Dv=n(Q,"LI",{});var axe=s(Dv);P1e=n(axe,"STRONG",{});var f7t=s(P1e);$hr=r(f7t,"camembert"),f7t.forEach(t),Ihr=r(axe," \u2014 "),zX=n(axe,"A",{href:!0});var m7t=s(zX);qhr=r(m7t,"TFCamembertForSequenceClassification"),m7t.forEach(t),Nhr=r(axe," (CamemBERT model)"),axe.forEach(t),jhr=i(Q),Gv=n(Q,"LI",{});var nxe=s(Gv);$1e=n(nxe,"STRONG",{});var g7t=s($1e);Dhr=r(g7t,"convbert"),g7t.forEach(t),Ghr=r(nxe," \u2014 "),QX=n(nxe,"A",{href:!0});var h7t=s(QX);Ohr=r(h7t,"TFConvBertForSequenceClassification"),h7t.forEach(t),Vhr=r(nxe," (ConvBERT model)"),nxe.forEach(t),Xhr=i(Q),Ov=n(Q,"LI",{});var sxe=s(Ov);I1e=n(sxe,"STRONG",{});var p7t=s(I1e);zhr=r(p7t,"ctrl"),p7t.forEach(t),Qhr=r(sxe," \u2014 "),WX=n(sxe,"A",{href:!0});var _7t=s(WX);Whr=r(_7t,"TFCTRLForSequenceClassification"),_7t.forEach(t),Hhr=r(sxe," (CTRL model)"),sxe.forEach(t),Uhr=i(Q),Vv=n(Q,"LI",{});var lxe=s(Vv);q1e=n(lxe,"STRONG",{});var u7t=s(q1e);Jhr=r(u7t,"deberta"),u7t.forEach(t),Yhr=r(lxe," \u2014 "),HX=n(lxe,"A",{href:!0});var b7t=s(HX);Khr=r(b7t,"TFDebertaForSequenceClassification"),b7t.forEach(t),Zhr=r(lxe," (DeBERTa model)"),lxe.forEach(t),epr=i(Q),Xv=n(Q,"LI",{});var ixe=s(Xv);N1e=n(ixe,"STRONG",{});var F7t=s(N1e);opr=r(F7t,"deberta-v2"),F7t.forEach(t),rpr=r(ixe," \u2014 "),UX=n(ixe,"A",{href:!0});var v7t=s(UX);tpr=r(v7t,"TFDebertaV2ForSequenceClassification"),v7t.forEach(t),apr=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),npr=i(Q),zv=n(Q,"LI",{});var dxe=s(zv);j1e=n(dxe,"STRONG",{});var T7t=s(j1e);spr=r(T7t,"distilbert"),T7t.forEach(t),lpr=r(dxe," \u2014 "),JX=n(dxe,"A",{href:!0});var M7t=s(JX);ipr=r(M7t,"TFDistilBertForSequenceClassification"),M7t.forEach(t),dpr=r(dxe," (DistilBERT model)"),dxe.forEach(t),cpr=i(Q),Qv=n(Q,"LI",{});var cxe=s(Qv);D1e=n(cxe,"STRONG",{});var E7t=s(D1e);fpr=r(E7t,"electra"),E7t.forEach(t),mpr=r(cxe," \u2014 "),YX=n(cxe,"A",{href:!0});var C7t=s(YX);gpr=r(C7t,"TFElectraForSequenceClassification"),C7t.forEach(t),hpr=r(cxe," (ELECTRA model)"),cxe.forEach(t),ppr=i(Q),Wv=n(Q,"LI",{});var fxe=s(Wv);G1e=n(fxe,"STRONG",{});var w7t=s(G1e);_pr=r(w7t,"flaubert"),w7t.forEach(t),upr=r(fxe," \u2014 "),KX=n(fxe,"A",{href:!0});var A7t=s(KX);bpr=r(A7t,"TFFlaubertForSequenceClassification"),A7t.forEach(t),Fpr=r(fxe," (FlauBERT model)"),fxe.forEach(t),vpr=i(Q),Hv=n(Q,"LI",{});var mxe=s(Hv);O1e=n(mxe,"STRONG",{});var y7t=s(O1e);Tpr=r(y7t,"funnel"),y7t.forEach(t),Mpr=r(mxe," \u2014 "),ZX=n(mxe,"A",{href:!0});var L7t=s(ZX);Epr=r(L7t,"TFFunnelForSequenceClassification"),L7t.forEach(t),Cpr=r(mxe," (Funnel Transformer model)"),mxe.forEach(t),wpr=i(Q),Uv=n(Q,"LI",{});var gxe=s(Uv);V1e=n(gxe,"STRONG",{});var x7t=s(V1e);Apr=r(x7t,"gpt2"),x7t.forEach(t),ypr=r(gxe," \u2014 "),ez=n(gxe,"A",{href:!0});var k7t=s(ez);Lpr=r(k7t,"TFGPT2ForSequenceClassification"),k7t.forEach(t),xpr=r(gxe," (OpenAI GPT-2 model)"),gxe.forEach(t),kpr=i(Q),Jv=n(Q,"LI",{});var hxe=s(Jv);X1e=n(hxe,"STRONG",{});var S7t=s(X1e);Spr=r(S7t,"gptj"),S7t.forEach(t),Rpr=r(hxe," \u2014 "),oz=n(hxe,"A",{href:!0});var R7t=s(oz);Bpr=r(R7t,"TFGPTJForSequenceClassification"),R7t.forEach(t),Ppr=r(hxe," (GPT-J model)"),hxe.forEach(t),$pr=i(Q),Yv=n(Q,"LI",{});var pxe=s(Yv);z1e=n(pxe,"STRONG",{});var B7t=s(z1e);Ipr=r(B7t,"layoutlm"),B7t.forEach(t),qpr=r(pxe," \u2014 "),rz=n(pxe,"A",{href:!0});var P7t=s(rz);Npr=r(P7t,"TFLayoutLMForSequenceClassification"),P7t.forEach(t),jpr=r(pxe," (LayoutLM model)"),pxe.forEach(t),Dpr=i(Q),Kv=n(Q,"LI",{});var _xe=s(Kv);Q1e=n(_xe,"STRONG",{});var $7t=s(Q1e);Gpr=r($7t,"longformer"),$7t.forEach(t),Opr=r(_xe," \u2014 "),tz=n(_xe,"A",{href:!0});var I7t=s(tz);Vpr=r(I7t,"TFLongformerForSequenceClassification"),I7t.forEach(t),Xpr=r(_xe," (Longformer model)"),_xe.forEach(t),zpr=i(Q),Zv=n(Q,"LI",{});var uxe=s(Zv);W1e=n(uxe,"STRONG",{});var q7t=s(W1e);Qpr=r(q7t,"mobilebert"),q7t.forEach(t),Wpr=r(uxe," \u2014 "),az=n(uxe,"A",{href:!0});var N7t=s(az);Hpr=r(N7t,"TFMobileBertForSequenceClassification"),N7t.forEach(t),Upr=r(uxe," (MobileBERT model)"),uxe.forEach(t),Jpr=i(Q),eT=n(Q,"LI",{});var bxe=s(eT);H1e=n(bxe,"STRONG",{});var j7t=s(H1e);Ypr=r(j7t,"mpnet"),j7t.forEach(t),Kpr=r(bxe," \u2014 "),nz=n(bxe,"A",{href:!0});var D7t=s(nz);Zpr=r(D7t,"TFMPNetForSequenceClassification"),D7t.forEach(t),e_r=r(bxe," (MPNet model)"),bxe.forEach(t),o_r=i(Q),oT=n(Q,"LI",{});var Fxe=s(oT);U1e=n(Fxe,"STRONG",{});var G7t=s(U1e);r_r=r(G7t,"openai-gpt"),G7t.forEach(t),t_r=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var O7t=s(sz);a_r=r(O7t,"TFOpenAIGPTForSequenceClassification"),O7t.forEach(t),n_r=r(Fxe," (OpenAI GPT model)"),Fxe.forEach(t),s_r=i(Q),rT=n(Q,"LI",{});var vxe=s(rT);J1e=n(vxe,"STRONG",{});var V7t=s(J1e);l_r=r(V7t,"rembert"),V7t.forEach(t),i_r=r(vxe," \u2014 "),lz=n(vxe,"A",{href:!0});var X7t=s(lz);d_r=r(X7t,"TFRemBertForSequenceClassification"),X7t.forEach(t),c_r=r(vxe," (RemBERT model)"),vxe.forEach(t),f_r=i(Q),tT=n(Q,"LI",{});var Txe=s(tT);Y1e=n(Txe,"STRONG",{});var z7t=s(Y1e);m_r=r(z7t,"roberta"),z7t.forEach(t),g_r=r(Txe," \u2014 "),iz=n(Txe,"A",{href:!0});var Q7t=s(iz);h_r=r(Q7t,"TFRobertaForSequenceClassification"),Q7t.forEach(t),p_r=r(Txe," (RoBERTa model)"),Txe.forEach(t),__r=i(Q),aT=n(Q,"LI",{});var Mxe=s(aT);K1e=n(Mxe,"STRONG",{});var W7t=s(K1e);u_r=r(W7t,"roformer"),W7t.forEach(t),b_r=r(Mxe," \u2014 "),dz=n(Mxe,"A",{href:!0});var H7t=s(dz);F_r=r(H7t,"TFRoFormerForSequenceClassification"),H7t.forEach(t),v_r=r(Mxe," (RoFormer model)"),Mxe.forEach(t),T_r=i(Q),nT=n(Q,"LI",{});var Exe=s(nT);Z1e=n(Exe,"STRONG",{});var U7t=s(Z1e);M_r=r(U7t,"tapas"),U7t.forEach(t),E_r=r(Exe," \u2014 "),cz=n(Exe,"A",{href:!0});var J7t=s(cz);C_r=r(J7t,"TFTapasForSequenceClassification"),J7t.forEach(t),w_r=r(Exe," (TAPAS model)"),Exe.forEach(t),A_r=i(Q),sT=n(Q,"LI",{});var Cxe=s(sT);e7e=n(Cxe,"STRONG",{});var Y7t=s(e7e);y_r=r(Y7t,"transfo-xl"),Y7t.forEach(t),L_r=r(Cxe," \u2014 "),fz=n(Cxe,"A",{href:!0});var K7t=s(fz);x_r=r(K7t,"TFTransfoXLForSequenceClassification"),K7t.forEach(t),k_r=r(Cxe," (Transformer-XL model)"),Cxe.forEach(t),S_r=i(Q),lT=n(Q,"LI",{});var wxe=s(lT);o7e=n(wxe,"STRONG",{});var Z7t=s(o7e);R_r=r(Z7t,"xlm"),Z7t.forEach(t),B_r=r(wxe," \u2014 "),mz=n(wxe,"A",{href:!0});var ebt=s(mz);P_r=r(ebt,"TFXLMForSequenceClassification"),ebt.forEach(t),$_r=r(wxe," (XLM model)"),wxe.forEach(t),I_r=i(Q),iT=n(Q,"LI",{});var Axe=s(iT);r7e=n(Axe,"STRONG",{});var obt=s(r7e);q_r=r(obt,"xlm-roberta"),obt.forEach(t),N_r=r(Axe," \u2014 "),gz=n(Axe,"A",{href:!0});var rbt=s(gz);j_r=r(rbt,"TFXLMRobertaForSequenceClassification"),rbt.forEach(t),D_r=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),G_r=i(Q),dT=n(Q,"LI",{});var yxe=s(dT);t7e=n(yxe,"STRONG",{});var tbt=s(t7e);O_r=r(tbt,"xlnet"),tbt.forEach(t),V_r=r(yxe," \u2014 "),hz=n(yxe,"A",{href:!0});var abt=s(hz);X_r=r(abt,"TFXLNetForSequenceClassification"),abt.forEach(t),z_r=r(yxe," (XLNet model)"),yxe.forEach(t),Q.forEach(t),Q_r=i(Ta),a7e=n(Ta,"P",{});var nbt=s(a7e);W_r=r(nbt,"Examples:"),nbt.forEach(t),H_r=i(Ta),m(oy.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),QBe=i(c),Pc=n(c,"H2",{class:!0});var tIe=s(Pc);cT=n(tIe,"A",{id:!0,class:!0,href:!0});var sbt=s(cT);n7e=n(sbt,"SPAN",{});var lbt=s(n7e);m(ry.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),U_r=i(tIe),s7e=n(tIe,"SPAN",{});var ibt=s(s7e);J_r=r(ibt,"TFAutoModelForMultipleChoice"),ibt.forEach(t),tIe.forEach(t),WBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(ty.$$.fragment,Zl),Y_r=i(Zl),$c=n(Zl,"P",{});var wJ=s($c);K_r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pz=n(wJ,"A",{href:!0});var dbt=s(pz);Z_r=r(dbt,"from_pretrained()"),dbt.forEach(t),eur=r(wJ," class method or the "),_z=n(wJ,"A",{href:!0});var cbt=s(_z);our=r(cbt,"from_config()"),cbt.forEach(t),rur=r(wJ,` class
method.`),wJ.forEach(t),tur=i(Zl),ay=n(Zl,"P",{});var aIe=s(ay);aur=r(aIe,"This class cannot be instantiated directly using "),l7e=n(aIe,"CODE",{});var fbt=s(l7e);nur=r(fbt,"__init__()"),fbt.forEach(t),sur=r(aIe," (throws an error)."),aIe.forEach(t),lur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(ny.$$.fragment,ei),iur=i(ei),i7e=n(ei,"P",{});var mbt=s(i7e);dur=r(mbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mbt.forEach(t),cur=i(ei),Ic=n(ei,"P",{});var AJ=s(Ic);fur=r(AJ,`Note:
Loading a model from its configuration file does `),d7e=n(AJ,"STRONG",{});var gbt=s(d7e);mur=r(gbt,"not"),gbt.forEach(t),gur=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(AJ,"A",{href:!0});var hbt=s(uz);hur=r(hbt,"from_pretrained()"),hbt.forEach(t),pur=r(AJ," to load the model weights."),AJ.forEach(t),_ur=i(ei),c7e=n(ei,"P",{});var pbt=s(c7e);uur=r(pbt,"Examples:"),pbt.forEach(t),bur=i(ei),m(sy.$$.fragment,ei),ei.forEach(t),Fur=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(ly.$$.fragment,Ma),vur=i(Ma),f7e=n(Ma,"P",{});var _bt=s(f7e);Tur=r(_bt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_bt.forEach(t),Mur=i(Ma),En=n(Ma,"P",{});var iC=s(En);Eur=r(iC,"The model class to instantiate is selected based on the "),m7e=n(iC,"CODE",{});var ubt=s(m7e);Cur=r(ubt,"model_type"),ubt.forEach(t),wur=r(iC,` property of the config object (either
passed as an argument or loaded from `),g7e=n(iC,"CODE",{});var bbt=s(g7e);Aur=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),yur=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(iC,"CODE",{});var Fbt=s(h7e);Lur=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),xur=r(iC,":"),iC.forEach(t),kur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);fT=n(ie,"LI",{});var Lxe=s(fT);p7e=n(Lxe,"STRONG",{});var vbt=s(p7e);Sur=r(vbt,"albert"),vbt.forEach(t),Rur=r(Lxe," \u2014 "),bz=n(Lxe,"A",{href:!0});var Tbt=s(bz);Bur=r(Tbt,"TFAlbertForMultipleChoice"),Tbt.forEach(t),Pur=r(Lxe," (ALBERT model)"),Lxe.forEach(t),$ur=i(ie),mT=n(ie,"LI",{});var xxe=s(mT);_7e=n(xxe,"STRONG",{});var Mbt=s(_7e);Iur=r(Mbt,"bert"),Mbt.forEach(t),qur=r(xxe," \u2014 "),Fz=n(xxe,"A",{href:!0});var Ebt=s(Fz);Nur=r(Ebt,"TFBertForMultipleChoice"),Ebt.forEach(t),jur=r(xxe," (BERT model)"),xxe.forEach(t),Dur=i(ie),gT=n(ie,"LI",{});var kxe=s(gT);u7e=n(kxe,"STRONG",{});var Cbt=s(u7e);Gur=r(Cbt,"camembert"),Cbt.forEach(t),Our=r(kxe," \u2014 "),vz=n(kxe,"A",{href:!0});var wbt=s(vz);Vur=r(wbt,"TFCamembertForMultipleChoice"),wbt.forEach(t),Xur=r(kxe," (CamemBERT model)"),kxe.forEach(t),zur=i(ie),hT=n(ie,"LI",{});var Sxe=s(hT);b7e=n(Sxe,"STRONG",{});var Abt=s(b7e);Qur=r(Abt,"convbert"),Abt.forEach(t),Wur=r(Sxe," \u2014 "),Tz=n(Sxe,"A",{href:!0});var ybt=s(Tz);Hur=r(ybt,"TFConvBertForMultipleChoice"),ybt.forEach(t),Uur=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),Jur=i(ie),pT=n(ie,"LI",{});var Rxe=s(pT);F7e=n(Rxe,"STRONG",{});var Lbt=s(F7e);Yur=r(Lbt,"distilbert"),Lbt.forEach(t),Kur=r(Rxe," \u2014 "),Mz=n(Rxe,"A",{href:!0});var xbt=s(Mz);Zur=r(xbt,"TFDistilBertForMultipleChoice"),xbt.forEach(t),e1r=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),o1r=i(ie),_T=n(ie,"LI",{});var Bxe=s(_T);v7e=n(Bxe,"STRONG",{});var kbt=s(v7e);r1r=r(kbt,"electra"),kbt.forEach(t),t1r=r(Bxe," \u2014 "),Ez=n(Bxe,"A",{href:!0});var Sbt=s(Ez);a1r=r(Sbt,"TFElectraForMultipleChoice"),Sbt.forEach(t),n1r=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),s1r=i(ie),uT=n(ie,"LI",{});var Pxe=s(uT);T7e=n(Pxe,"STRONG",{});var Rbt=s(T7e);l1r=r(Rbt,"flaubert"),Rbt.forEach(t),i1r=r(Pxe," \u2014 "),Cz=n(Pxe,"A",{href:!0});var Bbt=s(Cz);d1r=r(Bbt,"TFFlaubertForMultipleChoice"),Bbt.forEach(t),c1r=r(Pxe," (FlauBERT model)"),Pxe.forEach(t),f1r=i(ie),bT=n(ie,"LI",{});var $xe=s(bT);M7e=n($xe,"STRONG",{});var Pbt=s(M7e);m1r=r(Pbt,"funnel"),Pbt.forEach(t),g1r=r($xe," \u2014 "),wz=n($xe,"A",{href:!0});var $bt=s(wz);h1r=r($bt,"TFFunnelForMultipleChoice"),$bt.forEach(t),p1r=r($xe," (Funnel Transformer model)"),$xe.forEach(t),_1r=i(ie),FT=n(ie,"LI",{});var Ixe=s(FT);E7e=n(Ixe,"STRONG",{});var Ibt=s(E7e);u1r=r(Ibt,"longformer"),Ibt.forEach(t),b1r=r(Ixe," \u2014 "),Az=n(Ixe,"A",{href:!0});var qbt=s(Az);F1r=r(qbt,"TFLongformerForMultipleChoice"),qbt.forEach(t),v1r=r(Ixe," (Longformer model)"),Ixe.forEach(t),T1r=i(ie),vT=n(ie,"LI",{});var qxe=s(vT);C7e=n(qxe,"STRONG",{});var Nbt=s(C7e);M1r=r(Nbt,"mobilebert"),Nbt.forEach(t),E1r=r(qxe," \u2014 "),yz=n(qxe,"A",{href:!0});var jbt=s(yz);C1r=r(jbt,"TFMobileBertForMultipleChoice"),jbt.forEach(t),w1r=r(qxe," (MobileBERT model)"),qxe.forEach(t),A1r=i(ie),TT=n(ie,"LI",{});var Nxe=s(TT);w7e=n(Nxe,"STRONG",{});var Dbt=s(w7e);y1r=r(Dbt,"mpnet"),Dbt.forEach(t),L1r=r(Nxe," \u2014 "),Lz=n(Nxe,"A",{href:!0});var Gbt=s(Lz);x1r=r(Gbt,"TFMPNetForMultipleChoice"),Gbt.forEach(t),k1r=r(Nxe," (MPNet model)"),Nxe.forEach(t),S1r=i(ie),MT=n(ie,"LI",{});var jxe=s(MT);A7e=n(jxe,"STRONG",{});var Obt=s(A7e);R1r=r(Obt,"rembert"),Obt.forEach(t),B1r=r(jxe," \u2014 "),xz=n(jxe,"A",{href:!0});var Vbt=s(xz);P1r=r(Vbt,"TFRemBertForMultipleChoice"),Vbt.forEach(t),$1r=r(jxe," (RemBERT model)"),jxe.forEach(t),I1r=i(ie),ET=n(ie,"LI",{});var Dxe=s(ET);y7e=n(Dxe,"STRONG",{});var Xbt=s(y7e);q1r=r(Xbt,"roberta"),Xbt.forEach(t),N1r=r(Dxe," \u2014 "),kz=n(Dxe,"A",{href:!0});var zbt=s(kz);j1r=r(zbt,"TFRobertaForMultipleChoice"),zbt.forEach(t),D1r=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),G1r=i(ie),CT=n(ie,"LI",{});var Gxe=s(CT);L7e=n(Gxe,"STRONG",{});var Qbt=s(L7e);O1r=r(Qbt,"roformer"),Qbt.forEach(t),V1r=r(Gxe," \u2014 "),Sz=n(Gxe,"A",{href:!0});var Wbt=s(Sz);X1r=r(Wbt,"TFRoFormerForMultipleChoice"),Wbt.forEach(t),z1r=r(Gxe," (RoFormer model)"),Gxe.forEach(t),Q1r=i(ie),wT=n(ie,"LI",{});var Oxe=s(wT);x7e=n(Oxe,"STRONG",{});var Hbt=s(x7e);W1r=r(Hbt,"xlm"),Hbt.forEach(t),H1r=r(Oxe," \u2014 "),Rz=n(Oxe,"A",{href:!0});var Ubt=s(Rz);U1r=r(Ubt,"TFXLMForMultipleChoice"),Ubt.forEach(t),J1r=r(Oxe," (XLM model)"),Oxe.forEach(t),Y1r=i(ie),AT=n(ie,"LI",{});var Vxe=s(AT);k7e=n(Vxe,"STRONG",{});var Jbt=s(k7e);K1r=r(Jbt,"xlm-roberta"),Jbt.forEach(t),Z1r=r(Vxe," \u2014 "),Bz=n(Vxe,"A",{href:!0});var Ybt=s(Bz);e7r=r(Ybt,"TFXLMRobertaForMultipleChoice"),Ybt.forEach(t),o7r=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),r7r=i(ie),yT=n(ie,"LI",{});var Xxe=s(yT);S7e=n(Xxe,"STRONG",{});var Kbt=s(S7e);t7r=r(Kbt,"xlnet"),Kbt.forEach(t),a7r=r(Xxe," \u2014 "),Pz=n(Xxe,"A",{href:!0});var Zbt=s(Pz);n7r=r(Zbt,"TFXLNetForMultipleChoice"),Zbt.forEach(t),s7r=r(Xxe," (XLNet model)"),Xxe.forEach(t),ie.forEach(t),l7r=i(Ma),R7e=n(Ma,"P",{});var e5t=s(R7e);i7r=r(e5t,"Examples:"),e5t.forEach(t),d7r=i(Ma),m(iy.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),HBe=i(c),qc=n(c,"H2",{class:!0});var nIe=s(qc);LT=n(nIe,"A",{id:!0,class:!0,href:!0});var o5t=s(LT);B7e=n(o5t,"SPAN",{});var r5t=s(B7e);m(dy.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),c7r=i(nIe),P7e=n(nIe,"SPAN",{});var t5t=s(P7e);f7r=r(t5t,"TFAutoModelForTableQuestionAnswering"),t5t.forEach(t),nIe.forEach(t),UBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(cy.$$.fragment,oi),m7r=i(oi),Nc=n(oi,"P",{});var yJ=s(Nc);g7r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$z=n(yJ,"A",{href:!0});var a5t=s($z);h7r=r(a5t,"from_pretrained()"),a5t.forEach(t),p7r=r(yJ," class method or the "),Iz=n(yJ,"A",{href:!0});var n5t=s(Iz);_7r=r(n5t,"from_config()"),n5t.forEach(t),u7r=r(yJ,` class
method.`),yJ.forEach(t),b7r=i(oi),fy=n(oi,"P",{});var sIe=s(fy);F7r=r(sIe,"This class cannot be instantiated directly using "),$7e=n(sIe,"CODE",{});var s5t=s($7e);v7r=r(s5t,"__init__()"),s5t.forEach(t),T7r=r(sIe," (throws an error)."),sIe.forEach(t),M7r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(my.$$.fragment,ri),E7r=i(ri),I7e=n(ri,"P",{});var l5t=s(I7e);C7r=r(l5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l5t.forEach(t),w7r=i(ri),jc=n(ri,"P",{});var LJ=s(jc);A7r=r(LJ,`Note:
Loading a model from its configuration file does `),q7e=n(LJ,"STRONG",{});var i5t=s(q7e);y7r=r(i5t,"not"),i5t.forEach(t),L7r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(LJ,"A",{href:!0});var d5t=s(qz);x7r=r(d5t,"from_pretrained()"),d5t.forEach(t),k7r=r(LJ," to load the model weights."),LJ.forEach(t),S7r=i(ri),N7e=n(ri,"P",{});var c5t=s(N7e);R7r=r(c5t,"Examples:"),c5t.forEach(t),B7r=i(ri),m(gy.$$.fragment,ri),ri.forEach(t),P7r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(hy.$$.fragment,Ea),$7r=i(Ea),j7e=n(Ea,"P",{});var f5t=s(j7e);I7r=r(f5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),f5t.forEach(t),q7r=i(Ea),Cn=n(Ea,"P",{});var dC=s(Cn);N7r=r(dC,"The model class to instantiate is selected based on the "),D7e=n(dC,"CODE",{});var m5t=s(D7e);j7r=r(m5t,"model_type"),m5t.forEach(t),D7r=r(dC,` property of the config object (either
passed as an argument or loaded from `),G7e=n(dC,"CODE",{});var g5t=s(G7e);G7r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),O7r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(dC,"CODE",{});var h5t=s(O7e);V7r=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),X7r=r(dC,":"),dC.forEach(t),z7r=i(Ea),V7e=n(Ea,"UL",{});var p5t=s(V7e);xT=n(p5t,"LI",{});var zxe=s(xT);X7e=n(zxe,"STRONG",{});var _5t=s(X7e);Q7r=r(_5t,"tapas"),_5t.forEach(t),W7r=r(zxe," \u2014 "),Nz=n(zxe,"A",{href:!0});var u5t=s(Nz);H7r=r(u5t,"TFTapasForQuestionAnswering"),u5t.forEach(t),U7r=r(zxe," (TAPAS model)"),zxe.forEach(t),p5t.forEach(t),J7r=i(Ea),z7e=n(Ea,"P",{});var b5t=s(z7e);Y7r=r(b5t,"Examples:"),b5t.forEach(t),K7r=i(Ea),m(py.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),JBe=i(c),Dc=n(c,"H2",{class:!0});var lIe=s(Dc);kT=n(lIe,"A",{id:!0,class:!0,href:!0});var F5t=s(kT);Q7e=n(F5t,"SPAN",{});var v5t=s(Q7e);m(_y.$$.fragment,v5t),v5t.forEach(t),F5t.forEach(t),Z7r=i(lIe),W7e=n(lIe,"SPAN",{});var T5t=s(W7e);ebr=r(T5t,"TFAutoModelForTokenClassification"),T5t.forEach(t),lIe.forEach(t),YBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(uy.$$.fragment,ti),obr=i(ti),Gc=n(ti,"P",{});var xJ=s(Gc);rbr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=n(xJ,"A",{href:!0});var M5t=s(jz);tbr=r(M5t,"from_pretrained()"),M5t.forEach(t),abr=r(xJ," class method or the "),Dz=n(xJ,"A",{href:!0});var E5t=s(Dz);nbr=r(E5t,"from_config()"),E5t.forEach(t),sbr=r(xJ,` class
method.`),xJ.forEach(t),lbr=i(ti),by=n(ti,"P",{});var iIe=s(by);ibr=r(iIe,"This class cannot be instantiated directly using "),H7e=n(iIe,"CODE",{});var C5t=s(H7e);dbr=r(C5t,"__init__()"),C5t.forEach(t),cbr=r(iIe," (throws an error)."),iIe.forEach(t),fbr=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(Fy.$$.fragment,ai),mbr=i(ai),U7e=n(ai,"P",{});var w5t=s(U7e);gbr=r(w5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w5t.forEach(t),hbr=i(ai),Oc=n(ai,"P",{});var kJ=s(Oc);pbr=r(kJ,`Note:
Loading a model from its configuration file does `),J7e=n(kJ,"STRONG",{});var A5t=s(J7e);_br=r(A5t,"not"),A5t.forEach(t),ubr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(kJ,"A",{href:!0});var y5t=s(Gz);bbr=r(y5t,"from_pretrained()"),y5t.forEach(t),Fbr=r(kJ," to load the model weights."),kJ.forEach(t),vbr=i(ai),Y7e=n(ai,"P",{});var L5t=s(Y7e);Tbr=r(L5t,"Examples:"),L5t.forEach(t),Mbr=i(ai),m(vy.$$.fragment,ai),ai.forEach(t),Ebr=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(Ty.$$.fragment,Ca),Cbr=i(Ca),K7e=n(Ca,"P",{});var x5t=s(K7e);wbr=r(x5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x5t.forEach(t),Abr=i(Ca),wn=n(Ca,"P",{});var cC=s(wn);ybr=r(cC,"The model class to instantiate is selected based on the "),Z7e=n(cC,"CODE",{});var k5t=s(Z7e);Lbr=r(k5t,"model_type"),k5t.forEach(t),xbr=r(cC,` property of the config object (either
passed as an argument or loaded from `),ebe=n(cC,"CODE",{});var S5t=s(ebe);kbr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),Sbr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(cC,"CODE",{});var R5t=s(obe);Rbr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Bbr=r(cC,":"),cC.forEach(t),Pbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);ST=n(re,"LI",{});var Qxe=s(ST);rbe=n(Qxe,"STRONG",{});var B5t=s(rbe);$br=r(B5t,"albert"),B5t.forEach(t),Ibr=r(Qxe," \u2014 "),Oz=n(Qxe,"A",{href:!0});var P5t=s(Oz);qbr=r(P5t,"TFAlbertForTokenClassification"),P5t.forEach(t),Nbr=r(Qxe," (ALBERT model)"),Qxe.forEach(t),jbr=i(re),RT=n(re,"LI",{});var Wxe=s(RT);tbe=n(Wxe,"STRONG",{});var $5t=s(tbe);Dbr=r($5t,"bert"),$5t.forEach(t),Gbr=r(Wxe," \u2014 "),Vz=n(Wxe,"A",{href:!0});var I5t=s(Vz);Obr=r(I5t,"TFBertForTokenClassification"),I5t.forEach(t),Vbr=r(Wxe," (BERT model)"),Wxe.forEach(t),Xbr=i(re),BT=n(re,"LI",{});var Hxe=s(BT);abe=n(Hxe,"STRONG",{});var q5t=s(abe);zbr=r(q5t,"camembert"),q5t.forEach(t),Qbr=r(Hxe," \u2014 "),Xz=n(Hxe,"A",{href:!0});var N5t=s(Xz);Wbr=r(N5t,"TFCamembertForTokenClassification"),N5t.forEach(t),Hbr=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),Ubr=i(re),PT=n(re,"LI",{});var Uxe=s(PT);nbe=n(Uxe,"STRONG",{});var j5t=s(nbe);Jbr=r(j5t,"convbert"),j5t.forEach(t),Ybr=r(Uxe," \u2014 "),zz=n(Uxe,"A",{href:!0});var D5t=s(zz);Kbr=r(D5t,"TFConvBertForTokenClassification"),D5t.forEach(t),Zbr=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),e5r=i(re),$T=n(re,"LI",{});var Jxe=s($T);sbe=n(Jxe,"STRONG",{});var G5t=s(sbe);o5r=r(G5t,"deberta"),G5t.forEach(t),r5r=r(Jxe," \u2014 "),Qz=n(Jxe,"A",{href:!0});var O5t=s(Qz);t5r=r(O5t,"TFDebertaForTokenClassification"),O5t.forEach(t),a5r=r(Jxe," (DeBERTa model)"),Jxe.forEach(t),n5r=i(re),IT=n(re,"LI",{});var Yxe=s(IT);lbe=n(Yxe,"STRONG",{});var V5t=s(lbe);s5r=r(V5t,"deberta-v2"),V5t.forEach(t),l5r=r(Yxe," \u2014 "),Wz=n(Yxe,"A",{href:!0});var X5t=s(Wz);i5r=r(X5t,"TFDebertaV2ForTokenClassification"),X5t.forEach(t),d5r=r(Yxe," (DeBERTa-v2 model)"),Yxe.forEach(t),c5r=i(re),qT=n(re,"LI",{});var Kxe=s(qT);ibe=n(Kxe,"STRONG",{});var z5t=s(ibe);f5r=r(z5t,"distilbert"),z5t.forEach(t),m5r=r(Kxe," \u2014 "),Hz=n(Kxe,"A",{href:!0});var Q5t=s(Hz);g5r=r(Q5t,"TFDistilBertForTokenClassification"),Q5t.forEach(t),h5r=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),p5r=i(re),NT=n(re,"LI",{});var Zxe=s(NT);dbe=n(Zxe,"STRONG",{});var W5t=s(dbe);_5r=r(W5t,"electra"),W5t.forEach(t),u5r=r(Zxe," \u2014 "),Uz=n(Zxe,"A",{href:!0});var H5t=s(Uz);b5r=r(H5t,"TFElectraForTokenClassification"),H5t.forEach(t),F5r=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),v5r=i(re),jT=n(re,"LI",{});var eke=s(jT);cbe=n(eke,"STRONG",{});var U5t=s(cbe);T5r=r(U5t,"flaubert"),U5t.forEach(t),M5r=r(eke," \u2014 "),Jz=n(eke,"A",{href:!0});var J5t=s(Jz);E5r=r(J5t,"TFFlaubertForTokenClassification"),J5t.forEach(t),C5r=r(eke," (FlauBERT model)"),eke.forEach(t),w5r=i(re),DT=n(re,"LI",{});var oke=s(DT);fbe=n(oke,"STRONG",{});var Y5t=s(fbe);A5r=r(Y5t,"funnel"),Y5t.forEach(t),y5r=r(oke," \u2014 "),Yz=n(oke,"A",{href:!0});var K5t=s(Yz);L5r=r(K5t,"TFFunnelForTokenClassification"),K5t.forEach(t),x5r=r(oke," (Funnel Transformer model)"),oke.forEach(t),k5r=i(re),GT=n(re,"LI",{});var rke=s(GT);mbe=n(rke,"STRONG",{});var Z5t=s(mbe);S5r=r(Z5t,"layoutlm"),Z5t.forEach(t),R5r=r(rke," \u2014 "),Kz=n(rke,"A",{href:!0});var e3t=s(Kz);B5r=r(e3t,"TFLayoutLMForTokenClassification"),e3t.forEach(t),P5r=r(rke," (LayoutLM model)"),rke.forEach(t),$5r=i(re),OT=n(re,"LI",{});var tke=s(OT);gbe=n(tke,"STRONG",{});var o3t=s(gbe);I5r=r(o3t,"longformer"),o3t.forEach(t),q5r=r(tke," \u2014 "),Zz=n(tke,"A",{href:!0});var r3t=s(Zz);N5r=r(r3t,"TFLongformerForTokenClassification"),r3t.forEach(t),j5r=r(tke," (Longformer model)"),tke.forEach(t),D5r=i(re),VT=n(re,"LI",{});var ake=s(VT);hbe=n(ake,"STRONG",{});var t3t=s(hbe);G5r=r(t3t,"mobilebert"),t3t.forEach(t),O5r=r(ake," \u2014 "),eQ=n(ake,"A",{href:!0});var a3t=s(eQ);V5r=r(a3t,"TFMobileBertForTokenClassification"),a3t.forEach(t),X5r=r(ake," (MobileBERT model)"),ake.forEach(t),z5r=i(re),XT=n(re,"LI",{});var nke=s(XT);pbe=n(nke,"STRONG",{});var n3t=s(pbe);Q5r=r(n3t,"mpnet"),n3t.forEach(t),W5r=r(nke," \u2014 "),oQ=n(nke,"A",{href:!0});var s3t=s(oQ);H5r=r(s3t,"TFMPNetForTokenClassification"),s3t.forEach(t),U5r=r(nke," (MPNet model)"),nke.forEach(t),J5r=i(re),zT=n(re,"LI",{});var ske=s(zT);_be=n(ske,"STRONG",{});var l3t=s(_be);Y5r=r(l3t,"rembert"),l3t.forEach(t),K5r=r(ske," \u2014 "),rQ=n(ske,"A",{href:!0});var i3t=s(rQ);Z5r=r(i3t,"TFRemBertForTokenClassification"),i3t.forEach(t),e3r=r(ske," (RemBERT model)"),ske.forEach(t),o3r=i(re),QT=n(re,"LI",{});var lke=s(QT);ube=n(lke,"STRONG",{});var d3t=s(ube);r3r=r(d3t,"roberta"),d3t.forEach(t),t3r=r(lke," \u2014 "),tQ=n(lke,"A",{href:!0});var c3t=s(tQ);a3r=r(c3t,"TFRobertaForTokenClassification"),c3t.forEach(t),n3r=r(lke," (RoBERTa model)"),lke.forEach(t),s3r=i(re),WT=n(re,"LI",{});var ike=s(WT);bbe=n(ike,"STRONG",{});var f3t=s(bbe);l3r=r(f3t,"roformer"),f3t.forEach(t),i3r=r(ike," \u2014 "),aQ=n(ike,"A",{href:!0});var m3t=s(aQ);d3r=r(m3t,"TFRoFormerForTokenClassification"),m3t.forEach(t),c3r=r(ike," (RoFormer model)"),ike.forEach(t),f3r=i(re),HT=n(re,"LI",{});var dke=s(HT);Fbe=n(dke,"STRONG",{});var g3t=s(Fbe);m3r=r(g3t,"xlm"),g3t.forEach(t),g3r=r(dke," \u2014 "),nQ=n(dke,"A",{href:!0});var h3t=s(nQ);h3r=r(h3t,"TFXLMForTokenClassification"),h3t.forEach(t),p3r=r(dke," (XLM model)"),dke.forEach(t),_3r=i(re),UT=n(re,"LI",{});var cke=s(UT);vbe=n(cke,"STRONG",{});var p3t=s(vbe);u3r=r(p3t,"xlm-roberta"),p3t.forEach(t),b3r=r(cke," \u2014 "),sQ=n(cke,"A",{href:!0});var _3t=s(sQ);F3r=r(_3t,"TFXLMRobertaForTokenClassification"),_3t.forEach(t),v3r=r(cke," (XLM-RoBERTa model)"),cke.forEach(t),T3r=i(re),JT=n(re,"LI",{});var fke=s(JT);Tbe=n(fke,"STRONG",{});var u3t=s(Tbe);M3r=r(u3t,"xlnet"),u3t.forEach(t),E3r=r(fke," \u2014 "),lQ=n(fke,"A",{href:!0});var b3t=s(lQ);C3r=r(b3t,"TFXLNetForTokenClassification"),b3t.forEach(t),w3r=r(fke," (XLNet model)"),fke.forEach(t),re.forEach(t),A3r=i(Ca),Mbe=n(Ca,"P",{});var F3t=s(Mbe);y3r=r(F3t,"Examples:"),F3t.forEach(t),L3r=i(Ca),m(My.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),KBe=i(c),Vc=n(c,"H2",{class:!0});var dIe=s(Vc);YT=n(dIe,"A",{id:!0,class:!0,href:!0});var v3t=s(YT);Ebe=n(v3t,"SPAN",{});var T3t=s(Ebe);m(Ey.$$.fragment,T3t),T3t.forEach(t),v3t.forEach(t),x3r=i(dIe),Cbe=n(dIe,"SPAN",{});var M3t=s(Cbe);k3r=r(M3t,"TFAutoModelForQuestionAnswering"),M3t.forEach(t),dIe.forEach(t),ZBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(Cy.$$.fragment,ni),S3r=i(ni),Xc=n(ni,"P",{});var SJ=s(Xc);R3r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iQ=n(SJ,"A",{href:!0});var E3t=s(iQ);B3r=r(E3t,"from_pretrained()"),E3t.forEach(t),P3r=r(SJ," class method or the "),dQ=n(SJ,"A",{href:!0});var C3t=s(dQ);$3r=r(C3t,"from_config()"),C3t.forEach(t),I3r=r(SJ,` class
method.`),SJ.forEach(t),q3r=i(ni),wy=n(ni,"P",{});var cIe=s(wy);N3r=r(cIe,"This class cannot be instantiated directly using "),wbe=n(cIe,"CODE",{});var w3t=s(wbe);j3r=r(w3t,"__init__()"),w3t.forEach(t),D3r=r(cIe," (throws an error)."),cIe.forEach(t),G3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(Ay.$$.fragment,si),O3r=i(si),Abe=n(si,"P",{});var A3t=s(Abe);V3r=r(A3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A3t.forEach(t),X3r=i(si),zc=n(si,"P",{});var RJ=s(zc);z3r=r(RJ,`Note:
Loading a model from its configuration file does `),ybe=n(RJ,"STRONG",{});var y3t=s(ybe);Q3r=r(y3t,"not"),y3t.forEach(t),W3r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(RJ,"A",{href:!0});var L3t=s(cQ);H3r=r(L3t,"from_pretrained()"),L3t.forEach(t),U3r=r(RJ," to load the model weights."),RJ.forEach(t),J3r=i(si),Lbe=n(si,"P",{});var x3t=s(Lbe);Y3r=r(x3t,"Examples:"),x3t.forEach(t),K3r=i(si),m(yy.$$.fragment,si),si.forEach(t),Z3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(Ly.$$.fragment,wa),e2r=i(wa),xbe=n(wa,"P",{});var k3t=s(xbe);o2r=r(k3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),k3t.forEach(t),r2r=i(wa),An=n(wa,"P",{});var fC=s(An);t2r=r(fC,"The model class to instantiate is selected based on the "),kbe=n(fC,"CODE",{});var S3t=s(kbe);a2r=r(S3t,"model_type"),S3t.forEach(t),n2r=r(fC,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(fC,"CODE",{});var R3t=s(Sbe);s2r=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),l2r=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(fC,"CODE",{});var B3t=s(Rbe);i2r=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),d2r=r(fC,":"),fC.forEach(t),c2r=i(wa),K=n(wa,"UL",{});var te=s(K);KT=n(te,"LI",{});var mke=s(KT);Bbe=n(mke,"STRONG",{});var P3t=s(Bbe);f2r=r(P3t,"albert"),P3t.forEach(t),m2r=r(mke," \u2014 "),fQ=n(mke,"A",{href:!0});var $3t=s(fQ);g2r=r($3t,"TFAlbertForQuestionAnswering"),$3t.forEach(t),h2r=r(mke," (ALBERT model)"),mke.forEach(t),p2r=i(te),ZT=n(te,"LI",{});var gke=s(ZT);Pbe=n(gke,"STRONG",{});var I3t=s(Pbe);_2r=r(I3t,"bert"),I3t.forEach(t),u2r=r(gke," \u2014 "),mQ=n(gke,"A",{href:!0});var q3t=s(mQ);b2r=r(q3t,"TFBertForQuestionAnswering"),q3t.forEach(t),F2r=r(gke," (BERT model)"),gke.forEach(t),v2r=i(te),eM=n(te,"LI",{});var hke=s(eM);$be=n(hke,"STRONG",{});var N3t=s($be);T2r=r(N3t,"camembert"),N3t.forEach(t),M2r=r(hke," \u2014 "),gQ=n(hke,"A",{href:!0});var j3t=s(gQ);E2r=r(j3t,"TFCamembertForQuestionAnswering"),j3t.forEach(t),C2r=r(hke," (CamemBERT model)"),hke.forEach(t),w2r=i(te),oM=n(te,"LI",{});var pke=s(oM);Ibe=n(pke,"STRONG",{});var D3t=s(Ibe);A2r=r(D3t,"convbert"),D3t.forEach(t),y2r=r(pke," \u2014 "),hQ=n(pke,"A",{href:!0});var G3t=s(hQ);L2r=r(G3t,"TFConvBertForQuestionAnswering"),G3t.forEach(t),x2r=r(pke," (ConvBERT model)"),pke.forEach(t),k2r=i(te),rM=n(te,"LI",{});var _ke=s(rM);qbe=n(_ke,"STRONG",{});var O3t=s(qbe);S2r=r(O3t,"deberta"),O3t.forEach(t),R2r=r(_ke," \u2014 "),pQ=n(_ke,"A",{href:!0});var V3t=s(pQ);B2r=r(V3t,"TFDebertaForQuestionAnswering"),V3t.forEach(t),P2r=r(_ke," (DeBERTa model)"),_ke.forEach(t),$2r=i(te),tM=n(te,"LI",{});var uke=s(tM);Nbe=n(uke,"STRONG",{});var X3t=s(Nbe);I2r=r(X3t,"deberta-v2"),X3t.forEach(t),q2r=r(uke," \u2014 "),_Q=n(uke,"A",{href:!0});var z3t=s(_Q);N2r=r(z3t,"TFDebertaV2ForQuestionAnswering"),z3t.forEach(t),j2r=r(uke," (DeBERTa-v2 model)"),uke.forEach(t),D2r=i(te),aM=n(te,"LI",{});var bke=s(aM);jbe=n(bke,"STRONG",{});var Q3t=s(jbe);G2r=r(Q3t,"distilbert"),Q3t.forEach(t),O2r=r(bke," \u2014 "),uQ=n(bke,"A",{href:!0});var W3t=s(uQ);V2r=r(W3t,"TFDistilBertForQuestionAnswering"),W3t.forEach(t),X2r=r(bke," (DistilBERT model)"),bke.forEach(t),z2r=i(te),nM=n(te,"LI",{});var Fke=s(nM);Dbe=n(Fke,"STRONG",{});var H3t=s(Dbe);Q2r=r(H3t,"electra"),H3t.forEach(t),W2r=r(Fke," \u2014 "),bQ=n(Fke,"A",{href:!0});var U3t=s(bQ);H2r=r(U3t,"TFElectraForQuestionAnswering"),U3t.forEach(t),U2r=r(Fke," (ELECTRA model)"),Fke.forEach(t),J2r=i(te),sM=n(te,"LI",{});var vke=s(sM);Gbe=n(vke,"STRONG",{});var J3t=s(Gbe);Y2r=r(J3t,"flaubert"),J3t.forEach(t),K2r=r(vke," \u2014 "),FQ=n(vke,"A",{href:!0});var Y3t=s(FQ);Z2r=r(Y3t,"TFFlaubertForQuestionAnsweringSimple"),Y3t.forEach(t),eFr=r(vke," (FlauBERT model)"),vke.forEach(t),oFr=i(te),lM=n(te,"LI",{});var Tke=s(lM);Obe=n(Tke,"STRONG",{});var K3t=s(Obe);rFr=r(K3t,"funnel"),K3t.forEach(t),tFr=r(Tke," \u2014 "),vQ=n(Tke,"A",{href:!0});var Z3t=s(vQ);aFr=r(Z3t,"TFFunnelForQuestionAnswering"),Z3t.forEach(t),nFr=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),sFr=i(te),iM=n(te,"LI",{});var Mke=s(iM);Vbe=n(Mke,"STRONG",{});var e2t=s(Vbe);lFr=r(e2t,"gptj"),e2t.forEach(t),iFr=r(Mke," \u2014 "),TQ=n(Mke,"A",{href:!0});var o2t=s(TQ);dFr=r(o2t,"TFGPTJForQuestionAnswering"),o2t.forEach(t),cFr=r(Mke," (GPT-J model)"),Mke.forEach(t),fFr=i(te),dM=n(te,"LI",{});var Eke=s(dM);Xbe=n(Eke,"STRONG",{});var r2t=s(Xbe);mFr=r(r2t,"longformer"),r2t.forEach(t),gFr=r(Eke," \u2014 "),MQ=n(Eke,"A",{href:!0});var t2t=s(MQ);hFr=r(t2t,"TFLongformerForQuestionAnswering"),t2t.forEach(t),pFr=r(Eke," (Longformer model)"),Eke.forEach(t),_Fr=i(te),cM=n(te,"LI",{});var Cke=s(cM);zbe=n(Cke,"STRONG",{});var a2t=s(zbe);uFr=r(a2t,"mobilebert"),a2t.forEach(t),bFr=r(Cke," \u2014 "),EQ=n(Cke,"A",{href:!0});var n2t=s(EQ);FFr=r(n2t,"TFMobileBertForQuestionAnswering"),n2t.forEach(t),vFr=r(Cke," (MobileBERT model)"),Cke.forEach(t),TFr=i(te),fM=n(te,"LI",{});var wke=s(fM);Qbe=n(wke,"STRONG",{});var s2t=s(Qbe);MFr=r(s2t,"mpnet"),s2t.forEach(t),EFr=r(wke," \u2014 "),CQ=n(wke,"A",{href:!0});var l2t=s(CQ);CFr=r(l2t,"TFMPNetForQuestionAnswering"),l2t.forEach(t),wFr=r(wke," (MPNet model)"),wke.forEach(t),AFr=i(te),mM=n(te,"LI",{});var Ake=s(mM);Wbe=n(Ake,"STRONG",{});var i2t=s(Wbe);yFr=r(i2t,"rembert"),i2t.forEach(t),LFr=r(Ake," \u2014 "),wQ=n(Ake,"A",{href:!0});var d2t=s(wQ);xFr=r(d2t,"TFRemBertForQuestionAnswering"),d2t.forEach(t),kFr=r(Ake," (RemBERT model)"),Ake.forEach(t),SFr=i(te),gM=n(te,"LI",{});var yke=s(gM);Hbe=n(yke,"STRONG",{});var c2t=s(Hbe);RFr=r(c2t,"roberta"),c2t.forEach(t),BFr=r(yke," \u2014 "),AQ=n(yke,"A",{href:!0});var f2t=s(AQ);PFr=r(f2t,"TFRobertaForQuestionAnswering"),f2t.forEach(t),$Fr=r(yke," (RoBERTa model)"),yke.forEach(t),IFr=i(te),hM=n(te,"LI",{});var Lke=s(hM);Ube=n(Lke,"STRONG",{});var m2t=s(Ube);qFr=r(m2t,"roformer"),m2t.forEach(t),NFr=r(Lke," \u2014 "),yQ=n(Lke,"A",{href:!0});var g2t=s(yQ);jFr=r(g2t,"TFRoFormerForQuestionAnswering"),g2t.forEach(t),DFr=r(Lke," (RoFormer model)"),Lke.forEach(t),GFr=i(te),pM=n(te,"LI",{});var xke=s(pM);Jbe=n(xke,"STRONG",{});var h2t=s(Jbe);OFr=r(h2t,"xlm"),h2t.forEach(t),VFr=r(xke," \u2014 "),LQ=n(xke,"A",{href:!0});var p2t=s(LQ);XFr=r(p2t,"TFXLMForQuestionAnsweringSimple"),p2t.forEach(t),zFr=r(xke," (XLM model)"),xke.forEach(t),QFr=i(te),_M=n(te,"LI",{});var kke=s(_M);Ybe=n(kke,"STRONG",{});var _2t=s(Ybe);WFr=r(_2t,"xlm-roberta"),_2t.forEach(t),HFr=r(kke," \u2014 "),xQ=n(kke,"A",{href:!0});var u2t=s(xQ);UFr=r(u2t,"TFXLMRobertaForQuestionAnswering"),u2t.forEach(t),JFr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),YFr=i(te),uM=n(te,"LI",{});var Ske=s(uM);Kbe=n(Ske,"STRONG",{});var b2t=s(Kbe);KFr=r(b2t,"xlnet"),b2t.forEach(t),ZFr=r(Ske," \u2014 "),kQ=n(Ske,"A",{href:!0});var F2t=s(kQ);evr=r(F2t,"TFXLNetForQuestionAnsweringSimple"),F2t.forEach(t),ovr=r(Ske," (XLNet model)"),Ske.forEach(t),te.forEach(t),rvr=i(wa),Zbe=n(wa,"P",{});var v2t=s(Zbe);tvr=r(v2t,"Examples:"),v2t.forEach(t),avr=i(wa),m(xy.$$.fragment,wa),wa.forEach(t),ni.forEach(t),ePe=i(c),Qc=n(c,"H2",{class:!0});var fIe=s(Qc);bM=n(fIe,"A",{id:!0,class:!0,href:!0});var T2t=s(bM);e5e=n(T2t,"SPAN",{});var M2t=s(e5e);m(ky.$$.fragment,M2t),M2t.forEach(t),T2t.forEach(t),nvr=i(fIe),o5e=n(fIe,"SPAN",{});var E2t=s(o5e);svr=r(E2t,"TFAutoModelForVision2Seq"),E2t.forEach(t),fIe.forEach(t),oPe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Sy.$$.fragment,li),lvr=i(li),Wc=n(li,"P",{});var BJ=s(Wc);ivr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SQ=n(BJ,"A",{href:!0});var C2t=s(SQ);dvr=r(C2t,"from_pretrained()"),C2t.forEach(t),cvr=r(BJ," class method or the "),RQ=n(BJ,"A",{href:!0});var w2t=s(RQ);fvr=r(w2t,"from_config()"),w2t.forEach(t),mvr=r(BJ,` class
method.`),BJ.forEach(t),gvr=i(li),Ry=n(li,"P",{});var mIe=s(Ry);hvr=r(mIe,"This class cannot be instantiated directly using "),r5e=n(mIe,"CODE",{});var A2t=s(r5e);pvr=r(A2t,"__init__()"),A2t.forEach(t),_vr=r(mIe," (throws an error)."),mIe.forEach(t),uvr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(By.$$.fragment,ii),bvr=i(ii),t5e=n(ii,"P",{});var y2t=s(t5e);Fvr=r(y2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y2t.forEach(t),vvr=i(ii),Hc=n(ii,"P",{});var PJ=s(Hc);Tvr=r(PJ,`Note:
Loading a model from its configuration file does `),a5e=n(PJ,"STRONG",{});var L2t=s(a5e);Mvr=r(L2t,"not"),L2t.forEach(t),Evr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(PJ,"A",{href:!0});var x2t=s(BQ);Cvr=r(x2t,"from_pretrained()"),x2t.forEach(t),wvr=r(PJ," to load the model weights."),PJ.forEach(t),Avr=i(ii),n5e=n(ii,"P",{});var k2t=s(n5e);yvr=r(k2t,"Examples:"),k2t.forEach(t),Lvr=i(ii),m(Py.$$.fragment,ii),ii.forEach(t),xvr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m($y.$$.fragment,Aa),kvr=i(Aa),s5e=n(Aa,"P",{});var S2t=s(s5e);Svr=r(S2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S2t.forEach(t),Rvr=i(Aa),yn=n(Aa,"P",{});var mC=s(yn);Bvr=r(mC,"The model class to instantiate is selected based on the "),l5e=n(mC,"CODE",{});var R2t=s(l5e);Pvr=r(R2t,"model_type"),R2t.forEach(t),$vr=r(mC,` property of the config object (either
passed as an argument or loaded from `),i5e=n(mC,"CODE",{});var B2t=s(i5e);Ivr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),qvr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(mC,"CODE",{});var P2t=s(d5e);Nvr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),jvr=r(mC,":"),mC.forEach(t),Dvr=i(Aa),c5e=n(Aa,"UL",{});var $2t=s(c5e);FM=n($2t,"LI",{});var Rke=s(FM);f5e=n(Rke,"STRONG",{});var I2t=s(f5e);Gvr=r(I2t,"vision-encoder-decoder"),I2t.forEach(t),Ovr=r(Rke," \u2014 "),PQ=n(Rke,"A",{href:!0});var q2t=s(PQ);Vvr=r(q2t,"TFVisionEncoderDecoderModel"),q2t.forEach(t),Xvr=r(Rke," (Vision Encoder decoder model)"),Rke.forEach(t),$2t.forEach(t),zvr=i(Aa),m5e=n(Aa,"P",{});var N2t=s(m5e);Qvr=r(N2t,"Examples:"),N2t.forEach(t),Wvr=i(Aa),m(Iy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),rPe=i(c),Uc=n(c,"H2",{class:!0});var gIe=s(Uc);vM=n(gIe,"A",{id:!0,class:!0,href:!0});var j2t=s(vM);g5e=n(j2t,"SPAN",{});var D2t=s(g5e);m(qy.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),Hvr=i(gIe),h5e=n(gIe,"SPAN",{});var G2t=s(h5e);Uvr=r(G2t,"TFAutoModelForSpeechSeq2Seq"),G2t.forEach(t),gIe.forEach(t),tPe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(Ny.$$.fragment,di),Jvr=i(di),Jc=n(di,"P",{});var $J=s(Jc);Yvr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$Q=n($J,"A",{href:!0});var O2t=s($Q);Kvr=r(O2t,"from_pretrained()"),O2t.forEach(t),Zvr=r($J," class method or the "),IQ=n($J,"A",{href:!0});var V2t=s(IQ);eTr=r(V2t,"from_config()"),V2t.forEach(t),oTr=r($J,` class
method.`),$J.forEach(t),rTr=i(di),jy=n(di,"P",{});var hIe=s(jy);tTr=r(hIe,"This class cannot be instantiated directly using "),p5e=n(hIe,"CODE",{});var X2t=s(p5e);aTr=r(X2t,"__init__()"),X2t.forEach(t),nTr=r(hIe," (throws an error)."),hIe.forEach(t),sTr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(Dy.$$.fragment,ci),lTr=i(ci),_5e=n(ci,"P",{});var z2t=s(_5e);iTr=r(z2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z2t.forEach(t),dTr=i(ci),Yc=n(ci,"P",{});var IJ=s(Yc);cTr=r(IJ,`Note:
Loading a model from its configuration file does `),u5e=n(IJ,"STRONG",{});var Q2t=s(u5e);fTr=r(Q2t,"not"),Q2t.forEach(t),mTr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(IJ,"A",{href:!0});var W2t=s(qQ);gTr=r(W2t,"from_pretrained()"),W2t.forEach(t),hTr=r(IJ," to load the model weights."),IJ.forEach(t),pTr=i(ci),b5e=n(ci,"P",{});var H2t=s(b5e);_Tr=r(H2t,"Examples:"),H2t.forEach(t),uTr=i(ci),m(Gy.$$.fragment,ci),ci.forEach(t),bTr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Oy.$$.fragment,ya),FTr=i(ya),F5e=n(ya,"P",{});var U2t=s(F5e);vTr=r(U2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),U2t.forEach(t),TTr=i(ya),Ln=n(ya,"P",{});var gC=s(Ln);MTr=r(gC,"The model class to instantiate is selected based on the "),v5e=n(gC,"CODE",{});var J2t=s(v5e);ETr=r(J2t,"model_type"),J2t.forEach(t),CTr=r(gC,` property of the config object (either
passed as an argument or loaded from `),T5e=n(gC,"CODE",{});var Y2t=s(T5e);wTr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),ATr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(gC,"CODE",{});var K2t=s(M5e);yTr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),LTr=r(gC,":"),gC.forEach(t),xTr=i(ya),E5e=n(ya,"UL",{});var Z2t=s(E5e);TM=n(Z2t,"LI",{});var Bke=s(TM);C5e=n(Bke,"STRONG",{});var eFt=s(C5e);kTr=r(eFt,"speech_to_text"),eFt.forEach(t),STr=r(Bke," \u2014 "),NQ=n(Bke,"A",{href:!0});var oFt=s(NQ);RTr=r(oFt,"TFSpeech2TextForConditionalGeneration"),oFt.forEach(t),BTr=r(Bke," (Speech2Text model)"),Bke.forEach(t),Z2t.forEach(t),PTr=i(ya),w5e=n(ya,"P",{});var rFt=s(w5e);$Tr=r(rFt,"Examples:"),rFt.forEach(t),ITr=i(ya),m(Vy.$$.fragment,ya),ya.forEach(t),di.forEach(t),aPe=i(c),Kc=n(c,"H2",{class:!0});var pIe=s(Kc);MM=n(pIe,"A",{id:!0,class:!0,href:!0});var tFt=s(MM);A5e=n(tFt,"SPAN",{});var aFt=s(A5e);m(Xy.$$.fragment,aFt),aFt.forEach(t),tFt.forEach(t),qTr=i(pIe),y5e=n(pIe,"SPAN",{});var nFt=s(y5e);NTr=r(nFt,"FlaxAutoModel"),nFt.forEach(t),pIe.forEach(t),nPe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(zy.$$.fragment,fi),jTr=i(fi),Zc=n(fi,"P",{});var qJ=s(Zc);DTr=r(qJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jQ=n(qJ,"A",{href:!0});var sFt=s(jQ);GTr=r(sFt,"from_pretrained()"),sFt.forEach(t),OTr=r(qJ," class method or the "),DQ=n(qJ,"A",{href:!0});var lFt=s(DQ);VTr=r(lFt,"from_config()"),lFt.forEach(t),XTr=r(qJ,` class
method.`),qJ.forEach(t),zTr=i(fi),Qy=n(fi,"P",{});var _Ie=s(Qy);QTr=r(_Ie,"This class cannot be instantiated directly using "),L5e=n(_Ie,"CODE",{});var iFt=s(L5e);WTr=r(iFt,"__init__()"),iFt.forEach(t),HTr=r(_Ie," (throws an error)."),_Ie.forEach(t),UTr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Wy.$$.fragment,mi),JTr=i(mi),x5e=n(mi,"P",{});var dFt=s(x5e);YTr=r(dFt,"Instantiates one of the base model classes of the library from a configuration."),dFt.forEach(t),KTr=i(mi),ef=n(mi,"P",{});var NJ=s(ef);ZTr=r(NJ,`Note:
Loading a model from its configuration file does `),k5e=n(NJ,"STRONG",{});var cFt=s(k5e);eMr=r(cFt,"not"),cFt.forEach(t),oMr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(NJ,"A",{href:!0});var fFt=s(GQ);rMr=r(fFt,"from_pretrained()"),fFt.forEach(t),tMr=r(NJ," to load the model weights."),NJ.forEach(t),aMr=i(mi),S5e=n(mi,"P",{});var mFt=s(S5e);nMr=r(mFt,"Examples:"),mFt.forEach(t),sMr=i(mi),m(Hy.$$.fragment,mi),mi.forEach(t),lMr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Uy.$$.fragment,La),iMr=i(La),R5e=n(La,"P",{});var gFt=s(R5e);dMr=r(gFt,"Instantiate one of the base model classes of the library from a pretrained model."),gFt.forEach(t),cMr=i(La),xn=n(La,"P",{});var hC=s(xn);fMr=r(hC,"The model class to instantiate is selected based on the "),B5e=n(hC,"CODE",{});var hFt=s(B5e);mMr=r(hFt,"model_type"),hFt.forEach(t),gMr=r(hC,` property of the config object (either
passed as an argument or loaded from `),P5e=n(hC,"CODE",{});var pFt=s(P5e);hMr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),pMr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(hC,"CODE",{});var _Ft=s($5e);_Mr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),uMr=r(hC,":"),hC.forEach(t),bMr=i(La),z=n(La,"UL",{});var W=s(z);EM=n(W,"LI",{});var Pke=s(EM);I5e=n(Pke,"STRONG",{});var uFt=s(I5e);FMr=r(uFt,"albert"),uFt.forEach(t),vMr=r(Pke," \u2014 "),OQ=n(Pke,"A",{href:!0});var bFt=s(OQ);TMr=r(bFt,"FlaxAlbertModel"),bFt.forEach(t),MMr=r(Pke," (ALBERT model)"),Pke.forEach(t),EMr=i(W),CM=n(W,"LI",{});var $ke=s(CM);q5e=n($ke,"STRONG",{});var FFt=s(q5e);CMr=r(FFt,"bart"),FFt.forEach(t),wMr=r($ke," \u2014 "),VQ=n($ke,"A",{href:!0});var vFt=s(VQ);AMr=r(vFt,"FlaxBartModel"),vFt.forEach(t),yMr=r($ke," (BART model)"),$ke.forEach(t),LMr=i(W),wM=n(W,"LI",{});var Ike=s(wM);N5e=n(Ike,"STRONG",{});var TFt=s(N5e);xMr=r(TFt,"beit"),TFt.forEach(t),kMr=r(Ike," \u2014 "),XQ=n(Ike,"A",{href:!0});var MFt=s(XQ);SMr=r(MFt,"FlaxBeitModel"),MFt.forEach(t),RMr=r(Ike," (BEiT model)"),Ike.forEach(t),BMr=i(W),AM=n(W,"LI",{});var qke=s(AM);j5e=n(qke,"STRONG",{});var EFt=s(j5e);PMr=r(EFt,"bert"),EFt.forEach(t),$Mr=r(qke," \u2014 "),zQ=n(qke,"A",{href:!0});var CFt=s(zQ);IMr=r(CFt,"FlaxBertModel"),CFt.forEach(t),qMr=r(qke," (BERT model)"),qke.forEach(t),NMr=i(W),yM=n(W,"LI",{});var Nke=s(yM);D5e=n(Nke,"STRONG",{});var wFt=s(D5e);jMr=r(wFt,"big_bird"),wFt.forEach(t),DMr=r(Nke," \u2014 "),QQ=n(Nke,"A",{href:!0});var AFt=s(QQ);GMr=r(AFt,"FlaxBigBirdModel"),AFt.forEach(t),OMr=r(Nke," (BigBird model)"),Nke.forEach(t),VMr=i(W),LM=n(W,"LI",{});var jke=s(LM);G5e=n(jke,"STRONG",{});var yFt=s(G5e);XMr=r(yFt,"blenderbot"),yFt.forEach(t),zMr=r(jke," \u2014 "),WQ=n(jke,"A",{href:!0});var LFt=s(WQ);QMr=r(LFt,"FlaxBlenderbotModel"),LFt.forEach(t),WMr=r(jke," (Blenderbot model)"),jke.forEach(t),HMr=i(W),xM=n(W,"LI",{});var Dke=s(xM);O5e=n(Dke,"STRONG",{});var xFt=s(O5e);UMr=r(xFt,"blenderbot-small"),xFt.forEach(t),JMr=r(Dke," \u2014 "),HQ=n(Dke,"A",{href:!0});var kFt=s(HQ);YMr=r(kFt,"FlaxBlenderbotSmallModel"),kFt.forEach(t),KMr=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),ZMr=i(W),kM=n(W,"LI",{});var Gke=s(kM);V5e=n(Gke,"STRONG",{});var SFt=s(V5e);e4r=r(SFt,"clip"),SFt.forEach(t),o4r=r(Gke," \u2014 "),UQ=n(Gke,"A",{href:!0});var RFt=s(UQ);r4r=r(RFt,"FlaxCLIPModel"),RFt.forEach(t),t4r=r(Gke," (CLIP model)"),Gke.forEach(t),a4r=i(W),SM=n(W,"LI",{});var Oke=s(SM);X5e=n(Oke,"STRONG",{});var BFt=s(X5e);n4r=r(BFt,"distilbert"),BFt.forEach(t),s4r=r(Oke," \u2014 "),JQ=n(Oke,"A",{href:!0});var PFt=s(JQ);l4r=r(PFt,"FlaxDistilBertModel"),PFt.forEach(t),i4r=r(Oke," (DistilBERT model)"),Oke.forEach(t),d4r=i(W),RM=n(W,"LI",{});var Vke=s(RM);z5e=n(Vke,"STRONG",{});var $Ft=s(z5e);c4r=r($Ft,"electra"),$Ft.forEach(t),f4r=r(Vke," \u2014 "),YQ=n(Vke,"A",{href:!0});var IFt=s(YQ);m4r=r(IFt,"FlaxElectraModel"),IFt.forEach(t),g4r=r(Vke," (ELECTRA model)"),Vke.forEach(t),h4r=i(W),BM=n(W,"LI",{});var Xke=s(BM);Q5e=n(Xke,"STRONG",{});var qFt=s(Q5e);p4r=r(qFt,"gpt2"),qFt.forEach(t),_4r=r(Xke," \u2014 "),KQ=n(Xke,"A",{href:!0});var NFt=s(KQ);u4r=r(NFt,"FlaxGPT2Model"),NFt.forEach(t),b4r=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),F4r=i(W),PM=n(W,"LI",{});var zke=s(PM);W5e=n(zke,"STRONG",{});var jFt=s(W5e);v4r=r(jFt,"gpt_neo"),jFt.forEach(t),T4r=r(zke," \u2014 "),ZQ=n(zke,"A",{href:!0});var DFt=s(ZQ);M4r=r(DFt,"FlaxGPTNeoModel"),DFt.forEach(t),E4r=r(zke," (GPT Neo model)"),zke.forEach(t),C4r=i(W),$M=n(W,"LI",{});var Qke=s($M);H5e=n(Qke,"STRONG",{});var GFt=s(H5e);w4r=r(GFt,"gptj"),GFt.forEach(t),A4r=r(Qke," \u2014 "),eW=n(Qke,"A",{href:!0});var OFt=s(eW);y4r=r(OFt,"FlaxGPTJModel"),OFt.forEach(t),L4r=r(Qke," (GPT-J model)"),Qke.forEach(t),x4r=i(W),IM=n(W,"LI",{});var Wke=s(IM);U5e=n(Wke,"STRONG",{});var VFt=s(U5e);k4r=r(VFt,"marian"),VFt.forEach(t),S4r=r(Wke," \u2014 "),oW=n(Wke,"A",{href:!0});var XFt=s(oW);R4r=r(XFt,"FlaxMarianModel"),XFt.forEach(t),B4r=r(Wke," (Marian model)"),Wke.forEach(t),P4r=i(W),qM=n(W,"LI",{});var Hke=s(qM);J5e=n(Hke,"STRONG",{});var zFt=s(J5e);$4r=r(zFt,"mbart"),zFt.forEach(t),I4r=r(Hke," \u2014 "),rW=n(Hke,"A",{href:!0});var QFt=s(rW);q4r=r(QFt,"FlaxMBartModel"),QFt.forEach(t),N4r=r(Hke," (mBART model)"),Hke.forEach(t),j4r=i(W),NM=n(W,"LI",{});var Uke=s(NM);Y5e=n(Uke,"STRONG",{});var WFt=s(Y5e);D4r=r(WFt,"mt5"),WFt.forEach(t),G4r=r(Uke," \u2014 "),tW=n(Uke,"A",{href:!0});var HFt=s(tW);O4r=r(HFt,"FlaxMT5Model"),HFt.forEach(t),V4r=r(Uke," (mT5 model)"),Uke.forEach(t),X4r=i(W),jM=n(W,"LI",{});var Jke=s(jM);K5e=n(Jke,"STRONG",{});var UFt=s(K5e);z4r=r(UFt,"pegasus"),UFt.forEach(t),Q4r=r(Jke," \u2014 "),aW=n(Jke,"A",{href:!0});var JFt=s(aW);W4r=r(JFt,"FlaxPegasusModel"),JFt.forEach(t),H4r=r(Jke," (Pegasus model)"),Jke.forEach(t),U4r=i(W),DM=n(W,"LI",{});var Yke=s(DM);Z5e=n(Yke,"STRONG",{});var YFt=s(Z5e);J4r=r(YFt,"roberta"),YFt.forEach(t),Y4r=r(Yke," \u2014 "),nW=n(Yke,"A",{href:!0});var KFt=s(nW);K4r=r(KFt,"FlaxRobertaModel"),KFt.forEach(t),Z4r=r(Yke," (RoBERTa model)"),Yke.forEach(t),eEr=i(W),GM=n(W,"LI",{});var Kke=s(GM);e3e=n(Kke,"STRONG",{});var ZFt=s(e3e);oEr=r(ZFt,"roformer"),ZFt.forEach(t),rEr=r(Kke," \u2014 "),sW=n(Kke,"A",{href:!0});var evt=s(sW);tEr=r(evt,"FlaxRoFormerModel"),evt.forEach(t),aEr=r(Kke," (RoFormer model)"),Kke.forEach(t),nEr=i(W),OM=n(W,"LI",{});var Zke=s(OM);o3e=n(Zke,"STRONG",{});var ovt=s(o3e);sEr=r(ovt,"t5"),ovt.forEach(t),lEr=r(Zke," \u2014 "),lW=n(Zke,"A",{href:!0});var rvt=s(lW);iEr=r(rvt,"FlaxT5Model"),rvt.forEach(t),dEr=r(Zke," (T5 model)"),Zke.forEach(t),cEr=i(W),VM=n(W,"LI",{});var eSe=s(VM);r3e=n(eSe,"STRONG",{});var tvt=s(r3e);fEr=r(tvt,"vision-text-dual-encoder"),tvt.forEach(t),mEr=r(eSe," \u2014 "),iW=n(eSe,"A",{href:!0});var avt=s(iW);gEr=r(avt,"FlaxVisionTextDualEncoderModel"),avt.forEach(t),hEr=r(eSe," (VisionTextDualEncoder model)"),eSe.forEach(t),pEr=i(W),XM=n(W,"LI",{});var oSe=s(XM);t3e=n(oSe,"STRONG",{});var nvt=s(t3e);_Er=r(nvt,"vit"),nvt.forEach(t),uEr=r(oSe," \u2014 "),dW=n(oSe,"A",{href:!0});var svt=s(dW);bEr=r(svt,"FlaxViTModel"),svt.forEach(t),FEr=r(oSe," (ViT model)"),oSe.forEach(t),vEr=i(W),zM=n(W,"LI",{});var rSe=s(zM);a3e=n(rSe,"STRONG",{});var lvt=s(a3e);TEr=r(lvt,"wav2vec2"),lvt.forEach(t),MEr=r(rSe," \u2014 "),cW=n(rSe,"A",{href:!0});var ivt=s(cW);EEr=r(ivt,"FlaxWav2Vec2Model"),ivt.forEach(t),CEr=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),wEr=i(W),QM=n(W,"LI",{});var tSe=s(QM);n3e=n(tSe,"STRONG",{});var dvt=s(n3e);AEr=r(dvt,"xglm"),dvt.forEach(t),yEr=r(tSe," \u2014 "),fW=n(tSe,"A",{href:!0});var cvt=s(fW);LEr=r(cvt,"FlaxXGLMModel"),cvt.forEach(t),xEr=r(tSe," (XGLM model)"),tSe.forEach(t),kEr=i(W),WM=n(W,"LI",{});var aSe=s(WM);s3e=n(aSe,"STRONG",{});var fvt=s(s3e);SEr=r(fvt,"xlm-roberta"),fvt.forEach(t),REr=r(aSe," \u2014 "),mW=n(aSe,"A",{href:!0});var mvt=s(mW);BEr=r(mvt,"FlaxXLMRobertaModel"),mvt.forEach(t),PEr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),W.forEach(t),$Er=i(La),l3e=n(La,"P",{});var gvt=s(l3e);IEr=r(gvt,"Examples:"),gvt.forEach(t),qEr=i(La),m(Jy.$$.fragment,La),La.forEach(t),fi.forEach(t),sPe=i(c),of=n(c,"H2",{class:!0});var uIe=s(of);HM=n(uIe,"A",{id:!0,class:!0,href:!0});var hvt=s(HM);i3e=n(hvt,"SPAN",{});var pvt=s(i3e);m(Yy.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),NEr=i(uIe),d3e=n(uIe,"SPAN",{});var _vt=s(d3e);jEr=r(_vt,"FlaxAutoModelForCausalLM"),_vt.forEach(t),uIe.forEach(t),lPe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Ky.$$.fragment,gi),DEr=i(gi),rf=n(gi,"P",{});var jJ=s(rf);GEr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gW=n(jJ,"A",{href:!0});var uvt=s(gW);OEr=r(uvt,"from_pretrained()"),uvt.forEach(t),VEr=r(jJ," class method or the "),hW=n(jJ,"A",{href:!0});var bvt=s(hW);XEr=r(bvt,"from_config()"),bvt.forEach(t),zEr=r(jJ,` class
method.`),jJ.forEach(t),QEr=i(gi),Zy=n(gi,"P",{});var bIe=s(Zy);WEr=r(bIe,"This class cannot be instantiated directly using "),c3e=n(bIe,"CODE",{});var Fvt=s(c3e);HEr=r(Fvt,"__init__()"),Fvt.forEach(t),UEr=r(bIe," (throws an error)."),bIe.forEach(t),JEr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(eL.$$.fragment,hi),YEr=i(hi),f3e=n(hi,"P",{});var vvt=s(f3e);KEr=r(vvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vvt.forEach(t),ZEr=i(hi),tf=n(hi,"P",{});var DJ=s(tf);eCr=r(DJ,`Note:
Loading a model from its configuration file does `),m3e=n(DJ,"STRONG",{});var Tvt=s(m3e);oCr=r(Tvt,"not"),Tvt.forEach(t),rCr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(DJ,"A",{href:!0});var Mvt=s(pW);tCr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),aCr=r(DJ," to load the model weights."),DJ.forEach(t),nCr=i(hi),g3e=n(hi,"P",{});var Evt=s(g3e);sCr=r(Evt,"Examples:"),Evt.forEach(t),lCr=i(hi),m(oL.$$.fragment,hi),hi.forEach(t),iCr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(rL.$$.fragment,xa),dCr=i(xa),h3e=n(xa,"P",{});var Cvt=s(h3e);cCr=r(Cvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cvt.forEach(t),fCr=i(xa),kn=n(xa,"P",{});var pC=s(kn);mCr=r(pC,"The model class to instantiate is selected based on the "),p3e=n(pC,"CODE",{});var wvt=s(p3e);gCr=r(wvt,"model_type"),wvt.forEach(t),hCr=r(pC,` property of the config object (either
passed as an argument or loaded from `),_3e=n(pC,"CODE",{});var Avt=s(_3e);pCr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),_Cr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(pC,"CODE",{});var yvt=s(u3e);uCr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),bCr=r(pC,":"),pC.forEach(t),FCr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);UM=n(pi,"LI",{});var nSe=s(UM);b3e=n(nSe,"STRONG",{});var Lvt=s(b3e);vCr=r(Lvt,"bart"),Lvt.forEach(t),TCr=r(nSe," \u2014 "),_W=n(nSe,"A",{href:!0});var xvt=s(_W);MCr=r(xvt,"FlaxBartForCausalLM"),xvt.forEach(t),ECr=r(nSe," (BART model)"),nSe.forEach(t),CCr=i(pi),JM=n(pi,"LI",{});var sSe=s(JM);F3e=n(sSe,"STRONG",{});var kvt=s(F3e);wCr=r(kvt,"gpt2"),kvt.forEach(t),ACr=r(sSe," \u2014 "),uW=n(sSe,"A",{href:!0});var Svt=s(uW);yCr=r(Svt,"FlaxGPT2LMHeadModel"),Svt.forEach(t),LCr=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),xCr=i(pi),YM=n(pi,"LI",{});var lSe=s(YM);v3e=n(lSe,"STRONG",{});var Rvt=s(v3e);kCr=r(Rvt,"gpt_neo"),Rvt.forEach(t),SCr=r(lSe," \u2014 "),bW=n(lSe,"A",{href:!0});var Bvt=s(bW);RCr=r(Bvt,"FlaxGPTNeoForCausalLM"),Bvt.forEach(t),BCr=r(lSe," (GPT Neo model)"),lSe.forEach(t),PCr=i(pi),KM=n(pi,"LI",{});var iSe=s(KM);T3e=n(iSe,"STRONG",{});var Pvt=s(T3e);$Cr=r(Pvt,"gptj"),Pvt.forEach(t),ICr=r(iSe," \u2014 "),FW=n(iSe,"A",{href:!0});var $vt=s(FW);qCr=r($vt,"FlaxGPTJForCausalLM"),$vt.forEach(t),NCr=r(iSe," (GPT-J model)"),iSe.forEach(t),jCr=i(pi),ZM=n(pi,"LI",{});var dSe=s(ZM);M3e=n(dSe,"STRONG",{});var Ivt=s(M3e);DCr=r(Ivt,"xglm"),Ivt.forEach(t),GCr=r(dSe," \u2014 "),vW=n(dSe,"A",{href:!0});var qvt=s(vW);OCr=r(qvt,"FlaxXGLMForCausalLM"),qvt.forEach(t),VCr=r(dSe," (XGLM model)"),dSe.forEach(t),pi.forEach(t),XCr=i(xa),E3e=n(xa,"P",{});var Nvt=s(E3e);zCr=r(Nvt,"Examples:"),Nvt.forEach(t),QCr=i(xa),m(tL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),iPe=i(c),af=n(c,"H2",{class:!0});var FIe=s(af);e4=n(FIe,"A",{id:!0,class:!0,href:!0});var jvt=s(e4);C3e=n(jvt,"SPAN",{});var Dvt=s(C3e);m(aL.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),WCr=i(FIe),w3e=n(FIe,"SPAN",{});var Gvt=s(w3e);HCr=r(Gvt,"FlaxAutoModelForPreTraining"),Gvt.forEach(t),FIe.forEach(t),dPe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(nL.$$.fragment,_i),UCr=i(_i),nf=n(_i,"P",{});var GJ=s(nf);JCr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=n(GJ,"A",{href:!0});var Ovt=s(TW);YCr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),KCr=r(GJ," class method or the "),MW=n(GJ,"A",{href:!0});var Vvt=s(MW);ZCr=r(Vvt,"from_config()"),Vvt.forEach(t),ewr=r(GJ,` class
method.`),GJ.forEach(t),owr=i(_i),sL=n(_i,"P",{});var vIe=s(sL);rwr=r(vIe,"This class cannot be instantiated directly using "),A3e=n(vIe,"CODE",{});var Xvt=s(A3e);twr=r(Xvt,"__init__()"),Xvt.forEach(t),awr=r(vIe," (throws an error)."),vIe.forEach(t),nwr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(lL.$$.fragment,ui),swr=i(ui),y3e=n(ui,"P",{});var zvt=s(y3e);lwr=r(zvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zvt.forEach(t),iwr=i(ui),sf=n(ui,"P",{});var OJ=s(sf);dwr=r(OJ,`Note:
Loading a model from its configuration file does `),L3e=n(OJ,"STRONG",{});var Qvt=s(L3e);cwr=r(Qvt,"not"),Qvt.forEach(t),fwr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(OJ,"A",{href:!0});var Wvt=s(EW);mwr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),gwr=r(OJ," to load the model weights."),OJ.forEach(t),hwr=i(ui),x3e=n(ui,"P",{});var Hvt=s(x3e);pwr=r(Hvt,"Examples:"),Hvt.forEach(t),_wr=i(ui),m(iL.$$.fragment,ui),ui.forEach(t),uwr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(dL.$$.fragment,ka),bwr=i(ka),k3e=n(ka,"P",{});var Uvt=s(k3e);Fwr=r(Uvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uvt.forEach(t),vwr=i(ka),Sn=n(ka,"P",{});var _C=s(Sn);Twr=r(_C,"The model class to instantiate is selected based on the "),S3e=n(_C,"CODE",{});var Jvt=s(S3e);Mwr=r(Jvt,"model_type"),Jvt.forEach(t),Ewr=r(_C,` property of the config object (either
passed as an argument or loaded from `),R3e=n(_C,"CODE",{});var Yvt=s(R3e);Cwr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),wwr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(_C,"CODE",{});var Kvt=s(B3e);Awr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),ywr=r(_C,":"),_C.forEach(t),Lwr=i(ka),me=n(ka,"UL",{});var _e=s(me);o4=n(_e,"LI",{});var cSe=s(o4);P3e=n(cSe,"STRONG",{});var Zvt=s(P3e);xwr=r(Zvt,"albert"),Zvt.forEach(t),kwr=r(cSe," \u2014 "),CW=n(cSe,"A",{href:!0});var eTt=s(CW);Swr=r(eTt,"FlaxAlbertForPreTraining"),eTt.forEach(t),Rwr=r(cSe," (ALBERT model)"),cSe.forEach(t),Bwr=i(_e),r4=n(_e,"LI",{});var fSe=s(r4);$3e=n(fSe,"STRONG",{});var oTt=s($3e);Pwr=r(oTt,"bart"),oTt.forEach(t),$wr=r(fSe," \u2014 "),wW=n(fSe,"A",{href:!0});var rTt=s(wW);Iwr=r(rTt,"FlaxBartForConditionalGeneration"),rTt.forEach(t),qwr=r(fSe," (BART model)"),fSe.forEach(t),Nwr=i(_e),t4=n(_e,"LI",{});var mSe=s(t4);I3e=n(mSe,"STRONG",{});var tTt=s(I3e);jwr=r(tTt,"bert"),tTt.forEach(t),Dwr=r(mSe," \u2014 "),AW=n(mSe,"A",{href:!0});var aTt=s(AW);Gwr=r(aTt,"FlaxBertForPreTraining"),aTt.forEach(t),Owr=r(mSe," (BERT model)"),mSe.forEach(t),Vwr=i(_e),a4=n(_e,"LI",{});var gSe=s(a4);q3e=n(gSe,"STRONG",{});var nTt=s(q3e);Xwr=r(nTt,"big_bird"),nTt.forEach(t),zwr=r(gSe," \u2014 "),yW=n(gSe,"A",{href:!0});var sTt=s(yW);Qwr=r(sTt,"FlaxBigBirdForPreTraining"),sTt.forEach(t),Wwr=r(gSe," (BigBird model)"),gSe.forEach(t),Hwr=i(_e),n4=n(_e,"LI",{});var hSe=s(n4);N3e=n(hSe,"STRONG",{});var lTt=s(N3e);Uwr=r(lTt,"electra"),lTt.forEach(t),Jwr=r(hSe," \u2014 "),LW=n(hSe,"A",{href:!0});var iTt=s(LW);Ywr=r(iTt,"FlaxElectraForPreTraining"),iTt.forEach(t),Kwr=r(hSe," (ELECTRA model)"),hSe.forEach(t),Zwr=i(_e),s4=n(_e,"LI",{});var pSe=s(s4);j3e=n(pSe,"STRONG",{});var dTt=s(j3e);eAr=r(dTt,"mbart"),dTt.forEach(t),oAr=r(pSe," \u2014 "),xW=n(pSe,"A",{href:!0});var cTt=s(xW);rAr=r(cTt,"FlaxMBartForConditionalGeneration"),cTt.forEach(t),tAr=r(pSe," (mBART model)"),pSe.forEach(t),aAr=i(_e),l4=n(_e,"LI",{});var _Se=s(l4);D3e=n(_Se,"STRONG",{});var fTt=s(D3e);nAr=r(fTt,"mt5"),fTt.forEach(t),sAr=r(_Se," \u2014 "),kW=n(_Se,"A",{href:!0});var mTt=s(kW);lAr=r(mTt,"FlaxMT5ForConditionalGeneration"),mTt.forEach(t),iAr=r(_Se," (mT5 model)"),_Se.forEach(t),dAr=i(_e),i4=n(_e,"LI",{});var uSe=s(i4);G3e=n(uSe,"STRONG",{});var gTt=s(G3e);cAr=r(gTt,"roberta"),gTt.forEach(t),fAr=r(uSe," \u2014 "),SW=n(uSe,"A",{href:!0});var hTt=s(SW);mAr=r(hTt,"FlaxRobertaForMaskedLM"),hTt.forEach(t),gAr=r(uSe," (RoBERTa model)"),uSe.forEach(t),hAr=i(_e),d4=n(_e,"LI",{});var bSe=s(d4);O3e=n(bSe,"STRONG",{});var pTt=s(O3e);pAr=r(pTt,"roformer"),pTt.forEach(t),_Ar=r(bSe," \u2014 "),RW=n(bSe,"A",{href:!0});var _Tt=s(RW);uAr=r(_Tt,"FlaxRoFormerForMaskedLM"),_Tt.forEach(t),bAr=r(bSe," (RoFormer model)"),bSe.forEach(t),FAr=i(_e),c4=n(_e,"LI",{});var FSe=s(c4);V3e=n(FSe,"STRONG",{});var uTt=s(V3e);vAr=r(uTt,"t5"),uTt.forEach(t),TAr=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var bTt=s(BW);MAr=r(bTt,"FlaxT5ForConditionalGeneration"),bTt.forEach(t),EAr=r(FSe," (T5 model)"),FSe.forEach(t),CAr=i(_e),f4=n(_e,"LI",{});var vSe=s(f4);X3e=n(vSe,"STRONG",{});var FTt=s(X3e);wAr=r(FTt,"wav2vec2"),FTt.forEach(t),AAr=r(vSe," \u2014 "),PW=n(vSe,"A",{href:!0});var vTt=s(PW);yAr=r(vTt,"FlaxWav2Vec2ForPreTraining"),vTt.forEach(t),LAr=r(vSe," (Wav2Vec2 model)"),vSe.forEach(t),xAr=i(_e),m4=n(_e,"LI",{});var TSe=s(m4);z3e=n(TSe,"STRONG",{});var TTt=s(z3e);kAr=r(TTt,"xlm-roberta"),TTt.forEach(t),SAr=r(TSe," \u2014 "),$W=n(TSe,"A",{href:!0});var MTt=s($W);RAr=r(MTt,"FlaxXLMRobertaForMaskedLM"),MTt.forEach(t),BAr=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),_e.forEach(t),PAr=i(ka),Q3e=n(ka,"P",{});var ETt=s(Q3e);$Ar=r(ETt,"Examples:"),ETt.forEach(t),IAr=i(ka),m(cL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),cPe=i(c),lf=n(c,"H2",{class:!0});var TIe=s(lf);g4=n(TIe,"A",{id:!0,class:!0,href:!0});var CTt=s(g4);W3e=n(CTt,"SPAN",{});var wTt=s(W3e);m(fL.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),qAr=i(TIe),H3e=n(TIe,"SPAN",{});var ATt=s(H3e);NAr=r(ATt,"FlaxAutoModelForMaskedLM"),ATt.forEach(t),TIe.forEach(t),fPe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(mL.$$.fragment,bi),jAr=i(bi),df=n(bi,"P",{});var VJ=s(df);DAr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IW=n(VJ,"A",{href:!0});var yTt=s(IW);GAr=r(yTt,"from_pretrained()"),yTt.forEach(t),OAr=r(VJ," class method or the "),qW=n(VJ,"A",{href:!0});var LTt=s(qW);VAr=r(LTt,"from_config()"),LTt.forEach(t),XAr=r(VJ,` class
method.`),VJ.forEach(t),zAr=i(bi),gL=n(bi,"P",{});var MIe=s(gL);QAr=r(MIe,"This class cannot be instantiated directly using "),U3e=n(MIe,"CODE",{});var xTt=s(U3e);WAr=r(xTt,"__init__()"),xTt.forEach(t),HAr=r(MIe," (throws an error)."),MIe.forEach(t),UAr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(hL.$$.fragment,Fi),JAr=i(Fi),J3e=n(Fi,"P",{});var kTt=s(J3e);YAr=r(kTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kTt.forEach(t),KAr=i(Fi),cf=n(Fi,"P",{});var XJ=s(cf);ZAr=r(XJ,`Note:
Loading a model from its configuration file does `),Y3e=n(XJ,"STRONG",{});var STt=s(Y3e);e6r=r(STt,"not"),STt.forEach(t),o6r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(XJ,"A",{href:!0});var RTt=s(NW);r6r=r(RTt,"from_pretrained()"),RTt.forEach(t),t6r=r(XJ," to load the model weights."),XJ.forEach(t),a6r=i(Fi),K3e=n(Fi,"P",{});var BTt=s(K3e);n6r=r(BTt,"Examples:"),BTt.forEach(t),s6r=i(Fi),m(pL.$$.fragment,Fi),Fi.forEach(t),l6r=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(_L.$$.fragment,Sa),i6r=i(Sa),Z3e=n(Sa,"P",{});var PTt=s(Z3e);d6r=r(PTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PTt.forEach(t),c6r=i(Sa),Rn=n(Sa,"P",{});var uC=s(Rn);f6r=r(uC,"The model class to instantiate is selected based on the "),e2e=n(uC,"CODE",{});var $Tt=s(e2e);m6r=r($Tt,"model_type"),$Tt.forEach(t),g6r=r(uC,` property of the config object (either
passed as an argument or loaded from `),o2e=n(uC,"CODE",{});var ITt=s(o2e);h6r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),p6r=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(uC,"CODE",{});var qTt=s(r2e);_6r=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),u6r=r(uC,":"),uC.forEach(t),b6r=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);h4=n(Ae,"LI",{});var MSe=s(h4);t2e=n(MSe,"STRONG",{});var NTt=s(t2e);F6r=r(NTt,"albert"),NTt.forEach(t),v6r=r(MSe," \u2014 "),jW=n(MSe,"A",{href:!0});var jTt=s(jW);T6r=r(jTt,"FlaxAlbertForMaskedLM"),jTt.forEach(t),M6r=r(MSe," (ALBERT model)"),MSe.forEach(t),E6r=i(Ae),p4=n(Ae,"LI",{});var ESe=s(p4);a2e=n(ESe,"STRONG",{});var DTt=s(a2e);C6r=r(DTt,"bart"),DTt.forEach(t),w6r=r(ESe," \u2014 "),DW=n(ESe,"A",{href:!0});var GTt=s(DW);A6r=r(GTt,"FlaxBartForConditionalGeneration"),GTt.forEach(t),y6r=r(ESe," (BART model)"),ESe.forEach(t),L6r=i(Ae),_4=n(Ae,"LI",{});var CSe=s(_4);n2e=n(CSe,"STRONG",{});var OTt=s(n2e);x6r=r(OTt,"bert"),OTt.forEach(t),k6r=r(CSe," \u2014 "),GW=n(CSe,"A",{href:!0});var VTt=s(GW);S6r=r(VTt,"FlaxBertForMaskedLM"),VTt.forEach(t),R6r=r(CSe," (BERT model)"),CSe.forEach(t),B6r=i(Ae),u4=n(Ae,"LI",{});var wSe=s(u4);s2e=n(wSe,"STRONG",{});var XTt=s(s2e);P6r=r(XTt,"big_bird"),XTt.forEach(t),$6r=r(wSe," \u2014 "),OW=n(wSe,"A",{href:!0});var zTt=s(OW);I6r=r(zTt,"FlaxBigBirdForMaskedLM"),zTt.forEach(t),q6r=r(wSe," (BigBird model)"),wSe.forEach(t),N6r=i(Ae),b4=n(Ae,"LI",{});var ASe=s(b4);l2e=n(ASe,"STRONG",{});var QTt=s(l2e);j6r=r(QTt,"distilbert"),QTt.forEach(t),D6r=r(ASe," \u2014 "),VW=n(ASe,"A",{href:!0});var WTt=s(VW);G6r=r(WTt,"FlaxDistilBertForMaskedLM"),WTt.forEach(t),O6r=r(ASe," (DistilBERT model)"),ASe.forEach(t),V6r=i(Ae),F4=n(Ae,"LI",{});var ySe=s(F4);i2e=n(ySe,"STRONG",{});var HTt=s(i2e);X6r=r(HTt,"electra"),HTt.forEach(t),z6r=r(ySe," \u2014 "),XW=n(ySe,"A",{href:!0});var UTt=s(XW);Q6r=r(UTt,"FlaxElectraForMaskedLM"),UTt.forEach(t),W6r=r(ySe," (ELECTRA model)"),ySe.forEach(t),H6r=i(Ae),v4=n(Ae,"LI",{});var LSe=s(v4);d2e=n(LSe,"STRONG",{});var JTt=s(d2e);U6r=r(JTt,"mbart"),JTt.forEach(t),J6r=r(LSe," \u2014 "),zW=n(LSe,"A",{href:!0});var YTt=s(zW);Y6r=r(YTt,"FlaxMBartForConditionalGeneration"),YTt.forEach(t),K6r=r(LSe," (mBART model)"),LSe.forEach(t),Z6r=i(Ae),T4=n(Ae,"LI",{});var xSe=s(T4);c2e=n(xSe,"STRONG",{});var KTt=s(c2e);e0r=r(KTt,"roberta"),KTt.forEach(t),o0r=r(xSe," \u2014 "),QW=n(xSe,"A",{href:!0});var ZTt=s(QW);r0r=r(ZTt,"FlaxRobertaForMaskedLM"),ZTt.forEach(t),t0r=r(xSe," (RoBERTa model)"),xSe.forEach(t),a0r=i(Ae),M4=n(Ae,"LI",{});var kSe=s(M4);f2e=n(kSe,"STRONG",{});var eMt=s(f2e);n0r=r(eMt,"roformer"),eMt.forEach(t),s0r=r(kSe," \u2014 "),WW=n(kSe,"A",{href:!0});var oMt=s(WW);l0r=r(oMt,"FlaxRoFormerForMaskedLM"),oMt.forEach(t),i0r=r(kSe," (RoFormer model)"),kSe.forEach(t),d0r=i(Ae),E4=n(Ae,"LI",{});var SSe=s(E4);m2e=n(SSe,"STRONG",{});var rMt=s(m2e);c0r=r(rMt,"xlm-roberta"),rMt.forEach(t),f0r=r(SSe," \u2014 "),HW=n(SSe,"A",{href:!0});var tMt=s(HW);m0r=r(tMt,"FlaxXLMRobertaForMaskedLM"),tMt.forEach(t),g0r=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),Ae.forEach(t),h0r=i(Sa),g2e=n(Sa,"P",{});var aMt=s(g2e);p0r=r(aMt,"Examples:"),aMt.forEach(t),_0r=i(Sa),m(uL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),mPe=i(c),ff=n(c,"H2",{class:!0});var EIe=s(ff);C4=n(EIe,"A",{id:!0,class:!0,href:!0});var nMt=s(C4);h2e=n(nMt,"SPAN",{});var sMt=s(h2e);m(bL.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),u0r=i(EIe),p2e=n(EIe,"SPAN",{});var lMt=s(p2e);b0r=r(lMt,"FlaxAutoModelForSeq2SeqLM"),lMt.forEach(t),EIe.forEach(t),gPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(FL.$$.fragment,vi),F0r=i(vi),mf=n(vi,"P",{});var zJ=s(mf);v0r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UW=n(zJ,"A",{href:!0});var iMt=s(UW);T0r=r(iMt,"from_pretrained()"),iMt.forEach(t),M0r=r(zJ," class method or the "),JW=n(zJ,"A",{href:!0});var dMt=s(JW);E0r=r(dMt,"from_config()"),dMt.forEach(t),C0r=r(zJ,` class
method.`),zJ.forEach(t),w0r=i(vi),vL=n(vi,"P",{});var CIe=s(vL);A0r=r(CIe,"This class cannot be instantiated directly using "),_2e=n(CIe,"CODE",{});var cMt=s(_2e);y0r=r(cMt,"__init__()"),cMt.forEach(t),L0r=r(CIe," (throws an error)."),CIe.forEach(t),x0r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(TL.$$.fragment,Ti),k0r=i(Ti),u2e=n(Ti,"P",{});var fMt=s(u2e);S0r=r(fMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fMt.forEach(t),R0r=i(Ti),gf=n(Ti,"P",{});var QJ=s(gf);B0r=r(QJ,`Note:
Loading a model from its configuration file does `),b2e=n(QJ,"STRONG",{});var mMt=s(b2e);P0r=r(mMt,"not"),mMt.forEach(t),$0r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(QJ,"A",{href:!0});var gMt=s(YW);I0r=r(gMt,"from_pretrained()"),gMt.forEach(t),q0r=r(QJ," to load the model weights."),QJ.forEach(t),N0r=i(Ti),F2e=n(Ti,"P",{});var hMt=s(F2e);j0r=r(hMt,"Examples:"),hMt.forEach(t),D0r=i(Ti),m(ML.$$.fragment,Ti),Ti.forEach(t),G0r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(EL.$$.fragment,Ra),O0r=i(Ra),v2e=n(Ra,"P",{});var pMt=s(v2e);V0r=r(pMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pMt.forEach(t),X0r=i(Ra),Bn=n(Ra,"P",{});var bC=s(Bn);z0r=r(bC,"The model class to instantiate is selected based on the "),T2e=n(bC,"CODE",{});var _Mt=s(T2e);Q0r=r(_Mt,"model_type"),_Mt.forEach(t),W0r=r(bC,` property of the config object (either
passed as an argument or loaded from `),M2e=n(bC,"CODE",{});var uMt=s(M2e);H0r=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),U0r=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(bC,"CODE",{});var bMt=s(E2e);J0r=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),Y0r=r(bC,":"),bC.forEach(t),K0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);w4=n(so,"LI",{});var RSe=s(w4);C2e=n(RSe,"STRONG",{});var FMt=s(C2e);Z0r=r(FMt,"bart"),FMt.forEach(t),eyr=r(RSe," \u2014 "),KW=n(RSe,"A",{href:!0});var vMt=s(KW);oyr=r(vMt,"FlaxBartForConditionalGeneration"),vMt.forEach(t),ryr=r(RSe," (BART model)"),RSe.forEach(t),tyr=i(so),A4=n(so,"LI",{});var BSe=s(A4);w2e=n(BSe,"STRONG",{});var TMt=s(w2e);ayr=r(TMt,"blenderbot"),TMt.forEach(t),nyr=r(BSe," \u2014 "),ZW=n(BSe,"A",{href:!0});var MMt=s(ZW);syr=r(MMt,"FlaxBlenderbotForConditionalGeneration"),MMt.forEach(t),lyr=r(BSe," (Blenderbot model)"),BSe.forEach(t),iyr=i(so),y4=n(so,"LI",{});var PSe=s(y4);A2e=n(PSe,"STRONG",{});var EMt=s(A2e);dyr=r(EMt,"blenderbot-small"),EMt.forEach(t),cyr=r(PSe," \u2014 "),eH=n(PSe,"A",{href:!0});var CMt=s(eH);fyr=r(CMt,"FlaxBlenderbotSmallForConditionalGeneration"),CMt.forEach(t),myr=r(PSe," (BlenderbotSmall model)"),PSe.forEach(t),gyr=i(so),L4=n(so,"LI",{});var $Se=s(L4);y2e=n($Se,"STRONG",{});var wMt=s(y2e);hyr=r(wMt,"encoder-decoder"),wMt.forEach(t),pyr=r($Se," \u2014 "),oH=n($Se,"A",{href:!0});var AMt=s(oH);_yr=r(AMt,"FlaxEncoderDecoderModel"),AMt.forEach(t),uyr=r($Se," (Encoder decoder model)"),$Se.forEach(t),byr=i(so),x4=n(so,"LI",{});var ISe=s(x4);L2e=n(ISe,"STRONG",{});var yMt=s(L2e);Fyr=r(yMt,"marian"),yMt.forEach(t),vyr=r(ISe," \u2014 "),rH=n(ISe,"A",{href:!0});var LMt=s(rH);Tyr=r(LMt,"FlaxMarianMTModel"),LMt.forEach(t),Myr=r(ISe," (Marian model)"),ISe.forEach(t),Eyr=i(so),k4=n(so,"LI",{});var qSe=s(k4);x2e=n(qSe,"STRONG",{});var xMt=s(x2e);Cyr=r(xMt,"mbart"),xMt.forEach(t),wyr=r(qSe," \u2014 "),tH=n(qSe,"A",{href:!0});var kMt=s(tH);Ayr=r(kMt,"FlaxMBartForConditionalGeneration"),kMt.forEach(t),yyr=r(qSe," (mBART model)"),qSe.forEach(t),Lyr=i(so),S4=n(so,"LI",{});var NSe=s(S4);k2e=n(NSe,"STRONG",{});var SMt=s(k2e);xyr=r(SMt,"mt5"),SMt.forEach(t),kyr=r(NSe," \u2014 "),aH=n(NSe,"A",{href:!0});var RMt=s(aH);Syr=r(RMt,"FlaxMT5ForConditionalGeneration"),RMt.forEach(t),Ryr=r(NSe," (mT5 model)"),NSe.forEach(t),Byr=i(so),R4=n(so,"LI",{});var jSe=s(R4);S2e=n(jSe,"STRONG",{});var BMt=s(S2e);Pyr=r(BMt,"pegasus"),BMt.forEach(t),$yr=r(jSe," \u2014 "),nH=n(jSe,"A",{href:!0});var PMt=s(nH);Iyr=r(PMt,"FlaxPegasusForConditionalGeneration"),PMt.forEach(t),qyr=r(jSe," (Pegasus model)"),jSe.forEach(t),Nyr=i(so),B4=n(so,"LI",{});var DSe=s(B4);R2e=n(DSe,"STRONG",{});var $Mt=s(R2e);jyr=r($Mt,"t5"),$Mt.forEach(t),Dyr=r(DSe," \u2014 "),sH=n(DSe,"A",{href:!0});var IMt=s(sH);Gyr=r(IMt,"FlaxT5ForConditionalGeneration"),IMt.forEach(t),Oyr=r(DSe," (T5 model)"),DSe.forEach(t),so.forEach(t),Vyr=i(Ra),B2e=n(Ra,"P",{});var qMt=s(B2e);Xyr=r(qMt,"Examples:"),qMt.forEach(t),zyr=i(Ra),m(CL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),hPe=i(c),hf=n(c,"H2",{class:!0});var wIe=s(hf);P4=n(wIe,"A",{id:!0,class:!0,href:!0});var NMt=s(P4);P2e=n(NMt,"SPAN",{});var jMt=s(P2e);m(wL.$$.fragment,jMt),jMt.forEach(t),NMt.forEach(t),Qyr=i(wIe),$2e=n(wIe,"SPAN",{});var DMt=s($2e);Wyr=r(DMt,"FlaxAutoModelForSequenceClassification"),DMt.forEach(t),wIe.forEach(t),pPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(AL.$$.fragment,Mi),Hyr=i(Mi),pf=n(Mi,"P",{});var WJ=s(pf);Uyr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lH=n(WJ,"A",{href:!0});var GMt=s(lH);Jyr=r(GMt,"from_pretrained()"),GMt.forEach(t),Yyr=r(WJ," class method or the "),iH=n(WJ,"A",{href:!0});var OMt=s(iH);Kyr=r(OMt,"from_config()"),OMt.forEach(t),Zyr=r(WJ,` class
method.`),WJ.forEach(t),eLr=i(Mi),yL=n(Mi,"P",{});var AIe=s(yL);oLr=r(AIe,"This class cannot be instantiated directly using "),I2e=n(AIe,"CODE",{});var VMt=s(I2e);rLr=r(VMt,"__init__()"),VMt.forEach(t),tLr=r(AIe," (throws an error)."),AIe.forEach(t),aLr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(LL.$$.fragment,Ei),nLr=i(Ei),q2e=n(Ei,"P",{});var XMt=s(q2e);sLr=r(XMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XMt.forEach(t),lLr=i(Ei),_f=n(Ei,"P",{});var HJ=s(_f);iLr=r(HJ,`Note:
Loading a model from its configuration file does `),N2e=n(HJ,"STRONG",{});var zMt=s(N2e);dLr=r(zMt,"not"),zMt.forEach(t),cLr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(HJ,"A",{href:!0});var QMt=s(dH);fLr=r(QMt,"from_pretrained()"),QMt.forEach(t),mLr=r(HJ," to load the model weights."),HJ.forEach(t),gLr=i(Ei),j2e=n(Ei,"P",{});var WMt=s(j2e);hLr=r(WMt,"Examples:"),WMt.forEach(t),pLr=i(Ei),m(xL.$$.fragment,Ei),Ei.forEach(t),_Lr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(kL.$$.fragment,Ba),uLr=i(Ba),D2e=n(Ba,"P",{});var HMt=s(D2e);bLr=r(HMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HMt.forEach(t),FLr=i(Ba),Pn=n(Ba,"P",{});var FC=s(Pn);vLr=r(FC,"The model class to instantiate is selected based on the "),G2e=n(FC,"CODE",{});var UMt=s(G2e);TLr=r(UMt,"model_type"),UMt.forEach(t),MLr=r(FC,` property of the config object (either
passed as an argument or loaded from `),O2e=n(FC,"CODE",{});var JMt=s(O2e);ELr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),CLr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(FC,"CODE",{});var YMt=s(V2e);wLr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),ALr=r(FC,":"),FC.forEach(t),yLr=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);$4=n(ye,"LI",{});var GSe=s($4);X2e=n(GSe,"STRONG",{});var KMt=s(X2e);LLr=r(KMt,"albert"),KMt.forEach(t),xLr=r(GSe," \u2014 "),cH=n(GSe,"A",{href:!0});var ZMt=s(cH);kLr=r(ZMt,"FlaxAlbertForSequenceClassification"),ZMt.forEach(t),SLr=r(GSe," (ALBERT model)"),GSe.forEach(t),RLr=i(ye),I4=n(ye,"LI",{});var OSe=s(I4);z2e=n(OSe,"STRONG",{});var e4t=s(z2e);BLr=r(e4t,"bart"),e4t.forEach(t),PLr=r(OSe," \u2014 "),fH=n(OSe,"A",{href:!0});var o4t=s(fH);$Lr=r(o4t,"FlaxBartForSequenceClassification"),o4t.forEach(t),ILr=r(OSe," (BART model)"),OSe.forEach(t),qLr=i(ye),q4=n(ye,"LI",{});var VSe=s(q4);Q2e=n(VSe,"STRONG",{});var r4t=s(Q2e);NLr=r(r4t,"bert"),r4t.forEach(t),jLr=r(VSe," \u2014 "),mH=n(VSe,"A",{href:!0});var t4t=s(mH);DLr=r(t4t,"FlaxBertForSequenceClassification"),t4t.forEach(t),GLr=r(VSe," (BERT model)"),VSe.forEach(t),OLr=i(ye),N4=n(ye,"LI",{});var XSe=s(N4);W2e=n(XSe,"STRONG",{});var a4t=s(W2e);VLr=r(a4t,"big_bird"),a4t.forEach(t),XLr=r(XSe," \u2014 "),gH=n(XSe,"A",{href:!0});var n4t=s(gH);zLr=r(n4t,"FlaxBigBirdForSequenceClassification"),n4t.forEach(t),QLr=r(XSe," (BigBird model)"),XSe.forEach(t),WLr=i(ye),j4=n(ye,"LI",{});var zSe=s(j4);H2e=n(zSe,"STRONG",{});var s4t=s(H2e);HLr=r(s4t,"distilbert"),s4t.forEach(t),ULr=r(zSe," \u2014 "),hH=n(zSe,"A",{href:!0});var l4t=s(hH);JLr=r(l4t,"FlaxDistilBertForSequenceClassification"),l4t.forEach(t),YLr=r(zSe," (DistilBERT model)"),zSe.forEach(t),KLr=i(ye),D4=n(ye,"LI",{});var QSe=s(D4);U2e=n(QSe,"STRONG",{});var i4t=s(U2e);ZLr=r(i4t,"electra"),i4t.forEach(t),e8r=r(QSe," \u2014 "),pH=n(QSe,"A",{href:!0});var d4t=s(pH);o8r=r(d4t,"FlaxElectraForSequenceClassification"),d4t.forEach(t),r8r=r(QSe," (ELECTRA model)"),QSe.forEach(t),t8r=i(ye),G4=n(ye,"LI",{});var WSe=s(G4);J2e=n(WSe,"STRONG",{});var c4t=s(J2e);a8r=r(c4t,"mbart"),c4t.forEach(t),n8r=r(WSe," \u2014 "),_H=n(WSe,"A",{href:!0});var f4t=s(_H);s8r=r(f4t,"FlaxMBartForSequenceClassification"),f4t.forEach(t),l8r=r(WSe," (mBART model)"),WSe.forEach(t),i8r=i(ye),O4=n(ye,"LI",{});var HSe=s(O4);Y2e=n(HSe,"STRONG",{});var m4t=s(Y2e);d8r=r(m4t,"roberta"),m4t.forEach(t),c8r=r(HSe," \u2014 "),uH=n(HSe,"A",{href:!0});var g4t=s(uH);f8r=r(g4t,"FlaxRobertaForSequenceClassification"),g4t.forEach(t),m8r=r(HSe," (RoBERTa model)"),HSe.forEach(t),g8r=i(ye),V4=n(ye,"LI",{});var USe=s(V4);K2e=n(USe,"STRONG",{});var h4t=s(K2e);h8r=r(h4t,"roformer"),h4t.forEach(t),p8r=r(USe," \u2014 "),bH=n(USe,"A",{href:!0});var p4t=s(bH);_8r=r(p4t,"FlaxRoFormerForSequenceClassification"),p4t.forEach(t),u8r=r(USe," (RoFormer model)"),USe.forEach(t),b8r=i(ye),X4=n(ye,"LI",{});var JSe=s(X4);Z2e=n(JSe,"STRONG",{});var _4t=s(Z2e);F8r=r(_4t,"xlm-roberta"),_4t.forEach(t),v8r=r(JSe," \u2014 "),FH=n(JSe,"A",{href:!0});var u4t=s(FH);T8r=r(u4t,"FlaxXLMRobertaForSequenceClassification"),u4t.forEach(t),M8r=r(JSe," (XLM-RoBERTa model)"),JSe.forEach(t),ye.forEach(t),E8r=i(Ba),eFe=n(Ba,"P",{});var b4t=s(eFe);C8r=r(b4t,"Examples:"),b4t.forEach(t),w8r=i(Ba),m(SL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),_Pe=i(c),uf=n(c,"H2",{class:!0});var yIe=s(uf);z4=n(yIe,"A",{id:!0,class:!0,href:!0});var F4t=s(z4);oFe=n(F4t,"SPAN",{});var v4t=s(oFe);m(RL.$$.fragment,v4t),v4t.forEach(t),F4t.forEach(t),A8r=i(yIe),rFe=n(yIe,"SPAN",{});var T4t=s(rFe);y8r=r(T4t,"FlaxAutoModelForQuestionAnswering"),T4t.forEach(t),yIe.forEach(t),uPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(BL.$$.fragment,Ci),L8r=i(Ci),bf=n(Ci,"P",{});var UJ=s(bf);x8r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=n(UJ,"A",{href:!0});var M4t=s(vH);k8r=r(M4t,"from_pretrained()"),M4t.forEach(t),S8r=r(UJ," class method or the "),TH=n(UJ,"A",{href:!0});var E4t=s(TH);R8r=r(E4t,"from_config()"),E4t.forEach(t),B8r=r(UJ,` class
method.`),UJ.forEach(t),P8r=i(Ci),PL=n(Ci,"P",{});var LIe=s(PL);$8r=r(LIe,"This class cannot be instantiated directly using "),tFe=n(LIe,"CODE",{});var C4t=s(tFe);I8r=r(C4t,"__init__()"),C4t.forEach(t),q8r=r(LIe," (throws an error)."),LIe.forEach(t),N8r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m($L.$$.fragment,wi),j8r=i(wi),aFe=n(wi,"P",{});var w4t=s(aFe);D8r=r(w4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w4t.forEach(t),G8r=i(wi),Ff=n(wi,"P",{});var JJ=s(Ff);O8r=r(JJ,`Note:
Loading a model from its configuration file does `),nFe=n(JJ,"STRONG",{});var A4t=s(nFe);V8r=r(A4t,"not"),A4t.forEach(t),X8r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(JJ,"A",{href:!0});var y4t=s(MH);z8r=r(y4t,"from_pretrained()"),y4t.forEach(t),Q8r=r(JJ," to load the model weights."),JJ.forEach(t),W8r=i(wi),sFe=n(wi,"P",{});var L4t=s(sFe);H8r=r(L4t,"Examples:"),L4t.forEach(t),U8r=i(wi),m(IL.$$.fragment,wi),wi.forEach(t),J8r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(qL.$$.fragment,Pa),Y8r=i(Pa),lFe=n(Pa,"P",{});var x4t=s(lFe);K8r=r(x4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x4t.forEach(t),Z8r=i(Pa),$n=n(Pa,"P",{});var vC=s($n);e9r=r(vC,"The model class to instantiate is selected based on the "),iFe=n(vC,"CODE",{});var k4t=s(iFe);o9r=r(k4t,"model_type"),k4t.forEach(t),r9r=r(vC,` property of the config object (either
passed as an argument or loaded from `),dFe=n(vC,"CODE",{});var S4t=s(dFe);t9r=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),a9r=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(vC,"CODE",{});var R4t=s(cFe);n9r=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),s9r=r(vC,":"),vC.forEach(t),l9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);Q4=n(Le,"LI",{});var YSe=s(Q4);fFe=n(YSe,"STRONG",{});var B4t=s(fFe);i9r=r(B4t,"albert"),B4t.forEach(t),d9r=r(YSe," \u2014 "),EH=n(YSe,"A",{href:!0});var P4t=s(EH);c9r=r(P4t,"FlaxAlbertForQuestionAnswering"),P4t.forEach(t),f9r=r(YSe," (ALBERT model)"),YSe.forEach(t),m9r=i(Le),W4=n(Le,"LI",{});var KSe=s(W4);mFe=n(KSe,"STRONG",{});var $4t=s(mFe);g9r=r($4t,"bart"),$4t.forEach(t),h9r=r(KSe," \u2014 "),CH=n(KSe,"A",{href:!0});var I4t=s(CH);p9r=r(I4t,"FlaxBartForQuestionAnswering"),I4t.forEach(t),_9r=r(KSe," (BART model)"),KSe.forEach(t),u9r=i(Le),H4=n(Le,"LI",{});var ZSe=s(H4);gFe=n(ZSe,"STRONG",{});var q4t=s(gFe);b9r=r(q4t,"bert"),q4t.forEach(t),F9r=r(ZSe," \u2014 "),wH=n(ZSe,"A",{href:!0});var N4t=s(wH);v9r=r(N4t,"FlaxBertForQuestionAnswering"),N4t.forEach(t),T9r=r(ZSe," (BERT model)"),ZSe.forEach(t),M9r=i(Le),U4=n(Le,"LI",{});var eRe=s(U4);hFe=n(eRe,"STRONG",{});var j4t=s(hFe);E9r=r(j4t,"big_bird"),j4t.forEach(t),C9r=r(eRe," \u2014 "),AH=n(eRe,"A",{href:!0});var D4t=s(AH);w9r=r(D4t,"FlaxBigBirdForQuestionAnswering"),D4t.forEach(t),A9r=r(eRe," (BigBird model)"),eRe.forEach(t),y9r=i(Le),J4=n(Le,"LI",{});var oRe=s(J4);pFe=n(oRe,"STRONG",{});var G4t=s(pFe);L9r=r(G4t,"distilbert"),G4t.forEach(t),x9r=r(oRe," \u2014 "),yH=n(oRe,"A",{href:!0});var O4t=s(yH);k9r=r(O4t,"FlaxDistilBertForQuestionAnswering"),O4t.forEach(t),S9r=r(oRe," (DistilBERT model)"),oRe.forEach(t),R9r=i(Le),Y4=n(Le,"LI",{});var rRe=s(Y4);_Fe=n(rRe,"STRONG",{});var V4t=s(_Fe);B9r=r(V4t,"electra"),V4t.forEach(t),P9r=r(rRe," \u2014 "),LH=n(rRe,"A",{href:!0});var X4t=s(LH);$9r=r(X4t,"FlaxElectraForQuestionAnswering"),X4t.forEach(t),I9r=r(rRe," (ELECTRA model)"),rRe.forEach(t),q9r=i(Le),K4=n(Le,"LI",{});var tRe=s(K4);uFe=n(tRe,"STRONG",{});var z4t=s(uFe);N9r=r(z4t,"mbart"),z4t.forEach(t),j9r=r(tRe," \u2014 "),xH=n(tRe,"A",{href:!0});var Q4t=s(xH);D9r=r(Q4t,"FlaxMBartForQuestionAnswering"),Q4t.forEach(t),G9r=r(tRe," (mBART model)"),tRe.forEach(t),O9r=i(Le),Z4=n(Le,"LI",{});var aRe=s(Z4);bFe=n(aRe,"STRONG",{});var W4t=s(bFe);V9r=r(W4t,"roberta"),W4t.forEach(t),X9r=r(aRe," \u2014 "),kH=n(aRe,"A",{href:!0});var H4t=s(kH);z9r=r(H4t,"FlaxRobertaForQuestionAnswering"),H4t.forEach(t),Q9r=r(aRe," (RoBERTa model)"),aRe.forEach(t),W9r=i(Le),eE=n(Le,"LI",{});var nRe=s(eE);FFe=n(nRe,"STRONG",{});var U4t=s(FFe);H9r=r(U4t,"roformer"),U4t.forEach(t),U9r=r(nRe," \u2014 "),SH=n(nRe,"A",{href:!0});var J4t=s(SH);J9r=r(J4t,"FlaxRoFormerForQuestionAnswering"),J4t.forEach(t),Y9r=r(nRe," (RoFormer model)"),nRe.forEach(t),K9r=i(Le),oE=n(Le,"LI",{});var sRe=s(oE);vFe=n(sRe,"STRONG",{});var Y4t=s(vFe);Z9r=r(Y4t,"xlm-roberta"),Y4t.forEach(t),exr=r(sRe," \u2014 "),RH=n(sRe,"A",{href:!0});var K4t=s(RH);oxr=r(K4t,"FlaxXLMRobertaForQuestionAnswering"),K4t.forEach(t),rxr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),Le.forEach(t),txr=i(Pa),TFe=n(Pa,"P",{});var Z4t=s(TFe);axr=r(Z4t,"Examples:"),Z4t.forEach(t),nxr=i(Pa),m(NL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),bPe=i(c),vf=n(c,"H2",{class:!0});var xIe=s(vf);rE=n(xIe,"A",{id:!0,class:!0,href:!0});var eEt=s(rE);MFe=n(eEt,"SPAN",{});var oEt=s(MFe);m(jL.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),sxr=i(xIe),EFe=n(xIe,"SPAN",{});var rEt=s(EFe);lxr=r(rEt,"FlaxAutoModelForTokenClassification"),rEt.forEach(t),xIe.forEach(t),FPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(DL.$$.fragment,Ai),ixr=i(Ai),Tf=n(Ai,"P",{});var YJ=s(Tf);dxr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BH=n(YJ,"A",{href:!0});var tEt=s(BH);cxr=r(tEt,"from_pretrained()"),tEt.forEach(t),fxr=r(YJ," class method or the "),PH=n(YJ,"A",{href:!0});var aEt=s(PH);mxr=r(aEt,"from_config()"),aEt.forEach(t),gxr=r(YJ,` class
method.`),YJ.forEach(t),hxr=i(Ai),GL=n(Ai,"P",{});var kIe=s(GL);pxr=r(kIe,"This class cannot be instantiated directly using "),CFe=n(kIe,"CODE",{});var nEt=s(CFe);_xr=r(nEt,"__init__()"),nEt.forEach(t),uxr=r(kIe," (throws an error)."),kIe.forEach(t),bxr=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(OL.$$.fragment,yi),Fxr=i(yi),wFe=n(yi,"P",{});var sEt=s(wFe);vxr=r(sEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sEt.forEach(t),Txr=i(yi),Mf=n(yi,"P",{});var KJ=s(Mf);Mxr=r(KJ,`Note:
Loading a model from its configuration file does `),AFe=n(KJ,"STRONG",{});var lEt=s(AFe);Exr=r(lEt,"not"),lEt.forEach(t),Cxr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(KJ,"A",{href:!0});var iEt=s($H);wxr=r(iEt,"from_pretrained()"),iEt.forEach(t),Axr=r(KJ," to load the model weights."),KJ.forEach(t),yxr=i(yi),yFe=n(yi,"P",{});var dEt=s(yFe);Lxr=r(dEt,"Examples:"),dEt.forEach(t),xxr=i(yi),m(VL.$$.fragment,yi),yi.forEach(t),kxr=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(XL.$$.fragment,$a),Sxr=i($a),LFe=n($a,"P",{});var cEt=s(LFe);Rxr=r(cEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cEt.forEach(t),Bxr=i($a),In=n($a,"P",{});var TC=s(In);Pxr=r(TC,"The model class to instantiate is selected based on the "),xFe=n(TC,"CODE",{});var fEt=s(xFe);$xr=r(fEt,"model_type"),fEt.forEach(t),Ixr=r(TC,` property of the config object (either
passed as an argument or loaded from `),kFe=n(TC,"CODE",{});var mEt=s(kFe);qxr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),Nxr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(TC,"CODE",{});var gEt=s(SFe);jxr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),Dxr=r(TC,":"),TC.forEach(t),Gxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);tE=n(Oo,"LI",{});var lRe=s(tE);RFe=n(lRe,"STRONG",{});var hEt=s(RFe);Oxr=r(hEt,"albert"),hEt.forEach(t),Vxr=r(lRe," \u2014 "),IH=n(lRe,"A",{href:!0});var pEt=s(IH);Xxr=r(pEt,"FlaxAlbertForTokenClassification"),pEt.forEach(t),zxr=r(lRe," (ALBERT model)"),lRe.forEach(t),Qxr=i(Oo),aE=n(Oo,"LI",{});var iRe=s(aE);BFe=n(iRe,"STRONG",{});var _Et=s(BFe);Wxr=r(_Et,"bert"),_Et.forEach(t),Hxr=r(iRe," \u2014 "),qH=n(iRe,"A",{href:!0});var uEt=s(qH);Uxr=r(uEt,"FlaxBertForTokenClassification"),uEt.forEach(t),Jxr=r(iRe," (BERT model)"),iRe.forEach(t),Yxr=i(Oo),nE=n(Oo,"LI",{});var dRe=s(nE);PFe=n(dRe,"STRONG",{});var bEt=s(PFe);Kxr=r(bEt,"big_bird"),bEt.forEach(t),Zxr=r(dRe," \u2014 "),NH=n(dRe,"A",{href:!0});var FEt=s(NH);ekr=r(FEt,"FlaxBigBirdForTokenClassification"),FEt.forEach(t),okr=r(dRe," (BigBird model)"),dRe.forEach(t),rkr=i(Oo),sE=n(Oo,"LI",{});var cRe=s(sE);$Fe=n(cRe,"STRONG",{});var vEt=s($Fe);tkr=r(vEt,"distilbert"),vEt.forEach(t),akr=r(cRe," \u2014 "),jH=n(cRe,"A",{href:!0});var TEt=s(jH);nkr=r(TEt,"FlaxDistilBertForTokenClassification"),TEt.forEach(t),skr=r(cRe," (DistilBERT model)"),cRe.forEach(t),lkr=i(Oo),lE=n(Oo,"LI",{});var fRe=s(lE);IFe=n(fRe,"STRONG",{});var MEt=s(IFe);ikr=r(MEt,"electra"),MEt.forEach(t),dkr=r(fRe," \u2014 "),DH=n(fRe,"A",{href:!0});var EEt=s(DH);ckr=r(EEt,"FlaxElectraForTokenClassification"),EEt.forEach(t),fkr=r(fRe," (ELECTRA model)"),fRe.forEach(t),mkr=i(Oo),iE=n(Oo,"LI",{});var mRe=s(iE);qFe=n(mRe,"STRONG",{});var CEt=s(qFe);gkr=r(CEt,"roberta"),CEt.forEach(t),hkr=r(mRe," \u2014 "),GH=n(mRe,"A",{href:!0});var wEt=s(GH);pkr=r(wEt,"FlaxRobertaForTokenClassification"),wEt.forEach(t),_kr=r(mRe," (RoBERTa model)"),mRe.forEach(t),ukr=i(Oo),dE=n(Oo,"LI",{});var gRe=s(dE);NFe=n(gRe,"STRONG",{});var AEt=s(NFe);bkr=r(AEt,"roformer"),AEt.forEach(t),Fkr=r(gRe," \u2014 "),OH=n(gRe,"A",{href:!0});var yEt=s(OH);vkr=r(yEt,"FlaxRoFormerForTokenClassification"),yEt.forEach(t),Tkr=r(gRe," (RoFormer model)"),gRe.forEach(t),Mkr=i(Oo),cE=n(Oo,"LI",{});var hRe=s(cE);jFe=n(hRe,"STRONG",{});var LEt=s(jFe);Ekr=r(LEt,"xlm-roberta"),LEt.forEach(t),Ckr=r(hRe," \u2014 "),VH=n(hRe,"A",{href:!0});var xEt=s(VH);wkr=r(xEt,"FlaxXLMRobertaForTokenClassification"),xEt.forEach(t),Akr=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),Oo.forEach(t),ykr=i($a),DFe=n($a,"P",{});var kEt=s(DFe);Lkr=r(kEt,"Examples:"),kEt.forEach(t),xkr=i($a),m(zL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),vPe=i(c),Ef=n(c,"H2",{class:!0});var SIe=s(Ef);fE=n(SIe,"A",{id:!0,class:!0,href:!0});var SEt=s(fE);GFe=n(SEt,"SPAN",{});var REt=s(GFe);m(QL.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),kkr=i(SIe),OFe=n(SIe,"SPAN",{});var BEt=s(OFe);Skr=r(BEt,"FlaxAutoModelForMultipleChoice"),BEt.forEach(t),SIe.forEach(t),TPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(WL.$$.fragment,Li),Rkr=i(Li),Cf=n(Li,"P",{});var ZJ=s(Cf);Bkr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XH=n(ZJ,"A",{href:!0});var PEt=s(XH);Pkr=r(PEt,"from_pretrained()"),PEt.forEach(t),$kr=r(ZJ," class method or the "),zH=n(ZJ,"A",{href:!0});var $Et=s(zH);Ikr=r($Et,"from_config()"),$Et.forEach(t),qkr=r(ZJ,` class
method.`),ZJ.forEach(t),Nkr=i(Li),HL=n(Li,"P",{});var RIe=s(HL);jkr=r(RIe,"This class cannot be instantiated directly using "),VFe=n(RIe,"CODE",{});var IEt=s(VFe);Dkr=r(IEt,"__init__()"),IEt.forEach(t),Gkr=r(RIe," (throws an error)."),RIe.forEach(t),Okr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(UL.$$.fragment,xi),Vkr=i(xi),XFe=n(xi,"P",{});var qEt=s(XFe);Xkr=r(qEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qEt.forEach(t),zkr=i(xi),wf=n(xi,"P",{});var eY=s(wf);Qkr=r(eY,`Note:
Loading a model from its configuration file does `),zFe=n(eY,"STRONG",{});var NEt=s(zFe);Wkr=r(NEt,"not"),NEt.forEach(t),Hkr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(eY,"A",{href:!0});var jEt=s(QH);Ukr=r(jEt,"from_pretrained()"),jEt.forEach(t),Jkr=r(eY," to load the model weights."),eY.forEach(t),Ykr=i(xi),QFe=n(xi,"P",{});var DEt=s(QFe);Kkr=r(DEt,"Examples:"),DEt.forEach(t),Zkr=i(xi),m(JL.$$.fragment,xi),xi.forEach(t),eSr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(YL.$$.fragment,Ia),oSr=i(Ia),WFe=n(Ia,"P",{});var GEt=s(WFe);rSr=r(GEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GEt.forEach(t),tSr=i(Ia),qn=n(Ia,"P",{});var MC=s(qn);aSr=r(MC,"The model class to instantiate is selected based on the "),HFe=n(MC,"CODE",{});var OEt=s(HFe);nSr=r(OEt,"model_type"),OEt.forEach(t),sSr=r(MC,` property of the config object (either
passed as an argument or loaded from `),UFe=n(MC,"CODE",{});var VEt=s(UFe);lSr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),iSr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(MC,"CODE",{});var XEt=s(JFe);dSr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),cSr=r(MC,":"),MC.forEach(t),fSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);mE=n(Vo,"LI",{});var pRe=s(mE);YFe=n(pRe,"STRONG",{});var zEt=s(YFe);mSr=r(zEt,"albert"),zEt.forEach(t),gSr=r(pRe," \u2014 "),WH=n(pRe,"A",{href:!0});var QEt=s(WH);hSr=r(QEt,"FlaxAlbertForMultipleChoice"),QEt.forEach(t),pSr=r(pRe," (ALBERT model)"),pRe.forEach(t),_Sr=i(Vo),gE=n(Vo,"LI",{});var _Re=s(gE);KFe=n(_Re,"STRONG",{});var WEt=s(KFe);uSr=r(WEt,"bert"),WEt.forEach(t),bSr=r(_Re," \u2014 "),HH=n(_Re,"A",{href:!0});var HEt=s(HH);FSr=r(HEt,"FlaxBertForMultipleChoice"),HEt.forEach(t),vSr=r(_Re," (BERT model)"),_Re.forEach(t),TSr=i(Vo),hE=n(Vo,"LI",{});var uRe=s(hE);ZFe=n(uRe,"STRONG",{});var UEt=s(ZFe);MSr=r(UEt,"big_bird"),UEt.forEach(t),ESr=r(uRe," \u2014 "),UH=n(uRe,"A",{href:!0});var JEt=s(UH);CSr=r(JEt,"FlaxBigBirdForMultipleChoice"),JEt.forEach(t),wSr=r(uRe," (BigBird model)"),uRe.forEach(t),ASr=i(Vo),pE=n(Vo,"LI",{});var bRe=s(pE);eve=n(bRe,"STRONG",{});var YEt=s(eve);ySr=r(YEt,"distilbert"),YEt.forEach(t),LSr=r(bRe," \u2014 "),JH=n(bRe,"A",{href:!0});var KEt=s(JH);xSr=r(KEt,"FlaxDistilBertForMultipleChoice"),KEt.forEach(t),kSr=r(bRe," (DistilBERT model)"),bRe.forEach(t),SSr=i(Vo),_E=n(Vo,"LI",{});var FRe=s(_E);ove=n(FRe,"STRONG",{});var ZEt=s(ove);RSr=r(ZEt,"electra"),ZEt.forEach(t),BSr=r(FRe," \u2014 "),YH=n(FRe,"A",{href:!0});var eCt=s(YH);PSr=r(eCt,"FlaxElectraForMultipleChoice"),eCt.forEach(t),$Sr=r(FRe," (ELECTRA model)"),FRe.forEach(t),ISr=i(Vo),uE=n(Vo,"LI",{});var vRe=s(uE);rve=n(vRe,"STRONG",{});var oCt=s(rve);qSr=r(oCt,"roberta"),oCt.forEach(t),NSr=r(vRe," \u2014 "),KH=n(vRe,"A",{href:!0});var rCt=s(KH);jSr=r(rCt,"FlaxRobertaForMultipleChoice"),rCt.forEach(t),DSr=r(vRe," (RoBERTa model)"),vRe.forEach(t),GSr=i(Vo),bE=n(Vo,"LI",{});var TRe=s(bE);tve=n(TRe,"STRONG",{});var tCt=s(tve);OSr=r(tCt,"roformer"),tCt.forEach(t),VSr=r(TRe," \u2014 "),ZH=n(TRe,"A",{href:!0});var aCt=s(ZH);XSr=r(aCt,"FlaxRoFormerForMultipleChoice"),aCt.forEach(t),zSr=r(TRe," (RoFormer model)"),TRe.forEach(t),QSr=i(Vo),FE=n(Vo,"LI",{});var MRe=s(FE);ave=n(MRe,"STRONG",{});var nCt=s(ave);WSr=r(nCt,"xlm-roberta"),nCt.forEach(t),HSr=r(MRe," \u2014 "),eU=n(MRe,"A",{href:!0});var sCt=s(eU);USr=r(sCt,"FlaxXLMRobertaForMultipleChoice"),sCt.forEach(t),JSr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Vo.forEach(t),YSr=i(Ia),nve=n(Ia,"P",{});var lCt=s(nve);KSr=r(lCt,"Examples:"),lCt.forEach(t),ZSr=i(Ia),m(KL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),MPe=i(c),Af=n(c,"H2",{class:!0});var BIe=s(Af);vE=n(BIe,"A",{id:!0,class:!0,href:!0});var iCt=s(vE);sve=n(iCt,"SPAN",{});var dCt=s(sve);m(ZL.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),eRr=i(BIe),lve=n(BIe,"SPAN",{});var cCt=s(lve);oRr=r(cCt,"FlaxAutoModelForNextSentencePrediction"),cCt.forEach(t),BIe.forEach(t),EPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(e8.$$.fragment,ki),rRr=i(ki),yf=n(ki,"P",{});var oY=s(yf);tRr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oU=n(oY,"A",{href:!0});var fCt=s(oU);aRr=r(fCt,"from_pretrained()"),fCt.forEach(t),nRr=r(oY," class method or the "),rU=n(oY,"A",{href:!0});var mCt=s(rU);sRr=r(mCt,"from_config()"),mCt.forEach(t),lRr=r(oY,` class
method.`),oY.forEach(t),iRr=i(ki),o8=n(ki,"P",{});var PIe=s(o8);dRr=r(PIe,"This class cannot be instantiated directly using "),ive=n(PIe,"CODE",{});var gCt=s(ive);cRr=r(gCt,"__init__()"),gCt.forEach(t),fRr=r(PIe," (throws an error)."),PIe.forEach(t),mRr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(r8.$$.fragment,Si),gRr=i(Si),dve=n(Si,"P",{});var hCt=s(dve);hRr=r(hCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hCt.forEach(t),pRr=i(Si),Lf=n(Si,"P",{});var rY=s(Lf);_Rr=r(rY,`Note:
Loading a model from its configuration file does `),cve=n(rY,"STRONG",{});var pCt=s(cve);uRr=r(pCt,"not"),pCt.forEach(t),bRr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(rY,"A",{href:!0});var _Ct=s(tU);FRr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),vRr=r(rY," to load the model weights."),rY.forEach(t),TRr=i(Si),fve=n(Si,"P",{});var uCt=s(fve);MRr=r(uCt,"Examples:"),uCt.forEach(t),ERr=i(Si),m(t8.$$.fragment,Si),Si.forEach(t),CRr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(a8.$$.fragment,qa),wRr=i(qa),mve=n(qa,"P",{});var bCt=s(mve);ARr=r(bCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bCt.forEach(t),yRr=i(qa),Nn=n(qa,"P",{});var EC=s(Nn);LRr=r(EC,"The model class to instantiate is selected based on the "),gve=n(EC,"CODE",{});var FCt=s(gve);xRr=r(FCt,"model_type"),FCt.forEach(t),kRr=r(EC,` property of the config object (either
passed as an argument or loaded from `),hve=n(EC,"CODE",{});var vCt=s(hve);SRr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),RRr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(EC,"CODE",{});var TCt=s(pve);BRr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),PRr=r(EC,":"),EC.forEach(t),$Rr=i(qa),_ve=n(qa,"UL",{});var MCt=s(_ve);TE=n(MCt,"LI",{});var ERe=s(TE);uve=n(ERe,"STRONG",{});var ECt=s(uve);IRr=r(ECt,"bert"),ECt.forEach(t),qRr=r(ERe," \u2014 "),aU=n(ERe,"A",{href:!0});var CCt=s(aU);NRr=r(CCt,"FlaxBertForNextSentencePrediction"),CCt.forEach(t),jRr=r(ERe," (BERT model)"),ERe.forEach(t),MCt.forEach(t),DRr=i(qa),bve=n(qa,"P",{});var wCt=s(bve);GRr=r(wCt,"Examples:"),wCt.forEach(t),ORr=i(qa),m(n8.$$.fragment,qa),qa.forEach(t),ki.forEach(t),CPe=i(c),xf=n(c,"H2",{class:!0});var $Ie=s(xf);ME=n($Ie,"A",{id:!0,class:!0,href:!0});var ACt=s(ME);Fve=n(ACt,"SPAN",{});var yCt=s(Fve);m(s8.$$.fragment,yCt),yCt.forEach(t),ACt.forEach(t),VRr=i($Ie),vve=n($Ie,"SPAN",{});var LCt=s(vve);XRr=r(LCt,"FlaxAutoModelForImageClassification"),LCt.forEach(t),$Ie.forEach(t),wPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(l8.$$.fragment,Ri),zRr=i(Ri),kf=n(Ri,"P",{});var tY=s(kf);QRr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nU=n(tY,"A",{href:!0});var xCt=s(nU);WRr=r(xCt,"from_pretrained()"),xCt.forEach(t),HRr=r(tY," class method or the "),sU=n(tY,"A",{href:!0});var kCt=s(sU);URr=r(kCt,"from_config()"),kCt.forEach(t),JRr=r(tY,` class
method.`),tY.forEach(t),YRr=i(Ri),i8=n(Ri,"P",{});var IIe=s(i8);KRr=r(IIe,"This class cannot be instantiated directly using "),Tve=n(IIe,"CODE",{});var SCt=s(Tve);ZRr=r(SCt,"__init__()"),SCt.forEach(t),eBr=r(IIe," (throws an error)."),IIe.forEach(t),oBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(d8.$$.fragment,Bi),rBr=i(Bi),Mve=n(Bi,"P",{});var RCt=s(Mve);tBr=r(RCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RCt.forEach(t),aBr=i(Bi),Sf=n(Bi,"P",{});var aY=s(Sf);nBr=r(aY,`Note:
Loading a model from its configuration file does `),Eve=n(aY,"STRONG",{});var BCt=s(Eve);sBr=r(BCt,"not"),BCt.forEach(t),lBr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(aY,"A",{href:!0});var PCt=s(lU);iBr=r(PCt,"from_pretrained()"),PCt.forEach(t),dBr=r(aY," to load the model weights."),aY.forEach(t),cBr=i(Bi),Cve=n(Bi,"P",{});var $Ct=s(Cve);fBr=r($Ct,"Examples:"),$Ct.forEach(t),mBr=i(Bi),m(c8.$$.fragment,Bi),Bi.forEach(t),gBr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(f8.$$.fragment,Na),hBr=i(Na),wve=n(Na,"P",{});var ICt=s(wve);pBr=r(ICt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ICt.forEach(t),_Br=i(Na),jn=n(Na,"P",{});var CC=s(jn);uBr=r(CC,"The model class to instantiate is selected based on the "),Ave=n(CC,"CODE",{});var qCt=s(Ave);bBr=r(qCt,"model_type"),qCt.forEach(t),FBr=r(CC,` property of the config object (either
passed as an argument or loaded from `),yve=n(CC,"CODE",{});var NCt=s(yve);vBr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),TBr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(CC,"CODE",{});var jCt=s(Lve);MBr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),EBr=r(CC,":"),CC.forEach(t),CBr=i(Na),m8=n(Na,"UL",{});var qIe=s(m8);EE=n(qIe,"LI",{});var CRe=s(EE);xve=n(CRe,"STRONG",{});var DCt=s(xve);wBr=r(DCt,"beit"),DCt.forEach(t),ABr=r(CRe," \u2014 "),iU=n(CRe,"A",{href:!0});var GCt=s(iU);yBr=r(GCt,"FlaxBeitForImageClassification"),GCt.forEach(t),LBr=r(CRe," (BEiT model)"),CRe.forEach(t),xBr=i(qIe),CE=n(qIe,"LI",{});var wRe=s(CE);kve=n(wRe,"STRONG",{});var OCt=s(kve);kBr=r(OCt,"vit"),OCt.forEach(t),SBr=r(wRe," \u2014 "),dU=n(wRe,"A",{href:!0});var VCt=s(dU);RBr=r(VCt,"FlaxViTForImageClassification"),VCt.forEach(t),BBr=r(wRe," (ViT model)"),wRe.forEach(t),qIe.forEach(t),PBr=i(Na),Sve=n(Na,"P",{});var XCt=s(Sve);$Br=r(XCt,"Examples:"),XCt.forEach(t),IBr=i(Na),m(g8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),APe=i(c),Rf=n(c,"H2",{class:!0});var NIe=s(Rf);wE=n(NIe,"A",{id:!0,class:!0,href:!0});var zCt=s(wE);Rve=n(zCt,"SPAN",{});var QCt=s(Rve);m(h8.$$.fragment,QCt),QCt.forEach(t),zCt.forEach(t),qBr=i(NIe),Bve=n(NIe,"SPAN",{});var WCt=s(Bve);NBr=r(WCt,"FlaxAutoModelForVision2Seq"),WCt.forEach(t),NIe.forEach(t),yPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(p8.$$.fragment,Pi),jBr=i(Pi),Bf=n(Pi,"P",{});var nY=s(Bf);DBr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cU=n(nY,"A",{href:!0});var HCt=s(cU);GBr=r(HCt,"from_pretrained()"),HCt.forEach(t),OBr=r(nY," class method or the "),fU=n(nY,"A",{href:!0});var UCt=s(fU);VBr=r(UCt,"from_config()"),UCt.forEach(t),XBr=r(nY,` class
method.`),nY.forEach(t),zBr=i(Pi),_8=n(Pi,"P",{});var jIe=s(_8);QBr=r(jIe,"This class cannot be instantiated directly using "),Pve=n(jIe,"CODE",{});var JCt=s(Pve);WBr=r(JCt,"__init__()"),JCt.forEach(t),HBr=r(jIe," (throws an error)."),jIe.forEach(t),UBr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(u8.$$.fragment,$i),JBr=i($i),$ve=n($i,"P",{});var YCt=s($ve);YBr=r(YCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YCt.forEach(t),KBr=i($i),Pf=n($i,"P",{});var sY=s(Pf);ZBr=r(sY,`Note:
Loading a model from its configuration file does `),Ive=n(sY,"STRONG",{});var KCt=s(Ive);ePr=r(KCt,"not"),KCt.forEach(t),oPr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(sY,"A",{href:!0});var ZCt=s(mU);rPr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),tPr=r(sY," to load the model weights."),sY.forEach(t),aPr=i($i),qve=n($i,"P",{});var ewt=s(qve);nPr=r(ewt,"Examples:"),ewt.forEach(t),sPr=i($i),m(b8.$$.fragment,$i),$i.forEach(t),lPr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(F8.$$.fragment,ja),iPr=i(ja),Nve=n(ja,"P",{});var owt=s(Nve);dPr=r(owt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),owt.forEach(t),cPr=i(ja),Dn=n(ja,"P",{});var wC=s(Dn);fPr=r(wC,"The model class to instantiate is selected based on the "),jve=n(wC,"CODE",{});var rwt=s(jve);mPr=r(rwt,"model_type"),rwt.forEach(t),gPr=r(wC,` property of the config object (either
passed as an argument or loaded from `),Dve=n(wC,"CODE",{});var twt=s(Dve);hPr=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),pPr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(wC,"CODE",{});var awt=s(Gve);_Pr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),uPr=r(wC,":"),wC.forEach(t),bPr=i(ja),Ove=n(ja,"UL",{});var nwt=s(Ove);AE=n(nwt,"LI",{});var ARe=s(AE);Vve=n(ARe,"STRONG",{});var swt=s(Vve);FPr=r(swt,"vision-encoder-decoder"),swt.forEach(t),vPr=r(ARe," \u2014 "),gU=n(ARe,"A",{href:!0});var lwt=s(gU);TPr=r(lwt,"FlaxVisionEncoderDecoderModel"),lwt.forEach(t),MPr=r(ARe," (Vision Encoder decoder model)"),ARe.forEach(t),nwt.forEach(t),EPr=i(ja),Xve=n(ja,"P",{});var iwt=s(Xve);CPr=r(iwt,"Examples:"),iwt.forEach(t),wPr=i(ja),m(v8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(bwt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(C9,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(w9,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig"),d(A9,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig"),d(y9,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig"),d(L9,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig"),d(x9,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(k9,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig"),d(S9,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(R9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(B9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(P9,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig"),d($9,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig"),d(I9,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig"),d(q9,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig"),d(N9,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig"),d(j9,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig"),d(D9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(G9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(O9,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig"),d(V9,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(X9,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(z9,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig"),d(Q9,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig"),d(W9,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig"),d(H9,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig"),d(U9,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig"),d(J9,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig"),d(Y9,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(K9,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Config"),d(Z9,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ex,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig"),d(ox,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig"),d(rx,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig"),d(tx,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig"),d(ax,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config"),d(nx,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(sx,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig"),d(lx,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig"),d(ix,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig"),d(dx,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(cx,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(fx,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(mx,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig"),d(gx,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig"),d(hx,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig"),d(px,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig"),d(_x,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config"),d(ux,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig"),d(bx,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Fx,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig"),d(vx,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Tx,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Mx,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig"),d(Ex,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config"),d(Cx,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wx,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Ax,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig"),d(yx,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Lx,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig"),d(xx,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(kx,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Sx,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Rx,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagConfig"),d(Bx,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmConfig"),d(Px,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig"),d($x,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig"),d(Ix,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig"),d(qx,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig"),d(Nx,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig"),d(jx,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig"),d(Dx,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig"),d(Gx,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig"),d(Ox,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig"),d(Vx,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig"),d(Xx,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(zx,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Qx,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Wx,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig"),d(Hx,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ux,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig"),d(Jx,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config"),d(Yx,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig"),d(Kx,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig"),d(Zx,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ek,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig"),d(ok,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(rk,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(tk,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig"),d(ak,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig"),d(nk,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(sk,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(lk,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ik,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig"),d(dk,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ck,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(fk,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig"),d(mk,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig"),d(gk,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig"),d(hk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(pk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(_k,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(uk,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig"),d(bk,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ng,"class","docstring"),d(Qo,"class","docstring"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(Fk,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(vk,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizer"),d(Tk,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Mk,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizer"),d(Ek,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ck,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizer"),d(wk,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Ak,"href","/docs/transformers/pr_15773/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(yk,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(Lk,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d(xk,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(kk,"href","/docs/transformers/pr_15773/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Sk,"href","/docs/transformers/pr_15773/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Rk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Bk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Pk,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d($k,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ik,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(qk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Nk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(jk,"href","/docs/transformers/pr_15773/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Dk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Gk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineTokenizer"),d(Vk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizer"),d(Xk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(zk,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Qk,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_15773/en/model_doc/cpm#transformers.CpmTokenizer"),d(Hk,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Uk,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Jk,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Yk,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Kk,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Zk,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(eS,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(oS,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(rS,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizer"),d(tS,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(aS,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Tokenizer"),d(nS,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(sS,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizer"),d(lS,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(iS,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(dS,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizer"),d(cS,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(fS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(mS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(gS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(hS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(pS,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizer"),d(_S,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(uS,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(bS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(TS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(MS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(ES,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(CS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(wS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(AS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizer"),d(yS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizerFast"),d(LS,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizer"),d(xS,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(kS,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeTokenizer"),d(SS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(RS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(BS,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(PS,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianTokenizer"),d($S,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizer"),d(IS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(qS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(NS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(jS,"href","/docs/transformers/pr_15773/en/model_doc/mluke#transformers.MLukeTokenizer"),d(DS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(GS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(OS,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(VS,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(XS,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5Tokenizer"),d(zS,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5TokenizerFast"),d(QS,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(WS,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(HS,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(US,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(JS,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(YS,"href","/docs/transformers/pr_15773/en/model_doc/phobert#transformers.PhobertTokenizer"),d(KS,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartTokenizer"),d(ZS,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(eR,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(oR,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d(rR,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagTokenizer"),d(tR,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizer"),d(aR,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizerFast"),d(nR,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizer"),d(sR,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(lR,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizer"),d(iR,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(dR,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(cR,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(fR,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(mR,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(gR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(hR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(pR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(_R,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(uR,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizer"),d(bR,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(FR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(vR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(TR,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5Tokenizer"),d(MR,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ER,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasTokenizer"),d(CR,"href","/docs/transformers/pr_15773/en/model_doc/tapex#transformers.TapexTokenizer"),d(wR,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(AR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(yR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(LR,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizer"),d(xR,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(kR,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMTokenizer"),d(SR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(RR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(BR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(PR,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizer"),d($R,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(uh,"class","docstring"),d(Wo,"class","docstring"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(IR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(qR,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(NR,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(jR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(DR,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(GR,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(OR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(VR,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(XR,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(zR,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(QR,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(WR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(UR,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(JR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(YR,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(KR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(eB,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(jh,"class","docstring"),d(Ho,"class","docstring"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(rB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(tB,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPProcessor"),d(aB,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(nB,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(sB,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(lB,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(iB,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRProcessor"),d(dB,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(cB,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Jh,"class","docstring"),d(Uo,"class","docstring"),d(Yh,"id","transformers.AutoModel"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(fB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(hB,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel"),d(pB,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel"),d(_B,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel"),d(uB,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(bB,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(FB,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel"),d(vB,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(TB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(MB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(EB,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel"),d(CB,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel"),d(wB,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel"),d(AB,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel"),d(yB,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel"),d(LB,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel"),d(xB,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(kB,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(SB,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel"),d(RB,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(BB,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(PB,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel"),d($B,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel"),d(IB,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel"),d(qB,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(NB,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel"),d(jB,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel"),d(DB,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Model"),d(GB,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel"),d(OB,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel"),d(VB,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel"),d(XB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel"),d(zB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel"),d(QB,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel"),d(WB,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model"),d(HB,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(UB,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel"),d(JB,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel"),d(YB,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel"),d(KB,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(ZB,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(eP,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(oP,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel"),d(rP,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel"),d(tP,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel"),d(aP,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel"),d(nP,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model"),d(sP,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel"),d(lP,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel"),d(iP,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel"),d(dP,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(cP,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel"),d(fP,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel"),d(mP,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model"),d(gP,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel"),d(hP,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(pP,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel"),d(_P,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel"),d(uP,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel"),d(bP,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel"),d(FP,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(vP,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel"),d(TP,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel"),d(MP,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetModel"),d(EP,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel"),d(CP,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel"),d(wP,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(AP,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel"),d(yP,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel"),d(LP,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel"),d(xP,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel"),d(kP,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel"),d(SP,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(RP,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel"),d(BP,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(PP,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel"),d($P,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model"),d(IP,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel"),d(qP,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(NP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel"),d(jP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(DP,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel"),d(GP,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel"),d(OP,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(VP,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel"),d(XP,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel"),d(zP,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(QP,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(WP,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel"),d(HP,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel"),d(UP,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel"),d(JP,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(YP,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(KP,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(ZP,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel"),d(e$,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(N_,"id","transformers.AutoModelForPreTraining"),d(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(o$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(r$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(t$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(a$,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining"),d(n$,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(s$,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining"),d(l$,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(i$,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(d$,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(c$,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(f$,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(m$,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(g$,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(h$,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining"),d(p$,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(_$,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining"),d(u$,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(b$,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(F$,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(v$,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(T$,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(M$,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(E$,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(C$,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(w$,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(A$,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(y$,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(L$,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(x$,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(k$,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(S$,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(B$,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(P$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d($$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(I$,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(q$,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(N$,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(j$,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(D$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(G$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(O$,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(wu,"id","transformers.AutoModelForCausalLM"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(V$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(X$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(z$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(Q$,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM"),d(W$,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel"),d(H$,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(U$,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(J$,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(Y$,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(K$,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(Z$,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(eI,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(oI,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(rI,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM"),d(tI,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(aI,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(nI,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(sI,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM"),d(lI,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM"),d(iI,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(dI,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(cI,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(fI,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(mI,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(gI,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(hI,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(pI,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(_I,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(uI,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(bI,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(FI,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(vI,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(TI,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(MI,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(EI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(CI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(wI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(AI,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(i1,"id","transformers.AutoModelForMaskedLM"),d(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(yI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(kI,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(SI,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM"),d(BI,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(PI,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d($I,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(II,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(qI,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(NI,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(jI,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(DI,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(GI,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(OI,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(VI,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(XI,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(QI,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(WI,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(HI,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(UI,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(YI,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(KI,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(ZI,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(eq,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(oq,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(tq,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(aq,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(nq,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(sq,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(lq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(iq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(dq,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(z1,"id","transformers.AutoModelForSeq2SeqLM"),d(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(cq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(gq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(bq,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel"),d(Mq,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(c7,"id","transformers.AutoModelForSequenceClassification"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(kq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Sq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Rq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(Bq,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification"),d($q,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(qq,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(zq,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vN,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(TN,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(MN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(EN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(CN,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(wN,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(nb,"id","transformers.AutoModelForMultipleChoice"),d(nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(AN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(xN,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d($N,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(YN,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(ej,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(oj,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(rj,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d($b,"id","transformers.AutoModelForNextSentencePrediction"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(tj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(sj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(lj,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(ij,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(dj,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(cj,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Ob,"id","transformers.AutoModelForTokenClassification"),d(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ob,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(fj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(hj,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(pj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification"),d(_j,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(uj,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(bj,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Fj,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Tj,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Mj,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Ej,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(wj,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(yj,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Lj,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(xj,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(kj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Sj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Rj,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Bj,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Pj,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d($j,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Ij,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(qj,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Nj,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Dj,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Gj,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Vj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Xj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(zj,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Qj,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(E5,"id","transformers.AutoModelForQuestionAnswering"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Wj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Uj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Jj,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(cD,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(SD,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(PD,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(c3,"id","transformers.AutoModelForTableQuestionAnswering"),d(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d($D,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(ND,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(g3,"id","transformers.AutoModelForImageClassification"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(jD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(OD,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification"),d(VD,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(XD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification"),d(zD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(QD,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(WD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(HD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(UD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(JD,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(YD,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(KD,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(ZD,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(eG,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification"),d(oG,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification"),d(rG,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(w3,"id","transformers.AutoModelForVision2Seq"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(tG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(sG,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(L3,"id","transformers.AutoModelForAudioClassification"),d(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L3,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(lG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(cG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(fG,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(mG,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(gG,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(hG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(pG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(_G,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(uG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(N3,"id","transformers.AutoModelForAudioFrameClassification"),d(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N3,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(bG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(TG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(MG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(EG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(CG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(X3,"id","transformers.AutoModelForCTC"),d(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X3,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(wG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(LG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(xG,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC"),d(kG,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC"),d(SG,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC"),d(RG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(BG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(PG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d($G,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(e2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(IG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(jG,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(DG,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(a2,"id","transformers.AutoModelForAudioXVector"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(GG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(XG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(zG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(QG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(WG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(c2,"id","transformers.AutoModelForMaskedImageModeling"),d(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(HG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(YG,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(KG,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(ZG,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(p2,"id","transformers.AutoModelForObjectDetection"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(eO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(tO,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(b2,"id","transformers.AutoModelForImageSegmentation"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(aO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(lO,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(T2,"id","transformers.AutoModelForSemanticSegmentation"),d(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T2,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(iO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(fO,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(mO,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(gO,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(A2,"id","transformers.AutoModelForInstanceSegmentation"),d(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(hO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_O,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(uO,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(x2,"id","transformers.TFAutoModel"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(bO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(TO,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel"),d(MO,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel"),d(EO,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel"),d(CO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(wO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(AO,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel"),d(yO,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel"),d(LO,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel"),d(xO,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel"),d(kO,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel"),d(SO,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel"),d(RO,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(BO,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(PO,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d($O,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel"),d(IO,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(qO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel"),d(NO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(jO,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model"),d(DO,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel"),d(GO,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel"),d(OO,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(VO,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel"),d(XO,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel"),d(zO,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel"),d(QO,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel"),d(WO,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel"),d(HO,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(UO,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel"),d(JO,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model"),d(YO,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(KO,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel"),d(ZO,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel"),d(eV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel"),d(oV,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel"),d(rV,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(tV,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model"),d(aV,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel"),d(nV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(sV,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel"),d(lV,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(iV,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(dV,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel"),d(cV,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(fV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(FF,"id","transformers.TFAutoModelForPreTraining"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(mV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(pV,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(_V,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(uV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining"),d(bV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(FV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vV,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(TV,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(MV,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(EV,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(CV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(wV,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(AV,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(yV,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(LV,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(xV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(RV,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(BV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(PV,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d($V,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(IV,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(qV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(VF,"id","transformers.TFAutoModelForCausalLM"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(NV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(GV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(OV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(VV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(XV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(zV,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(QV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(WV,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(HV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(UV,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(JV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(YV,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(KV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(rv,"id","transformers.TFAutoModelForImageClassification"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(ZV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(rX,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(tX,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(nv,"id","transformers.TFAutoModelForMaskedLM"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(aX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(lX,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(iX,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(dX,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(cX,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(fX,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(mX,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(gX,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(pX,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(_X,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(uX,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(bX,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(FX,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(TX,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(MX,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(EX,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(CX,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(wX,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(AX,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(Av,"id","transformers.TFAutoModelForSeq2SeqLM"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(yX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(kX,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(PX,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d($X,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel"),d(IX,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(NX,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(jX,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(qv,"id","transformers.TFAutoModelForSequenceClassification"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(DX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(VX,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(HX,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(JX,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(KX,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(ez,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(oz,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(rz,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(tz,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(az,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(nz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(sz,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(lz,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(dz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(cz,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(fz,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(mz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(gz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(cT,"id","transformers.TFAutoModelForMultipleChoice"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(pz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_z,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(bz,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(wz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Az,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(yz,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(xz,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(LT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d($z,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Iz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Nz,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(kT,"id","transformers.TFAutoModelForTokenClassification"),d(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(jz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Oz,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(zz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Qz,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Wz,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Hz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Jz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Kz,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Zz,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(eQ,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(rQ,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(tQ,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(aQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(nQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(sQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(lQ,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(YT,"id","transformers.TFAutoModelForQuestionAnswering"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(iQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(fQ,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(vQ,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(bM,"id","transformers.TFAutoModelForVision2Seq"),d(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(SQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(PQ,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(vM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d($Q,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(NQ,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(MM,"id","transformers.FlaxAutoModel"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(jQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(OQ,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel"),d(VQ,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel"),d(XQ,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel"),d(zQ,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel"),d(QQ,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(WQ,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(HQ,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(UQ,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel"),d(JQ,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(YQ,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel"),d(KQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(ZQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(eW,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(oW,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel"),d(rW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel"),d(tW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model"),d(aW,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(nW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(sW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(lW,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model"),d(iW,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(dW,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel"),d(cW,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(fW,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(mW,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(HM,"id","transformers.FlaxAutoModelForCausalLM"),d(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(gW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(_W,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(uW,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(bW,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(FW,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(vW,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(e4,"id","transformers.FlaxAutoModelForPreTraining"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(TW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(CW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(wW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(yW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(LW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(xW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(kW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(SW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(RW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(BW,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d($W,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(g4,"id","transformers.FlaxAutoModelForMaskedLM"),d(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(IW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(jW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(DW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(OW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(VW,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(XW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(zW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(QW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(WW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(HW,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(C4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(UW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(KW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(oH,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(rH,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(tH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(nH,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(sH,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(P4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(lH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(cH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(fH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(mH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(gH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(hH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(pH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(_H,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(uH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(bH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(FH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(z4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(vH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(EH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(rE,"id","transformers.FlaxAutoModelForTokenClassification"),d(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(BH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(IH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(qH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(NH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(jH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(DH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(GH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(OH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(VH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(fE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(XH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(WH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(HH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(UH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(JH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(YH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(KH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(eU,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(vE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(oU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(aU,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(ME,"id","transformers.FlaxAutoModelForImageClassification"),d(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ME,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(nU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(iU,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(dU,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(wE,"id","transformers.FlaxAutoModelForVision2Seq"),d(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(cU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(gU,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,AC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,yC),e(co,On),e(co,Vn),e(Vn,LC),e(co,Di),e(co,Xn),e(Xn,xC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,b9),e(ue,Oi),e(Oi,F9),e(ue,v9),b(c,zo,u),b(c,Ga,u),e(Ga,T9),e(Ga,Df),e(Df,M9),e(Ga,DIe),b(c,yRe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,lY),g(kC,lY,null),e(Vi,GIe),e(Vi,iY),e(iY,OIe),b(c,LRe,u),b(c,zn,u),e(zn,VIe),e(zn,dY),e(dY,XIe),e(zn,zIe),e(zn,cY),e(cY,QIe),e(zn,WIe),b(c,xRe,u),g(SC,c,u),b(c,kRe,u),b(c,E9,u),e(E9,HIe),b(c,SRe,u),g(Of,c,u),b(c,RRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,fY),g(RC,fY,null),e(Xi,UIe),e(Xi,mY),e(mY,JIe),b(c,BRe,u),b(c,Qo,u),g(BC,Qo,null),e(Qo,YIe),e(Qo,PC),e(PC,KIe),e(PC,C9),e(C9,ZIe),e(PC,eqe),e(Qo,oqe),e(Qo,$C),e($C,rqe),e($C,gY),e(gY,tqe),e($C,aqe),e(Qo,nqe),e(Qo,mo),g(IC,mo,null),e(mo,sqe),e(mo,hY),e(hY,lqe),e(mo,iqe),e(mo,zi),e(zi,dqe),e(zi,pY),e(pY,cqe),e(zi,fqe),e(zi,_Y),e(_Y,mqe),e(zi,gqe),e(mo,hqe),e(mo,F),e(F,Xf),e(Xf,uY),e(uY,pqe),e(Xf,_qe),e(Xf,w9),e(w9,uqe),e(Xf,bqe),e(F,Fqe),e(F,zf),e(zf,bY),e(bY,vqe),e(zf,Tqe),e(zf,A9),e(A9,Mqe),e(zf,Eqe),e(F,Cqe),e(F,Qf),e(Qf,FY),e(FY,wqe),e(Qf,Aqe),e(Qf,y9),e(y9,yqe),e(Qf,Lqe),e(F,xqe),e(F,Wf),e(Wf,vY),e(vY,kqe),e(Wf,Sqe),e(Wf,L9),e(L9,Rqe),e(Wf,Bqe),e(F,Pqe),e(F,Hf),e(Hf,TY),e(TY,$qe),e(Hf,Iqe),e(Hf,x9),e(x9,qqe),e(Hf,Nqe),e(F,jqe),e(F,Uf),e(Uf,MY),e(MY,Dqe),e(Uf,Gqe),e(Uf,k9),e(k9,Oqe),e(Uf,Vqe),e(F,Xqe),e(F,Jf),e(Jf,EY),e(EY,zqe),e(Jf,Qqe),e(Jf,S9),e(S9,Wqe),e(Jf,Hqe),e(F,Uqe),e(F,Yf),e(Yf,CY),e(CY,Jqe),e(Yf,Yqe),e(Yf,R9),e(R9,Kqe),e(Yf,Zqe),e(F,eNe),e(F,Kf),e(Kf,wY),e(wY,oNe),e(Kf,rNe),e(Kf,B9),e(B9,tNe),e(Kf,aNe),e(F,nNe),e(F,Zf),e(Zf,AY),e(AY,sNe),e(Zf,lNe),e(Zf,P9),e(P9,iNe),e(Zf,dNe),e(F,cNe),e(F,em),e(em,yY),e(yY,fNe),e(em,mNe),e(em,$9),e($9,gNe),e(em,hNe),e(F,pNe),e(F,om),e(om,LY),e(LY,_Ne),e(om,uNe),e(om,I9),e(I9,bNe),e(om,FNe),e(F,vNe),e(F,rm),e(rm,xY),e(xY,TNe),e(rm,MNe),e(rm,q9),e(q9,ENe),e(rm,CNe),e(F,wNe),e(F,tm),e(tm,kY),e(kY,ANe),e(tm,yNe),e(tm,N9),e(N9,LNe),e(tm,xNe),e(F,kNe),e(F,am),e(am,SY),e(SY,SNe),e(am,RNe),e(am,j9),e(j9,BNe),e(am,PNe),e(F,$Ne),e(F,nm),e(nm,RY),e(RY,INe),e(nm,qNe),e(nm,D9),e(D9,NNe),e(nm,jNe),e(F,DNe),e(F,sm),e(sm,BY),e(BY,GNe),e(sm,ONe),e(sm,G9),e(G9,VNe),e(sm,XNe),e(F,zNe),e(F,lm),e(lm,PY),e(PY,QNe),e(lm,WNe),e(lm,O9),e(O9,HNe),e(lm,UNe),e(F,JNe),e(F,im),e(im,$Y),e($Y,YNe),e(im,KNe),e(im,V9),e(V9,ZNe),e(im,eje),e(F,oje),e(F,dm),e(dm,IY),e(IY,rje),e(dm,tje),e(dm,X9),e(X9,aje),e(dm,nje),e(F,sje),e(F,cm),e(cm,qY),e(qY,lje),e(cm,ije),e(cm,z9),e(z9,dje),e(cm,cje),e(F,fje),e(F,fm),e(fm,NY),e(NY,mje),e(fm,gje),e(fm,Q9),e(Q9,hje),e(fm,pje),e(F,_je),e(F,mm),e(mm,jY),e(jY,uje),e(mm,bje),e(mm,W9),e(W9,Fje),e(mm,vje),e(F,Tje),e(F,gm),e(gm,DY),e(DY,Mje),e(gm,Eje),e(gm,H9),e(H9,Cje),e(gm,wje),e(F,Aje),e(F,hm),e(hm,GY),e(GY,yje),e(hm,Lje),e(hm,U9),e(U9,xje),e(hm,kje),e(F,Sje),e(F,pm),e(pm,OY),e(OY,Rje),e(pm,Bje),e(pm,J9),e(J9,Pje),e(pm,$je),e(F,Ije),e(F,_m),e(_m,VY),e(VY,qje),e(_m,Nje),e(_m,Y9),e(Y9,jje),e(_m,Dje),e(F,Gje),e(F,um),e(um,XY),e(XY,Oje),e(um,Vje),e(um,K9),e(K9,Xje),e(um,zje),e(F,Qje),e(F,bm),e(bm,zY),e(zY,Wje),e(bm,Hje),e(bm,Z9),e(Z9,Uje),e(bm,Jje),e(F,Yje),e(F,Fm),e(Fm,QY),e(QY,Kje),e(Fm,Zje),e(Fm,ex),e(ex,eDe),e(Fm,oDe),e(F,rDe),e(F,vm),e(vm,WY),e(WY,tDe),e(vm,aDe),e(vm,ox),e(ox,nDe),e(vm,sDe),e(F,lDe),e(F,Tm),e(Tm,HY),e(HY,iDe),e(Tm,dDe),e(Tm,rx),e(rx,cDe),e(Tm,fDe),e(F,mDe),e(F,Mm),e(Mm,UY),e(UY,gDe),e(Mm,hDe),e(Mm,tx),e(tx,pDe),e(Mm,_De),e(F,uDe),e(F,Em),e(Em,JY),e(JY,bDe),e(Em,FDe),e(Em,ax),e(ax,vDe),e(Em,TDe),e(F,MDe),e(F,Cm),e(Cm,YY),e(YY,EDe),e(Cm,CDe),e(Cm,nx),e(nx,wDe),e(Cm,ADe),e(F,yDe),e(F,wm),e(wm,KY),e(KY,LDe),e(wm,xDe),e(wm,sx),e(sx,kDe),e(wm,SDe),e(F,RDe),e(F,Am),e(Am,ZY),e(ZY,BDe),e(Am,PDe),e(Am,lx),e(lx,$De),e(Am,IDe),e(F,qDe),e(F,ym),e(ym,eK),e(eK,NDe),e(ym,jDe),e(ym,ix),e(ix,DDe),e(ym,GDe),e(F,ODe),e(F,Lm),e(Lm,oK),e(oK,VDe),e(Lm,XDe),e(Lm,dx),e(dx,zDe),e(Lm,QDe),e(F,WDe),e(F,xm),e(xm,rK),e(rK,HDe),e(xm,UDe),e(xm,cx),e(cx,JDe),e(xm,YDe),e(F,KDe),e(F,km),e(km,tK),e(tK,ZDe),e(km,eGe),e(km,fx),e(fx,oGe),e(km,rGe),e(F,tGe),e(F,Sm),e(Sm,aK),e(aK,aGe),e(Sm,nGe),e(Sm,mx),e(mx,sGe),e(Sm,lGe),e(F,iGe),e(F,Rm),e(Rm,nK),e(nK,dGe),e(Rm,cGe),e(Rm,gx),e(gx,fGe),e(Rm,mGe),e(F,gGe),e(F,Bm),e(Bm,sK),e(sK,hGe),e(Bm,pGe),e(Bm,hx),e(hx,_Ge),e(Bm,uGe),e(F,bGe),e(F,Pm),e(Pm,lK),e(lK,FGe),e(Pm,vGe),e(Pm,px),e(px,TGe),e(Pm,MGe),e(F,EGe),e(F,$m),e($m,iK),e(iK,CGe),e($m,wGe),e($m,_x),e(_x,AGe),e($m,yGe),e(F,LGe),e(F,Im),e(Im,dK),e(dK,xGe),e(Im,kGe),e(Im,ux),e(ux,SGe),e(Im,RGe),e(F,BGe),e(F,qm),e(qm,cK),e(cK,PGe),e(qm,$Ge),e(qm,bx),e(bx,IGe),e(qm,qGe),e(F,NGe),e(F,Nm),e(Nm,fK),e(fK,jGe),e(Nm,DGe),e(Nm,Fx),e(Fx,GGe),e(Nm,OGe),e(F,VGe),e(F,jm),e(jm,mK),e(mK,XGe),e(jm,zGe),e(jm,vx),e(vx,QGe),e(jm,WGe),e(F,HGe),e(F,Dm),e(Dm,gK),e(gK,UGe),e(Dm,JGe),e(Dm,Tx),e(Tx,YGe),e(Dm,KGe),e(F,ZGe),e(F,Gm),e(Gm,hK),e(hK,eOe),e(Gm,oOe),e(Gm,Mx),e(Mx,rOe),e(Gm,tOe),e(F,aOe),e(F,Om),e(Om,pK),e(pK,nOe),e(Om,sOe),e(Om,Ex),e(Ex,lOe),e(Om,iOe),e(F,dOe),e(F,Vm),e(Vm,_K),e(_K,cOe),e(Vm,fOe),e(Vm,Cx),e(Cx,mOe),e(Vm,gOe),e(F,hOe),e(F,Xm),e(Xm,uK),e(uK,pOe),e(Xm,_Oe),e(Xm,wx),e(wx,uOe),e(Xm,bOe),e(F,FOe),e(F,zm),e(zm,bK),e(bK,vOe),e(zm,TOe),e(zm,Ax),e(Ax,MOe),e(zm,EOe),e(F,COe),e(F,Qm),e(Qm,FK),e(FK,wOe),e(Qm,AOe),e(Qm,yx),e(yx,yOe),e(Qm,LOe),e(F,xOe),e(F,Wm),e(Wm,vK),e(vK,kOe),e(Wm,SOe),e(Wm,Lx),e(Lx,ROe),e(Wm,BOe),e(F,POe),e(F,Hm),e(Hm,TK),e(TK,$Oe),e(Hm,IOe),e(Hm,xx),e(xx,qOe),e(Hm,NOe),e(F,jOe),e(F,Um),e(Um,MK),e(MK,DOe),e(Um,GOe),e(Um,kx),e(kx,OOe),e(Um,VOe),e(F,XOe),e(F,Jm),e(Jm,EK),e(EK,zOe),e(Jm,QOe),e(Jm,Sx),e(Sx,WOe),e(Jm,HOe),e(F,UOe),e(F,Ym),e(Ym,CK),e(CK,JOe),e(Ym,YOe),e(Ym,Rx),e(Rx,KOe),e(Ym,ZOe),e(F,eVe),e(F,Km),e(Km,wK),e(wK,oVe),e(Km,rVe),e(Km,Bx),e(Bx,tVe),e(Km,aVe),e(F,nVe),e(F,Zm),e(Zm,AK),e(AK,sVe),e(Zm,lVe),e(Zm,Px),e(Px,iVe),e(Zm,dVe),e(F,cVe),e(F,eg),e(eg,yK),e(yK,fVe),e(eg,mVe),e(eg,$x),e($x,gVe),e(eg,hVe),e(F,pVe),e(F,og),e(og,LK),e(LK,_Ve),e(og,uVe),e(og,Ix),e(Ix,bVe),e(og,FVe),e(F,vVe),e(F,rg),e(rg,xK),e(xK,TVe),e(rg,MVe),e(rg,qx),e(qx,EVe),e(rg,CVe),e(F,wVe),e(F,tg),e(tg,kK),e(kK,AVe),e(tg,yVe),e(tg,Nx),e(Nx,LVe),e(tg,xVe),e(F,kVe),e(F,ag),e(ag,SK),e(SK,SVe),e(ag,RVe),e(ag,jx),e(jx,BVe),e(ag,PVe),e(F,$Ve),e(F,ng),e(ng,RK),e(RK,IVe),e(ng,qVe),e(ng,Dx),e(Dx,NVe),e(ng,jVe),e(F,DVe),e(F,sg),e(sg,BK),e(BK,GVe),e(sg,OVe),e(sg,Gx),e(Gx,VVe),e(sg,XVe),e(F,zVe),e(F,lg),e(lg,PK),e(PK,QVe),e(lg,WVe),e(lg,Ox),e(Ox,HVe),e(lg,UVe),e(F,JVe),e(F,ig),e(ig,$K),e($K,YVe),e(ig,KVe),e(ig,Vx),e(Vx,ZVe),e(ig,eXe),e(F,oXe),e(F,dg),e(dg,IK),e(IK,rXe),e(dg,tXe),e(dg,Xx),e(Xx,aXe),e(dg,nXe),e(F,sXe),e(F,cg),e(cg,qK),e(qK,lXe),e(cg,iXe),e(cg,zx),e(zx,dXe),e(cg,cXe),e(F,fXe),e(F,fg),e(fg,NK),e(NK,mXe),e(fg,gXe),e(fg,Qx),e(Qx,hXe),e(fg,pXe),e(F,_Xe),e(F,mg),e(mg,jK),e(jK,uXe),e(mg,bXe),e(mg,Wx),e(Wx,FXe),e(mg,vXe),e(F,TXe),e(F,gg),e(gg,DK),e(DK,MXe),e(gg,EXe),e(gg,Hx),e(Hx,CXe),e(gg,wXe),e(F,AXe),e(F,hg),e(hg,GK),e(GK,yXe),e(hg,LXe),e(hg,Ux),e(Ux,xXe),e(hg,kXe),e(F,SXe),e(F,pg),e(pg,OK),e(OK,RXe),e(pg,BXe),e(pg,Jx),e(Jx,PXe),e(pg,$Xe),e(F,IXe),e(F,_g),e(_g,VK),e(VK,qXe),e(_g,NXe),e(_g,Yx),e(Yx,jXe),e(_g,DXe),e(F,GXe),e(F,ug),e(ug,XK),e(XK,OXe),e(ug,VXe),e(ug,Kx),e(Kx,XXe),e(ug,zXe),e(F,QXe),e(F,bg),e(bg,zK),e(zK,WXe),e(bg,HXe),e(bg,Zx),e(Zx,UXe),e(bg,JXe),e(F,YXe),e(F,Fg),e(Fg,QK),e(QK,KXe),e(Fg,ZXe),e(Fg,ek),e(ek,eze),e(Fg,oze),e(F,rze),e(F,vg),e(vg,WK),e(WK,tze),e(vg,aze),e(vg,ok),e(ok,nze),e(vg,sze),e(F,lze),e(F,Tg),e(Tg,HK),e(HK,ize),e(Tg,dze),e(Tg,rk),e(rk,cze),e(Tg,fze),e(F,mze),e(F,Mg),e(Mg,UK),e(UK,gze),e(Mg,hze),e(Mg,tk),e(tk,pze),e(Mg,_ze),e(F,uze),e(F,Eg),e(Eg,JK),e(JK,bze),e(Eg,Fze),e(Eg,ak),e(ak,vze),e(Eg,Tze),e(F,Mze),e(F,Cg),e(Cg,YK),e(YK,Eze),e(Cg,Cze),e(Cg,nk),e(nk,wze),e(Cg,Aze),e(F,yze),e(F,wg),e(wg,KK),e(KK,Lze),e(wg,xze),e(wg,sk),e(sk,kze),e(wg,Sze),e(F,Rze),e(F,Ag),e(Ag,ZK),e(ZK,Bze),e(Ag,Pze),e(Ag,lk),e(lk,$ze),e(Ag,Ize),e(F,qze),e(F,yg),e(yg,eZ),e(eZ,Nze),e(yg,jze),e(yg,ik),e(ik,Dze),e(yg,Gze),e(F,Oze),e(F,Lg),e(Lg,oZ),e(oZ,Vze),e(Lg,Xze),e(Lg,dk),e(dk,zze),e(Lg,Qze),e(F,Wze),e(F,xg),e(xg,rZ),e(rZ,Hze),e(xg,Uze),e(xg,ck),e(ck,Jze),e(xg,Yze),e(F,Kze),e(F,kg),e(kg,tZ),e(tZ,Zze),e(kg,eQe),e(kg,fk),e(fk,oQe),e(kg,rQe),e(F,tQe),e(F,Sg),e(Sg,aZ),e(aZ,aQe),e(Sg,nQe),e(Sg,mk),e(mk,sQe),e(Sg,lQe),e(F,iQe),e(F,Rg),e(Rg,nZ),e(nZ,dQe),e(Rg,cQe),e(Rg,gk),e(gk,fQe),e(Rg,mQe),e(F,gQe),e(F,Bg),e(Bg,sZ),e(sZ,hQe),e(Bg,pQe),e(Bg,hk),e(hk,_Qe),e(Bg,uQe),e(F,bQe),e(F,Pg),e(Pg,lZ),e(lZ,FQe),e(Pg,vQe),e(Pg,pk),e(pk,TQe),e(Pg,MQe),e(F,EQe),e(F,$g),e($g,iZ),e(iZ,CQe),e($g,wQe),e($g,_k),e(_k,AQe),e($g,yQe),e(F,LQe),e(F,Ig),e(Ig,dZ),e(dZ,xQe),e(Ig,kQe),e(Ig,uk),e(uk,SQe),e(Ig,RQe),e(F,BQe),e(F,qg),e(qg,cZ),e(cZ,PQe),e(qg,$Qe),e(qg,bk),e(bk,IQe),e(qg,qQe),e(mo,NQe),e(mo,fZ),e(fZ,jQe),e(mo,DQe),g(qC,mo,null),e(Qo,GQe),e(Qo,Ng),g(NC,Ng,null),e(Ng,OQe),e(Ng,mZ),e(mZ,VQe),b(c,PRe,u),b(c,Qi,u),e(Qi,jg),e(jg,gZ),g(jC,gZ,null),e(Qi,XQe),e(Qi,hZ),e(hZ,zQe),b(c,$Re,u),b(c,Wo,u),g(DC,Wo,null),e(Wo,QQe),e(Wo,GC),e(GC,WQe),e(GC,Fk),e(Fk,HQe),e(GC,UQe),e(Wo,JQe),e(Wo,OC),e(OC,YQe),e(OC,pZ),e(pZ,KQe),e(OC,ZQe),e(Wo,eWe),e(Wo,go),g(VC,go,null),e(go,oWe),e(go,_Z),e(_Z,rWe),e(go,tWe),e(go,Oa),e(Oa,aWe),e(Oa,uZ),e(uZ,nWe),e(Oa,sWe),e(Oa,bZ),e(bZ,lWe),e(Oa,iWe),e(Oa,FZ),e(FZ,dWe),e(Oa,cWe),e(go,fWe),e(go,E),e(E,Qn),e(Qn,vZ),e(vZ,mWe),e(Qn,gWe),e(Qn,vk),e(vk,hWe),e(Qn,pWe),e(Qn,Tk),e(Tk,_We),e(Qn,uWe),e(E,bWe),e(E,Wn),e(Wn,TZ),e(TZ,FWe),e(Wn,vWe),e(Wn,Mk),e(Mk,TWe),e(Wn,MWe),e(Wn,Ek),e(Ek,EWe),e(Wn,CWe),e(E,wWe),e(E,Hn),e(Hn,MZ),e(MZ,AWe),e(Hn,yWe),e(Hn,Ck),e(Ck,LWe),e(Hn,xWe),e(Hn,wk),e(wk,kWe),e(Hn,SWe),e(E,RWe),e(E,Dg),e(Dg,EZ),e(EZ,BWe),e(Dg,PWe),e(Dg,Ak),e(Ak,$We),e(Dg,IWe),e(E,qWe),e(E,Un),e(Un,CZ),e(CZ,NWe),e(Un,jWe),e(Un,yk),e(yk,DWe),e(Un,GWe),e(Un,Lk),e(Lk,OWe),e(Un,VWe),e(E,XWe),e(E,Gg),e(Gg,wZ),e(wZ,zWe),e(Gg,QWe),e(Gg,xk),e(xk,WWe),e(Gg,HWe),e(E,UWe),e(E,Og),e(Og,AZ),e(AZ,JWe),e(Og,YWe),e(Og,kk),e(kk,KWe),e(Og,ZWe),e(E,eHe),e(E,Vg),e(Vg,yZ),e(yZ,oHe),e(Vg,rHe),e(Vg,Sk),e(Sk,tHe),e(Vg,aHe),e(E,nHe),e(E,Jn),e(Jn,LZ),e(LZ,sHe),e(Jn,lHe),e(Jn,Rk),e(Rk,iHe),e(Jn,dHe),e(Jn,Bk),e(Bk,cHe),e(Jn,fHe),e(E,mHe),e(E,Yn),e(Yn,xZ),e(xZ,gHe),e(Yn,hHe),e(Yn,Pk),e(Pk,pHe),e(Yn,_He),e(Yn,$k),e($k,uHe),e(Yn,bHe),e(E,FHe),e(E,Kn),e(Kn,kZ),e(kZ,vHe),e(Kn,THe),e(Kn,Ik),e(Ik,MHe),e(Kn,EHe),e(Kn,qk),e(qk,CHe),e(Kn,wHe),e(E,AHe),e(E,Xg),e(Xg,SZ),e(SZ,yHe),e(Xg,LHe),e(Xg,Nk),e(Nk,xHe),e(Xg,kHe),e(E,SHe),e(E,zg),e(zg,RZ),e(RZ,RHe),e(zg,BHe),e(zg,jk),e(jk,PHe),e(zg,$He),e(E,IHe),e(E,Zn),e(Zn,BZ),e(BZ,qHe),e(Zn,NHe),e(Zn,Dk),e(Dk,jHe),e(Zn,DHe),e(Zn,Gk),e(Gk,GHe),e(Zn,OHe),e(E,VHe),e(E,Qg),e(Qg,PZ),e(PZ,XHe),e(Qg,zHe),e(Qg,Ok),e(Ok,QHe),e(Qg,WHe),e(E,HHe),e(E,es),e(es,$Z),e($Z,UHe),e(es,JHe),e(es,Vk),e(Vk,YHe),e(es,KHe),e(es,Xk),e(Xk,ZHe),e(es,eUe),e(E,oUe),e(E,os),e(os,IZ),e(IZ,rUe),e(os,tUe),e(os,zk),e(zk,aUe),e(os,nUe),e(os,Qk),e(Qk,sUe),e(os,lUe),e(E,iUe),e(E,rs),e(rs,qZ),e(qZ,dUe),e(rs,cUe),e(rs,Wk),e(Wk,fUe),e(rs,mUe),e(rs,NZ),e(NZ,gUe),e(rs,hUe),e(E,pUe),e(E,Wg),e(Wg,jZ),e(jZ,_Ue),e(Wg,uUe),e(Wg,Hk),e(Hk,bUe),e(Wg,FUe),e(E,vUe),e(E,ts),e(ts,DZ),e(DZ,TUe),e(ts,MUe),e(ts,Uk),e(Uk,EUe),e(ts,CUe),e(ts,Jk),e(Jk,wUe),e(ts,AUe),e(E,yUe),e(E,Hg),e(Hg,GZ),e(GZ,LUe),e(Hg,xUe),e(Hg,Yk),e(Yk,kUe),e(Hg,SUe),e(E,RUe),e(E,as),e(as,OZ),e(OZ,BUe),e(as,PUe),e(as,Kk),e(Kk,$Ue),e(as,IUe),e(as,Zk),e(Zk,qUe),e(as,NUe),e(E,jUe),e(E,ns),e(ns,VZ),e(VZ,DUe),e(ns,GUe),e(ns,eS),e(eS,OUe),e(ns,VUe),e(ns,oS),e(oS,XUe),e(ns,zUe),e(E,QUe),e(E,ss),e(ss,XZ),e(XZ,WUe),e(ss,HUe),e(ss,rS),e(rS,UUe),e(ss,JUe),e(ss,tS),e(tS,YUe),e(ss,KUe),e(E,ZUe),e(E,Ug),e(Ug,zZ),e(zZ,eJe),e(Ug,oJe),e(Ug,aS),e(aS,rJe),e(Ug,tJe),e(E,aJe),e(E,Jg),e(Jg,QZ),e(QZ,nJe),e(Jg,sJe),e(Jg,nS),e(nS,lJe),e(Jg,iJe),e(E,dJe),e(E,ls),e(ls,WZ),e(WZ,cJe),e(ls,fJe),e(ls,sS),e(sS,mJe),e(ls,gJe),e(ls,lS),e(lS,hJe),e(ls,pJe),e(E,_Je),e(E,Yg),e(Yg,HZ),e(HZ,uJe),e(Yg,bJe),e(Yg,iS),e(iS,FJe),e(Yg,vJe),e(E,TJe),e(E,is),e(is,UZ),e(UZ,MJe),e(is,EJe),e(is,dS),e(dS,CJe),e(is,wJe),e(is,cS),e(cS,AJe),e(is,yJe),e(E,LJe),e(E,ds),e(ds,JZ),e(JZ,xJe),e(ds,kJe),e(ds,fS),e(fS,SJe),e(ds,RJe),e(ds,mS),e(mS,BJe),e(ds,PJe),e(E,$Je),e(E,cs),e(cs,YZ),e(YZ,IJe),e(cs,qJe),e(cs,gS),e(gS,NJe),e(cs,jJe),e(cs,hS),e(hS,DJe),e(cs,GJe),e(E,OJe),e(E,fs),e(fs,KZ),e(KZ,VJe),e(fs,XJe),e(fs,pS),e(pS,zJe),e(fs,QJe),e(fs,_S),e(_S,WJe),e(fs,HJe),e(E,UJe),e(E,Kg),e(Kg,ZZ),e(ZZ,JJe),e(Kg,YJe),e(Kg,uS),e(uS,KJe),e(Kg,ZJe),e(E,eYe),e(E,ms),e(ms,eee),e(eee,oYe),e(ms,rYe),e(ms,bS),e(bS,tYe),e(ms,aYe),e(ms,FS),e(FS,nYe),e(ms,sYe),e(E,lYe),e(E,gs),e(gs,oee),e(oee,iYe),e(gs,dYe),e(gs,vS),e(vS,cYe),e(gs,fYe),e(gs,TS),e(TS,mYe),e(gs,gYe),e(E,hYe),e(E,hs),e(hs,ree),e(ree,pYe),e(hs,_Ye),e(hs,MS),e(MS,uYe),e(hs,bYe),e(hs,ES),e(ES,FYe),e(hs,vYe),e(E,TYe),e(E,ps),e(ps,tee),e(tee,MYe),e(ps,EYe),e(ps,CS),e(CS,CYe),e(ps,wYe),e(ps,wS),e(wS,AYe),e(ps,yYe),e(E,LYe),e(E,_s),e(_s,aee),e(aee,xYe),e(_s,kYe),e(_s,AS),e(AS,SYe),e(_s,RYe),e(_s,yS),e(yS,BYe),e(_s,PYe),e(E,$Ye),e(E,us),e(us,nee),e(nee,IYe),e(us,qYe),e(us,LS),e(LS,NYe),e(us,jYe),e(us,xS),e(xS,DYe),e(us,GYe),e(E,OYe),e(E,Zg),e(Zg,see),e(see,VYe),e(Zg,XYe),e(Zg,kS),e(kS,zYe),e(Zg,QYe),e(E,WYe),e(E,bs),e(bs,lee),e(lee,HYe),e(bs,UYe),e(bs,SS),e(SS,JYe),e(bs,YYe),e(bs,RS),e(RS,KYe),e(bs,ZYe),e(E,eKe),e(E,eh),e(eh,iee),e(iee,oKe),e(eh,rKe),e(eh,BS),e(BS,tKe),e(eh,aKe),e(E,nKe),e(E,oh),e(oh,dee),e(dee,sKe),e(oh,lKe),e(oh,PS),e(PS,iKe),e(oh,dKe),e(E,cKe),e(E,Fs),e(Fs,cee),e(cee,fKe),e(Fs,mKe),e(Fs,$S),e($S,gKe),e(Fs,hKe),e(Fs,IS),e(IS,pKe),e(Fs,_Ke),e(E,uKe),e(E,vs),e(vs,fee),e(fee,bKe),e(vs,FKe),e(vs,qS),e(qS,vKe),e(vs,TKe),e(vs,NS),e(NS,MKe),e(vs,EKe),e(E,CKe),e(E,rh),e(rh,mee),e(mee,wKe),e(rh,AKe),e(rh,jS),e(jS,yKe),e(rh,LKe),e(E,xKe),e(E,Ts),e(Ts,gee),e(gee,kKe),e(Ts,SKe),e(Ts,DS),e(DS,RKe),e(Ts,BKe),e(Ts,GS),e(GS,PKe),e(Ts,$Ke),e(E,IKe),e(E,Ms),e(Ms,hee),e(hee,qKe),e(Ms,NKe),e(Ms,OS),e(OS,jKe),e(Ms,DKe),e(Ms,VS),e(VS,GKe),e(Ms,OKe),e(E,VKe),e(E,Es),e(Es,pee),e(pee,XKe),e(Es,zKe),e(Es,XS),e(XS,QKe),e(Es,WKe),e(Es,zS),e(zS,HKe),e(Es,UKe),e(E,JKe),e(E,Cs),e(Cs,_ee),e(_ee,YKe),e(Cs,KKe),e(Cs,QS),e(QS,ZKe),e(Cs,eZe),e(Cs,WS),e(WS,oZe),e(Cs,rZe),e(E,tZe),e(E,ws),e(ws,uee),e(uee,aZe),e(ws,nZe),e(ws,HS),e(HS,sZe),e(ws,lZe),e(ws,US),e(US,iZe),e(ws,dZe),e(E,cZe),e(E,th),e(th,bee),e(bee,fZe),e(th,mZe),e(th,JS),e(JS,gZe),e(th,hZe),e(E,pZe),e(E,ah),e(ah,Fee),e(Fee,_Ze),e(ah,uZe),e(ah,YS),e(YS,bZe),e(ah,FZe),e(E,vZe),e(E,nh),e(nh,vee),e(vee,TZe),e(nh,MZe),e(nh,KS),e(KS,EZe),e(nh,CZe),e(E,wZe),e(E,sh),e(sh,Tee),e(Tee,AZe),e(sh,yZe),e(sh,ZS),e(ZS,LZe),e(sh,xZe),e(E,kZe),e(E,As),e(As,Mee),e(Mee,SZe),e(As,RZe),e(As,eR),e(eR,BZe),e(As,PZe),e(As,oR),e(oR,$Ze),e(As,IZe),e(E,qZe),e(E,lh),e(lh,Eee),e(Eee,NZe),e(lh,jZe),e(lh,rR),e(rR,DZe),e(lh,GZe),e(E,OZe),e(E,ys),e(ys,Cee),e(Cee,VZe),e(ys,XZe),e(ys,tR),e(tR,zZe),e(ys,QZe),e(ys,aR),e(aR,WZe),e(ys,HZe),e(E,UZe),e(E,Ls),e(Ls,wee),e(wee,JZe),e(Ls,YZe),e(Ls,nR),e(nR,KZe),e(Ls,ZZe),e(Ls,sR),e(sR,eeo),e(Ls,oeo),e(E,reo),e(E,xs),e(xs,Aee),e(Aee,teo),e(xs,aeo),e(xs,lR),e(lR,neo),e(xs,seo),e(xs,iR),e(iR,leo),e(xs,ieo),e(E,deo),e(E,ks),e(ks,yee),e(yee,ceo),e(ks,feo),e(ks,dR),e(dR,meo),e(ks,geo),e(ks,cR),e(cR,heo),e(ks,peo),e(E,_eo),e(E,Ss),e(Ss,Lee),e(Lee,ueo),e(Ss,beo),e(Ss,fR),e(fR,Feo),e(Ss,veo),e(Ss,mR),e(mR,Teo),e(Ss,Meo),e(E,Eeo),e(E,Rs),e(Rs,xee),e(xee,Ceo),e(Rs,weo),e(Rs,gR),e(gR,Aeo),e(Rs,yeo),e(Rs,hR),e(hR,Leo),e(Rs,xeo),e(E,keo),e(E,ih),e(ih,kee),e(kee,Seo),e(ih,Reo),e(ih,pR),e(pR,Beo),e(ih,Peo),e(E,$eo),e(E,dh),e(dh,See),e(See,Ieo),e(dh,qeo),e(dh,_R),e(_R,Neo),e(dh,jeo),e(E,Deo),e(E,Bs),e(Bs,Ree),e(Ree,Geo),e(Bs,Oeo),e(Bs,uR),e(uR,Veo),e(Bs,Xeo),e(Bs,bR),e(bR,zeo),e(Bs,Qeo),e(E,Weo),e(E,Ps),e(Ps,Bee),e(Bee,Heo),e(Ps,Ueo),e(Ps,FR),e(FR,Jeo),e(Ps,Yeo),e(Ps,vR),e(vR,Keo),e(Ps,Zeo),e(E,eoo),e(E,$s),e($s,Pee),e(Pee,ooo),e($s,roo),e($s,TR),e(TR,too),e($s,aoo),e($s,MR),e(MR,noo),e($s,soo),e(E,loo),e(E,ch),e(ch,$ee),e($ee,ioo),e(ch,doo),e(ch,ER),e(ER,coo),e(ch,foo),e(E,moo),e(E,fh),e(fh,Iee),e(Iee,goo),e(fh,hoo),e(fh,CR),e(CR,poo),e(fh,_oo),e(E,uoo),e(E,mh),e(mh,qee),e(qee,boo),e(mh,Foo),e(mh,wR),e(wR,voo),e(mh,Too),e(E,Moo),e(E,gh),e(gh,Nee),e(Nee,Eoo),e(gh,Coo),e(gh,AR),e(AR,woo),e(gh,Aoo),e(E,yoo),e(E,hh),e(hh,jee),e(jee,Loo),e(hh,xoo),e(hh,yR),e(yR,koo),e(hh,Soo),e(E,Roo),e(E,Is),e(Is,Dee),e(Dee,Boo),e(Is,Poo),e(Is,LR),e(LR,$oo),e(Is,Ioo),e(Is,xR),e(xR,qoo),e(Is,Noo),e(E,joo),e(E,ph),e(ph,Gee),e(Gee,Doo),e(ph,Goo),e(ph,kR),e(kR,Ooo),e(ph,Voo),e(E,Xoo),e(E,_h),e(_h,Oee),e(Oee,zoo),e(_h,Qoo),e(_h,SR),e(SR,Woo),e(_h,Hoo),e(E,Uoo),e(E,qs),e(qs,Vee),e(Vee,Joo),e(qs,Yoo),e(qs,RR),e(RR,Koo),e(qs,Zoo),e(qs,BR),e(BR,ero),e(qs,oro),e(E,rro),e(E,Ns),e(Ns,Xee),e(Xee,tro),e(Ns,aro),e(Ns,PR),e(PR,nro),e(Ns,sro),e(Ns,$R),e($R,lro),e(Ns,iro),e(go,dro),e(go,zee),e(zee,cro),e(go,fro),g(XC,go,null),e(Wo,mro),e(Wo,uh),g(zC,uh,null),e(uh,gro),e(uh,Qee),e(Qee,hro),b(c,IRe,u),b(c,Wi,u),e(Wi,bh),e(bh,Wee),g(QC,Wee,null),e(Wi,pro),e(Wi,Hee),e(Hee,_ro),b(c,qRe,u),b(c,Ho,u),g(WC,Ho,null),e(Ho,uro),e(Ho,HC),e(HC,bro),e(HC,IR),e(IR,Fro),e(HC,vro),e(Ho,Tro),e(Ho,UC),e(UC,Mro),e(UC,Uee),e(Uee,Ero),e(UC,Cro),e(Ho,wro),e(Ho,$e),g(JC,$e,null),e($e,Aro),e($e,Jee),e(Jee,yro),e($e,Lro),e($e,Va),e(Va,xro),e(Va,Yee),e(Yee,kro),e(Va,Sro),e(Va,Kee),e(Kee,Rro),e(Va,Bro),e(Va,Zee),e(Zee,Pro),e(Va,$ro),e($e,Iro),e($e,ee),e(ee,Fh),e(Fh,eoe),e(eoe,qro),e(Fh,Nro),e(Fh,qR),e(qR,jro),e(Fh,Dro),e(ee,Gro),e(ee,vh),e(vh,ooe),e(ooe,Oro),e(vh,Vro),e(vh,NR),e(NR,Xro),e(vh,zro),e(ee,Qro),e(ee,Th),e(Th,roe),e(roe,Wro),e(Th,Hro),e(Th,jR),e(jR,Uro),e(Th,Jro),e(ee,Yro),e(ee,Mh),e(Mh,toe),e(toe,Kro),e(Mh,Zro),e(Mh,DR),e(DR,eto),e(Mh,oto),e(ee,rto),e(ee,Eh),e(Eh,aoe),e(aoe,tto),e(Eh,ato),e(Eh,GR),e(GR,nto),e(Eh,sto),e(ee,lto),e(ee,Ch),e(Ch,noe),e(noe,ito),e(Ch,dto),e(Ch,OR),e(OR,cto),e(Ch,fto),e(ee,mto),e(ee,wh),e(wh,soe),e(soe,gto),e(wh,hto),e(wh,VR),e(VR,pto),e(wh,_to),e(ee,uto),e(ee,Ah),e(Ah,loe),e(loe,bto),e(Ah,Fto),e(Ah,XR),e(XR,vto),e(Ah,Tto),e(ee,Mto),e(ee,yh),e(yh,ioe),e(ioe,Eto),e(yh,Cto),e(yh,zR),e(zR,wto),e(yh,Ato),e(ee,yto),e(ee,Lh),e(Lh,doe),e(doe,Lto),e(Lh,xto),e(Lh,QR),e(QR,kto),e(Lh,Sto),e(ee,Rto),e(ee,xh),e(xh,coe),e(coe,Bto),e(xh,Pto),e(xh,WR),e(WR,$to),e(xh,Ito),e(ee,qto),e(ee,kh),e(kh,foe),e(foe,Nto),e(kh,jto),e(kh,HR),e(HR,Dto),e(kh,Gto),e(ee,Oto),e(ee,Sh),e(Sh,moe),e(moe,Vto),e(Sh,Xto),e(Sh,UR),e(UR,zto),e(Sh,Qto),e(ee,Wto),e(ee,Rh),e(Rh,goe),e(goe,Hto),e(Rh,Uto),e(Rh,JR),e(JR,Jto),e(Rh,Yto),e(ee,Kto),e(ee,Bh),e(Bh,hoe),e(hoe,Zto),e(Bh,eao),e(Bh,YR),e(YR,oao),e(Bh,rao),e(ee,tao),e(ee,Ph),e(Ph,poe),e(poe,aao),e(Ph,nao),e(Ph,KR),e(KR,sao),e(Ph,lao),e(ee,iao),e(ee,$h),e($h,_oe),e(_oe,dao),e($h,cao),e($h,ZR),e(ZR,fao),e($h,mao),e(ee,gao),e(ee,Ih),e(Ih,uoe),e(uoe,hao),e(Ih,pao),e(Ih,eB),e(eB,_ao),e(Ih,uao),e(ee,bao),e(ee,qh),e(qh,boe),e(boe,Fao),e(qh,vao),e(qh,oB),e(oB,Tao),e(qh,Mao),e($e,Eao),g(Nh,$e,null),e($e,Cao),e($e,Foe),e(Foe,wao),e($e,Aao),g(YC,$e,null),e(Ho,yao),e(Ho,jh),g(KC,jh,null),e(jh,Lao),e(jh,voe),e(voe,xao),b(c,NRe,u),b(c,Hi,u),e(Hi,Dh),e(Dh,Toe),g(ZC,Toe,null),e(Hi,kao),e(Hi,Moe),e(Moe,Sao),b(c,jRe,u),b(c,Uo,u),g(ew,Uo,null),e(Uo,Rao),e(Uo,ow),e(ow,Bao),e(ow,rB),e(rB,Pao),e(ow,$ao),e(Uo,Iao),e(Uo,rw),e(rw,qao),e(rw,Eoe),e(Eoe,Nao),e(rw,jao),e(Uo,Dao),e(Uo,Ie),g(tw,Ie,null),e(Ie,Gao),e(Ie,Coe),e(Coe,Oao),e(Ie,Vao),e(Ie,Ui),e(Ui,Xao),e(Ui,woe),e(woe,zao),e(Ui,Qao),e(Ui,Aoe),e(Aoe,Wao),e(Ui,Hao),e(Ie,Uao),e(Ie,ke),e(ke,Gh),e(Gh,yoe),e(yoe,Jao),e(Gh,Yao),e(Gh,tB),e(tB,Kao),e(Gh,Zao),e(ke,eno),e(ke,Oh),e(Oh,Loe),e(Loe,ono),e(Oh,rno),e(Oh,aB),e(aB,tno),e(Oh,ano),e(ke,nno),e(ke,Vh),e(Vh,xoe),e(xoe,sno),e(Vh,lno),e(Vh,nB),e(nB,ino),e(Vh,dno),e(ke,cno),e(ke,Xh),e(Xh,koe),e(koe,fno),e(Xh,mno),e(Xh,sB),e(sB,gno),e(Xh,hno),e(ke,pno),e(ke,zh),e(zh,Soe),e(Soe,_no),e(zh,uno),e(zh,lB),e(lB,bno),e(zh,Fno),e(ke,vno),e(ke,Qh),e(Qh,Roe),e(Roe,Tno),e(Qh,Mno),e(Qh,iB),e(iB,Eno),e(Qh,Cno),e(ke,wno),e(ke,Wh),e(Wh,Boe),e(Boe,Ano),e(Wh,yno),e(Wh,dB),e(dB,Lno),e(Wh,xno),e(ke,kno),e(ke,Hh),e(Hh,Poe),e(Poe,Sno),e(Hh,Rno),e(Hh,cB),e(cB,Bno),e(Hh,Pno),e(Ie,$no),g(Uh,Ie,null),e(Ie,Ino),e(Ie,$oe),e($oe,qno),e(Ie,Nno),g(aw,Ie,null),e(Uo,jno),e(Uo,Jh),g(nw,Jh,null),e(Jh,Dno),e(Jh,Ioe),e(Ioe,Gno),b(c,DRe,u),b(c,Ji,u),e(Ji,Yh),e(Yh,qoe),g(sw,qoe,null),e(Ji,Ono),e(Ji,Noe),e(Noe,Vno),b(c,GRe,u),b(c,Jo,u),g(lw,Jo,null),e(Jo,Xno),e(Jo,Yi),e(Yi,zno),e(Yi,fB),e(fB,Qno),e(Yi,Wno),e(Yi,mB),e(mB,Hno),e(Yi,Uno),e(Jo,Jno),e(Jo,iw),e(iw,Yno),e(iw,joe),e(joe,Kno),e(iw,Zno),e(Jo,eso),e(Jo,Xr),g(dw,Xr,null),e(Xr,oso),e(Xr,Doe),e(Doe,rso),e(Xr,tso),e(Xr,Ki),e(Ki,aso),e(Ki,Goe),e(Goe,nso),e(Ki,sso),e(Ki,gB),e(gB,lso),e(Ki,iso),e(Xr,dso),e(Xr,Ooe),e(Ooe,cso),e(Xr,fso),g(cw,Xr,null),e(Jo,mso),e(Jo,qe),g(fw,qe,null),e(qe,gso),e(qe,Voe),e(Voe,hso),e(qe,pso),e(qe,Xa),e(Xa,_so),e(Xa,Xoe),e(Xoe,uso),e(Xa,bso),e(Xa,zoe),e(zoe,Fso),e(Xa,vso),e(Xa,Qoe),e(Qoe,Tso),e(Xa,Mso),e(qe,Eso),e(qe,T),e(T,Kh),e(Kh,Woe),e(Woe,Cso),e(Kh,wso),e(Kh,hB),e(hB,Aso),e(Kh,yso),e(T,Lso),e(T,Zh),e(Zh,Hoe),e(Hoe,xso),e(Zh,kso),e(Zh,pB),e(pB,Sso),e(Zh,Rso),e(T,Bso),e(T,ep),e(ep,Uoe),e(Uoe,Pso),e(ep,$so),e(ep,_B),e(_B,Iso),e(ep,qso),e(T,Nso),e(T,op),e(op,Joe),e(Joe,jso),e(op,Dso),e(op,uB),e(uB,Gso),e(op,Oso),e(T,Vso),e(T,rp),e(rp,Yoe),e(Yoe,Xso),e(rp,zso),e(rp,bB),e(bB,Qso),e(rp,Wso),e(T,Hso),e(T,tp),e(tp,Koe),e(Koe,Uso),e(tp,Jso),e(tp,FB),e(FB,Yso),e(tp,Kso),e(T,Zso),e(T,ap),e(ap,Zoe),e(Zoe,elo),e(ap,olo),e(ap,vB),e(vB,rlo),e(ap,tlo),e(T,alo),e(T,np),e(np,ere),e(ere,nlo),e(np,slo),e(np,TB),e(TB,llo),e(np,ilo),e(T,dlo),e(T,sp),e(sp,ore),e(ore,clo),e(sp,flo),e(sp,MB),e(MB,mlo),e(sp,glo),e(T,hlo),e(T,lp),e(lp,rre),e(rre,plo),e(lp,_lo),e(lp,EB),e(EB,ulo),e(lp,blo),e(T,Flo),e(T,ip),e(ip,tre),e(tre,vlo),e(ip,Tlo),e(ip,CB),e(CB,Mlo),e(ip,Elo),e(T,Clo),e(T,dp),e(dp,are),e(are,wlo),e(dp,Alo),e(dp,wB),e(wB,ylo),e(dp,Llo),e(T,xlo),e(T,cp),e(cp,nre),e(nre,klo),e(cp,Slo),e(cp,AB),e(AB,Rlo),e(cp,Blo),e(T,Plo),e(T,fp),e(fp,sre),e(sre,$lo),e(fp,Ilo),e(fp,yB),e(yB,qlo),e(fp,Nlo),e(T,jlo),e(T,mp),e(mp,lre),e(lre,Dlo),e(mp,Glo),e(mp,LB),e(LB,Olo),e(mp,Vlo),e(T,Xlo),e(T,gp),e(gp,ire),e(ire,zlo),e(gp,Qlo),e(gp,xB),e(xB,Wlo),e(gp,Hlo),e(T,Ulo),e(T,hp),e(hp,dre),e(dre,Jlo),e(hp,Ylo),e(hp,kB),e(kB,Klo),e(hp,Zlo),e(T,eio),e(T,pp),e(pp,cre),e(cre,oio),e(pp,rio),e(pp,SB),e(SB,tio),e(pp,aio),e(T,nio),e(T,_p),e(_p,fre),e(fre,sio),e(_p,lio),e(_p,RB),e(RB,iio),e(_p,dio),e(T,cio),e(T,up),e(up,mre),e(mre,fio),e(up,mio),e(up,BB),e(BB,gio),e(up,hio),e(T,pio),e(T,bp),e(bp,gre),e(gre,_io),e(bp,uio),e(bp,PB),e(PB,bio),e(bp,Fio),e(T,vio),e(T,Fp),e(Fp,hre),e(hre,Tio),e(Fp,Mio),e(Fp,$B),e($B,Eio),e(Fp,Cio),e(T,wio),e(T,vp),e(vp,pre),e(pre,Aio),e(vp,yio),e(vp,IB),e(IB,Lio),e(vp,xio),e(T,kio),e(T,Tp),e(Tp,_re),e(_re,Sio),e(Tp,Rio),e(Tp,qB),e(qB,Bio),e(Tp,Pio),e(T,$io),e(T,Mp),e(Mp,ure),e(ure,Iio),e(Mp,qio),e(Mp,NB),e(NB,Nio),e(Mp,jio),e(T,Dio),e(T,Ep),e(Ep,bre),e(bre,Gio),e(Ep,Oio),e(Ep,jB),e(jB,Vio),e(Ep,Xio),e(T,zio),e(T,Cp),e(Cp,Fre),e(Fre,Qio),e(Cp,Wio),e(Cp,DB),e(DB,Hio),e(Cp,Uio),e(T,Jio),e(T,wp),e(wp,vre),e(vre,Yio),e(wp,Kio),e(wp,GB),e(GB,Zio),e(wp,edo),e(T,odo),e(T,Ap),e(Ap,Tre),e(Tre,rdo),e(Ap,tdo),e(Ap,OB),e(OB,ado),e(Ap,ndo),e(T,sdo),e(T,yp),e(yp,Mre),e(Mre,ldo),e(yp,ido),e(yp,VB),e(VB,ddo),e(yp,cdo),e(T,fdo),e(T,js),e(js,Ere),e(Ere,mdo),e(js,gdo),e(js,XB),e(XB,hdo),e(js,pdo),e(js,zB),e(zB,_do),e(js,udo),e(T,bdo),e(T,Lp),e(Lp,Cre),e(Cre,Fdo),e(Lp,vdo),e(Lp,QB),e(QB,Tdo),e(Lp,Mdo),e(T,Edo),e(T,xp),e(xp,wre),e(wre,Cdo),e(xp,wdo),e(xp,WB),e(WB,Ado),e(xp,ydo),e(T,Ldo),e(T,kp),e(kp,Are),e(Are,xdo),e(kp,kdo),e(kp,HB),e(HB,Sdo),e(kp,Rdo),e(T,Bdo),e(T,Sp),e(Sp,yre),e(yre,Pdo),e(Sp,$do),e(Sp,UB),e(UB,Ido),e(Sp,qdo),e(T,Ndo),e(T,Rp),e(Rp,Lre),e(Lre,jdo),e(Rp,Ddo),e(Rp,JB),e(JB,Gdo),e(Rp,Odo),e(T,Vdo),e(T,Bp),e(Bp,xre),e(xre,Xdo),e(Bp,zdo),e(Bp,YB),e(YB,Qdo),e(Bp,Wdo),e(T,Hdo),e(T,Pp),e(Pp,kre),e(kre,Udo),e(Pp,Jdo),e(Pp,KB),e(KB,Ydo),e(Pp,Kdo),e(T,Zdo),e(T,$p),e($p,Sre),e(Sre,eco),e($p,oco),e($p,ZB),e(ZB,rco),e($p,tco),e(T,aco),e(T,Ip),e(Ip,Rre),e(Rre,nco),e(Ip,sco),e(Ip,eP),e(eP,lco),e(Ip,ico),e(T,dco),e(T,qp),e(qp,Bre),e(Bre,cco),e(qp,fco),e(qp,oP),e(oP,mco),e(qp,gco),e(T,hco),e(T,Np),e(Np,Pre),e(Pre,pco),e(Np,_co),e(Np,rP),e(rP,uco),e(Np,bco),e(T,Fco),e(T,jp),e(jp,$re),e($re,vco),e(jp,Tco),e(jp,tP),e(tP,Mco),e(jp,Eco),e(T,Cco),e(T,Dp),e(Dp,Ire),e(Ire,wco),e(Dp,Aco),e(Dp,aP),e(aP,yco),e(Dp,Lco),e(T,xco),e(T,Gp),e(Gp,qre),e(qre,kco),e(Gp,Sco),e(Gp,nP),e(nP,Rco),e(Gp,Bco),e(T,Pco),e(T,Op),e(Op,Nre),e(Nre,$co),e(Op,Ico),e(Op,sP),e(sP,qco),e(Op,Nco),e(T,jco),e(T,Vp),e(Vp,jre),e(jre,Dco),e(Vp,Gco),e(Vp,lP),e(lP,Oco),e(Vp,Vco),e(T,Xco),e(T,Xp),e(Xp,Dre),e(Dre,zco),e(Xp,Qco),e(Xp,iP),e(iP,Wco),e(Xp,Hco),e(T,Uco),e(T,zp),e(zp,Gre),e(Gre,Jco),e(zp,Yco),e(zp,dP),e(dP,Kco),e(zp,Zco),e(T,efo),e(T,Qp),e(Qp,Ore),e(Ore,ofo),e(Qp,rfo),e(Qp,cP),e(cP,tfo),e(Qp,afo),e(T,nfo),e(T,Wp),e(Wp,Vre),e(Vre,sfo),e(Wp,lfo),e(Wp,fP),e(fP,ifo),e(Wp,dfo),e(T,cfo),e(T,Hp),e(Hp,Xre),e(Xre,ffo),e(Hp,mfo),e(Hp,mP),e(mP,gfo),e(Hp,hfo),e(T,pfo),e(T,Up),e(Up,zre),e(zre,_fo),e(Up,ufo),e(Up,gP),e(gP,bfo),e(Up,Ffo),e(T,vfo),e(T,Jp),e(Jp,Qre),e(Qre,Tfo),e(Jp,Mfo),e(Jp,hP),e(hP,Efo),e(Jp,Cfo),e(T,wfo),e(T,Yp),e(Yp,Wre),e(Wre,Afo),e(Yp,yfo),e(Yp,pP),e(pP,Lfo),e(Yp,xfo),e(T,kfo),e(T,Kp),e(Kp,Hre),e(Hre,Sfo),e(Kp,Rfo),e(Kp,_P),e(_P,Bfo),e(Kp,Pfo),e(T,$fo),e(T,Zp),e(Zp,Ure),e(Ure,Ifo),e(Zp,qfo),e(Zp,uP),e(uP,Nfo),e(Zp,jfo),e(T,Dfo),e(T,e_),e(e_,Jre),e(Jre,Gfo),e(e_,Ofo),e(e_,bP),e(bP,Vfo),e(e_,Xfo),e(T,zfo),e(T,o_),e(o_,Yre),e(Yre,Qfo),e(o_,Wfo),e(o_,FP),e(FP,Hfo),e(o_,Ufo),e(T,Jfo),e(T,r_),e(r_,Kre),e(Kre,Yfo),e(r_,Kfo),e(r_,vP),e(vP,Zfo),e(r_,emo),e(T,omo),e(T,t_),e(t_,Zre),e(Zre,rmo),e(t_,tmo),e(t_,TP),e(TP,amo),e(t_,nmo),e(T,smo),e(T,a_),e(a_,ete),e(ete,lmo),e(a_,imo),e(a_,MP),e(MP,dmo),e(a_,cmo),e(T,fmo),e(T,n_),e(n_,ote),e(ote,mmo),e(n_,gmo),e(n_,EP),e(EP,hmo),e(n_,pmo),e(T,_mo),e(T,s_),e(s_,rte),e(rte,umo),e(s_,bmo),e(s_,CP),e(CP,Fmo),e(s_,vmo),e(T,Tmo),e(T,l_),e(l_,tte),e(tte,Mmo),e(l_,Emo),e(l_,wP),e(wP,Cmo),e(l_,wmo),e(T,Amo),e(T,i_),e(i_,ate),e(ate,ymo),e(i_,Lmo),e(i_,AP),e(AP,xmo),e(i_,kmo),e(T,Smo),e(T,d_),e(d_,nte),e(nte,Rmo),e(d_,Bmo),e(d_,yP),e(yP,Pmo),e(d_,$mo),e(T,Imo),e(T,c_),e(c_,ste),e(ste,qmo),e(c_,Nmo),e(c_,LP),e(LP,jmo),e(c_,Dmo),e(T,Gmo),e(T,f_),e(f_,lte),e(lte,Omo),e(f_,Vmo),e(f_,xP),e(xP,Xmo),e(f_,zmo),e(T,Qmo),e(T,m_),e(m_,ite),e(ite,Wmo),e(m_,Hmo),e(m_,kP),e(kP,Umo),e(m_,Jmo),e(T,Ymo),e(T,g_),e(g_,dte),e(dte,Kmo),e(g_,Zmo),e(g_,SP),e(SP,ego),e(g_,ogo),e(T,rgo),e(T,h_),e(h_,cte),e(cte,tgo),e(h_,ago),e(h_,RP),e(RP,ngo),e(h_,sgo),e(T,lgo),e(T,p_),e(p_,fte),e(fte,igo),e(p_,dgo),e(p_,BP),e(BP,cgo),e(p_,fgo),e(T,mgo),e(T,__),e(__,mte),e(mte,ggo),e(__,hgo),e(__,PP),e(PP,pgo),e(__,_go),e(T,ugo),e(T,u_),e(u_,gte),e(gte,bgo),e(u_,Fgo),e(u_,$P),e($P,vgo),e(u_,Tgo),e(T,Mgo),e(T,b_),e(b_,hte),e(hte,Ego),e(b_,Cgo),e(b_,IP),e(IP,wgo),e(b_,Ago),e(T,ygo),e(T,F_),e(F_,pte),e(pte,Lgo),e(F_,xgo),e(F_,qP),e(qP,kgo),e(F_,Sgo),e(T,Rgo),e(T,v_),e(v_,_te),e(_te,Bgo),e(v_,Pgo),e(v_,NP),e(NP,$go),e(v_,Igo),e(T,qgo),e(T,T_),e(T_,ute),e(ute,Ngo),e(T_,jgo),e(T_,jP),e(jP,Dgo),e(T_,Ggo),e(T,Ogo),e(T,M_),e(M_,bte),e(bte,Vgo),e(M_,Xgo),e(M_,DP),e(DP,zgo),e(M_,Qgo),e(T,Wgo),e(T,E_),e(E_,Fte),e(Fte,Hgo),e(E_,Ugo),e(E_,GP),e(GP,Jgo),e(E_,Ygo),e(T,Kgo),e(T,C_),e(C_,vte),e(vte,Zgo),e(C_,eho),e(C_,OP),e(OP,oho),e(C_,rho),e(T,tho),e(T,w_),e(w_,Tte),e(Tte,aho),e(w_,nho),e(w_,VP),e(VP,sho),e(w_,lho),e(T,iho),e(T,A_),e(A_,Mte),e(Mte,dho),e(A_,cho),e(A_,XP),e(XP,fho),e(A_,mho),e(T,gho),e(T,y_),e(y_,Ete),e(Ete,hho),e(y_,pho),e(y_,zP),e(zP,_ho),e(y_,uho),e(T,bho),e(T,L_),e(L_,Cte),e(Cte,Fho),e(L_,vho),e(L_,QP),e(QP,Tho),e(L_,Mho),e(T,Eho),e(T,x_),e(x_,wte),e(wte,Cho),e(x_,who),e(x_,WP),e(WP,Aho),e(x_,yho),e(T,Lho),e(T,k_),e(k_,Ate),e(Ate,xho),e(k_,kho),e(k_,HP),e(HP,Sho),e(k_,Rho),e(T,Bho),e(T,S_),e(S_,yte),e(yte,Pho),e(S_,$ho),e(S_,UP),e(UP,Iho),e(S_,qho),e(T,Nho),e(T,R_),e(R_,Lte),e(Lte,jho),e(R_,Dho),e(R_,JP),e(JP,Gho),e(R_,Oho),e(T,Vho),e(T,B_),e(B_,xte),e(xte,Xho),e(B_,zho),e(B_,YP),e(YP,Qho),e(B_,Who),e(T,Hho),e(T,P_),e(P_,kte),e(kte,Uho),e(P_,Jho),e(P_,KP),e(KP,Yho),e(P_,Kho),e(T,Zho),e(T,$_),e($_,Ste),e(Ste,epo),e($_,opo),e($_,ZP),e(ZP,rpo),e($_,tpo),e(T,apo),e(T,I_),e(I_,Rte),e(Rte,npo),e(I_,spo),e(I_,e$),e(e$,lpo),e(I_,ipo),e(qe,dpo),e(qe,q_),e(q_,cpo),e(q_,Bte),e(Bte,fpo),e(q_,mpo),e(q_,Pte),e(Pte,gpo),e(qe,hpo),e(qe,$te),e($te,ppo),e(qe,_po),g(mw,qe,null),b(c,ORe,u),b(c,Zi,u),e(Zi,N_),e(N_,Ite),g(gw,Ite,null),e(Zi,upo),e(Zi,qte),e(qte,bpo),b(c,VRe,u),b(c,Yo,u),g(hw,Yo,null),e(Yo,Fpo),e(Yo,ed),e(ed,vpo),e(ed,o$),e(o$,Tpo),e(ed,Mpo),e(ed,r$),e(r$,Epo),e(ed,Cpo),e(Yo,wpo),e(Yo,pw),e(pw,Apo),e(pw,Nte),e(Nte,ypo),e(pw,Lpo),e(Yo,xpo),e(Yo,zr),g(_w,zr,null),e(zr,kpo),e(zr,jte),e(jte,Spo),e(zr,Rpo),e(zr,od),e(od,Bpo),e(od,Dte),e(Dte,Ppo),e(od,$po),e(od,t$),e(t$,Ipo),e(od,qpo),e(zr,Npo),e(zr,Gte),e(Gte,jpo),e(zr,Dpo),g(uw,zr,null),e(Yo,Gpo),e(Yo,Ne),g(bw,Ne,null),e(Ne,Opo),e(Ne,Ote),e(Ote,Vpo),e(Ne,Xpo),e(Ne,za),e(za,zpo),e(za,Vte),e(Vte,Qpo),e(za,Wpo),e(za,Xte),e(Xte,Hpo),e(za,Upo),e(za,zte),e(zte,Jpo),e(za,Ypo),e(Ne,Kpo),e(Ne,S),e(S,j_),e(j_,Qte),e(Qte,Zpo),e(j_,e_o),e(j_,a$),e(a$,o_o),e(j_,r_o),e(S,t_o),e(S,D_),e(D_,Wte),e(Wte,a_o),e(D_,n_o),e(D_,n$),e(n$,s_o),e(D_,l_o),e(S,i_o),e(S,G_),e(G_,Hte),e(Hte,d_o),e(G_,c_o),e(G_,s$),e(s$,f_o),e(G_,m_o),e(S,g_o),e(S,O_),e(O_,Ute),e(Ute,h_o),e(O_,p_o),e(O_,l$),e(l$,__o),e(O_,u_o),e(S,b_o),e(S,V_),e(V_,Jte),e(Jte,F_o),e(V_,v_o),e(V_,i$),e(i$,T_o),e(V_,M_o),e(S,E_o),e(S,X_),e(X_,Yte),e(Yte,C_o),e(X_,w_o),e(X_,d$),e(d$,A_o),e(X_,y_o),e(S,L_o),e(S,z_),e(z_,Kte),e(Kte,x_o),e(z_,k_o),e(z_,c$),e(c$,S_o),e(z_,R_o),e(S,B_o),e(S,Q_),e(Q_,Zte),e(Zte,P_o),e(Q_,$_o),e(Q_,f$),e(f$,I_o),e(Q_,q_o),e(S,N_o),e(S,W_),e(W_,eae),e(eae,j_o),e(W_,D_o),e(W_,m$),e(m$,G_o),e(W_,O_o),e(S,V_o),e(S,H_),e(H_,oae),e(oae,X_o),e(H_,z_o),e(H_,g$),e(g$,Q_o),e(H_,W_o),e(S,H_o),e(S,U_),e(U_,rae),e(rae,U_o),e(U_,J_o),e(U_,h$),e(h$,Y_o),e(U_,K_o),e(S,Z_o),e(S,J_),e(J_,tae),e(tae,euo),e(J_,ouo),e(J_,p$),e(p$,ruo),e(J_,tuo),e(S,auo),e(S,Y_),e(Y_,aae),e(aae,nuo),e(Y_,suo),e(Y_,_$),e(_$,luo),e(Y_,iuo),e(S,duo),e(S,K_),e(K_,nae),e(nae,cuo),e(K_,fuo),e(K_,u$),e(u$,muo),e(K_,guo),e(S,huo),e(S,Z_),e(Z_,sae),e(sae,puo),e(Z_,_uo),e(Z_,b$),e(b$,uuo),e(Z_,buo),e(S,Fuo),e(S,eu),e(eu,lae),e(lae,vuo),e(eu,Tuo),e(eu,F$),e(F$,Muo),e(eu,Euo),e(S,Cuo),e(S,ou),e(ou,iae),e(iae,wuo),e(ou,Auo),e(ou,v$),e(v$,yuo),e(ou,Luo),e(S,xuo),e(S,ru),e(ru,dae),e(dae,kuo),e(ru,Suo),e(ru,T$),e(T$,Ruo),e(ru,Buo),e(S,Puo),e(S,tu),e(tu,cae),e(cae,$uo),e(tu,Iuo),e(tu,M$),e(M$,quo),e(tu,Nuo),e(S,juo),e(S,au),e(au,fae),e(fae,Duo),e(au,Guo),e(au,E$),e(E$,Ouo),e(au,Vuo),e(S,Xuo),e(S,nu),e(nu,mae),e(mae,zuo),e(nu,Quo),e(nu,C$),e(C$,Wuo),e(nu,Huo),e(S,Uuo),e(S,su),e(su,gae),e(gae,Juo),e(su,Yuo),e(su,w$),e(w$,Kuo),e(su,Zuo),e(S,e1o),e(S,lu),e(lu,hae),e(hae,o1o),e(lu,r1o),e(lu,A$),e(A$,t1o),e(lu,a1o),e(S,n1o),e(S,iu),e(iu,pae),e(pae,s1o),e(iu,l1o),e(iu,y$),e(y$,i1o),e(iu,d1o),e(S,c1o),e(S,du),e(du,_ae),e(_ae,f1o),e(du,m1o),e(du,L$),e(L$,g1o),e(du,h1o),e(S,p1o),e(S,cu),e(cu,uae),e(uae,_1o),e(cu,u1o),e(cu,x$),e(x$,b1o),e(cu,F1o),e(S,v1o),e(S,fu),e(fu,bae),e(bae,T1o),e(fu,M1o),e(fu,k$),e(k$,E1o),e(fu,C1o),e(S,w1o),e(S,mu),e(mu,Fae),e(Fae,A1o),e(mu,y1o),e(mu,S$),e(S$,L1o),e(mu,x1o),e(S,k1o),e(S,gu),e(gu,vae),e(vae,S1o),e(gu,R1o),e(gu,R$),e(R$,B1o),e(gu,P1o),e(S,$1o),e(S,hu),e(hu,Tae),e(Tae,I1o),e(hu,q1o),e(hu,B$),e(B$,N1o),e(hu,j1o),e(S,D1o),e(S,pu),e(pu,Mae),e(Mae,G1o),e(pu,O1o),e(pu,P$),e(P$,V1o),e(pu,X1o),e(S,z1o),e(S,_u),e(_u,Eae),e(Eae,Q1o),e(_u,W1o),e(_u,$$),e($$,H1o),e(_u,U1o),e(S,J1o),e(S,uu),e(uu,Cae),e(Cae,Y1o),e(uu,K1o),e(uu,I$),e(I$,Z1o),e(uu,e7o),e(S,o7o),e(S,bu),e(bu,wae),e(wae,r7o),e(bu,t7o),e(bu,q$),e(q$,a7o),e(bu,n7o),e(S,s7o),e(S,Fu),e(Fu,Aae),e(Aae,l7o),e(Fu,i7o),e(Fu,N$),e(N$,d7o),e(Fu,c7o),e(S,f7o),e(S,vu),e(vu,yae),e(yae,m7o),e(vu,g7o),e(vu,j$),e(j$,h7o),e(vu,p7o),e(S,_7o),e(S,Tu),e(Tu,Lae),e(Lae,u7o),e(Tu,b7o),e(Tu,D$),e(D$,F7o),e(Tu,v7o),e(S,T7o),e(S,Mu),e(Mu,xae),e(xae,M7o),e(Mu,E7o),e(Mu,G$),e(G$,C7o),e(Mu,w7o),e(S,A7o),e(S,Eu),e(Eu,kae),e(kae,y7o),e(Eu,L7o),e(Eu,O$),e(O$,x7o),e(Eu,k7o),e(Ne,S7o),e(Ne,Cu),e(Cu,R7o),e(Cu,Sae),e(Sae,B7o),e(Cu,P7o),e(Cu,Rae),e(Rae,$7o),e(Ne,I7o),e(Ne,Bae),e(Bae,q7o),e(Ne,N7o),g(Fw,Ne,null),b(c,XRe,u),b(c,rd,u),e(rd,wu),e(wu,Pae),g(vw,Pae,null),e(rd,j7o),e(rd,$ae),e($ae,D7o),b(c,zRe,u),b(c,Ko,u),g(Tw,Ko,null),e(Ko,G7o),e(Ko,td),e(td,O7o),e(td,V$),e(V$,V7o),e(td,X7o),e(td,X$),e(X$,z7o),e(td,Q7o),e(Ko,W7o),e(Ko,Mw),e(Mw,H7o),e(Mw,Iae),e(Iae,U7o),e(Mw,J7o),e(Ko,Y7o),e(Ko,Qr),g(Ew,Qr,null),e(Qr,K7o),e(Qr,qae),e(qae,Z7o),e(Qr,ebo),e(Qr,ad),e(ad,obo),e(ad,Nae),e(Nae,rbo),e(ad,tbo),e(ad,z$),e(z$,abo),e(ad,nbo),e(Qr,sbo),e(Qr,jae),e(jae,lbo),e(Qr,ibo),g(Cw,Qr,null),e(Ko,dbo),e(Ko,je),g(ww,je,null),e(je,cbo),e(je,Dae),e(Dae,fbo),e(je,mbo),e(je,Qa),e(Qa,gbo),e(Qa,Gae),e(Gae,hbo),e(Qa,pbo),e(Qa,Oae),e(Oae,_bo),e(Qa,ubo),e(Qa,Vae),e(Vae,bbo),e(Qa,Fbo),e(je,vbo),e(je,$),e($,Au),e(Au,Xae),e(Xae,Tbo),e(Au,Mbo),e(Au,Q$),e(Q$,Ebo),e(Au,Cbo),e($,wbo),e($,yu),e(yu,zae),e(zae,Abo),e(yu,ybo),e(yu,W$),e(W$,Lbo),e(yu,xbo),e($,kbo),e($,Lu),e(Lu,Qae),e(Qae,Sbo),e(Lu,Rbo),e(Lu,H$),e(H$,Bbo),e(Lu,Pbo),e($,$bo),e($,xu),e(xu,Wae),e(Wae,Ibo),e(xu,qbo),e(xu,U$),e(U$,Nbo),e(xu,jbo),e($,Dbo),e($,ku),e(ku,Hae),e(Hae,Gbo),e(ku,Obo),e(ku,J$),e(J$,Vbo),e(ku,Xbo),e($,zbo),e($,Su),e(Su,Uae),e(Uae,Qbo),e(Su,Wbo),e(Su,Y$),e(Y$,Hbo),e(Su,Ubo),e($,Jbo),e($,Ru),e(Ru,Jae),e(Jae,Ybo),e(Ru,Kbo),e(Ru,K$),e(K$,Zbo),e(Ru,e5o),e($,o5o),e($,Bu),e(Bu,Yae),e(Yae,r5o),e(Bu,t5o),e(Bu,Z$),e(Z$,a5o),e(Bu,n5o),e($,s5o),e($,Pu),e(Pu,Kae),e(Kae,l5o),e(Pu,i5o),e(Pu,eI),e(eI,d5o),e(Pu,c5o),e($,f5o),e($,$u),e($u,Zae),e(Zae,m5o),e($u,g5o),e($u,oI),e(oI,h5o),e($u,p5o),e($,_5o),e($,Iu),e(Iu,ene),e(ene,u5o),e(Iu,b5o),e(Iu,rI),e(rI,F5o),e(Iu,v5o),e($,T5o),e($,qu),e(qu,one),e(one,M5o),e(qu,E5o),e(qu,tI),e(tI,C5o),e(qu,w5o),e($,A5o),e($,Nu),e(Nu,rne),e(rne,y5o),e(Nu,L5o),e(Nu,aI),e(aI,x5o),e(Nu,k5o),e($,S5o),e($,ju),e(ju,tne),e(tne,R5o),e(ju,B5o),e(ju,nI),e(nI,P5o),e(ju,$5o),e($,I5o),e($,Du),e(Du,ane),e(ane,q5o),e(Du,N5o),e(Du,sI),e(sI,j5o),e(Du,D5o),e($,G5o),e($,Gu),e(Gu,nne),e(nne,O5o),e(Gu,V5o),e(Gu,lI),e(lI,X5o),e(Gu,z5o),e($,Q5o),e($,Ou),e(Ou,sne),e(sne,W5o),e(Ou,H5o),e(Ou,iI),e(iI,U5o),e(Ou,J5o),e($,Y5o),e($,Vu),e(Vu,lne),e(lne,K5o),e(Vu,Z5o),e(Vu,dI),e(dI,e3o),e(Vu,o3o),e($,r3o),e($,Xu),e(Xu,ine),e(ine,t3o),e(Xu,a3o),e(Xu,cI),e(cI,n3o),e(Xu,s3o),e($,l3o),e($,zu),e(zu,dne),e(dne,i3o),e(zu,d3o),e(zu,fI),e(fI,c3o),e(zu,f3o),e($,m3o),e($,Qu),e(Qu,cne),e(cne,g3o),e(Qu,h3o),e(Qu,mI),e(mI,p3o),e(Qu,_3o),e($,u3o),e($,Wu),e(Wu,fne),e(fne,b3o),e(Wu,F3o),e(Wu,gI),e(gI,v3o),e(Wu,T3o),e($,M3o),e($,Hu),e(Hu,mne),e(mne,E3o),e(Hu,C3o),e(Hu,hI),e(hI,w3o),e(Hu,A3o),e($,y3o),e($,Uu),e(Uu,gne),e(gne,L3o),e(Uu,x3o),e(Uu,pI),e(pI,k3o),e(Uu,S3o),e($,R3o),e($,Ju),e(Ju,hne),e(hne,B3o),e(Ju,P3o),e(Ju,_I),e(_I,$3o),e(Ju,I3o),e($,q3o),e($,Yu),e(Yu,pne),e(pne,N3o),e(Yu,j3o),e(Yu,uI),e(uI,D3o),e(Yu,G3o),e($,O3o),e($,Ku),e(Ku,_ne),e(_ne,V3o),e(Ku,X3o),e(Ku,bI),e(bI,z3o),e(Ku,Q3o),e($,W3o),e($,Zu),e(Zu,une),e(une,H3o),e(Zu,U3o),e(Zu,FI),e(FI,J3o),e(Zu,Y3o),e($,K3o),e($,e1),e(e1,bne),e(bne,Z3o),e(e1,e2o),e(e1,vI),e(vI,o2o),e(e1,r2o),e($,t2o),e($,o1),e(o1,Fne),e(Fne,a2o),e(o1,n2o),e(o1,TI),e(TI,s2o),e(o1,l2o),e($,i2o),e($,r1),e(r1,vne),e(vne,d2o),e(r1,c2o),e(r1,MI),e(MI,f2o),e(r1,m2o),e($,g2o),e($,t1),e(t1,Tne),e(Tne,h2o),e(t1,p2o),e(t1,EI),e(EI,_2o),e(t1,u2o),e($,b2o),e($,a1),e(a1,Mne),e(Mne,F2o),e(a1,v2o),e(a1,CI),e(CI,T2o),e(a1,M2o),e($,E2o),e($,n1),e(n1,Ene),e(Ene,C2o),e(n1,w2o),e(n1,wI),e(wI,A2o),e(n1,y2o),e($,L2o),e($,s1),e(s1,Cne),e(Cne,x2o),e(s1,k2o),e(s1,AI),e(AI,S2o),e(s1,R2o),e(je,B2o),e(je,l1),e(l1,P2o),e(l1,wne),e(wne,$2o),e(l1,I2o),e(l1,Ane),e(Ane,q2o),e(je,N2o),e(je,yne),e(yne,j2o),e(je,D2o),g(Aw,je,null),b(c,QRe,u),b(c,nd,u),e(nd,i1),e(i1,Lne),g(yw,Lne,null),e(nd,G2o),e(nd,xne),e(xne,O2o),b(c,WRe,u),b(c,Zo,u),g(Lw,Zo,null),e(Zo,V2o),e(Zo,sd),e(sd,X2o),e(sd,yI),e(yI,z2o),e(sd,Q2o),e(sd,LI),e(LI,W2o),e(sd,H2o),e(Zo,U2o),e(Zo,xw),e(xw,J2o),e(xw,kne),e(kne,Y2o),e(xw,K2o),e(Zo,Z2o),e(Zo,Wr),g(kw,Wr,null),e(Wr,eFo),e(Wr,Sne),e(Sne,oFo),e(Wr,rFo),e(Wr,ld),e(ld,tFo),e(ld,Rne),e(Rne,aFo),e(ld,nFo),e(ld,xI),e(xI,sFo),e(ld,lFo),e(Wr,iFo),e(Wr,Bne),e(Bne,dFo),e(Wr,cFo),g(Sw,Wr,null),e(Zo,fFo),e(Zo,De),g(Rw,De,null),e(De,mFo),e(De,Pne),e(Pne,gFo),e(De,hFo),e(De,Wa),e(Wa,pFo),e(Wa,$ne),e($ne,_Fo),e(Wa,uFo),e(Wa,Ine),e(Ine,bFo),e(Wa,FFo),e(Wa,qne),e(qne,vFo),e(Wa,TFo),e(De,MFo),e(De,I),e(I,d1),e(d1,Nne),e(Nne,EFo),e(d1,CFo),e(d1,kI),e(kI,wFo),e(d1,AFo),e(I,yFo),e(I,c1),e(c1,jne),e(jne,LFo),e(c1,xFo),e(c1,SI),e(SI,kFo),e(c1,SFo),e(I,RFo),e(I,f1),e(f1,Dne),e(Dne,BFo),e(f1,PFo),e(f1,RI),e(RI,$Fo),e(f1,IFo),e(I,qFo),e(I,m1),e(m1,Gne),e(Gne,NFo),e(m1,jFo),e(m1,BI),e(BI,DFo),e(m1,GFo),e(I,OFo),e(I,g1),e(g1,One),e(One,VFo),e(g1,XFo),e(g1,PI),e(PI,zFo),e(g1,QFo),e(I,WFo),e(I,h1),e(h1,Vne),e(Vne,HFo),e(h1,UFo),e(h1,$I),e($I,JFo),e(h1,YFo),e(I,KFo),e(I,p1),e(p1,Xne),e(Xne,ZFo),e(p1,evo),e(p1,II),e(II,ovo),e(p1,rvo),e(I,tvo),e(I,_1),e(_1,zne),e(zne,avo),e(_1,nvo),e(_1,qI),e(qI,svo),e(_1,lvo),e(I,ivo),e(I,u1),e(u1,Qne),e(Qne,dvo),e(u1,cvo),e(u1,NI),e(NI,fvo),e(u1,mvo),e(I,gvo),e(I,b1),e(b1,Wne),e(Wne,hvo),e(b1,pvo),e(b1,jI),e(jI,_vo),e(b1,uvo),e(I,bvo),e(I,F1),e(F1,Hne),e(Hne,Fvo),e(F1,vvo),e(F1,DI),e(DI,Tvo),e(F1,Mvo),e(I,Evo),e(I,v1),e(v1,Une),e(Une,Cvo),e(v1,wvo),e(v1,GI),e(GI,Avo),e(v1,yvo),e(I,Lvo),e(I,T1),e(T1,Jne),e(Jne,xvo),e(T1,kvo),e(T1,OI),e(OI,Svo),e(T1,Rvo),e(I,Bvo),e(I,M1),e(M1,Yne),e(Yne,Pvo),e(M1,$vo),e(M1,VI),e(VI,Ivo),e(M1,qvo),e(I,Nvo),e(I,E1),e(E1,Kne),e(Kne,jvo),e(E1,Dvo),e(E1,XI),e(XI,Gvo),e(E1,Ovo),e(I,Vvo),e(I,C1),e(C1,Zne),e(Zne,Xvo),e(C1,zvo),e(C1,zI),e(zI,Qvo),e(C1,Wvo),e(I,Hvo),e(I,w1),e(w1,ese),e(ese,Uvo),e(w1,Jvo),e(w1,QI),e(QI,Yvo),e(w1,Kvo),e(I,Zvo),e(I,A1),e(A1,ose),e(ose,eTo),e(A1,oTo),e(A1,WI),e(WI,rTo),e(A1,tTo),e(I,aTo),e(I,y1),e(y1,rse),e(rse,nTo),e(y1,sTo),e(y1,HI),e(HI,lTo),e(y1,iTo),e(I,dTo),e(I,L1),e(L1,tse),e(tse,cTo),e(L1,fTo),e(L1,UI),e(UI,mTo),e(L1,gTo),e(I,hTo),e(I,x1),e(x1,ase),e(ase,pTo),e(x1,_To),e(x1,JI),e(JI,uTo),e(x1,bTo),e(I,FTo),e(I,k1),e(k1,nse),e(nse,vTo),e(k1,TTo),e(k1,YI),e(YI,MTo),e(k1,ETo),e(I,CTo),e(I,S1),e(S1,sse),e(sse,wTo),e(S1,ATo),e(S1,KI),e(KI,yTo),e(S1,LTo),e(I,xTo),e(I,R1),e(R1,lse),e(lse,kTo),e(R1,STo),e(R1,ZI),e(ZI,RTo),e(R1,BTo),e(I,PTo),e(I,B1),e(B1,ise),e(ise,$To),e(B1,ITo),e(B1,eq),e(eq,qTo),e(B1,NTo),e(I,jTo),e(I,P1),e(P1,dse),e(dse,DTo),e(P1,GTo),e(P1,oq),e(oq,OTo),e(P1,VTo),e(I,XTo),e(I,$1),e($1,cse),e(cse,zTo),e($1,QTo),e($1,rq),e(rq,WTo),e($1,HTo),e(I,UTo),e(I,I1),e(I1,fse),e(fse,JTo),e(I1,YTo),e(I1,tq),e(tq,KTo),e(I1,ZTo),e(I,eMo),e(I,q1),e(q1,mse),e(mse,oMo),e(q1,rMo),e(q1,aq),e(aq,tMo),e(q1,aMo),e(I,nMo),e(I,N1),e(N1,gse),e(gse,sMo),e(N1,lMo),e(N1,nq),e(nq,iMo),e(N1,dMo),e(I,cMo),e(I,j1),e(j1,hse),e(hse,fMo),e(j1,mMo),e(j1,pse),e(pse,gMo),e(j1,hMo),e(I,pMo),e(I,D1),e(D1,_se),e(_se,_Mo),e(D1,uMo),e(D1,sq),e(sq,bMo),e(D1,FMo),e(I,vMo),e(I,G1),e(G1,use),e(use,TMo),e(G1,MMo),e(G1,lq),e(lq,EMo),e(G1,CMo),e(I,wMo),e(I,O1),e(O1,bse),e(bse,AMo),e(O1,yMo),e(O1,iq),e(iq,LMo),e(O1,xMo),e(I,kMo),e(I,V1),e(V1,Fse),e(Fse,SMo),e(V1,RMo),e(V1,dq),e(dq,BMo),e(V1,PMo),e(De,$Mo),e(De,X1),e(X1,IMo),e(X1,vse),e(vse,qMo),e(X1,NMo),e(X1,Tse),e(Tse,jMo),e(De,DMo),e(De,Mse),e(Mse,GMo),e(De,OMo),g(Bw,De,null),b(c,HRe,u),b(c,id,u),e(id,z1),e(z1,Ese),g(Pw,Ese,null),e(id,VMo),e(id,Cse),e(Cse,XMo),b(c,URe,u),b(c,er,u),g($w,er,null),e(er,zMo),e(er,dd),e(dd,QMo),e(dd,cq),e(cq,WMo),e(dd,HMo),e(dd,fq),e(fq,UMo),e(dd,JMo),e(er,YMo),e(er,Iw),e(Iw,KMo),e(Iw,wse),e(wse,ZMo),e(Iw,e4o),e(er,o4o),e(er,Hr),g(qw,Hr,null),e(Hr,r4o),e(Hr,Ase),e(Ase,t4o),e(Hr,a4o),e(Hr,cd),e(cd,n4o),e(cd,yse),e(yse,s4o),e(cd,l4o),e(cd,mq),e(mq,i4o),e(cd,d4o),e(Hr,c4o),e(Hr,Lse),e(Lse,f4o),e(Hr,m4o),g(Nw,Hr,null),e(er,g4o),e(er,Ge),g(jw,Ge,null),e(Ge,h4o),e(Ge,xse),e(xse,p4o),e(Ge,_4o),e(Ge,Ha),e(Ha,u4o),e(Ha,kse),e(kse,b4o),e(Ha,F4o),e(Ha,Sse),e(Sse,v4o),e(Ha,T4o),e(Ha,Rse),e(Rse,M4o),e(Ha,E4o),e(Ge,C4o),e(Ge,ne),e(ne,Q1),e(Q1,Bse),e(Bse,w4o),e(Q1,A4o),e(Q1,gq),e(gq,y4o),e(Q1,L4o),e(ne,x4o),e(ne,W1),e(W1,Pse),e(Pse,k4o),e(W1,S4o),e(W1,hq),e(hq,R4o),e(W1,B4o),e(ne,P4o),e(ne,H1),e(H1,$se),e($se,$4o),e(H1,I4o),e(H1,pq),e(pq,q4o),e(H1,N4o),e(ne,j4o),e(ne,U1),e(U1,Ise),e(Ise,D4o),e(U1,G4o),e(U1,_q),e(_q,O4o),e(U1,V4o),e(ne,X4o),e(ne,J1),e(J1,qse),e(qse,z4o),e(J1,Q4o),e(J1,uq),e(uq,W4o),e(J1,H4o),e(ne,U4o),e(ne,Y1),e(Y1,Nse),e(Nse,J4o),e(Y1,Y4o),e(Y1,bq),e(bq,K4o),e(Y1,Z4o),e(ne,eEo),e(ne,K1),e(K1,jse),e(jse,oEo),e(K1,rEo),e(K1,Fq),e(Fq,tEo),e(K1,aEo),e(ne,nEo),e(ne,Z1),e(Z1,Dse),e(Dse,sEo),e(Z1,lEo),e(Z1,vq),e(vq,iEo),e(Z1,dEo),e(ne,cEo),e(ne,e7),e(e7,Gse),e(Gse,fEo),e(e7,mEo),e(e7,Tq),e(Tq,gEo),e(e7,hEo),e(ne,pEo),e(ne,o7),e(o7,Ose),e(Ose,_Eo),e(o7,uEo),e(o7,Mq),e(Mq,bEo),e(o7,FEo),e(ne,vEo),e(ne,r7),e(r7,Vse),e(Vse,TEo),e(r7,MEo),e(r7,Eq),e(Eq,EEo),e(r7,CEo),e(ne,wEo),e(ne,t7),e(t7,Xse),e(Xse,AEo),e(t7,yEo),e(t7,Cq),e(Cq,LEo),e(t7,xEo),e(ne,kEo),e(ne,a7),e(a7,zse),e(zse,SEo),e(a7,REo),e(a7,wq),e(wq,BEo),e(a7,PEo),e(ne,$Eo),e(ne,n7),e(n7,Qse),e(Qse,IEo),e(n7,qEo),e(n7,Aq),e(Aq,NEo),e(n7,jEo),e(ne,DEo),e(ne,s7),e(s7,Wse),e(Wse,GEo),e(s7,OEo),e(s7,yq),e(yq,VEo),e(s7,XEo),e(ne,zEo),e(ne,l7),e(l7,Hse),e(Hse,QEo),e(l7,WEo),e(l7,Lq),e(Lq,HEo),e(l7,UEo),e(ne,JEo),e(ne,i7),e(i7,Use),e(Use,YEo),e(i7,KEo),e(i7,xq),e(xq,ZEo),e(i7,eCo),e(Ge,oCo),e(Ge,d7),e(d7,rCo),e(d7,Jse),e(Jse,tCo),e(d7,aCo),e(d7,Yse),e(Yse,nCo),e(Ge,sCo),e(Ge,Kse),e(Kse,lCo),e(Ge,iCo),g(Dw,Ge,null),b(c,JRe,u),b(c,fd,u),e(fd,c7),e(c7,Zse),g(Gw,Zse,null),e(fd,dCo),e(fd,ele),e(ele,cCo),b(c,YRe,u),b(c,or,u),g(Ow,or,null),e(or,fCo),e(or,md),e(md,mCo),e(md,kq),e(kq,gCo),e(md,hCo),e(md,Sq),e(Sq,pCo),e(md,_Co),e(or,uCo),e(or,Vw),e(Vw,bCo),e(Vw,ole),e(ole,FCo),e(Vw,vCo),e(or,TCo),e(or,Ur),g(Xw,Ur,null),e(Ur,MCo),e(Ur,rle),e(rle,ECo),e(Ur,CCo),e(Ur,gd),e(gd,wCo),e(gd,tle),e(tle,ACo),e(gd,yCo),e(gd,Rq),e(Rq,LCo),e(gd,xCo),e(Ur,kCo),e(Ur,ale),e(ale,SCo),e(Ur,RCo),g(zw,Ur,null),e(or,BCo),e(or,Oe),g(Qw,Oe,null),e(Oe,PCo),e(Oe,nle),e(nle,$Co),e(Oe,ICo),e(Oe,Ua),e(Ua,qCo),e(Ua,sle),e(sle,NCo),e(Ua,jCo),e(Ua,lle),e(lle,DCo),e(Ua,GCo),e(Ua,ile),e(ile,OCo),e(Ua,VCo),e(Oe,XCo),e(Oe,y),e(y,f7),e(f7,dle),e(dle,zCo),e(f7,QCo),e(f7,Bq),e(Bq,WCo),e(f7,HCo),e(y,UCo),e(y,m7),e(m7,cle),e(cle,JCo),e(m7,YCo),e(m7,Pq),e(Pq,KCo),e(m7,ZCo),e(y,ewo),e(y,g7),e(g7,fle),e(fle,owo),e(g7,rwo),e(g7,$q),e($q,two),e(g7,awo),e(y,nwo),e(y,h7),e(h7,mle),e(mle,swo),e(h7,lwo),e(h7,Iq),e(Iq,iwo),e(h7,dwo),e(y,cwo),e(y,p7),e(p7,gle),e(gle,fwo),e(p7,mwo),e(p7,qq),e(qq,gwo),e(p7,hwo),e(y,pwo),e(y,_7),e(_7,hle),e(hle,_wo),e(_7,uwo),e(_7,Nq),e(Nq,bwo),e(_7,Fwo),e(y,vwo),e(y,u7),e(u7,ple),e(ple,Two),e(u7,Mwo),e(u7,jq),e(jq,Ewo),e(u7,Cwo),e(y,wwo),e(y,b7),e(b7,_le),e(_le,Awo),e(b7,ywo),e(b7,Dq),e(Dq,Lwo),e(b7,xwo),e(y,kwo),e(y,F7),e(F7,ule),e(ule,Swo),e(F7,Rwo),e(F7,Gq),e(Gq,Bwo),e(F7,Pwo),e(y,$wo),e(y,v7),e(v7,ble),e(ble,Iwo),e(v7,qwo),e(v7,Oq),e(Oq,Nwo),e(v7,jwo),e(y,Dwo),e(y,T7),e(T7,Fle),e(Fle,Gwo),e(T7,Owo),e(T7,Vq),e(Vq,Vwo),e(T7,Xwo),e(y,zwo),e(y,M7),e(M7,vle),e(vle,Qwo),e(M7,Wwo),e(M7,Xq),e(Xq,Hwo),e(M7,Uwo),e(y,Jwo),e(y,E7),e(E7,Tle),e(Tle,Ywo),e(E7,Kwo),e(E7,zq),e(zq,Zwo),e(E7,eAo),e(y,oAo),e(y,C7),e(C7,Mle),e(Mle,rAo),e(C7,tAo),e(C7,Qq),e(Qq,aAo),e(C7,nAo),e(y,sAo),e(y,w7),e(w7,Ele),e(Ele,lAo),e(w7,iAo),e(w7,Wq),e(Wq,dAo),e(w7,cAo),e(y,fAo),e(y,A7),e(A7,Cle),e(Cle,mAo),e(A7,gAo),e(A7,Hq),e(Hq,hAo),e(A7,pAo),e(y,_Ao),e(y,y7),e(y7,wle),e(wle,uAo),e(y7,bAo),e(y7,Uq),e(Uq,FAo),e(y7,vAo),e(y,TAo),e(y,L7),e(L7,Ale),e(Ale,MAo),e(L7,EAo),e(L7,Jq),e(Jq,CAo),e(L7,wAo),e(y,AAo),e(y,x7),e(x7,yle),e(yle,yAo),e(x7,LAo),e(x7,Yq),e(Yq,xAo),e(x7,kAo),e(y,SAo),e(y,k7),e(k7,Lle),e(Lle,RAo),e(k7,BAo),e(k7,Kq),e(Kq,PAo),e(k7,$Ao),e(y,IAo),e(y,S7),e(S7,xle),e(xle,qAo),e(S7,NAo),e(S7,Zq),e(Zq,jAo),e(S7,DAo),e(y,GAo),e(y,R7),e(R7,kle),e(kle,OAo),e(R7,VAo),e(R7,eN),e(eN,XAo),e(R7,zAo),e(y,QAo),e(y,B7),e(B7,Sle),e(Sle,WAo),e(B7,HAo),e(B7,oN),e(oN,UAo),e(B7,JAo),e(y,YAo),e(y,P7),e(P7,Rle),e(Rle,KAo),e(P7,ZAo),e(P7,rN),e(rN,e6o),e(P7,o6o),e(y,r6o),e(y,$7),e($7,Ble),e(Ble,t6o),e($7,a6o),e($7,tN),e(tN,n6o),e($7,s6o),e(y,l6o),e(y,I7),e(I7,Ple),e(Ple,i6o),e(I7,d6o),e(I7,aN),e(aN,c6o),e(I7,f6o),e(y,m6o),e(y,q7),e(q7,$le),e($le,g6o),e(q7,h6o),e(q7,nN),e(nN,p6o),e(q7,_6o),e(y,u6o),e(y,N7),e(N7,Ile),e(Ile,b6o),e(N7,F6o),e(N7,sN),e(sN,v6o),e(N7,T6o),e(y,M6o),e(y,j7),e(j7,qle),e(qle,E6o),e(j7,C6o),e(j7,lN),e(lN,w6o),e(j7,A6o),e(y,y6o),e(y,D7),e(D7,Nle),e(Nle,L6o),e(D7,x6o),e(D7,iN),e(iN,k6o),e(D7,S6o),e(y,R6o),e(y,G7),e(G7,jle),e(jle,B6o),e(G7,P6o),e(G7,dN),e(dN,$6o),e(G7,I6o),e(y,q6o),e(y,O7),e(O7,Dle),e(Dle,N6o),e(O7,j6o),e(O7,cN),e(cN,D6o),e(O7,G6o),e(y,O6o),e(y,V7),e(V7,Gle),e(Gle,V6o),e(V7,X6o),e(V7,fN),e(fN,z6o),e(V7,Q6o),e(y,W6o),e(y,X7),e(X7,Ole),e(Ole,H6o),e(X7,U6o),e(X7,mN),e(mN,J6o),e(X7,Y6o),e(y,K6o),e(y,z7),e(z7,Vle),e(Vle,Z6o),e(z7,e0o),e(z7,gN),e(gN,o0o),e(z7,r0o),e(y,t0o),e(y,Q7),e(Q7,Xle),e(Xle,a0o),e(Q7,n0o),e(Q7,hN),e(hN,s0o),e(Q7,l0o),e(y,i0o),e(y,W7),e(W7,zle),e(zle,d0o),e(W7,c0o),e(W7,pN),e(pN,f0o),e(W7,m0o),e(y,g0o),e(y,H7),e(H7,Qle),e(Qle,h0o),e(H7,p0o),e(H7,_N),e(_N,_0o),e(H7,u0o),e(y,b0o),e(y,U7),e(U7,Wle),e(Wle,F0o),e(U7,v0o),e(U7,uN),e(uN,T0o),e(U7,M0o),e(y,E0o),e(y,J7),e(J7,Hle),e(Hle,C0o),e(J7,w0o),e(J7,bN),e(bN,A0o),e(J7,y0o),e(y,L0o),e(y,Y7),e(Y7,Ule),e(Ule,x0o),e(Y7,k0o),e(Y7,FN),e(FN,S0o),e(Y7,R0o),e(y,B0o),e(y,K7),e(K7,Jle),e(Jle,P0o),e(K7,$0o),e(K7,vN),e(vN,I0o),e(K7,q0o),e(y,N0o),e(y,Z7),e(Z7,Yle),e(Yle,j0o),e(Z7,D0o),e(Z7,TN),e(TN,G0o),e(Z7,O0o),e(y,V0o),e(y,eb),e(eb,Kle),e(Kle,X0o),e(eb,z0o),e(eb,MN),e(MN,Q0o),e(eb,W0o),e(y,H0o),e(y,ob),e(ob,Zle),e(Zle,U0o),e(ob,J0o),e(ob,EN),e(EN,Y0o),e(ob,K0o),e(y,Z0o),e(y,rb),e(rb,eie),e(eie,eyo),e(rb,oyo),e(rb,CN),e(CN,ryo),e(rb,tyo),e(y,ayo),e(y,tb),e(tb,oie),e(oie,nyo),e(tb,syo),e(tb,wN),e(wN,lyo),e(tb,iyo),e(Oe,dyo),e(Oe,ab),e(ab,cyo),e(ab,rie),e(rie,fyo),e(ab,myo),e(ab,tie),e(tie,gyo),e(Oe,hyo),e(Oe,aie),e(aie,pyo),e(Oe,_yo),g(Ww,Oe,null),b(c,KRe,u),b(c,hd,u),e(hd,nb),e(nb,nie),g(Hw,nie,null),e(hd,uyo),e(hd,sie),e(sie,byo),b(c,ZRe,u),b(c,rr,u),g(Uw,rr,null),e(rr,Fyo),e(rr,pd),e(pd,vyo),e(pd,AN),e(AN,Tyo),e(pd,Myo),e(pd,yN),e(yN,Eyo),e(pd,Cyo),e(rr,wyo),e(rr,Jw),e(Jw,Ayo),e(Jw,lie),e(lie,yyo),e(Jw,Lyo),e(rr,xyo),e(rr,Jr),g(Yw,Jr,null),e(Jr,kyo),e(Jr,iie),e(iie,Syo),e(Jr,Ryo),e(Jr,_d),e(_d,Byo),e(_d,die),e(die,Pyo),e(_d,$yo),e(_d,LN),e(LN,Iyo),e(_d,qyo),e(Jr,Nyo),e(Jr,cie),e(cie,jyo),e(Jr,Dyo),g(Kw,Jr,null),e(rr,Gyo),e(rr,Ve),g(Zw,Ve,null),e(Ve,Oyo),e(Ve,fie),e(fie,Vyo),e(Ve,Xyo),e(Ve,Ja),e(Ja,zyo),e(Ja,mie),e(mie,Qyo),e(Ja,Wyo),e(Ja,gie),e(gie,Hyo),e(Ja,Uyo),e(Ja,hie),e(hie,Jyo),e(Ja,Yyo),e(Ve,Kyo),e(Ve,G),e(G,sb),e(sb,pie),e(pie,Zyo),e(sb,eLo),e(sb,xN),e(xN,oLo),e(sb,rLo),e(G,tLo),e(G,lb),e(lb,_ie),e(_ie,aLo),e(lb,nLo),e(lb,kN),e(kN,sLo),e(lb,lLo),e(G,iLo),e(G,ib),e(ib,uie),e(uie,dLo),e(ib,cLo),e(ib,SN),e(SN,fLo),e(ib,mLo),e(G,gLo),e(G,db),e(db,bie),e(bie,hLo),e(db,pLo),e(db,RN),e(RN,_Lo),e(db,uLo),e(G,bLo),e(G,cb),e(cb,Fie),e(Fie,FLo),e(cb,vLo),e(cb,BN),e(BN,TLo),e(cb,MLo),e(G,ELo),e(G,fb),e(fb,vie),e(vie,CLo),e(fb,wLo),e(fb,PN),e(PN,ALo),e(fb,yLo),e(G,LLo),e(G,mb),e(mb,Tie),e(Tie,xLo),e(mb,kLo),e(mb,$N),e($N,SLo),e(mb,RLo),e(G,BLo),e(G,gb),e(gb,Mie),e(Mie,PLo),e(gb,$Lo),e(gb,IN),e(IN,ILo),e(gb,qLo),e(G,NLo),e(G,hb),e(hb,Eie),e(Eie,jLo),e(hb,DLo),e(hb,qN),e(qN,GLo),e(hb,OLo),e(G,VLo),e(G,pb),e(pb,Cie),e(Cie,XLo),e(pb,zLo),e(pb,NN),e(NN,QLo),e(pb,WLo),e(G,HLo),e(G,_b),e(_b,wie),e(wie,ULo),e(_b,JLo),e(_b,jN),e(jN,YLo),e(_b,KLo),e(G,ZLo),e(G,ub),e(ub,Aie),e(Aie,e8o),e(ub,o8o),e(ub,DN),e(DN,r8o),e(ub,t8o),e(G,a8o),e(G,bb),e(bb,yie),e(yie,n8o),e(bb,s8o),e(bb,GN),e(GN,l8o),e(bb,i8o),e(G,d8o),e(G,Fb),e(Fb,Lie),e(Lie,c8o),e(Fb,f8o),e(Fb,ON),e(ON,m8o),e(Fb,g8o),e(G,h8o),e(G,vb),e(vb,xie),e(xie,p8o),e(vb,_8o),e(vb,VN),e(VN,u8o),e(vb,b8o),e(G,F8o),e(G,Tb),e(Tb,kie),e(kie,v8o),e(Tb,T8o),e(Tb,XN),e(XN,M8o),e(Tb,E8o),e(G,C8o),e(G,Mb),e(Mb,Sie),e(Sie,w8o),e(Mb,A8o),e(Mb,zN),e(zN,y8o),e(Mb,L8o),e(G,x8o),e(G,Eb),e(Eb,Rie),e(Rie,k8o),e(Eb,S8o),e(Eb,QN),e(QN,R8o),e(Eb,B8o),e(G,P8o),e(G,Cb),e(Cb,Bie),e(Bie,$8o),e(Cb,I8o),e(Cb,WN),e(WN,q8o),e(Cb,N8o),e(G,j8o),e(G,wb),e(wb,Pie),e(Pie,D8o),e(wb,G8o),e(wb,HN),e(HN,O8o),e(wb,V8o),e(G,X8o),e(G,Ab),e(Ab,$ie),e($ie,z8o),e(Ab,Q8o),e(Ab,UN),e(UN,W8o),e(Ab,H8o),e(G,U8o),e(G,yb),e(yb,Iie),e(Iie,J8o),e(yb,Y8o),e(yb,JN),e(JN,K8o),e(yb,Z8o),e(G,e9o),e(G,Lb),e(Lb,qie),e(qie,o9o),e(Lb,r9o),e(Lb,YN),e(YN,t9o),e(Lb,a9o),e(G,n9o),e(G,xb),e(xb,Nie),e(Nie,s9o),e(xb,l9o),e(xb,KN),e(KN,i9o),e(xb,d9o),e(G,c9o),e(G,kb),e(kb,jie),e(jie,f9o),e(kb,m9o),e(kb,ZN),e(ZN,g9o),e(kb,h9o),e(G,p9o),e(G,Sb),e(Sb,Die),e(Die,_9o),e(Sb,u9o),e(Sb,ej),e(ej,b9o),e(Sb,F9o),e(G,v9o),e(G,Rb),e(Rb,Gie),e(Gie,T9o),e(Rb,M9o),e(Rb,oj),e(oj,E9o),e(Rb,C9o),e(G,w9o),e(G,Bb),e(Bb,Oie),e(Oie,A9o),e(Bb,y9o),e(Bb,rj),e(rj,L9o),e(Bb,x9o),e(Ve,k9o),e(Ve,Pb),e(Pb,S9o),e(Pb,Vie),e(Vie,R9o),e(Pb,B9o),e(Pb,Xie),e(Xie,P9o),e(Ve,$9o),e(Ve,zie),e(zie,I9o),e(Ve,q9o),g(eA,Ve,null),b(c,eBe,u),b(c,ud,u),e(ud,$b),e($b,Qie),g(oA,Qie,null),e(ud,N9o),e(ud,Wie),e(Wie,j9o),b(c,oBe,u),b(c,tr,u),g(rA,tr,null),e(tr,D9o),e(tr,bd),e(bd,G9o),e(bd,tj),e(tj,O9o),e(bd,V9o),e(bd,aj),e(aj,X9o),e(bd,z9o),e(tr,Q9o),e(tr,tA),e(tA,W9o),e(tA,Hie),e(Hie,H9o),e(tA,U9o),e(tr,J9o),e(tr,Yr),g(aA,Yr,null),e(Yr,Y9o),e(Yr,Uie),e(Uie,K9o),e(Yr,Z9o),e(Yr,Fd),e(Fd,exo),e(Fd,Jie),e(Jie,oxo),e(Fd,rxo),e(Fd,nj),e(nj,txo),e(Fd,axo),e(Yr,nxo),e(Yr,Yie),e(Yie,sxo),e(Yr,lxo),g(nA,Yr,null),e(tr,ixo),e(tr,Xe),g(sA,Xe,null),e(Xe,dxo),e(Xe,Kie),e(Kie,cxo),e(Xe,fxo),e(Xe,Ya),e(Ya,mxo),e(Ya,Zie),e(Zie,gxo),e(Ya,hxo),e(Ya,ede),e(ede,pxo),e(Ya,_xo),e(Ya,ode),e(ode,uxo),e(Ya,bxo),e(Xe,Fxo),e(Xe,da),e(da,Ib),e(Ib,rde),e(rde,vxo),e(Ib,Txo),e(Ib,sj),e(sj,Mxo),e(Ib,Exo),e(da,Cxo),e(da,qb),e(qb,tde),e(tde,wxo),e(qb,Axo),e(qb,lj),e(lj,yxo),e(qb,Lxo),e(da,xxo),e(da,Nb),e(Nb,ade),e(ade,kxo),e(Nb,Sxo),e(Nb,ij),e(ij,Rxo),e(Nb,Bxo),e(da,Pxo),e(da,jb),e(jb,nde),e(nde,$xo),e(jb,Ixo),e(jb,dj),e(dj,qxo),e(jb,Nxo),e(da,jxo),e(da,Db),e(Db,sde),e(sde,Dxo),e(Db,Gxo),e(Db,cj),e(cj,Oxo),e(Db,Vxo),e(Xe,Xxo),e(Xe,Gb),e(Gb,zxo),e(Gb,lde),e(lde,Qxo),e(Gb,Wxo),e(Gb,ide),e(ide,Hxo),e(Xe,Uxo),e(Xe,dde),e(dde,Jxo),e(Xe,Yxo),g(lA,Xe,null),b(c,rBe,u),b(c,vd,u),e(vd,Ob),e(Ob,cde),g(iA,cde,null),e(vd,Kxo),e(vd,fde),e(fde,Zxo),b(c,tBe,u),b(c,ar,u),g(dA,ar,null),e(ar,eko),e(ar,Td),e(Td,oko),e(Td,fj),e(fj,rko),e(Td,tko),e(Td,mj),e(mj,ako),e(Td,nko),e(ar,sko),e(ar,cA),e(cA,lko),e(cA,mde),e(mde,iko),e(cA,dko),e(ar,cko),e(ar,Kr),g(fA,Kr,null),e(Kr,fko),e(Kr,gde),e(gde,mko),e(Kr,gko),e(Kr,Md),e(Md,hko),e(Md,hde),e(hde,pko),e(Md,_ko),e(Md,gj),e(gj,uko),e(Md,bko),e(Kr,Fko),e(Kr,pde),e(pde,vko),e(Kr,Tko),g(mA,Kr,null),e(ar,Mko),e(ar,ze),g(gA,ze,null),e(ze,Eko),e(ze,_de),e(_de,Cko),e(ze,wko),e(ze,Ka),e(Ka,Ako),e(Ka,ude),e(ude,yko),e(Ka,Lko),e(Ka,bde),e(bde,xko),e(Ka,kko),e(Ka,Fde),e(Fde,Sko),e(Ka,Rko),e(ze,Bko),e(ze,j),e(j,Vb),e(Vb,vde),e(vde,Pko),e(Vb,$ko),e(Vb,hj),e(hj,Iko),e(Vb,qko),e(j,Nko),e(j,Xb),e(Xb,Tde),e(Tde,jko),e(Xb,Dko),e(Xb,pj),e(pj,Gko),e(Xb,Oko),e(j,Vko),e(j,zb),e(zb,Mde),e(Mde,Xko),e(zb,zko),e(zb,_j),e(_j,Qko),e(zb,Wko),e(j,Hko),e(j,Qb),e(Qb,Ede),e(Ede,Uko),e(Qb,Jko),e(Qb,uj),e(uj,Yko),e(Qb,Kko),e(j,Zko),e(j,Wb),e(Wb,Cde),e(Cde,eSo),e(Wb,oSo),e(Wb,bj),e(bj,rSo),e(Wb,tSo),e(j,aSo),e(j,Hb),e(Hb,wde),e(wde,nSo),e(Hb,sSo),e(Hb,Fj),e(Fj,lSo),e(Hb,iSo),e(j,dSo),e(j,Ub),e(Ub,Ade),e(Ade,cSo),e(Ub,fSo),e(Ub,vj),e(vj,mSo),e(Ub,gSo),e(j,hSo),e(j,Jb),e(Jb,yde),e(yde,pSo),e(Jb,_So),e(Jb,Tj),e(Tj,uSo),e(Jb,bSo),e(j,FSo),e(j,Yb),e(Yb,Lde),e(Lde,vSo),e(Yb,TSo),e(Yb,Mj),e(Mj,MSo),e(Yb,ESo),e(j,CSo),e(j,Kb),e(Kb,xde),e(xde,wSo),e(Kb,ASo),e(Kb,Ej),e(Ej,ySo),e(Kb,LSo),e(j,xSo),e(j,Zb),e(Zb,kde),e(kde,kSo),e(Zb,SSo),e(Zb,Cj),e(Cj,RSo),e(Zb,BSo),e(j,PSo),e(j,e5),e(e5,Sde),e(Sde,$So),e(e5,ISo),e(e5,wj),e(wj,qSo),e(e5,NSo),e(j,jSo),e(j,o5),e(o5,Rde),e(Rde,DSo),e(o5,GSo),e(o5,Aj),e(Aj,OSo),e(o5,VSo),e(j,XSo),e(j,r5),e(r5,Bde),e(Bde,zSo),e(r5,QSo),e(r5,yj),e(yj,WSo),e(r5,HSo),e(j,USo),e(j,t5),e(t5,Pde),e(Pde,JSo),e(t5,YSo),e(t5,Lj),e(Lj,KSo),e(t5,ZSo),e(j,eRo),e(j,a5),e(a5,$de),e($de,oRo),e(a5,rRo),e(a5,xj),e(xj,tRo),e(a5,aRo),e(j,nRo),e(j,n5),e(n5,Ide),e(Ide,sRo),e(n5,lRo),e(n5,kj),e(kj,iRo),e(n5,dRo),e(j,cRo),e(j,s5),e(s5,qde),e(qde,fRo),e(s5,mRo),e(s5,Sj),e(Sj,gRo),e(s5,hRo),e(j,pRo),e(j,l5),e(l5,Nde),e(Nde,_Ro),e(l5,uRo),e(l5,Rj),e(Rj,bRo),e(l5,FRo),e(j,vRo),e(j,i5),e(i5,jde),e(jde,TRo),e(i5,MRo),e(i5,Bj),e(Bj,ERo),e(i5,CRo),e(j,wRo),e(j,d5),e(d5,Dde),e(Dde,ARo),e(d5,yRo),e(d5,Pj),e(Pj,LRo),e(d5,xRo),e(j,kRo),e(j,c5),e(c5,Gde),e(Gde,SRo),e(c5,RRo),e(c5,$j),e($j,BRo),e(c5,PRo),e(j,$Ro),e(j,f5),e(f5,Ode),e(Ode,IRo),e(f5,qRo),e(f5,Ij),e(Ij,NRo),e(f5,jRo),e(j,DRo),e(j,m5),e(m5,Vde),e(Vde,GRo),e(m5,ORo),e(m5,qj),e(qj,VRo),e(m5,XRo),e(j,zRo),e(j,g5),e(g5,Xde),e(Xde,QRo),e(g5,WRo),e(g5,Nj),e(Nj,HRo),e(g5,URo),e(j,JRo),e(j,h5),e(h5,zde),e(zde,YRo),e(h5,KRo),e(h5,jj),e(jj,ZRo),e(h5,eBo),e(j,oBo),e(j,p5),e(p5,Qde),e(Qde,rBo),e(p5,tBo),e(p5,Dj),e(Dj,aBo),e(p5,nBo),e(j,sBo),e(j,_5),e(_5,Wde),e(Wde,lBo),e(_5,iBo),e(_5,Gj),e(Gj,dBo),e(_5,cBo),e(j,fBo),e(j,u5),e(u5,Hde),e(Hde,mBo),e(u5,gBo),e(u5,Oj),e(Oj,hBo),e(u5,pBo),e(j,_Bo),e(j,b5),e(b5,Ude),e(Ude,uBo),e(b5,bBo),e(b5,Vj),e(Vj,FBo),e(b5,vBo),e(j,TBo),e(j,F5),e(F5,Jde),e(Jde,MBo),e(F5,EBo),e(F5,Xj),e(Xj,CBo),e(F5,wBo),e(j,ABo),e(j,v5),e(v5,Yde),e(Yde,yBo),e(v5,LBo),e(v5,zj),e(zj,xBo),e(v5,kBo),e(j,SBo),e(j,T5),e(T5,Kde),e(Kde,RBo),e(T5,BBo),e(T5,Qj),e(Qj,PBo),e(T5,$Bo),e(ze,IBo),e(ze,M5),e(M5,qBo),e(M5,Zde),e(Zde,NBo),e(M5,jBo),e(M5,ece),e(ece,DBo),e(ze,GBo),e(ze,oce),e(oce,OBo),e(ze,VBo),g(hA,ze,null),b(c,aBe,u),b(c,Ed,u),e(Ed,E5),e(E5,rce),g(pA,rce,null),e(Ed,XBo),e(Ed,tce),e(tce,zBo),b(c,nBe,u),b(c,nr,u),g(_A,nr,null),e(nr,QBo),e(nr,Cd),e(Cd,WBo),e(Cd,Wj),e(Wj,HBo),e(Cd,UBo),e(Cd,Hj),e(Hj,JBo),e(Cd,YBo),e(nr,KBo),e(nr,uA),e(uA,ZBo),e(uA,ace),e(ace,ePo),e(uA,oPo),e(nr,rPo),e(nr,Zr),g(bA,Zr,null),e(Zr,tPo),e(Zr,nce),e(nce,aPo),e(Zr,nPo),e(Zr,wd),e(wd,sPo),e(wd,sce),e(sce,lPo),e(wd,iPo),e(wd,Uj),e(Uj,dPo),e(wd,cPo),e(Zr,fPo),e(Zr,lce),e(lce,mPo),e(Zr,gPo),g(FA,Zr,null),e(nr,hPo),e(nr,Qe),g(vA,Qe,null),e(Qe,pPo),e(Qe,ice),e(ice,_Po),e(Qe,uPo),e(Qe,Za),e(Za,bPo),e(Za,dce),e(dce,FPo),e(Za,vPo),e(Za,cce),e(cce,TPo),e(Za,MPo),e(Za,fce),e(fce,EPo),e(Za,CPo),e(Qe,wPo),e(Qe,R),e(R,C5),e(C5,mce),e(mce,APo),e(C5,yPo),e(C5,Jj),e(Jj,LPo),e(C5,xPo),e(R,kPo),e(R,w5),e(w5,gce),e(gce,SPo),e(w5,RPo),e(w5,Yj),e(Yj,BPo),e(w5,PPo),e(R,$Po),e(R,A5),e(A5,hce),e(hce,IPo),e(A5,qPo),e(A5,Kj),e(Kj,NPo),e(A5,jPo),e(R,DPo),e(R,y5),e(y5,pce),e(pce,GPo),e(y5,OPo),e(y5,Zj),e(Zj,VPo),e(y5,XPo),e(R,zPo),e(R,L5),e(L5,_ce),e(_ce,QPo),e(L5,WPo),e(L5,eD),e(eD,HPo),e(L5,UPo),e(R,JPo),e(R,x5),e(x5,uce),e(uce,YPo),e(x5,KPo),e(x5,oD),e(oD,ZPo),e(x5,e$o),e(R,o$o),e(R,k5),e(k5,bce),e(bce,r$o),e(k5,t$o),e(k5,rD),e(rD,a$o),e(k5,n$o),e(R,s$o),e(R,S5),e(S5,Fce),e(Fce,l$o),e(S5,i$o),e(S5,tD),e(tD,d$o),e(S5,c$o),e(R,f$o),e(R,R5),e(R5,vce),e(vce,m$o),e(R5,g$o),e(R5,aD),e(aD,h$o),e(R5,p$o),e(R,_$o),e(R,B5),e(B5,Tce),e(Tce,u$o),e(B5,b$o),e(B5,nD),e(nD,F$o),e(B5,v$o),e(R,T$o),e(R,P5),e(P5,Mce),e(Mce,M$o),e(P5,E$o),e(P5,sD),e(sD,C$o),e(P5,w$o),e(R,A$o),e(R,$5),e($5,Ece),e(Ece,y$o),e($5,L$o),e($5,lD),e(lD,x$o),e($5,k$o),e(R,S$o),e(R,I5),e(I5,Cce),e(Cce,R$o),e(I5,B$o),e(I5,iD),e(iD,P$o),e(I5,$$o),e(R,I$o),e(R,q5),e(q5,wce),e(wce,q$o),e(q5,N$o),e(q5,dD),e(dD,j$o),e(q5,D$o),e(R,G$o),e(R,N5),e(N5,Ace),e(Ace,O$o),e(N5,V$o),e(N5,cD),e(cD,X$o),e(N5,z$o),e(R,Q$o),e(R,j5),e(j5,yce),e(yce,W$o),e(j5,H$o),e(j5,fD),e(fD,U$o),e(j5,J$o),e(R,Y$o),e(R,D5),e(D5,Lce),e(Lce,K$o),e(D5,Z$o),e(D5,mD),e(mD,eIo),e(D5,oIo),e(R,rIo),e(R,G5),e(G5,xce),e(xce,tIo),e(G5,aIo),e(G5,gD),e(gD,nIo),e(G5,sIo),e(R,lIo),e(R,O5),e(O5,kce),e(kce,iIo),e(O5,dIo),e(O5,hD),e(hD,cIo),e(O5,fIo),e(R,mIo),e(R,V5),e(V5,Sce),e(Sce,gIo),e(V5,hIo),e(V5,pD),e(pD,pIo),e(V5,_Io),e(R,uIo),e(R,X5),e(X5,Rce),e(Rce,bIo),e(X5,FIo),e(X5,_D),e(_D,vIo),e(X5,TIo),e(R,MIo),e(R,z5),e(z5,Bce),e(Bce,EIo),e(z5,CIo),e(z5,uD),e(uD,wIo),e(z5,AIo),e(R,yIo),e(R,Q5),e(Q5,Pce),e(Pce,LIo),e(Q5,xIo),e(Q5,bD),e(bD,kIo),e(Q5,SIo),e(R,RIo),e(R,W5),e(W5,$ce),e($ce,BIo),e(W5,PIo),e(W5,FD),e(FD,$Io),e(W5,IIo),e(R,qIo),e(R,H5),e(H5,Ice),e(Ice,NIo),e(H5,jIo),e(H5,vD),e(vD,DIo),e(H5,GIo),e(R,OIo),e(R,U5),e(U5,qce),e(qce,VIo),e(U5,XIo),e(U5,TD),e(TD,zIo),e(U5,QIo),e(R,WIo),e(R,J5),e(J5,Nce),e(Nce,HIo),e(J5,UIo),e(J5,MD),e(MD,JIo),e(J5,YIo),e(R,KIo),e(R,Y5),e(Y5,jce),e(jce,ZIo),e(Y5,eqo),e(Y5,ED),e(ED,oqo),e(Y5,rqo),e(R,tqo),e(R,K5),e(K5,Dce),e(Dce,aqo),e(K5,nqo),e(K5,CD),e(CD,sqo),e(K5,lqo),e(R,iqo),e(R,Z5),e(Z5,Gce),e(Gce,dqo),e(Z5,cqo),e(Z5,wD),e(wD,fqo),e(Z5,mqo),e(R,gqo),e(R,e3),e(e3,Oce),e(Oce,hqo),e(e3,pqo),e(e3,AD),e(AD,_qo),e(e3,uqo),e(R,bqo),e(R,o3),e(o3,Vce),e(Vce,Fqo),e(o3,vqo),e(o3,yD),e(yD,Tqo),e(o3,Mqo),e(R,Eqo),e(R,r3),e(r3,Xce),e(Xce,Cqo),e(r3,wqo),e(r3,LD),e(LD,Aqo),e(r3,yqo),e(R,Lqo),e(R,t3),e(t3,zce),e(zce,xqo),e(t3,kqo),e(t3,xD),e(xD,Sqo),e(t3,Rqo),e(R,Bqo),e(R,a3),e(a3,Qce),e(Qce,Pqo),e(a3,$qo),e(a3,kD),e(kD,Iqo),e(a3,qqo),e(R,Nqo),e(R,n3),e(n3,Wce),e(Wce,jqo),e(n3,Dqo),e(n3,SD),e(SD,Gqo),e(n3,Oqo),e(R,Vqo),e(R,s3),e(s3,Hce),e(Hce,Xqo),e(s3,zqo),e(s3,RD),e(RD,Qqo),e(s3,Wqo),e(R,Hqo),e(R,l3),e(l3,Uce),e(Uce,Uqo),e(l3,Jqo),e(l3,BD),e(BD,Yqo),e(l3,Kqo),e(R,Zqo),e(R,i3),e(i3,Jce),e(Jce,eNo),e(i3,oNo),e(i3,PD),e(PD,rNo),e(i3,tNo),e(Qe,aNo),e(Qe,d3),e(d3,nNo),e(d3,Yce),e(Yce,sNo),e(d3,lNo),e(d3,Kce),e(Kce,iNo),e(Qe,dNo),e(Qe,Zce),e(Zce,cNo),e(Qe,fNo),g(TA,Qe,null),b(c,sBe,u),b(c,Ad,u),e(Ad,c3),e(c3,efe),g(MA,efe,null),e(Ad,mNo),e(Ad,ofe),e(ofe,gNo),b(c,lBe,u),b(c,sr,u),g(EA,sr,null),e(sr,hNo),e(sr,yd),e(yd,pNo),e(yd,$D),e($D,_No),e(yd,uNo),e(yd,ID),e(ID,bNo),e(yd,FNo),e(sr,vNo),e(sr,CA),e(CA,TNo),e(CA,rfe),e(rfe,MNo),e(CA,ENo),e(sr,CNo),e(sr,et),g(wA,et,null),e(et,wNo),e(et,tfe),e(tfe,ANo),e(et,yNo),e(et,Ld),e(Ld,LNo),e(Ld,afe),e(afe,xNo),e(Ld,kNo),e(Ld,qD),e(qD,SNo),e(Ld,RNo),e(et,BNo),e(et,nfe),e(nfe,PNo),e(et,$No),g(AA,et,null),e(sr,INo),e(sr,We),g(yA,We,null),e(We,qNo),e(We,sfe),e(sfe,NNo),e(We,jNo),e(We,en),e(en,DNo),e(en,lfe),e(lfe,GNo),e(en,ONo),e(en,ife),e(ife,VNo),e(en,XNo),e(en,dfe),e(dfe,zNo),e(en,QNo),e(We,WNo),e(We,cfe),e(cfe,f3),e(f3,ffe),e(ffe,HNo),e(f3,UNo),e(f3,ND),e(ND,JNo),e(f3,YNo),e(We,KNo),e(We,m3),e(m3,ZNo),e(m3,mfe),e(mfe,ejo),e(m3,ojo),e(m3,gfe),e(gfe,rjo),e(We,tjo),e(We,hfe),e(hfe,ajo),e(We,njo),g(LA,We,null),b(c,iBe,u),b(c,xd,u),e(xd,g3),e(g3,pfe),g(xA,pfe,null),e(xd,sjo),e(xd,_fe),e(_fe,ljo),b(c,dBe,u),b(c,lr,u),g(kA,lr,null),e(lr,ijo),e(lr,kd),e(kd,djo),e(kd,jD),e(jD,cjo),e(kd,fjo),e(kd,DD),e(DD,mjo),e(kd,gjo),e(lr,hjo),e(lr,SA),e(SA,pjo),e(SA,ufe),e(ufe,_jo),e(SA,ujo),e(lr,bjo),e(lr,ot),g(RA,ot,null),e(ot,Fjo),e(ot,bfe),e(bfe,vjo),e(ot,Tjo),e(ot,Sd),e(Sd,Mjo),e(Sd,Ffe),e(Ffe,Ejo),e(Sd,Cjo),e(Sd,GD),e(GD,wjo),e(Sd,Ajo),e(ot,yjo),e(ot,vfe),e(vfe,Ljo),e(ot,xjo),g(BA,ot,null),e(lr,kjo),e(lr,He),g(PA,He,null),e(He,Sjo),e(He,Tfe),e(Tfe,Rjo),e(He,Bjo),e(He,on),e(on,Pjo),e(on,Mfe),e(Mfe,$jo),e(on,Ijo),e(on,Efe),e(Efe,qjo),e(on,Njo),e(on,Cfe),e(Cfe,jjo),e(on,Djo),e(He,Gjo),e(He,ce),e(ce,h3),e(h3,wfe),e(wfe,Ojo),e(h3,Vjo),e(h3,OD),e(OD,Xjo),e(h3,zjo),e(ce,Qjo),e(ce,p3),e(p3,Afe),e(Afe,Wjo),e(p3,Hjo),e(p3,VD),e(VD,Ujo),e(p3,Jjo),e(ce,Yjo),e(ce,Ds),e(Ds,yfe),e(yfe,Kjo),e(Ds,Zjo),e(Ds,XD),e(XD,eDo),e(Ds,oDo),e(Ds,zD),e(zD,rDo),e(Ds,tDo),e(ce,aDo),e(ce,_3),e(_3,Lfe),e(Lfe,nDo),e(_3,sDo),e(_3,QD),e(QD,lDo),e(_3,iDo),e(ce,dDo),e(ce,ma),e(ma,xfe),e(xfe,cDo),e(ma,fDo),e(ma,WD),e(WD,mDo),e(ma,gDo),e(ma,HD),e(HD,hDo),e(ma,pDo),e(ma,UD),e(UD,_Do),e(ma,uDo),e(ce,bDo),e(ce,u3),e(u3,kfe),e(kfe,FDo),e(u3,vDo),e(u3,JD),e(JD,TDo),e(u3,MDo),e(ce,EDo),e(ce,b3),e(b3,Sfe),e(Sfe,CDo),e(b3,wDo),e(b3,YD),e(YD,ADo),e(b3,yDo),e(ce,LDo),e(ce,F3),e(F3,Rfe),e(Rfe,xDo),e(F3,kDo),e(F3,KD),e(KD,SDo),e(F3,RDo),e(ce,BDo),e(ce,v3),e(v3,Bfe),e(Bfe,PDo),e(v3,$Do),e(v3,ZD),e(ZD,IDo),e(v3,qDo),e(ce,NDo),e(ce,T3),e(T3,Pfe),e(Pfe,jDo),e(T3,DDo),e(T3,eG),e(eG,GDo),e(T3,ODo),e(ce,VDo),e(ce,M3),e(M3,$fe),e($fe,XDo),e(M3,zDo),e(M3,oG),e(oG,QDo),e(M3,WDo),e(ce,HDo),e(ce,E3),e(E3,Ife),e(Ife,UDo),e(E3,JDo),e(E3,rG),e(rG,YDo),e(E3,KDo),e(He,ZDo),e(He,C3),e(C3,eGo),e(C3,qfe),e(qfe,oGo),e(C3,rGo),e(C3,Nfe),e(Nfe,tGo),e(He,aGo),e(He,jfe),e(jfe,nGo),e(He,sGo),g($A,He,null),b(c,cBe,u),b(c,Rd,u),e(Rd,w3),e(w3,Dfe),g(IA,Dfe,null),e(Rd,lGo),e(Rd,Gfe),e(Gfe,iGo),b(c,fBe,u),b(c,ir,u),g(qA,ir,null),e(ir,dGo),e(ir,Bd),e(Bd,cGo),e(Bd,tG),e(tG,fGo),e(Bd,mGo),e(Bd,aG),e(aG,gGo),e(Bd,hGo),e(ir,pGo),e(ir,NA),e(NA,_Go),e(NA,Ofe),e(Ofe,uGo),e(NA,bGo),e(ir,FGo),e(ir,rt),g(jA,rt,null),e(rt,vGo),e(rt,Vfe),e(Vfe,TGo),e(rt,MGo),e(rt,Pd),e(Pd,EGo),e(Pd,Xfe),e(Xfe,CGo),e(Pd,wGo),e(Pd,nG),e(nG,AGo),e(Pd,yGo),e(rt,LGo),e(rt,zfe),e(zfe,xGo),e(rt,kGo),g(DA,rt,null),e(ir,SGo),e(ir,Ue),g(GA,Ue,null),e(Ue,RGo),e(Ue,Qfe),e(Qfe,BGo),e(Ue,PGo),e(Ue,rn),e(rn,$Go),e(rn,Wfe),e(Wfe,IGo),e(rn,qGo),e(rn,Hfe),e(Hfe,NGo),e(rn,jGo),e(rn,Ufe),e(Ufe,DGo),e(rn,GGo),e(Ue,OGo),e(Ue,Jfe),e(Jfe,A3),e(A3,Yfe),e(Yfe,VGo),e(A3,XGo),e(A3,sG),e(sG,zGo),e(A3,QGo),e(Ue,WGo),e(Ue,y3),e(y3,HGo),e(y3,Kfe),e(Kfe,UGo),e(y3,JGo),e(y3,Zfe),e(Zfe,YGo),e(Ue,KGo),e(Ue,eme),e(eme,ZGo),e(Ue,eOo),g(OA,Ue,null),b(c,mBe,u),b(c,$d,u),e($d,L3),e(L3,ome),g(VA,ome,null),e($d,oOo),e($d,rme),e(rme,rOo),b(c,gBe,u),b(c,dr,u),g(XA,dr,null),e(dr,tOo),e(dr,Id),e(Id,aOo),e(Id,lG),e(lG,nOo),e(Id,sOo),e(Id,iG),e(iG,lOo),e(Id,iOo),e(dr,dOo),e(dr,zA),e(zA,cOo),e(zA,tme),e(tme,fOo),e(zA,mOo),e(dr,gOo),e(dr,tt),g(QA,tt,null),e(tt,hOo),e(tt,ame),e(ame,pOo),e(tt,_Oo),e(tt,qd),e(qd,uOo),e(qd,nme),e(nme,bOo),e(qd,FOo),e(qd,dG),e(dG,vOo),e(qd,TOo),e(tt,MOo),e(tt,sme),e(sme,EOo),e(tt,COo),g(WA,tt,null),e(dr,wOo),e(dr,Je),g(HA,Je,null),e(Je,AOo),e(Je,lme),e(lme,yOo),e(Je,LOo),e(Je,tn),e(tn,xOo),e(tn,ime),e(ime,kOo),e(tn,SOo),e(tn,dme),e(dme,ROo),e(tn,BOo),e(tn,cme),e(cme,POo),e(tn,$Oo),e(Je,IOo),e(Je,Se),e(Se,x3),e(x3,fme),e(fme,qOo),e(x3,NOo),e(x3,cG),e(cG,jOo),e(x3,DOo),e(Se,GOo),e(Se,k3),e(k3,mme),e(mme,OOo),e(k3,VOo),e(k3,fG),e(fG,XOo),e(k3,zOo),e(Se,QOo),e(Se,S3),e(S3,gme),e(gme,WOo),e(S3,HOo),e(S3,mG),e(mG,UOo),e(S3,JOo),e(Se,YOo),e(Se,R3),e(R3,hme),e(hme,KOo),e(R3,ZOo),e(R3,gG),e(gG,eVo),e(R3,oVo),e(Se,rVo),e(Se,B3),e(B3,pme),e(pme,tVo),e(B3,aVo),e(B3,hG),e(hG,nVo),e(B3,sVo),e(Se,lVo),e(Se,P3),e(P3,_me),e(_me,iVo),e(P3,dVo),e(P3,pG),e(pG,cVo),e(P3,fVo),e(Se,mVo),e(Se,$3),e($3,ume),e(ume,gVo),e($3,hVo),e($3,_G),e(_G,pVo),e($3,_Vo),e(Se,uVo),e(Se,I3),e(I3,bme),e(bme,bVo),e(I3,FVo),e(I3,uG),e(uG,vVo),e(I3,TVo),e(Je,MVo),e(Je,q3),e(q3,EVo),e(q3,Fme),e(Fme,CVo),e(q3,wVo),e(q3,vme),e(vme,AVo),e(Je,yVo),e(Je,Tme),e(Tme,LVo),e(Je,xVo),g(UA,Je,null),b(c,hBe,u),b(c,Nd,u),e(Nd,N3),e(N3,Mme),g(JA,Mme,null),e(Nd,kVo),e(Nd,Eme),e(Eme,SVo),b(c,pBe,u),b(c,cr,u),g(YA,cr,null),e(cr,RVo),e(cr,jd),e(jd,BVo),e(jd,bG),e(bG,PVo),e(jd,$Vo),e(jd,FG),e(FG,IVo),e(jd,qVo),e(cr,NVo),e(cr,KA),e(KA,jVo),e(KA,Cme),e(Cme,DVo),e(KA,GVo),e(cr,OVo),e(cr,at),g(ZA,at,null),e(at,VVo),e(at,wme),e(wme,XVo),e(at,zVo),e(at,Dd),e(Dd,QVo),e(Dd,Ame),e(Ame,WVo),e(Dd,HVo),e(Dd,vG),e(vG,UVo),e(Dd,JVo),e(at,YVo),e(at,yme),e(yme,KVo),e(at,ZVo),g(e6,at,null),e(cr,eXo),e(cr,Ye),g(o6,Ye,null),e(Ye,oXo),e(Ye,Lme),e(Lme,rXo),e(Ye,tXo),e(Ye,an),e(an,aXo),e(an,xme),e(xme,nXo),e(an,sXo),e(an,kme),e(kme,lXo),e(an,iXo),e(an,Sme),e(Sme,dXo),e(an,cXo),e(Ye,fXo),e(Ye,nn),e(nn,j3),e(j3,Rme),e(Rme,mXo),e(j3,gXo),e(j3,TG),e(TG,hXo),e(j3,pXo),e(nn,_Xo),e(nn,D3),e(D3,Bme),e(Bme,uXo),e(D3,bXo),e(D3,MG),e(MG,FXo),e(D3,vXo),e(nn,TXo),e(nn,G3),e(G3,Pme),e(Pme,MXo),e(G3,EXo),e(G3,EG),e(EG,CXo),e(G3,wXo),e(nn,AXo),e(nn,O3),e(O3,$me),e($me,yXo),e(O3,LXo),e(O3,CG),e(CG,xXo),e(O3,kXo),e(Ye,SXo),e(Ye,V3),e(V3,RXo),e(V3,Ime),e(Ime,BXo),e(V3,PXo),e(V3,qme),e(qme,$Xo),e(Ye,IXo),e(Ye,Nme),e(Nme,qXo),e(Ye,NXo),g(r6,Ye,null),b(c,_Be,u),b(c,Gd,u),e(Gd,X3),e(X3,jme),g(t6,jme,null),e(Gd,jXo),e(Gd,Dme),e(Dme,DXo),b(c,uBe,u),b(c,fr,u),g(a6,fr,null),e(fr,GXo),e(fr,Od),e(Od,OXo),e(Od,wG),e(wG,VXo),e(Od,XXo),e(Od,AG),e(AG,zXo),e(Od,QXo),e(fr,WXo),e(fr,n6),e(n6,HXo),e(n6,Gme),e(Gme,UXo),e(n6,JXo),e(fr,YXo),e(fr,nt),g(s6,nt,null),e(nt,KXo),e(nt,Ome),e(Ome,ZXo),e(nt,ezo),e(nt,Vd),e(Vd,ozo),e(Vd,Vme),e(Vme,rzo),e(Vd,tzo),e(Vd,yG),e(yG,azo),e(Vd,nzo),e(nt,szo),e(nt,Xme),e(Xme,lzo),e(nt,izo),g(l6,nt,null),e(fr,dzo),e(fr,Ke),g(i6,Ke,null),e(Ke,czo),e(Ke,zme),e(zme,fzo),e(Ke,mzo),e(Ke,sn),e(sn,gzo),e(sn,Qme),e(Qme,hzo),e(sn,pzo),e(sn,Wme),e(Wme,_zo),e(sn,uzo),e(sn,Hme),e(Hme,bzo),e(sn,Fzo),e(Ke,vzo),e(Ke,Re),e(Re,z3),e(z3,Ume),e(Ume,Tzo),e(z3,Mzo),e(z3,LG),e(LG,Ezo),e(z3,Czo),e(Re,wzo),e(Re,Q3),e(Q3,Jme),e(Jme,Azo),e(Q3,yzo),e(Q3,xG),e(xG,Lzo),e(Q3,xzo),e(Re,kzo),e(Re,W3),e(W3,Yme),e(Yme,Szo),e(W3,Rzo),e(W3,kG),e(kG,Bzo),e(W3,Pzo),e(Re,$zo),e(Re,H3),e(H3,Kme),e(Kme,Izo),e(H3,qzo),e(H3,SG),e(SG,Nzo),e(H3,jzo),e(Re,Dzo),e(Re,U3),e(U3,Zme),e(Zme,Gzo),e(U3,Ozo),e(U3,RG),e(RG,Vzo),e(U3,Xzo),e(Re,zzo),e(Re,J3),e(J3,ege),e(ege,Qzo),e(J3,Wzo),e(J3,BG),e(BG,Hzo),e(J3,Uzo),e(Re,Jzo),e(Re,Y3),e(Y3,oge),e(oge,Yzo),e(Y3,Kzo),e(Y3,PG),e(PG,Zzo),e(Y3,eQo),e(Re,oQo),e(Re,K3),e(K3,rge),e(rge,rQo),e(K3,tQo),e(K3,$G),e($G,aQo),e(K3,nQo),e(Ke,sQo),e(Ke,Z3),e(Z3,lQo),e(Z3,tge),e(tge,iQo),e(Z3,dQo),e(Z3,age),e(age,cQo),e(Ke,fQo),e(Ke,nge),e(nge,mQo),e(Ke,gQo),g(d6,Ke,null),b(c,bBe,u),b(c,Xd,u),e(Xd,e2),e(e2,sge),g(c6,sge,null),e(Xd,hQo),e(Xd,lge),e(lge,pQo),b(c,FBe,u),b(c,mr,u),g(f6,mr,null),e(mr,_Qo),e(mr,zd),e(zd,uQo),e(zd,IG),e(IG,bQo),e(zd,FQo),e(zd,qG),e(qG,vQo),e(zd,TQo),e(mr,MQo),e(mr,m6),e(m6,EQo),e(m6,ige),e(ige,CQo),e(m6,wQo),e(mr,AQo),e(mr,st),g(g6,st,null),e(st,yQo),e(st,dge),e(dge,LQo),e(st,xQo),e(st,Qd),e(Qd,kQo),e(Qd,cge),e(cge,SQo),e(Qd,RQo),e(Qd,NG),e(NG,BQo),e(Qd,PQo),e(st,$Qo),e(st,fge),e(fge,IQo),e(st,qQo),g(h6,st,null),e(mr,NQo),e(mr,Ze),g(p6,Ze,null),e(Ze,jQo),e(Ze,mge),e(mge,DQo),e(Ze,GQo),e(Ze,ln),e(ln,OQo),e(ln,gge),e(gge,VQo),e(ln,XQo),e(ln,hge),e(hge,zQo),e(ln,QQo),e(ln,pge),e(pge,WQo),e(ln,HQo),e(Ze,UQo),e(Ze,_6),e(_6,o2),e(o2,_ge),e(_ge,JQo),e(o2,YQo),e(o2,jG),e(jG,KQo),e(o2,ZQo),e(_6,eWo),e(_6,r2),e(r2,uge),e(uge,oWo),e(r2,rWo),e(r2,DG),e(DG,tWo),e(r2,aWo),e(Ze,nWo),e(Ze,t2),e(t2,sWo),e(t2,bge),e(bge,lWo),e(t2,iWo),e(t2,Fge),e(Fge,dWo),e(Ze,cWo),e(Ze,vge),e(vge,fWo),e(Ze,mWo),g(u6,Ze,null),b(c,vBe,u),b(c,Wd,u),e(Wd,a2),e(a2,Tge),g(b6,Tge,null),e(Wd,gWo),e(Wd,Mge),e(Mge,hWo),b(c,TBe,u),b(c,gr,u),g(F6,gr,null),e(gr,pWo),e(gr,Hd),e(Hd,_Wo),e(Hd,GG),e(GG,uWo),e(Hd,bWo),e(Hd,OG),e(OG,FWo),e(Hd,vWo),e(gr,TWo),e(gr,v6),e(v6,MWo),e(v6,Ege),e(Ege,EWo),e(v6,CWo),e(gr,wWo),e(gr,lt),g(T6,lt,null),e(lt,AWo),e(lt,Cge),e(Cge,yWo),e(lt,LWo),e(lt,Ud),e(Ud,xWo),e(Ud,wge),e(wge,kWo),e(Ud,SWo),e(Ud,VG),e(VG,RWo),e(Ud,BWo),e(lt,PWo),e(lt,Age),e(Age,$Wo),e(lt,IWo),g(M6,lt,null),e(gr,qWo),e(gr,eo),g(E6,eo,null),e(eo,NWo),e(eo,yge),e(yge,jWo),e(eo,DWo),e(eo,dn),e(dn,GWo),e(dn,Lge),e(Lge,OWo),e(dn,VWo),e(dn,xge),e(xge,XWo),e(dn,zWo),e(dn,kge),e(kge,QWo),e(dn,WWo),e(eo,HWo),e(eo,cn),e(cn,n2),e(n2,Sge),e(Sge,UWo),e(n2,JWo),e(n2,XG),e(XG,YWo),e(n2,KWo),e(cn,ZWo),e(cn,s2),e(s2,Rge),e(Rge,eHo),e(s2,oHo),e(s2,zG),e(zG,rHo),e(s2,tHo),e(cn,aHo),e(cn,l2),e(l2,Bge),e(Bge,nHo),e(l2,sHo),e(l2,QG),e(QG,lHo),e(l2,iHo),e(cn,dHo),e(cn,i2),e(i2,Pge),e(Pge,cHo),e(i2,fHo),e(i2,WG),e(WG,mHo),e(i2,gHo),e(eo,hHo),e(eo,d2),e(d2,pHo),e(d2,$ge),e($ge,_Ho),e(d2,uHo),e(d2,Ige),e(Ige,bHo),e(eo,FHo),e(eo,qge),e(qge,vHo),e(eo,THo),g(C6,eo,null),b(c,MBe,u),b(c,Jd,u),e(Jd,c2),e(c2,Nge),g(w6,Nge,null),e(Jd,MHo),e(Jd,jge),e(jge,EHo),b(c,EBe,u),b(c,hr,u),g(A6,hr,null),e(hr,CHo),e(hr,Yd),e(Yd,wHo),e(Yd,HG),e(HG,AHo),e(Yd,yHo),e(Yd,UG),e(UG,LHo),e(Yd,xHo),e(hr,kHo),e(hr,y6),e(y6,SHo),e(y6,Dge),e(Dge,RHo),e(y6,BHo),e(hr,PHo),e(hr,it),g(L6,it,null),e(it,$Ho),e(it,Gge),e(Gge,IHo),e(it,qHo),e(it,Kd),e(Kd,NHo),e(Kd,Oge),e(Oge,jHo),e(Kd,DHo),e(Kd,JG),e(JG,GHo),e(Kd,OHo),e(it,VHo),e(it,Vge),e(Vge,XHo),e(it,zHo),g(x6,it,null),e(hr,QHo),e(hr,oo),g(k6,oo,null),e(oo,WHo),e(oo,Xge),e(Xge,HHo),e(oo,UHo),e(oo,fn),e(fn,JHo),e(fn,zge),e(zge,YHo),e(fn,KHo),e(fn,Qge),e(Qge,ZHo),e(fn,eUo),e(fn,Wge),e(Wge,oUo),e(fn,rUo),e(oo,tUo),e(oo,Zd),e(Zd,f2),e(f2,Hge),e(Hge,aUo),e(f2,nUo),e(f2,YG),e(YG,sUo),e(f2,lUo),e(Zd,iUo),e(Zd,m2),e(m2,Uge),e(Uge,dUo),e(m2,cUo),e(m2,KG),e(KG,fUo),e(m2,mUo),e(Zd,gUo),e(Zd,g2),e(g2,Jge),e(Jge,hUo),e(g2,pUo),e(g2,ZG),e(ZG,_Uo),e(g2,uUo),e(oo,bUo),e(oo,h2),e(h2,FUo),e(h2,Yge),e(Yge,vUo),e(h2,TUo),e(h2,Kge),e(Kge,MUo),e(oo,EUo),e(oo,Zge),e(Zge,CUo),e(oo,wUo),g(S6,oo,null),b(c,CBe,u),b(c,ec,u),e(ec,p2),e(p2,ehe),g(R6,ehe,null),e(ec,AUo),e(ec,ohe),e(ohe,yUo),b(c,wBe,u),b(c,pr,u),g(B6,pr,null),e(pr,LUo),e(pr,oc),e(oc,xUo),e(oc,eO),e(eO,kUo),e(oc,SUo),e(oc,oO),e(oO,RUo),e(oc,BUo),e(pr,PUo),e(pr,P6),e(P6,$Uo),e(P6,rhe),e(rhe,IUo),e(P6,qUo),e(pr,NUo),e(pr,dt),g($6,dt,null),e(dt,jUo),e(dt,the),e(the,DUo),e(dt,GUo),e(dt,rc),e(rc,OUo),e(rc,ahe),e(ahe,VUo),e(rc,XUo),e(rc,rO),e(rO,zUo),e(rc,QUo),e(dt,WUo),e(dt,nhe),e(nhe,HUo),e(dt,UUo),g(I6,dt,null),e(pr,JUo),e(pr,ro),g(q6,ro,null),e(ro,YUo),e(ro,she),e(she,KUo),e(ro,ZUo),e(ro,mn),e(mn,eJo),e(mn,lhe),e(lhe,oJo),e(mn,rJo),e(mn,ihe),e(ihe,tJo),e(mn,aJo),e(mn,dhe),e(dhe,nJo),e(mn,sJo),e(ro,lJo),e(ro,che),e(che,_2),e(_2,fhe),e(fhe,iJo),e(_2,dJo),e(_2,tO),e(tO,cJo),e(_2,fJo),e(ro,mJo),e(ro,u2),e(u2,gJo),e(u2,mhe),e(mhe,hJo),e(u2,pJo),e(u2,ghe),e(ghe,_Jo),e(ro,uJo),e(ro,hhe),e(hhe,bJo),e(ro,FJo),g(N6,ro,null),b(c,ABe,u),b(c,tc,u),e(tc,b2),e(b2,phe),g(j6,phe,null),e(tc,vJo),e(tc,_he),e(_he,TJo),b(c,yBe,u),b(c,_r,u),g(D6,_r,null),e(_r,MJo),e(_r,ac),e(ac,EJo),e(ac,aO),e(aO,CJo),e(ac,wJo),e(ac,nO),e(nO,AJo),e(ac,yJo),e(_r,LJo),e(_r,G6),e(G6,xJo),e(G6,uhe),e(uhe,kJo),e(G6,SJo),e(_r,RJo),e(_r,ct),g(O6,ct,null),e(ct,BJo),e(ct,bhe),e(bhe,PJo),e(ct,$Jo),e(ct,nc),e(nc,IJo),e(nc,Fhe),e(Fhe,qJo),e(nc,NJo),e(nc,sO),e(sO,jJo),e(nc,DJo),e(ct,GJo),e(ct,vhe),e(vhe,OJo),e(ct,VJo),g(V6,ct,null),e(_r,XJo),e(_r,to),g(X6,to,null),e(to,zJo),e(to,The),e(The,QJo),e(to,WJo),e(to,gn),e(gn,HJo),e(gn,Mhe),e(Mhe,UJo),e(gn,JJo),e(gn,Ehe),e(Ehe,YJo),e(gn,KJo),e(gn,Che),e(Che,ZJo),e(gn,eYo),e(to,oYo),e(to,whe),e(whe,F2),e(F2,Ahe),e(Ahe,rYo),e(F2,tYo),e(F2,lO),e(lO,aYo),e(F2,nYo),e(to,sYo),e(to,v2),e(v2,lYo),e(v2,yhe),e(yhe,iYo),e(v2,dYo),e(v2,Lhe),e(Lhe,cYo),e(to,fYo),e(to,xhe),e(xhe,mYo),e(to,gYo),g(z6,to,null),b(c,LBe,u),b(c,sc,u),e(sc,T2),e(T2,khe),g(Q6,khe,null),e(sc,hYo),e(sc,She),e(She,pYo),b(c,xBe,u),b(c,ur,u),g(W6,ur,null),e(ur,_Yo),e(ur,lc),e(lc,uYo),e(lc,iO),e(iO,bYo),e(lc,FYo),e(lc,dO),e(dO,vYo),e(lc,TYo),e(ur,MYo),e(ur,H6),e(H6,EYo),e(H6,Rhe),e(Rhe,CYo),e(H6,wYo),e(ur,AYo),e(ur,ft),g(U6,ft,null),e(ft,yYo),e(ft,Bhe),e(Bhe,LYo),e(ft,xYo),e(ft,ic),e(ic,kYo),e(ic,Phe),e(Phe,SYo),e(ic,RYo),e(ic,cO),e(cO,BYo),e(ic,PYo),e(ft,$Yo),e(ft,$he),e($he,IYo),e(ft,qYo),g(J6,ft,null),e(ur,NYo),e(ur,ao),g(Y6,ao,null),e(ao,jYo),e(ao,Ihe),e(Ihe,DYo),e(ao,GYo),e(ao,hn),e(hn,OYo),e(hn,qhe),e(qhe,VYo),e(hn,XYo),e(hn,Nhe),e(Nhe,zYo),e(hn,QYo),e(hn,jhe),e(jhe,WYo),e(hn,HYo),e(ao,UYo),e(ao,dc),e(dc,M2),e(M2,Dhe),e(Dhe,JYo),e(M2,YYo),e(M2,fO),e(fO,KYo),e(M2,ZYo),e(dc,eKo),e(dc,E2),e(E2,Ghe),e(Ghe,oKo),e(E2,rKo),e(E2,mO),e(mO,tKo),e(E2,aKo),e(dc,nKo),e(dc,C2),e(C2,Ohe),e(Ohe,sKo),e(C2,lKo),e(C2,gO),e(gO,iKo),e(C2,dKo),e(ao,cKo),e(ao,w2),e(w2,fKo),e(w2,Vhe),e(Vhe,mKo),e(w2,gKo),e(w2,Xhe),e(Xhe,hKo),e(ao,pKo),e(ao,zhe),e(zhe,_Ko),e(ao,uKo),g(K6,ao,null),b(c,kBe,u),b(c,cc,u),e(cc,A2),e(A2,Qhe),g(Z6,Qhe,null),e(cc,bKo),e(cc,Whe),e(Whe,FKo),b(c,SBe,u),b(c,br,u),g(e0,br,null),e(br,vKo),e(br,fc),e(fc,TKo),e(fc,hO),e(hO,MKo),e(fc,EKo),e(fc,pO),e(pO,CKo),e(fc,wKo),e(br,AKo),e(br,o0),e(o0,yKo),e(o0,Hhe),e(Hhe,LKo),e(o0,xKo),e(br,kKo),e(br,mt),g(r0,mt,null),e(mt,SKo),e(mt,Uhe),e(Uhe,RKo),e(mt,BKo),e(mt,mc),e(mc,PKo),e(mc,Jhe),e(Jhe,$Ko),e(mc,IKo),e(mc,_O),e(_O,qKo),e(mc,NKo),e(mt,jKo),e(mt,Yhe),e(Yhe,DKo),e(mt,GKo),g(t0,mt,null),e(br,OKo),e(br,no),g(a0,no,null),e(no,VKo),e(no,Khe),e(Khe,XKo),e(no,zKo),e(no,pn),e(pn,QKo),e(pn,Zhe),e(Zhe,WKo),e(pn,HKo),e(pn,epe),e(epe,UKo),e(pn,JKo),e(pn,ope),e(ope,YKo),e(pn,KKo),e(no,ZKo),e(no,rpe),e(rpe,y2),e(y2,tpe),e(tpe,eZo),e(y2,oZo),e(y2,uO),e(uO,rZo),e(y2,tZo),e(no,aZo),e(no,L2),e(L2,nZo),e(L2,ape),e(ape,sZo),e(L2,lZo),e(L2,npe),e(npe,iZo),e(no,dZo),e(no,spe),e(spe,cZo),e(no,fZo),g(n0,no,null),b(c,RBe,u),b(c,gc,u),e(gc,x2),e(x2,lpe),g(s0,lpe,null),e(gc,mZo),e(gc,ipe),e(ipe,gZo),b(c,BBe,u),b(c,Fr,u),g(l0,Fr,null),e(Fr,hZo),e(Fr,hc),e(hc,pZo),e(hc,bO),e(bO,_Zo),e(hc,uZo),e(hc,FO),e(FO,bZo),e(hc,FZo),e(Fr,vZo),e(Fr,i0),e(i0,TZo),e(i0,dpe),e(dpe,MZo),e(i0,EZo),e(Fr,CZo),e(Fr,gt),g(d0,gt,null),e(gt,wZo),e(gt,cpe),e(cpe,AZo),e(gt,yZo),e(gt,pc),e(pc,LZo),e(pc,fpe),e(fpe,xZo),e(pc,kZo),e(pc,vO),e(vO,SZo),e(pc,RZo),e(gt,BZo),e(gt,mpe),e(mpe,PZo),e(gt,$Zo),g(c0,gt,null),e(Fr,IZo),e(Fr,ho),g(f0,ho,null),e(ho,qZo),e(ho,gpe),e(gpe,NZo),e(ho,jZo),e(ho,_n),e(_n,DZo),e(_n,hpe),e(hpe,GZo),e(_n,OZo),e(_n,ppe),e(ppe,VZo),e(_n,XZo),e(_n,_pe),e(_pe,zZo),e(_n,QZo),e(ho,WZo),e(ho,x),e(x,k2),e(k2,upe),e(upe,HZo),e(k2,UZo),e(k2,TO),e(TO,JZo),e(k2,YZo),e(x,KZo),e(x,S2),e(S2,bpe),e(bpe,ZZo),e(S2,eer),e(S2,MO),e(MO,oer),e(S2,rer),e(x,ter),e(x,R2),e(R2,Fpe),e(Fpe,aer),e(R2,ner),e(R2,EO),e(EO,ser),e(R2,ler),e(x,ier),e(x,B2),e(B2,vpe),e(vpe,der),e(B2,cer),e(B2,CO),e(CO,fer),e(B2,mer),e(x,ger),e(x,P2),e(P2,Tpe),e(Tpe,her),e(P2,per),e(P2,wO),e(wO,_er),e(P2,uer),e(x,ber),e(x,$2),e($2,Mpe),e(Mpe,Fer),e($2,ver),e($2,AO),e(AO,Ter),e($2,Mer),e(x,Eer),e(x,I2),e(I2,Epe),e(Epe,Cer),e(I2,wer),e(I2,yO),e(yO,Aer),e(I2,yer),e(x,Ler),e(x,q2),e(q2,Cpe),e(Cpe,xer),e(q2,ker),e(q2,LO),e(LO,Ser),e(q2,Rer),e(x,Ber),e(x,N2),e(N2,wpe),e(wpe,Per),e(N2,$er),e(N2,xO),e(xO,Ier),e(N2,qer),e(x,Ner),e(x,j2),e(j2,Ape),e(Ape,jer),e(j2,Der),e(j2,kO),e(kO,Ger),e(j2,Oer),e(x,Ver),e(x,D2),e(D2,ype),e(ype,Xer),e(D2,zer),e(D2,SO),e(SO,Qer),e(D2,Wer),e(x,Her),e(x,G2),e(G2,Lpe),e(Lpe,Uer),e(G2,Jer),e(G2,RO),e(RO,Yer),e(G2,Ker),e(x,Zer),e(x,O2),e(O2,xpe),e(xpe,eor),e(O2,oor),e(O2,BO),e(BO,ror),e(O2,tor),e(x,aor),e(x,V2),e(V2,kpe),e(kpe,nor),e(V2,sor),e(V2,PO),e(PO,lor),e(V2,ior),e(x,dor),e(x,X2),e(X2,Spe),e(Spe,cor),e(X2,mor),e(X2,$O),e($O,gor),e(X2,hor),e(x,por),e(x,z2),e(z2,Rpe),e(Rpe,_or),e(z2,uor),e(z2,IO),e(IO,bor),e(z2,For),e(x,vor),e(x,Gs),e(Gs,Bpe),e(Bpe,Tor),e(Gs,Mor),e(Gs,qO),e(qO,Eor),e(Gs,Cor),e(Gs,NO),e(NO,wor),e(Gs,Aor),e(x,yor),e(x,Q2),e(Q2,Ppe),e(Ppe,Lor),e(Q2,xor),e(Q2,jO),e(jO,kor),e(Q2,Sor),e(x,Ror),e(x,W2),e(W2,$pe),e($pe,Bor),e(W2,Por),e(W2,DO),e(DO,$or),e(W2,Ior),e(x,qor),e(x,H2),e(H2,Ipe),e(Ipe,Nor),e(H2,jor),e(H2,GO),e(GO,Dor),e(H2,Gor),e(x,Oor),e(x,U2),e(U2,qpe),e(qpe,Vor),e(U2,Xor),e(U2,OO),e(OO,zor),e(U2,Qor),e(x,Wor),e(x,J2),e(J2,Npe),e(Npe,Hor),e(J2,Uor),e(J2,VO),e(VO,Jor),e(J2,Yor),e(x,Kor),e(x,Y2),e(Y2,jpe),e(jpe,Zor),e(Y2,err),e(Y2,XO),e(XO,orr),e(Y2,rrr),e(x,trr),e(x,K2),e(K2,Dpe),e(Dpe,arr),e(K2,nrr),e(K2,zO),e(zO,srr),e(K2,lrr),e(x,irr),e(x,Z2),e(Z2,Gpe),e(Gpe,drr),e(Z2,crr),e(Z2,QO),e(QO,frr),e(Z2,mrr),e(x,grr),e(x,eF),e(eF,Ope),e(Ope,hrr),e(eF,prr),e(eF,WO),e(WO,_rr),e(eF,urr),e(x,brr),e(x,oF),e(oF,Vpe),e(Vpe,Frr),e(oF,vrr),e(oF,HO),e(HO,Trr),e(oF,Mrr),e(x,Err),e(x,rF),e(rF,Xpe),e(Xpe,Crr),e(rF,wrr),e(rF,UO),e(UO,Arr),e(rF,yrr),e(x,Lrr),e(x,tF),e(tF,zpe),e(zpe,xrr),e(tF,krr),e(tF,JO),e(JO,Srr),e(tF,Rrr),e(x,Brr),e(x,aF),e(aF,Qpe),e(Qpe,Prr),e(aF,$rr),e(aF,YO),e(YO,Irr),e(aF,qrr),e(x,Nrr),e(x,nF),e(nF,Wpe),e(Wpe,jrr),e(nF,Drr),e(nF,KO),e(KO,Grr),e(nF,Orr),e(x,Vrr),e(x,sF),e(sF,Hpe),e(Hpe,Xrr),e(sF,zrr),e(sF,ZO),e(ZO,Qrr),e(sF,Wrr),e(x,Hrr),e(x,lF),e(lF,Upe),e(Upe,Urr),e(lF,Jrr),e(lF,eV),e(eV,Yrr),e(lF,Krr),e(x,Zrr),e(x,iF),e(iF,Jpe),e(Jpe,etr),e(iF,otr),e(iF,oV),e(oV,rtr),e(iF,ttr),e(x,atr),e(x,dF),e(dF,Ype),e(Ype,ntr),e(dF,str),e(dF,rV),e(rV,ltr),e(dF,itr),e(x,dtr),e(x,cF),e(cF,Kpe),e(Kpe,ctr),e(cF,ftr),e(cF,tV),e(tV,mtr),e(cF,gtr),e(x,htr),e(x,fF),e(fF,Zpe),e(Zpe,ptr),e(fF,_tr),e(fF,aV),e(aV,utr),e(fF,btr),e(x,Ftr),e(x,mF),e(mF,e_e),e(e_e,vtr),e(mF,Ttr),e(mF,nV),e(nV,Mtr),e(mF,Etr),e(x,Ctr),e(x,gF),e(gF,o_e),e(o_e,wtr),e(gF,Atr),e(gF,sV),e(sV,ytr),e(gF,Ltr),e(x,xtr),e(x,hF),e(hF,r_e),e(r_e,ktr),e(hF,Str),e(hF,lV),e(lV,Rtr),e(hF,Btr),e(x,Ptr),e(x,pF),e(pF,t_e),e(t_e,$tr),e(pF,Itr),e(pF,iV),e(iV,qtr),e(pF,Ntr),e(x,jtr),e(x,_F),e(_F,a_e),e(a_e,Dtr),e(_F,Gtr),e(_F,dV),e(dV,Otr),e(_F,Vtr),e(x,Xtr),e(x,uF),e(uF,n_e),e(n_e,ztr),e(uF,Qtr),e(uF,cV),e(cV,Wtr),e(uF,Htr),e(x,Utr),e(x,bF),e(bF,s_e),e(s_e,Jtr),e(bF,Ytr),e(bF,fV),e(fV,Ktr),e(bF,Ztr),e(ho,ear),e(ho,l_e),e(l_e,oar),e(ho,rar),g(m0,ho,null),b(c,PBe,u),b(c,_c,u),e(_c,FF),e(FF,i_e),g(g0,i_e,null),e(_c,tar),e(_c,d_e),e(d_e,aar),b(c,$Be,u),b(c,vr,u),g(h0,vr,null),e(vr,nar),e(vr,uc),e(uc,sar),e(uc,mV),e(mV,lar),e(uc,iar),e(uc,gV),e(gV,dar),e(uc,car),e(vr,far),e(vr,p0),e(p0,mar),e(p0,c_e),e(c_e,gar),e(p0,har),e(vr,par),e(vr,ht),g(_0,ht,null),e(ht,_ar),e(ht,f_e),e(f_e,uar),e(ht,bar),e(ht,bc),e(bc,Far),e(bc,m_e),e(m_e,Tar),e(bc,Mar),e(bc,hV),e(hV,Ear),e(bc,Car),e(ht,war),e(ht,g_e),e(g_e,Aar),e(ht,yar),g(u0,ht,null),e(vr,Lar),e(vr,po),g(b0,po,null),e(po,xar),e(po,h_e),e(h_e,kar),e(po,Sar),e(po,un),e(un,Rar),e(un,p_e),e(p_e,Bar),e(un,Par),e(un,__e),e(__e,$ar),e(un,Iar),e(un,u_e),e(u_e,qar),e(un,Nar),e(po,jar),e(po,H),e(H,vF),e(vF,b_e),e(b_e,Dar),e(vF,Gar),e(vF,pV),e(pV,Oar),e(vF,Var),e(H,Xar),e(H,TF),e(TF,F_e),e(F_e,zar),e(TF,Qar),e(TF,_V),e(_V,War),e(TF,Har),e(H,Uar),e(H,MF),e(MF,v_e),e(v_e,Jar),e(MF,Yar),e(MF,uV),e(uV,Kar),e(MF,Zar),e(H,enr),e(H,EF),e(EF,T_e),e(T_e,onr),e(EF,rnr),e(EF,bV),e(bV,tnr),e(EF,anr),e(H,nnr),e(H,CF),e(CF,M_e),e(M_e,snr),e(CF,lnr),e(CF,FV),e(FV,inr),e(CF,dnr),e(H,cnr),e(H,wF),e(wF,E_e),e(E_e,fnr),e(wF,mnr),e(wF,vV),e(vV,gnr),e(wF,hnr),e(H,pnr),e(H,AF),e(AF,C_e),e(C_e,_nr),e(AF,unr),e(AF,TV),e(TV,bnr),e(AF,Fnr),e(H,vnr),e(H,yF),e(yF,w_e),e(w_e,Tnr),e(yF,Mnr),e(yF,MV),e(MV,Enr),e(yF,Cnr),e(H,wnr),e(H,LF),e(LF,A_e),e(A_e,Anr),e(LF,ynr),e(LF,EV),e(EV,Lnr),e(LF,xnr),e(H,knr),e(H,xF),e(xF,y_e),e(y_e,Snr),e(xF,Rnr),e(xF,CV),e(CV,Bnr),e(xF,Pnr),e(H,$nr),e(H,kF),e(kF,L_e),e(L_e,Inr),e(kF,qnr),e(kF,wV),e(wV,Nnr),e(kF,jnr),e(H,Dnr),e(H,SF),e(SF,x_e),e(x_e,Gnr),e(SF,Onr),e(SF,AV),e(AV,Vnr),e(SF,Xnr),e(H,znr),e(H,RF),e(RF,k_e),e(k_e,Qnr),e(RF,Wnr),e(RF,yV),e(yV,Hnr),e(RF,Unr),e(H,Jnr),e(H,BF),e(BF,S_e),e(S_e,Ynr),e(BF,Knr),e(BF,LV),e(LV,Znr),e(BF,esr),e(H,osr),e(H,PF),e(PF,R_e),e(R_e,rsr),e(PF,tsr),e(PF,xV),e(xV,asr),e(PF,nsr),e(H,ssr),e(H,$F),e($F,B_e),e(B_e,lsr),e($F,isr),e($F,kV),e(kV,dsr),e($F,csr),e(H,fsr),e(H,IF),e(IF,P_e),e(P_e,msr),e(IF,gsr),e(IF,SV),e(SV,hsr),e(IF,psr),e(H,_sr),e(H,qF),e(qF,$_e),e($_e,usr),e(qF,bsr),e(qF,RV),e(RV,Fsr),e(qF,vsr),e(H,Tsr),e(H,NF),e(NF,I_e),e(I_e,Msr),e(NF,Esr),e(NF,BV),e(BV,Csr),e(NF,wsr),e(H,Asr),e(H,jF),e(jF,q_e),e(q_e,ysr),e(jF,Lsr),e(jF,PV),e(PV,xsr),e(jF,ksr),e(H,Ssr),e(H,DF),e(DF,N_e),e(N_e,Rsr),e(DF,Bsr),e(DF,$V),e($V,Psr),e(DF,$sr),e(H,Isr),e(H,GF),e(GF,j_e),e(j_e,qsr),e(GF,Nsr),e(GF,IV),e(IV,jsr),e(GF,Dsr),e(H,Gsr),e(H,OF),e(OF,D_e),e(D_e,Osr),e(OF,Vsr),e(OF,qV),e(qV,Xsr),e(OF,zsr),e(po,Qsr),e(po,G_e),e(G_e,Wsr),e(po,Hsr),g(F0,po,null),b(c,IBe,u),b(c,Fc,u),e(Fc,VF),e(VF,O_e),g(v0,O_e,null),e(Fc,Usr),e(Fc,V_e),e(V_e,Jsr),b(c,qBe,u),b(c,Tr,u),g(T0,Tr,null),e(Tr,Ysr),e(Tr,vc),e(vc,Ksr),e(vc,NV),e(NV,Zsr),e(vc,elr),e(vc,jV),e(jV,olr),e(vc,rlr),e(Tr,tlr),e(Tr,M0),e(M0,alr),e(M0,X_e),e(X_e,nlr),e(M0,slr),e(Tr,llr),e(Tr,pt),g(E0,pt,null),e(pt,ilr),e(pt,z_e),e(z_e,dlr),e(pt,clr),e(pt,Tc),e(Tc,flr),e(Tc,Q_e),e(Q_e,mlr),e(Tc,glr),e(Tc,DV),e(DV,hlr),e(Tc,plr),e(pt,_lr),e(pt,W_e),e(W_e,ulr),e(pt,blr),g(C0,pt,null),e(Tr,Flr),e(Tr,_o),g(w0,_o,null),e(_o,vlr),e(_o,H_e),e(H_e,Tlr),e(_o,Mlr),e(_o,bn),e(bn,Elr),e(bn,U_e),e(U_e,Clr),e(bn,wlr),e(bn,J_e),e(J_e,Alr),e(bn,ylr),e(bn,Y_e),e(Y_e,Llr),e(bn,xlr),e(_o,klr),e(_o,fe),e(fe,XF),e(XF,K_e),e(K_e,Slr),e(XF,Rlr),e(XF,GV),e(GV,Blr),e(XF,Plr),e(fe,$lr),e(fe,zF),e(zF,Z_e),e(Z_e,Ilr),e(zF,qlr),e(zF,OV),e(OV,Nlr),e(zF,jlr),e(fe,Dlr),e(fe,QF),e(QF,eue),e(eue,Glr),e(QF,Olr),e(QF,VV),e(VV,Vlr),e(QF,Xlr),e(fe,zlr),e(fe,WF),e(WF,oue),e(oue,Qlr),e(WF,Wlr),e(WF,XV),e(XV,Hlr),e(WF,Ulr),e(fe,Jlr),e(fe,HF),e(HF,rue),e(rue,Ylr),e(HF,Klr),e(HF,zV),e(zV,Zlr),e(HF,eir),e(fe,oir),e(fe,UF),e(UF,tue),e(tue,rir),e(UF,tir),e(UF,QV),e(QV,air),e(UF,nir),e(fe,sir),e(fe,JF),e(JF,aue),e(aue,lir),e(JF,iir),e(JF,WV),e(WV,dir),e(JF,cir),e(fe,fir),e(fe,YF),e(YF,nue),e(nue,mir),e(YF,gir),e(YF,HV),e(HV,hir),e(YF,pir),e(fe,_ir),e(fe,KF),e(KF,sue),e(sue,uir),e(KF,bir),e(KF,UV),e(UV,Fir),e(KF,vir),e(fe,Tir),e(fe,ZF),e(ZF,lue),e(lue,Mir),e(ZF,Eir),e(ZF,JV),e(JV,Cir),e(ZF,wir),e(fe,Air),e(fe,ev),e(ev,iue),e(iue,yir),e(ev,Lir),e(ev,YV),e(YV,xir),e(ev,kir),e(fe,Sir),e(fe,ov),e(ov,due),e(due,Rir),e(ov,Bir),e(ov,KV),e(KV,Pir),e(ov,$ir),e(_o,Iir),e(_o,cue),e(cue,qir),e(_o,Nir),g(A0,_o,null),b(c,NBe,u),b(c,Mc,u),e(Mc,rv),e(rv,fue),g(y0,fue,null),e(Mc,jir),e(Mc,mue),e(mue,Dir),b(c,jBe,u),b(c,Mr,u),g(L0,Mr,null),e(Mr,Gir),e(Mr,Ec),e(Ec,Oir),e(Ec,ZV),e(ZV,Vir),e(Ec,Xir),e(Ec,eX),e(eX,zir),e(Ec,Qir),e(Mr,Wir),e(Mr,x0),e(x0,Hir),e(x0,gue),e(gue,Uir),e(x0,Jir),e(Mr,Yir),e(Mr,_t),g(k0,_t,null),e(_t,Kir),e(_t,hue),e(hue,Zir),e(_t,edr),e(_t,Cc),e(Cc,odr),e(Cc,pue),e(pue,rdr),e(Cc,tdr),e(Cc,oX),e(oX,adr),e(Cc,ndr),e(_t,sdr),e(_t,_ue),e(_ue,ldr),e(_t,idr),g(S0,_t,null),e(Mr,ddr),e(Mr,uo),g(R0,uo,null),e(uo,cdr),e(uo,uue),e(uue,fdr),e(uo,mdr),e(uo,Fn),e(Fn,gdr),e(Fn,bue),e(bue,hdr),e(Fn,pdr),e(Fn,Fue),e(Fue,_dr),e(Fn,udr),e(Fn,vue),e(vue,bdr),e(Fn,Fdr),e(uo,vdr),e(uo,B0),e(B0,tv),e(tv,Tue),e(Tue,Tdr),e(tv,Mdr),e(tv,rX),e(rX,Edr),e(tv,Cdr),e(B0,wdr),e(B0,av),e(av,Mue),e(Mue,Adr),e(av,ydr),e(av,tX),e(tX,Ldr),e(av,xdr),e(uo,kdr),e(uo,Eue),e(Eue,Sdr),e(uo,Rdr),g(P0,uo,null),b(c,DBe,u),b(c,wc,u),e(wc,nv),e(nv,Cue),g($0,Cue,null),e(wc,Bdr),e(wc,wue),e(wue,Pdr),b(c,GBe,u),b(c,Er,u),g(I0,Er,null),e(Er,$dr),e(Er,Ac),e(Ac,Idr),e(Ac,aX),e(aX,qdr),e(Ac,Ndr),e(Ac,nX),e(nX,jdr),e(Ac,Ddr),e(Er,Gdr),e(Er,q0),e(q0,Odr),e(q0,Aue),e(Aue,Vdr),e(q0,Xdr),e(Er,zdr),e(Er,ut),g(N0,ut,null),e(ut,Qdr),e(ut,yue),e(yue,Wdr),e(ut,Hdr),e(ut,yc),e(yc,Udr),e(yc,Lue),e(Lue,Jdr),e(yc,Ydr),e(yc,sX),e(sX,Kdr),e(yc,Zdr),e(ut,ecr),e(ut,xue),e(xue,ocr),e(ut,rcr),g(j0,ut,null),e(Er,tcr),e(Er,bo),g(D0,bo,null),e(bo,acr),e(bo,kue),e(kue,ncr),e(bo,scr),e(bo,vn),e(vn,lcr),e(vn,Sue),e(Sue,icr),e(vn,dcr),e(vn,Rue),e(Rue,ccr),e(vn,fcr),e(vn,Bue),e(Bue,mcr),e(vn,gcr),e(bo,hcr),e(bo,J),e(J,sv),e(sv,Pue),e(Pue,pcr),e(sv,_cr),e(sv,lX),e(lX,ucr),e(sv,bcr),e(J,Fcr),e(J,lv),e(lv,$ue),e($ue,vcr),e(lv,Tcr),e(lv,iX),e(iX,Mcr),e(lv,Ecr),e(J,Ccr),e(J,iv),e(iv,Iue),e(Iue,wcr),e(iv,Acr),e(iv,dX),e(dX,ycr),e(iv,Lcr),e(J,xcr),e(J,dv),e(dv,que),e(que,kcr),e(dv,Scr),e(dv,cX),e(cX,Rcr),e(dv,Bcr),e(J,Pcr),e(J,cv),e(cv,Nue),e(Nue,$cr),e(cv,Icr),e(cv,fX),e(fX,qcr),e(cv,Ncr),e(J,jcr),e(J,fv),e(fv,jue),e(jue,Dcr),e(fv,Gcr),e(fv,mX),e(mX,Ocr),e(fv,Vcr),e(J,Xcr),e(J,mv),e(mv,Due),e(Due,zcr),e(mv,Qcr),e(mv,gX),e(gX,Wcr),e(mv,Hcr),e(J,Ucr),e(J,gv),e(gv,Gue),e(Gue,Jcr),e(gv,Ycr),e(gv,hX),e(hX,Kcr),e(gv,Zcr),e(J,efr),e(J,hv),e(hv,Oue),e(Oue,ofr),e(hv,rfr),e(hv,pX),e(pX,tfr),e(hv,afr),e(J,nfr),e(J,pv),e(pv,Vue),e(Vue,sfr),e(pv,lfr),e(pv,_X),e(_X,ifr),e(pv,dfr),e(J,cfr),e(J,_v),e(_v,Xue),e(Xue,ffr),e(_v,mfr),e(_v,uX),e(uX,gfr),e(_v,hfr),e(J,pfr),e(J,uv),e(uv,zue),e(zue,_fr),e(uv,ufr),e(uv,bX),e(bX,bfr),e(uv,Ffr),e(J,vfr),e(J,bv),e(bv,Que),e(Que,Tfr),e(bv,Mfr),e(bv,FX),e(FX,Efr),e(bv,Cfr),e(J,wfr),e(J,Fv),e(Fv,Wue),e(Wue,Afr),e(Fv,yfr),e(Fv,vX),e(vX,Lfr),e(Fv,xfr),e(J,kfr),e(J,vv),e(vv,Hue),e(Hue,Sfr),e(vv,Rfr),e(vv,TX),e(TX,Bfr),e(vv,Pfr),e(J,$fr),e(J,Tv),e(Tv,Uue),e(Uue,Ifr),e(Tv,qfr),e(Tv,MX),e(MX,Nfr),e(Tv,jfr),e(J,Dfr),e(J,Mv),e(Mv,Jue),e(Jue,Gfr),e(Mv,Ofr),e(Mv,EX),e(EX,Vfr),e(Mv,Xfr),e(J,zfr),e(J,Ev),e(Ev,Yue),e(Yue,Qfr),e(Ev,Wfr),e(Ev,CX),e(CX,Hfr),e(Ev,Ufr),e(J,Jfr),e(J,Cv),e(Cv,Kue),e(Kue,Yfr),e(Cv,Kfr),e(Cv,wX),e(wX,Zfr),e(Cv,emr),e(J,omr),e(J,wv),e(wv,Zue),e(Zue,rmr),e(wv,tmr),e(wv,AX),e(AX,amr),e(wv,nmr),e(bo,smr),e(bo,e1e),e(e1e,lmr),e(bo,imr),g(G0,bo,null),b(c,OBe,u),b(c,Lc,u),e(Lc,Av),e(Av,o1e),g(O0,o1e,null),e(Lc,dmr),e(Lc,r1e),e(r1e,cmr),b(c,VBe,u),b(c,Cr,u),g(V0,Cr,null),e(Cr,fmr),e(Cr,xc),e(xc,mmr),e(xc,yX),e(yX,gmr),e(xc,hmr),e(xc,LX),e(LX,pmr),e(xc,_mr),e(Cr,umr),e(Cr,X0),e(X0,bmr),e(X0,t1e),e(t1e,Fmr),e(X0,vmr),e(Cr,Tmr),e(Cr,bt),g(z0,bt,null),e(bt,Mmr),e(bt,a1e),e(a1e,Emr),e(bt,Cmr),e(bt,kc),e(kc,wmr),e(kc,n1e),e(n1e,Amr),e(kc,ymr),e(kc,xX),e(xX,Lmr),e(kc,xmr),e(bt,kmr),e(bt,s1e),e(s1e,Smr),e(bt,Rmr),g(Q0,bt,null),e(Cr,Bmr),e(Cr,Fo),g(W0,Fo,null),e(Fo,Pmr),e(Fo,l1e),e(l1e,$mr),e(Fo,Imr),e(Fo,Tn),e(Tn,qmr),e(Tn,i1e),e(i1e,Nmr),e(Tn,jmr),e(Tn,d1e),e(d1e,Dmr),e(Tn,Gmr),e(Tn,c1e),e(c1e,Omr),e(Tn,Vmr),e(Fo,Xmr),e(Fo,be),e(be,yv),e(yv,f1e),e(f1e,zmr),e(yv,Qmr),e(yv,kX),e(kX,Wmr),e(yv,Hmr),e(be,Umr),e(be,Lv),e(Lv,m1e),e(m1e,Jmr),e(Lv,Ymr),e(Lv,SX),e(SX,Kmr),e(Lv,Zmr),e(be,egr),e(be,xv),e(xv,g1e),e(g1e,ogr),e(xv,rgr),e(xv,RX),e(RX,tgr),e(xv,agr),e(be,ngr),e(be,kv),e(kv,h1e),e(h1e,sgr),e(kv,lgr),e(kv,BX),e(BX,igr),e(kv,dgr),e(be,cgr),e(be,Sv),e(Sv,p1e),e(p1e,fgr),e(Sv,mgr),e(Sv,PX),e(PX,ggr),e(Sv,hgr),e(be,pgr),e(be,Rv),e(Rv,_1e),e(_1e,_gr),e(Rv,ugr),e(Rv,$X),e($X,bgr),e(Rv,Fgr),e(be,vgr),e(be,Bv),e(Bv,u1e),e(u1e,Tgr),e(Bv,Mgr),e(Bv,IX),e(IX,Egr),e(Bv,Cgr),e(be,wgr),e(be,Pv),e(Pv,b1e),e(b1e,Agr),e(Pv,ygr),e(Pv,qX),e(qX,Lgr),e(Pv,xgr),e(be,kgr),e(be,$v),e($v,F1e),e(F1e,Sgr),e($v,Rgr),e($v,NX),e(NX,Bgr),e($v,Pgr),e(be,$gr),e(be,Iv),e(Iv,v1e),e(v1e,Igr),e(Iv,qgr),e(Iv,jX),e(jX,Ngr),e(Iv,jgr),e(Fo,Dgr),e(Fo,T1e),e(T1e,Ggr),e(Fo,Ogr),g(H0,Fo,null),b(c,XBe,u),b(c,Sc,u),e(Sc,qv),e(qv,M1e),g(U0,M1e,null),e(Sc,Vgr),e(Sc,E1e),e(E1e,Xgr),b(c,zBe,u),b(c,wr,u),g(J0,wr,null),e(wr,zgr),e(wr,Rc),e(Rc,Qgr),e(Rc,DX),e(DX,Wgr),e(Rc,Hgr),e(Rc,GX),e(GX,Ugr),e(Rc,Jgr),e(wr,Ygr),e(wr,Y0),e(Y0,Kgr),e(Y0,C1e),e(C1e,Zgr),e(Y0,ehr),e(wr,ohr),e(wr,Ft),g(K0,Ft,null),e(Ft,rhr),e(Ft,w1e),e(w1e,thr),e(Ft,ahr),e(Ft,Bc),e(Bc,nhr),e(Bc,A1e),e(A1e,shr),e(Bc,lhr),e(Bc,OX),e(OX,ihr),e(Bc,dhr),e(Ft,chr),e(Ft,y1e),e(y1e,fhr),e(Ft,mhr),g(Z0,Ft,null),e(wr,ghr),e(wr,vo),g(ey,vo,null),e(vo,hhr),e(vo,L1e),e(L1e,phr),e(vo,_hr),e(vo,Mn),e(Mn,uhr),e(Mn,x1e),e(x1e,bhr),e(Mn,Fhr),e(Mn,k1e),e(k1e,vhr),e(Mn,Thr),e(Mn,S1e),e(S1e,Mhr),e(Mn,Ehr),e(vo,Chr),e(vo,V),e(V,Nv),e(Nv,R1e),e(R1e,whr),e(Nv,Ahr),e(Nv,VX),e(VX,yhr),e(Nv,Lhr),e(V,xhr),e(V,jv),e(jv,B1e),e(B1e,khr),e(jv,Shr),e(jv,XX),e(XX,Rhr),e(jv,Bhr),e(V,Phr),e(V,Dv),e(Dv,P1e),e(P1e,$hr),e(Dv,Ihr),e(Dv,zX),e(zX,qhr),e(Dv,Nhr),e(V,jhr),e(V,Gv),e(Gv,$1e),e($1e,Dhr),e(Gv,Ghr),e(Gv,QX),e(QX,Ohr),e(Gv,Vhr),e(V,Xhr),e(V,Ov),e(Ov,I1e),e(I1e,zhr),e(Ov,Qhr),e(Ov,WX),e(WX,Whr),e(Ov,Hhr),e(V,Uhr),e(V,Vv),e(Vv,q1e),e(q1e,Jhr),e(Vv,Yhr),e(Vv,HX),e(HX,Khr),e(Vv,Zhr),e(V,epr),e(V,Xv),e(Xv,N1e),e(N1e,opr),e(Xv,rpr),e(Xv,UX),e(UX,tpr),e(Xv,apr),e(V,npr),e(V,zv),e(zv,j1e),e(j1e,spr),e(zv,lpr),e(zv,JX),e(JX,ipr),e(zv,dpr),e(V,cpr),e(V,Qv),e(Qv,D1e),e(D1e,fpr),e(Qv,mpr),e(Qv,YX),e(YX,gpr),e(Qv,hpr),e(V,ppr),e(V,Wv),e(Wv,G1e),e(G1e,_pr),e(Wv,upr),e(Wv,KX),e(KX,bpr),e(Wv,Fpr),e(V,vpr),e(V,Hv),e(Hv,O1e),e(O1e,Tpr),e(Hv,Mpr),e(Hv,ZX),e(ZX,Epr),e(Hv,Cpr),e(V,wpr),e(V,Uv),e(Uv,V1e),e(V1e,Apr),e(Uv,ypr),e(Uv,ez),e(ez,Lpr),e(Uv,xpr),e(V,kpr),e(V,Jv),e(Jv,X1e),e(X1e,Spr),e(Jv,Rpr),e(Jv,oz),e(oz,Bpr),e(Jv,Ppr),e(V,$pr),e(V,Yv),e(Yv,z1e),e(z1e,Ipr),e(Yv,qpr),e(Yv,rz),e(rz,Npr),e(Yv,jpr),e(V,Dpr),e(V,Kv),e(Kv,Q1e),e(Q1e,Gpr),e(Kv,Opr),e(Kv,tz),e(tz,Vpr),e(Kv,Xpr),e(V,zpr),e(V,Zv),e(Zv,W1e),e(W1e,Qpr),e(Zv,Wpr),e(Zv,az),e(az,Hpr),e(Zv,Upr),e(V,Jpr),e(V,eT),e(eT,H1e),e(H1e,Ypr),e(eT,Kpr),e(eT,nz),e(nz,Zpr),e(eT,e_r),e(V,o_r),e(V,oT),e(oT,U1e),e(U1e,r_r),e(oT,t_r),e(oT,sz),e(sz,a_r),e(oT,n_r),e(V,s_r),e(V,rT),e(rT,J1e),e(J1e,l_r),e(rT,i_r),e(rT,lz),e(lz,d_r),e(rT,c_r),e(V,f_r),e(V,tT),e(tT,Y1e),e(Y1e,m_r),e(tT,g_r),e(tT,iz),e(iz,h_r),e(tT,p_r),e(V,__r),e(V,aT),e(aT,K1e),e(K1e,u_r),e(aT,b_r),e(aT,dz),e(dz,F_r),e(aT,v_r),e(V,T_r),e(V,nT),e(nT,Z1e),e(Z1e,M_r),e(nT,E_r),e(nT,cz),e(cz,C_r),e(nT,w_r),e(V,A_r),e(V,sT),e(sT,e7e),e(e7e,y_r),e(sT,L_r),e(sT,fz),e(fz,x_r),e(sT,k_r),e(V,S_r),e(V,lT),e(lT,o7e),e(o7e,R_r),e(lT,B_r),e(lT,mz),e(mz,P_r),e(lT,$_r),e(V,I_r),e(V,iT),e(iT,r7e),e(r7e,q_r),e(iT,N_r),e(iT,gz),e(gz,j_r),e(iT,D_r),e(V,G_r),e(V,dT),e(dT,t7e),e(t7e,O_r),e(dT,V_r),e(dT,hz),e(hz,X_r),e(dT,z_r),e(vo,Q_r),e(vo,a7e),e(a7e,W_r),e(vo,H_r),g(oy,vo,null),b(c,QBe,u),b(c,Pc,u),e(Pc,cT),e(cT,n7e),g(ry,n7e,null),e(Pc,U_r),e(Pc,s7e),e(s7e,J_r),b(c,WBe,u),b(c,Ar,u),g(ty,Ar,null),e(Ar,Y_r),e(Ar,$c),e($c,K_r),e($c,pz),e(pz,Z_r),e($c,eur),e($c,_z),e(_z,our),e($c,rur),e(Ar,tur),e(Ar,ay),e(ay,aur),e(ay,l7e),e(l7e,nur),e(ay,sur),e(Ar,lur),e(Ar,vt),g(ny,vt,null),e(vt,iur),e(vt,i7e),e(i7e,dur),e(vt,cur),e(vt,Ic),e(Ic,fur),e(Ic,d7e),e(d7e,mur),e(Ic,gur),e(Ic,uz),e(uz,hur),e(Ic,pur),e(vt,_ur),e(vt,c7e),e(c7e,uur),e(vt,bur),g(sy,vt,null),e(Ar,Fur),e(Ar,To),g(ly,To,null),e(To,vur),e(To,f7e),e(f7e,Tur),e(To,Mur),e(To,En),e(En,Eur),e(En,m7e),e(m7e,Cur),e(En,wur),e(En,g7e),e(g7e,Aur),e(En,yur),e(En,h7e),e(h7e,Lur),e(En,xur),e(To,kur),e(To,se),e(se,fT),e(fT,p7e),e(p7e,Sur),e(fT,Rur),e(fT,bz),e(bz,Bur),e(fT,Pur),e(se,$ur),e(se,mT),e(mT,_7e),e(_7e,Iur),e(mT,qur),e(mT,Fz),e(Fz,Nur),e(mT,jur),e(se,Dur),e(se,gT),e(gT,u7e),e(u7e,Gur),e(gT,Our),e(gT,vz),e(vz,Vur),e(gT,Xur),e(se,zur),e(se,hT),e(hT,b7e),e(b7e,Qur),e(hT,Wur),e(hT,Tz),e(Tz,Hur),e(hT,Uur),e(se,Jur),e(se,pT),e(pT,F7e),e(F7e,Yur),e(pT,Kur),e(pT,Mz),e(Mz,Zur),e(pT,e1r),e(se,o1r),e(se,_T),e(_T,v7e),e(v7e,r1r),e(_T,t1r),e(_T,Ez),e(Ez,a1r),e(_T,n1r),e(se,s1r),e(se,uT),e(uT,T7e),e(T7e,l1r),e(uT,i1r),e(uT,Cz),e(Cz,d1r),e(uT,c1r),e(se,f1r),e(se,bT),e(bT,M7e),e(M7e,m1r),e(bT,g1r),e(bT,wz),e(wz,h1r),e(bT,p1r),e(se,_1r),e(se,FT),e(FT,E7e),e(E7e,u1r),e(FT,b1r),e(FT,Az),e(Az,F1r),e(FT,v1r),e(se,T1r),e(se,vT),e(vT,C7e),e(C7e,M1r),e(vT,E1r),e(vT,yz),e(yz,C1r),e(vT,w1r),e(se,A1r),e(se,TT),e(TT,w7e),e(w7e,y1r),e(TT,L1r),e(TT,Lz),e(Lz,x1r),e(TT,k1r),e(se,S1r),e(se,MT),e(MT,A7e),e(A7e,R1r),e(MT,B1r),e(MT,xz),e(xz,P1r),e(MT,$1r),e(se,I1r),e(se,ET),e(ET,y7e),e(y7e,q1r),e(ET,N1r),e(ET,kz),e(kz,j1r),e(ET,D1r),e(se,G1r),e(se,CT),e(CT,L7e),e(L7e,O1r),e(CT,V1r),e(CT,Sz),e(Sz,X1r),e(CT,z1r),e(se,Q1r),e(se,wT),e(wT,x7e),e(x7e,W1r),e(wT,H1r),e(wT,Rz),e(Rz,U1r),e(wT,J1r),e(se,Y1r),e(se,AT),e(AT,k7e),e(k7e,K1r),e(AT,Z1r),e(AT,Bz),e(Bz,e7r),e(AT,o7r),e(se,r7r),e(se,yT),e(yT,S7e),e(S7e,t7r),e(yT,a7r),e(yT,Pz),e(Pz,n7r),e(yT,s7r),e(To,l7r),e(To,R7e),e(R7e,i7r),e(To,d7r),g(iy,To,null),b(c,HBe,u),b(c,qc,u),e(qc,LT),e(LT,B7e),g(dy,B7e,null),e(qc,c7r),e(qc,P7e),e(P7e,f7r),b(c,UBe,u),b(c,yr,u),g(cy,yr,null),e(yr,m7r),e(yr,Nc),e(Nc,g7r),e(Nc,$z),e($z,h7r),e(Nc,p7r),e(Nc,Iz),e(Iz,_7r),e(Nc,u7r),e(yr,b7r),e(yr,fy),e(fy,F7r),e(fy,$7e),e($7e,v7r),e(fy,T7r),e(yr,M7r),e(yr,Tt),g(my,Tt,null),e(Tt,E7r),e(Tt,I7e),e(I7e,C7r),e(Tt,w7r),e(Tt,jc),e(jc,A7r),e(jc,q7e),e(q7e,y7r),e(jc,L7r),e(jc,qz),e(qz,x7r),e(jc,k7r),e(Tt,S7r),e(Tt,N7e),e(N7e,R7r),e(Tt,B7r),g(gy,Tt,null),e(yr,P7r),e(yr,Mo),g(hy,Mo,null),e(Mo,$7r),e(Mo,j7e),e(j7e,I7r),e(Mo,q7r),e(Mo,Cn),e(Cn,N7r),e(Cn,D7e),e(D7e,j7r),e(Cn,D7r),e(Cn,G7e),e(G7e,G7r),e(Cn,O7r),e(Cn,O7e),e(O7e,V7r),e(Cn,X7r),e(Mo,z7r),e(Mo,V7e),e(V7e,xT),e(xT,X7e),e(X7e,Q7r),e(xT,W7r),e(xT,Nz),e(Nz,H7r),e(xT,U7r),e(Mo,J7r),e(Mo,z7e),e(z7e,Y7r),e(Mo,K7r),g(py,Mo,null),b(c,JBe,u),b(c,Dc,u),e(Dc,kT),e(kT,Q7e),g(_y,Q7e,null),e(Dc,Z7r),e(Dc,W7e),e(W7e,ebr),b(c,YBe,u),b(c,Lr,u),g(uy,Lr,null),e(Lr,obr),e(Lr,Gc),e(Gc,rbr),e(Gc,jz),e(jz,tbr),e(Gc,abr),e(Gc,Dz),e(Dz,nbr),e(Gc,sbr),e(Lr,lbr),e(Lr,by),e(by,ibr),e(by,H7e),e(H7e,dbr),e(by,cbr),e(Lr,fbr),e(Lr,Mt),g(Fy,Mt,null),e(Mt,mbr),e(Mt,U7e),e(U7e,gbr),e(Mt,hbr),e(Mt,Oc),e(Oc,pbr),e(Oc,J7e),e(J7e,_br),e(Oc,ubr),e(Oc,Gz),e(Gz,bbr),e(Oc,Fbr),e(Mt,vbr),e(Mt,Y7e),e(Y7e,Tbr),e(Mt,Mbr),g(vy,Mt,null),e(Lr,Ebr),e(Lr,Eo),g(Ty,Eo,null),e(Eo,Cbr),e(Eo,K7e),e(K7e,wbr),e(Eo,Abr),e(Eo,wn),e(wn,ybr),e(wn,Z7e),e(Z7e,Lbr),e(wn,xbr),e(wn,ebe),e(ebe,kbr),e(wn,Sbr),e(wn,obe),e(obe,Rbr),e(wn,Bbr),e(Eo,Pbr),e(Eo,Y),e(Y,ST),e(ST,rbe),e(rbe,$br),e(ST,Ibr),e(ST,Oz),e(Oz,qbr),e(ST,Nbr),e(Y,jbr),e(Y,RT),e(RT,tbe),e(tbe,Dbr),e(RT,Gbr),e(RT,Vz),e(Vz,Obr),e(RT,Vbr),e(Y,Xbr),e(Y,BT),e(BT,abe),e(abe,zbr),e(BT,Qbr),e(BT,Xz),e(Xz,Wbr),e(BT,Hbr),e(Y,Ubr),e(Y,PT),e(PT,nbe),e(nbe,Jbr),e(PT,Ybr),e(PT,zz),e(zz,Kbr),e(PT,Zbr),e(Y,e5r),e(Y,$T),e($T,sbe),e(sbe,o5r),e($T,r5r),e($T,Qz),e(Qz,t5r),e($T,a5r),e(Y,n5r),e(Y,IT),e(IT,lbe),e(lbe,s5r),e(IT,l5r),e(IT,Wz),e(Wz,i5r),e(IT,d5r),e(Y,c5r),e(Y,qT),e(qT,ibe),e(ibe,f5r),e(qT,m5r),e(qT,Hz),e(Hz,g5r),e(qT,h5r),e(Y,p5r),e(Y,NT),e(NT,dbe),e(dbe,_5r),e(NT,u5r),e(NT,Uz),e(Uz,b5r),e(NT,F5r),e(Y,v5r),e(Y,jT),e(jT,cbe),e(cbe,T5r),e(jT,M5r),e(jT,Jz),e(Jz,E5r),e(jT,C5r),e(Y,w5r),e(Y,DT),e(DT,fbe),e(fbe,A5r),e(DT,y5r),e(DT,Yz),e(Yz,L5r),e(DT,x5r),e(Y,k5r),e(Y,GT),e(GT,mbe),e(mbe,S5r),e(GT,R5r),e(GT,Kz),e(Kz,B5r),e(GT,P5r),e(Y,$5r),e(Y,OT),e(OT,gbe),e(gbe,I5r),e(OT,q5r),e(OT,Zz),e(Zz,N5r),e(OT,j5r),e(Y,D5r),e(Y,VT),e(VT,hbe),e(hbe,G5r),e(VT,O5r),e(VT,eQ),e(eQ,V5r),e(VT,X5r),e(Y,z5r),e(Y,XT),e(XT,pbe),e(pbe,Q5r),e(XT,W5r),e(XT,oQ),e(oQ,H5r),e(XT,U5r),e(Y,J5r),e(Y,zT),e(zT,_be),e(_be,Y5r),e(zT,K5r),e(zT,rQ),e(rQ,Z5r),e(zT,e3r),e(Y,o3r),e(Y,QT),e(QT,ube),e(ube,r3r),e(QT,t3r),e(QT,tQ),e(tQ,a3r),e(QT,n3r),e(Y,s3r),e(Y,WT),e(WT,bbe),e(bbe,l3r),e(WT,i3r),e(WT,aQ),e(aQ,d3r),e(WT,c3r),e(Y,f3r),e(Y,HT),e(HT,Fbe),e(Fbe,m3r),e(HT,g3r),e(HT,nQ),e(nQ,h3r),e(HT,p3r),e(Y,_3r),e(Y,UT),e(UT,vbe),e(vbe,u3r),e(UT,b3r),e(UT,sQ),e(sQ,F3r),e(UT,v3r),e(Y,T3r),e(Y,JT),e(JT,Tbe),e(Tbe,M3r),e(JT,E3r),e(JT,lQ),e(lQ,C3r),e(JT,w3r),e(Eo,A3r),e(Eo,Mbe),e(Mbe,y3r),e(Eo,L3r),g(My,Eo,null),b(c,KBe,u),b(c,Vc,u),e(Vc,YT),e(YT,Ebe),g(Ey,Ebe,null),e(Vc,x3r),e(Vc,Cbe),e(Cbe,k3r),b(c,ZBe,u),b(c,xr,u),g(Cy,xr,null),e(xr,S3r),e(xr,Xc),e(Xc,R3r),e(Xc,iQ),e(iQ,B3r),e(Xc,P3r),e(Xc,dQ),e(dQ,$3r),e(Xc,I3r),e(xr,q3r),e(xr,wy),e(wy,N3r),e(wy,wbe),e(wbe,j3r),e(wy,D3r),e(xr,G3r),e(xr,Et),g(Ay,Et,null),e(Et,O3r),e(Et,Abe),e(Abe,V3r),e(Et,X3r),e(Et,zc),e(zc,z3r),e(zc,ybe),e(ybe,Q3r),e(zc,W3r),e(zc,cQ),e(cQ,H3r),e(zc,U3r),e(Et,J3r),e(Et,Lbe),e(Lbe,Y3r),e(Et,K3r),g(yy,Et,null),e(xr,Z3r),e(xr,Co),g(Ly,Co,null),e(Co,e2r),e(Co,xbe),e(xbe,o2r),e(Co,r2r),e(Co,An),e(An,t2r),e(An,kbe),e(kbe,a2r),e(An,n2r),e(An,Sbe),e(Sbe,s2r),e(An,l2r),e(An,Rbe),e(Rbe,i2r),e(An,d2r),e(Co,c2r),e(Co,K),e(K,KT),e(KT,Bbe),e(Bbe,f2r),e(KT,m2r),e(KT,fQ),e(fQ,g2r),e(KT,h2r),e(K,p2r),e(K,ZT),e(ZT,Pbe),e(Pbe,_2r),e(ZT,u2r),e(ZT,mQ),e(mQ,b2r),e(ZT,F2r),e(K,v2r),e(K,eM),e(eM,$be),e($be,T2r),e(eM,M2r),e(eM,gQ),e(gQ,E2r),e(eM,C2r),e(K,w2r),e(K,oM),e(oM,Ibe),e(Ibe,A2r),e(oM,y2r),e(oM,hQ),e(hQ,L2r),e(oM,x2r),e(K,k2r),e(K,rM),e(rM,qbe),e(qbe,S2r),e(rM,R2r),e(rM,pQ),e(pQ,B2r),e(rM,P2r),e(K,$2r),e(K,tM),e(tM,Nbe),e(Nbe,I2r),e(tM,q2r),e(tM,_Q),e(_Q,N2r),e(tM,j2r),e(K,D2r),e(K,aM),e(aM,jbe),e(jbe,G2r),e(aM,O2r),e(aM,uQ),e(uQ,V2r),e(aM,X2r),e(K,z2r),e(K,nM),e(nM,Dbe),e(Dbe,Q2r),e(nM,W2r),e(nM,bQ),e(bQ,H2r),e(nM,U2r),e(K,J2r),e(K,sM),e(sM,Gbe),e(Gbe,Y2r),e(sM,K2r),e(sM,FQ),e(FQ,Z2r),e(sM,eFr),e(K,oFr),e(K,lM),e(lM,Obe),e(Obe,rFr),e(lM,tFr),e(lM,vQ),e(vQ,aFr),e(lM,nFr),e(K,sFr),e(K,iM),e(iM,Vbe),e(Vbe,lFr),e(iM,iFr),e(iM,TQ),e(TQ,dFr),e(iM,cFr),e(K,fFr),e(K,dM),e(dM,Xbe),e(Xbe,mFr),e(dM,gFr),e(dM,MQ),e(MQ,hFr),e(dM,pFr),e(K,_Fr),e(K,cM),e(cM,zbe),e(zbe,uFr),e(cM,bFr),e(cM,EQ),e(EQ,FFr),e(cM,vFr),e(K,TFr),e(K,fM),e(fM,Qbe),e(Qbe,MFr),e(fM,EFr),e(fM,CQ),e(CQ,CFr),e(fM,wFr),e(K,AFr),e(K,mM),e(mM,Wbe),e(Wbe,yFr),e(mM,LFr),e(mM,wQ),e(wQ,xFr),e(mM,kFr),e(K,SFr),e(K,gM),e(gM,Hbe),e(Hbe,RFr),e(gM,BFr),e(gM,AQ),e(AQ,PFr),e(gM,$Fr),e(K,IFr),e(K,hM),e(hM,Ube),e(Ube,qFr),e(hM,NFr),e(hM,yQ),e(yQ,jFr),e(hM,DFr),e(K,GFr),e(K,pM),e(pM,Jbe),e(Jbe,OFr),e(pM,VFr),e(pM,LQ),e(LQ,XFr),e(pM,zFr),e(K,QFr),e(K,_M),e(_M,Ybe),e(Ybe,WFr),e(_M,HFr),e(_M,xQ),e(xQ,UFr),e(_M,JFr),e(K,YFr),e(K,uM),e(uM,Kbe),e(Kbe,KFr),e(uM,ZFr),e(uM,kQ),e(kQ,evr),e(uM,ovr),e(Co,rvr),e(Co,Zbe),e(Zbe,tvr),e(Co,avr),g(xy,Co,null),b(c,ePe,u),b(c,Qc,u),e(Qc,bM),e(bM,e5e),g(ky,e5e,null),e(Qc,nvr),e(Qc,o5e),e(o5e,svr),b(c,oPe,u),b(c,kr,u),g(Sy,kr,null),e(kr,lvr),e(kr,Wc),e(Wc,ivr),e(Wc,SQ),e(SQ,dvr),e(Wc,cvr),e(Wc,RQ),e(RQ,fvr),e(Wc,mvr),e(kr,gvr),e(kr,Ry),e(Ry,hvr),e(Ry,r5e),e(r5e,pvr),e(Ry,_vr),e(kr,uvr),e(kr,Ct),g(By,Ct,null),e(Ct,bvr),e(Ct,t5e),e(t5e,Fvr),e(Ct,vvr),e(Ct,Hc),e(Hc,Tvr),e(Hc,a5e),e(a5e,Mvr),e(Hc,Evr),e(Hc,BQ),e(BQ,Cvr),e(Hc,wvr),e(Ct,Avr),e(Ct,n5e),e(n5e,yvr),e(Ct,Lvr),g(Py,Ct,null),e(kr,xvr),e(kr,wo),g($y,wo,null),e(wo,kvr),e(wo,s5e),e(s5e,Svr),e(wo,Rvr),e(wo,yn),e(yn,Bvr),e(yn,l5e),e(l5e,Pvr),e(yn,$vr),e(yn,i5e),e(i5e,Ivr),e(yn,qvr),e(yn,d5e),e(d5e,Nvr),e(yn,jvr),e(wo,Dvr),e(wo,c5e),e(c5e,FM),e(FM,f5e),e(f5e,Gvr),e(FM,Ovr),e(FM,PQ),e(PQ,Vvr),e(FM,Xvr),e(wo,zvr),e(wo,m5e),e(m5e,Qvr),e(wo,Wvr),g(Iy,wo,null),b(c,rPe,u),b(c,Uc,u),e(Uc,vM),e(vM,g5e),g(qy,g5e,null),e(Uc,Hvr),e(Uc,h5e),e(h5e,Uvr),b(c,tPe,u),b(c,Sr,u),g(Ny,Sr,null),e(Sr,Jvr),e(Sr,Jc),e(Jc,Yvr),e(Jc,$Q),e($Q,Kvr),e(Jc,Zvr),e(Jc,IQ),e(IQ,eTr),e(Jc,oTr),e(Sr,rTr),e(Sr,jy),e(jy,tTr),e(jy,p5e),e(p5e,aTr),e(jy,nTr),e(Sr,sTr),e(Sr,wt),g(Dy,wt,null),e(wt,lTr),e(wt,_5e),e(_5e,iTr),e(wt,dTr),e(wt,Yc),e(Yc,cTr),e(Yc,u5e),e(u5e,fTr),e(Yc,mTr),e(Yc,qQ),e(qQ,gTr),e(Yc,hTr),e(wt,pTr),e(wt,b5e),e(b5e,_Tr),e(wt,uTr),g(Gy,wt,null),e(Sr,bTr),e(Sr,Ao),g(Oy,Ao,null),e(Ao,FTr),e(Ao,F5e),e(F5e,vTr),e(Ao,TTr),e(Ao,Ln),e(Ln,MTr),e(Ln,v5e),e(v5e,ETr),e(Ln,CTr),e(Ln,T5e),e(T5e,wTr),e(Ln,ATr),e(Ln,M5e),e(M5e,yTr),e(Ln,LTr),e(Ao,xTr),e(Ao,E5e),e(E5e,TM),e(TM,C5e),e(C5e,kTr),e(TM,STr),e(TM,NQ),e(NQ,RTr),e(TM,BTr),e(Ao,PTr),e(Ao,w5e),e(w5e,$Tr),e(Ao,ITr),g(Vy,Ao,null),b(c,aPe,u),b(c,Kc,u),e(Kc,MM),e(MM,A5e),g(Xy,A5e,null),e(Kc,qTr),e(Kc,y5e),e(y5e,NTr),b(c,nPe,u),b(c,Rr,u),g(zy,Rr,null),e(Rr,jTr),e(Rr,Zc),e(Zc,DTr),e(Zc,jQ),e(jQ,GTr),e(Zc,OTr),e(Zc,DQ),e(DQ,VTr),e(Zc,XTr),e(Rr,zTr),e(Rr,Qy),e(Qy,QTr),e(Qy,L5e),e(L5e,WTr),e(Qy,HTr),e(Rr,UTr),e(Rr,At),g(Wy,At,null),e(At,JTr),e(At,x5e),e(x5e,YTr),e(At,KTr),e(At,ef),e(ef,ZTr),e(ef,k5e),e(k5e,eMr),e(ef,oMr),e(ef,GQ),e(GQ,rMr),e(ef,tMr),e(At,aMr),e(At,S5e),e(S5e,nMr),e(At,sMr),g(Hy,At,null),e(Rr,lMr),e(Rr,yo),g(Uy,yo,null),e(yo,iMr),e(yo,R5e),e(R5e,dMr),e(yo,cMr),e(yo,xn),e(xn,fMr),e(xn,B5e),e(B5e,mMr),e(xn,gMr),e(xn,P5e),e(P5e,hMr),e(xn,pMr),e(xn,$5e),e($5e,_Mr),e(xn,uMr),e(yo,bMr),e(yo,z),e(z,EM),e(EM,I5e),e(I5e,FMr),e(EM,vMr),e(EM,OQ),e(OQ,TMr),e(EM,MMr),e(z,EMr),e(z,CM),e(CM,q5e),e(q5e,CMr),e(CM,wMr),e(CM,VQ),e(VQ,AMr),e(CM,yMr),e(z,LMr),e(z,wM),e(wM,N5e),e(N5e,xMr),e(wM,kMr),e(wM,XQ),e(XQ,SMr),e(wM,RMr),e(z,BMr),e(z,AM),e(AM,j5e),e(j5e,PMr),e(AM,$Mr),e(AM,zQ),e(zQ,IMr),e(AM,qMr),e(z,NMr),e(z,yM),e(yM,D5e),e(D5e,jMr),e(yM,DMr),e(yM,QQ),e(QQ,GMr),e(yM,OMr),e(z,VMr),e(z,LM),e(LM,G5e),e(G5e,XMr),e(LM,zMr),e(LM,WQ),e(WQ,QMr),e(LM,WMr),e(z,HMr),e(z,xM),e(xM,O5e),e(O5e,UMr),e(xM,JMr),e(xM,HQ),e(HQ,YMr),e(xM,KMr),e(z,ZMr),e(z,kM),e(kM,V5e),e(V5e,e4r),e(kM,o4r),e(kM,UQ),e(UQ,r4r),e(kM,t4r),e(z,a4r),e(z,SM),e(SM,X5e),e(X5e,n4r),e(SM,s4r),e(SM,JQ),e(JQ,l4r),e(SM,i4r),e(z,d4r),e(z,RM),e(RM,z5e),e(z5e,c4r),e(RM,f4r),e(RM,YQ),e(YQ,m4r),e(RM,g4r),e(z,h4r),e(z,BM),e(BM,Q5e),e(Q5e,p4r),e(BM,_4r),e(BM,KQ),e(KQ,u4r),e(BM,b4r),e(z,F4r),e(z,PM),e(PM,W5e),e(W5e,v4r),e(PM,T4r),e(PM,ZQ),e(ZQ,M4r),e(PM,E4r),e(z,C4r),e(z,$M),e($M,H5e),e(H5e,w4r),e($M,A4r),e($M,eW),e(eW,y4r),e($M,L4r),e(z,x4r),e(z,IM),e(IM,U5e),e(U5e,k4r),e(IM,S4r),e(IM,oW),e(oW,R4r),e(IM,B4r),e(z,P4r),e(z,qM),e(qM,J5e),e(J5e,$4r),e(qM,I4r),e(qM,rW),e(rW,q4r),e(qM,N4r),e(z,j4r),e(z,NM),e(NM,Y5e),e(Y5e,D4r),e(NM,G4r),e(NM,tW),e(tW,O4r),e(NM,V4r),e(z,X4r),e(z,jM),e(jM,K5e),e(K5e,z4r),e(jM,Q4r),e(jM,aW),e(aW,W4r),e(jM,H4r),e(z,U4r),e(z,DM),e(DM,Z5e),e(Z5e,J4r),e(DM,Y4r),e(DM,nW),e(nW,K4r),e(DM,Z4r),e(z,eEr),e(z,GM),e(GM,e3e),e(e3e,oEr),e(GM,rEr),e(GM,sW),e(sW,tEr),e(GM,aEr),e(z,nEr),e(z,OM),e(OM,o3e),e(o3e,sEr),e(OM,lEr),e(OM,lW),e(lW,iEr),e(OM,dEr),e(z,cEr),e(z,VM),e(VM,r3e),e(r3e,fEr),e(VM,mEr),e(VM,iW),e(iW,gEr),e(VM,hEr),e(z,pEr),e(z,XM),e(XM,t3e),e(t3e,_Er),e(XM,uEr),e(XM,dW),e(dW,bEr),e(XM,FEr),e(z,vEr),e(z,zM),e(zM,a3e),e(a3e,TEr),e(zM,MEr),e(zM,cW),e(cW,EEr),e(zM,CEr),e(z,wEr),e(z,QM),e(QM,n3e),e(n3e,AEr),e(QM,yEr),e(QM,fW),e(fW,LEr),e(QM,xEr),e(z,kEr),e(z,WM),e(WM,s3e),e(s3e,SEr),e(WM,REr),e(WM,mW),e(mW,BEr),e(WM,PEr),e(yo,$Er),e(yo,l3e),e(l3e,IEr),e(yo,qEr),g(Jy,yo,null),b(c,sPe,u),b(c,of,u),e(of,HM),e(HM,i3e),g(Yy,i3e,null),e(of,NEr),e(of,d3e),e(d3e,jEr),b(c,lPe,u),b(c,Br,u),g(Ky,Br,null),e(Br,DEr),e(Br,rf),e(rf,GEr),e(rf,gW),e(gW,OEr),e(rf,VEr),e(rf,hW),e(hW,XEr),e(rf,zEr),e(Br,QEr),e(Br,Zy),e(Zy,WEr),e(Zy,c3e),e(c3e,HEr),e(Zy,UEr),e(Br,JEr),e(Br,yt),g(eL,yt,null),e(yt,YEr),e(yt,f3e),e(f3e,KEr),e(yt,ZEr),e(yt,tf),e(tf,eCr),e(tf,m3e),e(m3e,oCr),e(tf,rCr),e(tf,pW),e(pW,tCr),e(tf,aCr),e(yt,nCr),e(yt,g3e),e(g3e,sCr),e(yt,lCr),g(oL,yt,null),e(Br,iCr),e(Br,Lo),g(rL,Lo,null),e(Lo,dCr),e(Lo,h3e),e(h3e,cCr),e(Lo,fCr),e(Lo,kn),e(kn,mCr),e(kn,p3e),e(p3e,gCr),e(kn,hCr),e(kn,_3e),e(_3e,pCr),e(kn,_Cr),e(kn,u3e),e(u3e,uCr),e(kn,bCr),e(Lo,FCr),e(Lo,ca),e(ca,UM),e(UM,b3e),e(b3e,vCr),e(UM,TCr),e(UM,_W),e(_W,MCr),e(UM,ECr),e(ca,CCr),e(ca,JM),e(JM,F3e),e(F3e,wCr),e(JM,ACr),e(JM,uW),e(uW,yCr),e(JM,LCr),e(ca,xCr),e(ca,YM),e(YM,v3e),e(v3e,kCr),e(YM,SCr),e(YM,bW),e(bW,RCr),e(YM,BCr),e(ca,PCr),e(ca,KM),e(KM,T3e),e(T3e,$Cr),e(KM,ICr),e(KM,FW),e(FW,qCr),e(KM,NCr),e(ca,jCr),e(ca,ZM),e(ZM,M3e),e(M3e,DCr),e(ZM,GCr),e(ZM,vW),e(vW,OCr),e(ZM,VCr),e(Lo,XCr),e(Lo,E3e),e(E3e,zCr),e(Lo,QCr),g(tL,Lo,null),b(c,iPe,u),b(c,af,u),e(af,e4),e(e4,C3e),g(aL,C3e,null),e(af,WCr),e(af,w3e),e(w3e,HCr),b(c,dPe,u),b(c,Pr,u),g(nL,Pr,null),e(Pr,UCr),e(Pr,nf),e(nf,JCr),e(nf,TW),e(TW,YCr),e(nf,KCr),e(nf,MW),e(MW,ZCr),e(nf,ewr),e(Pr,owr),e(Pr,sL),e(sL,rwr),e(sL,A3e),e(A3e,twr),e(sL,awr),e(Pr,nwr),e(Pr,Lt),g(lL,Lt,null),e(Lt,swr),e(Lt,y3e),e(y3e,lwr),e(Lt,iwr),e(Lt,sf),e(sf,dwr),e(sf,L3e),e(L3e,cwr),e(sf,fwr),e(sf,EW),e(EW,mwr),e(sf,gwr),e(Lt,hwr),e(Lt,x3e),e(x3e,pwr),e(Lt,_wr),g(iL,Lt,null),e(Pr,uwr),e(Pr,xo),g(dL,xo,null),e(xo,bwr),e(xo,k3e),e(k3e,Fwr),e(xo,vwr),e(xo,Sn),e(Sn,Twr),e(Sn,S3e),e(S3e,Mwr),e(Sn,Ewr),e(Sn,R3e),e(R3e,Cwr),e(Sn,wwr),e(Sn,B3e),e(B3e,Awr),e(Sn,ywr),e(xo,Lwr),e(xo,me),e(me,o4),e(o4,P3e),e(P3e,xwr),e(o4,kwr),e(o4,CW),e(CW,Swr),e(o4,Rwr),e(me,Bwr),e(me,r4),e(r4,$3e),e($3e,Pwr),e(r4,$wr),e(r4,wW),e(wW,Iwr),e(r4,qwr),e(me,Nwr),e(me,t4),e(t4,I3e),e(I3e,jwr),e(t4,Dwr),e(t4,AW),e(AW,Gwr),e(t4,Owr),e(me,Vwr),e(me,a4),e(a4,q3e),e(q3e,Xwr),e(a4,zwr),e(a4,yW),e(yW,Qwr),e(a4,Wwr),e(me,Hwr),e(me,n4),e(n4,N3e),e(N3e,Uwr),e(n4,Jwr),e(n4,LW),e(LW,Ywr),e(n4,Kwr),e(me,Zwr),e(me,s4),e(s4,j3e),e(j3e,eAr),e(s4,oAr),e(s4,xW),e(xW,rAr),e(s4,tAr),e(me,aAr),e(me,l4),e(l4,D3e),e(D3e,nAr),e(l4,sAr),e(l4,kW),e(kW,lAr),e(l4,iAr),e(me,dAr),e(me,i4),e(i4,G3e),e(G3e,cAr),e(i4,fAr),e(i4,SW),e(SW,mAr),e(i4,gAr),e(me,hAr),e(me,d4),e(d4,O3e),e(O3e,pAr),e(d4,_Ar),e(d4,RW),e(RW,uAr),e(d4,bAr),e(me,FAr),e(me,c4),e(c4,V3e),e(V3e,vAr),e(c4,TAr),e(c4,BW),e(BW,MAr),e(c4,EAr),e(me,CAr),e(me,f4),e(f4,X3e),e(X3e,wAr),e(f4,AAr),e(f4,PW),e(PW,yAr),e(f4,LAr),e(me,xAr),e(me,m4),e(m4,z3e),e(z3e,kAr),e(m4,SAr),e(m4,$W),e($W,RAr),e(m4,BAr),e(xo,PAr),e(xo,Q3e),e(Q3e,$Ar),e(xo,IAr),g(cL,xo,null),b(c,cPe,u),b(c,lf,u),e(lf,g4),e(g4,W3e),g(fL,W3e,null),e(lf,qAr),e(lf,H3e),e(H3e,NAr),b(c,fPe,u),b(c,$r,u),g(mL,$r,null),e($r,jAr),e($r,df),e(df,DAr),e(df,IW),e(IW,GAr),e(df,OAr),e(df,qW),e(qW,VAr),e(df,XAr),e($r,zAr),e($r,gL),e(gL,QAr),e(gL,U3e),e(U3e,WAr),e(gL,HAr),e($r,UAr),e($r,xt),g(hL,xt,null),e(xt,JAr),e(xt,J3e),e(J3e,YAr),e(xt,KAr),e(xt,cf),e(cf,ZAr),e(cf,Y3e),e(Y3e,e6r),e(cf,o6r),e(cf,NW),e(NW,r6r),e(cf,t6r),e(xt,a6r),e(xt,K3e),e(K3e,n6r),e(xt,s6r),g(pL,xt,null),e($r,l6r),e($r,ko),g(_L,ko,null),e(ko,i6r),e(ko,Z3e),e(Z3e,d6r),e(ko,c6r),e(ko,Rn),e(Rn,f6r),e(Rn,e2e),e(e2e,m6r),e(Rn,g6r),e(Rn,o2e),e(o2e,h6r),e(Rn,p6r),e(Rn,r2e),e(r2e,_6r),e(Rn,u6r),e(ko,b6r),e(ko,Fe),e(Fe,h4),e(h4,t2e),e(t2e,F6r),e(h4,v6r),e(h4,jW),e(jW,T6r),e(h4,M6r),e(Fe,E6r),e(Fe,p4),e(p4,a2e),e(a2e,C6r),e(p4,w6r),e(p4,DW),e(DW,A6r),e(p4,y6r),e(Fe,L6r),e(Fe,_4),e(_4,n2e),e(n2e,x6r),e(_4,k6r),e(_4,GW),e(GW,S6r),e(_4,R6r),e(Fe,B6r),e(Fe,u4),e(u4,s2e),e(s2e,P6r),e(u4,$6r),e(u4,OW),e(OW,I6r),e(u4,q6r),e(Fe,N6r),e(Fe,b4),e(b4,l2e),e(l2e,j6r),e(b4,D6r),e(b4,VW),e(VW,G6r),e(b4,O6r),e(Fe,V6r),e(Fe,F4),e(F4,i2e),e(i2e,X6r),e(F4,z6r),e(F4,XW),e(XW,Q6r),e(F4,W6r),e(Fe,H6r),e(Fe,v4),e(v4,d2e),e(d2e,U6r),e(v4,J6r),e(v4,zW),e(zW,Y6r),e(v4,K6r),e(Fe,Z6r),e(Fe,T4),e(T4,c2e),e(c2e,e0r),e(T4,o0r),e(T4,QW),e(QW,r0r),e(T4,t0r),e(Fe,a0r),e(Fe,M4),e(M4,f2e),e(f2e,n0r),e(M4,s0r),e(M4,WW),e(WW,l0r),e(M4,i0r),e(Fe,d0r),e(Fe,E4),e(E4,m2e),e(m2e,c0r),e(E4,f0r),e(E4,HW),e(HW,m0r),e(E4,g0r),e(ko,h0r),e(ko,g2e),e(g2e,p0r),e(ko,_0r),g(uL,ko,null),b(c,mPe,u),b(c,ff,u),e(ff,C4),e(C4,h2e),g(bL,h2e,null),e(ff,u0r),e(ff,p2e),e(p2e,b0r),b(c,gPe,u),b(c,Ir,u),g(FL,Ir,null),e(Ir,F0r),e(Ir,mf),e(mf,v0r),e(mf,UW),e(UW,T0r),e(mf,M0r),e(mf,JW),e(JW,E0r),e(mf,C0r),e(Ir,w0r),e(Ir,vL),e(vL,A0r),e(vL,_2e),e(_2e,y0r),e(vL,L0r),e(Ir,x0r),e(Ir,kt),g(TL,kt,null),e(kt,k0r),e(kt,u2e),e(u2e,S0r),e(kt,R0r),e(kt,gf),e(gf,B0r),e(gf,b2e),e(b2e,P0r),e(gf,$0r),e(gf,YW),e(YW,I0r),e(gf,q0r),e(kt,N0r),e(kt,F2e),e(F2e,j0r),e(kt,D0r),g(ML,kt,null),e(Ir,G0r),e(Ir,So),g(EL,So,null),e(So,O0r),e(So,v2e),e(v2e,V0r),e(So,X0r),e(So,Bn),e(Bn,z0r),e(Bn,T2e),e(T2e,Q0r),e(Bn,W0r),e(Bn,M2e),e(M2e,H0r),e(Bn,U0r),e(Bn,E2e),e(E2e,J0r),e(Bn,Y0r),e(So,K0r),e(So,Ee),e(Ee,w4),e(w4,C2e),e(C2e,Z0r),e(w4,eyr),e(w4,KW),e(KW,oyr),e(w4,ryr),e(Ee,tyr),e(Ee,A4),e(A4,w2e),e(w2e,ayr),e(A4,nyr),e(A4,ZW),e(ZW,syr),e(A4,lyr),e(Ee,iyr),e(Ee,y4),e(y4,A2e),e(A2e,dyr),e(y4,cyr),e(y4,eH),e(eH,fyr),e(y4,myr),e(Ee,gyr),e(Ee,L4),e(L4,y2e),e(y2e,hyr),e(L4,pyr),e(L4,oH),e(oH,_yr),e(L4,uyr),e(Ee,byr),e(Ee,x4),e(x4,L2e),e(L2e,Fyr),e(x4,vyr),e(x4,rH),e(rH,Tyr),e(x4,Myr),e(Ee,Eyr),e(Ee,k4),e(k4,x2e),e(x2e,Cyr),e(k4,wyr),e(k4,tH),e(tH,Ayr),e(k4,yyr),e(Ee,Lyr),e(Ee,S4),e(S4,k2e),e(k2e,xyr),e(S4,kyr),e(S4,aH),e(aH,Syr),e(S4,Ryr),e(Ee,Byr),e(Ee,R4),e(R4,S2e),e(S2e,Pyr),e(R4,$yr),e(R4,nH),e(nH,Iyr),e(R4,qyr),e(Ee,Nyr),e(Ee,B4),e(B4,R2e),e(R2e,jyr),e(B4,Dyr),e(B4,sH),e(sH,Gyr),e(B4,Oyr),e(So,Vyr),e(So,B2e),e(B2e,Xyr),e(So,zyr),g(CL,So,null),b(c,hPe,u),b(c,hf,u),e(hf,P4),e(P4,P2e),g(wL,P2e,null),e(hf,Qyr),e(hf,$2e),e($2e,Wyr),b(c,pPe,u),b(c,qr,u),g(AL,qr,null),e(qr,Hyr),e(qr,pf),e(pf,Uyr),e(pf,lH),e(lH,Jyr),e(pf,Yyr),e(pf,iH),e(iH,Kyr),e(pf,Zyr),e(qr,eLr),e(qr,yL),e(yL,oLr),e(yL,I2e),e(I2e,rLr),e(yL,tLr),e(qr,aLr),e(qr,St),g(LL,St,null),e(St,nLr),e(St,q2e),e(q2e,sLr),e(St,lLr),e(St,_f),e(_f,iLr),e(_f,N2e),e(N2e,dLr),e(_f,cLr),e(_f,dH),e(dH,fLr),e(_f,mLr),e(St,gLr),e(St,j2e),e(j2e,hLr),e(St,pLr),g(xL,St,null),e(qr,_Lr),e(qr,Ro),g(kL,Ro,null),e(Ro,uLr),e(Ro,D2e),e(D2e,bLr),e(Ro,FLr),e(Ro,Pn),e(Pn,vLr),e(Pn,G2e),e(G2e,TLr),e(Pn,MLr),e(Pn,O2e),e(O2e,ELr),e(Pn,CLr),e(Pn,V2e),e(V2e,wLr),e(Pn,ALr),e(Ro,yLr),e(Ro,ve),e(ve,$4),e($4,X2e),e(X2e,LLr),e($4,xLr),e($4,cH),e(cH,kLr),e($4,SLr),e(ve,RLr),e(ve,I4),e(I4,z2e),e(z2e,BLr),e(I4,PLr),e(I4,fH),e(fH,$Lr),e(I4,ILr),e(ve,qLr),e(ve,q4),e(q4,Q2e),e(Q2e,NLr),e(q4,jLr),e(q4,mH),e(mH,DLr),e(q4,GLr),e(ve,OLr),e(ve,N4),e(N4,W2e),e(W2e,VLr),e(N4,XLr),e(N4,gH),e(gH,zLr),e(N4,QLr),e(ve,WLr),e(ve,j4),e(j4,H2e),e(H2e,HLr),e(j4,ULr),e(j4,hH),e(hH,JLr),e(j4,YLr),e(ve,KLr),e(ve,D4),e(D4,U2e),e(U2e,ZLr),e(D4,e8r),e(D4,pH),e(pH,o8r),e(D4,r8r),e(ve,t8r),e(ve,G4),e(G4,J2e),e(J2e,a8r),e(G4,n8r),e(G4,_H),e(_H,s8r),e(G4,l8r),e(ve,i8r),e(ve,O4),e(O4,Y2e),e(Y2e,d8r),e(O4,c8r),e(O4,uH),e(uH,f8r),e(O4,m8r),e(ve,g8r),e(ve,V4),e(V4,K2e),e(K2e,h8r),e(V4,p8r),e(V4,bH),e(bH,_8r),e(V4,u8r),e(ve,b8r),e(ve,X4),e(X4,Z2e),e(Z2e,F8r),e(X4,v8r),e(X4,FH),e(FH,T8r),e(X4,M8r),e(Ro,E8r),e(Ro,eFe),e(eFe,C8r),e(Ro,w8r),g(SL,Ro,null),b(c,_Pe,u),b(c,uf,u),e(uf,z4),e(z4,oFe),g(RL,oFe,null),e(uf,A8r),e(uf,rFe),e(rFe,y8r),b(c,uPe,u),b(c,Nr,u),g(BL,Nr,null),e(Nr,L8r),e(Nr,bf),e(bf,x8r),e(bf,vH),e(vH,k8r),e(bf,S8r),e(bf,TH),e(TH,R8r),e(bf,B8r),e(Nr,P8r),e(Nr,PL),e(PL,$8r),e(PL,tFe),e(tFe,I8r),e(PL,q8r),e(Nr,N8r),e(Nr,Rt),g($L,Rt,null),e(Rt,j8r),e(Rt,aFe),e(aFe,D8r),e(Rt,G8r),e(Rt,Ff),e(Ff,O8r),e(Ff,nFe),e(nFe,V8r),e(Ff,X8r),e(Ff,MH),e(MH,z8r),e(Ff,Q8r),e(Rt,W8r),e(Rt,sFe),e(sFe,H8r),e(Rt,U8r),g(IL,Rt,null),e(Nr,J8r),e(Nr,Bo),g(qL,Bo,null),e(Bo,Y8r),e(Bo,lFe),e(lFe,K8r),e(Bo,Z8r),e(Bo,$n),e($n,e9r),e($n,iFe),e(iFe,o9r),e($n,r9r),e($n,dFe),e(dFe,t9r),e($n,a9r),e($n,cFe),e(cFe,n9r),e($n,s9r),e(Bo,l9r),e(Bo,Te),e(Te,Q4),e(Q4,fFe),e(fFe,i9r),e(Q4,d9r),e(Q4,EH),e(EH,c9r),e(Q4,f9r),e(Te,m9r),e(Te,W4),e(W4,mFe),e(mFe,g9r),e(W4,h9r),e(W4,CH),e(CH,p9r),e(W4,_9r),e(Te,u9r),e(Te,H4),e(H4,gFe),e(gFe,b9r),e(H4,F9r),e(H4,wH),e(wH,v9r),e(H4,T9r),e(Te,M9r),e(Te,U4),e(U4,hFe),e(hFe,E9r),e(U4,C9r),e(U4,AH),e(AH,w9r),e(U4,A9r),e(Te,y9r),e(Te,J4),e(J4,pFe),e(pFe,L9r),e(J4,x9r),e(J4,yH),e(yH,k9r),e(J4,S9r),e(Te,R9r),e(Te,Y4),e(Y4,_Fe),e(_Fe,B9r),e(Y4,P9r),e(Y4,LH),e(LH,$9r),e(Y4,I9r),e(Te,q9r),e(Te,K4),e(K4,uFe),e(uFe,N9r),e(K4,j9r),e(K4,xH),e(xH,D9r),e(K4,G9r),e(Te,O9r),e(Te,Z4),e(Z4,bFe),e(bFe,V9r),e(Z4,X9r),e(Z4,kH),e(kH,z9r),e(Z4,Q9r),e(Te,W9r),e(Te,eE),e(eE,FFe),e(FFe,H9r),e(eE,U9r),e(eE,SH),e(SH,J9r),e(eE,Y9r),e(Te,K9r),e(Te,oE),e(oE,vFe),e(vFe,Z9r),e(oE,exr),e(oE,RH),e(RH,oxr),e(oE,rxr),e(Bo,txr),e(Bo,TFe),e(TFe,axr),e(Bo,nxr),g(NL,Bo,null),b(c,bPe,u),b(c,vf,u),e(vf,rE),e(rE,MFe),g(jL,MFe,null),e(vf,sxr),e(vf,EFe),e(EFe,lxr),b(c,FPe,u),b(c,jr,u),g(DL,jr,null),e(jr,ixr),e(jr,Tf),e(Tf,dxr),e(Tf,BH),e(BH,cxr),e(Tf,fxr),e(Tf,PH),e(PH,mxr),e(Tf,gxr),e(jr,hxr),e(jr,GL),e(GL,pxr),e(GL,CFe),e(CFe,_xr),e(GL,uxr),e(jr,bxr),e(jr,Bt),g(OL,Bt,null),e(Bt,Fxr),e(Bt,wFe),e(wFe,vxr),e(Bt,Txr),e(Bt,Mf),e(Mf,Mxr),e(Mf,AFe),e(AFe,Exr),e(Mf,Cxr),e(Mf,$H),e($H,wxr),e(Mf,Axr),e(Bt,yxr),e(Bt,yFe),e(yFe,Lxr),e(Bt,xxr),g(VL,Bt,null),e(jr,kxr),e(jr,Po),g(XL,Po,null),e(Po,Sxr),e(Po,LFe),e(LFe,Rxr),e(Po,Bxr),e(Po,In),e(In,Pxr),e(In,xFe),e(xFe,$xr),e(In,Ixr),e(In,kFe),e(kFe,qxr),e(In,Nxr),e(In,SFe),e(SFe,jxr),e(In,Dxr),e(Po,Gxr),e(Po,Be),e(Be,tE),e(tE,RFe),e(RFe,Oxr),e(tE,Vxr),e(tE,IH),e(IH,Xxr),e(tE,zxr),e(Be,Qxr),e(Be,aE),e(aE,BFe),e(BFe,Wxr),e(aE,Hxr),e(aE,qH),e(qH,Uxr),e(aE,Jxr),e(Be,Yxr),e(Be,nE),e(nE,PFe),e(PFe,Kxr),e(nE,Zxr),e(nE,NH),e(NH,ekr),e(nE,okr),e(Be,rkr),e(Be,sE),e(sE,$Fe),e($Fe,tkr),e(sE,akr),e(sE,jH),e(jH,nkr),e(sE,skr),e(Be,lkr),e(Be,lE),e(lE,IFe),e(IFe,ikr),e(lE,dkr),e(lE,DH),e(DH,ckr),e(lE,fkr),e(Be,mkr),e(Be,iE),e(iE,qFe),e(qFe,gkr),e(iE,hkr),e(iE,GH),e(GH,pkr),e(iE,_kr),e(Be,ukr),e(Be,dE),e(dE,NFe),e(NFe,bkr),e(dE,Fkr),e(dE,OH),e(OH,vkr),e(dE,Tkr),e(Be,Mkr),e(Be,cE),e(cE,jFe),e(jFe,Ekr),e(cE,Ckr),e(cE,VH),e(VH,wkr),e(cE,Akr),e(Po,ykr),e(Po,DFe),e(DFe,Lkr),e(Po,xkr),g(zL,Po,null),b(c,vPe,u),b(c,Ef,u),e(Ef,fE),e(fE,GFe),g(QL,GFe,null),e(Ef,kkr),e(Ef,OFe),e(OFe,Skr),b(c,TPe,u),b(c,Dr,u),g(WL,Dr,null),e(Dr,Rkr),e(Dr,Cf),e(Cf,Bkr),e(Cf,XH),e(XH,Pkr),e(Cf,$kr),e(Cf,zH),e(zH,Ikr),e(Cf,qkr),e(Dr,Nkr),e(Dr,HL),e(HL,jkr),e(HL,VFe),e(VFe,Dkr),e(HL,Gkr),e(Dr,Okr),e(Dr,Pt),g(UL,Pt,null),e(Pt,Vkr),e(Pt,XFe),e(XFe,Xkr),e(Pt,zkr),e(Pt,wf),e(wf,Qkr),e(wf,zFe),e(zFe,Wkr),e(wf,Hkr),e(wf,QH),e(QH,Ukr),e(wf,Jkr),e(Pt,Ykr),e(Pt,QFe),e(QFe,Kkr),e(Pt,Zkr),g(JL,Pt,null),e(Dr,eSr),e(Dr,$o),g(YL,$o,null),e($o,oSr),e($o,WFe),e(WFe,rSr),e($o,tSr),e($o,qn),e(qn,aSr),e(qn,HFe),e(HFe,nSr),e(qn,sSr),e(qn,UFe),e(UFe,lSr),e(qn,iSr),e(qn,JFe),e(JFe,dSr),e(qn,cSr),e($o,fSr),e($o,Pe),e(Pe,mE),e(mE,YFe),e(YFe,mSr),e(mE,gSr),e(mE,WH),e(WH,hSr),e(mE,pSr),e(Pe,_Sr),e(Pe,gE),e(gE,KFe),e(KFe,uSr),e(gE,bSr),e(gE,HH),e(HH,FSr),e(gE,vSr),e(Pe,TSr),e(Pe,hE),e(hE,ZFe),e(ZFe,MSr),e(hE,ESr),e(hE,UH),e(UH,CSr),e(hE,wSr),e(Pe,ASr),e(Pe,pE),e(pE,eve),e(eve,ySr),e(pE,LSr),e(pE,JH),e(JH,xSr),e(pE,kSr),e(Pe,SSr),e(Pe,_E),e(_E,ove),e(ove,RSr),e(_E,BSr),e(_E,YH),e(YH,PSr),e(_E,$Sr),e(Pe,ISr),e(Pe,uE),e(uE,rve),e(rve,qSr),e(uE,NSr),e(uE,KH),e(KH,jSr),e(uE,DSr),e(Pe,GSr),e(Pe,bE),e(bE,tve),e(tve,OSr),e(bE,VSr),e(bE,ZH),e(ZH,XSr),e(bE,zSr),e(Pe,QSr),e(Pe,FE),e(FE,ave),e(ave,WSr),e(FE,HSr),e(FE,eU),e(eU,USr),e(FE,JSr),e($o,YSr),e($o,nve),e(nve,KSr),e($o,ZSr),g(KL,$o,null),b(c,MPe,u),b(c,Af,u),e(Af,vE),e(vE,sve),g(ZL,sve,null),e(Af,eRr),e(Af,lve),e(lve,oRr),b(c,EPe,u),b(c,Gr,u),g(e8,Gr,null),e(Gr,rRr),e(Gr,yf),e(yf,tRr),e(yf,oU),e(oU,aRr),e(yf,nRr),e(yf,rU),e(rU,sRr),e(yf,lRr),e(Gr,iRr),e(Gr,o8),e(o8,dRr),e(o8,ive),e(ive,cRr),e(o8,fRr),e(Gr,mRr),e(Gr,$t),g(r8,$t,null),e($t,gRr),e($t,dve),e(dve,hRr),e($t,pRr),e($t,Lf),e(Lf,_Rr),e(Lf,cve),e(cve,uRr),e(Lf,bRr),e(Lf,tU),e(tU,FRr),e(Lf,vRr),e($t,TRr),e($t,fve),e(fve,MRr),e($t,ERr),g(t8,$t,null),e(Gr,CRr),e(Gr,Io),g(a8,Io,null),e(Io,wRr),e(Io,mve),e(mve,ARr),e(Io,yRr),e(Io,Nn),e(Nn,LRr),e(Nn,gve),e(gve,xRr),e(Nn,kRr),e(Nn,hve),e(hve,SRr),e(Nn,RRr),e(Nn,pve),e(pve,BRr),e(Nn,PRr),e(Io,$Rr),e(Io,_ve),e(_ve,TE),e(TE,uve),e(uve,IRr),e(TE,qRr),e(TE,aU),e(aU,NRr),e(TE,jRr),e(Io,DRr),e(Io,bve),e(bve,GRr),e(Io,ORr),g(n8,Io,null),b(c,CPe,u),b(c,xf,u),e(xf,ME),e(ME,Fve),g(s8,Fve,null),e(xf,VRr),e(xf,vve),e(vve,XRr),b(c,wPe,u),b(c,Or,u),g(l8,Or,null),e(Or,zRr),e(Or,kf),e(kf,QRr),e(kf,nU),e(nU,WRr),e(kf,HRr),e(kf,sU),e(sU,URr),e(kf,JRr),e(Or,YRr),e(Or,i8),e(i8,KRr),e(i8,Tve),e(Tve,ZRr),e(i8,eBr),e(Or,oBr),e(Or,It),g(d8,It,null),e(It,rBr),e(It,Mve),e(Mve,tBr),e(It,aBr),e(It,Sf),e(Sf,nBr),e(Sf,Eve),e(Eve,sBr),e(Sf,lBr),e(Sf,lU),e(lU,iBr),e(Sf,dBr),e(It,cBr),e(It,Cve),e(Cve,fBr),e(It,mBr),g(c8,It,null),e(Or,gBr),e(Or,qo),g(f8,qo,null),e(qo,hBr),e(qo,wve),e(wve,pBr),e(qo,_Br),e(qo,jn),e(jn,uBr),e(jn,Ave),e(Ave,bBr),e(jn,FBr),e(jn,yve),e(yve,vBr),e(jn,TBr),e(jn,Lve),e(Lve,MBr),e(jn,EBr),e(qo,CBr),e(qo,m8),e(m8,EE),e(EE,xve),e(xve,wBr),e(EE,ABr),e(EE,iU),e(iU,yBr),e(EE,LBr),e(m8,xBr),e(m8,CE),e(CE,kve),e(kve,kBr),e(CE,SBr),e(CE,dU),e(dU,RBr),e(CE,BBr),e(qo,PBr),e(qo,Sve),e(Sve,$Br),e(qo,IBr),g(g8,qo,null),b(c,APe,u),b(c,Rf,u),e(Rf,wE),e(wE,Rve),g(h8,Rve,null),e(Rf,qBr),e(Rf,Bve),e(Bve,NBr),b(c,yPe,u),b(c,Vr,u),g(p8,Vr,null),e(Vr,jBr),e(Vr,Bf),e(Bf,DBr),e(Bf,cU),e(cU,GBr),e(Bf,OBr),e(Bf,fU),e(fU,VBr),e(Bf,XBr),e(Vr,zBr),e(Vr,_8),e(_8,QBr),e(_8,Pve),e(Pve,WBr),e(_8,HBr),e(Vr,UBr),e(Vr,qt),g(u8,qt,null),e(qt,JBr),e(qt,$ve),e($ve,YBr),e(qt,KBr),e(qt,Pf),e(Pf,ZBr),e(Pf,Ive),e(Ive,ePr),e(Pf,oPr),e(Pf,mU),e(mU,rPr),e(Pf,tPr),e(qt,aPr),e(qt,qve),e(qve,nPr),e(qt,sPr),g(b8,qt,null),e(Vr,lPr),e(Vr,No),g(F8,No,null),e(No,iPr),e(No,Nve),e(Nve,dPr),e(No,cPr),e(No,Dn),e(Dn,fPr),e(Dn,jve),e(jve,mPr),e(Dn,gPr),e(Dn,Dve),e(Dve,hPr),e(Dn,pPr),e(Dn,Gve),e(Gve,_Pr),e(Dn,uPr),e(No,bPr),e(No,Ove),e(Ove,AE),e(AE,Vve),e(Vve,FPr),e(AE,vPr),e(AE,gU),e(gU,TPr),e(AE,MPr),e(No,EPr),e(No,Xve),e(Xve,CPr),e(No,wPr),g(v8,No,null),LPe=!0},p(c,[u]){const T8={};u&2&&(T8.$$scope={dirty:u,ctx:c}),Of.$set(T8);const zve={};u&2&&(zve.$$scope={dirty:u,ctx:c}),Nh.$set(zve);const Qve={};u&2&&(Qve.$$scope={dirty:u,ctx:c}),Uh.$set(Qve)},i(c){LPe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(Of.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(JC.$$.fragment,c),h(Nh.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(tw.$$.fragment,c),h(Uh.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),LPe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(Of.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(JC.$$.fragment,c),p(Nh.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(tw.$$.fragment,c),p(Uh.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(F6.$$.fragment,c),p(T6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(C6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(R6.$$.fragment,c),p(B6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(q6.$$.fragment,c),p(N6.$$.fragment,c),p(j6.$$.fragment,c),p(D6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(X6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(W6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),LPe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(yRe),c&&t(Vi),_(kC),c&&t(LRe),c&&t(zn),c&&t(xRe),_(SC,c),c&&t(kRe),c&&t(E9),c&&t(SRe),_(Of,c),c&&t(RRe),c&&t(Xi),_(RC),c&&t(BRe),c&&t(Qo),_(BC),_(IC),_(qC),_(NC),c&&t(PRe),c&&t(Qi),_(jC),c&&t($Re),c&&t(Wo),_(DC),_(VC),_(XC),_(zC),c&&t(IRe),c&&t(Wi),_(QC),c&&t(qRe),c&&t(Ho),_(WC),_(JC),_(Nh),_(YC),_(KC),c&&t(NRe),c&&t(Hi),_(ZC),c&&t(jRe),c&&t(Uo),_(ew),_(tw),_(Uh),_(aw),_(nw),c&&t(DRe),c&&t(Ji),_(sw),c&&t(GRe),c&&t(Jo),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(ORe),c&&t(Zi),_(gw),c&&t(VRe),c&&t(Yo),_(hw),_(_w),_(uw),_(bw),_(Fw),c&&t(XRe),c&&t(rd),_(vw),c&&t(zRe),c&&t(Ko),_(Tw),_(Ew),_(Cw),_(ww),_(Aw),c&&t(QRe),c&&t(nd),_(yw),c&&t(WRe),c&&t(Zo),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(HRe),c&&t(id),_(Pw),c&&t(URe),c&&t(er),_($w),_(qw),_(Nw),_(jw),_(Dw),c&&t(JRe),c&&t(fd),_(Gw),c&&t(YRe),c&&t(or),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(KRe),c&&t(hd),_(Hw),c&&t(ZRe),c&&t(rr),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(eBe),c&&t(ud),_(oA),c&&t(oBe),c&&t(tr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(rBe),c&&t(vd),_(iA),c&&t(tBe),c&&t(ar),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(aBe),c&&t(Ed),_(pA),c&&t(nBe),c&&t(nr),_(_A),_(bA),_(FA),_(vA),_(TA),c&&t(sBe),c&&t(Ad),_(MA),c&&t(lBe),c&&t(sr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(iBe),c&&t(xd),_(xA),c&&t(dBe),c&&t(lr),_(kA),_(RA),_(BA),_(PA),_($A),c&&t(cBe),c&&t(Rd),_(IA),c&&t(fBe),c&&t(ir),_(qA),_(jA),_(DA),_(GA),_(OA),c&&t(mBe),c&&t($d),_(VA),c&&t(gBe),c&&t(dr),_(XA),_(QA),_(WA),_(HA),_(UA),c&&t(hBe),c&&t(Nd),_(JA),c&&t(pBe),c&&t(cr),_(YA),_(ZA),_(e6),_(o6),_(r6),c&&t(_Be),c&&t(Gd),_(t6),c&&t(uBe),c&&t(fr),_(a6),_(s6),_(l6),_(i6),_(d6),c&&t(bBe),c&&t(Xd),_(c6),c&&t(FBe),c&&t(mr),_(f6),_(g6),_(h6),_(p6),_(u6),c&&t(vBe),c&&t(Wd),_(b6),c&&t(TBe),c&&t(gr),_(F6),_(T6),_(M6),_(E6),_(C6),c&&t(MBe),c&&t(Jd),_(w6),c&&t(EBe),c&&t(hr),_(A6),_(L6),_(x6),_(k6),_(S6),c&&t(CBe),c&&t(ec),_(R6),c&&t(wBe),c&&t(pr),_(B6),_($6),_(I6),_(q6),_(N6),c&&t(ABe),c&&t(tc),_(j6),c&&t(yBe),c&&t(_r),_(D6),_(O6),_(V6),_(X6),_(z6),c&&t(LBe),c&&t(sc),_(Q6),c&&t(xBe),c&&t(ur),_(W6),_(U6),_(J6),_(Y6),_(K6),c&&t(kBe),c&&t(cc),_(Z6),c&&t(SBe),c&&t(br),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(RBe),c&&t(gc),_(s0),c&&t(BBe),c&&t(Fr),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(PBe),c&&t(_c),_(g0),c&&t($Be),c&&t(vr),_(h0),_(_0),_(u0),_(b0),_(F0),c&&t(IBe),c&&t(Fc),_(v0),c&&t(qBe),c&&t(Tr),_(T0),_(E0),_(C0),_(w0),_(A0),c&&t(NBe),c&&t(Mc),_(y0),c&&t(jBe),c&&t(Mr),_(L0),_(k0),_(S0),_(R0),_(P0),c&&t(DBe),c&&t(wc),_($0),c&&t(GBe),c&&t(Er),_(I0),_(N0),_(j0),_(D0),_(G0),c&&t(OBe),c&&t(Lc),_(O0),c&&t(VBe),c&&t(Cr),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(XBe),c&&t(Sc),_(U0),c&&t(zBe),c&&t(wr),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(QBe),c&&t(Pc),_(ry),c&&t(WBe),c&&t(Ar),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(HBe),c&&t(qc),_(dy),c&&t(UBe),c&&t(yr),_(cy),_(my),_(gy),_(hy),_(py),c&&t(JBe),c&&t(Dc),_(_y),c&&t(YBe),c&&t(Lr),_(uy),_(Fy),_(vy),_(Ty),_(My),c&&t(KBe),c&&t(Vc),_(Ey),c&&t(ZBe),c&&t(xr),_(Cy),_(Ay),_(yy),_(Ly),_(xy),c&&t(ePe),c&&t(Qc),_(ky),c&&t(oPe),c&&t(kr),_(Sy),_(By),_(Py),_($y),_(Iy),c&&t(rPe),c&&t(Uc),_(qy),c&&t(tPe),c&&t(Sr),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(aPe),c&&t(Kc),_(Xy),c&&t(nPe),c&&t(Rr),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(sPe),c&&t(of),_(Yy),c&&t(lPe),c&&t(Br),_(Ky),_(eL),_(oL),_(rL),_(tL),c&&t(iPe),c&&t(af),_(aL),c&&t(dPe),c&&t(Pr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(cPe),c&&t(lf),_(fL),c&&t(fPe),c&&t($r),_(mL),_(hL),_(pL),_(_L),_(uL),c&&t(mPe),c&&t(ff),_(bL),c&&t(gPe),c&&t(Ir),_(FL),_(TL),_(ML),_(EL),_(CL),c&&t(hPe),c&&t(hf),_(wL),c&&t(pPe),c&&t(qr),_(AL),_(LL),_(xL),_(kL),_(SL),c&&t(_Pe),c&&t(uf),_(RL),c&&t(uPe),c&&t(Nr),_(BL),_($L),_(IL),_(qL),_(NL),c&&t(bPe),c&&t(vf),_(jL),c&&t(FPe),c&&t(jr),_(DL),_(OL),_(VL),_(XL),_(zL),c&&t(vPe),c&&t(Ef),_(QL),c&&t(TPe),c&&t(Dr),_(WL),_(UL),_(JL),_(YL),_(KL),c&&t(MPe),c&&t(Af),_(ZL),c&&t(EPe),c&&t(Gr),_(e8),_(r8),_(t8),_(a8),_(n8),c&&t(CPe),c&&t(xf),_(s8),c&&t(wPe),c&&t(Or),_(l8),_(d8),_(c8),_(f8),_(g8),c&&t(APe),c&&t(Rf),_(h8),c&&t(yPe),c&&t(Vr),_(p8),_(u8),_(b8),_(F8),_(v8)}}}const bwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Fwt(If){return gwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wwt extends dwt{constructor(Z){super();cwt(this,Z,Fwt,uwt,fwt,{})}}export{wwt as default,bwt as metadata};
