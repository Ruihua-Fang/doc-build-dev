import{S as xEt,i as kEt,s as SEt,e as a,k as l,w as f,t as o,M as REt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as BEt}from"../../chunks/vendor-6b77c823.js";import{T as iBr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function PEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,bC,Nf,xe,co,ji,Gn,FC,On,Vn,vC,Di,Xn,TC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),bC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),FC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),vC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),TC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var c9=s(de);Ce=r(c9,"NewModelConfig"),c9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var f9=s(Ii);qf=r(f9,"model_type"),f9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var m9=s(qi);Ni=r(m9,'"new-model"'),m9.forEach(t),bC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),FC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var g9=s(On);Vn=r(g9,"PreTrainedModel"),g9.forEach(t),vC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),TC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var h9=s(Gi);jf=r(h9,"NewModelConfig"),h9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,bC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,FC),e(xe,On),e(On,Vn),e(xe,vC),e(xe,Di),e(Di,Xn),e(xe,TC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function $Et(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function IEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function qEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,bC,Nf,xe,co,ji,Gn,FC,On,Vn,vC,Di,Xn,TC,Gi,jf,Da,fo,_e,c9,Oi,f9,m9,zo,Ga,g9,Df,h9,iIe,USe,Vi,Gf,OJ,MC,dIe,VJ,cIe,JSe,zn,fIe,XJ,mIe,gIe,zJ,hIe,pIe,YSe,EC,KSe,p9,_Ie,ZSe,Of,eRe,Xi,Vf,QJ,CC,uIe,WJ,bIe,oRe,Qo,wC,FIe,AC,vIe,_9,TIe,MIe,EIe,yC,CIe,HJ,wIe,AIe,yIe,mo,LC,LIe,UJ,xIe,kIe,zi,SIe,JJ,RIe,BIe,YJ,PIe,$Ie,IIe,F,Xf,KJ,qIe,NIe,u9,jIe,DIe,GIe,zf,ZJ,OIe,VIe,b9,XIe,zIe,QIe,Qf,eY,WIe,HIe,F9,UIe,JIe,YIe,Wf,oY,KIe,ZIe,v9,eqe,oqe,rqe,Hf,rY,tqe,aqe,T9,nqe,sqe,lqe,Uf,tY,iqe,dqe,M9,cqe,fqe,mqe,Jf,aY,gqe,hqe,E9,pqe,_qe,uqe,Yf,nY,bqe,Fqe,C9,vqe,Tqe,Mqe,Kf,sY,Eqe,Cqe,w9,wqe,Aqe,yqe,Zf,lY,Lqe,xqe,A9,kqe,Sqe,Rqe,em,iY,Bqe,Pqe,y9,$qe,Iqe,qqe,om,dY,Nqe,jqe,L9,Dqe,Gqe,Oqe,rm,cY,Vqe,Xqe,x9,zqe,Qqe,Wqe,tm,fY,Hqe,Uqe,k9,Jqe,Yqe,Kqe,am,mY,Zqe,eNe,S9,oNe,rNe,tNe,nm,gY,aNe,nNe,R9,sNe,lNe,iNe,sm,hY,dNe,cNe,B9,fNe,mNe,gNe,lm,pY,hNe,pNe,P9,_Ne,uNe,bNe,im,_Y,FNe,vNe,$9,TNe,MNe,ENe,dm,uY,CNe,wNe,I9,ANe,yNe,LNe,cm,bY,xNe,kNe,q9,SNe,RNe,BNe,fm,FY,PNe,$Ne,N9,INe,qNe,NNe,mm,vY,jNe,DNe,j9,GNe,ONe,VNe,gm,TY,XNe,zNe,D9,QNe,WNe,HNe,hm,MY,UNe,JNe,G9,YNe,KNe,ZNe,pm,EY,eje,oje,O9,rje,tje,aje,_m,CY,nje,sje,V9,lje,ije,dje,um,wY,cje,fje,AY,mje,gje,hje,bm,yY,pje,_je,X9,uje,bje,Fje,Fm,LY,vje,Tje,z9,Mje,Eje,Cje,vm,xY,wje,Aje,Q9,yje,Lje,xje,Tm,kY,kje,Sje,W9,Rje,Bje,Pje,Mm,SY,$je,Ije,H9,qje,Nje,jje,Em,RY,Dje,Gje,U9,Oje,Vje,Xje,Cm,BY,zje,Qje,J9,Wje,Hje,Uje,wm,PY,Jje,Yje,Y9,Kje,Zje,eDe,Am,$Y,oDe,rDe,K9,tDe,aDe,nDe,ym,IY,sDe,lDe,Z9,iDe,dDe,cDe,Lm,qY,fDe,mDe,ex,gDe,hDe,pDe,xm,NY,_De,uDe,ox,bDe,FDe,vDe,km,jY,TDe,MDe,rx,EDe,CDe,wDe,Sm,DY,ADe,yDe,tx,LDe,xDe,kDe,Rm,GY,SDe,RDe,ax,BDe,PDe,$De,Bm,OY,IDe,qDe,nx,NDe,jDe,DDe,Pm,VY,GDe,ODe,sx,VDe,XDe,zDe,$m,XY,QDe,WDe,lx,HDe,UDe,JDe,Im,zY,YDe,KDe,ix,ZDe,eGe,oGe,qm,QY,rGe,tGe,dx,aGe,nGe,sGe,Nm,WY,lGe,iGe,cx,dGe,cGe,fGe,jm,HY,mGe,gGe,fx,hGe,pGe,_Ge,Dm,UY,uGe,bGe,mx,FGe,vGe,TGe,Gm,JY,MGe,EGe,gx,CGe,wGe,AGe,Om,YY,yGe,LGe,hx,xGe,kGe,SGe,Vm,KY,RGe,BGe,px,PGe,$Ge,IGe,Xm,ZY,qGe,NGe,_x,jGe,DGe,GGe,zm,eK,OGe,VGe,ux,XGe,zGe,QGe,Qm,oK,WGe,HGe,bx,UGe,JGe,YGe,Wm,rK,KGe,ZGe,Fx,eOe,oOe,rOe,Hm,tK,tOe,aOe,vx,nOe,sOe,lOe,Um,aK,iOe,dOe,Tx,cOe,fOe,mOe,Jm,nK,gOe,hOe,Mx,pOe,_Oe,uOe,Ym,sK,bOe,FOe,Ex,vOe,TOe,MOe,Km,lK,EOe,COe,Cx,wOe,AOe,yOe,Zm,iK,LOe,xOe,wx,kOe,SOe,ROe,eg,dK,BOe,POe,Ax,$Oe,IOe,qOe,og,cK,NOe,jOe,yx,DOe,GOe,OOe,rg,fK,VOe,XOe,Lx,zOe,QOe,WOe,tg,mK,HOe,UOe,xx,JOe,YOe,KOe,ag,gK,ZOe,eVe,kx,oVe,rVe,tVe,ng,hK,aVe,nVe,Sx,sVe,lVe,iVe,sg,pK,dVe,cVe,Rx,fVe,mVe,gVe,lg,_K,hVe,pVe,Bx,_Ve,uVe,bVe,ig,uK,FVe,vVe,Px,TVe,MVe,EVe,dg,bK,CVe,wVe,$x,AVe,yVe,LVe,cg,FK,xVe,kVe,Ix,SVe,RVe,BVe,fg,vK,PVe,$Ve,qx,IVe,qVe,NVe,mg,TK,jVe,DVe,Nx,GVe,OVe,VVe,gg,MK,XVe,zVe,jx,QVe,WVe,HVe,hg,EK,UVe,JVe,Dx,YVe,KVe,ZVe,pg,CK,eXe,oXe,Gx,rXe,tXe,aXe,_g,wK,nXe,sXe,Ox,lXe,iXe,dXe,ug,AK,cXe,fXe,Vx,mXe,gXe,hXe,bg,yK,pXe,_Xe,Xx,uXe,bXe,FXe,Fg,LK,vXe,TXe,zx,MXe,EXe,CXe,vg,xK,wXe,AXe,Qx,yXe,LXe,xXe,Tg,kK,kXe,SXe,Wx,RXe,BXe,PXe,Mg,SK,$Xe,IXe,Hx,qXe,NXe,jXe,Eg,RK,DXe,GXe,Ux,OXe,VXe,XXe,Cg,BK,zXe,QXe,Jx,WXe,HXe,UXe,wg,PK,JXe,YXe,Yx,KXe,ZXe,eze,Ag,$K,oze,rze,Kx,tze,aze,nze,yg,IK,sze,lze,Zx,ize,dze,cze,Lg,qK,fze,mze,ek,gze,hze,pze,xg,NK,_ze,uze,ok,bze,Fze,vze,kg,jK,Tze,Mze,rk,Eze,Cze,wze,Sg,DK,Aze,yze,tk,Lze,xze,kze,Rg,GK,Sze,Rze,ak,Bze,Pze,$ze,Bg,OK,Ize,qze,nk,Nze,jze,Dze,Pg,VK,Gze,Oze,sk,Vze,Xze,zze,$g,XK,Qze,Wze,lk,Hze,Uze,Jze,zK,Yze,Kze,xC,Zze,Ig,kC,eQe,QK,oQe,rRe,Qi,qg,WK,SC,rQe,HK,tQe,tRe,Wo,RC,aQe,BC,nQe,ik,sQe,lQe,iQe,PC,dQe,UK,cQe,fQe,mQe,go,$C,gQe,JK,hQe,pQe,Oa,_Qe,YK,uQe,bQe,KK,FQe,vQe,ZK,TQe,MQe,EQe,E,Qn,eZ,CQe,wQe,dk,AQe,yQe,ck,LQe,xQe,kQe,Wn,oZ,SQe,RQe,fk,BQe,PQe,mk,$Qe,IQe,qQe,Hn,rZ,NQe,jQe,gk,DQe,GQe,hk,OQe,VQe,XQe,Ng,tZ,zQe,QQe,pk,WQe,HQe,UQe,Un,aZ,JQe,YQe,_k,KQe,ZQe,uk,eWe,oWe,rWe,jg,nZ,tWe,aWe,bk,nWe,sWe,lWe,Dg,sZ,iWe,dWe,Fk,cWe,fWe,mWe,Gg,lZ,gWe,hWe,vk,pWe,_We,uWe,Jn,iZ,bWe,FWe,Tk,vWe,TWe,Mk,MWe,EWe,CWe,Yn,dZ,wWe,AWe,Ek,yWe,LWe,Ck,xWe,kWe,SWe,Kn,cZ,RWe,BWe,wk,PWe,$We,Ak,IWe,qWe,NWe,Og,fZ,jWe,DWe,yk,GWe,OWe,VWe,Vg,mZ,XWe,zWe,Lk,QWe,WWe,HWe,Zn,gZ,UWe,JWe,xk,YWe,KWe,kk,ZWe,eHe,oHe,Xg,hZ,rHe,tHe,Sk,aHe,nHe,sHe,es,pZ,lHe,iHe,Rk,dHe,cHe,Bk,fHe,mHe,gHe,os,_Z,hHe,pHe,Pk,_He,uHe,$k,bHe,FHe,vHe,rs,uZ,THe,MHe,Ik,EHe,CHe,bZ,wHe,AHe,yHe,zg,FZ,LHe,xHe,qk,kHe,SHe,RHe,ts,vZ,BHe,PHe,Nk,$He,IHe,jk,qHe,NHe,jHe,Qg,TZ,DHe,GHe,Dk,OHe,VHe,XHe,as,MZ,zHe,QHe,Gk,WHe,HHe,Ok,UHe,JHe,YHe,ns,EZ,KHe,ZHe,Vk,eUe,oUe,Xk,rUe,tUe,aUe,ss,CZ,nUe,sUe,zk,lUe,iUe,Qk,dUe,cUe,fUe,Wg,wZ,mUe,gUe,AZ,hUe,pUe,_Ue,Hg,yZ,uUe,bUe,Wk,FUe,vUe,TUe,ls,LZ,MUe,EUe,Hk,CUe,wUe,Uk,AUe,yUe,LUe,Ug,xZ,xUe,kUe,Jk,SUe,RUe,BUe,is,kZ,PUe,$Ue,Yk,IUe,qUe,Kk,NUe,jUe,DUe,ds,SZ,GUe,OUe,Zk,VUe,XUe,eS,zUe,QUe,WUe,cs,RZ,HUe,UUe,oS,JUe,YUe,rS,KUe,ZUe,eJe,fs,BZ,oJe,rJe,tS,tJe,aJe,aS,nJe,sJe,lJe,Jg,PZ,iJe,dJe,nS,cJe,fJe,mJe,ms,$Z,gJe,hJe,sS,pJe,_Je,lS,uJe,bJe,FJe,gs,IZ,vJe,TJe,iS,MJe,EJe,dS,CJe,wJe,AJe,hs,qZ,yJe,LJe,cS,xJe,kJe,fS,SJe,RJe,BJe,ps,NZ,PJe,$Je,mS,IJe,qJe,gS,NJe,jJe,DJe,_s,jZ,GJe,OJe,hS,VJe,XJe,pS,zJe,QJe,WJe,us,DZ,HJe,UJe,_S,JJe,YJe,uS,KJe,ZJe,eYe,Yg,GZ,oYe,rYe,bS,tYe,aYe,nYe,bs,OZ,sYe,lYe,FS,iYe,dYe,vS,cYe,fYe,mYe,Kg,VZ,gYe,hYe,TS,pYe,_Ye,uYe,Zg,XZ,bYe,FYe,MS,vYe,TYe,MYe,Fs,zZ,EYe,CYe,ES,wYe,AYe,CS,yYe,LYe,xYe,vs,QZ,kYe,SYe,wS,RYe,BYe,AS,PYe,$Ye,IYe,eh,WZ,qYe,NYe,yS,jYe,DYe,GYe,Ts,HZ,OYe,VYe,LS,XYe,zYe,xS,QYe,WYe,HYe,Ms,UZ,UYe,JYe,kS,YYe,KYe,SS,ZYe,eKe,oKe,Es,JZ,rKe,tKe,RS,aKe,nKe,BS,sKe,lKe,iKe,Cs,YZ,dKe,cKe,PS,fKe,mKe,$S,gKe,hKe,pKe,ws,KZ,_Ke,uKe,IS,bKe,FKe,qS,vKe,TKe,MKe,oh,ZZ,EKe,CKe,NS,wKe,AKe,yKe,rh,eee,LKe,xKe,jS,kKe,SKe,RKe,th,oee,BKe,PKe,DS,$Ke,IKe,qKe,ah,ree,NKe,jKe,GS,DKe,GKe,OKe,As,tee,VKe,XKe,OS,zKe,QKe,VS,WKe,HKe,UKe,nh,aee,JKe,YKe,XS,KKe,ZKe,eZe,ys,nee,oZe,rZe,zS,tZe,aZe,QS,nZe,sZe,lZe,Ls,see,iZe,dZe,WS,cZe,fZe,HS,mZe,gZe,hZe,xs,lee,pZe,_Ze,US,uZe,bZe,JS,FZe,vZe,TZe,ks,iee,MZe,EZe,YS,CZe,wZe,KS,AZe,yZe,LZe,Ss,dee,xZe,kZe,ZS,SZe,RZe,eR,BZe,PZe,$Ze,Rs,cee,IZe,qZe,oR,NZe,jZe,rR,DZe,GZe,OZe,sh,fee,VZe,XZe,tR,zZe,QZe,WZe,lh,mee,HZe,UZe,aR,JZe,YZe,KZe,Bs,gee,ZZe,eeo,nR,oeo,reo,sR,teo,aeo,neo,Ps,hee,seo,leo,lR,ieo,deo,iR,ceo,feo,meo,$s,pee,geo,heo,dR,peo,_eo,cR,ueo,beo,Feo,ih,_ee,veo,Teo,fR,Meo,Eeo,Ceo,dh,uee,weo,Aeo,mR,yeo,Leo,xeo,ch,bee,keo,Seo,gR,Reo,Beo,Peo,fh,Fee,$eo,Ieo,hR,qeo,Neo,jeo,Is,vee,Deo,Geo,pR,Oeo,Veo,_R,Xeo,zeo,Qeo,mh,Tee,Weo,Heo,uR,Ueo,Jeo,Yeo,gh,Mee,Keo,Zeo,bR,eoo,ooo,roo,qs,Eee,too,aoo,FR,noo,soo,vR,loo,ioo,doo,Ns,Cee,coo,foo,TR,moo,goo,MR,hoo,poo,_oo,wee,uoo,boo,IC,Foo,hh,qC,voo,Aee,Too,aRe,Wi,ph,yee,NC,Moo,Lee,Eoo,nRe,Ho,jC,Coo,DC,woo,ER,Aoo,yoo,Loo,GC,xoo,xee,koo,Soo,Roo,$e,OC,Boo,kee,Poo,$oo,Va,Ioo,See,qoo,Noo,Ree,joo,Doo,Bee,Goo,Ooo,Voo,te,_h,Pee,Xoo,zoo,CR,Qoo,Woo,Hoo,uh,$ee,Uoo,Joo,wR,Yoo,Koo,Zoo,bh,Iee,ero,oro,AR,rro,tro,aro,Fh,qee,nro,sro,yR,lro,iro,dro,vh,Nee,cro,fro,LR,mro,gro,hro,Th,jee,pro,_ro,xR,uro,bro,Fro,Mh,Dee,vro,Tro,kR,Mro,Ero,Cro,Eh,Gee,wro,Aro,SR,yro,Lro,xro,Ch,Oee,kro,Sro,RR,Rro,Bro,Pro,wh,Vee,$ro,Iro,BR,qro,Nro,jro,Ah,Xee,Dro,Gro,PR,Oro,Vro,Xro,yh,zee,zro,Qro,$R,Wro,Hro,Uro,Lh,Qee,Jro,Yro,IR,Kro,Zro,eto,xh,Wee,oto,rto,qR,tto,ato,nto,kh,Hee,sto,lto,NR,ito,dto,cto,Sh,Uee,fto,mto,jR,gto,hto,pto,Rh,Jee,_to,uto,DR,bto,Fto,vto,Bh,Yee,Tto,Mto,GR,Eto,Cto,wto,Ph,Ato,Kee,yto,Lto,VC,xto,$h,XC,kto,Zee,Sto,sRe,Hi,Ih,eoe,zC,Rto,ooe,Bto,lRe,Uo,QC,Pto,WC,$to,OR,Ito,qto,Nto,HC,jto,roe,Dto,Gto,Oto,Ie,UC,Vto,toe,Xto,zto,Ui,Qto,aoe,Wto,Hto,noe,Uto,Jto,Yto,ke,qh,soe,Kto,Zto,VR,eao,oao,rao,Nh,loe,tao,aao,XR,nao,sao,lao,jh,ioe,iao,dao,zR,cao,fao,mao,Dh,doe,gao,hao,QR,pao,_ao,uao,Gh,coe,bao,Fao,WR,vao,Tao,Mao,Oh,foe,Eao,Cao,HR,wao,Aao,yao,Vh,moe,Lao,xao,UR,kao,Sao,Rao,Xh,goe,Bao,Pao,JR,$ao,Iao,qao,zh,Nao,hoe,jao,Dao,JC,Gao,Qh,YC,Oao,poe,Vao,iRe,Ji,Wh,_oe,KC,Xao,uoe,zao,dRe,Jo,ZC,Qao,Yi,Wao,YR,Hao,Uao,KR,Jao,Yao,Kao,ew,Zao,boe,eno,ono,rno,Xr,ow,tno,Foe,ano,nno,Ki,sno,voe,lno,ino,ZR,dno,cno,fno,Toe,mno,gno,rw,hno,qe,tw,pno,Moe,_no,uno,Xa,bno,Eoe,Fno,vno,Coe,Tno,Mno,woe,Eno,Cno,wno,T,Hh,Aoe,Ano,yno,eB,Lno,xno,kno,Uh,yoe,Sno,Rno,oB,Bno,Pno,$no,Jh,Loe,Ino,qno,rB,Nno,jno,Dno,Yh,xoe,Gno,Ono,tB,Vno,Xno,zno,Kh,koe,Qno,Wno,aB,Hno,Uno,Jno,Zh,Soe,Yno,Kno,nB,Zno,eso,oso,ep,Roe,rso,tso,sB,aso,nso,sso,op,Boe,lso,iso,lB,dso,cso,fso,rp,Poe,mso,gso,iB,hso,pso,_so,tp,$oe,uso,bso,dB,Fso,vso,Tso,ap,Ioe,Mso,Eso,cB,Cso,wso,Aso,np,qoe,yso,Lso,fB,xso,kso,Sso,sp,Noe,Rso,Bso,mB,Pso,$so,Iso,lp,joe,qso,Nso,gB,jso,Dso,Gso,ip,Doe,Oso,Vso,hB,Xso,zso,Qso,dp,Goe,Wso,Hso,pB,Uso,Jso,Yso,cp,Ooe,Kso,Zso,_B,elo,olo,rlo,fp,Voe,tlo,alo,uB,nlo,slo,llo,mp,Xoe,ilo,dlo,bB,clo,flo,mlo,gp,zoe,glo,hlo,FB,plo,_lo,ulo,hp,Qoe,blo,Flo,vB,vlo,Tlo,Mlo,pp,Woe,Elo,Clo,TB,wlo,Alo,ylo,_p,Hoe,Llo,xlo,MB,klo,Slo,Rlo,up,Uoe,Blo,Plo,EB,$lo,Ilo,qlo,bp,Joe,Nlo,jlo,CB,Dlo,Glo,Olo,Fp,Yoe,Vlo,Xlo,wB,zlo,Qlo,Wlo,vp,Koe,Hlo,Ulo,Zoe,Jlo,Ylo,Klo,Tp,ere,Zlo,eio,AB,oio,rio,tio,Mp,ore,aio,nio,yB,sio,lio,iio,Ep,rre,dio,cio,LB,fio,mio,gio,js,tre,hio,pio,xB,_io,uio,kB,bio,Fio,vio,Cp,are,Tio,Mio,SB,Eio,Cio,wio,wp,nre,Aio,yio,RB,Lio,xio,kio,Ap,sre,Sio,Rio,BB,Bio,Pio,$io,yp,lre,Iio,qio,PB,Nio,jio,Dio,Lp,ire,Gio,Oio,$B,Vio,Xio,zio,xp,dre,Qio,Wio,IB,Hio,Uio,Jio,kp,cre,Yio,Kio,qB,Zio,edo,odo,Sp,fre,rdo,tdo,NB,ado,ndo,sdo,Rp,mre,ldo,ido,jB,ddo,cdo,fdo,Bp,gre,mdo,gdo,DB,hdo,pdo,_do,Pp,hre,udo,bdo,GB,Fdo,vdo,Tdo,$p,pre,Mdo,Edo,OB,Cdo,wdo,Ado,Ip,_re,ydo,Ldo,VB,xdo,kdo,Sdo,qp,ure,Rdo,Bdo,XB,Pdo,$do,Ido,Np,bre,qdo,Ndo,zB,jdo,Ddo,Gdo,jp,Fre,Odo,Vdo,QB,Xdo,zdo,Qdo,Dp,vre,Wdo,Hdo,WB,Udo,Jdo,Ydo,Gp,Tre,Kdo,Zdo,HB,eco,oco,rco,Op,Mre,tco,aco,UB,nco,sco,lco,Vp,Ere,ico,dco,JB,cco,fco,mco,Xp,Cre,gco,hco,YB,pco,_co,uco,zp,wre,bco,Fco,KB,vco,Tco,Mco,Qp,Are,Eco,Cco,ZB,wco,Aco,yco,Wp,yre,Lco,xco,eP,kco,Sco,Rco,Hp,Lre,Bco,Pco,oP,$co,Ico,qco,Up,xre,Nco,jco,rP,Dco,Gco,Oco,Jp,kre,Vco,Xco,tP,zco,Qco,Wco,Yp,Sre,Hco,Uco,aP,Jco,Yco,Kco,Kp,Rre,Zco,efo,nP,ofo,rfo,tfo,Zp,Bre,afo,nfo,sP,sfo,lfo,ifo,e_,Pre,dfo,cfo,lP,ffo,mfo,gfo,o_,$re,hfo,pfo,iP,_fo,ufo,bfo,r_,Ire,Ffo,vfo,dP,Tfo,Mfo,Efo,t_,qre,Cfo,wfo,cP,Afo,yfo,Lfo,a_,Nre,xfo,kfo,fP,Sfo,Rfo,Bfo,n_,jre,Pfo,$fo,mP,Ifo,qfo,Nfo,s_,Dre,jfo,Dfo,gP,Gfo,Ofo,Vfo,l_,Gre,Xfo,zfo,hP,Qfo,Wfo,Hfo,i_,Ore,Ufo,Jfo,pP,Yfo,Kfo,Zfo,d_,Vre,emo,omo,_P,rmo,tmo,amo,c_,Xre,nmo,smo,uP,lmo,imo,dmo,f_,zre,cmo,fmo,bP,mmo,gmo,hmo,m_,Qre,pmo,_mo,FP,umo,bmo,Fmo,g_,Wre,vmo,Tmo,vP,Mmo,Emo,Cmo,h_,Hre,wmo,Amo,TP,ymo,Lmo,xmo,p_,Ure,kmo,Smo,MP,Rmo,Bmo,Pmo,__,Jre,$mo,Imo,EP,qmo,Nmo,jmo,u_,Yre,Dmo,Gmo,CP,Omo,Vmo,Xmo,b_,Kre,zmo,Qmo,wP,Wmo,Hmo,Umo,F_,Zre,Jmo,Ymo,AP,Kmo,Zmo,ego,v_,ete,ogo,rgo,yP,tgo,ago,ngo,T_,ote,sgo,lgo,LP,igo,dgo,cgo,M_,rte,fgo,mgo,xP,ggo,hgo,pgo,E_,tte,_go,ugo,kP,bgo,Fgo,vgo,C_,ate,Tgo,Mgo,SP,Ego,Cgo,wgo,w_,nte,Ago,ygo,RP,Lgo,xgo,kgo,A_,ste,Sgo,Rgo,BP,Bgo,Pgo,$go,y_,lte,Igo,qgo,PP,Ngo,jgo,Dgo,L_,ite,Ggo,Ogo,$P,Vgo,Xgo,zgo,x_,dte,Qgo,Wgo,IP,Hgo,Ugo,Jgo,k_,cte,Ygo,Kgo,qP,Zgo,eho,oho,S_,fte,rho,tho,NP,aho,nho,sho,R_,lho,mte,iho,dho,gte,cho,fho,hte,mho,gho,aw,cRe,Zi,B_,pte,nw,hho,_te,pho,fRe,Yo,sw,_ho,ed,uho,jP,bho,Fho,DP,vho,Tho,Mho,lw,Eho,ute,Cho,who,Aho,zr,iw,yho,bte,Lho,xho,od,kho,Fte,Sho,Rho,GP,Bho,Pho,$ho,vte,Iho,qho,dw,Nho,Ne,cw,jho,Tte,Dho,Gho,za,Oho,Mte,Vho,Xho,Ete,zho,Qho,Cte,Who,Hho,Uho,S,P_,wte,Jho,Yho,OP,Kho,Zho,epo,$_,Ate,opo,rpo,VP,tpo,apo,npo,I_,yte,spo,lpo,XP,ipo,dpo,cpo,q_,Lte,fpo,mpo,zP,gpo,hpo,ppo,N_,xte,_po,upo,QP,bpo,Fpo,vpo,j_,kte,Tpo,Mpo,WP,Epo,Cpo,wpo,D_,Ste,Apo,ypo,HP,Lpo,xpo,kpo,G_,Rte,Spo,Rpo,UP,Bpo,Ppo,$po,O_,Bte,Ipo,qpo,JP,Npo,jpo,Dpo,V_,Pte,Gpo,Opo,YP,Vpo,Xpo,zpo,X_,$te,Qpo,Wpo,KP,Hpo,Upo,Jpo,z_,Ite,Ypo,Kpo,ZP,Zpo,e_o,o_o,Q_,qte,r_o,t_o,e$,a_o,n_o,s_o,W_,Nte,l_o,i_o,o$,d_o,c_o,f_o,H_,jte,m_o,g_o,r$,h_o,p_o,__o,U_,Dte,u_o,b_o,t$,F_o,v_o,T_o,J_,Gte,M_o,E_o,a$,C_o,w_o,A_o,Y_,Ote,y_o,L_o,n$,x_o,k_o,S_o,K_,Vte,R_o,B_o,s$,P_o,$_o,I_o,Z_,Xte,q_o,N_o,l$,j_o,D_o,G_o,eu,zte,O_o,V_o,i$,X_o,z_o,Q_o,ou,Qte,W_o,H_o,d$,U_o,J_o,Y_o,ru,Wte,K_o,Z_o,c$,euo,ouo,ruo,tu,Hte,tuo,auo,f$,nuo,suo,luo,au,Ute,iuo,duo,m$,cuo,fuo,muo,nu,Jte,guo,huo,g$,puo,_uo,uuo,su,Yte,buo,Fuo,h$,vuo,Tuo,Muo,lu,Kte,Euo,Cuo,p$,wuo,Auo,yuo,iu,Zte,Luo,xuo,_$,kuo,Suo,Ruo,du,eae,Buo,Puo,u$,$uo,Iuo,quo,cu,oae,Nuo,juo,b$,Duo,Guo,Ouo,fu,rae,Vuo,Xuo,F$,zuo,Quo,Wuo,mu,tae,Huo,Uuo,v$,Juo,Yuo,Kuo,gu,aae,Zuo,e1o,T$,o1o,r1o,t1o,hu,nae,a1o,n1o,M$,s1o,l1o,i1o,pu,sae,d1o,c1o,E$,f1o,m1o,g1o,_u,lae,h1o,p1o,C$,_1o,u1o,b1o,uu,iae,F1o,v1o,w$,T1o,M1o,E1o,bu,dae,C1o,w1o,A$,A1o,y1o,L1o,Fu,x1o,cae,k1o,S1o,fae,R1o,B1o,mae,P1o,$1o,fw,mRe,rd,vu,gae,mw,I1o,hae,q1o,gRe,Ko,gw,N1o,td,j1o,y$,D1o,G1o,L$,O1o,V1o,X1o,hw,z1o,pae,Q1o,W1o,H1o,Qr,pw,U1o,_ae,J1o,Y1o,ad,K1o,uae,Z1o,e7o,x$,o7o,r7o,t7o,bae,a7o,n7o,_w,s7o,je,uw,l7o,Fae,i7o,d7o,Qa,c7o,vae,f7o,m7o,Tae,g7o,h7o,Mae,p7o,_7o,u7o,$,Tu,Eae,b7o,F7o,k$,v7o,T7o,M7o,Mu,Cae,E7o,C7o,S$,w7o,A7o,y7o,Eu,wae,L7o,x7o,R$,k7o,S7o,R7o,Cu,Aae,B7o,P7o,B$,$7o,I7o,q7o,wu,yae,N7o,j7o,P$,D7o,G7o,O7o,Au,Lae,V7o,X7o,$$,z7o,Q7o,W7o,yu,xae,H7o,U7o,I$,J7o,Y7o,K7o,Lu,kae,Z7o,ebo,q$,obo,rbo,tbo,xu,Sae,abo,nbo,N$,sbo,lbo,ibo,ku,Rae,dbo,cbo,j$,fbo,mbo,gbo,Su,Bae,hbo,pbo,D$,_bo,ubo,bbo,Ru,Pae,Fbo,vbo,G$,Tbo,Mbo,Ebo,Bu,$ae,Cbo,wbo,O$,Abo,ybo,Lbo,Pu,Iae,xbo,kbo,V$,Sbo,Rbo,Bbo,$u,qae,Pbo,$bo,X$,Ibo,qbo,Nbo,Iu,Nae,jbo,Dbo,z$,Gbo,Obo,Vbo,qu,jae,Xbo,zbo,Q$,Qbo,Wbo,Hbo,Nu,Dae,Ubo,Jbo,W$,Ybo,Kbo,Zbo,ju,Gae,e5o,o5o,H$,r5o,t5o,a5o,Du,Oae,n5o,s5o,U$,l5o,i5o,d5o,Gu,Vae,c5o,f5o,J$,m5o,g5o,h5o,Ou,Xae,p5o,_5o,Y$,u5o,b5o,F5o,Vu,zae,v5o,T5o,K$,M5o,E5o,C5o,Xu,Qae,w5o,A5o,Z$,y5o,L5o,x5o,zu,Wae,k5o,S5o,eI,R5o,B5o,P5o,Qu,Hae,$5o,I5o,oI,q5o,N5o,j5o,Wu,Uae,D5o,G5o,rI,O5o,V5o,X5o,Hu,Jae,z5o,Q5o,tI,W5o,H5o,U5o,Uu,Yae,J5o,Y5o,aI,K5o,Z5o,e3o,Ju,Kae,o3o,r3o,nI,t3o,a3o,n3o,Yu,Zae,s3o,l3o,sI,i3o,d3o,c3o,Ku,ene,f3o,m3o,lI,g3o,h3o,p3o,Zu,one,_3o,u3o,iI,b3o,F3o,v3o,e1,rne,T3o,M3o,dI,E3o,C3o,w3o,o1,tne,A3o,y3o,cI,L3o,x3o,k3o,r1,S3o,ane,R3o,B3o,nne,P3o,$3o,sne,I3o,q3o,bw,hRe,nd,t1,lne,Fw,N3o,ine,j3o,pRe,Zo,vw,D3o,sd,G3o,fI,O3o,V3o,mI,X3o,z3o,Q3o,Tw,W3o,dne,H3o,U3o,J3o,Wr,Mw,Y3o,cne,K3o,Z3o,ld,e2o,fne,o2o,r2o,gI,t2o,a2o,n2o,mne,s2o,l2o,Ew,i2o,De,Cw,d2o,gne,c2o,f2o,Wa,m2o,hne,g2o,h2o,pne,p2o,_2o,_ne,u2o,b2o,F2o,I,a1,une,v2o,T2o,hI,M2o,E2o,C2o,n1,bne,w2o,A2o,pI,y2o,L2o,x2o,s1,Fne,k2o,S2o,_I,R2o,B2o,P2o,l1,vne,$2o,I2o,uI,q2o,N2o,j2o,i1,Tne,D2o,G2o,bI,O2o,V2o,X2o,d1,Mne,z2o,Q2o,FI,W2o,H2o,U2o,c1,Ene,J2o,Y2o,vI,K2o,Z2o,eFo,f1,Cne,oFo,rFo,TI,tFo,aFo,nFo,m1,wne,sFo,lFo,MI,iFo,dFo,cFo,g1,Ane,fFo,mFo,EI,gFo,hFo,pFo,h1,yne,_Fo,uFo,CI,bFo,FFo,vFo,p1,Lne,TFo,MFo,wI,EFo,CFo,wFo,_1,xne,AFo,yFo,AI,LFo,xFo,kFo,u1,kne,SFo,RFo,yI,BFo,PFo,$Fo,b1,Sne,IFo,qFo,LI,NFo,jFo,DFo,F1,Rne,GFo,OFo,xI,VFo,XFo,zFo,v1,Bne,QFo,WFo,kI,HFo,UFo,JFo,T1,Pne,YFo,KFo,SI,ZFo,evo,ovo,M1,$ne,rvo,tvo,RI,avo,nvo,svo,E1,Ine,lvo,ivo,BI,dvo,cvo,fvo,C1,qne,mvo,gvo,PI,hvo,pvo,_vo,w1,Nne,uvo,bvo,$I,Fvo,vvo,Tvo,A1,jne,Mvo,Evo,II,Cvo,wvo,Avo,y1,Dne,yvo,Lvo,qI,xvo,kvo,Svo,L1,Gne,Rvo,Bvo,NI,Pvo,$vo,Ivo,x1,One,qvo,Nvo,jI,jvo,Dvo,Gvo,k1,Vne,Ovo,Vvo,DI,Xvo,zvo,Qvo,S1,Xne,Wvo,Hvo,GI,Uvo,Jvo,Yvo,R1,zne,Kvo,Zvo,OI,eTo,oTo,rTo,B1,Qne,tTo,aTo,VI,nTo,sTo,lTo,P1,Wne,iTo,dTo,Hne,cTo,fTo,mTo,$1,Une,gTo,hTo,XI,pTo,_To,uTo,I1,Jne,bTo,FTo,zI,vTo,TTo,MTo,q1,Yne,ETo,CTo,QI,wTo,ATo,yTo,N1,Kne,LTo,xTo,WI,kTo,STo,RTo,j1,BTo,Zne,PTo,$To,ese,ITo,qTo,ose,NTo,jTo,ww,_Re,id,D1,rse,Aw,DTo,tse,GTo,uRe,er,yw,OTo,dd,VTo,HI,XTo,zTo,UI,QTo,WTo,HTo,Lw,UTo,ase,JTo,YTo,KTo,Hr,xw,ZTo,nse,eMo,oMo,cd,rMo,sse,tMo,aMo,JI,nMo,sMo,lMo,lse,iMo,dMo,kw,cMo,Ge,Sw,fMo,ise,mMo,gMo,Ha,hMo,dse,pMo,_Mo,cse,uMo,bMo,fse,FMo,vMo,TMo,se,G1,mse,MMo,EMo,YI,CMo,wMo,AMo,O1,gse,yMo,LMo,KI,xMo,kMo,SMo,V1,hse,RMo,BMo,ZI,PMo,$Mo,IMo,X1,pse,qMo,NMo,eq,jMo,DMo,GMo,z1,_se,OMo,VMo,oq,XMo,zMo,QMo,Q1,use,WMo,HMo,rq,UMo,JMo,YMo,W1,bse,KMo,ZMo,tq,e4o,o4o,r4o,H1,Fse,t4o,a4o,aq,n4o,s4o,l4o,U1,vse,i4o,d4o,nq,c4o,f4o,m4o,J1,Tse,g4o,h4o,sq,p4o,_4o,u4o,Y1,Mse,b4o,F4o,lq,v4o,T4o,M4o,K1,Ese,E4o,C4o,iq,w4o,A4o,y4o,Z1,Cse,L4o,x4o,dq,k4o,S4o,R4o,e7,wse,B4o,P4o,cq,$4o,I4o,q4o,o7,Ase,N4o,j4o,fq,D4o,G4o,O4o,r7,yse,V4o,X4o,mq,z4o,Q4o,W4o,t7,H4o,Lse,U4o,J4o,xse,Y4o,K4o,kse,Z4o,eEo,Rw,bRe,fd,a7,Sse,Bw,oEo,Rse,rEo,FRe,or,Pw,tEo,md,aEo,gq,nEo,sEo,hq,lEo,iEo,dEo,$w,cEo,Bse,fEo,mEo,gEo,Ur,Iw,hEo,Pse,pEo,_Eo,gd,uEo,$se,bEo,FEo,pq,vEo,TEo,MEo,Ise,EEo,CEo,qw,wEo,Oe,Nw,AEo,qse,yEo,LEo,Ua,xEo,Nse,kEo,SEo,jse,REo,BEo,Dse,PEo,$Eo,IEo,y,n7,Gse,qEo,NEo,_q,jEo,DEo,GEo,s7,Ose,OEo,VEo,uq,XEo,zEo,QEo,l7,Vse,WEo,HEo,bq,UEo,JEo,YEo,i7,Xse,KEo,ZEo,Fq,eCo,oCo,rCo,d7,zse,tCo,aCo,vq,nCo,sCo,lCo,c7,Qse,iCo,dCo,Tq,cCo,fCo,mCo,f7,Wse,gCo,hCo,Mq,pCo,_Co,uCo,m7,Hse,bCo,FCo,Eq,vCo,TCo,MCo,g7,Use,ECo,CCo,Cq,wCo,ACo,yCo,h7,Jse,LCo,xCo,wq,kCo,SCo,RCo,p7,Yse,BCo,PCo,Aq,$Co,ICo,qCo,_7,Kse,NCo,jCo,yq,DCo,GCo,OCo,u7,Zse,VCo,XCo,Lq,zCo,QCo,WCo,b7,ele,HCo,UCo,xq,JCo,YCo,KCo,F7,ole,ZCo,ewo,kq,owo,rwo,two,v7,rle,awo,nwo,Sq,swo,lwo,iwo,T7,tle,dwo,cwo,Rq,fwo,mwo,gwo,M7,ale,hwo,pwo,Bq,_wo,uwo,bwo,E7,nle,Fwo,vwo,Pq,Two,Mwo,Ewo,C7,sle,Cwo,wwo,$q,Awo,ywo,Lwo,w7,lle,xwo,kwo,Iq,Swo,Rwo,Bwo,A7,ile,Pwo,$wo,qq,Iwo,qwo,Nwo,y7,dle,jwo,Dwo,Nq,Gwo,Owo,Vwo,L7,cle,Xwo,zwo,jq,Qwo,Wwo,Hwo,x7,fle,Uwo,Jwo,Dq,Ywo,Kwo,Zwo,k7,mle,eAo,oAo,Gq,rAo,tAo,aAo,S7,gle,nAo,sAo,Oq,lAo,iAo,dAo,R7,hle,cAo,fAo,Vq,mAo,gAo,hAo,B7,ple,pAo,_Ao,Xq,uAo,bAo,FAo,P7,_le,vAo,TAo,zq,MAo,EAo,CAo,$7,ule,wAo,AAo,Qq,yAo,LAo,xAo,I7,ble,kAo,SAo,Wq,RAo,BAo,PAo,q7,Fle,$Ao,IAo,Hq,qAo,NAo,jAo,N7,vle,DAo,GAo,Uq,OAo,VAo,XAo,j7,Tle,zAo,QAo,Jq,WAo,HAo,UAo,D7,Mle,JAo,YAo,Yq,KAo,ZAo,e6o,G7,Ele,o6o,r6o,Kq,t6o,a6o,n6o,O7,Cle,s6o,l6o,Zq,i6o,d6o,c6o,V7,wle,f6o,m6o,eN,g6o,h6o,p6o,X7,Ale,_6o,u6o,oN,b6o,F6o,v6o,z7,yle,T6o,M6o,rN,E6o,C6o,w6o,Q7,Lle,A6o,y6o,tN,L6o,x6o,k6o,W7,xle,S6o,R6o,aN,B6o,P6o,$6o,H7,kle,I6o,q6o,nN,N6o,j6o,D6o,U7,Sle,G6o,O6o,sN,V6o,X6o,z6o,J7,Rle,Q6o,W6o,lN,H6o,U6o,J6o,Y7,Y6o,Ble,K6o,Z6o,Ple,e0o,o0o,$le,r0o,t0o,jw,vRe,hd,K7,Ile,Dw,a0o,qle,n0o,TRe,rr,Gw,s0o,pd,l0o,iN,i0o,d0o,dN,c0o,f0o,m0o,Ow,g0o,Nle,h0o,p0o,_0o,Jr,Vw,u0o,jle,b0o,F0o,_d,v0o,Dle,T0o,M0o,cN,E0o,C0o,w0o,Gle,A0o,y0o,Xw,L0o,Ve,zw,x0o,Ole,k0o,S0o,Ja,R0o,Vle,B0o,P0o,Xle,$0o,I0o,zle,q0o,N0o,j0o,G,Z7,Qle,D0o,G0o,fN,O0o,V0o,X0o,eb,Wle,z0o,Q0o,mN,W0o,H0o,U0o,ob,Hle,J0o,Y0o,gN,K0o,Z0o,eyo,rb,Ule,oyo,ryo,hN,tyo,ayo,nyo,tb,Jle,syo,lyo,pN,iyo,dyo,cyo,ab,Yle,fyo,myo,_N,gyo,hyo,pyo,nb,Kle,_yo,uyo,uN,byo,Fyo,vyo,sb,Zle,Tyo,Myo,bN,Eyo,Cyo,wyo,lb,eie,Ayo,yyo,FN,Lyo,xyo,kyo,ib,oie,Syo,Ryo,vN,Byo,Pyo,$yo,db,rie,Iyo,qyo,TN,Nyo,jyo,Dyo,cb,tie,Gyo,Oyo,MN,Vyo,Xyo,zyo,fb,aie,Qyo,Wyo,EN,Hyo,Uyo,Jyo,mb,nie,Yyo,Kyo,CN,Zyo,eLo,oLo,gb,sie,rLo,tLo,wN,aLo,nLo,sLo,hb,lie,lLo,iLo,AN,dLo,cLo,fLo,pb,iie,mLo,gLo,yN,hLo,pLo,_Lo,_b,die,uLo,bLo,LN,FLo,vLo,TLo,ub,cie,MLo,ELo,xN,CLo,wLo,ALo,bb,fie,yLo,LLo,kN,xLo,kLo,SLo,Fb,mie,RLo,BLo,SN,PLo,$Lo,ILo,vb,gie,qLo,NLo,RN,jLo,DLo,GLo,Tb,hie,OLo,VLo,BN,XLo,zLo,QLo,Mb,pie,WLo,HLo,PN,ULo,JLo,YLo,Eb,_ie,KLo,ZLo,$N,e8o,o8o,r8o,Cb,uie,t8o,a8o,IN,n8o,s8o,l8o,wb,bie,i8o,d8o,qN,c8o,f8o,m8o,Ab,Fie,g8o,h8o,NN,p8o,_8o,u8o,yb,b8o,vie,F8o,v8o,Tie,T8o,M8o,Mie,E8o,C8o,Qw,MRe,ud,Lb,Eie,Ww,w8o,Cie,A8o,ERe,tr,Hw,y8o,bd,L8o,jN,x8o,k8o,DN,S8o,R8o,B8o,Uw,P8o,wie,$8o,I8o,q8o,Yr,Jw,N8o,Aie,j8o,D8o,Fd,G8o,yie,O8o,V8o,GN,X8o,z8o,Q8o,Lie,W8o,H8o,Yw,U8o,Xe,Kw,J8o,xie,Y8o,K8o,Ya,Z8o,kie,e9o,o9o,Sie,r9o,t9o,Rie,a9o,n9o,s9o,da,xb,Bie,l9o,i9o,ON,d9o,c9o,f9o,kb,Pie,m9o,g9o,VN,h9o,p9o,_9o,Sb,$ie,u9o,b9o,XN,F9o,v9o,T9o,Rb,Iie,M9o,E9o,zN,C9o,w9o,A9o,Bb,qie,y9o,L9o,QN,x9o,k9o,S9o,Pb,R9o,Nie,B9o,P9o,jie,$9o,I9o,Die,q9o,N9o,Zw,CRe,vd,$b,Gie,eA,j9o,Oie,D9o,wRe,ar,oA,G9o,Td,O9o,WN,V9o,X9o,HN,z9o,Q9o,W9o,rA,H9o,Vie,U9o,J9o,Y9o,Kr,tA,K9o,Xie,Z9o,exo,Md,oxo,zie,rxo,txo,UN,axo,nxo,sxo,Qie,lxo,ixo,aA,dxo,ze,nA,cxo,Wie,fxo,mxo,Ka,gxo,Hie,hxo,pxo,Uie,_xo,uxo,Jie,bxo,Fxo,vxo,j,Ib,Yie,Txo,Mxo,JN,Exo,Cxo,wxo,qb,Kie,Axo,yxo,YN,Lxo,xxo,kxo,Nb,Zie,Sxo,Rxo,KN,Bxo,Pxo,$xo,jb,ede,Ixo,qxo,ZN,Nxo,jxo,Dxo,Db,ode,Gxo,Oxo,ej,Vxo,Xxo,zxo,Gb,rde,Qxo,Wxo,oj,Hxo,Uxo,Jxo,Ob,tde,Yxo,Kxo,rj,Zxo,eko,oko,Vb,ade,rko,tko,tj,ako,nko,sko,Xb,nde,lko,iko,aj,dko,cko,fko,zb,sde,mko,gko,nj,hko,pko,_ko,Qb,lde,uko,bko,sj,Fko,vko,Tko,Wb,ide,Mko,Eko,lj,Cko,wko,Ako,Hb,dde,yko,Lko,ij,xko,kko,Sko,Ub,cde,Rko,Bko,dj,Pko,$ko,Iko,Jb,fde,qko,Nko,cj,jko,Dko,Gko,Yb,mde,Oko,Vko,fj,Xko,zko,Qko,Kb,gde,Wko,Hko,mj,Uko,Jko,Yko,Zb,hde,Kko,Zko,gj,eSo,oSo,rSo,e5,pde,tSo,aSo,hj,nSo,sSo,lSo,o5,_de,iSo,dSo,pj,cSo,fSo,mSo,r5,ude,gSo,hSo,_j,pSo,_So,uSo,t5,bde,bSo,FSo,uj,vSo,TSo,MSo,a5,Fde,ESo,CSo,bj,wSo,ASo,ySo,n5,vde,LSo,xSo,Fj,kSo,SSo,RSo,s5,Tde,BSo,PSo,vj,$So,ISo,qSo,l5,Mde,NSo,jSo,Tj,DSo,GSo,OSo,i5,Ede,VSo,XSo,Mj,zSo,QSo,WSo,d5,Cde,HSo,USo,Ej,JSo,YSo,KSo,c5,wde,ZSo,eRo,Cj,oRo,rRo,tRo,f5,Ade,aRo,nRo,wj,sRo,lRo,iRo,m5,yde,dRo,cRo,Aj,fRo,mRo,gRo,g5,Lde,hRo,pRo,yj,_Ro,uRo,bRo,h5,xde,FRo,vRo,Lj,TRo,MRo,ERo,p5,CRo,kde,wRo,ARo,Sde,yRo,LRo,Rde,xRo,kRo,sA,ARe,Ed,_5,Bde,lA,SRo,Pde,RRo,yRe,nr,iA,BRo,Cd,PRo,xj,$Ro,IRo,kj,qRo,NRo,jRo,dA,DRo,$de,GRo,ORo,VRo,Zr,cA,XRo,Ide,zRo,QRo,wd,WRo,qde,HRo,URo,Sj,JRo,YRo,KRo,Nde,ZRo,eBo,fA,oBo,Qe,mA,rBo,jde,tBo,aBo,Za,nBo,Dde,sBo,lBo,Gde,iBo,dBo,Ode,cBo,fBo,mBo,R,u5,Vde,gBo,hBo,Rj,pBo,_Bo,uBo,b5,Xde,bBo,FBo,Bj,vBo,TBo,MBo,F5,zde,EBo,CBo,Pj,wBo,ABo,yBo,v5,Qde,LBo,xBo,$j,kBo,SBo,RBo,T5,Wde,BBo,PBo,Ij,$Bo,IBo,qBo,M5,Hde,NBo,jBo,qj,DBo,GBo,OBo,E5,Ude,VBo,XBo,Nj,zBo,QBo,WBo,C5,Jde,HBo,UBo,jj,JBo,YBo,KBo,w5,Yde,ZBo,ePo,Dj,oPo,rPo,tPo,A5,Kde,aPo,nPo,Gj,sPo,lPo,iPo,y5,Zde,dPo,cPo,Oj,fPo,mPo,gPo,L5,ece,hPo,pPo,Vj,_Po,uPo,bPo,x5,oce,FPo,vPo,Xj,TPo,MPo,EPo,k5,rce,CPo,wPo,zj,APo,yPo,LPo,S5,tce,xPo,kPo,Qj,SPo,RPo,BPo,R5,ace,PPo,$Po,Wj,IPo,qPo,NPo,B5,nce,jPo,DPo,Hj,GPo,OPo,VPo,P5,sce,XPo,zPo,Uj,QPo,WPo,HPo,$5,lce,UPo,JPo,Jj,YPo,KPo,ZPo,I5,ice,e$o,o$o,Yj,r$o,t$o,a$o,q5,dce,n$o,s$o,Kj,l$o,i$o,d$o,N5,cce,c$o,f$o,Zj,m$o,g$o,h$o,j5,fce,p$o,_$o,eD,u$o,b$o,F$o,D5,mce,v$o,T$o,oD,M$o,E$o,C$o,G5,gce,w$o,A$o,rD,y$o,L$o,x$o,O5,hce,k$o,S$o,tD,R$o,B$o,P$o,V5,pce,$$o,I$o,aD,q$o,N$o,j$o,X5,_ce,D$o,G$o,nD,O$o,V$o,X$o,z5,uce,z$o,Q$o,sD,W$o,H$o,U$o,Q5,bce,J$o,Y$o,lD,K$o,Z$o,eIo,W5,Fce,oIo,rIo,iD,tIo,aIo,nIo,H5,vce,sIo,lIo,dD,iIo,dIo,cIo,U5,Tce,fIo,mIo,cD,gIo,hIo,pIo,J5,Mce,_Io,uIo,fD,bIo,FIo,vIo,Y5,Ece,TIo,MIo,mD,EIo,CIo,wIo,K5,Cce,AIo,yIo,gD,LIo,xIo,kIo,Z5,wce,SIo,RIo,hD,BIo,PIo,$Io,e3,Ace,IIo,qIo,pD,NIo,jIo,DIo,o3,yce,GIo,OIo,_D,VIo,XIo,zIo,r3,QIo,Lce,WIo,HIo,xce,UIo,JIo,kce,YIo,KIo,gA,LRe,Ad,t3,Sce,hA,ZIo,Rce,eqo,xRe,sr,pA,oqo,yd,rqo,uD,tqo,aqo,bD,nqo,sqo,lqo,_A,iqo,Bce,dqo,cqo,fqo,et,uA,mqo,Pce,gqo,hqo,Ld,pqo,$ce,_qo,uqo,FD,bqo,Fqo,vqo,Ice,Tqo,Mqo,bA,Eqo,We,FA,Cqo,qce,wqo,Aqo,en,yqo,Nce,Lqo,xqo,jce,kqo,Sqo,Dce,Rqo,Bqo,Pqo,Gce,a3,Oce,$qo,Iqo,vD,qqo,Nqo,jqo,n3,Dqo,Vce,Gqo,Oqo,Xce,Vqo,Xqo,zce,zqo,Qqo,vA,kRe,xd,s3,Qce,TA,Wqo,Wce,Hqo,SRe,lr,MA,Uqo,kd,Jqo,TD,Yqo,Kqo,MD,Zqo,eNo,oNo,EA,rNo,Hce,tNo,aNo,nNo,ot,CA,sNo,Uce,lNo,iNo,Sd,dNo,Jce,cNo,fNo,ED,mNo,gNo,hNo,Yce,pNo,_No,wA,uNo,He,AA,bNo,Kce,FNo,vNo,on,TNo,Zce,MNo,ENo,efe,CNo,wNo,ofe,ANo,yNo,LNo,ge,l3,rfe,xNo,kNo,CD,SNo,RNo,BNo,i3,tfe,PNo,$No,wD,INo,qNo,NNo,Ds,afe,jNo,DNo,AD,GNo,ONo,yD,VNo,XNo,zNo,d3,nfe,QNo,WNo,LD,HNo,UNo,JNo,ma,sfe,YNo,KNo,xD,ZNo,ejo,kD,ojo,rjo,SD,tjo,ajo,njo,c3,lfe,sjo,ljo,RD,ijo,djo,cjo,f3,ife,fjo,mjo,BD,gjo,hjo,pjo,m3,dfe,_jo,ujo,PD,bjo,Fjo,vjo,g3,cfe,Tjo,Mjo,$D,Ejo,Cjo,wjo,h3,ffe,Ajo,yjo,ID,Ljo,xjo,kjo,p3,mfe,Sjo,Rjo,qD,Bjo,Pjo,$jo,_3,Ijo,gfe,qjo,Njo,hfe,jjo,Djo,pfe,Gjo,Ojo,yA,RRe,Rd,u3,_fe,LA,Vjo,ufe,Xjo,BRe,ir,xA,zjo,Bd,Qjo,ND,Wjo,Hjo,jD,Ujo,Jjo,Yjo,kA,Kjo,bfe,Zjo,eDo,oDo,rt,SA,rDo,Ffe,tDo,aDo,Pd,nDo,vfe,sDo,lDo,DD,iDo,dDo,cDo,Tfe,fDo,mDo,RA,gDo,Ue,BA,hDo,Mfe,pDo,_Do,rn,uDo,Efe,bDo,FDo,Cfe,vDo,TDo,wfe,MDo,EDo,CDo,Afe,b3,yfe,wDo,ADo,GD,yDo,LDo,xDo,F3,kDo,Lfe,SDo,RDo,xfe,BDo,PDo,kfe,$Do,IDo,PA,PRe,$d,v3,Sfe,$A,qDo,Rfe,NDo,$Re,dr,IA,jDo,Id,DDo,OD,GDo,ODo,VD,VDo,XDo,zDo,qA,QDo,Bfe,WDo,HDo,UDo,tt,NA,JDo,Pfe,YDo,KDo,qd,ZDo,$fe,eGo,oGo,XD,rGo,tGo,aGo,Ife,nGo,sGo,jA,lGo,Je,DA,iGo,qfe,dGo,cGo,tn,fGo,Nfe,mGo,gGo,jfe,hGo,pGo,Dfe,_Go,uGo,bGo,Se,T3,Gfe,FGo,vGo,zD,TGo,MGo,EGo,M3,Ofe,CGo,wGo,QD,AGo,yGo,LGo,E3,Vfe,xGo,kGo,WD,SGo,RGo,BGo,C3,Xfe,PGo,$Go,HD,IGo,qGo,NGo,w3,zfe,jGo,DGo,UD,GGo,OGo,VGo,A3,Qfe,XGo,zGo,JD,QGo,WGo,HGo,y3,Wfe,UGo,JGo,YD,YGo,KGo,ZGo,L3,Hfe,eOo,oOo,KD,rOo,tOo,aOo,x3,nOo,Ufe,sOo,lOo,Jfe,iOo,dOo,Yfe,cOo,fOo,GA,IRe,Nd,k3,Kfe,OA,mOo,Zfe,gOo,qRe,cr,VA,hOo,jd,pOo,ZD,_Oo,uOo,eG,bOo,FOo,vOo,XA,TOo,eme,MOo,EOo,COo,at,zA,wOo,ome,AOo,yOo,Dd,LOo,rme,xOo,kOo,oG,SOo,ROo,BOo,tme,POo,$Oo,QA,IOo,Ye,WA,qOo,ame,NOo,jOo,an,DOo,nme,GOo,OOo,sme,VOo,XOo,lme,zOo,QOo,WOo,nn,S3,ime,HOo,UOo,rG,JOo,YOo,KOo,R3,dme,ZOo,eVo,tG,oVo,rVo,tVo,B3,cme,aVo,nVo,aG,sVo,lVo,iVo,P3,fme,dVo,cVo,nG,fVo,mVo,gVo,$3,hVo,mme,pVo,_Vo,gme,uVo,bVo,hme,FVo,vVo,HA,NRe,Gd,I3,pme,UA,TVo,_me,MVo,jRe,fr,JA,EVo,Od,CVo,sG,wVo,AVo,lG,yVo,LVo,xVo,YA,kVo,ume,SVo,RVo,BVo,nt,KA,PVo,bme,$Vo,IVo,Vd,qVo,Fme,NVo,jVo,iG,DVo,GVo,OVo,vme,VVo,XVo,ZA,zVo,Ke,e6,QVo,Tme,WVo,HVo,sn,UVo,Mme,JVo,YVo,Eme,KVo,ZVo,Cme,eXo,oXo,rXo,Re,q3,wme,tXo,aXo,dG,nXo,sXo,lXo,N3,Ame,iXo,dXo,cG,cXo,fXo,mXo,j3,yme,gXo,hXo,fG,pXo,_Xo,uXo,D3,Lme,bXo,FXo,mG,vXo,TXo,MXo,G3,xme,EXo,CXo,gG,wXo,AXo,yXo,O3,kme,LXo,xXo,hG,kXo,SXo,RXo,V3,Sme,BXo,PXo,pG,$Xo,IXo,qXo,X3,Rme,NXo,jXo,_G,DXo,GXo,OXo,z3,VXo,Bme,XXo,zXo,Pme,QXo,WXo,$me,HXo,UXo,o6,DRe,Xd,Q3,Ime,r6,JXo,qme,YXo,GRe,mr,t6,KXo,zd,ZXo,uG,ezo,ozo,bG,rzo,tzo,azo,a6,nzo,Nme,szo,lzo,izo,st,n6,dzo,jme,czo,fzo,Qd,mzo,Dme,gzo,hzo,FG,pzo,_zo,uzo,Gme,bzo,Fzo,s6,vzo,Ze,l6,Tzo,Ome,Mzo,Ezo,ln,Czo,Vme,wzo,Azo,Xme,yzo,Lzo,zme,xzo,kzo,Szo,i6,W3,Qme,Rzo,Bzo,vG,Pzo,$zo,Izo,H3,Wme,qzo,Nzo,TG,jzo,Dzo,Gzo,U3,Ozo,Hme,Vzo,Xzo,Ume,zzo,Qzo,Jme,Wzo,Hzo,d6,ORe,Wd,J3,Yme,c6,Uzo,Kme,Jzo,VRe,gr,f6,Yzo,Hd,Kzo,MG,Zzo,eQo,EG,oQo,rQo,tQo,m6,aQo,Zme,nQo,sQo,lQo,lt,g6,iQo,ege,dQo,cQo,Ud,fQo,oge,mQo,gQo,CG,hQo,pQo,_Qo,rge,uQo,bQo,h6,FQo,eo,p6,vQo,tge,TQo,MQo,dn,EQo,age,CQo,wQo,nge,AQo,yQo,sge,LQo,xQo,kQo,cn,Y3,lge,SQo,RQo,wG,BQo,PQo,$Qo,K3,ige,IQo,qQo,AG,NQo,jQo,DQo,Z3,dge,GQo,OQo,yG,VQo,XQo,zQo,e2,cge,QQo,WQo,LG,HQo,UQo,JQo,o2,YQo,fge,KQo,ZQo,mge,eWo,oWo,gge,rWo,tWo,_6,XRe,Jd,r2,hge,u6,aWo,pge,nWo,zRe,hr,b6,sWo,Yd,lWo,xG,iWo,dWo,kG,cWo,fWo,mWo,F6,gWo,_ge,hWo,pWo,_Wo,it,v6,uWo,uge,bWo,FWo,Kd,vWo,bge,TWo,MWo,SG,EWo,CWo,wWo,Fge,AWo,yWo,T6,LWo,oo,M6,xWo,vge,kWo,SWo,fn,RWo,Tge,BWo,PWo,Mge,$Wo,IWo,Ege,qWo,NWo,jWo,Zd,t2,Cge,DWo,GWo,RG,OWo,VWo,XWo,a2,wge,zWo,QWo,BG,WWo,HWo,UWo,n2,Age,JWo,YWo,PG,KWo,ZWo,eHo,s2,oHo,yge,rHo,tHo,Lge,aHo,nHo,xge,sHo,lHo,E6,QRe,ec,l2,kge,C6,iHo,Sge,dHo,WRe,pr,w6,cHo,oc,fHo,$G,mHo,gHo,IG,hHo,pHo,_Ho,A6,uHo,Rge,bHo,FHo,vHo,dt,y6,THo,Bge,MHo,EHo,rc,CHo,Pge,wHo,AHo,qG,yHo,LHo,xHo,$ge,kHo,SHo,L6,RHo,ro,x6,BHo,Ige,PHo,$Ho,mn,IHo,qge,qHo,NHo,Nge,jHo,DHo,jge,GHo,OHo,VHo,Dge,i2,Gge,XHo,zHo,NG,QHo,WHo,HHo,d2,UHo,Oge,JHo,YHo,Vge,KHo,ZHo,Xge,eUo,oUo,k6,HRe,tc,c2,zge,S6,rUo,Qge,tUo,URe,_r,R6,aUo,ac,nUo,jG,sUo,lUo,DG,iUo,dUo,cUo,B6,fUo,Wge,mUo,gUo,hUo,ct,P6,pUo,Hge,_Uo,uUo,nc,bUo,Uge,FUo,vUo,GG,TUo,MUo,EUo,Jge,CUo,wUo,$6,AUo,to,I6,yUo,Yge,LUo,xUo,gn,kUo,Kge,SUo,RUo,Zge,BUo,PUo,ehe,$Uo,IUo,qUo,ohe,f2,rhe,NUo,jUo,OG,DUo,GUo,OUo,m2,VUo,the,XUo,zUo,ahe,QUo,WUo,nhe,HUo,UUo,q6,JRe,sc,g2,she,N6,JUo,lhe,YUo,YRe,ur,j6,KUo,lc,ZUo,VG,eJo,oJo,XG,rJo,tJo,aJo,D6,nJo,ihe,sJo,lJo,iJo,ft,G6,dJo,dhe,cJo,fJo,ic,mJo,che,gJo,hJo,zG,pJo,_Jo,uJo,fhe,bJo,FJo,O6,vJo,ao,V6,TJo,mhe,MJo,EJo,hn,CJo,ghe,wJo,AJo,hhe,yJo,LJo,phe,xJo,kJo,SJo,dc,h2,_he,RJo,BJo,QG,PJo,$Jo,IJo,p2,uhe,qJo,NJo,WG,jJo,DJo,GJo,_2,bhe,OJo,VJo,HG,XJo,zJo,QJo,u2,WJo,Fhe,HJo,UJo,vhe,JJo,YJo,The,KJo,ZJo,X6,KRe,cc,b2,Mhe,z6,eYo,Ehe,oYo,ZRe,br,Q6,rYo,fc,tYo,UG,aYo,nYo,JG,sYo,lYo,iYo,W6,dYo,Che,cYo,fYo,mYo,mt,H6,gYo,whe,hYo,pYo,mc,_Yo,Ahe,uYo,bYo,YG,FYo,vYo,TYo,yhe,MYo,EYo,U6,CYo,no,J6,wYo,Lhe,AYo,yYo,pn,LYo,xhe,xYo,kYo,khe,SYo,RYo,She,BYo,PYo,$Yo,Rhe,F2,Bhe,IYo,qYo,KG,NYo,jYo,DYo,v2,GYo,Phe,OYo,VYo,$he,XYo,zYo,Ihe,QYo,WYo,Y6,eBe,gc,T2,qhe,K6,HYo,Nhe,UYo,oBe,Fr,Z6,JYo,hc,YYo,ZG,KYo,ZYo,eO,eKo,oKo,rKo,e0,tKo,jhe,aKo,nKo,sKo,gt,o0,lKo,Dhe,iKo,dKo,pc,cKo,Ghe,fKo,mKo,oO,gKo,hKo,pKo,Ohe,_Ko,uKo,r0,bKo,ho,t0,FKo,Vhe,vKo,TKo,_n,MKo,Xhe,EKo,CKo,zhe,wKo,AKo,Qhe,yKo,LKo,xKo,x,M2,Whe,kKo,SKo,rO,RKo,BKo,PKo,E2,Hhe,$Ko,IKo,tO,qKo,NKo,jKo,C2,Uhe,DKo,GKo,aO,OKo,VKo,XKo,w2,Jhe,zKo,QKo,nO,WKo,HKo,UKo,A2,Yhe,JKo,YKo,sO,KKo,ZKo,eZo,y2,Khe,oZo,rZo,lO,tZo,aZo,nZo,L2,Zhe,sZo,lZo,iO,iZo,dZo,cZo,x2,epe,fZo,mZo,dO,gZo,hZo,pZo,k2,ope,_Zo,uZo,cO,bZo,FZo,vZo,S2,rpe,TZo,MZo,fO,EZo,CZo,wZo,R2,tpe,AZo,yZo,mO,LZo,xZo,kZo,B2,ape,SZo,RZo,gO,BZo,PZo,$Zo,P2,npe,IZo,qZo,hO,NZo,jZo,DZo,$2,spe,GZo,OZo,pO,VZo,XZo,zZo,I2,lpe,QZo,WZo,_O,HZo,UZo,JZo,q2,ipe,YZo,KZo,uO,ZZo,eer,oer,Gs,dpe,rer,ter,bO,aer,ner,FO,ser,ler,ier,N2,cpe,der,cer,vO,fer,mer,ger,j2,fpe,her,per,TO,_er,uer,ber,D2,mpe,Fer,ver,MO,Ter,Mer,Eer,G2,gpe,Cer,wer,EO,Aer,yer,Ler,O2,hpe,xer,ker,CO,Ser,Rer,Ber,V2,ppe,Per,$er,wO,Ier,qer,Ner,X2,_pe,jer,Der,AO,Ger,Oer,Ver,z2,upe,Xer,zer,yO,Qer,Wer,Her,Q2,bpe,Uer,Jer,LO,Yer,Ker,Zer,W2,Fpe,eor,oor,xO,ror,tor,aor,H2,vpe,nor,sor,kO,lor,ior,dor,U2,Tpe,cor,mor,SO,gor,hor,por,J2,Mpe,_or,uor,RO,bor,For,vor,Y2,Epe,Tor,Mor,BO,Eor,Cor,wor,K2,Cpe,Aor,yor,PO,Lor,xor,kor,Z2,wpe,Sor,Ror,$O,Bor,Por,$or,eF,Ape,Ior,qor,IO,Nor,jor,Dor,oF,ype,Gor,Oor,qO,Vor,Xor,zor,rF,Lpe,Qor,Wor,NO,Hor,Uor,Jor,tF,xpe,Yor,Kor,jO,Zor,err,orr,aF,kpe,rrr,trr,DO,arr,nrr,srr,nF,Spe,lrr,irr,GO,drr,crr,frr,sF,Rpe,mrr,grr,OO,hrr,prr,_rr,lF,Bpe,urr,brr,VO,Frr,vrr,Trr,iF,Ppe,Mrr,Err,XO,Crr,wrr,Arr,dF,$pe,yrr,Lrr,zO,xrr,krr,Srr,cF,Ipe,Rrr,Brr,QO,Prr,$rr,Irr,qpe,qrr,Nrr,a0,rBe,_c,fF,Npe,n0,jrr,jpe,Drr,tBe,vr,s0,Grr,uc,Orr,WO,Vrr,Xrr,HO,zrr,Qrr,Wrr,l0,Hrr,Dpe,Urr,Jrr,Yrr,ht,i0,Krr,Gpe,Zrr,etr,bc,otr,Ope,rtr,ttr,UO,atr,ntr,str,Vpe,ltr,itr,d0,dtr,po,c0,ctr,Xpe,ftr,mtr,un,gtr,zpe,htr,ptr,Qpe,_tr,utr,Wpe,btr,Ftr,vtr,H,mF,Hpe,Ttr,Mtr,JO,Etr,Ctr,wtr,gF,Upe,Atr,ytr,YO,Ltr,xtr,ktr,hF,Jpe,Str,Rtr,KO,Btr,Ptr,$tr,pF,Ype,Itr,qtr,ZO,Ntr,jtr,Dtr,_F,Kpe,Gtr,Otr,eV,Vtr,Xtr,ztr,uF,Zpe,Qtr,Wtr,oV,Htr,Utr,Jtr,bF,e_e,Ytr,Ktr,rV,Ztr,ear,oar,FF,o_e,rar,tar,tV,aar,nar,sar,vF,r_e,lar,iar,aV,dar,car,far,TF,t_e,mar,gar,nV,har,par,_ar,MF,a_e,uar,bar,sV,Far,Tar,Mar,EF,n_e,Ear,Car,lV,war,Aar,yar,CF,s_e,Lar,xar,iV,kar,Sar,Rar,wF,l_e,Bar,Par,dV,$ar,Iar,qar,AF,i_e,Nar,jar,cV,Dar,Gar,Oar,yF,d_e,Var,Xar,fV,zar,Qar,War,LF,c_e,Har,Uar,mV,Jar,Yar,Kar,xF,f_e,Zar,enr,gV,onr,rnr,tnr,kF,m_e,anr,nnr,hV,snr,lnr,inr,SF,g_e,dnr,cnr,pV,fnr,mnr,gnr,RF,h_e,hnr,pnr,_V,_nr,unr,bnr,BF,p_e,Fnr,vnr,uV,Tnr,Mnr,Enr,PF,__e,Cnr,wnr,bV,Anr,ynr,Lnr,u_e,xnr,knr,f0,aBe,Fc,$F,b_e,m0,Snr,F_e,Rnr,nBe,Tr,g0,Bnr,vc,Pnr,FV,$nr,Inr,vV,qnr,Nnr,jnr,h0,Dnr,v_e,Gnr,Onr,Vnr,pt,p0,Xnr,T_e,znr,Qnr,Tc,Wnr,M_e,Hnr,Unr,TV,Jnr,Ynr,Knr,E_e,Znr,esr,_0,osr,_o,u0,rsr,C_e,tsr,asr,bn,nsr,w_e,ssr,lsr,A_e,isr,dsr,y_e,csr,fsr,msr,ce,IF,L_e,gsr,hsr,MV,psr,_sr,usr,qF,x_e,bsr,Fsr,EV,vsr,Tsr,Msr,NF,k_e,Esr,Csr,CV,wsr,Asr,ysr,jF,S_e,Lsr,xsr,wV,ksr,Ssr,Rsr,DF,R_e,Bsr,Psr,AV,$sr,Isr,qsr,GF,B_e,Nsr,jsr,yV,Dsr,Gsr,Osr,OF,P_e,Vsr,Xsr,LV,zsr,Qsr,Wsr,VF,$_e,Hsr,Usr,xV,Jsr,Ysr,Ksr,XF,I_e,Zsr,elr,kV,olr,rlr,tlr,zF,q_e,alr,nlr,SV,slr,llr,ilr,QF,N_e,dlr,clr,RV,flr,mlr,glr,WF,j_e,hlr,plr,BV,_lr,ulr,blr,D_e,Flr,vlr,b0,sBe,Mc,HF,G_e,F0,Tlr,O_e,Mlr,lBe,Mr,v0,Elr,Ec,Clr,PV,wlr,Alr,$V,ylr,Llr,xlr,T0,klr,V_e,Slr,Rlr,Blr,_t,M0,Plr,X_e,$lr,Ilr,Cc,qlr,z_e,Nlr,jlr,IV,Dlr,Glr,Olr,Q_e,Vlr,Xlr,E0,zlr,uo,C0,Qlr,W_e,Wlr,Hlr,Fn,Ulr,H_e,Jlr,Ylr,U_e,Klr,Zlr,J_e,eir,oir,rir,w0,UF,Y_e,tir,air,qV,nir,sir,lir,JF,K_e,iir,dir,NV,cir,fir,mir,Z_e,gir,hir,A0,iBe,wc,YF,eue,y0,pir,oue,_ir,dBe,Er,L0,uir,Ac,bir,jV,Fir,vir,DV,Tir,Mir,Eir,x0,Cir,rue,wir,Air,yir,ut,k0,Lir,tue,xir,kir,yc,Sir,aue,Rir,Bir,GV,Pir,$ir,Iir,nue,qir,Nir,S0,jir,bo,R0,Dir,sue,Gir,Oir,vn,Vir,lue,Xir,zir,iue,Qir,Wir,due,Hir,Uir,Jir,J,KF,cue,Yir,Kir,OV,Zir,edr,odr,ZF,fue,rdr,tdr,VV,adr,ndr,sdr,ev,mue,ldr,idr,XV,ddr,cdr,fdr,ov,gue,mdr,gdr,zV,hdr,pdr,_dr,rv,hue,udr,bdr,QV,Fdr,vdr,Tdr,tv,pue,Mdr,Edr,WV,Cdr,wdr,Adr,av,_ue,ydr,Ldr,HV,xdr,kdr,Sdr,nv,uue,Rdr,Bdr,UV,Pdr,$dr,Idr,sv,bue,qdr,Ndr,JV,jdr,Ddr,Gdr,lv,Fue,Odr,Vdr,YV,Xdr,zdr,Qdr,iv,vue,Wdr,Hdr,KV,Udr,Jdr,Ydr,dv,Tue,Kdr,Zdr,ZV,ecr,ocr,rcr,cv,Mue,tcr,acr,eX,ncr,scr,lcr,fv,Eue,icr,dcr,oX,ccr,fcr,mcr,mv,Cue,gcr,hcr,rX,pcr,_cr,ucr,gv,wue,bcr,Fcr,tX,vcr,Tcr,Mcr,hv,Aue,Ecr,Ccr,aX,wcr,Acr,ycr,pv,yue,Lcr,xcr,nX,kcr,Scr,Rcr,_v,Lue,Bcr,Pcr,sX,$cr,Icr,qcr,uv,xue,Ncr,jcr,lX,Dcr,Gcr,Ocr,kue,Vcr,Xcr,B0,cBe,Lc,bv,Sue,P0,zcr,Rue,Qcr,fBe,Cr,$0,Wcr,xc,Hcr,iX,Ucr,Jcr,dX,Ycr,Kcr,Zcr,I0,efr,Bue,ofr,rfr,tfr,bt,q0,afr,Pue,nfr,sfr,kc,lfr,$ue,ifr,dfr,cX,cfr,ffr,mfr,Iue,gfr,hfr,N0,pfr,Fo,j0,_fr,que,ufr,bfr,Tn,Ffr,Nue,vfr,Tfr,jue,Mfr,Efr,Due,Cfr,wfr,Afr,ue,Fv,Gue,yfr,Lfr,fX,xfr,kfr,Sfr,vv,Oue,Rfr,Bfr,mX,Pfr,$fr,Ifr,Tv,Vue,qfr,Nfr,gX,jfr,Dfr,Gfr,Mv,Xue,Ofr,Vfr,hX,Xfr,zfr,Qfr,Ev,zue,Wfr,Hfr,pX,Ufr,Jfr,Yfr,Cv,Que,Kfr,Zfr,_X,emr,omr,rmr,wv,Wue,tmr,amr,uX,nmr,smr,lmr,Av,Hue,imr,dmr,bX,cmr,fmr,mmr,yv,Uue,gmr,hmr,FX,pmr,_mr,umr,Lv,Jue,bmr,Fmr,vX,vmr,Tmr,Mmr,Yue,Emr,Cmr,D0,mBe,Sc,xv,Kue,G0,wmr,Zue,Amr,gBe,wr,O0,ymr,Rc,Lmr,TX,xmr,kmr,MX,Smr,Rmr,Bmr,V0,Pmr,e1e,$mr,Imr,qmr,Ft,X0,Nmr,o1e,jmr,Dmr,Bc,Gmr,r1e,Omr,Vmr,EX,Xmr,zmr,Qmr,t1e,Wmr,Hmr,z0,Umr,vo,Q0,Jmr,a1e,Ymr,Kmr,Mn,Zmr,n1e,egr,ogr,s1e,rgr,tgr,l1e,agr,ngr,sgr,V,kv,i1e,lgr,igr,CX,dgr,cgr,fgr,Sv,d1e,mgr,ggr,wX,hgr,pgr,_gr,Rv,c1e,ugr,bgr,AX,Fgr,vgr,Tgr,Bv,f1e,Mgr,Egr,yX,Cgr,wgr,Agr,Pv,m1e,ygr,Lgr,LX,xgr,kgr,Sgr,$v,g1e,Rgr,Bgr,xX,Pgr,$gr,Igr,Iv,h1e,qgr,Ngr,kX,jgr,Dgr,Ggr,qv,p1e,Ogr,Vgr,SX,Xgr,zgr,Qgr,Nv,_1e,Wgr,Hgr,RX,Ugr,Jgr,Ygr,jv,u1e,Kgr,Zgr,BX,ehr,ohr,rhr,Dv,b1e,thr,ahr,PX,nhr,shr,lhr,Gv,F1e,ihr,dhr,$X,chr,fhr,mhr,Ov,v1e,ghr,hhr,IX,phr,_hr,uhr,Vv,T1e,bhr,Fhr,qX,vhr,Thr,Mhr,Xv,M1e,Ehr,Chr,NX,whr,Ahr,yhr,zv,E1e,Lhr,xhr,jX,khr,Shr,Rhr,Qv,C1e,Bhr,Phr,DX,$hr,Ihr,qhr,Wv,w1e,Nhr,jhr,GX,Dhr,Ghr,Ohr,Hv,A1e,Vhr,Xhr,OX,zhr,Qhr,Whr,Uv,y1e,Hhr,Uhr,VX,Jhr,Yhr,Khr,Jv,L1e,Zhr,epr,XX,opr,rpr,tpr,Yv,x1e,apr,npr,zX,spr,lpr,ipr,Kv,k1e,dpr,cpr,QX,fpr,mpr,gpr,Zv,S1e,hpr,ppr,WX,_pr,upr,bpr,eT,R1e,Fpr,vpr,HX,Tpr,Mpr,Epr,oT,B1e,Cpr,wpr,UX,Apr,ypr,Lpr,P1e,xpr,kpr,W0,hBe,Pc,rT,$1e,H0,Spr,I1e,Rpr,pBe,Ar,U0,Bpr,$c,Ppr,JX,$pr,Ipr,YX,qpr,Npr,jpr,J0,Dpr,q1e,Gpr,Opr,Vpr,vt,Y0,Xpr,N1e,zpr,Qpr,Ic,Wpr,j1e,Hpr,Upr,KX,Jpr,Ypr,Kpr,D1e,Zpr,e_r,K0,o_r,To,Z0,r_r,G1e,t_r,a_r,En,n_r,O1e,s_r,l_r,V1e,i_r,d_r,X1e,c_r,f_r,m_r,ae,tT,z1e,g_r,h_r,ZX,p_r,__r,u_r,aT,Q1e,b_r,F_r,ez,v_r,T_r,M_r,nT,W1e,E_r,C_r,oz,w_r,A_r,y_r,sT,H1e,L_r,x_r,rz,k_r,S_r,R_r,lT,U1e,B_r,P_r,tz,$_r,I_r,q_r,iT,J1e,N_r,j_r,az,D_r,G_r,O_r,dT,Y1e,V_r,X_r,nz,z_r,Q_r,W_r,cT,K1e,H_r,U_r,sz,J_r,Y_r,K_r,fT,Z1e,Z_r,eur,lz,our,rur,tur,mT,e7e,aur,nur,iz,sur,lur,iur,gT,o7e,dur,cur,dz,fur,mur,gur,hT,r7e,hur,pur,cz,_ur,uur,bur,pT,t7e,Fur,vur,fz,Tur,Mur,Eur,_T,a7e,Cur,wur,mz,Aur,yur,Lur,uT,n7e,xur,kur,gz,Sur,Rur,Bur,bT,s7e,Pur,$ur,hz,Iur,qur,Nur,FT,l7e,jur,Dur,pz,Gur,Our,Vur,i7e,Xur,zur,ey,_Be,qc,vT,d7e,oy,Qur,c7e,Wur,uBe,yr,ry,Hur,Nc,Uur,_z,Jur,Yur,uz,Kur,Zur,e1r,ty,o1r,f7e,r1r,t1r,a1r,Tt,ay,n1r,m7e,s1r,l1r,jc,i1r,g7e,d1r,c1r,bz,f1r,m1r,g1r,h7e,h1r,p1r,ny,_1r,Mo,sy,u1r,p7e,b1r,F1r,Cn,v1r,_7e,T1r,M1r,u7e,E1r,C1r,b7e,w1r,A1r,y1r,F7e,TT,v7e,L1r,x1r,Fz,k1r,S1r,R1r,T7e,B1r,P1r,ly,bBe,Dc,MT,M7e,iy,$1r,E7e,I1r,FBe,Lr,dy,q1r,Gc,N1r,vz,j1r,D1r,Tz,G1r,O1r,V1r,cy,X1r,C7e,z1r,Q1r,W1r,Mt,fy,H1r,w7e,U1r,J1r,Oc,Y1r,A7e,K1r,Z1r,Mz,e7r,o7r,r7r,y7e,t7r,a7r,my,n7r,Eo,gy,s7r,L7e,l7r,i7r,wn,d7r,x7e,c7r,f7r,k7e,m7r,g7r,S7e,h7r,p7r,_7r,Y,ET,R7e,u7r,b7r,Ez,F7r,v7r,T7r,CT,B7e,M7r,E7r,Cz,C7r,w7r,A7r,wT,P7e,y7r,L7r,wz,x7r,k7r,S7r,AT,$7e,R7r,B7r,Az,P7r,$7r,I7r,yT,I7e,q7r,N7r,yz,j7r,D7r,G7r,LT,q7e,O7r,V7r,Lz,X7r,z7r,Q7r,xT,N7e,W7r,H7r,xz,U7r,J7r,Y7r,kT,j7e,K7r,Z7r,kz,ebr,obr,rbr,ST,D7e,tbr,abr,Sz,nbr,sbr,lbr,RT,G7e,ibr,dbr,Rz,cbr,fbr,mbr,BT,O7e,gbr,hbr,Bz,pbr,_br,ubr,PT,V7e,bbr,Fbr,Pz,vbr,Tbr,Mbr,$T,X7e,Ebr,Cbr,$z,wbr,Abr,ybr,IT,z7e,Lbr,xbr,Iz,kbr,Sbr,Rbr,qT,Q7e,Bbr,Pbr,qz,$br,Ibr,qbr,NT,W7e,Nbr,jbr,Nz,Dbr,Gbr,Obr,jT,H7e,Vbr,Xbr,jz,zbr,Qbr,Wbr,DT,U7e,Hbr,Ubr,Dz,Jbr,Ybr,Kbr,GT,J7e,Zbr,e5r,Gz,o5r,r5r,t5r,OT,Y7e,a5r,n5r,Oz,s5r,l5r,i5r,K7e,d5r,c5r,hy,vBe,Vc,VT,Z7e,py,f5r,ebe,m5r,TBe,xr,_y,g5r,Xc,h5r,Vz,p5r,_5r,Xz,u5r,b5r,F5r,uy,v5r,obe,T5r,M5r,E5r,Et,by,C5r,rbe,w5r,A5r,zc,y5r,tbe,L5r,x5r,zz,k5r,S5r,R5r,abe,B5r,P5r,Fy,$5r,Co,vy,I5r,nbe,q5r,N5r,An,j5r,sbe,D5r,G5r,lbe,O5r,V5r,ibe,X5r,z5r,Q5r,K,XT,dbe,W5r,H5r,Qz,U5r,J5r,Y5r,zT,cbe,K5r,Z5r,Wz,e3r,o3r,r3r,QT,fbe,t3r,a3r,Hz,n3r,s3r,l3r,WT,mbe,i3r,d3r,Uz,c3r,f3r,m3r,HT,gbe,g3r,h3r,Jz,p3r,_3r,u3r,UT,hbe,b3r,F3r,Yz,v3r,T3r,M3r,JT,pbe,E3r,C3r,Kz,w3r,A3r,y3r,YT,_be,L3r,x3r,Zz,k3r,S3r,R3r,KT,ube,B3r,P3r,eQ,$3r,I3r,q3r,ZT,bbe,N3r,j3r,oQ,D3r,G3r,O3r,eM,Fbe,V3r,X3r,rQ,z3r,Q3r,W3r,oM,vbe,H3r,U3r,tQ,J3r,Y3r,K3r,rM,Tbe,Z3r,e2r,aQ,o2r,r2r,t2r,tM,Mbe,a2r,n2r,nQ,s2r,l2r,i2r,aM,Ebe,d2r,c2r,sQ,f2r,m2r,g2r,nM,Cbe,h2r,p2r,lQ,_2r,u2r,b2r,sM,wbe,F2r,v2r,iQ,T2r,M2r,E2r,lM,Abe,C2r,w2r,dQ,A2r,y2r,L2r,iM,ybe,x2r,k2r,cQ,S2r,R2r,B2r,dM,Lbe,P2r,$2r,fQ,I2r,q2r,N2r,xbe,j2r,D2r,Ty,MBe,Qc,cM,kbe,My,G2r,Sbe,O2r,EBe,kr,Ey,V2r,Wc,X2r,mQ,z2r,Q2r,gQ,W2r,H2r,U2r,Cy,J2r,Rbe,Y2r,K2r,Z2r,Ct,wy,eFr,Bbe,oFr,rFr,Hc,tFr,Pbe,aFr,nFr,hQ,sFr,lFr,iFr,$be,dFr,cFr,Ay,fFr,wo,yy,mFr,Ibe,gFr,hFr,yn,pFr,qbe,_Fr,uFr,Nbe,bFr,FFr,jbe,vFr,TFr,MFr,Dbe,fM,Gbe,EFr,CFr,pQ,wFr,AFr,yFr,Obe,LFr,xFr,Ly,CBe,Uc,mM,Vbe,xy,kFr,Xbe,SFr,wBe,Sr,ky,RFr,Jc,BFr,_Q,PFr,$Fr,uQ,IFr,qFr,NFr,Sy,jFr,zbe,DFr,GFr,OFr,wt,Ry,VFr,Qbe,XFr,zFr,Yc,QFr,Wbe,WFr,HFr,bQ,UFr,JFr,YFr,Hbe,KFr,ZFr,By,evr,Ao,Py,ovr,Ube,rvr,tvr,Ln,avr,Jbe,nvr,svr,Ybe,lvr,ivr,Kbe,dvr,cvr,fvr,Zbe,gM,e5e,mvr,gvr,FQ,hvr,pvr,_vr,o5e,uvr,bvr,$y,ABe,Kc,hM,r5e,Iy,Fvr,t5e,vvr,yBe,Rr,qy,Tvr,Zc,Mvr,vQ,Evr,Cvr,TQ,wvr,Avr,yvr,Ny,Lvr,a5e,xvr,kvr,Svr,At,jy,Rvr,n5e,Bvr,Pvr,ef,$vr,s5e,Ivr,qvr,MQ,Nvr,jvr,Dvr,l5e,Gvr,Ovr,Dy,Vvr,yo,Gy,Xvr,i5e,zvr,Qvr,xn,Wvr,d5e,Hvr,Uvr,c5e,Jvr,Yvr,f5e,Kvr,Zvr,eTr,z,pM,m5e,oTr,rTr,EQ,tTr,aTr,nTr,_M,g5e,sTr,lTr,CQ,iTr,dTr,cTr,uM,h5e,fTr,mTr,wQ,gTr,hTr,pTr,bM,p5e,_Tr,uTr,AQ,bTr,FTr,vTr,FM,_5e,TTr,MTr,yQ,ETr,CTr,wTr,vM,u5e,ATr,yTr,LQ,LTr,xTr,kTr,TM,b5e,STr,RTr,xQ,BTr,PTr,$Tr,MM,F5e,ITr,qTr,kQ,NTr,jTr,DTr,EM,v5e,GTr,OTr,SQ,VTr,XTr,zTr,CM,T5e,QTr,WTr,RQ,HTr,UTr,JTr,wM,M5e,YTr,KTr,BQ,ZTr,eMr,oMr,AM,E5e,rMr,tMr,PQ,aMr,nMr,sMr,yM,C5e,lMr,iMr,$Q,dMr,cMr,fMr,LM,w5e,mMr,gMr,IQ,hMr,pMr,_Mr,xM,A5e,uMr,bMr,qQ,FMr,vMr,TMr,kM,y5e,MMr,EMr,NQ,CMr,wMr,AMr,SM,L5e,yMr,LMr,jQ,xMr,kMr,SMr,RM,x5e,RMr,BMr,DQ,PMr,$Mr,IMr,BM,k5e,qMr,NMr,GQ,jMr,DMr,GMr,PM,S5e,OMr,VMr,OQ,XMr,zMr,QMr,$M,R5e,WMr,HMr,VQ,UMr,JMr,YMr,IM,B5e,KMr,ZMr,XQ,e4r,o4r,r4r,qM,P5e,t4r,a4r,zQ,n4r,s4r,l4r,NM,$5e,i4r,d4r,QQ,c4r,f4r,m4r,jM,I5e,g4r,h4r,WQ,p4r,_4r,u4r,q5e,b4r,F4r,Oy,LBe,of,DM,N5e,Vy,v4r,j5e,T4r,xBe,Br,Xy,M4r,rf,E4r,HQ,C4r,w4r,UQ,A4r,y4r,L4r,zy,x4r,D5e,k4r,S4r,R4r,yt,Qy,B4r,G5e,P4r,$4r,tf,I4r,O5e,q4r,N4r,JQ,j4r,D4r,G4r,V5e,O4r,V4r,Wy,X4r,Lo,Hy,z4r,X5e,Q4r,W4r,kn,H4r,z5e,U4r,J4r,Q5e,Y4r,K4r,W5e,Z4r,eEr,oEr,ca,GM,H5e,rEr,tEr,YQ,aEr,nEr,sEr,OM,U5e,lEr,iEr,KQ,dEr,cEr,fEr,VM,J5e,mEr,gEr,ZQ,hEr,pEr,_Er,XM,Y5e,uEr,bEr,eW,FEr,vEr,TEr,zM,K5e,MEr,EEr,oW,CEr,wEr,AEr,Z5e,yEr,LEr,Uy,kBe,af,QM,e3e,Jy,xEr,o3e,kEr,SBe,Pr,Yy,SEr,nf,REr,rW,BEr,PEr,tW,$Er,IEr,qEr,Ky,NEr,r3e,jEr,DEr,GEr,Lt,Zy,OEr,t3e,VEr,XEr,sf,zEr,a3e,QEr,WEr,aW,HEr,UEr,JEr,n3e,YEr,KEr,eL,ZEr,xo,oL,eCr,s3e,oCr,rCr,Sn,tCr,l3e,aCr,nCr,i3e,sCr,lCr,d3e,iCr,dCr,cCr,fe,WM,c3e,fCr,mCr,nW,gCr,hCr,pCr,HM,f3e,_Cr,uCr,sW,bCr,FCr,vCr,UM,m3e,TCr,MCr,lW,ECr,CCr,wCr,JM,g3e,ACr,yCr,iW,LCr,xCr,kCr,YM,h3e,SCr,RCr,dW,BCr,PCr,$Cr,KM,p3e,ICr,qCr,cW,NCr,jCr,DCr,ZM,_3e,GCr,OCr,fW,VCr,XCr,zCr,e4,u3e,QCr,WCr,mW,HCr,UCr,JCr,o4,b3e,YCr,KCr,gW,ZCr,ewr,owr,r4,F3e,rwr,twr,hW,awr,nwr,swr,t4,v3e,lwr,iwr,pW,dwr,cwr,fwr,a4,T3e,mwr,gwr,_W,hwr,pwr,_wr,M3e,uwr,bwr,rL,RBe,lf,n4,E3e,tL,Fwr,C3e,vwr,BBe,$r,aL,Twr,df,Mwr,uW,Ewr,Cwr,bW,wwr,Awr,ywr,nL,Lwr,w3e,xwr,kwr,Swr,xt,sL,Rwr,A3e,Bwr,Pwr,cf,$wr,y3e,Iwr,qwr,FW,Nwr,jwr,Dwr,L3e,Gwr,Owr,lL,Vwr,ko,iL,Xwr,x3e,zwr,Qwr,Rn,Wwr,k3e,Hwr,Uwr,S3e,Jwr,Ywr,R3e,Kwr,Zwr,eAr,be,s4,B3e,oAr,rAr,vW,tAr,aAr,nAr,l4,P3e,sAr,lAr,TW,iAr,dAr,cAr,i4,$3e,fAr,mAr,MW,gAr,hAr,pAr,d4,I3e,_Ar,uAr,EW,bAr,FAr,vAr,c4,q3e,TAr,MAr,CW,EAr,CAr,wAr,f4,N3e,AAr,yAr,wW,LAr,xAr,kAr,m4,j3e,SAr,RAr,AW,BAr,PAr,$Ar,g4,D3e,IAr,qAr,yW,NAr,jAr,DAr,h4,G3e,GAr,OAr,LW,VAr,XAr,zAr,p4,O3e,QAr,WAr,xW,HAr,UAr,JAr,V3e,YAr,KAr,dL,PBe,ff,_4,X3e,cL,ZAr,z3e,e6r,$Be,Ir,fL,o6r,mf,r6r,kW,t6r,a6r,SW,n6r,s6r,l6r,mL,i6r,Q3e,d6r,c6r,f6r,kt,gL,m6r,W3e,g6r,h6r,gf,p6r,H3e,_6r,u6r,RW,b6r,F6r,v6r,U3e,T6r,M6r,hL,E6r,So,pL,C6r,J3e,w6r,A6r,Bn,y6r,Y3e,L6r,x6r,K3e,k6r,S6r,Z3e,R6r,B6r,P6r,Ee,u4,e2e,$6r,I6r,BW,q6r,N6r,j6r,b4,o2e,D6r,G6r,PW,O6r,V6r,X6r,F4,r2e,z6r,Q6r,$W,W6r,H6r,U6r,v4,t2e,J6r,Y6r,IW,K6r,Z6r,e0r,T4,a2e,o0r,r0r,qW,t0r,a0r,n0r,M4,n2e,s0r,l0r,NW,i0r,d0r,c0r,E4,s2e,f0r,m0r,jW,g0r,h0r,p0r,C4,l2e,_0r,u0r,DW,b0r,F0r,v0r,w4,i2e,T0r,M0r,GW,E0r,C0r,w0r,d2e,A0r,y0r,_L,IBe,hf,A4,c2e,uL,L0r,f2e,x0r,qBe,qr,bL,k0r,pf,S0r,OW,R0r,B0r,VW,P0r,$0r,I0r,FL,q0r,m2e,N0r,j0r,D0r,St,vL,G0r,g2e,O0r,V0r,_f,X0r,h2e,z0r,Q0r,XW,W0r,H0r,U0r,p2e,J0r,Y0r,TL,K0r,Ro,ML,Z0r,_2e,eyr,oyr,Pn,ryr,u2e,tyr,ayr,b2e,nyr,syr,F2e,lyr,iyr,dyr,Fe,y4,v2e,cyr,fyr,zW,myr,gyr,hyr,L4,T2e,pyr,_yr,QW,uyr,byr,Fyr,x4,M2e,vyr,Tyr,WW,Myr,Eyr,Cyr,k4,E2e,wyr,Ayr,HW,yyr,Lyr,xyr,S4,C2e,kyr,Syr,UW,Ryr,Byr,Pyr,R4,w2e,$yr,Iyr,JW,qyr,Nyr,jyr,B4,A2e,Dyr,Gyr,YW,Oyr,Vyr,Xyr,P4,y2e,zyr,Qyr,KW,Wyr,Hyr,Uyr,$4,L2e,Jyr,Yyr,ZW,Kyr,Zyr,eLr,I4,x2e,oLr,rLr,eH,tLr,aLr,nLr,k2e,sLr,lLr,EL,NBe,uf,q4,S2e,CL,iLr,R2e,dLr,jBe,Nr,wL,cLr,bf,fLr,oH,mLr,gLr,rH,hLr,pLr,_Lr,AL,uLr,B2e,bLr,FLr,vLr,Rt,yL,TLr,P2e,MLr,ELr,Ff,CLr,$2e,wLr,ALr,tH,yLr,LLr,xLr,I2e,kLr,SLr,LL,RLr,Bo,xL,BLr,q2e,PLr,$Lr,$n,ILr,N2e,qLr,NLr,j2e,jLr,DLr,D2e,GLr,OLr,VLr,ve,N4,G2e,XLr,zLr,aH,QLr,WLr,HLr,j4,O2e,ULr,JLr,nH,YLr,KLr,ZLr,D4,V2e,e8r,o8r,sH,r8r,t8r,a8r,G4,X2e,n8r,s8r,lH,l8r,i8r,d8r,O4,z2e,c8r,f8r,iH,m8r,g8r,h8r,V4,Q2e,p8r,_8r,dH,u8r,b8r,F8r,X4,W2e,v8r,T8r,cH,M8r,E8r,C8r,z4,H2e,w8r,A8r,fH,y8r,L8r,x8r,Q4,U2e,k8r,S8r,mH,R8r,B8r,P8r,W4,J2e,$8r,I8r,gH,q8r,N8r,j8r,Y2e,D8r,G8r,kL,DBe,vf,H4,K2e,SL,O8r,Z2e,V8r,GBe,jr,RL,X8r,Tf,z8r,hH,Q8r,W8r,pH,H8r,U8r,J8r,BL,Y8r,eFe,K8r,Z8r,e9r,Bt,PL,o9r,oFe,r9r,t9r,Mf,a9r,rFe,n9r,s9r,_H,l9r,i9r,d9r,tFe,c9r,f9r,$L,m9r,Po,IL,g9r,aFe,h9r,p9r,In,_9r,nFe,u9r,b9r,sFe,F9r,v9r,lFe,T9r,M9r,E9r,Be,U4,iFe,C9r,w9r,uH,A9r,y9r,L9r,J4,dFe,x9r,k9r,bH,S9r,R9r,B9r,Y4,cFe,P9r,$9r,FH,I9r,q9r,N9r,K4,fFe,j9r,D9r,vH,G9r,O9r,V9r,Z4,mFe,X9r,z9r,TH,Q9r,W9r,H9r,eE,gFe,U9r,J9r,MH,Y9r,K9r,Z9r,oE,hFe,exr,oxr,EH,rxr,txr,axr,rE,pFe,nxr,sxr,CH,lxr,ixr,dxr,_Fe,cxr,fxr,qL,OBe,Ef,tE,uFe,NL,mxr,bFe,gxr,VBe,Dr,jL,hxr,Cf,pxr,wH,_xr,uxr,AH,bxr,Fxr,vxr,DL,Txr,FFe,Mxr,Exr,Cxr,Pt,GL,wxr,vFe,Axr,yxr,wf,Lxr,TFe,xxr,kxr,yH,Sxr,Rxr,Bxr,MFe,Pxr,$xr,OL,Ixr,$o,VL,qxr,EFe,Nxr,jxr,qn,Dxr,CFe,Gxr,Oxr,wFe,Vxr,Xxr,AFe,zxr,Qxr,Wxr,Pe,aE,yFe,Hxr,Uxr,LH,Jxr,Yxr,Kxr,nE,LFe,Zxr,ekr,xH,okr,rkr,tkr,sE,xFe,akr,nkr,kH,skr,lkr,ikr,lE,kFe,dkr,ckr,SH,fkr,mkr,gkr,iE,SFe,hkr,pkr,RH,_kr,ukr,bkr,dE,RFe,Fkr,vkr,BH,Tkr,Mkr,Ekr,cE,BFe,Ckr,wkr,PH,Akr,ykr,Lkr,fE,PFe,xkr,kkr,$H,Skr,Rkr,Bkr,$Fe,Pkr,$kr,XL,XBe,Af,mE,IFe,zL,Ikr,qFe,qkr,zBe,Gr,QL,Nkr,yf,jkr,IH,Dkr,Gkr,qH,Okr,Vkr,Xkr,WL,zkr,NFe,Qkr,Wkr,Hkr,$t,HL,Ukr,jFe,Jkr,Ykr,Lf,Kkr,DFe,Zkr,eSr,NH,oSr,rSr,tSr,GFe,aSr,nSr,UL,sSr,Io,JL,lSr,OFe,iSr,dSr,Nn,cSr,VFe,fSr,mSr,XFe,gSr,hSr,zFe,pSr,_Sr,uSr,QFe,gE,WFe,bSr,FSr,jH,vSr,TSr,MSr,HFe,ESr,CSr,YL,QBe,xf,hE,UFe,KL,wSr,JFe,ASr,WBe,Or,ZL,ySr,kf,LSr,DH,xSr,kSr,GH,SSr,RSr,BSr,e8,PSr,YFe,$Sr,ISr,qSr,It,o8,NSr,KFe,jSr,DSr,Sf,GSr,ZFe,OSr,VSr,OH,XSr,zSr,QSr,eve,WSr,HSr,r8,USr,qo,t8,JSr,ove,YSr,KSr,jn,ZSr,rve,eRr,oRr,tve,rRr,tRr,ave,aRr,nRr,sRr,a8,pE,nve,lRr,iRr,VH,dRr,cRr,fRr,_E,sve,mRr,gRr,XH,hRr,pRr,_Rr,lve,uRr,bRr,n8,HBe,Rf,uE,ive,s8,FRr,dve,vRr,UBe,Vr,l8,TRr,Bf,MRr,zH,ERr,CRr,QH,wRr,ARr,yRr,i8,LRr,cve,xRr,kRr,SRr,qt,d8,RRr,fve,BRr,PRr,Pf,$Rr,mve,IRr,qRr,WH,NRr,jRr,DRr,gve,GRr,ORr,c8,VRr,No,f8,XRr,hve,zRr,QRr,Dn,WRr,pve,HRr,URr,_ve,JRr,YRr,uve,KRr,ZRr,eBr,bve,bE,Fve,oBr,rBr,HH,tBr,aBr,nBr,vve,sBr,lBr,m8,JBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),MC=new X({}),EC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new iBr({props:{warning:!0,$$slots:{default:[PEt]},$$scope:{ctx:If}}}),CC=new X({}),wC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L544"}}),LC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L567",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),xC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),kC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L689",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),SC=new X({}),RC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L352"}}),$C=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15773/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),IC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),qC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),NC=new X({}),jC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),OC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new iBr({props:{$$slots:{default:[$Et]},$$scope:{ctx:If}}}),VC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),XC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),zC=new X({}),QC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L70"}}),UC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),zh=new iBr({props:{$$slots:{default:[IEt]},$$scope:{ctx:If}}}),JC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),YC=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),KC=new X({}),ZC=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L708"}}),ow=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><code>FastSpeech2Config</code>configuration class: <code>FastSpeech2Model</code>(FastSpeech2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),tw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L715"}}),iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L730"}}),pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),uw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),vw=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L737"}}),Mw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),yw=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L744"}}),xw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Sw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),Pw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L753"}}),Iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Gw=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L787"}}),Vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new X({}),Hw=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L794"}}),Jw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L780"}}),tA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),nA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L762"}}),cA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),mA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L769"}}),uA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),FA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),MA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L803"}}),CA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),AA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),xA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L842"}}),SA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),BA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L849"}}),NA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),DA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L872"}}),zA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),WA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L856"}}),KA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),e6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r6=new X({}),t6=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L863"}}),n6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),l6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c6=new X({}),f6=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L881"}}),g6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),h6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),p6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new X({}),b6=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L888"}}),v6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),T6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),M6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new X({}),w6=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L835"}}),y6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),L6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),x6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new X({}),R6=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L810"}}),P6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),$6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),I6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new X({}),j6=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L817"}}),G6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),O6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),V6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z6=new X({}),Q6=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L826"}}),H6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),U6=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),J6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y6=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K6=new X({}),Z6=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),o0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),t0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),i0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),c0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new X({}),g0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),p0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),u0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),v0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),M0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),C0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),k0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),R0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),q0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),j0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),X0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Q0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Y0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Z0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),ay=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),sy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),fy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),gy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),by=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),vy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),yy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Py=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),qy=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),jy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Dy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Gy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),Xy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Qy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Hy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Zy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),oL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),sL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),iL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),gL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),hL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),pL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),vL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),ML=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),wL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),yL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),xL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),RL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),PL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),IL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),jL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),GL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),VL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),QL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),HL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),JL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),o8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),r8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),t8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s8=new X({}),l8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),d8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),f8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),bC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),FC=o("AutoConfig"),On=o(", "),Vn=a("a"),vC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),TC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),c9=o("will create a model that is an instance of "),Oi=a("a"),f9=o("BertModel"),m9=o("."),zo=l(),Ga=a("p"),g9=o("There is one class of "),Df=a("code"),h9=o("AutoModel"),iIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),USe=l(),Vi=a("h2"),Gf=a("a"),OJ=a("span"),f(MC.$$.fragment),dIe=l(),VJ=a("span"),cIe=o("Extending the Auto Classes"),JSe=l(),zn=a("p"),fIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XJ=a("code"),mIe=o("NewModel"),gIe=o(", make sure you have a "),zJ=a("code"),hIe=o("NewModelConfig"),pIe=o(` then you can add those to the auto
classes like this:`),YSe=l(),f(EC.$$.fragment),KSe=l(),p9=a("p"),_Ie=o("You will then be able to use the auto classes like you would usually do!"),ZSe=l(),f(Of.$$.fragment),eRe=l(),Xi=a("h2"),Vf=a("a"),QJ=a("span"),f(CC.$$.fragment),uIe=l(),WJ=a("span"),bIe=o("AutoConfig"),oRe=l(),Qo=a("div"),f(wC.$$.fragment),FIe=l(),AC=a("p"),vIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=a("a"),TIe=o("from_pretrained()"),MIe=o(" class method."),EIe=l(),yC=a("p"),CIe=o("This class cannot be instantiated directly using "),HJ=a("code"),wIe=o("__init__()"),AIe=o(" (throws an error)."),yIe=l(),mo=a("div"),f(LC.$$.fragment),LIe=l(),UJ=a("p"),xIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kIe=l(),zi=a("p"),SIe=o("The configuration class to instantiate is selected based on the "),JJ=a("code"),RIe=o("model_type"),BIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YJ=a("code"),PIe=o("pretrained_model_name_or_path"),$Ie=o(":"),IIe=l(),F=a("ul"),Xf=a("li"),KJ=a("strong"),qIe=o("albert"),NIe=o(" \u2014 "),u9=a("a"),jIe=o("AlbertConfig"),DIe=o(" (ALBERT model)"),GIe=l(),zf=a("li"),ZJ=a("strong"),OIe=o("bart"),VIe=o(" \u2014 "),b9=a("a"),XIe=o("BartConfig"),zIe=o(" (BART model)"),QIe=l(),Qf=a("li"),eY=a("strong"),WIe=o("beit"),HIe=o(" \u2014 "),F9=a("a"),UIe=o("BeitConfig"),JIe=o(" (BEiT model)"),YIe=l(),Wf=a("li"),oY=a("strong"),KIe=o("bert"),ZIe=o(" \u2014 "),v9=a("a"),eqe=o("BertConfig"),oqe=o(" (BERT model)"),rqe=l(),Hf=a("li"),rY=a("strong"),tqe=o("bert-generation"),aqe=o(" \u2014 "),T9=a("a"),nqe=o("BertGenerationConfig"),sqe=o(" (Bert Generation model)"),lqe=l(),Uf=a("li"),tY=a("strong"),iqe=o("big_bird"),dqe=o(" \u2014 "),M9=a("a"),cqe=o("BigBirdConfig"),fqe=o(" (BigBird model)"),mqe=l(),Jf=a("li"),aY=a("strong"),gqe=o("bigbird_pegasus"),hqe=o(" \u2014 "),E9=a("a"),pqe=o("BigBirdPegasusConfig"),_qe=o(" (BigBirdPegasus model)"),uqe=l(),Yf=a("li"),nY=a("strong"),bqe=o("blenderbot"),Fqe=o(" \u2014 "),C9=a("a"),vqe=o("BlenderbotConfig"),Tqe=o(" (Blenderbot model)"),Mqe=l(),Kf=a("li"),sY=a("strong"),Eqe=o("blenderbot-small"),Cqe=o(" \u2014 "),w9=a("a"),wqe=o("BlenderbotSmallConfig"),Aqe=o(" (BlenderbotSmall model)"),yqe=l(),Zf=a("li"),lY=a("strong"),Lqe=o("camembert"),xqe=o(" \u2014 "),A9=a("a"),kqe=o("CamembertConfig"),Sqe=o(" (CamemBERT model)"),Rqe=l(),em=a("li"),iY=a("strong"),Bqe=o("canine"),Pqe=o(" \u2014 "),y9=a("a"),$qe=o("CanineConfig"),Iqe=o(" (Canine model)"),qqe=l(),om=a("li"),dY=a("strong"),Nqe=o("clip"),jqe=o(" \u2014 "),L9=a("a"),Dqe=o("CLIPConfig"),Gqe=o(" (CLIP model)"),Oqe=l(),rm=a("li"),cY=a("strong"),Vqe=o("convbert"),Xqe=o(" \u2014 "),x9=a("a"),zqe=o("ConvBertConfig"),Qqe=o(" (ConvBERT model)"),Wqe=l(),tm=a("li"),fY=a("strong"),Hqe=o("convnext"),Uqe=o(" \u2014 "),k9=a("a"),Jqe=o("ConvNextConfig"),Yqe=o(" (ConvNext model)"),Kqe=l(),am=a("li"),mY=a("strong"),Zqe=o("ctrl"),eNe=o(" \u2014 "),S9=a("a"),oNe=o("CTRLConfig"),rNe=o(" (CTRL model)"),tNe=l(),nm=a("li"),gY=a("strong"),aNe=o("data2vec-audio"),nNe=o(" \u2014 "),R9=a("a"),sNe=o("Data2VecAudioConfig"),lNe=o(" (Data2VecAudio model)"),iNe=l(),sm=a("li"),hY=a("strong"),dNe=o("data2vec-text"),cNe=o(" \u2014 "),B9=a("a"),fNe=o("Data2VecTextConfig"),mNe=o(" (Data2VecText model)"),gNe=l(),lm=a("li"),pY=a("strong"),hNe=o("deberta"),pNe=o(" \u2014 "),P9=a("a"),_Ne=o("DebertaConfig"),uNe=o(" (DeBERTa model)"),bNe=l(),im=a("li"),_Y=a("strong"),FNe=o("deberta-v2"),vNe=o(" \u2014 "),$9=a("a"),TNe=o("DebertaV2Config"),MNe=o(" (DeBERTa-v2 model)"),ENe=l(),dm=a("li"),uY=a("strong"),CNe=o("decision_transformer"),wNe=o(" \u2014 "),I9=a("a"),ANe=o("DecisionTransformerConfig"),yNe=o(" (Decision Transformer model)"),LNe=l(),cm=a("li"),bY=a("strong"),xNe=o("deit"),kNe=o(" \u2014 "),q9=a("a"),SNe=o("DeiTConfig"),RNe=o(" (DeiT model)"),BNe=l(),fm=a("li"),FY=a("strong"),PNe=o("detr"),$Ne=o(" \u2014 "),N9=a("a"),INe=o("DetrConfig"),qNe=o(" (DETR model)"),NNe=l(),mm=a("li"),vY=a("strong"),jNe=o("distilbert"),DNe=o(" \u2014 "),j9=a("a"),GNe=o("DistilBertConfig"),ONe=o(" (DistilBERT model)"),VNe=l(),gm=a("li"),TY=a("strong"),XNe=o("dpr"),zNe=o(" \u2014 "),D9=a("a"),QNe=o("DPRConfig"),WNe=o(" (DPR model)"),HNe=l(),hm=a("li"),MY=a("strong"),UNe=o("dpt"),JNe=o(" \u2014 "),G9=a("a"),YNe=o("DPTConfig"),KNe=o(" (DPT model)"),ZNe=l(),pm=a("li"),EY=a("strong"),eje=o("electra"),oje=o(" \u2014 "),O9=a("a"),rje=o("ElectraConfig"),tje=o(" (ELECTRA model)"),aje=l(),_m=a("li"),CY=a("strong"),nje=o("encoder-decoder"),sje=o(" \u2014 "),V9=a("a"),lje=o("EncoderDecoderConfig"),ije=o(" (Encoder decoder model)"),dje=l(),um=a("li"),wY=a("strong"),cje=o("fastspeech2"),fje=o(" \u2014 "),AY=a("code"),mje=o("FastSpeech2Config"),gje=o("(FastSpeech2 model)"),hje=l(),bm=a("li"),yY=a("strong"),pje=o("flaubert"),_je=o(" \u2014 "),X9=a("a"),uje=o("FlaubertConfig"),bje=o(" (FlauBERT model)"),Fje=l(),Fm=a("li"),LY=a("strong"),vje=o("fnet"),Tje=o(" \u2014 "),z9=a("a"),Mje=o("FNetConfig"),Eje=o(" (FNet model)"),Cje=l(),vm=a("li"),xY=a("strong"),wje=o("fsmt"),Aje=o(" \u2014 "),Q9=a("a"),yje=o("FSMTConfig"),Lje=o(" (FairSeq Machine-Translation model)"),xje=l(),Tm=a("li"),kY=a("strong"),kje=o("funnel"),Sje=o(" \u2014 "),W9=a("a"),Rje=o("FunnelConfig"),Bje=o(" (Funnel Transformer model)"),Pje=l(),Mm=a("li"),SY=a("strong"),$je=o("glpn"),Ije=o(" \u2014 "),H9=a("a"),qje=o("GLPNConfig"),Nje=o(" (GLPN model)"),jje=l(),Em=a("li"),RY=a("strong"),Dje=o("gpt2"),Gje=o(" \u2014 "),U9=a("a"),Oje=o("GPT2Config"),Vje=o(" (OpenAI GPT-2 model)"),Xje=l(),Cm=a("li"),BY=a("strong"),zje=o("gpt_neo"),Qje=o(" \u2014 "),J9=a("a"),Wje=o("GPTNeoConfig"),Hje=o(" (GPT Neo model)"),Uje=l(),wm=a("li"),PY=a("strong"),Jje=o("gptj"),Yje=o(" \u2014 "),Y9=a("a"),Kje=o("GPTJConfig"),Zje=o(" (GPT-J model)"),eDe=l(),Am=a("li"),$Y=a("strong"),oDe=o("hubert"),rDe=o(" \u2014 "),K9=a("a"),tDe=o("HubertConfig"),aDe=o(" (Hubert model)"),nDe=l(),ym=a("li"),IY=a("strong"),sDe=o("ibert"),lDe=o(" \u2014 "),Z9=a("a"),iDe=o("IBertConfig"),dDe=o(" (I-BERT model)"),cDe=l(),Lm=a("li"),qY=a("strong"),fDe=o("imagegpt"),mDe=o(" \u2014 "),ex=a("a"),gDe=o("ImageGPTConfig"),hDe=o(" (ImageGPT model)"),pDe=l(),xm=a("li"),NY=a("strong"),_De=o("layoutlm"),uDe=o(" \u2014 "),ox=a("a"),bDe=o("LayoutLMConfig"),FDe=o(" (LayoutLM model)"),vDe=l(),km=a("li"),jY=a("strong"),TDe=o("layoutlmv2"),MDe=o(" \u2014 "),rx=a("a"),EDe=o("LayoutLMv2Config"),CDe=o(" (LayoutLMv2 model)"),wDe=l(),Sm=a("li"),DY=a("strong"),ADe=o("led"),yDe=o(" \u2014 "),tx=a("a"),LDe=o("LEDConfig"),xDe=o(" (LED model)"),kDe=l(),Rm=a("li"),GY=a("strong"),SDe=o("longformer"),RDe=o(" \u2014 "),ax=a("a"),BDe=o("LongformerConfig"),PDe=o(" (Longformer model)"),$De=l(),Bm=a("li"),OY=a("strong"),IDe=o("luke"),qDe=o(" \u2014 "),nx=a("a"),NDe=o("LukeConfig"),jDe=o(" (LUKE model)"),DDe=l(),Pm=a("li"),VY=a("strong"),GDe=o("lxmert"),ODe=o(" \u2014 "),sx=a("a"),VDe=o("LxmertConfig"),XDe=o(" (LXMERT model)"),zDe=l(),$m=a("li"),XY=a("strong"),QDe=o("m2m_100"),WDe=o(" \u2014 "),lx=a("a"),HDe=o("M2M100Config"),UDe=o(" (M2M100 model)"),JDe=l(),Im=a("li"),zY=a("strong"),YDe=o("marian"),KDe=o(" \u2014 "),ix=a("a"),ZDe=o("MarianConfig"),eGe=o(" (Marian model)"),oGe=l(),qm=a("li"),QY=a("strong"),rGe=o("maskformer"),tGe=o(" \u2014 "),dx=a("a"),aGe=o("MaskFormerConfig"),nGe=o(" (MaskFormer model)"),sGe=l(),Nm=a("li"),WY=a("strong"),lGe=o("mbart"),iGe=o(" \u2014 "),cx=a("a"),dGe=o("MBartConfig"),cGe=o(" (mBART model)"),fGe=l(),jm=a("li"),HY=a("strong"),mGe=o("megatron-bert"),gGe=o(" \u2014 "),fx=a("a"),hGe=o("MegatronBertConfig"),pGe=o(" (MegatronBert model)"),_Ge=l(),Dm=a("li"),UY=a("strong"),uGe=o("mobilebert"),bGe=o(" \u2014 "),mx=a("a"),FGe=o("MobileBertConfig"),vGe=o(" (MobileBERT model)"),TGe=l(),Gm=a("li"),JY=a("strong"),MGe=o("mpnet"),EGe=o(" \u2014 "),gx=a("a"),CGe=o("MPNetConfig"),wGe=o(" (MPNet model)"),AGe=l(),Om=a("li"),YY=a("strong"),yGe=o("mt5"),LGe=o(" \u2014 "),hx=a("a"),xGe=o("MT5Config"),kGe=o(" (mT5 model)"),SGe=l(),Vm=a("li"),KY=a("strong"),RGe=o("nystromformer"),BGe=o(" \u2014 "),px=a("a"),PGe=o("NystromformerConfig"),$Ge=o(" (Nystromformer model)"),IGe=l(),Xm=a("li"),ZY=a("strong"),qGe=o("openai-gpt"),NGe=o(" \u2014 "),_x=a("a"),jGe=o("OpenAIGPTConfig"),DGe=o(" (OpenAI GPT model)"),GGe=l(),zm=a("li"),eK=a("strong"),OGe=o("pegasus"),VGe=o(" \u2014 "),ux=a("a"),XGe=o("PegasusConfig"),zGe=o(" (Pegasus model)"),QGe=l(),Qm=a("li"),oK=a("strong"),WGe=o("perceiver"),HGe=o(" \u2014 "),bx=a("a"),UGe=o("PerceiverConfig"),JGe=o(" (Perceiver model)"),YGe=l(),Wm=a("li"),rK=a("strong"),KGe=o("plbart"),ZGe=o(" \u2014 "),Fx=a("a"),eOe=o("PLBartConfig"),oOe=o(" (PLBart model)"),rOe=l(),Hm=a("li"),tK=a("strong"),tOe=o("poolformer"),aOe=o(" \u2014 "),vx=a("a"),nOe=o("PoolFormerConfig"),sOe=o(" (PoolFormer model)"),lOe=l(),Um=a("li"),aK=a("strong"),iOe=o("prophetnet"),dOe=o(" \u2014 "),Tx=a("a"),cOe=o("ProphetNetConfig"),fOe=o(" (ProphetNet model)"),mOe=l(),Jm=a("li"),nK=a("strong"),gOe=o("qdqbert"),hOe=o(" \u2014 "),Mx=a("a"),pOe=o("QDQBertConfig"),_Oe=o(" (QDQBert model)"),uOe=l(),Ym=a("li"),sK=a("strong"),bOe=o("rag"),FOe=o(" \u2014 "),Ex=a("a"),vOe=o("RagConfig"),TOe=o(" (RAG model)"),MOe=l(),Km=a("li"),lK=a("strong"),EOe=o("realm"),COe=o(" \u2014 "),Cx=a("a"),wOe=o("RealmConfig"),AOe=o(" (Realm model)"),yOe=l(),Zm=a("li"),iK=a("strong"),LOe=o("reformer"),xOe=o(" \u2014 "),wx=a("a"),kOe=o("ReformerConfig"),SOe=o(" (Reformer model)"),ROe=l(),eg=a("li"),dK=a("strong"),BOe=o("rembert"),POe=o(" \u2014 "),Ax=a("a"),$Oe=o("RemBertConfig"),IOe=o(" (RemBERT model)"),qOe=l(),og=a("li"),cK=a("strong"),NOe=o("resnet"),jOe=o(" \u2014 "),yx=a("a"),DOe=o("ResNetConfig"),GOe=o(" (ResNet model)"),OOe=l(),rg=a("li"),fK=a("strong"),VOe=o("retribert"),XOe=o(" \u2014 "),Lx=a("a"),zOe=o("RetriBertConfig"),QOe=o(" (RetriBERT model)"),WOe=l(),tg=a("li"),mK=a("strong"),HOe=o("roberta"),UOe=o(" \u2014 "),xx=a("a"),JOe=o("RobertaConfig"),YOe=o(" (RoBERTa model)"),KOe=l(),ag=a("li"),gK=a("strong"),ZOe=o("roformer"),eVe=o(" \u2014 "),kx=a("a"),oVe=o("RoFormerConfig"),rVe=o(" (RoFormer model)"),tVe=l(),ng=a("li"),hK=a("strong"),aVe=o("segformer"),nVe=o(" \u2014 "),Sx=a("a"),sVe=o("SegformerConfig"),lVe=o(" (SegFormer model)"),iVe=l(),sg=a("li"),pK=a("strong"),dVe=o("sew"),cVe=o(" \u2014 "),Rx=a("a"),fVe=o("SEWConfig"),mVe=o(" (SEW model)"),gVe=l(),lg=a("li"),_K=a("strong"),hVe=o("sew-d"),pVe=o(" \u2014 "),Bx=a("a"),_Ve=o("SEWDConfig"),uVe=o(" (SEW-D model)"),bVe=l(),ig=a("li"),uK=a("strong"),FVe=o("speech-encoder-decoder"),vVe=o(" \u2014 "),Px=a("a"),TVe=o("SpeechEncoderDecoderConfig"),MVe=o(" (Speech Encoder decoder model)"),EVe=l(),dg=a("li"),bK=a("strong"),CVe=o("speech_to_text"),wVe=o(" \u2014 "),$x=a("a"),AVe=o("Speech2TextConfig"),yVe=o(" (Speech2Text model)"),LVe=l(),cg=a("li"),FK=a("strong"),xVe=o("speech_to_text_2"),kVe=o(" \u2014 "),Ix=a("a"),SVe=o("Speech2Text2Config"),RVe=o(" (Speech2Text2 model)"),BVe=l(),fg=a("li"),vK=a("strong"),PVe=o("splinter"),$Ve=o(" \u2014 "),qx=a("a"),IVe=o("SplinterConfig"),qVe=o(" (Splinter model)"),NVe=l(),mg=a("li"),TK=a("strong"),jVe=o("squeezebert"),DVe=o(" \u2014 "),Nx=a("a"),GVe=o("SqueezeBertConfig"),OVe=o(" (SqueezeBERT model)"),VVe=l(),gg=a("li"),MK=a("strong"),XVe=o("swin"),zVe=o(" \u2014 "),jx=a("a"),QVe=o("SwinConfig"),WVe=o(" (Swin model)"),HVe=l(),hg=a("li"),EK=a("strong"),UVe=o("t5"),JVe=o(" \u2014 "),Dx=a("a"),YVe=o("T5Config"),KVe=o(" (T5 model)"),ZVe=l(),pg=a("li"),CK=a("strong"),eXe=o("tapas"),oXe=o(" \u2014 "),Gx=a("a"),rXe=o("TapasConfig"),tXe=o(" (TAPAS model)"),aXe=l(),_g=a("li"),wK=a("strong"),nXe=o("transfo-xl"),sXe=o(" \u2014 "),Ox=a("a"),lXe=o("TransfoXLConfig"),iXe=o(" (Transformer-XL model)"),dXe=l(),ug=a("li"),AK=a("strong"),cXe=o("trocr"),fXe=o(" \u2014 "),Vx=a("a"),mXe=o("TrOCRConfig"),gXe=o(" (TrOCR model)"),hXe=l(),bg=a("li"),yK=a("strong"),pXe=o("unispeech"),_Xe=o(" \u2014 "),Xx=a("a"),uXe=o("UniSpeechConfig"),bXe=o(" (UniSpeech model)"),FXe=l(),Fg=a("li"),LK=a("strong"),vXe=o("unispeech-sat"),TXe=o(" \u2014 "),zx=a("a"),MXe=o("UniSpeechSatConfig"),EXe=o(" (UniSpeechSat model)"),CXe=l(),vg=a("li"),xK=a("strong"),wXe=o("van"),AXe=o(" \u2014 "),Qx=a("a"),yXe=o("VanConfig"),LXe=o(" (VAN model)"),xXe=l(),Tg=a("li"),kK=a("strong"),kXe=o("vilt"),SXe=o(" \u2014 "),Wx=a("a"),RXe=o("ViltConfig"),BXe=o(" (ViLT model)"),PXe=l(),Mg=a("li"),SK=a("strong"),$Xe=o("vision-encoder-decoder"),IXe=o(" \u2014 "),Hx=a("a"),qXe=o("VisionEncoderDecoderConfig"),NXe=o(" (Vision Encoder decoder model)"),jXe=l(),Eg=a("li"),RK=a("strong"),DXe=o("vision-text-dual-encoder"),GXe=o(" \u2014 "),Ux=a("a"),OXe=o("VisionTextDualEncoderConfig"),VXe=o(" (VisionTextDualEncoder model)"),XXe=l(),Cg=a("li"),BK=a("strong"),zXe=o("visual_bert"),QXe=o(" \u2014 "),Jx=a("a"),WXe=o("VisualBertConfig"),HXe=o(" (VisualBert model)"),UXe=l(),wg=a("li"),PK=a("strong"),JXe=o("vit"),YXe=o(" \u2014 "),Yx=a("a"),KXe=o("ViTConfig"),ZXe=o(" (ViT model)"),eze=l(),Ag=a("li"),$K=a("strong"),oze=o("vit_mae"),rze=o(" \u2014 "),Kx=a("a"),tze=o("ViTMAEConfig"),aze=o(" (ViTMAE model)"),nze=l(),yg=a("li"),IK=a("strong"),sze=o("wav2vec2"),lze=o(" \u2014 "),Zx=a("a"),ize=o("Wav2Vec2Config"),dze=o(" (Wav2Vec2 model)"),cze=l(),Lg=a("li"),qK=a("strong"),fze=o("wavlm"),mze=o(" \u2014 "),ek=a("a"),gze=o("WavLMConfig"),hze=o(" (WavLM model)"),pze=l(),xg=a("li"),NK=a("strong"),_ze=o("xglm"),uze=o(" \u2014 "),ok=a("a"),bze=o("XGLMConfig"),Fze=o(" (XGLM model)"),vze=l(),kg=a("li"),jK=a("strong"),Tze=o("xlm"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("XLMConfig"),Cze=o(" (XLM model)"),wze=l(),Sg=a("li"),DK=a("strong"),Aze=o("xlm-prophetnet"),yze=o(" \u2014 "),tk=a("a"),Lze=o("XLMProphetNetConfig"),xze=o(" (XLMProphetNet model)"),kze=l(),Rg=a("li"),GK=a("strong"),Sze=o("xlm-roberta"),Rze=o(" \u2014 "),ak=a("a"),Bze=o("XLMRobertaConfig"),Pze=o(" (XLM-RoBERTa model)"),$ze=l(),Bg=a("li"),OK=a("strong"),Ize=o("xlm-roberta-xl"),qze=o(" \u2014 "),nk=a("a"),Nze=o("XLMRobertaXLConfig"),jze=o(" (XLM-RoBERTa-XL model)"),Dze=l(),Pg=a("li"),VK=a("strong"),Gze=o("xlnet"),Oze=o(" \u2014 "),sk=a("a"),Vze=o("XLNetConfig"),Xze=o(" (XLNet model)"),zze=l(),$g=a("li"),XK=a("strong"),Qze=o("yoso"),Wze=o(" \u2014 "),lk=a("a"),Hze=o("YosoConfig"),Uze=o(" (YOSO model)"),Jze=l(),zK=a("p"),Yze=o("Examples:"),Kze=l(),f(xC.$$.fragment),Zze=l(),Ig=a("div"),f(kC.$$.fragment),eQe=l(),QK=a("p"),oQe=o("Register a new configuration for this class."),rRe=l(),Qi=a("h2"),qg=a("a"),WK=a("span"),f(SC.$$.fragment),rQe=l(),HK=a("span"),tQe=o("AutoTokenizer"),tRe=l(),Wo=a("div"),f(RC.$$.fragment),aQe=l(),BC=a("p"),nQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ik=a("a"),sQe=o("AutoTokenizer.from_pretrained()"),lQe=o(" class method."),iQe=l(),PC=a("p"),dQe=o("This class cannot be instantiated directly using "),UK=a("code"),cQe=o("__init__()"),fQe=o(" (throws an error)."),mQe=l(),go=a("div"),f($C.$$.fragment),gQe=l(),JK=a("p"),hQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pQe=l(),Oa=a("p"),_Qe=o("The tokenizer class to instantiate is selected based on the "),YK=a("code"),uQe=o("model_type"),bQe=o(` property of the config object (either
passed as an argument or loaded from `),KK=a("code"),FQe=o("pretrained_model_name_or_path"),vQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZK=a("code"),TQe=o("pretrained_model_name_or_path"),MQe=o(":"),EQe=l(),E=a("ul"),Qn=a("li"),eZ=a("strong"),CQe=o("albert"),wQe=o(" \u2014 "),dk=a("a"),AQe=o("AlbertTokenizer"),yQe=o(" or "),ck=a("a"),LQe=o("AlbertTokenizerFast"),xQe=o(" (ALBERT model)"),kQe=l(),Wn=a("li"),oZ=a("strong"),SQe=o("bart"),RQe=o(" \u2014 "),fk=a("a"),BQe=o("BartTokenizer"),PQe=o(" or "),mk=a("a"),$Qe=o("BartTokenizerFast"),IQe=o(" (BART model)"),qQe=l(),Hn=a("li"),rZ=a("strong"),NQe=o("barthez"),jQe=o(" \u2014 "),gk=a("a"),DQe=o("BarthezTokenizer"),GQe=o(" or "),hk=a("a"),OQe=o("BarthezTokenizerFast"),VQe=o(" (BARThez model)"),XQe=l(),Ng=a("li"),tZ=a("strong"),zQe=o("bartpho"),QQe=o(" \u2014 "),pk=a("a"),WQe=o("BartphoTokenizer"),HQe=o(" (BARTpho model)"),UQe=l(),Un=a("li"),aZ=a("strong"),JQe=o("bert"),YQe=o(" \u2014 "),_k=a("a"),KQe=o("BertTokenizer"),ZQe=o(" or "),uk=a("a"),eWe=o("BertTokenizerFast"),oWe=o(" (BERT model)"),rWe=l(),jg=a("li"),nZ=a("strong"),tWe=o("bert-generation"),aWe=o(" \u2014 "),bk=a("a"),nWe=o("BertGenerationTokenizer"),sWe=o(" (Bert Generation model)"),lWe=l(),Dg=a("li"),sZ=a("strong"),iWe=o("bert-japanese"),dWe=o(" \u2014 "),Fk=a("a"),cWe=o("BertJapaneseTokenizer"),fWe=o(" (BertJapanese model)"),mWe=l(),Gg=a("li"),lZ=a("strong"),gWe=o("bertweet"),hWe=o(" \u2014 "),vk=a("a"),pWe=o("BertweetTokenizer"),_We=o(" (Bertweet model)"),uWe=l(),Jn=a("li"),iZ=a("strong"),bWe=o("big_bird"),FWe=o(" \u2014 "),Tk=a("a"),vWe=o("BigBirdTokenizer"),TWe=o(" or "),Mk=a("a"),MWe=o("BigBirdTokenizerFast"),EWe=o(" (BigBird model)"),CWe=l(),Yn=a("li"),dZ=a("strong"),wWe=o("bigbird_pegasus"),AWe=o(" \u2014 "),Ek=a("a"),yWe=o("PegasusTokenizer"),LWe=o(" or "),Ck=a("a"),xWe=o("PegasusTokenizerFast"),kWe=o(" (BigBirdPegasus model)"),SWe=l(),Kn=a("li"),cZ=a("strong"),RWe=o("blenderbot"),BWe=o(" \u2014 "),wk=a("a"),PWe=o("BlenderbotTokenizer"),$We=o(" or "),Ak=a("a"),IWe=o("BlenderbotTokenizerFast"),qWe=o(" (Blenderbot model)"),NWe=l(),Og=a("li"),fZ=a("strong"),jWe=o("blenderbot-small"),DWe=o(" \u2014 "),yk=a("a"),GWe=o("BlenderbotSmallTokenizer"),OWe=o(" (BlenderbotSmall model)"),VWe=l(),Vg=a("li"),mZ=a("strong"),XWe=o("byt5"),zWe=o(" \u2014 "),Lk=a("a"),QWe=o("ByT5Tokenizer"),WWe=o(" (ByT5 model)"),HWe=l(),Zn=a("li"),gZ=a("strong"),UWe=o("camembert"),JWe=o(" \u2014 "),xk=a("a"),YWe=o("CamembertTokenizer"),KWe=o(" or "),kk=a("a"),ZWe=o("CamembertTokenizerFast"),eHe=o(" (CamemBERT model)"),oHe=l(),Xg=a("li"),hZ=a("strong"),rHe=o("canine"),tHe=o(" \u2014 "),Sk=a("a"),aHe=o("CanineTokenizer"),nHe=o(" (Canine model)"),sHe=l(),es=a("li"),pZ=a("strong"),lHe=o("clip"),iHe=o(" \u2014 "),Rk=a("a"),dHe=o("CLIPTokenizer"),cHe=o(" or "),Bk=a("a"),fHe=o("CLIPTokenizerFast"),mHe=o(" (CLIP model)"),gHe=l(),os=a("li"),_Z=a("strong"),hHe=o("convbert"),pHe=o(" \u2014 "),Pk=a("a"),_He=o("ConvBertTokenizer"),uHe=o(" or "),$k=a("a"),bHe=o("ConvBertTokenizerFast"),FHe=o(" (ConvBERT model)"),vHe=l(),rs=a("li"),uZ=a("strong"),THe=o("cpm"),MHe=o(" \u2014 "),Ik=a("a"),EHe=o("CpmTokenizer"),CHe=o(" or "),bZ=a("code"),wHe=o("CpmTokenizerFast"),AHe=o(" (CPM model)"),yHe=l(),zg=a("li"),FZ=a("strong"),LHe=o("ctrl"),xHe=o(" \u2014 "),qk=a("a"),kHe=o("CTRLTokenizer"),SHe=o(" (CTRL model)"),RHe=l(),ts=a("li"),vZ=a("strong"),BHe=o("deberta"),PHe=o(" \u2014 "),Nk=a("a"),$He=o("DebertaTokenizer"),IHe=o(" or "),jk=a("a"),qHe=o("DebertaTokenizerFast"),NHe=o(" (DeBERTa model)"),jHe=l(),Qg=a("li"),TZ=a("strong"),DHe=o("deberta-v2"),GHe=o(" \u2014 "),Dk=a("a"),OHe=o("DebertaV2Tokenizer"),VHe=o(" (DeBERTa-v2 model)"),XHe=l(),as=a("li"),MZ=a("strong"),zHe=o("distilbert"),QHe=o(" \u2014 "),Gk=a("a"),WHe=o("DistilBertTokenizer"),HHe=o(" or "),Ok=a("a"),UHe=o("DistilBertTokenizerFast"),JHe=o(" (DistilBERT model)"),YHe=l(),ns=a("li"),EZ=a("strong"),KHe=o("dpr"),ZHe=o(" \u2014 "),Vk=a("a"),eUe=o("DPRQuestionEncoderTokenizer"),oUe=o(" or "),Xk=a("a"),rUe=o("DPRQuestionEncoderTokenizerFast"),tUe=o(" (DPR model)"),aUe=l(),ss=a("li"),CZ=a("strong"),nUe=o("electra"),sUe=o(" \u2014 "),zk=a("a"),lUe=o("ElectraTokenizer"),iUe=o(" or "),Qk=a("a"),dUe=o("ElectraTokenizerFast"),cUe=o(" (ELECTRA model)"),fUe=l(),Wg=a("li"),wZ=a("strong"),mUe=o("fastspeech2"),gUe=o(" \u2014 "),AZ=a("code"),hUe=o("FastSpeech2Tokenizer"),pUe=o("(FastSpeech2 model)"),_Ue=l(),Hg=a("li"),yZ=a("strong"),uUe=o("flaubert"),bUe=o(" \u2014 "),Wk=a("a"),FUe=o("FlaubertTokenizer"),vUe=o(" (FlauBERT model)"),TUe=l(),ls=a("li"),LZ=a("strong"),MUe=o("fnet"),EUe=o(" \u2014 "),Hk=a("a"),CUe=o("FNetTokenizer"),wUe=o(" or "),Uk=a("a"),AUe=o("FNetTokenizerFast"),yUe=o(" (FNet model)"),LUe=l(),Ug=a("li"),xZ=a("strong"),xUe=o("fsmt"),kUe=o(" \u2014 "),Jk=a("a"),SUe=o("FSMTTokenizer"),RUe=o(" (FairSeq Machine-Translation model)"),BUe=l(),is=a("li"),kZ=a("strong"),PUe=o("funnel"),$Ue=o(" \u2014 "),Yk=a("a"),IUe=o("FunnelTokenizer"),qUe=o(" or "),Kk=a("a"),NUe=o("FunnelTokenizerFast"),jUe=o(" (Funnel Transformer model)"),DUe=l(),ds=a("li"),SZ=a("strong"),GUe=o("gpt2"),OUe=o(" \u2014 "),Zk=a("a"),VUe=o("GPT2Tokenizer"),XUe=o(" or "),eS=a("a"),zUe=o("GPT2TokenizerFast"),QUe=o(" (OpenAI GPT-2 model)"),WUe=l(),cs=a("li"),RZ=a("strong"),HUe=o("gpt_neo"),UUe=o(" \u2014 "),oS=a("a"),JUe=o("GPT2Tokenizer"),YUe=o(" or "),rS=a("a"),KUe=o("GPT2TokenizerFast"),ZUe=o(" (GPT Neo model)"),eJe=l(),fs=a("li"),BZ=a("strong"),oJe=o("herbert"),rJe=o(" \u2014 "),tS=a("a"),tJe=o("HerbertTokenizer"),aJe=o(" or "),aS=a("a"),nJe=o("HerbertTokenizerFast"),sJe=o(" (HerBERT model)"),lJe=l(),Jg=a("li"),PZ=a("strong"),iJe=o("hubert"),dJe=o(" \u2014 "),nS=a("a"),cJe=o("Wav2Vec2CTCTokenizer"),fJe=o(" (Hubert model)"),mJe=l(),ms=a("li"),$Z=a("strong"),gJe=o("ibert"),hJe=o(" \u2014 "),sS=a("a"),pJe=o("RobertaTokenizer"),_Je=o(" or "),lS=a("a"),uJe=o("RobertaTokenizerFast"),bJe=o(" (I-BERT model)"),FJe=l(),gs=a("li"),IZ=a("strong"),vJe=o("layoutlm"),TJe=o(" \u2014 "),iS=a("a"),MJe=o("LayoutLMTokenizer"),EJe=o(" or "),dS=a("a"),CJe=o("LayoutLMTokenizerFast"),wJe=o(" (LayoutLM model)"),AJe=l(),hs=a("li"),qZ=a("strong"),yJe=o("layoutlmv2"),LJe=o(" \u2014 "),cS=a("a"),xJe=o("LayoutLMv2Tokenizer"),kJe=o(" or "),fS=a("a"),SJe=o("LayoutLMv2TokenizerFast"),RJe=o(" (LayoutLMv2 model)"),BJe=l(),ps=a("li"),NZ=a("strong"),PJe=o("layoutxlm"),$Je=o(" \u2014 "),mS=a("a"),IJe=o("LayoutXLMTokenizer"),qJe=o(" or "),gS=a("a"),NJe=o("LayoutXLMTokenizerFast"),jJe=o(" (LayoutXLM model)"),DJe=l(),_s=a("li"),jZ=a("strong"),GJe=o("led"),OJe=o(" \u2014 "),hS=a("a"),VJe=o("LEDTokenizer"),XJe=o(" or "),pS=a("a"),zJe=o("LEDTokenizerFast"),QJe=o(" (LED model)"),WJe=l(),us=a("li"),DZ=a("strong"),HJe=o("longformer"),UJe=o(" \u2014 "),_S=a("a"),JJe=o("LongformerTokenizer"),YJe=o(" or "),uS=a("a"),KJe=o("LongformerTokenizerFast"),ZJe=o(" (Longformer model)"),eYe=l(),Yg=a("li"),GZ=a("strong"),oYe=o("luke"),rYe=o(" \u2014 "),bS=a("a"),tYe=o("LukeTokenizer"),aYe=o(" (LUKE model)"),nYe=l(),bs=a("li"),OZ=a("strong"),sYe=o("lxmert"),lYe=o(" \u2014 "),FS=a("a"),iYe=o("LxmertTokenizer"),dYe=o(" or "),vS=a("a"),cYe=o("LxmertTokenizerFast"),fYe=o(" (LXMERT model)"),mYe=l(),Kg=a("li"),VZ=a("strong"),gYe=o("m2m_100"),hYe=o(" \u2014 "),TS=a("a"),pYe=o("M2M100Tokenizer"),_Ye=o(" (M2M100 model)"),uYe=l(),Zg=a("li"),XZ=a("strong"),bYe=o("marian"),FYe=o(" \u2014 "),MS=a("a"),vYe=o("MarianTokenizer"),TYe=o(" (Marian model)"),MYe=l(),Fs=a("li"),zZ=a("strong"),EYe=o("mbart"),CYe=o(" \u2014 "),ES=a("a"),wYe=o("MBartTokenizer"),AYe=o(" or "),CS=a("a"),yYe=o("MBartTokenizerFast"),LYe=o(" (mBART model)"),xYe=l(),vs=a("li"),QZ=a("strong"),kYe=o("mbart50"),SYe=o(" \u2014 "),wS=a("a"),RYe=o("MBart50Tokenizer"),BYe=o(" or "),AS=a("a"),PYe=o("MBart50TokenizerFast"),$Ye=o(" (mBART-50 model)"),IYe=l(),eh=a("li"),WZ=a("strong"),qYe=o("mluke"),NYe=o(" \u2014 "),yS=a("a"),jYe=o("MLukeTokenizer"),DYe=o(" (mLUKE model)"),GYe=l(),Ts=a("li"),HZ=a("strong"),OYe=o("mobilebert"),VYe=o(" \u2014 "),LS=a("a"),XYe=o("MobileBertTokenizer"),zYe=o(" or "),xS=a("a"),QYe=o("MobileBertTokenizerFast"),WYe=o(" (MobileBERT model)"),HYe=l(),Ms=a("li"),UZ=a("strong"),UYe=o("mpnet"),JYe=o(" \u2014 "),kS=a("a"),YYe=o("MPNetTokenizer"),KYe=o(" or "),SS=a("a"),ZYe=o("MPNetTokenizerFast"),eKe=o(" (MPNet model)"),oKe=l(),Es=a("li"),JZ=a("strong"),rKe=o("mt5"),tKe=o(" \u2014 "),RS=a("a"),aKe=o("MT5Tokenizer"),nKe=o(" or "),BS=a("a"),sKe=o("MT5TokenizerFast"),lKe=o(" (mT5 model)"),iKe=l(),Cs=a("li"),YZ=a("strong"),dKe=o("openai-gpt"),cKe=o(" \u2014 "),PS=a("a"),fKe=o("OpenAIGPTTokenizer"),mKe=o(" or "),$S=a("a"),gKe=o("OpenAIGPTTokenizerFast"),hKe=o(" (OpenAI GPT model)"),pKe=l(),ws=a("li"),KZ=a("strong"),_Ke=o("pegasus"),uKe=o(" \u2014 "),IS=a("a"),bKe=o("PegasusTokenizer"),FKe=o(" or "),qS=a("a"),vKe=o("PegasusTokenizerFast"),TKe=o(" (Pegasus model)"),MKe=l(),oh=a("li"),ZZ=a("strong"),EKe=o("perceiver"),CKe=o(" \u2014 "),NS=a("a"),wKe=o("PerceiverTokenizer"),AKe=o(" (Perceiver model)"),yKe=l(),rh=a("li"),eee=a("strong"),LKe=o("phobert"),xKe=o(" \u2014 "),jS=a("a"),kKe=o("PhobertTokenizer"),SKe=o(" (PhoBERT model)"),RKe=l(),th=a("li"),oee=a("strong"),BKe=o("plbart"),PKe=o(" \u2014 "),DS=a("a"),$Ke=o("PLBartTokenizer"),IKe=o(" (PLBart model)"),qKe=l(),ah=a("li"),ree=a("strong"),NKe=o("prophetnet"),jKe=o(" \u2014 "),GS=a("a"),DKe=o("ProphetNetTokenizer"),GKe=o(" (ProphetNet model)"),OKe=l(),As=a("li"),tee=a("strong"),VKe=o("qdqbert"),XKe=o(" \u2014 "),OS=a("a"),zKe=o("BertTokenizer"),QKe=o(" or "),VS=a("a"),WKe=o("BertTokenizerFast"),HKe=o(" (QDQBert model)"),UKe=l(),nh=a("li"),aee=a("strong"),JKe=o("rag"),YKe=o(" \u2014 "),XS=a("a"),KKe=o("RagTokenizer"),ZKe=o(" (RAG model)"),eZe=l(),ys=a("li"),nee=a("strong"),oZe=o("realm"),rZe=o(" \u2014 "),zS=a("a"),tZe=o("RealmTokenizer"),aZe=o(" or "),QS=a("a"),nZe=o("RealmTokenizerFast"),sZe=o(" (Realm model)"),lZe=l(),Ls=a("li"),see=a("strong"),iZe=o("reformer"),dZe=o(" \u2014 "),WS=a("a"),cZe=o("ReformerTokenizer"),fZe=o(" or "),HS=a("a"),mZe=o("ReformerTokenizerFast"),gZe=o(" (Reformer model)"),hZe=l(),xs=a("li"),lee=a("strong"),pZe=o("rembert"),_Ze=o(" \u2014 "),US=a("a"),uZe=o("RemBertTokenizer"),bZe=o(" or "),JS=a("a"),FZe=o("RemBertTokenizerFast"),vZe=o(" (RemBERT model)"),TZe=l(),ks=a("li"),iee=a("strong"),MZe=o("retribert"),EZe=o(" \u2014 "),YS=a("a"),CZe=o("RetriBertTokenizer"),wZe=o(" or "),KS=a("a"),AZe=o("RetriBertTokenizerFast"),yZe=o(" (RetriBERT model)"),LZe=l(),Ss=a("li"),dee=a("strong"),xZe=o("roberta"),kZe=o(" \u2014 "),ZS=a("a"),SZe=o("RobertaTokenizer"),RZe=o(" or "),eR=a("a"),BZe=o("RobertaTokenizerFast"),PZe=o(" (RoBERTa model)"),$Ze=l(),Rs=a("li"),cee=a("strong"),IZe=o("roformer"),qZe=o(" \u2014 "),oR=a("a"),NZe=o("RoFormerTokenizer"),jZe=o(" or "),rR=a("a"),DZe=o("RoFormerTokenizerFast"),GZe=o(" (RoFormer model)"),OZe=l(),sh=a("li"),fee=a("strong"),VZe=o("speech_to_text"),XZe=o(" \u2014 "),tR=a("a"),zZe=o("Speech2TextTokenizer"),QZe=o(" (Speech2Text model)"),WZe=l(),lh=a("li"),mee=a("strong"),HZe=o("speech_to_text_2"),UZe=o(" \u2014 "),aR=a("a"),JZe=o("Speech2Text2Tokenizer"),YZe=o(" (Speech2Text2 model)"),KZe=l(),Bs=a("li"),gee=a("strong"),ZZe=o("splinter"),eeo=o(" \u2014 "),nR=a("a"),oeo=o("SplinterTokenizer"),reo=o(" or "),sR=a("a"),teo=o("SplinterTokenizerFast"),aeo=o(" (Splinter model)"),neo=l(),Ps=a("li"),hee=a("strong"),seo=o("squeezebert"),leo=o(" \u2014 "),lR=a("a"),ieo=o("SqueezeBertTokenizer"),deo=o(" or "),iR=a("a"),ceo=o("SqueezeBertTokenizerFast"),feo=o(" (SqueezeBERT model)"),meo=l(),$s=a("li"),pee=a("strong"),geo=o("t5"),heo=o(" \u2014 "),dR=a("a"),peo=o("T5Tokenizer"),_eo=o(" or "),cR=a("a"),ueo=o("T5TokenizerFast"),beo=o(" (T5 model)"),Feo=l(),ih=a("li"),_ee=a("strong"),veo=o("tapas"),Teo=o(" \u2014 "),fR=a("a"),Meo=o("TapasTokenizer"),Eeo=o(" (TAPAS model)"),Ceo=l(),dh=a("li"),uee=a("strong"),weo=o("transfo-xl"),Aeo=o(" \u2014 "),mR=a("a"),yeo=o("TransfoXLTokenizer"),Leo=o(" (Transformer-XL model)"),xeo=l(),ch=a("li"),bee=a("strong"),keo=o("wav2vec2"),Seo=o(" \u2014 "),gR=a("a"),Reo=o("Wav2Vec2CTCTokenizer"),Beo=o(" (Wav2Vec2 model)"),Peo=l(),fh=a("li"),Fee=a("strong"),$eo=o("wav2vec2_phoneme"),Ieo=o(" \u2014 "),hR=a("a"),qeo=o("Wav2Vec2PhonemeCTCTokenizer"),Neo=o(" (Wav2Vec2Phoneme model)"),jeo=l(),Is=a("li"),vee=a("strong"),Deo=o("xglm"),Geo=o(" \u2014 "),pR=a("a"),Oeo=o("XGLMTokenizer"),Veo=o(" or "),_R=a("a"),Xeo=o("XGLMTokenizerFast"),zeo=o(" (XGLM model)"),Qeo=l(),mh=a("li"),Tee=a("strong"),Weo=o("xlm"),Heo=o(" \u2014 "),uR=a("a"),Ueo=o("XLMTokenizer"),Jeo=o(" (XLM model)"),Yeo=l(),gh=a("li"),Mee=a("strong"),Keo=o("xlm-prophetnet"),Zeo=o(" \u2014 "),bR=a("a"),eoo=o("XLMProphetNetTokenizer"),ooo=o(" (XLMProphetNet model)"),roo=l(),qs=a("li"),Eee=a("strong"),too=o("xlm-roberta"),aoo=o(" \u2014 "),FR=a("a"),noo=o("XLMRobertaTokenizer"),soo=o(" or "),vR=a("a"),loo=o("XLMRobertaTokenizerFast"),ioo=o(" (XLM-RoBERTa model)"),doo=l(),Ns=a("li"),Cee=a("strong"),coo=o("xlnet"),foo=o(" \u2014 "),TR=a("a"),moo=o("XLNetTokenizer"),goo=o(" or "),MR=a("a"),hoo=o("XLNetTokenizerFast"),poo=o(" (XLNet model)"),_oo=l(),wee=a("p"),uoo=o("Examples:"),boo=l(),f(IC.$$.fragment),Foo=l(),hh=a("div"),f(qC.$$.fragment),voo=l(),Aee=a("p"),Too=o("Register a new tokenizer in this mapping."),aRe=l(),Wi=a("h2"),ph=a("a"),yee=a("span"),f(NC.$$.fragment),Moo=l(),Lee=a("span"),Eoo=o("AutoFeatureExtractor"),nRe=l(),Ho=a("div"),f(jC.$$.fragment),Coo=l(),DC=a("p"),woo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ER=a("a"),Aoo=o("AutoFeatureExtractor.from_pretrained()"),yoo=o(" class method."),Loo=l(),GC=a("p"),xoo=o("This class cannot be instantiated directly using "),xee=a("code"),koo=o("__init__()"),Soo=o(" (throws an error)."),Roo=l(),$e=a("div"),f(OC.$$.fragment),Boo=l(),kee=a("p"),Poo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$oo=l(),Va=a("p"),Ioo=o("The feature extractor class to instantiate is selected based on the "),See=a("code"),qoo=o("model_type"),Noo=o(` property of the config object
(either passed as an argument or loaded from `),Ree=a("code"),joo=o("pretrained_model_name_or_path"),Doo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bee=a("code"),Goo=o("pretrained_model_name_or_path"),Ooo=o(":"),Voo=l(),te=a("ul"),_h=a("li"),Pee=a("strong"),Xoo=o("beit"),zoo=o(" \u2014 "),CR=a("a"),Qoo=o("BeitFeatureExtractor"),Woo=o(" (BEiT model)"),Hoo=l(),uh=a("li"),$ee=a("strong"),Uoo=o("clip"),Joo=o(" \u2014 "),wR=a("a"),Yoo=o("CLIPFeatureExtractor"),Koo=o(" (CLIP model)"),Zoo=l(),bh=a("li"),Iee=a("strong"),ero=o("convnext"),oro=o(" \u2014 "),AR=a("a"),rro=o("ConvNextFeatureExtractor"),tro=o(" (ConvNext model)"),aro=l(),Fh=a("li"),qee=a("strong"),nro=o("deit"),sro=o(" \u2014 "),yR=a("a"),lro=o("DeiTFeatureExtractor"),iro=o(" (DeiT model)"),dro=l(),vh=a("li"),Nee=a("strong"),cro=o("detr"),fro=o(" \u2014 "),LR=a("a"),mro=o("DetrFeatureExtractor"),gro=o(" (DETR model)"),hro=l(),Th=a("li"),jee=a("strong"),pro=o("hubert"),_ro=o(" \u2014 "),xR=a("a"),uro=o("Wav2Vec2FeatureExtractor"),bro=o(" (Hubert model)"),Fro=l(),Mh=a("li"),Dee=a("strong"),vro=o("layoutlmv2"),Tro=o(" \u2014 "),kR=a("a"),Mro=o("LayoutLMv2FeatureExtractor"),Ero=o(" (LayoutLMv2 model)"),Cro=l(),Eh=a("li"),Gee=a("strong"),wro=o("maskformer"),Aro=o(" \u2014 "),SR=a("a"),yro=o("MaskFormerFeatureExtractor"),Lro=o(" (MaskFormer model)"),xro=l(),Ch=a("li"),Oee=a("strong"),kro=o("perceiver"),Sro=o(" \u2014 "),RR=a("a"),Rro=o("PerceiverFeatureExtractor"),Bro=o(" (Perceiver model)"),Pro=l(),wh=a("li"),Vee=a("strong"),$ro=o("poolformer"),Iro=o(" \u2014 "),BR=a("a"),qro=o("PoolFormerFeatureExtractor"),Nro=o(" (PoolFormer model)"),jro=l(),Ah=a("li"),Xee=a("strong"),Dro=o("resnet"),Gro=o(" \u2014 "),PR=a("a"),Oro=o("ConvNextFeatureExtractor"),Vro=o(" (ResNet model)"),Xro=l(),yh=a("li"),zee=a("strong"),zro=o("segformer"),Qro=o(" \u2014 "),$R=a("a"),Wro=o("SegformerFeatureExtractor"),Hro=o(" (SegFormer model)"),Uro=l(),Lh=a("li"),Qee=a("strong"),Jro=o("speech_to_text"),Yro=o(" \u2014 "),IR=a("a"),Kro=o("Speech2TextFeatureExtractor"),Zro=o(" (Speech2Text model)"),eto=l(),xh=a("li"),Wee=a("strong"),oto=o("swin"),rto=o(" \u2014 "),qR=a("a"),tto=o("ViTFeatureExtractor"),ato=o(" (Swin model)"),nto=l(),kh=a("li"),Hee=a("strong"),sto=o("van"),lto=o(" \u2014 "),NR=a("a"),ito=o("ConvNextFeatureExtractor"),dto=o(" (VAN model)"),cto=l(),Sh=a("li"),Uee=a("strong"),fto=o("vit"),mto=o(" \u2014 "),jR=a("a"),gto=o("ViTFeatureExtractor"),hto=o(" (ViT model)"),pto=l(),Rh=a("li"),Jee=a("strong"),_to=o("vit_mae"),uto=o(" \u2014 "),DR=a("a"),bto=o("ViTFeatureExtractor"),Fto=o(" (ViTMAE model)"),vto=l(),Bh=a("li"),Yee=a("strong"),Tto=o("wav2vec2"),Mto=o(" \u2014 "),GR=a("a"),Eto=o("Wav2Vec2FeatureExtractor"),Cto=o(" (Wav2Vec2 model)"),wto=l(),f(Ph.$$.fragment),Ato=l(),Kee=a("p"),yto=o("Examples:"),Lto=l(),f(VC.$$.fragment),xto=l(),$h=a("div"),f(XC.$$.fragment),kto=l(),Zee=a("p"),Sto=o("Register a new feature extractor for this class."),sRe=l(),Hi=a("h2"),Ih=a("a"),eoe=a("span"),f(zC.$$.fragment),Rto=l(),ooe=a("span"),Bto=o("AutoProcessor"),lRe=l(),Uo=a("div"),f(QC.$$.fragment),Pto=l(),WC=a("p"),$to=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),OR=a("a"),Ito=o("AutoProcessor.from_pretrained()"),qto=o(" class method."),Nto=l(),HC=a("p"),jto=o("This class cannot be instantiated directly using "),roe=a("code"),Dto=o("__init__()"),Gto=o(" (throws an error)."),Oto=l(),Ie=a("div"),f(UC.$$.fragment),Vto=l(),toe=a("p"),Xto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zto=l(),Ui=a("p"),Qto=o("The processor class to instantiate is selected based on the "),aoe=a("code"),Wto=o("model_type"),Hto=o(` property of the config object (either
passed as an argument or loaded from `),noe=a("code"),Uto=o("pretrained_model_name_or_path"),Jto=o(" if possible):"),Yto=l(),ke=a("ul"),qh=a("li"),soe=a("strong"),Kto=o("clip"),Zto=o(" \u2014 "),VR=a("a"),eao=o("CLIPProcessor"),oao=o(" (CLIP model)"),rao=l(),Nh=a("li"),loe=a("strong"),tao=o("layoutlmv2"),aao=o(" \u2014 "),XR=a("a"),nao=o("LayoutLMv2Processor"),sao=o(" (LayoutLMv2 model)"),lao=l(),jh=a("li"),ioe=a("strong"),iao=o("layoutxlm"),dao=o(" \u2014 "),zR=a("a"),cao=o("LayoutXLMProcessor"),fao=o(" (LayoutXLM model)"),mao=l(),Dh=a("li"),doe=a("strong"),gao=o("speech_to_text"),hao=o(" \u2014 "),QR=a("a"),pao=o("Speech2TextProcessor"),_ao=o(" (Speech2Text model)"),uao=l(),Gh=a("li"),coe=a("strong"),bao=o("speech_to_text_2"),Fao=o(" \u2014 "),WR=a("a"),vao=o("Speech2Text2Processor"),Tao=o(" (Speech2Text2 model)"),Mao=l(),Oh=a("li"),foe=a("strong"),Eao=o("trocr"),Cao=o(" \u2014 "),HR=a("a"),wao=o("TrOCRProcessor"),Aao=o(" (TrOCR model)"),yao=l(),Vh=a("li"),moe=a("strong"),Lao=o("vision-text-dual-encoder"),xao=o(" \u2014 "),UR=a("a"),kao=o("VisionTextDualEncoderProcessor"),Sao=o(" (VisionTextDualEncoder model)"),Rao=l(),Xh=a("li"),goe=a("strong"),Bao=o("wav2vec2"),Pao=o(" \u2014 "),JR=a("a"),$ao=o("Wav2Vec2Processor"),Iao=o(" (Wav2Vec2 model)"),qao=l(),f(zh.$$.fragment),Nao=l(),hoe=a("p"),jao=o("Examples:"),Dao=l(),f(JC.$$.fragment),Gao=l(),Qh=a("div"),f(YC.$$.fragment),Oao=l(),poe=a("p"),Vao=o("Register a new processor for this class."),iRe=l(),Ji=a("h2"),Wh=a("a"),_oe=a("span"),f(KC.$$.fragment),Xao=l(),uoe=a("span"),zao=o("AutoModel"),dRe=l(),Jo=a("div"),f(ZC.$$.fragment),Qao=l(),Yi=a("p"),Wao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YR=a("a"),Hao=o("from_pretrained()"),Uao=o(" class method or the "),KR=a("a"),Jao=o("from_config()"),Yao=o(` class
method.`),Kao=l(),ew=a("p"),Zao=o("This class cannot be instantiated directly using "),boe=a("code"),eno=o("__init__()"),ono=o(" (throws an error)."),rno=l(),Xr=a("div"),f(ow.$$.fragment),tno=l(),Foe=a("p"),ano=o("Instantiates one of the base model classes of the library from a configuration."),nno=l(),Ki=a("p"),sno=o(`Note:
Loading a model from its configuration file does `),voe=a("strong"),lno=o("not"),ino=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZR=a("a"),dno=o("from_pretrained()"),cno=o(" to load the model weights."),fno=l(),Toe=a("p"),mno=o("Examples:"),gno=l(),f(rw.$$.fragment),hno=l(),qe=a("div"),f(tw.$$.fragment),pno=l(),Moe=a("p"),_no=o("Instantiate one of the base model classes of the library from a pretrained model."),uno=l(),Xa=a("p"),bno=o("The model class to instantiate is selected based on the "),Eoe=a("code"),Fno=o("model_type"),vno=o(` property of the config object (either
passed as an argument or loaded from `),Coe=a("code"),Tno=o("pretrained_model_name_or_path"),Mno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=a("code"),Eno=o("pretrained_model_name_or_path"),Cno=o(":"),wno=l(),T=a("ul"),Hh=a("li"),Aoe=a("strong"),Ano=o("albert"),yno=o(" \u2014 "),eB=a("a"),Lno=o("AlbertModel"),xno=o(" (ALBERT model)"),kno=l(),Uh=a("li"),yoe=a("strong"),Sno=o("bart"),Rno=o(" \u2014 "),oB=a("a"),Bno=o("BartModel"),Pno=o(" (BART model)"),$no=l(),Jh=a("li"),Loe=a("strong"),Ino=o("beit"),qno=o(" \u2014 "),rB=a("a"),Nno=o("BeitModel"),jno=o(" (BEiT model)"),Dno=l(),Yh=a("li"),xoe=a("strong"),Gno=o("bert"),Ono=o(" \u2014 "),tB=a("a"),Vno=o("BertModel"),Xno=o(" (BERT model)"),zno=l(),Kh=a("li"),koe=a("strong"),Qno=o("bert-generation"),Wno=o(" \u2014 "),aB=a("a"),Hno=o("BertGenerationEncoder"),Uno=o(" (Bert Generation model)"),Jno=l(),Zh=a("li"),Soe=a("strong"),Yno=o("big_bird"),Kno=o(" \u2014 "),nB=a("a"),Zno=o("BigBirdModel"),eso=o(" (BigBird model)"),oso=l(),ep=a("li"),Roe=a("strong"),rso=o("bigbird_pegasus"),tso=o(" \u2014 "),sB=a("a"),aso=o("BigBirdPegasusModel"),nso=o(" (BigBirdPegasus model)"),sso=l(),op=a("li"),Boe=a("strong"),lso=o("blenderbot"),iso=o(" \u2014 "),lB=a("a"),dso=o("BlenderbotModel"),cso=o(" (Blenderbot model)"),fso=l(),rp=a("li"),Poe=a("strong"),mso=o("blenderbot-small"),gso=o(" \u2014 "),iB=a("a"),hso=o("BlenderbotSmallModel"),pso=o(" (BlenderbotSmall model)"),_so=l(),tp=a("li"),$oe=a("strong"),uso=o("camembert"),bso=o(" \u2014 "),dB=a("a"),Fso=o("CamembertModel"),vso=o(" (CamemBERT model)"),Tso=l(),ap=a("li"),Ioe=a("strong"),Mso=o("canine"),Eso=o(" \u2014 "),cB=a("a"),Cso=o("CanineModel"),wso=o(" (Canine model)"),Aso=l(),np=a("li"),qoe=a("strong"),yso=o("clip"),Lso=o(" \u2014 "),fB=a("a"),xso=o("CLIPModel"),kso=o(" (CLIP model)"),Sso=l(),sp=a("li"),Noe=a("strong"),Rso=o("convbert"),Bso=o(" \u2014 "),mB=a("a"),Pso=o("ConvBertModel"),$so=o(" (ConvBERT model)"),Iso=l(),lp=a("li"),joe=a("strong"),qso=o("convnext"),Nso=o(" \u2014 "),gB=a("a"),jso=o("ConvNextModel"),Dso=o(" (ConvNext model)"),Gso=l(),ip=a("li"),Doe=a("strong"),Oso=o("ctrl"),Vso=o(" \u2014 "),hB=a("a"),Xso=o("CTRLModel"),zso=o(" (CTRL model)"),Qso=l(),dp=a("li"),Goe=a("strong"),Wso=o("data2vec-audio"),Hso=o(" \u2014 "),pB=a("a"),Uso=o("Data2VecAudioModel"),Jso=o(" (Data2VecAudio model)"),Yso=l(),cp=a("li"),Ooe=a("strong"),Kso=o("data2vec-text"),Zso=o(" \u2014 "),_B=a("a"),elo=o("Data2VecTextModel"),olo=o(" (Data2VecText model)"),rlo=l(),fp=a("li"),Voe=a("strong"),tlo=o("deberta"),alo=o(" \u2014 "),uB=a("a"),nlo=o("DebertaModel"),slo=o(" (DeBERTa model)"),llo=l(),mp=a("li"),Xoe=a("strong"),ilo=o("deberta-v2"),dlo=o(" \u2014 "),bB=a("a"),clo=o("DebertaV2Model"),flo=o(" (DeBERTa-v2 model)"),mlo=l(),gp=a("li"),zoe=a("strong"),glo=o("decision_transformer"),hlo=o(" \u2014 "),FB=a("a"),plo=o("DecisionTransformerModel"),_lo=o(" (Decision Transformer model)"),ulo=l(),hp=a("li"),Qoe=a("strong"),blo=o("deit"),Flo=o(" \u2014 "),vB=a("a"),vlo=o("DeiTModel"),Tlo=o(" (DeiT model)"),Mlo=l(),pp=a("li"),Woe=a("strong"),Elo=o("detr"),Clo=o(" \u2014 "),TB=a("a"),wlo=o("DetrModel"),Alo=o(" (DETR model)"),ylo=l(),_p=a("li"),Hoe=a("strong"),Llo=o("distilbert"),xlo=o(" \u2014 "),MB=a("a"),klo=o("DistilBertModel"),Slo=o(" (DistilBERT model)"),Rlo=l(),up=a("li"),Uoe=a("strong"),Blo=o("dpr"),Plo=o(" \u2014 "),EB=a("a"),$lo=o("DPRQuestionEncoder"),Ilo=o(" (DPR model)"),qlo=l(),bp=a("li"),Joe=a("strong"),Nlo=o("dpt"),jlo=o(" \u2014 "),CB=a("a"),Dlo=o("DPTModel"),Glo=o(" (DPT model)"),Olo=l(),Fp=a("li"),Yoe=a("strong"),Vlo=o("electra"),Xlo=o(" \u2014 "),wB=a("a"),zlo=o("ElectraModel"),Qlo=o(" (ELECTRA model)"),Wlo=l(),vp=a("li"),Koe=a("strong"),Hlo=o("fastspeech2"),Ulo=o(" \u2014 "),Zoe=a("code"),Jlo=o("FastSpeech2Model"),Ylo=o("(FastSpeech2 model)"),Klo=l(),Tp=a("li"),ere=a("strong"),Zlo=o("flaubert"),eio=o(" \u2014 "),AB=a("a"),oio=o("FlaubertModel"),rio=o(" (FlauBERT model)"),tio=l(),Mp=a("li"),ore=a("strong"),aio=o("fnet"),nio=o(" \u2014 "),yB=a("a"),sio=o("FNetModel"),lio=o(" (FNet model)"),iio=l(),Ep=a("li"),rre=a("strong"),dio=o("fsmt"),cio=o(" \u2014 "),LB=a("a"),fio=o("FSMTModel"),mio=o(" (FairSeq Machine-Translation model)"),gio=l(),js=a("li"),tre=a("strong"),hio=o("funnel"),pio=o(" \u2014 "),xB=a("a"),_io=o("FunnelModel"),uio=o(" or "),kB=a("a"),bio=o("FunnelBaseModel"),Fio=o(" (Funnel Transformer model)"),vio=l(),Cp=a("li"),are=a("strong"),Tio=o("glpn"),Mio=o(" \u2014 "),SB=a("a"),Eio=o("GLPNModel"),Cio=o(" (GLPN model)"),wio=l(),wp=a("li"),nre=a("strong"),Aio=o("gpt2"),yio=o(" \u2014 "),RB=a("a"),Lio=o("GPT2Model"),xio=o(" (OpenAI GPT-2 model)"),kio=l(),Ap=a("li"),sre=a("strong"),Sio=o("gpt_neo"),Rio=o(" \u2014 "),BB=a("a"),Bio=o("GPTNeoModel"),Pio=o(" (GPT Neo model)"),$io=l(),yp=a("li"),lre=a("strong"),Iio=o("gptj"),qio=o(" \u2014 "),PB=a("a"),Nio=o("GPTJModel"),jio=o(" (GPT-J model)"),Dio=l(),Lp=a("li"),ire=a("strong"),Gio=o("hubert"),Oio=o(" \u2014 "),$B=a("a"),Vio=o("HubertModel"),Xio=o(" (Hubert model)"),zio=l(),xp=a("li"),dre=a("strong"),Qio=o("ibert"),Wio=o(" \u2014 "),IB=a("a"),Hio=o("IBertModel"),Uio=o(" (I-BERT model)"),Jio=l(),kp=a("li"),cre=a("strong"),Yio=o("imagegpt"),Kio=o(" \u2014 "),qB=a("a"),Zio=o("ImageGPTModel"),edo=o(" (ImageGPT model)"),odo=l(),Sp=a("li"),fre=a("strong"),rdo=o("layoutlm"),tdo=o(" \u2014 "),NB=a("a"),ado=o("LayoutLMModel"),ndo=o(" (LayoutLM model)"),sdo=l(),Rp=a("li"),mre=a("strong"),ldo=o("layoutlmv2"),ido=o(" \u2014 "),jB=a("a"),ddo=o("LayoutLMv2Model"),cdo=o(" (LayoutLMv2 model)"),fdo=l(),Bp=a("li"),gre=a("strong"),mdo=o("led"),gdo=o(" \u2014 "),DB=a("a"),hdo=o("LEDModel"),pdo=o(" (LED model)"),_do=l(),Pp=a("li"),hre=a("strong"),udo=o("longformer"),bdo=o(" \u2014 "),GB=a("a"),Fdo=o("LongformerModel"),vdo=o(" (Longformer model)"),Tdo=l(),$p=a("li"),pre=a("strong"),Mdo=o("luke"),Edo=o(" \u2014 "),OB=a("a"),Cdo=o("LukeModel"),wdo=o(" (LUKE model)"),Ado=l(),Ip=a("li"),_re=a("strong"),ydo=o("lxmert"),Ldo=o(" \u2014 "),VB=a("a"),xdo=o("LxmertModel"),kdo=o(" (LXMERT model)"),Sdo=l(),qp=a("li"),ure=a("strong"),Rdo=o("m2m_100"),Bdo=o(" \u2014 "),XB=a("a"),Pdo=o("M2M100Model"),$do=o(" (M2M100 model)"),Ido=l(),Np=a("li"),bre=a("strong"),qdo=o("marian"),Ndo=o(" \u2014 "),zB=a("a"),jdo=o("MarianModel"),Ddo=o(" (Marian model)"),Gdo=l(),jp=a("li"),Fre=a("strong"),Odo=o("maskformer"),Vdo=o(" \u2014 "),QB=a("a"),Xdo=o("MaskFormerModel"),zdo=o(" (MaskFormer model)"),Qdo=l(),Dp=a("li"),vre=a("strong"),Wdo=o("mbart"),Hdo=o(" \u2014 "),WB=a("a"),Udo=o("MBartModel"),Jdo=o(" (mBART model)"),Ydo=l(),Gp=a("li"),Tre=a("strong"),Kdo=o("megatron-bert"),Zdo=o(" \u2014 "),HB=a("a"),eco=o("MegatronBertModel"),oco=o(" (MegatronBert model)"),rco=l(),Op=a("li"),Mre=a("strong"),tco=o("mobilebert"),aco=o(" \u2014 "),UB=a("a"),nco=o("MobileBertModel"),sco=o(" (MobileBERT model)"),lco=l(),Vp=a("li"),Ere=a("strong"),ico=o("mpnet"),dco=o(" \u2014 "),JB=a("a"),cco=o("MPNetModel"),fco=o(" (MPNet model)"),mco=l(),Xp=a("li"),Cre=a("strong"),gco=o("mt5"),hco=o(" \u2014 "),YB=a("a"),pco=o("MT5Model"),_co=o(" (mT5 model)"),uco=l(),zp=a("li"),wre=a("strong"),bco=o("nystromformer"),Fco=o(" \u2014 "),KB=a("a"),vco=o("NystromformerModel"),Tco=o(" (Nystromformer model)"),Mco=l(),Qp=a("li"),Are=a("strong"),Eco=o("openai-gpt"),Cco=o(" \u2014 "),ZB=a("a"),wco=o("OpenAIGPTModel"),Aco=o(" (OpenAI GPT model)"),yco=l(),Wp=a("li"),yre=a("strong"),Lco=o("pegasus"),xco=o(" \u2014 "),eP=a("a"),kco=o("PegasusModel"),Sco=o(" (Pegasus model)"),Rco=l(),Hp=a("li"),Lre=a("strong"),Bco=o("perceiver"),Pco=o(" \u2014 "),oP=a("a"),$co=o("PerceiverModel"),Ico=o(" (Perceiver model)"),qco=l(),Up=a("li"),xre=a("strong"),Nco=o("plbart"),jco=o(" \u2014 "),rP=a("a"),Dco=o("PLBartModel"),Gco=o(" (PLBart model)"),Oco=l(),Jp=a("li"),kre=a("strong"),Vco=o("poolformer"),Xco=o(" \u2014 "),tP=a("a"),zco=o("PoolFormerModel"),Qco=o(" (PoolFormer model)"),Wco=l(),Yp=a("li"),Sre=a("strong"),Hco=o("prophetnet"),Uco=o(" \u2014 "),aP=a("a"),Jco=o("ProphetNetModel"),Yco=o(" (ProphetNet model)"),Kco=l(),Kp=a("li"),Rre=a("strong"),Zco=o("qdqbert"),efo=o(" \u2014 "),nP=a("a"),ofo=o("QDQBertModel"),rfo=o(" (QDQBert model)"),tfo=l(),Zp=a("li"),Bre=a("strong"),afo=o("reformer"),nfo=o(" \u2014 "),sP=a("a"),sfo=o("ReformerModel"),lfo=o(" (Reformer model)"),ifo=l(),e_=a("li"),Pre=a("strong"),dfo=o("rembert"),cfo=o(" \u2014 "),lP=a("a"),ffo=o("RemBertModel"),mfo=o(" (RemBERT model)"),gfo=l(),o_=a("li"),$re=a("strong"),hfo=o("resnet"),pfo=o(" \u2014 "),iP=a("a"),_fo=o("ResNetModel"),ufo=o(" (ResNet model)"),bfo=l(),r_=a("li"),Ire=a("strong"),Ffo=o("retribert"),vfo=o(" \u2014 "),dP=a("a"),Tfo=o("RetriBertModel"),Mfo=o(" (RetriBERT model)"),Efo=l(),t_=a("li"),qre=a("strong"),Cfo=o("roberta"),wfo=o(" \u2014 "),cP=a("a"),Afo=o("RobertaModel"),yfo=o(" (RoBERTa model)"),Lfo=l(),a_=a("li"),Nre=a("strong"),xfo=o("roformer"),kfo=o(" \u2014 "),fP=a("a"),Sfo=o("RoFormerModel"),Rfo=o(" (RoFormer model)"),Bfo=l(),n_=a("li"),jre=a("strong"),Pfo=o("segformer"),$fo=o(" \u2014 "),mP=a("a"),Ifo=o("SegformerModel"),qfo=o(" (SegFormer model)"),Nfo=l(),s_=a("li"),Dre=a("strong"),jfo=o("sew"),Dfo=o(" \u2014 "),gP=a("a"),Gfo=o("SEWModel"),Ofo=o(" (SEW model)"),Vfo=l(),l_=a("li"),Gre=a("strong"),Xfo=o("sew-d"),zfo=o(" \u2014 "),hP=a("a"),Qfo=o("SEWDModel"),Wfo=o(" (SEW-D model)"),Hfo=l(),i_=a("li"),Ore=a("strong"),Ufo=o("speech_to_text"),Jfo=o(" \u2014 "),pP=a("a"),Yfo=o("Speech2TextModel"),Kfo=o(" (Speech2Text model)"),Zfo=l(),d_=a("li"),Vre=a("strong"),emo=o("splinter"),omo=o(" \u2014 "),_P=a("a"),rmo=o("SplinterModel"),tmo=o(" (Splinter model)"),amo=l(),c_=a("li"),Xre=a("strong"),nmo=o("squeezebert"),smo=o(" \u2014 "),uP=a("a"),lmo=o("SqueezeBertModel"),imo=o(" (SqueezeBERT model)"),dmo=l(),f_=a("li"),zre=a("strong"),cmo=o("swin"),fmo=o(" \u2014 "),bP=a("a"),mmo=o("SwinModel"),gmo=o(" (Swin model)"),hmo=l(),m_=a("li"),Qre=a("strong"),pmo=o("t5"),_mo=o(" \u2014 "),FP=a("a"),umo=o("T5Model"),bmo=o(" (T5 model)"),Fmo=l(),g_=a("li"),Wre=a("strong"),vmo=o("tapas"),Tmo=o(" \u2014 "),vP=a("a"),Mmo=o("TapasModel"),Emo=o(" (TAPAS model)"),Cmo=l(),h_=a("li"),Hre=a("strong"),wmo=o("transfo-xl"),Amo=o(" \u2014 "),TP=a("a"),ymo=o("TransfoXLModel"),Lmo=o(" (Transformer-XL model)"),xmo=l(),p_=a("li"),Ure=a("strong"),kmo=o("unispeech"),Smo=o(" \u2014 "),MP=a("a"),Rmo=o("UniSpeechModel"),Bmo=o(" (UniSpeech model)"),Pmo=l(),__=a("li"),Jre=a("strong"),$mo=o("unispeech-sat"),Imo=o(" \u2014 "),EP=a("a"),qmo=o("UniSpeechSatModel"),Nmo=o(" (UniSpeechSat model)"),jmo=l(),u_=a("li"),Yre=a("strong"),Dmo=o("van"),Gmo=o(" \u2014 "),CP=a("a"),Omo=o("VanModel"),Vmo=o(" (VAN model)"),Xmo=l(),b_=a("li"),Kre=a("strong"),zmo=o("vilt"),Qmo=o(" \u2014 "),wP=a("a"),Wmo=o("ViltModel"),Hmo=o(" (ViLT model)"),Umo=l(),F_=a("li"),Zre=a("strong"),Jmo=o("vision-text-dual-encoder"),Ymo=o(" \u2014 "),AP=a("a"),Kmo=o("VisionTextDualEncoderModel"),Zmo=o(" (VisionTextDualEncoder model)"),ego=l(),v_=a("li"),ete=a("strong"),ogo=o("visual_bert"),rgo=o(" \u2014 "),yP=a("a"),tgo=o("VisualBertModel"),ago=o(" (VisualBert model)"),ngo=l(),T_=a("li"),ote=a("strong"),sgo=o("vit"),lgo=o(" \u2014 "),LP=a("a"),igo=o("ViTModel"),dgo=o(" (ViT model)"),cgo=l(),M_=a("li"),rte=a("strong"),fgo=o("vit_mae"),mgo=o(" \u2014 "),xP=a("a"),ggo=o("ViTMAEModel"),hgo=o(" (ViTMAE model)"),pgo=l(),E_=a("li"),tte=a("strong"),_go=o("wav2vec2"),ugo=o(" \u2014 "),kP=a("a"),bgo=o("Wav2Vec2Model"),Fgo=o(" (Wav2Vec2 model)"),vgo=l(),C_=a("li"),ate=a("strong"),Tgo=o("wavlm"),Mgo=o(" \u2014 "),SP=a("a"),Ego=o("WavLMModel"),Cgo=o(" (WavLM model)"),wgo=l(),w_=a("li"),nte=a("strong"),Ago=o("xglm"),ygo=o(" \u2014 "),RP=a("a"),Lgo=o("XGLMModel"),xgo=o(" (XGLM model)"),kgo=l(),A_=a("li"),ste=a("strong"),Sgo=o("xlm"),Rgo=o(" \u2014 "),BP=a("a"),Bgo=o("XLMModel"),Pgo=o(" (XLM model)"),$go=l(),y_=a("li"),lte=a("strong"),Igo=o("xlm-prophetnet"),qgo=o(" \u2014 "),PP=a("a"),Ngo=o("XLMProphetNetModel"),jgo=o(" (XLMProphetNet model)"),Dgo=l(),L_=a("li"),ite=a("strong"),Ggo=o("xlm-roberta"),Ogo=o(" \u2014 "),$P=a("a"),Vgo=o("XLMRobertaModel"),Xgo=o(" (XLM-RoBERTa model)"),zgo=l(),x_=a("li"),dte=a("strong"),Qgo=o("xlm-roberta-xl"),Wgo=o(" \u2014 "),IP=a("a"),Hgo=o("XLMRobertaXLModel"),Ugo=o(" (XLM-RoBERTa-XL model)"),Jgo=l(),k_=a("li"),cte=a("strong"),Ygo=o("xlnet"),Kgo=o(" \u2014 "),qP=a("a"),Zgo=o("XLNetModel"),eho=o(" (XLNet model)"),oho=l(),S_=a("li"),fte=a("strong"),rho=o("yoso"),tho=o(" \u2014 "),NP=a("a"),aho=o("YosoModel"),nho=o(" (YOSO model)"),sho=l(),R_=a("p"),lho=o("The model is set in evaluation mode by default using "),mte=a("code"),iho=o("model.eval()"),dho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gte=a("code"),cho=o("model.train()"),fho=l(),hte=a("p"),mho=o("Examples:"),gho=l(),f(aw.$$.fragment),cRe=l(),Zi=a("h2"),B_=a("a"),pte=a("span"),f(nw.$$.fragment),hho=l(),_te=a("span"),pho=o("AutoModelForPreTraining"),fRe=l(),Yo=a("div"),f(sw.$$.fragment),_ho=l(),ed=a("p"),uho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jP=a("a"),bho=o("from_pretrained()"),Fho=o(" class method or the "),DP=a("a"),vho=o("from_config()"),Tho=o(` class
method.`),Mho=l(),lw=a("p"),Eho=o("This class cannot be instantiated directly using "),ute=a("code"),Cho=o("__init__()"),who=o(" (throws an error)."),Aho=l(),zr=a("div"),f(iw.$$.fragment),yho=l(),bte=a("p"),Lho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xho=l(),od=a("p"),kho=o(`Note:
Loading a model from its configuration file does `),Fte=a("strong"),Sho=o("not"),Rho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=a("a"),Bho=o("from_pretrained()"),Pho=o(" to load the model weights."),$ho=l(),vte=a("p"),Iho=o("Examples:"),qho=l(),f(dw.$$.fragment),Nho=l(),Ne=a("div"),f(cw.$$.fragment),jho=l(),Tte=a("p"),Dho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gho=l(),za=a("p"),Oho=o("The model class to instantiate is selected based on the "),Mte=a("code"),Vho=o("model_type"),Xho=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),zho=o("pretrained_model_name_or_path"),Qho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),Who=o("pretrained_model_name_or_path"),Hho=o(":"),Uho=l(),S=a("ul"),P_=a("li"),wte=a("strong"),Jho=o("albert"),Yho=o(" \u2014 "),OP=a("a"),Kho=o("AlbertForPreTraining"),Zho=o(" (ALBERT model)"),epo=l(),$_=a("li"),Ate=a("strong"),opo=o("bart"),rpo=o(" \u2014 "),VP=a("a"),tpo=o("BartForConditionalGeneration"),apo=o(" (BART model)"),npo=l(),I_=a("li"),yte=a("strong"),spo=o("bert"),lpo=o(" \u2014 "),XP=a("a"),ipo=o("BertForPreTraining"),dpo=o(" (BERT model)"),cpo=l(),q_=a("li"),Lte=a("strong"),fpo=o("big_bird"),mpo=o(" \u2014 "),zP=a("a"),gpo=o("BigBirdForPreTraining"),hpo=o(" (BigBird model)"),ppo=l(),N_=a("li"),xte=a("strong"),_po=o("camembert"),upo=o(" \u2014 "),QP=a("a"),bpo=o("CamembertForMaskedLM"),Fpo=o(" (CamemBERT model)"),vpo=l(),j_=a("li"),kte=a("strong"),Tpo=o("ctrl"),Mpo=o(" \u2014 "),WP=a("a"),Epo=o("CTRLLMHeadModel"),Cpo=o(" (CTRL model)"),wpo=l(),D_=a("li"),Ste=a("strong"),Apo=o("data2vec-text"),ypo=o(" \u2014 "),HP=a("a"),Lpo=o("Data2VecTextForMaskedLM"),xpo=o(" (Data2VecText model)"),kpo=l(),G_=a("li"),Rte=a("strong"),Spo=o("deberta"),Rpo=o(" \u2014 "),UP=a("a"),Bpo=o("DebertaForMaskedLM"),Ppo=o(" (DeBERTa model)"),$po=l(),O_=a("li"),Bte=a("strong"),Ipo=o("deberta-v2"),qpo=o(" \u2014 "),JP=a("a"),Npo=o("DebertaV2ForMaskedLM"),jpo=o(" (DeBERTa-v2 model)"),Dpo=l(),V_=a("li"),Pte=a("strong"),Gpo=o("distilbert"),Opo=o(" \u2014 "),YP=a("a"),Vpo=o("DistilBertForMaskedLM"),Xpo=o(" (DistilBERT model)"),zpo=l(),X_=a("li"),$te=a("strong"),Qpo=o("electra"),Wpo=o(" \u2014 "),KP=a("a"),Hpo=o("ElectraForPreTraining"),Upo=o(" (ELECTRA model)"),Jpo=l(),z_=a("li"),Ite=a("strong"),Ypo=o("flaubert"),Kpo=o(" \u2014 "),ZP=a("a"),Zpo=o("FlaubertWithLMHeadModel"),e_o=o(" (FlauBERT model)"),o_o=l(),Q_=a("li"),qte=a("strong"),r_o=o("fnet"),t_o=o(" \u2014 "),e$=a("a"),a_o=o("FNetForPreTraining"),n_o=o(" (FNet model)"),s_o=l(),W_=a("li"),Nte=a("strong"),l_o=o("fsmt"),i_o=o(" \u2014 "),o$=a("a"),d_o=o("FSMTForConditionalGeneration"),c_o=o(" (FairSeq Machine-Translation model)"),f_o=l(),H_=a("li"),jte=a("strong"),m_o=o("funnel"),g_o=o(" \u2014 "),r$=a("a"),h_o=o("FunnelForPreTraining"),p_o=o(" (Funnel Transformer model)"),__o=l(),U_=a("li"),Dte=a("strong"),u_o=o("gpt2"),b_o=o(" \u2014 "),t$=a("a"),F_o=o("GPT2LMHeadModel"),v_o=o(" (OpenAI GPT-2 model)"),T_o=l(),J_=a("li"),Gte=a("strong"),M_o=o("ibert"),E_o=o(" \u2014 "),a$=a("a"),C_o=o("IBertForMaskedLM"),w_o=o(" (I-BERT model)"),A_o=l(),Y_=a("li"),Ote=a("strong"),y_o=o("layoutlm"),L_o=o(" \u2014 "),n$=a("a"),x_o=o("LayoutLMForMaskedLM"),k_o=o(" (LayoutLM model)"),S_o=l(),K_=a("li"),Vte=a("strong"),R_o=o("longformer"),B_o=o(" \u2014 "),s$=a("a"),P_o=o("LongformerForMaskedLM"),$_o=o(" (Longformer model)"),I_o=l(),Z_=a("li"),Xte=a("strong"),q_o=o("lxmert"),N_o=o(" \u2014 "),l$=a("a"),j_o=o("LxmertForPreTraining"),D_o=o(" (LXMERT model)"),G_o=l(),eu=a("li"),zte=a("strong"),O_o=o("megatron-bert"),V_o=o(" \u2014 "),i$=a("a"),X_o=o("MegatronBertForPreTraining"),z_o=o(" (MegatronBert model)"),Q_o=l(),ou=a("li"),Qte=a("strong"),W_o=o("mobilebert"),H_o=o(" \u2014 "),d$=a("a"),U_o=o("MobileBertForPreTraining"),J_o=o(" (MobileBERT model)"),Y_o=l(),ru=a("li"),Wte=a("strong"),K_o=o("mpnet"),Z_o=o(" \u2014 "),c$=a("a"),euo=o("MPNetForMaskedLM"),ouo=o(" (MPNet model)"),ruo=l(),tu=a("li"),Hte=a("strong"),tuo=o("openai-gpt"),auo=o(" \u2014 "),f$=a("a"),nuo=o("OpenAIGPTLMHeadModel"),suo=o(" (OpenAI GPT model)"),luo=l(),au=a("li"),Ute=a("strong"),iuo=o("retribert"),duo=o(" \u2014 "),m$=a("a"),cuo=o("RetriBertModel"),fuo=o(" (RetriBERT model)"),muo=l(),nu=a("li"),Jte=a("strong"),guo=o("roberta"),huo=o(" \u2014 "),g$=a("a"),puo=o("RobertaForMaskedLM"),_uo=o(" (RoBERTa model)"),uuo=l(),su=a("li"),Yte=a("strong"),buo=o("squeezebert"),Fuo=o(" \u2014 "),h$=a("a"),vuo=o("SqueezeBertForMaskedLM"),Tuo=o(" (SqueezeBERT model)"),Muo=l(),lu=a("li"),Kte=a("strong"),Euo=o("t5"),Cuo=o(" \u2014 "),p$=a("a"),wuo=o("T5ForConditionalGeneration"),Auo=o(" (T5 model)"),yuo=l(),iu=a("li"),Zte=a("strong"),Luo=o("tapas"),xuo=o(" \u2014 "),_$=a("a"),kuo=o("TapasForMaskedLM"),Suo=o(" (TAPAS model)"),Ruo=l(),du=a("li"),eae=a("strong"),Buo=o("transfo-xl"),Puo=o(" \u2014 "),u$=a("a"),$uo=o("TransfoXLLMHeadModel"),Iuo=o(" (Transformer-XL model)"),quo=l(),cu=a("li"),oae=a("strong"),Nuo=o("unispeech"),juo=o(" \u2014 "),b$=a("a"),Duo=o("UniSpeechForPreTraining"),Guo=o(" (UniSpeech model)"),Ouo=l(),fu=a("li"),rae=a("strong"),Vuo=o("unispeech-sat"),Xuo=o(" \u2014 "),F$=a("a"),zuo=o("UniSpeechSatForPreTraining"),Quo=o(" (UniSpeechSat model)"),Wuo=l(),mu=a("li"),tae=a("strong"),Huo=o("visual_bert"),Uuo=o(" \u2014 "),v$=a("a"),Juo=o("VisualBertForPreTraining"),Yuo=o(" (VisualBert model)"),Kuo=l(),gu=a("li"),aae=a("strong"),Zuo=o("vit_mae"),e1o=o(" \u2014 "),T$=a("a"),o1o=o("ViTMAEForPreTraining"),r1o=o(" (ViTMAE model)"),t1o=l(),hu=a("li"),nae=a("strong"),a1o=o("wav2vec2"),n1o=o(" \u2014 "),M$=a("a"),s1o=o("Wav2Vec2ForPreTraining"),l1o=o(" (Wav2Vec2 model)"),i1o=l(),pu=a("li"),sae=a("strong"),d1o=o("xlm"),c1o=o(" \u2014 "),E$=a("a"),f1o=o("XLMWithLMHeadModel"),m1o=o(" (XLM model)"),g1o=l(),_u=a("li"),lae=a("strong"),h1o=o("xlm-roberta"),p1o=o(" \u2014 "),C$=a("a"),_1o=o("XLMRobertaForMaskedLM"),u1o=o(" (XLM-RoBERTa model)"),b1o=l(),uu=a("li"),iae=a("strong"),F1o=o("xlm-roberta-xl"),v1o=o(" \u2014 "),w$=a("a"),T1o=o("XLMRobertaXLForMaskedLM"),M1o=o(" (XLM-RoBERTa-XL model)"),E1o=l(),bu=a("li"),dae=a("strong"),C1o=o("xlnet"),w1o=o(" \u2014 "),A$=a("a"),A1o=o("XLNetLMHeadModel"),y1o=o(" (XLNet model)"),L1o=l(),Fu=a("p"),x1o=o("The model is set in evaluation mode by default using "),cae=a("code"),k1o=o("model.eval()"),S1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=a("code"),R1o=o("model.train()"),B1o=l(),mae=a("p"),P1o=o("Examples:"),$1o=l(),f(fw.$$.fragment),mRe=l(),rd=a("h2"),vu=a("a"),gae=a("span"),f(mw.$$.fragment),I1o=l(),hae=a("span"),q1o=o("AutoModelForCausalLM"),gRe=l(),Ko=a("div"),f(gw.$$.fragment),N1o=l(),td=a("p"),j1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),y$=a("a"),D1o=o("from_pretrained()"),G1o=o(" class method or the "),L$=a("a"),O1o=o("from_config()"),V1o=o(` class
method.`),X1o=l(),hw=a("p"),z1o=o("This class cannot be instantiated directly using "),pae=a("code"),Q1o=o("__init__()"),W1o=o(" (throws an error)."),H1o=l(),Qr=a("div"),f(pw.$$.fragment),U1o=l(),_ae=a("p"),J1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y1o=l(),ad=a("p"),K1o=o(`Note:
Loading a model from its configuration file does `),uae=a("strong"),Z1o=o("not"),e7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x$=a("a"),o7o=o("from_pretrained()"),r7o=o(" to load the model weights."),t7o=l(),bae=a("p"),a7o=o("Examples:"),n7o=l(),f(_w.$$.fragment),s7o=l(),je=a("div"),f(uw.$$.fragment),l7o=l(),Fae=a("p"),i7o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),d7o=l(),Qa=a("p"),c7o=o("The model class to instantiate is selected based on the "),vae=a("code"),f7o=o("model_type"),m7o=o(` property of the config object (either
passed as an argument or loaded from `),Tae=a("code"),g7o=o("pretrained_model_name_or_path"),h7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=a("code"),p7o=o("pretrained_model_name_or_path"),_7o=o(":"),u7o=l(),$=a("ul"),Tu=a("li"),Eae=a("strong"),b7o=o("bart"),F7o=o(" \u2014 "),k$=a("a"),v7o=o("BartForCausalLM"),T7o=o(" (BART model)"),M7o=l(),Mu=a("li"),Cae=a("strong"),E7o=o("bert"),C7o=o(" \u2014 "),S$=a("a"),w7o=o("BertLMHeadModel"),A7o=o(" (BERT model)"),y7o=l(),Eu=a("li"),wae=a("strong"),L7o=o("bert-generation"),x7o=o(" \u2014 "),R$=a("a"),k7o=o("BertGenerationDecoder"),S7o=o(" (Bert Generation model)"),R7o=l(),Cu=a("li"),Aae=a("strong"),B7o=o("big_bird"),P7o=o(" \u2014 "),B$=a("a"),$7o=o("BigBirdForCausalLM"),I7o=o(" (BigBird model)"),q7o=l(),wu=a("li"),yae=a("strong"),N7o=o("bigbird_pegasus"),j7o=o(" \u2014 "),P$=a("a"),D7o=o("BigBirdPegasusForCausalLM"),G7o=o(" (BigBirdPegasus model)"),O7o=l(),Au=a("li"),Lae=a("strong"),V7o=o("blenderbot"),X7o=o(" \u2014 "),$$=a("a"),z7o=o("BlenderbotForCausalLM"),Q7o=o(" (Blenderbot model)"),W7o=l(),yu=a("li"),xae=a("strong"),H7o=o("blenderbot-small"),U7o=o(" \u2014 "),I$=a("a"),J7o=o("BlenderbotSmallForCausalLM"),Y7o=o(" (BlenderbotSmall model)"),K7o=l(),Lu=a("li"),kae=a("strong"),Z7o=o("camembert"),ebo=o(" \u2014 "),q$=a("a"),obo=o("CamembertForCausalLM"),rbo=o(" (CamemBERT model)"),tbo=l(),xu=a("li"),Sae=a("strong"),abo=o("ctrl"),nbo=o(" \u2014 "),N$=a("a"),sbo=o("CTRLLMHeadModel"),lbo=o(" (CTRL model)"),ibo=l(),ku=a("li"),Rae=a("strong"),dbo=o("data2vec-text"),cbo=o(" \u2014 "),j$=a("a"),fbo=o("Data2VecTextForCausalLM"),mbo=o(" (Data2VecText model)"),gbo=l(),Su=a("li"),Bae=a("strong"),hbo=o("electra"),pbo=o(" \u2014 "),D$=a("a"),_bo=o("ElectraForCausalLM"),ubo=o(" (ELECTRA model)"),bbo=l(),Ru=a("li"),Pae=a("strong"),Fbo=o("gpt2"),vbo=o(" \u2014 "),G$=a("a"),Tbo=o("GPT2LMHeadModel"),Mbo=o(" (OpenAI GPT-2 model)"),Ebo=l(),Bu=a("li"),$ae=a("strong"),Cbo=o("gpt_neo"),wbo=o(" \u2014 "),O$=a("a"),Abo=o("GPTNeoForCausalLM"),ybo=o(" (GPT Neo model)"),Lbo=l(),Pu=a("li"),Iae=a("strong"),xbo=o("gptj"),kbo=o(" \u2014 "),V$=a("a"),Sbo=o("GPTJForCausalLM"),Rbo=o(" (GPT-J model)"),Bbo=l(),$u=a("li"),qae=a("strong"),Pbo=o("marian"),$bo=o(" \u2014 "),X$=a("a"),Ibo=o("MarianForCausalLM"),qbo=o(" (Marian model)"),Nbo=l(),Iu=a("li"),Nae=a("strong"),jbo=o("mbart"),Dbo=o(" \u2014 "),z$=a("a"),Gbo=o("MBartForCausalLM"),Obo=o(" (mBART model)"),Vbo=l(),qu=a("li"),jae=a("strong"),Xbo=o("megatron-bert"),zbo=o(" \u2014 "),Q$=a("a"),Qbo=o("MegatronBertForCausalLM"),Wbo=o(" (MegatronBert model)"),Hbo=l(),Nu=a("li"),Dae=a("strong"),Ubo=o("openai-gpt"),Jbo=o(" \u2014 "),W$=a("a"),Ybo=o("OpenAIGPTLMHeadModel"),Kbo=o(" (OpenAI GPT model)"),Zbo=l(),ju=a("li"),Gae=a("strong"),e5o=o("pegasus"),o5o=o(" \u2014 "),H$=a("a"),r5o=o("PegasusForCausalLM"),t5o=o(" (Pegasus model)"),a5o=l(),Du=a("li"),Oae=a("strong"),n5o=o("plbart"),s5o=o(" \u2014 "),U$=a("a"),l5o=o("PLBartForCausalLM"),i5o=o(" (PLBart model)"),d5o=l(),Gu=a("li"),Vae=a("strong"),c5o=o("prophetnet"),f5o=o(" \u2014 "),J$=a("a"),m5o=o("ProphetNetForCausalLM"),g5o=o(" (ProphetNet model)"),h5o=l(),Ou=a("li"),Xae=a("strong"),p5o=o("qdqbert"),_5o=o(" \u2014 "),Y$=a("a"),u5o=o("QDQBertLMHeadModel"),b5o=o(" (QDQBert model)"),F5o=l(),Vu=a("li"),zae=a("strong"),v5o=o("reformer"),T5o=o(" \u2014 "),K$=a("a"),M5o=o("ReformerModelWithLMHead"),E5o=o(" (Reformer model)"),C5o=l(),Xu=a("li"),Qae=a("strong"),w5o=o("rembert"),A5o=o(" \u2014 "),Z$=a("a"),y5o=o("RemBertForCausalLM"),L5o=o(" (RemBERT model)"),x5o=l(),zu=a("li"),Wae=a("strong"),k5o=o("roberta"),S5o=o(" \u2014 "),eI=a("a"),R5o=o("RobertaForCausalLM"),B5o=o(" (RoBERTa model)"),P5o=l(),Qu=a("li"),Hae=a("strong"),$5o=o("roformer"),I5o=o(" \u2014 "),oI=a("a"),q5o=o("RoFormerForCausalLM"),N5o=o(" (RoFormer model)"),j5o=l(),Wu=a("li"),Uae=a("strong"),D5o=o("speech_to_text_2"),G5o=o(" \u2014 "),rI=a("a"),O5o=o("Speech2Text2ForCausalLM"),V5o=o(" (Speech2Text2 model)"),X5o=l(),Hu=a("li"),Jae=a("strong"),z5o=o("transfo-xl"),Q5o=o(" \u2014 "),tI=a("a"),W5o=o("TransfoXLLMHeadModel"),H5o=o(" (Transformer-XL model)"),U5o=l(),Uu=a("li"),Yae=a("strong"),J5o=o("trocr"),Y5o=o(" \u2014 "),aI=a("a"),K5o=o("TrOCRForCausalLM"),Z5o=o(" (TrOCR model)"),e3o=l(),Ju=a("li"),Kae=a("strong"),o3o=o("xglm"),r3o=o(" \u2014 "),nI=a("a"),t3o=o("XGLMForCausalLM"),a3o=o(" (XGLM model)"),n3o=l(),Yu=a("li"),Zae=a("strong"),s3o=o("xlm"),l3o=o(" \u2014 "),sI=a("a"),i3o=o("XLMWithLMHeadModel"),d3o=o(" (XLM model)"),c3o=l(),Ku=a("li"),ene=a("strong"),f3o=o("xlm-prophetnet"),m3o=o(" \u2014 "),lI=a("a"),g3o=o("XLMProphetNetForCausalLM"),h3o=o(" (XLMProphetNet model)"),p3o=l(),Zu=a("li"),one=a("strong"),_3o=o("xlm-roberta"),u3o=o(" \u2014 "),iI=a("a"),b3o=o("XLMRobertaForCausalLM"),F3o=o(" (XLM-RoBERTa model)"),v3o=l(),e1=a("li"),rne=a("strong"),T3o=o("xlm-roberta-xl"),M3o=o(" \u2014 "),dI=a("a"),E3o=o("XLMRobertaXLForCausalLM"),C3o=o(" (XLM-RoBERTa-XL model)"),w3o=l(),o1=a("li"),tne=a("strong"),A3o=o("xlnet"),y3o=o(" \u2014 "),cI=a("a"),L3o=o("XLNetLMHeadModel"),x3o=o(" (XLNet model)"),k3o=l(),r1=a("p"),S3o=o("The model is set in evaluation mode by default using "),ane=a("code"),R3o=o("model.eval()"),B3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=a("code"),P3o=o("model.train()"),$3o=l(),sne=a("p"),I3o=o("Examples:"),q3o=l(),f(bw.$$.fragment),hRe=l(),nd=a("h2"),t1=a("a"),lne=a("span"),f(Fw.$$.fragment),N3o=l(),ine=a("span"),j3o=o("AutoModelForMaskedLM"),pRe=l(),Zo=a("div"),f(vw.$$.fragment),D3o=l(),sd=a("p"),G3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fI=a("a"),O3o=o("from_pretrained()"),V3o=o(" class method or the "),mI=a("a"),X3o=o("from_config()"),z3o=o(` class
method.`),Q3o=l(),Tw=a("p"),W3o=o("This class cannot be instantiated directly using "),dne=a("code"),H3o=o("__init__()"),U3o=o(" (throws an error)."),J3o=l(),Wr=a("div"),f(Mw.$$.fragment),Y3o=l(),cne=a("p"),K3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z3o=l(),ld=a("p"),e2o=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),o2o=o("not"),r2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=a("a"),t2o=o("from_pretrained()"),a2o=o(" to load the model weights."),n2o=l(),mne=a("p"),s2o=o("Examples:"),l2o=l(),f(Ew.$$.fragment),i2o=l(),De=a("div"),f(Cw.$$.fragment),d2o=l(),gne=a("p"),c2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f2o=l(),Wa=a("p"),m2o=o("The model class to instantiate is selected based on the "),hne=a("code"),g2o=o("model_type"),h2o=o(` property of the config object (either
passed as an argument or loaded from `),pne=a("code"),p2o=o("pretrained_model_name_or_path"),_2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=a("code"),u2o=o("pretrained_model_name_or_path"),b2o=o(":"),F2o=l(),I=a("ul"),a1=a("li"),une=a("strong"),v2o=o("albert"),T2o=o(" \u2014 "),hI=a("a"),M2o=o("AlbertForMaskedLM"),E2o=o(" (ALBERT model)"),C2o=l(),n1=a("li"),bne=a("strong"),w2o=o("bart"),A2o=o(" \u2014 "),pI=a("a"),y2o=o("BartForConditionalGeneration"),L2o=o(" (BART model)"),x2o=l(),s1=a("li"),Fne=a("strong"),k2o=o("bert"),S2o=o(" \u2014 "),_I=a("a"),R2o=o("BertForMaskedLM"),B2o=o(" (BERT model)"),P2o=l(),l1=a("li"),vne=a("strong"),$2o=o("big_bird"),I2o=o(" \u2014 "),uI=a("a"),q2o=o("BigBirdForMaskedLM"),N2o=o(" (BigBird model)"),j2o=l(),i1=a("li"),Tne=a("strong"),D2o=o("camembert"),G2o=o(" \u2014 "),bI=a("a"),O2o=o("CamembertForMaskedLM"),V2o=o(" (CamemBERT model)"),X2o=l(),d1=a("li"),Mne=a("strong"),z2o=o("convbert"),Q2o=o(" \u2014 "),FI=a("a"),W2o=o("ConvBertForMaskedLM"),H2o=o(" (ConvBERT model)"),U2o=l(),c1=a("li"),Ene=a("strong"),J2o=o("data2vec-text"),Y2o=o(" \u2014 "),vI=a("a"),K2o=o("Data2VecTextForMaskedLM"),Z2o=o(" (Data2VecText model)"),eFo=l(),f1=a("li"),Cne=a("strong"),oFo=o("deberta"),rFo=o(" \u2014 "),TI=a("a"),tFo=o("DebertaForMaskedLM"),aFo=o(" (DeBERTa model)"),nFo=l(),m1=a("li"),wne=a("strong"),sFo=o("deberta-v2"),lFo=o(" \u2014 "),MI=a("a"),iFo=o("DebertaV2ForMaskedLM"),dFo=o(" (DeBERTa-v2 model)"),cFo=l(),g1=a("li"),Ane=a("strong"),fFo=o("distilbert"),mFo=o(" \u2014 "),EI=a("a"),gFo=o("DistilBertForMaskedLM"),hFo=o(" (DistilBERT model)"),pFo=l(),h1=a("li"),yne=a("strong"),_Fo=o("electra"),uFo=o(" \u2014 "),CI=a("a"),bFo=o("ElectraForMaskedLM"),FFo=o(" (ELECTRA model)"),vFo=l(),p1=a("li"),Lne=a("strong"),TFo=o("flaubert"),MFo=o(" \u2014 "),wI=a("a"),EFo=o("FlaubertWithLMHeadModel"),CFo=o(" (FlauBERT model)"),wFo=l(),_1=a("li"),xne=a("strong"),AFo=o("fnet"),yFo=o(" \u2014 "),AI=a("a"),LFo=o("FNetForMaskedLM"),xFo=o(" (FNet model)"),kFo=l(),u1=a("li"),kne=a("strong"),SFo=o("funnel"),RFo=o(" \u2014 "),yI=a("a"),BFo=o("FunnelForMaskedLM"),PFo=o(" (Funnel Transformer model)"),$Fo=l(),b1=a("li"),Sne=a("strong"),IFo=o("ibert"),qFo=o(" \u2014 "),LI=a("a"),NFo=o("IBertForMaskedLM"),jFo=o(" (I-BERT model)"),DFo=l(),F1=a("li"),Rne=a("strong"),GFo=o("layoutlm"),OFo=o(" \u2014 "),xI=a("a"),VFo=o("LayoutLMForMaskedLM"),XFo=o(" (LayoutLM model)"),zFo=l(),v1=a("li"),Bne=a("strong"),QFo=o("longformer"),WFo=o(" \u2014 "),kI=a("a"),HFo=o("LongformerForMaskedLM"),UFo=o(" (Longformer model)"),JFo=l(),T1=a("li"),Pne=a("strong"),YFo=o("mbart"),KFo=o(" \u2014 "),SI=a("a"),ZFo=o("MBartForConditionalGeneration"),evo=o(" (mBART model)"),ovo=l(),M1=a("li"),$ne=a("strong"),rvo=o("megatron-bert"),tvo=o(" \u2014 "),RI=a("a"),avo=o("MegatronBertForMaskedLM"),nvo=o(" (MegatronBert model)"),svo=l(),E1=a("li"),Ine=a("strong"),lvo=o("mobilebert"),ivo=o(" \u2014 "),BI=a("a"),dvo=o("MobileBertForMaskedLM"),cvo=o(" (MobileBERT model)"),fvo=l(),C1=a("li"),qne=a("strong"),mvo=o("mpnet"),gvo=o(" \u2014 "),PI=a("a"),hvo=o("MPNetForMaskedLM"),pvo=o(" (MPNet model)"),_vo=l(),w1=a("li"),Nne=a("strong"),uvo=o("nystromformer"),bvo=o(" \u2014 "),$I=a("a"),Fvo=o("NystromformerForMaskedLM"),vvo=o(" (Nystromformer model)"),Tvo=l(),A1=a("li"),jne=a("strong"),Mvo=o("perceiver"),Evo=o(" \u2014 "),II=a("a"),Cvo=o("PerceiverForMaskedLM"),wvo=o(" (Perceiver model)"),Avo=l(),y1=a("li"),Dne=a("strong"),yvo=o("qdqbert"),Lvo=o(" \u2014 "),qI=a("a"),xvo=o("QDQBertForMaskedLM"),kvo=o(" (QDQBert model)"),Svo=l(),L1=a("li"),Gne=a("strong"),Rvo=o("reformer"),Bvo=o(" \u2014 "),NI=a("a"),Pvo=o("ReformerForMaskedLM"),$vo=o(" (Reformer model)"),Ivo=l(),x1=a("li"),One=a("strong"),qvo=o("rembert"),Nvo=o(" \u2014 "),jI=a("a"),jvo=o("RemBertForMaskedLM"),Dvo=o(" (RemBERT model)"),Gvo=l(),k1=a("li"),Vne=a("strong"),Ovo=o("roberta"),Vvo=o(" \u2014 "),DI=a("a"),Xvo=o("RobertaForMaskedLM"),zvo=o(" (RoBERTa model)"),Qvo=l(),S1=a("li"),Xne=a("strong"),Wvo=o("roformer"),Hvo=o(" \u2014 "),GI=a("a"),Uvo=o("RoFormerForMaskedLM"),Jvo=o(" (RoFormer model)"),Yvo=l(),R1=a("li"),zne=a("strong"),Kvo=o("squeezebert"),Zvo=o(" \u2014 "),OI=a("a"),eTo=o("SqueezeBertForMaskedLM"),oTo=o(" (SqueezeBERT model)"),rTo=l(),B1=a("li"),Qne=a("strong"),tTo=o("tapas"),aTo=o(" \u2014 "),VI=a("a"),nTo=o("TapasForMaskedLM"),sTo=o(" (TAPAS model)"),lTo=l(),P1=a("li"),Wne=a("strong"),iTo=o("wav2vec2"),dTo=o(" \u2014 "),Hne=a("code"),cTo=o("Wav2Vec2ForMaskedLM"),fTo=o("(Wav2Vec2 model)"),mTo=l(),$1=a("li"),Une=a("strong"),gTo=o("xlm"),hTo=o(" \u2014 "),XI=a("a"),pTo=o("XLMWithLMHeadModel"),_To=o(" (XLM model)"),uTo=l(),I1=a("li"),Jne=a("strong"),bTo=o("xlm-roberta"),FTo=o(" \u2014 "),zI=a("a"),vTo=o("XLMRobertaForMaskedLM"),TTo=o(" (XLM-RoBERTa model)"),MTo=l(),q1=a("li"),Yne=a("strong"),ETo=o("xlm-roberta-xl"),CTo=o(" \u2014 "),QI=a("a"),wTo=o("XLMRobertaXLForMaskedLM"),ATo=o(" (XLM-RoBERTa-XL model)"),yTo=l(),N1=a("li"),Kne=a("strong"),LTo=o("yoso"),xTo=o(" \u2014 "),WI=a("a"),kTo=o("YosoForMaskedLM"),STo=o(" (YOSO model)"),RTo=l(),j1=a("p"),BTo=o("The model is set in evaluation mode by default using "),Zne=a("code"),PTo=o("model.eval()"),$To=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=a("code"),ITo=o("model.train()"),qTo=l(),ose=a("p"),NTo=o("Examples:"),jTo=l(),f(ww.$$.fragment),_Re=l(),id=a("h2"),D1=a("a"),rse=a("span"),f(Aw.$$.fragment),DTo=l(),tse=a("span"),GTo=o("AutoModelForSeq2SeqLM"),uRe=l(),er=a("div"),f(yw.$$.fragment),OTo=l(),dd=a("p"),VTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HI=a("a"),XTo=o("from_pretrained()"),zTo=o(" class method or the "),UI=a("a"),QTo=o("from_config()"),WTo=o(` class
method.`),HTo=l(),Lw=a("p"),UTo=o("This class cannot be instantiated directly using "),ase=a("code"),JTo=o("__init__()"),YTo=o(" (throws an error)."),KTo=l(),Hr=a("div"),f(xw.$$.fragment),ZTo=l(),nse=a("p"),eMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oMo=l(),cd=a("p"),rMo=o(`Note:
Loading a model from its configuration file does `),sse=a("strong"),tMo=o("not"),aMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=a("a"),nMo=o("from_pretrained()"),sMo=o(" to load the model weights."),lMo=l(),lse=a("p"),iMo=o("Examples:"),dMo=l(),f(kw.$$.fragment),cMo=l(),Ge=a("div"),f(Sw.$$.fragment),fMo=l(),ise=a("p"),mMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gMo=l(),Ha=a("p"),hMo=o("The model class to instantiate is selected based on the "),dse=a("code"),pMo=o("model_type"),_Mo=o(` property of the config object (either
passed as an argument or loaded from `),cse=a("code"),uMo=o("pretrained_model_name_or_path"),bMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=a("code"),FMo=o("pretrained_model_name_or_path"),vMo=o(":"),TMo=l(),se=a("ul"),G1=a("li"),mse=a("strong"),MMo=o("bart"),EMo=o(" \u2014 "),YI=a("a"),CMo=o("BartForConditionalGeneration"),wMo=o(" (BART model)"),AMo=l(),O1=a("li"),gse=a("strong"),yMo=o("bigbird_pegasus"),LMo=o(" \u2014 "),KI=a("a"),xMo=o("BigBirdPegasusForConditionalGeneration"),kMo=o(" (BigBirdPegasus model)"),SMo=l(),V1=a("li"),hse=a("strong"),RMo=o("blenderbot"),BMo=o(" \u2014 "),ZI=a("a"),PMo=o("BlenderbotForConditionalGeneration"),$Mo=o(" (Blenderbot model)"),IMo=l(),X1=a("li"),pse=a("strong"),qMo=o("blenderbot-small"),NMo=o(" \u2014 "),eq=a("a"),jMo=o("BlenderbotSmallForConditionalGeneration"),DMo=o(" (BlenderbotSmall model)"),GMo=l(),z1=a("li"),_se=a("strong"),OMo=o("encoder-decoder"),VMo=o(" \u2014 "),oq=a("a"),XMo=o("EncoderDecoderModel"),zMo=o(" (Encoder decoder model)"),QMo=l(),Q1=a("li"),use=a("strong"),WMo=o("fsmt"),HMo=o(" \u2014 "),rq=a("a"),UMo=o("FSMTForConditionalGeneration"),JMo=o(" (FairSeq Machine-Translation model)"),YMo=l(),W1=a("li"),bse=a("strong"),KMo=o("led"),ZMo=o(" \u2014 "),tq=a("a"),e4o=o("LEDForConditionalGeneration"),o4o=o(" (LED model)"),r4o=l(),H1=a("li"),Fse=a("strong"),t4o=o("m2m_100"),a4o=o(" \u2014 "),aq=a("a"),n4o=o("M2M100ForConditionalGeneration"),s4o=o(" (M2M100 model)"),l4o=l(),U1=a("li"),vse=a("strong"),i4o=o("marian"),d4o=o(" \u2014 "),nq=a("a"),c4o=o("MarianMTModel"),f4o=o(" (Marian model)"),m4o=l(),J1=a("li"),Tse=a("strong"),g4o=o("mbart"),h4o=o(" \u2014 "),sq=a("a"),p4o=o("MBartForConditionalGeneration"),_4o=o(" (mBART model)"),u4o=l(),Y1=a("li"),Mse=a("strong"),b4o=o("mt5"),F4o=o(" \u2014 "),lq=a("a"),v4o=o("MT5ForConditionalGeneration"),T4o=o(" (mT5 model)"),M4o=l(),K1=a("li"),Ese=a("strong"),E4o=o("pegasus"),C4o=o(" \u2014 "),iq=a("a"),w4o=o("PegasusForConditionalGeneration"),A4o=o(" (Pegasus model)"),y4o=l(),Z1=a("li"),Cse=a("strong"),L4o=o("plbart"),x4o=o(" \u2014 "),dq=a("a"),k4o=o("PLBartForConditionalGeneration"),S4o=o(" (PLBart model)"),R4o=l(),e7=a("li"),wse=a("strong"),B4o=o("prophetnet"),P4o=o(" \u2014 "),cq=a("a"),$4o=o("ProphetNetForConditionalGeneration"),I4o=o(" (ProphetNet model)"),q4o=l(),o7=a("li"),Ase=a("strong"),N4o=o("t5"),j4o=o(" \u2014 "),fq=a("a"),D4o=o("T5ForConditionalGeneration"),G4o=o(" (T5 model)"),O4o=l(),r7=a("li"),yse=a("strong"),V4o=o("xlm-prophetnet"),X4o=o(" \u2014 "),mq=a("a"),z4o=o("XLMProphetNetForConditionalGeneration"),Q4o=o(" (XLMProphetNet model)"),W4o=l(),t7=a("p"),H4o=o("The model is set in evaluation mode by default using "),Lse=a("code"),U4o=o("model.eval()"),J4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=a("code"),Y4o=o("model.train()"),K4o=l(),kse=a("p"),Z4o=o("Examples:"),eEo=l(),f(Rw.$$.fragment),bRe=l(),fd=a("h2"),a7=a("a"),Sse=a("span"),f(Bw.$$.fragment),oEo=l(),Rse=a("span"),rEo=o("AutoModelForSequenceClassification"),FRe=l(),or=a("div"),f(Pw.$$.fragment),tEo=l(),md=a("p"),aEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gq=a("a"),nEo=o("from_pretrained()"),sEo=o(" class method or the "),hq=a("a"),lEo=o("from_config()"),iEo=o(` class
method.`),dEo=l(),$w=a("p"),cEo=o("This class cannot be instantiated directly using "),Bse=a("code"),fEo=o("__init__()"),mEo=o(" (throws an error)."),gEo=l(),Ur=a("div"),f(Iw.$$.fragment),hEo=l(),Pse=a("p"),pEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Eo=l(),gd=a("p"),uEo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),bEo=o("not"),FEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=a("a"),vEo=o("from_pretrained()"),TEo=o(" to load the model weights."),MEo=l(),Ise=a("p"),EEo=o("Examples:"),CEo=l(),f(qw.$$.fragment),wEo=l(),Oe=a("div"),f(Nw.$$.fragment),AEo=l(),qse=a("p"),yEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LEo=l(),Ua=a("p"),xEo=o("The model class to instantiate is selected based on the "),Nse=a("code"),kEo=o("model_type"),SEo=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),REo=o("pretrained_model_name_or_path"),BEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=a("code"),PEo=o("pretrained_model_name_or_path"),$Eo=o(":"),IEo=l(),y=a("ul"),n7=a("li"),Gse=a("strong"),qEo=o("albert"),NEo=o(" \u2014 "),_q=a("a"),jEo=o("AlbertForSequenceClassification"),DEo=o(" (ALBERT model)"),GEo=l(),s7=a("li"),Ose=a("strong"),OEo=o("bart"),VEo=o(" \u2014 "),uq=a("a"),XEo=o("BartForSequenceClassification"),zEo=o(" (BART model)"),QEo=l(),l7=a("li"),Vse=a("strong"),WEo=o("bert"),HEo=o(" \u2014 "),bq=a("a"),UEo=o("BertForSequenceClassification"),JEo=o(" (BERT model)"),YEo=l(),i7=a("li"),Xse=a("strong"),KEo=o("big_bird"),ZEo=o(" \u2014 "),Fq=a("a"),eCo=o("BigBirdForSequenceClassification"),oCo=o(" (BigBird model)"),rCo=l(),d7=a("li"),zse=a("strong"),tCo=o("bigbird_pegasus"),aCo=o(" \u2014 "),vq=a("a"),nCo=o("BigBirdPegasusForSequenceClassification"),sCo=o(" (BigBirdPegasus model)"),lCo=l(),c7=a("li"),Qse=a("strong"),iCo=o("camembert"),dCo=o(" \u2014 "),Tq=a("a"),cCo=o("CamembertForSequenceClassification"),fCo=o(" (CamemBERT model)"),mCo=l(),f7=a("li"),Wse=a("strong"),gCo=o("canine"),hCo=o(" \u2014 "),Mq=a("a"),pCo=o("CanineForSequenceClassification"),_Co=o(" (Canine model)"),uCo=l(),m7=a("li"),Hse=a("strong"),bCo=o("convbert"),FCo=o(" \u2014 "),Eq=a("a"),vCo=o("ConvBertForSequenceClassification"),TCo=o(" (ConvBERT model)"),MCo=l(),g7=a("li"),Use=a("strong"),ECo=o("ctrl"),CCo=o(" \u2014 "),Cq=a("a"),wCo=o("CTRLForSequenceClassification"),ACo=o(" (CTRL model)"),yCo=l(),h7=a("li"),Jse=a("strong"),LCo=o("data2vec-text"),xCo=o(" \u2014 "),wq=a("a"),kCo=o("Data2VecTextForSequenceClassification"),SCo=o(" (Data2VecText model)"),RCo=l(),p7=a("li"),Yse=a("strong"),BCo=o("deberta"),PCo=o(" \u2014 "),Aq=a("a"),$Co=o("DebertaForSequenceClassification"),ICo=o(" (DeBERTa model)"),qCo=l(),_7=a("li"),Kse=a("strong"),NCo=o("deberta-v2"),jCo=o(" \u2014 "),yq=a("a"),DCo=o("DebertaV2ForSequenceClassification"),GCo=o(" (DeBERTa-v2 model)"),OCo=l(),u7=a("li"),Zse=a("strong"),VCo=o("distilbert"),XCo=o(" \u2014 "),Lq=a("a"),zCo=o("DistilBertForSequenceClassification"),QCo=o(" (DistilBERT model)"),WCo=l(),b7=a("li"),ele=a("strong"),HCo=o("electra"),UCo=o(" \u2014 "),xq=a("a"),JCo=o("ElectraForSequenceClassification"),YCo=o(" (ELECTRA model)"),KCo=l(),F7=a("li"),ole=a("strong"),ZCo=o("flaubert"),ewo=o(" \u2014 "),kq=a("a"),owo=o("FlaubertForSequenceClassification"),rwo=o(" (FlauBERT model)"),two=l(),v7=a("li"),rle=a("strong"),awo=o("fnet"),nwo=o(" \u2014 "),Sq=a("a"),swo=o("FNetForSequenceClassification"),lwo=o(" (FNet model)"),iwo=l(),T7=a("li"),tle=a("strong"),dwo=o("funnel"),cwo=o(" \u2014 "),Rq=a("a"),fwo=o("FunnelForSequenceClassification"),mwo=o(" (Funnel Transformer model)"),gwo=l(),M7=a("li"),ale=a("strong"),hwo=o("gpt2"),pwo=o(" \u2014 "),Bq=a("a"),_wo=o("GPT2ForSequenceClassification"),uwo=o(" (OpenAI GPT-2 model)"),bwo=l(),E7=a("li"),nle=a("strong"),Fwo=o("gpt_neo"),vwo=o(" \u2014 "),Pq=a("a"),Two=o("GPTNeoForSequenceClassification"),Mwo=o(" (GPT Neo model)"),Ewo=l(),C7=a("li"),sle=a("strong"),Cwo=o("gptj"),wwo=o(" \u2014 "),$q=a("a"),Awo=o("GPTJForSequenceClassification"),ywo=o(" (GPT-J model)"),Lwo=l(),w7=a("li"),lle=a("strong"),xwo=o("ibert"),kwo=o(" \u2014 "),Iq=a("a"),Swo=o("IBertForSequenceClassification"),Rwo=o(" (I-BERT model)"),Bwo=l(),A7=a("li"),ile=a("strong"),Pwo=o("layoutlm"),$wo=o(" \u2014 "),qq=a("a"),Iwo=o("LayoutLMForSequenceClassification"),qwo=o(" (LayoutLM model)"),Nwo=l(),y7=a("li"),dle=a("strong"),jwo=o("layoutlmv2"),Dwo=o(" \u2014 "),Nq=a("a"),Gwo=o("LayoutLMv2ForSequenceClassification"),Owo=o(" (LayoutLMv2 model)"),Vwo=l(),L7=a("li"),cle=a("strong"),Xwo=o("led"),zwo=o(" \u2014 "),jq=a("a"),Qwo=o("LEDForSequenceClassification"),Wwo=o(" (LED model)"),Hwo=l(),x7=a("li"),fle=a("strong"),Uwo=o("longformer"),Jwo=o(" \u2014 "),Dq=a("a"),Ywo=o("LongformerForSequenceClassification"),Kwo=o(" (Longformer model)"),Zwo=l(),k7=a("li"),mle=a("strong"),eAo=o("mbart"),oAo=o(" \u2014 "),Gq=a("a"),rAo=o("MBartForSequenceClassification"),tAo=o(" (mBART model)"),aAo=l(),S7=a("li"),gle=a("strong"),nAo=o("megatron-bert"),sAo=o(" \u2014 "),Oq=a("a"),lAo=o("MegatronBertForSequenceClassification"),iAo=o(" (MegatronBert model)"),dAo=l(),R7=a("li"),hle=a("strong"),cAo=o("mobilebert"),fAo=o(" \u2014 "),Vq=a("a"),mAo=o("MobileBertForSequenceClassification"),gAo=o(" (MobileBERT model)"),hAo=l(),B7=a("li"),ple=a("strong"),pAo=o("mpnet"),_Ao=o(" \u2014 "),Xq=a("a"),uAo=o("MPNetForSequenceClassification"),bAo=o(" (MPNet model)"),FAo=l(),P7=a("li"),_le=a("strong"),vAo=o("nystromformer"),TAo=o(" \u2014 "),zq=a("a"),MAo=o("NystromformerForSequenceClassification"),EAo=o(" (Nystromformer model)"),CAo=l(),$7=a("li"),ule=a("strong"),wAo=o("openai-gpt"),AAo=o(" \u2014 "),Qq=a("a"),yAo=o("OpenAIGPTForSequenceClassification"),LAo=o(" (OpenAI GPT model)"),xAo=l(),I7=a("li"),ble=a("strong"),kAo=o("perceiver"),SAo=o(" \u2014 "),Wq=a("a"),RAo=o("PerceiverForSequenceClassification"),BAo=o(" (Perceiver model)"),PAo=l(),q7=a("li"),Fle=a("strong"),$Ao=o("plbart"),IAo=o(" \u2014 "),Hq=a("a"),qAo=o("PLBartForSequenceClassification"),NAo=o(" (PLBart model)"),jAo=l(),N7=a("li"),vle=a("strong"),DAo=o("qdqbert"),GAo=o(" \u2014 "),Uq=a("a"),OAo=o("QDQBertForSequenceClassification"),VAo=o(" (QDQBert model)"),XAo=l(),j7=a("li"),Tle=a("strong"),zAo=o("reformer"),QAo=o(" \u2014 "),Jq=a("a"),WAo=o("ReformerForSequenceClassification"),HAo=o(" (Reformer model)"),UAo=l(),D7=a("li"),Mle=a("strong"),JAo=o("rembert"),YAo=o(" \u2014 "),Yq=a("a"),KAo=o("RemBertForSequenceClassification"),ZAo=o(" (RemBERT model)"),e6o=l(),G7=a("li"),Ele=a("strong"),o6o=o("roberta"),r6o=o(" \u2014 "),Kq=a("a"),t6o=o("RobertaForSequenceClassification"),a6o=o(" (RoBERTa model)"),n6o=l(),O7=a("li"),Cle=a("strong"),s6o=o("roformer"),l6o=o(" \u2014 "),Zq=a("a"),i6o=o("RoFormerForSequenceClassification"),d6o=o(" (RoFormer model)"),c6o=l(),V7=a("li"),wle=a("strong"),f6o=o("squeezebert"),m6o=o(" \u2014 "),eN=a("a"),g6o=o("SqueezeBertForSequenceClassification"),h6o=o(" (SqueezeBERT model)"),p6o=l(),X7=a("li"),Ale=a("strong"),_6o=o("tapas"),u6o=o(" \u2014 "),oN=a("a"),b6o=o("TapasForSequenceClassification"),F6o=o(" (TAPAS model)"),v6o=l(),z7=a("li"),yle=a("strong"),T6o=o("transfo-xl"),M6o=o(" \u2014 "),rN=a("a"),E6o=o("TransfoXLForSequenceClassification"),C6o=o(" (Transformer-XL model)"),w6o=l(),Q7=a("li"),Lle=a("strong"),A6o=o("xlm"),y6o=o(" \u2014 "),tN=a("a"),L6o=o("XLMForSequenceClassification"),x6o=o(" (XLM model)"),k6o=l(),W7=a("li"),xle=a("strong"),S6o=o("xlm-roberta"),R6o=o(" \u2014 "),aN=a("a"),B6o=o("XLMRobertaForSequenceClassification"),P6o=o(" (XLM-RoBERTa model)"),$6o=l(),H7=a("li"),kle=a("strong"),I6o=o("xlm-roberta-xl"),q6o=o(" \u2014 "),nN=a("a"),N6o=o("XLMRobertaXLForSequenceClassification"),j6o=o(" (XLM-RoBERTa-XL model)"),D6o=l(),U7=a("li"),Sle=a("strong"),G6o=o("xlnet"),O6o=o(" \u2014 "),sN=a("a"),V6o=o("XLNetForSequenceClassification"),X6o=o(" (XLNet model)"),z6o=l(),J7=a("li"),Rle=a("strong"),Q6o=o("yoso"),W6o=o(" \u2014 "),lN=a("a"),H6o=o("YosoForSequenceClassification"),U6o=o(" (YOSO model)"),J6o=l(),Y7=a("p"),Y6o=o("The model is set in evaluation mode by default using "),Ble=a("code"),K6o=o("model.eval()"),Z6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=a("code"),e0o=o("model.train()"),o0o=l(),$le=a("p"),r0o=o("Examples:"),t0o=l(),f(jw.$$.fragment),vRe=l(),hd=a("h2"),K7=a("a"),Ile=a("span"),f(Dw.$$.fragment),a0o=l(),qle=a("span"),n0o=o("AutoModelForMultipleChoice"),TRe=l(),rr=a("div"),f(Gw.$$.fragment),s0o=l(),pd=a("p"),l0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iN=a("a"),i0o=o("from_pretrained()"),d0o=o(" class method or the "),dN=a("a"),c0o=o("from_config()"),f0o=o(` class
method.`),m0o=l(),Ow=a("p"),g0o=o("This class cannot be instantiated directly using "),Nle=a("code"),h0o=o("__init__()"),p0o=o(" (throws an error)."),_0o=l(),Jr=a("div"),f(Vw.$$.fragment),u0o=l(),jle=a("p"),b0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F0o=l(),_d=a("p"),v0o=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),T0o=o("not"),M0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cN=a("a"),E0o=o("from_pretrained()"),C0o=o(" to load the model weights."),w0o=l(),Gle=a("p"),A0o=o("Examples:"),y0o=l(),f(Xw.$$.fragment),L0o=l(),Ve=a("div"),f(zw.$$.fragment),x0o=l(),Ole=a("p"),k0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S0o=l(),Ja=a("p"),R0o=o("The model class to instantiate is selected based on the "),Vle=a("code"),B0o=o("model_type"),P0o=o(` property of the config object (either
passed as an argument or loaded from `),Xle=a("code"),$0o=o("pretrained_model_name_or_path"),I0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=a("code"),q0o=o("pretrained_model_name_or_path"),N0o=o(":"),j0o=l(),G=a("ul"),Z7=a("li"),Qle=a("strong"),D0o=o("albert"),G0o=o(" \u2014 "),fN=a("a"),O0o=o("AlbertForMultipleChoice"),V0o=o(" (ALBERT model)"),X0o=l(),eb=a("li"),Wle=a("strong"),z0o=o("bert"),Q0o=o(" \u2014 "),mN=a("a"),W0o=o("BertForMultipleChoice"),H0o=o(" (BERT model)"),U0o=l(),ob=a("li"),Hle=a("strong"),J0o=o("big_bird"),Y0o=o(" \u2014 "),gN=a("a"),K0o=o("BigBirdForMultipleChoice"),Z0o=o(" (BigBird model)"),eyo=l(),rb=a("li"),Ule=a("strong"),oyo=o("camembert"),ryo=o(" \u2014 "),hN=a("a"),tyo=o("CamembertForMultipleChoice"),ayo=o(" (CamemBERT model)"),nyo=l(),tb=a("li"),Jle=a("strong"),syo=o("canine"),lyo=o(" \u2014 "),pN=a("a"),iyo=o("CanineForMultipleChoice"),dyo=o(" (Canine model)"),cyo=l(),ab=a("li"),Yle=a("strong"),fyo=o("convbert"),myo=o(" \u2014 "),_N=a("a"),gyo=o("ConvBertForMultipleChoice"),hyo=o(" (ConvBERT model)"),pyo=l(),nb=a("li"),Kle=a("strong"),_yo=o("data2vec-text"),uyo=o(" \u2014 "),uN=a("a"),byo=o("Data2VecTextForMultipleChoice"),Fyo=o(" (Data2VecText model)"),vyo=l(),sb=a("li"),Zle=a("strong"),Tyo=o("distilbert"),Myo=o(" \u2014 "),bN=a("a"),Eyo=o("DistilBertForMultipleChoice"),Cyo=o(" (DistilBERT model)"),wyo=l(),lb=a("li"),eie=a("strong"),Ayo=o("electra"),yyo=o(" \u2014 "),FN=a("a"),Lyo=o("ElectraForMultipleChoice"),xyo=o(" (ELECTRA model)"),kyo=l(),ib=a("li"),oie=a("strong"),Syo=o("flaubert"),Ryo=o(" \u2014 "),vN=a("a"),Byo=o("FlaubertForMultipleChoice"),Pyo=o(" (FlauBERT model)"),$yo=l(),db=a("li"),rie=a("strong"),Iyo=o("fnet"),qyo=o(" \u2014 "),TN=a("a"),Nyo=o("FNetForMultipleChoice"),jyo=o(" (FNet model)"),Dyo=l(),cb=a("li"),tie=a("strong"),Gyo=o("funnel"),Oyo=o(" \u2014 "),MN=a("a"),Vyo=o("FunnelForMultipleChoice"),Xyo=o(" (Funnel Transformer model)"),zyo=l(),fb=a("li"),aie=a("strong"),Qyo=o("ibert"),Wyo=o(" \u2014 "),EN=a("a"),Hyo=o("IBertForMultipleChoice"),Uyo=o(" (I-BERT model)"),Jyo=l(),mb=a("li"),nie=a("strong"),Yyo=o("longformer"),Kyo=o(" \u2014 "),CN=a("a"),Zyo=o("LongformerForMultipleChoice"),eLo=o(" (Longformer model)"),oLo=l(),gb=a("li"),sie=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),wN=a("a"),aLo=o("MegatronBertForMultipleChoice"),nLo=o(" (MegatronBert model)"),sLo=l(),hb=a("li"),lie=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),AN=a("a"),dLo=o("MobileBertForMultipleChoice"),cLo=o(" (MobileBERT model)"),fLo=l(),pb=a("li"),iie=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),yN=a("a"),hLo=o("MPNetForMultipleChoice"),pLo=o(" (MPNet model)"),_Lo=l(),_b=a("li"),die=a("strong"),uLo=o("nystromformer"),bLo=o(" \u2014 "),LN=a("a"),FLo=o("NystromformerForMultipleChoice"),vLo=o(" (Nystromformer model)"),TLo=l(),ub=a("li"),cie=a("strong"),MLo=o("qdqbert"),ELo=o(" \u2014 "),xN=a("a"),CLo=o("QDQBertForMultipleChoice"),wLo=o(" (QDQBert model)"),ALo=l(),bb=a("li"),fie=a("strong"),yLo=o("rembert"),LLo=o(" \u2014 "),kN=a("a"),xLo=o("RemBertForMultipleChoice"),kLo=o(" (RemBERT model)"),SLo=l(),Fb=a("li"),mie=a("strong"),RLo=o("roberta"),BLo=o(" \u2014 "),SN=a("a"),PLo=o("RobertaForMultipleChoice"),$Lo=o(" (RoBERTa model)"),ILo=l(),vb=a("li"),gie=a("strong"),qLo=o("roformer"),NLo=o(" \u2014 "),RN=a("a"),jLo=o("RoFormerForMultipleChoice"),DLo=o(" (RoFormer model)"),GLo=l(),Tb=a("li"),hie=a("strong"),OLo=o("squeezebert"),VLo=o(" \u2014 "),BN=a("a"),XLo=o("SqueezeBertForMultipleChoice"),zLo=o(" (SqueezeBERT model)"),QLo=l(),Mb=a("li"),pie=a("strong"),WLo=o("xlm"),HLo=o(" \u2014 "),PN=a("a"),ULo=o("XLMForMultipleChoice"),JLo=o(" (XLM model)"),YLo=l(),Eb=a("li"),_ie=a("strong"),KLo=o("xlm-roberta"),ZLo=o(" \u2014 "),$N=a("a"),e8o=o("XLMRobertaForMultipleChoice"),o8o=o(" (XLM-RoBERTa model)"),r8o=l(),Cb=a("li"),uie=a("strong"),t8o=o("xlm-roberta-xl"),a8o=o(" \u2014 "),IN=a("a"),n8o=o("XLMRobertaXLForMultipleChoice"),s8o=o(" (XLM-RoBERTa-XL model)"),l8o=l(),wb=a("li"),bie=a("strong"),i8o=o("xlnet"),d8o=o(" \u2014 "),qN=a("a"),c8o=o("XLNetForMultipleChoice"),f8o=o(" (XLNet model)"),m8o=l(),Ab=a("li"),Fie=a("strong"),g8o=o("yoso"),h8o=o(" \u2014 "),NN=a("a"),p8o=o("YosoForMultipleChoice"),_8o=o(" (YOSO model)"),u8o=l(),yb=a("p"),b8o=o("The model is set in evaluation mode by default using "),vie=a("code"),F8o=o("model.eval()"),v8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),T8o=o("model.train()"),M8o=l(),Mie=a("p"),E8o=o("Examples:"),C8o=l(),f(Qw.$$.fragment),MRe=l(),ud=a("h2"),Lb=a("a"),Eie=a("span"),f(Ww.$$.fragment),w8o=l(),Cie=a("span"),A8o=o("AutoModelForNextSentencePrediction"),ERe=l(),tr=a("div"),f(Hw.$$.fragment),y8o=l(),bd=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jN=a("a"),x8o=o("from_pretrained()"),k8o=o(" class method or the "),DN=a("a"),S8o=o("from_config()"),R8o=o(` class
method.`),B8o=l(),Uw=a("p"),P8o=o("This class cannot be instantiated directly using "),wie=a("code"),$8o=o("__init__()"),I8o=o(" (throws an error)."),q8o=l(),Yr=a("div"),f(Jw.$$.fragment),N8o=l(),Aie=a("p"),j8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D8o=l(),Fd=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),yie=a("strong"),O8o=o("not"),V8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=a("a"),X8o=o("from_pretrained()"),z8o=o(" to load the model weights."),Q8o=l(),Lie=a("p"),W8o=o("Examples:"),H8o=l(),f(Yw.$$.fragment),U8o=l(),Xe=a("div"),f(Kw.$$.fragment),J8o=l(),xie=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K8o=l(),Ya=a("p"),Z8o=o("The model class to instantiate is selected based on the "),kie=a("code"),e9o=o("model_type"),o9o=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),r9o=o("pretrained_model_name_or_path"),t9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),a9o=o("pretrained_model_name_or_path"),n9o=o(":"),s9o=l(),da=a("ul"),xb=a("li"),Bie=a("strong"),l9o=o("bert"),i9o=o(" \u2014 "),ON=a("a"),d9o=o("BertForNextSentencePrediction"),c9o=o(" (BERT model)"),f9o=l(),kb=a("li"),Pie=a("strong"),m9o=o("fnet"),g9o=o(" \u2014 "),VN=a("a"),h9o=o("FNetForNextSentencePrediction"),p9o=o(" (FNet model)"),_9o=l(),Sb=a("li"),$ie=a("strong"),u9o=o("megatron-bert"),b9o=o(" \u2014 "),XN=a("a"),F9o=o("MegatronBertForNextSentencePrediction"),v9o=o(" (MegatronBert model)"),T9o=l(),Rb=a("li"),Iie=a("strong"),M9o=o("mobilebert"),E9o=o(" \u2014 "),zN=a("a"),C9o=o("MobileBertForNextSentencePrediction"),w9o=o(" (MobileBERT model)"),A9o=l(),Bb=a("li"),qie=a("strong"),y9o=o("qdqbert"),L9o=o(" \u2014 "),QN=a("a"),x9o=o("QDQBertForNextSentencePrediction"),k9o=o(" (QDQBert model)"),S9o=l(),Pb=a("p"),R9o=o("The model is set in evaluation mode by default using "),Nie=a("code"),B9o=o("model.eval()"),P9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),$9o=o("model.train()"),I9o=l(),Die=a("p"),q9o=o("Examples:"),N9o=l(),f(Zw.$$.fragment),CRe=l(),vd=a("h2"),$b=a("a"),Gie=a("span"),f(eA.$$.fragment),j9o=l(),Oie=a("span"),D9o=o("AutoModelForTokenClassification"),wRe=l(),ar=a("div"),f(oA.$$.fragment),G9o=l(),Td=a("p"),O9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WN=a("a"),V9o=o("from_pretrained()"),X9o=o(" class method or the "),HN=a("a"),z9o=o("from_config()"),Q9o=o(` class
method.`),W9o=l(),rA=a("p"),H9o=o("This class cannot be instantiated directly using "),Vie=a("code"),U9o=o("__init__()"),J9o=o(" (throws an error)."),Y9o=l(),Kr=a("div"),f(tA.$$.fragment),K9o=l(),Xie=a("p"),Z9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),exo=l(),Md=a("p"),oxo=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),rxo=o("not"),txo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=a("a"),axo=o("from_pretrained()"),nxo=o(" to load the model weights."),sxo=l(),Qie=a("p"),lxo=o("Examples:"),ixo=l(),f(aA.$$.fragment),dxo=l(),ze=a("div"),f(nA.$$.fragment),cxo=l(),Wie=a("p"),fxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mxo=l(),Ka=a("p"),gxo=o("The model class to instantiate is selected based on the "),Hie=a("code"),hxo=o("model_type"),pxo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),bxo=o("pretrained_model_name_or_path"),Fxo=o(":"),vxo=l(),j=a("ul"),Ib=a("li"),Yie=a("strong"),Txo=o("albert"),Mxo=o(" \u2014 "),JN=a("a"),Exo=o("AlbertForTokenClassification"),Cxo=o(" (ALBERT model)"),wxo=l(),qb=a("li"),Kie=a("strong"),Axo=o("bert"),yxo=o(" \u2014 "),YN=a("a"),Lxo=o("BertForTokenClassification"),xxo=o(" (BERT model)"),kxo=l(),Nb=a("li"),Zie=a("strong"),Sxo=o("big_bird"),Rxo=o(" \u2014 "),KN=a("a"),Bxo=o("BigBirdForTokenClassification"),Pxo=o(" (BigBird model)"),$xo=l(),jb=a("li"),ede=a("strong"),Ixo=o("camembert"),qxo=o(" \u2014 "),ZN=a("a"),Nxo=o("CamembertForTokenClassification"),jxo=o(" (CamemBERT model)"),Dxo=l(),Db=a("li"),ode=a("strong"),Gxo=o("canine"),Oxo=o(" \u2014 "),ej=a("a"),Vxo=o("CanineForTokenClassification"),Xxo=o(" (Canine model)"),zxo=l(),Gb=a("li"),rde=a("strong"),Qxo=o("convbert"),Wxo=o(" \u2014 "),oj=a("a"),Hxo=o("ConvBertForTokenClassification"),Uxo=o(" (ConvBERT model)"),Jxo=l(),Ob=a("li"),tde=a("strong"),Yxo=o("data2vec-text"),Kxo=o(" \u2014 "),rj=a("a"),Zxo=o("Data2VecTextForTokenClassification"),eko=o(" (Data2VecText model)"),oko=l(),Vb=a("li"),ade=a("strong"),rko=o("deberta"),tko=o(" \u2014 "),tj=a("a"),ako=o("DebertaForTokenClassification"),nko=o(" (DeBERTa model)"),sko=l(),Xb=a("li"),nde=a("strong"),lko=o("deberta-v2"),iko=o(" \u2014 "),aj=a("a"),dko=o("DebertaV2ForTokenClassification"),cko=o(" (DeBERTa-v2 model)"),fko=l(),zb=a("li"),sde=a("strong"),mko=o("distilbert"),gko=o(" \u2014 "),nj=a("a"),hko=o("DistilBertForTokenClassification"),pko=o(" (DistilBERT model)"),_ko=l(),Qb=a("li"),lde=a("strong"),uko=o("electra"),bko=o(" \u2014 "),sj=a("a"),Fko=o("ElectraForTokenClassification"),vko=o(" (ELECTRA model)"),Tko=l(),Wb=a("li"),ide=a("strong"),Mko=o("flaubert"),Eko=o(" \u2014 "),lj=a("a"),Cko=o("FlaubertForTokenClassification"),wko=o(" (FlauBERT model)"),Ako=l(),Hb=a("li"),dde=a("strong"),yko=o("fnet"),Lko=o(" \u2014 "),ij=a("a"),xko=o("FNetForTokenClassification"),kko=o(" (FNet model)"),Sko=l(),Ub=a("li"),cde=a("strong"),Rko=o("funnel"),Bko=o(" \u2014 "),dj=a("a"),Pko=o("FunnelForTokenClassification"),$ko=o(" (Funnel Transformer model)"),Iko=l(),Jb=a("li"),fde=a("strong"),qko=o("gpt2"),Nko=o(" \u2014 "),cj=a("a"),jko=o("GPT2ForTokenClassification"),Dko=o(" (OpenAI GPT-2 model)"),Gko=l(),Yb=a("li"),mde=a("strong"),Oko=o("ibert"),Vko=o(" \u2014 "),fj=a("a"),Xko=o("IBertForTokenClassification"),zko=o(" (I-BERT model)"),Qko=l(),Kb=a("li"),gde=a("strong"),Wko=o("layoutlm"),Hko=o(" \u2014 "),mj=a("a"),Uko=o("LayoutLMForTokenClassification"),Jko=o(" (LayoutLM model)"),Yko=l(),Zb=a("li"),hde=a("strong"),Kko=o("layoutlmv2"),Zko=o(" \u2014 "),gj=a("a"),eSo=o("LayoutLMv2ForTokenClassification"),oSo=o(" (LayoutLMv2 model)"),rSo=l(),e5=a("li"),pde=a("strong"),tSo=o("longformer"),aSo=o(" \u2014 "),hj=a("a"),nSo=o("LongformerForTokenClassification"),sSo=o(" (Longformer model)"),lSo=l(),o5=a("li"),_de=a("strong"),iSo=o("megatron-bert"),dSo=o(" \u2014 "),pj=a("a"),cSo=o("MegatronBertForTokenClassification"),fSo=o(" (MegatronBert model)"),mSo=l(),r5=a("li"),ude=a("strong"),gSo=o("mobilebert"),hSo=o(" \u2014 "),_j=a("a"),pSo=o("MobileBertForTokenClassification"),_So=o(" (MobileBERT model)"),uSo=l(),t5=a("li"),bde=a("strong"),bSo=o("mpnet"),FSo=o(" \u2014 "),uj=a("a"),vSo=o("MPNetForTokenClassification"),TSo=o(" (MPNet model)"),MSo=l(),a5=a("li"),Fde=a("strong"),ESo=o("nystromformer"),CSo=o(" \u2014 "),bj=a("a"),wSo=o("NystromformerForTokenClassification"),ASo=o(" (Nystromformer model)"),ySo=l(),n5=a("li"),vde=a("strong"),LSo=o("qdqbert"),xSo=o(" \u2014 "),Fj=a("a"),kSo=o("QDQBertForTokenClassification"),SSo=o(" (QDQBert model)"),RSo=l(),s5=a("li"),Tde=a("strong"),BSo=o("rembert"),PSo=o(" \u2014 "),vj=a("a"),$So=o("RemBertForTokenClassification"),ISo=o(" (RemBERT model)"),qSo=l(),l5=a("li"),Mde=a("strong"),NSo=o("roberta"),jSo=o(" \u2014 "),Tj=a("a"),DSo=o("RobertaForTokenClassification"),GSo=o(" (RoBERTa model)"),OSo=l(),i5=a("li"),Ede=a("strong"),VSo=o("roformer"),XSo=o(" \u2014 "),Mj=a("a"),zSo=o("RoFormerForTokenClassification"),QSo=o(" (RoFormer model)"),WSo=l(),d5=a("li"),Cde=a("strong"),HSo=o("squeezebert"),USo=o(" \u2014 "),Ej=a("a"),JSo=o("SqueezeBertForTokenClassification"),YSo=o(" (SqueezeBERT model)"),KSo=l(),c5=a("li"),wde=a("strong"),ZSo=o("xlm"),eRo=o(" \u2014 "),Cj=a("a"),oRo=o("XLMForTokenClassification"),rRo=o(" (XLM model)"),tRo=l(),f5=a("li"),Ade=a("strong"),aRo=o("xlm-roberta"),nRo=o(" \u2014 "),wj=a("a"),sRo=o("XLMRobertaForTokenClassification"),lRo=o(" (XLM-RoBERTa model)"),iRo=l(),m5=a("li"),yde=a("strong"),dRo=o("xlm-roberta-xl"),cRo=o(" \u2014 "),Aj=a("a"),fRo=o("XLMRobertaXLForTokenClassification"),mRo=o(" (XLM-RoBERTa-XL model)"),gRo=l(),g5=a("li"),Lde=a("strong"),hRo=o("xlnet"),pRo=o(" \u2014 "),yj=a("a"),_Ro=o("XLNetForTokenClassification"),uRo=o(" (XLNet model)"),bRo=l(),h5=a("li"),xde=a("strong"),FRo=o("yoso"),vRo=o(" \u2014 "),Lj=a("a"),TRo=o("YosoForTokenClassification"),MRo=o(" (YOSO model)"),ERo=l(),p5=a("p"),CRo=o("The model is set in evaluation mode by default using "),kde=a("code"),wRo=o("model.eval()"),ARo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),yRo=o("model.train()"),LRo=l(),Rde=a("p"),xRo=o("Examples:"),kRo=l(),f(sA.$$.fragment),ARe=l(),Ed=a("h2"),_5=a("a"),Bde=a("span"),f(lA.$$.fragment),SRo=l(),Pde=a("span"),RRo=o("AutoModelForQuestionAnswering"),yRe=l(),nr=a("div"),f(iA.$$.fragment),BRo=l(),Cd=a("p"),PRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xj=a("a"),$Ro=o("from_pretrained()"),IRo=o(" class method or the "),kj=a("a"),qRo=o("from_config()"),NRo=o(` class
method.`),jRo=l(),dA=a("p"),DRo=o("This class cannot be instantiated directly using "),$de=a("code"),GRo=o("__init__()"),ORo=o(" (throws an error)."),VRo=l(),Zr=a("div"),f(cA.$$.fragment),XRo=l(),Ide=a("p"),zRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QRo=l(),wd=a("p"),WRo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),HRo=o("not"),URo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),JRo=o("from_pretrained()"),YRo=o(" to load the model weights."),KRo=l(),Nde=a("p"),ZRo=o("Examples:"),eBo=l(),f(fA.$$.fragment),oBo=l(),Qe=a("div"),f(mA.$$.fragment),rBo=l(),jde=a("p"),tBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aBo=l(),Za=a("p"),nBo=o("The model class to instantiate is selected based on the "),Dde=a("code"),sBo=o("model_type"),lBo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),iBo=o("pretrained_model_name_or_path"),dBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),cBo=o("pretrained_model_name_or_path"),fBo=o(":"),mBo=l(),R=a("ul"),u5=a("li"),Vde=a("strong"),gBo=o("albert"),hBo=o(" \u2014 "),Rj=a("a"),pBo=o("AlbertForQuestionAnswering"),_Bo=o(" (ALBERT model)"),uBo=l(),b5=a("li"),Xde=a("strong"),bBo=o("bart"),FBo=o(" \u2014 "),Bj=a("a"),vBo=o("BartForQuestionAnswering"),TBo=o(" (BART model)"),MBo=l(),F5=a("li"),zde=a("strong"),EBo=o("bert"),CBo=o(" \u2014 "),Pj=a("a"),wBo=o("BertForQuestionAnswering"),ABo=o(" (BERT model)"),yBo=l(),v5=a("li"),Qde=a("strong"),LBo=o("big_bird"),xBo=o(" \u2014 "),$j=a("a"),kBo=o("BigBirdForQuestionAnswering"),SBo=o(" (BigBird model)"),RBo=l(),T5=a("li"),Wde=a("strong"),BBo=o("bigbird_pegasus"),PBo=o(" \u2014 "),Ij=a("a"),$Bo=o("BigBirdPegasusForQuestionAnswering"),IBo=o(" (BigBirdPegasus model)"),qBo=l(),M5=a("li"),Hde=a("strong"),NBo=o("camembert"),jBo=o(" \u2014 "),qj=a("a"),DBo=o("CamembertForQuestionAnswering"),GBo=o(" (CamemBERT model)"),OBo=l(),E5=a("li"),Ude=a("strong"),VBo=o("canine"),XBo=o(" \u2014 "),Nj=a("a"),zBo=o("CanineForQuestionAnswering"),QBo=o(" (Canine model)"),WBo=l(),C5=a("li"),Jde=a("strong"),HBo=o("convbert"),UBo=o(" \u2014 "),jj=a("a"),JBo=o("ConvBertForQuestionAnswering"),YBo=o(" (ConvBERT model)"),KBo=l(),w5=a("li"),Yde=a("strong"),ZBo=o("data2vec-text"),ePo=o(" \u2014 "),Dj=a("a"),oPo=o("Data2VecTextForQuestionAnswering"),rPo=o(" (Data2VecText model)"),tPo=l(),A5=a("li"),Kde=a("strong"),aPo=o("deberta"),nPo=o(" \u2014 "),Gj=a("a"),sPo=o("DebertaForQuestionAnswering"),lPo=o(" (DeBERTa model)"),iPo=l(),y5=a("li"),Zde=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),Oj=a("a"),fPo=o("DebertaV2ForQuestionAnswering"),mPo=o(" (DeBERTa-v2 model)"),gPo=l(),L5=a("li"),ece=a("strong"),hPo=o("distilbert"),pPo=o(" \u2014 "),Vj=a("a"),_Po=o("DistilBertForQuestionAnswering"),uPo=o(" (DistilBERT model)"),bPo=l(),x5=a("li"),oce=a("strong"),FPo=o("electra"),vPo=o(" \u2014 "),Xj=a("a"),TPo=o("ElectraForQuestionAnswering"),MPo=o(" (ELECTRA model)"),EPo=l(),k5=a("li"),rce=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),zj=a("a"),APo=o("FlaubertForQuestionAnsweringSimple"),yPo=o(" (FlauBERT model)"),LPo=l(),S5=a("li"),tce=a("strong"),xPo=o("fnet"),kPo=o(" \u2014 "),Qj=a("a"),SPo=o("FNetForQuestionAnswering"),RPo=o(" (FNet model)"),BPo=l(),R5=a("li"),ace=a("strong"),PPo=o("funnel"),$Po=o(" \u2014 "),Wj=a("a"),IPo=o("FunnelForQuestionAnswering"),qPo=o(" (Funnel Transformer model)"),NPo=l(),B5=a("li"),nce=a("strong"),jPo=o("gptj"),DPo=o(" \u2014 "),Hj=a("a"),GPo=o("GPTJForQuestionAnswering"),OPo=o(" (GPT-J model)"),VPo=l(),P5=a("li"),sce=a("strong"),XPo=o("ibert"),zPo=o(" \u2014 "),Uj=a("a"),QPo=o("IBertForQuestionAnswering"),WPo=o(" (I-BERT model)"),HPo=l(),$5=a("li"),lce=a("strong"),UPo=o("layoutlmv2"),JPo=o(" \u2014 "),Jj=a("a"),YPo=o("LayoutLMv2ForQuestionAnswering"),KPo=o(" (LayoutLMv2 model)"),ZPo=l(),I5=a("li"),ice=a("strong"),e$o=o("led"),o$o=o(" \u2014 "),Yj=a("a"),r$o=o("LEDForQuestionAnswering"),t$o=o(" (LED model)"),a$o=l(),q5=a("li"),dce=a("strong"),n$o=o("longformer"),s$o=o(" \u2014 "),Kj=a("a"),l$o=o("LongformerForQuestionAnswering"),i$o=o(" (Longformer model)"),d$o=l(),N5=a("li"),cce=a("strong"),c$o=o("lxmert"),f$o=o(" \u2014 "),Zj=a("a"),m$o=o("LxmertForQuestionAnswering"),g$o=o(" (LXMERT model)"),h$o=l(),j5=a("li"),fce=a("strong"),p$o=o("mbart"),_$o=o(" \u2014 "),eD=a("a"),u$o=o("MBartForQuestionAnswering"),b$o=o(" (mBART model)"),F$o=l(),D5=a("li"),mce=a("strong"),v$o=o("megatron-bert"),T$o=o(" \u2014 "),oD=a("a"),M$o=o("MegatronBertForQuestionAnswering"),E$o=o(" (MegatronBert model)"),C$o=l(),G5=a("li"),gce=a("strong"),w$o=o("mobilebert"),A$o=o(" \u2014 "),rD=a("a"),y$o=o("MobileBertForQuestionAnswering"),L$o=o(" (MobileBERT model)"),x$o=l(),O5=a("li"),hce=a("strong"),k$o=o("mpnet"),S$o=o(" \u2014 "),tD=a("a"),R$o=o("MPNetForQuestionAnswering"),B$o=o(" (MPNet model)"),P$o=l(),V5=a("li"),pce=a("strong"),$$o=o("nystromformer"),I$o=o(" \u2014 "),aD=a("a"),q$o=o("NystromformerForQuestionAnswering"),N$o=o(" (Nystromformer model)"),j$o=l(),X5=a("li"),_ce=a("strong"),D$o=o("qdqbert"),G$o=o(" \u2014 "),nD=a("a"),O$o=o("QDQBertForQuestionAnswering"),V$o=o(" (QDQBert model)"),X$o=l(),z5=a("li"),uce=a("strong"),z$o=o("reformer"),Q$o=o(" \u2014 "),sD=a("a"),W$o=o("ReformerForQuestionAnswering"),H$o=o(" (Reformer model)"),U$o=l(),Q5=a("li"),bce=a("strong"),J$o=o("rembert"),Y$o=o(" \u2014 "),lD=a("a"),K$o=o("RemBertForQuestionAnswering"),Z$o=o(" (RemBERT model)"),eIo=l(),W5=a("li"),Fce=a("strong"),oIo=o("roberta"),rIo=o(" \u2014 "),iD=a("a"),tIo=o("RobertaForQuestionAnswering"),aIo=o(" (RoBERTa model)"),nIo=l(),H5=a("li"),vce=a("strong"),sIo=o("roformer"),lIo=o(" \u2014 "),dD=a("a"),iIo=o("RoFormerForQuestionAnswering"),dIo=o(" (RoFormer model)"),cIo=l(),U5=a("li"),Tce=a("strong"),fIo=o("splinter"),mIo=o(" \u2014 "),cD=a("a"),gIo=o("SplinterForQuestionAnswering"),hIo=o(" (Splinter model)"),pIo=l(),J5=a("li"),Mce=a("strong"),_Io=o("squeezebert"),uIo=o(" \u2014 "),fD=a("a"),bIo=o("SqueezeBertForQuestionAnswering"),FIo=o(" (SqueezeBERT model)"),vIo=l(),Y5=a("li"),Ece=a("strong"),TIo=o("xlm"),MIo=o(" \u2014 "),mD=a("a"),EIo=o("XLMForQuestionAnsweringSimple"),CIo=o(" (XLM model)"),wIo=l(),K5=a("li"),Cce=a("strong"),AIo=o("xlm-roberta"),yIo=o(" \u2014 "),gD=a("a"),LIo=o("XLMRobertaForQuestionAnswering"),xIo=o(" (XLM-RoBERTa model)"),kIo=l(),Z5=a("li"),wce=a("strong"),SIo=o("xlm-roberta-xl"),RIo=o(" \u2014 "),hD=a("a"),BIo=o("XLMRobertaXLForQuestionAnswering"),PIo=o(" (XLM-RoBERTa-XL model)"),$Io=l(),e3=a("li"),Ace=a("strong"),IIo=o("xlnet"),qIo=o(" \u2014 "),pD=a("a"),NIo=o("XLNetForQuestionAnsweringSimple"),jIo=o(" (XLNet model)"),DIo=l(),o3=a("li"),yce=a("strong"),GIo=o("yoso"),OIo=o(" \u2014 "),_D=a("a"),VIo=o("YosoForQuestionAnswering"),XIo=o(" (YOSO model)"),zIo=l(),r3=a("p"),QIo=o("The model is set in evaluation mode by default using "),Lce=a("code"),WIo=o("model.eval()"),HIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),UIo=o("model.train()"),JIo=l(),kce=a("p"),YIo=o("Examples:"),KIo=l(),f(gA.$$.fragment),LRe=l(),Ad=a("h2"),t3=a("a"),Sce=a("span"),f(hA.$$.fragment),ZIo=l(),Rce=a("span"),eqo=o("AutoModelForTableQuestionAnswering"),xRe=l(),sr=a("div"),f(pA.$$.fragment),oqo=l(),yd=a("p"),rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uD=a("a"),tqo=o("from_pretrained()"),aqo=o(" class method or the "),bD=a("a"),nqo=o("from_config()"),sqo=o(` class
method.`),lqo=l(),_A=a("p"),iqo=o("This class cannot be instantiated directly using "),Bce=a("code"),dqo=o("__init__()"),cqo=o(" (throws an error)."),fqo=l(),et=a("div"),f(uA.$$.fragment),mqo=l(),Pce=a("p"),gqo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hqo=l(),Ld=a("p"),pqo=o(`Note:
Loading a model from its configuration file does `),$ce=a("strong"),_qo=o("not"),uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),bqo=o("from_pretrained()"),Fqo=o(" to load the model weights."),vqo=l(),Ice=a("p"),Tqo=o("Examples:"),Mqo=l(),f(bA.$$.fragment),Eqo=l(),We=a("div"),f(FA.$$.fragment),Cqo=l(),qce=a("p"),wqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Aqo=l(),en=a("p"),yqo=o("The model class to instantiate is selected based on the "),Nce=a("code"),Lqo=o("model_type"),xqo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),kqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),Rqo=o("pretrained_model_name_or_path"),Bqo=o(":"),Pqo=l(),Gce=a("ul"),a3=a("li"),Oce=a("strong"),$qo=o("tapas"),Iqo=o(" \u2014 "),vD=a("a"),qqo=o("TapasForQuestionAnswering"),Nqo=o(" (TAPAS model)"),jqo=l(),n3=a("p"),Dqo=o("The model is set in evaluation mode by default using "),Vce=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=a("code"),Vqo=o("model.train()"),Xqo=l(),zce=a("p"),zqo=o("Examples:"),Qqo=l(),f(vA.$$.fragment),kRe=l(),xd=a("h2"),s3=a("a"),Qce=a("span"),f(TA.$$.fragment),Wqo=l(),Wce=a("span"),Hqo=o("AutoModelForImageClassification"),SRe=l(),lr=a("div"),f(MA.$$.fragment),Uqo=l(),kd=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TD=a("a"),Yqo=o("from_pretrained()"),Kqo=o(" class method or the "),MD=a("a"),Zqo=o("from_config()"),eNo=o(` class
method.`),oNo=l(),EA=a("p"),rNo=o("This class cannot be instantiated directly using "),Hce=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),ot=a("div"),f(CA.$$.fragment),sNo=l(),Uce=a("p"),lNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iNo=l(),Sd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),mNo=o("from_pretrained()"),gNo=o(" to load the model weights."),hNo=l(),Yce=a("p"),pNo=o("Examples:"),_No=l(),f(wA.$$.fragment),uNo=l(),He=a("div"),f(AA.$$.fragment),bNo=l(),Kce=a("p"),FNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vNo=l(),on=a("p"),TNo=o("The model class to instantiate is selected based on the "),Zce=a("code"),MNo=o("model_type"),ENo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),CNo=o("pretrained_model_name_or_path"),wNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),ANo=o("pretrained_model_name_or_path"),yNo=o(":"),LNo=l(),ge=a("ul"),l3=a("li"),rfe=a("strong"),xNo=o("beit"),kNo=o(" \u2014 "),CD=a("a"),SNo=o("BeitForImageClassification"),RNo=o(" (BEiT model)"),BNo=l(),i3=a("li"),tfe=a("strong"),PNo=o("convnext"),$No=o(" \u2014 "),wD=a("a"),INo=o("ConvNextForImageClassification"),qNo=o(" (ConvNext model)"),NNo=l(),Ds=a("li"),afe=a("strong"),jNo=o("deit"),DNo=o(" \u2014 "),AD=a("a"),GNo=o("DeiTForImageClassification"),ONo=o(" or "),yD=a("a"),VNo=o("DeiTForImageClassificationWithTeacher"),XNo=o(" (DeiT model)"),zNo=l(),d3=a("li"),nfe=a("strong"),QNo=o("imagegpt"),WNo=o(" \u2014 "),LD=a("a"),HNo=o("ImageGPTForImageClassification"),UNo=o(" (ImageGPT model)"),JNo=l(),ma=a("li"),sfe=a("strong"),YNo=o("perceiver"),KNo=o(" \u2014 "),xD=a("a"),ZNo=o("PerceiverForImageClassificationLearned"),ejo=o(" or "),kD=a("a"),ojo=o("PerceiverForImageClassificationFourier"),rjo=o(" or "),SD=a("a"),tjo=o("PerceiverForImageClassificationConvProcessing"),ajo=o(" (Perceiver model)"),njo=l(),c3=a("li"),lfe=a("strong"),sjo=o("poolformer"),ljo=o(" \u2014 "),RD=a("a"),ijo=o("PoolFormerForImageClassification"),djo=o(" (PoolFormer model)"),cjo=l(),f3=a("li"),ife=a("strong"),fjo=o("resnet"),mjo=o(" \u2014 "),BD=a("a"),gjo=o("ResNetForImageClassification"),hjo=o(" (ResNet model)"),pjo=l(),m3=a("li"),dfe=a("strong"),_jo=o("segformer"),ujo=o(" \u2014 "),PD=a("a"),bjo=o("SegformerForImageClassification"),Fjo=o(" (SegFormer model)"),vjo=l(),g3=a("li"),cfe=a("strong"),Tjo=o("swin"),Mjo=o(" \u2014 "),$D=a("a"),Ejo=o("SwinForImageClassification"),Cjo=o(" (Swin model)"),wjo=l(),h3=a("li"),ffe=a("strong"),Ajo=o("van"),yjo=o(" \u2014 "),ID=a("a"),Ljo=o("VanForImageClassification"),xjo=o(" (VAN model)"),kjo=l(),p3=a("li"),mfe=a("strong"),Sjo=o("vit"),Rjo=o(" \u2014 "),qD=a("a"),Bjo=o("ViTForImageClassification"),Pjo=o(" (ViT model)"),$jo=l(),_3=a("p"),Ijo=o("The model is set in evaluation mode by default using "),gfe=a("code"),qjo=o("model.eval()"),Njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),jjo=o("model.train()"),Djo=l(),pfe=a("p"),Gjo=o("Examples:"),Ojo=l(),f(yA.$$.fragment),RRe=l(),Rd=a("h2"),u3=a("a"),_fe=a("span"),f(LA.$$.fragment),Vjo=l(),ufe=a("span"),Xjo=o("AutoModelForVision2Seq"),BRe=l(),ir=a("div"),f(xA.$$.fragment),zjo=l(),Bd=a("p"),Qjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ND=a("a"),Wjo=o("from_pretrained()"),Hjo=o(" class method or the "),jD=a("a"),Ujo=o("from_config()"),Jjo=o(` class
method.`),Yjo=l(),kA=a("p"),Kjo=o("This class cannot be instantiated directly using "),bfe=a("code"),Zjo=o("__init__()"),eDo=o(" (throws an error)."),oDo=l(),rt=a("div"),f(SA.$$.fragment),rDo=l(),Ffe=a("p"),tDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aDo=l(),Pd=a("p"),nDo=o(`Note:
Loading a model from its configuration file does `),vfe=a("strong"),sDo=o("not"),lDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),iDo=o("from_pretrained()"),dDo=o(" to load the model weights."),cDo=l(),Tfe=a("p"),fDo=o("Examples:"),mDo=l(),f(RA.$$.fragment),gDo=l(),Ue=a("div"),f(BA.$$.fragment),hDo=l(),Mfe=a("p"),pDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Do=l(),rn=a("p"),uDo=o("The model class to instantiate is selected based on the "),Efe=a("code"),bDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),vDo=o("pretrained_model_name_or_path"),TDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(":"),CDo=l(),Afe=a("ul"),b3=a("li"),yfe=a("strong"),wDo=o("vision-encoder-decoder"),ADo=o(" \u2014 "),GD=a("a"),yDo=o("VisionEncoderDecoderModel"),LDo=o(" (Vision Encoder decoder model)"),xDo=l(),F3=a("p"),kDo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),SDo=o("model.eval()"),RDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),BDo=o("model.train()"),PDo=l(),kfe=a("p"),$Do=o("Examples:"),IDo=l(),f(PA.$$.fragment),PRe=l(),$d=a("h2"),v3=a("a"),Sfe=a("span"),f($A.$$.fragment),qDo=l(),Rfe=a("span"),NDo=o("AutoModelForAudioClassification"),$Re=l(),dr=a("div"),f(IA.$$.fragment),jDo=l(),Id=a("p"),DDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OD=a("a"),GDo=o("from_pretrained()"),ODo=o(" class method or the "),VD=a("a"),VDo=o("from_config()"),XDo=o(` class
method.`),zDo=l(),qA=a("p"),QDo=o("This class cannot be instantiated directly using "),Bfe=a("code"),WDo=o("__init__()"),HDo=o(" (throws an error)."),UDo=l(),tt=a("div"),f(NA.$$.fragment),JDo=l(),Pfe=a("p"),YDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KDo=l(),qd=a("p"),ZDo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),rGo=o("from_pretrained()"),tGo=o(" to load the model weights."),aGo=l(),Ife=a("p"),nGo=o("Examples:"),sGo=l(),f(jA.$$.fragment),lGo=l(),Je=a("div"),f(DA.$$.fragment),iGo=l(),qfe=a("p"),dGo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cGo=l(),tn=a("p"),fGo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),Se=a("ul"),T3=a("li"),Gfe=a("strong"),FGo=o("data2vec-audio"),vGo=o(" \u2014 "),zD=a("a"),TGo=o("Data2VecAudioForSequenceClassification"),MGo=o(" (Data2VecAudio model)"),EGo=l(),M3=a("li"),Ofe=a("strong"),CGo=o("hubert"),wGo=o(" \u2014 "),QD=a("a"),AGo=o("HubertForSequenceClassification"),yGo=o(" (Hubert model)"),LGo=l(),E3=a("li"),Vfe=a("strong"),xGo=o("sew"),kGo=o(" \u2014 "),WD=a("a"),SGo=o("SEWForSequenceClassification"),RGo=o(" (SEW model)"),BGo=l(),C3=a("li"),Xfe=a("strong"),PGo=o("sew-d"),$Go=o(" \u2014 "),HD=a("a"),IGo=o("SEWDForSequenceClassification"),qGo=o(" (SEW-D model)"),NGo=l(),w3=a("li"),zfe=a("strong"),jGo=o("unispeech"),DGo=o(" \u2014 "),UD=a("a"),GGo=o("UniSpeechForSequenceClassification"),OGo=o(" (UniSpeech model)"),VGo=l(),A3=a("li"),Qfe=a("strong"),XGo=o("unispeech-sat"),zGo=o(" \u2014 "),JD=a("a"),QGo=o("UniSpeechSatForSequenceClassification"),WGo=o(" (UniSpeechSat model)"),HGo=l(),y3=a("li"),Wfe=a("strong"),UGo=o("wav2vec2"),JGo=o(" \u2014 "),YD=a("a"),YGo=o("Wav2Vec2ForSequenceClassification"),KGo=o(" (Wav2Vec2 model)"),ZGo=l(),L3=a("li"),Hfe=a("strong"),eOo=o("wavlm"),oOo=o(" \u2014 "),KD=a("a"),rOo=o("WavLMForSequenceClassification"),tOo=o(" (WavLM model)"),aOo=l(),x3=a("p"),nOo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),sOo=o("model.eval()"),lOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),iOo=o("model.train()"),dOo=l(),Yfe=a("p"),cOo=o("Examples:"),fOo=l(),f(GA.$$.fragment),IRe=l(),Nd=a("h2"),k3=a("a"),Kfe=a("span"),f(OA.$$.fragment),mOo=l(),Zfe=a("span"),gOo=o("AutoModelForAudioFrameClassification"),qRe=l(),cr=a("div"),f(VA.$$.fragment),hOo=l(),jd=a("p"),pOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZD=a("a"),_Oo=o("from_pretrained()"),uOo=o(" class method or the "),eG=a("a"),bOo=o("from_config()"),FOo=o(` class
method.`),vOo=l(),XA=a("p"),TOo=o("This class cannot be instantiated directly using "),eme=a("code"),MOo=o("__init__()"),EOo=o(" (throws an error)."),COo=l(),at=a("div"),f(zA.$$.fragment),wOo=l(),ome=a("p"),AOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),yOo=l(),Dd=a("p"),LOo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),xOo=o("not"),kOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),SOo=o("from_pretrained()"),ROo=o(" to load the model weights."),BOo=l(),tme=a("p"),POo=o("Examples:"),$Oo=l(),f(QA.$$.fragment),IOo=l(),Ye=a("div"),f(WA.$$.fragment),qOo=l(),ame=a("p"),NOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jOo=l(),an=a("p"),DOo=o("The model class to instantiate is selected based on the "),nme=a("code"),GOo=o("model_type"),OOo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),zOo=o("pretrained_model_name_or_path"),QOo=o(":"),WOo=l(),nn=a("ul"),S3=a("li"),ime=a("strong"),HOo=o("data2vec-audio"),UOo=o(" \u2014 "),rG=a("a"),JOo=o("Data2VecAudioForAudioFrameClassification"),YOo=o(" (Data2VecAudio model)"),KOo=l(),R3=a("li"),dme=a("strong"),ZOo=o("unispeech-sat"),eVo=o(" \u2014 "),tG=a("a"),oVo=o("UniSpeechSatForAudioFrameClassification"),rVo=o(" (UniSpeechSat model)"),tVo=l(),B3=a("li"),cme=a("strong"),aVo=o("wav2vec2"),nVo=o(" \u2014 "),aG=a("a"),sVo=o("Wav2Vec2ForAudioFrameClassification"),lVo=o(" (Wav2Vec2 model)"),iVo=l(),P3=a("li"),fme=a("strong"),dVo=o("wavlm"),cVo=o(" \u2014 "),nG=a("a"),fVo=o("WavLMForAudioFrameClassification"),mVo=o(" (WavLM model)"),gVo=l(),$3=a("p"),hVo=o("The model is set in evaluation mode by default using "),mme=a("code"),pVo=o("model.eval()"),_Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),uVo=o("model.train()"),bVo=l(),hme=a("p"),FVo=o("Examples:"),vVo=l(),f(HA.$$.fragment),NRe=l(),Gd=a("h2"),I3=a("a"),pme=a("span"),f(UA.$$.fragment),TVo=l(),_me=a("span"),MVo=o("AutoModelForCTC"),jRe=l(),fr=a("div"),f(JA.$$.fragment),EVo=l(),Od=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sG=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),lG=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),YA=a("p"),kVo=o("This class cannot be instantiated directly using "),ume=a("code"),SVo=o("__init__()"),RVo=o(" (throws an error)."),BVo=l(),nt=a("div"),f(KA.$$.fragment),PVo=l(),bme=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IVo=l(),Vd=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),vme=a("p"),VVo=o("Examples:"),XVo=l(),f(ZA.$$.fragment),zVo=l(),Ke=a("div"),f(e6.$$.fragment),QVo=l(),Tme=a("p"),WVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HVo=l(),sn=a("p"),UVo=o("The model class to instantiate is selected based on the "),Mme=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),Re=a("ul"),q3=a("li"),wme=a("strong"),tXo=o("data2vec-audio"),aXo=o(" \u2014 "),dG=a("a"),nXo=o("Data2VecAudioForCTC"),sXo=o(" (Data2VecAudio model)"),lXo=l(),N3=a("li"),Ame=a("strong"),iXo=o("hubert"),dXo=o(" \u2014 "),cG=a("a"),cXo=o("HubertForCTC"),fXo=o(" (Hubert model)"),mXo=l(),j3=a("li"),yme=a("strong"),gXo=o("sew"),hXo=o(" \u2014 "),fG=a("a"),pXo=o("SEWForCTC"),_Xo=o(" (SEW model)"),uXo=l(),D3=a("li"),Lme=a("strong"),bXo=o("sew-d"),FXo=o(" \u2014 "),mG=a("a"),vXo=o("SEWDForCTC"),TXo=o(" (SEW-D model)"),MXo=l(),G3=a("li"),xme=a("strong"),EXo=o("unispeech"),CXo=o(" \u2014 "),gG=a("a"),wXo=o("UniSpeechForCTC"),AXo=o(" (UniSpeech model)"),yXo=l(),O3=a("li"),kme=a("strong"),LXo=o("unispeech-sat"),xXo=o(" \u2014 "),hG=a("a"),kXo=o("UniSpeechSatForCTC"),SXo=o(" (UniSpeechSat model)"),RXo=l(),V3=a("li"),Sme=a("strong"),BXo=o("wav2vec2"),PXo=o(" \u2014 "),pG=a("a"),$Xo=o("Wav2Vec2ForCTC"),IXo=o(" (Wav2Vec2 model)"),qXo=l(),X3=a("li"),Rme=a("strong"),NXo=o("wavlm"),jXo=o(" \u2014 "),_G=a("a"),DXo=o("WavLMForCTC"),GXo=o(" (WavLM model)"),OXo=l(),z3=a("p"),VXo=o("The model is set in evaluation mode by default using "),Bme=a("code"),XXo=o("model.eval()"),zXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),QXo=o("model.train()"),WXo=l(),$me=a("p"),HXo=o("Examples:"),UXo=l(),f(o6.$$.fragment),DRe=l(),Xd=a("h2"),Q3=a("a"),Ime=a("span"),f(r6.$$.fragment),JXo=l(),qme=a("span"),YXo=o("AutoModelForSpeechSeq2Seq"),GRe=l(),mr=a("div"),f(t6.$$.fragment),KXo=l(),zd=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uG=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),bG=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),a6=a("p"),nzo=o("This class cannot be instantiated directly using "),Nme=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),st=a("div"),f(n6.$$.fragment),dzo=l(),jme=a("p"),czo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fzo=l(),Qd=a("p"),mzo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),pzo=o("from_pretrained()"),_zo=o(" to load the model weights."),uzo=l(),Gme=a("p"),bzo=o("Examples:"),Fzo=l(),f(s6.$$.fragment),vzo=l(),Ze=a("div"),f(l6.$$.fragment),Tzo=l(),Ome=a("p"),Mzo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ezo=l(),ln=a("p"),Czo=o("The model class to instantiate is selected based on the "),Vme=a("code"),wzo=o("model_type"),Azo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),xzo=o("pretrained_model_name_or_path"),kzo=o(":"),Szo=l(),i6=a("ul"),W3=a("li"),Qme=a("strong"),Rzo=o("speech-encoder-decoder"),Bzo=o(" \u2014 "),vG=a("a"),Pzo=o("SpeechEncoderDecoderModel"),$zo=o(" (Speech Encoder decoder model)"),Izo=l(),H3=a("li"),Wme=a("strong"),qzo=o("speech_to_text"),Nzo=o(" \u2014 "),TG=a("a"),jzo=o("Speech2TextForConditionalGeneration"),Dzo=o(" (Speech2Text model)"),Gzo=l(),U3=a("p"),Ozo=o("The model is set in evaluation mode by default using "),Hme=a("code"),Vzo=o("model.eval()"),Xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),zzo=o("model.train()"),Qzo=l(),Jme=a("p"),Wzo=o("Examples:"),Hzo=l(),f(d6.$$.fragment),ORe=l(),Wd=a("h2"),J3=a("a"),Yme=a("span"),f(c6.$$.fragment),Uzo=l(),Kme=a("span"),Jzo=o("AutoModelForAudioXVector"),VRe=l(),gr=a("div"),f(f6.$$.fragment),Yzo=l(),Hd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MG=a("a"),Zzo=o("from_pretrained()"),eQo=o(" class method or the "),EG=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),m6=a("p"),aQo=o("This class cannot be instantiated directly using "),Zme=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),lt=a("div"),f(g6.$$.fragment),iQo=l(),ege=a("p"),dQo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cQo=l(),Ud=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),rge=a("p"),uQo=o("Examples:"),bQo=l(),f(h6.$$.fragment),FQo=l(),eo=a("div"),f(p6.$$.fragment),vQo=l(),tge=a("p"),TQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MQo=l(),dn=a("p"),EQo=o("The model class to instantiate is selected based on the "),age=a("code"),CQo=o("model_type"),wQo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),AQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(":"),kQo=l(),cn=a("ul"),Y3=a("li"),lge=a("strong"),SQo=o("data2vec-audio"),RQo=o(" \u2014 "),wG=a("a"),BQo=o("Data2VecAudioForXVector"),PQo=o(" (Data2VecAudio model)"),$Qo=l(),K3=a("li"),ige=a("strong"),IQo=o("unispeech-sat"),qQo=o(" \u2014 "),AG=a("a"),NQo=o("UniSpeechSatForXVector"),jQo=o(" (UniSpeechSat model)"),DQo=l(),Z3=a("li"),dge=a("strong"),GQo=o("wav2vec2"),OQo=o(" \u2014 "),yG=a("a"),VQo=o("Wav2Vec2ForXVector"),XQo=o(" (Wav2Vec2 model)"),zQo=l(),e2=a("li"),cge=a("strong"),QQo=o("wavlm"),WQo=o(" \u2014 "),LG=a("a"),HQo=o("WavLMForXVector"),UQo=o(" (WavLM model)"),JQo=l(),o2=a("p"),YQo=o("The model is set in evaluation mode by default using "),fge=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),eWo=o("model.train()"),oWo=l(),gge=a("p"),rWo=o("Examples:"),tWo=l(),f(_6.$$.fragment),XRe=l(),Jd=a("h2"),r2=a("a"),hge=a("span"),f(u6.$$.fragment),aWo=l(),pge=a("span"),nWo=o("AutoModelForMaskedImageModeling"),zRe=l(),hr=a("div"),f(b6.$$.fragment),sWo=l(),Yd=a("p"),lWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xG=a("a"),iWo=o("from_pretrained()"),dWo=o(" class method or the "),kG=a("a"),cWo=o("from_config()"),fWo=o(` class
method.`),mWo=l(),F6=a("p"),gWo=o("This class cannot be instantiated directly using "),_ge=a("code"),hWo=o("__init__()"),pWo=o(" (throws an error)."),_Wo=l(),it=a("div"),f(v6.$$.fragment),uWo=l(),uge=a("p"),bWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FWo=l(),Kd=a("p"),vWo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),TWo=o("not"),MWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),EWo=o("from_pretrained()"),CWo=o(" to load the model weights."),wWo=l(),Fge=a("p"),AWo=o("Examples:"),yWo=l(),f(T6.$$.fragment),LWo=l(),oo=a("div"),f(M6.$$.fragment),xWo=l(),vge=a("p"),kWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),SWo=l(),fn=a("p"),RWo=o("The model class to instantiate is selected based on the "),Tge=a("code"),BWo=o("model_type"),PWo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),$Wo=o("pretrained_model_name_or_path"),IWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),qWo=o("pretrained_model_name_or_path"),NWo=o(":"),jWo=l(),Zd=a("ul"),t2=a("li"),Cge=a("strong"),DWo=o("deit"),GWo=o(" \u2014 "),RG=a("a"),OWo=o("DeiTForMaskedImageModeling"),VWo=o(" (DeiT model)"),XWo=l(),a2=a("li"),wge=a("strong"),zWo=o("swin"),QWo=o(" \u2014 "),BG=a("a"),WWo=o("SwinForMaskedImageModeling"),HWo=o(" (Swin model)"),UWo=l(),n2=a("li"),Age=a("strong"),JWo=o("vit"),YWo=o(" \u2014 "),PG=a("a"),KWo=o("ViTForMaskedImageModeling"),ZWo=o(" (ViT model)"),eHo=l(),s2=a("p"),oHo=o("The model is set in evaluation mode by default using "),yge=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),aHo=o("model.train()"),nHo=l(),xge=a("p"),sHo=o("Examples:"),lHo=l(),f(E6.$$.fragment),QRe=l(),ec=a("h2"),l2=a("a"),kge=a("span"),f(C6.$$.fragment),iHo=l(),Sge=a("span"),dHo=o("AutoModelForObjectDetection"),WRe=l(),pr=a("div"),f(w6.$$.fragment),cHo=l(),oc=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$G=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),IG=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),A6=a("p"),uHo=o("This class cannot be instantiated directly using "),Rge=a("code"),bHo=o("__init__()"),FHo=o(" (throws an error)."),vHo=l(),dt=a("div"),f(y6.$$.fragment),THo=l(),Bge=a("p"),MHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),EHo=l(),rc=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),$ge=a("p"),kHo=o("Examples:"),SHo=l(),f(L6.$$.fragment),RHo=l(),ro=a("div"),f(x6.$$.fragment),BHo=l(),Ige=a("p"),PHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$Ho=l(),mn=a("p"),IHo=o("The model class to instantiate is selected based on the "),qge=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),Dge=a("ul"),i2=a("li"),Gge=a("strong"),XHo=o("detr"),zHo=o(" \u2014 "),NG=a("a"),QHo=o("DetrForObjectDetection"),WHo=o(" (DETR model)"),HHo=l(),d2=a("p"),UHo=o("The model is set in evaluation mode by default using "),Oge=a("code"),JHo=o("model.eval()"),YHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),KHo=o("model.train()"),ZHo=l(),Xge=a("p"),eUo=o("Examples:"),oUo=l(),f(k6.$$.fragment),HRe=l(),tc=a("h2"),c2=a("a"),zge=a("span"),f(S6.$$.fragment),rUo=l(),Qge=a("span"),tUo=o("AutoModelForImageSegmentation"),URe=l(),_r=a("div"),f(R6.$$.fragment),aUo=l(),ac=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jG=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),DG=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),B6=a("p"),fUo=o("This class cannot be instantiated directly using "),Wge=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),ct=a("div"),f(P6.$$.fragment),pUo=l(),Hge=a("p"),_Uo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),uUo=l(),nc=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),FUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),Jge=a("p"),CUo=o("Examples:"),wUo=l(),f($6.$$.fragment),AUo=l(),to=a("div"),f(I6.$$.fragment),yUo=l(),Yge=a("p"),LUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xUo=l(),gn=a("p"),kUo=o("The model class to instantiate is selected based on the "),Kge=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),BUo=o("pretrained_model_name_or_path"),PUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),$Uo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),ohe=a("ul"),f2=a("li"),rhe=a("strong"),NUo=o("detr"),jUo=o(" \u2014 "),OG=a("a"),DUo=o("DetrForSegmentation"),GUo=o(" (DETR model)"),OUo=l(),m2=a("p"),VUo=o("The model is set in evaluation mode by default using "),the=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),QUo=o("model.train()"),WUo=l(),nhe=a("p"),HUo=o("Examples:"),UUo=l(),f(q6.$$.fragment),JRe=l(),sc=a("h2"),g2=a("a"),she=a("span"),f(N6.$$.fragment),JUo=l(),lhe=a("span"),YUo=o("AutoModelForSemanticSegmentation"),YRe=l(),ur=a("div"),f(j6.$$.fragment),KUo=l(),lc=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VG=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),XG=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),D6=a("p"),nJo=o("This class cannot be instantiated directly using "),ihe=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),ft=a("div"),f(G6.$$.fragment),dJo=l(),dhe=a("p"),cJo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fJo=l(),ic=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),pJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),uJo=l(),fhe=a("p"),bJo=o("Examples:"),FJo=l(),f(O6.$$.fragment),vJo=l(),ao=a("div"),f(V6.$$.fragment),TJo=l(),mhe=a("p"),MJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EJo=l(),hn=a("p"),CJo=o("The model class to instantiate is selected based on the "),ghe=a("code"),wJo=o("model_type"),AJo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),xJo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),dc=a("ul"),h2=a("li"),_he=a("strong"),RJo=o("beit"),BJo=o(" \u2014 "),QG=a("a"),PJo=o("BeitForSemanticSegmentation"),$Jo=o(" (BEiT model)"),IJo=l(),p2=a("li"),uhe=a("strong"),qJo=o("dpt"),NJo=o(" \u2014 "),WG=a("a"),jJo=o("DPTForSemanticSegmentation"),DJo=o(" (DPT model)"),GJo=l(),_2=a("li"),bhe=a("strong"),OJo=o("segformer"),VJo=o(" \u2014 "),HG=a("a"),XJo=o("SegformerForSemanticSegmentation"),zJo=o(" (SegFormer model)"),QJo=l(),u2=a("p"),WJo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),JJo=o("model.train()"),YJo=l(),The=a("p"),KJo=o("Examples:"),ZJo=l(),f(X6.$$.fragment),KRe=l(),cc=a("h2"),b2=a("a"),Mhe=a("span"),f(z6.$$.fragment),eYo=l(),Ehe=a("span"),oYo=o("AutoModelForInstanceSegmentation"),ZRe=l(),br=a("div"),f(Q6.$$.fragment),rYo=l(),fc=a("p"),tYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UG=a("a"),aYo=o("from_pretrained()"),nYo=o(" class method or the "),JG=a("a"),sYo=o("from_config()"),lYo=o(` class
method.`),iYo=l(),W6=a("p"),dYo=o("This class cannot be instantiated directly using "),Che=a("code"),cYo=o("__init__()"),fYo=o(" (throws an error)."),mYo=l(),mt=a("div"),f(H6.$$.fragment),gYo=l(),whe=a("p"),hYo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pYo=l(),mc=a("p"),_Yo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),uYo=o("not"),bYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),FYo=o("from_pretrained()"),vYo=o(" to load the model weights."),TYo=l(),yhe=a("p"),MYo=o("Examples:"),EYo=l(),f(U6.$$.fragment),CYo=l(),no=a("div"),f(J6.$$.fragment),wYo=l(),Lhe=a("p"),AYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),yYo=l(),pn=a("p"),LYo=o("The model class to instantiate is selected based on the "),xhe=a("code"),xYo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),BYo=o("pretrained_model_name_or_path"),PYo=o(":"),$Yo=l(),Rhe=a("ul"),F2=a("li"),Bhe=a("strong"),IYo=o("maskformer"),qYo=o(" \u2014 "),KG=a("a"),NYo=o("MaskFormerForInstanceSegmentation"),jYo=o(" (MaskFormer model)"),DYo=l(),v2=a("p"),GYo=o("The model is set in evaluation mode by default using "),Phe=a("code"),OYo=o("model.eval()"),VYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),XYo=o("model.train()"),zYo=l(),Ihe=a("p"),QYo=o("Examples:"),WYo=l(),f(Y6.$$.fragment),eBe=l(),gc=a("h2"),T2=a("a"),qhe=a("span"),f(K6.$$.fragment),HYo=l(),Nhe=a("span"),UYo=o("TFAutoModel"),oBe=l(),Fr=a("div"),f(Z6.$$.fragment),JYo=l(),hc=a("p"),YYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZG=a("a"),KYo=o("from_pretrained()"),ZYo=o(" class method or the "),eO=a("a"),eKo=o("from_config()"),oKo=o(` class
method.`),rKo=l(),e0=a("p"),tKo=o("This class cannot be instantiated directly using "),jhe=a("code"),aKo=o("__init__()"),nKo=o(" (throws an error)."),sKo=l(),gt=a("div"),f(o0.$$.fragment),lKo=l(),Dhe=a("p"),iKo=o("Instantiates one of the base model classes of the library from a configuration."),dKo=l(),pc=a("p"),cKo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),fKo=o("not"),mKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),gKo=o("from_pretrained()"),hKo=o(" to load the model weights."),pKo=l(),Ohe=a("p"),_Ko=o("Examples:"),uKo=l(),f(r0.$$.fragment),bKo=l(),ho=a("div"),f(t0.$$.fragment),FKo=l(),Vhe=a("p"),vKo=o("Instantiate one of the base model classes of the library from a pretrained model."),TKo=l(),_n=a("p"),MKo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(":"),xKo=l(),x=a("ul"),M2=a("li"),Whe=a("strong"),kKo=o("albert"),SKo=o(" \u2014 "),rO=a("a"),RKo=o("TFAlbertModel"),BKo=o(" (ALBERT model)"),PKo=l(),E2=a("li"),Hhe=a("strong"),$Ko=o("bart"),IKo=o(" \u2014 "),tO=a("a"),qKo=o("TFBartModel"),NKo=o(" (BART model)"),jKo=l(),C2=a("li"),Uhe=a("strong"),DKo=o("bert"),GKo=o(" \u2014 "),aO=a("a"),OKo=o("TFBertModel"),VKo=o(" (BERT model)"),XKo=l(),w2=a("li"),Jhe=a("strong"),zKo=o("blenderbot"),QKo=o(" \u2014 "),nO=a("a"),WKo=o("TFBlenderbotModel"),HKo=o(" (Blenderbot model)"),UKo=l(),A2=a("li"),Yhe=a("strong"),JKo=o("blenderbot-small"),YKo=o(" \u2014 "),sO=a("a"),KKo=o("TFBlenderbotSmallModel"),ZKo=o(" (BlenderbotSmall model)"),eZo=l(),y2=a("li"),Khe=a("strong"),oZo=o("camembert"),rZo=o(" \u2014 "),lO=a("a"),tZo=o("TFCamembertModel"),aZo=o(" (CamemBERT model)"),nZo=l(),L2=a("li"),Zhe=a("strong"),sZo=o("clip"),lZo=o(" \u2014 "),iO=a("a"),iZo=o("TFCLIPModel"),dZo=o(" (CLIP model)"),cZo=l(),x2=a("li"),epe=a("strong"),fZo=o("convbert"),mZo=o(" \u2014 "),dO=a("a"),gZo=o("TFConvBertModel"),hZo=o(" (ConvBERT model)"),pZo=l(),k2=a("li"),ope=a("strong"),_Zo=o("convnext"),uZo=o(" \u2014 "),cO=a("a"),bZo=o("TFConvNextModel"),FZo=o(" (ConvNext model)"),vZo=l(),S2=a("li"),rpe=a("strong"),TZo=o("ctrl"),MZo=o(" \u2014 "),fO=a("a"),EZo=o("TFCTRLModel"),CZo=o(" (CTRL model)"),wZo=l(),R2=a("li"),tpe=a("strong"),AZo=o("deberta"),yZo=o(" \u2014 "),mO=a("a"),LZo=o("TFDebertaModel"),xZo=o(" (DeBERTa model)"),kZo=l(),B2=a("li"),ape=a("strong"),SZo=o("deberta-v2"),RZo=o(" \u2014 "),gO=a("a"),BZo=o("TFDebertaV2Model"),PZo=o(" (DeBERTa-v2 model)"),$Zo=l(),P2=a("li"),npe=a("strong"),IZo=o("distilbert"),qZo=o(" \u2014 "),hO=a("a"),NZo=o("TFDistilBertModel"),jZo=o(" (DistilBERT model)"),DZo=l(),$2=a("li"),spe=a("strong"),GZo=o("dpr"),OZo=o(" \u2014 "),pO=a("a"),VZo=o("TFDPRQuestionEncoder"),XZo=o(" (DPR model)"),zZo=l(),I2=a("li"),lpe=a("strong"),QZo=o("electra"),WZo=o(" \u2014 "),_O=a("a"),HZo=o("TFElectraModel"),UZo=o(" (ELECTRA model)"),JZo=l(),q2=a("li"),ipe=a("strong"),YZo=o("flaubert"),KZo=o(" \u2014 "),uO=a("a"),ZZo=o("TFFlaubertModel"),eer=o(" (FlauBERT model)"),oer=l(),Gs=a("li"),dpe=a("strong"),rer=o("funnel"),ter=o(" \u2014 "),bO=a("a"),aer=o("TFFunnelModel"),ner=o(" or "),FO=a("a"),ser=o("TFFunnelBaseModel"),ler=o(" (Funnel Transformer model)"),ier=l(),N2=a("li"),cpe=a("strong"),der=o("gpt2"),cer=o(" \u2014 "),vO=a("a"),fer=o("TFGPT2Model"),mer=o(" (OpenAI GPT-2 model)"),ger=l(),j2=a("li"),fpe=a("strong"),her=o("gptj"),per=o(" \u2014 "),TO=a("a"),_er=o("TFGPTJModel"),uer=o(" (GPT-J model)"),ber=l(),D2=a("li"),mpe=a("strong"),Fer=o("hubert"),ver=o(" \u2014 "),MO=a("a"),Ter=o("TFHubertModel"),Mer=o(" (Hubert model)"),Eer=l(),G2=a("li"),gpe=a("strong"),Cer=o("layoutlm"),wer=o(" \u2014 "),EO=a("a"),Aer=o("TFLayoutLMModel"),yer=o(" (LayoutLM model)"),Ler=l(),O2=a("li"),hpe=a("strong"),xer=o("led"),ker=o(" \u2014 "),CO=a("a"),Ser=o("TFLEDModel"),Rer=o(" (LED model)"),Ber=l(),V2=a("li"),ppe=a("strong"),Per=o("longformer"),$er=o(" \u2014 "),wO=a("a"),Ier=o("TFLongformerModel"),qer=o(" (Longformer model)"),Ner=l(),X2=a("li"),_pe=a("strong"),jer=o("lxmert"),Der=o(" \u2014 "),AO=a("a"),Ger=o("TFLxmertModel"),Oer=o(" (LXMERT model)"),Ver=l(),z2=a("li"),upe=a("strong"),Xer=o("marian"),zer=o(" \u2014 "),yO=a("a"),Qer=o("TFMarianModel"),Wer=o(" (Marian model)"),Her=l(),Q2=a("li"),bpe=a("strong"),Uer=o("mbart"),Jer=o(" \u2014 "),LO=a("a"),Yer=o("TFMBartModel"),Ker=o(" (mBART model)"),Zer=l(),W2=a("li"),Fpe=a("strong"),eor=o("mobilebert"),oor=o(" \u2014 "),xO=a("a"),ror=o("TFMobileBertModel"),tor=o(" (MobileBERT model)"),aor=l(),H2=a("li"),vpe=a("strong"),nor=o("mpnet"),sor=o(" \u2014 "),kO=a("a"),lor=o("TFMPNetModel"),ior=o(" (MPNet model)"),dor=l(),U2=a("li"),Tpe=a("strong"),cor=o("mt5"),mor=o(" \u2014 "),SO=a("a"),gor=o("TFMT5Model"),hor=o(" (mT5 model)"),por=l(),J2=a("li"),Mpe=a("strong"),_or=o("openai-gpt"),uor=o(" \u2014 "),RO=a("a"),bor=o("TFOpenAIGPTModel"),For=o(" (OpenAI GPT model)"),vor=l(),Y2=a("li"),Epe=a("strong"),Tor=o("pegasus"),Mor=o(" \u2014 "),BO=a("a"),Eor=o("TFPegasusModel"),Cor=o(" (Pegasus model)"),wor=l(),K2=a("li"),Cpe=a("strong"),Aor=o("rembert"),yor=o(" \u2014 "),PO=a("a"),Lor=o("TFRemBertModel"),xor=o(" (RemBERT model)"),kor=l(),Z2=a("li"),wpe=a("strong"),Sor=o("roberta"),Ror=o(" \u2014 "),$O=a("a"),Bor=o("TFRobertaModel"),Por=o(" (RoBERTa model)"),$or=l(),eF=a("li"),Ape=a("strong"),Ior=o("roformer"),qor=o(" \u2014 "),IO=a("a"),Nor=o("TFRoFormerModel"),jor=o(" (RoFormer model)"),Dor=l(),oF=a("li"),ype=a("strong"),Gor=o("speech_to_text"),Oor=o(" \u2014 "),qO=a("a"),Vor=o("TFSpeech2TextModel"),Xor=o(" (Speech2Text model)"),zor=l(),rF=a("li"),Lpe=a("strong"),Qor=o("t5"),Wor=o(" \u2014 "),NO=a("a"),Hor=o("TFT5Model"),Uor=o(" (T5 model)"),Jor=l(),tF=a("li"),xpe=a("strong"),Yor=o("tapas"),Kor=o(" \u2014 "),jO=a("a"),Zor=o("TFTapasModel"),err=o(" (TAPAS model)"),orr=l(),aF=a("li"),kpe=a("strong"),rrr=o("transfo-xl"),trr=o(" \u2014 "),DO=a("a"),arr=o("TFTransfoXLModel"),nrr=o(" (Transformer-XL model)"),srr=l(),nF=a("li"),Spe=a("strong"),lrr=o("vit"),irr=o(" \u2014 "),GO=a("a"),drr=o("TFViTModel"),crr=o(" (ViT model)"),frr=l(),sF=a("li"),Rpe=a("strong"),mrr=o("vit_mae"),grr=o(" \u2014 "),OO=a("a"),hrr=o("TFViTMAEModel"),prr=o(" (ViTMAE model)"),_rr=l(),lF=a("li"),Bpe=a("strong"),urr=o("wav2vec2"),brr=o(" \u2014 "),VO=a("a"),Frr=o("TFWav2Vec2Model"),vrr=o(" (Wav2Vec2 model)"),Trr=l(),iF=a("li"),Ppe=a("strong"),Mrr=o("xlm"),Err=o(" \u2014 "),XO=a("a"),Crr=o("TFXLMModel"),wrr=o(" (XLM model)"),Arr=l(),dF=a("li"),$pe=a("strong"),yrr=o("xlm-roberta"),Lrr=o(" \u2014 "),zO=a("a"),xrr=o("TFXLMRobertaModel"),krr=o(" (XLM-RoBERTa model)"),Srr=l(),cF=a("li"),Ipe=a("strong"),Rrr=o("xlnet"),Brr=o(" \u2014 "),QO=a("a"),Prr=o("TFXLNetModel"),$rr=o(" (XLNet model)"),Irr=l(),qpe=a("p"),qrr=o("Examples:"),Nrr=l(),f(a0.$$.fragment),rBe=l(),_c=a("h2"),fF=a("a"),Npe=a("span"),f(n0.$$.fragment),jrr=l(),jpe=a("span"),Drr=o("TFAutoModelForPreTraining"),tBe=l(),vr=a("div"),f(s0.$$.fragment),Grr=l(),uc=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),HO=a("a"),zrr=o("from_config()"),Qrr=o(` class
method.`),Wrr=l(),l0=a("p"),Hrr=o("This class cannot be instantiated directly using "),Dpe=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),ht=a("div"),f(i0.$$.fragment),Krr=l(),Gpe=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),etr=l(),bc=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),Vpe=a("p"),ltr=o("Examples:"),itr=l(),f(d0.$$.fragment),dtr=l(),po=a("div"),f(c0.$$.fragment),ctr=l(),Xpe=a("p"),ftr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mtr=l(),un=a("p"),gtr=o("The model class to instantiate is selected based on the "),zpe=a("code"),htr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),btr=o("pretrained_model_name_or_path"),Ftr=o(":"),vtr=l(),H=a("ul"),mF=a("li"),Hpe=a("strong"),Ttr=o("albert"),Mtr=o(" \u2014 "),JO=a("a"),Etr=o("TFAlbertForPreTraining"),Ctr=o(" (ALBERT model)"),wtr=l(),gF=a("li"),Upe=a("strong"),Atr=o("bart"),ytr=o(" \u2014 "),YO=a("a"),Ltr=o("TFBartForConditionalGeneration"),xtr=o(" (BART model)"),ktr=l(),hF=a("li"),Jpe=a("strong"),Str=o("bert"),Rtr=o(" \u2014 "),KO=a("a"),Btr=o("TFBertForPreTraining"),Ptr=o(" (BERT model)"),$tr=l(),pF=a("li"),Ype=a("strong"),Itr=o("camembert"),qtr=o(" \u2014 "),ZO=a("a"),Ntr=o("TFCamembertForMaskedLM"),jtr=o(" (CamemBERT model)"),Dtr=l(),_F=a("li"),Kpe=a("strong"),Gtr=o("ctrl"),Otr=o(" \u2014 "),eV=a("a"),Vtr=o("TFCTRLLMHeadModel"),Xtr=o(" (CTRL model)"),ztr=l(),uF=a("li"),Zpe=a("strong"),Qtr=o("distilbert"),Wtr=o(" \u2014 "),oV=a("a"),Htr=o("TFDistilBertForMaskedLM"),Utr=o(" (DistilBERT model)"),Jtr=l(),bF=a("li"),e_e=a("strong"),Ytr=o("electra"),Ktr=o(" \u2014 "),rV=a("a"),Ztr=o("TFElectraForPreTraining"),ear=o(" (ELECTRA model)"),oar=l(),FF=a("li"),o_e=a("strong"),rar=o("flaubert"),tar=o(" \u2014 "),tV=a("a"),aar=o("TFFlaubertWithLMHeadModel"),nar=o(" (FlauBERT model)"),sar=l(),vF=a("li"),r_e=a("strong"),lar=o("funnel"),iar=o(" \u2014 "),aV=a("a"),dar=o("TFFunnelForPreTraining"),car=o(" (Funnel Transformer model)"),far=l(),TF=a("li"),t_e=a("strong"),mar=o("gpt2"),gar=o(" \u2014 "),nV=a("a"),har=o("TFGPT2LMHeadModel"),par=o(" (OpenAI GPT-2 model)"),_ar=l(),MF=a("li"),a_e=a("strong"),uar=o("layoutlm"),bar=o(" \u2014 "),sV=a("a"),Far=o("TFLayoutLMForMaskedLM"),Tar=o(" (LayoutLM model)"),Mar=l(),EF=a("li"),n_e=a("strong"),Ear=o("lxmert"),Car=o(" \u2014 "),lV=a("a"),war=o("TFLxmertForPreTraining"),Aar=o(" (LXMERT model)"),yar=l(),CF=a("li"),s_e=a("strong"),Lar=o("mobilebert"),xar=o(" \u2014 "),iV=a("a"),kar=o("TFMobileBertForPreTraining"),Sar=o(" (MobileBERT model)"),Rar=l(),wF=a("li"),l_e=a("strong"),Bar=o("mpnet"),Par=o(" \u2014 "),dV=a("a"),$ar=o("TFMPNetForMaskedLM"),Iar=o(" (MPNet model)"),qar=l(),AF=a("li"),i_e=a("strong"),Nar=o("openai-gpt"),jar=o(" \u2014 "),cV=a("a"),Dar=o("TFOpenAIGPTLMHeadModel"),Gar=o(" (OpenAI GPT model)"),Oar=l(),yF=a("li"),d_e=a("strong"),Var=o("roberta"),Xar=o(" \u2014 "),fV=a("a"),zar=o("TFRobertaForMaskedLM"),Qar=o(" (RoBERTa model)"),War=l(),LF=a("li"),c_e=a("strong"),Har=o("t5"),Uar=o(" \u2014 "),mV=a("a"),Jar=o("TFT5ForConditionalGeneration"),Yar=o(" (T5 model)"),Kar=l(),xF=a("li"),f_e=a("strong"),Zar=o("tapas"),enr=o(" \u2014 "),gV=a("a"),onr=o("TFTapasForMaskedLM"),rnr=o(" (TAPAS model)"),tnr=l(),kF=a("li"),m_e=a("strong"),anr=o("transfo-xl"),nnr=o(" \u2014 "),hV=a("a"),snr=o("TFTransfoXLLMHeadModel"),lnr=o(" (Transformer-XL model)"),inr=l(),SF=a("li"),g_e=a("strong"),dnr=o("vit_mae"),cnr=o(" \u2014 "),pV=a("a"),fnr=o("TFViTMAEForPreTraining"),mnr=o(" (ViTMAE model)"),gnr=l(),RF=a("li"),h_e=a("strong"),hnr=o("xlm"),pnr=o(" \u2014 "),_V=a("a"),_nr=o("TFXLMWithLMHeadModel"),unr=o(" (XLM model)"),bnr=l(),BF=a("li"),p_e=a("strong"),Fnr=o("xlm-roberta"),vnr=o(" \u2014 "),uV=a("a"),Tnr=o("TFXLMRobertaForMaskedLM"),Mnr=o(" (XLM-RoBERTa model)"),Enr=l(),PF=a("li"),__e=a("strong"),Cnr=o("xlnet"),wnr=o(" \u2014 "),bV=a("a"),Anr=o("TFXLNetLMHeadModel"),ynr=o(" (XLNet model)"),Lnr=l(),u_e=a("p"),xnr=o("Examples:"),knr=l(),f(f0.$$.fragment),aBe=l(),Fc=a("h2"),$F=a("a"),b_e=a("span"),f(m0.$$.fragment),Snr=l(),F_e=a("span"),Rnr=o("TFAutoModelForCausalLM"),nBe=l(),Tr=a("div"),f(g0.$$.fragment),Bnr=l(),vc=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=a("a"),$nr=o("from_pretrained()"),Inr=o(" class method or the "),vV=a("a"),qnr=o("from_config()"),Nnr=o(` class
method.`),jnr=l(),h0=a("p"),Dnr=o("This class cannot be instantiated directly using "),v_e=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Vnr=l(),pt=a("div"),f(p0.$$.fragment),Xnr=l(),T_e=a("p"),znr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qnr=l(),Tc=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" to load the model weights."),Knr=l(),E_e=a("p"),Znr=o("Examples:"),esr=l(),f(_0.$$.fragment),osr=l(),_o=a("div"),f(u0.$$.fragment),rsr=l(),C_e=a("p"),tsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),asr=l(),bn=a("p"),nsr=o("The model class to instantiate is selected based on the "),w_e=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),ce=a("ul"),IF=a("li"),L_e=a("strong"),gsr=o("bert"),hsr=o(" \u2014 "),MV=a("a"),psr=o("TFBertLMHeadModel"),_sr=o(" (BERT model)"),usr=l(),qF=a("li"),x_e=a("strong"),bsr=o("camembert"),Fsr=o(" \u2014 "),EV=a("a"),vsr=o("TFCamembertForCausalLM"),Tsr=o(" (CamemBERT model)"),Msr=l(),NF=a("li"),k_e=a("strong"),Esr=o("ctrl"),Csr=o(" \u2014 "),CV=a("a"),wsr=o("TFCTRLLMHeadModel"),Asr=o(" (CTRL model)"),ysr=l(),jF=a("li"),S_e=a("strong"),Lsr=o("gpt2"),xsr=o(" \u2014 "),wV=a("a"),ksr=o("TFGPT2LMHeadModel"),Ssr=o(" (OpenAI GPT-2 model)"),Rsr=l(),DF=a("li"),R_e=a("strong"),Bsr=o("gptj"),Psr=o(" \u2014 "),AV=a("a"),$sr=o("TFGPTJForCausalLM"),Isr=o(" (GPT-J model)"),qsr=l(),GF=a("li"),B_e=a("strong"),Nsr=o("openai-gpt"),jsr=o(" \u2014 "),yV=a("a"),Dsr=o("TFOpenAIGPTLMHeadModel"),Gsr=o(" (OpenAI GPT model)"),Osr=l(),OF=a("li"),P_e=a("strong"),Vsr=o("rembert"),Xsr=o(" \u2014 "),LV=a("a"),zsr=o("TFRemBertForCausalLM"),Qsr=o(" (RemBERT model)"),Wsr=l(),VF=a("li"),$_e=a("strong"),Hsr=o("roberta"),Usr=o(" \u2014 "),xV=a("a"),Jsr=o("TFRobertaForCausalLM"),Ysr=o(" (RoBERTa model)"),Ksr=l(),XF=a("li"),I_e=a("strong"),Zsr=o("roformer"),elr=o(" \u2014 "),kV=a("a"),olr=o("TFRoFormerForCausalLM"),rlr=o(" (RoFormer model)"),tlr=l(),zF=a("li"),q_e=a("strong"),alr=o("transfo-xl"),nlr=o(" \u2014 "),SV=a("a"),slr=o("TFTransfoXLLMHeadModel"),llr=o(" (Transformer-XL model)"),ilr=l(),QF=a("li"),N_e=a("strong"),dlr=o("xlm"),clr=o(" \u2014 "),RV=a("a"),flr=o("TFXLMWithLMHeadModel"),mlr=o(" (XLM model)"),glr=l(),WF=a("li"),j_e=a("strong"),hlr=o("xlnet"),plr=o(" \u2014 "),BV=a("a"),_lr=o("TFXLNetLMHeadModel"),ulr=o(" (XLNet model)"),blr=l(),D_e=a("p"),Flr=o("Examples:"),vlr=l(),f(b0.$$.fragment),sBe=l(),Mc=a("h2"),HF=a("a"),G_e=a("span"),f(F0.$$.fragment),Tlr=l(),O_e=a("span"),Mlr=o("TFAutoModelForImageClassification"),lBe=l(),Mr=a("div"),f(v0.$$.fragment),Elr=l(),Ec=a("p"),Clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PV=a("a"),wlr=o("from_pretrained()"),Alr=o(" class method or the "),$V=a("a"),ylr=o("from_config()"),Llr=o(` class
method.`),xlr=l(),T0=a("p"),klr=o("This class cannot be instantiated directly using "),V_e=a("code"),Slr=o("__init__()"),Rlr=o(" (throws an error)."),Blr=l(),_t=a("div"),f(M0.$$.fragment),Plr=l(),X_e=a("p"),$lr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ilr=l(),Cc=a("p"),qlr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),Nlr=o("not"),jlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Dlr=o("from_pretrained()"),Glr=o(" to load the model weights."),Olr=l(),Q_e=a("p"),Vlr=o("Examples:"),Xlr=l(),f(E0.$$.fragment),zlr=l(),uo=a("div"),f(C0.$$.fragment),Qlr=l(),W_e=a("p"),Wlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hlr=l(),Fn=a("p"),Ulr=o("The model class to instantiate is selected based on the "),H_e=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),w0=a("ul"),UF=a("li"),Y_e=a("strong"),tir=o("convnext"),air=o(" \u2014 "),qV=a("a"),nir=o("TFConvNextForImageClassification"),sir=o(" (ConvNext model)"),lir=l(),JF=a("li"),K_e=a("strong"),iir=o("vit"),dir=o(" \u2014 "),NV=a("a"),cir=o("TFViTForImageClassification"),fir=o(" (ViT model)"),mir=l(),Z_e=a("p"),gir=o("Examples:"),hir=l(),f(A0.$$.fragment),iBe=l(),wc=a("h2"),YF=a("a"),eue=a("span"),f(y0.$$.fragment),pir=l(),oue=a("span"),_ir=o("TFAutoModelForMaskedLM"),dBe=l(),Er=a("div"),f(L0.$$.fragment),uir=l(),Ac=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jV=a("a"),Fir=o("from_pretrained()"),vir=o(" class method or the "),DV=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),x0=a("p"),Cir=o("This class cannot be instantiated directly using "),rue=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),yir=l(),ut=a("div"),f(k0.$$.fragment),Lir=l(),tue=a("p"),xir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kir=l(),yc=a("p"),Sir=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),Rir=o("not"),Bir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),Pir=o("from_pretrained()"),$ir=o(" to load the model weights."),Iir=l(),nue=a("p"),qir=o("Examples:"),Nir=l(),f(S0.$$.fragment),jir=l(),bo=a("div"),f(R0.$$.fragment),Dir=l(),sue=a("p"),Gir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Oir=l(),vn=a("p"),Vir=o("The model class to instantiate is selected based on the "),lue=a("code"),Xir=o("model_type"),zir=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),Qir=o("pretrained_model_name_or_path"),Wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),Hir=o("pretrained_model_name_or_path"),Uir=o(":"),Jir=l(),J=a("ul"),KF=a("li"),cue=a("strong"),Yir=o("albert"),Kir=o(" \u2014 "),OV=a("a"),Zir=o("TFAlbertForMaskedLM"),edr=o(" (ALBERT model)"),odr=l(),ZF=a("li"),fue=a("strong"),rdr=o("bert"),tdr=o(" \u2014 "),VV=a("a"),adr=o("TFBertForMaskedLM"),ndr=o(" (BERT model)"),sdr=l(),ev=a("li"),mue=a("strong"),ldr=o("camembert"),idr=o(" \u2014 "),XV=a("a"),ddr=o("TFCamembertForMaskedLM"),cdr=o(" (CamemBERT model)"),fdr=l(),ov=a("li"),gue=a("strong"),mdr=o("convbert"),gdr=o(" \u2014 "),zV=a("a"),hdr=o("TFConvBertForMaskedLM"),pdr=o(" (ConvBERT model)"),_dr=l(),rv=a("li"),hue=a("strong"),udr=o("deberta"),bdr=o(" \u2014 "),QV=a("a"),Fdr=o("TFDebertaForMaskedLM"),vdr=o(" (DeBERTa model)"),Tdr=l(),tv=a("li"),pue=a("strong"),Mdr=o("deberta-v2"),Edr=o(" \u2014 "),WV=a("a"),Cdr=o("TFDebertaV2ForMaskedLM"),wdr=o(" (DeBERTa-v2 model)"),Adr=l(),av=a("li"),_ue=a("strong"),ydr=o("distilbert"),Ldr=o(" \u2014 "),HV=a("a"),xdr=o("TFDistilBertForMaskedLM"),kdr=o(" (DistilBERT model)"),Sdr=l(),nv=a("li"),uue=a("strong"),Rdr=o("electra"),Bdr=o(" \u2014 "),UV=a("a"),Pdr=o("TFElectraForMaskedLM"),$dr=o(" (ELECTRA model)"),Idr=l(),sv=a("li"),bue=a("strong"),qdr=o("flaubert"),Ndr=o(" \u2014 "),JV=a("a"),jdr=o("TFFlaubertWithLMHeadModel"),Ddr=o(" (FlauBERT model)"),Gdr=l(),lv=a("li"),Fue=a("strong"),Odr=o("funnel"),Vdr=o(" \u2014 "),YV=a("a"),Xdr=o("TFFunnelForMaskedLM"),zdr=o(" (Funnel Transformer model)"),Qdr=l(),iv=a("li"),vue=a("strong"),Wdr=o("layoutlm"),Hdr=o(" \u2014 "),KV=a("a"),Udr=o("TFLayoutLMForMaskedLM"),Jdr=o(" (LayoutLM model)"),Ydr=l(),dv=a("li"),Tue=a("strong"),Kdr=o("longformer"),Zdr=o(" \u2014 "),ZV=a("a"),ecr=o("TFLongformerForMaskedLM"),ocr=o(" (Longformer model)"),rcr=l(),cv=a("li"),Mue=a("strong"),tcr=o("mobilebert"),acr=o(" \u2014 "),eX=a("a"),ncr=o("TFMobileBertForMaskedLM"),scr=o(" (MobileBERT model)"),lcr=l(),fv=a("li"),Eue=a("strong"),icr=o("mpnet"),dcr=o(" \u2014 "),oX=a("a"),ccr=o("TFMPNetForMaskedLM"),fcr=o(" (MPNet model)"),mcr=l(),mv=a("li"),Cue=a("strong"),gcr=o("rembert"),hcr=o(" \u2014 "),rX=a("a"),pcr=o("TFRemBertForMaskedLM"),_cr=o(" (RemBERT model)"),ucr=l(),gv=a("li"),wue=a("strong"),bcr=o("roberta"),Fcr=o(" \u2014 "),tX=a("a"),vcr=o("TFRobertaForMaskedLM"),Tcr=o(" (RoBERTa model)"),Mcr=l(),hv=a("li"),Aue=a("strong"),Ecr=o("roformer"),Ccr=o(" \u2014 "),aX=a("a"),wcr=o("TFRoFormerForMaskedLM"),Acr=o(" (RoFormer model)"),ycr=l(),pv=a("li"),yue=a("strong"),Lcr=o("tapas"),xcr=o(" \u2014 "),nX=a("a"),kcr=o("TFTapasForMaskedLM"),Scr=o(" (TAPAS model)"),Rcr=l(),_v=a("li"),Lue=a("strong"),Bcr=o("xlm"),Pcr=o(" \u2014 "),sX=a("a"),$cr=o("TFXLMWithLMHeadModel"),Icr=o(" (XLM model)"),qcr=l(),uv=a("li"),xue=a("strong"),Ncr=o("xlm-roberta"),jcr=o(" \u2014 "),lX=a("a"),Dcr=o("TFXLMRobertaForMaskedLM"),Gcr=o(" (XLM-RoBERTa model)"),Ocr=l(),kue=a("p"),Vcr=o("Examples:"),Xcr=l(),f(B0.$$.fragment),cBe=l(),Lc=a("h2"),bv=a("a"),Sue=a("span"),f(P0.$$.fragment),zcr=l(),Rue=a("span"),Qcr=o("TFAutoModelForSeq2SeqLM"),fBe=l(),Cr=a("div"),f($0.$$.fragment),Wcr=l(),xc=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iX=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),dX=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),I0=a("p"),efr=o("This class cannot be instantiated directly using "),Bue=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),bt=a("div"),f(q0.$$.fragment),afr=l(),Pue=a("p"),nfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sfr=l(),kc=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),Iue=a("p"),gfr=o("Examples:"),hfr=l(),f(N0.$$.fragment),pfr=l(),Fo=a("div"),f(j0.$$.fragment),_fr=l(),que=a("p"),ufr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bfr=l(),Tn=a("p"),Ffr=o("The model class to instantiate is selected based on the "),Nue=a("code"),vfr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(":"),Afr=l(),ue=a("ul"),Fv=a("li"),Gue=a("strong"),yfr=o("bart"),Lfr=o(" \u2014 "),fX=a("a"),xfr=o("TFBartForConditionalGeneration"),kfr=o(" (BART model)"),Sfr=l(),vv=a("li"),Oue=a("strong"),Rfr=o("blenderbot"),Bfr=o(" \u2014 "),mX=a("a"),Pfr=o("TFBlenderbotForConditionalGeneration"),$fr=o(" (Blenderbot model)"),Ifr=l(),Tv=a("li"),Vue=a("strong"),qfr=o("blenderbot-small"),Nfr=o(" \u2014 "),gX=a("a"),jfr=o("TFBlenderbotSmallForConditionalGeneration"),Dfr=o(" (BlenderbotSmall model)"),Gfr=l(),Mv=a("li"),Xue=a("strong"),Ofr=o("encoder-decoder"),Vfr=o(" \u2014 "),hX=a("a"),Xfr=o("TFEncoderDecoderModel"),zfr=o(" (Encoder decoder model)"),Qfr=l(),Ev=a("li"),zue=a("strong"),Wfr=o("led"),Hfr=o(" \u2014 "),pX=a("a"),Ufr=o("TFLEDForConditionalGeneration"),Jfr=o(" (LED model)"),Yfr=l(),Cv=a("li"),Que=a("strong"),Kfr=o("marian"),Zfr=o(" \u2014 "),_X=a("a"),emr=o("TFMarianMTModel"),omr=o(" (Marian model)"),rmr=l(),wv=a("li"),Wue=a("strong"),tmr=o("mbart"),amr=o(" \u2014 "),uX=a("a"),nmr=o("TFMBartForConditionalGeneration"),smr=o(" (mBART model)"),lmr=l(),Av=a("li"),Hue=a("strong"),imr=o("mt5"),dmr=o(" \u2014 "),bX=a("a"),cmr=o("TFMT5ForConditionalGeneration"),fmr=o(" (mT5 model)"),mmr=l(),yv=a("li"),Uue=a("strong"),gmr=o("pegasus"),hmr=o(" \u2014 "),FX=a("a"),pmr=o("TFPegasusForConditionalGeneration"),_mr=o(" (Pegasus model)"),umr=l(),Lv=a("li"),Jue=a("strong"),bmr=o("t5"),Fmr=o(" \u2014 "),vX=a("a"),vmr=o("TFT5ForConditionalGeneration"),Tmr=o(" (T5 model)"),Mmr=l(),Yue=a("p"),Emr=o("Examples:"),Cmr=l(),f(D0.$$.fragment),mBe=l(),Sc=a("h2"),xv=a("a"),Kue=a("span"),f(G0.$$.fragment),wmr=l(),Zue=a("span"),Amr=o("TFAutoModelForSequenceClassification"),gBe=l(),wr=a("div"),f(O0.$$.fragment),ymr=l(),Rc=a("p"),Lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TX=a("a"),xmr=o("from_pretrained()"),kmr=o(" class method or the "),MX=a("a"),Smr=o("from_config()"),Rmr=o(` class
method.`),Bmr=l(),V0=a("p"),Pmr=o("This class cannot be instantiated directly using "),e1e=a("code"),$mr=o("__init__()"),Imr=o(" (throws an error)."),qmr=l(),Ft=a("div"),f(X0.$$.fragment),Nmr=l(),o1e=a("p"),jmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dmr=l(),Bc=a("p"),Gmr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Omr=o("not"),Vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),Xmr=o("from_pretrained()"),zmr=o(" to load the model weights."),Qmr=l(),t1e=a("p"),Wmr=o("Examples:"),Hmr=l(),f(z0.$$.fragment),Umr=l(),vo=a("div"),f(Q0.$$.fragment),Jmr=l(),a1e=a("p"),Ymr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kmr=l(),Mn=a("p"),Zmr=o("The model class to instantiate is selected based on the "),n1e=a("code"),egr=o("model_type"),ogr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(":"),sgr=l(),V=a("ul"),kv=a("li"),i1e=a("strong"),lgr=o("albert"),igr=o(" \u2014 "),CX=a("a"),dgr=o("TFAlbertForSequenceClassification"),cgr=o(" (ALBERT model)"),fgr=l(),Sv=a("li"),d1e=a("strong"),mgr=o("bert"),ggr=o(" \u2014 "),wX=a("a"),hgr=o("TFBertForSequenceClassification"),pgr=o(" (BERT model)"),_gr=l(),Rv=a("li"),c1e=a("strong"),ugr=o("camembert"),bgr=o(" \u2014 "),AX=a("a"),Fgr=o("TFCamembertForSequenceClassification"),vgr=o(" (CamemBERT model)"),Tgr=l(),Bv=a("li"),f1e=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),yX=a("a"),Cgr=o("TFConvBertForSequenceClassification"),wgr=o(" (ConvBERT model)"),Agr=l(),Pv=a("li"),m1e=a("strong"),ygr=o("ctrl"),Lgr=o(" \u2014 "),LX=a("a"),xgr=o("TFCTRLForSequenceClassification"),kgr=o(" (CTRL model)"),Sgr=l(),$v=a("li"),g1e=a("strong"),Rgr=o("deberta"),Bgr=o(" \u2014 "),xX=a("a"),Pgr=o("TFDebertaForSequenceClassification"),$gr=o(" (DeBERTa model)"),Igr=l(),Iv=a("li"),h1e=a("strong"),qgr=o("deberta-v2"),Ngr=o(" \u2014 "),kX=a("a"),jgr=o("TFDebertaV2ForSequenceClassification"),Dgr=o(" (DeBERTa-v2 model)"),Ggr=l(),qv=a("li"),p1e=a("strong"),Ogr=o("distilbert"),Vgr=o(" \u2014 "),SX=a("a"),Xgr=o("TFDistilBertForSequenceClassification"),zgr=o(" (DistilBERT model)"),Qgr=l(),Nv=a("li"),_1e=a("strong"),Wgr=o("electra"),Hgr=o(" \u2014 "),RX=a("a"),Ugr=o("TFElectraForSequenceClassification"),Jgr=o(" (ELECTRA model)"),Ygr=l(),jv=a("li"),u1e=a("strong"),Kgr=o("flaubert"),Zgr=o(" \u2014 "),BX=a("a"),ehr=o("TFFlaubertForSequenceClassification"),ohr=o(" (FlauBERT model)"),rhr=l(),Dv=a("li"),b1e=a("strong"),thr=o("funnel"),ahr=o(" \u2014 "),PX=a("a"),nhr=o("TFFunnelForSequenceClassification"),shr=o(" (Funnel Transformer model)"),lhr=l(),Gv=a("li"),F1e=a("strong"),ihr=o("gpt2"),dhr=o(" \u2014 "),$X=a("a"),chr=o("TFGPT2ForSequenceClassification"),fhr=o(" (OpenAI GPT-2 model)"),mhr=l(),Ov=a("li"),v1e=a("strong"),ghr=o("gptj"),hhr=o(" \u2014 "),IX=a("a"),phr=o("TFGPTJForSequenceClassification"),_hr=o(" (GPT-J model)"),uhr=l(),Vv=a("li"),T1e=a("strong"),bhr=o("layoutlm"),Fhr=o(" \u2014 "),qX=a("a"),vhr=o("TFLayoutLMForSequenceClassification"),Thr=o(" (LayoutLM model)"),Mhr=l(),Xv=a("li"),M1e=a("strong"),Ehr=o("longformer"),Chr=o(" \u2014 "),NX=a("a"),whr=o("TFLongformerForSequenceClassification"),Ahr=o(" (Longformer model)"),yhr=l(),zv=a("li"),E1e=a("strong"),Lhr=o("mobilebert"),xhr=o(" \u2014 "),jX=a("a"),khr=o("TFMobileBertForSequenceClassification"),Shr=o(" (MobileBERT model)"),Rhr=l(),Qv=a("li"),C1e=a("strong"),Bhr=o("mpnet"),Phr=o(" \u2014 "),DX=a("a"),$hr=o("TFMPNetForSequenceClassification"),Ihr=o(" (MPNet model)"),qhr=l(),Wv=a("li"),w1e=a("strong"),Nhr=o("openai-gpt"),jhr=o(" \u2014 "),GX=a("a"),Dhr=o("TFOpenAIGPTForSequenceClassification"),Ghr=o(" (OpenAI GPT model)"),Ohr=l(),Hv=a("li"),A1e=a("strong"),Vhr=o("rembert"),Xhr=o(" \u2014 "),OX=a("a"),zhr=o("TFRemBertForSequenceClassification"),Qhr=o(" (RemBERT model)"),Whr=l(),Uv=a("li"),y1e=a("strong"),Hhr=o("roberta"),Uhr=o(" \u2014 "),VX=a("a"),Jhr=o("TFRobertaForSequenceClassification"),Yhr=o(" (RoBERTa model)"),Khr=l(),Jv=a("li"),L1e=a("strong"),Zhr=o("roformer"),epr=o(" \u2014 "),XX=a("a"),opr=o("TFRoFormerForSequenceClassification"),rpr=o(" (RoFormer model)"),tpr=l(),Yv=a("li"),x1e=a("strong"),apr=o("tapas"),npr=o(" \u2014 "),zX=a("a"),spr=o("TFTapasForSequenceClassification"),lpr=o(" (TAPAS model)"),ipr=l(),Kv=a("li"),k1e=a("strong"),dpr=o("transfo-xl"),cpr=o(" \u2014 "),QX=a("a"),fpr=o("TFTransfoXLForSequenceClassification"),mpr=o(" (Transformer-XL model)"),gpr=l(),Zv=a("li"),S1e=a("strong"),hpr=o("xlm"),ppr=o(" \u2014 "),WX=a("a"),_pr=o("TFXLMForSequenceClassification"),upr=o(" (XLM model)"),bpr=l(),eT=a("li"),R1e=a("strong"),Fpr=o("xlm-roberta"),vpr=o(" \u2014 "),HX=a("a"),Tpr=o("TFXLMRobertaForSequenceClassification"),Mpr=o(" (XLM-RoBERTa model)"),Epr=l(),oT=a("li"),B1e=a("strong"),Cpr=o("xlnet"),wpr=o(" \u2014 "),UX=a("a"),Apr=o("TFXLNetForSequenceClassification"),ypr=o(" (XLNet model)"),Lpr=l(),P1e=a("p"),xpr=o("Examples:"),kpr=l(),f(W0.$$.fragment),hBe=l(),Pc=a("h2"),rT=a("a"),$1e=a("span"),f(H0.$$.fragment),Spr=l(),I1e=a("span"),Rpr=o("TFAutoModelForMultipleChoice"),pBe=l(),Ar=a("div"),f(U0.$$.fragment),Bpr=l(),$c=a("p"),Ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JX=a("a"),$pr=o("from_pretrained()"),Ipr=o(" class method or the "),YX=a("a"),qpr=o("from_config()"),Npr=o(` class
method.`),jpr=l(),J0=a("p"),Dpr=o("This class cannot be instantiated directly using "),q1e=a("code"),Gpr=o("__init__()"),Opr=o(" (throws an error)."),Vpr=l(),vt=a("div"),f(Y0.$$.fragment),Xpr=l(),N1e=a("p"),zpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qpr=l(),Ic=a("p"),Wpr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Hpr=o("not"),Upr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),Jpr=o("from_pretrained()"),Ypr=o(" to load the model weights."),Kpr=l(),D1e=a("p"),Zpr=o("Examples:"),e_r=l(),f(K0.$$.fragment),o_r=l(),To=a("div"),f(Z0.$$.fragment),r_r=l(),G1e=a("p"),t_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a_r=l(),En=a("p"),n_r=o("The model class to instantiate is selected based on the "),O1e=a("code"),s_r=o("model_type"),l_r=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),i_r=o("pretrained_model_name_or_path"),d_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(":"),m_r=l(),ae=a("ul"),tT=a("li"),z1e=a("strong"),g_r=o("albert"),h_r=o(" \u2014 "),ZX=a("a"),p_r=o("TFAlbertForMultipleChoice"),__r=o(" (ALBERT model)"),u_r=l(),aT=a("li"),Q1e=a("strong"),b_r=o("bert"),F_r=o(" \u2014 "),ez=a("a"),v_r=o("TFBertForMultipleChoice"),T_r=o(" (BERT model)"),M_r=l(),nT=a("li"),W1e=a("strong"),E_r=o("camembert"),C_r=o(" \u2014 "),oz=a("a"),w_r=o("TFCamembertForMultipleChoice"),A_r=o(" (CamemBERT model)"),y_r=l(),sT=a("li"),H1e=a("strong"),L_r=o("convbert"),x_r=o(" \u2014 "),rz=a("a"),k_r=o("TFConvBertForMultipleChoice"),S_r=o(" (ConvBERT model)"),R_r=l(),lT=a("li"),U1e=a("strong"),B_r=o("distilbert"),P_r=o(" \u2014 "),tz=a("a"),$_r=o("TFDistilBertForMultipleChoice"),I_r=o(" (DistilBERT model)"),q_r=l(),iT=a("li"),J1e=a("strong"),N_r=o("electra"),j_r=o(" \u2014 "),az=a("a"),D_r=o("TFElectraForMultipleChoice"),G_r=o(" (ELECTRA model)"),O_r=l(),dT=a("li"),Y1e=a("strong"),V_r=o("flaubert"),X_r=o(" \u2014 "),nz=a("a"),z_r=o("TFFlaubertForMultipleChoice"),Q_r=o(" (FlauBERT model)"),W_r=l(),cT=a("li"),K1e=a("strong"),H_r=o("funnel"),U_r=o(" \u2014 "),sz=a("a"),J_r=o("TFFunnelForMultipleChoice"),Y_r=o(" (Funnel Transformer model)"),K_r=l(),fT=a("li"),Z1e=a("strong"),Z_r=o("longformer"),eur=o(" \u2014 "),lz=a("a"),our=o("TFLongformerForMultipleChoice"),rur=o(" (Longformer model)"),tur=l(),mT=a("li"),e7e=a("strong"),aur=o("mobilebert"),nur=o(" \u2014 "),iz=a("a"),sur=o("TFMobileBertForMultipleChoice"),lur=o(" (MobileBERT model)"),iur=l(),gT=a("li"),o7e=a("strong"),dur=o("mpnet"),cur=o(" \u2014 "),dz=a("a"),fur=o("TFMPNetForMultipleChoice"),mur=o(" (MPNet model)"),gur=l(),hT=a("li"),r7e=a("strong"),hur=o("rembert"),pur=o(" \u2014 "),cz=a("a"),_ur=o("TFRemBertForMultipleChoice"),uur=o(" (RemBERT model)"),bur=l(),pT=a("li"),t7e=a("strong"),Fur=o("roberta"),vur=o(" \u2014 "),fz=a("a"),Tur=o("TFRobertaForMultipleChoice"),Mur=o(" (RoBERTa model)"),Eur=l(),_T=a("li"),a7e=a("strong"),Cur=o("roformer"),wur=o(" \u2014 "),mz=a("a"),Aur=o("TFRoFormerForMultipleChoice"),yur=o(" (RoFormer model)"),Lur=l(),uT=a("li"),n7e=a("strong"),xur=o("xlm"),kur=o(" \u2014 "),gz=a("a"),Sur=o("TFXLMForMultipleChoice"),Rur=o(" (XLM model)"),Bur=l(),bT=a("li"),s7e=a("strong"),Pur=o("xlm-roberta"),$ur=o(" \u2014 "),hz=a("a"),Iur=o("TFXLMRobertaForMultipleChoice"),qur=o(" (XLM-RoBERTa model)"),Nur=l(),FT=a("li"),l7e=a("strong"),jur=o("xlnet"),Dur=o(" \u2014 "),pz=a("a"),Gur=o("TFXLNetForMultipleChoice"),Our=o(" (XLNet model)"),Vur=l(),i7e=a("p"),Xur=o("Examples:"),zur=l(),f(ey.$$.fragment),_Be=l(),qc=a("h2"),vT=a("a"),d7e=a("span"),f(oy.$$.fragment),Qur=l(),c7e=a("span"),Wur=o("TFAutoModelForTableQuestionAnswering"),uBe=l(),yr=a("div"),f(ry.$$.fragment),Hur=l(),Nc=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_z=a("a"),Jur=o("from_pretrained()"),Yur=o(" class method or the "),uz=a("a"),Kur=o("from_config()"),Zur=o(` class
method.`),e1r=l(),ty=a("p"),o1r=o("This class cannot be instantiated directly using "),f7e=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),Tt=a("div"),f(ay.$$.fragment),n1r=l(),m7e=a("p"),s1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l1r=l(),jc=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),f1r=o("from_pretrained()"),m1r=o(" to load the model weights."),g1r=l(),h7e=a("p"),h1r=o("Examples:"),p1r=l(),f(ny.$$.fragment),_1r=l(),Mo=a("div"),f(sy.$$.fragment),u1r=l(),p7e=a("p"),b1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F1r=l(),Cn=a("p"),v1r=o("The model class to instantiate is selected based on the "),_7e=a("code"),T1r=o("model_type"),M1r=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(":"),y1r=l(),F7e=a("ul"),TT=a("li"),v7e=a("strong"),L1r=o("tapas"),x1r=o(" \u2014 "),Fz=a("a"),k1r=o("TFTapasForQuestionAnswering"),S1r=o(" (TAPAS model)"),R1r=l(),T7e=a("p"),B1r=o("Examples:"),P1r=l(),f(ly.$$.fragment),bBe=l(),Dc=a("h2"),MT=a("a"),M7e=a("span"),f(iy.$$.fragment),$1r=l(),E7e=a("span"),I1r=o("TFAutoModelForTokenClassification"),FBe=l(),Lr=a("div"),f(dy.$$.fragment),q1r=l(),Gc=a("p"),N1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vz=a("a"),j1r=o("from_pretrained()"),D1r=o(" class method or the "),Tz=a("a"),G1r=o("from_config()"),O1r=o(` class
method.`),V1r=l(),cy=a("p"),X1r=o("This class cannot be instantiated directly using "),C7e=a("code"),z1r=o("__init__()"),Q1r=o(" (throws an error)."),W1r=l(),Mt=a("div"),f(fy.$$.fragment),H1r=l(),w7e=a("p"),U1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J1r=l(),Oc=a("p"),Y1r=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),K1r=o("not"),Z1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),e7r=o("from_pretrained()"),o7r=o(" to load the model weights."),r7r=l(),y7e=a("p"),t7r=o("Examples:"),a7r=l(),f(my.$$.fragment),n7r=l(),Eo=a("div"),f(gy.$$.fragment),s7r=l(),L7e=a("p"),l7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i7r=l(),wn=a("p"),d7r=o("The model class to instantiate is selected based on the "),x7e=a("code"),c7r=o("model_type"),f7r=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(":"),_7r=l(),Y=a("ul"),ET=a("li"),R7e=a("strong"),u7r=o("albert"),b7r=o(" \u2014 "),Ez=a("a"),F7r=o("TFAlbertForTokenClassification"),v7r=o(" (ALBERT model)"),T7r=l(),CT=a("li"),B7e=a("strong"),M7r=o("bert"),E7r=o(" \u2014 "),Cz=a("a"),C7r=o("TFBertForTokenClassification"),w7r=o(" (BERT model)"),A7r=l(),wT=a("li"),P7e=a("strong"),y7r=o("camembert"),L7r=o(" \u2014 "),wz=a("a"),x7r=o("TFCamembertForTokenClassification"),k7r=o(" (CamemBERT model)"),S7r=l(),AT=a("li"),$7e=a("strong"),R7r=o("convbert"),B7r=o(" \u2014 "),Az=a("a"),P7r=o("TFConvBertForTokenClassification"),$7r=o(" (ConvBERT model)"),I7r=l(),yT=a("li"),I7e=a("strong"),q7r=o("deberta"),N7r=o(" \u2014 "),yz=a("a"),j7r=o("TFDebertaForTokenClassification"),D7r=o(" (DeBERTa model)"),G7r=l(),LT=a("li"),q7e=a("strong"),O7r=o("deberta-v2"),V7r=o(" \u2014 "),Lz=a("a"),X7r=o("TFDebertaV2ForTokenClassification"),z7r=o(" (DeBERTa-v2 model)"),Q7r=l(),xT=a("li"),N7e=a("strong"),W7r=o("distilbert"),H7r=o(" \u2014 "),xz=a("a"),U7r=o("TFDistilBertForTokenClassification"),J7r=o(" (DistilBERT model)"),Y7r=l(),kT=a("li"),j7e=a("strong"),K7r=o("electra"),Z7r=o(" \u2014 "),kz=a("a"),ebr=o("TFElectraForTokenClassification"),obr=o(" (ELECTRA model)"),rbr=l(),ST=a("li"),D7e=a("strong"),tbr=o("flaubert"),abr=o(" \u2014 "),Sz=a("a"),nbr=o("TFFlaubertForTokenClassification"),sbr=o(" (FlauBERT model)"),lbr=l(),RT=a("li"),G7e=a("strong"),ibr=o("funnel"),dbr=o(" \u2014 "),Rz=a("a"),cbr=o("TFFunnelForTokenClassification"),fbr=o(" (Funnel Transformer model)"),mbr=l(),BT=a("li"),O7e=a("strong"),gbr=o("layoutlm"),hbr=o(" \u2014 "),Bz=a("a"),pbr=o("TFLayoutLMForTokenClassification"),_br=o(" (LayoutLM model)"),ubr=l(),PT=a("li"),V7e=a("strong"),bbr=o("longformer"),Fbr=o(" \u2014 "),Pz=a("a"),vbr=o("TFLongformerForTokenClassification"),Tbr=o(" (Longformer model)"),Mbr=l(),$T=a("li"),X7e=a("strong"),Ebr=o("mobilebert"),Cbr=o(" \u2014 "),$z=a("a"),wbr=o("TFMobileBertForTokenClassification"),Abr=o(" (MobileBERT model)"),ybr=l(),IT=a("li"),z7e=a("strong"),Lbr=o("mpnet"),xbr=o(" \u2014 "),Iz=a("a"),kbr=o("TFMPNetForTokenClassification"),Sbr=o(" (MPNet model)"),Rbr=l(),qT=a("li"),Q7e=a("strong"),Bbr=o("rembert"),Pbr=o(" \u2014 "),qz=a("a"),$br=o("TFRemBertForTokenClassification"),Ibr=o(" (RemBERT model)"),qbr=l(),NT=a("li"),W7e=a("strong"),Nbr=o("roberta"),jbr=o(" \u2014 "),Nz=a("a"),Dbr=o("TFRobertaForTokenClassification"),Gbr=o(" (RoBERTa model)"),Obr=l(),jT=a("li"),H7e=a("strong"),Vbr=o("roformer"),Xbr=o(" \u2014 "),jz=a("a"),zbr=o("TFRoFormerForTokenClassification"),Qbr=o(" (RoFormer model)"),Wbr=l(),DT=a("li"),U7e=a("strong"),Hbr=o("xlm"),Ubr=o(" \u2014 "),Dz=a("a"),Jbr=o("TFXLMForTokenClassification"),Ybr=o(" (XLM model)"),Kbr=l(),GT=a("li"),J7e=a("strong"),Zbr=o("xlm-roberta"),e5r=o(" \u2014 "),Gz=a("a"),o5r=o("TFXLMRobertaForTokenClassification"),r5r=o(" (XLM-RoBERTa model)"),t5r=l(),OT=a("li"),Y7e=a("strong"),a5r=o("xlnet"),n5r=o(" \u2014 "),Oz=a("a"),s5r=o("TFXLNetForTokenClassification"),l5r=o(" (XLNet model)"),i5r=l(),K7e=a("p"),d5r=o("Examples:"),c5r=l(),f(hy.$$.fragment),vBe=l(),Vc=a("h2"),VT=a("a"),Z7e=a("span"),f(py.$$.fragment),f5r=l(),ebe=a("span"),m5r=o("TFAutoModelForQuestionAnswering"),TBe=l(),xr=a("div"),f(_y.$$.fragment),g5r=l(),Xc=a("p"),h5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vz=a("a"),p5r=o("from_pretrained()"),_5r=o(" class method or the "),Xz=a("a"),u5r=o("from_config()"),b5r=o(` class
method.`),F5r=l(),uy=a("p"),v5r=o("This class cannot be instantiated directly using "),obe=a("code"),T5r=o("__init__()"),M5r=o(" (throws an error)."),E5r=l(),Et=a("div"),f(by.$$.fragment),C5r=l(),rbe=a("p"),w5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A5r=l(),zc=a("p"),y5r=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),L5r=o("not"),x5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),k5r=o("from_pretrained()"),S5r=o(" to load the model weights."),R5r=l(),abe=a("p"),B5r=o("Examples:"),P5r=l(),f(Fy.$$.fragment),$5r=l(),Co=a("div"),f(vy.$$.fragment),I5r=l(),nbe=a("p"),q5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N5r=l(),An=a("p"),j5r=o("The model class to instantiate is selected based on the "),sbe=a("code"),D5r=o("model_type"),G5r=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),O5r=o("pretrained_model_name_or_path"),V5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),X5r=o("pretrained_model_name_or_path"),z5r=o(":"),Q5r=l(),K=a("ul"),XT=a("li"),dbe=a("strong"),W5r=o("albert"),H5r=o(" \u2014 "),Qz=a("a"),U5r=o("TFAlbertForQuestionAnswering"),J5r=o(" (ALBERT model)"),Y5r=l(),zT=a("li"),cbe=a("strong"),K5r=o("bert"),Z5r=o(" \u2014 "),Wz=a("a"),e3r=o("TFBertForQuestionAnswering"),o3r=o(" (BERT model)"),r3r=l(),QT=a("li"),fbe=a("strong"),t3r=o("camembert"),a3r=o(" \u2014 "),Hz=a("a"),n3r=o("TFCamembertForQuestionAnswering"),s3r=o(" (CamemBERT model)"),l3r=l(),WT=a("li"),mbe=a("strong"),i3r=o("convbert"),d3r=o(" \u2014 "),Uz=a("a"),c3r=o("TFConvBertForQuestionAnswering"),f3r=o(" (ConvBERT model)"),m3r=l(),HT=a("li"),gbe=a("strong"),g3r=o("deberta"),h3r=o(" \u2014 "),Jz=a("a"),p3r=o("TFDebertaForQuestionAnswering"),_3r=o(" (DeBERTa model)"),u3r=l(),UT=a("li"),hbe=a("strong"),b3r=o("deberta-v2"),F3r=o(" \u2014 "),Yz=a("a"),v3r=o("TFDebertaV2ForQuestionAnswering"),T3r=o(" (DeBERTa-v2 model)"),M3r=l(),JT=a("li"),pbe=a("strong"),E3r=o("distilbert"),C3r=o(" \u2014 "),Kz=a("a"),w3r=o("TFDistilBertForQuestionAnswering"),A3r=o(" (DistilBERT model)"),y3r=l(),YT=a("li"),_be=a("strong"),L3r=o("electra"),x3r=o(" \u2014 "),Zz=a("a"),k3r=o("TFElectraForQuestionAnswering"),S3r=o(" (ELECTRA model)"),R3r=l(),KT=a("li"),ube=a("strong"),B3r=o("flaubert"),P3r=o(" \u2014 "),eQ=a("a"),$3r=o("TFFlaubertForQuestionAnsweringSimple"),I3r=o(" (FlauBERT model)"),q3r=l(),ZT=a("li"),bbe=a("strong"),N3r=o("funnel"),j3r=o(" \u2014 "),oQ=a("a"),D3r=o("TFFunnelForQuestionAnswering"),G3r=o(" (Funnel Transformer model)"),O3r=l(),eM=a("li"),Fbe=a("strong"),V3r=o("gptj"),X3r=o(" \u2014 "),rQ=a("a"),z3r=o("TFGPTJForQuestionAnswering"),Q3r=o(" (GPT-J model)"),W3r=l(),oM=a("li"),vbe=a("strong"),H3r=o("longformer"),U3r=o(" \u2014 "),tQ=a("a"),J3r=o("TFLongformerForQuestionAnswering"),Y3r=o(" (Longformer model)"),K3r=l(),rM=a("li"),Tbe=a("strong"),Z3r=o("mobilebert"),e2r=o(" \u2014 "),aQ=a("a"),o2r=o("TFMobileBertForQuestionAnswering"),r2r=o(" (MobileBERT model)"),t2r=l(),tM=a("li"),Mbe=a("strong"),a2r=o("mpnet"),n2r=o(" \u2014 "),nQ=a("a"),s2r=o("TFMPNetForQuestionAnswering"),l2r=o(" (MPNet model)"),i2r=l(),aM=a("li"),Ebe=a("strong"),d2r=o("rembert"),c2r=o(" \u2014 "),sQ=a("a"),f2r=o("TFRemBertForQuestionAnswering"),m2r=o(" (RemBERT model)"),g2r=l(),nM=a("li"),Cbe=a("strong"),h2r=o("roberta"),p2r=o(" \u2014 "),lQ=a("a"),_2r=o("TFRobertaForQuestionAnswering"),u2r=o(" (RoBERTa model)"),b2r=l(),sM=a("li"),wbe=a("strong"),F2r=o("roformer"),v2r=o(" \u2014 "),iQ=a("a"),T2r=o("TFRoFormerForQuestionAnswering"),M2r=o(" (RoFormer model)"),E2r=l(),lM=a("li"),Abe=a("strong"),C2r=o("xlm"),w2r=o(" \u2014 "),dQ=a("a"),A2r=o("TFXLMForQuestionAnsweringSimple"),y2r=o(" (XLM model)"),L2r=l(),iM=a("li"),ybe=a("strong"),x2r=o("xlm-roberta"),k2r=o(" \u2014 "),cQ=a("a"),S2r=o("TFXLMRobertaForQuestionAnswering"),R2r=o(" (XLM-RoBERTa model)"),B2r=l(),dM=a("li"),Lbe=a("strong"),P2r=o("xlnet"),$2r=o(" \u2014 "),fQ=a("a"),I2r=o("TFXLNetForQuestionAnsweringSimple"),q2r=o(" (XLNet model)"),N2r=l(),xbe=a("p"),j2r=o("Examples:"),D2r=l(),f(Ty.$$.fragment),MBe=l(),Qc=a("h2"),cM=a("a"),kbe=a("span"),f(My.$$.fragment),G2r=l(),Sbe=a("span"),O2r=o("TFAutoModelForVision2Seq"),EBe=l(),kr=a("div"),f(Ey.$$.fragment),V2r=l(),Wc=a("p"),X2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mQ=a("a"),z2r=o("from_pretrained()"),Q2r=o(" class method or the "),gQ=a("a"),W2r=o("from_config()"),H2r=o(` class
method.`),U2r=l(),Cy=a("p"),J2r=o("This class cannot be instantiated directly using "),Rbe=a("code"),Y2r=o("__init__()"),K2r=o(" (throws an error)."),Z2r=l(),Ct=a("div"),f(wy.$$.fragment),eFr=l(),Bbe=a("p"),oFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rFr=l(),Hc=a("p"),tFr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),aFr=o("not"),nFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),sFr=o("from_pretrained()"),lFr=o(" to load the model weights."),iFr=l(),$be=a("p"),dFr=o("Examples:"),cFr=l(),f(Ay.$$.fragment),fFr=l(),wo=a("div"),f(yy.$$.fragment),mFr=l(),Ibe=a("p"),gFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hFr=l(),yn=a("p"),pFr=o("The model class to instantiate is selected based on the "),qbe=a("code"),_Fr=o("model_type"),uFr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),bFr=o("pretrained_model_name_or_path"),FFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),vFr=o("pretrained_model_name_or_path"),TFr=o(":"),MFr=l(),Dbe=a("ul"),fM=a("li"),Gbe=a("strong"),EFr=o("vision-encoder-decoder"),CFr=o(" \u2014 "),pQ=a("a"),wFr=o("TFVisionEncoderDecoderModel"),AFr=o(" (Vision Encoder decoder model)"),yFr=l(),Obe=a("p"),LFr=o("Examples:"),xFr=l(),f(Ly.$$.fragment),CBe=l(),Uc=a("h2"),mM=a("a"),Vbe=a("span"),f(xy.$$.fragment),kFr=l(),Xbe=a("span"),SFr=o("TFAutoModelForSpeechSeq2Seq"),wBe=l(),Sr=a("div"),f(ky.$$.fragment),RFr=l(),Jc=a("p"),BFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_Q=a("a"),PFr=o("from_pretrained()"),$Fr=o(" class method or the "),uQ=a("a"),IFr=o("from_config()"),qFr=o(` class
method.`),NFr=l(),Sy=a("p"),jFr=o("This class cannot be instantiated directly using "),zbe=a("code"),DFr=o("__init__()"),GFr=o(" (throws an error)."),OFr=l(),wt=a("div"),f(Ry.$$.fragment),VFr=l(),Qbe=a("p"),XFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zFr=l(),Yc=a("p"),QFr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),WFr=o("not"),HFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),UFr=o("from_pretrained()"),JFr=o(" to load the model weights."),YFr=l(),Hbe=a("p"),KFr=o("Examples:"),ZFr=l(),f(By.$$.fragment),evr=l(),Ao=a("div"),f(Py.$$.fragment),ovr=l(),Ube=a("p"),rvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tvr=l(),Ln=a("p"),avr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),Zbe=a("ul"),gM=a("li"),e5e=a("strong"),mvr=o("speech_to_text"),gvr=o(" \u2014 "),FQ=a("a"),hvr=o("TFSpeech2TextForConditionalGeneration"),pvr=o(" (Speech2Text model)"),_vr=l(),o5e=a("p"),uvr=o("Examples:"),bvr=l(),f($y.$$.fragment),ABe=l(),Kc=a("h2"),hM=a("a"),r5e=a("span"),f(Iy.$$.fragment),Fvr=l(),t5e=a("span"),vvr=o("FlaxAutoModel"),yBe=l(),Rr=a("div"),f(qy.$$.fragment),Tvr=l(),Zc=a("p"),Mvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vQ=a("a"),Evr=o("from_pretrained()"),Cvr=o(" class method or the "),TQ=a("a"),wvr=o("from_config()"),Avr=o(` class
method.`),yvr=l(),Ny=a("p"),Lvr=o("This class cannot be instantiated directly using "),a5e=a("code"),xvr=o("__init__()"),kvr=o(" (throws an error)."),Svr=l(),At=a("div"),f(jy.$$.fragment),Rvr=l(),n5e=a("p"),Bvr=o("Instantiates one of the base model classes of the library from a configuration."),Pvr=l(),ef=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),Ivr=o("not"),qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Nvr=o("from_pretrained()"),jvr=o(" to load the model weights."),Dvr=l(),l5e=a("p"),Gvr=o("Examples:"),Ovr=l(),f(Dy.$$.fragment),Vvr=l(),yo=a("div"),f(Gy.$$.fragment),Xvr=l(),i5e=a("p"),zvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qvr=l(),xn=a("p"),Wvr=o("The model class to instantiate is selected based on the "),d5e=a("code"),Hvr=o("model_type"),Uvr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(":"),eTr=l(),z=a("ul"),pM=a("li"),m5e=a("strong"),oTr=o("albert"),rTr=o(" \u2014 "),EQ=a("a"),tTr=o("FlaxAlbertModel"),aTr=o(" (ALBERT model)"),nTr=l(),_M=a("li"),g5e=a("strong"),sTr=o("bart"),lTr=o(" \u2014 "),CQ=a("a"),iTr=o("FlaxBartModel"),dTr=o(" (BART model)"),cTr=l(),uM=a("li"),h5e=a("strong"),fTr=o("beit"),mTr=o(" \u2014 "),wQ=a("a"),gTr=o("FlaxBeitModel"),hTr=o(" (BEiT model)"),pTr=l(),bM=a("li"),p5e=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),AQ=a("a"),bTr=o("FlaxBertModel"),FTr=o(" (BERT model)"),vTr=l(),FM=a("li"),_5e=a("strong"),TTr=o("big_bird"),MTr=o(" \u2014 "),yQ=a("a"),ETr=o("FlaxBigBirdModel"),CTr=o(" (BigBird model)"),wTr=l(),vM=a("li"),u5e=a("strong"),ATr=o("blenderbot"),yTr=o(" \u2014 "),LQ=a("a"),LTr=o("FlaxBlenderbotModel"),xTr=o(" (Blenderbot model)"),kTr=l(),TM=a("li"),b5e=a("strong"),STr=o("blenderbot-small"),RTr=o(" \u2014 "),xQ=a("a"),BTr=o("FlaxBlenderbotSmallModel"),PTr=o(" (BlenderbotSmall model)"),$Tr=l(),MM=a("li"),F5e=a("strong"),ITr=o("clip"),qTr=o(" \u2014 "),kQ=a("a"),NTr=o("FlaxCLIPModel"),jTr=o(" (CLIP model)"),DTr=l(),EM=a("li"),v5e=a("strong"),GTr=o("distilbert"),OTr=o(" \u2014 "),SQ=a("a"),VTr=o("FlaxDistilBertModel"),XTr=o(" (DistilBERT model)"),zTr=l(),CM=a("li"),T5e=a("strong"),QTr=o("electra"),WTr=o(" \u2014 "),RQ=a("a"),HTr=o("FlaxElectraModel"),UTr=o(" (ELECTRA model)"),JTr=l(),wM=a("li"),M5e=a("strong"),YTr=o("gpt2"),KTr=o(" \u2014 "),BQ=a("a"),ZTr=o("FlaxGPT2Model"),eMr=o(" (OpenAI GPT-2 model)"),oMr=l(),AM=a("li"),E5e=a("strong"),rMr=o("gpt_neo"),tMr=o(" \u2014 "),PQ=a("a"),aMr=o("FlaxGPTNeoModel"),nMr=o(" (GPT Neo model)"),sMr=l(),yM=a("li"),C5e=a("strong"),lMr=o("gptj"),iMr=o(" \u2014 "),$Q=a("a"),dMr=o("FlaxGPTJModel"),cMr=o(" (GPT-J model)"),fMr=l(),LM=a("li"),w5e=a("strong"),mMr=o("marian"),gMr=o(" \u2014 "),IQ=a("a"),hMr=o("FlaxMarianModel"),pMr=o(" (Marian model)"),_Mr=l(),xM=a("li"),A5e=a("strong"),uMr=o("mbart"),bMr=o(" \u2014 "),qQ=a("a"),FMr=o("FlaxMBartModel"),vMr=o(" (mBART model)"),TMr=l(),kM=a("li"),y5e=a("strong"),MMr=o("mt5"),EMr=o(" \u2014 "),NQ=a("a"),CMr=o("FlaxMT5Model"),wMr=o(" (mT5 model)"),AMr=l(),SM=a("li"),L5e=a("strong"),yMr=o("pegasus"),LMr=o(" \u2014 "),jQ=a("a"),xMr=o("FlaxPegasusModel"),kMr=o(" (Pegasus model)"),SMr=l(),RM=a("li"),x5e=a("strong"),RMr=o("roberta"),BMr=o(" \u2014 "),DQ=a("a"),PMr=o("FlaxRobertaModel"),$Mr=o(" (RoBERTa model)"),IMr=l(),BM=a("li"),k5e=a("strong"),qMr=o("roformer"),NMr=o(" \u2014 "),GQ=a("a"),jMr=o("FlaxRoFormerModel"),DMr=o(" (RoFormer model)"),GMr=l(),PM=a("li"),S5e=a("strong"),OMr=o("t5"),VMr=o(" \u2014 "),OQ=a("a"),XMr=o("FlaxT5Model"),zMr=o(" (T5 model)"),QMr=l(),$M=a("li"),R5e=a("strong"),WMr=o("vision-text-dual-encoder"),HMr=o(" \u2014 "),VQ=a("a"),UMr=o("FlaxVisionTextDualEncoderModel"),JMr=o(" (VisionTextDualEncoder model)"),YMr=l(),IM=a("li"),B5e=a("strong"),KMr=o("vit"),ZMr=o(" \u2014 "),XQ=a("a"),e4r=o("FlaxViTModel"),o4r=o(" (ViT model)"),r4r=l(),qM=a("li"),P5e=a("strong"),t4r=o("wav2vec2"),a4r=o(" \u2014 "),zQ=a("a"),n4r=o("FlaxWav2Vec2Model"),s4r=o(" (Wav2Vec2 model)"),l4r=l(),NM=a("li"),$5e=a("strong"),i4r=o("xglm"),d4r=o(" \u2014 "),QQ=a("a"),c4r=o("FlaxXGLMModel"),f4r=o(" (XGLM model)"),m4r=l(),jM=a("li"),I5e=a("strong"),g4r=o("xlm-roberta"),h4r=o(" \u2014 "),WQ=a("a"),p4r=o("FlaxXLMRobertaModel"),_4r=o(" (XLM-RoBERTa model)"),u4r=l(),q5e=a("p"),b4r=o("Examples:"),F4r=l(),f(Oy.$$.fragment),LBe=l(),of=a("h2"),DM=a("a"),N5e=a("span"),f(Vy.$$.fragment),v4r=l(),j5e=a("span"),T4r=o("FlaxAutoModelForCausalLM"),xBe=l(),Br=a("div"),f(Xy.$$.fragment),M4r=l(),rf=a("p"),E4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HQ=a("a"),C4r=o("from_pretrained()"),w4r=o(" class method or the "),UQ=a("a"),A4r=o("from_config()"),y4r=o(` class
method.`),L4r=l(),zy=a("p"),x4r=o("This class cannot be instantiated directly using "),D5e=a("code"),k4r=o("__init__()"),S4r=o(" (throws an error)."),R4r=l(),yt=a("div"),f(Qy.$$.fragment),B4r=l(),G5e=a("p"),P4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$4r=l(),tf=a("p"),I4r=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),q4r=o("not"),N4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),j4r=o("from_pretrained()"),D4r=o(" to load the model weights."),G4r=l(),V5e=a("p"),O4r=o("Examples:"),V4r=l(),f(Wy.$$.fragment),X4r=l(),Lo=a("div"),f(Hy.$$.fragment),z4r=l(),X5e=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W4r=l(),kn=a("p"),H4r=o("The model class to instantiate is selected based on the "),z5e=a("code"),U4r=o("model_type"),J4r=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),ca=a("ul"),GM=a("li"),H5e=a("strong"),rEr=o("bart"),tEr=o(" \u2014 "),YQ=a("a"),aEr=o("FlaxBartForCausalLM"),nEr=o(" (BART model)"),sEr=l(),OM=a("li"),U5e=a("strong"),lEr=o("gpt2"),iEr=o(" \u2014 "),KQ=a("a"),dEr=o("FlaxGPT2LMHeadModel"),cEr=o(" (OpenAI GPT-2 model)"),fEr=l(),VM=a("li"),J5e=a("strong"),mEr=o("gpt_neo"),gEr=o(" \u2014 "),ZQ=a("a"),hEr=o("FlaxGPTNeoForCausalLM"),pEr=o(" (GPT Neo model)"),_Er=l(),XM=a("li"),Y5e=a("strong"),uEr=o("gptj"),bEr=o(" \u2014 "),eW=a("a"),FEr=o("FlaxGPTJForCausalLM"),vEr=o(" (GPT-J model)"),TEr=l(),zM=a("li"),K5e=a("strong"),MEr=o("xglm"),EEr=o(" \u2014 "),oW=a("a"),CEr=o("FlaxXGLMForCausalLM"),wEr=o(" (XGLM model)"),AEr=l(),Z5e=a("p"),yEr=o("Examples:"),LEr=l(),f(Uy.$$.fragment),kBe=l(),af=a("h2"),QM=a("a"),e3e=a("span"),f(Jy.$$.fragment),xEr=l(),o3e=a("span"),kEr=o("FlaxAutoModelForPreTraining"),SBe=l(),Pr=a("div"),f(Yy.$$.fragment),SEr=l(),nf=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rW=a("a"),BEr=o("from_pretrained()"),PEr=o(" class method or the "),tW=a("a"),$Er=o("from_config()"),IEr=o(` class
method.`),qEr=l(),Ky=a("p"),NEr=o("This class cannot be instantiated directly using "),r3e=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),Lt=a("div"),f(Zy.$$.fragment),OEr=l(),t3e=a("p"),VEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XEr=l(),sf=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),QEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),n3e=a("p"),YEr=o("Examples:"),KEr=l(),f(eL.$$.fragment),ZEr=l(),xo=a("div"),f(oL.$$.fragment),eCr=l(),s3e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rCr=l(),Sn=a("p"),tCr=o("The model class to instantiate is selected based on the "),l3e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),fe=a("ul"),WM=a("li"),c3e=a("strong"),fCr=o("albert"),mCr=o(" \u2014 "),nW=a("a"),gCr=o("FlaxAlbertForPreTraining"),hCr=o(" (ALBERT model)"),pCr=l(),HM=a("li"),f3e=a("strong"),_Cr=o("bart"),uCr=o(" \u2014 "),sW=a("a"),bCr=o("FlaxBartForConditionalGeneration"),FCr=o(" (BART model)"),vCr=l(),UM=a("li"),m3e=a("strong"),TCr=o("bert"),MCr=o(" \u2014 "),lW=a("a"),ECr=o("FlaxBertForPreTraining"),CCr=o(" (BERT model)"),wCr=l(),JM=a("li"),g3e=a("strong"),ACr=o("big_bird"),yCr=o(" \u2014 "),iW=a("a"),LCr=o("FlaxBigBirdForPreTraining"),xCr=o(" (BigBird model)"),kCr=l(),YM=a("li"),h3e=a("strong"),SCr=o("electra"),RCr=o(" \u2014 "),dW=a("a"),BCr=o("FlaxElectraForPreTraining"),PCr=o(" (ELECTRA model)"),$Cr=l(),KM=a("li"),p3e=a("strong"),ICr=o("mbart"),qCr=o(" \u2014 "),cW=a("a"),NCr=o("FlaxMBartForConditionalGeneration"),jCr=o(" (mBART model)"),DCr=l(),ZM=a("li"),_3e=a("strong"),GCr=o("mt5"),OCr=o(" \u2014 "),fW=a("a"),VCr=o("FlaxMT5ForConditionalGeneration"),XCr=o(" (mT5 model)"),zCr=l(),e4=a("li"),u3e=a("strong"),QCr=o("roberta"),WCr=o(" \u2014 "),mW=a("a"),HCr=o("FlaxRobertaForMaskedLM"),UCr=o(" (RoBERTa model)"),JCr=l(),o4=a("li"),b3e=a("strong"),YCr=o("roformer"),KCr=o(" \u2014 "),gW=a("a"),ZCr=o("FlaxRoFormerForMaskedLM"),ewr=o(" (RoFormer model)"),owr=l(),r4=a("li"),F3e=a("strong"),rwr=o("t5"),twr=o(" \u2014 "),hW=a("a"),awr=o("FlaxT5ForConditionalGeneration"),nwr=o(" (T5 model)"),swr=l(),t4=a("li"),v3e=a("strong"),lwr=o("wav2vec2"),iwr=o(" \u2014 "),pW=a("a"),dwr=o("FlaxWav2Vec2ForPreTraining"),cwr=o(" (Wav2Vec2 model)"),fwr=l(),a4=a("li"),T3e=a("strong"),mwr=o("xlm-roberta"),gwr=o(" \u2014 "),_W=a("a"),hwr=o("FlaxXLMRobertaForMaskedLM"),pwr=o(" (XLM-RoBERTa model)"),_wr=l(),M3e=a("p"),uwr=o("Examples:"),bwr=l(),f(rL.$$.fragment),RBe=l(),lf=a("h2"),n4=a("a"),E3e=a("span"),f(tL.$$.fragment),Fwr=l(),C3e=a("span"),vwr=o("FlaxAutoModelForMaskedLM"),BBe=l(),$r=a("div"),f(aL.$$.fragment),Twr=l(),df=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uW=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),bW=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),ywr=l(),nL=a("p"),Lwr=o("This class cannot be instantiated directly using "),w3e=a("code"),xwr=o("__init__()"),kwr=o(" (throws an error)."),Swr=l(),xt=a("div"),f(sL.$$.fragment),Rwr=l(),A3e=a("p"),Bwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pwr=l(),cf=a("p"),$wr=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),Iwr=o("not"),qwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Nwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),L3e=a("p"),Gwr=o("Examples:"),Owr=l(),f(lL.$$.fragment),Vwr=l(),ko=a("div"),f(iL.$$.fragment),Xwr=l(),x3e=a("p"),zwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qwr=l(),Rn=a("p"),Wwr=o("The model class to instantiate is selected based on the "),k3e=a("code"),Hwr=o("model_type"),Uwr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(":"),eAr=l(),be=a("ul"),s4=a("li"),B3e=a("strong"),oAr=o("albert"),rAr=o(" \u2014 "),vW=a("a"),tAr=o("FlaxAlbertForMaskedLM"),aAr=o(" (ALBERT model)"),nAr=l(),l4=a("li"),P3e=a("strong"),sAr=o("bart"),lAr=o(" \u2014 "),TW=a("a"),iAr=o("FlaxBartForConditionalGeneration"),dAr=o(" (BART model)"),cAr=l(),i4=a("li"),$3e=a("strong"),fAr=o("bert"),mAr=o(" \u2014 "),MW=a("a"),gAr=o("FlaxBertForMaskedLM"),hAr=o(" (BERT model)"),pAr=l(),d4=a("li"),I3e=a("strong"),_Ar=o("big_bird"),uAr=o(" \u2014 "),EW=a("a"),bAr=o("FlaxBigBirdForMaskedLM"),FAr=o(" (BigBird model)"),vAr=l(),c4=a("li"),q3e=a("strong"),TAr=o("distilbert"),MAr=o(" \u2014 "),CW=a("a"),EAr=o("FlaxDistilBertForMaskedLM"),CAr=o(" (DistilBERT model)"),wAr=l(),f4=a("li"),N3e=a("strong"),AAr=o("electra"),yAr=o(" \u2014 "),wW=a("a"),LAr=o("FlaxElectraForMaskedLM"),xAr=o(" (ELECTRA model)"),kAr=l(),m4=a("li"),j3e=a("strong"),SAr=o("mbart"),RAr=o(" \u2014 "),AW=a("a"),BAr=o("FlaxMBartForConditionalGeneration"),PAr=o(" (mBART model)"),$Ar=l(),g4=a("li"),D3e=a("strong"),IAr=o("roberta"),qAr=o(" \u2014 "),yW=a("a"),NAr=o("FlaxRobertaForMaskedLM"),jAr=o(" (RoBERTa model)"),DAr=l(),h4=a("li"),G3e=a("strong"),GAr=o("roformer"),OAr=o(" \u2014 "),LW=a("a"),VAr=o("FlaxRoFormerForMaskedLM"),XAr=o(" (RoFormer model)"),zAr=l(),p4=a("li"),O3e=a("strong"),QAr=o("xlm-roberta"),WAr=o(" \u2014 "),xW=a("a"),HAr=o("FlaxXLMRobertaForMaskedLM"),UAr=o(" (XLM-RoBERTa model)"),JAr=l(),V3e=a("p"),YAr=o("Examples:"),KAr=l(),f(dL.$$.fragment),PBe=l(),ff=a("h2"),_4=a("a"),X3e=a("span"),f(cL.$$.fragment),ZAr=l(),z3e=a("span"),e6r=o("FlaxAutoModelForSeq2SeqLM"),$Be=l(),Ir=a("div"),f(fL.$$.fragment),o6r=l(),mf=a("p"),r6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kW=a("a"),t6r=o("from_pretrained()"),a6r=o(" class method or the "),SW=a("a"),n6r=o("from_config()"),s6r=o(` class
method.`),l6r=l(),mL=a("p"),i6r=o("This class cannot be instantiated directly using "),Q3e=a("code"),d6r=o("__init__()"),c6r=o(" (throws an error)."),f6r=l(),kt=a("div"),f(gL.$$.fragment),m6r=l(),W3e=a("p"),g6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h6r=l(),gf=a("p"),p6r=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),_6r=o("not"),u6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),b6r=o("from_pretrained()"),F6r=o(" to load the model weights."),v6r=l(),U3e=a("p"),T6r=o("Examples:"),M6r=l(),f(hL.$$.fragment),E6r=l(),So=a("div"),f(pL.$$.fragment),C6r=l(),J3e=a("p"),w6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A6r=l(),Bn=a("p"),y6r=o("The model class to instantiate is selected based on the "),Y3e=a("code"),L6r=o("model_type"),x6r=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),R6r=o("pretrained_model_name_or_path"),B6r=o(":"),P6r=l(),Ee=a("ul"),u4=a("li"),e2e=a("strong"),$6r=o("bart"),I6r=o(" \u2014 "),BW=a("a"),q6r=o("FlaxBartForConditionalGeneration"),N6r=o(" (BART model)"),j6r=l(),b4=a("li"),o2e=a("strong"),D6r=o("blenderbot"),G6r=o(" \u2014 "),PW=a("a"),O6r=o("FlaxBlenderbotForConditionalGeneration"),V6r=o(" (Blenderbot model)"),X6r=l(),F4=a("li"),r2e=a("strong"),z6r=o("blenderbot-small"),Q6r=o(" \u2014 "),$W=a("a"),W6r=o("FlaxBlenderbotSmallForConditionalGeneration"),H6r=o(" (BlenderbotSmall model)"),U6r=l(),v4=a("li"),t2e=a("strong"),J6r=o("encoder-decoder"),Y6r=o(" \u2014 "),IW=a("a"),K6r=o("FlaxEncoderDecoderModel"),Z6r=o(" (Encoder decoder model)"),e0r=l(),T4=a("li"),a2e=a("strong"),o0r=o("marian"),r0r=o(" \u2014 "),qW=a("a"),t0r=o("FlaxMarianMTModel"),a0r=o(" (Marian model)"),n0r=l(),M4=a("li"),n2e=a("strong"),s0r=o("mbart"),l0r=o(" \u2014 "),NW=a("a"),i0r=o("FlaxMBartForConditionalGeneration"),d0r=o(" (mBART model)"),c0r=l(),E4=a("li"),s2e=a("strong"),f0r=o("mt5"),m0r=o(" \u2014 "),jW=a("a"),g0r=o("FlaxMT5ForConditionalGeneration"),h0r=o(" (mT5 model)"),p0r=l(),C4=a("li"),l2e=a("strong"),_0r=o("pegasus"),u0r=o(" \u2014 "),DW=a("a"),b0r=o("FlaxPegasusForConditionalGeneration"),F0r=o(" (Pegasus model)"),v0r=l(),w4=a("li"),i2e=a("strong"),T0r=o("t5"),M0r=o(" \u2014 "),GW=a("a"),E0r=o("FlaxT5ForConditionalGeneration"),C0r=o(" (T5 model)"),w0r=l(),d2e=a("p"),A0r=o("Examples:"),y0r=l(),f(_L.$$.fragment),IBe=l(),hf=a("h2"),A4=a("a"),c2e=a("span"),f(uL.$$.fragment),L0r=l(),f2e=a("span"),x0r=o("FlaxAutoModelForSequenceClassification"),qBe=l(),qr=a("div"),f(bL.$$.fragment),k0r=l(),pf=a("p"),S0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OW=a("a"),R0r=o("from_pretrained()"),B0r=o(" class method or the "),VW=a("a"),P0r=o("from_config()"),$0r=o(` class
method.`),I0r=l(),FL=a("p"),q0r=o("This class cannot be instantiated directly using "),m2e=a("code"),N0r=o("__init__()"),j0r=o(" (throws an error)."),D0r=l(),St=a("div"),f(vL.$$.fragment),G0r=l(),g2e=a("p"),O0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V0r=l(),_f=a("p"),X0r=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),z0r=o("not"),Q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),W0r=o("from_pretrained()"),H0r=o(" to load the model weights."),U0r=l(),p2e=a("p"),J0r=o("Examples:"),Y0r=l(),f(TL.$$.fragment),K0r=l(),Ro=a("div"),f(ML.$$.fragment),Z0r=l(),_2e=a("p"),eyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oyr=l(),Pn=a("p"),ryr=o("The model class to instantiate is selected based on the "),u2e=a("code"),tyr=o("model_type"),ayr=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(":"),dyr=l(),Fe=a("ul"),y4=a("li"),v2e=a("strong"),cyr=o("albert"),fyr=o(" \u2014 "),zW=a("a"),myr=o("FlaxAlbertForSequenceClassification"),gyr=o(" (ALBERT model)"),hyr=l(),L4=a("li"),T2e=a("strong"),pyr=o("bart"),_yr=o(" \u2014 "),QW=a("a"),uyr=o("FlaxBartForSequenceClassification"),byr=o(" (BART model)"),Fyr=l(),x4=a("li"),M2e=a("strong"),vyr=o("bert"),Tyr=o(" \u2014 "),WW=a("a"),Myr=o("FlaxBertForSequenceClassification"),Eyr=o(" (BERT model)"),Cyr=l(),k4=a("li"),E2e=a("strong"),wyr=o("big_bird"),Ayr=o(" \u2014 "),HW=a("a"),yyr=o("FlaxBigBirdForSequenceClassification"),Lyr=o(" (BigBird model)"),xyr=l(),S4=a("li"),C2e=a("strong"),kyr=o("distilbert"),Syr=o(" \u2014 "),UW=a("a"),Ryr=o("FlaxDistilBertForSequenceClassification"),Byr=o(" (DistilBERT model)"),Pyr=l(),R4=a("li"),w2e=a("strong"),$yr=o("electra"),Iyr=o(" \u2014 "),JW=a("a"),qyr=o("FlaxElectraForSequenceClassification"),Nyr=o(" (ELECTRA model)"),jyr=l(),B4=a("li"),A2e=a("strong"),Dyr=o("mbart"),Gyr=o(" \u2014 "),YW=a("a"),Oyr=o("FlaxMBartForSequenceClassification"),Vyr=o(" (mBART model)"),Xyr=l(),P4=a("li"),y2e=a("strong"),zyr=o("roberta"),Qyr=o(" \u2014 "),KW=a("a"),Wyr=o("FlaxRobertaForSequenceClassification"),Hyr=o(" (RoBERTa model)"),Uyr=l(),$4=a("li"),L2e=a("strong"),Jyr=o("roformer"),Yyr=o(" \u2014 "),ZW=a("a"),Kyr=o("FlaxRoFormerForSequenceClassification"),Zyr=o(" (RoFormer model)"),eLr=l(),I4=a("li"),x2e=a("strong"),oLr=o("xlm-roberta"),rLr=o(" \u2014 "),eH=a("a"),tLr=o("FlaxXLMRobertaForSequenceClassification"),aLr=o(" (XLM-RoBERTa model)"),nLr=l(),k2e=a("p"),sLr=o("Examples:"),lLr=l(),f(EL.$$.fragment),NBe=l(),uf=a("h2"),q4=a("a"),S2e=a("span"),f(CL.$$.fragment),iLr=l(),R2e=a("span"),dLr=o("FlaxAutoModelForQuestionAnswering"),jBe=l(),Nr=a("div"),f(wL.$$.fragment),cLr=l(),bf=a("p"),fLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oH=a("a"),mLr=o("from_pretrained()"),gLr=o(" class method or the "),rH=a("a"),hLr=o("from_config()"),pLr=o(` class
method.`),_Lr=l(),AL=a("p"),uLr=o("This class cannot be instantiated directly using "),B2e=a("code"),bLr=o("__init__()"),FLr=o(" (throws an error)."),vLr=l(),Rt=a("div"),f(yL.$$.fragment),TLr=l(),P2e=a("p"),MLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ELr=l(),Ff=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),wLr=o("not"),ALr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),yLr=o("from_pretrained()"),LLr=o(" to load the model weights."),xLr=l(),I2e=a("p"),kLr=o("Examples:"),SLr=l(),f(LL.$$.fragment),RLr=l(),Bo=a("div"),f(xL.$$.fragment),BLr=l(),q2e=a("p"),PLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Lr=l(),$n=a("p"),ILr=o("The model class to instantiate is selected based on the "),N2e=a("code"),qLr=o("model_type"),NLr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),jLr=o("pretrained_model_name_or_path"),DLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(":"),VLr=l(),ve=a("ul"),N4=a("li"),G2e=a("strong"),XLr=o("albert"),zLr=o(" \u2014 "),aH=a("a"),QLr=o("FlaxAlbertForQuestionAnswering"),WLr=o(" (ALBERT model)"),HLr=l(),j4=a("li"),O2e=a("strong"),ULr=o("bart"),JLr=o(" \u2014 "),nH=a("a"),YLr=o("FlaxBartForQuestionAnswering"),KLr=o(" (BART model)"),ZLr=l(),D4=a("li"),V2e=a("strong"),e8r=o("bert"),o8r=o(" \u2014 "),sH=a("a"),r8r=o("FlaxBertForQuestionAnswering"),t8r=o(" (BERT model)"),a8r=l(),G4=a("li"),X2e=a("strong"),n8r=o("big_bird"),s8r=o(" \u2014 "),lH=a("a"),l8r=o("FlaxBigBirdForQuestionAnswering"),i8r=o(" (BigBird model)"),d8r=l(),O4=a("li"),z2e=a("strong"),c8r=o("distilbert"),f8r=o(" \u2014 "),iH=a("a"),m8r=o("FlaxDistilBertForQuestionAnswering"),g8r=o(" (DistilBERT model)"),h8r=l(),V4=a("li"),Q2e=a("strong"),p8r=o("electra"),_8r=o(" \u2014 "),dH=a("a"),u8r=o("FlaxElectraForQuestionAnswering"),b8r=o(" (ELECTRA model)"),F8r=l(),X4=a("li"),W2e=a("strong"),v8r=o("mbart"),T8r=o(" \u2014 "),cH=a("a"),M8r=o("FlaxMBartForQuestionAnswering"),E8r=o(" (mBART model)"),C8r=l(),z4=a("li"),H2e=a("strong"),w8r=o("roberta"),A8r=o(" \u2014 "),fH=a("a"),y8r=o("FlaxRobertaForQuestionAnswering"),L8r=o(" (RoBERTa model)"),x8r=l(),Q4=a("li"),U2e=a("strong"),k8r=o("roformer"),S8r=o(" \u2014 "),mH=a("a"),R8r=o("FlaxRoFormerForQuestionAnswering"),B8r=o(" (RoFormer model)"),P8r=l(),W4=a("li"),J2e=a("strong"),$8r=o("xlm-roberta"),I8r=o(" \u2014 "),gH=a("a"),q8r=o("FlaxXLMRobertaForQuestionAnswering"),N8r=o(" (XLM-RoBERTa model)"),j8r=l(),Y2e=a("p"),D8r=o("Examples:"),G8r=l(),f(kL.$$.fragment),DBe=l(),vf=a("h2"),H4=a("a"),K2e=a("span"),f(SL.$$.fragment),O8r=l(),Z2e=a("span"),V8r=o("FlaxAutoModelForTokenClassification"),GBe=l(),jr=a("div"),f(RL.$$.fragment),X8r=l(),Tf=a("p"),z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hH=a("a"),Q8r=o("from_pretrained()"),W8r=o(" class method or the "),pH=a("a"),H8r=o("from_config()"),U8r=o(` class
method.`),J8r=l(),BL=a("p"),Y8r=o("This class cannot be instantiated directly using "),eFe=a("code"),K8r=o("__init__()"),Z8r=o(" (throws an error)."),e9r=l(),Bt=a("div"),f(PL.$$.fragment),o9r=l(),oFe=a("p"),r9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t9r=l(),Mf=a("p"),a9r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),n9r=o("not"),s9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),l9r=o("from_pretrained()"),i9r=o(" to load the model weights."),d9r=l(),tFe=a("p"),c9r=o("Examples:"),f9r=l(),f($L.$$.fragment),m9r=l(),Po=a("div"),f(IL.$$.fragment),g9r=l(),aFe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p9r=l(),In=a("p"),_9r=o("The model class to instantiate is selected based on the "),nFe=a("code"),u9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),F9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),Be=a("ul"),U4=a("li"),iFe=a("strong"),C9r=o("albert"),w9r=o(" \u2014 "),uH=a("a"),A9r=o("FlaxAlbertForTokenClassification"),y9r=o(" (ALBERT model)"),L9r=l(),J4=a("li"),dFe=a("strong"),x9r=o("bert"),k9r=o(" \u2014 "),bH=a("a"),S9r=o("FlaxBertForTokenClassification"),R9r=o(" (BERT model)"),B9r=l(),Y4=a("li"),cFe=a("strong"),P9r=o("big_bird"),$9r=o(" \u2014 "),FH=a("a"),I9r=o("FlaxBigBirdForTokenClassification"),q9r=o(" (BigBird model)"),N9r=l(),K4=a("li"),fFe=a("strong"),j9r=o("distilbert"),D9r=o(" \u2014 "),vH=a("a"),G9r=o("FlaxDistilBertForTokenClassification"),O9r=o(" (DistilBERT model)"),V9r=l(),Z4=a("li"),mFe=a("strong"),X9r=o("electra"),z9r=o(" \u2014 "),TH=a("a"),Q9r=o("FlaxElectraForTokenClassification"),W9r=o(" (ELECTRA model)"),H9r=l(),eE=a("li"),gFe=a("strong"),U9r=o("roberta"),J9r=o(" \u2014 "),MH=a("a"),Y9r=o("FlaxRobertaForTokenClassification"),K9r=o(" (RoBERTa model)"),Z9r=l(),oE=a("li"),hFe=a("strong"),exr=o("roformer"),oxr=o(" \u2014 "),EH=a("a"),rxr=o("FlaxRoFormerForTokenClassification"),txr=o(" (RoFormer model)"),axr=l(),rE=a("li"),pFe=a("strong"),nxr=o("xlm-roberta"),sxr=o(" \u2014 "),CH=a("a"),lxr=o("FlaxXLMRobertaForTokenClassification"),ixr=o(" (XLM-RoBERTa model)"),dxr=l(),_Fe=a("p"),cxr=o("Examples:"),fxr=l(),f(qL.$$.fragment),OBe=l(),Ef=a("h2"),tE=a("a"),uFe=a("span"),f(NL.$$.fragment),mxr=l(),bFe=a("span"),gxr=o("FlaxAutoModelForMultipleChoice"),VBe=l(),Dr=a("div"),f(jL.$$.fragment),hxr=l(),Cf=a("p"),pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wH=a("a"),_xr=o("from_pretrained()"),uxr=o(" class method or the "),AH=a("a"),bxr=o("from_config()"),Fxr=o(` class
method.`),vxr=l(),DL=a("p"),Txr=o("This class cannot be instantiated directly using "),FFe=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Pt=a("div"),f(GL.$$.fragment),wxr=l(),vFe=a("p"),Axr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yxr=l(),wf=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),xxr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Bxr=l(),MFe=a("p"),Pxr=o("Examples:"),$xr=l(),f(OL.$$.fragment),Ixr=l(),$o=a("div"),f(VL.$$.fragment),qxr=l(),EFe=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jxr=l(),qn=a("p"),Dxr=o("The model class to instantiate is selected based on the "),CFe=a("code"),Gxr=o("model_type"),Oxr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(":"),Wxr=l(),Pe=a("ul"),aE=a("li"),yFe=a("strong"),Hxr=o("albert"),Uxr=o(" \u2014 "),LH=a("a"),Jxr=o("FlaxAlbertForMultipleChoice"),Yxr=o(" (ALBERT model)"),Kxr=l(),nE=a("li"),LFe=a("strong"),Zxr=o("bert"),ekr=o(" \u2014 "),xH=a("a"),okr=o("FlaxBertForMultipleChoice"),rkr=o(" (BERT model)"),tkr=l(),sE=a("li"),xFe=a("strong"),akr=o("big_bird"),nkr=o(" \u2014 "),kH=a("a"),skr=o("FlaxBigBirdForMultipleChoice"),lkr=o(" (BigBird model)"),ikr=l(),lE=a("li"),kFe=a("strong"),dkr=o("distilbert"),ckr=o(" \u2014 "),SH=a("a"),fkr=o("FlaxDistilBertForMultipleChoice"),mkr=o(" (DistilBERT model)"),gkr=l(),iE=a("li"),SFe=a("strong"),hkr=o("electra"),pkr=o(" \u2014 "),RH=a("a"),_kr=o("FlaxElectraForMultipleChoice"),ukr=o(" (ELECTRA model)"),bkr=l(),dE=a("li"),RFe=a("strong"),Fkr=o("roberta"),vkr=o(" \u2014 "),BH=a("a"),Tkr=o("FlaxRobertaForMultipleChoice"),Mkr=o(" (RoBERTa model)"),Ekr=l(),cE=a("li"),BFe=a("strong"),Ckr=o("roformer"),wkr=o(" \u2014 "),PH=a("a"),Akr=o("FlaxRoFormerForMultipleChoice"),ykr=o(" (RoFormer model)"),Lkr=l(),fE=a("li"),PFe=a("strong"),xkr=o("xlm-roberta"),kkr=o(" \u2014 "),$H=a("a"),Skr=o("FlaxXLMRobertaForMultipleChoice"),Rkr=o(" (XLM-RoBERTa model)"),Bkr=l(),$Fe=a("p"),Pkr=o("Examples:"),$kr=l(),f(XL.$$.fragment),XBe=l(),Af=a("h2"),mE=a("a"),IFe=a("span"),f(zL.$$.fragment),Ikr=l(),qFe=a("span"),qkr=o("FlaxAutoModelForNextSentencePrediction"),zBe=l(),Gr=a("div"),f(QL.$$.fragment),Nkr=l(),yf=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IH=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),qH=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),WL=a("p"),zkr=o("This class cannot be instantiated directly using "),NFe=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),$t=a("div"),f(HL.$$.fragment),Ukr=l(),jFe=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ykr=l(),Lf=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),GFe=a("p"),aSr=o("Examples:"),nSr=l(),f(UL.$$.fragment),sSr=l(),Io=a("div"),f(JL.$$.fragment),lSr=l(),OFe=a("p"),iSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dSr=l(),Nn=a("p"),cSr=o("The model class to instantiate is selected based on the "),VFe=a("code"),fSr=o("model_type"),mSr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(":"),uSr=l(),QFe=a("ul"),gE=a("li"),WFe=a("strong"),bSr=o("bert"),FSr=o(" \u2014 "),jH=a("a"),vSr=o("FlaxBertForNextSentencePrediction"),TSr=o(" (BERT model)"),MSr=l(),HFe=a("p"),ESr=o("Examples:"),CSr=l(),f(YL.$$.fragment),QBe=l(),xf=a("h2"),hE=a("a"),UFe=a("span"),f(KL.$$.fragment),wSr=l(),JFe=a("span"),ASr=o("FlaxAutoModelForImageClassification"),WBe=l(),Or=a("div"),f(ZL.$$.fragment),ySr=l(),kf=a("p"),LSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DH=a("a"),xSr=o("from_pretrained()"),kSr=o(" class method or the "),GH=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),BSr=l(),e8=a("p"),PSr=o("This class cannot be instantiated directly using "),YFe=a("code"),$Sr=o("__init__()"),ISr=o(" (throws an error)."),qSr=l(),It=a("div"),f(o8.$$.fragment),NSr=l(),KFe=a("p"),jSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DSr=l(),Sf=a("p"),GSr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),OSr=o("not"),VSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),XSr=o("from_pretrained()"),zSr=o(" to load the model weights."),QSr=l(),eve=a("p"),WSr=o("Examples:"),HSr=l(),f(r8.$$.fragment),USr=l(),qo=a("div"),f(t8.$$.fragment),JSr=l(),ove=a("p"),YSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KSr=l(),jn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),rve=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),a8=a("ul"),pE=a("li"),nve=a("strong"),lRr=o("beit"),iRr=o(" \u2014 "),VH=a("a"),dRr=o("FlaxBeitForImageClassification"),cRr=o(" (BEiT model)"),fRr=l(),_E=a("li"),sve=a("strong"),mRr=o("vit"),gRr=o(" \u2014 "),XH=a("a"),hRr=o("FlaxViTForImageClassification"),pRr=o(" (ViT model)"),_Rr=l(),lve=a("p"),uRr=o("Examples:"),bRr=l(),f(n8.$$.fragment),HBe=l(),Rf=a("h2"),uE=a("a"),ive=a("span"),f(s8.$$.fragment),FRr=l(),dve=a("span"),vRr=o("FlaxAutoModelForVision2Seq"),UBe=l(),Vr=a("div"),f(l8.$$.fragment),TRr=l(),Bf=a("p"),MRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zH=a("a"),ERr=o("from_pretrained()"),CRr=o(" class method or the "),QH=a("a"),wRr=o("from_config()"),ARr=o(` class
method.`),yRr=l(),i8=a("p"),LRr=o("This class cannot be instantiated directly using "),cve=a("code"),xRr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),qt=a("div"),f(d8.$$.fragment),RRr=l(),fve=a("p"),BRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PRr=l(),Pf=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),IRr=o("not"),qRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),NRr=o("from_pretrained()"),jRr=o(" to load the model weights."),DRr=l(),gve=a("p"),GRr=o("Examples:"),ORr=l(),f(c8.$$.fragment),VRr=l(),No=a("div"),f(f8.$$.fragment),XRr=l(),hve=a("p"),zRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QRr=l(),Dn=a("p"),WRr=o("The model class to instantiate is selected based on the "),pve=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),eBr=l(),bve=a("ul"),bE=a("li"),Fve=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),HH=a("a"),tBr=o("FlaxVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),vve=a("p"),sBr=o("Examples:"),lBr=l(),f(m8.$$.fragment),this.h()},l(c){const u=REt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var g8=s(de);Ce=n(g8,"A",{id:!0,class:!0,href:!0});var Tve=s(Ce);lo=n(Tve,"SPAN",{});var Mve=s(lo);m(me.$$.fragment,Mve),Mve.forEach(t),Tve.forEach(t),Me=i(g8),Xo=n(g8,"SPAN",{});var dBr=s(Xo);Ii=r(dBr,"Auto Classes"),dBr.forEach(t),g8.forEach(t),qf=i(c),fa=n(c,"P",{});var YBe=s(fa);qi=r(YBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(YBe,"CODE",{});var cBr=s(Ni);bC=r(cBr,"from_pretrained()"),cBr.forEach(t),Nf=r(YBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),YBe.forEach(t),xe=i(c),co=n(c,"P",{});var FE=s(co);ji=r(FE,"Instantiating one of "),Gn=n(FE,"A",{href:!0});var fBr=s(Gn);FC=r(fBr,"AutoConfig"),fBr.forEach(t),On=r(FE,", "),Vn=n(FE,"A",{href:!0});var mBr=s(Vn);vC=r(mBr,"AutoModel"),mBr.forEach(t),Di=r(FE,`, and
`),Xn=n(FE,"A",{href:!0});var gBr=s(Xn);TC=r(gBr,"AutoTokenizer"),gBr.forEach(t),Gi=r(FE," will directly create a class of the relevant architecture. For instance"),FE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var KBe=s(_e);c9=r(KBe,"will create a model that is an instance of "),Oi=n(KBe,"A",{href:!0});var hBr=s(Oi);f9=r(hBr,"BertModel"),hBr.forEach(t),m9=r(KBe,"."),KBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var ZBe=s(Ga);g9=r(ZBe,"There is one class of "),Df=n(ZBe,"CODE",{});var pBr=s(Df);h9=r(pBr,"AutoModel"),pBr.forEach(t),iIe=r(ZBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZBe.forEach(t),USe=i(c),Vi=n(c,"H2",{class:!0});var ePe=s(Vi);Gf=n(ePe,"A",{id:!0,class:!0,href:!0});var _Br=s(Gf);OJ=n(_Br,"SPAN",{});var uBr=s(OJ);m(MC.$$.fragment,uBr),uBr.forEach(t),_Br.forEach(t),dIe=i(ePe),VJ=n(ePe,"SPAN",{});var bBr=s(VJ);cIe=r(bBr,"Extending the Auto Classes"),bBr.forEach(t),ePe.forEach(t),JSe=i(c),zn=n(c,"P",{});var UH=s(zn);fIe=r(UH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XJ=n(UH,"CODE",{});var FBr=s(XJ);mIe=r(FBr,"NewModel"),FBr.forEach(t),gIe=r(UH,", make sure you have a "),zJ=n(UH,"CODE",{});var vBr=s(zJ);hIe=r(vBr,"NewModelConfig"),vBr.forEach(t),pIe=r(UH,` then you can add those to the auto
classes like this:`),UH.forEach(t),YSe=i(c),m(EC.$$.fragment,c),KSe=i(c),p9=n(c,"P",{});var TBr=s(p9);_Ie=r(TBr,"You will then be able to use the auto classes like you would usually do!"),TBr.forEach(t),ZSe=i(c),m(Of.$$.fragment,c),eRe=i(c),Xi=n(c,"H2",{class:!0});var oPe=s(Xi);Vf=n(oPe,"A",{id:!0,class:!0,href:!0});var MBr=s(Vf);QJ=n(MBr,"SPAN",{});var EBr=s(QJ);m(CC.$$.fragment,EBr),EBr.forEach(t),MBr.forEach(t),uIe=i(oPe),WJ=n(oPe,"SPAN",{});var CBr=s(WJ);bIe=r(CBr,"AutoConfig"),CBr.forEach(t),oPe.forEach(t),oRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(wC.$$.fragment,Os),FIe=i(Os),AC=n(Os,"P",{});var rPe=s(AC);vIe=r(rPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=n(rPe,"A",{href:!0});var wBr=s(_9);TIe=r(wBr,"from_pretrained()"),wBr.forEach(t),MIe=r(rPe," class method."),rPe.forEach(t),EIe=i(Os),yC=n(Os,"P",{});var tPe=s(yC);CIe=r(tPe,"This class cannot be instantiated directly using "),HJ=n(tPe,"CODE",{});var ABr=s(HJ);wIe=r(ABr,"__init__()"),ABr.forEach(t),AIe=r(tPe," (throws an error)."),tPe.forEach(t),yIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(LC.$$.fragment,ga),LIe=i(ga),UJ=n(ga,"P",{});var yBr=s(UJ);xIe=r(yBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),yBr.forEach(t),kIe=i(ga),zi=n(ga,"P",{});var JH=s(zi);SIe=r(JH,"The configuration class to instantiate is selected based on the "),JJ=n(JH,"CODE",{});var LBr=s(JJ);RIe=r(LBr,"model_type"),LBr.forEach(t),BIe=r(JH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YJ=n(JH,"CODE",{});var xBr=s(YJ);PIe=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),$Ie=r(JH,":"),JH.forEach(t),IIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var Eve=s(Xf);KJ=n(Eve,"STRONG",{});var kBr=s(KJ);qIe=r(kBr,"albert"),kBr.forEach(t),NIe=r(Eve," \u2014 "),u9=n(Eve,"A",{href:!0});var SBr=s(u9);jIe=r(SBr,"AlbertConfig"),SBr.forEach(t),DIe=r(Eve," (ALBERT model)"),Eve.forEach(t),GIe=i(v),zf=n(v,"LI",{});var Cve=s(zf);ZJ=n(Cve,"STRONG",{});var RBr=s(ZJ);OIe=r(RBr,"bart"),RBr.forEach(t),VIe=r(Cve," \u2014 "),b9=n(Cve,"A",{href:!0});var BBr=s(b9);XIe=r(BBr,"BartConfig"),BBr.forEach(t),zIe=r(Cve," (BART model)"),Cve.forEach(t),QIe=i(v),Qf=n(v,"LI",{});var wve=s(Qf);eY=n(wve,"STRONG",{});var PBr=s(eY);WIe=r(PBr,"beit"),PBr.forEach(t),HIe=r(wve," \u2014 "),F9=n(wve,"A",{href:!0});var $Br=s(F9);UIe=r($Br,"BeitConfig"),$Br.forEach(t),JIe=r(wve," (BEiT model)"),wve.forEach(t),YIe=i(v),Wf=n(v,"LI",{});var Ave=s(Wf);oY=n(Ave,"STRONG",{});var IBr=s(oY);KIe=r(IBr,"bert"),IBr.forEach(t),ZIe=r(Ave," \u2014 "),v9=n(Ave,"A",{href:!0});var qBr=s(v9);eqe=r(qBr,"BertConfig"),qBr.forEach(t),oqe=r(Ave," (BERT model)"),Ave.forEach(t),rqe=i(v),Hf=n(v,"LI",{});var yve=s(Hf);rY=n(yve,"STRONG",{});var NBr=s(rY);tqe=r(NBr,"bert-generation"),NBr.forEach(t),aqe=r(yve," \u2014 "),T9=n(yve,"A",{href:!0});var jBr=s(T9);nqe=r(jBr,"BertGenerationConfig"),jBr.forEach(t),sqe=r(yve," (Bert Generation model)"),yve.forEach(t),lqe=i(v),Uf=n(v,"LI",{});var Lve=s(Uf);tY=n(Lve,"STRONG",{});var DBr=s(tY);iqe=r(DBr,"big_bird"),DBr.forEach(t),dqe=r(Lve," \u2014 "),M9=n(Lve,"A",{href:!0});var GBr=s(M9);cqe=r(GBr,"BigBirdConfig"),GBr.forEach(t),fqe=r(Lve," (BigBird model)"),Lve.forEach(t),mqe=i(v),Jf=n(v,"LI",{});var xve=s(Jf);aY=n(xve,"STRONG",{});var OBr=s(aY);gqe=r(OBr,"bigbird_pegasus"),OBr.forEach(t),hqe=r(xve," \u2014 "),E9=n(xve,"A",{href:!0});var VBr=s(E9);pqe=r(VBr,"BigBirdPegasusConfig"),VBr.forEach(t),_qe=r(xve," (BigBirdPegasus model)"),xve.forEach(t),uqe=i(v),Yf=n(v,"LI",{});var kve=s(Yf);nY=n(kve,"STRONG",{});var XBr=s(nY);bqe=r(XBr,"blenderbot"),XBr.forEach(t),Fqe=r(kve," \u2014 "),C9=n(kve,"A",{href:!0});var zBr=s(C9);vqe=r(zBr,"BlenderbotConfig"),zBr.forEach(t),Tqe=r(kve," (Blenderbot model)"),kve.forEach(t),Mqe=i(v),Kf=n(v,"LI",{});var Sve=s(Kf);sY=n(Sve,"STRONG",{});var QBr=s(sY);Eqe=r(QBr,"blenderbot-small"),QBr.forEach(t),Cqe=r(Sve," \u2014 "),w9=n(Sve,"A",{href:!0});var WBr=s(w9);wqe=r(WBr,"BlenderbotSmallConfig"),WBr.forEach(t),Aqe=r(Sve," (BlenderbotSmall model)"),Sve.forEach(t),yqe=i(v),Zf=n(v,"LI",{});var Rve=s(Zf);lY=n(Rve,"STRONG",{});var HBr=s(lY);Lqe=r(HBr,"camembert"),HBr.forEach(t),xqe=r(Rve," \u2014 "),A9=n(Rve,"A",{href:!0});var UBr=s(A9);kqe=r(UBr,"CamembertConfig"),UBr.forEach(t),Sqe=r(Rve," (CamemBERT model)"),Rve.forEach(t),Rqe=i(v),em=n(v,"LI",{});var Bve=s(em);iY=n(Bve,"STRONG",{});var JBr=s(iY);Bqe=r(JBr,"canine"),JBr.forEach(t),Pqe=r(Bve," \u2014 "),y9=n(Bve,"A",{href:!0});var YBr=s(y9);$qe=r(YBr,"CanineConfig"),YBr.forEach(t),Iqe=r(Bve," (Canine model)"),Bve.forEach(t),qqe=i(v),om=n(v,"LI",{});var Pve=s(om);dY=n(Pve,"STRONG",{});var KBr=s(dY);Nqe=r(KBr,"clip"),KBr.forEach(t),jqe=r(Pve," \u2014 "),L9=n(Pve,"A",{href:!0});var ZBr=s(L9);Dqe=r(ZBr,"CLIPConfig"),ZBr.forEach(t),Gqe=r(Pve," (CLIP model)"),Pve.forEach(t),Oqe=i(v),rm=n(v,"LI",{});var $ve=s(rm);cY=n($ve,"STRONG",{});var ePr=s(cY);Vqe=r(ePr,"convbert"),ePr.forEach(t),Xqe=r($ve," \u2014 "),x9=n($ve,"A",{href:!0});var oPr=s(x9);zqe=r(oPr,"ConvBertConfig"),oPr.forEach(t),Qqe=r($ve," (ConvBERT model)"),$ve.forEach(t),Wqe=i(v),tm=n(v,"LI",{});var Ive=s(tm);fY=n(Ive,"STRONG",{});var rPr=s(fY);Hqe=r(rPr,"convnext"),rPr.forEach(t),Uqe=r(Ive," \u2014 "),k9=n(Ive,"A",{href:!0});var tPr=s(k9);Jqe=r(tPr,"ConvNextConfig"),tPr.forEach(t),Yqe=r(Ive," (ConvNext model)"),Ive.forEach(t),Kqe=i(v),am=n(v,"LI",{});var qve=s(am);mY=n(qve,"STRONG",{});var aPr=s(mY);Zqe=r(aPr,"ctrl"),aPr.forEach(t),eNe=r(qve," \u2014 "),S9=n(qve,"A",{href:!0});var nPr=s(S9);oNe=r(nPr,"CTRLConfig"),nPr.forEach(t),rNe=r(qve," (CTRL model)"),qve.forEach(t),tNe=i(v),nm=n(v,"LI",{});var Nve=s(nm);gY=n(Nve,"STRONG",{});var sPr=s(gY);aNe=r(sPr,"data2vec-audio"),sPr.forEach(t),nNe=r(Nve," \u2014 "),R9=n(Nve,"A",{href:!0});var lPr=s(R9);sNe=r(lPr,"Data2VecAudioConfig"),lPr.forEach(t),lNe=r(Nve," (Data2VecAudio model)"),Nve.forEach(t),iNe=i(v),sm=n(v,"LI",{});var jve=s(sm);hY=n(jve,"STRONG",{});var iPr=s(hY);dNe=r(iPr,"data2vec-text"),iPr.forEach(t),cNe=r(jve," \u2014 "),B9=n(jve,"A",{href:!0});var dPr=s(B9);fNe=r(dPr,"Data2VecTextConfig"),dPr.forEach(t),mNe=r(jve," (Data2VecText model)"),jve.forEach(t),gNe=i(v),lm=n(v,"LI",{});var Dve=s(lm);pY=n(Dve,"STRONG",{});var cPr=s(pY);hNe=r(cPr,"deberta"),cPr.forEach(t),pNe=r(Dve," \u2014 "),P9=n(Dve,"A",{href:!0});var fPr=s(P9);_Ne=r(fPr,"DebertaConfig"),fPr.forEach(t),uNe=r(Dve," (DeBERTa model)"),Dve.forEach(t),bNe=i(v),im=n(v,"LI",{});var Gve=s(im);_Y=n(Gve,"STRONG",{});var mPr=s(_Y);FNe=r(mPr,"deberta-v2"),mPr.forEach(t),vNe=r(Gve," \u2014 "),$9=n(Gve,"A",{href:!0});var gPr=s($9);TNe=r(gPr,"DebertaV2Config"),gPr.forEach(t),MNe=r(Gve," (DeBERTa-v2 model)"),Gve.forEach(t),ENe=i(v),dm=n(v,"LI",{});var Ove=s(dm);uY=n(Ove,"STRONG",{});var hPr=s(uY);CNe=r(hPr,"decision_transformer"),hPr.forEach(t),wNe=r(Ove," \u2014 "),I9=n(Ove,"A",{href:!0});var pPr=s(I9);ANe=r(pPr,"DecisionTransformerConfig"),pPr.forEach(t),yNe=r(Ove," (Decision Transformer model)"),Ove.forEach(t),LNe=i(v),cm=n(v,"LI",{});var Vve=s(cm);bY=n(Vve,"STRONG",{});var _Pr=s(bY);xNe=r(_Pr,"deit"),_Pr.forEach(t),kNe=r(Vve," \u2014 "),q9=n(Vve,"A",{href:!0});var uPr=s(q9);SNe=r(uPr,"DeiTConfig"),uPr.forEach(t),RNe=r(Vve," (DeiT model)"),Vve.forEach(t),BNe=i(v),fm=n(v,"LI",{});var Xve=s(fm);FY=n(Xve,"STRONG",{});var bPr=s(FY);PNe=r(bPr,"detr"),bPr.forEach(t),$Ne=r(Xve," \u2014 "),N9=n(Xve,"A",{href:!0});var FPr=s(N9);INe=r(FPr,"DetrConfig"),FPr.forEach(t),qNe=r(Xve," (DETR model)"),Xve.forEach(t),NNe=i(v),mm=n(v,"LI",{});var zve=s(mm);vY=n(zve,"STRONG",{});var vPr=s(vY);jNe=r(vPr,"distilbert"),vPr.forEach(t),DNe=r(zve," \u2014 "),j9=n(zve,"A",{href:!0});var TPr=s(j9);GNe=r(TPr,"DistilBertConfig"),TPr.forEach(t),ONe=r(zve," (DistilBERT model)"),zve.forEach(t),VNe=i(v),gm=n(v,"LI",{});var Qve=s(gm);TY=n(Qve,"STRONG",{});var MPr=s(TY);XNe=r(MPr,"dpr"),MPr.forEach(t),zNe=r(Qve," \u2014 "),D9=n(Qve,"A",{href:!0});var EPr=s(D9);QNe=r(EPr,"DPRConfig"),EPr.forEach(t),WNe=r(Qve," (DPR model)"),Qve.forEach(t),HNe=i(v),hm=n(v,"LI",{});var Wve=s(hm);MY=n(Wve,"STRONG",{});var CPr=s(MY);UNe=r(CPr,"dpt"),CPr.forEach(t),JNe=r(Wve," \u2014 "),G9=n(Wve,"A",{href:!0});var wPr=s(G9);YNe=r(wPr,"DPTConfig"),wPr.forEach(t),KNe=r(Wve," (DPT model)"),Wve.forEach(t),ZNe=i(v),pm=n(v,"LI",{});var Hve=s(pm);EY=n(Hve,"STRONG",{});var APr=s(EY);eje=r(APr,"electra"),APr.forEach(t),oje=r(Hve," \u2014 "),O9=n(Hve,"A",{href:!0});var yPr=s(O9);rje=r(yPr,"ElectraConfig"),yPr.forEach(t),tje=r(Hve," (ELECTRA model)"),Hve.forEach(t),aje=i(v),_m=n(v,"LI",{});var Uve=s(_m);CY=n(Uve,"STRONG",{});var LPr=s(CY);nje=r(LPr,"encoder-decoder"),LPr.forEach(t),sje=r(Uve," \u2014 "),V9=n(Uve,"A",{href:!0});var xPr=s(V9);lje=r(xPr,"EncoderDecoderConfig"),xPr.forEach(t),ije=r(Uve," (Encoder decoder model)"),Uve.forEach(t),dje=i(v),um=n(v,"LI",{});var Jve=s(um);wY=n(Jve,"STRONG",{});var kPr=s(wY);cje=r(kPr,"fastspeech2"),kPr.forEach(t),fje=r(Jve," \u2014 "),AY=n(Jve,"CODE",{});var SPr=s(AY);mje=r(SPr,"FastSpeech2Config"),SPr.forEach(t),gje=r(Jve,"(FastSpeech2 model)"),Jve.forEach(t),hje=i(v),bm=n(v,"LI",{});var Yve=s(bm);yY=n(Yve,"STRONG",{});var RPr=s(yY);pje=r(RPr,"flaubert"),RPr.forEach(t),_je=r(Yve," \u2014 "),X9=n(Yve,"A",{href:!0});var BPr=s(X9);uje=r(BPr,"FlaubertConfig"),BPr.forEach(t),bje=r(Yve," (FlauBERT model)"),Yve.forEach(t),Fje=i(v),Fm=n(v,"LI",{});var Kve=s(Fm);LY=n(Kve,"STRONG",{});var PPr=s(LY);vje=r(PPr,"fnet"),PPr.forEach(t),Tje=r(Kve," \u2014 "),z9=n(Kve,"A",{href:!0});var $Pr=s(z9);Mje=r($Pr,"FNetConfig"),$Pr.forEach(t),Eje=r(Kve," (FNet model)"),Kve.forEach(t),Cje=i(v),vm=n(v,"LI",{});var Zve=s(vm);xY=n(Zve,"STRONG",{});var IPr=s(xY);wje=r(IPr,"fsmt"),IPr.forEach(t),Aje=r(Zve," \u2014 "),Q9=n(Zve,"A",{href:!0});var qPr=s(Q9);yje=r(qPr,"FSMTConfig"),qPr.forEach(t),Lje=r(Zve," (FairSeq Machine-Translation model)"),Zve.forEach(t),xje=i(v),Tm=n(v,"LI",{});var eTe=s(Tm);kY=n(eTe,"STRONG",{});var NPr=s(kY);kje=r(NPr,"funnel"),NPr.forEach(t),Sje=r(eTe," \u2014 "),W9=n(eTe,"A",{href:!0});var jPr=s(W9);Rje=r(jPr,"FunnelConfig"),jPr.forEach(t),Bje=r(eTe," (Funnel Transformer model)"),eTe.forEach(t),Pje=i(v),Mm=n(v,"LI",{});var oTe=s(Mm);SY=n(oTe,"STRONG",{});var DPr=s(SY);$je=r(DPr,"glpn"),DPr.forEach(t),Ije=r(oTe," \u2014 "),H9=n(oTe,"A",{href:!0});var GPr=s(H9);qje=r(GPr,"GLPNConfig"),GPr.forEach(t),Nje=r(oTe," (GLPN model)"),oTe.forEach(t),jje=i(v),Em=n(v,"LI",{});var rTe=s(Em);RY=n(rTe,"STRONG",{});var OPr=s(RY);Dje=r(OPr,"gpt2"),OPr.forEach(t),Gje=r(rTe," \u2014 "),U9=n(rTe,"A",{href:!0});var VPr=s(U9);Oje=r(VPr,"GPT2Config"),VPr.forEach(t),Vje=r(rTe," (OpenAI GPT-2 model)"),rTe.forEach(t),Xje=i(v),Cm=n(v,"LI",{});var tTe=s(Cm);BY=n(tTe,"STRONG",{});var XPr=s(BY);zje=r(XPr,"gpt_neo"),XPr.forEach(t),Qje=r(tTe," \u2014 "),J9=n(tTe,"A",{href:!0});var zPr=s(J9);Wje=r(zPr,"GPTNeoConfig"),zPr.forEach(t),Hje=r(tTe," (GPT Neo model)"),tTe.forEach(t),Uje=i(v),wm=n(v,"LI",{});var aTe=s(wm);PY=n(aTe,"STRONG",{});var QPr=s(PY);Jje=r(QPr,"gptj"),QPr.forEach(t),Yje=r(aTe," \u2014 "),Y9=n(aTe,"A",{href:!0});var WPr=s(Y9);Kje=r(WPr,"GPTJConfig"),WPr.forEach(t),Zje=r(aTe," (GPT-J model)"),aTe.forEach(t),eDe=i(v),Am=n(v,"LI",{});var nTe=s(Am);$Y=n(nTe,"STRONG",{});var HPr=s($Y);oDe=r(HPr,"hubert"),HPr.forEach(t),rDe=r(nTe," \u2014 "),K9=n(nTe,"A",{href:!0});var UPr=s(K9);tDe=r(UPr,"HubertConfig"),UPr.forEach(t),aDe=r(nTe," (Hubert model)"),nTe.forEach(t),nDe=i(v),ym=n(v,"LI",{});var sTe=s(ym);IY=n(sTe,"STRONG",{});var JPr=s(IY);sDe=r(JPr,"ibert"),JPr.forEach(t),lDe=r(sTe," \u2014 "),Z9=n(sTe,"A",{href:!0});var YPr=s(Z9);iDe=r(YPr,"IBertConfig"),YPr.forEach(t),dDe=r(sTe," (I-BERT model)"),sTe.forEach(t),cDe=i(v),Lm=n(v,"LI",{});var lTe=s(Lm);qY=n(lTe,"STRONG",{});var KPr=s(qY);fDe=r(KPr,"imagegpt"),KPr.forEach(t),mDe=r(lTe," \u2014 "),ex=n(lTe,"A",{href:!0});var ZPr=s(ex);gDe=r(ZPr,"ImageGPTConfig"),ZPr.forEach(t),hDe=r(lTe," (ImageGPT model)"),lTe.forEach(t),pDe=i(v),xm=n(v,"LI",{});var iTe=s(xm);NY=n(iTe,"STRONG",{});var e$r=s(NY);_De=r(e$r,"layoutlm"),e$r.forEach(t),uDe=r(iTe," \u2014 "),ox=n(iTe,"A",{href:!0});var o$r=s(ox);bDe=r(o$r,"LayoutLMConfig"),o$r.forEach(t),FDe=r(iTe," (LayoutLM model)"),iTe.forEach(t),vDe=i(v),km=n(v,"LI",{});var dTe=s(km);jY=n(dTe,"STRONG",{});var r$r=s(jY);TDe=r(r$r,"layoutlmv2"),r$r.forEach(t),MDe=r(dTe," \u2014 "),rx=n(dTe,"A",{href:!0});var t$r=s(rx);EDe=r(t$r,"LayoutLMv2Config"),t$r.forEach(t),CDe=r(dTe," (LayoutLMv2 model)"),dTe.forEach(t),wDe=i(v),Sm=n(v,"LI",{});var cTe=s(Sm);DY=n(cTe,"STRONG",{});var a$r=s(DY);ADe=r(a$r,"led"),a$r.forEach(t),yDe=r(cTe," \u2014 "),tx=n(cTe,"A",{href:!0});var n$r=s(tx);LDe=r(n$r,"LEDConfig"),n$r.forEach(t),xDe=r(cTe," (LED model)"),cTe.forEach(t),kDe=i(v),Rm=n(v,"LI",{});var fTe=s(Rm);GY=n(fTe,"STRONG",{});var s$r=s(GY);SDe=r(s$r,"longformer"),s$r.forEach(t),RDe=r(fTe," \u2014 "),ax=n(fTe,"A",{href:!0});var l$r=s(ax);BDe=r(l$r,"LongformerConfig"),l$r.forEach(t),PDe=r(fTe," (Longformer model)"),fTe.forEach(t),$De=i(v),Bm=n(v,"LI",{});var mTe=s(Bm);OY=n(mTe,"STRONG",{});var i$r=s(OY);IDe=r(i$r,"luke"),i$r.forEach(t),qDe=r(mTe," \u2014 "),nx=n(mTe,"A",{href:!0});var d$r=s(nx);NDe=r(d$r,"LukeConfig"),d$r.forEach(t),jDe=r(mTe," (LUKE model)"),mTe.forEach(t),DDe=i(v),Pm=n(v,"LI",{});var gTe=s(Pm);VY=n(gTe,"STRONG",{});var c$r=s(VY);GDe=r(c$r,"lxmert"),c$r.forEach(t),ODe=r(gTe," \u2014 "),sx=n(gTe,"A",{href:!0});var f$r=s(sx);VDe=r(f$r,"LxmertConfig"),f$r.forEach(t),XDe=r(gTe," (LXMERT model)"),gTe.forEach(t),zDe=i(v),$m=n(v,"LI",{});var hTe=s($m);XY=n(hTe,"STRONG",{});var m$r=s(XY);QDe=r(m$r,"m2m_100"),m$r.forEach(t),WDe=r(hTe," \u2014 "),lx=n(hTe,"A",{href:!0});var g$r=s(lx);HDe=r(g$r,"M2M100Config"),g$r.forEach(t),UDe=r(hTe," (M2M100 model)"),hTe.forEach(t),JDe=i(v),Im=n(v,"LI",{});var pTe=s(Im);zY=n(pTe,"STRONG",{});var h$r=s(zY);YDe=r(h$r,"marian"),h$r.forEach(t),KDe=r(pTe," \u2014 "),ix=n(pTe,"A",{href:!0});var p$r=s(ix);ZDe=r(p$r,"MarianConfig"),p$r.forEach(t),eGe=r(pTe," (Marian model)"),pTe.forEach(t),oGe=i(v),qm=n(v,"LI",{});var _Te=s(qm);QY=n(_Te,"STRONG",{});var _$r=s(QY);rGe=r(_$r,"maskformer"),_$r.forEach(t),tGe=r(_Te," \u2014 "),dx=n(_Te,"A",{href:!0});var u$r=s(dx);aGe=r(u$r,"MaskFormerConfig"),u$r.forEach(t),nGe=r(_Te," (MaskFormer model)"),_Te.forEach(t),sGe=i(v),Nm=n(v,"LI",{});var uTe=s(Nm);WY=n(uTe,"STRONG",{});var b$r=s(WY);lGe=r(b$r,"mbart"),b$r.forEach(t),iGe=r(uTe," \u2014 "),cx=n(uTe,"A",{href:!0});var F$r=s(cx);dGe=r(F$r,"MBartConfig"),F$r.forEach(t),cGe=r(uTe," (mBART model)"),uTe.forEach(t),fGe=i(v),jm=n(v,"LI",{});var bTe=s(jm);HY=n(bTe,"STRONG",{});var v$r=s(HY);mGe=r(v$r,"megatron-bert"),v$r.forEach(t),gGe=r(bTe," \u2014 "),fx=n(bTe,"A",{href:!0});var T$r=s(fx);hGe=r(T$r,"MegatronBertConfig"),T$r.forEach(t),pGe=r(bTe," (MegatronBert model)"),bTe.forEach(t),_Ge=i(v),Dm=n(v,"LI",{});var FTe=s(Dm);UY=n(FTe,"STRONG",{});var M$r=s(UY);uGe=r(M$r,"mobilebert"),M$r.forEach(t),bGe=r(FTe," \u2014 "),mx=n(FTe,"A",{href:!0});var E$r=s(mx);FGe=r(E$r,"MobileBertConfig"),E$r.forEach(t),vGe=r(FTe," (MobileBERT model)"),FTe.forEach(t),TGe=i(v),Gm=n(v,"LI",{});var vTe=s(Gm);JY=n(vTe,"STRONG",{});var C$r=s(JY);MGe=r(C$r,"mpnet"),C$r.forEach(t),EGe=r(vTe," \u2014 "),gx=n(vTe,"A",{href:!0});var w$r=s(gx);CGe=r(w$r,"MPNetConfig"),w$r.forEach(t),wGe=r(vTe," (MPNet model)"),vTe.forEach(t),AGe=i(v),Om=n(v,"LI",{});var TTe=s(Om);YY=n(TTe,"STRONG",{});var A$r=s(YY);yGe=r(A$r,"mt5"),A$r.forEach(t),LGe=r(TTe," \u2014 "),hx=n(TTe,"A",{href:!0});var y$r=s(hx);xGe=r(y$r,"MT5Config"),y$r.forEach(t),kGe=r(TTe," (mT5 model)"),TTe.forEach(t),SGe=i(v),Vm=n(v,"LI",{});var MTe=s(Vm);KY=n(MTe,"STRONG",{});var L$r=s(KY);RGe=r(L$r,"nystromformer"),L$r.forEach(t),BGe=r(MTe," \u2014 "),px=n(MTe,"A",{href:!0});var x$r=s(px);PGe=r(x$r,"NystromformerConfig"),x$r.forEach(t),$Ge=r(MTe," (Nystromformer model)"),MTe.forEach(t),IGe=i(v),Xm=n(v,"LI",{});var ETe=s(Xm);ZY=n(ETe,"STRONG",{});var k$r=s(ZY);qGe=r(k$r,"openai-gpt"),k$r.forEach(t),NGe=r(ETe," \u2014 "),_x=n(ETe,"A",{href:!0});var S$r=s(_x);jGe=r(S$r,"OpenAIGPTConfig"),S$r.forEach(t),DGe=r(ETe," (OpenAI GPT model)"),ETe.forEach(t),GGe=i(v),zm=n(v,"LI",{});var CTe=s(zm);eK=n(CTe,"STRONG",{});var R$r=s(eK);OGe=r(R$r,"pegasus"),R$r.forEach(t),VGe=r(CTe," \u2014 "),ux=n(CTe,"A",{href:!0});var B$r=s(ux);XGe=r(B$r,"PegasusConfig"),B$r.forEach(t),zGe=r(CTe," (Pegasus model)"),CTe.forEach(t),QGe=i(v),Qm=n(v,"LI",{});var wTe=s(Qm);oK=n(wTe,"STRONG",{});var P$r=s(oK);WGe=r(P$r,"perceiver"),P$r.forEach(t),HGe=r(wTe," \u2014 "),bx=n(wTe,"A",{href:!0});var $$r=s(bx);UGe=r($$r,"PerceiverConfig"),$$r.forEach(t),JGe=r(wTe," (Perceiver model)"),wTe.forEach(t),YGe=i(v),Wm=n(v,"LI",{});var ATe=s(Wm);rK=n(ATe,"STRONG",{});var I$r=s(rK);KGe=r(I$r,"plbart"),I$r.forEach(t),ZGe=r(ATe," \u2014 "),Fx=n(ATe,"A",{href:!0});var q$r=s(Fx);eOe=r(q$r,"PLBartConfig"),q$r.forEach(t),oOe=r(ATe," (PLBart model)"),ATe.forEach(t),rOe=i(v),Hm=n(v,"LI",{});var yTe=s(Hm);tK=n(yTe,"STRONG",{});var N$r=s(tK);tOe=r(N$r,"poolformer"),N$r.forEach(t),aOe=r(yTe," \u2014 "),vx=n(yTe,"A",{href:!0});var j$r=s(vx);nOe=r(j$r,"PoolFormerConfig"),j$r.forEach(t),sOe=r(yTe," (PoolFormer model)"),yTe.forEach(t),lOe=i(v),Um=n(v,"LI",{});var LTe=s(Um);aK=n(LTe,"STRONG",{});var D$r=s(aK);iOe=r(D$r,"prophetnet"),D$r.forEach(t),dOe=r(LTe," \u2014 "),Tx=n(LTe,"A",{href:!0});var G$r=s(Tx);cOe=r(G$r,"ProphetNetConfig"),G$r.forEach(t),fOe=r(LTe," (ProphetNet model)"),LTe.forEach(t),mOe=i(v),Jm=n(v,"LI",{});var xTe=s(Jm);nK=n(xTe,"STRONG",{});var O$r=s(nK);gOe=r(O$r,"qdqbert"),O$r.forEach(t),hOe=r(xTe," \u2014 "),Mx=n(xTe,"A",{href:!0});var V$r=s(Mx);pOe=r(V$r,"QDQBertConfig"),V$r.forEach(t),_Oe=r(xTe," (QDQBert model)"),xTe.forEach(t),uOe=i(v),Ym=n(v,"LI",{});var kTe=s(Ym);sK=n(kTe,"STRONG",{});var X$r=s(sK);bOe=r(X$r,"rag"),X$r.forEach(t),FOe=r(kTe," \u2014 "),Ex=n(kTe,"A",{href:!0});var z$r=s(Ex);vOe=r(z$r,"RagConfig"),z$r.forEach(t),TOe=r(kTe," (RAG model)"),kTe.forEach(t),MOe=i(v),Km=n(v,"LI",{});var STe=s(Km);lK=n(STe,"STRONG",{});var Q$r=s(lK);EOe=r(Q$r,"realm"),Q$r.forEach(t),COe=r(STe," \u2014 "),Cx=n(STe,"A",{href:!0});var W$r=s(Cx);wOe=r(W$r,"RealmConfig"),W$r.forEach(t),AOe=r(STe," (Realm model)"),STe.forEach(t),yOe=i(v),Zm=n(v,"LI",{});var RTe=s(Zm);iK=n(RTe,"STRONG",{});var H$r=s(iK);LOe=r(H$r,"reformer"),H$r.forEach(t),xOe=r(RTe," \u2014 "),wx=n(RTe,"A",{href:!0});var U$r=s(wx);kOe=r(U$r,"ReformerConfig"),U$r.forEach(t),SOe=r(RTe," (Reformer model)"),RTe.forEach(t),ROe=i(v),eg=n(v,"LI",{});var BTe=s(eg);dK=n(BTe,"STRONG",{});var J$r=s(dK);BOe=r(J$r,"rembert"),J$r.forEach(t),POe=r(BTe," \u2014 "),Ax=n(BTe,"A",{href:!0});var Y$r=s(Ax);$Oe=r(Y$r,"RemBertConfig"),Y$r.forEach(t),IOe=r(BTe," (RemBERT model)"),BTe.forEach(t),qOe=i(v),og=n(v,"LI",{});var PTe=s(og);cK=n(PTe,"STRONG",{});var K$r=s(cK);NOe=r(K$r,"resnet"),K$r.forEach(t),jOe=r(PTe," \u2014 "),yx=n(PTe,"A",{href:!0});var Z$r=s(yx);DOe=r(Z$r,"ResNetConfig"),Z$r.forEach(t),GOe=r(PTe," (ResNet model)"),PTe.forEach(t),OOe=i(v),rg=n(v,"LI",{});var $Te=s(rg);fK=n($Te,"STRONG",{});var eIr=s(fK);VOe=r(eIr,"retribert"),eIr.forEach(t),XOe=r($Te," \u2014 "),Lx=n($Te,"A",{href:!0});var oIr=s(Lx);zOe=r(oIr,"RetriBertConfig"),oIr.forEach(t),QOe=r($Te," (RetriBERT model)"),$Te.forEach(t),WOe=i(v),tg=n(v,"LI",{});var ITe=s(tg);mK=n(ITe,"STRONG",{});var rIr=s(mK);HOe=r(rIr,"roberta"),rIr.forEach(t),UOe=r(ITe," \u2014 "),xx=n(ITe,"A",{href:!0});var tIr=s(xx);JOe=r(tIr,"RobertaConfig"),tIr.forEach(t),YOe=r(ITe," (RoBERTa model)"),ITe.forEach(t),KOe=i(v),ag=n(v,"LI",{});var qTe=s(ag);gK=n(qTe,"STRONG",{});var aIr=s(gK);ZOe=r(aIr,"roformer"),aIr.forEach(t),eVe=r(qTe," \u2014 "),kx=n(qTe,"A",{href:!0});var nIr=s(kx);oVe=r(nIr,"RoFormerConfig"),nIr.forEach(t),rVe=r(qTe," (RoFormer model)"),qTe.forEach(t),tVe=i(v),ng=n(v,"LI",{});var NTe=s(ng);hK=n(NTe,"STRONG",{});var sIr=s(hK);aVe=r(sIr,"segformer"),sIr.forEach(t),nVe=r(NTe," \u2014 "),Sx=n(NTe,"A",{href:!0});var lIr=s(Sx);sVe=r(lIr,"SegformerConfig"),lIr.forEach(t),lVe=r(NTe," (SegFormer model)"),NTe.forEach(t),iVe=i(v),sg=n(v,"LI",{});var jTe=s(sg);pK=n(jTe,"STRONG",{});var iIr=s(pK);dVe=r(iIr,"sew"),iIr.forEach(t),cVe=r(jTe," \u2014 "),Rx=n(jTe,"A",{href:!0});var dIr=s(Rx);fVe=r(dIr,"SEWConfig"),dIr.forEach(t),mVe=r(jTe," (SEW model)"),jTe.forEach(t),gVe=i(v),lg=n(v,"LI",{});var DTe=s(lg);_K=n(DTe,"STRONG",{});var cIr=s(_K);hVe=r(cIr,"sew-d"),cIr.forEach(t),pVe=r(DTe," \u2014 "),Bx=n(DTe,"A",{href:!0});var fIr=s(Bx);_Ve=r(fIr,"SEWDConfig"),fIr.forEach(t),uVe=r(DTe," (SEW-D model)"),DTe.forEach(t),bVe=i(v),ig=n(v,"LI",{});var GTe=s(ig);uK=n(GTe,"STRONG",{});var mIr=s(uK);FVe=r(mIr,"speech-encoder-decoder"),mIr.forEach(t),vVe=r(GTe," \u2014 "),Px=n(GTe,"A",{href:!0});var gIr=s(Px);TVe=r(gIr,"SpeechEncoderDecoderConfig"),gIr.forEach(t),MVe=r(GTe," (Speech Encoder decoder model)"),GTe.forEach(t),EVe=i(v),dg=n(v,"LI",{});var OTe=s(dg);bK=n(OTe,"STRONG",{});var hIr=s(bK);CVe=r(hIr,"speech_to_text"),hIr.forEach(t),wVe=r(OTe," \u2014 "),$x=n(OTe,"A",{href:!0});var pIr=s($x);AVe=r(pIr,"Speech2TextConfig"),pIr.forEach(t),yVe=r(OTe," (Speech2Text model)"),OTe.forEach(t),LVe=i(v),cg=n(v,"LI",{});var VTe=s(cg);FK=n(VTe,"STRONG",{});var _Ir=s(FK);xVe=r(_Ir,"speech_to_text_2"),_Ir.forEach(t),kVe=r(VTe," \u2014 "),Ix=n(VTe,"A",{href:!0});var uIr=s(Ix);SVe=r(uIr,"Speech2Text2Config"),uIr.forEach(t),RVe=r(VTe," (Speech2Text2 model)"),VTe.forEach(t),BVe=i(v),fg=n(v,"LI",{});var XTe=s(fg);vK=n(XTe,"STRONG",{});var bIr=s(vK);PVe=r(bIr,"splinter"),bIr.forEach(t),$Ve=r(XTe," \u2014 "),qx=n(XTe,"A",{href:!0});var FIr=s(qx);IVe=r(FIr,"SplinterConfig"),FIr.forEach(t),qVe=r(XTe," (Splinter model)"),XTe.forEach(t),NVe=i(v),mg=n(v,"LI",{});var zTe=s(mg);TK=n(zTe,"STRONG",{});var vIr=s(TK);jVe=r(vIr,"squeezebert"),vIr.forEach(t),DVe=r(zTe," \u2014 "),Nx=n(zTe,"A",{href:!0});var TIr=s(Nx);GVe=r(TIr,"SqueezeBertConfig"),TIr.forEach(t),OVe=r(zTe," (SqueezeBERT model)"),zTe.forEach(t),VVe=i(v),gg=n(v,"LI",{});var QTe=s(gg);MK=n(QTe,"STRONG",{});var MIr=s(MK);XVe=r(MIr,"swin"),MIr.forEach(t),zVe=r(QTe," \u2014 "),jx=n(QTe,"A",{href:!0});var EIr=s(jx);QVe=r(EIr,"SwinConfig"),EIr.forEach(t),WVe=r(QTe," (Swin model)"),QTe.forEach(t),HVe=i(v),hg=n(v,"LI",{});var WTe=s(hg);EK=n(WTe,"STRONG",{});var CIr=s(EK);UVe=r(CIr,"t5"),CIr.forEach(t),JVe=r(WTe," \u2014 "),Dx=n(WTe,"A",{href:!0});var wIr=s(Dx);YVe=r(wIr,"T5Config"),wIr.forEach(t),KVe=r(WTe," (T5 model)"),WTe.forEach(t),ZVe=i(v),pg=n(v,"LI",{});var HTe=s(pg);CK=n(HTe,"STRONG",{});var AIr=s(CK);eXe=r(AIr,"tapas"),AIr.forEach(t),oXe=r(HTe," \u2014 "),Gx=n(HTe,"A",{href:!0});var yIr=s(Gx);rXe=r(yIr,"TapasConfig"),yIr.forEach(t),tXe=r(HTe," (TAPAS model)"),HTe.forEach(t),aXe=i(v),_g=n(v,"LI",{});var UTe=s(_g);wK=n(UTe,"STRONG",{});var LIr=s(wK);nXe=r(LIr,"transfo-xl"),LIr.forEach(t),sXe=r(UTe," \u2014 "),Ox=n(UTe,"A",{href:!0});var xIr=s(Ox);lXe=r(xIr,"TransfoXLConfig"),xIr.forEach(t),iXe=r(UTe," (Transformer-XL model)"),UTe.forEach(t),dXe=i(v),ug=n(v,"LI",{});var JTe=s(ug);AK=n(JTe,"STRONG",{});var kIr=s(AK);cXe=r(kIr,"trocr"),kIr.forEach(t),fXe=r(JTe," \u2014 "),Vx=n(JTe,"A",{href:!0});var SIr=s(Vx);mXe=r(SIr,"TrOCRConfig"),SIr.forEach(t),gXe=r(JTe," (TrOCR model)"),JTe.forEach(t),hXe=i(v),bg=n(v,"LI",{});var YTe=s(bg);yK=n(YTe,"STRONG",{});var RIr=s(yK);pXe=r(RIr,"unispeech"),RIr.forEach(t),_Xe=r(YTe," \u2014 "),Xx=n(YTe,"A",{href:!0});var BIr=s(Xx);uXe=r(BIr,"UniSpeechConfig"),BIr.forEach(t),bXe=r(YTe," (UniSpeech model)"),YTe.forEach(t),FXe=i(v),Fg=n(v,"LI",{});var KTe=s(Fg);LK=n(KTe,"STRONG",{});var PIr=s(LK);vXe=r(PIr,"unispeech-sat"),PIr.forEach(t),TXe=r(KTe," \u2014 "),zx=n(KTe,"A",{href:!0});var $Ir=s(zx);MXe=r($Ir,"UniSpeechSatConfig"),$Ir.forEach(t),EXe=r(KTe," (UniSpeechSat model)"),KTe.forEach(t),CXe=i(v),vg=n(v,"LI",{});var ZTe=s(vg);xK=n(ZTe,"STRONG",{});var IIr=s(xK);wXe=r(IIr,"van"),IIr.forEach(t),AXe=r(ZTe," \u2014 "),Qx=n(ZTe,"A",{href:!0});var qIr=s(Qx);yXe=r(qIr,"VanConfig"),qIr.forEach(t),LXe=r(ZTe," (VAN model)"),ZTe.forEach(t),xXe=i(v),Tg=n(v,"LI",{});var eMe=s(Tg);kK=n(eMe,"STRONG",{});var NIr=s(kK);kXe=r(NIr,"vilt"),NIr.forEach(t),SXe=r(eMe," \u2014 "),Wx=n(eMe,"A",{href:!0});var jIr=s(Wx);RXe=r(jIr,"ViltConfig"),jIr.forEach(t),BXe=r(eMe," (ViLT model)"),eMe.forEach(t),PXe=i(v),Mg=n(v,"LI",{});var oMe=s(Mg);SK=n(oMe,"STRONG",{});var DIr=s(SK);$Xe=r(DIr,"vision-encoder-decoder"),DIr.forEach(t),IXe=r(oMe," \u2014 "),Hx=n(oMe,"A",{href:!0});var GIr=s(Hx);qXe=r(GIr,"VisionEncoderDecoderConfig"),GIr.forEach(t),NXe=r(oMe," (Vision Encoder decoder model)"),oMe.forEach(t),jXe=i(v),Eg=n(v,"LI",{});var rMe=s(Eg);RK=n(rMe,"STRONG",{});var OIr=s(RK);DXe=r(OIr,"vision-text-dual-encoder"),OIr.forEach(t),GXe=r(rMe," \u2014 "),Ux=n(rMe,"A",{href:!0});var VIr=s(Ux);OXe=r(VIr,"VisionTextDualEncoderConfig"),VIr.forEach(t),VXe=r(rMe," (VisionTextDualEncoder model)"),rMe.forEach(t),XXe=i(v),Cg=n(v,"LI",{});var tMe=s(Cg);BK=n(tMe,"STRONG",{});var XIr=s(BK);zXe=r(XIr,"visual_bert"),XIr.forEach(t),QXe=r(tMe," \u2014 "),Jx=n(tMe,"A",{href:!0});var zIr=s(Jx);WXe=r(zIr,"VisualBertConfig"),zIr.forEach(t),HXe=r(tMe," (VisualBert model)"),tMe.forEach(t),UXe=i(v),wg=n(v,"LI",{});var aMe=s(wg);PK=n(aMe,"STRONG",{});var QIr=s(PK);JXe=r(QIr,"vit"),QIr.forEach(t),YXe=r(aMe," \u2014 "),Yx=n(aMe,"A",{href:!0});var WIr=s(Yx);KXe=r(WIr,"ViTConfig"),WIr.forEach(t),ZXe=r(aMe," (ViT model)"),aMe.forEach(t),eze=i(v),Ag=n(v,"LI",{});var nMe=s(Ag);$K=n(nMe,"STRONG",{});var HIr=s($K);oze=r(HIr,"vit_mae"),HIr.forEach(t),rze=r(nMe," \u2014 "),Kx=n(nMe,"A",{href:!0});var UIr=s(Kx);tze=r(UIr,"ViTMAEConfig"),UIr.forEach(t),aze=r(nMe," (ViTMAE model)"),nMe.forEach(t),nze=i(v),yg=n(v,"LI",{});var sMe=s(yg);IK=n(sMe,"STRONG",{});var JIr=s(IK);sze=r(JIr,"wav2vec2"),JIr.forEach(t),lze=r(sMe," \u2014 "),Zx=n(sMe,"A",{href:!0});var YIr=s(Zx);ize=r(YIr,"Wav2Vec2Config"),YIr.forEach(t),dze=r(sMe," (Wav2Vec2 model)"),sMe.forEach(t),cze=i(v),Lg=n(v,"LI",{});var lMe=s(Lg);qK=n(lMe,"STRONG",{});var KIr=s(qK);fze=r(KIr,"wavlm"),KIr.forEach(t),mze=r(lMe," \u2014 "),ek=n(lMe,"A",{href:!0});var ZIr=s(ek);gze=r(ZIr,"WavLMConfig"),ZIr.forEach(t),hze=r(lMe," (WavLM model)"),lMe.forEach(t),pze=i(v),xg=n(v,"LI",{});var iMe=s(xg);NK=n(iMe,"STRONG",{});var eqr=s(NK);_ze=r(eqr,"xglm"),eqr.forEach(t),uze=r(iMe," \u2014 "),ok=n(iMe,"A",{href:!0});var oqr=s(ok);bze=r(oqr,"XGLMConfig"),oqr.forEach(t),Fze=r(iMe," (XGLM model)"),iMe.forEach(t),vze=i(v),kg=n(v,"LI",{});var dMe=s(kg);jK=n(dMe,"STRONG",{});var rqr=s(jK);Tze=r(rqr,"xlm"),rqr.forEach(t),Mze=r(dMe," \u2014 "),rk=n(dMe,"A",{href:!0});var tqr=s(rk);Eze=r(tqr,"XLMConfig"),tqr.forEach(t),Cze=r(dMe," (XLM model)"),dMe.forEach(t),wze=i(v),Sg=n(v,"LI",{});var cMe=s(Sg);DK=n(cMe,"STRONG",{});var aqr=s(DK);Aze=r(aqr,"xlm-prophetnet"),aqr.forEach(t),yze=r(cMe," \u2014 "),tk=n(cMe,"A",{href:!0});var nqr=s(tk);Lze=r(nqr,"XLMProphetNetConfig"),nqr.forEach(t),xze=r(cMe," (XLMProphetNet model)"),cMe.forEach(t),kze=i(v),Rg=n(v,"LI",{});var fMe=s(Rg);GK=n(fMe,"STRONG",{});var sqr=s(GK);Sze=r(sqr,"xlm-roberta"),sqr.forEach(t),Rze=r(fMe," \u2014 "),ak=n(fMe,"A",{href:!0});var lqr=s(ak);Bze=r(lqr,"XLMRobertaConfig"),lqr.forEach(t),Pze=r(fMe," (XLM-RoBERTa model)"),fMe.forEach(t),$ze=i(v),Bg=n(v,"LI",{});var mMe=s(Bg);OK=n(mMe,"STRONG",{});var iqr=s(OK);Ize=r(iqr,"xlm-roberta-xl"),iqr.forEach(t),qze=r(mMe," \u2014 "),nk=n(mMe,"A",{href:!0});var dqr=s(nk);Nze=r(dqr,"XLMRobertaXLConfig"),dqr.forEach(t),jze=r(mMe," (XLM-RoBERTa-XL model)"),mMe.forEach(t),Dze=i(v),Pg=n(v,"LI",{});var gMe=s(Pg);VK=n(gMe,"STRONG",{});var cqr=s(VK);Gze=r(cqr,"xlnet"),cqr.forEach(t),Oze=r(gMe," \u2014 "),sk=n(gMe,"A",{href:!0});var fqr=s(sk);Vze=r(fqr,"XLNetConfig"),fqr.forEach(t),Xze=r(gMe," (XLNet model)"),gMe.forEach(t),zze=i(v),$g=n(v,"LI",{});var hMe=s($g);XK=n(hMe,"STRONG",{});var mqr=s(XK);Qze=r(mqr,"yoso"),mqr.forEach(t),Wze=r(hMe," \u2014 "),lk=n(hMe,"A",{href:!0});var gqr=s(lk);Hze=r(gqr,"YosoConfig"),gqr.forEach(t),Uze=r(hMe," (YOSO model)"),hMe.forEach(t),v.forEach(t),Jze=i(ga),zK=n(ga,"P",{});var hqr=s(zK);Yze=r(hqr,"Examples:"),hqr.forEach(t),Kze=i(ga),m(xC.$$.fragment,ga),ga.forEach(t),Zze=i(Os),Ig=n(Os,"DIV",{class:!0});var aPe=s(Ig);m(kC.$$.fragment,aPe),eQe=i(aPe),QK=n(aPe,"P",{});var pqr=s(QK);oQe=r(pqr,"Register a new configuration for this class."),pqr.forEach(t),aPe.forEach(t),Os.forEach(t),rRe=i(c),Qi=n(c,"H2",{class:!0});var nPe=s(Qi);qg=n(nPe,"A",{id:!0,class:!0,href:!0});var _qr=s(qg);WK=n(_qr,"SPAN",{});var uqr=s(WK);m(SC.$$.fragment,uqr),uqr.forEach(t),_qr.forEach(t),rQe=i(nPe),HK=n(nPe,"SPAN",{});var bqr=s(HK);tQe=r(bqr,"AutoTokenizer"),bqr.forEach(t),nPe.forEach(t),tRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(RC.$$.fragment,Vs),aQe=i(Vs),BC=n(Vs,"P",{});var sPe=s(BC);nQe=r(sPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ik=n(sPe,"A",{href:!0});var Fqr=s(ik);sQe=r(Fqr,"AutoTokenizer.from_pretrained()"),Fqr.forEach(t),lQe=r(sPe," class method."),sPe.forEach(t),iQe=i(Vs),PC=n(Vs,"P",{});var lPe=s(PC);dQe=r(lPe,"This class cannot be instantiated directly using "),UK=n(lPe,"CODE",{});var vqr=s(UK);cQe=r(vqr,"__init__()"),vqr.forEach(t),fQe=r(lPe," (throws an error)."),lPe.forEach(t),mQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m($C.$$.fragment,ha),gQe=i(ha),JK=n(ha,"P",{});var Tqr=s(JK);hQe=r(Tqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tqr.forEach(t),pQe=i(ha),Oa=n(ha,"P",{});var vE=s(Oa);_Qe=r(vE,"The tokenizer class to instantiate is selected based on the "),YK=n(vE,"CODE",{});var Mqr=s(YK);uQe=r(Mqr,"model_type"),Mqr.forEach(t),bQe=r(vE,` property of the config object (either
passed as an argument or loaded from `),KK=n(vE,"CODE",{});var Eqr=s(KK);FQe=r(Eqr,"pretrained_model_name_or_path"),Eqr.forEach(t),vQe=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZK=n(vE,"CODE",{});var Cqr=s(ZK);TQe=r(Cqr,"pretrained_model_name_or_path"),Cqr.forEach(t),MQe=r(vE,":"),vE.forEach(t),EQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var h8=s(Qn);eZ=n(h8,"STRONG",{});var wqr=s(eZ);CQe=r(wqr,"albert"),wqr.forEach(t),wQe=r(h8," \u2014 "),dk=n(h8,"A",{href:!0});var Aqr=s(dk);AQe=r(Aqr,"AlbertTokenizer"),Aqr.forEach(t),yQe=r(h8," or "),ck=n(h8,"A",{href:!0});var yqr=s(ck);LQe=r(yqr,"AlbertTokenizerFast"),yqr.forEach(t),xQe=r(h8," (ALBERT model)"),h8.forEach(t),kQe=i(w),Wn=n(w,"LI",{});var p8=s(Wn);oZ=n(p8,"STRONG",{});var Lqr=s(oZ);SQe=r(Lqr,"bart"),Lqr.forEach(t),RQe=r(p8," \u2014 "),fk=n(p8,"A",{href:!0});var xqr=s(fk);BQe=r(xqr,"BartTokenizer"),xqr.forEach(t),PQe=r(p8," or "),mk=n(p8,"A",{href:!0});var kqr=s(mk);$Qe=r(kqr,"BartTokenizerFast"),kqr.forEach(t),IQe=r(p8," (BART model)"),p8.forEach(t),qQe=i(w),Hn=n(w,"LI",{});var _8=s(Hn);rZ=n(_8,"STRONG",{});var Sqr=s(rZ);NQe=r(Sqr,"barthez"),Sqr.forEach(t),jQe=r(_8," \u2014 "),gk=n(_8,"A",{href:!0});var Rqr=s(gk);DQe=r(Rqr,"BarthezTokenizer"),Rqr.forEach(t),GQe=r(_8," or "),hk=n(_8,"A",{href:!0});var Bqr=s(hk);OQe=r(Bqr,"BarthezTokenizerFast"),Bqr.forEach(t),VQe=r(_8," (BARThez model)"),_8.forEach(t),XQe=i(w),Ng=n(w,"LI",{});var pMe=s(Ng);tZ=n(pMe,"STRONG",{});var Pqr=s(tZ);zQe=r(Pqr,"bartpho"),Pqr.forEach(t),QQe=r(pMe," \u2014 "),pk=n(pMe,"A",{href:!0});var $qr=s(pk);WQe=r($qr,"BartphoTokenizer"),$qr.forEach(t),HQe=r(pMe," (BARTpho model)"),pMe.forEach(t),UQe=i(w),Un=n(w,"LI",{});var u8=s(Un);aZ=n(u8,"STRONG",{});var Iqr=s(aZ);JQe=r(Iqr,"bert"),Iqr.forEach(t),YQe=r(u8," \u2014 "),_k=n(u8,"A",{href:!0});var qqr=s(_k);KQe=r(qqr,"BertTokenizer"),qqr.forEach(t),ZQe=r(u8," or "),uk=n(u8,"A",{href:!0});var Nqr=s(uk);eWe=r(Nqr,"BertTokenizerFast"),Nqr.forEach(t),oWe=r(u8," (BERT model)"),u8.forEach(t),rWe=i(w),jg=n(w,"LI",{});var _Me=s(jg);nZ=n(_Me,"STRONG",{});var jqr=s(nZ);tWe=r(jqr,"bert-generation"),jqr.forEach(t),aWe=r(_Me," \u2014 "),bk=n(_Me,"A",{href:!0});var Dqr=s(bk);nWe=r(Dqr,"BertGenerationTokenizer"),Dqr.forEach(t),sWe=r(_Me," (Bert Generation model)"),_Me.forEach(t),lWe=i(w),Dg=n(w,"LI",{});var uMe=s(Dg);sZ=n(uMe,"STRONG",{});var Gqr=s(sZ);iWe=r(Gqr,"bert-japanese"),Gqr.forEach(t),dWe=r(uMe," \u2014 "),Fk=n(uMe,"A",{href:!0});var Oqr=s(Fk);cWe=r(Oqr,"BertJapaneseTokenizer"),Oqr.forEach(t),fWe=r(uMe," (BertJapanese model)"),uMe.forEach(t),mWe=i(w),Gg=n(w,"LI",{});var bMe=s(Gg);lZ=n(bMe,"STRONG",{});var Vqr=s(lZ);gWe=r(Vqr,"bertweet"),Vqr.forEach(t),hWe=r(bMe," \u2014 "),vk=n(bMe,"A",{href:!0});var Xqr=s(vk);pWe=r(Xqr,"BertweetTokenizer"),Xqr.forEach(t),_We=r(bMe," (Bertweet model)"),bMe.forEach(t),uWe=i(w),Jn=n(w,"LI",{});var b8=s(Jn);iZ=n(b8,"STRONG",{});var zqr=s(iZ);bWe=r(zqr,"big_bird"),zqr.forEach(t),FWe=r(b8," \u2014 "),Tk=n(b8,"A",{href:!0});var Qqr=s(Tk);vWe=r(Qqr,"BigBirdTokenizer"),Qqr.forEach(t),TWe=r(b8," or "),Mk=n(b8,"A",{href:!0});var Wqr=s(Mk);MWe=r(Wqr,"BigBirdTokenizerFast"),Wqr.forEach(t),EWe=r(b8," (BigBird model)"),b8.forEach(t),CWe=i(w),Yn=n(w,"LI",{});var F8=s(Yn);dZ=n(F8,"STRONG",{});var Hqr=s(dZ);wWe=r(Hqr,"bigbird_pegasus"),Hqr.forEach(t),AWe=r(F8," \u2014 "),Ek=n(F8,"A",{href:!0});var Uqr=s(Ek);yWe=r(Uqr,"PegasusTokenizer"),Uqr.forEach(t),LWe=r(F8," or "),Ck=n(F8,"A",{href:!0});var Jqr=s(Ck);xWe=r(Jqr,"PegasusTokenizerFast"),Jqr.forEach(t),kWe=r(F8," (BigBirdPegasus model)"),F8.forEach(t),SWe=i(w),Kn=n(w,"LI",{});var v8=s(Kn);cZ=n(v8,"STRONG",{});var Yqr=s(cZ);RWe=r(Yqr,"blenderbot"),Yqr.forEach(t),BWe=r(v8," \u2014 "),wk=n(v8,"A",{href:!0});var Kqr=s(wk);PWe=r(Kqr,"BlenderbotTokenizer"),Kqr.forEach(t),$We=r(v8," or "),Ak=n(v8,"A",{href:!0});var Zqr=s(Ak);IWe=r(Zqr,"BlenderbotTokenizerFast"),Zqr.forEach(t),qWe=r(v8," (Blenderbot model)"),v8.forEach(t),NWe=i(w),Og=n(w,"LI",{});var FMe=s(Og);fZ=n(FMe,"STRONG",{});var eNr=s(fZ);jWe=r(eNr,"blenderbot-small"),eNr.forEach(t),DWe=r(FMe," \u2014 "),yk=n(FMe,"A",{href:!0});var oNr=s(yk);GWe=r(oNr,"BlenderbotSmallTokenizer"),oNr.forEach(t),OWe=r(FMe," (BlenderbotSmall model)"),FMe.forEach(t),VWe=i(w),Vg=n(w,"LI",{});var vMe=s(Vg);mZ=n(vMe,"STRONG",{});var rNr=s(mZ);XWe=r(rNr,"byt5"),rNr.forEach(t),zWe=r(vMe," \u2014 "),Lk=n(vMe,"A",{href:!0});var tNr=s(Lk);QWe=r(tNr,"ByT5Tokenizer"),tNr.forEach(t),WWe=r(vMe," (ByT5 model)"),vMe.forEach(t),HWe=i(w),Zn=n(w,"LI",{});var T8=s(Zn);gZ=n(T8,"STRONG",{});var aNr=s(gZ);UWe=r(aNr,"camembert"),aNr.forEach(t),JWe=r(T8," \u2014 "),xk=n(T8,"A",{href:!0});var nNr=s(xk);YWe=r(nNr,"CamembertTokenizer"),nNr.forEach(t),KWe=r(T8," or "),kk=n(T8,"A",{href:!0});var sNr=s(kk);ZWe=r(sNr,"CamembertTokenizerFast"),sNr.forEach(t),eHe=r(T8," (CamemBERT model)"),T8.forEach(t),oHe=i(w),Xg=n(w,"LI",{});var TMe=s(Xg);hZ=n(TMe,"STRONG",{});var lNr=s(hZ);rHe=r(lNr,"canine"),lNr.forEach(t),tHe=r(TMe," \u2014 "),Sk=n(TMe,"A",{href:!0});var iNr=s(Sk);aHe=r(iNr,"CanineTokenizer"),iNr.forEach(t),nHe=r(TMe," (Canine model)"),TMe.forEach(t),sHe=i(w),es=n(w,"LI",{});var M8=s(es);pZ=n(M8,"STRONG",{});var dNr=s(pZ);lHe=r(dNr,"clip"),dNr.forEach(t),iHe=r(M8," \u2014 "),Rk=n(M8,"A",{href:!0});var cNr=s(Rk);dHe=r(cNr,"CLIPTokenizer"),cNr.forEach(t),cHe=r(M8," or "),Bk=n(M8,"A",{href:!0});var fNr=s(Bk);fHe=r(fNr,"CLIPTokenizerFast"),fNr.forEach(t),mHe=r(M8," (CLIP model)"),M8.forEach(t),gHe=i(w),os=n(w,"LI",{});var E8=s(os);_Z=n(E8,"STRONG",{});var mNr=s(_Z);hHe=r(mNr,"convbert"),mNr.forEach(t),pHe=r(E8," \u2014 "),Pk=n(E8,"A",{href:!0});var gNr=s(Pk);_He=r(gNr,"ConvBertTokenizer"),gNr.forEach(t),uHe=r(E8," or "),$k=n(E8,"A",{href:!0});var hNr=s($k);bHe=r(hNr,"ConvBertTokenizerFast"),hNr.forEach(t),FHe=r(E8," (ConvBERT model)"),E8.forEach(t),vHe=i(w),rs=n(w,"LI",{});var C8=s(rs);uZ=n(C8,"STRONG",{});var pNr=s(uZ);THe=r(pNr,"cpm"),pNr.forEach(t),MHe=r(C8," \u2014 "),Ik=n(C8,"A",{href:!0});var _Nr=s(Ik);EHe=r(_Nr,"CpmTokenizer"),_Nr.forEach(t),CHe=r(C8," or "),bZ=n(C8,"CODE",{});var uNr=s(bZ);wHe=r(uNr,"CpmTokenizerFast"),uNr.forEach(t),AHe=r(C8," (CPM model)"),C8.forEach(t),yHe=i(w),zg=n(w,"LI",{});var MMe=s(zg);FZ=n(MMe,"STRONG",{});var bNr=s(FZ);LHe=r(bNr,"ctrl"),bNr.forEach(t),xHe=r(MMe," \u2014 "),qk=n(MMe,"A",{href:!0});var FNr=s(qk);kHe=r(FNr,"CTRLTokenizer"),FNr.forEach(t),SHe=r(MMe," (CTRL model)"),MMe.forEach(t),RHe=i(w),ts=n(w,"LI",{});var w8=s(ts);vZ=n(w8,"STRONG",{});var vNr=s(vZ);BHe=r(vNr,"deberta"),vNr.forEach(t),PHe=r(w8," \u2014 "),Nk=n(w8,"A",{href:!0});var TNr=s(Nk);$He=r(TNr,"DebertaTokenizer"),TNr.forEach(t),IHe=r(w8," or "),jk=n(w8,"A",{href:!0});var MNr=s(jk);qHe=r(MNr,"DebertaTokenizerFast"),MNr.forEach(t),NHe=r(w8," (DeBERTa model)"),w8.forEach(t),jHe=i(w),Qg=n(w,"LI",{});var EMe=s(Qg);TZ=n(EMe,"STRONG",{});var ENr=s(TZ);DHe=r(ENr,"deberta-v2"),ENr.forEach(t),GHe=r(EMe," \u2014 "),Dk=n(EMe,"A",{href:!0});var CNr=s(Dk);OHe=r(CNr,"DebertaV2Tokenizer"),CNr.forEach(t),VHe=r(EMe," (DeBERTa-v2 model)"),EMe.forEach(t),XHe=i(w),as=n(w,"LI",{});var A8=s(as);MZ=n(A8,"STRONG",{});var wNr=s(MZ);zHe=r(wNr,"distilbert"),wNr.forEach(t),QHe=r(A8," \u2014 "),Gk=n(A8,"A",{href:!0});var ANr=s(Gk);WHe=r(ANr,"DistilBertTokenizer"),ANr.forEach(t),HHe=r(A8," or "),Ok=n(A8,"A",{href:!0});var yNr=s(Ok);UHe=r(yNr,"DistilBertTokenizerFast"),yNr.forEach(t),JHe=r(A8," (DistilBERT model)"),A8.forEach(t),YHe=i(w),ns=n(w,"LI",{});var y8=s(ns);EZ=n(y8,"STRONG",{});var LNr=s(EZ);KHe=r(LNr,"dpr"),LNr.forEach(t),ZHe=r(y8," \u2014 "),Vk=n(y8,"A",{href:!0});var xNr=s(Vk);eUe=r(xNr,"DPRQuestionEncoderTokenizer"),xNr.forEach(t),oUe=r(y8," or "),Xk=n(y8,"A",{href:!0});var kNr=s(Xk);rUe=r(kNr,"DPRQuestionEncoderTokenizerFast"),kNr.forEach(t),tUe=r(y8," (DPR model)"),y8.forEach(t),aUe=i(w),ss=n(w,"LI",{});var L8=s(ss);CZ=n(L8,"STRONG",{});var SNr=s(CZ);nUe=r(SNr,"electra"),SNr.forEach(t),sUe=r(L8," \u2014 "),zk=n(L8,"A",{href:!0});var RNr=s(zk);lUe=r(RNr,"ElectraTokenizer"),RNr.forEach(t),iUe=r(L8," or "),Qk=n(L8,"A",{href:!0});var BNr=s(Qk);dUe=r(BNr,"ElectraTokenizerFast"),BNr.forEach(t),cUe=r(L8," (ELECTRA model)"),L8.forEach(t),fUe=i(w),Wg=n(w,"LI",{});var CMe=s(Wg);wZ=n(CMe,"STRONG",{});var PNr=s(wZ);mUe=r(PNr,"fastspeech2"),PNr.forEach(t),gUe=r(CMe," \u2014 "),AZ=n(CMe,"CODE",{});var $Nr=s(AZ);hUe=r($Nr,"FastSpeech2Tokenizer"),$Nr.forEach(t),pUe=r(CMe,"(FastSpeech2 model)"),CMe.forEach(t),_Ue=i(w),Hg=n(w,"LI",{});var wMe=s(Hg);yZ=n(wMe,"STRONG",{});var INr=s(yZ);uUe=r(INr,"flaubert"),INr.forEach(t),bUe=r(wMe," \u2014 "),Wk=n(wMe,"A",{href:!0});var qNr=s(Wk);FUe=r(qNr,"FlaubertTokenizer"),qNr.forEach(t),vUe=r(wMe," (FlauBERT model)"),wMe.forEach(t),TUe=i(w),ls=n(w,"LI",{});var x8=s(ls);LZ=n(x8,"STRONG",{});var NNr=s(LZ);MUe=r(NNr,"fnet"),NNr.forEach(t),EUe=r(x8," \u2014 "),Hk=n(x8,"A",{href:!0});var jNr=s(Hk);CUe=r(jNr,"FNetTokenizer"),jNr.forEach(t),wUe=r(x8," or "),Uk=n(x8,"A",{href:!0});var DNr=s(Uk);AUe=r(DNr,"FNetTokenizerFast"),DNr.forEach(t),yUe=r(x8," (FNet model)"),x8.forEach(t),LUe=i(w),Ug=n(w,"LI",{});var AMe=s(Ug);xZ=n(AMe,"STRONG",{});var GNr=s(xZ);xUe=r(GNr,"fsmt"),GNr.forEach(t),kUe=r(AMe," \u2014 "),Jk=n(AMe,"A",{href:!0});var ONr=s(Jk);SUe=r(ONr,"FSMTTokenizer"),ONr.forEach(t),RUe=r(AMe," (FairSeq Machine-Translation model)"),AMe.forEach(t),BUe=i(w),is=n(w,"LI",{});var k8=s(is);kZ=n(k8,"STRONG",{});var VNr=s(kZ);PUe=r(VNr,"funnel"),VNr.forEach(t),$Ue=r(k8," \u2014 "),Yk=n(k8,"A",{href:!0});var XNr=s(Yk);IUe=r(XNr,"FunnelTokenizer"),XNr.forEach(t),qUe=r(k8," or "),Kk=n(k8,"A",{href:!0});var zNr=s(Kk);NUe=r(zNr,"FunnelTokenizerFast"),zNr.forEach(t),jUe=r(k8," (Funnel Transformer model)"),k8.forEach(t),DUe=i(w),ds=n(w,"LI",{});var S8=s(ds);SZ=n(S8,"STRONG",{});var QNr=s(SZ);GUe=r(QNr,"gpt2"),QNr.forEach(t),OUe=r(S8," \u2014 "),Zk=n(S8,"A",{href:!0});var WNr=s(Zk);VUe=r(WNr,"GPT2Tokenizer"),WNr.forEach(t),XUe=r(S8," or "),eS=n(S8,"A",{href:!0});var HNr=s(eS);zUe=r(HNr,"GPT2TokenizerFast"),HNr.forEach(t),QUe=r(S8," (OpenAI GPT-2 model)"),S8.forEach(t),WUe=i(w),cs=n(w,"LI",{});var R8=s(cs);RZ=n(R8,"STRONG",{});var UNr=s(RZ);HUe=r(UNr,"gpt_neo"),UNr.forEach(t),UUe=r(R8," \u2014 "),oS=n(R8,"A",{href:!0});var JNr=s(oS);JUe=r(JNr,"GPT2Tokenizer"),JNr.forEach(t),YUe=r(R8," or "),rS=n(R8,"A",{href:!0});var YNr=s(rS);KUe=r(YNr,"GPT2TokenizerFast"),YNr.forEach(t),ZUe=r(R8," (GPT Neo model)"),R8.forEach(t),eJe=i(w),fs=n(w,"LI",{});var B8=s(fs);BZ=n(B8,"STRONG",{});var KNr=s(BZ);oJe=r(KNr,"herbert"),KNr.forEach(t),rJe=r(B8," \u2014 "),tS=n(B8,"A",{href:!0});var ZNr=s(tS);tJe=r(ZNr,"HerbertTokenizer"),ZNr.forEach(t),aJe=r(B8," or "),aS=n(B8,"A",{href:!0});var ejr=s(aS);nJe=r(ejr,"HerbertTokenizerFast"),ejr.forEach(t),sJe=r(B8," (HerBERT model)"),B8.forEach(t),lJe=i(w),Jg=n(w,"LI",{});var yMe=s(Jg);PZ=n(yMe,"STRONG",{});var ojr=s(PZ);iJe=r(ojr,"hubert"),ojr.forEach(t),dJe=r(yMe," \u2014 "),nS=n(yMe,"A",{href:!0});var rjr=s(nS);cJe=r(rjr,"Wav2Vec2CTCTokenizer"),rjr.forEach(t),fJe=r(yMe," (Hubert model)"),yMe.forEach(t),mJe=i(w),ms=n(w,"LI",{});var P8=s(ms);$Z=n(P8,"STRONG",{});var tjr=s($Z);gJe=r(tjr,"ibert"),tjr.forEach(t),hJe=r(P8," \u2014 "),sS=n(P8,"A",{href:!0});var ajr=s(sS);pJe=r(ajr,"RobertaTokenizer"),ajr.forEach(t),_Je=r(P8," or "),lS=n(P8,"A",{href:!0});var njr=s(lS);uJe=r(njr,"RobertaTokenizerFast"),njr.forEach(t),bJe=r(P8," (I-BERT model)"),P8.forEach(t),FJe=i(w),gs=n(w,"LI",{});var $8=s(gs);IZ=n($8,"STRONG",{});var sjr=s(IZ);vJe=r(sjr,"layoutlm"),sjr.forEach(t),TJe=r($8," \u2014 "),iS=n($8,"A",{href:!0});var ljr=s(iS);MJe=r(ljr,"LayoutLMTokenizer"),ljr.forEach(t),EJe=r($8," or "),dS=n($8,"A",{href:!0});var ijr=s(dS);CJe=r(ijr,"LayoutLMTokenizerFast"),ijr.forEach(t),wJe=r($8," (LayoutLM model)"),$8.forEach(t),AJe=i(w),hs=n(w,"LI",{});var I8=s(hs);qZ=n(I8,"STRONG",{});var djr=s(qZ);yJe=r(djr,"layoutlmv2"),djr.forEach(t),LJe=r(I8," \u2014 "),cS=n(I8,"A",{href:!0});var cjr=s(cS);xJe=r(cjr,"LayoutLMv2Tokenizer"),cjr.forEach(t),kJe=r(I8," or "),fS=n(I8,"A",{href:!0});var fjr=s(fS);SJe=r(fjr,"LayoutLMv2TokenizerFast"),fjr.forEach(t),RJe=r(I8," (LayoutLMv2 model)"),I8.forEach(t),BJe=i(w),ps=n(w,"LI",{});var q8=s(ps);NZ=n(q8,"STRONG",{});var mjr=s(NZ);PJe=r(mjr,"layoutxlm"),mjr.forEach(t),$Je=r(q8," \u2014 "),mS=n(q8,"A",{href:!0});var gjr=s(mS);IJe=r(gjr,"LayoutXLMTokenizer"),gjr.forEach(t),qJe=r(q8," or "),gS=n(q8,"A",{href:!0});var hjr=s(gS);NJe=r(hjr,"LayoutXLMTokenizerFast"),hjr.forEach(t),jJe=r(q8," (LayoutXLM model)"),q8.forEach(t),DJe=i(w),_s=n(w,"LI",{});var N8=s(_s);jZ=n(N8,"STRONG",{});var pjr=s(jZ);GJe=r(pjr,"led"),pjr.forEach(t),OJe=r(N8," \u2014 "),hS=n(N8,"A",{href:!0});var _jr=s(hS);VJe=r(_jr,"LEDTokenizer"),_jr.forEach(t),XJe=r(N8," or "),pS=n(N8,"A",{href:!0});var ujr=s(pS);zJe=r(ujr,"LEDTokenizerFast"),ujr.forEach(t),QJe=r(N8," (LED model)"),N8.forEach(t),WJe=i(w),us=n(w,"LI",{});var j8=s(us);DZ=n(j8,"STRONG",{});var bjr=s(DZ);HJe=r(bjr,"longformer"),bjr.forEach(t),UJe=r(j8," \u2014 "),_S=n(j8,"A",{href:!0});var Fjr=s(_S);JJe=r(Fjr,"LongformerTokenizer"),Fjr.forEach(t),YJe=r(j8," or "),uS=n(j8,"A",{href:!0});var vjr=s(uS);KJe=r(vjr,"LongformerTokenizerFast"),vjr.forEach(t),ZJe=r(j8," (Longformer model)"),j8.forEach(t),eYe=i(w),Yg=n(w,"LI",{});var LMe=s(Yg);GZ=n(LMe,"STRONG",{});var Tjr=s(GZ);oYe=r(Tjr,"luke"),Tjr.forEach(t),rYe=r(LMe," \u2014 "),bS=n(LMe,"A",{href:!0});var Mjr=s(bS);tYe=r(Mjr,"LukeTokenizer"),Mjr.forEach(t),aYe=r(LMe," (LUKE model)"),LMe.forEach(t),nYe=i(w),bs=n(w,"LI",{});var D8=s(bs);OZ=n(D8,"STRONG",{});var Ejr=s(OZ);sYe=r(Ejr,"lxmert"),Ejr.forEach(t),lYe=r(D8," \u2014 "),FS=n(D8,"A",{href:!0});var Cjr=s(FS);iYe=r(Cjr,"LxmertTokenizer"),Cjr.forEach(t),dYe=r(D8," or "),vS=n(D8,"A",{href:!0});var wjr=s(vS);cYe=r(wjr,"LxmertTokenizerFast"),wjr.forEach(t),fYe=r(D8," (LXMERT model)"),D8.forEach(t),mYe=i(w),Kg=n(w,"LI",{});var xMe=s(Kg);VZ=n(xMe,"STRONG",{});var Ajr=s(VZ);gYe=r(Ajr,"m2m_100"),Ajr.forEach(t),hYe=r(xMe," \u2014 "),TS=n(xMe,"A",{href:!0});var yjr=s(TS);pYe=r(yjr,"M2M100Tokenizer"),yjr.forEach(t),_Ye=r(xMe," (M2M100 model)"),xMe.forEach(t),uYe=i(w),Zg=n(w,"LI",{});var kMe=s(Zg);XZ=n(kMe,"STRONG",{});var Ljr=s(XZ);bYe=r(Ljr,"marian"),Ljr.forEach(t),FYe=r(kMe," \u2014 "),MS=n(kMe,"A",{href:!0});var xjr=s(MS);vYe=r(xjr,"MarianTokenizer"),xjr.forEach(t),TYe=r(kMe," (Marian model)"),kMe.forEach(t),MYe=i(w),Fs=n(w,"LI",{});var G8=s(Fs);zZ=n(G8,"STRONG",{});var kjr=s(zZ);EYe=r(kjr,"mbart"),kjr.forEach(t),CYe=r(G8," \u2014 "),ES=n(G8,"A",{href:!0});var Sjr=s(ES);wYe=r(Sjr,"MBartTokenizer"),Sjr.forEach(t),AYe=r(G8," or "),CS=n(G8,"A",{href:!0});var Rjr=s(CS);yYe=r(Rjr,"MBartTokenizerFast"),Rjr.forEach(t),LYe=r(G8," (mBART model)"),G8.forEach(t),xYe=i(w),vs=n(w,"LI",{});var O8=s(vs);QZ=n(O8,"STRONG",{});var Bjr=s(QZ);kYe=r(Bjr,"mbart50"),Bjr.forEach(t),SYe=r(O8," \u2014 "),wS=n(O8,"A",{href:!0});var Pjr=s(wS);RYe=r(Pjr,"MBart50Tokenizer"),Pjr.forEach(t),BYe=r(O8," or "),AS=n(O8,"A",{href:!0});var $jr=s(AS);PYe=r($jr,"MBart50TokenizerFast"),$jr.forEach(t),$Ye=r(O8," (mBART-50 model)"),O8.forEach(t),IYe=i(w),eh=n(w,"LI",{});var SMe=s(eh);WZ=n(SMe,"STRONG",{});var Ijr=s(WZ);qYe=r(Ijr,"mluke"),Ijr.forEach(t),NYe=r(SMe," \u2014 "),yS=n(SMe,"A",{href:!0});var qjr=s(yS);jYe=r(qjr,"MLukeTokenizer"),qjr.forEach(t),DYe=r(SMe," (mLUKE model)"),SMe.forEach(t),GYe=i(w),Ts=n(w,"LI",{});var V8=s(Ts);HZ=n(V8,"STRONG",{});var Njr=s(HZ);OYe=r(Njr,"mobilebert"),Njr.forEach(t),VYe=r(V8," \u2014 "),LS=n(V8,"A",{href:!0});var jjr=s(LS);XYe=r(jjr,"MobileBertTokenizer"),jjr.forEach(t),zYe=r(V8," or "),xS=n(V8,"A",{href:!0});var Djr=s(xS);QYe=r(Djr,"MobileBertTokenizerFast"),Djr.forEach(t),WYe=r(V8," (MobileBERT model)"),V8.forEach(t),HYe=i(w),Ms=n(w,"LI",{});var X8=s(Ms);UZ=n(X8,"STRONG",{});var Gjr=s(UZ);UYe=r(Gjr,"mpnet"),Gjr.forEach(t),JYe=r(X8," \u2014 "),kS=n(X8,"A",{href:!0});var Ojr=s(kS);YYe=r(Ojr,"MPNetTokenizer"),Ojr.forEach(t),KYe=r(X8," or "),SS=n(X8,"A",{href:!0});var Vjr=s(SS);ZYe=r(Vjr,"MPNetTokenizerFast"),Vjr.forEach(t),eKe=r(X8," (MPNet model)"),X8.forEach(t),oKe=i(w),Es=n(w,"LI",{});var z8=s(Es);JZ=n(z8,"STRONG",{});var Xjr=s(JZ);rKe=r(Xjr,"mt5"),Xjr.forEach(t),tKe=r(z8," \u2014 "),RS=n(z8,"A",{href:!0});var zjr=s(RS);aKe=r(zjr,"MT5Tokenizer"),zjr.forEach(t),nKe=r(z8," or "),BS=n(z8,"A",{href:!0});var Qjr=s(BS);sKe=r(Qjr,"MT5TokenizerFast"),Qjr.forEach(t),lKe=r(z8," (mT5 model)"),z8.forEach(t),iKe=i(w),Cs=n(w,"LI",{});var Q8=s(Cs);YZ=n(Q8,"STRONG",{});var Wjr=s(YZ);dKe=r(Wjr,"openai-gpt"),Wjr.forEach(t),cKe=r(Q8," \u2014 "),PS=n(Q8,"A",{href:!0});var Hjr=s(PS);fKe=r(Hjr,"OpenAIGPTTokenizer"),Hjr.forEach(t),mKe=r(Q8," or "),$S=n(Q8,"A",{href:!0});var Ujr=s($S);gKe=r(Ujr,"OpenAIGPTTokenizerFast"),Ujr.forEach(t),hKe=r(Q8," (OpenAI GPT model)"),Q8.forEach(t),pKe=i(w),ws=n(w,"LI",{});var W8=s(ws);KZ=n(W8,"STRONG",{});var Jjr=s(KZ);_Ke=r(Jjr,"pegasus"),Jjr.forEach(t),uKe=r(W8," \u2014 "),IS=n(W8,"A",{href:!0});var Yjr=s(IS);bKe=r(Yjr,"PegasusTokenizer"),Yjr.forEach(t),FKe=r(W8," or "),qS=n(W8,"A",{href:!0});var Kjr=s(qS);vKe=r(Kjr,"PegasusTokenizerFast"),Kjr.forEach(t),TKe=r(W8," (Pegasus model)"),W8.forEach(t),MKe=i(w),oh=n(w,"LI",{});var RMe=s(oh);ZZ=n(RMe,"STRONG",{});var Zjr=s(ZZ);EKe=r(Zjr,"perceiver"),Zjr.forEach(t),CKe=r(RMe," \u2014 "),NS=n(RMe,"A",{href:!0});var eDr=s(NS);wKe=r(eDr,"PerceiverTokenizer"),eDr.forEach(t),AKe=r(RMe," (Perceiver model)"),RMe.forEach(t),yKe=i(w),rh=n(w,"LI",{});var BMe=s(rh);eee=n(BMe,"STRONG",{});var oDr=s(eee);LKe=r(oDr,"phobert"),oDr.forEach(t),xKe=r(BMe," \u2014 "),jS=n(BMe,"A",{href:!0});var rDr=s(jS);kKe=r(rDr,"PhobertTokenizer"),rDr.forEach(t),SKe=r(BMe," (PhoBERT model)"),BMe.forEach(t),RKe=i(w),th=n(w,"LI",{});var PMe=s(th);oee=n(PMe,"STRONG",{});var tDr=s(oee);BKe=r(tDr,"plbart"),tDr.forEach(t),PKe=r(PMe," \u2014 "),DS=n(PMe,"A",{href:!0});var aDr=s(DS);$Ke=r(aDr,"PLBartTokenizer"),aDr.forEach(t),IKe=r(PMe," (PLBart model)"),PMe.forEach(t),qKe=i(w),ah=n(w,"LI",{});var $Me=s(ah);ree=n($Me,"STRONG",{});var nDr=s(ree);NKe=r(nDr,"prophetnet"),nDr.forEach(t),jKe=r($Me," \u2014 "),GS=n($Me,"A",{href:!0});var sDr=s(GS);DKe=r(sDr,"ProphetNetTokenizer"),sDr.forEach(t),GKe=r($Me," (ProphetNet model)"),$Me.forEach(t),OKe=i(w),As=n(w,"LI",{});var H8=s(As);tee=n(H8,"STRONG",{});var lDr=s(tee);VKe=r(lDr,"qdqbert"),lDr.forEach(t),XKe=r(H8," \u2014 "),OS=n(H8,"A",{href:!0});var iDr=s(OS);zKe=r(iDr,"BertTokenizer"),iDr.forEach(t),QKe=r(H8," or "),VS=n(H8,"A",{href:!0});var dDr=s(VS);WKe=r(dDr,"BertTokenizerFast"),dDr.forEach(t),HKe=r(H8," (QDQBert model)"),H8.forEach(t),UKe=i(w),nh=n(w,"LI",{});var IMe=s(nh);aee=n(IMe,"STRONG",{});var cDr=s(aee);JKe=r(cDr,"rag"),cDr.forEach(t),YKe=r(IMe," \u2014 "),XS=n(IMe,"A",{href:!0});var fDr=s(XS);KKe=r(fDr,"RagTokenizer"),fDr.forEach(t),ZKe=r(IMe," (RAG model)"),IMe.forEach(t),eZe=i(w),ys=n(w,"LI",{});var U8=s(ys);nee=n(U8,"STRONG",{});var mDr=s(nee);oZe=r(mDr,"realm"),mDr.forEach(t),rZe=r(U8," \u2014 "),zS=n(U8,"A",{href:!0});var gDr=s(zS);tZe=r(gDr,"RealmTokenizer"),gDr.forEach(t),aZe=r(U8," or "),QS=n(U8,"A",{href:!0});var hDr=s(QS);nZe=r(hDr,"RealmTokenizerFast"),hDr.forEach(t),sZe=r(U8," (Realm model)"),U8.forEach(t),lZe=i(w),Ls=n(w,"LI",{});var J8=s(Ls);see=n(J8,"STRONG",{});var pDr=s(see);iZe=r(pDr,"reformer"),pDr.forEach(t),dZe=r(J8," \u2014 "),WS=n(J8,"A",{href:!0});var _Dr=s(WS);cZe=r(_Dr,"ReformerTokenizer"),_Dr.forEach(t),fZe=r(J8," or "),HS=n(J8,"A",{href:!0});var uDr=s(HS);mZe=r(uDr,"ReformerTokenizerFast"),uDr.forEach(t),gZe=r(J8," (Reformer model)"),J8.forEach(t),hZe=i(w),xs=n(w,"LI",{});var Y8=s(xs);lee=n(Y8,"STRONG",{});var bDr=s(lee);pZe=r(bDr,"rembert"),bDr.forEach(t),_Ze=r(Y8," \u2014 "),US=n(Y8,"A",{href:!0});var FDr=s(US);uZe=r(FDr,"RemBertTokenizer"),FDr.forEach(t),bZe=r(Y8," or "),JS=n(Y8,"A",{href:!0});var vDr=s(JS);FZe=r(vDr,"RemBertTokenizerFast"),vDr.forEach(t),vZe=r(Y8," (RemBERT model)"),Y8.forEach(t),TZe=i(w),ks=n(w,"LI",{});var K8=s(ks);iee=n(K8,"STRONG",{});var TDr=s(iee);MZe=r(TDr,"retribert"),TDr.forEach(t),EZe=r(K8," \u2014 "),YS=n(K8,"A",{href:!0});var MDr=s(YS);CZe=r(MDr,"RetriBertTokenizer"),MDr.forEach(t),wZe=r(K8," or "),KS=n(K8,"A",{href:!0});var EDr=s(KS);AZe=r(EDr,"RetriBertTokenizerFast"),EDr.forEach(t),yZe=r(K8," (RetriBERT model)"),K8.forEach(t),LZe=i(w),Ss=n(w,"LI",{});var Z8=s(Ss);dee=n(Z8,"STRONG",{});var CDr=s(dee);xZe=r(CDr,"roberta"),CDr.forEach(t),kZe=r(Z8," \u2014 "),ZS=n(Z8,"A",{href:!0});var wDr=s(ZS);SZe=r(wDr,"RobertaTokenizer"),wDr.forEach(t),RZe=r(Z8," or "),eR=n(Z8,"A",{href:!0});var ADr=s(eR);BZe=r(ADr,"RobertaTokenizerFast"),ADr.forEach(t),PZe=r(Z8," (RoBERTa model)"),Z8.forEach(t),$Ze=i(w),Rs=n(w,"LI",{});var e9=s(Rs);cee=n(e9,"STRONG",{});var yDr=s(cee);IZe=r(yDr,"roformer"),yDr.forEach(t),qZe=r(e9," \u2014 "),oR=n(e9,"A",{href:!0});var LDr=s(oR);NZe=r(LDr,"RoFormerTokenizer"),LDr.forEach(t),jZe=r(e9," or "),rR=n(e9,"A",{href:!0});var xDr=s(rR);DZe=r(xDr,"RoFormerTokenizerFast"),xDr.forEach(t),GZe=r(e9," (RoFormer model)"),e9.forEach(t),OZe=i(w),sh=n(w,"LI",{});var qMe=s(sh);fee=n(qMe,"STRONG",{});var kDr=s(fee);VZe=r(kDr,"speech_to_text"),kDr.forEach(t),XZe=r(qMe," \u2014 "),tR=n(qMe,"A",{href:!0});var SDr=s(tR);zZe=r(SDr,"Speech2TextTokenizer"),SDr.forEach(t),QZe=r(qMe," (Speech2Text model)"),qMe.forEach(t),WZe=i(w),lh=n(w,"LI",{});var NMe=s(lh);mee=n(NMe,"STRONG",{});var RDr=s(mee);HZe=r(RDr,"speech_to_text_2"),RDr.forEach(t),UZe=r(NMe," \u2014 "),aR=n(NMe,"A",{href:!0});var BDr=s(aR);JZe=r(BDr,"Speech2Text2Tokenizer"),BDr.forEach(t),YZe=r(NMe," (Speech2Text2 model)"),NMe.forEach(t),KZe=i(w),Bs=n(w,"LI",{});var o9=s(Bs);gee=n(o9,"STRONG",{});var PDr=s(gee);ZZe=r(PDr,"splinter"),PDr.forEach(t),eeo=r(o9," \u2014 "),nR=n(o9,"A",{href:!0});var $Dr=s(nR);oeo=r($Dr,"SplinterTokenizer"),$Dr.forEach(t),reo=r(o9," or "),sR=n(o9,"A",{href:!0});var IDr=s(sR);teo=r(IDr,"SplinterTokenizerFast"),IDr.forEach(t),aeo=r(o9," (Splinter model)"),o9.forEach(t),neo=i(w),Ps=n(w,"LI",{});var r9=s(Ps);hee=n(r9,"STRONG",{});var qDr=s(hee);seo=r(qDr,"squeezebert"),qDr.forEach(t),leo=r(r9," \u2014 "),lR=n(r9,"A",{href:!0});var NDr=s(lR);ieo=r(NDr,"SqueezeBertTokenizer"),NDr.forEach(t),deo=r(r9," or "),iR=n(r9,"A",{href:!0});var jDr=s(iR);ceo=r(jDr,"SqueezeBertTokenizerFast"),jDr.forEach(t),feo=r(r9," (SqueezeBERT model)"),r9.forEach(t),meo=i(w),$s=n(w,"LI",{});var t9=s($s);pee=n(t9,"STRONG",{});var DDr=s(pee);geo=r(DDr,"t5"),DDr.forEach(t),heo=r(t9," \u2014 "),dR=n(t9,"A",{href:!0});var GDr=s(dR);peo=r(GDr,"T5Tokenizer"),GDr.forEach(t),_eo=r(t9," or "),cR=n(t9,"A",{href:!0});var ODr=s(cR);ueo=r(ODr,"T5TokenizerFast"),ODr.forEach(t),beo=r(t9," (T5 model)"),t9.forEach(t),Feo=i(w),ih=n(w,"LI",{});var jMe=s(ih);_ee=n(jMe,"STRONG",{});var VDr=s(_ee);veo=r(VDr,"tapas"),VDr.forEach(t),Teo=r(jMe," \u2014 "),fR=n(jMe,"A",{href:!0});var XDr=s(fR);Meo=r(XDr,"TapasTokenizer"),XDr.forEach(t),Eeo=r(jMe," (TAPAS model)"),jMe.forEach(t),Ceo=i(w),dh=n(w,"LI",{});var DMe=s(dh);uee=n(DMe,"STRONG",{});var zDr=s(uee);weo=r(zDr,"transfo-xl"),zDr.forEach(t),Aeo=r(DMe," \u2014 "),mR=n(DMe,"A",{href:!0});var QDr=s(mR);yeo=r(QDr,"TransfoXLTokenizer"),QDr.forEach(t),Leo=r(DMe," (Transformer-XL model)"),DMe.forEach(t),xeo=i(w),ch=n(w,"LI",{});var GMe=s(ch);bee=n(GMe,"STRONG",{});var WDr=s(bee);keo=r(WDr,"wav2vec2"),WDr.forEach(t),Seo=r(GMe," \u2014 "),gR=n(GMe,"A",{href:!0});var HDr=s(gR);Reo=r(HDr,"Wav2Vec2CTCTokenizer"),HDr.forEach(t),Beo=r(GMe," (Wav2Vec2 model)"),GMe.forEach(t),Peo=i(w),fh=n(w,"LI",{});var OMe=s(fh);Fee=n(OMe,"STRONG",{});var UDr=s(Fee);$eo=r(UDr,"wav2vec2_phoneme"),UDr.forEach(t),Ieo=r(OMe," \u2014 "),hR=n(OMe,"A",{href:!0});var JDr=s(hR);qeo=r(JDr,"Wav2Vec2PhonemeCTCTokenizer"),JDr.forEach(t),Neo=r(OMe," (Wav2Vec2Phoneme model)"),OMe.forEach(t),jeo=i(w),Is=n(w,"LI",{});var a9=s(Is);vee=n(a9,"STRONG",{});var YDr=s(vee);Deo=r(YDr,"xglm"),YDr.forEach(t),Geo=r(a9," \u2014 "),pR=n(a9,"A",{href:!0});var KDr=s(pR);Oeo=r(KDr,"XGLMTokenizer"),KDr.forEach(t),Veo=r(a9," or "),_R=n(a9,"A",{href:!0});var ZDr=s(_R);Xeo=r(ZDr,"XGLMTokenizerFast"),ZDr.forEach(t),zeo=r(a9," (XGLM model)"),a9.forEach(t),Qeo=i(w),mh=n(w,"LI",{});var VMe=s(mh);Tee=n(VMe,"STRONG",{});var eGr=s(Tee);Weo=r(eGr,"xlm"),eGr.forEach(t),Heo=r(VMe," \u2014 "),uR=n(VMe,"A",{href:!0});var oGr=s(uR);Ueo=r(oGr,"XLMTokenizer"),oGr.forEach(t),Jeo=r(VMe," (XLM model)"),VMe.forEach(t),Yeo=i(w),gh=n(w,"LI",{});var XMe=s(gh);Mee=n(XMe,"STRONG",{});var rGr=s(Mee);Keo=r(rGr,"xlm-prophetnet"),rGr.forEach(t),Zeo=r(XMe," \u2014 "),bR=n(XMe,"A",{href:!0});var tGr=s(bR);eoo=r(tGr,"XLMProphetNetTokenizer"),tGr.forEach(t),ooo=r(XMe," (XLMProphetNet model)"),XMe.forEach(t),roo=i(w),qs=n(w,"LI",{});var n9=s(qs);Eee=n(n9,"STRONG",{});var aGr=s(Eee);too=r(aGr,"xlm-roberta"),aGr.forEach(t),aoo=r(n9," \u2014 "),FR=n(n9,"A",{href:!0});var nGr=s(FR);noo=r(nGr,"XLMRobertaTokenizer"),nGr.forEach(t),soo=r(n9," or "),vR=n(n9,"A",{href:!0});var sGr=s(vR);loo=r(sGr,"XLMRobertaTokenizerFast"),sGr.forEach(t),ioo=r(n9," (XLM-RoBERTa model)"),n9.forEach(t),doo=i(w),Ns=n(w,"LI",{});var s9=s(Ns);Cee=n(s9,"STRONG",{});var lGr=s(Cee);coo=r(lGr,"xlnet"),lGr.forEach(t),foo=r(s9," \u2014 "),TR=n(s9,"A",{href:!0});var iGr=s(TR);moo=r(iGr,"XLNetTokenizer"),iGr.forEach(t),goo=r(s9," or "),MR=n(s9,"A",{href:!0});var dGr=s(MR);hoo=r(dGr,"XLNetTokenizerFast"),dGr.forEach(t),poo=r(s9," (XLNet model)"),s9.forEach(t),w.forEach(t),_oo=i(ha),wee=n(ha,"P",{});var cGr=s(wee);uoo=r(cGr,"Examples:"),cGr.forEach(t),boo=i(ha),m(IC.$$.fragment,ha),ha.forEach(t),Foo=i(Vs),hh=n(Vs,"DIV",{class:!0});var iPe=s(hh);m(qC.$$.fragment,iPe),voo=i(iPe),Aee=n(iPe,"P",{});var fGr=s(Aee);Too=r(fGr,"Register a new tokenizer in this mapping."),fGr.forEach(t),iPe.forEach(t),Vs.forEach(t),aRe=i(c),Wi=n(c,"H2",{class:!0});var dPe=s(Wi);ph=n(dPe,"A",{id:!0,class:!0,href:!0});var mGr=s(ph);yee=n(mGr,"SPAN",{});var gGr=s(yee);m(NC.$$.fragment,gGr),gGr.forEach(t),mGr.forEach(t),Moo=i(dPe),Lee=n(dPe,"SPAN",{});var hGr=s(Lee);Eoo=r(hGr,"AutoFeatureExtractor"),hGr.forEach(t),dPe.forEach(t),nRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(jC.$$.fragment,Xs),Coo=i(Xs),DC=n(Xs,"P",{});var cPe=s(DC);woo=r(cPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ER=n(cPe,"A",{href:!0});var pGr=s(ER);Aoo=r(pGr,"AutoFeatureExtractor.from_pretrained()"),pGr.forEach(t),yoo=r(cPe," class method."),cPe.forEach(t),Loo=i(Xs),GC=n(Xs,"P",{});var fPe=s(GC);xoo=r(fPe,"This class cannot be instantiated directly using "),xee=n(fPe,"CODE",{});var _Gr=s(xee);koo=r(_Gr,"__init__()"),_Gr.forEach(t),Soo=r(fPe," (throws an error)."),fPe.forEach(t),Roo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(OC.$$.fragment,Nt),Boo=i(Nt),kee=n(Nt,"P",{});var uGr=s(kee);Poo=r(uGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uGr.forEach(t),$oo=i(Nt),Va=n(Nt,"P",{});var TE=s(Va);Ioo=r(TE,"The feature extractor class to instantiate is selected based on the "),See=n(TE,"CODE",{});var bGr=s(See);qoo=r(bGr,"model_type"),bGr.forEach(t),Noo=r(TE,` property of the config object
(either passed as an argument or loaded from `),Ree=n(TE,"CODE",{});var FGr=s(Ree);joo=r(FGr,"pretrained_model_name_or_path"),FGr.forEach(t),Doo=r(TE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bee=n(TE,"CODE",{});var vGr=s(Bee);Goo=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),Ooo=r(TE,":"),TE.forEach(t),Voo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);_h=n(ne,"LI",{});var zMe=s(_h);Pee=n(zMe,"STRONG",{});var TGr=s(Pee);Xoo=r(TGr,"beit"),TGr.forEach(t),zoo=r(zMe," \u2014 "),CR=n(zMe,"A",{href:!0});var MGr=s(CR);Qoo=r(MGr,"BeitFeatureExtractor"),MGr.forEach(t),Woo=r(zMe," (BEiT model)"),zMe.forEach(t),Hoo=i(ne),uh=n(ne,"LI",{});var QMe=s(uh);$ee=n(QMe,"STRONG",{});var EGr=s($ee);Uoo=r(EGr,"clip"),EGr.forEach(t),Joo=r(QMe," \u2014 "),wR=n(QMe,"A",{href:!0});var CGr=s(wR);Yoo=r(CGr,"CLIPFeatureExtractor"),CGr.forEach(t),Koo=r(QMe," (CLIP model)"),QMe.forEach(t),Zoo=i(ne),bh=n(ne,"LI",{});var WMe=s(bh);Iee=n(WMe,"STRONG",{});var wGr=s(Iee);ero=r(wGr,"convnext"),wGr.forEach(t),oro=r(WMe," \u2014 "),AR=n(WMe,"A",{href:!0});var AGr=s(AR);rro=r(AGr,"ConvNextFeatureExtractor"),AGr.forEach(t),tro=r(WMe," (ConvNext model)"),WMe.forEach(t),aro=i(ne),Fh=n(ne,"LI",{});var HMe=s(Fh);qee=n(HMe,"STRONG",{});var yGr=s(qee);nro=r(yGr,"deit"),yGr.forEach(t),sro=r(HMe," \u2014 "),yR=n(HMe,"A",{href:!0});var LGr=s(yR);lro=r(LGr,"DeiTFeatureExtractor"),LGr.forEach(t),iro=r(HMe," (DeiT model)"),HMe.forEach(t),dro=i(ne),vh=n(ne,"LI",{});var UMe=s(vh);Nee=n(UMe,"STRONG",{});var xGr=s(Nee);cro=r(xGr,"detr"),xGr.forEach(t),fro=r(UMe," \u2014 "),LR=n(UMe,"A",{href:!0});var kGr=s(LR);mro=r(kGr,"DetrFeatureExtractor"),kGr.forEach(t),gro=r(UMe," (DETR model)"),UMe.forEach(t),hro=i(ne),Th=n(ne,"LI",{});var JMe=s(Th);jee=n(JMe,"STRONG",{});var SGr=s(jee);pro=r(SGr,"hubert"),SGr.forEach(t),_ro=r(JMe," \u2014 "),xR=n(JMe,"A",{href:!0});var RGr=s(xR);uro=r(RGr,"Wav2Vec2FeatureExtractor"),RGr.forEach(t),bro=r(JMe," (Hubert model)"),JMe.forEach(t),Fro=i(ne),Mh=n(ne,"LI",{});var YMe=s(Mh);Dee=n(YMe,"STRONG",{});var BGr=s(Dee);vro=r(BGr,"layoutlmv2"),BGr.forEach(t),Tro=r(YMe," \u2014 "),kR=n(YMe,"A",{href:!0});var PGr=s(kR);Mro=r(PGr,"LayoutLMv2FeatureExtractor"),PGr.forEach(t),Ero=r(YMe," (LayoutLMv2 model)"),YMe.forEach(t),Cro=i(ne),Eh=n(ne,"LI",{});var KMe=s(Eh);Gee=n(KMe,"STRONG",{});var $Gr=s(Gee);wro=r($Gr,"maskformer"),$Gr.forEach(t),Aro=r(KMe," \u2014 "),SR=n(KMe,"A",{href:!0});var IGr=s(SR);yro=r(IGr,"MaskFormerFeatureExtractor"),IGr.forEach(t),Lro=r(KMe," (MaskFormer model)"),KMe.forEach(t),xro=i(ne),Ch=n(ne,"LI",{});var ZMe=s(Ch);Oee=n(ZMe,"STRONG",{});var qGr=s(Oee);kro=r(qGr,"perceiver"),qGr.forEach(t),Sro=r(ZMe," \u2014 "),RR=n(ZMe,"A",{href:!0});var NGr=s(RR);Rro=r(NGr,"PerceiverFeatureExtractor"),NGr.forEach(t),Bro=r(ZMe," (Perceiver model)"),ZMe.forEach(t),Pro=i(ne),wh=n(ne,"LI",{});var e4e=s(wh);Vee=n(e4e,"STRONG",{});var jGr=s(Vee);$ro=r(jGr,"poolformer"),jGr.forEach(t),Iro=r(e4e," \u2014 "),BR=n(e4e,"A",{href:!0});var DGr=s(BR);qro=r(DGr,"PoolFormerFeatureExtractor"),DGr.forEach(t),Nro=r(e4e," (PoolFormer model)"),e4e.forEach(t),jro=i(ne),Ah=n(ne,"LI",{});var o4e=s(Ah);Xee=n(o4e,"STRONG",{});var GGr=s(Xee);Dro=r(GGr,"resnet"),GGr.forEach(t),Gro=r(o4e," \u2014 "),PR=n(o4e,"A",{href:!0});var OGr=s(PR);Oro=r(OGr,"ConvNextFeatureExtractor"),OGr.forEach(t),Vro=r(o4e," (ResNet model)"),o4e.forEach(t),Xro=i(ne),yh=n(ne,"LI",{});var r4e=s(yh);zee=n(r4e,"STRONG",{});var VGr=s(zee);zro=r(VGr,"segformer"),VGr.forEach(t),Qro=r(r4e," \u2014 "),$R=n(r4e,"A",{href:!0});var XGr=s($R);Wro=r(XGr,"SegformerFeatureExtractor"),XGr.forEach(t),Hro=r(r4e," (SegFormer model)"),r4e.forEach(t),Uro=i(ne),Lh=n(ne,"LI",{});var t4e=s(Lh);Qee=n(t4e,"STRONG",{});var zGr=s(Qee);Jro=r(zGr,"speech_to_text"),zGr.forEach(t),Yro=r(t4e," \u2014 "),IR=n(t4e,"A",{href:!0});var QGr=s(IR);Kro=r(QGr,"Speech2TextFeatureExtractor"),QGr.forEach(t),Zro=r(t4e," (Speech2Text model)"),t4e.forEach(t),eto=i(ne),xh=n(ne,"LI",{});var a4e=s(xh);Wee=n(a4e,"STRONG",{});var WGr=s(Wee);oto=r(WGr,"swin"),WGr.forEach(t),rto=r(a4e," \u2014 "),qR=n(a4e,"A",{href:!0});var HGr=s(qR);tto=r(HGr,"ViTFeatureExtractor"),HGr.forEach(t),ato=r(a4e," (Swin model)"),a4e.forEach(t),nto=i(ne),kh=n(ne,"LI",{});var n4e=s(kh);Hee=n(n4e,"STRONG",{});var UGr=s(Hee);sto=r(UGr,"van"),UGr.forEach(t),lto=r(n4e," \u2014 "),NR=n(n4e,"A",{href:!0});var JGr=s(NR);ito=r(JGr,"ConvNextFeatureExtractor"),JGr.forEach(t),dto=r(n4e," (VAN model)"),n4e.forEach(t),cto=i(ne),Sh=n(ne,"LI",{});var s4e=s(Sh);Uee=n(s4e,"STRONG",{});var YGr=s(Uee);fto=r(YGr,"vit"),YGr.forEach(t),mto=r(s4e," \u2014 "),jR=n(s4e,"A",{href:!0});var KGr=s(jR);gto=r(KGr,"ViTFeatureExtractor"),KGr.forEach(t),hto=r(s4e," (ViT model)"),s4e.forEach(t),pto=i(ne),Rh=n(ne,"LI",{});var l4e=s(Rh);Jee=n(l4e,"STRONG",{});var ZGr=s(Jee);_to=r(ZGr,"vit_mae"),ZGr.forEach(t),uto=r(l4e," \u2014 "),DR=n(l4e,"A",{href:!0});var eOr=s(DR);bto=r(eOr,"ViTFeatureExtractor"),eOr.forEach(t),Fto=r(l4e," (ViTMAE model)"),l4e.forEach(t),vto=i(ne),Bh=n(ne,"LI",{});var i4e=s(Bh);Yee=n(i4e,"STRONG",{});var oOr=s(Yee);Tto=r(oOr,"wav2vec2"),oOr.forEach(t),Mto=r(i4e," \u2014 "),GR=n(i4e,"A",{href:!0});var rOr=s(GR);Eto=r(rOr,"Wav2Vec2FeatureExtractor"),rOr.forEach(t),Cto=r(i4e," (Wav2Vec2 model)"),i4e.forEach(t),ne.forEach(t),wto=i(Nt),m(Ph.$$.fragment,Nt),Ato=i(Nt),Kee=n(Nt,"P",{});var tOr=s(Kee);yto=r(tOr,"Examples:"),tOr.forEach(t),Lto=i(Nt),m(VC.$$.fragment,Nt),Nt.forEach(t),xto=i(Xs),$h=n(Xs,"DIV",{class:!0});var mPe=s($h);m(XC.$$.fragment,mPe),kto=i(mPe),Zee=n(mPe,"P",{});var aOr=s(Zee);Sto=r(aOr,"Register a new feature extractor for this class."),aOr.forEach(t),mPe.forEach(t),Xs.forEach(t),sRe=i(c),Hi=n(c,"H2",{class:!0});var gPe=s(Hi);Ih=n(gPe,"A",{id:!0,class:!0,href:!0});var nOr=s(Ih);eoe=n(nOr,"SPAN",{});var sOr=s(eoe);m(zC.$$.fragment,sOr),sOr.forEach(t),nOr.forEach(t),Rto=i(gPe),ooe=n(gPe,"SPAN",{});var lOr=s(ooe);Bto=r(lOr,"AutoProcessor"),lOr.forEach(t),gPe.forEach(t),lRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(QC.$$.fragment,zs),Pto=i(zs),WC=n(zs,"P",{});var hPe=s(WC);$to=r(hPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),OR=n(hPe,"A",{href:!0});var iOr=s(OR);Ito=r(iOr,"AutoProcessor.from_pretrained()"),iOr.forEach(t),qto=r(hPe," class method."),hPe.forEach(t),Nto=i(zs),HC=n(zs,"P",{});var pPe=s(HC);jto=r(pPe,"This class cannot be instantiated directly using "),roe=n(pPe,"CODE",{});var dOr=s(roe);Dto=r(dOr,"__init__()"),dOr.forEach(t),Gto=r(pPe," (throws an error)."),pPe.forEach(t),Oto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(UC.$$.fragment,jt),Vto=i(jt),toe=n(jt,"P",{});var cOr=s(toe);Xto=r(cOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cOr.forEach(t),zto=i(jt),Ui=n(jt,"P",{});var YH=s(Ui);Qto=r(YH,"The processor class to instantiate is selected based on the "),aoe=n(YH,"CODE",{});var fOr=s(aoe);Wto=r(fOr,"model_type"),fOr.forEach(t),Hto=r(YH,` property of the config object (either
passed as an argument or loaded from `),noe=n(YH,"CODE",{});var mOr=s(noe);Uto=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),Jto=r(YH," if possible):"),YH.forEach(t),Yto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);qh=n(jo,"LI",{});var d4e=s(qh);soe=n(d4e,"STRONG",{});var gOr=s(soe);Kto=r(gOr,"clip"),gOr.forEach(t),Zto=r(d4e," \u2014 "),VR=n(d4e,"A",{href:!0});var hOr=s(VR);eao=r(hOr,"CLIPProcessor"),hOr.forEach(t),oao=r(d4e," (CLIP model)"),d4e.forEach(t),rao=i(jo),Nh=n(jo,"LI",{});var c4e=s(Nh);loe=n(c4e,"STRONG",{});var pOr=s(loe);tao=r(pOr,"layoutlmv2"),pOr.forEach(t),aao=r(c4e," \u2014 "),XR=n(c4e,"A",{href:!0});var _Or=s(XR);nao=r(_Or,"LayoutLMv2Processor"),_Or.forEach(t),sao=r(c4e," (LayoutLMv2 model)"),c4e.forEach(t),lao=i(jo),jh=n(jo,"LI",{});var f4e=s(jh);ioe=n(f4e,"STRONG",{});var uOr=s(ioe);iao=r(uOr,"layoutxlm"),uOr.forEach(t),dao=r(f4e," \u2014 "),zR=n(f4e,"A",{href:!0});var bOr=s(zR);cao=r(bOr,"LayoutXLMProcessor"),bOr.forEach(t),fao=r(f4e," (LayoutXLM model)"),f4e.forEach(t),mao=i(jo),Dh=n(jo,"LI",{});var m4e=s(Dh);doe=n(m4e,"STRONG",{});var FOr=s(doe);gao=r(FOr,"speech_to_text"),FOr.forEach(t),hao=r(m4e," \u2014 "),QR=n(m4e,"A",{href:!0});var vOr=s(QR);pao=r(vOr,"Speech2TextProcessor"),vOr.forEach(t),_ao=r(m4e," (Speech2Text model)"),m4e.forEach(t),uao=i(jo),Gh=n(jo,"LI",{});var g4e=s(Gh);coe=n(g4e,"STRONG",{});var TOr=s(coe);bao=r(TOr,"speech_to_text_2"),TOr.forEach(t),Fao=r(g4e," \u2014 "),WR=n(g4e,"A",{href:!0});var MOr=s(WR);vao=r(MOr,"Speech2Text2Processor"),MOr.forEach(t),Tao=r(g4e," (Speech2Text2 model)"),g4e.forEach(t),Mao=i(jo),Oh=n(jo,"LI",{});var h4e=s(Oh);foe=n(h4e,"STRONG",{});var EOr=s(foe);Eao=r(EOr,"trocr"),EOr.forEach(t),Cao=r(h4e," \u2014 "),HR=n(h4e,"A",{href:!0});var COr=s(HR);wao=r(COr,"TrOCRProcessor"),COr.forEach(t),Aao=r(h4e," (TrOCR model)"),h4e.forEach(t),yao=i(jo),Vh=n(jo,"LI",{});var p4e=s(Vh);moe=n(p4e,"STRONG",{});var wOr=s(moe);Lao=r(wOr,"vision-text-dual-encoder"),wOr.forEach(t),xao=r(p4e," \u2014 "),UR=n(p4e,"A",{href:!0});var AOr=s(UR);kao=r(AOr,"VisionTextDualEncoderProcessor"),AOr.forEach(t),Sao=r(p4e," (VisionTextDualEncoder model)"),p4e.forEach(t),Rao=i(jo),Xh=n(jo,"LI",{});var _4e=s(Xh);goe=n(_4e,"STRONG",{});var yOr=s(goe);Bao=r(yOr,"wav2vec2"),yOr.forEach(t),Pao=r(_4e," \u2014 "),JR=n(_4e,"A",{href:!0});var LOr=s(JR);$ao=r(LOr,"Wav2Vec2Processor"),LOr.forEach(t),Iao=r(_4e," (Wav2Vec2 model)"),_4e.forEach(t),jo.forEach(t),qao=i(jt),m(zh.$$.fragment,jt),Nao=i(jt),hoe=n(jt,"P",{});var xOr=s(hoe);jao=r(xOr,"Examples:"),xOr.forEach(t),Dao=i(jt),m(JC.$$.fragment,jt),jt.forEach(t),Gao=i(zs),Qh=n(zs,"DIV",{class:!0});var _Pe=s(Qh);m(YC.$$.fragment,_Pe),Oao=i(_Pe),poe=n(_Pe,"P",{});var kOr=s(poe);Vao=r(kOr,"Register a new processor for this class."),kOr.forEach(t),_Pe.forEach(t),zs.forEach(t),iRe=i(c),Ji=n(c,"H2",{class:!0});var uPe=s(Ji);Wh=n(uPe,"A",{id:!0,class:!0,href:!0});var SOr=s(Wh);_oe=n(SOr,"SPAN",{});var ROr=s(_oe);m(KC.$$.fragment,ROr),ROr.forEach(t),SOr.forEach(t),Xao=i(uPe),uoe=n(uPe,"SPAN",{});var BOr=s(uoe);zao=r(BOr,"AutoModel"),BOr.forEach(t),uPe.forEach(t),dRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(ZC.$$.fragment,Qs),Qao=i(Qs),Yi=n(Qs,"P",{});var KH=s(Yi);Wao=r(KH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YR=n(KH,"A",{href:!0});var POr=s(YR);Hao=r(POr,"from_pretrained()"),POr.forEach(t),Uao=r(KH," class method or the "),KR=n(KH,"A",{href:!0});var $Or=s(KR);Jao=r($Or,"from_config()"),$Or.forEach(t),Yao=r(KH,` class
method.`),KH.forEach(t),Kao=i(Qs),ew=n(Qs,"P",{});var bPe=s(ew);Zao=r(bPe,"This class cannot be instantiated directly using "),boe=n(bPe,"CODE",{});var IOr=s(boe);eno=r(IOr,"__init__()"),IOr.forEach(t),ono=r(bPe," (throws an error)."),bPe.forEach(t),rno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(ow.$$.fragment,Ws),tno=i(Ws),Foe=n(Ws,"P",{});var qOr=s(Foe);ano=r(qOr,"Instantiates one of the base model classes of the library from a configuration."),qOr.forEach(t),nno=i(Ws),Ki=n(Ws,"P",{});var ZH=s(Ki);sno=r(ZH,`Note:
Loading a model from its configuration file does `),voe=n(ZH,"STRONG",{});var NOr=s(voe);lno=r(NOr,"not"),NOr.forEach(t),ino=r(ZH,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZR=n(ZH,"A",{href:!0});var jOr=s(ZR);dno=r(jOr,"from_pretrained()"),jOr.forEach(t),cno=r(ZH," to load the model weights."),ZH.forEach(t),fno=i(Ws),Toe=n(Ws,"P",{});var DOr=s(Toe);mno=r(DOr,"Examples:"),DOr.forEach(t),gno=i(Ws),m(rw.$$.fragment,Ws),Ws.forEach(t),hno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(tw.$$.fragment,Dt),pno=i(Dt),Moe=n(Dt,"P",{});var GOr=s(Moe);_no=r(GOr,"Instantiate one of the base model classes of the library from a pretrained model."),GOr.forEach(t),uno=i(Dt),Xa=n(Dt,"P",{});var ME=s(Xa);bno=r(ME,"The model class to instantiate is selected based on the "),Eoe=n(ME,"CODE",{});var OOr=s(Eoe);Fno=r(OOr,"model_type"),OOr.forEach(t),vno=r(ME,` property of the config object (either
passed as an argument or loaded from `),Coe=n(ME,"CODE",{});var VOr=s(Coe);Tno=r(VOr,"pretrained_model_name_or_path"),VOr.forEach(t),Mno=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=n(ME,"CODE",{});var XOr=s(woe);Eno=r(XOr,"pretrained_model_name_or_path"),XOr.forEach(t),Cno=r(ME,":"),ME.forEach(t),wno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Hh=n(M,"LI",{});var u4e=s(Hh);Aoe=n(u4e,"STRONG",{});var zOr=s(Aoe);Ano=r(zOr,"albert"),zOr.forEach(t),yno=r(u4e," \u2014 "),eB=n(u4e,"A",{href:!0});var QOr=s(eB);Lno=r(QOr,"AlbertModel"),QOr.forEach(t),xno=r(u4e," (ALBERT model)"),u4e.forEach(t),kno=i(M),Uh=n(M,"LI",{});var b4e=s(Uh);yoe=n(b4e,"STRONG",{});var WOr=s(yoe);Sno=r(WOr,"bart"),WOr.forEach(t),Rno=r(b4e," \u2014 "),oB=n(b4e,"A",{href:!0});var HOr=s(oB);Bno=r(HOr,"BartModel"),HOr.forEach(t),Pno=r(b4e," (BART model)"),b4e.forEach(t),$no=i(M),Jh=n(M,"LI",{});var F4e=s(Jh);Loe=n(F4e,"STRONG",{});var UOr=s(Loe);Ino=r(UOr,"beit"),UOr.forEach(t),qno=r(F4e," \u2014 "),rB=n(F4e,"A",{href:!0});var JOr=s(rB);Nno=r(JOr,"BeitModel"),JOr.forEach(t),jno=r(F4e," (BEiT model)"),F4e.forEach(t),Dno=i(M),Yh=n(M,"LI",{});var v4e=s(Yh);xoe=n(v4e,"STRONG",{});var YOr=s(xoe);Gno=r(YOr,"bert"),YOr.forEach(t),Ono=r(v4e," \u2014 "),tB=n(v4e,"A",{href:!0});var KOr=s(tB);Vno=r(KOr,"BertModel"),KOr.forEach(t),Xno=r(v4e," (BERT model)"),v4e.forEach(t),zno=i(M),Kh=n(M,"LI",{});var T4e=s(Kh);koe=n(T4e,"STRONG",{});var ZOr=s(koe);Qno=r(ZOr,"bert-generation"),ZOr.forEach(t),Wno=r(T4e," \u2014 "),aB=n(T4e,"A",{href:!0});var eVr=s(aB);Hno=r(eVr,"BertGenerationEncoder"),eVr.forEach(t),Uno=r(T4e," (Bert Generation model)"),T4e.forEach(t),Jno=i(M),Zh=n(M,"LI",{});var M4e=s(Zh);Soe=n(M4e,"STRONG",{});var oVr=s(Soe);Yno=r(oVr,"big_bird"),oVr.forEach(t),Kno=r(M4e," \u2014 "),nB=n(M4e,"A",{href:!0});var rVr=s(nB);Zno=r(rVr,"BigBirdModel"),rVr.forEach(t),eso=r(M4e," (BigBird model)"),M4e.forEach(t),oso=i(M),ep=n(M,"LI",{});var E4e=s(ep);Roe=n(E4e,"STRONG",{});var tVr=s(Roe);rso=r(tVr,"bigbird_pegasus"),tVr.forEach(t),tso=r(E4e," \u2014 "),sB=n(E4e,"A",{href:!0});var aVr=s(sB);aso=r(aVr,"BigBirdPegasusModel"),aVr.forEach(t),nso=r(E4e," (BigBirdPegasus model)"),E4e.forEach(t),sso=i(M),op=n(M,"LI",{});var C4e=s(op);Boe=n(C4e,"STRONG",{});var nVr=s(Boe);lso=r(nVr,"blenderbot"),nVr.forEach(t),iso=r(C4e," \u2014 "),lB=n(C4e,"A",{href:!0});var sVr=s(lB);dso=r(sVr,"BlenderbotModel"),sVr.forEach(t),cso=r(C4e," (Blenderbot model)"),C4e.forEach(t),fso=i(M),rp=n(M,"LI",{});var w4e=s(rp);Poe=n(w4e,"STRONG",{});var lVr=s(Poe);mso=r(lVr,"blenderbot-small"),lVr.forEach(t),gso=r(w4e," \u2014 "),iB=n(w4e,"A",{href:!0});var iVr=s(iB);hso=r(iVr,"BlenderbotSmallModel"),iVr.forEach(t),pso=r(w4e," (BlenderbotSmall model)"),w4e.forEach(t),_so=i(M),tp=n(M,"LI",{});var A4e=s(tp);$oe=n(A4e,"STRONG",{});var dVr=s($oe);uso=r(dVr,"camembert"),dVr.forEach(t),bso=r(A4e," \u2014 "),dB=n(A4e,"A",{href:!0});var cVr=s(dB);Fso=r(cVr,"CamembertModel"),cVr.forEach(t),vso=r(A4e," (CamemBERT model)"),A4e.forEach(t),Tso=i(M),ap=n(M,"LI",{});var y4e=s(ap);Ioe=n(y4e,"STRONG",{});var fVr=s(Ioe);Mso=r(fVr,"canine"),fVr.forEach(t),Eso=r(y4e," \u2014 "),cB=n(y4e,"A",{href:!0});var mVr=s(cB);Cso=r(mVr,"CanineModel"),mVr.forEach(t),wso=r(y4e," (Canine model)"),y4e.forEach(t),Aso=i(M),np=n(M,"LI",{});var L4e=s(np);qoe=n(L4e,"STRONG",{});var gVr=s(qoe);yso=r(gVr,"clip"),gVr.forEach(t),Lso=r(L4e," \u2014 "),fB=n(L4e,"A",{href:!0});var hVr=s(fB);xso=r(hVr,"CLIPModel"),hVr.forEach(t),kso=r(L4e," (CLIP model)"),L4e.forEach(t),Sso=i(M),sp=n(M,"LI",{});var x4e=s(sp);Noe=n(x4e,"STRONG",{});var pVr=s(Noe);Rso=r(pVr,"convbert"),pVr.forEach(t),Bso=r(x4e," \u2014 "),mB=n(x4e,"A",{href:!0});var _Vr=s(mB);Pso=r(_Vr,"ConvBertModel"),_Vr.forEach(t),$so=r(x4e," (ConvBERT model)"),x4e.forEach(t),Iso=i(M),lp=n(M,"LI",{});var k4e=s(lp);joe=n(k4e,"STRONG",{});var uVr=s(joe);qso=r(uVr,"convnext"),uVr.forEach(t),Nso=r(k4e," \u2014 "),gB=n(k4e,"A",{href:!0});var bVr=s(gB);jso=r(bVr,"ConvNextModel"),bVr.forEach(t),Dso=r(k4e," (ConvNext model)"),k4e.forEach(t),Gso=i(M),ip=n(M,"LI",{});var S4e=s(ip);Doe=n(S4e,"STRONG",{});var FVr=s(Doe);Oso=r(FVr,"ctrl"),FVr.forEach(t),Vso=r(S4e," \u2014 "),hB=n(S4e,"A",{href:!0});var vVr=s(hB);Xso=r(vVr,"CTRLModel"),vVr.forEach(t),zso=r(S4e," (CTRL model)"),S4e.forEach(t),Qso=i(M),dp=n(M,"LI",{});var R4e=s(dp);Goe=n(R4e,"STRONG",{});var TVr=s(Goe);Wso=r(TVr,"data2vec-audio"),TVr.forEach(t),Hso=r(R4e," \u2014 "),pB=n(R4e,"A",{href:!0});var MVr=s(pB);Uso=r(MVr,"Data2VecAudioModel"),MVr.forEach(t),Jso=r(R4e," (Data2VecAudio model)"),R4e.forEach(t),Yso=i(M),cp=n(M,"LI",{});var B4e=s(cp);Ooe=n(B4e,"STRONG",{});var EVr=s(Ooe);Kso=r(EVr,"data2vec-text"),EVr.forEach(t),Zso=r(B4e," \u2014 "),_B=n(B4e,"A",{href:!0});var CVr=s(_B);elo=r(CVr,"Data2VecTextModel"),CVr.forEach(t),olo=r(B4e," (Data2VecText model)"),B4e.forEach(t),rlo=i(M),fp=n(M,"LI",{});var P4e=s(fp);Voe=n(P4e,"STRONG",{});var wVr=s(Voe);tlo=r(wVr,"deberta"),wVr.forEach(t),alo=r(P4e," \u2014 "),uB=n(P4e,"A",{href:!0});var AVr=s(uB);nlo=r(AVr,"DebertaModel"),AVr.forEach(t),slo=r(P4e," (DeBERTa model)"),P4e.forEach(t),llo=i(M),mp=n(M,"LI",{});var $4e=s(mp);Xoe=n($4e,"STRONG",{});var yVr=s(Xoe);ilo=r(yVr,"deberta-v2"),yVr.forEach(t),dlo=r($4e," \u2014 "),bB=n($4e,"A",{href:!0});var LVr=s(bB);clo=r(LVr,"DebertaV2Model"),LVr.forEach(t),flo=r($4e," (DeBERTa-v2 model)"),$4e.forEach(t),mlo=i(M),gp=n(M,"LI",{});var I4e=s(gp);zoe=n(I4e,"STRONG",{});var xVr=s(zoe);glo=r(xVr,"decision_transformer"),xVr.forEach(t),hlo=r(I4e," \u2014 "),FB=n(I4e,"A",{href:!0});var kVr=s(FB);plo=r(kVr,"DecisionTransformerModel"),kVr.forEach(t),_lo=r(I4e," (Decision Transformer model)"),I4e.forEach(t),ulo=i(M),hp=n(M,"LI",{});var q4e=s(hp);Qoe=n(q4e,"STRONG",{});var SVr=s(Qoe);blo=r(SVr,"deit"),SVr.forEach(t),Flo=r(q4e," \u2014 "),vB=n(q4e,"A",{href:!0});var RVr=s(vB);vlo=r(RVr,"DeiTModel"),RVr.forEach(t),Tlo=r(q4e," (DeiT model)"),q4e.forEach(t),Mlo=i(M),pp=n(M,"LI",{});var N4e=s(pp);Woe=n(N4e,"STRONG",{});var BVr=s(Woe);Elo=r(BVr,"detr"),BVr.forEach(t),Clo=r(N4e," \u2014 "),TB=n(N4e,"A",{href:!0});var PVr=s(TB);wlo=r(PVr,"DetrModel"),PVr.forEach(t),Alo=r(N4e," (DETR model)"),N4e.forEach(t),ylo=i(M),_p=n(M,"LI",{});var j4e=s(_p);Hoe=n(j4e,"STRONG",{});var $Vr=s(Hoe);Llo=r($Vr,"distilbert"),$Vr.forEach(t),xlo=r(j4e," \u2014 "),MB=n(j4e,"A",{href:!0});var IVr=s(MB);klo=r(IVr,"DistilBertModel"),IVr.forEach(t),Slo=r(j4e," (DistilBERT model)"),j4e.forEach(t),Rlo=i(M),up=n(M,"LI",{});var D4e=s(up);Uoe=n(D4e,"STRONG",{});var qVr=s(Uoe);Blo=r(qVr,"dpr"),qVr.forEach(t),Plo=r(D4e," \u2014 "),EB=n(D4e,"A",{href:!0});var NVr=s(EB);$lo=r(NVr,"DPRQuestionEncoder"),NVr.forEach(t),Ilo=r(D4e," (DPR model)"),D4e.forEach(t),qlo=i(M),bp=n(M,"LI",{});var G4e=s(bp);Joe=n(G4e,"STRONG",{});var jVr=s(Joe);Nlo=r(jVr,"dpt"),jVr.forEach(t),jlo=r(G4e," \u2014 "),CB=n(G4e,"A",{href:!0});var DVr=s(CB);Dlo=r(DVr,"DPTModel"),DVr.forEach(t),Glo=r(G4e," (DPT model)"),G4e.forEach(t),Olo=i(M),Fp=n(M,"LI",{});var O4e=s(Fp);Yoe=n(O4e,"STRONG",{});var GVr=s(Yoe);Vlo=r(GVr,"electra"),GVr.forEach(t),Xlo=r(O4e," \u2014 "),wB=n(O4e,"A",{href:!0});var OVr=s(wB);zlo=r(OVr,"ElectraModel"),OVr.forEach(t),Qlo=r(O4e," (ELECTRA model)"),O4e.forEach(t),Wlo=i(M),vp=n(M,"LI",{});var V4e=s(vp);Koe=n(V4e,"STRONG",{});var VVr=s(Koe);Hlo=r(VVr,"fastspeech2"),VVr.forEach(t),Ulo=r(V4e," \u2014 "),Zoe=n(V4e,"CODE",{});var XVr=s(Zoe);Jlo=r(XVr,"FastSpeech2Model"),XVr.forEach(t),Ylo=r(V4e,"(FastSpeech2 model)"),V4e.forEach(t),Klo=i(M),Tp=n(M,"LI",{});var X4e=s(Tp);ere=n(X4e,"STRONG",{});var zVr=s(ere);Zlo=r(zVr,"flaubert"),zVr.forEach(t),eio=r(X4e," \u2014 "),AB=n(X4e,"A",{href:!0});var QVr=s(AB);oio=r(QVr,"FlaubertModel"),QVr.forEach(t),rio=r(X4e," (FlauBERT model)"),X4e.forEach(t),tio=i(M),Mp=n(M,"LI",{});var z4e=s(Mp);ore=n(z4e,"STRONG",{});var WVr=s(ore);aio=r(WVr,"fnet"),WVr.forEach(t),nio=r(z4e," \u2014 "),yB=n(z4e,"A",{href:!0});var HVr=s(yB);sio=r(HVr,"FNetModel"),HVr.forEach(t),lio=r(z4e," (FNet model)"),z4e.forEach(t),iio=i(M),Ep=n(M,"LI",{});var Q4e=s(Ep);rre=n(Q4e,"STRONG",{});var UVr=s(rre);dio=r(UVr,"fsmt"),UVr.forEach(t),cio=r(Q4e," \u2014 "),LB=n(Q4e,"A",{href:!0});var JVr=s(LB);fio=r(JVr,"FSMTModel"),JVr.forEach(t),mio=r(Q4e," (FairSeq Machine-Translation model)"),Q4e.forEach(t),gio=i(M),js=n(M,"LI",{});var l9=s(js);tre=n(l9,"STRONG",{});var YVr=s(tre);hio=r(YVr,"funnel"),YVr.forEach(t),pio=r(l9," \u2014 "),xB=n(l9,"A",{href:!0});var KVr=s(xB);_io=r(KVr,"FunnelModel"),KVr.forEach(t),uio=r(l9," or "),kB=n(l9,"A",{href:!0});var ZVr=s(kB);bio=r(ZVr,"FunnelBaseModel"),ZVr.forEach(t),Fio=r(l9," (Funnel Transformer model)"),l9.forEach(t),vio=i(M),Cp=n(M,"LI",{});var W4e=s(Cp);are=n(W4e,"STRONG",{});var eXr=s(are);Tio=r(eXr,"glpn"),eXr.forEach(t),Mio=r(W4e," \u2014 "),SB=n(W4e,"A",{href:!0});var oXr=s(SB);Eio=r(oXr,"GLPNModel"),oXr.forEach(t),Cio=r(W4e," (GLPN model)"),W4e.forEach(t),wio=i(M),wp=n(M,"LI",{});var H4e=s(wp);nre=n(H4e,"STRONG",{});var rXr=s(nre);Aio=r(rXr,"gpt2"),rXr.forEach(t),yio=r(H4e," \u2014 "),RB=n(H4e,"A",{href:!0});var tXr=s(RB);Lio=r(tXr,"GPT2Model"),tXr.forEach(t),xio=r(H4e," (OpenAI GPT-2 model)"),H4e.forEach(t),kio=i(M),Ap=n(M,"LI",{});var U4e=s(Ap);sre=n(U4e,"STRONG",{});var aXr=s(sre);Sio=r(aXr,"gpt_neo"),aXr.forEach(t),Rio=r(U4e," \u2014 "),BB=n(U4e,"A",{href:!0});var nXr=s(BB);Bio=r(nXr,"GPTNeoModel"),nXr.forEach(t),Pio=r(U4e," (GPT Neo model)"),U4e.forEach(t),$io=i(M),yp=n(M,"LI",{});var J4e=s(yp);lre=n(J4e,"STRONG",{});var sXr=s(lre);Iio=r(sXr,"gptj"),sXr.forEach(t),qio=r(J4e," \u2014 "),PB=n(J4e,"A",{href:!0});var lXr=s(PB);Nio=r(lXr,"GPTJModel"),lXr.forEach(t),jio=r(J4e," (GPT-J model)"),J4e.forEach(t),Dio=i(M),Lp=n(M,"LI",{});var Y4e=s(Lp);ire=n(Y4e,"STRONG",{});var iXr=s(ire);Gio=r(iXr,"hubert"),iXr.forEach(t),Oio=r(Y4e," \u2014 "),$B=n(Y4e,"A",{href:!0});var dXr=s($B);Vio=r(dXr,"HubertModel"),dXr.forEach(t),Xio=r(Y4e," (Hubert model)"),Y4e.forEach(t),zio=i(M),xp=n(M,"LI",{});var K4e=s(xp);dre=n(K4e,"STRONG",{});var cXr=s(dre);Qio=r(cXr,"ibert"),cXr.forEach(t),Wio=r(K4e," \u2014 "),IB=n(K4e,"A",{href:!0});var fXr=s(IB);Hio=r(fXr,"IBertModel"),fXr.forEach(t),Uio=r(K4e," (I-BERT model)"),K4e.forEach(t),Jio=i(M),kp=n(M,"LI",{});var Z4e=s(kp);cre=n(Z4e,"STRONG",{});var mXr=s(cre);Yio=r(mXr,"imagegpt"),mXr.forEach(t),Kio=r(Z4e," \u2014 "),qB=n(Z4e,"A",{href:!0});var gXr=s(qB);Zio=r(gXr,"ImageGPTModel"),gXr.forEach(t),edo=r(Z4e," (ImageGPT model)"),Z4e.forEach(t),odo=i(M),Sp=n(M,"LI",{});var eEe=s(Sp);fre=n(eEe,"STRONG",{});var hXr=s(fre);rdo=r(hXr,"layoutlm"),hXr.forEach(t),tdo=r(eEe," \u2014 "),NB=n(eEe,"A",{href:!0});var pXr=s(NB);ado=r(pXr,"LayoutLMModel"),pXr.forEach(t),ndo=r(eEe," (LayoutLM model)"),eEe.forEach(t),sdo=i(M),Rp=n(M,"LI",{});var oEe=s(Rp);mre=n(oEe,"STRONG",{});var _Xr=s(mre);ldo=r(_Xr,"layoutlmv2"),_Xr.forEach(t),ido=r(oEe," \u2014 "),jB=n(oEe,"A",{href:!0});var uXr=s(jB);ddo=r(uXr,"LayoutLMv2Model"),uXr.forEach(t),cdo=r(oEe," (LayoutLMv2 model)"),oEe.forEach(t),fdo=i(M),Bp=n(M,"LI",{});var rEe=s(Bp);gre=n(rEe,"STRONG",{});var bXr=s(gre);mdo=r(bXr,"led"),bXr.forEach(t),gdo=r(rEe," \u2014 "),DB=n(rEe,"A",{href:!0});var FXr=s(DB);hdo=r(FXr,"LEDModel"),FXr.forEach(t),pdo=r(rEe," (LED model)"),rEe.forEach(t),_do=i(M),Pp=n(M,"LI",{});var tEe=s(Pp);hre=n(tEe,"STRONG",{});var vXr=s(hre);udo=r(vXr,"longformer"),vXr.forEach(t),bdo=r(tEe," \u2014 "),GB=n(tEe,"A",{href:!0});var TXr=s(GB);Fdo=r(TXr,"LongformerModel"),TXr.forEach(t),vdo=r(tEe," (Longformer model)"),tEe.forEach(t),Tdo=i(M),$p=n(M,"LI",{});var aEe=s($p);pre=n(aEe,"STRONG",{});var MXr=s(pre);Mdo=r(MXr,"luke"),MXr.forEach(t),Edo=r(aEe," \u2014 "),OB=n(aEe,"A",{href:!0});var EXr=s(OB);Cdo=r(EXr,"LukeModel"),EXr.forEach(t),wdo=r(aEe," (LUKE model)"),aEe.forEach(t),Ado=i(M),Ip=n(M,"LI",{});var nEe=s(Ip);_re=n(nEe,"STRONG",{});var CXr=s(_re);ydo=r(CXr,"lxmert"),CXr.forEach(t),Ldo=r(nEe," \u2014 "),VB=n(nEe,"A",{href:!0});var wXr=s(VB);xdo=r(wXr,"LxmertModel"),wXr.forEach(t),kdo=r(nEe," (LXMERT model)"),nEe.forEach(t),Sdo=i(M),qp=n(M,"LI",{});var sEe=s(qp);ure=n(sEe,"STRONG",{});var AXr=s(ure);Rdo=r(AXr,"m2m_100"),AXr.forEach(t),Bdo=r(sEe," \u2014 "),XB=n(sEe,"A",{href:!0});var yXr=s(XB);Pdo=r(yXr,"M2M100Model"),yXr.forEach(t),$do=r(sEe," (M2M100 model)"),sEe.forEach(t),Ido=i(M),Np=n(M,"LI",{});var lEe=s(Np);bre=n(lEe,"STRONG",{});var LXr=s(bre);qdo=r(LXr,"marian"),LXr.forEach(t),Ndo=r(lEe," \u2014 "),zB=n(lEe,"A",{href:!0});var xXr=s(zB);jdo=r(xXr,"MarianModel"),xXr.forEach(t),Ddo=r(lEe," (Marian model)"),lEe.forEach(t),Gdo=i(M),jp=n(M,"LI",{});var iEe=s(jp);Fre=n(iEe,"STRONG",{});var kXr=s(Fre);Odo=r(kXr,"maskformer"),kXr.forEach(t),Vdo=r(iEe," \u2014 "),QB=n(iEe,"A",{href:!0});var SXr=s(QB);Xdo=r(SXr,"MaskFormerModel"),SXr.forEach(t),zdo=r(iEe," (MaskFormer model)"),iEe.forEach(t),Qdo=i(M),Dp=n(M,"LI",{});var dEe=s(Dp);vre=n(dEe,"STRONG",{});var RXr=s(vre);Wdo=r(RXr,"mbart"),RXr.forEach(t),Hdo=r(dEe," \u2014 "),WB=n(dEe,"A",{href:!0});var BXr=s(WB);Udo=r(BXr,"MBartModel"),BXr.forEach(t),Jdo=r(dEe," (mBART model)"),dEe.forEach(t),Ydo=i(M),Gp=n(M,"LI",{});var cEe=s(Gp);Tre=n(cEe,"STRONG",{});var PXr=s(Tre);Kdo=r(PXr,"megatron-bert"),PXr.forEach(t),Zdo=r(cEe," \u2014 "),HB=n(cEe,"A",{href:!0});var $Xr=s(HB);eco=r($Xr,"MegatronBertModel"),$Xr.forEach(t),oco=r(cEe," (MegatronBert model)"),cEe.forEach(t),rco=i(M),Op=n(M,"LI",{});var fEe=s(Op);Mre=n(fEe,"STRONG",{});var IXr=s(Mre);tco=r(IXr,"mobilebert"),IXr.forEach(t),aco=r(fEe," \u2014 "),UB=n(fEe,"A",{href:!0});var qXr=s(UB);nco=r(qXr,"MobileBertModel"),qXr.forEach(t),sco=r(fEe," (MobileBERT model)"),fEe.forEach(t),lco=i(M),Vp=n(M,"LI",{});var mEe=s(Vp);Ere=n(mEe,"STRONG",{});var NXr=s(Ere);ico=r(NXr,"mpnet"),NXr.forEach(t),dco=r(mEe," \u2014 "),JB=n(mEe,"A",{href:!0});var jXr=s(JB);cco=r(jXr,"MPNetModel"),jXr.forEach(t),fco=r(mEe," (MPNet model)"),mEe.forEach(t),mco=i(M),Xp=n(M,"LI",{});var gEe=s(Xp);Cre=n(gEe,"STRONG",{});var DXr=s(Cre);gco=r(DXr,"mt5"),DXr.forEach(t),hco=r(gEe," \u2014 "),YB=n(gEe,"A",{href:!0});var GXr=s(YB);pco=r(GXr,"MT5Model"),GXr.forEach(t),_co=r(gEe," (mT5 model)"),gEe.forEach(t),uco=i(M),zp=n(M,"LI",{});var hEe=s(zp);wre=n(hEe,"STRONG",{});var OXr=s(wre);bco=r(OXr,"nystromformer"),OXr.forEach(t),Fco=r(hEe," \u2014 "),KB=n(hEe,"A",{href:!0});var VXr=s(KB);vco=r(VXr,"NystromformerModel"),VXr.forEach(t),Tco=r(hEe," (Nystromformer model)"),hEe.forEach(t),Mco=i(M),Qp=n(M,"LI",{});var pEe=s(Qp);Are=n(pEe,"STRONG",{});var XXr=s(Are);Eco=r(XXr,"openai-gpt"),XXr.forEach(t),Cco=r(pEe," \u2014 "),ZB=n(pEe,"A",{href:!0});var zXr=s(ZB);wco=r(zXr,"OpenAIGPTModel"),zXr.forEach(t),Aco=r(pEe," (OpenAI GPT model)"),pEe.forEach(t),yco=i(M),Wp=n(M,"LI",{});var _Ee=s(Wp);yre=n(_Ee,"STRONG",{});var QXr=s(yre);Lco=r(QXr,"pegasus"),QXr.forEach(t),xco=r(_Ee," \u2014 "),eP=n(_Ee,"A",{href:!0});var WXr=s(eP);kco=r(WXr,"PegasusModel"),WXr.forEach(t),Sco=r(_Ee," (Pegasus model)"),_Ee.forEach(t),Rco=i(M),Hp=n(M,"LI",{});var uEe=s(Hp);Lre=n(uEe,"STRONG",{});var HXr=s(Lre);Bco=r(HXr,"perceiver"),HXr.forEach(t),Pco=r(uEe," \u2014 "),oP=n(uEe,"A",{href:!0});var UXr=s(oP);$co=r(UXr,"PerceiverModel"),UXr.forEach(t),Ico=r(uEe," (Perceiver model)"),uEe.forEach(t),qco=i(M),Up=n(M,"LI",{});var bEe=s(Up);xre=n(bEe,"STRONG",{});var JXr=s(xre);Nco=r(JXr,"plbart"),JXr.forEach(t),jco=r(bEe," \u2014 "),rP=n(bEe,"A",{href:!0});var YXr=s(rP);Dco=r(YXr,"PLBartModel"),YXr.forEach(t),Gco=r(bEe," (PLBart model)"),bEe.forEach(t),Oco=i(M),Jp=n(M,"LI",{});var FEe=s(Jp);kre=n(FEe,"STRONG",{});var KXr=s(kre);Vco=r(KXr,"poolformer"),KXr.forEach(t),Xco=r(FEe," \u2014 "),tP=n(FEe,"A",{href:!0});var ZXr=s(tP);zco=r(ZXr,"PoolFormerModel"),ZXr.forEach(t),Qco=r(FEe," (PoolFormer model)"),FEe.forEach(t),Wco=i(M),Yp=n(M,"LI",{});var vEe=s(Yp);Sre=n(vEe,"STRONG",{});var ezr=s(Sre);Hco=r(ezr,"prophetnet"),ezr.forEach(t),Uco=r(vEe," \u2014 "),aP=n(vEe,"A",{href:!0});var ozr=s(aP);Jco=r(ozr,"ProphetNetModel"),ozr.forEach(t),Yco=r(vEe," (ProphetNet model)"),vEe.forEach(t),Kco=i(M),Kp=n(M,"LI",{});var TEe=s(Kp);Rre=n(TEe,"STRONG",{});var rzr=s(Rre);Zco=r(rzr,"qdqbert"),rzr.forEach(t),efo=r(TEe," \u2014 "),nP=n(TEe,"A",{href:!0});var tzr=s(nP);ofo=r(tzr,"QDQBertModel"),tzr.forEach(t),rfo=r(TEe," (QDQBert model)"),TEe.forEach(t),tfo=i(M),Zp=n(M,"LI",{});var MEe=s(Zp);Bre=n(MEe,"STRONG",{});var azr=s(Bre);afo=r(azr,"reformer"),azr.forEach(t),nfo=r(MEe," \u2014 "),sP=n(MEe,"A",{href:!0});var nzr=s(sP);sfo=r(nzr,"ReformerModel"),nzr.forEach(t),lfo=r(MEe," (Reformer model)"),MEe.forEach(t),ifo=i(M),e_=n(M,"LI",{});var EEe=s(e_);Pre=n(EEe,"STRONG",{});var szr=s(Pre);dfo=r(szr,"rembert"),szr.forEach(t),cfo=r(EEe," \u2014 "),lP=n(EEe,"A",{href:!0});var lzr=s(lP);ffo=r(lzr,"RemBertModel"),lzr.forEach(t),mfo=r(EEe," (RemBERT model)"),EEe.forEach(t),gfo=i(M),o_=n(M,"LI",{});var CEe=s(o_);$re=n(CEe,"STRONG",{});var izr=s($re);hfo=r(izr,"resnet"),izr.forEach(t),pfo=r(CEe," \u2014 "),iP=n(CEe,"A",{href:!0});var dzr=s(iP);_fo=r(dzr,"ResNetModel"),dzr.forEach(t),ufo=r(CEe," (ResNet model)"),CEe.forEach(t),bfo=i(M),r_=n(M,"LI",{});var wEe=s(r_);Ire=n(wEe,"STRONG",{});var czr=s(Ire);Ffo=r(czr,"retribert"),czr.forEach(t),vfo=r(wEe," \u2014 "),dP=n(wEe,"A",{href:!0});var fzr=s(dP);Tfo=r(fzr,"RetriBertModel"),fzr.forEach(t),Mfo=r(wEe," (RetriBERT model)"),wEe.forEach(t),Efo=i(M),t_=n(M,"LI",{});var AEe=s(t_);qre=n(AEe,"STRONG",{});var mzr=s(qre);Cfo=r(mzr,"roberta"),mzr.forEach(t),wfo=r(AEe," \u2014 "),cP=n(AEe,"A",{href:!0});var gzr=s(cP);Afo=r(gzr,"RobertaModel"),gzr.forEach(t),yfo=r(AEe," (RoBERTa model)"),AEe.forEach(t),Lfo=i(M),a_=n(M,"LI",{});var yEe=s(a_);Nre=n(yEe,"STRONG",{});var hzr=s(Nre);xfo=r(hzr,"roformer"),hzr.forEach(t),kfo=r(yEe," \u2014 "),fP=n(yEe,"A",{href:!0});var pzr=s(fP);Sfo=r(pzr,"RoFormerModel"),pzr.forEach(t),Rfo=r(yEe," (RoFormer model)"),yEe.forEach(t),Bfo=i(M),n_=n(M,"LI",{});var LEe=s(n_);jre=n(LEe,"STRONG",{});var _zr=s(jre);Pfo=r(_zr,"segformer"),_zr.forEach(t),$fo=r(LEe," \u2014 "),mP=n(LEe,"A",{href:!0});var uzr=s(mP);Ifo=r(uzr,"SegformerModel"),uzr.forEach(t),qfo=r(LEe," (SegFormer model)"),LEe.forEach(t),Nfo=i(M),s_=n(M,"LI",{});var xEe=s(s_);Dre=n(xEe,"STRONG",{});var bzr=s(Dre);jfo=r(bzr,"sew"),bzr.forEach(t),Dfo=r(xEe," \u2014 "),gP=n(xEe,"A",{href:!0});var Fzr=s(gP);Gfo=r(Fzr,"SEWModel"),Fzr.forEach(t),Ofo=r(xEe," (SEW model)"),xEe.forEach(t),Vfo=i(M),l_=n(M,"LI",{});var kEe=s(l_);Gre=n(kEe,"STRONG",{});var vzr=s(Gre);Xfo=r(vzr,"sew-d"),vzr.forEach(t),zfo=r(kEe," \u2014 "),hP=n(kEe,"A",{href:!0});var Tzr=s(hP);Qfo=r(Tzr,"SEWDModel"),Tzr.forEach(t),Wfo=r(kEe," (SEW-D model)"),kEe.forEach(t),Hfo=i(M),i_=n(M,"LI",{});var SEe=s(i_);Ore=n(SEe,"STRONG",{});var Mzr=s(Ore);Ufo=r(Mzr,"speech_to_text"),Mzr.forEach(t),Jfo=r(SEe," \u2014 "),pP=n(SEe,"A",{href:!0});var Ezr=s(pP);Yfo=r(Ezr,"Speech2TextModel"),Ezr.forEach(t),Kfo=r(SEe," (Speech2Text model)"),SEe.forEach(t),Zfo=i(M),d_=n(M,"LI",{});var REe=s(d_);Vre=n(REe,"STRONG",{});var Czr=s(Vre);emo=r(Czr,"splinter"),Czr.forEach(t),omo=r(REe," \u2014 "),_P=n(REe,"A",{href:!0});var wzr=s(_P);rmo=r(wzr,"SplinterModel"),wzr.forEach(t),tmo=r(REe," (Splinter model)"),REe.forEach(t),amo=i(M),c_=n(M,"LI",{});var BEe=s(c_);Xre=n(BEe,"STRONG",{});var Azr=s(Xre);nmo=r(Azr,"squeezebert"),Azr.forEach(t),smo=r(BEe," \u2014 "),uP=n(BEe,"A",{href:!0});var yzr=s(uP);lmo=r(yzr,"SqueezeBertModel"),yzr.forEach(t),imo=r(BEe," (SqueezeBERT model)"),BEe.forEach(t),dmo=i(M),f_=n(M,"LI",{});var PEe=s(f_);zre=n(PEe,"STRONG",{});var Lzr=s(zre);cmo=r(Lzr,"swin"),Lzr.forEach(t),fmo=r(PEe," \u2014 "),bP=n(PEe,"A",{href:!0});var xzr=s(bP);mmo=r(xzr,"SwinModel"),xzr.forEach(t),gmo=r(PEe," (Swin model)"),PEe.forEach(t),hmo=i(M),m_=n(M,"LI",{});var $Ee=s(m_);Qre=n($Ee,"STRONG",{});var kzr=s(Qre);pmo=r(kzr,"t5"),kzr.forEach(t),_mo=r($Ee," \u2014 "),FP=n($Ee,"A",{href:!0});var Szr=s(FP);umo=r(Szr,"T5Model"),Szr.forEach(t),bmo=r($Ee," (T5 model)"),$Ee.forEach(t),Fmo=i(M),g_=n(M,"LI",{});var IEe=s(g_);Wre=n(IEe,"STRONG",{});var Rzr=s(Wre);vmo=r(Rzr,"tapas"),Rzr.forEach(t),Tmo=r(IEe," \u2014 "),vP=n(IEe,"A",{href:!0});var Bzr=s(vP);Mmo=r(Bzr,"TapasModel"),Bzr.forEach(t),Emo=r(IEe," (TAPAS model)"),IEe.forEach(t),Cmo=i(M),h_=n(M,"LI",{});var qEe=s(h_);Hre=n(qEe,"STRONG",{});var Pzr=s(Hre);wmo=r(Pzr,"transfo-xl"),Pzr.forEach(t),Amo=r(qEe," \u2014 "),TP=n(qEe,"A",{href:!0});var $zr=s(TP);ymo=r($zr,"TransfoXLModel"),$zr.forEach(t),Lmo=r(qEe," (Transformer-XL model)"),qEe.forEach(t),xmo=i(M),p_=n(M,"LI",{});var NEe=s(p_);Ure=n(NEe,"STRONG",{});var Izr=s(Ure);kmo=r(Izr,"unispeech"),Izr.forEach(t),Smo=r(NEe," \u2014 "),MP=n(NEe,"A",{href:!0});var qzr=s(MP);Rmo=r(qzr,"UniSpeechModel"),qzr.forEach(t),Bmo=r(NEe," (UniSpeech model)"),NEe.forEach(t),Pmo=i(M),__=n(M,"LI",{});var jEe=s(__);Jre=n(jEe,"STRONG",{});var Nzr=s(Jre);$mo=r(Nzr,"unispeech-sat"),Nzr.forEach(t),Imo=r(jEe," \u2014 "),EP=n(jEe,"A",{href:!0});var jzr=s(EP);qmo=r(jzr,"UniSpeechSatModel"),jzr.forEach(t),Nmo=r(jEe," (UniSpeechSat model)"),jEe.forEach(t),jmo=i(M),u_=n(M,"LI",{});var DEe=s(u_);Yre=n(DEe,"STRONG",{});var Dzr=s(Yre);Dmo=r(Dzr,"van"),Dzr.forEach(t),Gmo=r(DEe," \u2014 "),CP=n(DEe,"A",{href:!0});var Gzr=s(CP);Omo=r(Gzr,"VanModel"),Gzr.forEach(t),Vmo=r(DEe," (VAN model)"),DEe.forEach(t),Xmo=i(M),b_=n(M,"LI",{});var GEe=s(b_);Kre=n(GEe,"STRONG",{});var Ozr=s(Kre);zmo=r(Ozr,"vilt"),Ozr.forEach(t),Qmo=r(GEe," \u2014 "),wP=n(GEe,"A",{href:!0});var Vzr=s(wP);Wmo=r(Vzr,"ViltModel"),Vzr.forEach(t),Hmo=r(GEe," (ViLT model)"),GEe.forEach(t),Umo=i(M),F_=n(M,"LI",{});var OEe=s(F_);Zre=n(OEe,"STRONG",{});var Xzr=s(Zre);Jmo=r(Xzr,"vision-text-dual-encoder"),Xzr.forEach(t),Ymo=r(OEe," \u2014 "),AP=n(OEe,"A",{href:!0});var zzr=s(AP);Kmo=r(zzr,"VisionTextDualEncoderModel"),zzr.forEach(t),Zmo=r(OEe," (VisionTextDualEncoder model)"),OEe.forEach(t),ego=i(M),v_=n(M,"LI",{});var VEe=s(v_);ete=n(VEe,"STRONG",{});var Qzr=s(ete);ogo=r(Qzr,"visual_bert"),Qzr.forEach(t),rgo=r(VEe," \u2014 "),yP=n(VEe,"A",{href:!0});var Wzr=s(yP);tgo=r(Wzr,"VisualBertModel"),Wzr.forEach(t),ago=r(VEe," (VisualBert model)"),VEe.forEach(t),ngo=i(M),T_=n(M,"LI",{});var XEe=s(T_);ote=n(XEe,"STRONG",{});var Hzr=s(ote);sgo=r(Hzr,"vit"),Hzr.forEach(t),lgo=r(XEe," \u2014 "),LP=n(XEe,"A",{href:!0});var Uzr=s(LP);igo=r(Uzr,"ViTModel"),Uzr.forEach(t),dgo=r(XEe," (ViT model)"),XEe.forEach(t),cgo=i(M),M_=n(M,"LI",{});var zEe=s(M_);rte=n(zEe,"STRONG",{});var Jzr=s(rte);fgo=r(Jzr,"vit_mae"),Jzr.forEach(t),mgo=r(zEe," \u2014 "),xP=n(zEe,"A",{href:!0});var Yzr=s(xP);ggo=r(Yzr,"ViTMAEModel"),Yzr.forEach(t),hgo=r(zEe," (ViTMAE model)"),zEe.forEach(t),pgo=i(M),E_=n(M,"LI",{});var QEe=s(E_);tte=n(QEe,"STRONG",{});var Kzr=s(tte);_go=r(Kzr,"wav2vec2"),Kzr.forEach(t),ugo=r(QEe," \u2014 "),kP=n(QEe,"A",{href:!0});var Zzr=s(kP);bgo=r(Zzr,"Wav2Vec2Model"),Zzr.forEach(t),Fgo=r(QEe," (Wav2Vec2 model)"),QEe.forEach(t),vgo=i(M),C_=n(M,"LI",{});var WEe=s(C_);ate=n(WEe,"STRONG",{});var eQr=s(ate);Tgo=r(eQr,"wavlm"),eQr.forEach(t),Mgo=r(WEe," \u2014 "),SP=n(WEe,"A",{href:!0});var oQr=s(SP);Ego=r(oQr,"WavLMModel"),oQr.forEach(t),Cgo=r(WEe," (WavLM model)"),WEe.forEach(t),wgo=i(M),w_=n(M,"LI",{});var HEe=s(w_);nte=n(HEe,"STRONG",{});var rQr=s(nte);Ago=r(rQr,"xglm"),rQr.forEach(t),ygo=r(HEe," \u2014 "),RP=n(HEe,"A",{href:!0});var tQr=s(RP);Lgo=r(tQr,"XGLMModel"),tQr.forEach(t),xgo=r(HEe," (XGLM model)"),HEe.forEach(t),kgo=i(M),A_=n(M,"LI",{});var UEe=s(A_);ste=n(UEe,"STRONG",{});var aQr=s(ste);Sgo=r(aQr,"xlm"),aQr.forEach(t),Rgo=r(UEe," \u2014 "),BP=n(UEe,"A",{href:!0});var nQr=s(BP);Bgo=r(nQr,"XLMModel"),nQr.forEach(t),Pgo=r(UEe," (XLM model)"),UEe.forEach(t),$go=i(M),y_=n(M,"LI",{});var JEe=s(y_);lte=n(JEe,"STRONG",{});var sQr=s(lte);Igo=r(sQr,"xlm-prophetnet"),sQr.forEach(t),qgo=r(JEe," \u2014 "),PP=n(JEe,"A",{href:!0});var lQr=s(PP);Ngo=r(lQr,"XLMProphetNetModel"),lQr.forEach(t),jgo=r(JEe," (XLMProphetNet model)"),JEe.forEach(t),Dgo=i(M),L_=n(M,"LI",{});var YEe=s(L_);ite=n(YEe,"STRONG",{});var iQr=s(ite);Ggo=r(iQr,"xlm-roberta"),iQr.forEach(t),Ogo=r(YEe," \u2014 "),$P=n(YEe,"A",{href:!0});var dQr=s($P);Vgo=r(dQr,"XLMRobertaModel"),dQr.forEach(t),Xgo=r(YEe," (XLM-RoBERTa model)"),YEe.forEach(t),zgo=i(M),x_=n(M,"LI",{});var KEe=s(x_);dte=n(KEe,"STRONG",{});var cQr=s(dte);Qgo=r(cQr,"xlm-roberta-xl"),cQr.forEach(t),Wgo=r(KEe," \u2014 "),IP=n(KEe,"A",{href:!0});var fQr=s(IP);Hgo=r(fQr,"XLMRobertaXLModel"),fQr.forEach(t),Ugo=r(KEe," (XLM-RoBERTa-XL model)"),KEe.forEach(t),Jgo=i(M),k_=n(M,"LI",{});var ZEe=s(k_);cte=n(ZEe,"STRONG",{});var mQr=s(cte);Ygo=r(mQr,"xlnet"),mQr.forEach(t),Kgo=r(ZEe," \u2014 "),qP=n(ZEe,"A",{href:!0});var gQr=s(qP);Zgo=r(gQr,"XLNetModel"),gQr.forEach(t),eho=r(ZEe," (XLNet model)"),ZEe.forEach(t),oho=i(M),S_=n(M,"LI",{});var eCe=s(S_);fte=n(eCe,"STRONG",{});var hQr=s(fte);rho=r(hQr,"yoso"),hQr.forEach(t),tho=r(eCe," \u2014 "),NP=n(eCe,"A",{href:!0});var pQr=s(NP);aho=r(pQr,"YosoModel"),pQr.forEach(t),nho=r(eCe," (YOSO model)"),eCe.forEach(t),M.forEach(t),sho=i(Dt),R_=n(Dt,"P",{});var oCe=s(R_);lho=r(oCe,"The model is set in evaluation mode by default using "),mte=n(oCe,"CODE",{});var _Qr=s(mte);iho=r(_Qr,"model.eval()"),_Qr.forEach(t),dho=r(oCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gte=n(oCe,"CODE",{});var uQr=s(gte);cho=r(uQr,"model.train()"),uQr.forEach(t),oCe.forEach(t),fho=i(Dt),hte=n(Dt,"P",{});var bQr=s(hte);mho=r(bQr,"Examples:"),bQr.forEach(t),gho=i(Dt),m(aw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),cRe=i(c),Zi=n(c,"H2",{class:!0});var FPe=s(Zi);B_=n(FPe,"A",{id:!0,class:!0,href:!0});var FQr=s(B_);pte=n(FQr,"SPAN",{});var vQr=s(pte);m(nw.$$.fragment,vQr),vQr.forEach(t),FQr.forEach(t),hho=i(FPe),_te=n(FPe,"SPAN",{});var TQr=s(_te);pho=r(TQr,"AutoModelForPreTraining"),TQr.forEach(t),FPe.forEach(t),fRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(sw.$$.fragment,Hs),_ho=i(Hs),ed=n(Hs,"P",{});var eU=s(ed);uho=r(eU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jP=n(eU,"A",{href:!0});var MQr=s(jP);bho=r(MQr,"from_pretrained()"),MQr.forEach(t),Fho=r(eU," class method or the "),DP=n(eU,"A",{href:!0});var EQr=s(DP);vho=r(EQr,"from_config()"),EQr.forEach(t),Tho=r(eU,` class
method.`),eU.forEach(t),Mho=i(Hs),lw=n(Hs,"P",{});var vPe=s(lw);Eho=r(vPe,"This class cannot be instantiated directly using "),ute=n(vPe,"CODE",{});var CQr=s(ute);Cho=r(CQr,"__init__()"),CQr.forEach(t),who=r(vPe," (throws an error)."),vPe.forEach(t),Aho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(iw.$$.fragment,Us),yho=i(Us),bte=n(Us,"P",{});var wQr=s(bte);Lho=r(wQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wQr.forEach(t),xho=i(Us),od=n(Us,"P",{});var oU=s(od);kho=r(oU,`Note:
Loading a model from its configuration file does `),Fte=n(oU,"STRONG",{});var AQr=s(Fte);Sho=r(AQr,"not"),AQr.forEach(t),Rho=r(oU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=n(oU,"A",{href:!0});var yQr=s(GP);Bho=r(yQr,"from_pretrained()"),yQr.forEach(t),Pho=r(oU," to load the model weights."),oU.forEach(t),$ho=i(Us),vte=n(Us,"P",{});var LQr=s(vte);Iho=r(LQr,"Examples:"),LQr.forEach(t),qho=i(Us),m(dw.$$.fragment,Us),Us.forEach(t),Nho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(cw.$$.fragment,Gt),jho=i(Gt),Tte=n(Gt,"P",{});var xQr=s(Tte);Dho=r(xQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xQr.forEach(t),Gho=i(Gt),za=n(Gt,"P",{});var EE=s(za);Oho=r(EE,"The model class to instantiate is selected based on the "),Mte=n(EE,"CODE",{});var kQr=s(Mte);Vho=r(kQr,"model_type"),kQr.forEach(t),Xho=r(EE,` property of the config object (either
passed as an argument or loaded from `),Ete=n(EE,"CODE",{});var SQr=s(Ete);zho=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),Qho=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(EE,"CODE",{});var RQr=s(Cte);Who=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),Hho=r(EE,":"),EE.forEach(t),Uho=i(Gt),S=n(Gt,"UL",{});var B=s(S);P_=n(B,"LI",{});var rCe=s(P_);wte=n(rCe,"STRONG",{});var BQr=s(wte);Jho=r(BQr,"albert"),BQr.forEach(t),Yho=r(rCe," \u2014 "),OP=n(rCe,"A",{href:!0});var PQr=s(OP);Kho=r(PQr,"AlbertForPreTraining"),PQr.forEach(t),Zho=r(rCe," (ALBERT model)"),rCe.forEach(t),epo=i(B),$_=n(B,"LI",{});var tCe=s($_);Ate=n(tCe,"STRONG",{});var $Qr=s(Ate);opo=r($Qr,"bart"),$Qr.forEach(t),rpo=r(tCe," \u2014 "),VP=n(tCe,"A",{href:!0});var IQr=s(VP);tpo=r(IQr,"BartForConditionalGeneration"),IQr.forEach(t),apo=r(tCe," (BART model)"),tCe.forEach(t),npo=i(B),I_=n(B,"LI",{});var aCe=s(I_);yte=n(aCe,"STRONG",{});var qQr=s(yte);spo=r(qQr,"bert"),qQr.forEach(t),lpo=r(aCe," \u2014 "),XP=n(aCe,"A",{href:!0});var NQr=s(XP);ipo=r(NQr,"BertForPreTraining"),NQr.forEach(t),dpo=r(aCe," (BERT model)"),aCe.forEach(t),cpo=i(B),q_=n(B,"LI",{});var nCe=s(q_);Lte=n(nCe,"STRONG",{});var jQr=s(Lte);fpo=r(jQr,"big_bird"),jQr.forEach(t),mpo=r(nCe," \u2014 "),zP=n(nCe,"A",{href:!0});var DQr=s(zP);gpo=r(DQr,"BigBirdForPreTraining"),DQr.forEach(t),hpo=r(nCe," (BigBird model)"),nCe.forEach(t),ppo=i(B),N_=n(B,"LI",{});var sCe=s(N_);xte=n(sCe,"STRONG",{});var GQr=s(xte);_po=r(GQr,"camembert"),GQr.forEach(t),upo=r(sCe," \u2014 "),QP=n(sCe,"A",{href:!0});var OQr=s(QP);bpo=r(OQr,"CamembertForMaskedLM"),OQr.forEach(t),Fpo=r(sCe," (CamemBERT model)"),sCe.forEach(t),vpo=i(B),j_=n(B,"LI",{});var lCe=s(j_);kte=n(lCe,"STRONG",{});var VQr=s(kte);Tpo=r(VQr,"ctrl"),VQr.forEach(t),Mpo=r(lCe," \u2014 "),WP=n(lCe,"A",{href:!0});var XQr=s(WP);Epo=r(XQr,"CTRLLMHeadModel"),XQr.forEach(t),Cpo=r(lCe," (CTRL model)"),lCe.forEach(t),wpo=i(B),D_=n(B,"LI",{});var iCe=s(D_);Ste=n(iCe,"STRONG",{});var zQr=s(Ste);Apo=r(zQr,"data2vec-text"),zQr.forEach(t),ypo=r(iCe," \u2014 "),HP=n(iCe,"A",{href:!0});var QQr=s(HP);Lpo=r(QQr,"Data2VecTextForMaskedLM"),QQr.forEach(t),xpo=r(iCe," (Data2VecText model)"),iCe.forEach(t),kpo=i(B),G_=n(B,"LI",{});var dCe=s(G_);Rte=n(dCe,"STRONG",{});var WQr=s(Rte);Spo=r(WQr,"deberta"),WQr.forEach(t),Rpo=r(dCe," \u2014 "),UP=n(dCe,"A",{href:!0});var HQr=s(UP);Bpo=r(HQr,"DebertaForMaskedLM"),HQr.forEach(t),Ppo=r(dCe," (DeBERTa model)"),dCe.forEach(t),$po=i(B),O_=n(B,"LI",{});var cCe=s(O_);Bte=n(cCe,"STRONG",{});var UQr=s(Bte);Ipo=r(UQr,"deberta-v2"),UQr.forEach(t),qpo=r(cCe," \u2014 "),JP=n(cCe,"A",{href:!0});var JQr=s(JP);Npo=r(JQr,"DebertaV2ForMaskedLM"),JQr.forEach(t),jpo=r(cCe," (DeBERTa-v2 model)"),cCe.forEach(t),Dpo=i(B),V_=n(B,"LI",{});var fCe=s(V_);Pte=n(fCe,"STRONG",{});var YQr=s(Pte);Gpo=r(YQr,"distilbert"),YQr.forEach(t),Opo=r(fCe," \u2014 "),YP=n(fCe,"A",{href:!0});var KQr=s(YP);Vpo=r(KQr,"DistilBertForMaskedLM"),KQr.forEach(t),Xpo=r(fCe," (DistilBERT model)"),fCe.forEach(t),zpo=i(B),X_=n(B,"LI",{});var mCe=s(X_);$te=n(mCe,"STRONG",{});var ZQr=s($te);Qpo=r(ZQr,"electra"),ZQr.forEach(t),Wpo=r(mCe," \u2014 "),KP=n(mCe,"A",{href:!0});var eWr=s(KP);Hpo=r(eWr,"ElectraForPreTraining"),eWr.forEach(t),Upo=r(mCe," (ELECTRA model)"),mCe.forEach(t),Jpo=i(B),z_=n(B,"LI",{});var gCe=s(z_);Ite=n(gCe,"STRONG",{});var oWr=s(Ite);Ypo=r(oWr,"flaubert"),oWr.forEach(t),Kpo=r(gCe," \u2014 "),ZP=n(gCe,"A",{href:!0});var rWr=s(ZP);Zpo=r(rWr,"FlaubertWithLMHeadModel"),rWr.forEach(t),e_o=r(gCe," (FlauBERT model)"),gCe.forEach(t),o_o=i(B),Q_=n(B,"LI",{});var hCe=s(Q_);qte=n(hCe,"STRONG",{});var tWr=s(qte);r_o=r(tWr,"fnet"),tWr.forEach(t),t_o=r(hCe," \u2014 "),e$=n(hCe,"A",{href:!0});var aWr=s(e$);a_o=r(aWr,"FNetForPreTraining"),aWr.forEach(t),n_o=r(hCe," (FNet model)"),hCe.forEach(t),s_o=i(B),W_=n(B,"LI",{});var pCe=s(W_);Nte=n(pCe,"STRONG",{});var nWr=s(Nte);l_o=r(nWr,"fsmt"),nWr.forEach(t),i_o=r(pCe," \u2014 "),o$=n(pCe,"A",{href:!0});var sWr=s(o$);d_o=r(sWr,"FSMTForConditionalGeneration"),sWr.forEach(t),c_o=r(pCe," (FairSeq Machine-Translation model)"),pCe.forEach(t),f_o=i(B),H_=n(B,"LI",{});var _Ce=s(H_);jte=n(_Ce,"STRONG",{});var lWr=s(jte);m_o=r(lWr,"funnel"),lWr.forEach(t),g_o=r(_Ce," \u2014 "),r$=n(_Ce,"A",{href:!0});var iWr=s(r$);h_o=r(iWr,"FunnelForPreTraining"),iWr.forEach(t),p_o=r(_Ce," (Funnel Transformer model)"),_Ce.forEach(t),__o=i(B),U_=n(B,"LI",{});var uCe=s(U_);Dte=n(uCe,"STRONG",{});var dWr=s(Dte);u_o=r(dWr,"gpt2"),dWr.forEach(t),b_o=r(uCe," \u2014 "),t$=n(uCe,"A",{href:!0});var cWr=s(t$);F_o=r(cWr,"GPT2LMHeadModel"),cWr.forEach(t),v_o=r(uCe," (OpenAI GPT-2 model)"),uCe.forEach(t),T_o=i(B),J_=n(B,"LI",{});var bCe=s(J_);Gte=n(bCe,"STRONG",{});var fWr=s(Gte);M_o=r(fWr,"ibert"),fWr.forEach(t),E_o=r(bCe," \u2014 "),a$=n(bCe,"A",{href:!0});var mWr=s(a$);C_o=r(mWr,"IBertForMaskedLM"),mWr.forEach(t),w_o=r(bCe," (I-BERT model)"),bCe.forEach(t),A_o=i(B),Y_=n(B,"LI",{});var FCe=s(Y_);Ote=n(FCe,"STRONG",{});var gWr=s(Ote);y_o=r(gWr,"layoutlm"),gWr.forEach(t),L_o=r(FCe," \u2014 "),n$=n(FCe,"A",{href:!0});var hWr=s(n$);x_o=r(hWr,"LayoutLMForMaskedLM"),hWr.forEach(t),k_o=r(FCe," (LayoutLM model)"),FCe.forEach(t),S_o=i(B),K_=n(B,"LI",{});var vCe=s(K_);Vte=n(vCe,"STRONG",{});var pWr=s(Vte);R_o=r(pWr,"longformer"),pWr.forEach(t),B_o=r(vCe," \u2014 "),s$=n(vCe,"A",{href:!0});var _Wr=s(s$);P_o=r(_Wr,"LongformerForMaskedLM"),_Wr.forEach(t),$_o=r(vCe," (Longformer model)"),vCe.forEach(t),I_o=i(B),Z_=n(B,"LI",{});var TCe=s(Z_);Xte=n(TCe,"STRONG",{});var uWr=s(Xte);q_o=r(uWr,"lxmert"),uWr.forEach(t),N_o=r(TCe," \u2014 "),l$=n(TCe,"A",{href:!0});var bWr=s(l$);j_o=r(bWr,"LxmertForPreTraining"),bWr.forEach(t),D_o=r(TCe," (LXMERT model)"),TCe.forEach(t),G_o=i(B),eu=n(B,"LI",{});var MCe=s(eu);zte=n(MCe,"STRONG",{});var FWr=s(zte);O_o=r(FWr,"megatron-bert"),FWr.forEach(t),V_o=r(MCe," \u2014 "),i$=n(MCe,"A",{href:!0});var vWr=s(i$);X_o=r(vWr,"MegatronBertForPreTraining"),vWr.forEach(t),z_o=r(MCe," (MegatronBert model)"),MCe.forEach(t),Q_o=i(B),ou=n(B,"LI",{});var ECe=s(ou);Qte=n(ECe,"STRONG",{});var TWr=s(Qte);W_o=r(TWr,"mobilebert"),TWr.forEach(t),H_o=r(ECe," \u2014 "),d$=n(ECe,"A",{href:!0});var MWr=s(d$);U_o=r(MWr,"MobileBertForPreTraining"),MWr.forEach(t),J_o=r(ECe," (MobileBERT model)"),ECe.forEach(t),Y_o=i(B),ru=n(B,"LI",{});var CCe=s(ru);Wte=n(CCe,"STRONG",{});var EWr=s(Wte);K_o=r(EWr,"mpnet"),EWr.forEach(t),Z_o=r(CCe," \u2014 "),c$=n(CCe,"A",{href:!0});var CWr=s(c$);euo=r(CWr,"MPNetForMaskedLM"),CWr.forEach(t),ouo=r(CCe," (MPNet model)"),CCe.forEach(t),ruo=i(B),tu=n(B,"LI",{});var wCe=s(tu);Hte=n(wCe,"STRONG",{});var wWr=s(Hte);tuo=r(wWr,"openai-gpt"),wWr.forEach(t),auo=r(wCe," \u2014 "),f$=n(wCe,"A",{href:!0});var AWr=s(f$);nuo=r(AWr,"OpenAIGPTLMHeadModel"),AWr.forEach(t),suo=r(wCe," (OpenAI GPT model)"),wCe.forEach(t),luo=i(B),au=n(B,"LI",{});var ACe=s(au);Ute=n(ACe,"STRONG",{});var yWr=s(Ute);iuo=r(yWr,"retribert"),yWr.forEach(t),duo=r(ACe," \u2014 "),m$=n(ACe,"A",{href:!0});var LWr=s(m$);cuo=r(LWr,"RetriBertModel"),LWr.forEach(t),fuo=r(ACe," (RetriBERT model)"),ACe.forEach(t),muo=i(B),nu=n(B,"LI",{});var yCe=s(nu);Jte=n(yCe,"STRONG",{});var xWr=s(Jte);guo=r(xWr,"roberta"),xWr.forEach(t),huo=r(yCe," \u2014 "),g$=n(yCe,"A",{href:!0});var kWr=s(g$);puo=r(kWr,"RobertaForMaskedLM"),kWr.forEach(t),_uo=r(yCe," (RoBERTa model)"),yCe.forEach(t),uuo=i(B),su=n(B,"LI",{});var LCe=s(su);Yte=n(LCe,"STRONG",{});var SWr=s(Yte);buo=r(SWr,"squeezebert"),SWr.forEach(t),Fuo=r(LCe," \u2014 "),h$=n(LCe,"A",{href:!0});var RWr=s(h$);vuo=r(RWr,"SqueezeBertForMaskedLM"),RWr.forEach(t),Tuo=r(LCe," (SqueezeBERT model)"),LCe.forEach(t),Muo=i(B),lu=n(B,"LI",{});var xCe=s(lu);Kte=n(xCe,"STRONG",{});var BWr=s(Kte);Euo=r(BWr,"t5"),BWr.forEach(t),Cuo=r(xCe," \u2014 "),p$=n(xCe,"A",{href:!0});var PWr=s(p$);wuo=r(PWr,"T5ForConditionalGeneration"),PWr.forEach(t),Auo=r(xCe," (T5 model)"),xCe.forEach(t),yuo=i(B),iu=n(B,"LI",{});var kCe=s(iu);Zte=n(kCe,"STRONG",{});var $Wr=s(Zte);Luo=r($Wr,"tapas"),$Wr.forEach(t),xuo=r(kCe," \u2014 "),_$=n(kCe,"A",{href:!0});var IWr=s(_$);kuo=r(IWr,"TapasForMaskedLM"),IWr.forEach(t),Suo=r(kCe," (TAPAS model)"),kCe.forEach(t),Ruo=i(B),du=n(B,"LI",{});var SCe=s(du);eae=n(SCe,"STRONG",{});var qWr=s(eae);Buo=r(qWr,"transfo-xl"),qWr.forEach(t),Puo=r(SCe," \u2014 "),u$=n(SCe,"A",{href:!0});var NWr=s(u$);$uo=r(NWr,"TransfoXLLMHeadModel"),NWr.forEach(t),Iuo=r(SCe," (Transformer-XL model)"),SCe.forEach(t),quo=i(B),cu=n(B,"LI",{});var RCe=s(cu);oae=n(RCe,"STRONG",{});var jWr=s(oae);Nuo=r(jWr,"unispeech"),jWr.forEach(t),juo=r(RCe," \u2014 "),b$=n(RCe,"A",{href:!0});var DWr=s(b$);Duo=r(DWr,"UniSpeechForPreTraining"),DWr.forEach(t),Guo=r(RCe," (UniSpeech model)"),RCe.forEach(t),Ouo=i(B),fu=n(B,"LI",{});var BCe=s(fu);rae=n(BCe,"STRONG",{});var GWr=s(rae);Vuo=r(GWr,"unispeech-sat"),GWr.forEach(t),Xuo=r(BCe," \u2014 "),F$=n(BCe,"A",{href:!0});var OWr=s(F$);zuo=r(OWr,"UniSpeechSatForPreTraining"),OWr.forEach(t),Quo=r(BCe," (UniSpeechSat model)"),BCe.forEach(t),Wuo=i(B),mu=n(B,"LI",{});var PCe=s(mu);tae=n(PCe,"STRONG",{});var VWr=s(tae);Huo=r(VWr,"visual_bert"),VWr.forEach(t),Uuo=r(PCe," \u2014 "),v$=n(PCe,"A",{href:!0});var XWr=s(v$);Juo=r(XWr,"VisualBertForPreTraining"),XWr.forEach(t),Yuo=r(PCe," (VisualBert model)"),PCe.forEach(t),Kuo=i(B),gu=n(B,"LI",{});var $Ce=s(gu);aae=n($Ce,"STRONG",{});var zWr=s(aae);Zuo=r(zWr,"vit_mae"),zWr.forEach(t),e1o=r($Ce," \u2014 "),T$=n($Ce,"A",{href:!0});var QWr=s(T$);o1o=r(QWr,"ViTMAEForPreTraining"),QWr.forEach(t),r1o=r($Ce," (ViTMAE model)"),$Ce.forEach(t),t1o=i(B),hu=n(B,"LI",{});var ICe=s(hu);nae=n(ICe,"STRONG",{});var WWr=s(nae);a1o=r(WWr,"wav2vec2"),WWr.forEach(t),n1o=r(ICe," \u2014 "),M$=n(ICe,"A",{href:!0});var HWr=s(M$);s1o=r(HWr,"Wav2Vec2ForPreTraining"),HWr.forEach(t),l1o=r(ICe," (Wav2Vec2 model)"),ICe.forEach(t),i1o=i(B),pu=n(B,"LI",{});var qCe=s(pu);sae=n(qCe,"STRONG",{});var UWr=s(sae);d1o=r(UWr,"xlm"),UWr.forEach(t),c1o=r(qCe," \u2014 "),E$=n(qCe,"A",{href:!0});var JWr=s(E$);f1o=r(JWr,"XLMWithLMHeadModel"),JWr.forEach(t),m1o=r(qCe," (XLM model)"),qCe.forEach(t),g1o=i(B),_u=n(B,"LI",{});var NCe=s(_u);lae=n(NCe,"STRONG",{});var YWr=s(lae);h1o=r(YWr,"xlm-roberta"),YWr.forEach(t),p1o=r(NCe," \u2014 "),C$=n(NCe,"A",{href:!0});var KWr=s(C$);_1o=r(KWr,"XLMRobertaForMaskedLM"),KWr.forEach(t),u1o=r(NCe," (XLM-RoBERTa model)"),NCe.forEach(t),b1o=i(B),uu=n(B,"LI",{});var jCe=s(uu);iae=n(jCe,"STRONG",{});var ZWr=s(iae);F1o=r(ZWr,"xlm-roberta-xl"),ZWr.forEach(t),v1o=r(jCe," \u2014 "),w$=n(jCe,"A",{href:!0});var eHr=s(w$);T1o=r(eHr,"XLMRobertaXLForMaskedLM"),eHr.forEach(t),M1o=r(jCe," (XLM-RoBERTa-XL model)"),jCe.forEach(t),E1o=i(B),bu=n(B,"LI",{});var DCe=s(bu);dae=n(DCe,"STRONG",{});var oHr=s(dae);C1o=r(oHr,"xlnet"),oHr.forEach(t),w1o=r(DCe," \u2014 "),A$=n(DCe,"A",{href:!0});var rHr=s(A$);A1o=r(rHr,"XLNetLMHeadModel"),rHr.forEach(t),y1o=r(DCe," (XLNet model)"),DCe.forEach(t),B.forEach(t),L1o=i(Gt),Fu=n(Gt,"P",{});var GCe=s(Fu);x1o=r(GCe,"The model is set in evaluation mode by default using "),cae=n(GCe,"CODE",{});var tHr=s(cae);k1o=r(tHr,"model.eval()"),tHr.forEach(t),S1o=r(GCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=n(GCe,"CODE",{});var aHr=s(fae);R1o=r(aHr,"model.train()"),aHr.forEach(t),GCe.forEach(t),B1o=i(Gt),mae=n(Gt,"P",{});var nHr=s(mae);P1o=r(nHr,"Examples:"),nHr.forEach(t),$1o=i(Gt),m(fw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),mRe=i(c),rd=n(c,"H2",{class:!0});var TPe=s(rd);vu=n(TPe,"A",{id:!0,class:!0,href:!0});var sHr=s(vu);gae=n(sHr,"SPAN",{});var lHr=s(gae);m(mw.$$.fragment,lHr),lHr.forEach(t),sHr.forEach(t),I1o=i(TPe),hae=n(TPe,"SPAN",{});var iHr=s(hae);q1o=r(iHr,"AutoModelForCausalLM"),iHr.forEach(t),TPe.forEach(t),gRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(gw.$$.fragment,Js),N1o=i(Js),td=n(Js,"P",{});var rU=s(td);j1o=r(rU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),y$=n(rU,"A",{href:!0});var dHr=s(y$);D1o=r(dHr,"from_pretrained()"),dHr.forEach(t),G1o=r(rU," class method or the "),L$=n(rU,"A",{href:!0});var cHr=s(L$);O1o=r(cHr,"from_config()"),cHr.forEach(t),V1o=r(rU,` class
method.`),rU.forEach(t),X1o=i(Js),hw=n(Js,"P",{});var MPe=s(hw);z1o=r(MPe,"This class cannot be instantiated directly using "),pae=n(MPe,"CODE",{});var fHr=s(pae);Q1o=r(fHr,"__init__()"),fHr.forEach(t),W1o=r(MPe," (throws an error)."),MPe.forEach(t),H1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(pw.$$.fragment,Ys),U1o=i(Ys),_ae=n(Ys,"P",{});var mHr=s(_ae);J1o=r(mHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mHr.forEach(t),Y1o=i(Ys),ad=n(Ys,"P",{});var tU=s(ad);K1o=r(tU,`Note:
Loading a model from its configuration file does `),uae=n(tU,"STRONG",{});var gHr=s(uae);Z1o=r(gHr,"not"),gHr.forEach(t),e7o=r(tU,` load the model weights. It only affects the
model\u2019s configuration. Use `),x$=n(tU,"A",{href:!0});var hHr=s(x$);o7o=r(hHr,"from_pretrained()"),hHr.forEach(t),r7o=r(tU," to load the model weights."),tU.forEach(t),t7o=i(Ys),bae=n(Ys,"P",{});var pHr=s(bae);a7o=r(pHr,"Examples:"),pHr.forEach(t),n7o=i(Ys),m(_w.$$.fragment,Ys),Ys.forEach(t),s7o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(uw.$$.fragment,Ot),l7o=i(Ot),Fae=n(Ot,"P",{});var _Hr=s(Fae);i7o=r(_Hr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Hr.forEach(t),d7o=i(Ot),Qa=n(Ot,"P",{});var CE=s(Qa);c7o=r(CE,"The model class to instantiate is selected based on the "),vae=n(CE,"CODE",{});var uHr=s(vae);f7o=r(uHr,"model_type"),uHr.forEach(t),m7o=r(CE,` property of the config object (either
passed as an argument or loaded from `),Tae=n(CE,"CODE",{});var bHr=s(Tae);g7o=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),h7o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=n(CE,"CODE",{});var FHr=s(Mae);p7o=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),_7o=r(CE,":"),CE.forEach(t),u7o=i(Ot),$=n(Ot,"UL",{});var q=s($);Tu=n(q,"LI",{});var OCe=s(Tu);Eae=n(OCe,"STRONG",{});var vHr=s(Eae);b7o=r(vHr,"bart"),vHr.forEach(t),F7o=r(OCe," \u2014 "),k$=n(OCe,"A",{href:!0});var THr=s(k$);v7o=r(THr,"BartForCausalLM"),THr.forEach(t),T7o=r(OCe," (BART model)"),OCe.forEach(t),M7o=i(q),Mu=n(q,"LI",{});var VCe=s(Mu);Cae=n(VCe,"STRONG",{});var MHr=s(Cae);E7o=r(MHr,"bert"),MHr.forEach(t),C7o=r(VCe," \u2014 "),S$=n(VCe,"A",{href:!0});var EHr=s(S$);w7o=r(EHr,"BertLMHeadModel"),EHr.forEach(t),A7o=r(VCe," (BERT model)"),VCe.forEach(t),y7o=i(q),Eu=n(q,"LI",{});var XCe=s(Eu);wae=n(XCe,"STRONG",{});var CHr=s(wae);L7o=r(CHr,"bert-generation"),CHr.forEach(t),x7o=r(XCe," \u2014 "),R$=n(XCe,"A",{href:!0});var wHr=s(R$);k7o=r(wHr,"BertGenerationDecoder"),wHr.forEach(t),S7o=r(XCe," (Bert Generation model)"),XCe.forEach(t),R7o=i(q),Cu=n(q,"LI",{});var zCe=s(Cu);Aae=n(zCe,"STRONG",{});var AHr=s(Aae);B7o=r(AHr,"big_bird"),AHr.forEach(t),P7o=r(zCe," \u2014 "),B$=n(zCe,"A",{href:!0});var yHr=s(B$);$7o=r(yHr,"BigBirdForCausalLM"),yHr.forEach(t),I7o=r(zCe," (BigBird model)"),zCe.forEach(t),q7o=i(q),wu=n(q,"LI",{});var QCe=s(wu);yae=n(QCe,"STRONG",{});var LHr=s(yae);N7o=r(LHr,"bigbird_pegasus"),LHr.forEach(t),j7o=r(QCe," \u2014 "),P$=n(QCe,"A",{href:!0});var xHr=s(P$);D7o=r(xHr,"BigBirdPegasusForCausalLM"),xHr.forEach(t),G7o=r(QCe," (BigBirdPegasus model)"),QCe.forEach(t),O7o=i(q),Au=n(q,"LI",{});var WCe=s(Au);Lae=n(WCe,"STRONG",{});var kHr=s(Lae);V7o=r(kHr,"blenderbot"),kHr.forEach(t),X7o=r(WCe," \u2014 "),$$=n(WCe,"A",{href:!0});var SHr=s($$);z7o=r(SHr,"BlenderbotForCausalLM"),SHr.forEach(t),Q7o=r(WCe," (Blenderbot model)"),WCe.forEach(t),W7o=i(q),yu=n(q,"LI",{});var HCe=s(yu);xae=n(HCe,"STRONG",{});var RHr=s(xae);H7o=r(RHr,"blenderbot-small"),RHr.forEach(t),U7o=r(HCe," \u2014 "),I$=n(HCe,"A",{href:!0});var BHr=s(I$);J7o=r(BHr,"BlenderbotSmallForCausalLM"),BHr.forEach(t),Y7o=r(HCe," (BlenderbotSmall model)"),HCe.forEach(t),K7o=i(q),Lu=n(q,"LI",{});var UCe=s(Lu);kae=n(UCe,"STRONG",{});var PHr=s(kae);Z7o=r(PHr,"camembert"),PHr.forEach(t),ebo=r(UCe," \u2014 "),q$=n(UCe,"A",{href:!0});var $Hr=s(q$);obo=r($Hr,"CamembertForCausalLM"),$Hr.forEach(t),rbo=r(UCe," (CamemBERT model)"),UCe.forEach(t),tbo=i(q),xu=n(q,"LI",{});var JCe=s(xu);Sae=n(JCe,"STRONG",{});var IHr=s(Sae);abo=r(IHr,"ctrl"),IHr.forEach(t),nbo=r(JCe," \u2014 "),N$=n(JCe,"A",{href:!0});var qHr=s(N$);sbo=r(qHr,"CTRLLMHeadModel"),qHr.forEach(t),lbo=r(JCe," (CTRL model)"),JCe.forEach(t),ibo=i(q),ku=n(q,"LI",{});var YCe=s(ku);Rae=n(YCe,"STRONG",{});var NHr=s(Rae);dbo=r(NHr,"data2vec-text"),NHr.forEach(t),cbo=r(YCe," \u2014 "),j$=n(YCe,"A",{href:!0});var jHr=s(j$);fbo=r(jHr,"Data2VecTextForCausalLM"),jHr.forEach(t),mbo=r(YCe," (Data2VecText model)"),YCe.forEach(t),gbo=i(q),Su=n(q,"LI",{});var KCe=s(Su);Bae=n(KCe,"STRONG",{});var DHr=s(Bae);hbo=r(DHr,"electra"),DHr.forEach(t),pbo=r(KCe," \u2014 "),D$=n(KCe,"A",{href:!0});var GHr=s(D$);_bo=r(GHr,"ElectraForCausalLM"),GHr.forEach(t),ubo=r(KCe," (ELECTRA model)"),KCe.forEach(t),bbo=i(q),Ru=n(q,"LI",{});var ZCe=s(Ru);Pae=n(ZCe,"STRONG",{});var OHr=s(Pae);Fbo=r(OHr,"gpt2"),OHr.forEach(t),vbo=r(ZCe," \u2014 "),G$=n(ZCe,"A",{href:!0});var VHr=s(G$);Tbo=r(VHr,"GPT2LMHeadModel"),VHr.forEach(t),Mbo=r(ZCe," (OpenAI GPT-2 model)"),ZCe.forEach(t),Ebo=i(q),Bu=n(q,"LI",{});var ewe=s(Bu);$ae=n(ewe,"STRONG",{});var XHr=s($ae);Cbo=r(XHr,"gpt_neo"),XHr.forEach(t),wbo=r(ewe," \u2014 "),O$=n(ewe,"A",{href:!0});var zHr=s(O$);Abo=r(zHr,"GPTNeoForCausalLM"),zHr.forEach(t),ybo=r(ewe," (GPT Neo model)"),ewe.forEach(t),Lbo=i(q),Pu=n(q,"LI",{});var owe=s(Pu);Iae=n(owe,"STRONG",{});var QHr=s(Iae);xbo=r(QHr,"gptj"),QHr.forEach(t),kbo=r(owe," \u2014 "),V$=n(owe,"A",{href:!0});var WHr=s(V$);Sbo=r(WHr,"GPTJForCausalLM"),WHr.forEach(t),Rbo=r(owe," (GPT-J model)"),owe.forEach(t),Bbo=i(q),$u=n(q,"LI",{});var rwe=s($u);qae=n(rwe,"STRONG",{});var HHr=s(qae);Pbo=r(HHr,"marian"),HHr.forEach(t),$bo=r(rwe," \u2014 "),X$=n(rwe,"A",{href:!0});var UHr=s(X$);Ibo=r(UHr,"MarianForCausalLM"),UHr.forEach(t),qbo=r(rwe," (Marian model)"),rwe.forEach(t),Nbo=i(q),Iu=n(q,"LI",{});var twe=s(Iu);Nae=n(twe,"STRONG",{});var JHr=s(Nae);jbo=r(JHr,"mbart"),JHr.forEach(t),Dbo=r(twe," \u2014 "),z$=n(twe,"A",{href:!0});var YHr=s(z$);Gbo=r(YHr,"MBartForCausalLM"),YHr.forEach(t),Obo=r(twe," (mBART model)"),twe.forEach(t),Vbo=i(q),qu=n(q,"LI",{});var awe=s(qu);jae=n(awe,"STRONG",{});var KHr=s(jae);Xbo=r(KHr,"megatron-bert"),KHr.forEach(t),zbo=r(awe," \u2014 "),Q$=n(awe,"A",{href:!0});var ZHr=s(Q$);Qbo=r(ZHr,"MegatronBertForCausalLM"),ZHr.forEach(t),Wbo=r(awe," (MegatronBert model)"),awe.forEach(t),Hbo=i(q),Nu=n(q,"LI",{});var nwe=s(Nu);Dae=n(nwe,"STRONG",{});var eUr=s(Dae);Ubo=r(eUr,"openai-gpt"),eUr.forEach(t),Jbo=r(nwe," \u2014 "),W$=n(nwe,"A",{href:!0});var oUr=s(W$);Ybo=r(oUr,"OpenAIGPTLMHeadModel"),oUr.forEach(t),Kbo=r(nwe," (OpenAI GPT model)"),nwe.forEach(t),Zbo=i(q),ju=n(q,"LI",{});var swe=s(ju);Gae=n(swe,"STRONG",{});var rUr=s(Gae);e5o=r(rUr,"pegasus"),rUr.forEach(t),o5o=r(swe," \u2014 "),H$=n(swe,"A",{href:!0});var tUr=s(H$);r5o=r(tUr,"PegasusForCausalLM"),tUr.forEach(t),t5o=r(swe," (Pegasus model)"),swe.forEach(t),a5o=i(q),Du=n(q,"LI",{});var lwe=s(Du);Oae=n(lwe,"STRONG",{});var aUr=s(Oae);n5o=r(aUr,"plbart"),aUr.forEach(t),s5o=r(lwe," \u2014 "),U$=n(lwe,"A",{href:!0});var nUr=s(U$);l5o=r(nUr,"PLBartForCausalLM"),nUr.forEach(t),i5o=r(lwe," (PLBart model)"),lwe.forEach(t),d5o=i(q),Gu=n(q,"LI",{});var iwe=s(Gu);Vae=n(iwe,"STRONG",{});var sUr=s(Vae);c5o=r(sUr,"prophetnet"),sUr.forEach(t),f5o=r(iwe," \u2014 "),J$=n(iwe,"A",{href:!0});var lUr=s(J$);m5o=r(lUr,"ProphetNetForCausalLM"),lUr.forEach(t),g5o=r(iwe," (ProphetNet model)"),iwe.forEach(t),h5o=i(q),Ou=n(q,"LI",{});var dwe=s(Ou);Xae=n(dwe,"STRONG",{});var iUr=s(Xae);p5o=r(iUr,"qdqbert"),iUr.forEach(t),_5o=r(dwe," \u2014 "),Y$=n(dwe,"A",{href:!0});var dUr=s(Y$);u5o=r(dUr,"QDQBertLMHeadModel"),dUr.forEach(t),b5o=r(dwe," (QDQBert model)"),dwe.forEach(t),F5o=i(q),Vu=n(q,"LI",{});var cwe=s(Vu);zae=n(cwe,"STRONG",{});var cUr=s(zae);v5o=r(cUr,"reformer"),cUr.forEach(t),T5o=r(cwe," \u2014 "),K$=n(cwe,"A",{href:!0});var fUr=s(K$);M5o=r(fUr,"ReformerModelWithLMHead"),fUr.forEach(t),E5o=r(cwe," (Reformer model)"),cwe.forEach(t),C5o=i(q),Xu=n(q,"LI",{});var fwe=s(Xu);Qae=n(fwe,"STRONG",{});var mUr=s(Qae);w5o=r(mUr,"rembert"),mUr.forEach(t),A5o=r(fwe," \u2014 "),Z$=n(fwe,"A",{href:!0});var gUr=s(Z$);y5o=r(gUr,"RemBertForCausalLM"),gUr.forEach(t),L5o=r(fwe," (RemBERT model)"),fwe.forEach(t),x5o=i(q),zu=n(q,"LI",{});var mwe=s(zu);Wae=n(mwe,"STRONG",{});var hUr=s(Wae);k5o=r(hUr,"roberta"),hUr.forEach(t),S5o=r(mwe," \u2014 "),eI=n(mwe,"A",{href:!0});var pUr=s(eI);R5o=r(pUr,"RobertaForCausalLM"),pUr.forEach(t),B5o=r(mwe," (RoBERTa model)"),mwe.forEach(t),P5o=i(q),Qu=n(q,"LI",{});var gwe=s(Qu);Hae=n(gwe,"STRONG",{});var _Ur=s(Hae);$5o=r(_Ur,"roformer"),_Ur.forEach(t),I5o=r(gwe," \u2014 "),oI=n(gwe,"A",{href:!0});var uUr=s(oI);q5o=r(uUr,"RoFormerForCausalLM"),uUr.forEach(t),N5o=r(gwe," (RoFormer model)"),gwe.forEach(t),j5o=i(q),Wu=n(q,"LI",{});var hwe=s(Wu);Uae=n(hwe,"STRONG",{});var bUr=s(Uae);D5o=r(bUr,"speech_to_text_2"),bUr.forEach(t),G5o=r(hwe," \u2014 "),rI=n(hwe,"A",{href:!0});var FUr=s(rI);O5o=r(FUr,"Speech2Text2ForCausalLM"),FUr.forEach(t),V5o=r(hwe," (Speech2Text2 model)"),hwe.forEach(t),X5o=i(q),Hu=n(q,"LI",{});var pwe=s(Hu);Jae=n(pwe,"STRONG",{});var vUr=s(Jae);z5o=r(vUr,"transfo-xl"),vUr.forEach(t),Q5o=r(pwe," \u2014 "),tI=n(pwe,"A",{href:!0});var TUr=s(tI);W5o=r(TUr,"TransfoXLLMHeadModel"),TUr.forEach(t),H5o=r(pwe," (Transformer-XL model)"),pwe.forEach(t),U5o=i(q),Uu=n(q,"LI",{});var _we=s(Uu);Yae=n(_we,"STRONG",{});var MUr=s(Yae);J5o=r(MUr,"trocr"),MUr.forEach(t),Y5o=r(_we," \u2014 "),aI=n(_we,"A",{href:!0});var EUr=s(aI);K5o=r(EUr,"TrOCRForCausalLM"),EUr.forEach(t),Z5o=r(_we," (TrOCR model)"),_we.forEach(t),e3o=i(q),Ju=n(q,"LI",{});var uwe=s(Ju);Kae=n(uwe,"STRONG",{});var CUr=s(Kae);o3o=r(CUr,"xglm"),CUr.forEach(t),r3o=r(uwe," \u2014 "),nI=n(uwe,"A",{href:!0});var wUr=s(nI);t3o=r(wUr,"XGLMForCausalLM"),wUr.forEach(t),a3o=r(uwe," (XGLM model)"),uwe.forEach(t),n3o=i(q),Yu=n(q,"LI",{});var bwe=s(Yu);Zae=n(bwe,"STRONG",{});var AUr=s(Zae);s3o=r(AUr,"xlm"),AUr.forEach(t),l3o=r(bwe," \u2014 "),sI=n(bwe,"A",{href:!0});var yUr=s(sI);i3o=r(yUr,"XLMWithLMHeadModel"),yUr.forEach(t),d3o=r(bwe," (XLM model)"),bwe.forEach(t),c3o=i(q),Ku=n(q,"LI",{});var Fwe=s(Ku);ene=n(Fwe,"STRONG",{});var LUr=s(ene);f3o=r(LUr,"xlm-prophetnet"),LUr.forEach(t),m3o=r(Fwe," \u2014 "),lI=n(Fwe,"A",{href:!0});var xUr=s(lI);g3o=r(xUr,"XLMProphetNetForCausalLM"),xUr.forEach(t),h3o=r(Fwe," (XLMProphetNet model)"),Fwe.forEach(t),p3o=i(q),Zu=n(q,"LI",{});var vwe=s(Zu);one=n(vwe,"STRONG",{});var kUr=s(one);_3o=r(kUr,"xlm-roberta"),kUr.forEach(t),u3o=r(vwe," \u2014 "),iI=n(vwe,"A",{href:!0});var SUr=s(iI);b3o=r(SUr,"XLMRobertaForCausalLM"),SUr.forEach(t),F3o=r(vwe," (XLM-RoBERTa model)"),vwe.forEach(t),v3o=i(q),e1=n(q,"LI",{});var Twe=s(e1);rne=n(Twe,"STRONG",{});var RUr=s(rne);T3o=r(RUr,"xlm-roberta-xl"),RUr.forEach(t),M3o=r(Twe," \u2014 "),dI=n(Twe,"A",{href:!0});var BUr=s(dI);E3o=r(BUr,"XLMRobertaXLForCausalLM"),BUr.forEach(t),C3o=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),w3o=i(q),o1=n(q,"LI",{});var Mwe=s(o1);tne=n(Mwe,"STRONG",{});var PUr=s(tne);A3o=r(PUr,"xlnet"),PUr.forEach(t),y3o=r(Mwe," \u2014 "),cI=n(Mwe,"A",{href:!0});var $Ur=s(cI);L3o=r($Ur,"XLNetLMHeadModel"),$Ur.forEach(t),x3o=r(Mwe," (XLNet model)"),Mwe.forEach(t),q.forEach(t),k3o=i(Ot),r1=n(Ot,"P",{});var Ewe=s(r1);S3o=r(Ewe,"The model is set in evaluation mode by default using "),ane=n(Ewe,"CODE",{});var IUr=s(ane);R3o=r(IUr,"model.eval()"),IUr.forEach(t),B3o=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nne=n(Ewe,"CODE",{});var qUr=s(nne);P3o=r(qUr,"model.train()"),qUr.forEach(t),Ewe.forEach(t),$3o=i(Ot),sne=n(Ot,"P",{});var NUr=s(sne);I3o=r(NUr,"Examples:"),NUr.forEach(t),q3o=i(Ot),m(bw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),hRe=i(c),nd=n(c,"H2",{class:!0});var EPe=s(nd);t1=n(EPe,"A",{id:!0,class:!0,href:!0});var jUr=s(t1);lne=n(jUr,"SPAN",{});var DUr=s(lne);m(Fw.$$.fragment,DUr),DUr.forEach(t),jUr.forEach(t),N3o=i(EPe),ine=n(EPe,"SPAN",{});var GUr=s(ine);j3o=r(GUr,"AutoModelForMaskedLM"),GUr.forEach(t),EPe.forEach(t),pRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(vw.$$.fragment,Ks),D3o=i(Ks),sd=n(Ks,"P",{});var aU=s(sd);G3o=r(aU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fI=n(aU,"A",{href:!0});var OUr=s(fI);O3o=r(OUr,"from_pretrained()"),OUr.forEach(t),V3o=r(aU," class method or the "),mI=n(aU,"A",{href:!0});var VUr=s(mI);X3o=r(VUr,"from_config()"),VUr.forEach(t),z3o=r(aU,` class
method.`),aU.forEach(t),Q3o=i(Ks),Tw=n(Ks,"P",{});var CPe=s(Tw);W3o=r(CPe,"This class cannot be instantiated directly using "),dne=n(CPe,"CODE",{});var XUr=s(dne);H3o=r(XUr,"__init__()"),XUr.forEach(t),U3o=r(CPe," (throws an error)."),CPe.forEach(t),J3o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Mw.$$.fragment,Zs),Y3o=i(Zs),cne=n(Zs,"P",{});var zUr=s(cne);K3o=r(zUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zUr.forEach(t),Z3o=i(Zs),ld=n(Zs,"P",{});var nU=s(ld);e2o=r(nU,`Note:
Loading a model from its configuration file does `),fne=n(nU,"STRONG",{});var QUr=s(fne);o2o=r(QUr,"not"),QUr.forEach(t),r2o=r(nU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=n(nU,"A",{href:!0});var WUr=s(gI);t2o=r(WUr,"from_pretrained()"),WUr.forEach(t),a2o=r(nU," to load the model weights."),nU.forEach(t),n2o=i(Zs),mne=n(Zs,"P",{});var HUr=s(mne);s2o=r(HUr,"Examples:"),HUr.forEach(t),l2o=i(Zs),m(Ew.$$.fragment,Zs),Zs.forEach(t),i2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(Cw.$$.fragment,Vt),d2o=i(Vt),gne=n(Vt,"P",{});var UUr=s(gne);c2o=r(UUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UUr.forEach(t),f2o=i(Vt),Wa=n(Vt,"P",{});var wE=s(Wa);m2o=r(wE,"The model class to instantiate is selected based on the "),hne=n(wE,"CODE",{});var JUr=s(hne);g2o=r(JUr,"model_type"),JUr.forEach(t),h2o=r(wE,` property of the config object (either
passed as an argument or loaded from `),pne=n(wE,"CODE",{});var YUr=s(pne);p2o=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),_2o=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=n(wE,"CODE",{});var KUr=s(_ne);u2o=r(KUr,"pretrained_model_name_or_path"),KUr.forEach(t),b2o=r(wE,":"),wE.forEach(t),F2o=i(Vt),I=n(Vt,"UL",{});var N=s(I);a1=n(N,"LI",{});var Cwe=s(a1);une=n(Cwe,"STRONG",{});var ZUr=s(une);v2o=r(ZUr,"albert"),ZUr.forEach(t),T2o=r(Cwe," \u2014 "),hI=n(Cwe,"A",{href:!0});var eJr=s(hI);M2o=r(eJr,"AlbertForMaskedLM"),eJr.forEach(t),E2o=r(Cwe," (ALBERT model)"),Cwe.forEach(t),C2o=i(N),n1=n(N,"LI",{});var wwe=s(n1);bne=n(wwe,"STRONG",{});var oJr=s(bne);w2o=r(oJr,"bart"),oJr.forEach(t),A2o=r(wwe," \u2014 "),pI=n(wwe,"A",{href:!0});var rJr=s(pI);y2o=r(rJr,"BartForConditionalGeneration"),rJr.forEach(t),L2o=r(wwe," (BART model)"),wwe.forEach(t),x2o=i(N),s1=n(N,"LI",{});var Awe=s(s1);Fne=n(Awe,"STRONG",{});var tJr=s(Fne);k2o=r(tJr,"bert"),tJr.forEach(t),S2o=r(Awe," \u2014 "),_I=n(Awe,"A",{href:!0});var aJr=s(_I);R2o=r(aJr,"BertForMaskedLM"),aJr.forEach(t),B2o=r(Awe," (BERT model)"),Awe.forEach(t),P2o=i(N),l1=n(N,"LI",{});var ywe=s(l1);vne=n(ywe,"STRONG",{});var nJr=s(vne);$2o=r(nJr,"big_bird"),nJr.forEach(t),I2o=r(ywe," \u2014 "),uI=n(ywe,"A",{href:!0});var sJr=s(uI);q2o=r(sJr,"BigBirdForMaskedLM"),sJr.forEach(t),N2o=r(ywe," (BigBird model)"),ywe.forEach(t),j2o=i(N),i1=n(N,"LI",{});var Lwe=s(i1);Tne=n(Lwe,"STRONG",{});var lJr=s(Tne);D2o=r(lJr,"camembert"),lJr.forEach(t),G2o=r(Lwe," \u2014 "),bI=n(Lwe,"A",{href:!0});var iJr=s(bI);O2o=r(iJr,"CamembertForMaskedLM"),iJr.forEach(t),V2o=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),X2o=i(N),d1=n(N,"LI",{});var xwe=s(d1);Mne=n(xwe,"STRONG",{});var dJr=s(Mne);z2o=r(dJr,"convbert"),dJr.forEach(t),Q2o=r(xwe," \u2014 "),FI=n(xwe,"A",{href:!0});var cJr=s(FI);W2o=r(cJr,"ConvBertForMaskedLM"),cJr.forEach(t),H2o=r(xwe," (ConvBERT model)"),xwe.forEach(t),U2o=i(N),c1=n(N,"LI",{});var kwe=s(c1);Ene=n(kwe,"STRONG",{});var fJr=s(Ene);J2o=r(fJr,"data2vec-text"),fJr.forEach(t),Y2o=r(kwe," \u2014 "),vI=n(kwe,"A",{href:!0});var mJr=s(vI);K2o=r(mJr,"Data2VecTextForMaskedLM"),mJr.forEach(t),Z2o=r(kwe," (Data2VecText model)"),kwe.forEach(t),eFo=i(N),f1=n(N,"LI",{});var Swe=s(f1);Cne=n(Swe,"STRONG",{});var gJr=s(Cne);oFo=r(gJr,"deberta"),gJr.forEach(t),rFo=r(Swe," \u2014 "),TI=n(Swe,"A",{href:!0});var hJr=s(TI);tFo=r(hJr,"DebertaForMaskedLM"),hJr.forEach(t),aFo=r(Swe," (DeBERTa model)"),Swe.forEach(t),nFo=i(N),m1=n(N,"LI",{});var Rwe=s(m1);wne=n(Rwe,"STRONG",{});var pJr=s(wne);sFo=r(pJr,"deberta-v2"),pJr.forEach(t),lFo=r(Rwe," \u2014 "),MI=n(Rwe,"A",{href:!0});var _Jr=s(MI);iFo=r(_Jr,"DebertaV2ForMaskedLM"),_Jr.forEach(t),dFo=r(Rwe," (DeBERTa-v2 model)"),Rwe.forEach(t),cFo=i(N),g1=n(N,"LI",{});var Bwe=s(g1);Ane=n(Bwe,"STRONG",{});var uJr=s(Ane);fFo=r(uJr,"distilbert"),uJr.forEach(t),mFo=r(Bwe," \u2014 "),EI=n(Bwe,"A",{href:!0});var bJr=s(EI);gFo=r(bJr,"DistilBertForMaskedLM"),bJr.forEach(t),hFo=r(Bwe," (DistilBERT model)"),Bwe.forEach(t),pFo=i(N),h1=n(N,"LI",{});var Pwe=s(h1);yne=n(Pwe,"STRONG",{});var FJr=s(yne);_Fo=r(FJr,"electra"),FJr.forEach(t),uFo=r(Pwe," \u2014 "),CI=n(Pwe,"A",{href:!0});var vJr=s(CI);bFo=r(vJr,"ElectraForMaskedLM"),vJr.forEach(t),FFo=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),vFo=i(N),p1=n(N,"LI",{});var $we=s(p1);Lne=n($we,"STRONG",{});var TJr=s(Lne);TFo=r(TJr,"flaubert"),TJr.forEach(t),MFo=r($we," \u2014 "),wI=n($we,"A",{href:!0});var MJr=s(wI);EFo=r(MJr,"FlaubertWithLMHeadModel"),MJr.forEach(t),CFo=r($we," (FlauBERT model)"),$we.forEach(t),wFo=i(N),_1=n(N,"LI",{});var Iwe=s(_1);xne=n(Iwe,"STRONG",{});var EJr=s(xne);AFo=r(EJr,"fnet"),EJr.forEach(t),yFo=r(Iwe," \u2014 "),AI=n(Iwe,"A",{href:!0});var CJr=s(AI);LFo=r(CJr,"FNetForMaskedLM"),CJr.forEach(t),xFo=r(Iwe," (FNet model)"),Iwe.forEach(t),kFo=i(N),u1=n(N,"LI",{});var qwe=s(u1);kne=n(qwe,"STRONG",{});var wJr=s(kne);SFo=r(wJr,"funnel"),wJr.forEach(t),RFo=r(qwe," \u2014 "),yI=n(qwe,"A",{href:!0});var AJr=s(yI);BFo=r(AJr,"FunnelForMaskedLM"),AJr.forEach(t),PFo=r(qwe," (Funnel Transformer model)"),qwe.forEach(t),$Fo=i(N),b1=n(N,"LI",{});var Nwe=s(b1);Sne=n(Nwe,"STRONG",{});var yJr=s(Sne);IFo=r(yJr,"ibert"),yJr.forEach(t),qFo=r(Nwe," \u2014 "),LI=n(Nwe,"A",{href:!0});var LJr=s(LI);NFo=r(LJr,"IBertForMaskedLM"),LJr.forEach(t),jFo=r(Nwe," (I-BERT model)"),Nwe.forEach(t),DFo=i(N),F1=n(N,"LI",{});var jwe=s(F1);Rne=n(jwe,"STRONG",{});var xJr=s(Rne);GFo=r(xJr,"layoutlm"),xJr.forEach(t),OFo=r(jwe," \u2014 "),xI=n(jwe,"A",{href:!0});var kJr=s(xI);VFo=r(kJr,"LayoutLMForMaskedLM"),kJr.forEach(t),XFo=r(jwe," (LayoutLM model)"),jwe.forEach(t),zFo=i(N),v1=n(N,"LI",{});var Dwe=s(v1);Bne=n(Dwe,"STRONG",{});var SJr=s(Bne);QFo=r(SJr,"longformer"),SJr.forEach(t),WFo=r(Dwe," \u2014 "),kI=n(Dwe,"A",{href:!0});var RJr=s(kI);HFo=r(RJr,"LongformerForMaskedLM"),RJr.forEach(t),UFo=r(Dwe," (Longformer model)"),Dwe.forEach(t),JFo=i(N),T1=n(N,"LI",{});var Gwe=s(T1);Pne=n(Gwe,"STRONG",{});var BJr=s(Pne);YFo=r(BJr,"mbart"),BJr.forEach(t),KFo=r(Gwe," \u2014 "),SI=n(Gwe,"A",{href:!0});var PJr=s(SI);ZFo=r(PJr,"MBartForConditionalGeneration"),PJr.forEach(t),evo=r(Gwe," (mBART model)"),Gwe.forEach(t),ovo=i(N),M1=n(N,"LI",{});var Owe=s(M1);$ne=n(Owe,"STRONG",{});var $Jr=s($ne);rvo=r($Jr,"megatron-bert"),$Jr.forEach(t),tvo=r(Owe," \u2014 "),RI=n(Owe,"A",{href:!0});var IJr=s(RI);avo=r(IJr,"MegatronBertForMaskedLM"),IJr.forEach(t),nvo=r(Owe," (MegatronBert model)"),Owe.forEach(t),svo=i(N),E1=n(N,"LI",{});var Vwe=s(E1);Ine=n(Vwe,"STRONG",{});var qJr=s(Ine);lvo=r(qJr,"mobilebert"),qJr.forEach(t),ivo=r(Vwe," \u2014 "),BI=n(Vwe,"A",{href:!0});var NJr=s(BI);dvo=r(NJr,"MobileBertForMaskedLM"),NJr.forEach(t),cvo=r(Vwe," (MobileBERT model)"),Vwe.forEach(t),fvo=i(N),C1=n(N,"LI",{});var Xwe=s(C1);qne=n(Xwe,"STRONG",{});var jJr=s(qne);mvo=r(jJr,"mpnet"),jJr.forEach(t),gvo=r(Xwe," \u2014 "),PI=n(Xwe,"A",{href:!0});var DJr=s(PI);hvo=r(DJr,"MPNetForMaskedLM"),DJr.forEach(t),pvo=r(Xwe," (MPNet model)"),Xwe.forEach(t),_vo=i(N),w1=n(N,"LI",{});var zwe=s(w1);Nne=n(zwe,"STRONG",{});var GJr=s(Nne);uvo=r(GJr,"nystromformer"),GJr.forEach(t),bvo=r(zwe," \u2014 "),$I=n(zwe,"A",{href:!0});var OJr=s($I);Fvo=r(OJr,"NystromformerForMaskedLM"),OJr.forEach(t),vvo=r(zwe," (Nystromformer model)"),zwe.forEach(t),Tvo=i(N),A1=n(N,"LI",{});var Qwe=s(A1);jne=n(Qwe,"STRONG",{});var VJr=s(jne);Mvo=r(VJr,"perceiver"),VJr.forEach(t),Evo=r(Qwe," \u2014 "),II=n(Qwe,"A",{href:!0});var XJr=s(II);Cvo=r(XJr,"PerceiverForMaskedLM"),XJr.forEach(t),wvo=r(Qwe," (Perceiver model)"),Qwe.forEach(t),Avo=i(N),y1=n(N,"LI",{});var Wwe=s(y1);Dne=n(Wwe,"STRONG",{});var zJr=s(Dne);yvo=r(zJr,"qdqbert"),zJr.forEach(t),Lvo=r(Wwe," \u2014 "),qI=n(Wwe,"A",{href:!0});var QJr=s(qI);xvo=r(QJr,"QDQBertForMaskedLM"),QJr.forEach(t),kvo=r(Wwe," (QDQBert model)"),Wwe.forEach(t),Svo=i(N),L1=n(N,"LI",{});var Hwe=s(L1);Gne=n(Hwe,"STRONG",{});var WJr=s(Gne);Rvo=r(WJr,"reformer"),WJr.forEach(t),Bvo=r(Hwe," \u2014 "),NI=n(Hwe,"A",{href:!0});var HJr=s(NI);Pvo=r(HJr,"ReformerForMaskedLM"),HJr.forEach(t),$vo=r(Hwe," (Reformer model)"),Hwe.forEach(t),Ivo=i(N),x1=n(N,"LI",{});var Uwe=s(x1);One=n(Uwe,"STRONG",{});var UJr=s(One);qvo=r(UJr,"rembert"),UJr.forEach(t),Nvo=r(Uwe," \u2014 "),jI=n(Uwe,"A",{href:!0});var JJr=s(jI);jvo=r(JJr,"RemBertForMaskedLM"),JJr.forEach(t),Dvo=r(Uwe," (RemBERT model)"),Uwe.forEach(t),Gvo=i(N),k1=n(N,"LI",{});var Jwe=s(k1);Vne=n(Jwe,"STRONG",{});var YJr=s(Vne);Ovo=r(YJr,"roberta"),YJr.forEach(t),Vvo=r(Jwe," \u2014 "),DI=n(Jwe,"A",{href:!0});var KJr=s(DI);Xvo=r(KJr,"RobertaForMaskedLM"),KJr.forEach(t),zvo=r(Jwe," (RoBERTa model)"),Jwe.forEach(t),Qvo=i(N),S1=n(N,"LI",{});var Ywe=s(S1);Xne=n(Ywe,"STRONG",{});var ZJr=s(Xne);Wvo=r(ZJr,"roformer"),ZJr.forEach(t),Hvo=r(Ywe," \u2014 "),GI=n(Ywe,"A",{href:!0});var eYr=s(GI);Uvo=r(eYr,"RoFormerForMaskedLM"),eYr.forEach(t),Jvo=r(Ywe," (RoFormer model)"),Ywe.forEach(t),Yvo=i(N),R1=n(N,"LI",{});var Kwe=s(R1);zne=n(Kwe,"STRONG",{});var oYr=s(zne);Kvo=r(oYr,"squeezebert"),oYr.forEach(t),Zvo=r(Kwe," \u2014 "),OI=n(Kwe,"A",{href:!0});var rYr=s(OI);eTo=r(rYr,"SqueezeBertForMaskedLM"),rYr.forEach(t),oTo=r(Kwe," (SqueezeBERT model)"),Kwe.forEach(t),rTo=i(N),B1=n(N,"LI",{});var Zwe=s(B1);Qne=n(Zwe,"STRONG",{});var tYr=s(Qne);tTo=r(tYr,"tapas"),tYr.forEach(t),aTo=r(Zwe," \u2014 "),VI=n(Zwe,"A",{href:!0});var aYr=s(VI);nTo=r(aYr,"TapasForMaskedLM"),aYr.forEach(t),sTo=r(Zwe," (TAPAS model)"),Zwe.forEach(t),lTo=i(N),P1=n(N,"LI",{});var eAe=s(P1);Wne=n(eAe,"STRONG",{});var nYr=s(Wne);iTo=r(nYr,"wav2vec2"),nYr.forEach(t),dTo=r(eAe," \u2014 "),Hne=n(eAe,"CODE",{});var sYr=s(Hne);cTo=r(sYr,"Wav2Vec2ForMaskedLM"),sYr.forEach(t),fTo=r(eAe,"(Wav2Vec2 model)"),eAe.forEach(t),mTo=i(N),$1=n(N,"LI",{});var oAe=s($1);Une=n(oAe,"STRONG",{});var lYr=s(Une);gTo=r(lYr,"xlm"),lYr.forEach(t),hTo=r(oAe," \u2014 "),XI=n(oAe,"A",{href:!0});var iYr=s(XI);pTo=r(iYr,"XLMWithLMHeadModel"),iYr.forEach(t),_To=r(oAe," (XLM model)"),oAe.forEach(t),uTo=i(N),I1=n(N,"LI",{});var rAe=s(I1);Jne=n(rAe,"STRONG",{});var dYr=s(Jne);bTo=r(dYr,"xlm-roberta"),dYr.forEach(t),FTo=r(rAe," \u2014 "),zI=n(rAe,"A",{href:!0});var cYr=s(zI);vTo=r(cYr,"XLMRobertaForMaskedLM"),cYr.forEach(t),TTo=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),MTo=i(N),q1=n(N,"LI",{});var tAe=s(q1);Yne=n(tAe,"STRONG",{});var fYr=s(Yne);ETo=r(fYr,"xlm-roberta-xl"),fYr.forEach(t),CTo=r(tAe," \u2014 "),QI=n(tAe,"A",{href:!0});var mYr=s(QI);wTo=r(mYr,"XLMRobertaXLForMaskedLM"),mYr.forEach(t),ATo=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),yTo=i(N),N1=n(N,"LI",{});var aAe=s(N1);Kne=n(aAe,"STRONG",{});var gYr=s(Kne);LTo=r(gYr,"yoso"),gYr.forEach(t),xTo=r(aAe," \u2014 "),WI=n(aAe,"A",{href:!0});var hYr=s(WI);kTo=r(hYr,"YosoForMaskedLM"),hYr.forEach(t),STo=r(aAe," (YOSO model)"),aAe.forEach(t),N.forEach(t),RTo=i(Vt),j1=n(Vt,"P",{});var nAe=s(j1);BTo=r(nAe,"The model is set in evaluation mode by default using "),Zne=n(nAe,"CODE",{});var pYr=s(Zne);PTo=r(pYr,"model.eval()"),pYr.forEach(t),$To=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=n(nAe,"CODE",{});var _Yr=s(ese);ITo=r(_Yr,"model.train()"),_Yr.forEach(t),nAe.forEach(t),qTo=i(Vt),ose=n(Vt,"P",{});var uYr=s(ose);NTo=r(uYr,"Examples:"),uYr.forEach(t),jTo=i(Vt),m(ww.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),_Re=i(c),id=n(c,"H2",{class:!0});var wPe=s(id);D1=n(wPe,"A",{id:!0,class:!0,href:!0});var bYr=s(D1);rse=n(bYr,"SPAN",{});var FYr=s(rse);m(Aw.$$.fragment,FYr),FYr.forEach(t),bYr.forEach(t),DTo=i(wPe),tse=n(wPe,"SPAN",{});var vYr=s(tse);GTo=r(vYr,"AutoModelForSeq2SeqLM"),vYr.forEach(t),wPe.forEach(t),uRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(yw.$$.fragment,el),OTo=i(el),dd=n(el,"P",{});var sU=s(dd);VTo=r(sU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HI=n(sU,"A",{href:!0});var TYr=s(HI);XTo=r(TYr,"from_pretrained()"),TYr.forEach(t),zTo=r(sU," class method or the "),UI=n(sU,"A",{href:!0});var MYr=s(UI);QTo=r(MYr,"from_config()"),MYr.forEach(t),WTo=r(sU,` class
method.`),sU.forEach(t),HTo=i(el),Lw=n(el,"P",{});var APe=s(Lw);UTo=r(APe,"This class cannot be instantiated directly using "),ase=n(APe,"CODE",{});var EYr=s(ase);JTo=r(EYr,"__init__()"),EYr.forEach(t),YTo=r(APe," (throws an error)."),APe.forEach(t),KTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(xw.$$.fragment,ol),ZTo=i(ol),nse=n(ol,"P",{});var CYr=s(nse);eMo=r(CYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CYr.forEach(t),oMo=i(ol),cd=n(ol,"P",{});var lU=s(cd);rMo=r(lU,`Note:
Loading a model from its configuration file does `),sse=n(lU,"STRONG",{});var wYr=s(sse);tMo=r(wYr,"not"),wYr.forEach(t),aMo=r(lU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=n(lU,"A",{href:!0});var AYr=s(JI);nMo=r(AYr,"from_pretrained()"),AYr.forEach(t),sMo=r(lU," to load the model weights."),lU.forEach(t),lMo=i(ol),lse=n(ol,"P",{});var yYr=s(lse);iMo=r(yYr,"Examples:"),yYr.forEach(t),dMo=i(ol),m(kw.$$.fragment,ol),ol.forEach(t),cMo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(Sw.$$.fragment,Xt),fMo=i(Xt),ise=n(Xt,"P",{});var LYr=s(ise);mMo=r(LYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LYr.forEach(t),gMo=i(Xt),Ha=n(Xt,"P",{});var AE=s(Ha);hMo=r(AE,"The model class to instantiate is selected based on the "),dse=n(AE,"CODE",{});var xYr=s(dse);pMo=r(xYr,"model_type"),xYr.forEach(t),_Mo=r(AE,` property of the config object (either
passed as an argument or loaded from `),cse=n(AE,"CODE",{});var kYr=s(cse);uMo=r(kYr,"pretrained_model_name_or_path"),kYr.forEach(t),bMo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=n(AE,"CODE",{});var SYr=s(fse);FMo=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),vMo=r(AE,":"),AE.forEach(t),TMo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);G1=n(ie,"LI",{});var sAe=s(G1);mse=n(sAe,"STRONG",{});var RYr=s(mse);MMo=r(RYr,"bart"),RYr.forEach(t),EMo=r(sAe," \u2014 "),YI=n(sAe,"A",{href:!0});var BYr=s(YI);CMo=r(BYr,"BartForConditionalGeneration"),BYr.forEach(t),wMo=r(sAe," (BART model)"),sAe.forEach(t),AMo=i(ie),O1=n(ie,"LI",{});var lAe=s(O1);gse=n(lAe,"STRONG",{});var PYr=s(gse);yMo=r(PYr,"bigbird_pegasus"),PYr.forEach(t),LMo=r(lAe," \u2014 "),KI=n(lAe,"A",{href:!0});var $Yr=s(KI);xMo=r($Yr,"BigBirdPegasusForConditionalGeneration"),$Yr.forEach(t),kMo=r(lAe," (BigBirdPegasus model)"),lAe.forEach(t),SMo=i(ie),V1=n(ie,"LI",{});var iAe=s(V1);hse=n(iAe,"STRONG",{});var IYr=s(hse);RMo=r(IYr,"blenderbot"),IYr.forEach(t),BMo=r(iAe," \u2014 "),ZI=n(iAe,"A",{href:!0});var qYr=s(ZI);PMo=r(qYr,"BlenderbotForConditionalGeneration"),qYr.forEach(t),$Mo=r(iAe," (Blenderbot model)"),iAe.forEach(t),IMo=i(ie),X1=n(ie,"LI",{});var dAe=s(X1);pse=n(dAe,"STRONG",{});var NYr=s(pse);qMo=r(NYr,"blenderbot-small"),NYr.forEach(t),NMo=r(dAe," \u2014 "),eq=n(dAe,"A",{href:!0});var jYr=s(eq);jMo=r(jYr,"BlenderbotSmallForConditionalGeneration"),jYr.forEach(t),DMo=r(dAe," (BlenderbotSmall model)"),dAe.forEach(t),GMo=i(ie),z1=n(ie,"LI",{});var cAe=s(z1);_se=n(cAe,"STRONG",{});var DYr=s(_se);OMo=r(DYr,"encoder-decoder"),DYr.forEach(t),VMo=r(cAe," \u2014 "),oq=n(cAe,"A",{href:!0});var GYr=s(oq);XMo=r(GYr,"EncoderDecoderModel"),GYr.forEach(t),zMo=r(cAe," (Encoder decoder model)"),cAe.forEach(t),QMo=i(ie),Q1=n(ie,"LI",{});var fAe=s(Q1);use=n(fAe,"STRONG",{});var OYr=s(use);WMo=r(OYr,"fsmt"),OYr.forEach(t),HMo=r(fAe," \u2014 "),rq=n(fAe,"A",{href:!0});var VYr=s(rq);UMo=r(VYr,"FSMTForConditionalGeneration"),VYr.forEach(t),JMo=r(fAe," (FairSeq Machine-Translation model)"),fAe.forEach(t),YMo=i(ie),W1=n(ie,"LI",{});var mAe=s(W1);bse=n(mAe,"STRONG",{});var XYr=s(bse);KMo=r(XYr,"led"),XYr.forEach(t),ZMo=r(mAe," \u2014 "),tq=n(mAe,"A",{href:!0});var zYr=s(tq);e4o=r(zYr,"LEDForConditionalGeneration"),zYr.forEach(t),o4o=r(mAe," (LED model)"),mAe.forEach(t),r4o=i(ie),H1=n(ie,"LI",{});var gAe=s(H1);Fse=n(gAe,"STRONG",{});var QYr=s(Fse);t4o=r(QYr,"m2m_100"),QYr.forEach(t),a4o=r(gAe," \u2014 "),aq=n(gAe,"A",{href:!0});var WYr=s(aq);n4o=r(WYr,"M2M100ForConditionalGeneration"),WYr.forEach(t),s4o=r(gAe," (M2M100 model)"),gAe.forEach(t),l4o=i(ie),U1=n(ie,"LI",{});var hAe=s(U1);vse=n(hAe,"STRONG",{});var HYr=s(vse);i4o=r(HYr,"marian"),HYr.forEach(t),d4o=r(hAe," \u2014 "),nq=n(hAe,"A",{href:!0});var UYr=s(nq);c4o=r(UYr,"MarianMTModel"),UYr.forEach(t),f4o=r(hAe," (Marian model)"),hAe.forEach(t),m4o=i(ie),J1=n(ie,"LI",{});var pAe=s(J1);Tse=n(pAe,"STRONG",{});var JYr=s(Tse);g4o=r(JYr,"mbart"),JYr.forEach(t),h4o=r(pAe," \u2014 "),sq=n(pAe,"A",{href:!0});var YYr=s(sq);p4o=r(YYr,"MBartForConditionalGeneration"),YYr.forEach(t),_4o=r(pAe," (mBART model)"),pAe.forEach(t),u4o=i(ie),Y1=n(ie,"LI",{});var _Ae=s(Y1);Mse=n(_Ae,"STRONG",{});var KYr=s(Mse);b4o=r(KYr,"mt5"),KYr.forEach(t),F4o=r(_Ae," \u2014 "),lq=n(_Ae,"A",{href:!0});var ZYr=s(lq);v4o=r(ZYr,"MT5ForConditionalGeneration"),ZYr.forEach(t),T4o=r(_Ae," (mT5 model)"),_Ae.forEach(t),M4o=i(ie),K1=n(ie,"LI",{});var uAe=s(K1);Ese=n(uAe,"STRONG",{});var eKr=s(Ese);E4o=r(eKr,"pegasus"),eKr.forEach(t),C4o=r(uAe," \u2014 "),iq=n(uAe,"A",{href:!0});var oKr=s(iq);w4o=r(oKr,"PegasusForConditionalGeneration"),oKr.forEach(t),A4o=r(uAe," (Pegasus model)"),uAe.forEach(t),y4o=i(ie),Z1=n(ie,"LI",{});var bAe=s(Z1);Cse=n(bAe,"STRONG",{});var rKr=s(Cse);L4o=r(rKr,"plbart"),rKr.forEach(t),x4o=r(bAe," \u2014 "),dq=n(bAe,"A",{href:!0});var tKr=s(dq);k4o=r(tKr,"PLBartForConditionalGeneration"),tKr.forEach(t),S4o=r(bAe," (PLBart model)"),bAe.forEach(t),R4o=i(ie),e7=n(ie,"LI",{});var FAe=s(e7);wse=n(FAe,"STRONG",{});var aKr=s(wse);B4o=r(aKr,"prophetnet"),aKr.forEach(t),P4o=r(FAe," \u2014 "),cq=n(FAe,"A",{href:!0});var nKr=s(cq);$4o=r(nKr,"ProphetNetForConditionalGeneration"),nKr.forEach(t),I4o=r(FAe," (ProphetNet model)"),FAe.forEach(t),q4o=i(ie),o7=n(ie,"LI",{});var vAe=s(o7);Ase=n(vAe,"STRONG",{});var sKr=s(Ase);N4o=r(sKr,"t5"),sKr.forEach(t),j4o=r(vAe," \u2014 "),fq=n(vAe,"A",{href:!0});var lKr=s(fq);D4o=r(lKr,"T5ForConditionalGeneration"),lKr.forEach(t),G4o=r(vAe," (T5 model)"),vAe.forEach(t),O4o=i(ie),r7=n(ie,"LI",{});var TAe=s(r7);yse=n(TAe,"STRONG",{});var iKr=s(yse);V4o=r(iKr,"xlm-prophetnet"),iKr.forEach(t),X4o=r(TAe," \u2014 "),mq=n(TAe,"A",{href:!0});var dKr=s(mq);z4o=r(dKr,"XLMProphetNetForConditionalGeneration"),dKr.forEach(t),Q4o=r(TAe," (XLMProphetNet model)"),TAe.forEach(t),ie.forEach(t),W4o=i(Xt),t7=n(Xt,"P",{});var MAe=s(t7);H4o=r(MAe,"The model is set in evaluation mode by default using "),Lse=n(MAe,"CODE",{});var cKr=s(Lse);U4o=r(cKr,"model.eval()"),cKr.forEach(t),J4o=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=n(MAe,"CODE",{});var fKr=s(xse);Y4o=r(fKr,"model.train()"),fKr.forEach(t),MAe.forEach(t),K4o=i(Xt),kse=n(Xt,"P",{});var mKr=s(kse);Z4o=r(mKr,"Examples:"),mKr.forEach(t),eEo=i(Xt),m(Rw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),bRe=i(c),fd=n(c,"H2",{class:!0});var yPe=s(fd);a7=n(yPe,"A",{id:!0,class:!0,href:!0});var gKr=s(a7);Sse=n(gKr,"SPAN",{});var hKr=s(Sse);m(Bw.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),oEo=i(yPe),Rse=n(yPe,"SPAN",{});var pKr=s(Rse);rEo=r(pKr,"AutoModelForSequenceClassification"),pKr.forEach(t),yPe.forEach(t),FRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Pw.$$.fragment,rl),tEo=i(rl),md=n(rl,"P",{});var iU=s(md);aEo=r(iU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gq=n(iU,"A",{href:!0});var _Kr=s(gq);nEo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),sEo=r(iU," class method or the "),hq=n(iU,"A",{href:!0});var uKr=s(hq);lEo=r(uKr,"from_config()"),uKr.forEach(t),iEo=r(iU,` class
method.`),iU.forEach(t),dEo=i(rl),$w=n(rl,"P",{});var LPe=s($w);cEo=r(LPe,"This class cannot be instantiated directly using "),Bse=n(LPe,"CODE",{});var bKr=s(Bse);fEo=r(bKr,"__init__()"),bKr.forEach(t),mEo=r(LPe," (throws an error)."),LPe.forEach(t),gEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Iw.$$.fragment,tl),hEo=i(tl),Pse=n(tl,"P",{});var FKr=s(Pse);pEo=r(FKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FKr.forEach(t),_Eo=i(tl),gd=n(tl,"P",{});var dU=s(gd);uEo=r(dU,`Note:
Loading a model from its configuration file does `),$se=n(dU,"STRONG",{});var vKr=s($se);bEo=r(vKr,"not"),vKr.forEach(t),FEo=r(dU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=n(dU,"A",{href:!0});var TKr=s(pq);vEo=r(TKr,"from_pretrained()"),TKr.forEach(t),TEo=r(dU," to load the model weights."),dU.forEach(t),MEo=i(tl),Ise=n(tl,"P",{});var MKr=s(Ise);EEo=r(MKr,"Examples:"),MKr.forEach(t),CEo=i(tl),m(qw.$$.fragment,tl),tl.forEach(t),wEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(Nw.$$.fragment,zt),AEo=i(zt),qse=n(zt,"P",{});var EKr=s(qse);yEo=r(EKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EKr.forEach(t),LEo=i(zt),Ua=n(zt,"P",{});var yE=s(Ua);xEo=r(yE,"The model class to instantiate is selected based on the "),Nse=n(yE,"CODE",{});var CKr=s(Nse);kEo=r(CKr,"model_type"),CKr.forEach(t),SEo=r(yE,` property of the config object (either
passed as an argument or loaded from `),jse=n(yE,"CODE",{});var wKr=s(jse);REo=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),BEo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=n(yE,"CODE",{});var AKr=s(Dse);PEo=r(AKr,"pretrained_model_name_or_path"),AKr.forEach(t),$Eo=r(yE,":"),yE.forEach(t),IEo=i(zt),y=n(zt,"UL",{});var L=s(y);n7=n(L,"LI",{});var EAe=s(n7);Gse=n(EAe,"STRONG",{});var yKr=s(Gse);qEo=r(yKr,"albert"),yKr.forEach(t),NEo=r(EAe," \u2014 "),_q=n(EAe,"A",{href:!0});var LKr=s(_q);jEo=r(LKr,"AlbertForSequenceClassification"),LKr.forEach(t),DEo=r(EAe," (ALBERT model)"),EAe.forEach(t),GEo=i(L),s7=n(L,"LI",{});var CAe=s(s7);Ose=n(CAe,"STRONG",{});var xKr=s(Ose);OEo=r(xKr,"bart"),xKr.forEach(t),VEo=r(CAe," \u2014 "),uq=n(CAe,"A",{href:!0});var kKr=s(uq);XEo=r(kKr,"BartForSequenceClassification"),kKr.forEach(t),zEo=r(CAe," (BART model)"),CAe.forEach(t),QEo=i(L),l7=n(L,"LI",{});var wAe=s(l7);Vse=n(wAe,"STRONG",{});var SKr=s(Vse);WEo=r(SKr,"bert"),SKr.forEach(t),HEo=r(wAe," \u2014 "),bq=n(wAe,"A",{href:!0});var RKr=s(bq);UEo=r(RKr,"BertForSequenceClassification"),RKr.forEach(t),JEo=r(wAe," (BERT model)"),wAe.forEach(t),YEo=i(L),i7=n(L,"LI",{});var AAe=s(i7);Xse=n(AAe,"STRONG",{});var BKr=s(Xse);KEo=r(BKr,"big_bird"),BKr.forEach(t),ZEo=r(AAe," \u2014 "),Fq=n(AAe,"A",{href:!0});var PKr=s(Fq);eCo=r(PKr,"BigBirdForSequenceClassification"),PKr.forEach(t),oCo=r(AAe," (BigBird model)"),AAe.forEach(t),rCo=i(L),d7=n(L,"LI",{});var yAe=s(d7);zse=n(yAe,"STRONG",{});var $Kr=s(zse);tCo=r($Kr,"bigbird_pegasus"),$Kr.forEach(t),aCo=r(yAe," \u2014 "),vq=n(yAe,"A",{href:!0});var IKr=s(vq);nCo=r(IKr,"BigBirdPegasusForSequenceClassification"),IKr.forEach(t),sCo=r(yAe," (BigBirdPegasus model)"),yAe.forEach(t),lCo=i(L),c7=n(L,"LI",{});var LAe=s(c7);Qse=n(LAe,"STRONG",{});var qKr=s(Qse);iCo=r(qKr,"camembert"),qKr.forEach(t),dCo=r(LAe," \u2014 "),Tq=n(LAe,"A",{href:!0});var NKr=s(Tq);cCo=r(NKr,"CamembertForSequenceClassification"),NKr.forEach(t),fCo=r(LAe," (CamemBERT model)"),LAe.forEach(t),mCo=i(L),f7=n(L,"LI",{});var xAe=s(f7);Wse=n(xAe,"STRONG",{});var jKr=s(Wse);gCo=r(jKr,"canine"),jKr.forEach(t),hCo=r(xAe," \u2014 "),Mq=n(xAe,"A",{href:!0});var DKr=s(Mq);pCo=r(DKr,"CanineForSequenceClassification"),DKr.forEach(t),_Co=r(xAe," (Canine model)"),xAe.forEach(t),uCo=i(L),m7=n(L,"LI",{});var kAe=s(m7);Hse=n(kAe,"STRONG",{});var GKr=s(Hse);bCo=r(GKr,"convbert"),GKr.forEach(t),FCo=r(kAe," \u2014 "),Eq=n(kAe,"A",{href:!0});var OKr=s(Eq);vCo=r(OKr,"ConvBertForSequenceClassification"),OKr.forEach(t),TCo=r(kAe," (ConvBERT model)"),kAe.forEach(t),MCo=i(L),g7=n(L,"LI",{});var SAe=s(g7);Use=n(SAe,"STRONG",{});var VKr=s(Use);ECo=r(VKr,"ctrl"),VKr.forEach(t),CCo=r(SAe," \u2014 "),Cq=n(SAe,"A",{href:!0});var XKr=s(Cq);wCo=r(XKr,"CTRLForSequenceClassification"),XKr.forEach(t),ACo=r(SAe," (CTRL model)"),SAe.forEach(t),yCo=i(L),h7=n(L,"LI",{});var RAe=s(h7);Jse=n(RAe,"STRONG",{});var zKr=s(Jse);LCo=r(zKr,"data2vec-text"),zKr.forEach(t),xCo=r(RAe," \u2014 "),wq=n(RAe,"A",{href:!0});var QKr=s(wq);kCo=r(QKr,"Data2VecTextForSequenceClassification"),QKr.forEach(t),SCo=r(RAe," (Data2VecText model)"),RAe.forEach(t),RCo=i(L),p7=n(L,"LI",{});var BAe=s(p7);Yse=n(BAe,"STRONG",{});var WKr=s(Yse);BCo=r(WKr,"deberta"),WKr.forEach(t),PCo=r(BAe," \u2014 "),Aq=n(BAe,"A",{href:!0});var HKr=s(Aq);$Co=r(HKr,"DebertaForSequenceClassification"),HKr.forEach(t),ICo=r(BAe," (DeBERTa model)"),BAe.forEach(t),qCo=i(L),_7=n(L,"LI",{});var PAe=s(_7);Kse=n(PAe,"STRONG",{});var UKr=s(Kse);NCo=r(UKr,"deberta-v2"),UKr.forEach(t),jCo=r(PAe," \u2014 "),yq=n(PAe,"A",{href:!0});var JKr=s(yq);DCo=r(JKr,"DebertaV2ForSequenceClassification"),JKr.forEach(t),GCo=r(PAe," (DeBERTa-v2 model)"),PAe.forEach(t),OCo=i(L),u7=n(L,"LI",{});var $Ae=s(u7);Zse=n($Ae,"STRONG",{});var YKr=s(Zse);VCo=r(YKr,"distilbert"),YKr.forEach(t),XCo=r($Ae," \u2014 "),Lq=n($Ae,"A",{href:!0});var KKr=s(Lq);zCo=r(KKr,"DistilBertForSequenceClassification"),KKr.forEach(t),QCo=r($Ae," (DistilBERT model)"),$Ae.forEach(t),WCo=i(L),b7=n(L,"LI",{});var IAe=s(b7);ele=n(IAe,"STRONG",{});var ZKr=s(ele);HCo=r(ZKr,"electra"),ZKr.forEach(t),UCo=r(IAe," \u2014 "),xq=n(IAe,"A",{href:!0});var eZr=s(xq);JCo=r(eZr,"ElectraForSequenceClassification"),eZr.forEach(t),YCo=r(IAe," (ELECTRA model)"),IAe.forEach(t),KCo=i(L),F7=n(L,"LI",{});var qAe=s(F7);ole=n(qAe,"STRONG",{});var oZr=s(ole);ZCo=r(oZr,"flaubert"),oZr.forEach(t),ewo=r(qAe," \u2014 "),kq=n(qAe,"A",{href:!0});var rZr=s(kq);owo=r(rZr,"FlaubertForSequenceClassification"),rZr.forEach(t),rwo=r(qAe," (FlauBERT model)"),qAe.forEach(t),two=i(L),v7=n(L,"LI",{});var NAe=s(v7);rle=n(NAe,"STRONG",{});var tZr=s(rle);awo=r(tZr,"fnet"),tZr.forEach(t),nwo=r(NAe," \u2014 "),Sq=n(NAe,"A",{href:!0});var aZr=s(Sq);swo=r(aZr,"FNetForSequenceClassification"),aZr.forEach(t),lwo=r(NAe," (FNet model)"),NAe.forEach(t),iwo=i(L),T7=n(L,"LI",{});var jAe=s(T7);tle=n(jAe,"STRONG",{});var nZr=s(tle);dwo=r(nZr,"funnel"),nZr.forEach(t),cwo=r(jAe," \u2014 "),Rq=n(jAe,"A",{href:!0});var sZr=s(Rq);fwo=r(sZr,"FunnelForSequenceClassification"),sZr.forEach(t),mwo=r(jAe," (Funnel Transformer model)"),jAe.forEach(t),gwo=i(L),M7=n(L,"LI",{});var DAe=s(M7);ale=n(DAe,"STRONG",{});var lZr=s(ale);hwo=r(lZr,"gpt2"),lZr.forEach(t),pwo=r(DAe," \u2014 "),Bq=n(DAe,"A",{href:!0});var iZr=s(Bq);_wo=r(iZr,"GPT2ForSequenceClassification"),iZr.forEach(t),uwo=r(DAe," (OpenAI GPT-2 model)"),DAe.forEach(t),bwo=i(L),E7=n(L,"LI",{});var GAe=s(E7);nle=n(GAe,"STRONG",{});var dZr=s(nle);Fwo=r(dZr,"gpt_neo"),dZr.forEach(t),vwo=r(GAe," \u2014 "),Pq=n(GAe,"A",{href:!0});var cZr=s(Pq);Two=r(cZr,"GPTNeoForSequenceClassification"),cZr.forEach(t),Mwo=r(GAe," (GPT Neo model)"),GAe.forEach(t),Ewo=i(L),C7=n(L,"LI",{});var OAe=s(C7);sle=n(OAe,"STRONG",{});var fZr=s(sle);Cwo=r(fZr,"gptj"),fZr.forEach(t),wwo=r(OAe," \u2014 "),$q=n(OAe,"A",{href:!0});var mZr=s($q);Awo=r(mZr,"GPTJForSequenceClassification"),mZr.forEach(t),ywo=r(OAe," (GPT-J model)"),OAe.forEach(t),Lwo=i(L),w7=n(L,"LI",{});var VAe=s(w7);lle=n(VAe,"STRONG",{});var gZr=s(lle);xwo=r(gZr,"ibert"),gZr.forEach(t),kwo=r(VAe," \u2014 "),Iq=n(VAe,"A",{href:!0});var hZr=s(Iq);Swo=r(hZr,"IBertForSequenceClassification"),hZr.forEach(t),Rwo=r(VAe," (I-BERT model)"),VAe.forEach(t),Bwo=i(L),A7=n(L,"LI",{});var XAe=s(A7);ile=n(XAe,"STRONG",{});var pZr=s(ile);Pwo=r(pZr,"layoutlm"),pZr.forEach(t),$wo=r(XAe," \u2014 "),qq=n(XAe,"A",{href:!0});var _Zr=s(qq);Iwo=r(_Zr,"LayoutLMForSequenceClassification"),_Zr.forEach(t),qwo=r(XAe," (LayoutLM model)"),XAe.forEach(t),Nwo=i(L),y7=n(L,"LI",{});var zAe=s(y7);dle=n(zAe,"STRONG",{});var uZr=s(dle);jwo=r(uZr,"layoutlmv2"),uZr.forEach(t),Dwo=r(zAe," \u2014 "),Nq=n(zAe,"A",{href:!0});var bZr=s(Nq);Gwo=r(bZr,"LayoutLMv2ForSequenceClassification"),bZr.forEach(t),Owo=r(zAe," (LayoutLMv2 model)"),zAe.forEach(t),Vwo=i(L),L7=n(L,"LI",{});var QAe=s(L7);cle=n(QAe,"STRONG",{});var FZr=s(cle);Xwo=r(FZr,"led"),FZr.forEach(t),zwo=r(QAe," \u2014 "),jq=n(QAe,"A",{href:!0});var vZr=s(jq);Qwo=r(vZr,"LEDForSequenceClassification"),vZr.forEach(t),Wwo=r(QAe," (LED model)"),QAe.forEach(t),Hwo=i(L),x7=n(L,"LI",{});var WAe=s(x7);fle=n(WAe,"STRONG",{});var TZr=s(fle);Uwo=r(TZr,"longformer"),TZr.forEach(t),Jwo=r(WAe," \u2014 "),Dq=n(WAe,"A",{href:!0});var MZr=s(Dq);Ywo=r(MZr,"LongformerForSequenceClassification"),MZr.forEach(t),Kwo=r(WAe," (Longformer model)"),WAe.forEach(t),Zwo=i(L),k7=n(L,"LI",{});var HAe=s(k7);mle=n(HAe,"STRONG",{});var EZr=s(mle);eAo=r(EZr,"mbart"),EZr.forEach(t),oAo=r(HAe," \u2014 "),Gq=n(HAe,"A",{href:!0});var CZr=s(Gq);rAo=r(CZr,"MBartForSequenceClassification"),CZr.forEach(t),tAo=r(HAe," (mBART model)"),HAe.forEach(t),aAo=i(L),S7=n(L,"LI",{});var UAe=s(S7);gle=n(UAe,"STRONG",{});var wZr=s(gle);nAo=r(wZr,"megatron-bert"),wZr.forEach(t),sAo=r(UAe," \u2014 "),Oq=n(UAe,"A",{href:!0});var AZr=s(Oq);lAo=r(AZr,"MegatronBertForSequenceClassification"),AZr.forEach(t),iAo=r(UAe," (MegatronBert model)"),UAe.forEach(t),dAo=i(L),R7=n(L,"LI",{});var JAe=s(R7);hle=n(JAe,"STRONG",{});var yZr=s(hle);cAo=r(yZr,"mobilebert"),yZr.forEach(t),fAo=r(JAe," \u2014 "),Vq=n(JAe,"A",{href:!0});var LZr=s(Vq);mAo=r(LZr,"MobileBertForSequenceClassification"),LZr.forEach(t),gAo=r(JAe," (MobileBERT model)"),JAe.forEach(t),hAo=i(L),B7=n(L,"LI",{});var YAe=s(B7);ple=n(YAe,"STRONG",{});var xZr=s(ple);pAo=r(xZr,"mpnet"),xZr.forEach(t),_Ao=r(YAe," \u2014 "),Xq=n(YAe,"A",{href:!0});var kZr=s(Xq);uAo=r(kZr,"MPNetForSequenceClassification"),kZr.forEach(t),bAo=r(YAe," (MPNet model)"),YAe.forEach(t),FAo=i(L),P7=n(L,"LI",{});var KAe=s(P7);_le=n(KAe,"STRONG",{});var SZr=s(_le);vAo=r(SZr,"nystromformer"),SZr.forEach(t),TAo=r(KAe," \u2014 "),zq=n(KAe,"A",{href:!0});var RZr=s(zq);MAo=r(RZr,"NystromformerForSequenceClassification"),RZr.forEach(t),EAo=r(KAe," (Nystromformer model)"),KAe.forEach(t),CAo=i(L),$7=n(L,"LI",{});var ZAe=s($7);ule=n(ZAe,"STRONG",{});var BZr=s(ule);wAo=r(BZr,"openai-gpt"),BZr.forEach(t),AAo=r(ZAe," \u2014 "),Qq=n(ZAe,"A",{href:!0});var PZr=s(Qq);yAo=r(PZr,"OpenAIGPTForSequenceClassification"),PZr.forEach(t),LAo=r(ZAe," (OpenAI GPT model)"),ZAe.forEach(t),xAo=i(L),I7=n(L,"LI",{});var e6e=s(I7);ble=n(e6e,"STRONG",{});var $Zr=s(ble);kAo=r($Zr,"perceiver"),$Zr.forEach(t),SAo=r(e6e," \u2014 "),Wq=n(e6e,"A",{href:!0});var IZr=s(Wq);RAo=r(IZr,"PerceiverForSequenceClassification"),IZr.forEach(t),BAo=r(e6e," (Perceiver model)"),e6e.forEach(t),PAo=i(L),q7=n(L,"LI",{});var o6e=s(q7);Fle=n(o6e,"STRONG",{});var qZr=s(Fle);$Ao=r(qZr,"plbart"),qZr.forEach(t),IAo=r(o6e," \u2014 "),Hq=n(o6e,"A",{href:!0});var NZr=s(Hq);qAo=r(NZr,"PLBartForSequenceClassification"),NZr.forEach(t),NAo=r(o6e," (PLBart model)"),o6e.forEach(t),jAo=i(L),N7=n(L,"LI",{});var r6e=s(N7);vle=n(r6e,"STRONG",{});var jZr=s(vle);DAo=r(jZr,"qdqbert"),jZr.forEach(t),GAo=r(r6e," \u2014 "),Uq=n(r6e,"A",{href:!0});var DZr=s(Uq);OAo=r(DZr,"QDQBertForSequenceClassification"),DZr.forEach(t),VAo=r(r6e," (QDQBert model)"),r6e.forEach(t),XAo=i(L),j7=n(L,"LI",{});var t6e=s(j7);Tle=n(t6e,"STRONG",{});var GZr=s(Tle);zAo=r(GZr,"reformer"),GZr.forEach(t),QAo=r(t6e," \u2014 "),Jq=n(t6e,"A",{href:!0});var OZr=s(Jq);WAo=r(OZr,"ReformerForSequenceClassification"),OZr.forEach(t),HAo=r(t6e," (Reformer model)"),t6e.forEach(t),UAo=i(L),D7=n(L,"LI",{});var a6e=s(D7);Mle=n(a6e,"STRONG",{});var VZr=s(Mle);JAo=r(VZr,"rembert"),VZr.forEach(t),YAo=r(a6e," \u2014 "),Yq=n(a6e,"A",{href:!0});var XZr=s(Yq);KAo=r(XZr,"RemBertForSequenceClassification"),XZr.forEach(t),ZAo=r(a6e," (RemBERT model)"),a6e.forEach(t),e6o=i(L),G7=n(L,"LI",{});var n6e=s(G7);Ele=n(n6e,"STRONG",{});var zZr=s(Ele);o6o=r(zZr,"roberta"),zZr.forEach(t),r6o=r(n6e," \u2014 "),Kq=n(n6e,"A",{href:!0});var QZr=s(Kq);t6o=r(QZr,"RobertaForSequenceClassification"),QZr.forEach(t),a6o=r(n6e," (RoBERTa model)"),n6e.forEach(t),n6o=i(L),O7=n(L,"LI",{});var s6e=s(O7);Cle=n(s6e,"STRONG",{});var WZr=s(Cle);s6o=r(WZr,"roformer"),WZr.forEach(t),l6o=r(s6e," \u2014 "),Zq=n(s6e,"A",{href:!0});var HZr=s(Zq);i6o=r(HZr,"RoFormerForSequenceClassification"),HZr.forEach(t),d6o=r(s6e," (RoFormer model)"),s6e.forEach(t),c6o=i(L),V7=n(L,"LI",{});var l6e=s(V7);wle=n(l6e,"STRONG",{});var UZr=s(wle);f6o=r(UZr,"squeezebert"),UZr.forEach(t),m6o=r(l6e," \u2014 "),eN=n(l6e,"A",{href:!0});var JZr=s(eN);g6o=r(JZr,"SqueezeBertForSequenceClassification"),JZr.forEach(t),h6o=r(l6e," (SqueezeBERT model)"),l6e.forEach(t),p6o=i(L),X7=n(L,"LI",{});var i6e=s(X7);Ale=n(i6e,"STRONG",{});var YZr=s(Ale);_6o=r(YZr,"tapas"),YZr.forEach(t),u6o=r(i6e," \u2014 "),oN=n(i6e,"A",{href:!0});var KZr=s(oN);b6o=r(KZr,"TapasForSequenceClassification"),KZr.forEach(t),F6o=r(i6e," (TAPAS model)"),i6e.forEach(t),v6o=i(L),z7=n(L,"LI",{});var d6e=s(z7);yle=n(d6e,"STRONG",{});var ZZr=s(yle);T6o=r(ZZr,"transfo-xl"),ZZr.forEach(t),M6o=r(d6e," \u2014 "),rN=n(d6e,"A",{href:!0});var eet=s(rN);E6o=r(eet,"TransfoXLForSequenceClassification"),eet.forEach(t),C6o=r(d6e," (Transformer-XL model)"),d6e.forEach(t),w6o=i(L),Q7=n(L,"LI",{});var c6e=s(Q7);Lle=n(c6e,"STRONG",{});var oet=s(Lle);A6o=r(oet,"xlm"),oet.forEach(t),y6o=r(c6e," \u2014 "),tN=n(c6e,"A",{href:!0});var ret=s(tN);L6o=r(ret,"XLMForSequenceClassification"),ret.forEach(t),x6o=r(c6e," (XLM model)"),c6e.forEach(t),k6o=i(L),W7=n(L,"LI",{});var f6e=s(W7);xle=n(f6e,"STRONG",{});var tet=s(xle);S6o=r(tet,"xlm-roberta"),tet.forEach(t),R6o=r(f6e," \u2014 "),aN=n(f6e,"A",{href:!0});var aet=s(aN);B6o=r(aet,"XLMRobertaForSequenceClassification"),aet.forEach(t),P6o=r(f6e," (XLM-RoBERTa model)"),f6e.forEach(t),$6o=i(L),H7=n(L,"LI",{});var m6e=s(H7);kle=n(m6e,"STRONG",{});var net=s(kle);I6o=r(net,"xlm-roberta-xl"),net.forEach(t),q6o=r(m6e," \u2014 "),nN=n(m6e,"A",{href:!0});var set=s(nN);N6o=r(set,"XLMRobertaXLForSequenceClassification"),set.forEach(t),j6o=r(m6e," (XLM-RoBERTa-XL model)"),m6e.forEach(t),D6o=i(L),U7=n(L,"LI",{});var g6e=s(U7);Sle=n(g6e,"STRONG",{});var iet=s(Sle);G6o=r(iet,"xlnet"),iet.forEach(t),O6o=r(g6e," \u2014 "),sN=n(g6e,"A",{href:!0});var det=s(sN);V6o=r(det,"XLNetForSequenceClassification"),det.forEach(t),X6o=r(g6e," (XLNet model)"),g6e.forEach(t),z6o=i(L),J7=n(L,"LI",{});var h6e=s(J7);Rle=n(h6e,"STRONG",{});var cet=s(Rle);Q6o=r(cet,"yoso"),cet.forEach(t),W6o=r(h6e," \u2014 "),lN=n(h6e,"A",{href:!0});var fet=s(lN);H6o=r(fet,"YosoForSequenceClassification"),fet.forEach(t),U6o=r(h6e," (YOSO model)"),h6e.forEach(t),L.forEach(t),J6o=i(zt),Y7=n(zt,"P",{});var p6e=s(Y7);Y6o=r(p6e,"The model is set in evaluation mode by default using "),Ble=n(p6e,"CODE",{});var met=s(Ble);K6o=r(met,"model.eval()"),met.forEach(t),Z6o=r(p6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=n(p6e,"CODE",{});var get=s(Ple);e0o=r(get,"model.train()"),get.forEach(t),p6e.forEach(t),o0o=i(zt),$le=n(zt,"P",{});var het=s($le);r0o=r(het,"Examples:"),het.forEach(t),t0o=i(zt),m(jw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),vRe=i(c),hd=n(c,"H2",{class:!0});var xPe=s(hd);K7=n(xPe,"A",{id:!0,class:!0,href:!0});var pet=s(K7);Ile=n(pet,"SPAN",{});var _et=s(Ile);m(Dw.$$.fragment,_et),_et.forEach(t),pet.forEach(t),a0o=i(xPe),qle=n(xPe,"SPAN",{});var uet=s(qle);n0o=r(uet,"AutoModelForMultipleChoice"),uet.forEach(t),xPe.forEach(t),TRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Gw.$$.fragment,al),s0o=i(al),pd=n(al,"P",{});var cU=s(pd);l0o=r(cU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iN=n(cU,"A",{href:!0});var bet=s(iN);i0o=r(bet,"from_pretrained()"),bet.forEach(t),d0o=r(cU," class method or the "),dN=n(cU,"A",{href:!0});var Fet=s(dN);c0o=r(Fet,"from_config()"),Fet.forEach(t),f0o=r(cU,` class
method.`),cU.forEach(t),m0o=i(al),Ow=n(al,"P",{});var kPe=s(Ow);g0o=r(kPe,"This class cannot be instantiated directly using "),Nle=n(kPe,"CODE",{});var vet=s(Nle);h0o=r(vet,"__init__()"),vet.forEach(t),p0o=r(kPe," (throws an error)."),kPe.forEach(t),_0o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Vw.$$.fragment,nl),u0o=i(nl),jle=n(nl,"P",{});var Tet=s(jle);b0o=r(Tet,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tet.forEach(t),F0o=i(nl),_d=n(nl,"P",{});var fU=s(_d);v0o=r(fU,`Note:
Loading a model from its configuration file does `),Dle=n(fU,"STRONG",{});var Met=s(Dle);T0o=r(Met,"not"),Met.forEach(t),M0o=r(fU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cN=n(fU,"A",{href:!0});var Eet=s(cN);E0o=r(Eet,"from_pretrained()"),Eet.forEach(t),C0o=r(fU," to load the model weights."),fU.forEach(t),w0o=i(nl),Gle=n(nl,"P",{});var Cet=s(Gle);A0o=r(Cet,"Examples:"),Cet.forEach(t),y0o=i(nl),m(Xw.$$.fragment,nl),nl.forEach(t),L0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(zw.$$.fragment,Qt),x0o=i(Qt),Ole=n(Qt,"P",{});var wet=s(Ole);k0o=r(wet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wet.forEach(t),S0o=i(Qt),Ja=n(Qt,"P",{});var LE=s(Ja);R0o=r(LE,"The model class to instantiate is selected based on the "),Vle=n(LE,"CODE",{});var Aet=s(Vle);B0o=r(Aet,"model_type"),Aet.forEach(t),P0o=r(LE,` property of the config object (either
passed as an argument or loaded from `),Xle=n(LE,"CODE",{});var yet=s(Xle);$0o=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),I0o=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=n(LE,"CODE",{});var Let=s(zle);q0o=r(Let,"pretrained_model_name_or_path"),Let.forEach(t),N0o=r(LE,":"),LE.forEach(t),j0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Z7=n(O,"LI",{});var _6e=s(Z7);Qle=n(_6e,"STRONG",{});var xet=s(Qle);D0o=r(xet,"albert"),xet.forEach(t),G0o=r(_6e," \u2014 "),fN=n(_6e,"A",{href:!0});var ket=s(fN);O0o=r(ket,"AlbertForMultipleChoice"),ket.forEach(t),V0o=r(_6e," (ALBERT model)"),_6e.forEach(t),X0o=i(O),eb=n(O,"LI",{});var u6e=s(eb);Wle=n(u6e,"STRONG",{});var Set=s(Wle);z0o=r(Set,"bert"),Set.forEach(t),Q0o=r(u6e," \u2014 "),mN=n(u6e,"A",{href:!0});var Ret=s(mN);W0o=r(Ret,"BertForMultipleChoice"),Ret.forEach(t),H0o=r(u6e," (BERT model)"),u6e.forEach(t),U0o=i(O),ob=n(O,"LI",{});var b6e=s(ob);Hle=n(b6e,"STRONG",{});var Bet=s(Hle);J0o=r(Bet,"big_bird"),Bet.forEach(t),Y0o=r(b6e," \u2014 "),gN=n(b6e,"A",{href:!0});var Pet=s(gN);K0o=r(Pet,"BigBirdForMultipleChoice"),Pet.forEach(t),Z0o=r(b6e," (BigBird model)"),b6e.forEach(t),eyo=i(O),rb=n(O,"LI",{});var F6e=s(rb);Ule=n(F6e,"STRONG",{});var $et=s(Ule);oyo=r($et,"camembert"),$et.forEach(t),ryo=r(F6e," \u2014 "),hN=n(F6e,"A",{href:!0});var Iet=s(hN);tyo=r(Iet,"CamembertForMultipleChoice"),Iet.forEach(t),ayo=r(F6e," (CamemBERT model)"),F6e.forEach(t),nyo=i(O),tb=n(O,"LI",{});var v6e=s(tb);Jle=n(v6e,"STRONG",{});var qet=s(Jle);syo=r(qet,"canine"),qet.forEach(t),lyo=r(v6e," \u2014 "),pN=n(v6e,"A",{href:!0});var Net=s(pN);iyo=r(Net,"CanineForMultipleChoice"),Net.forEach(t),dyo=r(v6e," (Canine model)"),v6e.forEach(t),cyo=i(O),ab=n(O,"LI",{});var T6e=s(ab);Yle=n(T6e,"STRONG",{});var jet=s(Yle);fyo=r(jet,"convbert"),jet.forEach(t),myo=r(T6e," \u2014 "),_N=n(T6e,"A",{href:!0});var Det=s(_N);gyo=r(Det,"ConvBertForMultipleChoice"),Det.forEach(t),hyo=r(T6e," (ConvBERT model)"),T6e.forEach(t),pyo=i(O),nb=n(O,"LI",{});var M6e=s(nb);Kle=n(M6e,"STRONG",{});var Get=s(Kle);_yo=r(Get,"data2vec-text"),Get.forEach(t),uyo=r(M6e," \u2014 "),uN=n(M6e,"A",{href:!0});var Oet=s(uN);byo=r(Oet,"Data2VecTextForMultipleChoice"),Oet.forEach(t),Fyo=r(M6e," (Data2VecText model)"),M6e.forEach(t),vyo=i(O),sb=n(O,"LI",{});var E6e=s(sb);Zle=n(E6e,"STRONG",{});var Vet=s(Zle);Tyo=r(Vet,"distilbert"),Vet.forEach(t),Myo=r(E6e," \u2014 "),bN=n(E6e,"A",{href:!0});var Xet=s(bN);Eyo=r(Xet,"DistilBertForMultipleChoice"),Xet.forEach(t),Cyo=r(E6e," (DistilBERT model)"),E6e.forEach(t),wyo=i(O),lb=n(O,"LI",{});var C6e=s(lb);eie=n(C6e,"STRONG",{});var zet=s(eie);Ayo=r(zet,"electra"),zet.forEach(t),yyo=r(C6e," \u2014 "),FN=n(C6e,"A",{href:!0});var Qet=s(FN);Lyo=r(Qet,"ElectraForMultipleChoice"),Qet.forEach(t),xyo=r(C6e," (ELECTRA model)"),C6e.forEach(t),kyo=i(O),ib=n(O,"LI",{});var w6e=s(ib);oie=n(w6e,"STRONG",{});var Wet=s(oie);Syo=r(Wet,"flaubert"),Wet.forEach(t),Ryo=r(w6e," \u2014 "),vN=n(w6e,"A",{href:!0});var Het=s(vN);Byo=r(Het,"FlaubertForMultipleChoice"),Het.forEach(t),Pyo=r(w6e," (FlauBERT model)"),w6e.forEach(t),$yo=i(O),db=n(O,"LI",{});var A6e=s(db);rie=n(A6e,"STRONG",{});var Uet=s(rie);Iyo=r(Uet,"fnet"),Uet.forEach(t),qyo=r(A6e," \u2014 "),TN=n(A6e,"A",{href:!0});var Jet=s(TN);Nyo=r(Jet,"FNetForMultipleChoice"),Jet.forEach(t),jyo=r(A6e," (FNet model)"),A6e.forEach(t),Dyo=i(O),cb=n(O,"LI",{});var y6e=s(cb);tie=n(y6e,"STRONG",{});var Yet=s(tie);Gyo=r(Yet,"funnel"),Yet.forEach(t),Oyo=r(y6e," \u2014 "),MN=n(y6e,"A",{href:!0});var Ket=s(MN);Vyo=r(Ket,"FunnelForMultipleChoice"),Ket.forEach(t),Xyo=r(y6e," (Funnel Transformer model)"),y6e.forEach(t),zyo=i(O),fb=n(O,"LI",{});var L6e=s(fb);aie=n(L6e,"STRONG",{});var Zet=s(aie);Qyo=r(Zet,"ibert"),Zet.forEach(t),Wyo=r(L6e," \u2014 "),EN=n(L6e,"A",{href:!0});var eot=s(EN);Hyo=r(eot,"IBertForMultipleChoice"),eot.forEach(t),Uyo=r(L6e," (I-BERT model)"),L6e.forEach(t),Jyo=i(O),mb=n(O,"LI",{});var x6e=s(mb);nie=n(x6e,"STRONG",{});var oot=s(nie);Yyo=r(oot,"longformer"),oot.forEach(t),Kyo=r(x6e," \u2014 "),CN=n(x6e,"A",{href:!0});var rot=s(CN);Zyo=r(rot,"LongformerForMultipleChoice"),rot.forEach(t),eLo=r(x6e," (Longformer model)"),x6e.forEach(t),oLo=i(O),gb=n(O,"LI",{});var k6e=s(gb);sie=n(k6e,"STRONG",{});var tot=s(sie);rLo=r(tot,"megatron-bert"),tot.forEach(t),tLo=r(k6e," \u2014 "),wN=n(k6e,"A",{href:!0});var aot=s(wN);aLo=r(aot,"MegatronBertForMultipleChoice"),aot.forEach(t),nLo=r(k6e," (MegatronBert model)"),k6e.forEach(t),sLo=i(O),hb=n(O,"LI",{});var S6e=s(hb);lie=n(S6e,"STRONG",{});var not=s(lie);lLo=r(not,"mobilebert"),not.forEach(t),iLo=r(S6e," \u2014 "),AN=n(S6e,"A",{href:!0});var sot=s(AN);dLo=r(sot,"MobileBertForMultipleChoice"),sot.forEach(t),cLo=r(S6e," (MobileBERT model)"),S6e.forEach(t),fLo=i(O),pb=n(O,"LI",{});var R6e=s(pb);iie=n(R6e,"STRONG",{});var lot=s(iie);mLo=r(lot,"mpnet"),lot.forEach(t),gLo=r(R6e," \u2014 "),yN=n(R6e,"A",{href:!0});var iot=s(yN);hLo=r(iot,"MPNetForMultipleChoice"),iot.forEach(t),pLo=r(R6e," (MPNet model)"),R6e.forEach(t),_Lo=i(O),_b=n(O,"LI",{});var B6e=s(_b);die=n(B6e,"STRONG",{});var dot=s(die);uLo=r(dot,"nystromformer"),dot.forEach(t),bLo=r(B6e," \u2014 "),LN=n(B6e,"A",{href:!0});var cot=s(LN);FLo=r(cot,"NystromformerForMultipleChoice"),cot.forEach(t),vLo=r(B6e," (Nystromformer model)"),B6e.forEach(t),TLo=i(O),ub=n(O,"LI",{});var P6e=s(ub);cie=n(P6e,"STRONG",{});var fot=s(cie);MLo=r(fot,"qdqbert"),fot.forEach(t),ELo=r(P6e," \u2014 "),xN=n(P6e,"A",{href:!0});var mot=s(xN);CLo=r(mot,"QDQBertForMultipleChoice"),mot.forEach(t),wLo=r(P6e," (QDQBert model)"),P6e.forEach(t),ALo=i(O),bb=n(O,"LI",{});var $6e=s(bb);fie=n($6e,"STRONG",{});var got=s(fie);yLo=r(got,"rembert"),got.forEach(t),LLo=r($6e," \u2014 "),kN=n($6e,"A",{href:!0});var hot=s(kN);xLo=r(hot,"RemBertForMultipleChoice"),hot.forEach(t),kLo=r($6e," (RemBERT model)"),$6e.forEach(t),SLo=i(O),Fb=n(O,"LI",{});var I6e=s(Fb);mie=n(I6e,"STRONG",{});var pot=s(mie);RLo=r(pot,"roberta"),pot.forEach(t),BLo=r(I6e," \u2014 "),SN=n(I6e,"A",{href:!0});var _ot=s(SN);PLo=r(_ot,"RobertaForMultipleChoice"),_ot.forEach(t),$Lo=r(I6e," (RoBERTa model)"),I6e.forEach(t),ILo=i(O),vb=n(O,"LI",{});var q6e=s(vb);gie=n(q6e,"STRONG",{});var uot=s(gie);qLo=r(uot,"roformer"),uot.forEach(t),NLo=r(q6e," \u2014 "),RN=n(q6e,"A",{href:!0});var bot=s(RN);jLo=r(bot,"RoFormerForMultipleChoice"),bot.forEach(t),DLo=r(q6e," (RoFormer model)"),q6e.forEach(t),GLo=i(O),Tb=n(O,"LI",{});var N6e=s(Tb);hie=n(N6e,"STRONG",{});var Fot=s(hie);OLo=r(Fot,"squeezebert"),Fot.forEach(t),VLo=r(N6e," \u2014 "),BN=n(N6e,"A",{href:!0});var vot=s(BN);XLo=r(vot,"SqueezeBertForMultipleChoice"),vot.forEach(t),zLo=r(N6e," (SqueezeBERT model)"),N6e.forEach(t),QLo=i(O),Mb=n(O,"LI",{});var j6e=s(Mb);pie=n(j6e,"STRONG",{});var Tot=s(pie);WLo=r(Tot,"xlm"),Tot.forEach(t),HLo=r(j6e," \u2014 "),PN=n(j6e,"A",{href:!0});var Mot=s(PN);ULo=r(Mot,"XLMForMultipleChoice"),Mot.forEach(t),JLo=r(j6e," (XLM model)"),j6e.forEach(t),YLo=i(O),Eb=n(O,"LI",{});var D6e=s(Eb);_ie=n(D6e,"STRONG",{});var Eot=s(_ie);KLo=r(Eot,"xlm-roberta"),Eot.forEach(t),ZLo=r(D6e," \u2014 "),$N=n(D6e,"A",{href:!0});var Cot=s($N);e8o=r(Cot,"XLMRobertaForMultipleChoice"),Cot.forEach(t),o8o=r(D6e," (XLM-RoBERTa model)"),D6e.forEach(t),r8o=i(O),Cb=n(O,"LI",{});var G6e=s(Cb);uie=n(G6e,"STRONG",{});var wot=s(uie);t8o=r(wot,"xlm-roberta-xl"),wot.forEach(t),a8o=r(G6e," \u2014 "),IN=n(G6e,"A",{href:!0});var Aot=s(IN);n8o=r(Aot,"XLMRobertaXLForMultipleChoice"),Aot.forEach(t),s8o=r(G6e," (XLM-RoBERTa-XL model)"),G6e.forEach(t),l8o=i(O),wb=n(O,"LI",{});var O6e=s(wb);bie=n(O6e,"STRONG",{});var yot=s(bie);i8o=r(yot,"xlnet"),yot.forEach(t),d8o=r(O6e," \u2014 "),qN=n(O6e,"A",{href:!0});var Lot=s(qN);c8o=r(Lot,"XLNetForMultipleChoice"),Lot.forEach(t),f8o=r(O6e," (XLNet model)"),O6e.forEach(t),m8o=i(O),Ab=n(O,"LI",{});var V6e=s(Ab);Fie=n(V6e,"STRONG",{});var xot=s(Fie);g8o=r(xot,"yoso"),xot.forEach(t),h8o=r(V6e," \u2014 "),NN=n(V6e,"A",{href:!0});var kot=s(NN);p8o=r(kot,"YosoForMultipleChoice"),kot.forEach(t),_8o=r(V6e," (YOSO model)"),V6e.forEach(t),O.forEach(t),u8o=i(Qt),yb=n(Qt,"P",{});var X6e=s(yb);b8o=r(X6e,"The model is set in evaluation mode by default using "),vie=n(X6e,"CODE",{});var Sot=s(vie);F8o=r(Sot,"model.eval()"),Sot.forEach(t),v8o=r(X6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(X6e,"CODE",{});var Rot=s(Tie);T8o=r(Rot,"model.train()"),Rot.forEach(t),X6e.forEach(t),M8o=i(Qt),Mie=n(Qt,"P",{});var Bot=s(Mie);E8o=r(Bot,"Examples:"),Bot.forEach(t),C8o=i(Qt),m(Qw.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),MRe=i(c),ud=n(c,"H2",{class:!0});var SPe=s(ud);Lb=n(SPe,"A",{id:!0,class:!0,href:!0});var Pot=s(Lb);Eie=n(Pot,"SPAN",{});var $ot=s(Eie);m(Ww.$$.fragment,$ot),$ot.forEach(t),Pot.forEach(t),w8o=i(SPe),Cie=n(SPe,"SPAN",{});var Iot=s(Cie);A8o=r(Iot,"AutoModelForNextSentencePrediction"),Iot.forEach(t),SPe.forEach(t),ERe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Hw.$$.fragment,sl),y8o=i(sl),bd=n(sl,"P",{});var mU=s(bd);L8o=r(mU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jN=n(mU,"A",{href:!0});var qot=s(jN);x8o=r(qot,"from_pretrained()"),qot.forEach(t),k8o=r(mU," class method or the "),DN=n(mU,"A",{href:!0});var Not=s(DN);S8o=r(Not,"from_config()"),Not.forEach(t),R8o=r(mU,` class
method.`),mU.forEach(t),B8o=i(sl),Uw=n(sl,"P",{});var RPe=s(Uw);P8o=r(RPe,"This class cannot be instantiated directly using "),wie=n(RPe,"CODE",{});var jot=s(wie);$8o=r(jot,"__init__()"),jot.forEach(t),I8o=r(RPe," (throws an error)."),RPe.forEach(t),q8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Jw.$$.fragment,ll),N8o=i(ll),Aie=n(ll,"P",{});var Dot=s(Aie);j8o=r(Dot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dot.forEach(t),D8o=i(ll),Fd=n(ll,"P",{});var gU=s(Fd);G8o=r(gU,`Note:
Loading a model from its configuration file does `),yie=n(gU,"STRONG",{});var Got=s(yie);O8o=r(Got,"not"),Got.forEach(t),V8o=r(gU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=n(gU,"A",{href:!0});var Oot=s(GN);X8o=r(Oot,"from_pretrained()"),Oot.forEach(t),z8o=r(gU," to load the model weights."),gU.forEach(t),Q8o=i(ll),Lie=n(ll,"P",{});var Vot=s(Lie);W8o=r(Vot,"Examples:"),Vot.forEach(t),H8o=i(ll),m(Yw.$$.fragment,ll),ll.forEach(t),U8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(Kw.$$.fragment,Wt),J8o=i(Wt),xie=n(Wt,"P",{});var Xot=s(xie);Y8o=r(Xot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xot.forEach(t),K8o=i(Wt),Ya=n(Wt,"P",{});var xE=s(Ya);Z8o=r(xE,"The model class to instantiate is selected based on the "),kie=n(xE,"CODE",{});var zot=s(kie);e9o=r(zot,"model_type"),zot.forEach(t),o9o=r(xE,` property of the config object (either
passed as an argument or loaded from `),Sie=n(xE,"CODE",{});var Qot=s(Sie);r9o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),t9o=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(xE,"CODE",{});var Wot=s(Rie);a9o=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),n9o=r(xE,":"),xE.forEach(t),s9o=i(Wt),da=n(Wt,"UL",{});var il=s(da);xb=n(il,"LI",{});var z6e=s(xb);Bie=n(z6e,"STRONG",{});var Hot=s(Bie);l9o=r(Hot,"bert"),Hot.forEach(t),i9o=r(z6e," \u2014 "),ON=n(z6e,"A",{href:!0});var Uot=s(ON);d9o=r(Uot,"BertForNextSentencePrediction"),Uot.forEach(t),c9o=r(z6e," (BERT model)"),z6e.forEach(t),f9o=i(il),kb=n(il,"LI",{});var Q6e=s(kb);Pie=n(Q6e,"STRONG",{});var Jot=s(Pie);m9o=r(Jot,"fnet"),Jot.forEach(t),g9o=r(Q6e," \u2014 "),VN=n(Q6e,"A",{href:!0});var Yot=s(VN);h9o=r(Yot,"FNetForNextSentencePrediction"),Yot.forEach(t),p9o=r(Q6e," (FNet model)"),Q6e.forEach(t),_9o=i(il),Sb=n(il,"LI",{});var W6e=s(Sb);$ie=n(W6e,"STRONG",{});var Kot=s($ie);u9o=r(Kot,"megatron-bert"),Kot.forEach(t),b9o=r(W6e," \u2014 "),XN=n(W6e,"A",{href:!0});var Zot=s(XN);F9o=r(Zot,"MegatronBertForNextSentencePrediction"),Zot.forEach(t),v9o=r(W6e," (MegatronBert model)"),W6e.forEach(t),T9o=i(il),Rb=n(il,"LI",{});var H6e=s(Rb);Iie=n(H6e,"STRONG",{});var ert=s(Iie);M9o=r(ert,"mobilebert"),ert.forEach(t),E9o=r(H6e," \u2014 "),zN=n(H6e,"A",{href:!0});var ort=s(zN);C9o=r(ort,"MobileBertForNextSentencePrediction"),ort.forEach(t),w9o=r(H6e," (MobileBERT model)"),H6e.forEach(t),A9o=i(il),Bb=n(il,"LI",{});var U6e=s(Bb);qie=n(U6e,"STRONG",{});var rrt=s(qie);y9o=r(rrt,"qdqbert"),rrt.forEach(t),L9o=r(U6e," \u2014 "),QN=n(U6e,"A",{href:!0});var trt=s(QN);x9o=r(trt,"QDQBertForNextSentencePrediction"),trt.forEach(t),k9o=r(U6e," (QDQBert model)"),U6e.forEach(t),il.forEach(t),S9o=i(Wt),Pb=n(Wt,"P",{});var J6e=s(Pb);R9o=r(J6e,"The model is set in evaluation mode by default using "),Nie=n(J6e,"CODE",{});var art=s(Nie);B9o=r(art,"model.eval()"),art.forEach(t),P9o=r(J6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(J6e,"CODE",{});var nrt=s(jie);$9o=r(nrt,"model.train()"),nrt.forEach(t),J6e.forEach(t),I9o=i(Wt),Die=n(Wt,"P",{});var srt=s(Die);q9o=r(srt,"Examples:"),srt.forEach(t),N9o=i(Wt),m(Zw.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),CRe=i(c),vd=n(c,"H2",{class:!0});var BPe=s(vd);$b=n(BPe,"A",{id:!0,class:!0,href:!0});var lrt=s($b);Gie=n(lrt,"SPAN",{});var irt=s(Gie);m(eA.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),j9o=i(BPe),Oie=n(BPe,"SPAN",{});var drt=s(Oie);D9o=r(drt,"AutoModelForTokenClassification"),drt.forEach(t),BPe.forEach(t),wRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(oA.$$.fragment,dl),G9o=i(dl),Td=n(dl,"P",{});var hU=s(Td);O9o=r(hU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WN=n(hU,"A",{href:!0});var crt=s(WN);V9o=r(crt,"from_pretrained()"),crt.forEach(t),X9o=r(hU," class method or the "),HN=n(hU,"A",{href:!0});var frt=s(HN);z9o=r(frt,"from_config()"),frt.forEach(t),Q9o=r(hU,` class
method.`),hU.forEach(t),W9o=i(dl),rA=n(dl,"P",{});var PPe=s(rA);H9o=r(PPe,"This class cannot be instantiated directly using "),Vie=n(PPe,"CODE",{});var mrt=s(Vie);U9o=r(mrt,"__init__()"),mrt.forEach(t),J9o=r(PPe," (throws an error)."),PPe.forEach(t),Y9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(tA.$$.fragment,cl),K9o=i(cl),Xie=n(cl,"P",{});var grt=s(Xie);Z9o=r(grt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),grt.forEach(t),exo=i(cl),Md=n(cl,"P",{});var pU=s(Md);oxo=r(pU,`Note:
Loading a model from its configuration file does `),zie=n(pU,"STRONG",{});var hrt=s(zie);rxo=r(hrt,"not"),hrt.forEach(t),txo=r(pU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=n(pU,"A",{href:!0});var prt=s(UN);axo=r(prt,"from_pretrained()"),prt.forEach(t),nxo=r(pU," to load the model weights."),pU.forEach(t),sxo=i(cl),Qie=n(cl,"P",{});var _rt=s(Qie);lxo=r(_rt,"Examples:"),_rt.forEach(t),ixo=i(cl),m(aA.$$.fragment,cl),cl.forEach(t),dxo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(nA.$$.fragment,Ht),cxo=i(Ht),Wie=n(Ht,"P",{});var urt=s(Wie);fxo=r(urt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),urt.forEach(t),mxo=i(Ht),Ka=n(Ht,"P",{});var kE=s(Ka);gxo=r(kE,"The model class to instantiate is selected based on the "),Hie=n(kE,"CODE",{});var brt=s(Hie);hxo=r(brt,"model_type"),brt.forEach(t),pxo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Uie=n(kE,"CODE",{});var Frt=s(Uie);_xo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),uxo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(kE,"CODE",{});var vrt=s(Jie);bxo=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),Fxo=r(kE,":"),kE.forEach(t),vxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Ib=n(D,"LI",{});var Y6e=s(Ib);Yie=n(Y6e,"STRONG",{});var Trt=s(Yie);Txo=r(Trt,"albert"),Trt.forEach(t),Mxo=r(Y6e," \u2014 "),JN=n(Y6e,"A",{href:!0});var Mrt=s(JN);Exo=r(Mrt,"AlbertForTokenClassification"),Mrt.forEach(t),Cxo=r(Y6e," (ALBERT model)"),Y6e.forEach(t),wxo=i(D),qb=n(D,"LI",{});var K6e=s(qb);Kie=n(K6e,"STRONG",{});var Ert=s(Kie);Axo=r(Ert,"bert"),Ert.forEach(t),yxo=r(K6e," \u2014 "),YN=n(K6e,"A",{href:!0});var Crt=s(YN);Lxo=r(Crt,"BertForTokenClassification"),Crt.forEach(t),xxo=r(K6e," (BERT model)"),K6e.forEach(t),kxo=i(D),Nb=n(D,"LI",{});var Z6e=s(Nb);Zie=n(Z6e,"STRONG",{});var wrt=s(Zie);Sxo=r(wrt,"big_bird"),wrt.forEach(t),Rxo=r(Z6e," \u2014 "),KN=n(Z6e,"A",{href:!0});var Art=s(KN);Bxo=r(Art,"BigBirdForTokenClassification"),Art.forEach(t),Pxo=r(Z6e," (BigBird model)"),Z6e.forEach(t),$xo=i(D),jb=n(D,"LI",{});var e0e=s(jb);ede=n(e0e,"STRONG",{});var yrt=s(ede);Ixo=r(yrt,"camembert"),yrt.forEach(t),qxo=r(e0e," \u2014 "),ZN=n(e0e,"A",{href:!0});var Lrt=s(ZN);Nxo=r(Lrt,"CamembertForTokenClassification"),Lrt.forEach(t),jxo=r(e0e," (CamemBERT model)"),e0e.forEach(t),Dxo=i(D),Db=n(D,"LI",{});var o0e=s(Db);ode=n(o0e,"STRONG",{});var xrt=s(ode);Gxo=r(xrt,"canine"),xrt.forEach(t),Oxo=r(o0e," \u2014 "),ej=n(o0e,"A",{href:!0});var krt=s(ej);Vxo=r(krt,"CanineForTokenClassification"),krt.forEach(t),Xxo=r(o0e," (Canine model)"),o0e.forEach(t),zxo=i(D),Gb=n(D,"LI",{});var r0e=s(Gb);rde=n(r0e,"STRONG",{});var Srt=s(rde);Qxo=r(Srt,"convbert"),Srt.forEach(t),Wxo=r(r0e," \u2014 "),oj=n(r0e,"A",{href:!0});var Rrt=s(oj);Hxo=r(Rrt,"ConvBertForTokenClassification"),Rrt.forEach(t),Uxo=r(r0e," (ConvBERT model)"),r0e.forEach(t),Jxo=i(D),Ob=n(D,"LI",{});var t0e=s(Ob);tde=n(t0e,"STRONG",{});var Brt=s(tde);Yxo=r(Brt,"data2vec-text"),Brt.forEach(t),Kxo=r(t0e," \u2014 "),rj=n(t0e,"A",{href:!0});var Prt=s(rj);Zxo=r(Prt,"Data2VecTextForTokenClassification"),Prt.forEach(t),eko=r(t0e," (Data2VecText model)"),t0e.forEach(t),oko=i(D),Vb=n(D,"LI",{});var a0e=s(Vb);ade=n(a0e,"STRONG",{});var $rt=s(ade);rko=r($rt,"deberta"),$rt.forEach(t),tko=r(a0e," \u2014 "),tj=n(a0e,"A",{href:!0});var Irt=s(tj);ako=r(Irt,"DebertaForTokenClassification"),Irt.forEach(t),nko=r(a0e," (DeBERTa model)"),a0e.forEach(t),sko=i(D),Xb=n(D,"LI",{});var n0e=s(Xb);nde=n(n0e,"STRONG",{});var qrt=s(nde);lko=r(qrt,"deberta-v2"),qrt.forEach(t),iko=r(n0e," \u2014 "),aj=n(n0e,"A",{href:!0});var Nrt=s(aj);dko=r(Nrt,"DebertaV2ForTokenClassification"),Nrt.forEach(t),cko=r(n0e," (DeBERTa-v2 model)"),n0e.forEach(t),fko=i(D),zb=n(D,"LI",{});var s0e=s(zb);sde=n(s0e,"STRONG",{});var jrt=s(sde);mko=r(jrt,"distilbert"),jrt.forEach(t),gko=r(s0e," \u2014 "),nj=n(s0e,"A",{href:!0});var Drt=s(nj);hko=r(Drt,"DistilBertForTokenClassification"),Drt.forEach(t),pko=r(s0e," (DistilBERT model)"),s0e.forEach(t),_ko=i(D),Qb=n(D,"LI",{});var l0e=s(Qb);lde=n(l0e,"STRONG",{});var Grt=s(lde);uko=r(Grt,"electra"),Grt.forEach(t),bko=r(l0e," \u2014 "),sj=n(l0e,"A",{href:!0});var Ort=s(sj);Fko=r(Ort,"ElectraForTokenClassification"),Ort.forEach(t),vko=r(l0e," (ELECTRA model)"),l0e.forEach(t),Tko=i(D),Wb=n(D,"LI",{});var i0e=s(Wb);ide=n(i0e,"STRONG",{});var Vrt=s(ide);Mko=r(Vrt,"flaubert"),Vrt.forEach(t),Eko=r(i0e," \u2014 "),lj=n(i0e,"A",{href:!0});var Xrt=s(lj);Cko=r(Xrt,"FlaubertForTokenClassification"),Xrt.forEach(t),wko=r(i0e," (FlauBERT model)"),i0e.forEach(t),Ako=i(D),Hb=n(D,"LI",{});var d0e=s(Hb);dde=n(d0e,"STRONG",{});var zrt=s(dde);yko=r(zrt,"fnet"),zrt.forEach(t),Lko=r(d0e," \u2014 "),ij=n(d0e,"A",{href:!0});var Qrt=s(ij);xko=r(Qrt,"FNetForTokenClassification"),Qrt.forEach(t),kko=r(d0e," (FNet model)"),d0e.forEach(t),Sko=i(D),Ub=n(D,"LI",{});var c0e=s(Ub);cde=n(c0e,"STRONG",{});var Wrt=s(cde);Rko=r(Wrt,"funnel"),Wrt.forEach(t),Bko=r(c0e," \u2014 "),dj=n(c0e,"A",{href:!0});var Hrt=s(dj);Pko=r(Hrt,"FunnelForTokenClassification"),Hrt.forEach(t),$ko=r(c0e," (Funnel Transformer model)"),c0e.forEach(t),Iko=i(D),Jb=n(D,"LI",{});var f0e=s(Jb);fde=n(f0e,"STRONG",{});var Urt=s(fde);qko=r(Urt,"gpt2"),Urt.forEach(t),Nko=r(f0e," \u2014 "),cj=n(f0e,"A",{href:!0});var Jrt=s(cj);jko=r(Jrt,"GPT2ForTokenClassification"),Jrt.forEach(t),Dko=r(f0e," (OpenAI GPT-2 model)"),f0e.forEach(t),Gko=i(D),Yb=n(D,"LI",{});var m0e=s(Yb);mde=n(m0e,"STRONG",{});var Yrt=s(mde);Oko=r(Yrt,"ibert"),Yrt.forEach(t),Vko=r(m0e," \u2014 "),fj=n(m0e,"A",{href:!0});var Krt=s(fj);Xko=r(Krt,"IBertForTokenClassification"),Krt.forEach(t),zko=r(m0e," (I-BERT model)"),m0e.forEach(t),Qko=i(D),Kb=n(D,"LI",{});var g0e=s(Kb);gde=n(g0e,"STRONG",{});var Zrt=s(gde);Wko=r(Zrt,"layoutlm"),Zrt.forEach(t),Hko=r(g0e," \u2014 "),mj=n(g0e,"A",{href:!0});var ett=s(mj);Uko=r(ett,"LayoutLMForTokenClassification"),ett.forEach(t),Jko=r(g0e," (LayoutLM model)"),g0e.forEach(t),Yko=i(D),Zb=n(D,"LI",{});var h0e=s(Zb);hde=n(h0e,"STRONG",{});var ott=s(hde);Kko=r(ott,"layoutlmv2"),ott.forEach(t),Zko=r(h0e," \u2014 "),gj=n(h0e,"A",{href:!0});var rtt=s(gj);eSo=r(rtt,"LayoutLMv2ForTokenClassification"),rtt.forEach(t),oSo=r(h0e," (LayoutLMv2 model)"),h0e.forEach(t),rSo=i(D),e5=n(D,"LI",{});var p0e=s(e5);pde=n(p0e,"STRONG",{});var ttt=s(pde);tSo=r(ttt,"longformer"),ttt.forEach(t),aSo=r(p0e," \u2014 "),hj=n(p0e,"A",{href:!0});var att=s(hj);nSo=r(att,"LongformerForTokenClassification"),att.forEach(t),sSo=r(p0e," (Longformer model)"),p0e.forEach(t),lSo=i(D),o5=n(D,"LI",{});var _0e=s(o5);_de=n(_0e,"STRONG",{});var ntt=s(_de);iSo=r(ntt,"megatron-bert"),ntt.forEach(t),dSo=r(_0e," \u2014 "),pj=n(_0e,"A",{href:!0});var stt=s(pj);cSo=r(stt,"MegatronBertForTokenClassification"),stt.forEach(t),fSo=r(_0e," (MegatronBert model)"),_0e.forEach(t),mSo=i(D),r5=n(D,"LI",{});var u0e=s(r5);ude=n(u0e,"STRONG",{});var ltt=s(ude);gSo=r(ltt,"mobilebert"),ltt.forEach(t),hSo=r(u0e," \u2014 "),_j=n(u0e,"A",{href:!0});var itt=s(_j);pSo=r(itt,"MobileBertForTokenClassification"),itt.forEach(t),_So=r(u0e," (MobileBERT model)"),u0e.forEach(t),uSo=i(D),t5=n(D,"LI",{});var b0e=s(t5);bde=n(b0e,"STRONG",{});var dtt=s(bde);bSo=r(dtt,"mpnet"),dtt.forEach(t),FSo=r(b0e," \u2014 "),uj=n(b0e,"A",{href:!0});var ctt=s(uj);vSo=r(ctt,"MPNetForTokenClassification"),ctt.forEach(t),TSo=r(b0e," (MPNet model)"),b0e.forEach(t),MSo=i(D),a5=n(D,"LI",{});var F0e=s(a5);Fde=n(F0e,"STRONG",{});var ftt=s(Fde);ESo=r(ftt,"nystromformer"),ftt.forEach(t),CSo=r(F0e," \u2014 "),bj=n(F0e,"A",{href:!0});var mtt=s(bj);wSo=r(mtt,"NystromformerForTokenClassification"),mtt.forEach(t),ASo=r(F0e," (Nystromformer model)"),F0e.forEach(t),ySo=i(D),n5=n(D,"LI",{});var v0e=s(n5);vde=n(v0e,"STRONG",{});var gtt=s(vde);LSo=r(gtt,"qdqbert"),gtt.forEach(t),xSo=r(v0e," \u2014 "),Fj=n(v0e,"A",{href:!0});var htt=s(Fj);kSo=r(htt,"QDQBertForTokenClassification"),htt.forEach(t),SSo=r(v0e," (QDQBert model)"),v0e.forEach(t),RSo=i(D),s5=n(D,"LI",{});var T0e=s(s5);Tde=n(T0e,"STRONG",{});var ptt=s(Tde);BSo=r(ptt,"rembert"),ptt.forEach(t),PSo=r(T0e," \u2014 "),vj=n(T0e,"A",{href:!0});var _tt=s(vj);$So=r(_tt,"RemBertForTokenClassification"),_tt.forEach(t),ISo=r(T0e," (RemBERT model)"),T0e.forEach(t),qSo=i(D),l5=n(D,"LI",{});var M0e=s(l5);Mde=n(M0e,"STRONG",{});var utt=s(Mde);NSo=r(utt,"roberta"),utt.forEach(t),jSo=r(M0e," \u2014 "),Tj=n(M0e,"A",{href:!0});var btt=s(Tj);DSo=r(btt,"RobertaForTokenClassification"),btt.forEach(t),GSo=r(M0e," (RoBERTa model)"),M0e.forEach(t),OSo=i(D),i5=n(D,"LI",{});var E0e=s(i5);Ede=n(E0e,"STRONG",{});var Ftt=s(Ede);VSo=r(Ftt,"roformer"),Ftt.forEach(t),XSo=r(E0e," \u2014 "),Mj=n(E0e,"A",{href:!0});var vtt=s(Mj);zSo=r(vtt,"RoFormerForTokenClassification"),vtt.forEach(t),QSo=r(E0e," (RoFormer model)"),E0e.forEach(t),WSo=i(D),d5=n(D,"LI",{});var C0e=s(d5);Cde=n(C0e,"STRONG",{});var Ttt=s(Cde);HSo=r(Ttt,"squeezebert"),Ttt.forEach(t),USo=r(C0e," \u2014 "),Ej=n(C0e,"A",{href:!0});var Mtt=s(Ej);JSo=r(Mtt,"SqueezeBertForTokenClassification"),Mtt.forEach(t),YSo=r(C0e," (SqueezeBERT model)"),C0e.forEach(t),KSo=i(D),c5=n(D,"LI",{});var w0e=s(c5);wde=n(w0e,"STRONG",{});var Ett=s(wde);ZSo=r(Ett,"xlm"),Ett.forEach(t),eRo=r(w0e," \u2014 "),Cj=n(w0e,"A",{href:!0});var Ctt=s(Cj);oRo=r(Ctt,"XLMForTokenClassification"),Ctt.forEach(t),rRo=r(w0e," (XLM model)"),w0e.forEach(t),tRo=i(D),f5=n(D,"LI",{});var A0e=s(f5);Ade=n(A0e,"STRONG",{});var wtt=s(Ade);aRo=r(wtt,"xlm-roberta"),wtt.forEach(t),nRo=r(A0e," \u2014 "),wj=n(A0e,"A",{href:!0});var Att=s(wj);sRo=r(Att,"XLMRobertaForTokenClassification"),Att.forEach(t),lRo=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),iRo=i(D),m5=n(D,"LI",{});var y0e=s(m5);yde=n(y0e,"STRONG",{});var ytt=s(yde);dRo=r(ytt,"xlm-roberta-xl"),ytt.forEach(t),cRo=r(y0e," \u2014 "),Aj=n(y0e,"A",{href:!0});var Ltt=s(Aj);fRo=r(Ltt,"XLMRobertaXLForTokenClassification"),Ltt.forEach(t),mRo=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),gRo=i(D),g5=n(D,"LI",{});var L0e=s(g5);Lde=n(L0e,"STRONG",{});var xtt=s(Lde);hRo=r(xtt,"xlnet"),xtt.forEach(t),pRo=r(L0e," \u2014 "),yj=n(L0e,"A",{href:!0});var ktt=s(yj);_Ro=r(ktt,"XLNetForTokenClassification"),ktt.forEach(t),uRo=r(L0e," (XLNet model)"),L0e.forEach(t),bRo=i(D),h5=n(D,"LI",{});var x0e=s(h5);xde=n(x0e,"STRONG",{});var Stt=s(xde);FRo=r(Stt,"yoso"),Stt.forEach(t),vRo=r(x0e," \u2014 "),Lj=n(x0e,"A",{href:!0});var Rtt=s(Lj);TRo=r(Rtt,"YosoForTokenClassification"),Rtt.forEach(t),MRo=r(x0e," (YOSO model)"),x0e.forEach(t),D.forEach(t),ERo=i(Ht),p5=n(Ht,"P",{});var k0e=s(p5);CRo=r(k0e,"The model is set in evaluation mode by default using "),kde=n(k0e,"CODE",{});var Btt=s(kde);wRo=r(Btt,"model.eval()"),Btt.forEach(t),ARo=r(k0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(k0e,"CODE",{});var Ptt=s(Sde);yRo=r(Ptt,"model.train()"),Ptt.forEach(t),k0e.forEach(t),LRo=i(Ht),Rde=n(Ht,"P",{});var $tt=s(Rde);xRo=r($tt,"Examples:"),$tt.forEach(t),kRo=i(Ht),m(sA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),ARe=i(c),Ed=n(c,"H2",{class:!0});var $Pe=s(Ed);_5=n($Pe,"A",{id:!0,class:!0,href:!0});var Itt=s(_5);Bde=n(Itt,"SPAN",{});var qtt=s(Bde);m(lA.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),SRo=i($Pe),Pde=n($Pe,"SPAN",{});var Ntt=s(Pde);RRo=r(Ntt,"AutoModelForQuestionAnswering"),Ntt.forEach(t),$Pe.forEach(t),yRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(iA.$$.fragment,fl),BRo=i(fl),Cd=n(fl,"P",{});var _U=s(Cd);PRo=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xj=n(_U,"A",{href:!0});var jtt=s(xj);$Ro=r(jtt,"from_pretrained()"),jtt.forEach(t),IRo=r(_U," class method or the "),kj=n(_U,"A",{href:!0});var Dtt=s(kj);qRo=r(Dtt,"from_config()"),Dtt.forEach(t),NRo=r(_U,` class
method.`),_U.forEach(t),jRo=i(fl),dA=n(fl,"P",{});var IPe=s(dA);DRo=r(IPe,"This class cannot be instantiated directly using "),$de=n(IPe,"CODE",{});var Gtt=s($de);GRo=r(Gtt,"__init__()"),Gtt.forEach(t),ORo=r(IPe," (throws an error)."),IPe.forEach(t),VRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(cA.$$.fragment,ml),XRo=i(ml),Ide=n(ml,"P",{});var Ott=s(Ide);zRo=r(Ott,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ott.forEach(t),QRo=i(ml),wd=n(ml,"P",{});var uU=s(wd);WRo=r(uU,`Note:
Loading a model from its configuration file does `),qde=n(uU,"STRONG",{});var Vtt=s(qde);HRo=r(Vtt,"not"),Vtt.forEach(t),URo=r(uU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(uU,"A",{href:!0});var Xtt=s(Sj);JRo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),YRo=r(uU," to load the model weights."),uU.forEach(t),KRo=i(ml),Nde=n(ml,"P",{});var ztt=s(Nde);ZRo=r(ztt,"Examples:"),ztt.forEach(t),eBo=i(ml),m(fA.$$.fragment,ml),ml.forEach(t),oBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(mA.$$.fragment,Ut),rBo=i(Ut),jde=n(Ut,"P",{});var Qtt=s(jde);tBo=r(Qtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qtt.forEach(t),aBo=i(Ut),Za=n(Ut,"P",{});var SE=s(Za);nBo=r(SE,"The model class to instantiate is selected based on the "),Dde=n(SE,"CODE",{});var Wtt=s(Dde);sBo=r(Wtt,"model_type"),Wtt.forEach(t),lBo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Gde=n(SE,"CODE",{});var Htt=s(Gde);iBo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),dBo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(SE,"CODE",{});var Utt=s(Ode);cBo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),fBo=r(SE,":"),SE.forEach(t),mBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);u5=n(P,"LI",{});var S0e=s(u5);Vde=n(S0e,"STRONG",{});var Jtt=s(Vde);gBo=r(Jtt,"albert"),Jtt.forEach(t),hBo=r(S0e," \u2014 "),Rj=n(S0e,"A",{href:!0});var Ytt=s(Rj);pBo=r(Ytt,"AlbertForQuestionAnswering"),Ytt.forEach(t),_Bo=r(S0e," (ALBERT model)"),S0e.forEach(t),uBo=i(P),b5=n(P,"LI",{});var R0e=s(b5);Xde=n(R0e,"STRONG",{});var Ktt=s(Xde);bBo=r(Ktt,"bart"),Ktt.forEach(t),FBo=r(R0e," \u2014 "),Bj=n(R0e,"A",{href:!0});var Ztt=s(Bj);vBo=r(Ztt,"BartForQuestionAnswering"),Ztt.forEach(t),TBo=r(R0e," (BART model)"),R0e.forEach(t),MBo=i(P),F5=n(P,"LI",{});var B0e=s(F5);zde=n(B0e,"STRONG",{});var eat=s(zde);EBo=r(eat,"bert"),eat.forEach(t),CBo=r(B0e," \u2014 "),Pj=n(B0e,"A",{href:!0});var oat=s(Pj);wBo=r(oat,"BertForQuestionAnswering"),oat.forEach(t),ABo=r(B0e," (BERT model)"),B0e.forEach(t),yBo=i(P),v5=n(P,"LI",{});var P0e=s(v5);Qde=n(P0e,"STRONG",{});var rat=s(Qde);LBo=r(rat,"big_bird"),rat.forEach(t),xBo=r(P0e," \u2014 "),$j=n(P0e,"A",{href:!0});var tat=s($j);kBo=r(tat,"BigBirdForQuestionAnswering"),tat.forEach(t),SBo=r(P0e," (BigBird model)"),P0e.forEach(t),RBo=i(P),T5=n(P,"LI",{});var $0e=s(T5);Wde=n($0e,"STRONG",{});var aat=s(Wde);BBo=r(aat,"bigbird_pegasus"),aat.forEach(t),PBo=r($0e," \u2014 "),Ij=n($0e,"A",{href:!0});var nat=s(Ij);$Bo=r(nat,"BigBirdPegasusForQuestionAnswering"),nat.forEach(t),IBo=r($0e," (BigBirdPegasus model)"),$0e.forEach(t),qBo=i(P),M5=n(P,"LI",{});var I0e=s(M5);Hde=n(I0e,"STRONG",{});var sat=s(Hde);NBo=r(sat,"camembert"),sat.forEach(t),jBo=r(I0e," \u2014 "),qj=n(I0e,"A",{href:!0});var lat=s(qj);DBo=r(lat,"CamembertForQuestionAnswering"),lat.forEach(t),GBo=r(I0e," (CamemBERT model)"),I0e.forEach(t),OBo=i(P),E5=n(P,"LI",{});var q0e=s(E5);Ude=n(q0e,"STRONG",{});var iat=s(Ude);VBo=r(iat,"canine"),iat.forEach(t),XBo=r(q0e," \u2014 "),Nj=n(q0e,"A",{href:!0});var dat=s(Nj);zBo=r(dat,"CanineForQuestionAnswering"),dat.forEach(t),QBo=r(q0e," (Canine model)"),q0e.forEach(t),WBo=i(P),C5=n(P,"LI",{});var N0e=s(C5);Jde=n(N0e,"STRONG",{});var cat=s(Jde);HBo=r(cat,"convbert"),cat.forEach(t),UBo=r(N0e," \u2014 "),jj=n(N0e,"A",{href:!0});var fat=s(jj);JBo=r(fat,"ConvBertForQuestionAnswering"),fat.forEach(t),YBo=r(N0e," (ConvBERT model)"),N0e.forEach(t),KBo=i(P),w5=n(P,"LI",{});var j0e=s(w5);Yde=n(j0e,"STRONG",{});var mat=s(Yde);ZBo=r(mat,"data2vec-text"),mat.forEach(t),ePo=r(j0e," \u2014 "),Dj=n(j0e,"A",{href:!0});var gat=s(Dj);oPo=r(gat,"Data2VecTextForQuestionAnswering"),gat.forEach(t),rPo=r(j0e," (Data2VecText model)"),j0e.forEach(t),tPo=i(P),A5=n(P,"LI",{});var D0e=s(A5);Kde=n(D0e,"STRONG",{});var hat=s(Kde);aPo=r(hat,"deberta"),hat.forEach(t),nPo=r(D0e," \u2014 "),Gj=n(D0e,"A",{href:!0});var pat=s(Gj);sPo=r(pat,"DebertaForQuestionAnswering"),pat.forEach(t),lPo=r(D0e," (DeBERTa model)"),D0e.forEach(t),iPo=i(P),y5=n(P,"LI",{});var G0e=s(y5);Zde=n(G0e,"STRONG",{});var _at=s(Zde);dPo=r(_at,"deberta-v2"),_at.forEach(t),cPo=r(G0e," \u2014 "),Oj=n(G0e,"A",{href:!0});var uat=s(Oj);fPo=r(uat,"DebertaV2ForQuestionAnswering"),uat.forEach(t),mPo=r(G0e," (DeBERTa-v2 model)"),G0e.forEach(t),gPo=i(P),L5=n(P,"LI",{});var O0e=s(L5);ece=n(O0e,"STRONG",{});var bat=s(ece);hPo=r(bat,"distilbert"),bat.forEach(t),pPo=r(O0e," \u2014 "),Vj=n(O0e,"A",{href:!0});var Fat=s(Vj);_Po=r(Fat,"DistilBertForQuestionAnswering"),Fat.forEach(t),uPo=r(O0e," (DistilBERT model)"),O0e.forEach(t),bPo=i(P),x5=n(P,"LI",{});var V0e=s(x5);oce=n(V0e,"STRONG",{});var vat=s(oce);FPo=r(vat,"electra"),vat.forEach(t),vPo=r(V0e," \u2014 "),Xj=n(V0e,"A",{href:!0});var Tat=s(Xj);TPo=r(Tat,"ElectraForQuestionAnswering"),Tat.forEach(t),MPo=r(V0e," (ELECTRA model)"),V0e.forEach(t),EPo=i(P),k5=n(P,"LI",{});var X0e=s(k5);rce=n(X0e,"STRONG",{});var Mat=s(rce);CPo=r(Mat,"flaubert"),Mat.forEach(t),wPo=r(X0e," \u2014 "),zj=n(X0e,"A",{href:!0});var Eat=s(zj);APo=r(Eat,"FlaubertForQuestionAnsweringSimple"),Eat.forEach(t),yPo=r(X0e," (FlauBERT model)"),X0e.forEach(t),LPo=i(P),S5=n(P,"LI",{});var z0e=s(S5);tce=n(z0e,"STRONG",{});var Cat=s(tce);xPo=r(Cat,"fnet"),Cat.forEach(t),kPo=r(z0e," \u2014 "),Qj=n(z0e,"A",{href:!0});var wat=s(Qj);SPo=r(wat,"FNetForQuestionAnswering"),wat.forEach(t),RPo=r(z0e," (FNet model)"),z0e.forEach(t),BPo=i(P),R5=n(P,"LI",{});var Q0e=s(R5);ace=n(Q0e,"STRONG",{});var Aat=s(ace);PPo=r(Aat,"funnel"),Aat.forEach(t),$Po=r(Q0e," \u2014 "),Wj=n(Q0e,"A",{href:!0});var yat=s(Wj);IPo=r(yat,"FunnelForQuestionAnswering"),yat.forEach(t),qPo=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),NPo=i(P),B5=n(P,"LI",{});var W0e=s(B5);nce=n(W0e,"STRONG",{});var Lat=s(nce);jPo=r(Lat,"gptj"),Lat.forEach(t),DPo=r(W0e," \u2014 "),Hj=n(W0e,"A",{href:!0});var xat=s(Hj);GPo=r(xat,"GPTJForQuestionAnswering"),xat.forEach(t),OPo=r(W0e," (GPT-J model)"),W0e.forEach(t),VPo=i(P),P5=n(P,"LI",{});var H0e=s(P5);sce=n(H0e,"STRONG",{});var kat=s(sce);XPo=r(kat,"ibert"),kat.forEach(t),zPo=r(H0e," \u2014 "),Uj=n(H0e,"A",{href:!0});var Sat=s(Uj);QPo=r(Sat,"IBertForQuestionAnswering"),Sat.forEach(t),WPo=r(H0e," (I-BERT model)"),H0e.forEach(t),HPo=i(P),$5=n(P,"LI",{});var U0e=s($5);lce=n(U0e,"STRONG",{});var Rat=s(lce);UPo=r(Rat,"layoutlmv2"),Rat.forEach(t),JPo=r(U0e," \u2014 "),Jj=n(U0e,"A",{href:!0});var Bat=s(Jj);YPo=r(Bat,"LayoutLMv2ForQuestionAnswering"),Bat.forEach(t),KPo=r(U0e," (LayoutLMv2 model)"),U0e.forEach(t),ZPo=i(P),I5=n(P,"LI",{});var J0e=s(I5);ice=n(J0e,"STRONG",{});var Pat=s(ice);e$o=r(Pat,"led"),Pat.forEach(t),o$o=r(J0e," \u2014 "),Yj=n(J0e,"A",{href:!0});var $at=s(Yj);r$o=r($at,"LEDForQuestionAnswering"),$at.forEach(t),t$o=r(J0e," (LED model)"),J0e.forEach(t),a$o=i(P),q5=n(P,"LI",{});var Y0e=s(q5);dce=n(Y0e,"STRONG",{});var Iat=s(dce);n$o=r(Iat,"longformer"),Iat.forEach(t),s$o=r(Y0e," \u2014 "),Kj=n(Y0e,"A",{href:!0});var qat=s(Kj);l$o=r(qat,"LongformerForQuestionAnswering"),qat.forEach(t),i$o=r(Y0e," (Longformer model)"),Y0e.forEach(t),d$o=i(P),N5=n(P,"LI",{});var K0e=s(N5);cce=n(K0e,"STRONG",{});var Nat=s(cce);c$o=r(Nat,"lxmert"),Nat.forEach(t),f$o=r(K0e," \u2014 "),Zj=n(K0e,"A",{href:!0});var jat=s(Zj);m$o=r(jat,"LxmertForQuestionAnswering"),jat.forEach(t),g$o=r(K0e," (LXMERT model)"),K0e.forEach(t),h$o=i(P),j5=n(P,"LI",{});var Z0e=s(j5);fce=n(Z0e,"STRONG",{});var Dat=s(fce);p$o=r(Dat,"mbart"),Dat.forEach(t),_$o=r(Z0e," \u2014 "),eD=n(Z0e,"A",{href:!0});var Gat=s(eD);u$o=r(Gat,"MBartForQuestionAnswering"),Gat.forEach(t),b$o=r(Z0e," (mBART model)"),Z0e.forEach(t),F$o=i(P),D5=n(P,"LI",{});var eye=s(D5);mce=n(eye,"STRONG",{});var Oat=s(mce);v$o=r(Oat,"megatron-bert"),Oat.forEach(t),T$o=r(eye," \u2014 "),oD=n(eye,"A",{href:!0});var Vat=s(oD);M$o=r(Vat,"MegatronBertForQuestionAnswering"),Vat.forEach(t),E$o=r(eye," (MegatronBert model)"),eye.forEach(t),C$o=i(P),G5=n(P,"LI",{});var oye=s(G5);gce=n(oye,"STRONG",{});var Xat=s(gce);w$o=r(Xat,"mobilebert"),Xat.forEach(t),A$o=r(oye," \u2014 "),rD=n(oye,"A",{href:!0});var zat=s(rD);y$o=r(zat,"MobileBertForQuestionAnswering"),zat.forEach(t),L$o=r(oye," (MobileBERT model)"),oye.forEach(t),x$o=i(P),O5=n(P,"LI",{});var rye=s(O5);hce=n(rye,"STRONG",{});var Qat=s(hce);k$o=r(Qat,"mpnet"),Qat.forEach(t),S$o=r(rye," \u2014 "),tD=n(rye,"A",{href:!0});var Wat=s(tD);R$o=r(Wat,"MPNetForQuestionAnswering"),Wat.forEach(t),B$o=r(rye," (MPNet model)"),rye.forEach(t),P$o=i(P),V5=n(P,"LI",{});var tye=s(V5);pce=n(tye,"STRONG",{});var Hat=s(pce);$$o=r(Hat,"nystromformer"),Hat.forEach(t),I$o=r(tye," \u2014 "),aD=n(tye,"A",{href:!0});var Uat=s(aD);q$o=r(Uat,"NystromformerForQuestionAnswering"),Uat.forEach(t),N$o=r(tye," (Nystromformer model)"),tye.forEach(t),j$o=i(P),X5=n(P,"LI",{});var aye=s(X5);_ce=n(aye,"STRONG",{});var Jat=s(_ce);D$o=r(Jat,"qdqbert"),Jat.forEach(t),G$o=r(aye," \u2014 "),nD=n(aye,"A",{href:!0});var Yat=s(nD);O$o=r(Yat,"QDQBertForQuestionAnswering"),Yat.forEach(t),V$o=r(aye," (QDQBert model)"),aye.forEach(t),X$o=i(P),z5=n(P,"LI",{});var nye=s(z5);uce=n(nye,"STRONG",{});var Kat=s(uce);z$o=r(Kat,"reformer"),Kat.forEach(t),Q$o=r(nye," \u2014 "),sD=n(nye,"A",{href:!0});var Zat=s(sD);W$o=r(Zat,"ReformerForQuestionAnswering"),Zat.forEach(t),H$o=r(nye," (Reformer model)"),nye.forEach(t),U$o=i(P),Q5=n(P,"LI",{});var sye=s(Q5);bce=n(sye,"STRONG",{});var ent=s(bce);J$o=r(ent,"rembert"),ent.forEach(t),Y$o=r(sye," \u2014 "),lD=n(sye,"A",{href:!0});var ont=s(lD);K$o=r(ont,"RemBertForQuestionAnswering"),ont.forEach(t),Z$o=r(sye," (RemBERT model)"),sye.forEach(t),eIo=i(P),W5=n(P,"LI",{});var lye=s(W5);Fce=n(lye,"STRONG",{});var rnt=s(Fce);oIo=r(rnt,"roberta"),rnt.forEach(t),rIo=r(lye," \u2014 "),iD=n(lye,"A",{href:!0});var tnt=s(iD);tIo=r(tnt,"RobertaForQuestionAnswering"),tnt.forEach(t),aIo=r(lye," (RoBERTa model)"),lye.forEach(t),nIo=i(P),H5=n(P,"LI",{});var iye=s(H5);vce=n(iye,"STRONG",{});var ant=s(vce);sIo=r(ant,"roformer"),ant.forEach(t),lIo=r(iye," \u2014 "),dD=n(iye,"A",{href:!0});var nnt=s(dD);iIo=r(nnt,"RoFormerForQuestionAnswering"),nnt.forEach(t),dIo=r(iye," (RoFormer model)"),iye.forEach(t),cIo=i(P),U5=n(P,"LI",{});var dye=s(U5);Tce=n(dye,"STRONG",{});var snt=s(Tce);fIo=r(snt,"splinter"),snt.forEach(t),mIo=r(dye," \u2014 "),cD=n(dye,"A",{href:!0});var lnt=s(cD);gIo=r(lnt,"SplinterForQuestionAnswering"),lnt.forEach(t),hIo=r(dye," (Splinter model)"),dye.forEach(t),pIo=i(P),J5=n(P,"LI",{});var cye=s(J5);Mce=n(cye,"STRONG",{});var int=s(Mce);_Io=r(int,"squeezebert"),int.forEach(t),uIo=r(cye," \u2014 "),fD=n(cye,"A",{href:!0});var dnt=s(fD);bIo=r(dnt,"SqueezeBertForQuestionAnswering"),dnt.forEach(t),FIo=r(cye," (SqueezeBERT model)"),cye.forEach(t),vIo=i(P),Y5=n(P,"LI",{});var fye=s(Y5);Ece=n(fye,"STRONG",{});var cnt=s(Ece);TIo=r(cnt,"xlm"),cnt.forEach(t),MIo=r(fye," \u2014 "),mD=n(fye,"A",{href:!0});var fnt=s(mD);EIo=r(fnt,"XLMForQuestionAnsweringSimple"),fnt.forEach(t),CIo=r(fye," (XLM model)"),fye.forEach(t),wIo=i(P),K5=n(P,"LI",{});var mye=s(K5);Cce=n(mye,"STRONG",{});var mnt=s(Cce);AIo=r(mnt,"xlm-roberta"),mnt.forEach(t),yIo=r(mye," \u2014 "),gD=n(mye,"A",{href:!0});var gnt=s(gD);LIo=r(gnt,"XLMRobertaForQuestionAnswering"),gnt.forEach(t),xIo=r(mye," (XLM-RoBERTa model)"),mye.forEach(t),kIo=i(P),Z5=n(P,"LI",{});var gye=s(Z5);wce=n(gye,"STRONG",{});var hnt=s(wce);SIo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),RIo=r(gye," \u2014 "),hD=n(gye,"A",{href:!0});var pnt=s(hD);BIo=r(pnt,"XLMRobertaXLForQuestionAnswering"),pnt.forEach(t),PIo=r(gye," (XLM-RoBERTa-XL model)"),gye.forEach(t),$Io=i(P),e3=n(P,"LI",{});var hye=s(e3);Ace=n(hye,"STRONG",{});var _nt=s(Ace);IIo=r(_nt,"xlnet"),_nt.forEach(t),qIo=r(hye," \u2014 "),pD=n(hye,"A",{href:!0});var unt=s(pD);NIo=r(unt,"XLNetForQuestionAnsweringSimple"),unt.forEach(t),jIo=r(hye," (XLNet model)"),hye.forEach(t),DIo=i(P),o3=n(P,"LI",{});var pye=s(o3);yce=n(pye,"STRONG",{});var bnt=s(yce);GIo=r(bnt,"yoso"),bnt.forEach(t),OIo=r(pye," \u2014 "),_D=n(pye,"A",{href:!0});var Fnt=s(_D);VIo=r(Fnt,"YosoForQuestionAnswering"),Fnt.forEach(t),XIo=r(pye," (YOSO model)"),pye.forEach(t),P.forEach(t),zIo=i(Ut),r3=n(Ut,"P",{});var _ye=s(r3);QIo=r(_ye,"The model is set in evaluation mode by default using "),Lce=n(_ye,"CODE",{});var vnt=s(Lce);WIo=r(vnt,"model.eval()"),vnt.forEach(t),HIo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(_ye,"CODE",{});var Tnt=s(xce);UIo=r(Tnt,"model.train()"),Tnt.forEach(t),_ye.forEach(t),JIo=i(Ut),kce=n(Ut,"P",{});var Mnt=s(kce);YIo=r(Mnt,"Examples:"),Mnt.forEach(t),KIo=i(Ut),m(gA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),LRe=i(c),Ad=n(c,"H2",{class:!0});var qPe=s(Ad);t3=n(qPe,"A",{id:!0,class:!0,href:!0});var Ent=s(t3);Sce=n(Ent,"SPAN",{});var Cnt=s(Sce);m(hA.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),ZIo=i(qPe),Rce=n(qPe,"SPAN",{});var wnt=s(Rce);eqo=r(wnt,"AutoModelForTableQuestionAnswering"),wnt.forEach(t),qPe.forEach(t),xRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(pA.$$.fragment,gl),oqo=i(gl),yd=n(gl,"P",{});var bU=s(yd);rqo=r(bU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uD=n(bU,"A",{href:!0});var Ant=s(uD);tqo=r(Ant,"from_pretrained()"),Ant.forEach(t),aqo=r(bU," class method or the "),bD=n(bU,"A",{href:!0});var ynt=s(bD);nqo=r(ynt,"from_config()"),ynt.forEach(t),sqo=r(bU,` class
method.`),bU.forEach(t),lqo=i(gl),_A=n(gl,"P",{});var NPe=s(_A);iqo=r(NPe,"This class cannot be instantiated directly using "),Bce=n(NPe,"CODE",{});var Lnt=s(Bce);dqo=r(Lnt,"__init__()"),Lnt.forEach(t),cqo=r(NPe," (throws an error)."),NPe.forEach(t),fqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(uA.$$.fragment,hl),mqo=i(hl),Pce=n(hl,"P",{});var xnt=s(Pce);gqo=r(xnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xnt.forEach(t),hqo=i(hl),Ld=n(hl,"P",{});var FU=s(Ld);pqo=r(FU,`Note:
Loading a model from its configuration file does `),$ce=n(FU,"STRONG",{});var knt=s($ce);_qo=r(knt,"not"),knt.forEach(t),uqo=r(FU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(FU,"A",{href:!0});var Snt=s(FD);bqo=r(Snt,"from_pretrained()"),Snt.forEach(t),Fqo=r(FU," to load the model weights."),FU.forEach(t),vqo=i(hl),Ice=n(hl,"P",{});var Rnt=s(Ice);Tqo=r(Rnt,"Examples:"),Rnt.forEach(t),Mqo=i(hl),m(bA.$$.fragment,hl),hl.forEach(t),Eqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(FA.$$.fragment,Jt),Cqo=i(Jt),qce=n(Jt,"P",{});var Bnt=s(qce);wqo=r(Bnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bnt.forEach(t),Aqo=i(Jt),en=n(Jt,"P",{});var RE=s(en);yqo=r(RE,"The model class to instantiate is selected based on the "),Nce=n(RE,"CODE",{});var Pnt=s(Nce);Lqo=r(Pnt,"model_type"),Pnt.forEach(t),xqo=r(RE,` property of the config object (either
passed as an argument or loaded from `),jce=n(RE,"CODE",{});var $nt=s(jce);kqo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),Sqo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(RE,"CODE",{});var Int=s(Dce);Rqo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),Bqo=r(RE,":"),RE.forEach(t),Pqo=i(Jt),Gce=n(Jt,"UL",{});var qnt=s(Gce);a3=n(qnt,"LI",{});var uye=s(a3);Oce=n(uye,"STRONG",{});var Nnt=s(Oce);$qo=r(Nnt,"tapas"),Nnt.forEach(t),Iqo=r(uye," \u2014 "),vD=n(uye,"A",{href:!0});var jnt=s(vD);qqo=r(jnt,"TapasForQuestionAnswering"),jnt.forEach(t),Nqo=r(uye," (TAPAS model)"),uye.forEach(t),qnt.forEach(t),jqo=i(Jt),n3=n(Jt,"P",{});var bye=s(n3);Dqo=r(bye,"The model is set in evaluation mode by default using "),Vce=n(bye,"CODE",{});var Dnt=s(Vce);Gqo=r(Dnt,"model.eval()"),Dnt.forEach(t),Oqo=r(bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=n(bye,"CODE",{});var Gnt=s(Xce);Vqo=r(Gnt,"model.train()"),Gnt.forEach(t),bye.forEach(t),Xqo=i(Jt),zce=n(Jt,"P",{});var Ont=s(zce);zqo=r(Ont,"Examples:"),Ont.forEach(t),Qqo=i(Jt),m(vA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),kRe=i(c),xd=n(c,"H2",{class:!0});var jPe=s(xd);s3=n(jPe,"A",{id:!0,class:!0,href:!0});var Vnt=s(s3);Qce=n(Vnt,"SPAN",{});var Xnt=s(Qce);m(TA.$$.fragment,Xnt),Xnt.forEach(t),Vnt.forEach(t),Wqo=i(jPe),Wce=n(jPe,"SPAN",{});var znt=s(Wce);Hqo=r(znt,"AutoModelForImageClassification"),znt.forEach(t),jPe.forEach(t),SRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(MA.$$.fragment,pl),Uqo=i(pl),kd=n(pl,"P",{});var vU=s(kd);Jqo=r(vU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TD=n(vU,"A",{href:!0});var Qnt=s(TD);Yqo=r(Qnt,"from_pretrained()"),Qnt.forEach(t),Kqo=r(vU," class method or the "),MD=n(vU,"A",{href:!0});var Wnt=s(MD);Zqo=r(Wnt,"from_config()"),Wnt.forEach(t),eNo=r(vU,` class
method.`),vU.forEach(t),oNo=i(pl),EA=n(pl,"P",{});var DPe=s(EA);rNo=r(DPe,"This class cannot be instantiated directly using "),Hce=n(DPe,"CODE",{});var Hnt=s(Hce);tNo=r(Hnt,"__init__()"),Hnt.forEach(t),aNo=r(DPe," (throws an error)."),DPe.forEach(t),nNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(CA.$$.fragment,_l),sNo=i(_l),Uce=n(_l,"P",{});var Unt=s(Uce);lNo=r(Unt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Unt.forEach(t),iNo=i(_l),Sd=n(_l,"P",{});var TU=s(Sd);dNo=r(TU,`Note:
Loading a model from its configuration file does `),Jce=n(TU,"STRONG",{});var Jnt=s(Jce);cNo=r(Jnt,"not"),Jnt.forEach(t),fNo=r(TU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(TU,"A",{href:!0});var Ynt=s(ED);mNo=r(Ynt,"from_pretrained()"),Ynt.forEach(t),gNo=r(TU," to load the model weights."),TU.forEach(t),hNo=i(_l),Yce=n(_l,"P",{});var Knt=s(Yce);pNo=r(Knt,"Examples:"),Knt.forEach(t),_No=i(_l),m(wA.$$.fragment,_l),_l.forEach(t),uNo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(AA.$$.fragment,Yt),bNo=i(Yt),Kce=n(Yt,"P",{});var Znt=s(Kce);FNo=r(Znt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Znt.forEach(t),vNo=i(Yt),on=n(Yt,"P",{});var BE=s(on);TNo=r(BE,"The model class to instantiate is selected based on the "),Zce=n(BE,"CODE",{});var est=s(Zce);MNo=r(est,"model_type"),est.forEach(t),ENo=r(BE,` property of the config object (either
passed as an argument or loaded from `),efe=n(BE,"CODE",{});var ost=s(efe);CNo=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),wNo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(BE,"CODE",{});var rst=s(ofe);ANo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),yNo=r(BE,":"),BE.forEach(t),LNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);l3=n(Te,"LI",{});var Fye=s(l3);rfe=n(Fye,"STRONG",{});var tst=s(rfe);xNo=r(tst,"beit"),tst.forEach(t),kNo=r(Fye," \u2014 "),CD=n(Fye,"A",{href:!0});var ast=s(CD);SNo=r(ast,"BeitForImageClassification"),ast.forEach(t),RNo=r(Fye," (BEiT model)"),Fye.forEach(t),BNo=i(Te),i3=n(Te,"LI",{});var vye=s(i3);tfe=n(vye,"STRONG",{});var nst=s(tfe);PNo=r(nst,"convnext"),nst.forEach(t),$No=r(vye," \u2014 "),wD=n(vye,"A",{href:!0});var sst=s(wD);INo=r(sst,"ConvNextForImageClassification"),sst.forEach(t),qNo=r(vye," (ConvNext model)"),vye.forEach(t),NNo=i(Te),Ds=n(Te,"LI",{});var i9=s(Ds);afe=n(i9,"STRONG",{});var lst=s(afe);jNo=r(lst,"deit"),lst.forEach(t),DNo=r(i9," \u2014 "),AD=n(i9,"A",{href:!0});var ist=s(AD);GNo=r(ist,"DeiTForImageClassification"),ist.forEach(t),ONo=r(i9," or "),yD=n(i9,"A",{href:!0});var dst=s(yD);VNo=r(dst,"DeiTForImageClassificationWithTeacher"),dst.forEach(t),XNo=r(i9," (DeiT model)"),i9.forEach(t),zNo=i(Te),d3=n(Te,"LI",{});var Tye=s(d3);nfe=n(Tye,"STRONG",{});var cst=s(nfe);QNo=r(cst,"imagegpt"),cst.forEach(t),WNo=r(Tye," \u2014 "),LD=n(Tye,"A",{href:!0});var fst=s(LD);HNo=r(fst,"ImageGPTForImageClassification"),fst.forEach(t),UNo=r(Tye," (ImageGPT model)"),Tye.forEach(t),JNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);sfe=n($f,"STRONG",{});var mst=s(sfe);YNo=r(mst,"perceiver"),mst.forEach(t),KNo=r($f," \u2014 "),xD=n($f,"A",{href:!0});var gst=s(xD);ZNo=r(gst,"PerceiverForImageClassificationLearned"),gst.forEach(t),ejo=r($f," or "),kD=n($f,"A",{href:!0});var hst=s(kD);ojo=r(hst,"PerceiverForImageClassificationFourier"),hst.forEach(t),rjo=r($f," or "),SD=n($f,"A",{href:!0});var pst=s(SD);tjo=r(pst,"PerceiverForImageClassificationConvProcessing"),pst.forEach(t),ajo=r($f," (Perceiver model)"),$f.forEach(t),njo=i(Te),c3=n(Te,"LI",{});var Mye=s(c3);lfe=n(Mye,"STRONG",{});var _st=s(lfe);sjo=r(_st,"poolformer"),_st.forEach(t),ljo=r(Mye," \u2014 "),RD=n(Mye,"A",{href:!0});var ust=s(RD);ijo=r(ust,"PoolFormerForImageClassification"),ust.forEach(t),djo=r(Mye," (PoolFormer model)"),Mye.forEach(t),cjo=i(Te),f3=n(Te,"LI",{});var Eye=s(f3);ife=n(Eye,"STRONG",{});var bst=s(ife);fjo=r(bst,"resnet"),bst.forEach(t),mjo=r(Eye," \u2014 "),BD=n(Eye,"A",{href:!0});var Fst=s(BD);gjo=r(Fst,"ResNetForImageClassification"),Fst.forEach(t),hjo=r(Eye," (ResNet model)"),Eye.forEach(t),pjo=i(Te),m3=n(Te,"LI",{});var Cye=s(m3);dfe=n(Cye,"STRONG",{});var vst=s(dfe);_jo=r(vst,"segformer"),vst.forEach(t),ujo=r(Cye," \u2014 "),PD=n(Cye,"A",{href:!0});var Tst=s(PD);bjo=r(Tst,"SegformerForImageClassification"),Tst.forEach(t),Fjo=r(Cye," (SegFormer model)"),Cye.forEach(t),vjo=i(Te),g3=n(Te,"LI",{});var wye=s(g3);cfe=n(wye,"STRONG",{});var Mst=s(cfe);Tjo=r(Mst,"swin"),Mst.forEach(t),Mjo=r(wye," \u2014 "),$D=n(wye,"A",{href:!0});var Est=s($D);Ejo=r(Est,"SwinForImageClassification"),Est.forEach(t),Cjo=r(wye," (Swin model)"),wye.forEach(t),wjo=i(Te),h3=n(Te,"LI",{});var Aye=s(h3);ffe=n(Aye,"STRONG",{});var Cst=s(ffe);Ajo=r(Cst,"van"),Cst.forEach(t),yjo=r(Aye," \u2014 "),ID=n(Aye,"A",{href:!0});var wst=s(ID);Ljo=r(wst,"VanForImageClassification"),wst.forEach(t),xjo=r(Aye," (VAN model)"),Aye.forEach(t),kjo=i(Te),p3=n(Te,"LI",{});var yye=s(p3);mfe=n(yye,"STRONG",{});var Ast=s(mfe);Sjo=r(Ast,"vit"),Ast.forEach(t),Rjo=r(yye," \u2014 "),qD=n(yye,"A",{href:!0});var yst=s(qD);Bjo=r(yst,"ViTForImageClassification"),yst.forEach(t),Pjo=r(yye," (ViT model)"),yye.forEach(t),Te.forEach(t),$jo=i(Yt),_3=n(Yt,"P",{});var Lye=s(_3);Ijo=r(Lye,"The model is set in evaluation mode by default using "),gfe=n(Lye,"CODE",{});var Lst=s(gfe);qjo=r(Lst,"model.eval()"),Lst.forEach(t),Njo=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(Lye,"CODE",{});var xst=s(hfe);jjo=r(xst,"model.train()"),xst.forEach(t),Lye.forEach(t),Djo=i(Yt),pfe=n(Yt,"P",{});var kst=s(pfe);Gjo=r(kst,"Examples:"),kst.forEach(t),Ojo=i(Yt),m(yA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),RRe=i(c),Rd=n(c,"H2",{class:!0});var GPe=s(Rd);u3=n(GPe,"A",{id:!0,class:!0,href:!0});var Sst=s(u3);_fe=n(Sst,"SPAN",{});var Rst=s(_fe);m(LA.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),Vjo=i(GPe),ufe=n(GPe,"SPAN",{});var Bst=s(ufe);Xjo=r(Bst,"AutoModelForVision2Seq"),Bst.forEach(t),GPe.forEach(t),BRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(xA.$$.fragment,ul),zjo=i(ul),Bd=n(ul,"P",{});var MU=s(Bd);Qjo=r(MU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ND=n(MU,"A",{href:!0});var Pst=s(ND);Wjo=r(Pst,"from_pretrained()"),Pst.forEach(t),Hjo=r(MU," class method or the "),jD=n(MU,"A",{href:!0});var $st=s(jD);Ujo=r($st,"from_config()"),$st.forEach(t),Jjo=r(MU,` class
method.`),MU.forEach(t),Yjo=i(ul),kA=n(ul,"P",{});var OPe=s(kA);Kjo=r(OPe,"This class cannot be instantiated directly using "),bfe=n(OPe,"CODE",{});var Ist=s(bfe);Zjo=r(Ist,"__init__()"),Ist.forEach(t),eDo=r(OPe," (throws an error)."),OPe.forEach(t),oDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(SA.$$.fragment,bl),rDo=i(bl),Ffe=n(bl,"P",{});var qst=s(Ffe);tDo=r(qst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qst.forEach(t),aDo=i(bl),Pd=n(bl,"P",{});var EU=s(Pd);nDo=r(EU,`Note:
Loading a model from its configuration file does `),vfe=n(EU,"STRONG",{});var Nst=s(vfe);sDo=r(Nst,"not"),Nst.forEach(t),lDo=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(EU,"A",{href:!0});var jst=s(DD);iDo=r(jst,"from_pretrained()"),jst.forEach(t),dDo=r(EU," to load the model weights."),EU.forEach(t),cDo=i(bl),Tfe=n(bl,"P",{});var Dst=s(Tfe);fDo=r(Dst,"Examples:"),Dst.forEach(t),mDo=i(bl),m(RA.$$.fragment,bl),bl.forEach(t),gDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(BA.$$.fragment,Kt),hDo=i(Kt),Mfe=n(Kt,"P",{});var Gst=s(Mfe);pDo=r(Gst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gst.forEach(t),_Do=i(Kt),rn=n(Kt,"P",{});var PE=s(rn);uDo=r(PE,"The model class to instantiate is selected based on the "),Efe=n(PE,"CODE",{});var Ost=s(Efe);bDo=r(Ost,"model_type"),Ost.forEach(t),FDo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(PE,"CODE",{});var Vst=s(Cfe);vDo=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),TDo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(PE,"CODE",{});var Xst=s(wfe);MDo=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),EDo=r(PE,":"),PE.forEach(t),CDo=i(Kt),Afe=n(Kt,"UL",{});var zst=s(Afe);b3=n(zst,"LI",{});var xye=s(b3);yfe=n(xye,"STRONG",{});var Qst=s(yfe);wDo=r(Qst,"vision-encoder-decoder"),Qst.forEach(t),ADo=r(xye," \u2014 "),GD=n(xye,"A",{href:!0});var Wst=s(GD);yDo=r(Wst,"VisionEncoderDecoderModel"),Wst.forEach(t),LDo=r(xye," (Vision Encoder decoder model)"),xye.forEach(t),zst.forEach(t),xDo=i(Kt),F3=n(Kt,"P",{});var kye=s(F3);kDo=r(kye,"The model is set in evaluation mode by default using "),Lfe=n(kye,"CODE",{});var Hst=s(Lfe);SDo=r(Hst,"model.eval()"),Hst.forEach(t),RDo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(kye,"CODE",{});var Ust=s(xfe);BDo=r(Ust,"model.train()"),Ust.forEach(t),kye.forEach(t),PDo=i(Kt),kfe=n(Kt,"P",{});var Jst=s(kfe);$Do=r(Jst,"Examples:"),Jst.forEach(t),IDo=i(Kt),m(PA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),PRe=i(c),$d=n(c,"H2",{class:!0});var VPe=s($d);v3=n(VPe,"A",{id:!0,class:!0,href:!0});var Yst=s(v3);Sfe=n(Yst,"SPAN",{});var Kst=s(Sfe);m($A.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),qDo=i(VPe),Rfe=n(VPe,"SPAN",{});var Zst=s(Rfe);NDo=r(Zst,"AutoModelForAudioClassification"),Zst.forEach(t),VPe.forEach(t),$Re=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(IA.$$.fragment,Fl),jDo=i(Fl),Id=n(Fl,"P",{});var CU=s(Id);DDo=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OD=n(CU,"A",{href:!0});var elt=s(OD);GDo=r(elt,"from_pretrained()"),elt.forEach(t),ODo=r(CU," class method or the "),VD=n(CU,"A",{href:!0});var olt=s(VD);VDo=r(olt,"from_config()"),olt.forEach(t),XDo=r(CU,` class
method.`),CU.forEach(t),zDo=i(Fl),qA=n(Fl,"P",{});var XPe=s(qA);QDo=r(XPe,"This class cannot be instantiated directly using "),Bfe=n(XPe,"CODE",{});var rlt=s(Bfe);WDo=r(rlt,"__init__()"),rlt.forEach(t),HDo=r(XPe," (throws an error)."),XPe.forEach(t),UDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(NA.$$.fragment,vl),JDo=i(vl),Pfe=n(vl,"P",{});var tlt=s(Pfe);YDo=r(tlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tlt.forEach(t),KDo=i(vl),qd=n(vl,"P",{});var wU=s(qd);ZDo=r(wU,`Note:
Loading a model from its configuration file does `),$fe=n(wU,"STRONG",{});var alt=s($fe);eGo=r(alt,"not"),alt.forEach(t),oGo=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(wU,"A",{href:!0});var nlt=s(XD);rGo=r(nlt,"from_pretrained()"),nlt.forEach(t),tGo=r(wU," to load the model weights."),wU.forEach(t),aGo=i(vl),Ife=n(vl,"P",{});var slt=s(Ife);nGo=r(slt,"Examples:"),slt.forEach(t),sGo=i(vl),m(jA.$$.fragment,vl),vl.forEach(t),lGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(DA.$$.fragment,Zt),iGo=i(Zt),qfe=n(Zt,"P",{});var llt=s(qfe);dGo=r(llt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),llt.forEach(t),cGo=i(Zt),tn=n(Zt,"P",{});var $E=s(tn);fGo=r($E,"The model class to instantiate is selected based on the "),Nfe=n($E,"CODE",{});var ilt=s(Nfe);mGo=r(ilt,"model_type"),ilt.forEach(t),gGo=r($E,` property of the config object (either
passed as an argument or loaded from `),jfe=n($E,"CODE",{});var dlt=s(jfe);hGo=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),pGo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n($E,"CODE",{});var clt=s(Dfe);_Go=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),uGo=r($E,":"),$E.forEach(t),bGo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);T3=n(Do,"LI",{});var Sye=s(T3);Gfe=n(Sye,"STRONG",{});var flt=s(Gfe);FGo=r(flt,"data2vec-audio"),flt.forEach(t),vGo=r(Sye," \u2014 "),zD=n(Sye,"A",{href:!0});var mlt=s(zD);TGo=r(mlt,"Data2VecAudioForSequenceClassification"),mlt.forEach(t),MGo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),EGo=i(Do),M3=n(Do,"LI",{});var Rye=s(M3);Ofe=n(Rye,"STRONG",{});var glt=s(Ofe);CGo=r(glt,"hubert"),glt.forEach(t),wGo=r(Rye," \u2014 "),QD=n(Rye,"A",{href:!0});var hlt=s(QD);AGo=r(hlt,"HubertForSequenceClassification"),hlt.forEach(t),yGo=r(Rye," (Hubert model)"),Rye.forEach(t),LGo=i(Do),E3=n(Do,"LI",{});var Bye=s(E3);Vfe=n(Bye,"STRONG",{});var plt=s(Vfe);xGo=r(plt,"sew"),plt.forEach(t),kGo=r(Bye," \u2014 "),WD=n(Bye,"A",{href:!0});var _lt=s(WD);SGo=r(_lt,"SEWForSequenceClassification"),_lt.forEach(t),RGo=r(Bye," (SEW model)"),Bye.forEach(t),BGo=i(Do),C3=n(Do,"LI",{});var Pye=s(C3);Xfe=n(Pye,"STRONG",{});var ult=s(Xfe);PGo=r(ult,"sew-d"),ult.forEach(t),$Go=r(Pye," \u2014 "),HD=n(Pye,"A",{href:!0});var blt=s(HD);IGo=r(blt,"SEWDForSequenceClassification"),blt.forEach(t),qGo=r(Pye," (SEW-D model)"),Pye.forEach(t),NGo=i(Do),w3=n(Do,"LI",{});var $ye=s(w3);zfe=n($ye,"STRONG",{});var Flt=s(zfe);jGo=r(Flt,"unispeech"),Flt.forEach(t),DGo=r($ye," \u2014 "),UD=n($ye,"A",{href:!0});var vlt=s(UD);GGo=r(vlt,"UniSpeechForSequenceClassification"),vlt.forEach(t),OGo=r($ye," (UniSpeech model)"),$ye.forEach(t),VGo=i(Do),A3=n(Do,"LI",{});var Iye=s(A3);Qfe=n(Iye,"STRONG",{});var Tlt=s(Qfe);XGo=r(Tlt,"unispeech-sat"),Tlt.forEach(t),zGo=r(Iye," \u2014 "),JD=n(Iye,"A",{href:!0});var Mlt=s(JD);QGo=r(Mlt,"UniSpeechSatForSequenceClassification"),Mlt.forEach(t),WGo=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),HGo=i(Do),y3=n(Do,"LI",{});var qye=s(y3);Wfe=n(qye,"STRONG",{});var Elt=s(Wfe);UGo=r(Elt,"wav2vec2"),Elt.forEach(t),JGo=r(qye," \u2014 "),YD=n(qye,"A",{href:!0});var Clt=s(YD);YGo=r(Clt,"Wav2Vec2ForSequenceClassification"),Clt.forEach(t),KGo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),ZGo=i(Do),L3=n(Do,"LI",{});var Nye=s(L3);Hfe=n(Nye,"STRONG",{});var wlt=s(Hfe);eOo=r(wlt,"wavlm"),wlt.forEach(t),oOo=r(Nye," \u2014 "),KD=n(Nye,"A",{href:!0});var Alt=s(KD);rOo=r(Alt,"WavLMForSequenceClassification"),Alt.forEach(t),tOo=r(Nye," (WavLM model)"),Nye.forEach(t),Do.forEach(t),aOo=i(Zt),x3=n(Zt,"P",{});var jye=s(x3);nOo=r(jye,"The model is set in evaluation mode by default using "),Ufe=n(jye,"CODE",{});var ylt=s(Ufe);sOo=r(ylt,"model.eval()"),ylt.forEach(t),lOo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(jye,"CODE",{});var Llt=s(Jfe);iOo=r(Llt,"model.train()"),Llt.forEach(t),jye.forEach(t),dOo=i(Zt),Yfe=n(Zt,"P",{});var xlt=s(Yfe);cOo=r(xlt,"Examples:"),xlt.forEach(t),fOo=i(Zt),m(GA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),IRe=i(c),Nd=n(c,"H2",{class:!0});var zPe=s(Nd);k3=n(zPe,"A",{id:!0,class:!0,href:!0});var klt=s(k3);Kfe=n(klt,"SPAN",{});var Slt=s(Kfe);m(OA.$$.fragment,Slt),Slt.forEach(t),klt.forEach(t),mOo=i(zPe),Zfe=n(zPe,"SPAN",{});var Rlt=s(Zfe);gOo=r(Rlt,"AutoModelForAudioFrameClassification"),Rlt.forEach(t),zPe.forEach(t),qRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(VA.$$.fragment,Tl),hOo=i(Tl),jd=n(Tl,"P",{});var AU=s(jd);pOo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZD=n(AU,"A",{href:!0});var Blt=s(ZD);_Oo=r(Blt,"from_pretrained()"),Blt.forEach(t),uOo=r(AU," class method or the "),eG=n(AU,"A",{href:!0});var Plt=s(eG);bOo=r(Plt,"from_config()"),Plt.forEach(t),FOo=r(AU,` class
method.`),AU.forEach(t),vOo=i(Tl),XA=n(Tl,"P",{});var QPe=s(XA);TOo=r(QPe,"This class cannot be instantiated directly using "),eme=n(QPe,"CODE",{});var $lt=s(eme);MOo=r($lt,"__init__()"),$lt.forEach(t),EOo=r(QPe," (throws an error)."),QPe.forEach(t),COo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(zA.$$.fragment,Ml),wOo=i(Ml),ome=n(Ml,"P",{});var Ilt=s(ome);AOo=r(Ilt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ilt.forEach(t),yOo=i(Ml),Dd=n(Ml,"P",{});var yU=s(Dd);LOo=r(yU,`Note:
Loading a model from its configuration file does `),rme=n(yU,"STRONG",{});var qlt=s(rme);xOo=r(qlt,"not"),qlt.forEach(t),kOo=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(yU,"A",{href:!0});var Nlt=s(oG);SOo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),ROo=r(yU," to load the model weights."),yU.forEach(t),BOo=i(Ml),tme=n(Ml,"P",{});var jlt=s(tme);POo=r(jlt,"Examples:"),jlt.forEach(t),$Oo=i(Ml),m(QA.$$.fragment,Ml),Ml.forEach(t),IOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(WA.$$.fragment,ea),qOo=i(ea),ame=n(ea,"P",{});var Dlt=s(ame);NOo=r(Dlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dlt.forEach(t),jOo=i(ea),an=n(ea,"P",{});var IE=s(an);DOo=r(IE,"The model class to instantiate is selected based on the "),nme=n(IE,"CODE",{});var Glt=s(nme);GOo=r(Glt,"model_type"),Glt.forEach(t),OOo=r(IE,` property of the config object (either
passed as an argument or loaded from `),sme=n(IE,"CODE",{});var Olt=s(sme);VOo=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),XOo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(IE,"CODE",{});var Vlt=s(lme);zOo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),QOo=r(IE,":"),IE.forEach(t),WOo=i(ea),nn=n(ea,"UL",{});var qE=s(nn);S3=n(qE,"LI",{});var Dye=s(S3);ime=n(Dye,"STRONG",{});var Xlt=s(ime);HOo=r(Xlt,"data2vec-audio"),Xlt.forEach(t),UOo=r(Dye," \u2014 "),rG=n(Dye,"A",{href:!0});var zlt=s(rG);JOo=r(zlt,"Data2VecAudioForAudioFrameClassification"),zlt.forEach(t),YOo=r(Dye," (Data2VecAudio model)"),Dye.forEach(t),KOo=i(qE),R3=n(qE,"LI",{});var Gye=s(R3);dme=n(Gye,"STRONG",{});var Qlt=s(dme);ZOo=r(Qlt,"unispeech-sat"),Qlt.forEach(t),eVo=r(Gye," \u2014 "),tG=n(Gye,"A",{href:!0});var Wlt=s(tG);oVo=r(Wlt,"UniSpeechSatForAudioFrameClassification"),Wlt.forEach(t),rVo=r(Gye," (UniSpeechSat model)"),Gye.forEach(t),tVo=i(qE),B3=n(qE,"LI",{});var Oye=s(B3);cme=n(Oye,"STRONG",{});var Hlt=s(cme);aVo=r(Hlt,"wav2vec2"),Hlt.forEach(t),nVo=r(Oye," \u2014 "),aG=n(Oye,"A",{href:!0});var Ult=s(aG);sVo=r(Ult,"Wav2Vec2ForAudioFrameClassification"),Ult.forEach(t),lVo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),iVo=i(qE),P3=n(qE,"LI",{});var Vye=s(P3);fme=n(Vye,"STRONG",{});var Jlt=s(fme);dVo=r(Jlt,"wavlm"),Jlt.forEach(t),cVo=r(Vye," \u2014 "),nG=n(Vye,"A",{href:!0});var Ylt=s(nG);fVo=r(Ylt,"WavLMForAudioFrameClassification"),Ylt.forEach(t),mVo=r(Vye," (WavLM model)"),Vye.forEach(t),qE.forEach(t),gVo=i(ea),$3=n(ea,"P",{});var Xye=s($3);hVo=r(Xye,"The model is set in evaluation mode by default using "),mme=n(Xye,"CODE",{});var Klt=s(mme);pVo=r(Klt,"model.eval()"),Klt.forEach(t),_Vo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(Xye,"CODE",{});var Zlt=s(gme);uVo=r(Zlt,"model.train()"),Zlt.forEach(t),Xye.forEach(t),bVo=i(ea),hme=n(ea,"P",{});var eit=s(hme);FVo=r(eit,"Examples:"),eit.forEach(t),vVo=i(ea),m(HA.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),NRe=i(c),Gd=n(c,"H2",{class:!0});var WPe=s(Gd);I3=n(WPe,"A",{id:!0,class:!0,href:!0});var oit=s(I3);pme=n(oit,"SPAN",{});var rit=s(pme);m(UA.$$.fragment,rit),rit.forEach(t),oit.forEach(t),TVo=i(WPe),_me=n(WPe,"SPAN",{});var tit=s(_me);MVo=r(tit,"AutoModelForCTC"),tit.forEach(t),WPe.forEach(t),jRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(JA.$$.fragment,El),EVo=i(El),Od=n(El,"P",{});var LU=s(Od);CVo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),sG=n(LU,"A",{href:!0});var ait=s(sG);wVo=r(ait,"from_pretrained()"),ait.forEach(t),AVo=r(LU," class method or the "),lG=n(LU,"A",{href:!0});var nit=s(lG);yVo=r(nit,"from_config()"),nit.forEach(t),LVo=r(LU,` class
method.`),LU.forEach(t),xVo=i(El),YA=n(El,"P",{});var HPe=s(YA);kVo=r(HPe,"This class cannot be instantiated directly using "),ume=n(HPe,"CODE",{});var sit=s(ume);SVo=r(sit,"__init__()"),sit.forEach(t),RVo=r(HPe," (throws an error)."),HPe.forEach(t),BVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(KA.$$.fragment,Cl),PVo=i(Cl),bme=n(Cl,"P",{});var lit=s(bme);$Vo=r(lit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lit.forEach(t),IVo=i(Cl),Vd=n(Cl,"P",{});var xU=s(Vd);qVo=r(xU,`Note:
Loading a model from its configuration file does `),Fme=n(xU,"STRONG",{});var iit=s(Fme);NVo=r(iit,"not"),iit.forEach(t),jVo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(xU,"A",{href:!0});var dit=s(iG);DVo=r(dit,"from_pretrained()"),dit.forEach(t),GVo=r(xU," to load the model weights."),xU.forEach(t),OVo=i(Cl),vme=n(Cl,"P",{});var cit=s(vme);VVo=r(cit,"Examples:"),cit.forEach(t),XVo=i(Cl),m(ZA.$$.fragment,Cl),Cl.forEach(t),zVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(e6.$$.fragment,oa),QVo=i(oa),Tme=n(oa,"P",{});var fit=s(Tme);WVo=r(fit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fit.forEach(t),HVo=i(oa),sn=n(oa,"P",{});var NE=s(sn);UVo=r(NE,"The model class to instantiate is selected based on the "),Mme=n(NE,"CODE",{});var mit=s(Mme);JVo=r(mit,"model_type"),mit.forEach(t),YVo=r(NE,` property of the config object (either
passed as an argument or loaded from `),Eme=n(NE,"CODE",{});var git=s(Eme);KVo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ZVo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(NE,"CODE",{});var hit=s(Cme);eXo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),oXo=r(NE,":"),NE.forEach(t),rXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);q3=n(Go,"LI",{});var zye=s(q3);wme=n(zye,"STRONG",{});var pit=s(wme);tXo=r(pit,"data2vec-audio"),pit.forEach(t),aXo=r(zye," \u2014 "),dG=n(zye,"A",{href:!0});var _it=s(dG);nXo=r(_it,"Data2VecAudioForCTC"),_it.forEach(t),sXo=r(zye," (Data2VecAudio model)"),zye.forEach(t),lXo=i(Go),N3=n(Go,"LI",{});var Qye=s(N3);Ame=n(Qye,"STRONG",{});var uit=s(Ame);iXo=r(uit,"hubert"),uit.forEach(t),dXo=r(Qye," \u2014 "),cG=n(Qye,"A",{href:!0});var bit=s(cG);cXo=r(bit,"HubertForCTC"),bit.forEach(t),fXo=r(Qye," (Hubert model)"),Qye.forEach(t),mXo=i(Go),j3=n(Go,"LI",{});var Wye=s(j3);yme=n(Wye,"STRONG",{});var Fit=s(yme);gXo=r(Fit,"sew"),Fit.forEach(t),hXo=r(Wye," \u2014 "),fG=n(Wye,"A",{href:!0});var vit=s(fG);pXo=r(vit,"SEWForCTC"),vit.forEach(t),_Xo=r(Wye," (SEW model)"),Wye.forEach(t),uXo=i(Go),D3=n(Go,"LI",{});var Hye=s(D3);Lme=n(Hye,"STRONG",{});var Tit=s(Lme);bXo=r(Tit,"sew-d"),Tit.forEach(t),FXo=r(Hye," \u2014 "),mG=n(Hye,"A",{href:!0});var Mit=s(mG);vXo=r(Mit,"SEWDForCTC"),Mit.forEach(t),TXo=r(Hye," (SEW-D model)"),Hye.forEach(t),MXo=i(Go),G3=n(Go,"LI",{});var Uye=s(G3);xme=n(Uye,"STRONG",{});var Eit=s(xme);EXo=r(Eit,"unispeech"),Eit.forEach(t),CXo=r(Uye," \u2014 "),gG=n(Uye,"A",{href:!0});var Cit=s(gG);wXo=r(Cit,"UniSpeechForCTC"),Cit.forEach(t),AXo=r(Uye," (UniSpeech model)"),Uye.forEach(t),yXo=i(Go),O3=n(Go,"LI",{});var Jye=s(O3);kme=n(Jye,"STRONG",{});var wit=s(kme);LXo=r(wit,"unispeech-sat"),wit.forEach(t),xXo=r(Jye," \u2014 "),hG=n(Jye,"A",{href:!0});var Ait=s(hG);kXo=r(Ait,"UniSpeechSatForCTC"),Ait.forEach(t),SXo=r(Jye," (UniSpeechSat model)"),Jye.forEach(t),RXo=i(Go),V3=n(Go,"LI",{});var Yye=s(V3);Sme=n(Yye,"STRONG",{});var yit=s(Sme);BXo=r(yit,"wav2vec2"),yit.forEach(t),PXo=r(Yye," \u2014 "),pG=n(Yye,"A",{href:!0});var Lit=s(pG);$Xo=r(Lit,"Wav2Vec2ForCTC"),Lit.forEach(t),IXo=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),qXo=i(Go),X3=n(Go,"LI",{});var Kye=s(X3);Rme=n(Kye,"STRONG",{});var xit=s(Rme);NXo=r(xit,"wavlm"),xit.forEach(t),jXo=r(Kye," \u2014 "),_G=n(Kye,"A",{href:!0});var kit=s(_G);DXo=r(kit,"WavLMForCTC"),kit.forEach(t),GXo=r(Kye," (WavLM model)"),Kye.forEach(t),Go.forEach(t),OXo=i(oa),z3=n(oa,"P",{});var Zye=s(z3);VXo=r(Zye,"The model is set in evaluation mode by default using "),Bme=n(Zye,"CODE",{});var Sit=s(Bme);XXo=r(Sit,"model.eval()"),Sit.forEach(t),zXo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(Zye,"CODE",{});var Rit=s(Pme);QXo=r(Rit,"model.train()"),Rit.forEach(t),Zye.forEach(t),WXo=i(oa),$me=n(oa,"P",{});var Bit=s($me);HXo=r(Bit,"Examples:"),Bit.forEach(t),UXo=i(oa),m(o6.$$.fragment,oa),oa.forEach(t),El.forEach(t),DRe=i(c),Xd=n(c,"H2",{class:!0});var UPe=s(Xd);Q3=n(UPe,"A",{id:!0,class:!0,href:!0});var Pit=s(Q3);Ime=n(Pit,"SPAN",{});var $it=s(Ime);m(r6.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),JXo=i(UPe),qme=n(UPe,"SPAN",{});var Iit=s(qme);YXo=r(Iit,"AutoModelForSpeechSeq2Seq"),Iit.forEach(t),UPe.forEach(t),GRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(t6.$$.fragment,wl),KXo=i(wl),zd=n(wl,"P",{});var kU=s(zd);ZXo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uG=n(kU,"A",{href:!0});var qit=s(uG);ezo=r(qit,"from_pretrained()"),qit.forEach(t),ozo=r(kU," class method or the "),bG=n(kU,"A",{href:!0});var Nit=s(bG);rzo=r(Nit,"from_config()"),Nit.forEach(t),tzo=r(kU,` class
method.`),kU.forEach(t),azo=i(wl),a6=n(wl,"P",{});var JPe=s(a6);nzo=r(JPe,"This class cannot be instantiated directly using "),Nme=n(JPe,"CODE",{});var jit=s(Nme);szo=r(jit,"__init__()"),jit.forEach(t),lzo=r(JPe," (throws an error)."),JPe.forEach(t),izo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(n6.$$.fragment,Al),dzo=i(Al),jme=n(Al,"P",{});var Dit=s(jme);czo=r(Dit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dit.forEach(t),fzo=i(Al),Qd=n(Al,"P",{});var SU=s(Qd);mzo=r(SU,`Note:
Loading a model from its configuration file does `),Dme=n(SU,"STRONG",{});var Git=s(Dme);gzo=r(Git,"not"),Git.forEach(t),hzo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(SU,"A",{href:!0});var Oit=s(FG);pzo=r(Oit,"from_pretrained()"),Oit.forEach(t),_zo=r(SU," to load the model weights."),SU.forEach(t),uzo=i(Al),Gme=n(Al,"P",{});var Vit=s(Gme);bzo=r(Vit,"Examples:"),Vit.forEach(t),Fzo=i(Al),m(s6.$$.fragment,Al),Al.forEach(t),vzo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(l6.$$.fragment,ra),Tzo=i(ra),Ome=n(ra,"P",{});var Xit=s(Ome);Mzo=r(Xit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xit.forEach(t),Ezo=i(ra),ln=n(ra,"P",{});var jE=s(ln);Czo=r(jE,"The model class to instantiate is selected based on the "),Vme=n(jE,"CODE",{});var zit=s(Vme);wzo=r(zit,"model_type"),zit.forEach(t),Azo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Xme=n(jE,"CODE",{});var Qit=s(Xme);yzo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),Lzo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(jE,"CODE",{});var Wit=s(zme);xzo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),kzo=r(jE,":"),jE.forEach(t),Szo=i(ra),i6=n(ra,"UL",{});var YPe=s(i6);W3=n(YPe,"LI",{});var eLe=s(W3);Qme=n(eLe,"STRONG",{});var Hit=s(Qme);Rzo=r(Hit,"speech-encoder-decoder"),Hit.forEach(t),Bzo=r(eLe," \u2014 "),vG=n(eLe,"A",{href:!0});var Uit=s(vG);Pzo=r(Uit,"SpeechEncoderDecoderModel"),Uit.forEach(t),$zo=r(eLe," (Speech Encoder decoder model)"),eLe.forEach(t),Izo=i(YPe),H3=n(YPe,"LI",{});var oLe=s(H3);Wme=n(oLe,"STRONG",{});var Jit=s(Wme);qzo=r(Jit,"speech_to_text"),Jit.forEach(t),Nzo=r(oLe," \u2014 "),TG=n(oLe,"A",{href:!0});var Yit=s(TG);jzo=r(Yit,"Speech2TextForConditionalGeneration"),Yit.forEach(t),Dzo=r(oLe," (Speech2Text model)"),oLe.forEach(t),YPe.forEach(t),Gzo=i(ra),U3=n(ra,"P",{});var rLe=s(U3);Ozo=r(rLe,"The model is set in evaluation mode by default using "),Hme=n(rLe,"CODE",{});var Kit=s(Hme);Vzo=r(Kit,"model.eval()"),Kit.forEach(t),Xzo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(rLe,"CODE",{});var Zit=s(Ume);zzo=r(Zit,"model.train()"),Zit.forEach(t),rLe.forEach(t),Qzo=i(ra),Jme=n(ra,"P",{});var edt=s(Jme);Wzo=r(edt,"Examples:"),edt.forEach(t),Hzo=i(ra),m(d6.$$.fragment,ra),ra.forEach(t),wl.forEach(t),ORe=i(c),Wd=n(c,"H2",{class:!0});var KPe=s(Wd);J3=n(KPe,"A",{id:!0,class:!0,href:!0});var odt=s(J3);Yme=n(odt,"SPAN",{});var rdt=s(Yme);m(c6.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),Uzo=i(KPe),Kme=n(KPe,"SPAN",{});var tdt=s(Kme);Jzo=r(tdt,"AutoModelForAudioXVector"),tdt.forEach(t),KPe.forEach(t),VRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(f6.$$.fragment,yl),Yzo=i(yl),Hd=n(yl,"P",{});var RU=s(Hd);Kzo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),MG=n(RU,"A",{href:!0});var adt=s(MG);Zzo=r(adt,"from_pretrained()"),adt.forEach(t),eQo=r(RU," class method or the "),EG=n(RU,"A",{href:!0});var ndt=s(EG);oQo=r(ndt,"from_config()"),ndt.forEach(t),rQo=r(RU,` class
method.`),RU.forEach(t),tQo=i(yl),m6=n(yl,"P",{});var ZPe=s(m6);aQo=r(ZPe,"This class cannot be instantiated directly using "),Zme=n(ZPe,"CODE",{});var sdt=s(Zme);nQo=r(sdt,"__init__()"),sdt.forEach(t),sQo=r(ZPe," (throws an error)."),ZPe.forEach(t),lQo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(g6.$$.fragment,Ll),iQo=i(Ll),ege=n(Ll,"P",{});var ldt=s(ege);dQo=r(ldt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ldt.forEach(t),cQo=i(Ll),Ud=n(Ll,"P",{});var BU=s(Ud);fQo=r(BU,`Note:
Loading a model from its configuration file does `),oge=n(BU,"STRONG",{});var idt=s(oge);mQo=r(idt,"not"),idt.forEach(t),gQo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(BU,"A",{href:!0});var ddt=s(CG);hQo=r(ddt,"from_pretrained()"),ddt.forEach(t),pQo=r(BU," to load the model weights."),BU.forEach(t),_Qo=i(Ll),rge=n(Ll,"P",{});var cdt=s(rge);uQo=r(cdt,"Examples:"),cdt.forEach(t),bQo=i(Ll),m(h6.$$.fragment,Ll),Ll.forEach(t),FQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(p6.$$.fragment,ta),vQo=i(ta),tge=n(ta,"P",{});var fdt=s(tge);TQo=r(fdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fdt.forEach(t),MQo=i(ta),dn=n(ta,"P",{});var DE=s(dn);EQo=r(DE,"The model class to instantiate is selected based on the "),age=n(DE,"CODE",{});var mdt=s(age);CQo=r(mdt,"model_type"),mdt.forEach(t),wQo=r(DE,` property of the config object (either
passed as an argument or loaded from `),nge=n(DE,"CODE",{});var gdt=s(nge);AQo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),yQo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(DE,"CODE",{});var hdt=s(sge);LQo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),xQo=r(DE,":"),DE.forEach(t),kQo=i(ta),cn=n(ta,"UL",{});var GE=s(cn);Y3=n(GE,"LI",{});var tLe=s(Y3);lge=n(tLe,"STRONG",{});var pdt=s(lge);SQo=r(pdt,"data2vec-audio"),pdt.forEach(t),RQo=r(tLe," \u2014 "),wG=n(tLe,"A",{href:!0});var _dt=s(wG);BQo=r(_dt,"Data2VecAudioForXVector"),_dt.forEach(t),PQo=r(tLe," (Data2VecAudio model)"),tLe.forEach(t),$Qo=i(GE),K3=n(GE,"LI",{});var aLe=s(K3);ige=n(aLe,"STRONG",{});var udt=s(ige);IQo=r(udt,"unispeech-sat"),udt.forEach(t),qQo=r(aLe," \u2014 "),AG=n(aLe,"A",{href:!0});var bdt=s(AG);NQo=r(bdt,"UniSpeechSatForXVector"),bdt.forEach(t),jQo=r(aLe," (UniSpeechSat model)"),aLe.forEach(t),DQo=i(GE),Z3=n(GE,"LI",{});var nLe=s(Z3);dge=n(nLe,"STRONG",{});var Fdt=s(dge);GQo=r(Fdt,"wav2vec2"),Fdt.forEach(t),OQo=r(nLe," \u2014 "),yG=n(nLe,"A",{href:!0});var vdt=s(yG);VQo=r(vdt,"Wav2Vec2ForXVector"),vdt.forEach(t),XQo=r(nLe," (Wav2Vec2 model)"),nLe.forEach(t),zQo=i(GE),e2=n(GE,"LI",{});var sLe=s(e2);cge=n(sLe,"STRONG",{});var Tdt=s(cge);QQo=r(Tdt,"wavlm"),Tdt.forEach(t),WQo=r(sLe," \u2014 "),LG=n(sLe,"A",{href:!0});var Mdt=s(LG);HQo=r(Mdt,"WavLMForXVector"),Mdt.forEach(t),UQo=r(sLe," (WavLM model)"),sLe.forEach(t),GE.forEach(t),JQo=i(ta),o2=n(ta,"P",{});var lLe=s(o2);YQo=r(lLe,"The model is set in evaluation mode by default using "),fge=n(lLe,"CODE",{});var Edt=s(fge);KQo=r(Edt,"model.eval()"),Edt.forEach(t),ZQo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(lLe,"CODE",{});var Cdt=s(mge);eWo=r(Cdt,"model.train()"),Cdt.forEach(t),lLe.forEach(t),oWo=i(ta),gge=n(ta,"P",{});var wdt=s(gge);rWo=r(wdt,"Examples:"),wdt.forEach(t),tWo=i(ta),m(_6.$$.fragment,ta),ta.forEach(t),yl.forEach(t),XRe=i(c),Jd=n(c,"H2",{class:!0});var e$e=s(Jd);r2=n(e$e,"A",{id:!0,class:!0,href:!0});var Adt=s(r2);hge=n(Adt,"SPAN",{});var ydt=s(hge);m(u6.$$.fragment,ydt),ydt.forEach(t),Adt.forEach(t),aWo=i(e$e),pge=n(e$e,"SPAN",{});var Ldt=s(pge);nWo=r(Ldt,"AutoModelForMaskedImageModeling"),Ldt.forEach(t),e$e.forEach(t),zRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(b6.$$.fragment,xl),sWo=i(xl),Yd=n(xl,"P",{});var PU=s(Yd);lWo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),xG=n(PU,"A",{href:!0});var xdt=s(xG);iWo=r(xdt,"from_pretrained()"),xdt.forEach(t),dWo=r(PU," class method or the "),kG=n(PU,"A",{href:!0});var kdt=s(kG);cWo=r(kdt,"from_config()"),kdt.forEach(t),fWo=r(PU,` class
method.`),PU.forEach(t),mWo=i(xl),F6=n(xl,"P",{});var o$e=s(F6);gWo=r(o$e,"This class cannot be instantiated directly using "),_ge=n(o$e,"CODE",{});var Sdt=s(_ge);hWo=r(Sdt,"__init__()"),Sdt.forEach(t),pWo=r(o$e," (throws an error)."),o$e.forEach(t),_Wo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(v6.$$.fragment,kl),uWo=i(kl),uge=n(kl,"P",{});var Rdt=s(uge);bWo=r(Rdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rdt.forEach(t),FWo=i(kl),Kd=n(kl,"P",{});var $U=s(Kd);vWo=r($U,`Note:
Loading a model from its configuration file does `),bge=n($U,"STRONG",{});var Bdt=s(bge);TWo=r(Bdt,"not"),Bdt.forEach(t),MWo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n($U,"A",{href:!0});var Pdt=s(SG);EWo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),CWo=r($U," to load the model weights."),$U.forEach(t),wWo=i(kl),Fge=n(kl,"P",{});var $dt=s(Fge);AWo=r($dt,"Examples:"),$dt.forEach(t),yWo=i(kl),m(T6.$$.fragment,kl),kl.forEach(t),LWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(M6.$$.fragment,aa),xWo=i(aa),vge=n(aa,"P",{});var Idt=s(vge);kWo=r(Idt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Idt.forEach(t),SWo=i(aa),fn=n(aa,"P",{});var OE=s(fn);RWo=r(OE,"The model class to instantiate is selected based on the "),Tge=n(OE,"CODE",{});var qdt=s(Tge);BWo=r(qdt,"model_type"),qdt.forEach(t),PWo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Mge=n(OE,"CODE",{});var Ndt=s(Mge);$Wo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),IWo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(OE,"CODE",{});var jdt=s(Ege);qWo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),NWo=r(OE,":"),OE.forEach(t),jWo=i(aa),Zd=n(aa,"UL",{});var IU=s(Zd);t2=n(IU,"LI",{});var iLe=s(t2);Cge=n(iLe,"STRONG",{});var Ddt=s(Cge);DWo=r(Ddt,"deit"),Ddt.forEach(t),GWo=r(iLe," \u2014 "),RG=n(iLe,"A",{href:!0});var Gdt=s(RG);OWo=r(Gdt,"DeiTForMaskedImageModeling"),Gdt.forEach(t),VWo=r(iLe," (DeiT model)"),iLe.forEach(t),XWo=i(IU),a2=n(IU,"LI",{});var dLe=s(a2);wge=n(dLe,"STRONG",{});var Odt=s(wge);zWo=r(Odt,"swin"),Odt.forEach(t),QWo=r(dLe," \u2014 "),BG=n(dLe,"A",{href:!0});var Vdt=s(BG);WWo=r(Vdt,"SwinForMaskedImageModeling"),Vdt.forEach(t),HWo=r(dLe," (Swin model)"),dLe.forEach(t),UWo=i(IU),n2=n(IU,"LI",{});var cLe=s(n2);Age=n(cLe,"STRONG",{});var Xdt=s(Age);JWo=r(Xdt,"vit"),Xdt.forEach(t),YWo=r(cLe," \u2014 "),PG=n(cLe,"A",{href:!0});var zdt=s(PG);KWo=r(zdt,"ViTForMaskedImageModeling"),zdt.forEach(t),ZWo=r(cLe," (ViT model)"),cLe.forEach(t),IU.forEach(t),eHo=i(aa),s2=n(aa,"P",{});var fLe=s(s2);oHo=r(fLe,"The model is set in evaluation mode by default using "),yge=n(fLe,"CODE",{});var Qdt=s(yge);rHo=r(Qdt,"model.eval()"),Qdt.forEach(t),tHo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(fLe,"CODE",{});var Wdt=s(Lge);aHo=r(Wdt,"model.train()"),Wdt.forEach(t),fLe.forEach(t),nHo=i(aa),xge=n(aa,"P",{});var Hdt=s(xge);sHo=r(Hdt,"Examples:"),Hdt.forEach(t),lHo=i(aa),m(E6.$$.fragment,aa),aa.forEach(t),xl.forEach(t),QRe=i(c),ec=n(c,"H2",{class:!0});var r$e=s(ec);l2=n(r$e,"A",{id:!0,class:!0,href:!0});var Udt=s(l2);kge=n(Udt,"SPAN",{});var Jdt=s(kge);m(C6.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),iHo=i(r$e),Sge=n(r$e,"SPAN",{});var Ydt=s(Sge);dHo=r(Ydt,"AutoModelForObjectDetection"),Ydt.forEach(t),r$e.forEach(t),WRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(w6.$$.fragment,Sl),cHo=i(Sl),oc=n(Sl,"P",{});var qU=s(oc);fHo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),$G=n(qU,"A",{href:!0});var Kdt=s($G);mHo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),gHo=r(qU," class method or the "),IG=n(qU,"A",{href:!0});var Zdt=s(IG);hHo=r(Zdt,"from_config()"),Zdt.forEach(t),pHo=r(qU,` class
method.`),qU.forEach(t),_Ho=i(Sl),A6=n(Sl,"P",{});var t$e=s(A6);uHo=r(t$e,"This class cannot be instantiated directly using "),Rge=n(t$e,"CODE",{});var ect=s(Rge);bHo=r(ect,"__init__()"),ect.forEach(t),FHo=r(t$e," (throws an error)."),t$e.forEach(t),vHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(y6.$$.fragment,Rl),THo=i(Rl),Bge=n(Rl,"P",{});var oct=s(Bge);MHo=r(oct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oct.forEach(t),EHo=i(Rl),rc=n(Rl,"P",{});var NU=s(rc);CHo=r(NU,`Note:
Loading a model from its configuration file does `),Pge=n(NU,"STRONG",{});var rct=s(Pge);wHo=r(rct,"not"),rct.forEach(t),AHo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(NU,"A",{href:!0});var tct=s(qG);yHo=r(tct,"from_pretrained()"),tct.forEach(t),LHo=r(NU," to load the model weights."),NU.forEach(t),xHo=i(Rl),$ge=n(Rl,"P",{});var act=s($ge);kHo=r(act,"Examples:"),act.forEach(t),SHo=i(Rl),m(L6.$$.fragment,Rl),Rl.forEach(t),RHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(x6.$$.fragment,na),BHo=i(na),Ige=n(na,"P",{});var nct=s(Ige);PHo=r(nct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nct.forEach(t),$Ho=i(na),mn=n(na,"P",{});var VE=s(mn);IHo=r(VE,"The model class to instantiate is selected based on the "),qge=n(VE,"CODE",{});var sct=s(qge);qHo=r(sct,"model_type"),sct.forEach(t),NHo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Nge=n(VE,"CODE",{});var lct=s(Nge);jHo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),DHo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(VE,"CODE",{});var ict=s(jge);GHo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),OHo=r(VE,":"),VE.forEach(t),VHo=i(na),Dge=n(na,"UL",{});var dct=s(Dge);i2=n(dct,"LI",{});var mLe=s(i2);Gge=n(mLe,"STRONG",{});var cct=s(Gge);XHo=r(cct,"detr"),cct.forEach(t),zHo=r(mLe," \u2014 "),NG=n(mLe,"A",{href:!0});var fct=s(NG);QHo=r(fct,"DetrForObjectDetection"),fct.forEach(t),WHo=r(mLe," (DETR model)"),mLe.forEach(t),dct.forEach(t),HHo=i(na),d2=n(na,"P",{});var gLe=s(d2);UHo=r(gLe,"The model is set in evaluation mode by default using "),Oge=n(gLe,"CODE",{});var mct=s(Oge);JHo=r(mct,"model.eval()"),mct.forEach(t),YHo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(gLe,"CODE",{});var gct=s(Vge);KHo=r(gct,"model.train()"),gct.forEach(t),gLe.forEach(t),ZHo=i(na),Xge=n(na,"P",{});var hct=s(Xge);eUo=r(hct,"Examples:"),hct.forEach(t),oUo=i(na),m(k6.$$.fragment,na),na.forEach(t),Sl.forEach(t),HRe=i(c),tc=n(c,"H2",{class:!0});var a$e=s(tc);c2=n(a$e,"A",{id:!0,class:!0,href:!0});var pct=s(c2);zge=n(pct,"SPAN",{});var _ct=s(zge);m(S6.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),rUo=i(a$e),Qge=n(a$e,"SPAN",{});var uct=s(Qge);tUo=r(uct,"AutoModelForImageSegmentation"),uct.forEach(t),a$e.forEach(t),URe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(R6.$$.fragment,Bl),aUo=i(Bl),ac=n(Bl,"P",{});var jU=s(ac);nUo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jG=n(jU,"A",{href:!0});var bct=s(jG);sUo=r(bct,"from_pretrained()"),bct.forEach(t),lUo=r(jU," class method or the "),DG=n(jU,"A",{href:!0});var Fct=s(DG);iUo=r(Fct,"from_config()"),Fct.forEach(t),dUo=r(jU,` class
method.`),jU.forEach(t),cUo=i(Bl),B6=n(Bl,"P",{});var n$e=s(B6);fUo=r(n$e,"This class cannot be instantiated directly using "),Wge=n(n$e,"CODE",{});var vct=s(Wge);mUo=r(vct,"__init__()"),vct.forEach(t),gUo=r(n$e," (throws an error)."),n$e.forEach(t),hUo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(P6.$$.fragment,Pl),pUo=i(Pl),Hge=n(Pl,"P",{});var Tct=s(Hge);_Uo=r(Tct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tct.forEach(t),uUo=i(Pl),nc=n(Pl,"P",{});var DU=s(nc);bUo=r(DU,`Note:
Loading a model from its configuration file does `),Uge=n(DU,"STRONG",{});var Mct=s(Uge);FUo=r(Mct,"not"),Mct.forEach(t),vUo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(DU,"A",{href:!0});var Ect=s(GG);TUo=r(Ect,"from_pretrained()"),Ect.forEach(t),MUo=r(DU," to load the model weights."),DU.forEach(t),EUo=i(Pl),Jge=n(Pl,"P",{});var Cct=s(Jge);CUo=r(Cct,"Examples:"),Cct.forEach(t),wUo=i(Pl),m($6.$$.fragment,Pl),Pl.forEach(t),AUo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(I6.$$.fragment,sa),yUo=i(sa),Yge=n(sa,"P",{});var wct=s(Yge);LUo=r(wct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wct.forEach(t),xUo=i(sa),gn=n(sa,"P",{});var XE=s(gn);kUo=r(XE,"The model class to instantiate is selected based on the "),Kge=n(XE,"CODE",{});var Act=s(Kge);SUo=r(Act,"model_type"),Act.forEach(t),RUo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Zge=n(XE,"CODE",{});var yct=s(Zge);BUo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),PUo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(XE,"CODE",{});var Lct=s(ehe);$Uo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),IUo=r(XE,":"),XE.forEach(t),qUo=i(sa),ohe=n(sa,"UL",{});var xct=s(ohe);f2=n(xct,"LI",{});var hLe=s(f2);rhe=n(hLe,"STRONG",{});var kct=s(rhe);NUo=r(kct,"detr"),kct.forEach(t),jUo=r(hLe," \u2014 "),OG=n(hLe,"A",{href:!0});var Sct=s(OG);DUo=r(Sct,"DetrForSegmentation"),Sct.forEach(t),GUo=r(hLe," (DETR model)"),hLe.forEach(t),xct.forEach(t),OUo=i(sa),m2=n(sa,"P",{});var pLe=s(m2);VUo=r(pLe,"The model is set in evaluation mode by default using "),the=n(pLe,"CODE",{});var Rct=s(the);XUo=r(Rct,"model.eval()"),Rct.forEach(t),zUo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(pLe,"CODE",{});var Bct=s(ahe);QUo=r(Bct,"model.train()"),Bct.forEach(t),pLe.forEach(t),WUo=i(sa),nhe=n(sa,"P",{});var Pct=s(nhe);HUo=r(Pct,"Examples:"),Pct.forEach(t),UUo=i(sa),m(q6.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),JRe=i(c),sc=n(c,"H2",{class:!0});var s$e=s(sc);g2=n(s$e,"A",{id:!0,class:!0,href:!0});var $ct=s(g2);she=n($ct,"SPAN",{});var Ict=s(she);m(N6.$$.fragment,Ict),Ict.forEach(t),$ct.forEach(t),JUo=i(s$e),lhe=n(s$e,"SPAN",{});var qct=s(lhe);YUo=r(qct,"AutoModelForSemanticSegmentation"),qct.forEach(t),s$e.forEach(t),YRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(j6.$$.fragment,$l),KUo=i($l),lc=n($l,"P",{});var GU=s(lc);ZUo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VG=n(GU,"A",{href:!0});var Nct=s(VG);eJo=r(Nct,"from_pretrained()"),Nct.forEach(t),oJo=r(GU," class method or the "),XG=n(GU,"A",{href:!0});var jct=s(XG);rJo=r(jct,"from_config()"),jct.forEach(t),tJo=r(GU,` class
method.`),GU.forEach(t),aJo=i($l),D6=n($l,"P",{});var l$e=s(D6);nJo=r(l$e,"This class cannot be instantiated directly using "),ihe=n(l$e,"CODE",{});var Dct=s(ihe);sJo=r(Dct,"__init__()"),Dct.forEach(t),lJo=r(l$e," (throws an error)."),l$e.forEach(t),iJo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(G6.$$.fragment,Il),dJo=i(Il),dhe=n(Il,"P",{});var Gct=s(dhe);cJo=r(Gct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gct.forEach(t),fJo=i(Il),ic=n(Il,"P",{});var OU=s(ic);mJo=r(OU,`Note:
Loading a model from its configuration file does `),che=n(OU,"STRONG",{});var Oct=s(che);gJo=r(Oct,"not"),Oct.forEach(t),hJo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(OU,"A",{href:!0});var Vct=s(zG);pJo=r(Vct,"from_pretrained()"),Vct.forEach(t),_Jo=r(OU," to load the model weights."),OU.forEach(t),uJo=i(Il),fhe=n(Il,"P",{});var Xct=s(fhe);bJo=r(Xct,"Examples:"),Xct.forEach(t),FJo=i(Il),m(O6.$$.fragment,Il),Il.forEach(t),vJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(V6.$$.fragment,la),TJo=i(la),mhe=n(la,"P",{});var zct=s(mhe);MJo=r(zct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zct.forEach(t),EJo=i(la),hn=n(la,"P",{});var zE=s(hn);CJo=r(zE,"The model class to instantiate is selected based on the "),ghe=n(zE,"CODE",{});var Qct=s(ghe);wJo=r(Qct,"model_type"),Qct.forEach(t),AJo=r(zE,` property of the config object (either
passed as an argument or loaded from `),hhe=n(zE,"CODE",{});var Wct=s(hhe);yJo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),LJo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(zE,"CODE",{});var Hct=s(phe);xJo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),kJo=r(zE,":"),zE.forEach(t),SJo=i(la),dc=n(la,"UL",{});var VU=s(dc);h2=n(VU,"LI",{});var _Le=s(h2);_he=n(_Le,"STRONG",{});var Uct=s(_he);RJo=r(Uct,"beit"),Uct.forEach(t),BJo=r(_Le," \u2014 "),QG=n(_Le,"A",{href:!0});var Jct=s(QG);PJo=r(Jct,"BeitForSemanticSegmentation"),Jct.forEach(t),$Jo=r(_Le," (BEiT model)"),_Le.forEach(t),IJo=i(VU),p2=n(VU,"LI",{});var uLe=s(p2);uhe=n(uLe,"STRONG",{});var Yct=s(uhe);qJo=r(Yct,"dpt"),Yct.forEach(t),NJo=r(uLe," \u2014 "),WG=n(uLe,"A",{href:!0});var Kct=s(WG);jJo=r(Kct,"DPTForSemanticSegmentation"),Kct.forEach(t),DJo=r(uLe," (DPT model)"),uLe.forEach(t),GJo=i(VU),_2=n(VU,"LI",{});var bLe=s(_2);bhe=n(bLe,"STRONG",{});var Zct=s(bhe);OJo=r(Zct,"segformer"),Zct.forEach(t),VJo=r(bLe," \u2014 "),HG=n(bLe,"A",{href:!0});var eft=s(HG);XJo=r(eft,"SegformerForSemanticSegmentation"),eft.forEach(t),zJo=r(bLe," (SegFormer model)"),bLe.forEach(t),VU.forEach(t),QJo=i(la),u2=n(la,"P",{});var FLe=s(u2);WJo=r(FLe,"The model is set in evaluation mode by default using "),Fhe=n(FLe,"CODE",{});var oft=s(Fhe);HJo=r(oft,"model.eval()"),oft.forEach(t),UJo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(FLe,"CODE",{});var rft=s(vhe);JJo=r(rft,"model.train()"),rft.forEach(t),FLe.forEach(t),YJo=i(la),The=n(la,"P",{});var tft=s(The);KJo=r(tft,"Examples:"),tft.forEach(t),ZJo=i(la),m(X6.$$.fragment,la),la.forEach(t),$l.forEach(t),KRe=i(c),cc=n(c,"H2",{class:!0});var i$e=s(cc);b2=n(i$e,"A",{id:!0,class:!0,href:!0});var aft=s(b2);Mhe=n(aft,"SPAN",{});var nft=s(Mhe);m(z6.$$.fragment,nft),nft.forEach(t),aft.forEach(t),eYo=i(i$e),Ehe=n(i$e,"SPAN",{});var sft=s(Ehe);oYo=r(sft,"AutoModelForInstanceSegmentation"),sft.forEach(t),i$e.forEach(t),ZRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(Q6.$$.fragment,ql),rYo=i(ql),fc=n(ql,"P",{});var XU=s(fc);tYo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UG=n(XU,"A",{href:!0});var lft=s(UG);aYo=r(lft,"from_pretrained()"),lft.forEach(t),nYo=r(XU," class method or the "),JG=n(XU,"A",{href:!0});var ift=s(JG);sYo=r(ift,"from_config()"),ift.forEach(t),lYo=r(XU,` class
method.`),XU.forEach(t),iYo=i(ql),W6=n(ql,"P",{});var d$e=s(W6);dYo=r(d$e,"This class cannot be instantiated directly using "),Che=n(d$e,"CODE",{});var dft=s(Che);cYo=r(dft,"__init__()"),dft.forEach(t),fYo=r(d$e," (throws an error)."),d$e.forEach(t),mYo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(H6.$$.fragment,Nl),gYo=i(Nl),whe=n(Nl,"P",{});var cft=s(whe);hYo=r(cft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cft.forEach(t),pYo=i(Nl),mc=n(Nl,"P",{});var zU=s(mc);_Yo=r(zU,`Note:
Loading a model from its configuration file does `),Ahe=n(zU,"STRONG",{});var fft=s(Ahe);uYo=r(fft,"not"),fft.forEach(t),bYo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(zU,"A",{href:!0});var mft=s(YG);FYo=r(mft,"from_pretrained()"),mft.forEach(t),vYo=r(zU," to load the model weights."),zU.forEach(t),TYo=i(Nl),yhe=n(Nl,"P",{});var gft=s(yhe);MYo=r(gft,"Examples:"),gft.forEach(t),EYo=i(Nl),m(U6.$$.fragment,Nl),Nl.forEach(t),CYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(J6.$$.fragment,ia),wYo=i(ia),Lhe=n(ia,"P",{});var hft=s(Lhe);AYo=r(hft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hft.forEach(t),yYo=i(ia),pn=n(ia,"P",{});var QE=s(pn);LYo=r(QE,"The model class to instantiate is selected based on the "),xhe=n(QE,"CODE",{});var pft=s(xhe);xYo=r(pft,"model_type"),pft.forEach(t),kYo=r(QE,` property of the config object (either
passed as an argument or loaded from `),khe=n(QE,"CODE",{});var _ft=s(khe);SYo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),RYo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(QE,"CODE",{});var uft=s(She);BYo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),PYo=r(QE,":"),QE.forEach(t),$Yo=i(ia),Rhe=n(ia,"UL",{});var bft=s(Rhe);F2=n(bft,"LI",{});var vLe=s(F2);Bhe=n(vLe,"STRONG",{});var Fft=s(Bhe);IYo=r(Fft,"maskformer"),Fft.forEach(t),qYo=r(vLe," \u2014 "),KG=n(vLe,"A",{href:!0});var vft=s(KG);NYo=r(vft,"MaskFormerForInstanceSegmentation"),vft.forEach(t),jYo=r(vLe," (MaskFormer model)"),vLe.forEach(t),bft.forEach(t),DYo=i(ia),v2=n(ia,"P",{});var TLe=s(v2);GYo=r(TLe,"The model is set in evaluation mode by default using "),Phe=n(TLe,"CODE",{});var Tft=s(Phe);OYo=r(Tft,"model.eval()"),Tft.forEach(t),VYo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(TLe,"CODE",{});var Mft=s($he);XYo=r(Mft,"model.train()"),Mft.forEach(t),TLe.forEach(t),zYo=i(ia),Ihe=n(ia,"P",{});var Eft=s(Ihe);QYo=r(Eft,"Examples:"),Eft.forEach(t),WYo=i(ia),m(Y6.$$.fragment,ia),ia.forEach(t),ql.forEach(t),eBe=i(c),gc=n(c,"H2",{class:!0});var c$e=s(gc);T2=n(c$e,"A",{id:!0,class:!0,href:!0});var Cft=s(T2);qhe=n(Cft,"SPAN",{});var wft=s(qhe);m(K6.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),HYo=i(c$e),Nhe=n(c$e,"SPAN",{});var Aft=s(Nhe);UYo=r(Aft,"TFAutoModel"),Aft.forEach(t),c$e.forEach(t),oBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(Z6.$$.fragment,jl),JYo=i(jl),hc=n(jl,"P",{});var QU=s(hc);YYo=r(QU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZG=n(QU,"A",{href:!0});var yft=s(ZG);KYo=r(yft,"from_pretrained()"),yft.forEach(t),ZYo=r(QU," class method or the "),eO=n(QU,"A",{href:!0});var Lft=s(eO);eKo=r(Lft,"from_config()"),Lft.forEach(t),oKo=r(QU,` class
method.`),QU.forEach(t),rKo=i(jl),e0=n(jl,"P",{});var f$e=s(e0);tKo=r(f$e,"This class cannot be instantiated directly using "),jhe=n(f$e,"CODE",{});var xft=s(jhe);aKo=r(xft,"__init__()"),xft.forEach(t),nKo=r(f$e," (throws an error)."),f$e.forEach(t),sKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(o0.$$.fragment,Dl),lKo=i(Dl),Dhe=n(Dl,"P",{});var kft=s(Dhe);iKo=r(kft,"Instantiates one of the base model classes of the library from a configuration."),kft.forEach(t),dKo=i(Dl),pc=n(Dl,"P",{});var WU=s(pc);cKo=r(WU,`Note:
Loading a model from its configuration file does `),Ghe=n(WU,"STRONG",{});var Sft=s(Ghe);fKo=r(Sft,"not"),Sft.forEach(t),mKo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(WU,"A",{href:!0});var Rft=s(oO);gKo=r(Rft,"from_pretrained()"),Rft.forEach(t),hKo=r(WU," to load the model weights."),WU.forEach(t),pKo=i(Dl),Ohe=n(Dl,"P",{});var Bft=s(Ohe);_Ko=r(Bft,"Examples:"),Bft.forEach(t),uKo=i(Dl),m(r0.$$.fragment,Dl),Dl.forEach(t),bKo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(t0.$$.fragment,pa),FKo=i(pa),Vhe=n(pa,"P",{});var Pft=s(Vhe);vKo=r(Pft,"Instantiate one of the base model classes of the library from a pretrained model."),Pft.forEach(t),TKo=i(pa),_n=n(pa,"P",{});var WE=s(_n);MKo=r(WE,"The model class to instantiate is selected based on the "),Xhe=n(WE,"CODE",{});var $ft=s(Xhe);EKo=r($ft,"model_type"),$ft.forEach(t),CKo=r(WE,` property of the config object (either
passed as an argument or loaded from `),zhe=n(WE,"CODE",{});var Ift=s(zhe);wKo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),AKo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(WE,"CODE",{});var qft=s(Qhe);yKo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),LKo=r(WE,":"),WE.forEach(t),xKo=i(pa),x=n(pa,"UL",{});var k=s(x);M2=n(k,"LI",{});var MLe=s(M2);Whe=n(MLe,"STRONG",{});var Nft=s(Whe);kKo=r(Nft,"albert"),Nft.forEach(t),SKo=r(MLe," \u2014 "),rO=n(MLe,"A",{href:!0});var jft=s(rO);RKo=r(jft,"TFAlbertModel"),jft.forEach(t),BKo=r(MLe," (ALBERT model)"),MLe.forEach(t),PKo=i(k),E2=n(k,"LI",{});var ELe=s(E2);Hhe=n(ELe,"STRONG",{});var Dft=s(Hhe);$Ko=r(Dft,"bart"),Dft.forEach(t),IKo=r(ELe," \u2014 "),tO=n(ELe,"A",{href:!0});var Gft=s(tO);qKo=r(Gft,"TFBartModel"),Gft.forEach(t),NKo=r(ELe," (BART model)"),ELe.forEach(t),jKo=i(k),C2=n(k,"LI",{});var CLe=s(C2);Uhe=n(CLe,"STRONG",{});var Oft=s(Uhe);DKo=r(Oft,"bert"),Oft.forEach(t),GKo=r(CLe," \u2014 "),aO=n(CLe,"A",{href:!0});var Vft=s(aO);OKo=r(Vft,"TFBertModel"),Vft.forEach(t),VKo=r(CLe," (BERT model)"),CLe.forEach(t),XKo=i(k),w2=n(k,"LI",{});var wLe=s(w2);Jhe=n(wLe,"STRONG",{});var Xft=s(Jhe);zKo=r(Xft,"blenderbot"),Xft.forEach(t),QKo=r(wLe," \u2014 "),nO=n(wLe,"A",{href:!0});var zft=s(nO);WKo=r(zft,"TFBlenderbotModel"),zft.forEach(t),HKo=r(wLe," (Blenderbot model)"),wLe.forEach(t),UKo=i(k),A2=n(k,"LI",{});var ALe=s(A2);Yhe=n(ALe,"STRONG",{});var Qft=s(Yhe);JKo=r(Qft,"blenderbot-small"),Qft.forEach(t),YKo=r(ALe," \u2014 "),sO=n(ALe,"A",{href:!0});var Wft=s(sO);KKo=r(Wft,"TFBlenderbotSmallModel"),Wft.forEach(t),ZKo=r(ALe," (BlenderbotSmall model)"),ALe.forEach(t),eZo=i(k),y2=n(k,"LI",{});var yLe=s(y2);Khe=n(yLe,"STRONG",{});var Hft=s(Khe);oZo=r(Hft,"camembert"),Hft.forEach(t),rZo=r(yLe," \u2014 "),lO=n(yLe,"A",{href:!0});var Uft=s(lO);tZo=r(Uft,"TFCamembertModel"),Uft.forEach(t),aZo=r(yLe," (CamemBERT model)"),yLe.forEach(t),nZo=i(k),L2=n(k,"LI",{});var LLe=s(L2);Zhe=n(LLe,"STRONG",{});var Jft=s(Zhe);sZo=r(Jft,"clip"),Jft.forEach(t),lZo=r(LLe," \u2014 "),iO=n(LLe,"A",{href:!0});var Yft=s(iO);iZo=r(Yft,"TFCLIPModel"),Yft.forEach(t),dZo=r(LLe," (CLIP model)"),LLe.forEach(t),cZo=i(k),x2=n(k,"LI",{});var xLe=s(x2);epe=n(xLe,"STRONG",{});var Kft=s(epe);fZo=r(Kft,"convbert"),Kft.forEach(t),mZo=r(xLe," \u2014 "),dO=n(xLe,"A",{href:!0});var Zft=s(dO);gZo=r(Zft,"TFConvBertModel"),Zft.forEach(t),hZo=r(xLe," (ConvBERT model)"),xLe.forEach(t),pZo=i(k),k2=n(k,"LI",{});var kLe=s(k2);ope=n(kLe,"STRONG",{});var emt=s(ope);_Zo=r(emt,"convnext"),emt.forEach(t),uZo=r(kLe," \u2014 "),cO=n(kLe,"A",{href:!0});var omt=s(cO);bZo=r(omt,"TFConvNextModel"),omt.forEach(t),FZo=r(kLe," (ConvNext model)"),kLe.forEach(t),vZo=i(k),S2=n(k,"LI",{});var SLe=s(S2);rpe=n(SLe,"STRONG",{});var rmt=s(rpe);TZo=r(rmt,"ctrl"),rmt.forEach(t),MZo=r(SLe," \u2014 "),fO=n(SLe,"A",{href:!0});var tmt=s(fO);EZo=r(tmt,"TFCTRLModel"),tmt.forEach(t),CZo=r(SLe," (CTRL model)"),SLe.forEach(t),wZo=i(k),R2=n(k,"LI",{});var RLe=s(R2);tpe=n(RLe,"STRONG",{});var amt=s(tpe);AZo=r(amt,"deberta"),amt.forEach(t),yZo=r(RLe," \u2014 "),mO=n(RLe,"A",{href:!0});var nmt=s(mO);LZo=r(nmt,"TFDebertaModel"),nmt.forEach(t),xZo=r(RLe," (DeBERTa model)"),RLe.forEach(t),kZo=i(k),B2=n(k,"LI",{});var BLe=s(B2);ape=n(BLe,"STRONG",{});var smt=s(ape);SZo=r(smt,"deberta-v2"),smt.forEach(t),RZo=r(BLe," \u2014 "),gO=n(BLe,"A",{href:!0});var lmt=s(gO);BZo=r(lmt,"TFDebertaV2Model"),lmt.forEach(t),PZo=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),$Zo=i(k),P2=n(k,"LI",{});var PLe=s(P2);npe=n(PLe,"STRONG",{});var imt=s(npe);IZo=r(imt,"distilbert"),imt.forEach(t),qZo=r(PLe," \u2014 "),hO=n(PLe,"A",{href:!0});var dmt=s(hO);NZo=r(dmt,"TFDistilBertModel"),dmt.forEach(t),jZo=r(PLe," (DistilBERT model)"),PLe.forEach(t),DZo=i(k),$2=n(k,"LI",{});var $Le=s($2);spe=n($Le,"STRONG",{});var cmt=s(spe);GZo=r(cmt,"dpr"),cmt.forEach(t),OZo=r($Le," \u2014 "),pO=n($Le,"A",{href:!0});var fmt=s(pO);VZo=r(fmt,"TFDPRQuestionEncoder"),fmt.forEach(t),XZo=r($Le," (DPR model)"),$Le.forEach(t),zZo=i(k),I2=n(k,"LI",{});var ILe=s(I2);lpe=n(ILe,"STRONG",{});var mmt=s(lpe);QZo=r(mmt,"electra"),mmt.forEach(t),WZo=r(ILe," \u2014 "),_O=n(ILe,"A",{href:!0});var gmt=s(_O);HZo=r(gmt,"TFElectraModel"),gmt.forEach(t),UZo=r(ILe," (ELECTRA model)"),ILe.forEach(t),JZo=i(k),q2=n(k,"LI",{});var qLe=s(q2);ipe=n(qLe,"STRONG",{});var hmt=s(ipe);YZo=r(hmt,"flaubert"),hmt.forEach(t),KZo=r(qLe," \u2014 "),uO=n(qLe,"A",{href:!0});var pmt=s(uO);ZZo=r(pmt,"TFFlaubertModel"),pmt.forEach(t),eer=r(qLe," (FlauBERT model)"),qLe.forEach(t),oer=i(k),Gs=n(k,"LI",{});var d9=s(Gs);dpe=n(d9,"STRONG",{});var _mt=s(dpe);rer=r(_mt,"funnel"),_mt.forEach(t),ter=r(d9," \u2014 "),bO=n(d9,"A",{href:!0});var umt=s(bO);aer=r(umt,"TFFunnelModel"),umt.forEach(t),ner=r(d9," or "),FO=n(d9,"A",{href:!0});var bmt=s(FO);ser=r(bmt,"TFFunnelBaseModel"),bmt.forEach(t),ler=r(d9," (Funnel Transformer model)"),d9.forEach(t),ier=i(k),N2=n(k,"LI",{});var NLe=s(N2);cpe=n(NLe,"STRONG",{});var Fmt=s(cpe);der=r(Fmt,"gpt2"),Fmt.forEach(t),cer=r(NLe," \u2014 "),vO=n(NLe,"A",{href:!0});var vmt=s(vO);fer=r(vmt,"TFGPT2Model"),vmt.forEach(t),mer=r(NLe," (OpenAI GPT-2 model)"),NLe.forEach(t),ger=i(k),j2=n(k,"LI",{});var jLe=s(j2);fpe=n(jLe,"STRONG",{});var Tmt=s(fpe);her=r(Tmt,"gptj"),Tmt.forEach(t),per=r(jLe," \u2014 "),TO=n(jLe,"A",{href:!0});var Mmt=s(TO);_er=r(Mmt,"TFGPTJModel"),Mmt.forEach(t),uer=r(jLe," (GPT-J model)"),jLe.forEach(t),ber=i(k),D2=n(k,"LI",{});var DLe=s(D2);mpe=n(DLe,"STRONG",{});var Emt=s(mpe);Fer=r(Emt,"hubert"),Emt.forEach(t),ver=r(DLe," \u2014 "),MO=n(DLe,"A",{href:!0});var Cmt=s(MO);Ter=r(Cmt,"TFHubertModel"),Cmt.forEach(t),Mer=r(DLe," (Hubert model)"),DLe.forEach(t),Eer=i(k),G2=n(k,"LI",{});var GLe=s(G2);gpe=n(GLe,"STRONG",{});var wmt=s(gpe);Cer=r(wmt,"layoutlm"),wmt.forEach(t),wer=r(GLe," \u2014 "),EO=n(GLe,"A",{href:!0});var Amt=s(EO);Aer=r(Amt,"TFLayoutLMModel"),Amt.forEach(t),yer=r(GLe," (LayoutLM model)"),GLe.forEach(t),Ler=i(k),O2=n(k,"LI",{});var OLe=s(O2);hpe=n(OLe,"STRONG",{});var ymt=s(hpe);xer=r(ymt,"led"),ymt.forEach(t),ker=r(OLe," \u2014 "),CO=n(OLe,"A",{href:!0});var Lmt=s(CO);Ser=r(Lmt,"TFLEDModel"),Lmt.forEach(t),Rer=r(OLe," (LED model)"),OLe.forEach(t),Ber=i(k),V2=n(k,"LI",{});var VLe=s(V2);ppe=n(VLe,"STRONG",{});var xmt=s(ppe);Per=r(xmt,"longformer"),xmt.forEach(t),$er=r(VLe," \u2014 "),wO=n(VLe,"A",{href:!0});var kmt=s(wO);Ier=r(kmt,"TFLongformerModel"),kmt.forEach(t),qer=r(VLe," (Longformer model)"),VLe.forEach(t),Ner=i(k),X2=n(k,"LI",{});var XLe=s(X2);_pe=n(XLe,"STRONG",{});var Smt=s(_pe);jer=r(Smt,"lxmert"),Smt.forEach(t),Der=r(XLe," \u2014 "),AO=n(XLe,"A",{href:!0});var Rmt=s(AO);Ger=r(Rmt,"TFLxmertModel"),Rmt.forEach(t),Oer=r(XLe," (LXMERT model)"),XLe.forEach(t),Ver=i(k),z2=n(k,"LI",{});var zLe=s(z2);upe=n(zLe,"STRONG",{});var Bmt=s(upe);Xer=r(Bmt,"marian"),Bmt.forEach(t),zer=r(zLe," \u2014 "),yO=n(zLe,"A",{href:!0});var Pmt=s(yO);Qer=r(Pmt,"TFMarianModel"),Pmt.forEach(t),Wer=r(zLe," (Marian model)"),zLe.forEach(t),Her=i(k),Q2=n(k,"LI",{});var QLe=s(Q2);bpe=n(QLe,"STRONG",{});var $mt=s(bpe);Uer=r($mt,"mbart"),$mt.forEach(t),Jer=r(QLe," \u2014 "),LO=n(QLe,"A",{href:!0});var Imt=s(LO);Yer=r(Imt,"TFMBartModel"),Imt.forEach(t),Ker=r(QLe," (mBART model)"),QLe.forEach(t),Zer=i(k),W2=n(k,"LI",{});var WLe=s(W2);Fpe=n(WLe,"STRONG",{});var qmt=s(Fpe);eor=r(qmt,"mobilebert"),qmt.forEach(t),oor=r(WLe," \u2014 "),xO=n(WLe,"A",{href:!0});var Nmt=s(xO);ror=r(Nmt,"TFMobileBertModel"),Nmt.forEach(t),tor=r(WLe," (MobileBERT model)"),WLe.forEach(t),aor=i(k),H2=n(k,"LI",{});var HLe=s(H2);vpe=n(HLe,"STRONG",{});var jmt=s(vpe);nor=r(jmt,"mpnet"),jmt.forEach(t),sor=r(HLe," \u2014 "),kO=n(HLe,"A",{href:!0});var Dmt=s(kO);lor=r(Dmt,"TFMPNetModel"),Dmt.forEach(t),ior=r(HLe," (MPNet model)"),HLe.forEach(t),dor=i(k),U2=n(k,"LI",{});var ULe=s(U2);Tpe=n(ULe,"STRONG",{});var Gmt=s(Tpe);cor=r(Gmt,"mt5"),Gmt.forEach(t),mor=r(ULe," \u2014 "),SO=n(ULe,"A",{href:!0});var Omt=s(SO);gor=r(Omt,"TFMT5Model"),Omt.forEach(t),hor=r(ULe," (mT5 model)"),ULe.forEach(t),por=i(k),J2=n(k,"LI",{});var JLe=s(J2);Mpe=n(JLe,"STRONG",{});var Vmt=s(Mpe);_or=r(Vmt,"openai-gpt"),Vmt.forEach(t),uor=r(JLe," \u2014 "),RO=n(JLe,"A",{href:!0});var Xmt=s(RO);bor=r(Xmt,"TFOpenAIGPTModel"),Xmt.forEach(t),For=r(JLe," (OpenAI GPT model)"),JLe.forEach(t),vor=i(k),Y2=n(k,"LI",{});var YLe=s(Y2);Epe=n(YLe,"STRONG",{});var zmt=s(Epe);Tor=r(zmt,"pegasus"),zmt.forEach(t),Mor=r(YLe," \u2014 "),BO=n(YLe,"A",{href:!0});var Qmt=s(BO);Eor=r(Qmt,"TFPegasusModel"),Qmt.forEach(t),Cor=r(YLe," (Pegasus model)"),YLe.forEach(t),wor=i(k),K2=n(k,"LI",{});var KLe=s(K2);Cpe=n(KLe,"STRONG",{});var Wmt=s(Cpe);Aor=r(Wmt,"rembert"),Wmt.forEach(t),yor=r(KLe," \u2014 "),PO=n(KLe,"A",{href:!0});var Hmt=s(PO);Lor=r(Hmt,"TFRemBertModel"),Hmt.forEach(t),xor=r(KLe," (RemBERT model)"),KLe.forEach(t),kor=i(k),Z2=n(k,"LI",{});var ZLe=s(Z2);wpe=n(ZLe,"STRONG",{});var Umt=s(wpe);Sor=r(Umt,"roberta"),Umt.forEach(t),Ror=r(ZLe," \u2014 "),$O=n(ZLe,"A",{href:!0});var Jmt=s($O);Bor=r(Jmt,"TFRobertaModel"),Jmt.forEach(t),Por=r(ZLe," (RoBERTa model)"),ZLe.forEach(t),$or=i(k),eF=n(k,"LI",{});var e8e=s(eF);Ape=n(e8e,"STRONG",{});var Ymt=s(Ape);Ior=r(Ymt,"roformer"),Ymt.forEach(t),qor=r(e8e," \u2014 "),IO=n(e8e,"A",{href:!0});var Kmt=s(IO);Nor=r(Kmt,"TFRoFormerModel"),Kmt.forEach(t),jor=r(e8e," (RoFormer model)"),e8e.forEach(t),Dor=i(k),oF=n(k,"LI",{});var o8e=s(oF);ype=n(o8e,"STRONG",{});var Zmt=s(ype);Gor=r(Zmt,"speech_to_text"),Zmt.forEach(t),Oor=r(o8e," \u2014 "),qO=n(o8e,"A",{href:!0});var egt=s(qO);Vor=r(egt,"TFSpeech2TextModel"),egt.forEach(t),Xor=r(o8e," (Speech2Text model)"),o8e.forEach(t),zor=i(k),rF=n(k,"LI",{});var r8e=s(rF);Lpe=n(r8e,"STRONG",{});var ogt=s(Lpe);Qor=r(ogt,"t5"),ogt.forEach(t),Wor=r(r8e," \u2014 "),NO=n(r8e,"A",{href:!0});var rgt=s(NO);Hor=r(rgt,"TFT5Model"),rgt.forEach(t),Uor=r(r8e," (T5 model)"),r8e.forEach(t),Jor=i(k),tF=n(k,"LI",{});var t8e=s(tF);xpe=n(t8e,"STRONG",{});var tgt=s(xpe);Yor=r(tgt,"tapas"),tgt.forEach(t),Kor=r(t8e," \u2014 "),jO=n(t8e,"A",{href:!0});var agt=s(jO);Zor=r(agt,"TFTapasModel"),agt.forEach(t),err=r(t8e," (TAPAS model)"),t8e.forEach(t),orr=i(k),aF=n(k,"LI",{});var a8e=s(aF);kpe=n(a8e,"STRONG",{});var ngt=s(kpe);rrr=r(ngt,"transfo-xl"),ngt.forEach(t),trr=r(a8e," \u2014 "),DO=n(a8e,"A",{href:!0});var sgt=s(DO);arr=r(sgt,"TFTransfoXLModel"),sgt.forEach(t),nrr=r(a8e," (Transformer-XL model)"),a8e.forEach(t),srr=i(k),nF=n(k,"LI",{});var n8e=s(nF);Spe=n(n8e,"STRONG",{});var lgt=s(Spe);lrr=r(lgt,"vit"),lgt.forEach(t),irr=r(n8e," \u2014 "),GO=n(n8e,"A",{href:!0});var igt=s(GO);drr=r(igt,"TFViTModel"),igt.forEach(t),crr=r(n8e," (ViT model)"),n8e.forEach(t),frr=i(k),sF=n(k,"LI",{});var s8e=s(sF);Rpe=n(s8e,"STRONG",{});var dgt=s(Rpe);mrr=r(dgt,"vit_mae"),dgt.forEach(t),grr=r(s8e," \u2014 "),OO=n(s8e,"A",{href:!0});var cgt=s(OO);hrr=r(cgt,"TFViTMAEModel"),cgt.forEach(t),prr=r(s8e," (ViTMAE model)"),s8e.forEach(t),_rr=i(k),lF=n(k,"LI",{});var l8e=s(lF);Bpe=n(l8e,"STRONG",{});var fgt=s(Bpe);urr=r(fgt,"wav2vec2"),fgt.forEach(t),brr=r(l8e," \u2014 "),VO=n(l8e,"A",{href:!0});var mgt=s(VO);Frr=r(mgt,"TFWav2Vec2Model"),mgt.forEach(t),vrr=r(l8e," (Wav2Vec2 model)"),l8e.forEach(t),Trr=i(k),iF=n(k,"LI",{});var i8e=s(iF);Ppe=n(i8e,"STRONG",{});var ggt=s(Ppe);Mrr=r(ggt,"xlm"),ggt.forEach(t),Err=r(i8e," \u2014 "),XO=n(i8e,"A",{href:!0});var hgt=s(XO);Crr=r(hgt,"TFXLMModel"),hgt.forEach(t),wrr=r(i8e," (XLM model)"),i8e.forEach(t),Arr=i(k),dF=n(k,"LI",{});var d8e=s(dF);$pe=n(d8e,"STRONG",{});var pgt=s($pe);yrr=r(pgt,"xlm-roberta"),pgt.forEach(t),Lrr=r(d8e," \u2014 "),zO=n(d8e,"A",{href:!0});var _gt=s(zO);xrr=r(_gt,"TFXLMRobertaModel"),_gt.forEach(t),krr=r(d8e," (XLM-RoBERTa model)"),d8e.forEach(t),Srr=i(k),cF=n(k,"LI",{});var c8e=s(cF);Ipe=n(c8e,"STRONG",{});var ugt=s(Ipe);Rrr=r(ugt,"xlnet"),ugt.forEach(t),Brr=r(c8e," \u2014 "),QO=n(c8e,"A",{href:!0});var bgt=s(QO);Prr=r(bgt,"TFXLNetModel"),bgt.forEach(t),$rr=r(c8e," (XLNet model)"),c8e.forEach(t),k.forEach(t),Irr=i(pa),qpe=n(pa,"P",{});var Fgt=s(qpe);qrr=r(Fgt,"Examples:"),Fgt.forEach(t),Nrr=i(pa),m(a0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),rBe=i(c),_c=n(c,"H2",{class:!0});var m$e=s(_c);fF=n(m$e,"A",{id:!0,class:!0,href:!0});var vgt=s(fF);Npe=n(vgt,"SPAN",{});var Tgt=s(Npe);m(n0.$$.fragment,Tgt),Tgt.forEach(t),vgt.forEach(t),jrr=i(m$e),jpe=n(m$e,"SPAN",{});var Mgt=s(jpe);Drr=r(Mgt,"TFAutoModelForPreTraining"),Mgt.forEach(t),m$e.forEach(t),tBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(s0.$$.fragment,Gl),Grr=i(Gl),uc=n(Gl,"P",{});var HU=s(uc);Orr=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WO=n(HU,"A",{href:!0});var Egt=s(WO);Vrr=r(Egt,"from_pretrained()"),Egt.forEach(t),Xrr=r(HU," class method or the "),HO=n(HU,"A",{href:!0});var Cgt=s(HO);zrr=r(Cgt,"from_config()"),Cgt.forEach(t),Qrr=r(HU,` class
method.`),HU.forEach(t),Wrr=i(Gl),l0=n(Gl,"P",{});var g$e=s(l0);Hrr=r(g$e,"This class cannot be instantiated directly using "),Dpe=n(g$e,"CODE",{});var wgt=s(Dpe);Urr=r(wgt,"__init__()"),wgt.forEach(t),Jrr=r(g$e," (throws an error)."),g$e.forEach(t),Yrr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(i0.$$.fragment,Ol),Krr=i(Ol),Gpe=n(Ol,"P",{});var Agt=s(Gpe);Zrr=r(Agt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Agt.forEach(t),etr=i(Ol),bc=n(Ol,"P",{});var UU=s(bc);otr=r(UU,`Note:
Loading a model from its configuration file does `),Ope=n(UU,"STRONG",{});var ygt=s(Ope);rtr=r(ygt,"not"),ygt.forEach(t),ttr=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(UU,"A",{href:!0});var Lgt=s(UO);atr=r(Lgt,"from_pretrained()"),Lgt.forEach(t),ntr=r(UU," to load the model weights."),UU.forEach(t),str=i(Ol),Vpe=n(Ol,"P",{});var xgt=s(Vpe);ltr=r(xgt,"Examples:"),xgt.forEach(t),itr=i(Ol),m(d0.$$.fragment,Ol),Ol.forEach(t),dtr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(c0.$$.fragment,_a),ctr=i(_a),Xpe=n(_a,"P",{});var kgt=s(Xpe);ftr=r(kgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kgt.forEach(t),mtr=i(_a),un=n(_a,"P",{});var HE=s(un);gtr=r(HE,"The model class to instantiate is selected based on the "),zpe=n(HE,"CODE",{});var Sgt=s(zpe);htr=r(Sgt,"model_type"),Sgt.forEach(t),ptr=r(HE,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(HE,"CODE",{});var Rgt=s(Qpe);_tr=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),utr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(HE,"CODE",{});var Bgt=s(Wpe);btr=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),Ftr=r(HE,":"),HE.forEach(t),vtr=i(_a),H=n(_a,"UL",{});var U=s(H);mF=n(U,"LI",{});var f8e=s(mF);Hpe=n(f8e,"STRONG",{});var Pgt=s(Hpe);Ttr=r(Pgt,"albert"),Pgt.forEach(t),Mtr=r(f8e," \u2014 "),JO=n(f8e,"A",{href:!0});var $gt=s(JO);Etr=r($gt,"TFAlbertForPreTraining"),$gt.forEach(t),Ctr=r(f8e," (ALBERT model)"),f8e.forEach(t),wtr=i(U),gF=n(U,"LI",{});var m8e=s(gF);Upe=n(m8e,"STRONG",{});var Igt=s(Upe);Atr=r(Igt,"bart"),Igt.forEach(t),ytr=r(m8e," \u2014 "),YO=n(m8e,"A",{href:!0});var qgt=s(YO);Ltr=r(qgt,"TFBartForConditionalGeneration"),qgt.forEach(t),xtr=r(m8e," (BART model)"),m8e.forEach(t),ktr=i(U),hF=n(U,"LI",{});var g8e=s(hF);Jpe=n(g8e,"STRONG",{});var Ngt=s(Jpe);Str=r(Ngt,"bert"),Ngt.forEach(t),Rtr=r(g8e," \u2014 "),KO=n(g8e,"A",{href:!0});var jgt=s(KO);Btr=r(jgt,"TFBertForPreTraining"),jgt.forEach(t),Ptr=r(g8e," (BERT model)"),g8e.forEach(t),$tr=i(U),pF=n(U,"LI",{});var h8e=s(pF);Ype=n(h8e,"STRONG",{});var Dgt=s(Ype);Itr=r(Dgt,"camembert"),Dgt.forEach(t),qtr=r(h8e," \u2014 "),ZO=n(h8e,"A",{href:!0});var Ggt=s(ZO);Ntr=r(Ggt,"TFCamembertForMaskedLM"),Ggt.forEach(t),jtr=r(h8e," (CamemBERT model)"),h8e.forEach(t),Dtr=i(U),_F=n(U,"LI",{});var p8e=s(_F);Kpe=n(p8e,"STRONG",{});var Ogt=s(Kpe);Gtr=r(Ogt,"ctrl"),Ogt.forEach(t),Otr=r(p8e," \u2014 "),eV=n(p8e,"A",{href:!0});var Vgt=s(eV);Vtr=r(Vgt,"TFCTRLLMHeadModel"),Vgt.forEach(t),Xtr=r(p8e," (CTRL model)"),p8e.forEach(t),ztr=i(U),uF=n(U,"LI",{});var _8e=s(uF);Zpe=n(_8e,"STRONG",{});var Xgt=s(Zpe);Qtr=r(Xgt,"distilbert"),Xgt.forEach(t),Wtr=r(_8e," \u2014 "),oV=n(_8e,"A",{href:!0});var zgt=s(oV);Htr=r(zgt,"TFDistilBertForMaskedLM"),zgt.forEach(t),Utr=r(_8e," (DistilBERT model)"),_8e.forEach(t),Jtr=i(U),bF=n(U,"LI",{});var u8e=s(bF);e_e=n(u8e,"STRONG",{});var Qgt=s(e_e);Ytr=r(Qgt,"electra"),Qgt.forEach(t),Ktr=r(u8e," \u2014 "),rV=n(u8e,"A",{href:!0});var Wgt=s(rV);Ztr=r(Wgt,"TFElectraForPreTraining"),Wgt.forEach(t),ear=r(u8e," (ELECTRA model)"),u8e.forEach(t),oar=i(U),FF=n(U,"LI",{});var b8e=s(FF);o_e=n(b8e,"STRONG",{});var Hgt=s(o_e);rar=r(Hgt,"flaubert"),Hgt.forEach(t),tar=r(b8e," \u2014 "),tV=n(b8e,"A",{href:!0});var Ugt=s(tV);aar=r(Ugt,"TFFlaubertWithLMHeadModel"),Ugt.forEach(t),nar=r(b8e," (FlauBERT model)"),b8e.forEach(t),sar=i(U),vF=n(U,"LI",{});var F8e=s(vF);r_e=n(F8e,"STRONG",{});var Jgt=s(r_e);lar=r(Jgt,"funnel"),Jgt.forEach(t),iar=r(F8e," \u2014 "),aV=n(F8e,"A",{href:!0});var Ygt=s(aV);dar=r(Ygt,"TFFunnelForPreTraining"),Ygt.forEach(t),car=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),far=i(U),TF=n(U,"LI",{});var v8e=s(TF);t_e=n(v8e,"STRONG",{});var Kgt=s(t_e);mar=r(Kgt,"gpt2"),Kgt.forEach(t),gar=r(v8e," \u2014 "),nV=n(v8e,"A",{href:!0});var Zgt=s(nV);har=r(Zgt,"TFGPT2LMHeadModel"),Zgt.forEach(t),par=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),_ar=i(U),MF=n(U,"LI",{});var T8e=s(MF);a_e=n(T8e,"STRONG",{});var eht=s(a_e);uar=r(eht,"layoutlm"),eht.forEach(t),bar=r(T8e," \u2014 "),sV=n(T8e,"A",{href:!0});var oht=s(sV);Far=r(oht,"TFLayoutLMForMaskedLM"),oht.forEach(t),Tar=r(T8e," (LayoutLM model)"),T8e.forEach(t),Mar=i(U),EF=n(U,"LI",{});var M8e=s(EF);n_e=n(M8e,"STRONG",{});var rht=s(n_e);Ear=r(rht,"lxmert"),rht.forEach(t),Car=r(M8e," \u2014 "),lV=n(M8e,"A",{href:!0});var tht=s(lV);war=r(tht,"TFLxmertForPreTraining"),tht.forEach(t),Aar=r(M8e," (LXMERT model)"),M8e.forEach(t),yar=i(U),CF=n(U,"LI",{});var E8e=s(CF);s_e=n(E8e,"STRONG",{});var aht=s(s_e);Lar=r(aht,"mobilebert"),aht.forEach(t),xar=r(E8e," \u2014 "),iV=n(E8e,"A",{href:!0});var nht=s(iV);kar=r(nht,"TFMobileBertForPreTraining"),nht.forEach(t),Sar=r(E8e," (MobileBERT model)"),E8e.forEach(t),Rar=i(U),wF=n(U,"LI",{});var C8e=s(wF);l_e=n(C8e,"STRONG",{});var sht=s(l_e);Bar=r(sht,"mpnet"),sht.forEach(t),Par=r(C8e," \u2014 "),dV=n(C8e,"A",{href:!0});var lht=s(dV);$ar=r(lht,"TFMPNetForMaskedLM"),lht.forEach(t),Iar=r(C8e," (MPNet model)"),C8e.forEach(t),qar=i(U),AF=n(U,"LI",{});var w8e=s(AF);i_e=n(w8e,"STRONG",{});var iht=s(i_e);Nar=r(iht,"openai-gpt"),iht.forEach(t),jar=r(w8e," \u2014 "),cV=n(w8e,"A",{href:!0});var dht=s(cV);Dar=r(dht,"TFOpenAIGPTLMHeadModel"),dht.forEach(t),Gar=r(w8e," (OpenAI GPT model)"),w8e.forEach(t),Oar=i(U),yF=n(U,"LI",{});var A8e=s(yF);d_e=n(A8e,"STRONG",{});var cht=s(d_e);Var=r(cht,"roberta"),cht.forEach(t),Xar=r(A8e," \u2014 "),fV=n(A8e,"A",{href:!0});var fht=s(fV);zar=r(fht,"TFRobertaForMaskedLM"),fht.forEach(t),Qar=r(A8e," (RoBERTa model)"),A8e.forEach(t),War=i(U),LF=n(U,"LI",{});var y8e=s(LF);c_e=n(y8e,"STRONG",{});var mht=s(c_e);Har=r(mht,"t5"),mht.forEach(t),Uar=r(y8e," \u2014 "),mV=n(y8e,"A",{href:!0});var ght=s(mV);Jar=r(ght,"TFT5ForConditionalGeneration"),ght.forEach(t),Yar=r(y8e," (T5 model)"),y8e.forEach(t),Kar=i(U),xF=n(U,"LI",{});var L8e=s(xF);f_e=n(L8e,"STRONG",{});var hht=s(f_e);Zar=r(hht,"tapas"),hht.forEach(t),enr=r(L8e," \u2014 "),gV=n(L8e,"A",{href:!0});var pht=s(gV);onr=r(pht,"TFTapasForMaskedLM"),pht.forEach(t),rnr=r(L8e," (TAPAS model)"),L8e.forEach(t),tnr=i(U),kF=n(U,"LI",{});var x8e=s(kF);m_e=n(x8e,"STRONG",{});var _ht=s(m_e);anr=r(_ht,"transfo-xl"),_ht.forEach(t),nnr=r(x8e," \u2014 "),hV=n(x8e,"A",{href:!0});var uht=s(hV);snr=r(uht,"TFTransfoXLLMHeadModel"),uht.forEach(t),lnr=r(x8e," (Transformer-XL model)"),x8e.forEach(t),inr=i(U),SF=n(U,"LI",{});var k8e=s(SF);g_e=n(k8e,"STRONG",{});var bht=s(g_e);dnr=r(bht,"vit_mae"),bht.forEach(t),cnr=r(k8e," \u2014 "),pV=n(k8e,"A",{href:!0});var Fht=s(pV);fnr=r(Fht,"TFViTMAEForPreTraining"),Fht.forEach(t),mnr=r(k8e," (ViTMAE model)"),k8e.forEach(t),gnr=i(U),RF=n(U,"LI",{});var S8e=s(RF);h_e=n(S8e,"STRONG",{});var vht=s(h_e);hnr=r(vht,"xlm"),vht.forEach(t),pnr=r(S8e," \u2014 "),_V=n(S8e,"A",{href:!0});var Tht=s(_V);_nr=r(Tht,"TFXLMWithLMHeadModel"),Tht.forEach(t),unr=r(S8e," (XLM model)"),S8e.forEach(t),bnr=i(U),BF=n(U,"LI",{});var R8e=s(BF);p_e=n(R8e,"STRONG",{});var Mht=s(p_e);Fnr=r(Mht,"xlm-roberta"),Mht.forEach(t),vnr=r(R8e," \u2014 "),uV=n(R8e,"A",{href:!0});var Eht=s(uV);Tnr=r(Eht,"TFXLMRobertaForMaskedLM"),Eht.forEach(t),Mnr=r(R8e," (XLM-RoBERTa model)"),R8e.forEach(t),Enr=i(U),PF=n(U,"LI",{});var B8e=s(PF);__e=n(B8e,"STRONG",{});var Cht=s(__e);Cnr=r(Cht,"xlnet"),Cht.forEach(t),wnr=r(B8e," \u2014 "),bV=n(B8e,"A",{href:!0});var wht=s(bV);Anr=r(wht,"TFXLNetLMHeadModel"),wht.forEach(t),ynr=r(B8e," (XLNet model)"),B8e.forEach(t),U.forEach(t),Lnr=i(_a),u_e=n(_a,"P",{});var Aht=s(u_e);xnr=r(Aht,"Examples:"),Aht.forEach(t),knr=i(_a),m(f0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),aBe=i(c),Fc=n(c,"H2",{class:!0});var h$e=s(Fc);$F=n(h$e,"A",{id:!0,class:!0,href:!0});var yht=s($F);b_e=n(yht,"SPAN",{});var Lht=s(b_e);m(m0.$$.fragment,Lht),Lht.forEach(t),yht.forEach(t),Snr=i(h$e),F_e=n(h$e,"SPAN",{});var xht=s(F_e);Rnr=r(xht,"TFAutoModelForCausalLM"),xht.forEach(t),h$e.forEach(t),nBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(g0.$$.fragment,Vl),Bnr=i(Vl),vc=n(Vl,"P",{});var JU=s(vc);Pnr=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FV=n(JU,"A",{href:!0});var kht=s(FV);$nr=r(kht,"from_pretrained()"),kht.forEach(t),Inr=r(JU," class method or the "),vV=n(JU,"A",{href:!0});var Sht=s(vV);qnr=r(Sht,"from_config()"),Sht.forEach(t),Nnr=r(JU,` class
method.`),JU.forEach(t),jnr=i(Vl),h0=n(Vl,"P",{});var p$e=s(h0);Dnr=r(p$e,"This class cannot be instantiated directly using "),v_e=n(p$e,"CODE",{});var Rht=s(v_e);Gnr=r(Rht,"__init__()"),Rht.forEach(t),Onr=r(p$e," (throws an error)."),p$e.forEach(t),Vnr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(p0.$$.fragment,Xl),Xnr=i(Xl),T_e=n(Xl,"P",{});var Bht=s(T_e);znr=r(Bht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bht.forEach(t),Qnr=i(Xl),Tc=n(Xl,"P",{});var YU=s(Tc);Wnr=r(YU,`Note:
Loading a model from its configuration file does `),M_e=n(YU,"STRONG",{});var Pht=s(M_e);Hnr=r(Pht,"not"),Pht.forEach(t),Unr=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(YU,"A",{href:!0});var $ht=s(TV);Jnr=r($ht,"from_pretrained()"),$ht.forEach(t),Ynr=r(YU," to load the model weights."),YU.forEach(t),Knr=i(Xl),E_e=n(Xl,"P",{});var Iht=s(E_e);Znr=r(Iht,"Examples:"),Iht.forEach(t),esr=i(Xl),m(_0.$$.fragment,Xl),Xl.forEach(t),osr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(u0.$$.fragment,ua),rsr=i(ua),C_e=n(ua,"P",{});var qht=s(C_e);tsr=r(qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qht.forEach(t),asr=i(ua),bn=n(ua,"P",{});var UE=s(bn);nsr=r(UE,"The model class to instantiate is selected based on the "),w_e=n(UE,"CODE",{});var Nht=s(w_e);ssr=r(Nht,"model_type"),Nht.forEach(t),lsr=r(UE,` property of the config object (either
passed as an argument or loaded from `),A_e=n(UE,"CODE",{});var jht=s(A_e);isr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),dsr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(UE,"CODE",{});var Dht=s(y_e);csr=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),fsr=r(UE,":"),UE.forEach(t),msr=i(ua),ce=n(ua,"UL",{});var he=s(ce);IF=n(he,"LI",{});var P8e=s(IF);L_e=n(P8e,"STRONG",{});var Ght=s(L_e);gsr=r(Ght,"bert"),Ght.forEach(t),hsr=r(P8e," \u2014 "),MV=n(P8e,"A",{href:!0});var Oht=s(MV);psr=r(Oht,"TFBertLMHeadModel"),Oht.forEach(t),_sr=r(P8e," (BERT model)"),P8e.forEach(t),usr=i(he),qF=n(he,"LI",{});var $8e=s(qF);x_e=n($8e,"STRONG",{});var Vht=s(x_e);bsr=r(Vht,"camembert"),Vht.forEach(t),Fsr=r($8e," \u2014 "),EV=n($8e,"A",{href:!0});var Xht=s(EV);vsr=r(Xht,"TFCamembertForCausalLM"),Xht.forEach(t),Tsr=r($8e," (CamemBERT model)"),$8e.forEach(t),Msr=i(he),NF=n(he,"LI",{});var I8e=s(NF);k_e=n(I8e,"STRONG",{});var zht=s(k_e);Esr=r(zht,"ctrl"),zht.forEach(t),Csr=r(I8e," \u2014 "),CV=n(I8e,"A",{href:!0});var Qht=s(CV);wsr=r(Qht,"TFCTRLLMHeadModel"),Qht.forEach(t),Asr=r(I8e," (CTRL model)"),I8e.forEach(t),ysr=i(he),jF=n(he,"LI",{});var q8e=s(jF);S_e=n(q8e,"STRONG",{});var Wht=s(S_e);Lsr=r(Wht,"gpt2"),Wht.forEach(t),xsr=r(q8e," \u2014 "),wV=n(q8e,"A",{href:!0});var Hht=s(wV);ksr=r(Hht,"TFGPT2LMHeadModel"),Hht.forEach(t),Ssr=r(q8e," (OpenAI GPT-2 model)"),q8e.forEach(t),Rsr=i(he),DF=n(he,"LI",{});var N8e=s(DF);R_e=n(N8e,"STRONG",{});var Uht=s(R_e);Bsr=r(Uht,"gptj"),Uht.forEach(t),Psr=r(N8e," \u2014 "),AV=n(N8e,"A",{href:!0});var Jht=s(AV);$sr=r(Jht,"TFGPTJForCausalLM"),Jht.forEach(t),Isr=r(N8e," (GPT-J model)"),N8e.forEach(t),qsr=i(he),GF=n(he,"LI",{});var j8e=s(GF);B_e=n(j8e,"STRONG",{});var Yht=s(B_e);Nsr=r(Yht,"openai-gpt"),Yht.forEach(t),jsr=r(j8e," \u2014 "),yV=n(j8e,"A",{href:!0});var Kht=s(yV);Dsr=r(Kht,"TFOpenAIGPTLMHeadModel"),Kht.forEach(t),Gsr=r(j8e," (OpenAI GPT model)"),j8e.forEach(t),Osr=i(he),OF=n(he,"LI",{});var D8e=s(OF);P_e=n(D8e,"STRONG",{});var Zht=s(P_e);Vsr=r(Zht,"rembert"),Zht.forEach(t),Xsr=r(D8e," \u2014 "),LV=n(D8e,"A",{href:!0});var ept=s(LV);zsr=r(ept,"TFRemBertForCausalLM"),ept.forEach(t),Qsr=r(D8e," (RemBERT model)"),D8e.forEach(t),Wsr=i(he),VF=n(he,"LI",{});var G8e=s(VF);$_e=n(G8e,"STRONG",{});var opt=s($_e);Hsr=r(opt,"roberta"),opt.forEach(t),Usr=r(G8e," \u2014 "),xV=n(G8e,"A",{href:!0});var rpt=s(xV);Jsr=r(rpt,"TFRobertaForCausalLM"),rpt.forEach(t),Ysr=r(G8e," (RoBERTa model)"),G8e.forEach(t),Ksr=i(he),XF=n(he,"LI",{});var O8e=s(XF);I_e=n(O8e,"STRONG",{});var tpt=s(I_e);Zsr=r(tpt,"roformer"),tpt.forEach(t),elr=r(O8e," \u2014 "),kV=n(O8e,"A",{href:!0});var apt=s(kV);olr=r(apt,"TFRoFormerForCausalLM"),apt.forEach(t),rlr=r(O8e," (RoFormer model)"),O8e.forEach(t),tlr=i(he),zF=n(he,"LI",{});var V8e=s(zF);q_e=n(V8e,"STRONG",{});var npt=s(q_e);alr=r(npt,"transfo-xl"),npt.forEach(t),nlr=r(V8e," \u2014 "),SV=n(V8e,"A",{href:!0});var spt=s(SV);slr=r(spt,"TFTransfoXLLMHeadModel"),spt.forEach(t),llr=r(V8e," (Transformer-XL model)"),V8e.forEach(t),ilr=i(he),QF=n(he,"LI",{});var X8e=s(QF);N_e=n(X8e,"STRONG",{});var lpt=s(N_e);dlr=r(lpt,"xlm"),lpt.forEach(t),clr=r(X8e," \u2014 "),RV=n(X8e,"A",{href:!0});var ipt=s(RV);flr=r(ipt,"TFXLMWithLMHeadModel"),ipt.forEach(t),mlr=r(X8e," (XLM model)"),X8e.forEach(t),glr=i(he),WF=n(he,"LI",{});var z8e=s(WF);j_e=n(z8e,"STRONG",{});var dpt=s(j_e);hlr=r(dpt,"xlnet"),dpt.forEach(t),plr=r(z8e," \u2014 "),BV=n(z8e,"A",{href:!0});var cpt=s(BV);_lr=r(cpt,"TFXLNetLMHeadModel"),cpt.forEach(t),ulr=r(z8e," (XLNet model)"),z8e.forEach(t),he.forEach(t),blr=i(ua),D_e=n(ua,"P",{});var fpt=s(D_e);Flr=r(fpt,"Examples:"),fpt.forEach(t),vlr=i(ua),m(b0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),sBe=i(c),Mc=n(c,"H2",{class:!0});var _$e=s(Mc);HF=n(_$e,"A",{id:!0,class:!0,href:!0});var mpt=s(HF);G_e=n(mpt,"SPAN",{});var gpt=s(G_e);m(F0.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),Tlr=i(_$e),O_e=n(_$e,"SPAN",{});var hpt=s(O_e);Mlr=r(hpt,"TFAutoModelForImageClassification"),hpt.forEach(t),_$e.forEach(t),lBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(v0.$$.fragment,zl),Elr=i(zl),Ec=n(zl,"P",{});var KU=s(Ec);Clr=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PV=n(KU,"A",{href:!0});var ppt=s(PV);wlr=r(ppt,"from_pretrained()"),ppt.forEach(t),Alr=r(KU," class method or the "),$V=n(KU,"A",{href:!0});var _pt=s($V);ylr=r(_pt,"from_config()"),_pt.forEach(t),Llr=r(KU,` class
method.`),KU.forEach(t),xlr=i(zl),T0=n(zl,"P",{});var u$e=s(T0);klr=r(u$e,"This class cannot be instantiated directly using "),V_e=n(u$e,"CODE",{});var upt=s(V_e);Slr=r(upt,"__init__()"),upt.forEach(t),Rlr=r(u$e," (throws an error)."),u$e.forEach(t),Blr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(M0.$$.fragment,Ql),Plr=i(Ql),X_e=n(Ql,"P",{});var bpt=s(X_e);$lr=r(bpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bpt.forEach(t),Ilr=i(Ql),Cc=n(Ql,"P",{});var ZU=s(Cc);qlr=r(ZU,`Note:
Loading a model from its configuration file does `),z_e=n(ZU,"STRONG",{});var Fpt=s(z_e);Nlr=r(Fpt,"not"),Fpt.forEach(t),jlr=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(ZU,"A",{href:!0});var vpt=s(IV);Dlr=r(vpt,"from_pretrained()"),vpt.forEach(t),Glr=r(ZU," to load the model weights."),ZU.forEach(t),Olr=i(Ql),Q_e=n(Ql,"P",{});var Tpt=s(Q_e);Vlr=r(Tpt,"Examples:"),Tpt.forEach(t),Xlr=i(Ql),m(E0.$$.fragment,Ql),Ql.forEach(t),zlr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(C0.$$.fragment,ba),Qlr=i(ba),W_e=n(ba,"P",{});var Mpt=s(W_e);Wlr=r(Mpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mpt.forEach(t),Hlr=i(ba),Fn=n(ba,"P",{});var JE=s(Fn);Ulr=r(JE,"The model class to instantiate is selected based on the "),H_e=n(JE,"CODE",{});var Ept=s(H_e);Jlr=r(Ept,"model_type"),Ept.forEach(t),Ylr=r(JE,` property of the config object (either
passed as an argument or loaded from `),U_e=n(JE,"CODE",{});var Cpt=s(U_e);Klr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),Zlr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(JE,"CODE",{});var wpt=s(J_e);eir=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),oir=r(JE,":"),JE.forEach(t),rir=i(ba),w0=n(ba,"UL",{});var b$e=s(w0);UF=n(b$e,"LI",{});var Q8e=s(UF);Y_e=n(Q8e,"STRONG",{});var Apt=s(Y_e);tir=r(Apt,"convnext"),Apt.forEach(t),air=r(Q8e," \u2014 "),qV=n(Q8e,"A",{href:!0});var ypt=s(qV);nir=r(ypt,"TFConvNextForImageClassification"),ypt.forEach(t),sir=r(Q8e," (ConvNext model)"),Q8e.forEach(t),lir=i(b$e),JF=n(b$e,"LI",{});var W8e=s(JF);K_e=n(W8e,"STRONG",{});var Lpt=s(K_e);iir=r(Lpt,"vit"),Lpt.forEach(t),dir=r(W8e," \u2014 "),NV=n(W8e,"A",{href:!0});var xpt=s(NV);cir=r(xpt,"TFViTForImageClassification"),xpt.forEach(t),fir=r(W8e," (ViT model)"),W8e.forEach(t),b$e.forEach(t),mir=i(ba),Z_e=n(ba,"P",{});var kpt=s(Z_e);gir=r(kpt,"Examples:"),kpt.forEach(t),hir=i(ba),m(A0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),iBe=i(c),wc=n(c,"H2",{class:!0});var F$e=s(wc);YF=n(F$e,"A",{id:!0,class:!0,href:!0});var Spt=s(YF);eue=n(Spt,"SPAN",{});var Rpt=s(eue);m(y0.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),pir=i(F$e),oue=n(F$e,"SPAN",{});var Bpt=s(oue);_ir=r(Bpt,"TFAutoModelForMaskedLM"),Bpt.forEach(t),F$e.forEach(t),dBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(L0.$$.fragment,Wl),uir=i(Wl),Ac=n(Wl,"P",{});var eJ=s(Ac);bir=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jV=n(eJ,"A",{href:!0});var Ppt=s(jV);Fir=r(Ppt,"from_pretrained()"),Ppt.forEach(t),vir=r(eJ," class method or the "),DV=n(eJ,"A",{href:!0});var $pt=s(DV);Tir=r($pt,"from_config()"),$pt.forEach(t),Mir=r(eJ,` class
method.`),eJ.forEach(t),Eir=i(Wl),x0=n(Wl,"P",{});var v$e=s(x0);Cir=r(v$e,"This class cannot be instantiated directly using "),rue=n(v$e,"CODE",{});var Ipt=s(rue);wir=r(Ipt,"__init__()"),Ipt.forEach(t),Air=r(v$e," (throws an error)."),v$e.forEach(t),yir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(k0.$$.fragment,Hl),Lir=i(Hl),tue=n(Hl,"P",{});var qpt=s(tue);xir=r(qpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qpt.forEach(t),kir=i(Hl),yc=n(Hl,"P",{});var oJ=s(yc);Sir=r(oJ,`Note:
Loading a model from its configuration file does `),aue=n(oJ,"STRONG",{});var Npt=s(aue);Rir=r(Npt,"not"),Npt.forEach(t),Bir=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(oJ,"A",{href:!0});var jpt=s(GV);Pir=r(jpt,"from_pretrained()"),jpt.forEach(t),$ir=r(oJ," to load the model weights."),oJ.forEach(t),Iir=i(Hl),nue=n(Hl,"P",{});var Dpt=s(nue);qir=r(Dpt,"Examples:"),Dpt.forEach(t),Nir=i(Hl),m(S0.$$.fragment,Hl),Hl.forEach(t),jir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(R0.$$.fragment,Fa),Dir=i(Fa),sue=n(Fa,"P",{});var Gpt=s(sue);Gir=r(Gpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gpt.forEach(t),Oir=i(Fa),vn=n(Fa,"P",{});var YE=s(vn);Vir=r(YE,"The model class to instantiate is selected based on the "),lue=n(YE,"CODE",{});var Opt=s(lue);Xir=r(Opt,"model_type"),Opt.forEach(t),zir=r(YE,` property of the config object (either
passed as an argument or loaded from `),iue=n(YE,"CODE",{});var Vpt=s(iue);Qir=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Wir=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(YE,"CODE",{});var Xpt=s(due);Hir=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Uir=r(YE,":"),YE.forEach(t),Jir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);KF=n(ee,"LI",{});var H8e=s(KF);cue=n(H8e,"STRONG",{});var zpt=s(cue);Yir=r(zpt,"albert"),zpt.forEach(t),Kir=r(H8e," \u2014 "),OV=n(H8e,"A",{href:!0});var Qpt=s(OV);Zir=r(Qpt,"TFAlbertForMaskedLM"),Qpt.forEach(t),edr=r(H8e," (ALBERT model)"),H8e.forEach(t),odr=i(ee),ZF=n(ee,"LI",{});var U8e=s(ZF);fue=n(U8e,"STRONG",{});var Wpt=s(fue);rdr=r(Wpt,"bert"),Wpt.forEach(t),tdr=r(U8e," \u2014 "),VV=n(U8e,"A",{href:!0});var Hpt=s(VV);adr=r(Hpt,"TFBertForMaskedLM"),Hpt.forEach(t),ndr=r(U8e," (BERT model)"),U8e.forEach(t),sdr=i(ee),ev=n(ee,"LI",{});var J8e=s(ev);mue=n(J8e,"STRONG",{});var Upt=s(mue);ldr=r(Upt,"camembert"),Upt.forEach(t),idr=r(J8e," \u2014 "),XV=n(J8e,"A",{href:!0});var Jpt=s(XV);ddr=r(Jpt,"TFCamembertForMaskedLM"),Jpt.forEach(t),cdr=r(J8e," (CamemBERT model)"),J8e.forEach(t),fdr=i(ee),ov=n(ee,"LI",{});var Y8e=s(ov);gue=n(Y8e,"STRONG",{});var Ypt=s(gue);mdr=r(Ypt,"convbert"),Ypt.forEach(t),gdr=r(Y8e," \u2014 "),zV=n(Y8e,"A",{href:!0});var Kpt=s(zV);hdr=r(Kpt,"TFConvBertForMaskedLM"),Kpt.forEach(t),pdr=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),_dr=i(ee),rv=n(ee,"LI",{});var K8e=s(rv);hue=n(K8e,"STRONG",{});var Zpt=s(hue);udr=r(Zpt,"deberta"),Zpt.forEach(t),bdr=r(K8e," \u2014 "),QV=n(K8e,"A",{href:!0});var e_t=s(QV);Fdr=r(e_t,"TFDebertaForMaskedLM"),e_t.forEach(t),vdr=r(K8e," (DeBERTa model)"),K8e.forEach(t),Tdr=i(ee),tv=n(ee,"LI",{});var Z8e=s(tv);pue=n(Z8e,"STRONG",{});var o_t=s(pue);Mdr=r(o_t,"deberta-v2"),o_t.forEach(t),Edr=r(Z8e," \u2014 "),WV=n(Z8e,"A",{href:!0});var r_t=s(WV);Cdr=r(r_t,"TFDebertaV2ForMaskedLM"),r_t.forEach(t),wdr=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Adr=i(ee),av=n(ee,"LI",{});var e9e=s(av);_ue=n(e9e,"STRONG",{});var t_t=s(_ue);ydr=r(t_t,"distilbert"),t_t.forEach(t),Ldr=r(e9e," \u2014 "),HV=n(e9e,"A",{href:!0});var a_t=s(HV);xdr=r(a_t,"TFDistilBertForMaskedLM"),a_t.forEach(t),kdr=r(e9e," (DistilBERT model)"),e9e.forEach(t),Sdr=i(ee),nv=n(ee,"LI",{});var o9e=s(nv);uue=n(o9e,"STRONG",{});var n_t=s(uue);Rdr=r(n_t,"electra"),n_t.forEach(t),Bdr=r(o9e," \u2014 "),UV=n(o9e,"A",{href:!0});var s_t=s(UV);Pdr=r(s_t,"TFElectraForMaskedLM"),s_t.forEach(t),$dr=r(o9e," (ELECTRA model)"),o9e.forEach(t),Idr=i(ee),sv=n(ee,"LI",{});var r9e=s(sv);bue=n(r9e,"STRONG",{});var l_t=s(bue);qdr=r(l_t,"flaubert"),l_t.forEach(t),Ndr=r(r9e," \u2014 "),JV=n(r9e,"A",{href:!0});var i_t=s(JV);jdr=r(i_t,"TFFlaubertWithLMHeadModel"),i_t.forEach(t),Ddr=r(r9e," (FlauBERT model)"),r9e.forEach(t),Gdr=i(ee),lv=n(ee,"LI",{});var t9e=s(lv);Fue=n(t9e,"STRONG",{});var d_t=s(Fue);Odr=r(d_t,"funnel"),d_t.forEach(t),Vdr=r(t9e," \u2014 "),YV=n(t9e,"A",{href:!0});var c_t=s(YV);Xdr=r(c_t,"TFFunnelForMaskedLM"),c_t.forEach(t),zdr=r(t9e," (Funnel Transformer model)"),t9e.forEach(t),Qdr=i(ee),iv=n(ee,"LI",{});var a9e=s(iv);vue=n(a9e,"STRONG",{});var f_t=s(vue);Wdr=r(f_t,"layoutlm"),f_t.forEach(t),Hdr=r(a9e," \u2014 "),KV=n(a9e,"A",{href:!0});var m_t=s(KV);Udr=r(m_t,"TFLayoutLMForMaskedLM"),m_t.forEach(t),Jdr=r(a9e," (LayoutLM model)"),a9e.forEach(t),Ydr=i(ee),dv=n(ee,"LI",{});var n9e=s(dv);Tue=n(n9e,"STRONG",{});var g_t=s(Tue);Kdr=r(g_t,"longformer"),g_t.forEach(t),Zdr=r(n9e," \u2014 "),ZV=n(n9e,"A",{href:!0});var h_t=s(ZV);ecr=r(h_t,"TFLongformerForMaskedLM"),h_t.forEach(t),ocr=r(n9e," (Longformer model)"),n9e.forEach(t),rcr=i(ee),cv=n(ee,"LI",{});var s9e=s(cv);Mue=n(s9e,"STRONG",{});var p_t=s(Mue);tcr=r(p_t,"mobilebert"),p_t.forEach(t),acr=r(s9e," \u2014 "),eX=n(s9e,"A",{href:!0});var __t=s(eX);ncr=r(__t,"TFMobileBertForMaskedLM"),__t.forEach(t),scr=r(s9e," (MobileBERT model)"),s9e.forEach(t),lcr=i(ee),fv=n(ee,"LI",{});var l9e=s(fv);Eue=n(l9e,"STRONG",{});var u_t=s(Eue);icr=r(u_t,"mpnet"),u_t.forEach(t),dcr=r(l9e," \u2014 "),oX=n(l9e,"A",{href:!0});var b_t=s(oX);ccr=r(b_t,"TFMPNetForMaskedLM"),b_t.forEach(t),fcr=r(l9e," (MPNet model)"),l9e.forEach(t),mcr=i(ee),mv=n(ee,"LI",{});var i9e=s(mv);Cue=n(i9e,"STRONG",{});var F_t=s(Cue);gcr=r(F_t,"rembert"),F_t.forEach(t),hcr=r(i9e," \u2014 "),rX=n(i9e,"A",{href:!0});var v_t=s(rX);pcr=r(v_t,"TFRemBertForMaskedLM"),v_t.forEach(t),_cr=r(i9e," (RemBERT model)"),i9e.forEach(t),ucr=i(ee),gv=n(ee,"LI",{});var d9e=s(gv);wue=n(d9e,"STRONG",{});var T_t=s(wue);bcr=r(T_t,"roberta"),T_t.forEach(t),Fcr=r(d9e," \u2014 "),tX=n(d9e,"A",{href:!0});var M_t=s(tX);vcr=r(M_t,"TFRobertaForMaskedLM"),M_t.forEach(t),Tcr=r(d9e," (RoBERTa model)"),d9e.forEach(t),Mcr=i(ee),hv=n(ee,"LI",{});var c9e=s(hv);Aue=n(c9e,"STRONG",{});var E_t=s(Aue);Ecr=r(E_t,"roformer"),E_t.forEach(t),Ccr=r(c9e," \u2014 "),aX=n(c9e,"A",{href:!0});var C_t=s(aX);wcr=r(C_t,"TFRoFormerForMaskedLM"),C_t.forEach(t),Acr=r(c9e," (RoFormer model)"),c9e.forEach(t),ycr=i(ee),pv=n(ee,"LI",{});var f9e=s(pv);yue=n(f9e,"STRONG",{});var w_t=s(yue);Lcr=r(w_t,"tapas"),w_t.forEach(t),xcr=r(f9e," \u2014 "),nX=n(f9e,"A",{href:!0});var A_t=s(nX);kcr=r(A_t,"TFTapasForMaskedLM"),A_t.forEach(t),Scr=r(f9e," (TAPAS model)"),f9e.forEach(t),Rcr=i(ee),_v=n(ee,"LI",{});var m9e=s(_v);Lue=n(m9e,"STRONG",{});var y_t=s(Lue);Bcr=r(y_t,"xlm"),y_t.forEach(t),Pcr=r(m9e," \u2014 "),sX=n(m9e,"A",{href:!0});var L_t=s(sX);$cr=r(L_t,"TFXLMWithLMHeadModel"),L_t.forEach(t),Icr=r(m9e," (XLM model)"),m9e.forEach(t),qcr=i(ee),uv=n(ee,"LI",{});var g9e=s(uv);xue=n(g9e,"STRONG",{});var x_t=s(xue);Ncr=r(x_t,"xlm-roberta"),x_t.forEach(t),jcr=r(g9e," \u2014 "),lX=n(g9e,"A",{href:!0});var k_t=s(lX);Dcr=r(k_t,"TFXLMRobertaForMaskedLM"),k_t.forEach(t),Gcr=r(g9e," (XLM-RoBERTa model)"),g9e.forEach(t),ee.forEach(t),Ocr=i(Fa),kue=n(Fa,"P",{});var S_t=s(kue);Vcr=r(S_t,"Examples:"),S_t.forEach(t),Xcr=i(Fa),m(B0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),cBe=i(c),Lc=n(c,"H2",{class:!0});var T$e=s(Lc);bv=n(T$e,"A",{id:!0,class:!0,href:!0});var R_t=s(bv);Sue=n(R_t,"SPAN",{});var B_t=s(Sue);m(P0.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),zcr=i(T$e),Rue=n(T$e,"SPAN",{});var P_t=s(Rue);Qcr=r(P_t,"TFAutoModelForSeq2SeqLM"),P_t.forEach(t),T$e.forEach(t),fBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m($0.$$.fragment,Ul),Wcr=i(Ul),xc=n(Ul,"P",{});var rJ=s(xc);Hcr=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iX=n(rJ,"A",{href:!0});var $_t=s(iX);Ucr=r($_t,"from_pretrained()"),$_t.forEach(t),Jcr=r(rJ," class method or the "),dX=n(rJ,"A",{href:!0});var I_t=s(dX);Ycr=r(I_t,"from_config()"),I_t.forEach(t),Kcr=r(rJ,` class
method.`),rJ.forEach(t),Zcr=i(Ul),I0=n(Ul,"P",{});var M$e=s(I0);efr=r(M$e,"This class cannot be instantiated directly using "),Bue=n(M$e,"CODE",{});var q_t=s(Bue);ofr=r(q_t,"__init__()"),q_t.forEach(t),rfr=r(M$e," (throws an error)."),M$e.forEach(t),tfr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(q0.$$.fragment,Jl),afr=i(Jl),Pue=n(Jl,"P",{});var N_t=s(Pue);nfr=r(N_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N_t.forEach(t),sfr=i(Jl),kc=n(Jl,"P",{});var tJ=s(kc);lfr=r(tJ,`Note:
Loading a model from its configuration file does `),$ue=n(tJ,"STRONG",{});var j_t=s($ue);ifr=r(j_t,"not"),j_t.forEach(t),dfr=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(tJ,"A",{href:!0});var D_t=s(cX);cfr=r(D_t,"from_pretrained()"),D_t.forEach(t),ffr=r(tJ," to load the model weights."),tJ.forEach(t),mfr=i(Jl),Iue=n(Jl,"P",{});var G_t=s(Iue);gfr=r(G_t,"Examples:"),G_t.forEach(t),hfr=i(Jl),m(N0.$$.fragment,Jl),Jl.forEach(t),pfr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(j0.$$.fragment,va),_fr=i(va),que=n(va,"P",{});var O_t=s(que);ufr=r(O_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O_t.forEach(t),bfr=i(va),Tn=n(va,"P",{});var KE=s(Tn);Ffr=r(KE,"The model class to instantiate is selected based on the "),Nue=n(KE,"CODE",{});var V_t=s(Nue);vfr=r(V_t,"model_type"),V_t.forEach(t),Tfr=r(KE,` property of the config object (either
passed as an argument or loaded from `),jue=n(KE,"CODE",{});var X_t=s(jue);Mfr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),Efr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(KE,"CODE",{});var z_t=s(Due);Cfr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),wfr=r(KE,":"),KE.forEach(t),Afr=i(va),ue=n(va,"UL",{});var we=s(ue);Fv=n(we,"LI",{});var h9e=s(Fv);Gue=n(h9e,"STRONG",{});var Q_t=s(Gue);yfr=r(Q_t,"bart"),Q_t.forEach(t),Lfr=r(h9e," \u2014 "),fX=n(h9e,"A",{href:!0});var W_t=s(fX);xfr=r(W_t,"TFBartForConditionalGeneration"),W_t.forEach(t),kfr=r(h9e," (BART model)"),h9e.forEach(t),Sfr=i(we),vv=n(we,"LI",{});var p9e=s(vv);Oue=n(p9e,"STRONG",{});var H_t=s(Oue);Rfr=r(H_t,"blenderbot"),H_t.forEach(t),Bfr=r(p9e," \u2014 "),mX=n(p9e,"A",{href:!0});var U_t=s(mX);Pfr=r(U_t,"TFBlenderbotForConditionalGeneration"),U_t.forEach(t),$fr=r(p9e," (Blenderbot model)"),p9e.forEach(t),Ifr=i(we),Tv=n(we,"LI",{});var _9e=s(Tv);Vue=n(_9e,"STRONG",{});var J_t=s(Vue);qfr=r(J_t,"blenderbot-small"),J_t.forEach(t),Nfr=r(_9e," \u2014 "),gX=n(_9e,"A",{href:!0});var Y_t=s(gX);jfr=r(Y_t,"TFBlenderbotSmallForConditionalGeneration"),Y_t.forEach(t),Dfr=r(_9e," (BlenderbotSmall model)"),_9e.forEach(t),Gfr=i(we),Mv=n(we,"LI",{});var u9e=s(Mv);Xue=n(u9e,"STRONG",{});var K_t=s(Xue);Ofr=r(K_t,"encoder-decoder"),K_t.forEach(t),Vfr=r(u9e," \u2014 "),hX=n(u9e,"A",{href:!0});var Z_t=s(hX);Xfr=r(Z_t,"TFEncoderDecoderModel"),Z_t.forEach(t),zfr=r(u9e," (Encoder decoder model)"),u9e.forEach(t),Qfr=i(we),Ev=n(we,"LI",{});var b9e=s(Ev);zue=n(b9e,"STRONG",{});var eut=s(zue);Wfr=r(eut,"led"),eut.forEach(t),Hfr=r(b9e," \u2014 "),pX=n(b9e,"A",{href:!0});var out=s(pX);Ufr=r(out,"TFLEDForConditionalGeneration"),out.forEach(t),Jfr=r(b9e," (LED model)"),b9e.forEach(t),Yfr=i(we),Cv=n(we,"LI",{});var F9e=s(Cv);Que=n(F9e,"STRONG",{});var rut=s(Que);Kfr=r(rut,"marian"),rut.forEach(t),Zfr=r(F9e," \u2014 "),_X=n(F9e,"A",{href:!0});var tut=s(_X);emr=r(tut,"TFMarianMTModel"),tut.forEach(t),omr=r(F9e," (Marian model)"),F9e.forEach(t),rmr=i(we),wv=n(we,"LI",{});var v9e=s(wv);Wue=n(v9e,"STRONG",{});var aut=s(Wue);tmr=r(aut,"mbart"),aut.forEach(t),amr=r(v9e," \u2014 "),uX=n(v9e,"A",{href:!0});var nut=s(uX);nmr=r(nut,"TFMBartForConditionalGeneration"),nut.forEach(t),smr=r(v9e," (mBART model)"),v9e.forEach(t),lmr=i(we),Av=n(we,"LI",{});var T9e=s(Av);Hue=n(T9e,"STRONG",{});var sut=s(Hue);imr=r(sut,"mt5"),sut.forEach(t),dmr=r(T9e," \u2014 "),bX=n(T9e,"A",{href:!0});var lut=s(bX);cmr=r(lut,"TFMT5ForConditionalGeneration"),lut.forEach(t),fmr=r(T9e," (mT5 model)"),T9e.forEach(t),mmr=i(we),yv=n(we,"LI",{});var M9e=s(yv);Uue=n(M9e,"STRONG",{});var iut=s(Uue);gmr=r(iut,"pegasus"),iut.forEach(t),hmr=r(M9e," \u2014 "),FX=n(M9e,"A",{href:!0});var dut=s(FX);pmr=r(dut,"TFPegasusForConditionalGeneration"),dut.forEach(t),_mr=r(M9e," (Pegasus model)"),M9e.forEach(t),umr=i(we),Lv=n(we,"LI",{});var E9e=s(Lv);Jue=n(E9e,"STRONG",{});var cut=s(Jue);bmr=r(cut,"t5"),cut.forEach(t),Fmr=r(E9e," \u2014 "),vX=n(E9e,"A",{href:!0});var fut=s(vX);vmr=r(fut,"TFT5ForConditionalGeneration"),fut.forEach(t),Tmr=r(E9e," (T5 model)"),E9e.forEach(t),we.forEach(t),Mmr=i(va),Yue=n(va,"P",{});var mut=s(Yue);Emr=r(mut,"Examples:"),mut.forEach(t),Cmr=i(va),m(D0.$$.fragment,va),va.forEach(t),Ul.forEach(t),mBe=i(c),Sc=n(c,"H2",{class:!0});var E$e=s(Sc);xv=n(E$e,"A",{id:!0,class:!0,href:!0});var gut=s(xv);Kue=n(gut,"SPAN",{});var hut=s(Kue);m(G0.$$.fragment,hut),hut.forEach(t),gut.forEach(t),wmr=i(E$e),Zue=n(E$e,"SPAN",{});var put=s(Zue);Amr=r(put,"TFAutoModelForSequenceClassification"),put.forEach(t),E$e.forEach(t),gBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(O0.$$.fragment,Yl),ymr=i(Yl),Rc=n(Yl,"P",{});var aJ=s(Rc);Lmr=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TX=n(aJ,"A",{href:!0});var _ut=s(TX);xmr=r(_ut,"from_pretrained()"),_ut.forEach(t),kmr=r(aJ," class method or the "),MX=n(aJ,"A",{href:!0});var uut=s(MX);Smr=r(uut,"from_config()"),uut.forEach(t),Rmr=r(aJ,` class
method.`),aJ.forEach(t),Bmr=i(Yl),V0=n(Yl,"P",{});var C$e=s(V0);Pmr=r(C$e,"This class cannot be instantiated directly using "),e1e=n(C$e,"CODE",{});var but=s(e1e);$mr=r(but,"__init__()"),but.forEach(t),Imr=r(C$e," (throws an error)."),C$e.forEach(t),qmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(X0.$$.fragment,Kl),Nmr=i(Kl),o1e=n(Kl,"P",{});var Fut=s(o1e);jmr=r(Fut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fut.forEach(t),Dmr=i(Kl),Bc=n(Kl,"P",{});var nJ=s(Bc);Gmr=r(nJ,`Note:
Loading a model from its configuration file does `),r1e=n(nJ,"STRONG",{});var vut=s(r1e);Omr=r(vut,"not"),vut.forEach(t),Vmr=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(nJ,"A",{href:!0});var Tut=s(EX);Xmr=r(Tut,"from_pretrained()"),Tut.forEach(t),zmr=r(nJ," to load the model weights."),nJ.forEach(t),Qmr=i(Kl),t1e=n(Kl,"P",{});var Mut=s(t1e);Wmr=r(Mut,"Examples:"),Mut.forEach(t),Hmr=i(Kl),m(z0.$$.fragment,Kl),Kl.forEach(t),Umr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(Q0.$$.fragment,Ta),Jmr=i(Ta),a1e=n(Ta,"P",{});var Eut=s(a1e);Ymr=r(Eut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eut.forEach(t),Kmr=i(Ta),Mn=n(Ta,"P",{});var ZE=s(Mn);Zmr=r(ZE,"The model class to instantiate is selected based on the "),n1e=n(ZE,"CODE",{});var Cut=s(n1e);egr=r(Cut,"model_type"),Cut.forEach(t),ogr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),s1e=n(ZE,"CODE",{});var wut=s(s1e);rgr=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),tgr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(ZE,"CODE",{});var Aut=s(l1e);agr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),ngr=r(ZE,":"),ZE.forEach(t),sgr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);kv=n(Q,"LI",{});var C9e=s(kv);i1e=n(C9e,"STRONG",{});var yut=s(i1e);lgr=r(yut,"albert"),yut.forEach(t),igr=r(C9e," \u2014 "),CX=n(C9e,"A",{href:!0});var Lut=s(CX);dgr=r(Lut,"TFAlbertForSequenceClassification"),Lut.forEach(t),cgr=r(C9e," (ALBERT model)"),C9e.forEach(t),fgr=i(Q),Sv=n(Q,"LI",{});var w9e=s(Sv);d1e=n(w9e,"STRONG",{});var xut=s(d1e);mgr=r(xut,"bert"),xut.forEach(t),ggr=r(w9e," \u2014 "),wX=n(w9e,"A",{href:!0});var kut=s(wX);hgr=r(kut,"TFBertForSequenceClassification"),kut.forEach(t),pgr=r(w9e," (BERT model)"),w9e.forEach(t),_gr=i(Q),Rv=n(Q,"LI",{});var A9e=s(Rv);c1e=n(A9e,"STRONG",{});var Sut=s(c1e);ugr=r(Sut,"camembert"),Sut.forEach(t),bgr=r(A9e," \u2014 "),AX=n(A9e,"A",{href:!0});var Rut=s(AX);Fgr=r(Rut,"TFCamembertForSequenceClassification"),Rut.forEach(t),vgr=r(A9e," (CamemBERT model)"),A9e.forEach(t),Tgr=i(Q),Bv=n(Q,"LI",{});var y9e=s(Bv);f1e=n(y9e,"STRONG",{});var But=s(f1e);Mgr=r(But,"convbert"),But.forEach(t),Egr=r(y9e," \u2014 "),yX=n(y9e,"A",{href:!0});var Put=s(yX);Cgr=r(Put,"TFConvBertForSequenceClassification"),Put.forEach(t),wgr=r(y9e," (ConvBERT model)"),y9e.forEach(t),Agr=i(Q),Pv=n(Q,"LI",{});var L9e=s(Pv);m1e=n(L9e,"STRONG",{});var $ut=s(m1e);ygr=r($ut,"ctrl"),$ut.forEach(t),Lgr=r(L9e," \u2014 "),LX=n(L9e,"A",{href:!0});var Iut=s(LX);xgr=r(Iut,"TFCTRLForSequenceClassification"),Iut.forEach(t),kgr=r(L9e," (CTRL model)"),L9e.forEach(t),Sgr=i(Q),$v=n(Q,"LI",{});var x9e=s($v);g1e=n(x9e,"STRONG",{});var qut=s(g1e);Rgr=r(qut,"deberta"),qut.forEach(t),Bgr=r(x9e," \u2014 "),xX=n(x9e,"A",{href:!0});var Nut=s(xX);Pgr=r(Nut,"TFDebertaForSequenceClassification"),Nut.forEach(t),$gr=r(x9e," (DeBERTa model)"),x9e.forEach(t),Igr=i(Q),Iv=n(Q,"LI",{});var k9e=s(Iv);h1e=n(k9e,"STRONG",{});var jut=s(h1e);qgr=r(jut,"deberta-v2"),jut.forEach(t),Ngr=r(k9e," \u2014 "),kX=n(k9e,"A",{href:!0});var Dut=s(kX);jgr=r(Dut,"TFDebertaV2ForSequenceClassification"),Dut.forEach(t),Dgr=r(k9e," (DeBERTa-v2 model)"),k9e.forEach(t),Ggr=i(Q),qv=n(Q,"LI",{});var S9e=s(qv);p1e=n(S9e,"STRONG",{});var Gut=s(p1e);Ogr=r(Gut,"distilbert"),Gut.forEach(t),Vgr=r(S9e," \u2014 "),SX=n(S9e,"A",{href:!0});var Out=s(SX);Xgr=r(Out,"TFDistilBertForSequenceClassification"),Out.forEach(t),zgr=r(S9e," (DistilBERT model)"),S9e.forEach(t),Qgr=i(Q),Nv=n(Q,"LI",{});var R9e=s(Nv);_1e=n(R9e,"STRONG",{});var Vut=s(_1e);Wgr=r(Vut,"electra"),Vut.forEach(t),Hgr=r(R9e," \u2014 "),RX=n(R9e,"A",{href:!0});var Xut=s(RX);Ugr=r(Xut,"TFElectraForSequenceClassification"),Xut.forEach(t),Jgr=r(R9e," (ELECTRA model)"),R9e.forEach(t),Ygr=i(Q),jv=n(Q,"LI",{});var B9e=s(jv);u1e=n(B9e,"STRONG",{});var zut=s(u1e);Kgr=r(zut,"flaubert"),zut.forEach(t),Zgr=r(B9e," \u2014 "),BX=n(B9e,"A",{href:!0});var Qut=s(BX);ehr=r(Qut,"TFFlaubertForSequenceClassification"),Qut.forEach(t),ohr=r(B9e," (FlauBERT model)"),B9e.forEach(t),rhr=i(Q),Dv=n(Q,"LI",{});var P9e=s(Dv);b1e=n(P9e,"STRONG",{});var Wut=s(b1e);thr=r(Wut,"funnel"),Wut.forEach(t),ahr=r(P9e," \u2014 "),PX=n(P9e,"A",{href:!0});var Hut=s(PX);nhr=r(Hut,"TFFunnelForSequenceClassification"),Hut.forEach(t),shr=r(P9e," (Funnel Transformer model)"),P9e.forEach(t),lhr=i(Q),Gv=n(Q,"LI",{});var $9e=s(Gv);F1e=n($9e,"STRONG",{});var Uut=s(F1e);ihr=r(Uut,"gpt2"),Uut.forEach(t),dhr=r($9e," \u2014 "),$X=n($9e,"A",{href:!0});var Jut=s($X);chr=r(Jut,"TFGPT2ForSequenceClassification"),Jut.forEach(t),fhr=r($9e," (OpenAI GPT-2 model)"),$9e.forEach(t),mhr=i(Q),Ov=n(Q,"LI",{});var I9e=s(Ov);v1e=n(I9e,"STRONG",{});var Yut=s(v1e);ghr=r(Yut,"gptj"),Yut.forEach(t),hhr=r(I9e," \u2014 "),IX=n(I9e,"A",{href:!0});var Kut=s(IX);phr=r(Kut,"TFGPTJForSequenceClassification"),Kut.forEach(t),_hr=r(I9e," (GPT-J model)"),I9e.forEach(t),uhr=i(Q),Vv=n(Q,"LI",{});var q9e=s(Vv);T1e=n(q9e,"STRONG",{});var Zut=s(T1e);bhr=r(Zut,"layoutlm"),Zut.forEach(t),Fhr=r(q9e," \u2014 "),qX=n(q9e,"A",{href:!0});var e1t=s(qX);vhr=r(e1t,"TFLayoutLMForSequenceClassification"),e1t.forEach(t),Thr=r(q9e," (LayoutLM model)"),q9e.forEach(t),Mhr=i(Q),Xv=n(Q,"LI",{});var N9e=s(Xv);M1e=n(N9e,"STRONG",{});var o1t=s(M1e);Ehr=r(o1t,"longformer"),o1t.forEach(t),Chr=r(N9e," \u2014 "),NX=n(N9e,"A",{href:!0});var r1t=s(NX);whr=r(r1t,"TFLongformerForSequenceClassification"),r1t.forEach(t),Ahr=r(N9e," (Longformer model)"),N9e.forEach(t),yhr=i(Q),zv=n(Q,"LI",{});var j9e=s(zv);E1e=n(j9e,"STRONG",{});var t1t=s(E1e);Lhr=r(t1t,"mobilebert"),t1t.forEach(t),xhr=r(j9e," \u2014 "),jX=n(j9e,"A",{href:!0});var a1t=s(jX);khr=r(a1t,"TFMobileBertForSequenceClassification"),a1t.forEach(t),Shr=r(j9e," (MobileBERT model)"),j9e.forEach(t),Rhr=i(Q),Qv=n(Q,"LI",{});var D9e=s(Qv);C1e=n(D9e,"STRONG",{});var n1t=s(C1e);Bhr=r(n1t,"mpnet"),n1t.forEach(t),Phr=r(D9e," \u2014 "),DX=n(D9e,"A",{href:!0});var s1t=s(DX);$hr=r(s1t,"TFMPNetForSequenceClassification"),s1t.forEach(t),Ihr=r(D9e," (MPNet model)"),D9e.forEach(t),qhr=i(Q),Wv=n(Q,"LI",{});var G9e=s(Wv);w1e=n(G9e,"STRONG",{});var l1t=s(w1e);Nhr=r(l1t,"openai-gpt"),l1t.forEach(t),jhr=r(G9e," \u2014 "),GX=n(G9e,"A",{href:!0});var i1t=s(GX);Dhr=r(i1t,"TFOpenAIGPTForSequenceClassification"),i1t.forEach(t),Ghr=r(G9e," (OpenAI GPT model)"),G9e.forEach(t),Ohr=i(Q),Hv=n(Q,"LI",{});var O9e=s(Hv);A1e=n(O9e,"STRONG",{});var d1t=s(A1e);Vhr=r(d1t,"rembert"),d1t.forEach(t),Xhr=r(O9e," \u2014 "),OX=n(O9e,"A",{href:!0});var c1t=s(OX);zhr=r(c1t,"TFRemBertForSequenceClassification"),c1t.forEach(t),Qhr=r(O9e," (RemBERT model)"),O9e.forEach(t),Whr=i(Q),Uv=n(Q,"LI",{});var V9e=s(Uv);y1e=n(V9e,"STRONG",{});var f1t=s(y1e);Hhr=r(f1t,"roberta"),f1t.forEach(t),Uhr=r(V9e," \u2014 "),VX=n(V9e,"A",{href:!0});var m1t=s(VX);Jhr=r(m1t,"TFRobertaForSequenceClassification"),m1t.forEach(t),Yhr=r(V9e," (RoBERTa model)"),V9e.forEach(t),Khr=i(Q),Jv=n(Q,"LI",{});var X9e=s(Jv);L1e=n(X9e,"STRONG",{});var g1t=s(L1e);Zhr=r(g1t,"roformer"),g1t.forEach(t),epr=r(X9e," \u2014 "),XX=n(X9e,"A",{href:!0});var h1t=s(XX);opr=r(h1t,"TFRoFormerForSequenceClassification"),h1t.forEach(t),rpr=r(X9e," (RoFormer model)"),X9e.forEach(t),tpr=i(Q),Yv=n(Q,"LI",{});var z9e=s(Yv);x1e=n(z9e,"STRONG",{});var p1t=s(x1e);apr=r(p1t,"tapas"),p1t.forEach(t),npr=r(z9e," \u2014 "),zX=n(z9e,"A",{href:!0});var _1t=s(zX);spr=r(_1t,"TFTapasForSequenceClassification"),_1t.forEach(t),lpr=r(z9e," (TAPAS model)"),z9e.forEach(t),ipr=i(Q),Kv=n(Q,"LI",{});var Q9e=s(Kv);k1e=n(Q9e,"STRONG",{});var u1t=s(k1e);dpr=r(u1t,"transfo-xl"),u1t.forEach(t),cpr=r(Q9e," \u2014 "),QX=n(Q9e,"A",{href:!0});var b1t=s(QX);fpr=r(b1t,"TFTransfoXLForSequenceClassification"),b1t.forEach(t),mpr=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),gpr=i(Q),Zv=n(Q,"LI",{});var W9e=s(Zv);S1e=n(W9e,"STRONG",{});var F1t=s(S1e);hpr=r(F1t,"xlm"),F1t.forEach(t),ppr=r(W9e," \u2014 "),WX=n(W9e,"A",{href:!0});var v1t=s(WX);_pr=r(v1t,"TFXLMForSequenceClassification"),v1t.forEach(t),upr=r(W9e," (XLM model)"),W9e.forEach(t),bpr=i(Q),eT=n(Q,"LI",{});var H9e=s(eT);R1e=n(H9e,"STRONG",{});var T1t=s(R1e);Fpr=r(T1t,"xlm-roberta"),T1t.forEach(t),vpr=r(H9e," \u2014 "),HX=n(H9e,"A",{href:!0});var M1t=s(HX);Tpr=r(M1t,"TFXLMRobertaForSequenceClassification"),M1t.forEach(t),Mpr=r(H9e," (XLM-RoBERTa model)"),H9e.forEach(t),Epr=i(Q),oT=n(Q,"LI",{});var U9e=s(oT);B1e=n(U9e,"STRONG",{});var E1t=s(B1e);Cpr=r(E1t,"xlnet"),E1t.forEach(t),wpr=r(U9e," \u2014 "),UX=n(U9e,"A",{href:!0});var C1t=s(UX);Apr=r(C1t,"TFXLNetForSequenceClassification"),C1t.forEach(t),ypr=r(U9e," (XLNet model)"),U9e.forEach(t),Q.forEach(t),Lpr=i(Ta),P1e=n(Ta,"P",{});var w1t=s(P1e);xpr=r(w1t,"Examples:"),w1t.forEach(t),kpr=i(Ta),m(W0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),hBe=i(c),Pc=n(c,"H2",{class:!0});var w$e=s(Pc);rT=n(w$e,"A",{id:!0,class:!0,href:!0});var A1t=s(rT);$1e=n(A1t,"SPAN",{});var y1t=s($1e);m(H0.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Spr=i(w$e),I1e=n(w$e,"SPAN",{});var L1t=s(I1e);Rpr=r(L1t,"TFAutoModelForMultipleChoice"),L1t.forEach(t),w$e.forEach(t),pBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(U0.$$.fragment,Zl),Bpr=i(Zl),$c=n(Zl,"P",{});var sJ=s($c);Ppr=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JX=n(sJ,"A",{href:!0});var x1t=s(JX);$pr=r(x1t,"from_pretrained()"),x1t.forEach(t),Ipr=r(sJ," class method or the "),YX=n(sJ,"A",{href:!0});var k1t=s(YX);qpr=r(k1t,"from_config()"),k1t.forEach(t),Npr=r(sJ,` class
method.`),sJ.forEach(t),jpr=i(Zl),J0=n(Zl,"P",{});var A$e=s(J0);Dpr=r(A$e,"This class cannot be instantiated directly using "),q1e=n(A$e,"CODE",{});var S1t=s(q1e);Gpr=r(S1t,"__init__()"),S1t.forEach(t),Opr=r(A$e," (throws an error)."),A$e.forEach(t),Vpr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(Y0.$$.fragment,ei),Xpr=i(ei),N1e=n(ei,"P",{});var R1t=s(N1e);zpr=r(R1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R1t.forEach(t),Qpr=i(ei),Ic=n(ei,"P",{});var lJ=s(Ic);Wpr=r(lJ,`Note:
Loading a model from its configuration file does `),j1e=n(lJ,"STRONG",{});var B1t=s(j1e);Hpr=r(B1t,"not"),B1t.forEach(t),Upr=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(lJ,"A",{href:!0});var P1t=s(KX);Jpr=r(P1t,"from_pretrained()"),P1t.forEach(t),Ypr=r(lJ," to load the model weights."),lJ.forEach(t),Kpr=i(ei),D1e=n(ei,"P",{});var $1t=s(D1e);Zpr=r($1t,"Examples:"),$1t.forEach(t),e_r=i(ei),m(K0.$$.fragment,ei),ei.forEach(t),o_r=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(Z0.$$.fragment,Ma),r_r=i(Ma),G1e=n(Ma,"P",{});var I1t=s(G1e);t_r=r(I1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I1t.forEach(t),a_r=i(Ma),En=n(Ma,"P",{});var eC=s(En);n_r=r(eC,"The model class to instantiate is selected based on the "),O1e=n(eC,"CODE",{});var q1t=s(O1e);s_r=r(q1t,"model_type"),q1t.forEach(t),l_r=r(eC,` property of the config object (either
passed as an argument or loaded from `),V1e=n(eC,"CODE",{});var N1t=s(V1e);i_r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),d_r=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(eC,"CODE",{});var j1t=s(X1e);c_r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),f_r=r(eC,":"),eC.forEach(t),m_r=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);tT=n(le,"LI",{});var J9e=s(tT);z1e=n(J9e,"STRONG",{});var D1t=s(z1e);g_r=r(D1t,"albert"),D1t.forEach(t),h_r=r(J9e," \u2014 "),ZX=n(J9e,"A",{href:!0});var G1t=s(ZX);p_r=r(G1t,"TFAlbertForMultipleChoice"),G1t.forEach(t),__r=r(J9e," (ALBERT model)"),J9e.forEach(t),u_r=i(le),aT=n(le,"LI",{});var Y9e=s(aT);Q1e=n(Y9e,"STRONG",{});var O1t=s(Q1e);b_r=r(O1t,"bert"),O1t.forEach(t),F_r=r(Y9e," \u2014 "),ez=n(Y9e,"A",{href:!0});var V1t=s(ez);v_r=r(V1t,"TFBertForMultipleChoice"),V1t.forEach(t),T_r=r(Y9e," (BERT model)"),Y9e.forEach(t),M_r=i(le),nT=n(le,"LI",{});var K9e=s(nT);W1e=n(K9e,"STRONG",{});var X1t=s(W1e);E_r=r(X1t,"camembert"),X1t.forEach(t),C_r=r(K9e," \u2014 "),oz=n(K9e,"A",{href:!0});var z1t=s(oz);w_r=r(z1t,"TFCamembertForMultipleChoice"),z1t.forEach(t),A_r=r(K9e," (CamemBERT model)"),K9e.forEach(t),y_r=i(le),sT=n(le,"LI",{});var Z9e=s(sT);H1e=n(Z9e,"STRONG",{});var Q1t=s(H1e);L_r=r(Q1t,"convbert"),Q1t.forEach(t),x_r=r(Z9e," \u2014 "),rz=n(Z9e,"A",{href:!0});var W1t=s(rz);k_r=r(W1t,"TFConvBertForMultipleChoice"),W1t.forEach(t),S_r=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),R_r=i(le),lT=n(le,"LI",{});var exe=s(lT);U1e=n(exe,"STRONG",{});var H1t=s(U1e);B_r=r(H1t,"distilbert"),H1t.forEach(t),P_r=r(exe," \u2014 "),tz=n(exe,"A",{href:!0});var U1t=s(tz);$_r=r(U1t,"TFDistilBertForMultipleChoice"),U1t.forEach(t),I_r=r(exe," (DistilBERT model)"),exe.forEach(t),q_r=i(le),iT=n(le,"LI",{});var oxe=s(iT);J1e=n(oxe,"STRONG",{});var J1t=s(J1e);N_r=r(J1t,"electra"),J1t.forEach(t),j_r=r(oxe," \u2014 "),az=n(oxe,"A",{href:!0});var Y1t=s(az);D_r=r(Y1t,"TFElectraForMultipleChoice"),Y1t.forEach(t),G_r=r(oxe," (ELECTRA model)"),oxe.forEach(t),O_r=i(le),dT=n(le,"LI",{});var rxe=s(dT);Y1e=n(rxe,"STRONG",{});var K1t=s(Y1e);V_r=r(K1t,"flaubert"),K1t.forEach(t),X_r=r(rxe," \u2014 "),nz=n(rxe,"A",{href:!0});var Z1t=s(nz);z_r=r(Z1t,"TFFlaubertForMultipleChoice"),Z1t.forEach(t),Q_r=r(rxe," (FlauBERT model)"),rxe.forEach(t),W_r=i(le),cT=n(le,"LI",{});var txe=s(cT);K1e=n(txe,"STRONG",{});var e7t=s(K1e);H_r=r(e7t,"funnel"),e7t.forEach(t),U_r=r(txe," \u2014 "),sz=n(txe,"A",{href:!0});var o7t=s(sz);J_r=r(o7t,"TFFunnelForMultipleChoice"),o7t.forEach(t),Y_r=r(txe," (Funnel Transformer model)"),txe.forEach(t),K_r=i(le),fT=n(le,"LI",{});var axe=s(fT);Z1e=n(axe,"STRONG",{});var r7t=s(Z1e);Z_r=r(r7t,"longformer"),r7t.forEach(t),eur=r(axe," \u2014 "),lz=n(axe,"A",{href:!0});var t7t=s(lz);our=r(t7t,"TFLongformerForMultipleChoice"),t7t.forEach(t),rur=r(axe," (Longformer model)"),axe.forEach(t),tur=i(le),mT=n(le,"LI",{});var nxe=s(mT);e7e=n(nxe,"STRONG",{});var a7t=s(e7e);aur=r(a7t,"mobilebert"),a7t.forEach(t),nur=r(nxe," \u2014 "),iz=n(nxe,"A",{href:!0});var n7t=s(iz);sur=r(n7t,"TFMobileBertForMultipleChoice"),n7t.forEach(t),lur=r(nxe," (MobileBERT model)"),nxe.forEach(t),iur=i(le),gT=n(le,"LI",{});var sxe=s(gT);o7e=n(sxe,"STRONG",{});var s7t=s(o7e);dur=r(s7t,"mpnet"),s7t.forEach(t),cur=r(sxe," \u2014 "),dz=n(sxe,"A",{href:!0});var l7t=s(dz);fur=r(l7t,"TFMPNetForMultipleChoice"),l7t.forEach(t),mur=r(sxe," (MPNet model)"),sxe.forEach(t),gur=i(le),hT=n(le,"LI",{});var lxe=s(hT);r7e=n(lxe,"STRONG",{});var i7t=s(r7e);hur=r(i7t,"rembert"),i7t.forEach(t),pur=r(lxe," \u2014 "),cz=n(lxe,"A",{href:!0});var d7t=s(cz);_ur=r(d7t,"TFRemBertForMultipleChoice"),d7t.forEach(t),uur=r(lxe," (RemBERT model)"),lxe.forEach(t),bur=i(le),pT=n(le,"LI",{});var ixe=s(pT);t7e=n(ixe,"STRONG",{});var c7t=s(t7e);Fur=r(c7t,"roberta"),c7t.forEach(t),vur=r(ixe," \u2014 "),fz=n(ixe,"A",{href:!0});var f7t=s(fz);Tur=r(f7t,"TFRobertaForMultipleChoice"),f7t.forEach(t),Mur=r(ixe," (RoBERTa model)"),ixe.forEach(t),Eur=i(le),_T=n(le,"LI",{});var dxe=s(_T);a7e=n(dxe,"STRONG",{});var m7t=s(a7e);Cur=r(m7t,"roformer"),m7t.forEach(t),wur=r(dxe," \u2014 "),mz=n(dxe,"A",{href:!0});var g7t=s(mz);Aur=r(g7t,"TFRoFormerForMultipleChoice"),g7t.forEach(t),yur=r(dxe," (RoFormer model)"),dxe.forEach(t),Lur=i(le),uT=n(le,"LI",{});var cxe=s(uT);n7e=n(cxe,"STRONG",{});var h7t=s(n7e);xur=r(h7t,"xlm"),h7t.forEach(t),kur=r(cxe," \u2014 "),gz=n(cxe,"A",{href:!0});var p7t=s(gz);Sur=r(p7t,"TFXLMForMultipleChoice"),p7t.forEach(t),Rur=r(cxe," (XLM model)"),cxe.forEach(t),Bur=i(le),bT=n(le,"LI",{});var fxe=s(bT);s7e=n(fxe,"STRONG",{});var _7t=s(s7e);Pur=r(_7t,"xlm-roberta"),_7t.forEach(t),$ur=r(fxe," \u2014 "),hz=n(fxe,"A",{href:!0});var u7t=s(hz);Iur=r(u7t,"TFXLMRobertaForMultipleChoice"),u7t.forEach(t),qur=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),Nur=i(le),FT=n(le,"LI",{});var mxe=s(FT);l7e=n(mxe,"STRONG",{});var b7t=s(l7e);jur=r(b7t,"xlnet"),b7t.forEach(t),Dur=r(mxe," \u2014 "),pz=n(mxe,"A",{href:!0});var F7t=s(pz);Gur=r(F7t,"TFXLNetForMultipleChoice"),F7t.forEach(t),Our=r(mxe," (XLNet model)"),mxe.forEach(t),le.forEach(t),Vur=i(Ma),i7e=n(Ma,"P",{});var v7t=s(i7e);Xur=r(v7t,"Examples:"),v7t.forEach(t),zur=i(Ma),m(ey.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),_Be=i(c),qc=n(c,"H2",{class:!0});var y$e=s(qc);vT=n(y$e,"A",{id:!0,class:!0,href:!0});var T7t=s(vT);d7e=n(T7t,"SPAN",{});var M7t=s(d7e);m(oy.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),Qur=i(y$e),c7e=n(y$e,"SPAN",{});var E7t=s(c7e);Wur=r(E7t,"TFAutoModelForTableQuestionAnswering"),E7t.forEach(t),y$e.forEach(t),uBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ry.$$.fragment,oi),Hur=i(oi),Nc=n(oi,"P",{});var iJ=s(Nc);Uur=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_z=n(iJ,"A",{href:!0});var C7t=s(_z);Jur=r(C7t,"from_pretrained()"),C7t.forEach(t),Yur=r(iJ," class method or the "),uz=n(iJ,"A",{href:!0});var w7t=s(uz);Kur=r(w7t,"from_config()"),w7t.forEach(t),Zur=r(iJ,` class
method.`),iJ.forEach(t),e1r=i(oi),ty=n(oi,"P",{});var L$e=s(ty);o1r=r(L$e,"This class cannot be instantiated directly using "),f7e=n(L$e,"CODE",{});var A7t=s(f7e);r1r=r(A7t,"__init__()"),A7t.forEach(t),t1r=r(L$e," (throws an error)."),L$e.forEach(t),a1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(ay.$$.fragment,ri),n1r=i(ri),m7e=n(ri,"P",{});var y7t=s(m7e);s1r=r(y7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y7t.forEach(t),l1r=i(ri),jc=n(ri,"P",{});var dJ=s(jc);i1r=r(dJ,`Note:
Loading a model from its configuration file does `),g7e=n(dJ,"STRONG",{});var L7t=s(g7e);d1r=r(L7t,"not"),L7t.forEach(t),c1r=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(dJ,"A",{href:!0});var x7t=s(bz);f1r=r(x7t,"from_pretrained()"),x7t.forEach(t),m1r=r(dJ," to load the model weights."),dJ.forEach(t),g1r=i(ri),h7e=n(ri,"P",{});var k7t=s(h7e);h1r=r(k7t,"Examples:"),k7t.forEach(t),p1r=i(ri),m(ny.$$.fragment,ri),ri.forEach(t),_1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(sy.$$.fragment,Ea),u1r=i(Ea),p7e=n(Ea,"P",{});var S7t=s(p7e);b1r=r(S7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S7t.forEach(t),F1r=i(Ea),Cn=n(Ea,"P",{});var oC=s(Cn);v1r=r(oC,"The model class to instantiate is selected based on the "),_7e=n(oC,"CODE",{});var R7t=s(_7e);T1r=r(R7t,"model_type"),R7t.forEach(t),M1r=r(oC,` property of the config object (either
passed as an argument or loaded from `),u7e=n(oC,"CODE",{});var B7t=s(u7e);E1r=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),C1r=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(oC,"CODE",{});var P7t=s(b7e);w1r=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),A1r=r(oC,":"),oC.forEach(t),y1r=i(Ea),F7e=n(Ea,"UL",{});var $7t=s(F7e);TT=n($7t,"LI",{});var gxe=s(TT);v7e=n(gxe,"STRONG",{});var I7t=s(v7e);L1r=r(I7t,"tapas"),I7t.forEach(t),x1r=r(gxe," \u2014 "),Fz=n(gxe,"A",{href:!0});var q7t=s(Fz);k1r=r(q7t,"TFTapasForQuestionAnswering"),q7t.forEach(t),S1r=r(gxe," (TAPAS model)"),gxe.forEach(t),$7t.forEach(t),R1r=i(Ea),T7e=n(Ea,"P",{});var N7t=s(T7e);B1r=r(N7t,"Examples:"),N7t.forEach(t),P1r=i(Ea),m(ly.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),bBe=i(c),Dc=n(c,"H2",{class:!0});var x$e=s(Dc);MT=n(x$e,"A",{id:!0,class:!0,href:!0});var j7t=s(MT);M7e=n(j7t,"SPAN",{});var D7t=s(M7e);m(iy.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),$1r=i(x$e),E7e=n(x$e,"SPAN",{});var G7t=s(E7e);I1r=r(G7t,"TFAutoModelForTokenClassification"),G7t.forEach(t),x$e.forEach(t),FBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(dy.$$.fragment,ti),q1r=i(ti),Gc=n(ti,"P",{});var cJ=s(Gc);N1r=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vz=n(cJ,"A",{href:!0});var O7t=s(vz);j1r=r(O7t,"from_pretrained()"),O7t.forEach(t),D1r=r(cJ," class method or the "),Tz=n(cJ,"A",{href:!0});var V7t=s(Tz);G1r=r(V7t,"from_config()"),V7t.forEach(t),O1r=r(cJ,` class
method.`),cJ.forEach(t),V1r=i(ti),cy=n(ti,"P",{});var k$e=s(cy);X1r=r(k$e,"This class cannot be instantiated directly using "),C7e=n(k$e,"CODE",{});var X7t=s(C7e);z1r=r(X7t,"__init__()"),X7t.forEach(t),Q1r=r(k$e," (throws an error)."),k$e.forEach(t),W1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(fy.$$.fragment,ai),H1r=i(ai),w7e=n(ai,"P",{});var z7t=s(w7e);U1r=r(z7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z7t.forEach(t),J1r=i(ai),Oc=n(ai,"P",{});var fJ=s(Oc);Y1r=r(fJ,`Note:
Loading a model from its configuration file does `),A7e=n(fJ,"STRONG",{});var Q7t=s(A7e);K1r=r(Q7t,"not"),Q7t.forEach(t),Z1r=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(fJ,"A",{href:!0});var W7t=s(Mz);e7r=r(W7t,"from_pretrained()"),W7t.forEach(t),o7r=r(fJ," to load the model weights."),fJ.forEach(t),r7r=i(ai),y7e=n(ai,"P",{});var H7t=s(y7e);t7r=r(H7t,"Examples:"),H7t.forEach(t),a7r=i(ai),m(my.$$.fragment,ai),ai.forEach(t),n7r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(gy.$$.fragment,Ca),s7r=i(Ca),L7e=n(Ca,"P",{});var U7t=s(L7e);l7r=r(U7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U7t.forEach(t),i7r=i(Ca),wn=n(Ca,"P",{});var rC=s(wn);d7r=r(rC,"The model class to instantiate is selected based on the "),x7e=n(rC,"CODE",{});var J7t=s(x7e);c7r=r(J7t,"model_type"),J7t.forEach(t),f7r=r(rC,` property of the config object (either
passed as an argument or loaded from `),k7e=n(rC,"CODE",{});var Y7t=s(k7e);m7r=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),g7r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(rC,"CODE",{});var K7t=s(S7e);h7r=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),p7r=r(rC,":"),rC.forEach(t),_7r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);ET=n(oe,"LI",{});var hxe=s(ET);R7e=n(hxe,"STRONG",{});var Z7t=s(R7e);u7r=r(Z7t,"albert"),Z7t.forEach(t),b7r=r(hxe," \u2014 "),Ez=n(hxe,"A",{href:!0});var ebt=s(Ez);F7r=r(ebt,"TFAlbertForTokenClassification"),ebt.forEach(t),v7r=r(hxe," (ALBERT model)"),hxe.forEach(t),T7r=i(oe),CT=n(oe,"LI",{});var pxe=s(CT);B7e=n(pxe,"STRONG",{});var obt=s(B7e);M7r=r(obt,"bert"),obt.forEach(t),E7r=r(pxe," \u2014 "),Cz=n(pxe,"A",{href:!0});var rbt=s(Cz);C7r=r(rbt,"TFBertForTokenClassification"),rbt.forEach(t),w7r=r(pxe," (BERT model)"),pxe.forEach(t),A7r=i(oe),wT=n(oe,"LI",{});var _xe=s(wT);P7e=n(_xe,"STRONG",{});var tbt=s(P7e);y7r=r(tbt,"camembert"),tbt.forEach(t),L7r=r(_xe," \u2014 "),wz=n(_xe,"A",{href:!0});var abt=s(wz);x7r=r(abt,"TFCamembertForTokenClassification"),abt.forEach(t),k7r=r(_xe," (CamemBERT model)"),_xe.forEach(t),S7r=i(oe),AT=n(oe,"LI",{});var uxe=s(AT);$7e=n(uxe,"STRONG",{});var nbt=s($7e);R7r=r(nbt,"convbert"),nbt.forEach(t),B7r=r(uxe," \u2014 "),Az=n(uxe,"A",{href:!0});var sbt=s(Az);P7r=r(sbt,"TFConvBertForTokenClassification"),sbt.forEach(t),$7r=r(uxe," (ConvBERT model)"),uxe.forEach(t),I7r=i(oe),yT=n(oe,"LI",{});var bxe=s(yT);I7e=n(bxe,"STRONG",{});var lbt=s(I7e);q7r=r(lbt,"deberta"),lbt.forEach(t),N7r=r(bxe," \u2014 "),yz=n(bxe,"A",{href:!0});var ibt=s(yz);j7r=r(ibt,"TFDebertaForTokenClassification"),ibt.forEach(t),D7r=r(bxe," (DeBERTa model)"),bxe.forEach(t),G7r=i(oe),LT=n(oe,"LI",{});var Fxe=s(LT);q7e=n(Fxe,"STRONG",{});var dbt=s(q7e);O7r=r(dbt,"deberta-v2"),dbt.forEach(t),V7r=r(Fxe," \u2014 "),Lz=n(Fxe,"A",{href:!0});var cbt=s(Lz);X7r=r(cbt,"TFDebertaV2ForTokenClassification"),cbt.forEach(t),z7r=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),Q7r=i(oe),xT=n(oe,"LI",{});var vxe=s(xT);N7e=n(vxe,"STRONG",{});var fbt=s(N7e);W7r=r(fbt,"distilbert"),fbt.forEach(t),H7r=r(vxe," \u2014 "),xz=n(vxe,"A",{href:!0});var mbt=s(xz);U7r=r(mbt,"TFDistilBertForTokenClassification"),mbt.forEach(t),J7r=r(vxe," (DistilBERT model)"),vxe.forEach(t),Y7r=i(oe),kT=n(oe,"LI",{});var Txe=s(kT);j7e=n(Txe,"STRONG",{});var gbt=s(j7e);K7r=r(gbt,"electra"),gbt.forEach(t),Z7r=r(Txe," \u2014 "),kz=n(Txe,"A",{href:!0});var hbt=s(kz);ebr=r(hbt,"TFElectraForTokenClassification"),hbt.forEach(t),obr=r(Txe," (ELECTRA model)"),Txe.forEach(t),rbr=i(oe),ST=n(oe,"LI",{});var Mxe=s(ST);D7e=n(Mxe,"STRONG",{});var pbt=s(D7e);tbr=r(pbt,"flaubert"),pbt.forEach(t),abr=r(Mxe," \u2014 "),Sz=n(Mxe,"A",{href:!0});var _bt=s(Sz);nbr=r(_bt,"TFFlaubertForTokenClassification"),_bt.forEach(t),sbr=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),lbr=i(oe),RT=n(oe,"LI",{});var Exe=s(RT);G7e=n(Exe,"STRONG",{});var ubt=s(G7e);ibr=r(ubt,"funnel"),ubt.forEach(t),dbr=r(Exe," \u2014 "),Rz=n(Exe,"A",{href:!0});var bbt=s(Rz);cbr=r(bbt,"TFFunnelForTokenClassification"),bbt.forEach(t),fbr=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),mbr=i(oe),BT=n(oe,"LI",{});var Cxe=s(BT);O7e=n(Cxe,"STRONG",{});var Fbt=s(O7e);gbr=r(Fbt,"layoutlm"),Fbt.forEach(t),hbr=r(Cxe," \u2014 "),Bz=n(Cxe,"A",{href:!0});var vbt=s(Bz);pbr=r(vbt,"TFLayoutLMForTokenClassification"),vbt.forEach(t),_br=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),ubr=i(oe),PT=n(oe,"LI",{});var wxe=s(PT);V7e=n(wxe,"STRONG",{});var Tbt=s(V7e);bbr=r(Tbt,"longformer"),Tbt.forEach(t),Fbr=r(wxe," \u2014 "),Pz=n(wxe,"A",{href:!0});var Mbt=s(Pz);vbr=r(Mbt,"TFLongformerForTokenClassification"),Mbt.forEach(t),Tbr=r(wxe," (Longformer model)"),wxe.forEach(t),Mbr=i(oe),$T=n(oe,"LI",{});var Axe=s($T);X7e=n(Axe,"STRONG",{});var Ebt=s(X7e);Ebr=r(Ebt,"mobilebert"),Ebt.forEach(t),Cbr=r(Axe," \u2014 "),$z=n(Axe,"A",{href:!0});var Cbt=s($z);wbr=r(Cbt,"TFMobileBertForTokenClassification"),Cbt.forEach(t),Abr=r(Axe," (MobileBERT model)"),Axe.forEach(t),ybr=i(oe),IT=n(oe,"LI",{});var yxe=s(IT);z7e=n(yxe,"STRONG",{});var wbt=s(z7e);Lbr=r(wbt,"mpnet"),wbt.forEach(t),xbr=r(yxe," \u2014 "),Iz=n(yxe,"A",{href:!0});var Abt=s(Iz);kbr=r(Abt,"TFMPNetForTokenClassification"),Abt.forEach(t),Sbr=r(yxe," (MPNet model)"),yxe.forEach(t),Rbr=i(oe),qT=n(oe,"LI",{});var Lxe=s(qT);Q7e=n(Lxe,"STRONG",{});var ybt=s(Q7e);Bbr=r(ybt,"rembert"),ybt.forEach(t),Pbr=r(Lxe," \u2014 "),qz=n(Lxe,"A",{href:!0});var Lbt=s(qz);$br=r(Lbt,"TFRemBertForTokenClassification"),Lbt.forEach(t),Ibr=r(Lxe," (RemBERT model)"),Lxe.forEach(t),qbr=i(oe),NT=n(oe,"LI",{});var xxe=s(NT);W7e=n(xxe,"STRONG",{});var xbt=s(W7e);Nbr=r(xbt,"roberta"),xbt.forEach(t),jbr=r(xxe," \u2014 "),Nz=n(xxe,"A",{href:!0});var kbt=s(Nz);Dbr=r(kbt,"TFRobertaForTokenClassification"),kbt.forEach(t),Gbr=r(xxe," (RoBERTa model)"),xxe.forEach(t),Obr=i(oe),jT=n(oe,"LI",{});var kxe=s(jT);H7e=n(kxe,"STRONG",{});var Sbt=s(H7e);Vbr=r(Sbt,"roformer"),Sbt.forEach(t),Xbr=r(kxe," \u2014 "),jz=n(kxe,"A",{href:!0});var Rbt=s(jz);zbr=r(Rbt,"TFRoFormerForTokenClassification"),Rbt.forEach(t),Qbr=r(kxe," (RoFormer model)"),kxe.forEach(t),Wbr=i(oe),DT=n(oe,"LI",{});var Sxe=s(DT);U7e=n(Sxe,"STRONG",{});var Bbt=s(U7e);Hbr=r(Bbt,"xlm"),Bbt.forEach(t),Ubr=r(Sxe," \u2014 "),Dz=n(Sxe,"A",{href:!0});var Pbt=s(Dz);Jbr=r(Pbt,"TFXLMForTokenClassification"),Pbt.forEach(t),Ybr=r(Sxe," (XLM model)"),Sxe.forEach(t),Kbr=i(oe),GT=n(oe,"LI",{});var Rxe=s(GT);J7e=n(Rxe,"STRONG",{});var $bt=s(J7e);Zbr=r($bt,"xlm-roberta"),$bt.forEach(t),e5r=r(Rxe," \u2014 "),Gz=n(Rxe,"A",{href:!0});var Ibt=s(Gz);o5r=r(Ibt,"TFXLMRobertaForTokenClassification"),Ibt.forEach(t),r5r=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),t5r=i(oe),OT=n(oe,"LI",{});var Bxe=s(OT);Y7e=n(Bxe,"STRONG",{});var qbt=s(Y7e);a5r=r(qbt,"xlnet"),qbt.forEach(t),n5r=r(Bxe," \u2014 "),Oz=n(Bxe,"A",{href:!0});var Nbt=s(Oz);s5r=r(Nbt,"TFXLNetForTokenClassification"),Nbt.forEach(t),l5r=r(Bxe," (XLNet model)"),Bxe.forEach(t),oe.forEach(t),i5r=i(Ca),K7e=n(Ca,"P",{});var jbt=s(K7e);d5r=r(jbt,"Examples:"),jbt.forEach(t),c5r=i(Ca),m(hy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),vBe=i(c),Vc=n(c,"H2",{class:!0});var S$e=s(Vc);VT=n(S$e,"A",{id:!0,class:!0,href:!0});var Dbt=s(VT);Z7e=n(Dbt,"SPAN",{});var Gbt=s(Z7e);m(py.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),f5r=i(S$e),ebe=n(S$e,"SPAN",{});var Obt=s(ebe);m5r=r(Obt,"TFAutoModelForQuestionAnswering"),Obt.forEach(t),S$e.forEach(t),TBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(_y.$$.fragment,ni),g5r=i(ni),Xc=n(ni,"P",{});var mJ=s(Xc);h5r=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vz=n(mJ,"A",{href:!0});var Vbt=s(Vz);p5r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),_5r=r(mJ," class method or the "),Xz=n(mJ,"A",{href:!0});var Xbt=s(Xz);u5r=r(Xbt,"from_config()"),Xbt.forEach(t),b5r=r(mJ,` class
method.`),mJ.forEach(t),F5r=i(ni),uy=n(ni,"P",{});var R$e=s(uy);v5r=r(R$e,"This class cannot be instantiated directly using "),obe=n(R$e,"CODE",{});var zbt=s(obe);T5r=r(zbt,"__init__()"),zbt.forEach(t),M5r=r(R$e," (throws an error)."),R$e.forEach(t),E5r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(by.$$.fragment,si),C5r=i(si),rbe=n(si,"P",{});var Qbt=s(rbe);w5r=r(Qbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qbt.forEach(t),A5r=i(si),zc=n(si,"P",{});var gJ=s(zc);y5r=r(gJ,`Note:
Loading a model from its configuration file does `),tbe=n(gJ,"STRONG",{});var Wbt=s(tbe);L5r=r(Wbt,"not"),Wbt.forEach(t),x5r=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(gJ,"A",{href:!0});var Hbt=s(zz);k5r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),S5r=r(gJ," to load the model weights."),gJ.forEach(t),R5r=i(si),abe=n(si,"P",{});var Ubt=s(abe);B5r=r(Ubt,"Examples:"),Ubt.forEach(t),P5r=i(si),m(Fy.$$.fragment,si),si.forEach(t),$5r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(vy.$$.fragment,wa),I5r=i(wa),nbe=n(wa,"P",{});var Jbt=s(nbe);q5r=r(Jbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jbt.forEach(t),N5r=i(wa),An=n(wa,"P",{});var tC=s(An);j5r=r(tC,"The model class to instantiate is selected based on the "),sbe=n(tC,"CODE",{});var Ybt=s(sbe);D5r=r(Ybt,"model_type"),Ybt.forEach(t),G5r=r(tC,` property of the config object (either
passed as an argument or loaded from `),lbe=n(tC,"CODE",{});var Kbt=s(lbe);O5r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),V5r=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(tC,"CODE",{});var Zbt=s(ibe);X5r=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),z5r=r(tC,":"),tC.forEach(t),Q5r=i(wa),K=n(wa,"UL",{});var re=s(K);XT=n(re,"LI",{});var Pxe=s(XT);dbe=n(Pxe,"STRONG",{});var e5t=s(dbe);W5r=r(e5t,"albert"),e5t.forEach(t),H5r=r(Pxe," \u2014 "),Qz=n(Pxe,"A",{href:!0});var o5t=s(Qz);U5r=r(o5t,"TFAlbertForQuestionAnswering"),o5t.forEach(t),J5r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),Y5r=i(re),zT=n(re,"LI",{});var $xe=s(zT);cbe=n($xe,"STRONG",{});var r5t=s(cbe);K5r=r(r5t,"bert"),r5t.forEach(t),Z5r=r($xe," \u2014 "),Wz=n($xe,"A",{href:!0});var t5t=s(Wz);e3r=r(t5t,"TFBertForQuestionAnswering"),t5t.forEach(t),o3r=r($xe," (BERT model)"),$xe.forEach(t),r3r=i(re),QT=n(re,"LI",{});var Ixe=s(QT);fbe=n(Ixe,"STRONG",{});var a5t=s(fbe);t3r=r(a5t,"camembert"),a5t.forEach(t),a3r=r(Ixe," \u2014 "),Hz=n(Ixe,"A",{href:!0});var n5t=s(Hz);n3r=r(n5t,"TFCamembertForQuestionAnswering"),n5t.forEach(t),s3r=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),l3r=i(re),WT=n(re,"LI",{});var qxe=s(WT);mbe=n(qxe,"STRONG",{});var s5t=s(mbe);i3r=r(s5t,"convbert"),s5t.forEach(t),d3r=r(qxe," \u2014 "),Uz=n(qxe,"A",{href:!0});var l5t=s(Uz);c3r=r(l5t,"TFConvBertForQuestionAnswering"),l5t.forEach(t),f3r=r(qxe," (ConvBERT model)"),qxe.forEach(t),m3r=i(re),HT=n(re,"LI",{});var Nxe=s(HT);gbe=n(Nxe,"STRONG",{});var i5t=s(gbe);g3r=r(i5t,"deberta"),i5t.forEach(t),h3r=r(Nxe," \u2014 "),Jz=n(Nxe,"A",{href:!0});var d5t=s(Jz);p3r=r(d5t,"TFDebertaForQuestionAnswering"),d5t.forEach(t),_3r=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),u3r=i(re),UT=n(re,"LI",{});var jxe=s(UT);hbe=n(jxe,"STRONG",{});var c5t=s(hbe);b3r=r(c5t,"deberta-v2"),c5t.forEach(t),F3r=r(jxe," \u2014 "),Yz=n(jxe,"A",{href:!0});var f5t=s(Yz);v3r=r(f5t,"TFDebertaV2ForQuestionAnswering"),f5t.forEach(t),T3r=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),M3r=i(re),JT=n(re,"LI",{});var Dxe=s(JT);pbe=n(Dxe,"STRONG",{});var m5t=s(pbe);E3r=r(m5t,"distilbert"),m5t.forEach(t),C3r=r(Dxe," \u2014 "),Kz=n(Dxe,"A",{href:!0});var g5t=s(Kz);w3r=r(g5t,"TFDistilBertForQuestionAnswering"),g5t.forEach(t),A3r=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),y3r=i(re),YT=n(re,"LI",{});var Gxe=s(YT);_be=n(Gxe,"STRONG",{});var h5t=s(_be);L3r=r(h5t,"electra"),h5t.forEach(t),x3r=r(Gxe," \u2014 "),Zz=n(Gxe,"A",{href:!0});var p5t=s(Zz);k3r=r(p5t,"TFElectraForQuestionAnswering"),p5t.forEach(t),S3r=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),R3r=i(re),KT=n(re,"LI",{});var Oxe=s(KT);ube=n(Oxe,"STRONG",{});var _5t=s(ube);B3r=r(_5t,"flaubert"),_5t.forEach(t),P3r=r(Oxe," \u2014 "),eQ=n(Oxe,"A",{href:!0});var u5t=s(eQ);$3r=r(u5t,"TFFlaubertForQuestionAnsweringSimple"),u5t.forEach(t),I3r=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),q3r=i(re),ZT=n(re,"LI",{});var Vxe=s(ZT);bbe=n(Vxe,"STRONG",{});var b5t=s(bbe);N3r=r(b5t,"funnel"),b5t.forEach(t),j3r=r(Vxe," \u2014 "),oQ=n(Vxe,"A",{href:!0});var F5t=s(oQ);D3r=r(F5t,"TFFunnelForQuestionAnswering"),F5t.forEach(t),G3r=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),O3r=i(re),eM=n(re,"LI",{});var Xxe=s(eM);Fbe=n(Xxe,"STRONG",{});var v5t=s(Fbe);V3r=r(v5t,"gptj"),v5t.forEach(t),X3r=r(Xxe," \u2014 "),rQ=n(Xxe,"A",{href:!0});var T5t=s(rQ);z3r=r(T5t,"TFGPTJForQuestionAnswering"),T5t.forEach(t),Q3r=r(Xxe," (GPT-J model)"),Xxe.forEach(t),W3r=i(re),oM=n(re,"LI",{});var zxe=s(oM);vbe=n(zxe,"STRONG",{});var M5t=s(vbe);H3r=r(M5t,"longformer"),M5t.forEach(t),U3r=r(zxe," \u2014 "),tQ=n(zxe,"A",{href:!0});var E5t=s(tQ);J3r=r(E5t,"TFLongformerForQuestionAnswering"),E5t.forEach(t),Y3r=r(zxe," (Longformer model)"),zxe.forEach(t),K3r=i(re),rM=n(re,"LI",{});var Qxe=s(rM);Tbe=n(Qxe,"STRONG",{});var C5t=s(Tbe);Z3r=r(C5t,"mobilebert"),C5t.forEach(t),e2r=r(Qxe," \u2014 "),aQ=n(Qxe,"A",{href:!0});var w5t=s(aQ);o2r=r(w5t,"TFMobileBertForQuestionAnswering"),w5t.forEach(t),r2r=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),t2r=i(re),tM=n(re,"LI",{});var Wxe=s(tM);Mbe=n(Wxe,"STRONG",{});var A5t=s(Mbe);a2r=r(A5t,"mpnet"),A5t.forEach(t),n2r=r(Wxe," \u2014 "),nQ=n(Wxe,"A",{href:!0});var y5t=s(nQ);s2r=r(y5t,"TFMPNetForQuestionAnswering"),y5t.forEach(t),l2r=r(Wxe," (MPNet model)"),Wxe.forEach(t),i2r=i(re),aM=n(re,"LI",{});var Hxe=s(aM);Ebe=n(Hxe,"STRONG",{});var L5t=s(Ebe);d2r=r(L5t,"rembert"),L5t.forEach(t),c2r=r(Hxe," \u2014 "),sQ=n(Hxe,"A",{href:!0});var x5t=s(sQ);f2r=r(x5t,"TFRemBertForQuestionAnswering"),x5t.forEach(t),m2r=r(Hxe," (RemBERT model)"),Hxe.forEach(t),g2r=i(re),nM=n(re,"LI",{});var Uxe=s(nM);Cbe=n(Uxe,"STRONG",{});var k5t=s(Cbe);h2r=r(k5t,"roberta"),k5t.forEach(t),p2r=r(Uxe," \u2014 "),lQ=n(Uxe,"A",{href:!0});var S5t=s(lQ);_2r=r(S5t,"TFRobertaForQuestionAnswering"),S5t.forEach(t),u2r=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),b2r=i(re),sM=n(re,"LI",{});var Jxe=s(sM);wbe=n(Jxe,"STRONG",{});var R5t=s(wbe);F2r=r(R5t,"roformer"),R5t.forEach(t),v2r=r(Jxe," \u2014 "),iQ=n(Jxe,"A",{href:!0});var B5t=s(iQ);T2r=r(B5t,"TFRoFormerForQuestionAnswering"),B5t.forEach(t),M2r=r(Jxe," (RoFormer model)"),Jxe.forEach(t),E2r=i(re),lM=n(re,"LI",{});var Yxe=s(lM);Abe=n(Yxe,"STRONG",{});var P5t=s(Abe);C2r=r(P5t,"xlm"),P5t.forEach(t),w2r=r(Yxe," \u2014 "),dQ=n(Yxe,"A",{href:!0});var $5t=s(dQ);A2r=r($5t,"TFXLMForQuestionAnsweringSimple"),$5t.forEach(t),y2r=r(Yxe," (XLM model)"),Yxe.forEach(t),L2r=i(re),iM=n(re,"LI",{});var Kxe=s(iM);ybe=n(Kxe,"STRONG",{});var I5t=s(ybe);x2r=r(I5t,"xlm-roberta"),I5t.forEach(t),k2r=r(Kxe," \u2014 "),cQ=n(Kxe,"A",{href:!0});var q5t=s(cQ);S2r=r(q5t,"TFXLMRobertaForQuestionAnswering"),q5t.forEach(t),R2r=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),B2r=i(re),dM=n(re,"LI",{});var Zxe=s(dM);Lbe=n(Zxe,"STRONG",{});var N5t=s(Lbe);P2r=r(N5t,"xlnet"),N5t.forEach(t),$2r=r(Zxe," \u2014 "),fQ=n(Zxe,"A",{href:!0});var j5t=s(fQ);I2r=r(j5t,"TFXLNetForQuestionAnsweringSimple"),j5t.forEach(t),q2r=r(Zxe," (XLNet model)"),Zxe.forEach(t),re.forEach(t),N2r=i(wa),xbe=n(wa,"P",{});var D5t=s(xbe);j2r=r(D5t,"Examples:"),D5t.forEach(t),D2r=i(wa),m(Ty.$$.fragment,wa),wa.forEach(t),ni.forEach(t),MBe=i(c),Qc=n(c,"H2",{class:!0});var B$e=s(Qc);cM=n(B$e,"A",{id:!0,class:!0,href:!0});var G5t=s(cM);kbe=n(G5t,"SPAN",{});var O5t=s(kbe);m(My.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),G2r=i(B$e),Sbe=n(B$e,"SPAN",{});var V5t=s(Sbe);O2r=r(V5t,"TFAutoModelForVision2Seq"),V5t.forEach(t),B$e.forEach(t),EBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Ey.$$.fragment,li),V2r=i(li),Wc=n(li,"P",{});var hJ=s(Wc);X2r=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mQ=n(hJ,"A",{href:!0});var X5t=s(mQ);z2r=r(X5t,"from_pretrained()"),X5t.forEach(t),Q2r=r(hJ," class method or the "),gQ=n(hJ,"A",{href:!0});var z5t=s(gQ);W2r=r(z5t,"from_config()"),z5t.forEach(t),H2r=r(hJ,` class
method.`),hJ.forEach(t),U2r=i(li),Cy=n(li,"P",{});var P$e=s(Cy);J2r=r(P$e,"This class cannot be instantiated directly using "),Rbe=n(P$e,"CODE",{});var Q5t=s(Rbe);Y2r=r(Q5t,"__init__()"),Q5t.forEach(t),K2r=r(P$e," (throws an error)."),P$e.forEach(t),Z2r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(wy.$$.fragment,ii),eFr=i(ii),Bbe=n(ii,"P",{});var W5t=s(Bbe);oFr=r(W5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W5t.forEach(t),rFr=i(ii),Hc=n(ii,"P",{});var pJ=s(Hc);tFr=r(pJ,`Note:
Loading a model from its configuration file does `),Pbe=n(pJ,"STRONG",{});var H5t=s(Pbe);aFr=r(H5t,"not"),H5t.forEach(t),nFr=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(pJ,"A",{href:!0});var U5t=s(hQ);sFr=r(U5t,"from_pretrained()"),U5t.forEach(t),lFr=r(pJ," to load the model weights."),pJ.forEach(t),iFr=i(ii),$be=n(ii,"P",{});var J5t=s($be);dFr=r(J5t,"Examples:"),J5t.forEach(t),cFr=i(ii),m(Ay.$$.fragment,ii),ii.forEach(t),fFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(yy.$$.fragment,Aa),mFr=i(Aa),Ibe=n(Aa,"P",{});var Y5t=s(Ibe);gFr=r(Y5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y5t.forEach(t),hFr=i(Aa),yn=n(Aa,"P",{});var aC=s(yn);pFr=r(aC,"The model class to instantiate is selected based on the "),qbe=n(aC,"CODE",{});var K5t=s(qbe);_Fr=r(K5t,"model_type"),K5t.forEach(t),uFr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(aC,"CODE",{});var Z5t=s(Nbe);bFr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),FFr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(aC,"CODE",{});var e3t=s(jbe);vFr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),TFr=r(aC,":"),aC.forEach(t),MFr=i(Aa),Dbe=n(Aa,"UL",{});var o3t=s(Dbe);fM=n(o3t,"LI",{});var eke=s(fM);Gbe=n(eke,"STRONG",{});var r3t=s(Gbe);EFr=r(r3t,"vision-encoder-decoder"),r3t.forEach(t),CFr=r(eke," \u2014 "),pQ=n(eke,"A",{href:!0});var t3t=s(pQ);wFr=r(t3t,"TFVisionEncoderDecoderModel"),t3t.forEach(t),AFr=r(eke," (Vision Encoder decoder model)"),eke.forEach(t),o3t.forEach(t),yFr=i(Aa),Obe=n(Aa,"P",{});var a3t=s(Obe);LFr=r(a3t,"Examples:"),a3t.forEach(t),xFr=i(Aa),m(Ly.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),CBe=i(c),Uc=n(c,"H2",{class:!0});var $$e=s(Uc);mM=n($$e,"A",{id:!0,class:!0,href:!0});var n3t=s(mM);Vbe=n(n3t,"SPAN",{});var s3t=s(Vbe);m(xy.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),kFr=i($$e),Xbe=n($$e,"SPAN",{});var l3t=s(Xbe);SFr=r(l3t,"TFAutoModelForSpeechSeq2Seq"),l3t.forEach(t),$$e.forEach(t),wBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(ky.$$.fragment,di),RFr=i(di),Jc=n(di,"P",{});var _J=s(Jc);BFr=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_Q=n(_J,"A",{href:!0});var i3t=s(_Q);PFr=r(i3t,"from_pretrained()"),i3t.forEach(t),$Fr=r(_J," class method or the "),uQ=n(_J,"A",{href:!0});var d3t=s(uQ);IFr=r(d3t,"from_config()"),d3t.forEach(t),qFr=r(_J,` class
method.`),_J.forEach(t),NFr=i(di),Sy=n(di,"P",{});var I$e=s(Sy);jFr=r(I$e,"This class cannot be instantiated directly using "),zbe=n(I$e,"CODE",{});var c3t=s(zbe);DFr=r(c3t,"__init__()"),c3t.forEach(t),GFr=r(I$e," (throws an error)."),I$e.forEach(t),OFr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(Ry.$$.fragment,ci),VFr=i(ci),Qbe=n(ci,"P",{});var f3t=s(Qbe);XFr=r(f3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f3t.forEach(t),zFr=i(ci),Yc=n(ci,"P",{});var uJ=s(Yc);QFr=r(uJ,`Note:
Loading a model from its configuration file does `),Wbe=n(uJ,"STRONG",{});var m3t=s(Wbe);WFr=r(m3t,"not"),m3t.forEach(t),HFr=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(uJ,"A",{href:!0});var g3t=s(bQ);UFr=r(g3t,"from_pretrained()"),g3t.forEach(t),JFr=r(uJ," to load the model weights."),uJ.forEach(t),YFr=i(ci),Hbe=n(ci,"P",{});var h3t=s(Hbe);KFr=r(h3t,"Examples:"),h3t.forEach(t),ZFr=i(ci),m(By.$$.fragment,ci),ci.forEach(t),evr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Py.$$.fragment,ya),ovr=i(ya),Ube=n(ya,"P",{});var p3t=s(Ube);rvr=r(p3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),p3t.forEach(t),tvr=i(ya),Ln=n(ya,"P",{});var nC=s(Ln);avr=r(nC,"The model class to instantiate is selected based on the "),Jbe=n(nC,"CODE",{});var _3t=s(Jbe);nvr=r(_3t,"model_type"),_3t.forEach(t),svr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(nC,"CODE",{});var u3t=s(Ybe);lvr=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),ivr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(nC,"CODE",{});var b3t=s(Kbe);dvr=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),cvr=r(nC,":"),nC.forEach(t),fvr=i(ya),Zbe=n(ya,"UL",{});var F3t=s(Zbe);gM=n(F3t,"LI",{});var oke=s(gM);e5e=n(oke,"STRONG",{});var v3t=s(e5e);mvr=r(v3t,"speech_to_text"),v3t.forEach(t),gvr=r(oke," \u2014 "),FQ=n(oke,"A",{href:!0});var T3t=s(FQ);hvr=r(T3t,"TFSpeech2TextForConditionalGeneration"),T3t.forEach(t),pvr=r(oke," (Speech2Text model)"),oke.forEach(t),F3t.forEach(t),_vr=i(ya),o5e=n(ya,"P",{});var M3t=s(o5e);uvr=r(M3t,"Examples:"),M3t.forEach(t),bvr=i(ya),m($y.$$.fragment,ya),ya.forEach(t),di.forEach(t),ABe=i(c),Kc=n(c,"H2",{class:!0});var q$e=s(Kc);hM=n(q$e,"A",{id:!0,class:!0,href:!0});var E3t=s(hM);r5e=n(E3t,"SPAN",{});var C3t=s(r5e);m(Iy.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),Fvr=i(q$e),t5e=n(q$e,"SPAN",{});var w3t=s(t5e);vvr=r(w3t,"FlaxAutoModel"),w3t.forEach(t),q$e.forEach(t),yBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(qy.$$.fragment,fi),Tvr=i(fi),Zc=n(fi,"P",{});var bJ=s(Zc);Mvr=r(bJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vQ=n(bJ,"A",{href:!0});var A3t=s(vQ);Evr=r(A3t,"from_pretrained()"),A3t.forEach(t),Cvr=r(bJ," class method or the "),TQ=n(bJ,"A",{href:!0});var y3t=s(TQ);wvr=r(y3t,"from_config()"),y3t.forEach(t),Avr=r(bJ,` class
method.`),bJ.forEach(t),yvr=i(fi),Ny=n(fi,"P",{});var N$e=s(Ny);Lvr=r(N$e,"This class cannot be instantiated directly using "),a5e=n(N$e,"CODE",{});var L3t=s(a5e);xvr=r(L3t,"__init__()"),L3t.forEach(t),kvr=r(N$e," (throws an error)."),N$e.forEach(t),Svr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(jy.$$.fragment,mi),Rvr=i(mi),n5e=n(mi,"P",{});var x3t=s(n5e);Bvr=r(x3t,"Instantiates one of the base model classes of the library from a configuration."),x3t.forEach(t),Pvr=i(mi),ef=n(mi,"P",{});var FJ=s(ef);$vr=r(FJ,`Note:
Loading a model from its configuration file does `),s5e=n(FJ,"STRONG",{});var k3t=s(s5e);Ivr=r(k3t,"not"),k3t.forEach(t),qvr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(FJ,"A",{href:!0});var S3t=s(MQ);Nvr=r(S3t,"from_pretrained()"),S3t.forEach(t),jvr=r(FJ," to load the model weights."),FJ.forEach(t),Dvr=i(mi),l5e=n(mi,"P",{});var R3t=s(l5e);Gvr=r(R3t,"Examples:"),R3t.forEach(t),Ovr=i(mi),m(Dy.$$.fragment,mi),mi.forEach(t),Vvr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Gy.$$.fragment,La),Xvr=i(La),i5e=n(La,"P",{});var B3t=s(i5e);zvr=r(B3t,"Instantiate one of the base model classes of the library from a pretrained model."),B3t.forEach(t),Qvr=i(La),xn=n(La,"P",{});var sC=s(xn);Wvr=r(sC,"The model class to instantiate is selected based on the "),d5e=n(sC,"CODE",{});var P3t=s(d5e);Hvr=r(P3t,"model_type"),P3t.forEach(t),Uvr=r(sC,` property of the config object (either
passed as an argument or loaded from `),c5e=n(sC,"CODE",{});var $3t=s(c5e);Jvr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),Yvr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(sC,"CODE",{});var I3t=s(f5e);Kvr=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),Zvr=r(sC,":"),sC.forEach(t),eTr=i(La),z=n(La,"UL",{});var W=s(z);pM=n(W,"LI",{});var rke=s(pM);m5e=n(rke,"STRONG",{});var q3t=s(m5e);oTr=r(q3t,"albert"),q3t.forEach(t),rTr=r(rke," \u2014 "),EQ=n(rke,"A",{href:!0});var N3t=s(EQ);tTr=r(N3t,"FlaxAlbertModel"),N3t.forEach(t),aTr=r(rke," (ALBERT model)"),rke.forEach(t),nTr=i(W),_M=n(W,"LI",{});var tke=s(_M);g5e=n(tke,"STRONG",{});var j3t=s(g5e);sTr=r(j3t,"bart"),j3t.forEach(t),lTr=r(tke," \u2014 "),CQ=n(tke,"A",{href:!0});var D3t=s(CQ);iTr=r(D3t,"FlaxBartModel"),D3t.forEach(t),dTr=r(tke," (BART model)"),tke.forEach(t),cTr=i(W),uM=n(W,"LI",{});var ake=s(uM);h5e=n(ake,"STRONG",{});var G3t=s(h5e);fTr=r(G3t,"beit"),G3t.forEach(t),mTr=r(ake," \u2014 "),wQ=n(ake,"A",{href:!0});var O3t=s(wQ);gTr=r(O3t,"FlaxBeitModel"),O3t.forEach(t),hTr=r(ake," (BEiT model)"),ake.forEach(t),pTr=i(W),bM=n(W,"LI",{});var nke=s(bM);p5e=n(nke,"STRONG",{});var V3t=s(p5e);_Tr=r(V3t,"bert"),V3t.forEach(t),uTr=r(nke," \u2014 "),AQ=n(nke,"A",{href:!0});var X3t=s(AQ);bTr=r(X3t,"FlaxBertModel"),X3t.forEach(t),FTr=r(nke," (BERT model)"),nke.forEach(t),vTr=i(W),FM=n(W,"LI",{});var ske=s(FM);_5e=n(ske,"STRONG",{});var z3t=s(_5e);TTr=r(z3t,"big_bird"),z3t.forEach(t),MTr=r(ske," \u2014 "),yQ=n(ske,"A",{href:!0});var Q3t=s(yQ);ETr=r(Q3t,"FlaxBigBirdModel"),Q3t.forEach(t),CTr=r(ske," (BigBird model)"),ske.forEach(t),wTr=i(W),vM=n(W,"LI",{});var lke=s(vM);u5e=n(lke,"STRONG",{});var W3t=s(u5e);ATr=r(W3t,"blenderbot"),W3t.forEach(t),yTr=r(lke," \u2014 "),LQ=n(lke,"A",{href:!0});var H3t=s(LQ);LTr=r(H3t,"FlaxBlenderbotModel"),H3t.forEach(t),xTr=r(lke," (Blenderbot model)"),lke.forEach(t),kTr=i(W),TM=n(W,"LI",{});var ike=s(TM);b5e=n(ike,"STRONG",{});var U3t=s(b5e);STr=r(U3t,"blenderbot-small"),U3t.forEach(t),RTr=r(ike," \u2014 "),xQ=n(ike,"A",{href:!0});var J3t=s(xQ);BTr=r(J3t,"FlaxBlenderbotSmallModel"),J3t.forEach(t),PTr=r(ike," (BlenderbotSmall model)"),ike.forEach(t),$Tr=i(W),MM=n(W,"LI",{});var dke=s(MM);F5e=n(dke,"STRONG",{});var Y3t=s(F5e);ITr=r(Y3t,"clip"),Y3t.forEach(t),qTr=r(dke," \u2014 "),kQ=n(dke,"A",{href:!0});var K3t=s(kQ);NTr=r(K3t,"FlaxCLIPModel"),K3t.forEach(t),jTr=r(dke," (CLIP model)"),dke.forEach(t),DTr=i(W),EM=n(W,"LI",{});var cke=s(EM);v5e=n(cke,"STRONG",{});var Z3t=s(v5e);GTr=r(Z3t,"distilbert"),Z3t.forEach(t),OTr=r(cke," \u2014 "),SQ=n(cke,"A",{href:!0});var e2t=s(SQ);VTr=r(e2t,"FlaxDistilBertModel"),e2t.forEach(t),XTr=r(cke," (DistilBERT model)"),cke.forEach(t),zTr=i(W),CM=n(W,"LI",{});var fke=s(CM);T5e=n(fke,"STRONG",{});var o2t=s(T5e);QTr=r(o2t,"electra"),o2t.forEach(t),WTr=r(fke," \u2014 "),RQ=n(fke,"A",{href:!0});var r2t=s(RQ);HTr=r(r2t,"FlaxElectraModel"),r2t.forEach(t),UTr=r(fke," (ELECTRA model)"),fke.forEach(t),JTr=i(W),wM=n(W,"LI",{});var mke=s(wM);M5e=n(mke,"STRONG",{});var t2t=s(M5e);YTr=r(t2t,"gpt2"),t2t.forEach(t),KTr=r(mke," \u2014 "),BQ=n(mke,"A",{href:!0});var a2t=s(BQ);ZTr=r(a2t,"FlaxGPT2Model"),a2t.forEach(t),eMr=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),oMr=i(W),AM=n(W,"LI",{});var gke=s(AM);E5e=n(gke,"STRONG",{});var n2t=s(E5e);rMr=r(n2t,"gpt_neo"),n2t.forEach(t),tMr=r(gke," \u2014 "),PQ=n(gke,"A",{href:!0});var s2t=s(PQ);aMr=r(s2t,"FlaxGPTNeoModel"),s2t.forEach(t),nMr=r(gke," (GPT Neo model)"),gke.forEach(t),sMr=i(W),yM=n(W,"LI",{});var hke=s(yM);C5e=n(hke,"STRONG",{});var l2t=s(C5e);lMr=r(l2t,"gptj"),l2t.forEach(t),iMr=r(hke," \u2014 "),$Q=n(hke,"A",{href:!0});var i2t=s($Q);dMr=r(i2t,"FlaxGPTJModel"),i2t.forEach(t),cMr=r(hke," (GPT-J model)"),hke.forEach(t),fMr=i(W),LM=n(W,"LI",{});var pke=s(LM);w5e=n(pke,"STRONG",{});var d2t=s(w5e);mMr=r(d2t,"marian"),d2t.forEach(t),gMr=r(pke," \u2014 "),IQ=n(pke,"A",{href:!0});var c2t=s(IQ);hMr=r(c2t,"FlaxMarianModel"),c2t.forEach(t),pMr=r(pke," (Marian model)"),pke.forEach(t),_Mr=i(W),xM=n(W,"LI",{});var _ke=s(xM);A5e=n(_ke,"STRONG",{});var f2t=s(A5e);uMr=r(f2t,"mbart"),f2t.forEach(t),bMr=r(_ke," \u2014 "),qQ=n(_ke,"A",{href:!0});var m2t=s(qQ);FMr=r(m2t,"FlaxMBartModel"),m2t.forEach(t),vMr=r(_ke," (mBART model)"),_ke.forEach(t),TMr=i(W),kM=n(W,"LI",{});var uke=s(kM);y5e=n(uke,"STRONG",{});var g2t=s(y5e);MMr=r(g2t,"mt5"),g2t.forEach(t),EMr=r(uke," \u2014 "),NQ=n(uke,"A",{href:!0});var h2t=s(NQ);CMr=r(h2t,"FlaxMT5Model"),h2t.forEach(t),wMr=r(uke," (mT5 model)"),uke.forEach(t),AMr=i(W),SM=n(W,"LI",{});var bke=s(SM);L5e=n(bke,"STRONG",{});var p2t=s(L5e);yMr=r(p2t,"pegasus"),p2t.forEach(t),LMr=r(bke," \u2014 "),jQ=n(bke,"A",{href:!0});var _2t=s(jQ);xMr=r(_2t,"FlaxPegasusModel"),_2t.forEach(t),kMr=r(bke," (Pegasus model)"),bke.forEach(t),SMr=i(W),RM=n(W,"LI",{});var Fke=s(RM);x5e=n(Fke,"STRONG",{});var u2t=s(x5e);RMr=r(u2t,"roberta"),u2t.forEach(t),BMr=r(Fke," \u2014 "),DQ=n(Fke,"A",{href:!0});var b2t=s(DQ);PMr=r(b2t,"FlaxRobertaModel"),b2t.forEach(t),$Mr=r(Fke," (RoBERTa model)"),Fke.forEach(t),IMr=i(W),BM=n(W,"LI",{});var vke=s(BM);k5e=n(vke,"STRONG",{});var F2t=s(k5e);qMr=r(F2t,"roformer"),F2t.forEach(t),NMr=r(vke," \u2014 "),GQ=n(vke,"A",{href:!0});var v2t=s(GQ);jMr=r(v2t,"FlaxRoFormerModel"),v2t.forEach(t),DMr=r(vke," (RoFormer model)"),vke.forEach(t),GMr=i(W),PM=n(W,"LI",{});var Tke=s(PM);S5e=n(Tke,"STRONG",{});var T2t=s(S5e);OMr=r(T2t,"t5"),T2t.forEach(t),VMr=r(Tke," \u2014 "),OQ=n(Tke,"A",{href:!0});var M2t=s(OQ);XMr=r(M2t,"FlaxT5Model"),M2t.forEach(t),zMr=r(Tke," (T5 model)"),Tke.forEach(t),QMr=i(W),$M=n(W,"LI",{});var Mke=s($M);R5e=n(Mke,"STRONG",{});var E2t=s(R5e);WMr=r(E2t,"vision-text-dual-encoder"),E2t.forEach(t),HMr=r(Mke," \u2014 "),VQ=n(Mke,"A",{href:!0});var C2t=s(VQ);UMr=r(C2t,"FlaxVisionTextDualEncoderModel"),C2t.forEach(t),JMr=r(Mke," (VisionTextDualEncoder model)"),Mke.forEach(t),YMr=i(W),IM=n(W,"LI",{});var Eke=s(IM);B5e=n(Eke,"STRONG",{});var w2t=s(B5e);KMr=r(w2t,"vit"),w2t.forEach(t),ZMr=r(Eke," \u2014 "),XQ=n(Eke,"A",{href:!0});var A2t=s(XQ);e4r=r(A2t,"FlaxViTModel"),A2t.forEach(t),o4r=r(Eke," (ViT model)"),Eke.forEach(t),r4r=i(W),qM=n(W,"LI",{});var Cke=s(qM);P5e=n(Cke,"STRONG",{});var y2t=s(P5e);t4r=r(y2t,"wav2vec2"),y2t.forEach(t),a4r=r(Cke," \u2014 "),zQ=n(Cke,"A",{href:!0});var L2t=s(zQ);n4r=r(L2t,"FlaxWav2Vec2Model"),L2t.forEach(t),s4r=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),l4r=i(W),NM=n(W,"LI",{});var wke=s(NM);$5e=n(wke,"STRONG",{});var x2t=s($5e);i4r=r(x2t,"xglm"),x2t.forEach(t),d4r=r(wke," \u2014 "),QQ=n(wke,"A",{href:!0});var k2t=s(QQ);c4r=r(k2t,"FlaxXGLMModel"),k2t.forEach(t),f4r=r(wke," (XGLM model)"),wke.forEach(t),m4r=i(W),jM=n(W,"LI",{});var Ake=s(jM);I5e=n(Ake,"STRONG",{});var S2t=s(I5e);g4r=r(S2t,"xlm-roberta"),S2t.forEach(t),h4r=r(Ake," \u2014 "),WQ=n(Ake,"A",{href:!0});var R2t=s(WQ);p4r=r(R2t,"FlaxXLMRobertaModel"),R2t.forEach(t),_4r=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),W.forEach(t),u4r=i(La),q5e=n(La,"P",{});var B2t=s(q5e);b4r=r(B2t,"Examples:"),B2t.forEach(t),F4r=i(La),m(Oy.$$.fragment,La),La.forEach(t),fi.forEach(t),LBe=i(c),of=n(c,"H2",{class:!0});var j$e=s(of);DM=n(j$e,"A",{id:!0,class:!0,href:!0});var P2t=s(DM);N5e=n(P2t,"SPAN",{});var $2t=s(N5e);m(Vy.$$.fragment,$2t),$2t.forEach(t),P2t.forEach(t),v4r=i(j$e),j5e=n(j$e,"SPAN",{});var I2t=s(j5e);T4r=r(I2t,"FlaxAutoModelForCausalLM"),I2t.forEach(t),j$e.forEach(t),xBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Xy.$$.fragment,gi),M4r=i(gi),rf=n(gi,"P",{});var vJ=s(rf);E4r=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HQ=n(vJ,"A",{href:!0});var q2t=s(HQ);C4r=r(q2t,"from_pretrained()"),q2t.forEach(t),w4r=r(vJ," class method or the "),UQ=n(vJ,"A",{href:!0});var N2t=s(UQ);A4r=r(N2t,"from_config()"),N2t.forEach(t),y4r=r(vJ,` class
method.`),vJ.forEach(t),L4r=i(gi),zy=n(gi,"P",{});var D$e=s(zy);x4r=r(D$e,"This class cannot be instantiated directly using "),D5e=n(D$e,"CODE",{});var j2t=s(D5e);k4r=r(j2t,"__init__()"),j2t.forEach(t),S4r=r(D$e," (throws an error)."),D$e.forEach(t),R4r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Qy.$$.fragment,hi),B4r=i(hi),G5e=n(hi,"P",{});var D2t=s(G5e);P4r=r(D2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D2t.forEach(t),$4r=i(hi),tf=n(hi,"P",{});var TJ=s(tf);I4r=r(TJ,`Note:
Loading a model from its configuration file does `),O5e=n(TJ,"STRONG",{});var G2t=s(O5e);q4r=r(G2t,"not"),G2t.forEach(t),N4r=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(TJ,"A",{href:!0});var O2t=s(JQ);j4r=r(O2t,"from_pretrained()"),O2t.forEach(t),D4r=r(TJ," to load the model weights."),TJ.forEach(t),G4r=i(hi),V5e=n(hi,"P",{});var V2t=s(V5e);O4r=r(V2t,"Examples:"),V2t.forEach(t),V4r=i(hi),m(Wy.$$.fragment,hi),hi.forEach(t),X4r=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Hy.$$.fragment,xa),z4r=i(xa),X5e=n(xa,"P",{});var X2t=s(X5e);Q4r=r(X2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X2t.forEach(t),W4r=i(xa),kn=n(xa,"P",{});var lC=s(kn);H4r=r(lC,"The model class to instantiate is selected based on the "),z5e=n(lC,"CODE",{});var z2t=s(z5e);U4r=r(z2t,"model_type"),z2t.forEach(t),J4r=r(lC,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(lC,"CODE",{});var Q2t=s(Q5e);Y4r=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),K4r=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(lC,"CODE",{});var W2t=s(W5e);Z4r=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),eEr=r(lC,":"),lC.forEach(t),oEr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);GM=n(pi,"LI",{});var yke=s(GM);H5e=n(yke,"STRONG",{});var H2t=s(H5e);rEr=r(H2t,"bart"),H2t.forEach(t),tEr=r(yke," \u2014 "),YQ=n(yke,"A",{href:!0});var U2t=s(YQ);aEr=r(U2t,"FlaxBartForCausalLM"),U2t.forEach(t),nEr=r(yke," (BART model)"),yke.forEach(t),sEr=i(pi),OM=n(pi,"LI",{});var Lke=s(OM);U5e=n(Lke,"STRONG",{});var J2t=s(U5e);lEr=r(J2t,"gpt2"),J2t.forEach(t),iEr=r(Lke," \u2014 "),KQ=n(Lke,"A",{href:!0});var Y2t=s(KQ);dEr=r(Y2t,"FlaxGPT2LMHeadModel"),Y2t.forEach(t),cEr=r(Lke," (OpenAI GPT-2 model)"),Lke.forEach(t),fEr=i(pi),VM=n(pi,"LI",{});var xke=s(VM);J5e=n(xke,"STRONG",{});var K2t=s(J5e);mEr=r(K2t,"gpt_neo"),K2t.forEach(t),gEr=r(xke," \u2014 "),ZQ=n(xke,"A",{href:!0});var Z2t=s(ZQ);hEr=r(Z2t,"FlaxGPTNeoForCausalLM"),Z2t.forEach(t),pEr=r(xke," (GPT Neo model)"),xke.forEach(t),_Er=i(pi),XM=n(pi,"LI",{});var kke=s(XM);Y5e=n(kke,"STRONG",{});var eFt=s(Y5e);uEr=r(eFt,"gptj"),eFt.forEach(t),bEr=r(kke," \u2014 "),eW=n(kke,"A",{href:!0});var oFt=s(eW);FEr=r(oFt,"FlaxGPTJForCausalLM"),oFt.forEach(t),vEr=r(kke," (GPT-J model)"),kke.forEach(t),TEr=i(pi),zM=n(pi,"LI",{});var Ske=s(zM);K5e=n(Ske,"STRONG",{});var rFt=s(K5e);MEr=r(rFt,"xglm"),rFt.forEach(t),EEr=r(Ske," \u2014 "),oW=n(Ske,"A",{href:!0});var tFt=s(oW);CEr=r(tFt,"FlaxXGLMForCausalLM"),tFt.forEach(t),wEr=r(Ske," (XGLM model)"),Ske.forEach(t),pi.forEach(t),AEr=i(xa),Z5e=n(xa,"P",{});var aFt=s(Z5e);yEr=r(aFt,"Examples:"),aFt.forEach(t),LEr=i(xa),m(Uy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),kBe=i(c),af=n(c,"H2",{class:!0});var G$e=s(af);QM=n(G$e,"A",{id:!0,class:!0,href:!0});var nFt=s(QM);e3e=n(nFt,"SPAN",{});var sFt=s(e3e);m(Jy.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),xEr=i(G$e),o3e=n(G$e,"SPAN",{});var lFt=s(o3e);kEr=r(lFt,"FlaxAutoModelForPreTraining"),lFt.forEach(t),G$e.forEach(t),SBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Yy.$$.fragment,_i),SEr=i(_i),nf=n(_i,"P",{});var MJ=s(nf);REr=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rW=n(MJ,"A",{href:!0});var iFt=s(rW);BEr=r(iFt,"from_pretrained()"),iFt.forEach(t),PEr=r(MJ," class method or the "),tW=n(MJ,"A",{href:!0});var dFt=s(tW);$Er=r(dFt,"from_config()"),dFt.forEach(t),IEr=r(MJ,` class
method.`),MJ.forEach(t),qEr=i(_i),Ky=n(_i,"P",{});var O$e=s(Ky);NEr=r(O$e,"This class cannot be instantiated directly using "),r3e=n(O$e,"CODE",{});var cFt=s(r3e);jEr=r(cFt,"__init__()"),cFt.forEach(t),DEr=r(O$e," (throws an error)."),O$e.forEach(t),GEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Zy.$$.fragment,ui),OEr=i(ui),t3e=n(ui,"P",{});var fFt=s(t3e);VEr=r(fFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fFt.forEach(t),XEr=i(ui),sf=n(ui,"P",{});var EJ=s(sf);zEr=r(EJ,`Note:
Loading a model from its configuration file does `),a3e=n(EJ,"STRONG",{});var mFt=s(a3e);QEr=r(mFt,"not"),mFt.forEach(t),WEr=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(EJ,"A",{href:!0});var gFt=s(aW);HEr=r(gFt,"from_pretrained()"),gFt.forEach(t),UEr=r(EJ," to load the model weights."),EJ.forEach(t),JEr=i(ui),n3e=n(ui,"P",{});var hFt=s(n3e);YEr=r(hFt,"Examples:"),hFt.forEach(t),KEr=i(ui),m(eL.$$.fragment,ui),ui.forEach(t),ZEr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(oL.$$.fragment,ka),eCr=i(ka),s3e=n(ka,"P",{});var pFt=s(s3e);oCr=r(pFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pFt.forEach(t),rCr=i(ka),Sn=n(ka,"P",{});var iC=s(Sn);tCr=r(iC,"The model class to instantiate is selected based on the "),l3e=n(iC,"CODE",{});var _Ft=s(l3e);aCr=r(_Ft,"model_type"),_Ft.forEach(t),nCr=r(iC,` property of the config object (either
passed as an argument or loaded from `),i3e=n(iC,"CODE",{});var uFt=s(i3e);sCr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),lCr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(iC,"CODE",{});var bFt=s(d3e);iCr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),dCr=r(iC,":"),iC.forEach(t),cCr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);WM=n(pe,"LI",{});var Rke=s(WM);c3e=n(Rke,"STRONG",{});var FFt=s(c3e);fCr=r(FFt,"albert"),FFt.forEach(t),mCr=r(Rke," \u2014 "),nW=n(Rke,"A",{href:!0});var vFt=s(nW);gCr=r(vFt,"FlaxAlbertForPreTraining"),vFt.forEach(t),hCr=r(Rke," (ALBERT model)"),Rke.forEach(t),pCr=i(pe),HM=n(pe,"LI",{});var Bke=s(HM);f3e=n(Bke,"STRONG",{});var TFt=s(f3e);_Cr=r(TFt,"bart"),TFt.forEach(t),uCr=r(Bke," \u2014 "),sW=n(Bke,"A",{href:!0});var MFt=s(sW);bCr=r(MFt,"FlaxBartForConditionalGeneration"),MFt.forEach(t),FCr=r(Bke," (BART model)"),Bke.forEach(t),vCr=i(pe),UM=n(pe,"LI",{});var Pke=s(UM);m3e=n(Pke,"STRONG",{});var EFt=s(m3e);TCr=r(EFt,"bert"),EFt.forEach(t),MCr=r(Pke," \u2014 "),lW=n(Pke,"A",{href:!0});var CFt=s(lW);ECr=r(CFt,"FlaxBertForPreTraining"),CFt.forEach(t),CCr=r(Pke," (BERT model)"),Pke.forEach(t),wCr=i(pe),JM=n(pe,"LI",{});var $ke=s(JM);g3e=n($ke,"STRONG",{});var wFt=s(g3e);ACr=r(wFt,"big_bird"),wFt.forEach(t),yCr=r($ke," \u2014 "),iW=n($ke,"A",{href:!0});var AFt=s(iW);LCr=r(AFt,"FlaxBigBirdForPreTraining"),AFt.forEach(t),xCr=r($ke," (BigBird model)"),$ke.forEach(t),kCr=i(pe),YM=n(pe,"LI",{});var Ike=s(YM);h3e=n(Ike,"STRONG",{});var yFt=s(h3e);SCr=r(yFt,"electra"),yFt.forEach(t),RCr=r(Ike," \u2014 "),dW=n(Ike,"A",{href:!0});var LFt=s(dW);BCr=r(LFt,"FlaxElectraForPreTraining"),LFt.forEach(t),PCr=r(Ike," (ELECTRA model)"),Ike.forEach(t),$Cr=i(pe),KM=n(pe,"LI",{});var qke=s(KM);p3e=n(qke,"STRONG",{});var xFt=s(p3e);ICr=r(xFt,"mbart"),xFt.forEach(t),qCr=r(qke," \u2014 "),cW=n(qke,"A",{href:!0});var kFt=s(cW);NCr=r(kFt,"FlaxMBartForConditionalGeneration"),kFt.forEach(t),jCr=r(qke," (mBART model)"),qke.forEach(t),DCr=i(pe),ZM=n(pe,"LI",{});var Nke=s(ZM);_3e=n(Nke,"STRONG",{});var SFt=s(_3e);GCr=r(SFt,"mt5"),SFt.forEach(t),OCr=r(Nke," \u2014 "),fW=n(Nke,"A",{href:!0});var RFt=s(fW);VCr=r(RFt,"FlaxMT5ForConditionalGeneration"),RFt.forEach(t),XCr=r(Nke," (mT5 model)"),Nke.forEach(t),zCr=i(pe),e4=n(pe,"LI",{});var jke=s(e4);u3e=n(jke,"STRONG",{});var BFt=s(u3e);QCr=r(BFt,"roberta"),BFt.forEach(t),WCr=r(jke," \u2014 "),mW=n(jke,"A",{href:!0});var PFt=s(mW);HCr=r(PFt,"FlaxRobertaForMaskedLM"),PFt.forEach(t),UCr=r(jke," (RoBERTa model)"),jke.forEach(t),JCr=i(pe),o4=n(pe,"LI",{});var Dke=s(o4);b3e=n(Dke,"STRONG",{});var $Ft=s(b3e);YCr=r($Ft,"roformer"),$Ft.forEach(t),KCr=r(Dke," \u2014 "),gW=n(Dke,"A",{href:!0});var IFt=s(gW);ZCr=r(IFt,"FlaxRoFormerForMaskedLM"),IFt.forEach(t),ewr=r(Dke," (RoFormer model)"),Dke.forEach(t),owr=i(pe),r4=n(pe,"LI",{});var Gke=s(r4);F3e=n(Gke,"STRONG",{});var qFt=s(F3e);rwr=r(qFt,"t5"),qFt.forEach(t),twr=r(Gke," \u2014 "),hW=n(Gke,"A",{href:!0});var NFt=s(hW);awr=r(NFt,"FlaxT5ForConditionalGeneration"),NFt.forEach(t),nwr=r(Gke," (T5 model)"),Gke.forEach(t),swr=i(pe),t4=n(pe,"LI",{});var Oke=s(t4);v3e=n(Oke,"STRONG",{});var jFt=s(v3e);lwr=r(jFt,"wav2vec2"),jFt.forEach(t),iwr=r(Oke," \u2014 "),pW=n(Oke,"A",{href:!0});var DFt=s(pW);dwr=r(DFt,"FlaxWav2Vec2ForPreTraining"),DFt.forEach(t),cwr=r(Oke," (Wav2Vec2 model)"),Oke.forEach(t),fwr=i(pe),a4=n(pe,"LI",{});var Vke=s(a4);T3e=n(Vke,"STRONG",{});var GFt=s(T3e);mwr=r(GFt,"xlm-roberta"),GFt.forEach(t),gwr=r(Vke," \u2014 "),_W=n(Vke,"A",{href:!0});var OFt=s(_W);hwr=r(OFt,"FlaxXLMRobertaForMaskedLM"),OFt.forEach(t),pwr=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),pe.forEach(t),_wr=i(ka),M3e=n(ka,"P",{});var VFt=s(M3e);uwr=r(VFt,"Examples:"),VFt.forEach(t),bwr=i(ka),m(rL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),RBe=i(c),lf=n(c,"H2",{class:!0});var V$e=s(lf);n4=n(V$e,"A",{id:!0,class:!0,href:!0});var XFt=s(n4);E3e=n(XFt,"SPAN",{});var zFt=s(E3e);m(tL.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),Fwr=i(V$e),C3e=n(V$e,"SPAN",{});var QFt=s(C3e);vwr=r(QFt,"FlaxAutoModelForMaskedLM"),QFt.forEach(t),V$e.forEach(t),BBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(aL.$$.fragment,bi),Twr=i(bi),df=n(bi,"P",{});var CJ=s(df);Mwr=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uW=n(CJ,"A",{href:!0});var WFt=s(uW);Ewr=r(WFt,"from_pretrained()"),WFt.forEach(t),Cwr=r(CJ," class method or the "),bW=n(CJ,"A",{href:!0});var HFt=s(bW);wwr=r(HFt,"from_config()"),HFt.forEach(t),Awr=r(CJ,` class
method.`),CJ.forEach(t),ywr=i(bi),nL=n(bi,"P",{});var X$e=s(nL);Lwr=r(X$e,"This class cannot be instantiated directly using "),w3e=n(X$e,"CODE",{});var UFt=s(w3e);xwr=r(UFt,"__init__()"),UFt.forEach(t),kwr=r(X$e," (throws an error)."),X$e.forEach(t),Swr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(sL.$$.fragment,Fi),Rwr=i(Fi),A3e=n(Fi,"P",{});var JFt=s(A3e);Bwr=r(JFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JFt.forEach(t),Pwr=i(Fi),cf=n(Fi,"P",{});var wJ=s(cf);$wr=r(wJ,`Note:
Loading a model from its configuration file does `),y3e=n(wJ,"STRONG",{});var YFt=s(y3e);Iwr=r(YFt,"not"),YFt.forEach(t),qwr=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(wJ,"A",{href:!0});var KFt=s(FW);Nwr=r(KFt,"from_pretrained()"),KFt.forEach(t),jwr=r(wJ," to load the model weights."),wJ.forEach(t),Dwr=i(Fi),L3e=n(Fi,"P",{});var ZFt=s(L3e);Gwr=r(ZFt,"Examples:"),ZFt.forEach(t),Owr=i(Fi),m(lL.$$.fragment,Fi),Fi.forEach(t),Vwr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(iL.$$.fragment,Sa),Xwr=i(Sa),x3e=n(Sa,"P",{});var evt=s(x3e);zwr=r(evt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),evt.forEach(t),Qwr=i(Sa),Rn=n(Sa,"P",{});var dC=s(Rn);Wwr=r(dC,"The model class to instantiate is selected based on the "),k3e=n(dC,"CODE",{});var ovt=s(k3e);Hwr=r(ovt,"model_type"),ovt.forEach(t),Uwr=r(dC,` property of the config object (either
passed as an argument or loaded from `),S3e=n(dC,"CODE",{});var rvt=s(S3e);Jwr=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),Ywr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(dC,"CODE",{});var tvt=s(R3e);Kwr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),Zwr=r(dC,":"),dC.forEach(t),eAr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);s4=n(Ae,"LI",{});var Xke=s(s4);B3e=n(Xke,"STRONG",{});var avt=s(B3e);oAr=r(avt,"albert"),avt.forEach(t),rAr=r(Xke," \u2014 "),vW=n(Xke,"A",{href:!0});var nvt=s(vW);tAr=r(nvt,"FlaxAlbertForMaskedLM"),nvt.forEach(t),aAr=r(Xke," (ALBERT model)"),Xke.forEach(t),nAr=i(Ae),l4=n(Ae,"LI",{});var zke=s(l4);P3e=n(zke,"STRONG",{});var svt=s(P3e);sAr=r(svt,"bart"),svt.forEach(t),lAr=r(zke," \u2014 "),TW=n(zke,"A",{href:!0});var lvt=s(TW);iAr=r(lvt,"FlaxBartForConditionalGeneration"),lvt.forEach(t),dAr=r(zke," (BART model)"),zke.forEach(t),cAr=i(Ae),i4=n(Ae,"LI",{});var Qke=s(i4);$3e=n(Qke,"STRONG",{});var ivt=s($3e);fAr=r(ivt,"bert"),ivt.forEach(t),mAr=r(Qke," \u2014 "),MW=n(Qke,"A",{href:!0});var dvt=s(MW);gAr=r(dvt,"FlaxBertForMaskedLM"),dvt.forEach(t),hAr=r(Qke," (BERT model)"),Qke.forEach(t),pAr=i(Ae),d4=n(Ae,"LI",{});var Wke=s(d4);I3e=n(Wke,"STRONG",{});var cvt=s(I3e);_Ar=r(cvt,"big_bird"),cvt.forEach(t),uAr=r(Wke," \u2014 "),EW=n(Wke,"A",{href:!0});var fvt=s(EW);bAr=r(fvt,"FlaxBigBirdForMaskedLM"),fvt.forEach(t),FAr=r(Wke," (BigBird model)"),Wke.forEach(t),vAr=i(Ae),c4=n(Ae,"LI",{});var Hke=s(c4);q3e=n(Hke,"STRONG",{});var mvt=s(q3e);TAr=r(mvt,"distilbert"),mvt.forEach(t),MAr=r(Hke," \u2014 "),CW=n(Hke,"A",{href:!0});var gvt=s(CW);EAr=r(gvt,"FlaxDistilBertForMaskedLM"),gvt.forEach(t),CAr=r(Hke," (DistilBERT model)"),Hke.forEach(t),wAr=i(Ae),f4=n(Ae,"LI",{});var Uke=s(f4);N3e=n(Uke,"STRONG",{});var hvt=s(N3e);AAr=r(hvt,"electra"),hvt.forEach(t),yAr=r(Uke," \u2014 "),wW=n(Uke,"A",{href:!0});var pvt=s(wW);LAr=r(pvt,"FlaxElectraForMaskedLM"),pvt.forEach(t),xAr=r(Uke," (ELECTRA model)"),Uke.forEach(t),kAr=i(Ae),m4=n(Ae,"LI",{});var Jke=s(m4);j3e=n(Jke,"STRONG",{});var _vt=s(j3e);SAr=r(_vt,"mbart"),_vt.forEach(t),RAr=r(Jke," \u2014 "),AW=n(Jke,"A",{href:!0});var uvt=s(AW);BAr=r(uvt,"FlaxMBartForConditionalGeneration"),uvt.forEach(t),PAr=r(Jke," (mBART model)"),Jke.forEach(t),$Ar=i(Ae),g4=n(Ae,"LI",{});var Yke=s(g4);D3e=n(Yke,"STRONG",{});var bvt=s(D3e);IAr=r(bvt,"roberta"),bvt.forEach(t),qAr=r(Yke," \u2014 "),yW=n(Yke,"A",{href:!0});var Fvt=s(yW);NAr=r(Fvt,"FlaxRobertaForMaskedLM"),Fvt.forEach(t),jAr=r(Yke," (RoBERTa model)"),Yke.forEach(t),DAr=i(Ae),h4=n(Ae,"LI",{});var Kke=s(h4);G3e=n(Kke,"STRONG",{});var vvt=s(G3e);GAr=r(vvt,"roformer"),vvt.forEach(t),OAr=r(Kke," \u2014 "),LW=n(Kke,"A",{href:!0});var Tvt=s(LW);VAr=r(Tvt,"FlaxRoFormerForMaskedLM"),Tvt.forEach(t),XAr=r(Kke," (RoFormer model)"),Kke.forEach(t),zAr=i(Ae),p4=n(Ae,"LI",{});var Zke=s(p4);O3e=n(Zke,"STRONG",{});var Mvt=s(O3e);QAr=r(Mvt,"xlm-roberta"),Mvt.forEach(t),WAr=r(Zke," \u2014 "),xW=n(Zke,"A",{href:!0});var Evt=s(xW);HAr=r(Evt,"FlaxXLMRobertaForMaskedLM"),Evt.forEach(t),UAr=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),Ae.forEach(t),JAr=i(Sa),V3e=n(Sa,"P",{});var Cvt=s(V3e);YAr=r(Cvt,"Examples:"),Cvt.forEach(t),KAr=i(Sa),m(dL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),PBe=i(c),ff=n(c,"H2",{class:!0});var z$e=s(ff);_4=n(z$e,"A",{id:!0,class:!0,href:!0});var wvt=s(_4);X3e=n(wvt,"SPAN",{});var Avt=s(X3e);m(cL.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),ZAr=i(z$e),z3e=n(z$e,"SPAN",{});var yvt=s(z3e);e6r=r(yvt,"FlaxAutoModelForSeq2SeqLM"),yvt.forEach(t),z$e.forEach(t),$Be=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(fL.$$.fragment,vi),o6r=i(vi),mf=n(vi,"P",{});var AJ=s(mf);r6r=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kW=n(AJ,"A",{href:!0});var Lvt=s(kW);t6r=r(Lvt,"from_pretrained()"),Lvt.forEach(t),a6r=r(AJ," class method or the "),SW=n(AJ,"A",{href:!0});var xvt=s(SW);n6r=r(xvt,"from_config()"),xvt.forEach(t),s6r=r(AJ,` class
method.`),AJ.forEach(t),l6r=i(vi),mL=n(vi,"P",{});var Q$e=s(mL);i6r=r(Q$e,"This class cannot be instantiated directly using "),Q3e=n(Q$e,"CODE",{});var kvt=s(Q3e);d6r=r(kvt,"__init__()"),kvt.forEach(t),c6r=r(Q$e," (throws an error)."),Q$e.forEach(t),f6r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(gL.$$.fragment,Ti),m6r=i(Ti),W3e=n(Ti,"P",{});var Svt=s(W3e);g6r=r(Svt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Svt.forEach(t),h6r=i(Ti),gf=n(Ti,"P",{});var yJ=s(gf);p6r=r(yJ,`Note:
Loading a model from its configuration file does `),H3e=n(yJ,"STRONG",{});var Rvt=s(H3e);_6r=r(Rvt,"not"),Rvt.forEach(t),u6r=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(yJ,"A",{href:!0});var Bvt=s(RW);b6r=r(Bvt,"from_pretrained()"),Bvt.forEach(t),F6r=r(yJ," to load the model weights."),yJ.forEach(t),v6r=i(Ti),U3e=n(Ti,"P",{});var Pvt=s(U3e);T6r=r(Pvt,"Examples:"),Pvt.forEach(t),M6r=i(Ti),m(hL.$$.fragment,Ti),Ti.forEach(t),E6r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(pL.$$.fragment,Ra),C6r=i(Ra),J3e=n(Ra,"P",{});var $vt=s(J3e);w6r=r($vt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$vt.forEach(t),A6r=i(Ra),Bn=n(Ra,"P",{});var cC=s(Bn);y6r=r(cC,"The model class to instantiate is selected based on the "),Y3e=n(cC,"CODE",{});var Ivt=s(Y3e);L6r=r(Ivt,"model_type"),Ivt.forEach(t),x6r=r(cC,` property of the config object (either
passed as an argument or loaded from `),K3e=n(cC,"CODE",{});var qvt=s(K3e);k6r=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),S6r=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(cC,"CODE",{});var Nvt=s(Z3e);R6r=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),B6r=r(cC,":"),cC.forEach(t),P6r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);u4=n(so,"LI",{});var eSe=s(u4);e2e=n(eSe,"STRONG",{});var jvt=s(e2e);$6r=r(jvt,"bart"),jvt.forEach(t),I6r=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var Dvt=s(BW);q6r=r(Dvt,"FlaxBartForConditionalGeneration"),Dvt.forEach(t),N6r=r(eSe," (BART model)"),eSe.forEach(t),j6r=i(so),b4=n(so,"LI",{});var oSe=s(b4);o2e=n(oSe,"STRONG",{});var Gvt=s(o2e);D6r=r(Gvt,"blenderbot"),Gvt.forEach(t),G6r=r(oSe," \u2014 "),PW=n(oSe,"A",{href:!0});var Ovt=s(PW);O6r=r(Ovt,"FlaxBlenderbotForConditionalGeneration"),Ovt.forEach(t),V6r=r(oSe," (Blenderbot model)"),oSe.forEach(t),X6r=i(so),F4=n(so,"LI",{});var rSe=s(F4);r2e=n(rSe,"STRONG",{});var Vvt=s(r2e);z6r=r(Vvt,"blenderbot-small"),Vvt.forEach(t),Q6r=r(rSe," \u2014 "),$W=n(rSe,"A",{href:!0});var Xvt=s($W);W6r=r(Xvt,"FlaxBlenderbotSmallForConditionalGeneration"),Xvt.forEach(t),H6r=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),U6r=i(so),v4=n(so,"LI",{});var tSe=s(v4);t2e=n(tSe,"STRONG",{});var zvt=s(t2e);J6r=r(zvt,"encoder-decoder"),zvt.forEach(t),Y6r=r(tSe," \u2014 "),IW=n(tSe,"A",{href:!0});var Qvt=s(IW);K6r=r(Qvt,"FlaxEncoderDecoderModel"),Qvt.forEach(t),Z6r=r(tSe," (Encoder decoder model)"),tSe.forEach(t),e0r=i(so),T4=n(so,"LI",{});var aSe=s(T4);a2e=n(aSe,"STRONG",{});var Wvt=s(a2e);o0r=r(Wvt,"marian"),Wvt.forEach(t),r0r=r(aSe," \u2014 "),qW=n(aSe,"A",{href:!0});var Hvt=s(qW);t0r=r(Hvt,"FlaxMarianMTModel"),Hvt.forEach(t),a0r=r(aSe," (Marian model)"),aSe.forEach(t),n0r=i(so),M4=n(so,"LI",{});var nSe=s(M4);n2e=n(nSe,"STRONG",{});var Uvt=s(n2e);s0r=r(Uvt,"mbart"),Uvt.forEach(t),l0r=r(nSe," \u2014 "),NW=n(nSe,"A",{href:!0});var Jvt=s(NW);i0r=r(Jvt,"FlaxMBartForConditionalGeneration"),Jvt.forEach(t),d0r=r(nSe," (mBART model)"),nSe.forEach(t),c0r=i(so),E4=n(so,"LI",{});var sSe=s(E4);s2e=n(sSe,"STRONG",{});var Yvt=s(s2e);f0r=r(Yvt,"mt5"),Yvt.forEach(t),m0r=r(sSe," \u2014 "),jW=n(sSe,"A",{href:!0});var Kvt=s(jW);g0r=r(Kvt,"FlaxMT5ForConditionalGeneration"),Kvt.forEach(t),h0r=r(sSe," (mT5 model)"),sSe.forEach(t),p0r=i(so),C4=n(so,"LI",{});var lSe=s(C4);l2e=n(lSe,"STRONG",{});var Zvt=s(l2e);_0r=r(Zvt,"pegasus"),Zvt.forEach(t),u0r=r(lSe," \u2014 "),DW=n(lSe,"A",{href:!0});var eTt=s(DW);b0r=r(eTt,"FlaxPegasusForConditionalGeneration"),eTt.forEach(t),F0r=r(lSe," (Pegasus model)"),lSe.forEach(t),v0r=i(so),w4=n(so,"LI",{});var iSe=s(w4);i2e=n(iSe,"STRONG",{});var oTt=s(i2e);T0r=r(oTt,"t5"),oTt.forEach(t),M0r=r(iSe," \u2014 "),GW=n(iSe,"A",{href:!0});var rTt=s(GW);E0r=r(rTt,"FlaxT5ForConditionalGeneration"),rTt.forEach(t),C0r=r(iSe," (T5 model)"),iSe.forEach(t),so.forEach(t),w0r=i(Ra),d2e=n(Ra,"P",{});var tTt=s(d2e);A0r=r(tTt,"Examples:"),tTt.forEach(t),y0r=i(Ra),m(_L.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),IBe=i(c),hf=n(c,"H2",{class:!0});var W$e=s(hf);A4=n(W$e,"A",{id:!0,class:!0,href:!0});var aTt=s(A4);c2e=n(aTt,"SPAN",{});var nTt=s(c2e);m(uL.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),L0r=i(W$e),f2e=n(W$e,"SPAN",{});var sTt=s(f2e);x0r=r(sTt,"FlaxAutoModelForSequenceClassification"),sTt.forEach(t),W$e.forEach(t),qBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(bL.$$.fragment,Mi),k0r=i(Mi),pf=n(Mi,"P",{});var LJ=s(pf);S0r=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OW=n(LJ,"A",{href:!0});var lTt=s(OW);R0r=r(lTt,"from_pretrained()"),lTt.forEach(t),B0r=r(LJ," class method or the "),VW=n(LJ,"A",{href:!0});var iTt=s(VW);P0r=r(iTt,"from_config()"),iTt.forEach(t),$0r=r(LJ,` class
method.`),LJ.forEach(t),I0r=i(Mi),FL=n(Mi,"P",{});var H$e=s(FL);q0r=r(H$e,"This class cannot be instantiated directly using "),m2e=n(H$e,"CODE",{});var dTt=s(m2e);N0r=r(dTt,"__init__()"),dTt.forEach(t),j0r=r(H$e," (throws an error)."),H$e.forEach(t),D0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(vL.$$.fragment,Ei),G0r=i(Ei),g2e=n(Ei,"P",{});var cTt=s(g2e);O0r=r(cTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cTt.forEach(t),V0r=i(Ei),_f=n(Ei,"P",{});var xJ=s(_f);X0r=r(xJ,`Note:
Loading a model from its configuration file does `),h2e=n(xJ,"STRONG",{});var fTt=s(h2e);z0r=r(fTt,"not"),fTt.forEach(t),Q0r=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(xJ,"A",{href:!0});var mTt=s(XW);W0r=r(mTt,"from_pretrained()"),mTt.forEach(t),H0r=r(xJ," to load the model weights."),xJ.forEach(t),U0r=i(Ei),p2e=n(Ei,"P",{});var gTt=s(p2e);J0r=r(gTt,"Examples:"),gTt.forEach(t),Y0r=i(Ei),m(TL.$$.fragment,Ei),Ei.forEach(t),K0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(ML.$$.fragment,Ba),Z0r=i(Ba),_2e=n(Ba,"P",{});var hTt=s(_2e);eyr=r(hTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hTt.forEach(t),oyr=i(Ba),Pn=n(Ba,"P",{});var fC=s(Pn);ryr=r(fC,"The model class to instantiate is selected based on the "),u2e=n(fC,"CODE",{});var pTt=s(u2e);tyr=r(pTt,"model_type"),pTt.forEach(t),ayr=r(fC,` property of the config object (either
passed as an argument or loaded from `),b2e=n(fC,"CODE",{});var _Tt=s(b2e);nyr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),syr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(fC,"CODE",{});var uTt=s(F2e);lyr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),iyr=r(fC,":"),fC.forEach(t),dyr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);y4=n(ye,"LI",{});var dSe=s(y4);v2e=n(dSe,"STRONG",{});var bTt=s(v2e);cyr=r(bTt,"albert"),bTt.forEach(t),fyr=r(dSe," \u2014 "),zW=n(dSe,"A",{href:!0});var FTt=s(zW);myr=r(FTt,"FlaxAlbertForSequenceClassification"),FTt.forEach(t),gyr=r(dSe," (ALBERT model)"),dSe.forEach(t),hyr=i(ye),L4=n(ye,"LI",{});var cSe=s(L4);T2e=n(cSe,"STRONG",{});var vTt=s(T2e);pyr=r(vTt,"bart"),vTt.forEach(t),_yr=r(cSe," \u2014 "),QW=n(cSe,"A",{href:!0});var TTt=s(QW);uyr=r(TTt,"FlaxBartForSequenceClassification"),TTt.forEach(t),byr=r(cSe," (BART model)"),cSe.forEach(t),Fyr=i(ye),x4=n(ye,"LI",{});var fSe=s(x4);M2e=n(fSe,"STRONG",{});var MTt=s(M2e);vyr=r(MTt,"bert"),MTt.forEach(t),Tyr=r(fSe," \u2014 "),WW=n(fSe,"A",{href:!0});var ETt=s(WW);Myr=r(ETt,"FlaxBertForSequenceClassification"),ETt.forEach(t),Eyr=r(fSe," (BERT model)"),fSe.forEach(t),Cyr=i(ye),k4=n(ye,"LI",{});var mSe=s(k4);E2e=n(mSe,"STRONG",{});var CTt=s(E2e);wyr=r(CTt,"big_bird"),CTt.forEach(t),Ayr=r(mSe," \u2014 "),HW=n(mSe,"A",{href:!0});var wTt=s(HW);yyr=r(wTt,"FlaxBigBirdForSequenceClassification"),wTt.forEach(t),Lyr=r(mSe," (BigBird model)"),mSe.forEach(t),xyr=i(ye),S4=n(ye,"LI",{});var gSe=s(S4);C2e=n(gSe,"STRONG",{});var ATt=s(C2e);kyr=r(ATt,"distilbert"),ATt.forEach(t),Syr=r(gSe," \u2014 "),UW=n(gSe,"A",{href:!0});var yTt=s(UW);Ryr=r(yTt,"FlaxDistilBertForSequenceClassification"),yTt.forEach(t),Byr=r(gSe," (DistilBERT model)"),gSe.forEach(t),Pyr=i(ye),R4=n(ye,"LI",{});var hSe=s(R4);w2e=n(hSe,"STRONG",{});var LTt=s(w2e);$yr=r(LTt,"electra"),LTt.forEach(t),Iyr=r(hSe," \u2014 "),JW=n(hSe,"A",{href:!0});var xTt=s(JW);qyr=r(xTt,"FlaxElectraForSequenceClassification"),xTt.forEach(t),Nyr=r(hSe," (ELECTRA model)"),hSe.forEach(t),jyr=i(ye),B4=n(ye,"LI",{});var pSe=s(B4);A2e=n(pSe,"STRONG",{});var kTt=s(A2e);Dyr=r(kTt,"mbart"),kTt.forEach(t),Gyr=r(pSe," \u2014 "),YW=n(pSe,"A",{href:!0});var STt=s(YW);Oyr=r(STt,"FlaxMBartForSequenceClassification"),STt.forEach(t),Vyr=r(pSe," (mBART model)"),pSe.forEach(t),Xyr=i(ye),P4=n(ye,"LI",{});var _Se=s(P4);y2e=n(_Se,"STRONG",{});var RTt=s(y2e);zyr=r(RTt,"roberta"),RTt.forEach(t),Qyr=r(_Se," \u2014 "),KW=n(_Se,"A",{href:!0});var BTt=s(KW);Wyr=r(BTt,"FlaxRobertaForSequenceClassification"),BTt.forEach(t),Hyr=r(_Se," (RoBERTa model)"),_Se.forEach(t),Uyr=i(ye),$4=n(ye,"LI",{});var uSe=s($4);L2e=n(uSe,"STRONG",{});var PTt=s(L2e);Jyr=r(PTt,"roformer"),PTt.forEach(t),Yyr=r(uSe," \u2014 "),ZW=n(uSe,"A",{href:!0});var $Tt=s(ZW);Kyr=r($Tt,"FlaxRoFormerForSequenceClassification"),$Tt.forEach(t),Zyr=r(uSe," (RoFormer model)"),uSe.forEach(t),eLr=i(ye),I4=n(ye,"LI",{});var bSe=s(I4);x2e=n(bSe,"STRONG",{});var ITt=s(x2e);oLr=r(ITt,"xlm-roberta"),ITt.forEach(t),rLr=r(bSe," \u2014 "),eH=n(bSe,"A",{href:!0});var qTt=s(eH);tLr=r(qTt,"FlaxXLMRobertaForSequenceClassification"),qTt.forEach(t),aLr=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),ye.forEach(t),nLr=i(Ba),k2e=n(Ba,"P",{});var NTt=s(k2e);sLr=r(NTt,"Examples:"),NTt.forEach(t),lLr=i(Ba),m(EL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),NBe=i(c),uf=n(c,"H2",{class:!0});var U$e=s(uf);q4=n(U$e,"A",{id:!0,class:!0,href:!0});var jTt=s(q4);S2e=n(jTt,"SPAN",{});var DTt=s(S2e);m(CL.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),iLr=i(U$e),R2e=n(U$e,"SPAN",{});var GTt=s(R2e);dLr=r(GTt,"FlaxAutoModelForQuestionAnswering"),GTt.forEach(t),U$e.forEach(t),jBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(wL.$$.fragment,Ci),cLr=i(Ci),bf=n(Ci,"P",{});var kJ=s(bf);fLr=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oH=n(kJ,"A",{href:!0});var OTt=s(oH);mLr=r(OTt,"from_pretrained()"),OTt.forEach(t),gLr=r(kJ," class method or the "),rH=n(kJ,"A",{href:!0});var VTt=s(rH);hLr=r(VTt,"from_config()"),VTt.forEach(t),pLr=r(kJ,` class
method.`),kJ.forEach(t),_Lr=i(Ci),AL=n(Ci,"P",{});var J$e=s(AL);uLr=r(J$e,"This class cannot be instantiated directly using "),B2e=n(J$e,"CODE",{});var XTt=s(B2e);bLr=r(XTt,"__init__()"),XTt.forEach(t),FLr=r(J$e," (throws an error)."),J$e.forEach(t),vLr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(yL.$$.fragment,wi),TLr=i(wi),P2e=n(wi,"P",{});var zTt=s(P2e);MLr=r(zTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zTt.forEach(t),ELr=i(wi),Ff=n(wi,"P",{});var SJ=s(Ff);CLr=r(SJ,`Note:
Loading a model from its configuration file does `),$2e=n(SJ,"STRONG",{});var QTt=s($2e);wLr=r(QTt,"not"),QTt.forEach(t),ALr=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(SJ,"A",{href:!0});var WTt=s(tH);yLr=r(WTt,"from_pretrained()"),WTt.forEach(t),LLr=r(SJ," to load the model weights."),SJ.forEach(t),xLr=i(wi),I2e=n(wi,"P",{});var HTt=s(I2e);kLr=r(HTt,"Examples:"),HTt.forEach(t),SLr=i(wi),m(LL.$$.fragment,wi),wi.forEach(t),RLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(xL.$$.fragment,Pa),BLr=i(Pa),q2e=n(Pa,"P",{});var UTt=s(q2e);PLr=r(UTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UTt.forEach(t),$Lr=i(Pa),$n=n(Pa,"P",{});var mC=s($n);ILr=r(mC,"The model class to instantiate is selected based on the "),N2e=n(mC,"CODE",{});var JTt=s(N2e);qLr=r(JTt,"model_type"),JTt.forEach(t),NLr=r(mC,` property of the config object (either
passed as an argument or loaded from `),j2e=n(mC,"CODE",{});var YTt=s(j2e);jLr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),DLr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(mC,"CODE",{});var KTt=s(D2e);GLr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),OLr=r(mC,":"),mC.forEach(t),VLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);N4=n(Le,"LI",{});var FSe=s(N4);G2e=n(FSe,"STRONG",{});var ZTt=s(G2e);XLr=r(ZTt,"albert"),ZTt.forEach(t),zLr=r(FSe," \u2014 "),aH=n(FSe,"A",{href:!0});var eMt=s(aH);QLr=r(eMt,"FlaxAlbertForQuestionAnswering"),eMt.forEach(t),WLr=r(FSe," (ALBERT model)"),FSe.forEach(t),HLr=i(Le),j4=n(Le,"LI",{});var vSe=s(j4);O2e=n(vSe,"STRONG",{});var oMt=s(O2e);ULr=r(oMt,"bart"),oMt.forEach(t),JLr=r(vSe," \u2014 "),nH=n(vSe,"A",{href:!0});var rMt=s(nH);YLr=r(rMt,"FlaxBartForQuestionAnswering"),rMt.forEach(t),KLr=r(vSe," (BART model)"),vSe.forEach(t),ZLr=i(Le),D4=n(Le,"LI",{});var TSe=s(D4);V2e=n(TSe,"STRONG",{});var tMt=s(V2e);e8r=r(tMt,"bert"),tMt.forEach(t),o8r=r(TSe," \u2014 "),sH=n(TSe,"A",{href:!0});var aMt=s(sH);r8r=r(aMt,"FlaxBertForQuestionAnswering"),aMt.forEach(t),t8r=r(TSe," (BERT model)"),TSe.forEach(t),a8r=i(Le),G4=n(Le,"LI",{});var MSe=s(G4);X2e=n(MSe,"STRONG",{});var nMt=s(X2e);n8r=r(nMt,"big_bird"),nMt.forEach(t),s8r=r(MSe," \u2014 "),lH=n(MSe,"A",{href:!0});var sMt=s(lH);l8r=r(sMt,"FlaxBigBirdForQuestionAnswering"),sMt.forEach(t),i8r=r(MSe," (BigBird model)"),MSe.forEach(t),d8r=i(Le),O4=n(Le,"LI",{});var ESe=s(O4);z2e=n(ESe,"STRONG",{});var lMt=s(z2e);c8r=r(lMt,"distilbert"),lMt.forEach(t),f8r=r(ESe," \u2014 "),iH=n(ESe,"A",{href:!0});var iMt=s(iH);m8r=r(iMt,"FlaxDistilBertForQuestionAnswering"),iMt.forEach(t),g8r=r(ESe," (DistilBERT model)"),ESe.forEach(t),h8r=i(Le),V4=n(Le,"LI",{});var CSe=s(V4);Q2e=n(CSe,"STRONG",{});var dMt=s(Q2e);p8r=r(dMt,"electra"),dMt.forEach(t),_8r=r(CSe," \u2014 "),dH=n(CSe,"A",{href:!0});var cMt=s(dH);u8r=r(cMt,"FlaxElectraForQuestionAnswering"),cMt.forEach(t),b8r=r(CSe," (ELECTRA model)"),CSe.forEach(t),F8r=i(Le),X4=n(Le,"LI",{});var wSe=s(X4);W2e=n(wSe,"STRONG",{});var fMt=s(W2e);v8r=r(fMt,"mbart"),fMt.forEach(t),T8r=r(wSe," \u2014 "),cH=n(wSe,"A",{href:!0});var mMt=s(cH);M8r=r(mMt,"FlaxMBartForQuestionAnswering"),mMt.forEach(t),E8r=r(wSe," (mBART model)"),wSe.forEach(t),C8r=i(Le),z4=n(Le,"LI",{});var ASe=s(z4);H2e=n(ASe,"STRONG",{});var gMt=s(H2e);w8r=r(gMt,"roberta"),gMt.forEach(t),A8r=r(ASe," \u2014 "),fH=n(ASe,"A",{href:!0});var hMt=s(fH);y8r=r(hMt,"FlaxRobertaForQuestionAnswering"),hMt.forEach(t),L8r=r(ASe," (RoBERTa model)"),ASe.forEach(t),x8r=i(Le),Q4=n(Le,"LI",{});var ySe=s(Q4);U2e=n(ySe,"STRONG",{});var pMt=s(U2e);k8r=r(pMt,"roformer"),pMt.forEach(t),S8r=r(ySe," \u2014 "),mH=n(ySe,"A",{href:!0});var _Mt=s(mH);R8r=r(_Mt,"FlaxRoFormerForQuestionAnswering"),_Mt.forEach(t),B8r=r(ySe," (RoFormer model)"),ySe.forEach(t),P8r=i(Le),W4=n(Le,"LI",{});var LSe=s(W4);J2e=n(LSe,"STRONG",{});var uMt=s(J2e);$8r=r(uMt,"xlm-roberta"),uMt.forEach(t),I8r=r(LSe," \u2014 "),gH=n(LSe,"A",{href:!0});var bMt=s(gH);q8r=r(bMt,"FlaxXLMRobertaForQuestionAnswering"),bMt.forEach(t),N8r=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Le.forEach(t),j8r=i(Pa),Y2e=n(Pa,"P",{});var FMt=s(Y2e);D8r=r(FMt,"Examples:"),FMt.forEach(t),G8r=i(Pa),m(kL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),DBe=i(c),vf=n(c,"H2",{class:!0});var Y$e=s(vf);H4=n(Y$e,"A",{id:!0,class:!0,href:!0});var vMt=s(H4);K2e=n(vMt,"SPAN",{});var TMt=s(K2e);m(SL.$$.fragment,TMt),TMt.forEach(t),vMt.forEach(t),O8r=i(Y$e),Z2e=n(Y$e,"SPAN",{});var MMt=s(Z2e);V8r=r(MMt,"FlaxAutoModelForTokenClassification"),MMt.forEach(t),Y$e.forEach(t),GBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(RL.$$.fragment,Ai),X8r=i(Ai),Tf=n(Ai,"P",{});var RJ=s(Tf);z8r=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hH=n(RJ,"A",{href:!0});var EMt=s(hH);Q8r=r(EMt,"from_pretrained()"),EMt.forEach(t),W8r=r(RJ," class method or the "),pH=n(RJ,"A",{href:!0});var CMt=s(pH);H8r=r(CMt,"from_config()"),CMt.forEach(t),U8r=r(RJ,` class
method.`),RJ.forEach(t),J8r=i(Ai),BL=n(Ai,"P",{});var K$e=s(BL);Y8r=r(K$e,"This class cannot be instantiated directly using "),eFe=n(K$e,"CODE",{});var wMt=s(eFe);K8r=r(wMt,"__init__()"),wMt.forEach(t),Z8r=r(K$e," (throws an error)."),K$e.forEach(t),e9r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(PL.$$.fragment,yi),o9r=i(yi),oFe=n(yi,"P",{});var AMt=s(oFe);r9r=r(AMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AMt.forEach(t),t9r=i(yi),Mf=n(yi,"P",{});var BJ=s(Mf);a9r=r(BJ,`Note:
Loading a model from its configuration file does `),rFe=n(BJ,"STRONG",{});var yMt=s(rFe);n9r=r(yMt,"not"),yMt.forEach(t),s9r=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(BJ,"A",{href:!0});var LMt=s(_H);l9r=r(LMt,"from_pretrained()"),LMt.forEach(t),i9r=r(BJ," to load the model weights."),BJ.forEach(t),d9r=i(yi),tFe=n(yi,"P",{});var xMt=s(tFe);c9r=r(xMt,"Examples:"),xMt.forEach(t),f9r=i(yi),m($L.$$.fragment,yi),yi.forEach(t),m9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(IL.$$.fragment,$a),g9r=i($a),aFe=n($a,"P",{});var kMt=s(aFe);h9r=r(kMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kMt.forEach(t),p9r=i($a),In=n($a,"P",{});var gC=s(In);_9r=r(gC,"The model class to instantiate is selected based on the "),nFe=n(gC,"CODE",{});var SMt=s(nFe);u9r=r(SMt,"model_type"),SMt.forEach(t),b9r=r(gC,` property of the config object (either
passed as an argument or loaded from `),sFe=n(gC,"CODE",{});var RMt=s(sFe);F9r=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),v9r=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(gC,"CODE",{});var BMt=s(lFe);T9r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),M9r=r(gC,":"),gC.forEach(t),E9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);U4=n(Oo,"LI",{});var xSe=s(U4);iFe=n(xSe,"STRONG",{});var PMt=s(iFe);C9r=r(PMt,"albert"),PMt.forEach(t),w9r=r(xSe," \u2014 "),uH=n(xSe,"A",{href:!0});var $Mt=s(uH);A9r=r($Mt,"FlaxAlbertForTokenClassification"),$Mt.forEach(t),y9r=r(xSe," (ALBERT model)"),xSe.forEach(t),L9r=i(Oo),J4=n(Oo,"LI",{});var kSe=s(J4);dFe=n(kSe,"STRONG",{});var IMt=s(dFe);x9r=r(IMt,"bert"),IMt.forEach(t),k9r=r(kSe," \u2014 "),bH=n(kSe,"A",{href:!0});var qMt=s(bH);S9r=r(qMt,"FlaxBertForTokenClassification"),qMt.forEach(t),R9r=r(kSe," (BERT model)"),kSe.forEach(t),B9r=i(Oo),Y4=n(Oo,"LI",{});var SSe=s(Y4);cFe=n(SSe,"STRONG",{});var NMt=s(cFe);P9r=r(NMt,"big_bird"),NMt.forEach(t),$9r=r(SSe," \u2014 "),FH=n(SSe,"A",{href:!0});var jMt=s(FH);I9r=r(jMt,"FlaxBigBirdForTokenClassification"),jMt.forEach(t),q9r=r(SSe," (BigBird model)"),SSe.forEach(t),N9r=i(Oo),K4=n(Oo,"LI",{});var RSe=s(K4);fFe=n(RSe,"STRONG",{});var DMt=s(fFe);j9r=r(DMt,"distilbert"),DMt.forEach(t),D9r=r(RSe," \u2014 "),vH=n(RSe,"A",{href:!0});var GMt=s(vH);G9r=r(GMt,"FlaxDistilBertForTokenClassification"),GMt.forEach(t),O9r=r(RSe," (DistilBERT model)"),RSe.forEach(t),V9r=i(Oo),Z4=n(Oo,"LI",{});var BSe=s(Z4);mFe=n(BSe,"STRONG",{});var OMt=s(mFe);X9r=r(OMt,"electra"),OMt.forEach(t),z9r=r(BSe," \u2014 "),TH=n(BSe,"A",{href:!0});var VMt=s(TH);Q9r=r(VMt,"FlaxElectraForTokenClassification"),VMt.forEach(t),W9r=r(BSe," (ELECTRA model)"),BSe.forEach(t),H9r=i(Oo),eE=n(Oo,"LI",{});var PSe=s(eE);gFe=n(PSe,"STRONG",{});var XMt=s(gFe);U9r=r(XMt,"roberta"),XMt.forEach(t),J9r=r(PSe," \u2014 "),MH=n(PSe,"A",{href:!0});var zMt=s(MH);Y9r=r(zMt,"FlaxRobertaForTokenClassification"),zMt.forEach(t),K9r=r(PSe," (RoBERTa model)"),PSe.forEach(t),Z9r=i(Oo),oE=n(Oo,"LI",{});var $Se=s(oE);hFe=n($Se,"STRONG",{});var QMt=s(hFe);exr=r(QMt,"roformer"),QMt.forEach(t),oxr=r($Se," \u2014 "),EH=n($Se,"A",{href:!0});var WMt=s(EH);rxr=r(WMt,"FlaxRoFormerForTokenClassification"),WMt.forEach(t),txr=r($Se," (RoFormer model)"),$Se.forEach(t),axr=i(Oo),rE=n(Oo,"LI",{});var ISe=s(rE);pFe=n(ISe,"STRONG",{});var HMt=s(pFe);nxr=r(HMt,"xlm-roberta"),HMt.forEach(t),sxr=r(ISe," \u2014 "),CH=n(ISe,"A",{href:!0});var UMt=s(CH);lxr=r(UMt,"FlaxXLMRobertaForTokenClassification"),UMt.forEach(t),ixr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),Oo.forEach(t),dxr=i($a),_Fe=n($a,"P",{});var JMt=s(_Fe);cxr=r(JMt,"Examples:"),JMt.forEach(t),fxr=i($a),m(qL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),OBe=i(c),Ef=n(c,"H2",{class:!0});var Z$e=s(Ef);tE=n(Z$e,"A",{id:!0,class:!0,href:!0});var YMt=s(tE);uFe=n(YMt,"SPAN",{});var KMt=s(uFe);m(NL.$$.fragment,KMt),KMt.forEach(t),YMt.forEach(t),mxr=i(Z$e),bFe=n(Z$e,"SPAN",{});var ZMt=s(bFe);gxr=r(ZMt,"FlaxAutoModelForMultipleChoice"),ZMt.forEach(t),Z$e.forEach(t),VBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(jL.$$.fragment,Li),hxr=i(Li),Cf=n(Li,"P",{});var PJ=s(Cf);pxr=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wH=n(PJ,"A",{href:!0});var e4t=s(wH);_xr=r(e4t,"from_pretrained()"),e4t.forEach(t),uxr=r(PJ," class method or the "),AH=n(PJ,"A",{href:!0});var o4t=s(AH);bxr=r(o4t,"from_config()"),o4t.forEach(t),Fxr=r(PJ,` class
method.`),PJ.forEach(t),vxr=i(Li),DL=n(Li,"P",{});var eIe=s(DL);Txr=r(eIe,"This class cannot be instantiated directly using "),FFe=n(eIe,"CODE",{});var r4t=s(FFe);Mxr=r(r4t,"__init__()"),r4t.forEach(t),Exr=r(eIe," (throws an error)."),eIe.forEach(t),Cxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(GL.$$.fragment,xi),wxr=i(xi),vFe=n(xi,"P",{});var t4t=s(vFe);Axr=r(t4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t4t.forEach(t),yxr=i(xi),wf=n(xi,"P",{});var $J=s(wf);Lxr=r($J,`Note:
Loading a model from its configuration file does `),TFe=n($J,"STRONG",{});var a4t=s(TFe);xxr=r(a4t,"not"),a4t.forEach(t),kxr=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n($J,"A",{href:!0});var n4t=s(yH);Sxr=r(n4t,"from_pretrained()"),n4t.forEach(t),Rxr=r($J," to load the model weights."),$J.forEach(t),Bxr=i(xi),MFe=n(xi,"P",{});var s4t=s(MFe);Pxr=r(s4t,"Examples:"),s4t.forEach(t),$xr=i(xi),m(OL.$$.fragment,xi),xi.forEach(t),Ixr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(VL.$$.fragment,Ia),qxr=i(Ia),EFe=n(Ia,"P",{});var l4t=s(EFe);Nxr=r(l4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l4t.forEach(t),jxr=i(Ia),qn=n(Ia,"P",{});var hC=s(qn);Dxr=r(hC,"The model class to instantiate is selected based on the "),CFe=n(hC,"CODE",{});var i4t=s(CFe);Gxr=r(i4t,"model_type"),i4t.forEach(t),Oxr=r(hC,` property of the config object (either
passed as an argument or loaded from `),wFe=n(hC,"CODE",{});var d4t=s(wFe);Vxr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),Xxr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(hC,"CODE",{});var c4t=s(AFe);zxr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),Qxr=r(hC,":"),hC.forEach(t),Wxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);aE=n(Vo,"LI",{});var qSe=s(aE);yFe=n(qSe,"STRONG",{});var f4t=s(yFe);Hxr=r(f4t,"albert"),f4t.forEach(t),Uxr=r(qSe," \u2014 "),LH=n(qSe,"A",{href:!0});var m4t=s(LH);Jxr=r(m4t,"FlaxAlbertForMultipleChoice"),m4t.forEach(t),Yxr=r(qSe," (ALBERT model)"),qSe.forEach(t),Kxr=i(Vo),nE=n(Vo,"LI",{});var NSe=s(nE);LFe=n(NSe,"STRONG",{});var g4t=s(LFe);Zxr=r(g4t,"bert"),g4t.forEach(t),ekr=r(NSe," \u2014 "),xH=n(NSe,"A",{href:!0});var h4t=s(xH);okr=r(h4t,"FlaxBertForMultipleChoice"),h4t.forEach(t),rkr=r(NSe," (BERT model)"),NSe.forEach(t),tkr=i(Vo),sE=n(Vo,"LI",{});var jSe=s(sE);xFe=n(jSe,"STRONG",{});var p4t=s(xFe);akr=r(p4t,"big_bird"),p4t.forEach(t),nkr=r(jSe," \u2014 "),kH=n(jSe,"A",{href:!0});var _4t=s(kH);skr=r(_4t,"FlaxBigBirdForMultipleChoice"),_4t.forEach(t),lkr=r(jSe," (BigBird model)"),jSe.forEach(t),ikr=i(Vo),lE=n(Vo,"LI",{});var DSe=s(lE);kFe=n(DSe,"STRONG",{});var u4t=s(kFe);dkr=r(u4t,"distilbert"),u4t.forEach(t),ckr=r(DSe," \u2014 "),SH=n(DSe,"A",{href:!0});var b4t=s(SH);fkr=r(b4t,"FlaxDistilBertForMultipleChoice"),b4t.forEach(t),mkr=r(DSe," (DistilBERT model)"),DSe.forEach(t),gkr=i(Vo),iE=n(Vo,"LI",{});var GSe=s(iE);SFe=n(GSe,"STRONG",{});var F4t=s(SFe);hkr=r(F4t,"electra"),F4t.forEach(t),pkr=r(GSe," \u2014 "),RH=n(GSe,"A",{href:!0});var v4t=s(RH);_kr=r(v4t,"FlaxElectraForMultipleChoice"),v4t.forEach(t),ukr=r(GSe," (ELECTRA model)"),GSe.forEach(t),bkr=i(Vo),dE=n(Vo,"LI",{});var OSe=s(dE);RFe=n(OSe,"STRONG",{});var T4t=s(RFe);Fkr=r(T4t,"roberta"),T4t.forEach(t),vkr=r(OSe," \u2014 "),BH=n(OSe,"A",{href:!0});var M4t=s(BH);Tkr=r(M4t,"FlaxRobertaForMultipleChoice"),M4t.forEach(t),Mkr=r(OSe," (RoBERTa model)"),OSe.forEach(t),Ekr=i(Vo),cE=n(Vo,"LI",{});var VSe=s(cE);BFe=n(VSe,"STRONG",{});var E4t=s(BFe);Ckr=r(E4t,"roformer"),E4t.forEach(t),wkr=r(VSe," \u2014 "),PH=n(VSe,"A",{href:!0});var C4t=s(PH);Akr=r(C4t,"FlaxRoFormerForMultipleChoice"),C4t.forEach(t),ykr=r(VSe," (RoFormer model)"),VSe.forEach(t),Lkr=i(Vo),fE=n(Vo,"LI",{});var XSe=s(fE);PFe=n(XSe,"STRONG",{});var w4t=s(PFe);xkr=r(w4t,"xlm-roberta"),w4t.forEach(t),kkr=r(XSe," \u2014 "),$H=n(XSe,"A",{href:!0});var A4t=s($H);Skr=r(A4t,"FlaxXLMRobertaForMultipleChoice"),A4t.forEach(t),Rkr=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),Vo.forEach(t),Bkr=i(Ia),$Fe=n(Ia,"P",{});var y4t=s($Fe);Pkr=r(y4t,"Examples:"),y4t.forEach(t),$kr=i(Ia),m(XL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),XBe=i(c),Af=n(c,"H2",{class:!0});var oIe=s(Af);mE=n(oIe,"A",{id:!0,class:!0,href:!0});var L4t=s(mE);IFe=n(L4t,"SPAN",{});var x4t=s(IFe);m(zL.$$.fragment,x4t),x4t.forEach(t),L4t.forEach(t),Ikr=i(oIe),qFe=n(oIe,"SPAN",{});var k4t=s(qFe);qkr=r(k4t,"FlaxAutoModelForNextSentencePrediction"),k4t.forEach(t),oIe.forEach(t),zBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(QL.$$.fragment,ki),Nkr=i(ki),yf=n(ki,"P",{});var IJ=s(yf);jkr=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IH=n(IJ,"A",{href:!0});var S4t=s(IH);Dkr=r(S4t,"from_pretrained()"),S4t.forEach(t),Gkr=r(IJ," class method or the "),qH=n(IJ,"A",{href:!0});var R4t=s(qH);Okr=r(R4t,"from_config()"),R4t.forEach(t),Vkr=r(IJ,` class
method.`),IJ.forEach(t),Xkr=i(ki),WL=n(ki,"P",{});var rIe=s(WL);zkr=r(rIe,"This class cannot be instantiated directly using "),NFe=n(rIe,"CODE",{});var B4t=s(NFe);Qkr=r(B4t,"__init__()"),B4t.forEach(t),Wkr=r(rIe," (throws an error)."),rIe.forEach(t),Hkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(HL.$$.fragment,Si),Ukr=i(Si),jFe=n(Si,"P",{});var P4t=s(jFe);Jkr=r(P4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P4t.forEach(t),Ykr=i(Si),Lf=n(Si,"P",{});var qJ=s(Lf);Kkr=r(qJ,`Note:
Loading a model from its configuration file does `),DFe=n(qJ,"STRONG",{});var $4t=s(DFe);Zkr=r($4t,"not"),$4t.forEach(t),eSr=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(qJ,"A",{href:!0});var I4t=s(NH);oSr=r(I4t,"from_pretrained()"),I4t.forEach(t),rSr=r(qJ," to load the model weights."),qJ.forEach(t),tSr=i(Si),GFe=n(Si,"P",{});var q4t=s(GFe);aSr=r(q4t,"Examples:"),q4t.forEach(t),nSr=i(Si),m(UL.$$.fragment,Si),Si.forEach(t),sSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(JL.$$.fragment,qa),lSr=i(qa),OFe=n(qa,"P",{});var N4t=s(OFe);iSr=r(N4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N4t.forEach(t),dSr=i(qa),Nn=n(qa,"P",{});var pC=s(Nn);cSr=r(pC,"The model class to instantiate is selected based on the "),VFe=n(pC,"CODE",{});var j4t=s(VFe);fSr=r(j4t,"model_type"),j4t.forEach(t),mSr=r(pC,` property of the config object (either
passed as an argument or loaded from `),XFe=n(pC,"CODE",{});var D4t=s(XFe);gSr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),hSr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(pC,"CODE",{});var G4t=s(zFe);pSr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),_Sr=r(pC,":"),pC.forEach(t),uSr=i(qa),QFe=n(qa,"UL",{});var O4t=s(QFe);gE=n(O4t,"LI",{});var zSe=s(gE);WFe=n(zSe,"STRONG",{});var V4t=s(WFe);bSr=r(V4t,"bert"),V4t.forEach(t),FSr=r(zSe," \u2014 "),jH=n(zSe,"A",{href:!0});var X4t=s(jH);vSr=r(X4t,"FlaxBertForNextSentencePrediction"),X4t.forEach(t),TSr=r(zSe," (BERT model)"),zSe.forEach(t),O4t.forEach(t),MSr=i(qa),HFe=n(qa,"P",{});var z4t=s(HFe);ESr=r(z4t,"Examples:"),z4t.forEach(t),CSr=i(qa),m(YL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),QBe=i(c),xf=n(c,"H2",{class:!0});var tIe=s(xf);hE=n(tIe,"A",{id:!0,class:!0,href:!0});var Q4t=s(hE);UFe=n(Q4t,"SPAN",{});var W4t=s(UFe);m(KL.$$.fragment,W4t),W4t.forEach(t),Q4t.forEach(t),wSr=i(tIe),JFe=n(tIe,"SPAN",{});var H4t=s(JFe);ASr=r(H4t,"FlaxAutoModelForImageClassification"),H4t.forEach(t),tIe.forEach(t),WBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(ZL.$$.fragment,Ri),ySr=i(Ri),kf=n(Ri,"P",{});var NJ=s(kf);LSr=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DH=n(NJ,"A",{href:!0});var U4t=s(DH);xSr=r(U4t,"from_pretrained()"),U4t.forEach(t),kSr=r(NJ," class method or the "),GH=n(NJ,"A",{href:!0});var J4t=s(GH);SSr=r(J4t,"from_config()"),J4t.forEach(t),RSr=r(NJ,` class
method.`),NJ.forEach(t),BSr=i(Ri),e8=n(Ri,"P",{});var aIe=s(e8);PSr=r(aIe,"This class cannot be instantiated directly using "),YFe=n(aIe,"CODE",{});var Y4t=s(YFe);$Sr=r(Y4t,"__init__()"),Y4t.forEach(t),ISr=r(aIe," (throws an error)."),aIe.forEach(t),qSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(o8.$$.fragment,Bi),NSr=i(Bi),KFe=n(Bi,"P",{});var K4t=s(KFe);jSr=r(K4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K4t.forEach(t),DSr=i(Bi),Sf=n(Bi,"P",{});var jJ=s(Sf);GSr=r(jJ,`Note:
Loading a model from its configuration file does `),ZFe=n(jJ,"STRONG",{});var Z4t=s(ZFe);OSr=r(Z4t,"not"),Z4t.forEach(t),VSr=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(jJ,"A",{href:!0});var eEt=s(OH);XSr=r(eEt,"from_pretrained()"),eEt.forEach(t),zSr=r(jJ," to load the model weights."),jJ.forEach(t),QSr=i(Bi),eve=n(Bi,"P",{});var oEt=s(eve);WSr=r(oEt,"Examples:"),oEt.forEach(t),HSr=i(Bi),m(r8.$$.fragment,Bi),Bi.forEach(t),USr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(t8.$$.fragment,Na),JSr=i(Na),ove=n(Na,"P",{});var rEt=s(ove);YSr=r(rEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rEt.forEach(t),KSr=i(Na),jn=n(Na,"P",{});var _C=s(jn);ZSr=r(_C,"The model class to instantiate is selected based on the "),rve=n(_C,"CODE",{});var tEt=s(rve);eRr=r(tEt,"model_type"),tEt.forEach(t),oRr=r(_C,` property of the config object (either
passed as an argument or loaded from `),tve=n(_C,"CODE",{});var aEt=s(tve);rRr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),tRr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(_C,"CODE",{});var nEt=s(ave);aRr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),nRr=r(_C,":"),_C.forEach(t),sRr=i(Na),a8=n(Na,"UL",{});var nIe=s(a8);pE=n(nIe,"LI",{});var QSe=s(pE);nve=n(QSe,"STRONG",{});var sEt=s(nve);lRr=r(sEt,"beit"),sEt.forEach(t),iRr=r(QSe," \u2014 "),VH=n(QSe,"A",{href:!0});var lEt=s(VH);dRr=r(lEt,"FlaxBeitForImageClassification"),lEt.forEach(t),cRr=r(QSe," (BEiT model)"),QSe.forEach(t),fRr=i(nIe),_E=n(nIe,"LI",{});var WSe=s(_E);sve=n(WSe,"STRONG",{});var iEt=s(sve);mRr=r(iEt,"vit"),iEt.forEach(t),gRr=r(WSe," \u2014 "),XH=n(WSe,"A",{href:!0});var dEt=s(XH);hRr=r(dEt,"FlaxViTForImageClassification"),dEt.forEach(t),pRr=r(WSe," (ViT model)"),WSe.forEach(t),nIe.forEach(t),_Rr=i(Na),lve=n(Na,"P",{});var cEt=s(lve);uRr=r(cEt,"Examples:"),cEt.forEach(t),bRr=i(Na),m(n8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),HBe=i(c),Rf=n(c,"H2",{class:!0});var sIe=s(Rf);uE=n(sIe,"A",{id:!0,class:!0,href:!0});var fEt=s(uE);ive=n(fEt,"SPAN",{});var mEt=s(ive);m(s8.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),FRr=i(sIe),dve=n(sIe,"SPAN",{});var gEt=s(dve);vRr=r(gEt,"FlaxAutoModelForVision2Seq"),gEt.forEach(t),sIe.forEach(t),UBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(l8.$$.fragment,Pi),TRr=i(Pi),Bf=n(Pi,"P",{});var DJ=s(Bf);MRr=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zH=n(DJ,"A",{href:!0});var hEt=s(zH);ERr=r(hEt,"from_pretrained()"),hEt.forEach(t),CRr=r(DJ," class method or the "),QH=n(DJ,"A",{href:!0});var pEt=s(QH);wRr=r(pEt,"from_config()"),pEt.forEach(t),ARr=r(DJ,` class
method.`),DJ.forEach(t),yRr=i(Pi),i8=n(Pi,"P",{});var lIe=s(i8);LRr=r(lIe,"This class cannot be instantiated directly using "),cve=n(lIe,"CODE",{});var _Et=s(cve);xRr=r(_Et,"__init__()"),_Et.forEach(t),kRr=r(lIe," (throws an error)."),lIe.forEach(t),SRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(d8.$$.fragment,$i),RRr=i($i),fve=n($i,"P",{});var uEt=s(fve);BRr=r(uEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uEt.forEach(t),PRr=i($i),Pf=n($i,"P",{});var GJ=s(Pf);$Rr=r(GJ,`Note:
Loading a model from its configuration file does `),mve=n(GJ,"STRONG",{});var bEt=s(mve);IRr=r(bEt,"not"),bEt.forEach(t),qRr=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(GJ,"A",{href:!0});var FEt=s(WH);NRr=r(FEt,"from_pretrained()"),FEt.forEach(t),jRr=r(GJ," to load the model weights."),GJ.forEach(t),DRr=i($i),gve=n($i,"P",{});var vEt=s(gve);GRr=r(vEt,"Examples:"),vEt.forEach(t),ORr=i($i),m(c8.$$.fragment,$i),$i.forEach(t),VRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(f8.$$.fragment,ja),XRr=i(ja),hve=n(ja,"P",{});var TEt=s(hve);zRr=r(TEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TEt.forEach(t),QRr=i(ja),Dn=n(ja,"P",{});var uC=s(Dn);WRr=r(uC,"The model class to instantiate is selected based on the "),pve=n(uC,"CODE",{});var MEt=s(pve);HRr=r(MEt,"model_type"),MEt.forEach(t),URr=r(uC,` property of the config object (either
passed as an argument or loaded from `),_ve=n(uC,"CODE",{});var EEt=s(_ve);JRr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),YRr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(uC,"CODE",{});var CEt=s(uve);KRr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),ZRr=r(uC,":"),uC.forEach(t),eBr=i(ja),bve=n(ja,"UL",{});var wEt=s(bve);bE=n(wEt,"LI",{});var HSe=s(bE);Fve=n(HSe,"STRONG",{});var AEt=s(Fve);oBr=r(AEt,"vision-encoder-decoder"),AEt.forEach(t),rBr=r(HSe," \u2014 "),HH=n(HSe,"A",{href:!0});var yEt=s(HH);tBr=r(yEt,"FlaxVisionEncoderDecoderModel"),yEt.forEach(t),aBr=r(HSe," (Vision Encoder decoder model)"),HSe.forEach(t),wEt.forEach(t),nBr=i(ja),vve=n(ja,"P",{});var LEt=s(vve);sBr=r(LEt,"Examples:"),LEt.forEach(t),lBr=i(ja),m(m8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(NEt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(_9,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(u9,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig"),d(b9,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig"),d(F9,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig"),d(v9,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig"),d(T9,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(M9,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig"),d(E9,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(C9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(w9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(A9,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig"),d(y9,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig"),d(L9,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig"),d(x9,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig"),d(k9,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig"),d(S9,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig"),d(R9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(B9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(P9,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig"),d($9,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(I9,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(q9,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig"),d(N9,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig"),d(j9,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig"),d(D9,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig"),d(G9,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig"),d(O9,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig"),d(V9,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(X9,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig"),d(z9,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig"),d(Q9,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig"),d(W9,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig"),d(H9,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig"),d(U9,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config"),d(J9,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Y9,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig"),d(K9,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig"),d(Z9,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig"),d(ex,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ox,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(rx,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(tx,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig"),d(ax,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig"),d(nx,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig"),d(sx,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig"),d(lx,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config"),d(ix,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig"),d(dx,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(cx,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig"),d(fx,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(mx,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(gx,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig"),d(hx,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config"),d(px,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(_x,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(ux,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig"),d(bx,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Fx,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig"),d(vx,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Tx,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Mx,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Ex,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagConfig"),d(Cx,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmConfig"),d(wx,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig"),d(Ax,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig"),d(yx,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig"),d(Lx,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig"),d(xx,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig"),d(kx,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig"),d(Sx,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig"),d(Rx,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig"),d(Bx,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig"),d(Px,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d($x,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Ix,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(qx,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig"),d(Nx,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(jx,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig"),d(Dx,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config"),d(Gx,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig"),d(Ox,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Vx,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig"),d(Xx,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(zx,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Qx,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig"),d(Wx,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig"),d(Hx,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Ux,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Jx,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Yx,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig"),d(Kx,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Zx,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(ek,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig"),d(ok,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig"),d(rk,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig"),d(tk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ak,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(nk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(sk,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig"),d(lk,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ig,"class","docstring"),d(Qo,"class","docstring"),d(qg,"id","transformers.AutoTokenizer"),d(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(ik,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(dk,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizer"),d(ck,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(fk,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizer"),d(mk,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizerFast"),d(gk,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizer"),d(hk,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(pk,"href","/docs/transformers/pr_15773/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(_k,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(uk,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d(bk,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Fk,"href","/docs/transformers/pr_15773/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(vk,"href","/docs/transformers/pr_15773/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Tk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Mk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Ek,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ck,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(wk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ak,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(yk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Lk,"href","/docs/transformers/pr_15773/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(xk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizer"),d(kk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Sk,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineTokenizer"),d(Rk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizer"),d(Bk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Pk,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizer"),d($k,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ik,"href","/docs/transformers/pr_15773/en/model_doc/cpm#transformers.CpmTokenizer"),d(qk,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Nk,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizer"),d(jk,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Dk,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Gk,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Ok,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Xk,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(zk,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizer"),d(Qk,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Wk,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Hk,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizer"),d(Uk,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Jk,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Yk,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Kk,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Zk,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(eS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(oS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(rS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(tS,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizer"),d(aS,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(nS,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(dS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(cS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(fS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(mS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(gS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(hS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizer"),d(pS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizerFast"),d(_S,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizer"),d(uS,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(bS,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeTokenizer"),d(FS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(vS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(TS,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(MS,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianTokenizer"),d(ES,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizer"),d(CS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(wS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(AS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(yS,"href","/docs/transformers/pr_15773/en/model_doc/mluke#transformers.MLukeTokenizer"),d(LS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(xS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(kS,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(SS,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(RS,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Tokenizer"),d(BS,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5TokenizerFast"),d(PS,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d($S,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(IS,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(qS,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(NS,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(jS,"href","/docs/transformers/pr_15773/en/model_doc/phobert#transformers.PhobertTokenizer"),d(DS,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartTokenizer"),d(GS,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(OS,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(VS,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d(XS,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagTokenizer"),d(zS,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizer"),d(QS,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizerFast"),d(WS,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizer"),d(HS,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(US,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizer"),d(JS,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(YS,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(KS,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(ZS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(eR,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(oR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(rR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(tR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(aR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(nR,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizer"),d(sR,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(lR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(iR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(dR,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Tokenizer"),d(cR,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5TokenizerFast"),d(fR,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasTokenizer"),d(mR,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(gR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(hR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(pR,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizer"),d(_R,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(uR,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMTokenizer"),d(bR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(FR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(vR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(TR,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(MR,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(hh,"class","docstring"),d(Wo,"class","docstring"),d(ph,"id","transformers.AutoFeatureExtractor"),d(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ph,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(ER,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(CR,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(wR,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(AR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yR,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(LR,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(xR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(kR,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(SR,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(RR,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(BR,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(PR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d($R,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(IR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(qR,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jR,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(GR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d($h,"class","docstring"),d(Ho,"class","docstring"),d(Ih,"id","transformers.AutoProcessor"),d(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ih,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(OR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(VR,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPProcessor"),d(XR,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(zR,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(QR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(WR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(HR,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRProcessor"),d(UR,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(JR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Qh,"class","docstring"),d(Uo,"class","docstring"),d(Wh,"id","transformers.AutoModel"),d(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(YR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(eB,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel"),d(oB,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel"),d(rB,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel"),d(tB,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(aB,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(nB,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel"),d(sB,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(lB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(iB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(dB,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel"),d(cB,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel"),d(fB,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel"),d(mB,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel"),d(gB,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel"),d(hB,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel"),d(pB,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(_B,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(uB,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel"),d(bB,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(FB,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(vB,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel"),d(TB,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel"),d(MB,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel"),d(EB,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(CB,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel"),d(wB,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel"),d(AB,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel"),d(yB,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel"),d(LB,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel"),d(xB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel"),d(kB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel"),d(SB,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel"),d(RB,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model"),d(BB,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(PB,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel"),d($B,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel"),d(IB,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel"),d(qB,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(NB,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(jB,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(DB,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel"),d(GB,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel"),d(OB,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel"),d(VB,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel"),d(XB,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model"),d(zB,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel"),d(QB,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel"),d(WB,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel"),d(HB,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(UB,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel"),d(JB,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel"),d(YB,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model"),d(KB,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel"),d(ZB,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(eP,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel"),d(oP,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel"),d(rP,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel"),d(tP,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel"),d(aP,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(nP,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel"),d(sP,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel"),d(lP,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel"),d(iP,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel"),d(dP,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(cP,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel"),d(fP,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel"),d(mP,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel"),d(gP,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel"),d(hP,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel"),d(pP,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(_P,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel"),d(uP,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(bP,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel"),d(FP,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model"),d(vP,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel"),d(TP,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(MP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel"),d(EP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(CP,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel"),d(wP,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel"),d(AP,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(yP,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel"),d(LP,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel"),d(xP,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(kP,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(SP,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel"),d(RP,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel"),d(BP,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel"),d(PP,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d($P,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(IP,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(qP,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel"),d(NP,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(B_,"id","transformers.AutoModelForPreTraining"),d(B_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(jP,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DP,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GP,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(OP,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining"),d(VP,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(XP,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining"),d(zP,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(QP,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(WP,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(HP,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(UP,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(JP,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(YP,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(KP,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining"),d(ZP,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(e$,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining"),d(o$,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(t$,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(a$,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(n$,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(s$,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(l$,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(i$,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(d$,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(c$,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(f$,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(m$,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(g$,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(h$,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(_$,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(u$,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(b$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(F$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(v$,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(T$,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(M$,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(E$,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(C$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(w$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(A$,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(vu,"id","transformers.AutoModelForCausalLM"),d(vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(y$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(L$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(x$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(k$,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM"),d(S$,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel"),d(R$,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(B$,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(P$,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d($$,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(I$,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(q$,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(N$,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(j$,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(D$,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM"),d(G$,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(O$,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(V$,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(X$,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM"),d(z$,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM"),d(Q$,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(W$,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(H$,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(U$,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(J$,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(Y$,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(K$,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(Z$,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(eI,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(oI,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(rI,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(tI,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(aI,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(nI,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(sI,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(lI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(iI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(dI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(cI,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(t1,"id","transformers.AutoModelForMaskedLM"),d(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(fI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(hI,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(pI,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM"),d(uI,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(bI,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(FI,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(vI,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(TI,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(MI,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(EI,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(CI,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(wI,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(AI,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(yI,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(LI,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(xI,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(kI,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(SI,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(BI,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d($I,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(II,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(qI,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(NI,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(jI,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(DI,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(GI,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(OI,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(XI,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(zI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(QI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(WI,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(D1,"id","transformers.AutoModelForSeq2SeqLM"),d(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(HI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(YI,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(rq,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel"),d(sq,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(a7,"id","transformers.AutoModelForSequenceClassification"),d(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a7,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(gq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(_q,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(uq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification"),d(bq,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(vq,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(wq,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(yq,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(xq,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(kq,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d($q,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(jq,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(zq,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(K7,"id","transformers.AutoModelForMultipleChoice"),d(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K7,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(iN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(fN,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice"),d(gN,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(hN,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(pN,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(_N,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(uN,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(bN,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(FN,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(vN,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(TN,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(MN,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(EN,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(wN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(LN,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(xN,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(BN,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d($N,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Lb,"id","transformers.AutoModelForNextSentencePrediction"),d(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(jN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(ON,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(XN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(zN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(QN,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d($b,"id","transformers.AutoModelForTokenClassification"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(WN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(JN,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(YN,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification"),d(KN,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(ZN,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(ej,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification"),d(oj,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(rj,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(tj,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(aj,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(nj,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(sj,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(lj,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(ij,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(dj,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(cj,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(fj,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(mj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(gj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(hj,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(pj,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(bj,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Fj,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Mj,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Ej,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(wj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Aj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(yj,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Lj,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(_5,"id","transformers.AutoModelForQuestionAnswering"),d(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_5,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(xj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Rj,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering"),d($j,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Qj,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(gD,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(_D,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(t3,"id","transformers.AutoModelForTableQuestionAnswering"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(uD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(vD,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(s3,"id","transformers.AutoModelForImageClassification"),d(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(TD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ED,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(CD,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification"),d(wD,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(AD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification"),d(yD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(LD,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(xD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(kD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(SD,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(RD,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(BD,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(PD,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification"),d($D,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification"),d(ID,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification"),d(qD,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(u3,"id","transformers.AutoModelForVision2Seq"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(ND,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(GD,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(v3,"id","transformers.AutoModelForAudioClassification"),d(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v3,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(OD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(zD,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(QD,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(WD,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(HD,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(UD,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(JD,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(YD,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(KD,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(k3,"id","transformers.AutoModelForAudioFrameClassification"),d(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k3,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(ZD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(rG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(tG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(aG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(nG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(I3,"id","transformers.AutoModelForCTC"),d(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I3,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(sG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(dG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(cG,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC"),d(fG,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC"),d(mG,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC"),d(gG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(hG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(pG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(_G,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Q3,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q3,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(uG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(vG,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(TG,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(J3,"id","transformers.AutoModelForAudioXVector"),d(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J3,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(MG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(wG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(AG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(yG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(LG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(r2,"id","transformers.AutoModelForMaskedImageModeling"),d(r2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(xG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(RG,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(BG,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(PG,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(l2,"id","transformers.AutoModelForObjectDetection"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d($G,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(NG,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(c2,"id","transformers.AutoModelForImageSegmentation"),d(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c2,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(jG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(OG,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(g2,"id","transformers.AutoModelForSemanticSegmentation"),d(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g2,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(VG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(QG,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(WG,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(HG,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(b2,"id","transformers.AutoModelForInstanceSegmentation"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(UG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(KG,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(T2,"id","transformers.TFAutoModel"),d(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(ZG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(rO,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel"),d(tO,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel"),d(aO,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel"),d(nO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(sO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(lO,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel"),d(iO,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel"),d(dO,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel"),d(cO,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel"),d(fO,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel"),d(mO,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel"),d(gO,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(hO,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(pO,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(_O,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel"),d(uO,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(bO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel"),d(FO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(vO,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model"),d(TO,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel"),d(MO,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel"),d(EO,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(CO,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel"),d(wO,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel"),d(AO,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel"),d(yO,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel"),d(LO,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel"),d(xO,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(kO,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel"),d(SO,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model"),d(RO,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(BO,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel"),d(PO,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel"),d($O,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel"),d(IO,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel"),d(qO,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(NO,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model"),d(jO,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel"),d(DO,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(GO,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel"),d(OO,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(VO,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(XO,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel"),d(zO,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(QO,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(fF,"id","transformers.TFAutoModelForPreTraining"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(WO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(JO,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(YO,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(KO,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining"),d(ZO,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(eV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(oV,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rV,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(tV,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aV,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(nV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(sV,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(lV,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(iV,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(dV,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(cV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(fV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(mV,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(hV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(pV,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(_V,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d($F,"id","transformers.TFAutoModelForCausalLM"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(FV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(MV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(EV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(CV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(wV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(AV,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(yV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(LV,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(xV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(kV,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(SV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(RV,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(BV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(HF,"id","transformers.TFAutoModelForImageClassification"),d(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HF,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(PV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($V,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(qV,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(NV,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(YF,"id","transformers.TFAutoModelForMaskedLM"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(jV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(OV,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(VV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(XV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(zV,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(QV,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(WV,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(HV,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(UV,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(JV,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(YV,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(KV,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(ZV,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(eX,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(oX,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(rX,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(tX,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(aX,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(nX,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(sX,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lX,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(bv,"id","transformers.TFAutoModelForSeq2SeqLM"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(iX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(fX,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(pX,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel"),d(uX,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(xv,"id","transformers.TFAutoModelForSequenceClassification"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(TX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(CX,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(wX,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(LX,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(xX,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(kX,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(SX,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(BX,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(PX,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d($X,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(IX,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(qX,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(NX,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(jX,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(GX,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(OX,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(XX,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(zX,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(QX,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(WX,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(HX,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(rT,"id","transformers.TFAutoModelForMultipleChoice"),d(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(JX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(ZX,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(ez,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(rz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(tz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(az,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(nz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(sz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(lz,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(iz,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(dz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(cz,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(fz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(mz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(gz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(hz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(pz,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(vT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(_z,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Fz,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(MT,"id","transformers.TFAutoModelForTokenClassification"),d(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(vz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Ez,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(wz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Az,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(yz,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Lz,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(xz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(kz,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Sz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Rz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Bz,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Pz,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d($z,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Iz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(qz,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Nz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(jz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Dz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Gz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Oz,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForQuestionAnswering"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Vz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Qz,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(oQ,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(cQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(cM,"id","transformers.TFAutoModelForVision2Seq"),d(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(mQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(pQ,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(mM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(_Q,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(FQ,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(hM,"id","transformers.FlaxAutoModel"),d(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(vQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(EQ,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel"),d(CQ,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel"),d(wQ,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel"),d(AQ,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel"),d(yQ,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(LQ,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(xQ,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(kQ,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel"),d(SQ,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(RQ,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel"),d(BQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(PQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d($Q,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(IQ,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel"),d(qQ,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel"),d(NQ,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model"),d(jQ,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(DQ,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(GQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(OQ,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model"),d(VQ,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(XQ,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel"),d(zQ,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(QQ,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(WQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(DM,"id","transformers.FlaxAutoModelForCausalLM"),d(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(HQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(YQ,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(KQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(ZQ,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(eW,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(oW,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(QM,"id","transformers.FlaxAutoModelForPreTraining"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(rW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(nW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(sW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(lW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(iW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(dW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(cW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(mW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(gW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(hW,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(pW,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(_W,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(n4,"id","transformers.FlaxAutoModelForMaskedLM"),d(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(uW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(vW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(TW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(MW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(EW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(CW,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(wW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(AW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(yW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(LW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(xW,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(_4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(kW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(BW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d($W,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(qW,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(NW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(A4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(OW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(zW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(QW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(WW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(HW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(UW,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(JW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(YW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(KW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(ZW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(eH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(q4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(oH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(aH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(mH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(gH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(H4,"id","transformers.FlaxAutoModelForTokenClassification"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(hH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(uH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(bH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(FH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(vH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(TH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(MH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(EH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(CH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(wH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(LH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(xH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(kH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(SH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(RH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(BH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(PH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d($H,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(IH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(jH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(hE,"id","transformers.FlaxAutoModelForImageClassification"),d(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(DH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(VH,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(XH,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(uE,"id","transformers.FlaxAutoModelForVision2Seq"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(zH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(HH,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,bC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,FC),e(co,On),e(co,Vn),e(Vn,vC),e(co,Di),e(co,Xn),e(Xn,TC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,c9),e(_e,Oi),e(Oi,f9),e(_e,m9),b(c,zo,u),b(c,Ga,u),e(Ga,g9),e(Ga,Df),e(Df,h9),e(Ga,iIe),b(c,USe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,OJ),g(MC,OJ,null),e(Vi,dIe),e(Vi,VJ),e(VJ,cIe),b(c,JSe,u),b(c,zn,u),e(zn,fIe),e(zn,XJ),e(XJ,mIe),e(zn,gIe),e(zn,zJ),e(zJ,hIe),e(zn,pIe),b(c,YSe,u),g(EC,c,u),b(c,KSe,u),b(c,p9,u),e(p9,_Ie),b(c,ZSe,u),g(Of,c,u),b(c,eRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,QJ),g(CC,QJ,null),e(Xi,uIe),e(Xi,WJ),e(WJ,bIe),b(c,oRe,u),b(c,Qo,u),g(wC,Qo,null),e(Qo,FIe),e(Qo,AC),e(AC,vIe),e(AC,_9),e(_9,TIe),e(AC,MIe),e(Qo,EIe),e(Qo,yC),e(yC,CIe),e(yC,HJ),e(HJ,wIe),e(yC,AIe),e(Qo,yIe),e(Qo,mo),g(LC,mo,null),e(mo,LIe),e(mo,UJ),e(UJ,xIe),e(mo,kIe),e(mo,zi),e(zi,SIe),e(zi,JJ),e(JJ,RIe),e(zi,BIe),e(zi,YJ),e(YJ,PIe),e(zi,$Ie),e(mo,IIe),e(mo,F),e(F,Xf),e(Xf,KJ),e(KJ,qIe),e(Xf,NIe),e(Xf,u9),e(u9,jIe),e(Xf,DIe),e(F,GIe),e(F,zf),e(zf,ZJ),e(ZJ,OIe),e(zf,VIe),e(zf,b9),e(b9,XIe),e(zf,zIe),e(F,QIe),e(F,Qf),e(Qf,eY),e(eY,WIe),e(Qf,HIe),e(Qf,F9),e(F9,UIe),e(Qf,JIe),e(F,YIe),e(F,Wf),e(Wf,oY),e(oY,KIe),e(Wf,ZIe),e(Wf,v9),e(v9,eqe),e(Wf,oqe),e(F,rqe),e(F,Hf),e(Hf,rY),e(rY,tqe),e(Hf,aqe),e(Hf,T9),e(T9,nqe),e(Hf,sqe),e(F,lqe),e(F,Uf),e(Uf,tY),e(tY,iqe),e(Uf,dqe),e(Uf,M9),e(M9,cqe),e(Uf,fqe),e(F,mqe),e(F,Jf),e(Jf,aY),e(aY,gqe),e(Jf,hqe),e(Jf,E9),e(E9,pqe),e(Jf,_qe),e(F,uqe),e(F,Yf),e(Yf,nY),e(nY,bqe),e(Yf,Fqe),e(Yf,C9),e(C9,vqe),e(Yf,Tqe),e(F,Mqe),e(F,Kf),e(Kf,sY),e(sY,Eqe),e(Kf,Cqe),e(Kf,w9),e(w9,wqe),e(Kf,Aqe),e(F,yqe),e(F,Zf),e(Zf,lY),e(lY,Lqe),e(Zf,xqe),e(Zf,A9),e(A9,kqe),e(Zf,Sqe),e(F,Rqe),e(F,em),e(em,iY),e(iY,Bqe),e(em,Pqe),e(em,y9),e(y9,$qe),e(em,Iqe),e(F,qqe),e(F,om),e(om,dY),e(dY,Nqe),e(om,jqe),e(om,L9),e(L9,Dqe),e(om,Gqe),e(F,Oqe),e(F,rm),e(rm,cY),e(cY,Vqe),e(rm,Xqe),e(rm,x9),e(x9,zqe),e(rm,Qqe),e(F,Wqe),e(F,tm),e(tm,fY),e(fY,Hqe),e(tm,Uqe),e(tm,k9),e(k9,Jqe),e(tm,Yqe),e(F,Kqe),e(F,am),e(am,mY),e(mY,Zqe),e(am,eNe),e(am,S9),e(S9,oNe),e(am,rNe),e(F,tNe),e(F,nm),e(nm,gY),e(gY,aNe),e(nm,nNe),e(nm,R9),e(R9,sNe),e(nm,lNe),e(F,iNe),e(F,sm),e(sm,hY),e(hY,dNe),e(sm,cNe),e(sm,B9),e(B9,fNe),e(sm,mNe),e(F,gNe),e(F,lm),e(lm,pY),e(pY,hNe),e(lm,pNe),e(lm,P9),e(P9,_Ne),e(lm,uNe),e(F,bNe),e(F,im),e(im,_Y),e(_Y,FNe),e(im,vNe),e(im,$9),e($9,TNe),e(im,MNe),e(F,ENe),e(F,dm),e(dm,uY),e(uY,CNe),e(dm,wNe),e(dm,I9),e(I9,ANe),e(dm,yNe),e(F,LNe),e(F,cm),e(cm,bY),e(bY,xNe),e(cm,kNe),e(cm,q9),e(q9,SNe),e(cm,RNe),e(F,BNe),e(F,fm),e(fm,FY),e(FY,PNe),e(fm,$Ne),e(fm,N9),e(N9,INe),e(fm,qNe),e(F,NNe),e(F,mm),e(mm,vY),e(vY,jNe),e(mm,DNe),e(mm,j9),e(j9,GNe),e(mm,ONe),e(F,VNe),e(F,gm),e(gm,TY),e(TY,XNe),e(gm,zNe),e(gm,D9),e(D9,QNe),e(gm,WNe),e(F,HNe),e(F,hm),e(hm,MY),e(MY,UNe),e(hm,JNe),e(hm,G9),e(G9,YNe),e(hm,KNe),e(F,ZNe),e(F,pm),e(pm,EY),e(EY,eje),e(pm,oje),e(pm,O9),e(O9,rje),e(pm,tje),e(F,aje),e(F,_m),e(_m,CY),e(CY,nje),e(_m,sje),e(_m,V9),e(V9,lje),e(_m,ije),e(F,dje),e(F,um),e(um,wY),e(wY,cje),e(um,fje),e(um,AY),e(AY,mje),e(um,gje),e(F,hje),e(F,bm),e(bm,yY),e(yY,pje),e(bm,_je),e(bm,X9),e(X9,uje),e(bm,bje),e(F,Fje),e(F,Fm),e(Fm,LY),e(LY,vje),e(Fm,Tje),e(Fm,z9),e(z9,Mje),e(Fm,Eje),e(F,Cje),e(F,vm),e(vm,xY),e(xY,wje),e(vm,Aje),e(vm,Q9),e(Q9,yje),e(vm,Lje),e(F,xje),e(F,Tm),e(Tm,kY),e(kY,kje),e(Tm,Sje),e(Tm,W9),e(W9,Rje),e(Tm,Bje),e(F,Pje),e(F,Mm),e(Mm,SY),e(SY,$je),e(Mm,Ije),e(Mm,H9),e(H9,qje),e(Mm,Nje),e(F,jje),e(F,Em),e(Em,RY),e(RY,Dje),e(Em,Gje),e(Em,U9),e(U9,Oje),e(Em,Vje),e(F,Xje),e(F,Cm),e(Cm,BY),e(BY,zje),e(Cm,Qje),e(Cm,J9),e(J9,Wje),e(Cm,Hje),e(F,Uje),e(F,wm),e(wm,PY),e(PY,Jje),e(wm,Yje),e(wm,Y9),e(Y9,Kje),e(wm,Zje),e(F,eDe),e(F,Am),e(Am,$Y),e($Y,oDe),e(Am,rDe),e(Am,K9),e(K9,tDe),e(Am,aDe),e(F,nDe),e(F,ym),e(ym,IY),e(IY,sDe),e(ym,lDe),e(ym,Z9),e(Z9,iDe),e(ym,dDe),e(F,cDe),e(F,Lm),e(Lm,qY),e(qY,fDe),e(Lm,mDe),e(Lm,ex),e(ex,gDe),e(Lm,hDe),e(F,pDe),e(F,xm),e(xm,NY),e(NY,_De),e(xm,uDe),e(xm,ox),e(ox,bDe),e(xm,FDe),e(F,vDe),e(F,km),e(km,jY),e(jY,TDe),e(km,MDe),e(km,rx),e(rx,EDe),e(km,CDe),e(F,wDe),e(F,Sm),e(Sm,DY),e(DY,ADe),e(Sm,yDe),e(Sm,tx),e(tx,LDe),e(Sm,xDe),e(F,kDe),e(F,Rm),e(Rm,GY),e(GY,SDe),e(Rm,RDe),e(Rm,ax),e(ax,BDe),e(Rm,PDe),e(F,$De),e(F,Bm),e(Bm,OY),e(OY,IDe),e(Bm,qDe),e(Bm,nx),e(nx,NDe),e(Bm,jDe),e(F,DDe),e(F,Pm),e(Pm,VY),e(VY,GDe),e(Pm,ODe),e(Pm,sx),e(sx,VDe),e(Pm,XDe),e(F,zDe),e(F,$m),e($m,XY),e(XY,QDe),e($m,WDe),e($m,lx),e(lx,HDe),e($m,UDe),e(F,JDe),e(F,Im),e(Im,zY),e(zY,YDe),e(Im,KDe),e(Im,ix),e(ix,ZDe),e(Im,eGe),e(F,oGe),e(F,qm),e(qm,QY),e(QY,rGe),e(qm,tGe),e(qm,dx),e(dx,aGe),e(qm,nGe),e(F,sGe),e(F,Nm),e(Nm,WY),e(WY,lGe),e(Nm,iGe),e(Nm,cx),e(cx,dGe),e(Nm,cGe),e(F,fGe),e(F,jm),e(jm,HY),e(HY,mGe),e(jm,gGe),e(jm,fx),e(fx,hGe),e(jm,pGe),e(F,_Ge),e(F,Dm),e(Dm,UY),e(UY,uGe),e(Dm,bGe),e(Dm,mx),e(mx,FGe),e(Dm,vGe),e(F,TGe),e(F,Gm),e(Gm,JY),e(JY,MGe),e(Gm,EGe),e(Gm,gx),e(gx,CGe),e(Gm,wGe),e(F,AGe),e(F,Om),e(Om,YY),e(YY,yGe),e(Om,LGe),e(Om,hx),e(hx,xGe),e(Om,kGe),e(F,SGe),e(F,Vm),e(Vm,KY),e(KY,RGe),e(Vm,BGe),e(Vm,px),e(px,PGe),e(Vm,$Ge),e(F,IGe),e(F,Xm),e(Xm,ZY),e(ZY,qGe),e(Xm,NGe),e(Xm,_x),e(_x,jGe),e(Xm,DGe),e(F,GGe),e(F,zm),e(zm,eK),e(eK,OGe),e(zm,VGe),e(zm,ux),e(ux,XGe),e(zm,zGe),e(F,QGe),e(F,Qm),e(Qm,oK),e(oK,WGe),e(Qm,HGe),e(Qm,bx),e(bx,UGe),e(Qm,JGe),e(F,YGe),e(F,Wm),e(Wm,rK),e(rK,KGe),e(Wm,ZGe),e(Wm,Fx),e(Fx,eOe),e(Wm,oOe),e(F,rOe),e(F,Hm),e(Hm,tK),e(tK,tOe),e(Hm,aOe),e(Hm,vx),e(vx,nOe),e(Hm,sOe),e(F,lOe),e(F,Um),e(Um,aK),e(aK,iOe),e(Um,dOe),e(Um,Tx),e(Tx,cOe),e(Um,fOe),e(F,mOe),e(F,Jm),e(Jm,nK),e(nK,gOe),e(Jm,hOe),e(Jm,Mx),e(Mx,pOe),e(Jm,_Oe),e(F,uOe),e(F,Ym),e(Ym,sK),e(sK,bOe),e(Ym,FOe),e(Ym,Ex),e(Ex,vOe),e(Ym,TOe),e(F,MOe),e(F,Km),e(Km,lK),e(lK,EOe),e(Km,COe),e(Km,Cx),e(Cx,wOe),e(Km,AOe),e(F,yOe),e(F,Zm),e(Zm,iK),e(iK,LOe),e(Zm,xOe),e(Zm,wx),e(wx,kOe),e(Zm,SOe),e(F,ROe),e(F,eg),e(eg,dK),e(dK,BOe),e(eg,POe),e(eg,Ax),e(Ax,$Oe),e(eg,IOe),e(F,qOe),e(F,og),e(og,cK),e(cK,NOe),e(og,jOe),e(og,yx),e(yx,DOe),e(og,GOe),e(F,OOe),e(F,rg),e(rg,fK),e(fK,VOe),e(rg,XOe),e(rg,Lx),e(Lx,zOe),e(rg,QOe),e(F,WOe),e(F,tg),e(tg,mK),e(mK,HOe),e(tg,UOe),e(tg,xx),e(xx,JOe),e(tg,YOe),e(F,KOe),e(F,ag),e(ag,gK),e(gK,ZOe),e(ag,eVe),e(ag,kx),e(kx,oVe),e(ag,rVe),e(F,tVe),e(F,ng),e(ng,hK),e(hK,aVe),e(ng,nVe),e(ng,Sx),e(Sx,sVe),e(ng,lVe),e(F,iVe),e(F,sg),e(sg,pK),e(pK,dVe),e(sg,cVe),e(sg,Rx),e(Rx,fVe),e(sg,mVe),e(F,gVe),e(F,lg),e(lg,_K),e(_K,hVe),e(lg,pVe),e(lg,Bx),e(Bx,_Ve),e(lg,uVe),e(F,bVe),e(F,ig),e(ig,uK),e(uK,FVe),e(ig,vVe),e(ig,Px),e(Px,TVe),e(ig,MVe),e(F,EVe),e(F,dg),e(dg,bK),e(bK,CVe),e(dg,wVe),e(dg,$x),e($x,AVe),e(dg,yVe),e(F,LVe),e(F,cg),e(cg,FK),e(FK,xVe),e(cg,kVe),e(cg,Ix),e(Ix,SVe),e(cg,RVe),e(F,BVe),e(F,fg),e(fg,vK),e(vK,PVe),e(fg,$Ve),e(fg,qx),e(qx,IVe),e(fg,qVe),e(F,NVe),e(F,mg),e(mg,TK),e(TK,jVe),e(mg,DVe),e(mg,Nx),e(Nx,GVe),e(mg,OVe),e(F,VVe),e(F,gg),e(gg,MK),e(MK,XVe),e(gg,zVe),e(gg,jx),e(jx,QVe),e(gg,WVe),e(F,HVe),e(F,hg),e(hg,EK),e(EK,UVe),e(hg,JVe),e(hg,Dx),e(Dx,YVe),e(hg,KVe),e(F,ZVe),e(F,pg),e(pg,CK),e(CK,eXe),e(pg,oXe),e(pg,Gx),e(Gx,rXe),e(pg,tXe),e(F,aXe),e(F,_g),e(_g,wK),e(wK,nXe),e(_g,sXe),e(_g,Ox),e(Ox,lXe),e(_g,iXe),e(F,dXe),e(F,ug),e(ug,AK),e(AK,cXe),e(ug,fXe),e(ug,Vx),e(Vx,mXe),e(ug,gXe),e(F,hXe),e(F,bg),e(bg,yK),e(yK,pXe),e(bg,_Xe),e(bg,Xx),e(Xx,uXe),e(bg,bXe),e(F,FXe),e(F,Fg),e(Fg,LK),e(LK,vXe),e(Fg,TXe),e(Fg,zx),e(zx,MXe),e(Fg,EXe),e(F,CXe),e(F,vg),e(vg,xK),e(xK,wXe),e(vg,AXe),e(vg,Qx),e(Qx,yXe),e(vg,LXe),e(F,xXe),e(F,Tg),e(Tg,kK),e(kK,kXe),e(Tg,SXe),e(Tg,Wx),e(Wx,RXe),e(Tg,BXe),e(F,PXe),e(F,Mg),e(Mg,SK),e(SK,$Xe),e(Mg,IXe),e(Mg,Hx),e(Hx,qXe),e(Mg,NXe),e(F,jXe),e(F,Eg),e(Eg,RK),e(RK,DXe),e(Eg,GXe),e(Eg,Ux),e(Ux,OXe),e(Eg,VXe),e(F,XXe),e(F,Cg),e(Cg,BK),e(BK,zXe),e(Cg,QXe),e(Cg,Jx),e(Jx,WXe),e(Cg,HXe),e(F,UXe),e(F,wg),e(wg,PK),e(PK,JXe),e(wg,YXe),e(wg,Yx),e(Yx,KXe),e(wg,ZXe),e(F,eze),e(F,Ag),e(Ag,$K),e($K,oze),e(Ag,rze),e(Ag,Kx),e(Kx,tze),e(Ag,aze),e(F,nze),e(F,yg),e(yg,IK),e(IK,sze),e(yg,lze),e(yg,Zx),e(Zx,ize),e(yg,dze),e(F,cze),e(F,Lg),e(Lg,qK),e(qK,fze),e(Lg,mze),e(Lg,ek),e(ek,gze),e(Lg,hze),e(F,pze),e(F,xg),e(xg,NK),e(NK,_ze),e(xg,uze),e(xg,ok),e(ok,bze),e(xg,Fze),e(F,vze),e(F,kg),e(kg,jK),e(jK,Tze),e(kg,Mze),e(kg,rk),e(rk,Eze),e(kg,Cze),e(F,wze),e(F,Sg),e(Sg,DK),e(DK,Aze),e(Sg,yze),e(Sg,tk),e(tk,Lze),e(Sg,xze),e(F,kze),e(F,Rg),e(Rg,GK),e(GK,Sze),e(Rg,Rze),e(Rg,ak),e(ak,Bze),e(Rg,Pze),e(F,$ze),e(F,Bg),e(Bg,OK),e(OK,Ize),e(Bg,qze),e(Bg,nk),e(nk,Nze),e(Bg,jze),e(F,Dze),e(F,Pg),e(Pg,VK),e(VK,Gze),e(Pg,Oze),e(Pg,sk),e(sk,Vze),e(Pg,Xze),e(F,zze),e(F,$g),e($g,XK),e(XK,Qze),e($g,Wze),e($g,lk),e(lk,Hze),e($g,Uze),e(mo,Jze),e(mo,zK),e(zK,Yze),e(mo,Kze),g(xC,mo,null),e(Qo,Zze),e(Qo,Ig),g(kC,Ig,null),e(Ig,eQe),e(Ig,QK),e(QK,oQe),b(c,rRe,u),b(c,Qi,u),e(Qi,qg),e(qg,WK),g(SC,WK,null),e(Qi,rQe),e(Qi,HK),e(HK,tQe),b(c,tRe,u),b(c,Wo,u),g(RC,Wo,null),e(Wo,aQe),e(Wo,BC),e(BC,nQe),e(BC,ik),e(ik,sQe),e(BC,lQe),e(Wo,iQe),e(Wo,PC),e(PC,dQe),e(PC,UK),e(UK,cQe),e(PC,fQe),e(Wo,mQe),e(Wo,go),g($C,go,null),e(go,gQe),e(go,JK),e(JK,hQe),e(go,pQe),e(go,Oa),e(Oa,_Qe),e(Oa,YK),e(YK,uQe),e(Oa,bQe),e(Oa,KK),e(KK,FQe),e(Oa,vQe),e(Oa,ZK),e(ZK,TQe),e(Oa,MQe),e(go,EQe),e(go,E),e(E,Qn),e(Qn,eZ),e(eZ,CQe),e(Qn,wQe),e(Qn,dk),e(dk,AQe),e(Qn,yQe),e(Qn,ck),e(ck,LQe),e(Qn,xQe),e(E,kQe),e(E,Wn),e(Wn,oZ),e(oZ,SQe),e(Wn,RQe),e(Wn,fk),e(fk,BQe),e(Wn,PQe),e(Wn,mk),e(mk,$Qe),e(Wn,IQe),e(E,qQe),e(E,Hn),e(Hn,rZ),e(rZ,NQe),e(Hn,jQe),e(Hn,gk),e(gk,DQe),e(Hn,GQe),e(Hn,hk),e(hk,OQe),e(Hn,VQe),e(E,XQe),e(E,Ng),e(Ng,tZ),e(tZ,zQe),e(Ng,QQe),e(Ng,pk),e(pk,WQe),e(Ng,HQe),e(E,UQe),e(E,Un),e(Un,aZ),e(aZ,JQe),e(Un,YQe),e(Un,_k),e(_k,KQe),e(Un,ZQe),e(Un,uk),e(uk,eWe),e(Un,oWe),e(E,rWe),e(E,jg),e(jg,nZ),e(nZ,tWe),e(jg,aWe),e(jg,bk),e(bk,nWe),e(jg,sWe),e(E,lWe),e(E,Dg),e(Dg,sZ),e(sZ,iWe),e(Dg,dWe),e(Dg,Fk),e(Fk,cWe),e(Dg,fWe),e(E,mWe),e(E,Gg),e(Gg,lZ),e(lZ,gWe),e(Gg,hWe),e(Gg,vk),e(vk,pWe),e(Gg,_We),e(E,uWe),e(E,Jn),e(Jn,iZ),e(iZ,bWe),e(Jn,FWe),e(Jn,Tk),e(Tk,vWe),e(Jn,TWe),e(Jn,Mk),e(Mk,MWe),e(Jn,EWe),e(E,CWe),e(E,Yn),e(Yn,dZ),e(dZ,wWe),e(Yn,AWe),e(Yn,Ek),e(Ek,yWe),e(Yn,LWe),e(Yn,Ck),e(Ck,xWe),e(Yn,kWe),e(E,SWe),e(E,Kn),e(Kn,cZ),e(cZ,RWe),e(Kn,BWe),e(Kn,wk),e(wk,PWe),e(Kn,$We),e(Kn,Ak),e(Ak,IWe),e(Kn,qWe),e(E,NWe),e(E,Og),e(Og,fZ),e(fZ,jWe),e(Og,DWe),e(Og,yk),e(yk,GWe),e(Og,OWe),e(E,VWe),e(E,Vg),e(Vg,mZ),e(mZ,XWe),e(Vg,zWe),e(Vg,Lk),e(Lk,QWe),e(Vg,WWe),e(E,HWe),e(E,Zn),e(Zn,gZ),e(gZ,UWe),e(Zn,JWe),e(Zn,xk),e(xk,YWe),e(Zn,KWe),e(Zn,kk),e(kk,ZWe),e(Zn,eHe),e(E,oHe),e(E,Xg),e(Xg,hZ),e(hZ,rHe),e(Xg,tHe),e(Xg,Sk),e(Sk,aHe),e(Xg,nHe),e(E,sHe),e(E,es),e(es,pZ),e(pZ,lHe),e(es,iHe),e(es,Rk),e(Rk,dHe),e(es,cHe),e(es,Bk),e(Bk,fHe),e(es,mHe),e(E,gHe),e(E,os),e(os,_Z),e(_Z,hHe),e(os,pHe),e(os,Pk),e(Pk,_He),e(os,uHe),e(os,$k),e($k,bHe),e(os,FHe),e(E,vHe),e(E,rs),e(rs,uZ),e(uZ,THe),e(rs,MHe),e(rs,Ik),e(Ik,EHe),e(rs,CHe),e(rs,bZ),e(bZ,wHe),e(rs,AHe),e(E,yHe),e(E,zg),e(zg,FZ),e(FZ,LHe),e(zg,xHe),e(zg,qk),e(qk,kHe),e(zg,SHe),e(E,RHe),e(E,ts),e(ts,vZ),e(vZ,BHe),e(ts,PHe),e(ts,Nk),e(Nk,$He),e(ts,IHe),e(ts,jk),e(jk,qHe),e(ts,NHe),e(E,jHe),e(E,Qg),e(Qg,TZ),e(TZ,DHe),e(Qg,GHe),e(Qg,Dk),e(Dk,OHe),e(Qg,VHe),e(E,XHe),e(E,as),e(as,MZ),e(MZ,zHe),e(as,QHe),e(as,Gk),e(Gk,WHe),e(as,HHe),e(as,Ok),e(Ok,UHe),e(as,JHe),e(E,YHe),e(E,ns),e(ns,EZ),e(EZ,KHe),e(ns,ZHe),e(ns,Vk),e(Vk,eUe),e(ns,oUe),e(ns,Xk),e(Xk,rUe),e(ns,tUe),e(E,aUe),e(E,ss),e(ss,CZ),e(CZ,nUe),e(ss,sUe),e(ss,zk),e(zk,lUe),e(ss,iUe),e(ss,Qk),e(Qk,dUe),e(ss,cUe),e(E,fUe),e(E,Wg),e(Wg,wZ),e(wZ,mUe),e(Wg,gUe),e(Wg,AZ),e(AZ,hUe),e(Wg,pUe),e(E,_Ue),e(E,Hg),e(Hg,yZ),e(yZ,uUe),e(Hg,bUe),e(Hg,Wk),e(Wk,FUe),e(Hg,vUe),e(E,TUe),e(E,ls),e(ls,LZ),e(LZ,MUe),e(ls,EUe),e(ls,Hk),e(Hk,CUe),e(ls,wUe),e(ls,Uk),e(Uk,AUe),e(ls,yUe),e(E,LUe),e(E,Ug),e(Ug,xZ),e(xZ,xUe),e(Ug,kUe),e(Ug,Jk),e(Jk,SUe),e(Ug,RUe),e(E,BUe),e(E,is),e(is,kZ),e(kZ,PUe),e(is,$Ue),e(is,Yk),e(Yk,IUe),e(is,qUe),e(is,Kk),e(Kk,NUe),e(is,jUe),e(E,DUe),e(E,ds),e(ds,SZ),e(SZ,GUe),e(ds,OUe),e(ds,Zk),e(Zk,VUe),e(ds,XUe),e(ds,eS),e(eS,zUe),e(ds,QUe),e(E,WUe),e(E,cs),e(cs,RZ),e(RZ,HUe),e(cs,UUe),e(cs,oS),e(oS,JUe),e(cs,YUe),e(cs,rS),e(rS,KUe),e(cs,ZUe),e(E,eJe),e(E,fs),e(fs,BZ),e(BZ,oJe),e(fs,rJe),e(fs,tS),e(tS,tJe),e(fs,aJe),e(fs,aS),e(aS,nJe),e(fs,sJe),e(E,lJe),e(E,Jg),e(Jg,PZ),e(PZ,iJe),e(Jg,dJe),e(Jg,nS),e(nS,cJe),e(Jg,fJe),e(E,mJe),e(E,ms),e(ms,$Z),e($Z,gJe),e(ms,hJe),e(ms,sS),e(sS,pJe),e(ms,_Je),e(ms,lS),e(lS,uJe),e(ms,bJe),e(E,FJe),e(E,gs),e(gs,IZ),e(IZ,vJe),e(gs,TJe),e(gs,iS),e(iS,MJe),e(gs,EJe),e(gs,dS),e(dS,CJe),e(gs,wJe),e(E,AJe),e(E,hs),e(hs,qZ),e(qZ,yJe),e(hs,LJe),e(hs,cS),e(cS,xJe),e(hs,kJe),e(hs,fS),e(fS,SJe),e(hs,RJe),e(E,BJe),e(E,ps),e(ps,NZ),e(NZ,PJe),e(ps,$Je),e(ps,mS),e(mS,IJe),e(ps,qJe),e(ps,gS),e(gS,NJe),e(ps,jJe),e(E,DJe),e(E,_s),e(_s,jZ),e(jZ,GJe),e(_s,OJe),e(_s,hS),e(hS,VJe),e(_s,XJe),e(_s,pS),e(pS,zJe),e(_s,QJe),e(E,WJe),e(E,us),e(us,DZ),e(DZ,HJe),e(us,UJe),e(us,_S),e(_S,JJe),e(us,YJe),e(us,uS),e(uS,KJe),e(us,ZJe),e(E,eYe),e(E,Yg),e(Yg,GZ),e(GZ,oYe),e(Yg,rYe),e(Yg,bS),e(bS,tYe),e(Yg,aYe),e(E,nYe),e(E,bs),e(bs,OZ),e(OZ,sYe),e(bs,lYe),e(bs,FS),e(FS,iYe),e(bs,dYe),e(bs,vS),e(vS,cYe),e(bs,fYe),e(E,mYe),e(E,Kg),e(Kg,VZ),e(VZ,gYe),e(Kg,hYe),e(Kg,TS),e(TS,pYe),e(Kg,_Ye),e(E,uYe),e(E,Zg),e(Zg,XZ),e(XZ,bYe),e(Zg,FYe),e(Zg,MS),e(MS,vYe),e(Zg,TYe),e(E,MYe),e(E,Fs),e(Fs,zZ),e(zZ,EYe),e(Fs,CYe),e(Fs,ES),e(ES,wYe),e(Fs,AYe),e(Fs,CS),e(CS,yYe),e(Fs,LYe),e(E,xYe),e(E,vs),e(vs,QZ),e(QZ,kYe),e(vs,SYe),e(vs,wS),e(wS,RYe),e(vs,BYe),e(vs,AS),e(AS,PYe),e(vs,$Ye),e(E,IYe),e(E,eh),e(eh,WZ),e(WZ,qYe),e(eh,NYe),e(eh,yS),e(yS,jYe),e(eh,DYe),e(E,GYe),e(E,Ts),e(Ts,HZ),e(HZ,OYe),e(Ts,VYe),e(Ts,LS),e(LS,XYe),e(Ts,zYe),e(Ts,xS),e(xS,QYe),e(Ts,WYe),e(E,HYe),e(E,Ms),e(Ms,UZ),e(UZ,UYe),e(Ms,JYe),e(Ms,kS),e(kS,YYe),e(Ms,KYe),e(Ms,SS),e(SS,ZYe),e(Ms,eKe),e(E,oKe),e(E,Es),e(Es,JZ),e(JZ,rKe),e(Es,tKe),e(Es,RS),e(RS,aKe),e(Es,nKe),e(Es,BS),e(BS,sKe),e(Es,lKe),e(E,iKe),e(E,Cs),e(Cs,YZ),e(YZ,dKe),e(Cs,cKe),e(Cs,PS),e(PS,fKe),e(Cs,mKe),e(Cs,$S),e($S,gKe),e(Cs,hKe),e(E,pKe),e(E,ws),e(ws,KZ),e(KZ,_Ke),e(ws,uKe),e(ws,IS),e(IS,bKe),e(ws,FKe),e(ws,qS),e(qS,vKe),e(ws,TKe),e(E,MKe),e(E,oh),e(oh,ZZ),e(ZZ,EKe),e(oh,CKe),e(oh,NS),e(NS,wKe),e(oh,AKe),e(E,yKe),e(E,rh),e(rh,eee),e(eee,LKe),e(rh,xKe),e(rh,jS),e(jS,kKe),e(rh,SKe),e(E,RKe),e(E,th),e(th,oee),e(oee,BKe),e(th,PKe),e(th,DS),e(DS,$Ke),e(th,IKe),e(E,qKe),e(E,ah),e(ah,ree),e(ree,NKe),e(ah,jKe),e(ah,GS),e(GS,DKe),e(ah,GKe),e(E,OKe),e(E,As),e(As,tee),e(tee,VKe),e(As,XKe),e(As,OS),e(OS,zKe),e(As,QKe),e(As,VS),e(VS,WKe),e(As,HKe),e(E,UKe),e(E,nh),e(nh,aee),e(aee,JKe),e(nh,YKe),e(nh,XS),e(XS,KKe),e(nh,ZKe),e(E,eZe),e(E,ys),e(ys,nee),e(nee,oZe),e(ys,rZe),e(ys,zS),e(zS,tZe),e(ys,aZe),e(ys,QS),e(QS,nZe),e(ys,sZe),e(E,lZe),e(E,Ls),e(Ls,see),e(see,iZe),e(Ls,dZe),e(Ls,WS),e(WS,cZe),e(Ls,fZe),e(Ls,HS),e(HS,mZe),e(Ls,gZe),e(E,hZe),e(E,xs),e(xs,lee),e(lee,pZe),e(xs,_Ze),e(xs,US),e(US,uZe),e(xs,bZe),e(xs,JS),e(JS,FZe),e(xs,vZe),e(E,TZe),e(E,ks),e(ks,iee),e(iee,MZe),e(ks,EZe),e(ks,YS),e(YS,CZe),e(ks,wZe),e(ks,KS),e(KS,AZe),e(ks,yZe),e(E,LZe),e(E,Ss),e(Ss,dee),e(dee,xZe),e(Ss,kZe),e(Ss,ZS),e(ZS,SZe),e(Ss,RZe),e(Ss,eR),e(eR,BZe),e(Ss,PZe),e(E,$Ze),e(E,Rs),e(Rs,cee),e(cee,IZe),e(Rs,qZe),e(Rs,oR),e(oR,NZe),e(Rs,jZe),e(Rs,rR),e(rR,DZe),e(Rs,GZe),e(E,OZe),e(E,sh),e(sh,fee),e(fee,VZe),e(sh,XZe),e(sh,tR),e(tR,zZe),e(sh,QZe),e(E,WZe),e(E,lh),e(lh,mee),e(mee,HZe),e(lh,UZe),e(lh,aR),e(aR,JZe),e(lh,YZe),e(E,KZe),e(E,Bs),e(Bs,gee),e(gee,ZZe),e(Bs,eeo),e(Bs,nR),e(nR,oeo),e(Bs,reo),e(Bs,sR),e(sR,teo),e(Bs,aeo),e(E,neo),e(E,Ps),e(Ps,hee),e(hee,seo),e(Ps,leo),e(Ps,lR),e(lR,ieo),e(Ps,deo),e(Ps,iR),e(iR,ceo),e(Ps,feo),e(E,meo),e(E,$s),e($s,pee),e(pee,geo),e($s,heo),e($s,dR),e(dR,peo),e($s,_eo),e($s,cR),e(cR,ueo),e($s,beo),e(E,Feo),e(E,ih),e(ih,_ee),e(_ee,veo),e(ih,Teo),e(ih,fR),e(fR,Meo),e(ih,Eeo),e(E,Ceo),e(E,dh),e(dh,uee),e(uee,weo),e(dh,Aeo),e(dh,mR),e(mR,yeo),e(dh,Leo),e(E,xeo),e(E,ch),e(ch,bee),e(bee,keo),e(ch,Seo),e(ch,gR),e(gR,Reo),e(ch,Beo),e(E,Peo),e(E,fh),e(fh,Fee),e(Fee,$eo),e(fh,Ieo),e(fh,hR),e(hR,qeo),e(fh,Neo),e(E,jeo),e(E,Is),e(Is,vee),e(vee,Deo),e(Is,Geo),e(Is,pR),e(pR,Oeo),e(Is,Veo),e(Is,_R),e(_R,Xeo),e(Is,zeo),e(E,Qeo),e(E,mh),e(mh,Tee),e(Tee,Weo),e(mh,Heo),e(mh,uR),e(uR,Ueo),e(mh,Jeo),e(E,Yeo),e(E,gh),e(gh,Mee),e(Mee,Keo),e(gh,Zeo),e(gh,bR),e(bR,eoo),e(gh,ooo),e(E,roo),e(E,qs),e(qs,Eee),e(Eee,too),e(qs,aoo),e(qs,FR),e(FR,noo),e(qs,soo),e(qs,vR),e(vR,loo),e(qs,ioo),e(E,doo),e(E,Ns),e(Ns,Cee),e(Cee,coo),e(Ns,foo),e(Ns,TR),e(TR,moo),e(Ns,goo),e(Ns,MR),e(MR,hoo),e(Ns,poo),e(go,_oo),e(go,wee),e(wee,uoo),e(go,boo),g(IC,go,null),e(Wo,Foo),e(Wo,hh),g(qC,hh,null),e(hh,voo),e(hh,Aee),e(Aee,Too),b(c,aRe,u),b(c,Wi,u),e(Wi,ph),e(ph,yee),g(NC,yee,null),e(Wi,Moo),e(Wi,Lee),e(Lee,Eoo),b(c,nRe,u),b(c,Ho,u),g(jC,Ho,null),e(Ho,Coo),e(Ho,DC),e(DC,woo),e(DC,ER),e(ER,Aoo),e(DC,yoo),e(Ho,Loo),e(Ho,GC),e(GC,xoo),e(GC,xee),e(xee,koo),e(GC,Soo),e(Ho,Roo),e(Ho,$e),g(OC,$e,null),e($e,Boo),e($e,kee),e(kee,Poo),e($e,$oo),e($e,Va),e(Va,Ioo),e(Va,See),e(See,qoo),e(Va,Noo),e(Va,Ree),e(Ree,joo),e(Va,Doo),e(Va,Bee),e(Bee,Goo),e(Va,Ooo),e($e,Voo),e($e,te),e(te,_h),e(_h,Pee),e(Pee,Xoo),e(_h,zoo),e(_h,CR),e(CR,Qoo),e(_h,Woo),e(te,Hoo),e(te,uh),e(uh,$ee),e($ee,Uoo),e(uh,Joo),e(uh,wR),e(wR,Yoo),e(uh,Koo),e(te,Zoo),e(te,bh),e(bh,Iee),e(Iee,ero),e(bh,oro),e(bh,AR),e(AR,rro),e(bh,tro),e(te,aro),e(te,Fh),e(Fh,qee),e(qee,nro),e(Fh,sro),e(Fh,yR),e(yR,lro),e(Fh,iro),e(te,dro),e(te,vh),e(vh,Nee),e(Nee,cro),e(vh,fro),e(vh,LR),e(LR,mro),e(vh,gro),e(te,hro),e(te,Th),e(Th,jee),e(jee,pro),e(Th,_ro),e(Th,xR),e(xR,uro),e(Th,bro),e(te,Fro),e(te,Mh),e(Mh,Dee),e(Dee,vro),e(Mh,Tro),e(Mh,kR),e(kR,Mro),e(Mh,Ero),e(te,Cro),e(te,Eh),e(Eh,Gee),e(Gee,wro),e(Eh,Aro),e(Eh,SR),e(SR,yro),e(Eh,Lro),e(te,xro),e(te,Ch),e(Ch,Oee),e(Oee,kro),e(Ch,Sro),e(Ch,RR),e(RR,Rro),e(Ch,Bro),e(te,Pro),e(te,wh),e(wh,Vee),e(Vee,$ro),e(wh,Iro),e(wh,BR),e(BR,qro),e(wh,Nro),e(te,jro),e(te,Ah),e(Ah,Xee),e(Xee,Dro),e(Ah,Gro),e(Ah,PR),e(PR,Oro),e(Ah,Vro),e(te,Xro),e(te,yh),e(yh,zee),e(zee,zro),e(yh,Qro),e(yh,$R),e($R,Wro),e(yh,Hro),e(te,Uro),e(te,Lh),e(Lh,Qee),e(Qee,Jro),e(Lh,Yro),e(Lh,IR),e(IR,Kro),e(Lh,Zro),e(te,eto),e(te,xh),e(xh,Wee),e(Wee,oto),e(xh,rto),e(xh,qR),e(qR,tto),e(xh,ato),e(te,nto),e(te,kh),e(kh,Hee),e(Hee,sto),e(kh,lto),e(kh,NR),e(NR,ito),e(kh,dto),e(te,cto),e(te,Sh),e(Sh,Uee),e(Uee,fto),e(Sh,mto),e(Sh,jR),e(jR,gto),e(Sh,hto),e(te,pto),e(te,Rh),e(Rh,Jee),e(Jee,_to),e(Rh,uto),e(Rh,DR),e(DR,bto),e(Rh,Fto),e(te,vto),e(te,Bh),e(Bh,Yee),e(Yee,Tto),e(Bh,Mto),e(Bh,GR),e(GR,Eto),e(Bh,Cto),e($e,wto),g(Ph,$e,null),e($e,Ato),e($e,Kee),e(Kee,yto),e($e,Lto),g(VC,$e,null),e(Ho,xto),e(Ho,$h),g(XC,$h,null),e($h,kto),e($h,Zee),e(Zee,Sto),b(c,sRe,u),b(c,Hi,u),e(Hi,Ih),e(Ih,eoe),g(zC,eoe,null),e(Hi,Rto),e(Hi,ooe),e(ooe,Bto),b(c,lRe,u),b(c,Uo,u),g(QC,Uo,null),e(Uo,Pto),e(Uo,WC),e(WC,$to),e(WC,OR),e(OR,Ito),e(WC,qto),e(Uo,Nto),e(Uo,HC),e(HC,jto),e(HC,roe),e(roe,Dto),e(HC,Gto),e(Uo,Oto),e(Uo,Ie),g(UC,Ie,null),e(Ie,Vto),e(Ie,toe),e(toe,Xto),e(Ie,zto),e(Ie,Ui),e(Ui,Qto),e(Ui,aoe),e(aoe,Wto),e(Ui,Hto),e(Ui,noe),e(noe,Uto),e(Ui,Jto),e(Ie,Yto),e(Ie,ke),e(ke,qh),e(qh,soe),e(soe,Kto),e(qh,Zto),e(qh,VR),e(VR,eao),e(qh,oao),e(ke,rao),e(ke,Nh),e(Nh,loe),e(loe,tao),e(Nh,aao),e(Nh,XR),e(XR,nao),e(Nh,sao),e(ke,lao),e(ke,jh),e(jh,ioe),e(ioe,iao),e(jh,dao),e(jh,zR),e(zR,cao),e(jh,fao),e(ke,mao),e(ke,Dh),e(Dh,doe),e(doe,gao),e(Dh,hao),e(Dh,QR),e(QR,pao),e(Dh,_ao),e(ke,uao),e(ke,Gh),e(Gh,coe),e(coe,bao),e(Gh,Fao),e(Gh,WR),e(WR,vao),e(Gh,Tao),e(ke,Mao),e(ke,Oh),e(Oh,foe),e(foe,Eao),e(Oh,Cao),e(Oh,HR),e(HR,wao),e(Oh,Aao),e(ke,yao),e(ke,Vh),e(Vh,moe),e(moe,Lao),e(Vh,xao),e(Vh,UR),e(UR,kao),e(Vh,Sao),e(ke,Rao),e(ke,Xh),e(Xh,goe),e(goe,Bao),e(Xh,Pao),e(Xh,JR),e(JR,$ao),e(Xh,Iao),e(Ie,qao),g(zh,Ie,null),e(Ie,Nao),e(Ie,hoe),e(hoe,jao),e(Ie,Dao),g(JC,Ie,null),e(Uo,Gao),e(Uo,Qh),g(YC,Qh,null),e(Qh,Oao),e(Qh,poe),e(poe,Vao),b(c,iRe,u),b(c,Ji,u),e(Ji,Wh),e(Wh,_oe),g(KC,_oe,null),e(Ji,Xao),e(Ji,uoe),e(uoe,zao),b(c,dRe,u),b(c,Jo,u),g(ZC,Jo,null),e(Jo,Qao),e(Jo,Yi),e(Yi,Wao),e(Yi,YR),e(YR,Hao),e(Yi,Uao),e(Yi,KR),e(KR,Jao),e(Yi,Yao),e(Jo,Kao),e(Jo,ew),e(ew,Zao),e(ew,boe),e(boe,eno),e(ew,ono),e(Jo,rno),e(Jo,Xr),g(ow,Xr,null),e(Xr,tno),e(Xr,Foe),e(Foe,ano),e(Xr,nno),e(Xr,Ki),e(Ki,sno),e(Ki,voe),e(voe,lno),e(Ki,ino),e(Ki,ZR),e(ZR,dno),e(Ki,cno),e(Xr,fno),e(Xr,Toe),e(Toe,mno),e(Xr,gno),g(rw,Xr,null),e(Jo,hno),e(Jo,qe),g(tw,qe,null),e(qe,pno),e(qe,Moe),e(Moe,_no),e(qe,uno),e(qe,Xa),e(Xa,bno),e(Xa,Eoe),e(Eoe,Fno),e(Xa,vno),e(Xa,Coe),e(Coe,Tno),e(Xa,Mno),e(Xa,woe),e(woe,Eno),e(Xa,Cno),e(qe,wno),e(qe,T),e(T,Hh),e(Hh,Aoe),e(Aoe,Ano),e(Hh,yno),e(Hh,eB),e(eB,Lno),e(Hh,xno),e(T,kno),e(T,Uh),e(Uh,yoe),e(yoe,Sno),e(Uh,Rno),e(Uh,oB),e(oB,Bno),e(Uh,Pno),e(T,$no),e(T,Jh),e(Jh,Loe),e(Loe,Ino),e(Jh,qno),e(Jh,rB),e(rB,Nno),e(Jh,jno),e(T,Dno),e(T,Yh),e(Yh,xoe),e(xoe,Gno),e(Yh,Ono),e(Yh,tB),e(tB,Vno),e(Yh,Xno),e(T,zno),e(T,Kh),e(Kh,koe),e(koe,Qno),e(Kh,Wno),e(Kh,aB),e(aB,Hno),e(Kh,Uno),e(T,Jno),e(T,Zh),e(Zh,Soe),e(Soe,Yno),e(Zh,Kno),e(Zh,nB),e(nB,Zno),e(Zh,eso),e(T,oso),e(T,ep),e(ep,Roe),e(Roe,rso),e(ep,tso),e(ep,sB),e(sB,aso),e(ep,nso),e(T,sso),e(T,op),e(op,Boe),e(Boe,lso),e(op,iso),e(op,lB),e(lB,dso),e(op,cso),e(T,fso),e(T,rp),e(rp,Poe),e(Poe,mso),e(rp,gso),e(rp,iB),e(iB,hso),e(rp,pso),e(T,_so),e(T,tp),e(tp,$oe),e($oe,uso),e(tp,bso),e(tp,dB),e(dB,Fso),e(tp,vso),e(T,Tso),e(T,ap),e(ap,Ioe),e(Ioe,Mso),e(ap,Eso),e(ap,cB),e(cB,Cso),e(ap,wso),e(T,Aso),e(T,np),e(np,qoe),e(qoe,yso),e(np,Lso),e(np,fB),e(fB,xso),e(np,kso),e(T,Sso),e(T,sp),e(sp,Noe),e(Noe,Rso),e(sp,Bso),e(sp,mB),e(mB,Pso),e(sp,$so),e(T,Iso),e(T,lp),e(lp,joe),e(joe,qso),e(lp,Nso),e(lp,gB),e(gB,jso),e(lp,Dso),e(T,Gso),e(T,ip),e(ip,Doe),e(Doe,Oso),e(ip,Vso),e(ip,hB),e(hB,Xso),e(ip,zso),e(T,Qso),e(T,dp),e(dp,Goe),e(Goe,Wso),e(dp,Hso),e(dp,pB),e(pB,Uso),e(dp,Jso),e(T,Yso),e(T,cp),e(cp,Ooe),e(Ooe,Kso),e(cp,Zso),e(cp,_B),e(_B,elo),e(cp,olo),e(T,rlo),e(T,fp),e(fp,Voe),e(Voe,tlo),e(fp,alo),e(fp,uB),e(uB,nlo),e(fp,slo),e(T,llo),e(T,mp),e(mp,Xoe),e(Xoe,ilo),e(mp,dlo),e(mp,bB),e(bB,clo),e(mp,flo),e(T,mlo),e(T,gp),e(gp,zoe),e(zoe,glo),e(gp,hlo),e(gp,FB),e(FB,plo),e(gp,_lo),e(T,ulo),e(T,hp),e(hp,Qoe),e(Qoe,blo),e(hp,Flo),e(hp,vB),e(vB,vlo),e(hp,Tlo),e(T,Mlo),e(T,pp),e(pp,Woe),e(Woe,Elo),e(pp,Clo),e(pp,TB),e(TB,wlo),e(pp,Alo),e(T,ylo),e(T,_p),e(_p,Hoe),e(Hoe,Llo),e(_p,xlo),e(_p,MB),e(MB,klo),e(_p,Slo),e(T,Rlo),e(T,up),e(up,Uoe),e(Uoe,Blo),e(up,Plo),e(up,EB),e(EB,$lo),e(up,Ilo),e(T,qlo),e(T,bp),e(bp,Joe),e(Joe,Nlo),e(bp,jlo),e(bp,CB),e(CB,Dlo),e(bp,Glo),e(T,Olo),e(T,Fp),e(Fp,Yoe),e(Yoe,Vlo),e(Fp,Xlo),e(Fp,wB),e(wB,zlo),e(Fp,Qlo),e(T,Wlo),e(T,vp),e(vp,Koe),e(Koe,Hlo),e(vp,Ulo),e(vp,Zoe),e(Zoe,Jlo),e(vp,Ylo),e(T,Klo),e(T,Tp),e(Tp,ere),e(ere,Zlo),e(Tp,eio),e(Tp,AB),e(AB,oio),e(Tp,rio),e(T,tio),e(T,Mp),e(Mp,ore),e(ore,aio),e(Mp,nio),e(Mp,yB),e(yB,sio),e(Mp,lio),e(T,iio),e(T,Ep),e(Ep,rre),e(rre,dio),e(Ep,cio),e(Ep,LB),e(LB,fio),e(Ep,mio),e(T,gio),e(T,js),e(js,tre),e(tre,hio),e(js,pio),e(js,xB),e(xB,_io),e(js,uio),e(js,kB),e(kB,bio),e(js,Fio),e(T,vio),e(T,Cp),e(Cp,are),e(are,Tio),e(Cp,Mio),e(Cp,SB),e(SB,Eio),e(Cp,Cio),e(T,wio),e(T,wp),e(wp,nre),e(nre,Aio),e(wp,yio),e(wp,RB),e(RB,Lio),e(wp,xio),e(T,kio),e(T,Ap),e(Ap,sre),e(sre,Sio),e(Ap,Rio),e(Ap,BB),e(BB,Bio),e(Ap,Pio),e(T,$io),e(T,yp),e(yp,lre),e(lre,Iio),e(yp,qio),e(yp,PB),e(PB,Nio),e(yp,jio),e(T,Dio),e(T,Lp),e(Lp,ire),e(ire,Gio),e(Lp,Oio),e(Lp,$B),e($B,Vio),e(Lp,Xio),e(T,zio),e(T,xp),e(xp,dre),e(dre,Qio),e(xp,Wio),e(xp,IB),e(IB,Hio),e(xp,Uio),e(T,Jio),e(T,kp),e(kp,cre),e(cre,Yio),e(kp,Kio),e(kp,qB),e(qB,Zio),e(kp,edo),e(T,odo),e(T,Sp),e(Sp,fre),e(fre,rdo),e(Sp,tdo),e(Sp,NB),e(NB,ado),e(Sp,ndo),e(T,sdo),e(T,Rp),e(Rp,mre),e(mre,ldo),e(Rp,ido),e(Rp,jB),e(jB,ddo),e(Rp,cdo),e(T,fdo),e(T,Bp),e(Bp,gre),e(gre,mdo),e(Bp,gdo),e(Bp,DB),e(DB,hdo),e(Bp,pdo),e(T,_do),e(T,Pp),e(Pp,hre),e(hre,udo),e(Pp,bdo),e(Pp,GB),e(GB,Fdo),e(Pp,vdo),e(T,Tdo),e(T,$p),e($p,pre),e(pre,Mdo),e($p,Edo),e($p,OB),e(OB,Cdo),e($p,wdo),e(T,Ado),e(T,Ip),e(Ip,_re),e(_re,ydo),e(Ip,Ldo),e(Ip,VB),e(VB,xdo),e(Ip,kdo),e(T,Sdo),e(T,qp),e(qp,ure),e(ure,Rdo),e(qp,Bdo),e(qp,XB),e(XB,Pdo),e(qp,$do),e(T,Ido),e(T,Np),e(Np,bre),e(bre,qdo),e(Np,Ndo),e(Np,zB),e(zB,jdo),e(Np,Ddo),e(T,Gdo),e(T,jp),e(jp,Fre),e(Fre,Odo),e(jp,Vdo),e(jp,QB),e(QB,Xdo),e(jp,zdo),e(T,Qdo),e(T,Dp),e(Dp,vre),e(vre,Wdo),e(Dp,Hdo),e(Dp,WB),e(WB,Udo),e(Dp,Jdo),e(T,Ydo),e(T,Gp),e(Gp,Tre),e(Tre,Kdo),e(Gp,Zdo),e(Gp,HB),e(HB,eco),e(Gp,oco),e(T,rco),e(T,Op),e(Op,Mre),e(Mre,tco),e(Op,aco),e(Op,UB),e(UB,nco),e(Op,sco),e(T,lco),e(T,Vp),e(Vp,Ere),e(Ere,ico),e(Vp,dco),e(Vp,JB),e(JB,cco),e(Vp,fco),e(T,mco),e(T,Xp),e(Xp,Cre),e(Cre,gco),e(Xp,hco),e(Xp,YB),e(YB,pco),e(Xp,_co),e(T,uco),e(T,zp),e(zp,wre),e(wre,bco),e(zp,Fco),e(zp,KB),e(KB,vco),e(zp,Tco),e(T,Mco),e(T,Qp),e(Qp,Are),e(Are,Eco),e(Qp,Cco),e(Qp,ZB),e(ZB,wco),e(Qp,Aco),e(T,yco),e(T,Wp),e(Wp,yre),e(yre,Lco),e(Wp,xco),e(Wp,eP),e(eP,kco),e(Wp,Sco),e(T,Rco),e(T,Hp),e(Hp,Lre),e(Lre,Bco),e(Hp,Pco),e(Hp,oP),e(oP,$co),e(Hp,Ico),e(T,qco),e(T,Up),e(Up,xre),e(xre,Nco),e(Up,jco),e(Up,rP),e(rP,Dco),e(Up,Gco),e(T,Oco),e(T,Jp),e(Jp,kre),e(kre,Vco),e(Jp,Xco),e(Jp,tP),e(tP,zco),e(Jp,Qco),e(T,Wco),e(T,Yp),e(Yp,Sre),e(Sre,Hco),e(Yp,Uco),e(Yp,aP),e(aP,Jco),e(Yp,Yco),e(T,Kco),e(T,Kp),e(Kp,Rre),e(Rre,Zco),e(Kp,efo),e(Kp,nP),e(nP,ofo),e(Kp,rfo),e(T,tfo),e(T,Zp),e(Zp,Bre),e(Bre,afo),e(Zp,nfo),e(Zp,sP),e(sP,sfo),e(Zp,lfo),e(T,ifo),e(T,e_),e(e_,Pre),e(Pre,dfo),e(e_,cfo),e(e_,lP),e(lP,ffo),e(e_,mfo),e(T,gfo),e(T,o_),e(o_,$re),e($re,hfo),e(o_,pfo),e(o_,iP),e(iP,_fo),e(o_,ufo),e(T,bfo),e(T,r_),e(r_,Ire),e(Ire,Ffo),e(r_,vfo),e(r_,dP),e(dP,Tfo),e(r_,Mfo),e(T,Efo),e(T,t_),e(t_,qre),e(qre,Cfo),e(t_,wfo),e(t_,cP),e(cP,Afo),e(t_,yfo),e(T,Lfo),e(T,a_),e(a_,Nre),e(Nre,xfo),e(a_,kfo),e(a_,fP),e(fP,Sfo),e(a_,Rfo),e(T,Bfo),e(T,n_),e(n_,jre),e(jre,Pfo),e(n_,$fo),e(n_,mP),e(mP,Ifo),e(n_,qfo),e(T,Nfo),e(T,s_),e(s_,Dre),e(Dre,jfo),e(s_,Dfo),e(s_,gP),e(gP,Gfo),e(s_,Ofo),e(T,Vfo),e(T,l_),e(l_,Gre),e(Gre,Xfo),e(l_,zfo),e(l_,hP),e(hP,Qfo),e(l_,Wfo),e(T,Hfo),e(T,i_),e(i_,Ore),e(Ore,Ufo),e(i_,Jfo),e(i_,pP),e(pP,Yfo),e(i_,Kfo),e(T,Zfo),e(T,d_),e(d_,Vre),e(Vre,emo),e(d_,omo),e(d_,_P),e(_P,rmo),e(d_,tmo),e(T,amo),e(T,c_),e(c_,Xre),e(Xre,nmo),e(c_,smo),e(c_,uP),e(uP,lmo),e(c_,imo),e(T,dmo),e(T,f_),e(f_,zre),e(zre,cmo),e(f_,fmo),e(f_,bP),e(bP,mmo),e(f_,gmo),e(T,hmo),e(T,m_),e(m_,Qre),e(Qre,pmo),e(m_,_mo),e(m_,FP),e(FP,umo),e(m_,bmo),e(T,Fmo),e(T,g_),e(g_,Wre),e(Wre,vmo),e(g_,Tmo),e(g_,vP),e(vP,Mmo),e(g_,Emo),e(T,Cmo),e(T,h_),e(h_,Hre),e(Hre,wmo),e(h_,Amo),e(h_,TP),e(TP,ymo),e(h_,Lmo),e(T,xmo),e(T,p_),e(p_,Ure),e(Ure,kmo),e(p_,Smo),e(p_,MP),e(MP,Rmo),e(p_,Bmo),e(T,Pmo),e(T,__),e(__,Jre),e(Jre,$mo),e(__,Imo),e(__,EP),e(EP,qmo),e(__,Nmo),e(T,jmo),e(T,u_),e(u_,Yre),e(Yre,Dmo),e(u_,Gmo),e(u_,CP),e(CP,Omo),e(u_,Vmo),e(T,Xmo),e(T,b_),e(b_,Kre),e(Kre,zmo),e(b_,Qmo),e(b_,wP),e(wP,Wmo),e(b_,Hmo),e(T,Umo),e(T,F_),e(F_,Zre),e(Zre,Jmo),e(F_,Ymo),e(F_,AP),e(AP,Kmo),e(F_,Zmo),e(T,ego),e(T,v_),e(v_,ete),e(ete,ogo),e(v_,rgo),e(v_,yP),e(yP,tgo),e(v_,ago),e(T,ngo),e(T,T_),e(T_,ote),e(ote,sgo),e(T_,lgo),e(T_,LP),e(LP,igo),e(T_,dgo),e(T,cgo),e(T,M_),e(M_,rte),e(rte,fgo),e(M_,mgo),e(M_,xP),e(xP,ggo),e(M_,hgo),e(T,pgo),e(T,E_),e(E_,tte),e(tte,_go),e(E_,ugo),e(E_,kP),e(kP,bgo),e(E_,Fgo),e(T,vgo),e(T,C_),e(C_,ate),e(ate,Tgo),e(C_,Mgo),e(C_,SP),e(SP,Ego),e(C_,Cgo),e(T,wgo),e(T,w_),e(w_,nte),e(nte,Ago),e(w_,ygo),e(w_,RP),e(RP,Lgo),e(w_,xgo),e(T,kgo),e(T,A_),e(A_,ste),e(ste,Sgo),e(A_,Rgo),e(A_,BP),e(BP,Bgo),e(A_,Pgo),e(T,$go),e(T,y_),e(y_,lte),e(lte,Igo),e(y_,qgo),e(y_,PP),e(PP,Ngo),e(y_,jgo),e(T,Dgo),e(T,L_),e(L_,ite),e(ite,Ggo),e(L_,Ogo),e(L_,$P),e($P,Vgo),e(L_,Xgo),e(T,zgo),e(T,x_),e(x_,dte),e(dte,Qgo),e(x_,Wgo),e(x_,IP),e(IP,Hgo),e(x_,Ugo),e(T,Jgo),e(T,k_),e(k_,cte),e(cte,Ygo),e(k_,Kgo),e(k_,qP),e(qP,Zgo),e(k_,eho),e(T,oho),e(T,S_),e(S_,fte),e(fte,rho),e(S_,tho),e(S_,NP),e(NP,aho),e(S_,nho),e(qe,sho),e(qe,R_),e(R_,lho),e(R_,mte),e(mte,iho),e(R_,dho),e(R_,gte),e(gte,cho),e(qe,fho),e(qe,hte),e(hte,mho),e(qe,gho),g(aw,qe,null),b(c,cRe,u),b(c,Zi,u),e(Zi,B_),e(B_,pte),g(nw,pte,null),e(Zi,hho),e(Zi,_te),e(_te,pho),b(c,fRe,u),b(c,Yo,u),g(sw,Yo,null),e(Yo,_ho),e(Yo,ed),e(ed,uho),e(ed,jP),e(jP,bho),e(ed,Fho),e(ed,DP),e(DP,vho),e(ed,Tho),e(Yo,Mho),e(Yo,lw),e(lw,Eho),e(lw,ute),e(ute,Cho),e(lw,who),e(Yo,Aho),e(Yo,zr),g(iw,zr,null),e(zr,yho),e(zr,bte),e(bte,Lho),e(zr,xho),e(zr,od),e(od,kho),e(od,Fte),e(Fte,Sho),e(od,Rho),e(od,GP),e(GP,Bho),e(od,Pho),e(zr,$ho),e(zr,vte),e(vte,Iho),e(zr,qho),g(dw,zr,null),e(Yo,Nho),e(Yo,Ne),g(cw,Ne,null),e(Ne,jho),e(Ne,Tte),e(Tte,Dho),e(Ne,Gho),e(Ne,za),e(za,Oho),e(za,Mte),e(Mte,Vho),e(za,Xho),e(za,Ete),e(Ete,zho),e(za,Qho),e(za,Cte),e(Cte,Who),e(za,Hho),e(Ne,Uho),e(Ne,S),e(S,P_),e(P_,wte),e(wte,Jho),e(P_,Yho),e(P_,OP),e(OP,Kho),e(P_,Zho),e(S,epo),e(S,$_),e($_,Ate),e(Ate,opo),e($_,rpo),e($_,VP),e(VP,tpo),e($_,apo),e(S,npo),e(S,I_),e(I_,yte),e(yte,spo),e(I_,lpo),e(I_,XP),e(XP,ipo),e(I_,dpo),e(S,cpo),e(S,q_),e(q_,Lte),e(Lte,fpo),e(q_,mpo),e(q_,zP),e(zP,gpo),e(q_,hpo),e(S,ppo),e(S,N_),e(N_,xte),e(xte,_po),e(N_,upo),e(N_,QP),e(QP,bpo),e(N_,Fpo),e(S,vpo),e(S,j_),e(j_,kte),e(kte,Tpo),e(j_,Mpo),e(j_,WP),e(WP,Epo),e(j_,Cpo),e(S,wpo),e(S,D_),e(D_,Ste),e(Ste,Apo),e(D_,ypo),e(D_,HP),e(HP,Lpo),e(D_,xpo),e(S,kpo),e(S,G_),e(G_,Rte),e(Rte,Spo),e(G_,Rpo),e(G_,UP),e(UP,Bpo),e(G_,Ppo),e(S,$po),e(S,O_),e(O_,Bte),e(Bte,Ipo),e(O_,qpo),e(O_,JP),e(JP,Npo),e(O_,jpo),e(S,Dpo),e(S,V_),e(V_,Pte),e(Pte,Gpo),e(V_,Opo),e(V_,YP),e(YP,Vpo),e(V_,Xpo),e(S,zpo),e(S,X_),e(X_,$te),e($te,Qpo),e(X_,Wpo),e(X_,KP),e(KP,Hpo),e(X_,Upo),e(S,Jpo),e(S,z_),e(z_,Ite),e(Ite,Ypo),e(z_,Kpo),e(z_,ZP),e(ZP,Zpo),e(z_,e_o),e(S,o_o),e(S,Q_),e(Q_,qte),e(qte,r_o),e(Q_,t_o),e(Q_,e$),e(e$,a_o),e(Q_,n_o),e(S,s_o),e(S,W_),e(W_,Nte),e(Nte,l_o),e(W_,i_o),e(W_,o$),e(o$,d_o),e(W_,c_o),e(S,f_o),e(S,H_),e(H_,jte),e(jte,m_o),e(H_,g_o),e(H_,r$),e(r$,h_o),e(H_,p_o),e(S,__o),e(S,U_),e(U_,Dte),e(Dte,u_o),e(U_,b_o),e(U_,t$),e(t$,F_o),e(U_,v_o),e(S,T_o),e(S,J_),e(J_,Gte),e(Gte,M_o),e(J_,E_o),e(J_,a$),e(a$,C_o),e(J_,w_o),e(S,A_o),e(S,Y_),e(Y_,Ote),e(Ote,y_o),e(Y_,L_o),e(Y_,n$),e(n$,x_o),e(Y_,k_o),e(S,S_o),e(S,K_),e(K_,Vte),e(Vte,R_o),e(K_,B_o),e(K_,s$),e(s$,P_o),e(K_,$_o),e(S,I_o),e(S,Z_),e(Z_,Xte),e(Xte,q_o),e(Z_,N_o),e(Z_,l$),e(l$,j_o),e(Z_,D_o),e(S,G_o),e(S,eu),e(eu,zte),e(zte,O_o),e(eu,V_o),e(eu,i$),e(i$,X_o),e(eu,z_o),e(S,Q_o),e(S,ou),e(ou,Qte),e(Qte,W_o),e(ou,H_o),e(ou,d$),e(d$,U_o),e(ou,J_o),e(S,Y_o),e(S,ru),e(ru,Wte),e(Wte,K_o),e(ru,Z_o),e(ru,c$),e(c$,euo),e(ru,ouo),e(S,ruo),e(S,tu),e(tu,Hte),e(Hte,tuo),e(tu,auo),e(tu,f$),e(f$,nuo),e(tu,suo),e(S,luo),e(S,au),e(au,Ute),e(Ute,iuo),e(au,duo),e(au,m$),e(m$,cuo),e(au,fuo),e(S,muo),e(S,nu),e(nu,Jte),e(Jte,guo),e(nu,huo),e(nu,g$),e(g$,puo),e(nu,_uo),e(S,uuo),e(S,su),e(su,Yte),e(Yte,buo),e(su,Fuo),e(su,h$),e(h$,vuo),e(su,Tuo),e(S,Muo),e(S,lu),e(lu,Kte),e(Kte,Euo),e(lu,Cuo),e(lu,p$),e(p$,wuo),e(lu,Auo),e(S,yuo),e(S,iu),e(iu,Zte),e(Zte,Luo),e(iu,xuo),e(iu,_$),e(_$,kuo),e(iu,Suo),e(S,Ruo),e(S,du),e(du,eae),e(eae,Buo),e(du,Puo),e(du,u$),e(u$,$uo),e(du,Iuo),e(S,quo),e(S,cu),e(cu,oae),e(oae,Nuo),e(cu,juo),e(cu,b$),e(b$,Duo),e(cu,Guo),e(S,Ouo),e(S,fu),e(fu,rae),e(rae,Vuo),e(fu,Xuo),e(fu,F$),e(F$,zuo),e(fu,Quo),e(S,Wuo),e(S,mu),e(mu,tae),e(tae,Huo),e(mu,Uuo),e(mu,v$),e(v$,Juo),e(mu,Yuo),e(S,Kuo),e(S,gu),e(gu,aae),e(aae,Zuo),e(gu,e1o),e(gu,T$),e(T$,o1o),e(gu,r1o),e(S,t1o),e(S,hu),e(hu,nae),e(nae,a1o),e(hu,n1o),e(hu,M$),e(M$,s1o),e(hu,l1o),e(S,i1o),e(S,pu),e(pu,sae),e(sae,d1o),e(pu,c1o),e(pu,E$),e(E$,f1o),e(pu,m1o),e(S,g1o),e(S,_u),e(_u,lae),e(lae,h1o),e(_u,p1o),e(_u,C$),e(C$,_1o),e(_u,u1o),e(S,b1o),e(S,uu),e(uu,iae),e(iae,F1o),e(uu,v1o),e(uu,w$),e(w$,T1o),e(uu,M1o),e(S,E1o),e(S,bu),e(bu,dae),e(dae,C1o),e(bu,w1o),e(bu,A$),e(A$,A1o),e(bu,y1o),e(Ne,L1o),e(Ne,Fu),e(Fu,x1o),e(Fu,cae),e(cae,k1o),e(Fu,S1o),e(Fu,fae),e(fae,R1o),e(Ne,B1o),e(Ne,mae),e(mae,P1o),e(Ne,$1o),g(fw,Ne,null),b(c,mRe,u),b(c,rd,u),e(rd,vu),e(vu,gae),g(mw,gae,null),e(rd,I1o),e(rd,hae),e(hae,q1o),b(c,gRe,u),b(c,Ko,u),g(gw,Ko,null),e(Ko,N1o),e(Ko,td),e(td,j1o),e(td,y$),e(y$,D1o),e(td,G1o),e(td,L$),e(L$,O1o),e(td,V1o),e(Ko,X1o),e(Ko,hw),e(hw,z1o),e(hw,pae),e(pae,Q1o),e(hw,W1o),e(Ko,H1o),e(Ko,Qr),g(pw,Qr,null),e(Qr,U1o),e(Qr,_ae),e(_ae,J1o),e(Qr,Y1o),e(Qr,ad),e(ad,K1o),e(ad,uae),e(uae,Z1o),e(ad,e7o),e(ad,x$),e(x$,o7o),e(ad,r7o),e(Qr,t7o),e(Qr,bae),e(bae,a7o),e(Qr,n7o),g(_w,Qr,null),e(Ko,s7o),e(Ko,je),g(uw,je,null),e(je,l7o),e(je,Fae),e(Fae,i7o),e(je,d7o),e(je,Qa),e(Qa,c7o),e(Qa,vae),e(vae,f7o),e(Qa,m7o),e(Qa,Tae),e(Tae,g7o),e(Qa,h7o),e(Qa,Mae),e(Mae,p7o),e(Qa,_7o),e(je,u7o),e(je,$),e($,Tu),e(Tu,Eae),e(Eae,b7o),e(Tu,F7o),e(Tu,k$),e(k$,v7o),e(Tu,T7o),e($,M7o),e($,Mu),e(Mu,Cae),e(Cae,E7o),e(Mu,C7o),e(Mu,S$),e(S$,w7o),e(Mu,A7o),e($,y7o),e($,Eu),e(Eu,wae),e(wae,L7o),e(Eu,x7o),e(Eu,R$),e(R$,k7o),e(Eu,S7o),e($,R7o),e($,Cu),e(Cu,Aae),e(Aae,B7o),e(Cu,P7o),e(Cu,B$),e(B$,$7o),e(Cu,I7o),e($,q7o),e($,wu),e(wu,yae),e(yae,N7o),e(wu,j7o),e(wu,P$),e(P$,D7o),e(wu,G7o),e($,O7o),e($,Au),e(Au,Lae),e(Lae,V7o),e(Au,X7o),e(Au,$$),e($$,z7o),e(Au,Q7o),e($,W7o),e($,yu),e(yu,xae),e(xae,H7o),e(yu,U7o),e(yu,I$),e(I$,J7o),e(yu,Y7o),e($,K7o),e($,Lu),e(Lu,kae),e(kae,Z7o),e(Lu,ebo),e(Lu,q$),e(q$,obo),e(Lu,rbo),e($,tbo),e($,xu),e(xu,Sae),e(Sae,abo),e(xu,nbo),e(xu,N$),e(N$,sbo),e(xu,lbo),e($,ibo),e($,ku),e(ku,Rae),e(Rae,dbo),e(ku,cbo),e(ku,j$),e(j$,fbo),e(ku,mbo),e($,gbo),e($,Su),e(Su,Bae),e(Bae,hbo),e(Su,pbo),e(Su,D$),e(D$,_bo),e(Su,ubo),e($,bbo),e($,Ru),e(Ru,Pae),e(Pae,Fbo),e(Ru,vbo),e(Ru,G$),e(G$,Tbo),e(Ru,Mbo),e($,Ebo),e($,Bu),e(Bu,$ae),e($ae,Cbo),e(Bu,wbo),e(Bu,O$),e(O$,Abo),e(Bu,ybo),e($,Lbo),e($,Pu),e(Pu,Iae),e(Iae,xbo),e(Pu,kbo),e(Pu,V$),e(V$,Sbo),e(Pu,Rbo),e($,Bbo),e($,$u),e($u,qae),e(qae,Pbo),e($u,$bo),e($u,X$),e(X$,Ibo),e($u,qbo),e($,Nbo),e($,Iu),e(Iu,Nae),e(Nae,jbo),e(Iu,Dbo),e(Iu,z$),e(z$,Gbo),e(Iu,Obo),e($,Vbo),e($,qu),e(qu,jae),e(jae,Xbo),e(qu,zbo),e(qu,Q$),e(Q$,Qbo),e(qu,Wbo),e($,Hbo),e($,Nu),e(Nu,Dae),e(Dae,Ubo),e(Nu,Jbo),e(Nu,W$),e(W$,Ybo),e(Nu,Kbo),e($,Zbo),e($,ju),e(ju,Gae),e(Gae,e5o),e(ju,o5o),e(ju,H$),e(H$,r5o),e(ju,t5o),e($,a5o),e($,Du),e(Du,Oae),e(Oae,n5o),e(Du,s5o),e(Du,U$),e(U$,l5o),e(Du,i5o),e($,d5o),e($,Gu),e(Gu,Vae),e(Vae,c5o),e(Gu,f5o),e(Gu,J$),e(J$,m5o),e(Gu,g5o),e($,h5o),e($,Ou),e(Ou,Xae),e(Xae,p5o),e(Ou,_5o),e(Ou,Y$),e(Y$,u5o),e(Ou,b5o),e($,F5o),e($,Vu),e(Vu,zae),e(zae,v5o),e(Vu,T5o),e(Vu,K$),e(K$,M5o),e(Vu,E5o),e($,C5o),e($,Xu),e(Xu,Qae),e(Qae,w5o),e(Xu,A5o),e(Xu,Z$),e(Z$,y5o),e(Xu,L5o),e($,x5o),e($,zu),e(zu,Wae),e(Wae,k5o),e(zu,S5o),e(zu,eI),e(eI,R5o),e(zu,B5o),e($,P5o),e($,Qu),e(Qu,Hae),e(Hae,$5o),e(Qu,I5o),e(Qu,oI),e(oI,q5o),e(Qu,N5o),e($,j5o),e($,Wu),e(Wu,Uae),e(Uae,D5o),e(Wu,G5o),e(Wu,rI),e(rI,O5o),e(Wu,V5o),e($,X5o),e($,Hu),e(Hu,Jae),e(Jae,z5o),e(Hu,Q5o),e(Hu,tI),e(tI,W5o),e(Hu,H5o),e($,U5o),e($,Uu),e(Uu,Yae),e(Yae,J5o),e(Uu,Y5o),e(Uu,aI),e(aI,K5o),e(Uu,Z5o),e($,e3o),e($,Ju),e(Ju,Kae),e(Kae,o3o),e(Ju,r3o),e(Ju,nI),e(nI,t3o),e(Ju,a3o),e($,n3o),e($,Yu),e(Yu,Zae),e(Zae,s3o),e(Yu,l3o),e(Yu,sI),e(sI,i3o),e(Yu,d3o),e($,c3o),e($,Ku),e(Ku,ene),e(ene,f3o),e(Ku,m3o),e(Ku,lI),e(lI,g3o),e(Ku,h3o),e($,p3o),e($,Zu),e(Zu,one),e(one,_3o),e(Zu,u3o),e(Zu,iI),e(iI,b3o),e(Zu,F3o),e($,v3o),e($,e1),e(e1,rne),e(rne,T3o),e(e1,M3o),e(e1,dI),e(dI,E3o),e(e1,C3o),e($,w3o),e($,o1),e(o1,tne),e(tne,A3o),e(o1,y3o),e(o1,cI),e(cI,L3o),e(o1,x3o),e(je,k3o),e(je,r1),e(r1,S3o),e(r1,ane),e(ane,R3o),e(r1,B3o),e(r1,nne),e(nne,P3o),e(je,$3o),e(je,sne),e(sne,I3o),e(je,q3o),g(bw,je,null),b(c,hRe,u),b(c,nd,u),e(nd,t1),e(t1,lne),g(Fw,lne,null),e(nd,N3o),e(nd,ine),e(ine,j3o),b(c,pRe,u),b(c,Zo,u),g(vw,Zo,null),e(Zo,D3o),e(Zo,sd),e(sd,G3o),e(sd,fI),e(fI,O3o),e(sd,V3o),e(sd,mI),e(mI,X3o),e(sd,z3o),e(Zo,Q3o),e(Zo,Tw),e(Tw,W3o),e(Tw,dne),e(dne,H3o),e(Tw,U3o),e(Zo,J3o),e(Zo,Wr),g(Mw,Wr,null),e(Wr,Y3o),e(Wr,cne),e(cne,K3o),e(Wr,Z3o),e(Wr,ld),e(ld,e2o),e(ld,fne),e(fne,o2o),e(ld,r2o),e(ld,gI),e(gI,t2o),e(ld,a2o),e(Wr,n2o),e(Wr,mne),e(mne,s2o),e(Wr,l2o),g(Ew,Wr,null),e(Zo,i2o),e(Zo,De),g(Cw,De,null),e(De,d2o),e(De,gne),e(gne,c2o),e(De,f2o),e(De,Wa),e(Wa,m2o),e(Wa,hne),e(hne,g2o),e(Wa,h2o),e(Wa,pne),e(pne,p2o),e(Wa,_2o),e(Wa,_ne),e(_ne,u2o),e(Wa,b2o),e(De,F2o),e(De,I),e(I,a1),e(a1,une),e(une,v2o),e(a1,T2o),e(a1,hI),e(hI,M2o),e(a1,E2o),e(I,C2o),e(I,n1),e(n1,bne),e(bne,w2o),e(n1,A2o),e(n1,pI),e(pI,y2o),e(n1,L2o),e(I,x2o),e(I,s1),e(s1,Fne),e(Fne,k2o),e(s1,S2o),e(s1,_I),e(_I,R2o),e(s1,B2o),e(I,P2o),e(I,l1),e(l1,vne),e(vne,$2o),e(l1,I2o),e(l1,uI),e(uI,q2o),e(l1,N2o),e(I,j2o),e(I,i1),e(i1,Tne),e(Tne,D2o),e(i1,G2o),e(i1,bI),e(bI,O2o),e(i1,V2o),e(I,X2o),e(I,d1),e(d1,Mne),e(Mne,z2o),e(d1,Q2o),e(d1,FI),e(FI,W2o),e(d1,H2o),e(I,U2o),e(I,c1),e(c1,Ene),e(Ene,J2o),e(c1,Y2o),e(c1,vI),e(vI,K2o),e(c1,Z2o),e(I,eFo),e(I,f1),e(f1,Cne),e(Cne,oFo),e(f1,rFo),e(f1,TI),e(TI,tFo),e(f1,aFo),e(I,nFo),e(I,m1),e(m1,wne),e(wne,sFo),e(m1,lFo),e(m1,MI),e(MI,iFo),e(m1,dFo),e(I,cFo),e(I,g1),e(g1,Ane),e(Ane,fFo),e(g1,mFo),e(g1,EI),e(EI,gFo),e(g1,hFo),e(I,pFo),e(I,h1),e(h1,yne),e(yne,_Fo),e(h1,uFo),e(h1,CI),e(CI,bFo),e(h1,FFo),e(I,vFo),e(I,p1),e(p1,Lne),e(Lne,TFo),e(p1,MFo),e(p1,wI),e(wI,EFo),e(p1,CFo),e(I,wFo),e(I,_1),e(_1,xne),e(xne,AFo),e(_1,yFo),e(_1,AI),e(AI,LFo),e(_1,xFo),e(I,kFo),e(I,u1),e(u1,kne),e(kne,SFo),e(u1,RFo),e(u1,yI),e(yI,BFo),e(u1,PFo),e(I,$Fo),e(I,b1),e(b1,Sne),e(Sne,IFo),e(b1,qFo),e(b1,LI),e(LI,NFo),e(b1,jFo),e(I,DFo),e(I,F1),e(F1,Rne),e(Rne,GFo),e(F1,OFo),e(F1,xI),e(xI,VFo),e(F1,XFo),e(I,zFo),e(I,v1),e(v1,Bne),e(Bne,QFo),e(v1,WFo),e(v1,kI),e(kI,HFo),e(v1,UFo),e(I,JFo),e(I,T1),e(T1,Pne),e(Pne,YFo),e(T1,KFo),e(T1,SI),e(SI,ZFo),e(T1,evo),e(I,ovo),e(I,M1),e(M1,$ne),e($ne,rvo),e(M1,tvo),e(M1,RI),e(RI,avo),e(M1,nvo),e(I,svo),e(I,E1),e(E1,Ine),e(Ine,lvo),e(E1,ivo),e(E1,BI),e(BI,dvo),e(E1,cvo),e(I,fvo),e(I,C1),e(C1,qne),e(qne,mvo),e(C1,gvo),e(C1,PI),e(PI,hvo),e(C1,pvo),e(I,_vo),e(I,w1),e(w1,Nne),e(Nne,uvo),e(w1,bvo),e(w1,$I),e($I,Fvo),e(w1,vvo),e(I,Tvo),e(I,A1),e(A1,jne),e(jne,Mvo),e(A1,Evo),e(A1,II),e(II,Cvo),e(A1,wvo),e(I,Avo),e(I,y1),e(y1,Dne),e(Dne,yvo),e(y1,Lvo),e(y1,qI),e(qI,xvo),e(y1,kvo),e(I,Svo),e(I,L1),e(L1,Gne),e(Gne,Rvo),e(L1,Bvo),e(L1,NI),e(NI,Pvo),e(L1,$vo),e(I,Ivo),e(I,x1),e(x1,One),e(One,qvo),e(x1,Nvo),e(x1,jI),e(jI,jvo),e(x1,Dvo),e(I,Gvo),e(I,k1),e(k1,Vne),e(Vne,Ovo),e(k1,Vvo),e(k1,DI),e(DI,Xvo),e(k1,zvo),e(I,Qvo),e(I,S1),e(S1,Xne),e(Xne,Wvo),e(S1,Hvo),e(S1,GI),e(GI,Uvo),e(S1,Jvo),e(I,Yvo),e(I,R1),e(R1,zne),e(zne,Kvo),e(R1,Zvo),e(R1,OI),e(OI,eTo),e(R1,oTo),e(I,rTo),e(I,B1),e(B1,Qne),e(Qne,tTo),e(B1,aTo),e(B1,VI),e(VI,nTo),e(B1,sTo),e(I,lTo),e(I,P1),e(P1,Wne),e(Wne,iTo),e(P1,dTo),e(P1,Hne),e(Hne,cTo),e(P1,fTo),e(I,mTo),e(I,$1),e($1,Une),e(Une,gTo),e($1,hTo),e($1,XI),e(XI,pTo),e($1,_To),e(I,uTo),e(I,I1),e(I1,Jne),e(Jne,bTo),e(I1,FTo),e(I1,zI),e(zI,vTo),e(I1,TTo),e(I,MTo),e(I,q1),e(q1,Yne),e(Yne,ETo),e(q1,CTo),e(q1,QI),e(QI,wTo),e(q1,ATo),e(I,yTo),e(I,N1),e(N1,Kne),e(Kne,LTo),e(N1,xTo),e(N1,WI),e(WI,kTo),e(N1,STo),e(De,RTo),e(De,j1),e(j1,BTo),e(j1,Zne),e(Zne,PTo),e(j1,$To),e(j1,ese),e(ese,ITo),e(De,qTo),e(De,ose),e(ose,NTo),e(De,jTo),g(ww,De,null),b(c,_Re,u),b(c,id,u),e(id,D1),e(D1,rse),g(Aw,rse,null),e(id,DTo),e(id,tse),e(tse,GTo),b(c,uRe,u),b(c,er,u),g(yw,er,null),e(er,OTo),e(er,dd),e(dd,VTo),e(dd,HI),e(HI,XTo),e(dd,zTo),e(dd,UI),e(UI,QTo),e(dd,WTo),e(er,HTo),e(er,Lw),e(Lw,UTo),e(Lw,ase),e(ase,JTo),e(Lw,YTo),e(er,KTo),e(er,Hr),g(xw,Hr,null),e(Hr,ZTo),e(Hr,nse),e(nse,eMo),e(Hr,oMo),e(Hr,cd),e(cd,rMo),e(cd,sse),e(sse,tMo),e(cd,aMo),e(cd,JI),e(JI,nMo),e(cd,sMo),e(Hr,lMo),e(Hr,lse),e(lse,iMo),e(Hr,dMo),g(kw,Hr,null),e(er,cMo),e(er,Ge),g(Sw,Ge,null),e(Ge,fMo),e(Ge,ise),e(ise,mMo),e(Ge,gMo),e(Ge,Ha),e(Ha,hMo),e(Ha,dse),e(dse,pMo),e(Ha,_Mo),e(Ha,cse),e(cse,uMo),e(Ha,bMo),e(Ha,fse),e(fse,FMo),e(Ha,vMo),e(Ge,TMo),e(Ge,se),e(se,G1),e(G1,mse),e(mse,MMo),e(G1,EMo),e(G1,YI),e(YI,CMo),e(G1,wMo),e(se,AMo),e(se,O1),e(O1,gse),e(gse,yMo),e(O1,LMo),e(O1,KI),e(KI,xMo),e(O1,kMo),e(se,SMo),e(se,V1),e(V1,hse),e(hse,RMo),e(V1,BMo),e(V1,ZI),e(ZI,PMo),e(V1,$Mo),e(se,IMo),e(se,X1),e(X1,pse),e(pse,qMo),e(X1,NMo),e(X1,eq),e(eq,jMo),e(X1,DMo),e(se,GMo),e(se,z1),e(z1,_se),e(_se,OMo),e(z1,VMo),e(z1,oq),e(oq,XMo),e(z1,zMo),e(se,QMo),e(se,Q1),e(Q1,use),e(use,WMo),e(Q1,HMo),e(Q1,rq),e(rq,UMo),e(Q1,JMo),e(se,YMo),e(se,W1),e(W1,bse),e(bse,KMo),e(W1,ZMo),e(W1,tq),e(tq,e4o),e(W1,o4o),e(se,r4o),e(se,H1),e(H1,Fse),e(Fse,t4o),e(H1,a4o),e(H1,aq),e(aq,n4o),e(H1,s4o),e(se,l4o),e(se,U1),e(U1,vse),e(vse,i4o),e(U1,d4o),e(U1,nq),e(nq,c4o),e(U1,f4o),e(se,m4o),e(se,J1),e(J1,Tse),e(Tse,g4o),e(J1,h4o),e(J1,sq),e(sq,p4o),e(J1,_4o),e(se,u4o),e(se,Y1),e(Y1,Mse),e(Mse,b4o),e(Y1,F4o),e(Y1,lq),e(lq,v4o),e(Y1,T4o),e(se,M4o),e(se,K1),e(K1,Ese),e(Ese,E4o),e(K1,C4o),e(K1,iq),e(iq,w4o),e(K1,A4o),e(se,y4o),e(se,Z1),e(Z1,Cse),e(Cse,L4o),e(Z1,x4o),e(Z1,dq),e(dq,k4o),e(Z1,S4o),e(se,R4o),e(se,e7),e(e7,wse),e(wse,B4o),e(e7,P4o),e(e7,cq),e(cq,$4o),e(e7,I4o),e(se,q4o),e(se,o7),e(o7,Ase),e(Ase,N4o),e(o7,j4o),e(o7,fq),e(fq,D4o),e(o7,G4o),e(se,O4o),e(se,r7),e(r7,yse),e(yse,V4o),e(r7,X4o),e(r7,mq),e(mq,z4o),e(r7,Q4o),e(Ge,W4o),e(Ge,t7),e(t7,H4o),e(t7,Lse),e(Lse,U4o),e(t7,J4o),e(t7,xse),e(xse,Y4o),e(Ge,K4o),e(Ge,kse),e(kse,Z4o),e(Ge,eEo),g(Rw,Ge,null),b(c,bRe,u),b(c,fd,u),e(fd,a7),e(a7,Sse),g(Bw,Sse,null),e(fd,oEo),e(fd,Rse),e(Rse,rEo),b(c,FRe,u),b(c,or,u),g(Pw,or,null),e(or,tEo),e(or,md),e(md,aEo),e(md,gq),e(gq,nEo),e(md,sEo),e(md,hq),e(hq,lEo),e(md,iEo),e(or,dEo),e(or,$w),e($w,cEo),e($w,Bse),e(Bse,fEo),e($w,mEo),e(or,gEo),e(or,Ur),g(Iw,Ur,null),e(Ur,hEo),e(Ur,Pse),e(Pse,pEo),e(Ur,_Eo),e(Ur,gd),e(gd,uEo),e(gd,$se),e($se,bEo),e(gd,FEo),e(gd,pq),e(pq,vEo),e(gd,TEo),e(Ur,MEo),e(Ur,Ise),e(Ise,EEo),e(Ur,CEo),g(qw,Ur,null),e(or,wEo),e(or,Oe),g(Nw,Oe,null),e(Oe,AEo),e(Oe,qse),e(qse,yEo),e(Oe,LEo),e(Oe,Ua),e(Ua,xEo),e(Ua,Nse),e(Nse,kEo),e(Ua,SEo),e(Ua,jse),e(jse,REo),e(Ua,BEo),e(Ua,Dse),e(Dse,PEo),e(Ua,$Eo),e(Oe,IEo),e(Oe,y),e(y,n7),e(n7,Gse),e(Gse,qEo),e(n7,NEo),e(n7,_q),e(_q,jEo),e(n7,DEo),e(y,GEo),e(y,s7),e(s7,Ose),e(Ose,OEo),e(s7,VEo),e(s7,uq),e(uq,XEo),e(s7,zEo),e(y,QEo),e(y,l7),e(l7,Vse),e(Vse,WEo),e(l7,HEo),e(l7,bq),e(bq,UEo),e(l7,JEo),e(y,YEo),e(y,i7),e(i7,Xse),e(Xse,KEo),e(i7,ZEo),e(i7,Fq),e(Fq,eCo),e(i7,oCo),e(y,rCo),e(y,d7),e(d7,zse),e(zse,tCo),e(d7,aCo),e(d7,vq),e(vq,nCo),e(d7,sCo),e(y,lCo),e(y,c7),e(c7,Qse),e(Qse,iCo),e(c7,dCo),e(c7,Tq),e(Tq,cCo),e(c7,fCo),e(y,mCo),e(y,f7),e(f7,Wse),e(Wse,gCo),e(f7,hCo),e(f7,Mq),e(Mq,pCo),e(f7,_Co),e(y,uCo),e(y,m7),e(m7,Hse),e(Hse,bCo),e(m7,FCo),e(m7,Eq),e(Eq,vCo),e(m7,TCo),e(y,MCo),e(y,g7),e(g7,Use),e(Use,ECo),e(g7,CCo),e(g7,Cq),e(Cq,wCo),e(g7,ACo),e(y,yCo),e(y,h7),e(h7,Jse),e(Jse,LCo),e(h7,xCo),e(h7,wq),e(wq,kCo),e(h7,SCo),e(y,RCo),e(y,p7),e(p7,Yse),e(Yse,BCo),e(p7,PCo),e(p7,Aq),e(Aq,$Co),e(p7,ICo),e(y,qCo),e(y,_7),e(_7,Kse),e(Kse,NCo),e(_7,jCo),e(_7,yq),e(yq,DCo),e(_7,GCo),e(y,OCo),e(y,u7),e(u7,Zse),e(Zse,VCo),e(u7,XCo),e(u7,Lq),e(Lq,zCo),e(u7,QCo),e(y,WCo),e(y,b7),e(b7,ele),e(ele,HCo),e(b7,UCo),e(b7,xq),e(xq,JCo),e(b7,YCo),e(y,KCo),e(y,F7),e(F7,ole),e(ole,ZCo),e(F7,ewo),e(F7,kq),e(kq,owo),e(F7,rwo),e(y,two),e(y,v7),e(v7,rle),e(rle,awo),e(v7,nwo),e(v7,Sq),e(Sq,swo),e(v7,lwo),e(y,iwo),e(y,T7),e(T7,tle),e(tle,dwo),e(T7,cwo),e(T7,Rq),e(Rq,fwo),e(T7,mwo),e(y,gwo),e(y,M7),e(M7,ale),e(ale,hwo),e(M7,pwo),e(M7,Bq),e(Bq,_wo),e(M7,uwo),e(y,bwo),e(y,E7),e(E7,nle),e(nle,Fwo),e(E7,vwo),e(E7,Pq),e(Pq,Two),e(E7,Mwo),e(y,Ewo),e(y,C7),e(C7,sle),e(sle,Cwo),e(C7,wwo),e(C7,$q),e($q,Awo),e(C7,ywo),e(y,Lwo),e(y,w7),e(w7,lle),e(lle,xwo),e(w7,kwo),e(w7,Iq),e(Iq,Swo),e(w7,Rwo),e(y,Bwo),e(y,A7),e(A7,ile),e(ile,Pwo),e(A7,$wo),e(A7,qq),e(qq,Iwo),e(A7,qwo),e(y,Nwo),e(y,y7),e(y7,dle),e(dle,jwo),e(y7,Dwo),e(y7,Nq),e(Nq,Gwo),e(y7,Owo),e(y,Vwo),e(y,L7),e(L7,cle),e(cle,Xwo),e(L7,zwo),e(L7,jq),e(jq,Qwo),e(L7,Wwo),e(y,Hwo),e(y,x7),e(x7,fle),e(fle,Uwo),e(x7,Jwo),e(x7,Dq),e(Dq,Ywo),e(x7,Kwo),e(y,Zwo),e(y,k7),e(k7,mle),e(mle,eAo),e(k7,oAo),e(k7,Gq),e(Gq,rAo),e(k7,tAo),e(y,aAo),e(y,S7),e(S7,gle),e(gle,nAo),e(S7,sAo),e(S7,Oq),e(Oq,lAo),e(S7,iAo),e(y,dAo),e(y,R7),e(R7,hle),e(hle,cAo),e(R7,fAo),e(R7,Vq),e(Vq,mAo),e(R7,gAo),e(y,hAo),e(y,B7),e(B7,ple),e(ple,pAo),e(B7,_Ao),e(B7,Xq),e(Xq,uAo),e(B7,bAo),e(y,FAo),e(y,P7),e(P7,_le),e(_le,vAo),e(P7,TAo),e(P7,zq),e(zq,MAo),e(P7,EAo),e(y,CAo),e(y,$7),e($7,ule),e(ule,wAo),e($7,AAo),e($7,Qq),e(Qq,yAo),e($7,LAo),e(y,xAo),e(y,I7),e(I7,ble),e(ble,kAo),e(I7,SAo),e(I7,Wq),e(Wq,RAo),e(I7,BAo),e(y,PAo),e(y,q7),e(q7,Fle),e(Fle,$Ao),e(q7,IAo),e(q7,Hq),e(Hq,qAo),e(q7,NAo),e(y,jAo),e(y,N7),e(N7,vle),e(vle,DAo),e(N7,GAo),e(N7,Uq),e(Uq,OAo),e(N7,VAo),e(y,XAo),e(y,j7),e(j7,Tle),e(Tle,zAo),e(j7,QAo),e(j7,Jq),e(Jq,WAo),e(j7,HAo),e(y,UAo),e(y,D7),e(D7,Mle),e(Mle,JAo),e(D7,YAo),e(D7,Yq),e(Yq,KAo),e(D7,ZAo),e(y,e6o),e(y,G7),e(G7,Ele),e(Ele,o6o),e(G7,r6o),e(G7,Kq),e(Kq,t6o),e(G7,a6o),e(y,n6o),e(y,O7),e(O7,Cle),e(Cle,s6o),e(O7,l6o),e(O7,Zq),e(Zq,i6o),e(O7,d6o),e(y,c6o),e(y,V7),e(V7,wle),e(wle,f6o),e(V7,m6o),e(V7,eN),e(eN,g6o),e(V7,h6o),e(y,p6o),e(y,X7),e(X7,Ale),e(Ale,_6o),e(X7,u6o),e(X7,oN),e(oN,b6o),e(X7,F6o),e(y,v6o),e(y,z7),e(z7,yle),e(yle,T6o),e(z7,M6o),e(z7,rN),e(rN,E6o),e(z7,C6o),e(y,w6o),e(y,Q7),e(Q7,Lle),e(Lle,A6o),e(Q7,y6o),e(Q7,tN),e(tN,L6o),e(Q7,x6o),e(y,k6o),e(y,W7),e(W7,xle),e(xle,S6o),e(W7,R6o),e(W7,aN),e(aN,B6o),e(W7,P6o),e(y,$6o),e(y,H7),e(H7,kle),e(kle,I6o),e(H7,q6o),e(H7,nN),e(nN,N6o),e(H7,j6o),e(y,D6o),e(y,U7),e(U7,Sle),e(Sle,G6o),e(U7,O6o),e(U7,sN),e(sN,V6o),e(U7,X6o),e(y,z6o),e(y,J7),e(J7,Rle),e(Rle,Q6o),e(J7,W6o),e(J7,lN),e(lN,H6o),e(J7,U6o),e(Oe,J6o),e(Oe,Y7),e(Y7,Y6o),e(Y7,Ble),e(Ble,K6o),e(Y7,Z6o),e(Y7,Ple),e(Ple,e0o),e(Oe,o0o),e(Oe,$le),e($le,r0o),e(Oe,t0o),g(jw,Oe,null),b(c,vRe,u),b(c,hd,u),e(hd,K7),e(K7,Ile),g(Dw,Ile,null),e(hd,a0o),e(hd,qle),e(qle,n0o),b(c,TRe,u),b(c,rr,u),g(Gw,rr,null),e(rr,s0o),e(rr,pd),e(pd,l0o),e(pd,iN),e(iN,i0o),e(pd,d0o),e(pd,dN),e(dN,c0o),e(pd,f0o),e(rr,m0o),e(rr,Ow),e(Ow,g0o),e(Ow,Nle),e(Nle,h0o),e(Ow,p0o),e(rr,_0o),e(rr,Jr),g(Vw,Jr,null),e(Jr,u0o),e(Jr,jle),e(jle,b0o),e(Jr,F0o),e(Jr,_d),e(_d,v0o),e(_d,Dle),e(Dle,T0o),e(_d,M0o),e(_d,cN),e(cN,E0o),e(_d,C0o),e(Jr,w0o),e(Jr,Gle),e(Gle,A0o),e(Jr,y0o),g(Xw,Jr,null),e(rr,L0o),e(rr,Ve),g(zw,Ve,null),e(Ve,x0o),e(Ve,Ole),e(Ole,k0o),e(Ve,S0o),e(Ve,Ja),e(Ja,R0o),e(Ja,Vle),e(Vle,B0o),e(Ja,P0o),e(Ja,Xle),e(Xle,$0o),e(Ja,I0o),e(Ja,zle),e(zle,q0o),e(Ja,N0o),e(Ve,j0o),e(Ve,G),e(G,Z7),e(Z7,Qle),e(Qle,D0o),e(Z7,G0o),e(Z7,fN),e(fN,O0o),e(Z7,V0o),e(G,X0o),e(G,eb),e(eb,Wle),e(Wle,z0o),e(eb,Q0o),e(eb,mN),e(mN,W0o),e(eb,H0o),e(G,U0o),e(G,ob),e(ob,Hle),e(Hle,J0o),e(ob,Y0o),e(ob,gN),e(gN,K0o),e(ob,Z0o),e(G,eyo),e(G,rb),e(rb,Ule),e(Ule,oyo),e(rb,ryo),e(rb,hN),e(hN,tyo),e(rb,ayo),e(G,nyo),e(G,tb),e(tb,Jle),e(Jle,syo),e(tb,lyo),e(tb,pN),e(pN,iyo),e(tb,dyo),e(G,cyo),e(G,ab),e(ab,Yle),e(Yle,fyo),e(ab,myo),e(ab,_N),e(_N,gyo),e(ab,hyo),e(G,pyo),e(G,nb),e(nb,Kle),e(Kle,_yo),e(nb,uyo),e(nb,uN),e(uN,byo),e(nb,Fyo),e(G,vyo),e(G,sb),e(sb,Zle),e(Zle,Tyo),e(sb,Myo),e(sb,bN),e(bN,Eyo),e(sb,Cyo),e(G,wyo),e(G,lb),e(lb,eie),e(eie,Ayo),e(lb,yyo),e(lb,FN),e(FN,Lyo),e(lb,xyo),e(G,kyo),e(G,ib),e(ib,oie),e(oie,Syo),e(ib,Ryo),e(ib,vN),e(vN,Byo),e(ib,Pyo),e(G,$yo),e(G,db),e(db,rie),e(rie,Iyo),e(db,qyo),e(db,TN),e(TN,Nyo),e(db,jyo),e(G,Dyo),e(G,cb),e(cb,tie),e(tie,Gyo),e(cb,Oyo),e(cb,MN),e(MN,Vyo),e(cb,Xyo),e(G,zyo),e(G,fb),e(fb,aie),e(aie,Qyo),e(fb,Wyo),e(fb,EN),e(EN,Hyo),e(fb,Uyo),e(G,Jyo),e(G,mb),e(mb,nie),e(nie,Yyo),e(mb,Kyo),e(mb,CN),e(CN,Zyo),e(mb,eLo),e(G,oLo),e(G,gb),e(gb,sie),e(sie,rLo),e(gb,tLo),e(gb,wN),e(wN,aLo),e(gb,nLo),e(G,sLo),e(G,hb),e(hb,lie),e(lie,lLo),e(hb,iLo),e(hb,AN),e(AN,dLo),e(hb,cLo),e(G,fLo),e(G,pb),e(pb,iie),e(iie,mLo),e(pb,gLo),e(pb,yN),e(yN,hLo),e(pb,pLo),e(G,_Lo),e(G,_b),e(_b,die),e(die,uLo),e(_b,bLo),e(_b,LN),e(LN,FLo),e(_b,vLo),e(G,TLo),e(G,ub),e(ub,cie),e(cie,MLo),e(ub,ELo),e(ub,xN),e(xN,CLo),e(ub,wLo),e(G,ALo),e(G,bb),e(bb,fie),e(fie,yLo),e(bb,LLo),e(bb,kN),e(kN,xLo),e(bb,kLo),e(G,SLo),e(G,Fb),e(Fb,mie),e(mie,RLo),e(Fb,BLo),e(Fb,SN),e(SN,PLo),e(Fb,$Lo),e(G,ILo),e(G,vb),e(vb,gie),e(gie,qLo),e(vb,NLo),e(vb,RN),e(RN,jLo),e(vb,DLo),e(G,GLo),e(G,Tb),e(Tb,hie),e(hie,OLo),e(Tb,VLo),e(Tb,BN),e(BN,XLo),e(Tb,zLo),e(G,QLo),e(G,Mb),e(Mb,pie),e(pie,WLo),e(Mb,HLo),e(Mb,PN),e(PN,ULo),e(Mb,JLo),e(G,YLo),e(G,Eb),e(Eb,_ie),e(_ie,KLo),e(Eb,ZLo),e(Eb,$N),e($N,e8o),e(Eb,o8o),e(G,r8o),e(G,Cb),e(Cb,uie),e(uie,t8o),e(Cb,a8o),e(Cb,IN),e(IN,n8o),e(Cb,s8o),e(G,l8o),e(G,wb),e(wb,bie),e(bie,i8o),e(wb,d8o),e(wb,qN),e(qN,c8o),e(wb,f8o),e(G,m8o),e(G,Ab),e(Ab,Fie),e(Fie,g8o),e(Ab,h8o),e(Ab,NN),e(NN,p8o),e(Ab,_8o),e(Ve,u8o),e(Ve,yb),e(yb,b8o),e(yb,vie),e(vie,F8o),e(yb,v8o),e(yb,Tie),e(Tie,T8o),e(Ve,M8o),e(Ve,Mie),e(Mie,E8o),e(Ve,C8o),g(Qw,Ve,null),b(c,MRe,u),b(c,ud,u),e(ud,Lb),e(Lb,Eie),g(Ww,Eie,null),e(ud,w8o),e(ud,Cie),e(Cie,A8o),b(c,ERe,u),b(c,tr,u),g(Hw,tr,null),e(tr,y8o),e(tr,bd),e(bd,L8o),e(bd,jN),e(jN,x8o),e(bd,k8o),e(bd,DN),e(DN,S8o),e(bd,R8o),e(tr,B8o),e(tr,Uw),e(Uw,P8o),e(Uw,wie),e(wie,$8o),e(Uw,I8o),e(tr,q8o),e(tr,Yr),g(Jw,Yr,null),e(Yr,N8o),e(Yr,Aie),e(Aie,j8o),e(Yr,D8o),e(Yr,Fd),e(Fd,G8o),e(Fd,yie),e(yie,O8o),e(Fd,V8o),e(Fd,GN),e(GN,X8o),e(Fd,z8o),e(Yr,Q8o),e(Yr,Lie),e(Lie,W8o),e(Yr,H8o),g(Yw,Yr,null),e(tr,U8o),e(tr,Xe),g(Kw,Xe,null),e(Xe,J8o),e(Xe,xie),e(xie,Y8o),e(Xe,K8o),e(Xe,Ya),e(Ya,Z8o),e(Ya,kie),e(kie,e9o),e(Ya,o9o),e(Ya,Sie),e(Sie,r9o),e(Ya,t9o),e(Ya,Rie),e(Rie,a9o),e(Ya,n9o),e(Xe,s9o),e(Xe,da),e(da,xb),e(xb,Bie),e(Bie,l9o),e(xb,i9o),e(xb,ON),e(ON,d9o),e(xb,c9o),e(da,f9o),e(da,kb),e(kb,Pie),e(Pie,m9o),e(kb,g9o),e(kb,VN),e(VN,h9o),e(kb,p9o),e(da,_9o),e(da,Sb),e(Sb,$ie),e($ie,u9o),e(Sb,b9o),e(Sb,XN),e(XN,F9o),e(Sb,v9o),e(da,T9o),e(da,Rb),e(Rb,Iie),e(Iie,M9o),e(Rb,E9o),e(Rb,zN),e(zN,C9o),e(Rb,w9o),e(da,A9o),e(da,Bb),e(Bb,qie),e(qie,y9o),e(Bb,L9o),e(Bb,QN),e(QN,x9o),e(Bb,k9o),e(Xe,S9o),e(Xe,Pb),e(Pb,R9o),e(Pb,Nie),e(Nie,B9o),e(Pb,P9o),e(Pb,jie),e(jie,$9o),e(Xe,I9o),e(Xe,Die),e(Die,q9o),e(Xe,N9o),g(Zw,Xe,null),b(c,CRe,u),b(c,vd,u),e(vd,$b),e($b,Gie),g(eA,Gie,null),e(vd,j9o),e(vd,Oie),e(Oie,D9o),b(c,wRe,u),b(c,ar,u),g(oA,ar,null),e(ar,G9o),e(ar,Td),e(Td,O9o),e(Td,WN),e(WN,V9o),e(Td,X9o),e(Td,HN),e(HN,z9o),e(Td,Q9o),e(ar,W9o),e(ar,rA),e(rA,H9o),e(rA,Vie),e(Vie,U9o),e(rA,J9o),e(ar,Y9o),e(ar,Kr),g(tA,Kr,null),e(Kr,K9o),e(Kr,Xie),e(Xie,Z9o),e(Kr,exo),e(Kr,Md),e(Md,oxo),e(Md,zie),e(zie,rxo),e(Md,txo),e(Md,UN),e(UN,axo),e(Md,nxo),e(Kr,sxo),e(Kr,Qie),e(Qie,lxo),e(Kr,ixo),g(aA,Kr,null),e(ar,dxo),e(ar,ze),g(nA,ze,null),e(ze,cxo),e(ze,Wie),e(Wie,fxo),e(ze,mxo),e(ze,Ka),e(Ka,gxo),e(Ka,Hie),e(Hie,hxo),e(Ka,pxo),e(Ka,Uie),e(Uie,_xo),e(Ka,uxo),e(Ka,Jie),e(Jie,bxo),e(Ka,Fxo),e(ze,vxo),e(ze,j),e(j,Ib),e(Ib,Yie),e(Yie,Txo),e(Ib,Mxo),e(Ib,JN),e(JN,Exo),e(Ib,Cxo),e(j,wxo),e(j,qb),e(qb,Kie),e(Kie,Axo),e(qb,yxo),e(qb,YN),e(YN,Lxo),e(qb,xxo),e(j,kxo),e(j,Nb),e(Nb,Zie),e(Zie,Sxo),e(Nb,Rxo),e(Nb,KN),e(KN,Bxo),e(Nb,Pxo),e(j,$xo),e(j,jb),e(jb,ede),e(ede,Ixo),e(jb,qxo),e(jb,ZN),e(ZN,Nxo),e(jb,jxo),e(j,Dxo),e(j,Db),e(Db,ode),e(ode,Gxo),e(Db,Oxo),e(Db,ej),e(ej,Vxo),e(Db,Xxo),e(j,zxo),e(j,Gb),e(Gb,rde),e(rde,Qxo),e(Gb,Wxo),e(Gb,oj),e(oj,Hxo),e(Gb,Uxo),e(j,Jxo),e(j,Ob),e(Ob,tde),e(tde,Yxo),e(Ob,Kxo),e(Ob,rj),e(rj,Zxo),e(Ob,eko),e(j,oko),e(j,Vb),e(Vb,ade),e(ade,rko),e(Vb,tko),e(Vb,tj),e(tj,ako),e(Vb,nko),e(j,sko),e(j,Xb),e(Xb,nde),e(nde,lko),e(Xb,iko),e(Xb,aj),e(aj,dko),e(Xb,cko),e(j,fko),e(j,zb),e(zb,sde),e(sde,mko),e(zb,gko),e(zb,nj),e(nj,hko),e(zb,pko),e(j,_ko),e(j,Qb),e(Qb,lde),e(lde,uko),e(Qb,bko),e(Qb,sj),e(sj,Fko),e(Qb,vko),e(j,Tko),e(j,Wb),e(Wb,ide),e(ide,Mko),e(Wb,Eko),e(Wb,lj),e(lj,Cko),e(Wb,wko),e(j,Ako),e(j,Hb),e(Hb,dde),e(dde,yko),e(Hb,Lko),e(Hb,ij),e(ij,xko),e(Hb,kko),e(j,Sko),e(j,Ub),e(Ub,cde),e(cde,Rko),e(Ub,Bko),e(Ub,dj),e(dj,Pko),e(Ub,$ko),e(j,Iko),e(j,Jb),e(Jb,fde),e(fde,qko),e(Jb,Nko),e(Jb,cj),e(cj,jko),e(Jb,Dko),e(j,Gko),e(j,Yb),e(Yb,mde),e(mde,Oko),e(Yb,Vko),e(Yb,fj),e(fj,Xko),e(Yb,zko),e(j,Qko),e(j,Kb),e(Kb,gde),e(gde,Wko),e(Kb,Hko),e(Kb,mj),e(mj,Uko),e(Kb,Jko),e(j,Yko),e(j,Zb),e(Zb,hde),e(hde,Kko),e(Zb,Zko),e(Zb,gj),e(gj,eSo),e(Zb,oSo),e(j,rSo),e(j,e5),e(e5,pde),e(pde,tSo),e(e5,aSo),e(e5,hj),e(hj,nSo),e(e5,sSo),e(j,lSo),e(j,o5),e(o5,_de),e(_de,iSo),e(o5,dSo),e(o5,pj),e(pj,cSo),e(o5,fSo),e(j,mSo),e(j,r5),e(r5,ude),e(ude,gSo),e(r5,hSo),e(r5,_j),e(_j,pSo),e(r5,_So),e(j,uSo),e(j,t5),e(t5,bde),e(bde,bSo),e(t5,FSo),e(t5,uj),e(uj,vSo),e(t5,TSo),e(j,MSo),e(j,a5),e(a5,Fde),e(Fde,ESo),e(a5,CSo),e(a5,bj),e(bj,wSo),e(a5,ASo),e(j,ySo),e(j,n5),e(n5,vde),e(vde,LSo),e(n5,xSo),e(n5,Fj),e(Fj,kSo),e(n5,SSo),e(j,RSo),e(j,s5),e(s5,Tde),e(Tde,BSo),e(s5,PSo),e(s5,vj),e(vj,$So),e(s5,ISo),e(j,qSo),e(j,l5),e(l5,Mde),e(Mde,NSo),e(l5,jSo),e(l5,Tj),e(Tj,DSo),e(l5,GSo),e(j,OSo),e(j,i5),e(i5,Ede),e(Ede,VSo),e(i5,XSo),e(i5,Mj),e(Mj,zSo),e(i5,QSo),e(j,WSo),e(j,d5),e(d5,Cde),e(Cde,HSo),e(d5,USo),e(d5,Ej),e(Ej,JSo),e(d5,YSo),e(j,KSo),e(j,c5),e(c5,wde),e(wde,ZSo),e(c5,eRo),e(c5,Cj),e(Cj,oRo),e(c5,rRo),e(j,tRo),e(j,f5),e(f5,Ade),e(Ade,aRo),e(f5,nRo),e(f5,wj),e(wj,sRo),e(f5,lRo),e(j,iRo),e(j,m5),e(m5,yde),e(yde,dRo),e(m5,cRo),e(m5,Aj),e(Aj,fRo),e(m5,mRo),e(j,gRo),e(j,g5),e(g5,Lde),e(Lde,hRo),e(g5,pRo),e(g5,yj),e(yj,_Ro),e(g5,uRo),e(j,bRo),e(j,h5),e(h5,xde),e(xde,FRo),e(h5,vRo),e(h5,Lj),e(Lj,TRo),e(h5,MRo),e(ze,ERo),e(ze,p5),e(p5,CRo),e(p5,kde),e(kde,wRo),e(p5,ARo),e(p5,Sde),e(Sde,yRo),e(ze,LRo),e(ze,Rde),e(Rde,xRo),e(ze,kRo),g(sA,ze,null),b(c,ARe,u),b(c,Ed,u),e(Ed,_5),e(_5,Bde),g(lA,Bde,null),e(Ed,SRo),e(Ed,Pde),e(Pde,RRo),b(c,yRe,u),b(c,nr,u),g(iA,nr,null),e(nr,BRo),e(nr,Cd),e(Cd,PRo),e(Cd,xj),e(xj,$Ro),e(Cd,IRo),e(Cd,kj),e(kj,qRo),e(Cd,NRo),e(nr,jRo),e(nr,dA),e(dA,DRo),e(dA,$de),e($de,GRo),e(dA,ORo),e(nr,VRo),e(nr,Zr),g(cA,Zr,null),e(Zr,XRo),e(Zr,Ide),e(Ide,zRo),e(Zr,QRo),e(Zr,wd),e(wd,WRo),e(wd,qde),e(qde,HRo),e(wd,URo),e(wd,Sj),e(Sj,JRo),e(wd,YRo),e(Zr,KRo),e(Zr,Nde),e(Nde,ZRo),e(Zr,eBo),g(fA,Zr,null),e(nr,oBo),e(nr,Qe),g(mA,Qe,null),e(Qe,rBo),e(Qe,jde),e(jde,tBo),e(Qe,aBo),e(Qe,Za),e(Za,nBo),e(Za,Dde),e(Dde,sBo),e(Za,lBo),e(Za,Gde),e(Gde,iBo),e(Za,dBo),e(Za,Ode),e(Ode,cBo),e(Za,fBo),e(Qe,mBo),e(Qe,R),e(R,u5),e(u5,Vde),e(Vde,gBo),e(u5,hBo),e(u5,Rj),e(Rj,pBo),e(u5,_Bo),e(R,uBo),e(R,b5),e(b5,Xde),e(Xde,bBo),e(b5,FBo),e(b5,Bj),e(Bj,vBo),e(b5,TBo),e(R,MBo),e(R,F5),e(F5,zde),e(zde,EBo),e(F5,CBo),e(F5,Pj),e(Pj,wBo),e(F5,ABo),e(R,yBo),e(R,v5),e(v5,Qde),e(Qde,LBo),e(v5,xBo),e(v5,$j),e($j,kBo),e(v5,SBo),e(R,RBo),e(R,T5),e(T5,Wde),e(Wde,BBo),e(T5,PBo),e(T5,Ij),e(Ij,$Bo),e(T5,IBo),e(R,qBo),e(R,M5),e(M5,Hde),e(Hde,NBo),e(M5,jBo),e(M5,qj),e(qj,DBo),e(M5,GBo),e(R,OBo),e(R,E5),e(E5,Ude),e(Ude,VBo),e(E5,XBo),e(E5,Nj),e(Nj,zBo),e(E5,QBo),e(R,WBo),e(R,C5),e(C5,Jde),e(Jde,HBo),e(C5,UBo),e(C5,jj),e(jj,JBo),e(C5,YBo),e(R,KBo),e(R,w5),e(w5,Yde),e(Yde,ZBo),e(w5,ePo),e(w5,Dj),e(Dj,oPo),e(w5,rPo),e(R,tPo),e(R,A5),e(A5,Kde),e(Kde,aPo),e(A5,nPo),e(A5,Gj),e(Gj,sPo),e(A5,lPo),e(R,iPo),e(R,y5),e(y5,Zde),e(Zde,dPo),e(y5,cPo),e(y5,Oj),e(Oj,fPo),e(y5,mPo),e(R,gPo),e(R,L5),e(L5,ece),e(ece,hPo),e(L5,pPo),e(L5,Vj),e(Vj,_Po),e(L5,uPo),e(R,bPo),e(R,x5),e(x5,oce),e(oce,FPo),e(x5,vPo),e(x5,Xj),e(Xj,TPo),e(x5,MPo),e(R,EPo),e(R,k5),e(k5,rce),e(rce,CPo),e(k5,wPo),e(k5,zj),e(zj,APo),e(k5,yPo),e(R,LPo),e(R,S5),e(S5,tce),e(tce,xPo),e(S5,kPo),e(S5,Qj),e(Qj,SPo),e(S5,RPo),e(R,BPo),e(R,R5),e(R5,ace),e(ace,PPo),e(R5,$Po),e(R5,Wj),e(Wj,IPo),e(R5,qPo),e(R,NPo),e(R,B5),e(B5,nce),e(nce,jPo),e(B5,DPo),e(B5,Hj),e(Hj,GPo),e(B5,OPo),e(R,VPo),e(R,P5),e(P5,sce),e(sce,XPo),e(P5,zPo),e(P5,Uj),e(Uj,QPo),e(P5,WPo),e(R,HPo),e(R,$5),e($5,lce),e(lce,UPo),e($5,JPo),e($5,Jj),e(Jj,YPo),e($5,KPo),e(R,ZPo),e(R,I5),e(I5,ice),e(ice,e$o),e(I5,o$o),e(I5,Yj),e(Yj,r$o),e(I5,t$o),e(R,a$o),e(R,q5),e(q5,dce),e(dce,n$o),e(q5,s$o),e(q5,Kj),e(Kj,l$o),e(q5,i$o),e(R,d$o),e(R,N5),e(N5,cce),e(cce,c$o),e(N5,f$o),e(N5,Zj),e(Zj,m$o),e(N5,g$o),e(R,h$o),e(R,j5),e(j5,fce),e(fce,p$o),e(j5,_$o),e(j5,eD),e(eD,u$o),e(j5,b$o),e(R,F$o),e(R,D5),e(D5,mce),e(mce,v$o),e(D5,T$o),e(D5,oD),e(oD,M$o),e(D5,E$o),e(R,C$o),e(R,G5),e(G5,gce),e(gce,w$o),e(G5,A$o),e(G5,rD),e(rD,y$o),e(G5,L$o),e(R,x$o),e(R,O5),e(O5,hce),e(hce,k$o),e(O5,S$o),e(O5,tD),e(tD,R$o),e(O5,B$o),e(R,P$o),e(R,V5),e(V5,pce),e(pce,$$o),e(V5,I$o),e(V5,aD),e(aD,q$o),e(V5,N$o),e(R,j$o),e(R,X5),e(X5,_ce),e(_ce,D$o),e(X5,G$o),e(X5,nD),e(nD,O$o),e(X5,V$o),e(R,X$o),e(R,z5),e(z5,uce),e(uce,z$o),e(z5,Q$o),e(z5,sD),e(sD,W$o),e(z5,H$o),e(R,U$o),e(R,Q5),e(Q5,bce),e(bce,J$o),e(Q5,Y$o),e(Q5,lD),e(lD,K$o),e(Q5,Z$o),e(R,eIo),e(R,W5),e(W5,Fce),e(Fce,oIo),e(W5,rIo),e(W5,iD),e(iD,tIo),e(W5,aIo),e(R,nIo),e(R,H5),e(H5,vce),e(vce,sIo),e(H5,lIo),e(H5,dD),e(dD,iIo),e(H5,dIo),e(R,cIo),e(R,U5),e(U5,Tce),e(Tce,fIo),e(U5,mIo),e(U5,cD),e(cD,gIo),e(U5,hIo),e(R,pIo),e(R,J5),e(J5,Mce),e(Mce,_Io),e(J5,uIo),e(J5,fD),e(fD,bIo),e(J5,FIo),e(R,vIo),e(R,Y5),e(Y5,Ece),e(Ece,TIo),e(Y5,MIo),e(Y5,mD),e(mD,EIo),e(Y5,CIo),e(R,wIo),e(R,K5),e(K5,Cce),e(Cce,AIo),e(K5,yIo),e(K5,gD),e(gD,LIo),e(K5,xIo),e(R,kIo),e(R,Z5),e(Z5,wce),e(wce,SIo),e(Z5,RIo),e(Z5,hD),e(hD,BIo),e(Z5,PIo),e(R,$Io),e(R,e3),e(e3,Ace),e(Ace,IIo),e(e3,qIo),e(e3,pD),e(pD,NIo),e(e3,jIo),e(R,DIo),e(R,o3),e(o3,yce),e(yce,GIo),e(o3,OIo),e(o3,_D),e(_D,VIo),e(o3,XIo),e(Qe,zIo),e(Qe,r3),e(r3,QIo),e(r3,Lce),e(Lce,WIo),e(r3,HIo),e(r3,xce),e(xce,UIo),e(Qe,JIo),e(Qe,kce),e(kce,YIo),e(Qe,KIo),g(gA,Qe,null),b(c,LRe,u),b(c,Ad,u),e(Ad,t3),e(t3,Sce),g(hA,Sce,null),e(Ad,ZIo),e(Ad,Rce),e(Rce,eqo),b(c,xRe,u),b(c,sr,u),g(pA,sr,null),e(sr,oqo),e(sr,yd),e(yd,rqo),e(yd,uD),e(uD,tqo),e(yd,aqo),e(yd,bD),e(bD,nqo),e(yd,sqo),e(sr,lqo),e(sr,_A),e(_A,iqo),e(_A,Bce),e(Bce,dqo),e(_A,cqo),e(sr,fqo),e(sr,et),g(uA,et,null),e(et,mqo),e(et,Pce),e(Pce,gqo),e(et,hqo),e(et,Ld),e(Ld,pqo),e(Ld,$ce),e($ce,_qo),e(Ld,uqo),e(Ld,FD),e(FD,bqo),e(Ld,Fqo),e(et,vqo),e(et,Ice),e(Ice,Tqo),e(et,Mqo),g(bA,et,null),e(sr,Eqo),e(sr,We),g(FA,We,null),e(We,Cqo),e(We,qce),e(qce,wqo),e(We,Aqo),e(We,en),e(en,yqo),e(en,Nce),e(Nce,Lqo),e(en,xqo),e(en,jce),e(jce,kqo),e(en,Sqo),e(en,Dce),e(Dce,Rqo),e(en,Bqo),e(We,Pqo),e(We,Gce),e(Gce,a3),e(a3,Oce),e(Oce,$qo),e(a3,Iqo),e(a3,vD),e(vD,qqo),e(a3,Nqo),e(We,jqo),e(We,n3),e(n3,Dqo),e(n3,Vce),e(Vce,Gqo),e(n3,Oqo),e(n3,Xce),e(Xce,Vqo),e(We,Xqo),e(We,zce),e(zce,zqo),e(We,Qqo),g(vA,We,null),b(c,kRe,u),b(c,xd,u),e(xd,s3),e(s3,Qce),g(TA,Qce,null),e(xd,Wqo),e(xd,Wce),e(Wce,Hqo),b(c,SRe,u),b(c,lr,u),g(MA,lr,null),e(lr,Uqo),e(lr,kd),e(kd,Jqo),e(kd,TD),e(TD,Yqo),e(kd,Kqo),e(kd,MD),e(MD,Zqo),e(kd,eNo),e(lr,oNo),e(lr,EA),e(EA,rNo),e(EA,Hce),e(Hce,tNo),e(EA,aNo),e(lr,nNo),e(lr,ot),g(CA,ot,null),e(ot,sNo),e(ot,Uce),e(Uce,lNo),e(ot,iNo),e(ot,Sd),e(Sd,dNo),e(Sd,Jce),e(Jce,cNo),e(Sd,fNo),e(Sd,ED),e(ED,mNo),e(Sd,gNo),e(ot,hNo),e(ot,Yce),e(Yce,pNo),e(ot,_No),g(wA,ot,null),e(lr,uNo),e(lr,He),g(AA,He,null),e(He,bNo),e(He,Kce),e(Kce,FNo),e(He,vNo),e(He,on),e(on,TNo),e(on,Zce),e(Zce,MNo),e(on,ENo),e(on,efe),e(efe,CNo),e(on,wNo),e(on,ofe),e(ofe,ANo),e(on,yNo),e(He,LNo),e(He,ge),e(ge,l3),e(l3,rfe),e(rfe,xNo),e(l3,kNo),e(l3,CD),e(CD,SNo),e(l3,RNo),e(ge,BNo),e(ge,i3),e(i3,tfe),e(tfe,PNo),e(i3,$No),e(i3,wD),e(wD,INo),e(i3,qNo),e(ge,NNo),e(ge,Ds),e(Ds,afe),e(afe,jNo),e(Ds,DNo),e(Ds,AD),e(AD,GNo),e(Ds,ONo),e(Ds,yD),e(yD,VNo),e(Ds,XNo),e(ge,zNo),e(ge,d3),e(d3,nfe),e(nfe,QNo),e(d3,WNo),e(d3,LD),e(LD,HNo),e(d3,UNo),e(ge,JNo),e(ge,ma),e(ma,sfe),e(sfe,YNo),e(ma,KNo),e(ma,xD),e(xD,ZNo),e(ma,ejo),e(ma,kD),e(kD,ojo),e(ma,rjo),e(ma,SD),e(SD,tjo),e(ma,ajo),e(ge,njo),e(ge,c3),e(c3,lfe),e(lfe,sjo),e(c3,ljo),e(c3,RD),e(RD,ijo),e(c3,djo),e(ge,cjo),e(ge,f3),e(f3,ife),e(ife,fjo),e(f3,mjo),e(f3,BD),e(BD,gjo),e(f3,hjo),e(ge,pjo),e(ge,m3),e(m3,dfe),e(dfe,_jo),e(m3,ujo),e(m3,PD),e(PD,bjo),e(m3,Fjo),e(ge,vjo),e(ge,g3),e(g3,cfe),e(cfe,Tjo),e(g3,Mjo),e(g3,$D),e($D,Ejo),e(g3,Cjo),e(ge,wjo),e(ge,h3),e(h3,ffe),e(ffe,Ajo),e(h3,yjo),e(h3,ID),e(ID,Ljo),e(h3,xjo),e(ge,kjo),e(ge,p3),e(p3,mfe),e(mfe,Sjo),e(p3,Rjo),e(p3,qD),e(qD,Bjo),e(p3,Pjo),e(He,$jo),e(He,_3),e(_3,Ijo),e(_3,gfe),e(gfe,qjo),e(_3,Njo),e(_3,hfe),e(hfe,jjo),e(He,Djo),e(He,pfe),e(pfe,Gjo),e(He,Ojo),g(yA,He,null),b(c,RRe,u),b(c,Rd,u),e(Rd,u3),e(u3,_fe),g(LA,_fe,null),e(Rd,Vjo),e(Rd,ufe),e(ufe,Xjo),b(c,BRe,u),b(c,ir,u),g(xA,ir,null),e(ir,zjo),e(ir,Bd),e(Bd,Qjo),e(Bd,ND),e(ND,Wjo),e(Bd,Hjo),e(Bd,jD),e(jD,Ujo),e(Bd,Jjo),e(ir,Yjo),e(ir,kA),e(kA,Kjo),e(kA,bfe),e(bfe,Zjo),e(kA,eDo),e(ir,oDo),e(ir,rt),g(SA,rt,null),e(rt,rDo),e(rt,Ffe),e(Ffe,tDo),e(rt,aDo),e(rt,Pd),e(Pd,nDo),e(Pd,vfe),e(vfe,sDo),e(Pd,lDo),e(Pd,DD),e(DD,iDo),e(Pd,dDo),e(rt,cDo),e(rt,Tfe),e(Tfe,fDo),e(rt,mDo),g(RA,rt,null),e(ir,gDo),e(ir,Ue),g(BA,Ue,null),e(Ue,hDo),e(Ue,Mfe),e(Mfe,pDo),e(Ue,_Do),e(Ue,rn),e(rn,uDo),e(rn,Efe),e(Efe,bDo),e(rn,FDo),e(rn,Cfe),e(Cfe,vDo),e(rn,TDo),e(rn,wfe),e(wfe,MDo),e(rn,EDo),e(Ue,CDo),e(Ue,Afe),e(Afe,b3),e(b3,yfe),e(yfe,wDo),e(b3,ADo),e(b3,GD),e(GD,yDo),e(b3,LDo),e(Ue,xDo),e(Ue,F3),e(F3,kDo),e(F3,Lfe),e(Lfe,SDo),e(F3,RDo),e(F3,xfe),e(xfe,BDo),e(Ue,PDo),e(Ue,kfe),e(kfe,$Do),e(Ue,IDo),g(PA,Ue,null),b(c,PRe,u),b(c,$d,u),e($d,v3),e(v3,Sfe),g($A,Sfe,null),e($d,qDo),e($d,Rfe),e(Rfe,NDo),b(c,$Re,u),b(c,dr,u),g(IA,dr,null),e(dr,jDo),e(dr,Id),e(Id,DDo),e(Id,OD),e(OD,GDo),e(Id,ODo),e(Id,VD),e(VD,VDo),e(Id,XDo),e(dr,zDo),e(dr,qA),e(qA,QDo),e(qA,Bfe),e(Bfe,WDo),e(qA,HDo),e(dr,UDo),e(dr,tt),g(NA,tt,null),e(tt,JDo),e(tt,Pfe),e(Pfe,YDo),e(tt,KDo),e(tt,qd),e(qd,ZDo),e(qd,$fe),e($fe,eGo),e(qd,oGo),e(qd,XD),e(XD,rGo),e(qd,tGo),e(tt,aGo),e(tt,Ife),e(Ife,nGo),e(tt,sGo),g(jA,tt,null),e(dr,lGo),e(dr,Je),g(DA,Je,null),e(Je,iGo),e(Je,qfe),e(qfe,dGo),e(Je,cGo),e(Je,tn),e(tn,fGo),e(tn,Nfe),e(Nfe,mGo),e(tn,gGo),e(tn,jfe),e(jfe,hGo),e(tn,pGo),e(tn,Dfe),e(Dfe,_Go),e(tn,uGo),e(Je,bGo),e(Je,Se),e(Se,T3),e(T3,Gfe),e(Gfe,FGo),e(T3,vGo),e(T3,zD),e(zD,TGo),e(T3,MGo),e(Se,EGo),e(Se,M3),e(M3,Ofe),e(Ofe,CGo),e(M3,wGo),e(M3,QD),e(QD,AGo),e(M3,yGo),e(Se,LGo),e(Se,E3),e(E3,Vfe),e(Vfe,xGo),e(E3,kGo),e(E3,WD),e(WD,SGo),e(E3,RGo),e(Se,BGo),e(Se,C3),e(C3,Xfe),e(Xfe,PGo),e(C3,$Go),e(C3,HD),e(HD,IGo),e(C3,qGo),e(Se,NGo),e(Se,w3),e(w3,zfe),e(zfe,jGo),e(w3,DGo),e(w3,UD),e(UD,GGo),e(w3,OGo),e(Se,VGo),e(Se,A3),e(A3,Qfe),e(Qfe,XGo),e(A3,zGo),e(A3,JD),e(JD,QGo),e(A3,WGo),e(Se,HGo),e(Se,y3),e(y3,Wfe),e(Wfe,UGo),e(y3,JGo),e(y3,YD),e(YD,YGo),e(y3,KGo),e(Se,ZGo),e(Se,L3),e(L3,Hfe),e(Hfe,eOo),e(L3,oOo),e(L3,KD),e(KD,rOo),e(L3,tOo),e(Je,aOo),e(Je,x3),e(x3,nOo),e(x3,Ufe),e(Ufe,sOo),e(x3,lOo),e(x3,Jfe),e(Jfe,iOo),e(Je,dOo),e(Je,Yfe),e(Yfe,cOo),e(Je,fOo),g(GA,Je,null),b(c,IRe,u),b(c,Nd,u),e(Nd,k3),e(k3,Kfe),g(OA,Kfe,null),e(Nd,mOo),e(Nd,Zfe),e(Zfe,gOo),b(c,qRe,u),b(c,cr,u),g(VA,cr,null),e(cr,hOo),e(cr,jd),e(jd,pOo),e(jd,ZD),e(ZD,_Oo),e(jd,uOo),e(jd,eG),e(eG,bOo),e(jd,FOo),e(cr,vOo),e(cr,XA),e(XA,TOo),e(XA,eme),e(eme,MOo),e(XA,EOo),e(cr,COo),e(cr,at),g(zA,at,null),e(at,wOo),e(at,ome),e(ome,AOo),e(at,yOo),e(at,Dd),e(Dd,LOo),e(Dd,rme),e(rme,xOo),e(Dd,kOo),e(Dd,oG),e(oG,SOo),e(Dd,ROo),e(at,BOo),e(at,tme),e(tme,POo),e(at,$Oo),g(QA,at,null),e(cr,IOo),e(cr,Ye),g(WA,Ye,null),e(Ye,qOo),e(Ye,ame),e(ame,NOo),e(Ye,jOo),e(Ye,an),e(an,DOo),e(an,nme),e(nme,GOo),e(an,OOo),e(an,sme),e(sme,VOo),e(an,XOo),e(an,lme),e(lme,zOo),e(an,QOo),e(Ye,WOo),e(Ye,nn),e(nn,S3),e(S3,ime),e(ime,HOo),e(S3,UOo),e(S3,rG),e(rG,JOo),e(S3,YOo),e(nn,KOo),e(nn,R3),e(R3,dme),e(dme,ZOo),e(R3,eVo),e(R3,tG),e(tG,oVo),e(R3,rVo),e(nn,tVo),e(nn,B3),e(B3,cme),e(cme,aVo),e(B3,nVo),e(B3,aG),e(aG,sVo),e(B3,lVo),e(nn,iVo),e(nn,P3),e(P3,fme),e(fme,dVo),e(P3,cVo),e(P3,nG),e(nG,fVo),e(P3,mVo),e(Ye,gVo),e(Ye,$3),e($3,hVo),e($3,mme),e(mme,pVo),e($3,_Vo),e($3,gme),e(gme,uVo),e(Ye,bVo),e(Ye,hme),e(hme,FVo),e(Ye,vVo),g(HA,Ye,null),b(c,NRe,u),b(c,Gd,u),e(Gd,I3),e(I3,pme),g(UA,pme,null),e(Gd,TVo),e(Gd,_me),e(_me,MVo),b(c,jRe,u),b(c,fr,u),g(JA,fr,null),e(fr,EVo),e(fr,Od),e(Od,CVo),e(Od,sG),e(sG,wVo),e(Od,AVo),e(Od,lG),e(lG,yVo),e(Od,LVo),e(fr,xVo),e(fr,YA),e(YA,kVo),e(YA,ume),e(ume,SVo),e(YA,RVo),e(fr,BVo),e(fr,nt),g(KA,nt,null),e(nt,PVo),e(nt,bme),e(bme,$Vo),e(nt,IVo),e(nt,Vd),e(Vd,qVo),e(Vd,Fme),e(Fme,NVo),e(Vd,jVo),e(Vd,iG),e(iG,DVo),e(Vd,GVo),e(nt,OVo),e(nt,vme),e(vme,VVo),e(nt,XVo),g(ZA,nt,null),e(fr,zVo),e(fr,Ke),g(e6,Ke,null),e(Ke,QVo),e(Ke,Tme),e(Tme,WVo),e(Ke,HVo),e(Ke,sn),e(sn,UVo),e(sn,Mme),e(Mme,JVo),e(sn,YVo),e(sn,Eme),e(Eme,KVo),e(sn,ZVo),e(sn,Cme),e(Cme,eXo),e(sn,oXo),e(Ke,rXo),e(Ke,Re),e(Re,q3),e(q3,wme),e(wme,tXo),e(q3,aXo),e(q3,dG),e(dG,nXo),e(q3,sXo),e(Re,lXo),e(Re,N3),e(N3,Ame),e(Ame,iXo),e(N3,dXo),e(N3,cG),e(cG,cXo),e(N3,fXo),e(Re,mXo),e(Re,j3),e(j3,yme),e(yme,gXo),e(j3,hXo),e(j3,fG),e(fG,pXo),e(j3,_Xo),e(Re,uXo),e(Re,D3),e(D3,Lme),e(Lme,bXo),e(D3,FXo),e(D3,mG),e(mG,vXo),e(D3,TXo),e(Re,MXo),e(Re,G3),e(G3,xme),e(xme,EXo),e(G3,CXo),e(G3,gG),e(gG,wXo),e(G3,AXo),e(Re,yXo),e(Re,O3),e(O3,kme),e(kme,LXo),e(O3,xXo),e(O3,hG),e(hG,kXo),e(O3,SXo),e(Re,RXo),e(Re,V3),e(V3,Sme),e(Sme,BXo),e(V3,PXo),e(V3,pG),e(pG,$Xo),e(V3,IXo),e(Re,qXo),e(Re,X3),e(X3,Rme),e(Rme,NXo),e(X3,jXo),e(X3,_G),e(_G,DXo),e(X3,GXo),e(Ke,OXo),e(Ke,z3),e(z3,VXo),e(z3,Bme),e(Bme,XXo),e(z3,zXo),e(z3,Pme),e(Pme,QXo),e(Ke,WXo),e(Ke,$me),e($me,HXo),e(Ke,UXo),g(o6,Ke,null),b(c,DRe,u),b(c,Xd,u),e(Xd,Q3),e(Q3,Ime),g(r6,Ime,null),e(Xd,JXo),e(Xd,qme),e(qme,YXo),b(c,GRe,u),b(c,mr,u),g(t6,mr,null),e(mr,KXo),e(mr,zd),e(zd,ZXo),e(zd,uG),e(uG,ezo),e(zd,ozo),e(zd,bG),e(bG,rzo),e(zd,tzo),e(mr,azo),e(mr,a6),e(a6,nzo),e(a6,Nme),e(Nme,szo),e(a6,lzo),e(mr,izo),e(mr,st),g(n6,st,null),e(st,dzo),e(st,jme),e(jme,czo),e(st,fzo),e(st,Qd),e(Qd,mzo),e(Qd,Dme),e(Dme,gzo),e(Qd,hzo),e(Qd,FG),e(FG,pzo),e(Qd,_zo),e(st,uzo),e(st,Gme),e(Gme,bzo),e(st,Fzo),g(s6,st,null),e(mr,vzo),e(mr,Ze),g(l6,Ze,null),e(Ze,Tzo),e(Ze,Ome),e(Ome,Mzo),e(Ze,Ezo),e(Ze,ln),e(ln,Czo),e(ln,Vme),e(Vme,wzo),e(ln,Azo),e(ln,Xme),e(Xme,yzo),e(ln,Lzo),e(ln,zme),e(zme,xzo),e(ln,kzo),e(Ze,Szo),e(Ze,i6),e(i6,W3),e(W3,Qme),e(Qme,Rzo),e(W3,Bzo),e(W3,vG),e(vG,Pzo),e(W3,$zo),e(i6,Izo),e(i6,H3),e(H3,Wme),e(Wme,qzo),e(H3,Nzo),e(H3,TG),e(TG,jzo),e(H3,Dzo),e(Ze,Gzo),e(Ze,U3),e(U3,Ozo),e(U3,Hme),e(Hme,Vzo),e(U3,Xzo),e(U3,Ume),e(Ume,zzo),e(Ze,Qzo),e(Ze,Jme),e(Jme,Wzo),e(Ze,Hzo),g(d6,Ze,null),b(c,ORe,u),b(c,Wd,u),e(Wd,J3),e(J3,Yme),g(c6,Yme,null),e(Wd,Uzo),e(Wd,Kme),e(Kme,Jzo),b(c,VRe,u),b(c,gr,u),g(f6,gr,null),e(gr,Yzo),e(gr,Hd),e(Hd,Kzo),e(Hd,MG),e(MG,Zzo),e(Hd,eQo),e(Hd,EG),e(EG,oQo),e(Hd,rQo),e(gr,tQo),e(gr,m6),e(m6,aQo),e(m6,Zme),e(Zme,nQo),e(m6,sQo),e(gr,lQo),e(gr,lt),g(g6,lt,null),e(lt,iQo),e(lt,ege),e(ege,dQo),e(lt,cQo),e(lt,Ud),e(Ud,fQo),e(Ud,oge),e(oge,mQo),e(Ud,gQo),e(Ud,CG),e(CG,hQo),e(Ud,pQo),e(lt,_Qo),e(lt,rge),e(rge,uQo),e(lt,bQo),g(h6,lt,null),e(gr,FQo),e(gr,eo),g(p6,eo,null),e(eo,vQo),e(eo,tge),e(tge,TQo),e(eo,MQo),e(eo,dn),e(dn,EQo),e(dn,age),e(age,CQo),e(dn,wQo),e(dn,nge),e(nge,AQo),e(dn,yQo),e(dn,sge),e(sge,LQo),e(dn,xQo),e(eo,kQo),e(eo,cn),e(cn,Y3),e(Y3,lge),e(lge,SQo),e(Y3,RQo),e(Y3,wG),e(wG,BQo),e(Y3,PQo),e(cn,$Qo),e(cn,K3),e(K3,ige),e(ige,IQo),e(K3,qQo),e(K3,AG),e(AG,NQo),e(K3,jQo),e(cn,DQo),e(cn,Z3),e(Z3,dge),e(dge,GQo),e(Z3,OQo),e(Z3,yG),e(yG,VQo),e(Z3,XQo),e(cn,zQo),e(cn,e2),e(e2,cge),e(cge,QQo),e(e2,WQo),e(e2,LG),e(LG,HQo),e(e2,UQo),e(eo,JQo),e(eo,o2),e(o2,YQo),e(o2,fge),e(fge,KQo),e(o2,ZQo),e(o2,mge),e(mge,eWo),e(eo,oWo),e(eo,gge),e(gge,rWo),e(eo,tWo),g(_6,eo,null),b(c,XRe,u),b(c,Jd,u),e(Jd,r2),e(r2,hge),g(u6,hge,null),e(Jd,aWo),e(Jd,pge),e(pge,nWo),b(c,zRe,u),b(c,hr,u),g(b6,hr,null),e(hr,sWo),e(hr,Yd),e(Yd,lWo),e(Yd,xG),e(xG,iWo),e(Yd,dWo),e(Yd,kG),e(kG,cWo),e(Yd,fWo),e(hr,mWo),e(hr,F6),e(F6,gWo),e(F6,_ge),e(_ge,hWo),e(F6,pWo),e(hr,_Wo),e(hr,it),g(v6,it,null),e(it,uWo),e(it,uge),e(uge,bWo),e(it,FWo),e(it,Kd),e(Kd,vWo),e(Kd,bge),e(bge,TWo),e(Kd,MWo),e(Kd,SG),e(SG,EWo),e(Kd,CWo),e(it,wWo),e(it,Fge),e(Fge,AWo),e(it,yWo),g(T6,it,null),e(hr,LWo),e(hr,oo),g(M6,oo,null),e(oo,xWo),e(oo,vge),e(vge,kWo),e(oo,SWo),e(oo,fn),e(fn,RWo),e(fn,Tge),e(Tge,BWo),e(fn,PWo),e(fn,Mge),e(Mge,$Wo),e(fn,IWo),e(fn,Ege),e(Ege,qWo),e(fn,NWo),e(oo,jWo),e(oo,Zd),e(Zd,t2),e(t2,Cge),e(Cge,DWo),e(t2,GWo),e(t2,RG),e(RG,OWo),e(t2,VWo),e(Zd,XWo),e(Zd,a2),e(a2,wge),e(wge,zWo),e(a2,QWo),e(a2,BG),e(BG,WWo),e(a2,HWo),e(Zd,UWo),e(Zd,n2),e(n2,Age),e(Age,JWo),e(n2,YWo),e(n2,PG),e(PG,KWo),e(n2,ZWo),e(oo,eHo),e(oo,s2),e(s2,oHo),e(s2,yge),e(yge,rHo),e(s2,tHo),e(s2,Lge),e(Lge,aHo),e(oo,nHo),e(oo,xge),e(xge,sHo),e(oo,lHo),g(E6,oo,null),b(c,QRe,u),b(c,ec,u),e(ec,l2),e(l2,kge),g(C6,kge,null),e(ec,iHo),e(ec,Sge),e(Sge,dHo),b(c,WRe,u),b(c,pr,u),g(w6,pr,null),e(pr,cHo),e(pr,oc),e(oc,fHo),e(oc,$G),e($G,mHo),e(oc,gHo),e(oc,IG),e(IG,hHo),e(oc,pHo),e(pr,_Ho),e(pr,A6),e(A6,uHo),e(A6,Rge),e(Rge,bHo),e(A6,FHo),e(pr,vHo),e(pr,dt),g(y6,dt,null),e(dt,THo),e(dt,Bge),e(Bge,MHo),e(dt,EHo),e(dt,rc),e(rc,CHo),e(rc,Pge),e(Pge,wHo),e(rc,AHo),e(rc,qG),e(qG,yHo),e(rc,LHo),e(dt,xHo),e(dt,$ge),e($ge,kHo),e(dt,SHo),g(L6,dt,null),e(pr,RHo),e(pr,ro),g(x6,ro,null),e(ro,BHo),e(ro,Ige),e(Ige,PHo),e(ro,$Ho),e(ro,mn),e(mn,IHo),e(mn,qge),e(qge,qHo),e(mn,NHo),e(mn,Nge),e(Nge,jHo),e(mn,DHo),e(mn,jge),e(jge,GHo),e(mn,OHo),e(ro,VHo),e(ro,Dge),e(Dge,i2),e(i2,Gge),e(Gge,XHo),e(i2,zHo),e(i2,NG),e(NG,QHo),e(i2,WHo),e(ro,HHo),e(ro,d2),e(d2,UHo),e(d2,Oge),e(Oge,JHo),e(d2,YHo),e(d2,Vge),e(Vge,KHo),e(ro,ZHo),e(ro,Xge),e(Xge,eUo),e(ro,oUo),g(k6,ro,null),b(c,HRe,u),b(c,tc,u),e(tc,c2),e(c2,zge),g(S6,zge,null),e(tc,rUo),e(tc,Qge),e(Qge,tUo),b(c,URe,u),b(c,_r,u),g(R6,_r,null),e(_r,aUo),e(_r,ac),e(ac,nUo),e(ac,jG),e(jG,sUo),e(ac,lUo),e(ac,DG),e(DG,iUo),e(ac,dUo),e(_r,cUo),e(_r,B6),e(B6,fUo),e(B6,Wge),e(Wge,mUo),e(B6,gUo),e(_r,hUo),e(_r,ct),g(P6,ct,null),e(ct,pUo),e(ct,Hge),e(Hge,_Uo),e(ct,uUo),e(ct,nc),e(nc,bUo),e(nc,Uge),e(Uge,FUo),e(nc,vUo),e(nc,GG),e(GG,TUo),e(nc,MUo),e(ct,EUo),e(ct,Jge),e(Jge,CUo),e(ct,wUo),g($6,ct,null),e(_r,AUo),e(_r,to),g(I6,to,null),e(to,yUo),e(to,Yge),e(Yge,LUo),e(to,xUo),e(to,gn),e(gn,kUo),e(gn,Kge),e(Kge,SUo),e(gn,RUo),e(gn,Zge),e(Zge,BUo),e(gn,PUo),e(gn,ehe),e(ehe,$Uo),e(gn,IUo),e(to,qUo),e(to,ohe),e(ohe,f2),e(f2,rhe),e(rhe,NUo),e(f2,jUo),e(f2,OG),e(OG,DUo),e(f2,GUo),e(to,OUo),e(to,m2),e(m2,VUo),e(m2,the),e(the,XUo),e(m2,zUo),e(m2,ahe),e(ahe,QUo),e(to,WUo),e(to,nhe),e(nhe,HUo),e(to,UUo),g(q6,to,null),b(c,JRe,u),b(c,sc,u),e(sc,g2),e(g2,she),g(N6,she,null),e(sc,JUo),e(sc,lhe),e(lhe,YUo),b(c,YRe,u),b(c,ur,u),g(j6,ur,null),e(ur,KUo),e(ur,lc),e(lc,ZUo),e(lc,VG),e(VG,eJo),e(lc,oJo),e(lc,XG),e(XG,rJo),e(lc,tJo),e(ur,aJo),e(ur,D6),e(D6,nJo),e(D6,ihe),e(ihe,sJo),e(D6,lJo),e(ur,iJo),e(ur,ft),g(G6,ft,null),e(ft,dJo),e(ft,dhe),e(dhe,cJo),e(ft,fJo),e(ft,ic),e(ic,mJo),e(ic,che),e(che,gJo),e(ic,hJo),e(ic,zG),e(zG,pJo),e(ic,_Jo),e(ft,uJo),e(ft,fhe),e(fhe,bJo),e(ft,FJo),g(O6,ft,null),e(ur,vJo),e(ur,ao),g(V6,ao,null),e(ao,TJo),e(ao,mhe),e(mhe,MJo),e(ao,EJo),e(ao,hn),e(hn,CJo),e(hn,ghe),e(ghe,wJo),e(hn,AJo),e(hn,hhe),e(hhe,yJo),e(hn,LJo),e(hn,phe),e(phe,xJo),e(hn,kJo),e(ao,SJo),e(ao,dc),e(dc,h2),e(h2,_he),e(_he,RJo),e(h2,BJo),e(h2,QG),e(QG,PJo),e(h2,$Jo),e(dc,IJo),e(dc,p2),e(p2,uhe),e(uhe,qJo),e(p2,NJo),e(p2,WG),e(WG,jJo),e(p2,DJo),e(dc,GJo),e(dc,_2),e(_2,bhe),e(bhe,OJo),e(_2,VJo),e(_2,HG),e(HG,XJo),e(_2,zJo),e(ao,QJo),e(ao,u2),e(u2,WJo),e(u2,Fhe),e(Fhe,HJo),e(u2,UJo),e(u2,vhe),e(vhe,JJo),e(ao,YJo),e(ao,The),e(The,KJo),e(ao,ZJo),g(X6,ao,null),b(c,KRe,u),b(c,cc,u),e(cc,b2),e(b2,Mhe),g(z6,Mhe,null),e(cc,eYo),e(cc,Ehe),e(Ehe,oYo),b(c,ZRe,u),b(c,br,u),g(Q6,br,null),e(br,rYo),e(br,fc),e(fc,tYo),e(fc,UG),e(UG,aYo),e(fc,nYo),e(fc,JG),e(JG,sYo),e(fc,lYo),e(br,iYo),e(br,W6),e(W6,dYo),e(W6,Che),e(Che,cYo),e(W6,fYo),e(br,mYo),e(br,mt),g(H6,mt,null),e(mt,gYo),e(mt,whe),e(whe,hYo),e(mt,pYo),e(mt,mc),e(mc,_Yo),e(mc,Ahe),e(Ahe,uYo),e(mc,bYo),e(mc,YG),e(YG,FYo),e(mc,vYo),e(mt,TYo),e(mt,yhe),e(yhe,MYo),e(mt,EYo),g(U6,mt,null),e(br,CYo),e(br,no),g(J6,no,null),e(no,wYo),e(no,Lhe),e(Lhe,AYo),e(no,yYo),e(no,pn),e(pn,LYo),e(pn,xhe),e(xhe,xYo),e(pn,kYo),e(pn,khe),e(khe,SYo),e(pn,RYo),e(pn,She),e(She,BYo),e(pn,PYo),e(no,$Yo),e(no,Rhe),e(Rhe,F2),e(F2,Bhe),e(Bhe,IYo),e(F2,qYo),e(F2,KG),e(KG,NYo),e(F2,jYo),e(no,DYo),e(no,v2),e(v2,GYo),e(v2,Phe),e(Phe,OYo),e(v2,VYo),e(v2,$he),e($he,XYo),e(no,zYo),e(no,Ihe),e(Ihe,QYo),e(no,WYo),g(Y6,no,null),b(c,eBe,u),b(c,gc,u),e(gc,T2),e(T2,qhe),g(K6,qhe,null),e(gc,HYo),e(gc,Nhe),e(Nhe,UYo),b(c,oBe,u),b(c,Fr,u),g(Z6,Fr,null),e(Fr,JYo),e(Fr,hc),e(hc,YYo),e(hc,ZG),e(ZG,KYo),e(hc,ZYo),e(hc,eO),e(eO,eKo),e(hc,oKo),e(Fr,rKo),e(Fr,e0),e(e0,tKo),e(e0,jhe),e(jhe,aKo),e(e0,nKo),e(Fr,sKo),e(Fr,gt),g(o0,gt,null),e(gt,lKo),e(gt,Dhe),e(Dhe,iKo),e(gt,dKo),e(gt,pc),e(pc,cKo),e(pc,Ghe),e(Ghe,fKo),e(pc,mKo),e(pc,oO),e(oO,gKo),e(pc,hKo),e(gt,pKo),e(gt,Ohe),e(Ohe,_Ko),e(gt,uKo),g(r0,gt,null),e(Fr,bKo),e(Fr,ho),g(t0,ho,null),e(ho,FKo),e(ho,Vhe),e(Vhe,vKo),e(ho,TKo),e(ho,_n),e(_n,MKo),e(_n,Xhe),e(Xhe,EKo),e(_n,CKo),e(_n,zhe),e(zhe,wKo),e(_n,AKo),e(_n,Qhe),e(Qhe,yKo),e(_n,LKo),e(ho,xKo),e(ho,x),e(x,M2),e(M2,Whe),e(Whe,kKo),e(M2,SKo),e(M2,rO),e(rO,RKo),e(M2,BKo),e(x,PKo),e(x,E2),e(E2,Hhe),e(Hhe,$Ko),e(E2,IKo),e(E2,tO),e(tO,qKo),e(E2,NKo),e(x,jKo),e(x,C2),e(C2,Uhe),e(Uhe,DKo),e(C2,GKo),e(C2,aO),e(aO,OKo),e(C2,VKo),e(x,XKo),e(x,w2),e(w2,Jhe),e(Jhe,zKo),e(w2,QKo),e(w2,nO),e(nO,WKo),e(w2,HKo),e(x,UKo),e(x,A2),e(A2,Yhe),e(Yhe,JKo),e(A2,YKo),e(A2,sO),e(sO,KKo),e(A2,ZKo),e(x,eZo),e(x,y2),e(y2,Khe),e(Khe,oZo),e(y2,rZo),e(y2,lO),e(lO,tZo),e(y2,aZo),e(x,nZo),e(x,L2),e(L2,Zhe),e(Zhe,sZo),e(L2,lZo),e(L2,iO),e(iO,iZo),e(L2,dZo),e(x,cZo),e(x,x2),e(x2,epe),e(epe,fZo),e(x2,mZo),e(x2,dO),e(dO,gZo),e(x2,hZo),e(x,pZo),e(x,k2),e(k2,ope),e(ope,_Zo),e(k2,uZo),e(k2,cO),e(cO,bZo),e(k2,FZo),e(x,vZo),e(x,S2),e(S2,rpe),e(rpe,TZo),e(S2,MZo),e(S2,fO),e(fO,EZo),e(S2,CZo),e(x,wZo),e(x,R2),e(R2,tpe),e(tpe,AZo),e(R2,yZo),e(R2,mO),e(mO,LZo),e(R2,xZo),e(x,kZo),e(x,B2),e(B2,ape),e(ape,SZo),e(B2,RZo),e(B2,gO),e(gO,BZo),e(B2,PZo),e(x,$Zo),e(x,P2),e(P2,npe),e(npe,IZo),e(P2,qZo),e(P2,hO),e(hO,NZo),e(P2,jZo),e(x,DZo),e(x,$2),e($2,spe),e(spe,GZo),e($2,OZo),e($2,pO),e(pO,VZo),e($2,XZo),e(x,zZo),e(x,I2),e(I2,lpe),e(lpe,QZo),e(I2,WZo),e(I2,_O),e(_O,HZo),e(I2,UZo),e(x,JZo),e(x,q2),e(q2,ipe),e(ipe,YZo),e(q2,KZo),e(q2,uO),e(uO,ZZo),e(q2,eer),e(x,oer),e(x,Gs),e(Gs,dpe),e(dpe,rer),e(Gs,ter),e(Gs,bO),e(bO,aer),e(Gs,ner),e(Gs,FO),e(FO,ser),e(Gs,ler),e(x,ier),e(x,N2),e(N2,cpe),e(cpe,der),e(N2,cer),e(N2,vO),e(vO,fer),e(N2,mer),e(x,ger),e(x,j2),e(j2,fpe),e(fpe,her),e(j2,per),e(j2,TO),e(TO,_er),e(j2,uer),e(x,ber),e(x,D2),e(D2,mpe),e(mpe,Fer),e(D2,ver),e(D2,MO),e(MO,Ter),e(D2,Mer),e(x,Eer),e(x,G2),e(G2,gpe),e(gpe,Cer),e(G2,wer),e(G2,EO),e(EO,Aer),e(G2,yer),e(x,Ler),e(x,O2),e(O2,hpe),e(hpe,xer),e(O2,ker),e(O2,CO),e(CO,Ser),e(O2,Rer),e(x,Ber),e(x,V2),e(V2,ppe),e(ppe,Per),e(V2,$er),e(V2,wO),e(wO,Ier),e(V2,qer),e(x,Ner),e(x,X2),e(X2,_pe),e(_pe,jer),e(X2,Der),e(X2,AO),e(AO,Ger),e(X2,Oer),e(x,Ver),e(x,z2),e(z2,upe),e(upe,Xer),e(z2,zer),e(z2,yO),e(yO,Qer),e(z2,Wer),e(x,Her),e(x,Q2),e(Q2,bpe),e(bpe,Uer),e(Q2,Jer),e(Q2,LO),e(LO,Yer),e(Q2,Ker),e(x,Zer),e(x,W2),e(W2,Fpe),e(Fpe,eor),e(W2,oor),e(W2,xO),e(xO,ror),e(W2,tor),e(x,aor),e(x,H2),e(H2,vpe),e(vpe,nor),e(H2,sor),e(H2,kO),e(kO,lor),e(H2,ior),e(x,dor),e(x,U2),e(U2,Tpe),e(Tpe,cor),e(U2,mor),e(U2,SO),e(SO,gor),e(U2,hor),e(x,por),e(x,J2),e(J2,Mpe),e(Mpe,_or),e(J2,uor),e(J2,RO),e(RO,bor),e(J2,For),e(x,vor),e(x,Y2),e(Y2,Epe),e(Epe,Tor),e(Y2,Mor),e(Y2,BO),e(BO,Eor),e(Y2,Cor),e(x,wor),e(x,K2),e(K2,Cpe),e(Cpe,Aor),e(K2,yor),e(K2,PO),e(PO,Lor),e(K2,xor),e(x,kor),e(x,Z2),e(Z2,wpe),e(wpe,Sor),e(Z2,Ror),e(Z2,$O),e($O,Bor),e(Z2,Por),e(x,$or),e(x,eF),e(eF,Ape),e(Ape,Ior),e(eF,qor),e(eF,IO),e(IO,Nor),e(eF,jor),e(x,Dor),e(x,oF),e(oF,ype),e(ype,Gor),e(oF,Oor),e(oF,qO),e(qO,Vor),e(oF,Xor),e(x,zor),e(x,rF),e(rF,Lpe),e(Lpe,Qor),e(rF,Wor),e(rF,NO),e(NO,Hor),e(rF,Uor),e(x,Jor),e(x,tF),e(tF,xpe),e(xpe,Yor),e(tF,Kor),e(tF,jO),e(jO,Zor),e(tF,err),e(x,orr),e(x,aF),e(aF,kpe),e(kpe,rrr),e(aF,trr),e(aF,DO),e(DO,arr),e(aF,nrr),e(x,srr),e(x,nF),e(nF,Spe),e(Spe,lrr),e(nF,irr),e(nF,GO),e(GO,drr),e(nF,crr),e(x,frr),e(x,sF),e(sF,Rpe),e(Rpe,mrr),e(sF,grr),e(sF,OO),e(OO,hrr),e(sF,prr),e(x,_rr),e(x,lF),e(lF,Bpe),e(Bpe,urr),e(lF,brr),e(lF,VO),e(VO,Frr),e(lF,vrr),e(x,Trr),e(x,iF),e(iF,Ppe),e(Ppe,Mrr),e(iF,Err),e(iF,XO),e(XO,Crr),e(iF,wrr),e(x,Arr),e(x,dF),e(dF,$pe),e($pe,yrr),e(dF,Lrr),e(dF,zO),e(zO,xrr),e(dF,krr),e(x,Srr),e(x,cF),e(cF,Ipe),e(Ipe,Rrr),e(cF,Brr),e(cF,QO),e(QO,Prr),e(cF,$rr),e(ho,Irr),e(ho,qpe),e(qpe,qrr),e(ho,Nrr),g(a0,ho,null),b(c,rBe,u),b(c,_c,u),e(_c,fF),e(fF,Npe),g(n0,Npe,null),e(_c,jrr),e(_c,jpe),e(jpe,Drr),b(c,tBe,u),b(c,vr,u),g(s0,vr,null),e(vr,Grr),e(vr,uc),e(uc,Orr),e(uc,WO),e(WO,Vrr),e(uc,Xrr),e(uc,HO),e(HO,zrr),e(uc,Qrr),e(vr,Wrr),e(vr,l0),e(l0,Hrr),e(l0,Dpe),e(Dpe,Urr),e(l0,Jrr),e(vr,Yrr),e(vr,ht),g(i0,ht,null),e(ht,Krr),e(ht,Gpe),e(Gpe,Zrr),e(ht,etr),e(ht,bc),e(bc,otr),e(bc,Ope),e(Ope,rtr),e(bc,ttr),e(bc,UO),e(UO,atr),e(bc,ntr),e(ht,str),e(ht,Vpe),e(Vpe,ltr),e(ht,itr),g(d0,ht,null),e(vr,dtr),e(vr,po),g(c0,po,null),e(po,ctr),e(po,Xpe),e(Xpe,ftr),e(po,mtr),e(po,un),e(un,gtr),e(un,zpe),e(zpe,htr),e(un,ptr),e(un,Qpe),e(Qpe,_tr),e(un,utr),e(un,Wpe),e(Wpe,btr),e(un,Ftr),e(po,vtr),e(po,H),e(H,mF),e(mF,Hpe),e(Hpe,Ttr),e(mF,Mtr),e(mF,JO),e(JO,Etr),e(mF,Ctr),e(H,wtr),e(H,gF),e(gF,Upe),e(Upe,Atr),e(gF,ytr),e(gF,YO),e(YO,Ltr),e(gF,xtr),e(H,ktr),e(H,hF),e(hF,Jpe),e(Jpe,Str),e(hF,Rtr),e(hF,KO),e(KO,Btr),e(hF,Ptr),e(H,$tr),e(H,pF),e(pF,Ype),e(Ype,Itr),e(pF,qtr),e(pF,ZO),e(ZO,Ntr),e(pF,jtr),e(H,Dtr),e(H,_F),e(_F,Kpe),e(Kpe,Gtr),e(_F,Otr),e(_F,eV),e(eV,Vtr),e(_F,Xtr),e(H,ztr),e(H,uF),e(uF,Zpe),e(Zpe,Qtr),e(uF,Wtr),e(uF,oV),e(oV,Htr),e(uF,Utr),e(H,Jtr),e(H,bF),e(bF,e_e),e(e_e,Ytr),e(bF,Ktr),e(bF,rV),e(rV,Ztr),e(bF,ear),e(H,oar),e(H,FF),e(FF,o_e),e(o_e,rar),e(FF,tar),e(FF,tV),e(tV,aar),e(FF,nar),e(H,sar),e(H,vF),e(vF,r_e),e(r_e,lar),e(vF,iar),e(vF,aV),e(aV,dar),e(vF,car),e(H,far),e(H,TF),e(TF,t_e),e(t_e,mar),e(TF,gar),e(TF,nV),e(nV,har),e(TF,par),e(H,_ar),e(H,MF),e(MF,a_e),e(a_e,uar),e(MF,bar),e(MF,sV),e(sV,Far),e(MF,Tar),e(H,Mar),e(H,EF),e(EF,n_e),e(n_e,Ear),e(EF,Car),e(EF,lV),e(lV,war),e(EF,Aar),e(H,yar),e(H,CF),e(CF,s_e),e(s_e,Lar),e(CF,xar),e(CF,iV),e(iV,kar),e(CF,Sar),e(H,Rar),e(H,wF),e(wF,l_e),e(l_e,Bar),e(wF,Par),e(wF,dV),e(dV,$ar),e(wF,Iar),e(H,qar),e(H,AF),e(AF,i_e),e(i_e,Nar),e(AF,jar),e(AF,cV),e(cV,Dar),e(AF,Gar),e(H,Oar),e(H,yF),e(yF,d_e),e(d_e,Var),e(yF,Xar),e(yF,fV),e(fV,zar),e(yF,Qar),e(H,War),e(H,LF),e(LF,c_e),e(c_e,Har),e(LF,Uar),e(LF,mV),e(mV,Jar),e(LF,Yar),e(H,Kar),e(H,xF),e(xF,f_e),e(f_e,Zar),e(xF,enr),e(xF,gV),e(gV,onr),e(xF,rnr),e(H,tnr),e(H,kF),e(kF,m_e),e(m_e,anr),e(kF,nnr),e(kF,hV),e(hV,snr),e(kF,lnr),e(H,inr),e(H,SF),e(SF,g_e),e(g_e,dnr),e(SF,cnr),e(SF,pV),e(pV,fnr),e(SF,mnr),e(H,gnr),e(H,RF),e(RF,h_e),e(h_e,hnr),e(RF,pnr),e(RF,_V),e(_V,_nr),e(RF,unr),e(H,bnr),e(H,BF),e(BF,p_e),e(p_e,Fnr),e(BF,vnr),e(BF,uV),e(uV,Tnr),e(BF,Mnr),e(H,Enr),e(H,PF),e(PF,__e),e(__e,Cnr),e(PF,wnr),e(PF,bV),e(bV,Anr),e(PF,ynr),e(po,Lnr),e(po,u_e),e(u_e,xnr),e(po,knr),g(f0,po,null),b(c,aBe,u),b(c,Fc,u),e(Fc,$F),e($F,b_e),g(m0,b_e,null),e(Fc,Snr),e(Fc,F_e),e(F_e,Rnr),b(c,nBe,u),b(c,Tr,u),g(g0,Tr,null),e(Tr,Bnr),e(Tr,vc),e(vc,Pnr),e(vc,FV),e(FV,$nr),e(vc,Inr),e(vc,vV),e(vV,qnr),e(vc,Nnr),e(Tr,jnr),e(Tr,h0),e(h0,Dnr),e(h0,v_e),e(v_e,Gnr),e(h0,Onr),e(Tr,Vnr),e(Tr,pt),g(p0,pt,null),e(pt,Xnr),e(pt,T_e),e(T_e,znr),e(pt,Qnr),e(pt,Tc),e(Tc,Wnr),e(Tc,M_e),e(M_e,Hnr),e(Tc,Unr),e(Tc,TV),e(TV,Jnr),e(Tc,Ynr),e(pt,Knr),e(pt,E_e),e(E_e,Znr),e(pt,esr),g(_0,pt,null),e(Tr,osr),e(Tr,_o),g(u0,_o,null),e(_o,rsr),e(_o,C_e),e(C_e,tsr),e(_o,asr),e(_o,bn),e(bn,nsr),e(bn,w_e),e(w_e,ssr),e(bn,lsr),e(bn,A_e),e(A_e,isr),e(bn,dsr),e(bn,y_e),e(y_e,csr),e(bn,fsr),e(_o,msr),e(_o,ce),e(ce,IF),e(IF,L_e),e(L_e,gsr),e(IF,hsr),e(IF,MV),e(MV,psr),e(IF,_sr),e(ce,usr),e(ce,qF),e(qF,x_e),e(x_e,bsr),e(qF,Fsr),e(qF,EV),e(EV,vsr),e(qF,Tsr),e(ce,Msr),e(ce,NF),e(NF,k_e),e(k_e,Esr),e(NF,Csr),e(NF,CV),e(CV,wsr),e(NF,Asr),e(ce,ysr),e(ce,jF),e(jF,S_e),e(S_e,Lsr),e(jF,xsr),e(jF,wV),e(wV,ksr),e(jF,Ssr),e(ce,Rsr),e(ce,DF),e(DF,R_e),e(R_e,Bsr),e(DF,Psr),e(DF,AV),e(AV,$sr),e(DF,Isr),e(ce,qsr),e(ce,GF),e(GF,B_e),e(B_e,Nsr),e(GF,jsr),e(GF,yV),e(yV,Dsr),e(GF,Gsr),e(ce,Osr),e(ce,OF),e(OF,P_e),e(P_e,Vsr),e(OF,Xsr),e(OF,LV),e(LV,zsr),e(OF,Qsr),e(ce,Wsr),e(ce,VF),e(VF,$_e),e($_e,Hsr),e(VF,Usr),e(VF,xV),e(xV,Jsr),e(VF,Ysr),e(ce,Ksr),e(ce,XF),e(XF,I_e),e(I_e,Zsr),e(XF,elr),e(XF,kV),e(kV,olr),e(XF,rlr),e(ce,tlr),e(ce,zF),e(zF,q_e),e(q_e,alr),e(zF,nlr),e(zF,SV),e(SV,slr),e(zF,llr),e(ce,ilr),e(ce,QF),e(QF,N_e),e(N_e,dlr),e(QF,clr),e(QF,RV),e(RV,flr),e(QF,mlr),e(ce,glr),e(ce,WF),e(WF,j_e),e(j_e,hlr),e(WF,plr),e(WF,BV),e(BV,_lr),e(WF,ulr),e(_o,blr),e(_o,D_e),e(D_e,Flr),e(_o,vlr),g(b0,_o,null),b(c,sBe,u),b(c,Mc,u),e(Mc,HF),e(HF,G_e),g(F0,G_e,null),e(Mc,Tlr),e(Mc,O_e),e(O_e,Mlr),b(c,lBe,u),b(c,Mr,u),g(v0,Mr,null),e(Mr,Elr),e(Mr,Ec),e(Ec,Clr),e(Ec,PV),e(PV,wlr),e(Ec,Alr),e(Ec,$V),e($V,ylr),e(Ec,Llr),e(Mr,xlr),e(Mr,T0),e(T0,klr),e(T0,V_e),e(V_e,Slr),e(T0,Rlr),e(Mr,Blr),e(Mr,_t),g(M0,_t,null),e(_t,Plr),e(_t,X_e),e(X_e,$lr),e(_t,Ilr),e(_t,Cc),e(Cc,qlr),e(Cc,z_e),e(z_e,Nlr),e(Cc,jlr),e(Cc,IV),e(IV,Dlr),e(Cc,Glr),e(_t,Olr),e(_t,Q_e),e(Q_e,Vlr),e(_t,Xlr),g(E0,_t,null),e(Mr,zlr),e(Mr,uo),g(C0,uo,null),e(uo,Qlr),e(uo,W_e),e(W_e,Wlr),e(uo,Hlr),e(uo,Fn),e(Fn,Ulr),e(Fn,H_e),e(H_e,Jlr),e(Fn,Ylr),e(Fn,U_e),e(U_e,Klr),e(Fn,Zlr),e(Fn,J_e),e(J_e,eir),e(Fn,oir),e(uo,rir),e(uo,w0),e(w0,UF),e(UF,Y_e),e(Y_e,tir),e(UF,air),e(UF,qV),e(qV,nir),e(UF,sir),e(w0,lir),e(w0,JF),e(JF,K_e),e(K_e,iir),e(JF,dir),e(JF,NV),e(NV,cir),e(JF,fir),e(uo,mir),e(uo,Z_e),e(Z_e,gir),e(uo,hir),g(A0,uo,null),b(c,iBe,u),b(c,wc,u),e(wc,YF),e(YF,eue),g(y0,eue,null),e(wc,pir),e(wc,oue),e(oue,_ir),b(c,dBe,u),b(c,Er,u),g(L0,Er,null),e(Er,uir),e(Er,Ac),e(Ac,bir),e(Ac,jV),e(jV,Fir),e(Ac,vir),e(Ac,DV),e(DV,Tir),e(Ac,Mir),e(Er,Eir),e(Er,x0),e(x0,Cir),e(x0,rue),e(rue,wir),e(x0,Air),e(Er,yir),e(Er,ut),g(k0,ut,null),e(ut,Lir),e(ut,tue),e(tue,xir),e(ut,kir),e(ut,yc),e(yc,Sir),e(yc,aue),e(aue,Rir),e(yc,Bir),e(yc,GV),e(GV,Pir),e(yc,$ir),e(ut,Iir),e(ut,nue),e(nue,qir),e(ut,Nir),g(S0,ut,null),e(Er,jir),e(Er,bo),g(R0,bo,null),e(bo,Dir),e(bo,sue),e(sue,Gir),e(bo,Oir),e(bo,vn),e(vn,Vir),e(vn,lue),e(lue,Xir),e(vn,zir),e(vn,iue),e(iue,Qir),e(vn,Wir),e(vn,due),e(due,Hir),e(vn,Uir),e(bo,Jir),e(bo,J),e(J,KF),e(KF,cue),e(cue,Yir),e(KF,Kir),e(KF,OV),e(OV,Zir),e(KF,edr),e(J,odr),e(J,ZF),e(ZF,fue),e(fue,rdr),e(ZF,tdr),e(ZF,VV),e(VV,adr),e(ZF,ndr),e(J,sdr),e(J,ev),e(ev,mue),e(mue,ldr),e(ev,idr),e(ev,XV),e(XV,ddr),e(ev,cdr),e(J,fdr),e(J,ov),e(ov,gue),e(gue,mdr),e(ov,gdr),e(ov,zV),e(zV,hdr),e(ov,pdr),e(J,_dr),e(J,rv),e(rv,hue),e(hue,udr),e(rv,bdr),e(rv,QV),e(QV,Fdr),e(rv,vdr),e(J,Tdr),e(J,tv),e(tv,pue),e(pue,Mdr),e(tv,Edr),e(tv,WV),e(WV,Cdr),e(tv,wdr),e(J,Adr),e(J,av),e(av,_ue),e(_ue,ydr),e(av,Ldr),e(av,HV),e(HV,xdr),e(av,kdr),e(J,Sdr),e(J,nv),e(nv,uue),e(uue,Rdr),e(nv,Bdr),e(nv,UV),e(UV,Pdr),e(nv,$dr),e(J,Idr),e(J,sv),e(sv,bue),e(bue,qdr),e(sv,Ndr),e(sv,JV),e(JV,jdr),e(sv,Ddr),e(J,Gdr),e(J,lv),e(lv,Fue),e(Fue,Odr),e(lv,Vdr),e(lv,YV),e(YV,Xdr),e(lv,zdr),e(J,Qdr),e(J,iv),e(iv,vue),e(vue,Wdr),e(iv,Hdr),e(iv,KV),e(KV,Udr),e(iv,Jdr),e(J,Ydr),e(J,dv),e(dv,Tue),e(Tue,Kdr),e(dv,Zdr),e(dv,ZV),e(ZV,ecr),e(dv,ocr),e(J,rcr),e(J,cv),e(cv,Mue),e(Mue,tcr),e(cv,acr),e(cv,eX),e(eX,ncr),e(cv,scr),e(J,lcr),e(J,fv),e(fv,Eue),e(Eue,icr),e(fv,dcr),e(fv,oX),e(oX,ccr),e(fv,fcr),e(J,mcr),e(J,mv),e(mv,Cue),e(Cue,gcr),e(mv,hcr),e(mv,rX),e(rX,pcr),e(mv,_cr),e(J,ucr),e(J,gv),e(gv,wue),e(wue,bcr),e(gv,Fcr),e(gv,tX),e(tX,vcr),e(gv,Tcr),e(J,Mcr),e(J,hv),e(hv,Aue),e(Aue,Ecr),e(hv,Ccr),e(hv,aX),e(aX,wcr),e(hv,Acr),e(J,ycr),e(J,pv),e(pv,yue),e(yue,Lcr),e(pv,xcr),e(pv,nX),e(nX,kcr),e(pv,Scr),e(J,Rcr),e(J,_v),e(_v,Lue),e(Lue,Bcr),e(_v,Pcr),e(_v,sX),e(sX,$cr),e(_v,Icr),e(J,qcr),e(J,uv),e(uv,xue),e(xue,Ncr),e(uv,jcr),e(uv,lX),e(lX,Dcr),e(uv,Gcr),e(bo,Ocr),e(bo,kue),e(kue,Vcr),e(bo,Xcr),g(B0,bo,null),b(c,cBe,u),b(c,Lc,u),e(Lc,bv),e(bv,Sue),g(P0,Sue,null),e(Lc,zcr),e(Lc,Rue),e(Rue,Qcr),b(c,fBe,u),b(c,Cr,u),g($0,Cr,null),e(Cr,Wcr),e(Cr,xc),e(xc,Hcr),e(xc,iX),e(iX,Ucr),e(xc,Jcr),e(xc,dX),e(dX,Ycr),e(xc,Kcr),e(Cr,Zcr),e(Cr,I0),e(I0,efr),e(I0,Bue),e(Bue,ofr),e(I0,rfr),e(Cr,tfr),e(Cr,bt),g(q0,bt,null),e(bt,afr),e(bt,Pue),e(Pue,nfr),e(bt,sfr),e(bt,kc),e(kc,lfr),e(kc,$ue),e($ue,ifr),e(kc,dfr),e(kc,cX),e(cX,cfr),e(kc,ffr),e(bt,mfr),e(bt,Iue),e(Iue,gfr),e(bt,hfr),g(N0,bt,null),e(Cr,pfr),e(Cr,Fo),g(j0,Fo,null),e(Fo,_fr),e(Fo,que),e(que,ufr),e(Fo,bfr),e(Fo,Tn),e(Tn,Ffr),e(Tn,Nue),e(Nue,vfr),e(Tn,Tfr),e(Tn,jue),e(jue,Mfr),e(Tn,Efr),e(Tn,Due),e(Due,Cfr),e(Tn,wfr),e(Fo,Afr),e(Fo,ue),e(ue,Fv),e(Fv,Gue),e(Gue,yfr),e(Fv,Lfr),e(Fv,fX),e(fX,xfr),e(Fv,kfr),e(ue,Sfr),e(ue,vv),e(vv,Oue),e(Oue,Rfr),e(vv,Bfr),e(vv,mX),e(mX,Pfr),e(vv,$fr),e(ue,Ifr),e(ue,Tv),e(Tv,Vue),e(Vue,qfr),e(Tv,Nfr),e(Tv,gX),e(gX,jfr),e(Tv,Dfr),e(ue,Gfr),e(ue,Mv),e(Mv,Xue),e(Xue,Ofr),e(Mv,Vfr),e(Mv,hX),e(hX,Xfr),e(Mv,zfr),e(ue,Qfr),e(ue,Ev),e(Ev,zue),e(zue,Wfr),e(Ev,Hfr),e(Ev,pX),e(pX,Ufr),e(Ev,Jfr),e(ue,Yfr),e(ue,Cv),e(Cv,Que),e(Que,Kfr),e(Cv,Zfr),e(Cv,_X),e(_X,emr),e(Cv,omr),e(ue,rmr),e(ue,wv),e(wv,Wue),e(Wue,tmr),e(wv,amr),e(wv,uX),e(uX,nmr),e(wv,smr),e(ue,lmr),e(ue,Av),e(Av,Hue),e(Hue,imr),e(Av,dmr),e(Av,bX),e(bX,cmr),e(Av,fmr),e(ue,mmr),e(ue,yv),e(yv,Uue),e(Uue,gmr),e(yv,hmr),e(yv,FX),e(FX,pmr),e(yv,_mr),e(ue,umr),e(ue,Lv),e(Lv,Jue),e(Jue,bmr),e(Lv,Fmr),e(Lv,vX),e(vX,vmr),e(Lv,Tmr),e(Fo,Mmr),e(Fo,Yue),e(Yue,Emr),e(Fo,Cmr),g(D0,Fo,null),b(c,mBe,u),b(c,Sc,u),e(Sc,xv),e(xv,Kue),g(G0,Kue,null),e(Sc,wmr),e(Sc,Zue),e(Zue,Amr),b(c,gBe,u),b(c,wr,u),g(O0,wr,null),e(wr,ymr),e(wr,Rc),e(Rc,Lmr),e(Rc,TX),e(TX,xmr),e(Rc,kmr),e(Rc,MX),e(MX,Smr),e(Rc,Rmr),e(wr,Bmr),e(wr,V0),e(V0,Pmr),e(V0,e1e),e(e1e,$mr),e(V0,Imr),e(wr,qmr),e(wr,Ft),g(X0,Ft,null),e(Ft,Nmr),e(Ft,o1e),e(o1e,jmr),e(Ft,Dmr),e(Ft,Bc),e(Bc,Gmr),e(Bc,r1e),e(r1e,Omr),e(Bc,Vmr),e(Bc,EX),e(EX,Xmr),e(Bc,zmr),e(Ft,Qmr),e(Ft,t1e),e(t1e,Wmr),e(Ft,Hmr),g(z0,Ft,null),e(wr,Umr),e(wr,vo),g(Q0,vo,null),e(vo,Jmr),e(vo,a1e),e(a1e,Ymr),e(vo,Kmr),e(vo,Mn),e(Mn,Zmr),e(Mn,n1e),e(n1e,egr),e(Mn,ogr),e(Mn,s1e),e(s1e,rgr),e(Mn,tgr),e(Mn,l1e),e(l1e,agr),e(Mn,ngr),e(vo,sgr),e(vo,V),e(V,kv),e(kv,i1e),e(i1e,lgr),e(kv,igr),e(kv,CX),e(CX,dgr),e(kv,cgr),e(V,fgr),e(V,Sv),e(Sv,d1e),e(d1e,mgr),e(Sv,ggr),e(Sv,wX),e(wX,hgr),e(Sv,pgr),e(V,_gr),e(V,Rv),e(Rv,c1e),e(c1e,ugr),e(Rv,bgr),e(Rv,AX),e(AX,Fgr),e(Rv,vgr),e(V,Tgr),e(V,Bv),e(Bv,f1e),e(f1e,Mgr),e(Bv,Egr),e(Bv,yX),e(yX,Cgr),e(Bv,wgr),e(V,Agr),e(V,Pv),e(Pv,m1e),e(m1e,ygr),e(Pv,Lgr),e(Pv,LX),e(LX,xgr),e(Pv,kgr),e(V,Sgr),e(V,$v),e($v,g1e),e(g1e,Rgr),e($v,Bgr),e($v,xX),e(xX,Pgr),e($v,$gr),e(V,Igr),e(V,Iv),e(Iv,h1e),e(h1e,qgr),e(Iv,Ngr),e(Iv,kX),e(kX,jgr),e(Iv,Dgr),e(V,Ggr),e(V,qv),e(qv,p1e),e(p1e,Ogr),e(qv,Vgr),e(qv,SX),e(SX,Xgr),e(qv,zgr),e(V,Qgr),e(V,Nv),e(Nv,_1e),e(_1e,Wgr),e(Nv,Hgr),e(Nv,RX),e(RX,Ugr),e(Nv,Jgr),e(V,Ygr),e(V,jv),e(jv,u1e),e(u1e,Kgr),e(jv,Zgr),e(jv,BX),e(BX,ehr),e(jv,ohr),e(V,rhr),e(V,Dv),e(Dv,b1e),e(b1e,thr),e(Dv,ahr),e(Dv,PX),e(PX,nhr),e(Dv,shr),e(V,lhr),e(V,Gv),e(Gv,F1e),e(F1e,ihr),e(Gv,dhr),e(Gv,$X),e($X,chr),e(Gv,fhr),e(V,mhr),e(V,Ov),e(Ov,v1e),e(v1e,ghr),e(Ov,hhr),e(Ov,IX),e(IX,phr),e(Ov,_hr),e(V,uhr),e(V,Vv),e(Vv,T1e),e(T1e,bhr),e(Vv,Fhr),e(Vv,qX),e(qX,vhr),e(Vv,Thr),e(V,Mhr),e(V,Xv),e(Xv,M1e),e(M1e,Ehr),e(Xv,Chr),e(Xv,NX),e(NX,whr),e(Xv,Ahr),e(V,yhr),e(V,zv),e(zv,E1e),e(E1e,Lhr),e(zv,xhr),e(zv,jX),e(jX,khr),e(zv,Shr),e(V,Rhr),e(V,Qv),e(Qv,C1e),e(C1e,Bhr),e(Qv,Phr),e(Qv,DX),e(DX,$hr),e(Qv,Ihr),e(V,qhr),e(V,Wv),e(Wv,w1e),e(w1e,Nhr),e(Wv,jhr),e(Wv,GX),e(GX,Dhr),e(Wv,Ghr),e(V,Ohr),e(V,Hv),e(Hv,A1e),e(A1e,Vhr),e(Hv,Xhr),e(Hv,OX),e(OX,zhr),e(Hv,Qhr),e(V,Whr),e(V,Uv),e(Uv,y1e),e(y1e,Hhr),e(Uv,Uhr),e(Uv,VX),e(VX,Jhr),e(Uv,Yhr),e(V,Khr),e(V,Jv),e(Jv,L1e),e(L1e,Zhr),e(Jv,epr),e(Jv,XX),e(XX,opr),e(Jv,rpr),e(V,tpr),e(V,Yv),e(Yv,x1e),e(x1e,apr),e(Yv,npr),e(Yv,zX),e(zX,spr),e(Yv,lpr),e(V,ipr),e(V,Kv),e(Kv,k1e),e(k1e,dpr),e(Kv,cpr),e(Kv,QX),e(QX,fpr),e(Kv,mpr),e(V,gpr),e(V,Zv),e(Zv,S1e),e(S1e,hpr),e(Zv,ppr),e(Zv,WX),e(WX,_pr),e(Zv,upr),e(V,bpr),e(V,eT),e(eT,R1e),e(R1e,Fpr),e(eT,vpr),e(eT,HX),e(HX,Tpr),e(eT,Mpr),e(V,Epr),e(V,oT),e(oT,B1e),e(B1e,Cpr),e(oT,wpr),e(oT,UX),e(UX,Apr),e(oT,ypr),e(vo,Lpr),e(vo,P1e),e(P1e,xpr),e(vo,kpr),g(W0,vo,null),b(c,hBe,u),b(c,Pc,u),e(Pc,rT),e(rT,$1e),g(H0,$1e,null),e(Pc,Spr),e(Pc,I1e),e(I1e,Rpr),b(c,pBe,u),b(c,Ar,u),g(U0,Ar,null),e(Ar,Bpr),e(Ar,$c),e($c,Ppr),e($c,JX),e(JX,$pr),e($c,Ipr),e($c,YX),e(YX,qpr),e($c,Npr),e(Ar,jpr),e(Ar,J0),e(J0,Dpr),e(J0,q1e),e(q1e,Gpr),e(J0,Opr),e(Ar,Vpr),e(Ar,vt),g(Y0,vt,null),e(vt,Xpr),e(vt,N1e),e(N1e,zpr),e(vt,Qpr),e(vt,Ic),e(Ic,Wpr),e(Ic,j1e),e(j1e,Hpr),e(Ic,Upr),e(Ic,KX),e(KX,Jpr),e(Ic,Ypr),e(vt,Kpr),e(vt,D1e),e(D1e,Zpr),e(vt,e_r),g(K0,vt,null),e(Ar,o_r),e(Ar,To),g(Z0,To,null),e(To,r_r),e(To,G1e),e(G1e,t_r),e(To,a_r),e(To,En),e(En,n_r),e(En,O1e),e(O1e,s_r),e(En,l_r),e(En,V1e),e(V1e,i_r),e(En,d_r),e(En,X1e),e(X1e,c_r),e(En,f_r),e(To,m_r),e(To,ae),e(ae,tT),e(tT,z1e),e(z1e,g_r),e(tT,h_r),e(tT,ZX),e(ZX,p_r),e(tT,__r),e(ae,u_r),e(ae,aT),e(aT,Q1e),e(Q1e,b_r),e(aT,F_r),e(aT,ez),e(ez,v_r),e(aT,T_r),e(ae,M_r),e(ae,nT),e(nT,W1e),e(W1e,E_r),e(nT,C_r),e(nT,oz),e(oz,w_r),e(nT,A_r),e(ae,y_r),e(ae,sT),e(sT,H1e),e(H1e,L_r),e(sT,x_r),e(sT,rz),e(rz,k_r),e(sT,S_r),e(ae,R_r),e(ae,lT),e(lT,U1e),e(U1e,B_r),e(lT,P_r),e(lT,tz),e(tz,$_r),e(lT,I_r),e(ae,q_r),e(ae,iT),e(iT,J1e),e(J1e,N_r),e(iT,j_r),e(iT,az),e(az,D_r),e(iT,G_r),e(ae,O_r),e(ae,dT),e(dT,Y1e),e(Y1e,V_r),e(dT,X_r),e(dT,nz),e(nz,z_r),e(dT,Q_r),e(ae,W_r),e(ae,cT),e(cT,K1e),e(K1e,H_r),e(cT,U_r),e(cT,sz),e(sz,J_r),e(cT,Y_r),e(ae,K_r),e(ae,fT),e(fT,Z1e),e(Z1e,Z_r),e(fT,eur),e(fT,lz),e(lz,our),e(fT,rur),e(ae,tur),e(ae,mT),e(mT,e7e),e(e7e,aur),e(mT,nur),e(mT,iz),e(iz,sur),e(mT,lur),e(ae,iur),e(ae,gT),e(gT,o7e),e(o7e,dur),e(gT,cur),e(gT,dz),e(dz,fur),e(gT,mur),e(ae,gur),e(ae,hT),e(hT,r7e),e(r7e,hur),e(hT,pur),e(hT,cz),e(cz,_ur),e(hT,uur),e(ae,bur),e(ae,pT),e(pT,t7e),e(t7e,Fur),e(pT,vur),e(pT,fz),e(fz,Tur),e(pT,Mur),e(ae,Eur),e(ae,_T),e(_T,a7e),e(a7e,Cur),e(_T,wur),e(_T,mz),e(mz,Aur),e(_T,yur),e(ae,Lur),e(ae,uT),e(uT,n7e),e(n7e,xur),e(uT,kur),e(uT,gz),e(gz,Sur),e(uT,Rur),e(ae,Bur),e(ae,bT),e(bT,s7e),e(s7e,Pur),e(bT,$ur),e(bT,hz),e(hz,Iur),e(bT,qur),e(ae,Nur),e(ae,FT),e(FT,l7e),e(l7e,jur),e(FT,Dur),e(FT,pz),e(pz,Gur),e(FT,Our),e(To,Vur),e(To,i7e),e(i7e,Xur),e(To,zur),g(ey,To,null),b(c,_Be,u),b(c,qc,u),e(qc,vT),e(vT,d7e),g(oy,d7e,null),e(qc,Qur),e(qc,c7e),e(c7e,Wur),b(c,uBe,u),b(c,yr,u),g(ry,yr,null),e(yr,Hur),e(yr,Nc),e(Nc,Uur),e(Nc,_z),e(_z,Jur),e(Nc,Yur),e(Nc,uz),e(uz,Kur),e(Nc,Zur),e(yr,e1r),e(yr,ty),e(ty,o1r),e(ty,f7e),e(f7e,r1r),e(ty,t1r),e(yr,a1r),e(yr,Tt),g(ay,Tt,null),e(Tt,n1r),e(Tt,m7e),e(m7e,s1r),e(Tt,l1r),e(Tt,jc),e(jc,i1r),e(jc,g7e),e(g7e,d1r),e(jc,c1r),e(jc,bz),e(bz,f1r),e(jc,m1r),e(Tt,g1r),e(Tt,h7e),e(h7e,h1r),e(Tt,p1r),g(ny,Tt,null),e(yr,_1r),e(yr,Mo),g(sy,Mo,null),e(Mo,u1r),e(Mo,p7e),e(p7e,b1r),e(Mo,F1r),e(Mo,Cn),e(Cn,v1r),e(Cn,_7e),e(_7e,T1r),e(Cn,M1r),e(Cn,u7e),e(u7e,E1r),e(Cn,C1r),e(Cn,b7e),e(b7e,w1r),e(Cn,A1r),e(Mo,y1r),e(Mo,F7e),e(F7e,TT),e(TT,v7e),e(v7e,L1r),e(TT,x1r),e(TT,Fz),e(Fz,k1r),e(TT,S1r),e(Mo,R1r),e(Mo,T7e),e(T7e,B1r),e(Mo,P1r),g(ly,Mo,null),b(c,bBe,u),b(c,Dc,u),e(Dc,MT),e(MT,M7e),g(iy,M7e,null),e(Dc,$1r),e(Dc,E7e),e(E7e,I1r),b(c,FBe,u),b(c,Lr,u),g(dy,Lr,null),e(Lr,q1r),e(Lr,Gc),e(Gc,N1r),e(Gc,vz),e(vz,j1r),e(Gc,D1r),e(Gc,Tz),e(Tz,G1r),e(Gc,O1r),e(Lr,V1r),e(Lr,cy),e(cy,X1r),e(cy,C7e),e(C7e,z1r),e(cy,Q1r),e(Lr,W1r),e(Lr,Mt),g(fy,Mt,null),e(Mt,H1r),e(Mt,w7e),e(w7e,U1r),e(Mt,J1r),e(Mt,Oc),e(Oc,Y1r),e(Oc,A7e),e(A7e,K1r),e(Oc,Z1r),e(Oc,Mz),e(Mz,e7r),e(Oc,o7r),e(Mt,r7r),e(Mt,y7e),e(y7e,t7r),e(Mt,a7r),g(my,Mt,null),e(Lr,n7r),e(Lr,Eo),g(gy,Eo,null),e(Eo,s7r),e(Eo,L7e),e(L7e,l7r),e(Eo,i7r),e(Eo,wn),e(wn,d7r),e(wn,x7e),e(x7e,c7r),e(wn,f7r),e(wn,k7e),e(k7e,m7r),e(wn,g7r),e(wn,S7e),e(S7e,h7r),e(wn,p7r),e(Eo,_7r),e(Eo,Y),e(Y,ET),e(ET,R7e),e(R7e,u7r),e(ET,b7r),e(ET,Ez),e(Ez,F7r),e(ET,v7r),e(Y,T7r),e(Y,CT),e(CT,B7e),e(B7e,M7r),e(CT,E7r),e(CT,Cz),e(Cz,C7r),e(CT,w7r),e(Y,A7r),e(Y,wT),e(wT,P7e),e(P7e,y7r),e(wT,L7r),e(wT,wz),e(wz,x7r),e(wT,k7r),e(Y,S7r),e(Y,AT),e(AT,$7e),e($7e,R7r),e(AT,B7r),e(AT,Az),e(Az,P7r),e(AT,$7r),e(Y,I7r),e(Y,yT),e(yT,I7e),e(I7e,q7r),e(yT,N7r),e(yT,yz),e(yz,j7r),e(yT,D7r),e(Y,G7r),e(Y,LT),e(LT,q7e),e(q7e,O7r),e(LT,V7r),e(LT,Lz),e(Lz,X7r),e(LT,z7r),e(Y,Q7r),e(Y,xT),e(xT,N7e),e(N7e,W7r),e(xT,H7r),e(xT,xz),e(xz,U7r),e(xT,J7r),e(Y,Y7r),e(Y,kT),e(kT,j7e),e(j7e,K7r),e(kT,Z7r),e(kT,kz),e(kz,ebr),e(kT,obr),e(Y,rbr),e(Y,ST),e(ST,D7e),e(D7e,tbr),e(ST,abr),e(ST,Sz),e(Sz,nbr),e(ST,sbr),e(Y,lbr),e(Y,RT),e(RT,G7e),e(G7e,ibr),e(RT,dbr),e(RT,Rz),e(Rz,cbr),e(RT,fbr),e(Y,mbr),e(Y,BT),e(BT,O7e),e(O7e,gbr),e(BT,hbr),e(BT,Bz),e(Bz,pbr),e(BT,_br),e(Y,ubr),e(Y,PT),e(PT,V7e),e(V7e,bbr),e(PT,Fbr),e(PT,Pz),e(Pz,vbr),e(PT,Tbr),e(Y,Mbr),e(Y,$T),e($T,X7e),e(X7e,Ebr),e($T,Cbr),e($T,$z),e($z,wbr),e($T,Abr),e(Y,ybr),e(Y,IT),e(IT,z7e),e(z7e,Lbr),e(IT,xbr),e(IT,Iz),e(Iz,kbr),e(IT,Sbr),e(Y,Rbr),e(Y,qT),e(qT,Q7e),e(Q7e,Bbr),e(qT,Pbr),e(qT,qz),e(qz,$br),e(qT,Ibr),e(Y,qbr),e(Y,NT),e(NT,W7e),e(W7e,Nbr),e(NT,jbr),e(NT,Nz),e(Nz,Dbr),e(NT,Gbr),e(Y,Obr),e(Y,jT),e(jT,H7e),e(H7e,Vbr),e(jT,Xbr),e(jT,jz),e(jz,zbr),e(jT,Qbr),e(Y,Wbr),e(Y,DT),e(DT,U7e),e(U7e,Hbr),e(DT,Ubr),e(DT,Dz),e(Dz,Jbr),e(DT,Ybr),e(Y,Kbr),e(Y,GT),e(GT,J7e),e(J7e,Zbr),e(GT,e5r),e(GT,Gz),e(Gz,o5r),e(GT,r5r),e(Y,t5r),e(Y,OT),e(OT,Y7e),e(Y7e,a5r),e(OT,n5r),e(OT,Oz),e(Oz,s5r),e(OT,l5r),e(Eo,i5r),e(Eo,K7e),e(K7e,d5r),e(Eo,c5r),g(hy,Eo,null),b(c,vBe,u),b(c,Vc,u),e(Vc,VT),e(VT,Z7e),g(py,Z7e,null),e(Vc,f5r),e(Vc,ebe),e(ebe,m5r),b(c,TBe,u),b(c,xr,u),g(_y,xr,null),e(xr,g5r),e(xr,Xc),e(Xc,h5r),e(Xc,Vz),e(Vz,p5r),e(Xc,_5r),e(Xc,Xz),e(Xz,u5r),e(Xc,b5r),e(xr,F5r),e(xr,uy),e(uy,v5r),e(uy,obe),e(obe,T5r),e(uy,M5r),e(xr,E5r),e(xr,Et),g(by,Et,null),e(Et,C5r),e(Et,rbe),e(rbe,w5r),e(Et,A5r),e(Et,zc),e(zc,y5r),e(zc,tbe),e(tbe,L5r),e(zc,x5r),e(zc,zz),e(zz,k5r),e(zc,S5r),e(Et,R5r),e(Et,abe),e(abe,B5r),e(Et,P5r),g(Fy,Et,null),e(xr,$5r),e(xr,Co),g(vy,Co,null),e(Co,I5r),e(Co,nbe),e(nbe,q5r),e(Co,N5r),e(Co,An),e(An,j5r),e(An,sbe),e(sbe,D5r),e(An,G5r),e(An,lbe),e(lbe,O5r),e(An,V5r),e(An,ibe),e(ibe,X5r),e(An,z5r),e(Co,Q5r),e(Co,K),e(K,XT),e(XT,dbe),e(dbe,W5r),e(XT,H5r),e(XT,Qz),e(Qz,U5r),e(XT,J5r),e(K,Y5r),e(K,zT),e(zT,cbe),e(cbe,K5r),e(zT,Z5r),e(zT,Wz),e(Wz,e3r),e(zT,o3r),e(K,r3r),e(K,QT),e(QT,fbe),e(fbe,t3r),e(QT,a3r),e(QT,Hz),e(Hz,n3r),e(QT,s3r),e(K,l3r),e(K,WT),e(WT,mbe),e(mbe,i3r),e(WT,d3r),e(WT,Uz),e(Uz,c3r),e(WT,f3r),e(K,m3r),e(K,HT),e(HT,gbe),e(gbe,g3r),e(HT,h3r),e(HT,Jz),e(Jz,p3r),e(HT,_3r),e(K,u3r),e(K,UT),e(UT,hbe),e(hbe,b3r),e(UT,F3r),e(UT,Yz),e(Yz,v3r),e(UT,T3r),e(K,M3r),e(K,JT),e(JT,pbe),e(pbe,E3r),e(JT,C3r),e(JT,Kz),e(Kz,w3r),e(JT,A3r),e(K,y3r),e(K,YT),e(YT,_be),e(_be,L3r),e(YT,x3r),e(YT,Zz),e(Zz,k3r),e(YT,S3r),e(K,R3r),e(K,KT),e(KT,ube),e(ube,B3r),e(KT,P3r),e(KT,eQ),e(eQ,$3r),e(KT,I3r),e(K,q3r),e(K,ZT),e(ZT,bbe),e(bbe,N3r),e(ZT,j3r),e(ZT,oQ),e(oQ,D3r),e(ZT,G3r),e(K,O3r),e(K,eM),e(eM,Fbe),e(Fbe,V3r),e(eM,X3r),e(eM,rQ),e(rQ,z3r),e(eM,Q3r),e(K,W3r),e(K,oM),e(oM,vbe),e(vbe,H3r),e(oM,U3r),e(oM,tQ),e(tQ,J3r),e(oM,Y3r),e(K,K3r),e(K,rM),e(rM,Tbe),e(Tbe,Z3r),e(rM,e2r),e(rM,aQ),e(aQ,o2r),e(rM,r2r),e(K,t2r),e(K,tM),e(tM,Mbe),e(Mbe,a2r),e(tM,n2r),e(tM,nQ),e(nQ,s2r),e(tM,l2r),e(K,i2r),e(K,aM),e(aM,Ebe),e(Ebe,d2r),e(aM,c2r),e(aM,sQ),e(sQ,f2r),e(aM,m2r),e(K,g2r),e(K,nM),e(nM,Cbe),e(Cbe,h2r),e(nM,p2r),e(nM,lQ),e(lQ,_2r),e(nM,u2r),e(K,b2r),e(K,sM),e(sM,wbe),e(wbe,F2r),e(sM,v2r),e(sM,iQ),e(iQ,T2r),e(sM,M2r),e(K,E2r),e(K,lM),e(lM,Abe),e(Abe,C2r),e(lM,w2r),e(lM,dQ),e(dQ,A2r),e(lM,y2r),e(K,L2r),e(K,iM),e(iM,ybe),e(ybe,x2r),e(iM,k2r),e(iM,cQ),e(cQ,S2r),e(iM,R2r),e(K,B2r),e(K,dM),e(dM,Lbe),e(Lbe,P2r),e(dM,$2r),e(dM,fQ),e(fQ,I2r),e(dM,q2r),e(Co,N2r),e(Co,xbe),e(xbe,j2r),e(Co,D2r),g(Ty,Co,null),b(c,MBe,u),b(c,Qc,u),e(Qc,cM),e(cM,kbe),g(My,kbe,null),e(Qc,G2r),e(Qc,Sbe),e(Sbe,O2r),b(c,EBe,u),b(c,kr,u),g(Ey,kr,null),e(kr,V2r),e(kr,Wc),e(Wc,X2r),e(Wc,mQ),e(mQ,z2r),e(Wc,Q2r),e(Wc,gQ),e(gQ,W2r),e(Wc,H2r),e(kr,U2r),e(kr,Cy),e(Cy,J2r),e(Cy,Rbe),e(Rbe,Y2r),e(Cy,K2r),e(kr,Z2r),e(kr,Ct),g(wy,Ct,null),e(Ct,eFr),e(Ct,Bbe),e(Bbe,oFr),e(Ct,rFr),e(Ct,Hc),e(Hc,tFr),e(Hc,Pbe),e(Pbe,aFr),e(Hc,nFr),e(Hc,hQ),e(hQ,sFr),e(Hc,lFr),e(Ct,iFr),e(Ct,$be),e($be,dFr),e(Ct,cFr),g(Ay,Ct,null),e(kr,fFr),e(kr,wo),g(yy,wo,null),e(wo,mFr),e(wo,Ibe),e(Ibe,gFr),e(wo,hFr),e(wo,yn),e(yn,pFr),e(yn,qbe),e(qbe,_Fr),e(yn,uFr),e(yn,Nbe),e(Nbe,bFr),e(yn,FFr),e(yn,jbe),e(jbe,vFr),e(yn,TFr),e(wo,MFr),e(wo,Dbe),e(Dbe,fM),e(fM,Gbe),e(Gbe,EFr),e(fM,CFr),e(fM,pQ),e(pQ,wFr),e(fM,AFr),e(wo,yFr),e(wo,Obe),e(Obe,LFr),e(wo,xFr),g(Ly,wo,null),b(c,CBe,u),b(c,Uc,u),e(Uc,mM),e(mM,Vbe),g(xy,Vbe,null),e(Uc,kFr),e(Uc,Xbe),e(Xbe,SFr),b(c,wBe,u),b(c,Sr,u),g(ky,Sr,null),e(Sr,RFr),e(Sr,Jc),e(Jc,BFr),e(Jc,_Q),e(_Q,PFr),e(Jc,$Fr),e(Jc,uQ),e(uQ,IFr),e(Jc,qFr),e(Sr,NFr),e(Sr,Sy),e(Sy,jFr),e(Sy,zbe),e(zbe,DFr),e(Sy,GFr),e(Sr,OFr),e(Sr,wt),g(Ry,wt,null),e(wt,VFr),e(wt,Qbe),e(Qbe,XFr),e(wt,zFr),e(wt,Yc),e(Yc,QFr),e(Yc,Wbe),e(Wbe,WFr),e(Yc,HFr),e(Yc,bQ),e(bQ,UFr),e(Yc,JFr),e(wt,YFr),e(wt,Hbe),e(Hbe,KFr),e(wt,ZFr),g(By,wt,null),e(Sr,evr),e(Sr,Ao),g(Py,Ao,null),e(Ao,ovr),e(Ao,Ube),e(Ube,rvr),e(Ao,tvr),e(Ao,Ln),e(Ln,avr),e(Ln,Jbe),e(Jbe,nvr),e(Ln,svr),e(Ln,Ybe),e(Ybe,lvr),e(Ln,ivr),e(Ln,Kbe),e(Kbe,dvr),e(Ln,cvr),e(Ao,fvr),e(Ao,Zbe),e(Zbe,gM),e(gM,e5e),e(e5e,mvr),e(gM,gvr),e(gM,FQ),e(FQ,hvr),e(gM,pvr),e(Ao,_vr),e(Ao,o5e),e(o5e,uvr),e(Ao,bvr),g($y,Ao,null),b(c,ABe,u),b(c,Kc,u),e(Kc,hM),e(hM,r5e),g(Iy,r5e,null),e(Kc,Fvr),e(Kc,t5e),e(t5e,vvr),b(c,yBe,u),b(c,Rr,u),g(qy,Rr,null),e(Rr,Tvr),e(Rr,Zc),e(Zc,Mvr),e(Zc,vQ),e(vQ,Evr),e(Zc,Cvr),e(Zc,TQ),e(TQ,wvr),e(Zc,Avr),e(Rr,yvr),e(Rr,Ny),e(Ny,Lvr),e(Ny,a5e),e(a5e,xvr),e(Ny,kvr),e(Rr,Svr),e(Rr,At),g(jy,At,null),e(At,Rvr),e(At,n5e),e(n5e,Bvr),e(At,Pvr),e(At,ef),e(ef,$vr),e(ef,s5e),e(s5e,Ivr),e(ef,qvr),e(ef,MQ),e(MQ,Nvr),e(ef,jvr),e(At,Dvr),e(At,l5e),e(l5e,Gvr),e(At,Ovr),g(Dy,At,null),e(Rr,Vvr),e(Rr,yo),g(Gy,yo,null),e(yo,Xvr),e(yo,i5e),e(i5e,zvr),e(yo,Qvr),e(yo,xn),e(xn,Wvr),e(xn,d5e),e(d5e,Hvr),e(xn,Uvr),e(xn,c5e),e(c5e,Jvr),e(xn,Yvr),e(xn,f5e),e(f5e,Kvr),e(xn,Zvr),e(yo,eTr),e(yo,z),e(z,pM),e(pM,m5e),e(m5e,oTr),e(pM,rTr),e(pM,EQ),e(EQ,tTr),e(pM,aTr),e(z,nTr),e(z,_M),e(_M,g5e),e(g5e,sTr),e(_M,lTr),e(_M,CQ),e(CQ,iTr),e(_M,dTr),e(z,cTr),e(z,uM),e(uM,h5e),e(h5e,fTr),e(uM,mTr),e(uM,wQ),e(wQ,gTr),e(uM,hTr),e(z,pTr),e(z,bM),e(bM,p5e),e(p5e,_Tr),e(bM,uTr),e(bM,AQ),e(AQ,bTr),e(bM,FTr),e(z,vTr),e(z,FM),e(FM,_5e),e(_5e,TTr),e(FM,MTr),e(FM,yQ),e(yQ,ETr),e(FM,CTr),e(z,wTr),e(z,vM),e(vM,u5e),e(u5e,ATr),e(vM,yTr),e(vM,LQ),e(LQ,LTr),e(vM,xTr),e(z,kTr),e(z,TM),e(TM,b5e),e(b5e,STr),e(TM,RTr),e(TM,xQ),e(xQ,BTr),e(TM,PTr),e(z,$Tr),e(z,MM),e(MM,F5e),e(F5e,ITr),e(MM,qTr),e(MM,kQ),e(kQ,NTr),e(MM,jTr),e(z,DTr),e(z,EM),e(EM,v5e),e(v5e,GTr),e(EM,OTr),e(EM,SQ),e(SQ,VTr),e(EM,XTr),e(z,zTr),e(z,CM),e(CM,T5e),e(T5e,QTr),e(CM,WTr),e(CM,RQ),e(RQ,HTr),e(CM,UTr),e(z,JTr),e(z,wM),e(wM,M5e),e(M5e,YTr),e(wM,KTr),e(wM,BQ),e(BQ,ZTr),e(wM,eMr),e(z,oMr),e(z,AM),e(AM,E5e),e(E5e,rMr),e(AM,tMr),e(AM,PQ),e(PQ,aMr),e(AM,nMr),e(z,sMr),e(z,yM),e(yM,C5e),e(C5e,lMr),e(yM,iMr),e(yM,$Q),e($Q,dMr),e(yM,cMr),e(z,fMr),e(z,LM),e(LM,w5e),e(w5e,mMr),e(LM,gMr),e(LM,IQ),e(IQ,hMr),e(LM,pMr),e(z,_Mr),e(z,xM),e(xM,A5e),e(A5e,uMr),e(xM,bMr),e(xM,qQ),e(qQ,FMr),e(xM,vMr),e(z,TMr),e(z,kM),e(kM,y5e),e(y5e,MMr),e(kM,EMr),e(kM,NQ),e(NQ,CMr),e(kM,wMr),e(z,AMr),e(z,SM),e(SM,L5e),e(L5e,yMr),e(SM,LMr),e(SM,jQ),e(jQ,xMr),e(SM,kMr),e(z,SMr),e(z,RM),e(RM,x5e),e(x5e,RMr),e(RM,BMr),e(RM,DQ),e(DQ,PMr),e(RM,$Mr),e(z,IMr),e(z,BM),e(BM,k5e),e(k5e,qMr),e(BM,NMr),e(BM,GQ),e(GQ,jMr),e(BM,DMr),e(z,GMr),e(z,PM),e(PM,S5e),e(S5e,OMr),e(PM,VMr),e(PM,OQ),e(OQ,XMr),e(PM,zMr),e(z,QMr),e(z,$M),e($M,R5e),e(R5e,WMr),e($M,HMr),e($M,VQ),e(VQ,UMr),e($M,JMr),e(z,YMr),e(z,IM),e(IM,B5e),e(B5e,KMr),e(IM,ZMr),e(IM,XQ),e(XQ,e4r),e(IM,o4r),e(z,r4r),e(z,qM),e(qM,P5e),e(P5e,t4r),e(qM,a4r),e(qM,zQ),e(zQ,n4r),e(qM,s4r),e(z,l4r),e(z,NM),e(NM,$5e),e($5e,i4r),e(NM,d4r),e(NM,QQ),e(QQ,c4r),e(NM,f4r),e(z,m4r),e(z,jM),e(jM,I5e),e(I5e,g4r),e(jM,h4r),e(jM,WQ),e(WQ,p4r),e(jM,_4r),e(yo,u4r),e(yo,q5e),e(q5e,b4r),e(yo,F4r),g(Oy,yo,null),b(c,LBe,u),b(c,of,u),e(of,DM),e(DM,N5e),g(Vy,N5e,null),e(of,v4r),e(of,j5e),e(j5e,T4r),b(c,xBe,u),b(c,Br,u),g(Xy,Br,null),e(Br,M4r),e(Br,rf),e(rf,E4r),e(rf,HQ),e(HQ,C4r),e(rf,w4r),e(rf,UQ),e(UQ,A4r),e(rf,y4r),e(Br,L4r),e(Br,zy),e(zy,x4r),e(zy,D5e),e(D5e,k4r),e(zy,S4r),e(Br,R4r),e(Br,yt),g(Qy,yt,null),e(yt,B4r),e(yt,G5e),e(G5e,P4r),e(yt,$4r),e(yt,tf),e(tf,I4r),e(tf,O5e),e(O5e,q4r),e(tf,N4r),e(tf,JQ),e(JQ,j4r),e(tf,D4r),e(yt,G4r),e(yt,V5e),e(V5e,O4r),e(yt,V4r),g(Wy,yt,null),e(Br,X4r),e(Br,Lo),g(Hy,Lo,null),e(Lo,z4r),e(Lo,X5e),e(X5e,Q4r),e(Lo,W4r),e(Lo,kn),e(kn,H4r),e(kn,z5e),e(z5e,U4r),e(kn,J4r),e(kn,Q5e),e(Q5e,Y4r),e(kn,K4r),e(kn,W5e),e(W5e,Z4r),e(kn,eEr),e(Lo,oEr),e(Lo,ca),e(ca,GM),e(GM,H5e),e(H5e,rEr),e(GM,tEr),e(GM,YQ),e(YQ,aEr),e(GM,nEr),e(ca,sEr),e(ca,OM),e(OM,U5e),e(U5e,lEr),e(OM,iEr),e(OM,KQ),e(KQ,dEr),e(OM,cEr),e(ca,fEr),e(ca,VM),e(VM,J5e),e(J5e,mEr),e(VM,gEr),e(VM,ZQ),e(ZQ,hEr),e(VM,pEr),e(ca,_Er),e(ca,XM),e(XM,Y5e),e(Y5e,uEr),e(XM,bEr),e(XM,eW),e(eW,FEr),e(XM,vEr),e(ca,TEr),e(ca,zM),e(zM,K5e),e(K5e,MEr),e(zM,EEr),e(zM,oW),e(oW,CEr),e(zM,wEr),e(Lo,AEr),e(Lo,Z5e),e(Z5e,yEr),e(Lo,LEr),g(Uy,Lo,null),b(c,kBe,u),b(c,af,u),e(af,QM),e(QM,e3e),g(Jy,e3e,null),e(af,xEr),e(af,o3e),e(o3e,kEr),b(c,SBe,u),b(c,Pr,u),g(Yy,Pr,null),e(Pr,SEr),e(Pr,nf),e(nf,REr),e(nf,rW),e(rW,BEr),e(nf,PEr),e(nf,tW),e(tW,$Er),e(nf,IEr),e(Pr,qEr),e(Pr,Ky),e(Ky,NEr),e(Ky,r3e),e(r3e,jEr),e(Ky,DEr),e(Pr,GEr),e(Pr,Lt),g(Zy,Lt,null),e(Lt,OEr),e(Lt,t3e),e(t3e,VEr),e(Lt,XEr),e(Lt,sf),e(sf,zEr),e(sf,a3e),e(a3e,QEr),e(sf,WEr),e(sf,aW),e(aW,HEr),e(sf,UEr),e(Lt,JEr),e(Lt,n3e),e(n3e,YEr),e(Lt,KEr),g(eL,Lt,null),e(Pr,ZEr),e(Pr,xo),g(oL,xo,null),e(xo,eCr),e(xo,s3e),e(s3e,oCr),e(xo,rCr),e(xo,Sn),e(Sn,tCr),e(Sn,l3e),e(l3e,aCr),e(Sn,nCr),e(Sn,i3e),e(i3e,sCr),e(Sn,lCr),e(Sn,d3e),e(d3e,iCr),e(Sn,dCr),e(xo,cCr),e(xo,fe),e(fe,WM),e(WM,c3e),e(c3e,fCr),e(WM,mCr),e(WM,nW),e(nW,gCr),e(WM,hCr),e(fe,pCr),e(fe,HM),e(HM,f3e),e(f3e,_Cr),e(HM,uCr),e(HM,sW),e(sW,bCr),e(HM,FCr),e(fe,vCr),e(fe,UM),e(UM,m3e),e(m3e,TCr),e(UM,MCr),e(UM,lW),e(lW,ECr),e(UM,CCr),e(fe,wCr),e(fe,JM),e(JM,g3e),e(g3e,ACr),e(JM,yCr),e(JM,iW),e(iW,LCr),e(JM,xCr),e(fe,kCr),e(fe,YM),e(YM,h3e),e(h3e,SCr),e(YM,RCr),e(YM,dW),e(dW,BCr),e(YM,PCr),e(fe,$Cr),e(fe,KM),e(KM,p3e),e(p3e,ICr),e(KM,qCr),e(KM,cW),e(cW,NCr),e(KM,jCr),e(fe,DCr),e(fe,ZM),e(ZM,_3e),e(_3e,GCr),e(ZM,OCr),e(ZM,fW),e(fW,VCr),e(ZM,XCr),e(fe,zCr),e(fe,e4),e(e4,u3e),e(u3e,QCr),e(e4,WCr),e(e4,mW),e(mW,HCr),e(e4,UCr),e(fe,JCr),e(fe,o4),e(o4,b3e),e(b3e,YCr),e(o4,KCr),e(o4,gW),e(gW,ZCr),e(o4,ewr),e(fe,owr),e(fe,r4),e(r4,F3e),e(F3e,rwr),e(r4,twr),e(r4,hW),e(hW,awr),e(r4,nwr),e(fe,swr),e(fe,t4),e(t4,v3e),e(v3e,lwr),e(t4,iwr),e(t4,pW),e(pW,dwr),e(t4,cwr),e(fe,fwr),e(fe,a4),e(a4,T3e),e(T3e,mwr),e(a4,gwr),e(a4,_W),e(_W,hwr),e(a4,pwr),e(xo,_wr),e(xo,M3e),e(M3e,uwr),e(xo,bwr),g(rL,xo,null),b(c,RBe,u),b(c,lf,u),e(lf,n4),e(n4,E3e),g(tL,E3e,null),e(lf,Fwr),e(lf,C3e),e(C3e,vwr),b(c,BBe,u),b(c,$r,u),g(aL,$r,null),e($r,Twr),e($r,df),e(df,Mwr),e(df,uW),e(uW,Ewr),e(df,Cwr),e(df,bW),e(bW,wwr),e(df,Awr),e($r,ywr),e($r,nL),e(nL,Lwr),e(nL,w3e),e(w3e,xwr),e(nL,kwr),e($r,Swr),e($r,xt),g(sL,xt,null),e(xt,Rwr),e(xt,A3e),e(A3e,Bwr),e(xt,Pwr),e(xt,cf),e(cf,$wr),e(cf,y3e),e(y3e,Iwr),e(cf,qwr),e(cf,FW),e(FW,Nwr),e(cf,jwr),e(xt,Dwr),e(xt,L3e),e(L3e,Gwr),e(xt,Owr),g(lL,xt,null),e($r,Vwr),e($r,ko),g(iL,ko,null),e(ko,Xwr),e(ko,x3e),e(x3e,zwr),e(ko,Qwr),e(ko,Rn),e(Rn,Wwr),e(Rn,k3e),e(k3e,Hwr),e(Rn,Uwr),e(Rn,S3e),e(S3e,Jwr),e(Rn,Ywr),e(Rn,R3e),e(R3e,Kwr),e(Rn,Zwr),e(ko,eAr),e(ko,be),e(be,s4),e(s4,B3e),e(B3e,oAr),e(s4,rAr),e(s4,vW),e(vW,tAr),e(s4,aAr),e(be,nAr),e(be,l4),e(l4,P3e),e(P3e,sAr),e(l4,lAr),e(l4,TW),e(TW,iAr),e(l4,dAr),e(be,cAr),e(be,i4),e(i4,$3e),e($3e,fAr),e(i4,mAr),e(i4,MW),e(MW,gAr),e(i4,hAr),e(be,pAr),e(be,d4),e(d4,I3e),e(I3e,_Ar),e(d4,uAr),e(d4,EW),e(EW,bAr),e(d4,FAr),e(be,vAr),e(be,c4),e(c4,q3e),e(q3e,TAr),e(c4,MAr),e(c4,CW),e(CW,EAr),e(c4,CAr),e(be,wAr),e(be,f4),e(f4,N3e),e(N3e,AAr),e(f4,yAr),e(f4,wW),e(wW,LAr),e(f4,xAr),e(be,kAr),e(be,m4),e(m4,j3e),e(j3e,SAr),e(m4,RAr),e(m4,AW),e(AW,BAr),e(m4,PAr),e(be,$Ar),e(be,g4),e(g4,D3e),e(D3e,IAr),e(g4,qAr),e(g4,yW),e(yW,NAr),e(g4,jAr),e(be,DAr),e(be,h4),e(h4,G3e),e(G3e,GAr),e(h4,OAr),e(h4,LW),e(LW,VAr),e(h4,XAr),e(be,zAr),e(be,p4),e(p4,O3e),e(O3e,QAr),e(p4,WAr),e(p4,xW),e(xW,HAr),e(p4,UAr),e(ko,JAr),e(ko,V3e),e(V3e,YAr),e(ko,KAr),g(dL,ko,null),b(c,PBe,u),b(c,ff,u),e(ff,_4),e(_4,X3e),g(cL,X3e,null),e(ff,ZAr),e(ff,z3e),e(z3e,e6r),b(c,$Be,u),b(c,Ir,u),g(fL,Ir,null),e(Ir,o6r),e(Ir,mf),e(mf,r6r),e(mf,kW),e(kW,t6r),e(mf,a6r),e(mf,SW),e(SW,n6r),e(mf,s6r),e(Ir,l6r),e(Ir,mL),e(mL,i6r),e(mL,Q3e),e(Q3e,d6r),e(mL,c6r),e(Ir,f6r),e(Ir,kt),g(gL,kt,null),e(kt,m6r),e(kt,W3e),e(W3e,g6r),e(kt,h6r),e(kt,gf),e(gf,p6r),e(gf,H3e),e(H3e,_6r),e(gf,u6r),e(gf,RW),e(RW,b6r),e(gf,F6r),e(kt,v6r),e(kt,U3e),e(U3e,T6r),e(kt,M6r),g(hL,kt,null),e(Ir,E6r),e(Ir,So),g(pL,So,null),e(So,C6r),e(So,J3e),e(J3e,w6r),e(So,A6r),e(So,Bn),e(Bn,y6r),e(Bn,Y3e),e(Y3e,L6r),e(Bn,x6r),e(Bn,K3e),e(K3e,k6r),e(Bn,S6r),e(Bn,Z3e),e(Z3e,R6r),e(Bn,B6r),e(So,P6r),e(So,Ee),e(Ee,u4),e(u4,e2e),e(e2e,$6r),e(u4,I6r),e(u4,BW),e(BW,q6r),e(u4,N6r),e(Ee,j6r),e(Ee,b4),e(b4,o2e),e(o2e,D6r),e(b4,G6r),e(b4,PW),e(PW,O6r),e(b4,V6r),e(Ee,X6r),e(Ee,F4),e(F4,r2e),e(r2e,z6r),e(F4,Q6r),e(F4,$W),e($W,W6r),e(F4,H6r),e(Ee,U6r),e(Ee,v4),e(v4,t2e),e(t2e,J6r),e(v4,Y6r),e(v4,IW),e(IW,K6r),e(v4,Z6r),e(Ee,e0r),e(Ee,T4),e(T4,a2e),e(a2e,o0r),e(T4,r0r),e(T4,qW),e(qW,t0r),e(T4,a0r),e(Ee,n0r),e(Ee,M4),e(M4,n2e),e(n2e,s0r),e(M4,l0r),e(M4,NW),e(NW,i0r),e(M4,d0r),e(Ee,c0r),e(Ee,E4),e(E4,s2e),e(s2e,f0r),e(E4,m0r),e(E4,jW),e(jW,g0r),e(E4,h0r),e(Ee,p0r),e(Ee,C4),e(C4,l2e),e(l2e,_0r),e(C4,u0r),e(C4,DW),e(DW,b0r),e(C4,F0r),e(Ee,v0r),e(Ee,w4),e(w4,i2e),e(i2e,T0r),e(w4,M0r),e(w4,GW),e(GW,E0r),e(w4,C0r),e(So,w0r),e(So,d2e),e(d2e,A0r),e(So,y0r),g(_L,So,null),b(c,IBe,u),b(c,hf,u),e(hf,A4),e(A4,c2e),g(uL,c2e,null),e(hf,L0r),e(hf,f2e),e(f2e,x0r),b(c,qBe,u),b(c,qr,u),g(bL,qr,null),e(qr,k0r),e(qr,pf),e(pf,S0r),e(pf,OW),e(OW,R0r),e(pf,B0r),e(pf,VW),e(VW,P0r),e(pf,$0r),e(qr,I0r),e(qr,FL),e(FL,q0r),e(FL,m2e),e(m2e,N0r),e(FL,j0r),e(qr,D0r),e(qr,St),g(vL,St,null),e(St,G0r),e(St,g2e),e(g2e,O0r),e(St,V0r),e(St,_f),e(_f,X0r),e(_f,h2e),e(h2e,z0r),e(_f,Q0r),e(_f,XW),e(XW,W0r),e(_f,H0r),e(St,U0r),e(St,p2e),e(p2e,J0r),e(St,Y0r),g(TL,St,null),e(qr,K0r),e(qr,Ro),g(ML,Ro,null),e(Ro,Z0r),e(Ro,_2e),e(_2e,eyr),e(Ro,oyr),e(Ro,Pn),e(Pn,ryr),e(Pn,u2e),e(u2e,tyr),e(Pn,ayr),e(Pn,b2e),e(b2e,nyr),e(Pn,syr),e(Pn,F2e),e(F2e,lyr),e(Pn,iyr),e(Ro,dyr),e(Ro,Fe),e(Fe,y4),e(y4,v2e),e(v2e,cyr),e(y4,fyr),e(y4,zW),e(zW,myr),e(y4,gyr),e(Fe,hyr),e(Fe,L4),e(L4,T2e),e(T2e,pyr),e(L4,_yr),e(L4,QW),e(QW,uyr),e(L4,byr),e(Fe,Fyr),e(Fe,x4),e(x4,M2e),e(M2e,vyr),e(x4,Tyr),e(x4,WW),e(WW,Myr),e(x4,Eyr),e(Fe,Cyr),e(Fe,k4),e(k4,E2e),e(E2e,wyr),e(k4,Ayr),e(k4,HW),e(HW,yyr),e(k4,Lyr),e(Fe,xyr),e(Fe,S4),e(S4,C2e),e(C2e,kyr),e(S4,Syr),e(S4,UW),e(UW,Ryr),e(S4,Byr),e(Fe,Pyr),e(Fe,R4),e(R4,w2e),e(w2e,$yr),e(R4,Iyr),e(R4,JW),e(JW,qyr),e(R4,Nyr),e(Fe,jyr),e(Fe,B4),e(B4,A2e),e(A2e,Dyr),e(B4,Gyr),e(B4,YW),e(YW,Oyr),e(B4,Vyr),e(Fe,Xyr),e(Fe,P4),e(P4,y2e),e(y2e,zyr),e(P4,Qyr),e(P4,KW),e(KW,Wyr),e(P4,Hyr),e(Fe,Uyr),e(Fe,$4),e($4,L2e),e(L2e,Jyr),e($4,Yyr),e($4,ZW),e(ZW,Kyr),e($4,Zyr),e(Fe,eLr),e(Fe,I4),e(I4,x2e),e(x2e,oLr),e(I4,rLr),e(I4,eH),e(eH,tLr),e(I4,aLr),e(Ro,nLr),e(Ro,k2e),e(k2e,sLr),e(Ro,lLr),g(EL,Ro,null),b(c,NBe,u),b(c,uf,u),e(uf,q4),e(q4,S2e),g(CL,S2e,null),e(uf,iLr),e(uf,R2e),e(R2e,dLr),b(c,jBe,u),b(c,Nr,u),g(wL,Nr,null),e(Nr,cLr),e(Nr,bf),e(bf,fLr),e(bf,oH),e(oH,mLr),e(bf,gLr),e(bf,rH),e(rH,hLr),e(bf,pLr),e(Nr,_Lr),e(Nr,AL),e(AL,uLr),e(AL,B2e),e(B2e,bLr),e(AL,FLr),e(Nr,vLr),e(Nr,Rt),g(yL,Rt,null),e(Rt,TLr),e(Rt,P2e),e(P2e,MLr),e(Rt,ELr),e(Rt,Ff),e(Ff,CLr),e(Ff,$2e),e($2e,wLr),e(Ff,ALr),e(Ff,tH),e(tH,yLr),e(Ff,LLr),e(Rt,xLr),e(Rt,I2e),e(I2e,kLr),e(Rt,SLr),g(LL,Rt,null),e(Nr,RLr),e(Nr,Bo),g(xL,Bo,null),e(Bo,BLr),e(Bo,q2e),e(q2e,PLr),e(Bo,$Lr),e(Bo,$n),e($n,ILr),e($n,N2e),e(N2e,qLr),e($n,NLr),e($n,j2e),e(j2e,jLr),e($n,DLr),e($n,D2e),e(D2e,GLr),e($n,OLr),e(Bo,VLr),e(Bo,ve),e(ve,N4),e(N4,G2e),e(G2e,XLr),e(N4,zLr),e(N4,aH),e(aH,QLr),e(N4,WLr),e(ve,HLr),e(ve,j4),e(j4,O2e),e(O2e,ULr),e(j4,JLr),e(j4,nH),e(nH,YLr),e(j4,KLr),e(ve,ZLr),e(ve,D4),e(D4,V2e),e(V2e,e8r),e(D4,o8r),e(D4,sH),e(sH,r8r),e(D4,t8r),e(ve,a8r),e(ve,G4),e(G4,X2e),e(X2e,n8r),e(G4,s8r),e(G4,lH),e(lH,l8r),e(G4,i8r),e(ve,d8r),e(ve,O4),e(O4,z2e),e(z2e,c8r),e(O4,f8r),e(O4,iH),e(iH,m8r),e(O4,g8r),e(ve,h8r),e(ve,V4),e(V4,Q2e),e(Q2e,p8r),e(V4,_8r),e(V4,dH),e(dH,u8r),e(V4,b8r),e(ve,F8r),e(ve,X4),e(X4,W2e),e(W2e,v8r),e(X4,T8r),e(X4,cH),e(cH,M8r),e(X4,E8r),e(ve,C8r),e(ve,z4),e(z4,H2e),e(H2e,w8r),e(z4,A8r),e(z4,fH),e(fH,y8r),e(z4,L8r),e(ve,x8r),e(ve,Q4),e(Q4,U2e),e(U2e,k8r),e(Q4,S8r),e(Q4,mH),e(mH,R8r),e(Q4,B8r),e(ve,P8r),e(ve,W4),e(W4,J2e),e(J2e,$8r),e(W4,I8r),e(W4,gH),e(gH,q8r),e(W4,N8r),e(Bo,j8r),e(Bo,Y2e),e(Y2e,D8r),e(Bo,G8r),g(kL,Bo,null),b(c,DBe,u),b(c,vf,u),e(vf,H4),e(H4,K2e),g(SL,K2e,null),e(vf,O8r),e(vf,Z2e),e(Z2e,V8r),b(c,GBe,u),b(c,jr,u),g(RL,jr,null),e(jr,X8r),e(jr,Tf),e(Tf,z8r),e(Tf,hH),e(hH,Q8r),e(Tf,W8r),e(Tf,pH),e(pH,H8r),e(Tf,U8r),e(jr,J8r),e(jr,BL),e(BL,Y8r),e(BL,eFe),e(eFe,K8r),e(BL,Z8r),e(jr,e9r),e(jr,Bt),g(PL,Bt,null),e(Bt,o9r),e(Bt,oFe),e(oFe,r9r),e(Bt,t9r),e(Bt,Mf),e(Mf,a9r),e(Mf,rFe),e(rFe,n9r),e(Mf,s9r),e(Mf,_H),e(_H,l9r),e(Mf,i9r),e(Bt,d9r),e(Bt,tFe),e(tFe,c9r),e(Bt,f9r),g($L,Bt,null),e(jr,m9r),e(jr,Po),g(IL,Po,null),e(Po,g9r),e(Po,aFe),e(aFe,h9r),e(Po,p9r),e(Po,In),e(In,_9r),e(In,nFe),e(nFe,u9r),e(In,b9r),e(In,sFe),e(sFe,F9r),e(In,v9r),e(In,lFe),e(lFe,T9r),e(In,M9r),e(Po,E9r),e(Po,Be),e(Be,U4),e(U4,iFe),e(iFe,C9r),e(U4,w9r),e(U4,uH),e(uH,A9r),e(U4,y9r),e(Be,L9r),e(Be,J4),e(J4,dFe),e(dFe,x9r),e(J4,k9r),e(J4,bH),e(bH,S9r),e(J4,R9r),e(Be,B9r),e(Be,Y4),e(Y4,cFe),e(cFe,P9r),e(Y4,$9r),e(Y4,FH),e(FH,I9r),e(Y4,q9r),e(Be,N9r),e(Be,K4),e(K4,fFe),e(fFe,j9r),e(K4,D9r),e(K4,vH),e(vH,G9r),e(K4,O9r),e(Be,V9r),e(Be,Z4),e(Z4,mFe),e(mFe,X9r),e(Z4,z9r),e(Z4,TH),e(TH,Q9r),e(Z4,W9r),e(Be,H9r),e(Be,eE),e(eE,gFe),e(gFe,U9r),e(eE,J9r),e(eE,MH),e(MH,Y9r),e(eE,K9r),e(Be,Z9r),e(Be,oE),e(oE,hFe),e(hFe,exr),e(oE,oxr),e(oE,EH),e(EH,rxr),e(oE,txr),e(Be,axr),e(Be,rE),e(rE,pFe),e(pFe,nxr),e(rE,sxr),e(rE,CH),e(CH,lxr),e(rE,ixr),e(Po,dxr),e(Po,_Fe),e(_Fe,cxr),e(Po,fxr),g(qL,Po,null),b(c,OBe,u),b(c,Ef,u),e(Ef,tE),e(tE,uFe),g(NL,uFe,null),e(Ef,mxr),e(Ef,bFe),e(bFe,gxr),b(c,VBe,u),b(c,Dr,u),g(jL,Dr,null),e(Dr,hxr),e(Dr,Cf),e(Cf,pxr),e(Cf,wH),e(wH,_xr),e(Cf,uxr),e(Cf,AH),e(AH,bxr),e(Cf,Fxr),e(Dr,vxr),e(Dr,DL),e(DL,Txr),e(DL,FFe),e(FFe,Mxr),e(DL,Exr),e(Dr,Cxr),e(Dr,Pt),g(GL,Pt,null),e(Pt,wxr),e(Pt,vFe),e(vFe,Axr),e(Pt,yxr),e(Pt,wf),e(wf,Lxr),e(wf,TFe),e(TFe,xxr),e(wf,kxr),e(wf,yH),e(yH,Sxr),e(wf,Rxr),e(Pt,Bxr),e(Pt,MFe),e(MFe,Pxr),e(Pt,$xr),g(OL,Pt,null),e(Dr,Ixr),e(Dr,$o),g(VL,$o,null),e($o,qxr),e($o,EFe),e(EFe,Nxr),e($o,jxr),e($o,qn),e(qn,Dxr),e(qn,CFe),e(CFe,Gxr),e(qn,Oxr),e(qn,wFe),e(wFe,Vxr),e(qn,Xxr),e(qn,AFe),e(AFe,zxr),e(qn,Qxr),e($o,Wxr),e($o,Pe),e(Pe,aE),e(aE,yFe),e(yFe,Hxr),e(aE,Uxr),e(aE,LH),e(LH,Jxr),e(aE,Yxr),e(Pe,Kxr),e(Pe,nE),e(nE,LFe),e(LFe,Zxr),e(nE,ekr),e(nE,xH),e(xH,okr),e(nE,rkr),e(Pe,tkr),e(Pe,sE),e(sE,xFe),e(xFe,akr),e(sE,nkr),e(sE,kH),e(kH,skr),e(sE,lkr),e(Pe,ikr),e(Pe,lE),e(lE,kFe),e(kFe,dkr),e(lE,ckr),e(lE,SH),e(SH,fkr),e(lE,mkr),e(Pe,gkr),e(Pe,iE),e(iE,SFe),e(SFe,hkr),e(iE,pkr),e(iE,RH),e(RH,_kr),e(iE,ukr),e(Pe,bkr),e(Pe,dE),e(dE,RFe),e(RFe,Fkr),e(dE,vkr),e(dE,BH),e(BH,Tkr),e(dE,Mkr),e(Pe,Ekr),e(Pe,cE),e(cE,BFe),e(BFe,Ckr),e(cE,wkr),e(cE,PH),e(PH,Akr),e(cE,ykr),e(Pe,Lkr),e(Pe,fE),e(fE,PFe),e(PFe,xkr),e(fE,kkr),e(fE,$H),e($H,Skr),e(fE,Rkr),e($o,Bkr),e($o,$Fe),e($Fe,Pkr),e($o,$kr),g(XL,$o,null),b(c,XBe,u),b(c,Af,u),e(Af,mE),e(mE,IFe),g(zL,IFe,null),e(Af,Ikr),e(Af,qFe),e(qFe,qkr),b(c,zBe,u),b(c,Gr,u),g(QL,Gr,null),e(Gr,Nkr),e(Gr,yf),e(yf,jkr),e(yf,IH),e(IH,Dkr),e(yf,Gkr),e(yf,qH),e(qH,Okr),e(yf,Vkr),e(Gr,Xkr),e(Gr,WL),e(WL,zkr),e(WL,NFe),e(NFe,Qkr),e(WL,Wkr),e(Gr,Hkr),e(Gr,$t),g(HL,$t,null),e($t,Ukr),e($t,jFe),e(jFe,Jkr),e($t,Ykr),e($t,Lf),e(Lf,Kkr),e(Lf,DFe),e(DFe,Zkr),e(Lf,eSr),e(Lf,NH),e(NH,oSr),e(Lf,rSr),e($t,tSr),e($t,GFe),e(GFe,aSr),e($t,nSr),g(UL,$t,null),e(Gr,sSr),e(Gr,Io),g(JL,Io,null),e(Io,lSr),e(Io,OFe),e(OFe,iSr),e(Io,dSr),e(Io,Nn),e(Nn,cSr),e(Nn,VFe),e(VFe,fSr),e(Nn,mSr),e(Nn,XFe),e(XFe,gSr),e(Nn,hSr),e(Nn,zFe),e(zFe,pSr),e(Nn,_Sr),e(Io,uSr),e(Io,QFe),e(QFe,gE),e(gE,WFe),e(WFe,bSr),e(gE,FSr),e(gE,jH),e(jH,vSr),e(gE,TSr),e(Io,MSr),e(Io,HFe),e(HFe,ESr),e(Io,CSr),g(YL,Io,null),b(c,QBe,u),b(c,xf,u),e(xf,hE),e(hE,UFe),g(KL,UFe,null),e(xf,wSr),e(xf,JFe),e(JFe,ASr),b(c,WBe,u),b(c,Or,u),g(ZL,Or,null),e(Or,ySr),e(Or,kf),e(kf,LSr),e(kf,DH),e(DH,xSr),e(kf,kSr),e(kf,GH),e(GH,SSr),e(kf,RSr),e(Or,BSr),e(Or,e8),e(e8,PSr),e(e8,YFe),e(YFe,$Sr),e(e8,ISr),e(Or,qSr),e(Or,It),g(o8,It,null),e(It,NSr),e(It,KFe),e(KFe,jSr),e(It,DSr),e(It,Sf),e(Sf,GSr),e(Sf,ZFe),e(ZFe,OSr),e(Sf,VSr),e(Sf,OH),e(OH,XSr),e(Sf,zSr),e(It,QSr),e(It,eve),e(eve,WSr),e(It,HSr),g(r8,It,null),e(Or,USr),e(Or,qo),g(t8,qo,null),e(qo,JSr),e(qo,ove),e(ove,YSr),e(qo,KSr),e(qo,jn),e(jn,ZSr),e(jn,rve),e(rve,eRr),e(jn,oRr),e(jn,tve),e(tve,rRr),e(jn,tRr),e(jn,ave),e(ave,aRr),e(jn,nRr),e(qo,sRr),e(qo,a8),e(a8,pE),e(pE,nve),e(nve,lRr),e(pE,iRr),e(pE,VH),e(VH,dRr),e(pE,cRr),e(a8,fRr),e(a8,_E),e(_E,sve),e(sve,mRr),e(_E,gRr),e(_E,XH),e(XH,hRr),e(_E,pRr),e(qo,_Rr),e(qo,lve),e(lve,uRr),e(qo,bRr),g(n8,qo,null),b(c,HBe,u),b(c,Rf,u),e(Rf,uE),e(uE,ive),g(s8,ive,null),e(Rf,FRr),e(Rf,dve),e(dve,vRr),b(c,UBe,u),b(c,Vr,u),g(l8,Vr,null),e(Vr,TRr),e(Vr,Bf),e(Bf,MRr),e(Bf,zH),e(zH,ERr),e(Bf,CRr),e(Bf,QH),e(QH,wRr),e(Bf,ARr),e(Vr,yRr),e(Vr,i8),e(i8,LRr),e(i8,cve),e(cve,xRr),e(i8,kRr),e(Vr,SRr),e(Vr,qt),g(d8,qt,null),e(qt,RRr),e(qt,fve),e(fve,BRr),e(qt,PRr),e(qt,Pf),e(Pf,$Rr),e(Pf,mve),e(mve,IRr),e(Pf,qRr),e(Pf,WH),e(WH,NRr),e(Pf,jRr),e(qt,DRr),e(qt,gve),e(gve,GRr),e(qt,ORr),g(c8,qt,null),e(Vr,VRr),e(Vr,No),g(f8,No,null),e(No,XRr),e(No,hve),e(hve,zRr),e(No,QRr),e(No,Dn),e(Dn,WRr),e(Dn,pve),e(pve,HRr),e(Dn,URr),e(Dn,_ve),e(_ve,JRr),e(Dn,YRr),e(Dn,uve),e(uve,KRr),e(Dn,ZRr),e(No,eBr),e(No,bve),e(bve,bE),e(bE,Fve),e(Fve,oBr),e(bE,rBr),e(bE,HH),e(HH,tBr),e(bE,aBr),e(No,nBr),e(No,vve),e(vve,sBr),e(No,lBr),g(m8,No,null),JBe=!0},p(c,[u]){const g8={};u&2&&(g8.$$scope={dirty:u,ctx:c}),Of.$set(g8);const Tve={};u&2&&(Tve.$$scope={dirty:u,ctx:c}),Ph.$set(Tve);const Mve={};u&2&&(Mve.$$scope={dirty:u,ctx:c}),zh.$set(Mve)},i(c){JBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(Of.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(OC.$$.fragment,c),h(Ph.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(UC.$$.fragment,c),h(zh.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),JBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(Of.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(OC.$$.fragment,c),p(Ph.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(UC.$$.fragment,c),p(zh.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(C6.$$.fragment,c),p(w6.$$.fragment,c),p(y6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(R6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(q6.$$.fragment,c),p(N6.$$.fragment,c),p(j6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(X6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),JBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(USe),c&&t(Vi),_(MC),c&&t(JSe),c&&t(zn),c&&t(YSe),_(EC,c),c&&t(KSe),c&&t(p9),c&&t(ZSe),_(Of,c),c&&t(eRe),c&&t(Xi),_(CC),c&&t(oRe),c&&t(Qo),_(wC),_(LC),_(xC),_(kC),c&&t(rRe),c&&t(Qi),_(SC),c&&t(tRe),c&&t(Wo),_(RC),_($C),_(IC),_(qC),c&&t(aRe),c&&t(Wi),_(NC),c&&t(nRe),c&&t(Ho),_(jC),_(OC),_(Ph),_(VC),_(XC),c&&t(sRe),c&&t(Hi),_(zC),c&&t(lRe),c&&t(Uo),_(QC),_(UC),_(zh),_(JC),_(YC),c&&t(iRe),c&&t(Ji),_(KC),c&&t(dRe),c&&t(Jo),_(ZC),_(ow),_(rw),_(tw),_(aw),c&&t(cRe),c&&t(Zi),_(nw),c&&t(fRe),c&&t(Yo),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(mRe),c&&t(rd),_(mw),c&&t(gRe),c&&t(Ko),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(hRe),c&&t(nd),_(Fw),c&&t(pRe),c&&t(Zo),_(vw),_(Mw),_(Ew),_(Cw),_(ww),c&&t(_Re),c&&t(id),_(Aw),c&&t(uRe),c&&t(er),_(yw),_(xw),_(kw),_(Sw),_(Rw),c&&t(bRe),c&&t(fd),_(Bw),c&&t(FRe),c&&t(or),_(Pw),_(Iw),_(qw),_(Nw),_(jw),c&&t(vRe),c&&t(hd),_(Dw),c&&t(TRe),c&&t(rr),_(Gw),_(Vw),_(Xw),_(zw),_(Qw),c&&t(MRe),c&&t(ud),_(Ww),c&&t(ERe),c&&t(tr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(CRe),c&&t(vd),_(eA),c&&t(wRe),c&&t(ar),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(ARe),c&&t(Ed),_(lA),c&&t(yRe),c&&t(nr),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(LRe),c&&t(Ad),_(hA),c&&t(xRe),c&&t(sr),_(pA),_(uA),_(bA),_(FA),_(vA),c&&t(kRe),c&&t(xd),_(TA),c&&t(SRe),c&&t(lr),_(MA),_(CA),_(wA),_(AA),_(yA),c&&t(RRe),c&&t(Rd),_(LA),c&&t(BRe),c&&t(ir),_(xA),_(SA),_(RA),_(BA),_(PA),c&&t(PRe),c&&t($d),_($A),c&&t($Re),c&&t(dr),_(IA),_(NA),_(jA),_(DA),_(GA),c&&t(IRe),c&&t(Nd),_(OA),c&&t(qRe),c&&t(cr),_(VA),_(zA),_(QA),_(WA),_(HA),c&&t(NRe),c&&t(Gd),_(UA),c&&t(jRe),c&&t(fr),_(JA),_(KA),_(ZA),_(e6),_(o6),c&&t(DRe),c&&t(Xd),_(r6),c&&t(GRe),c&&t(mr),_(t6),_(n6),_(s6),_(l6),_(d6),c&&t(ORe),c&&t(Wd),_(c6),c&&t(VRe),c&&t(gr),_(f6),_(g6),_(h6),_(p6),_(_6),c&&t(XRe),c&&t(Jd),_(u6),c&&t(zRe),c&&t(hr),_(b6),_(v6),_(T6),_(M6),_(E6),c&&t(QRe),c&&t(ec),_(C6),c&&t(WRe),c&&t(pr),_(w6),_(y6),_(L6),_(x6),_(k6),c&&t(HRe),c&&t(tc),_(S6),c&&t(URe),c&&t(_r),_(R6),_(P6),_($6),_(I6),_(q6),c&&t(JRe),c&&t(sc),_(N6),c&&t(YRe),c&&t(ur),_(j6),_(G6),_(O6),_(V6),_(X6),c&&t(KRe),c&&t(cc),_(z6),c&&t(ZRe),c&&t(br),_(Q6),_(H6),_(U6),_(J6),_(Y6),c&&t(eBe),c&&t(gc),_(K6),c&&t(oBe),c&&t(Fr),_(Z6),_(o0),_(r0),_(t0),_(a0),c&&t(rBe),c&&t(_c),_(n0),c&&t(tBe),c&&t(vr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(aBe),c&&t(Fc),_(m0),c&&t(nBe),c&&t(Tr),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(sBe),c&&t(Mc),_(F0),c&&t(lBe),c&&t(Mr),_(v0),_(M0),_(E0),_(C0),_(A0),c&&t(iBe),c&&t(wc),_(y0),c&&t(dBe),c&&t(Er),_(L0),_(k0),_(S0),_(R0),_(B0),c&&t(cBe),c&&t(Lc),_(P0),c&&t(fBe),c&&t(Cr),_($0),_(q0),_(N0),_(j0),_(D0),c&&t(mBe),c&&t(Sc),_(G0),c&&t(gBe),c&&t(wr),_(O0),_(X0),_(z0),_(Q0),_(W0),c&&t(hBe),c&&t(Pc),_(H0),c&&t(pBe),c&&t(Ar),_(U0),_(Y0),_(K0),_(Z0),_(ey),c&&t(_Be),c&&t(qc),_(oy),c&&t(uBe),c&&t(yr),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(bBe),c&&t(Dc),_(iy),c&&t(FBe),c&&t(Lr),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(vBe),c&&t(Vc),_(py),c&&t(TBe),c&&t(xr),_(_y),_(by),_(Fy),_(vy),_(Ty),c&&t(MBe),c&&t(Qc),_(My),c&&t(EBe),c&&t(kr),_(Ey),_(wy),_(Ay),_(yy),_(Ly),c&&t(CBe),c&&t(Uc),_(xy),c&&t(wBe),c&&t(Sr),_(ky),_(Ry),_(By),_(Py),_($y),c&&t(ABe),c&&t(Kc),_(Iy),c&&t(yBe),c&&t(Rr),_(qy),_(jy),_(Dy),_(Gy),_(Oy),c&&t(LBe),c&&t(of),_(Vy),c&&t(xBe),c&&t(Br),_(Xy),_(Qy),_(Wy),_(Hy),_(Uy),c&&t(kBe),c&&t(af),_(Jy),c&&t(SBe),c&&t(Pr),_(Yy),_(Zy),_(eL),_(oL),_(rL),c&&t(RBe),c&&t(lf),_(tL),c&&t(BBe),c&&t($r),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(PBe),c&&t(ff),_(cL),c&&t($Be),c&&t(Ir),_(fL),_(gL),_(hL),_(pL),_(_L),c&&t(IBe),c&&t(hf),_(uL),c&&t(qBe),c&&t(qr),_(bL),_(vL),_(TL),_(ML),_(EL),c&&t(NBe),c&&t(uf),_(CL),c&&t(jBe),c&&t(Nr),_(wL),_(yL),_(LL),_(xL),_(kL),c&&t(DBe),c&&t(vf),_(SL),c&&t(GBe),c&&t(jr),_(RL),_(PL),_($L),_(IL),_(qL),c&&t(OBe),c&&t(Ef),_(NL),c&&t(VBe),c&&t(Dr),_(jL),_(GL),_(OL),_(VL),_(XL),c&&t(XBe),c&&t(Af),_(zL),c&&t(zBe),c&&t(Gr),_(QL),_(HL),_(UL),_(JL),_(YL),c&&t(QBe),c&&t(xf),_(KL),c&&t(WBe),c&&t(Or),_(ZL),_(o8),_(r8),_(t8),_(n8),c&&t(HBe),c&&t(Rf),_(s8),c&&t(UBe),c&&t(Vr),_(l8),_(d8),_(c8),_(f8),_(m8)}}}const NEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function jEt(If){return BEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zEt extends xEt{constructor(Z){super();kEt(this,Z,jEt,qEt,SEt,{})}}export{zEt as default,NEt as metadata};
